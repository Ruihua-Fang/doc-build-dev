import{S as Zwt,i as e6t,s as o6t,e as a,k as l,w as f,t as o,M as r6t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as t6t}from"../../chunks/vendor-6b77c823.js";import{T as i$r}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function a6t(If){let Z,io,ce,Ce,lo,he,Me,Xo,qi,qf,fa,Ni,ji,SC,Nf,xe,co,Di,On,RC,Vn,Xn,BC,Gi,zn,PC,Oi,jf,Da;return{c(){Z=a("p"),io=o("If your "),ce=a("code"),Ce=o("NewModelConfig"),lo=o(" is a subclass of "),he=a("code"),Me=o("PretrainedConfig"),Xo=o(`, make sure its
`),qi=a("code"),qf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Ni=a("code"),ji=o('"new-model"'),SC=o(")."),Nf=l(),xe=a("p"),co=o("Likewise, if your "),Di=a("code"),On=o("NewModel"),RC=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),BC=o(`, make sure its
`),Gi=a("code"),zn=o("config_class"),PC=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),jf=o("NewModelConfig"),Da=o(")."),this.h()},l(fo){Z=n(fo,"P",{});var ue=s(Z);io=r(ue,"If your "),ce=n(ue,"CODE",{});var E9=s(ce);Ce=r(E9,"NewModelConfig"),E9.forEach(t),lo=r(ue," is a subclass of "),he=n(ue,"CODE",{});var Vi=s(he);Me=r(Vi,"PretrainedConfig"),Vi.forEach(t),Xo=r(ue,`, make sure its
`),qi=n(ue,"CODE",{});var C9=s(qi);qf=r(C9,"model_type"),C9.forEach(t),fa=r(ue," attribute is set to the same key you use when registering the config (here "),Ni=n(ue,"CODE",{});var w9=s(Ni);ji=r(w9,'"new-model"'),w9.forEach(t),SC=r(ue,")."),ue.forEach(t),Nf=i(fo),xe=n(fo,"P",{});var zo=s(xe);co=r(zo,"Likewise, if your "),Di=n(zo,"CODE",{});var Ga=s(Di);On=r(Ga,"NewModel"),Ga.forEach(t),RC=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var A9=s(Vn);Xn=r(A9,"PreTrainedModel"),A9.forEach(t),BC=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Df=s(Gi);zn=r(Df,"config_class"),Df.forEach(t),PC=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var y9=s(Oi);jf=r(y9,"NewModelConfig"),y9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel")},m(fo,ue){b(fo,Z,ue),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo),e(Z,he),e(he,Me),e(Z,Xo),e(Z,qi),e(qi,qf),e(Z,fa),e(Z,Ni),e(Ni,ji),e(Z,SC),b(fo,Nf,ue),b(fo,xe,ue),e(xe,co),e(xe,Di),e(Di,On),e(xe,RC),e(xe,Vn),e(Vn,Xn),e(xe,BC),e(xe,Gi),e(Gi,zn),e(xe,PC),e(xe,Oi),e(Oi,jf),e(xe,Da)},d(fo){fo&&t(Z),fo&&t(Nf),fo&&t(xe)}}}function n6t(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function s6t(If){let Z,io,ce,Ce,lo;return{c(){Z=a("p"),io=o("Passing "),ce=a("code"),Ce=o("use_auth_token=True"),lo=o(" is required when you want to use a private model.")},l(he){Z=n(he,"P",{});var Me=s(Z);io=r(Me,"Passing "),ce=n(Me,"CODE",{});var Xo=s(ce);Ce=r(Xo,"use_auth_token=True"),Xo.forEach(t),lo=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(he,Me){b(he,Z,Me),e(Z,io),e(Z,ce),e(ce,Ce),e(Z,lo)},d(he){he&&t(Z)}}}function l6t(If){let Z,io,ce,Ce,lo,he,Me,Xo,qi,qf,fa,Ni,ji,SC,Nf,xe,co,Di,On,RC,Vn,Xn,BC,Gi,zn,PC,Oi,jf,Da,fo,ue,E9,Vi,C9,w9,zo,Ga,A9,Df,y9,rqe,VRe,Xi,Gf,pY,$C,tqe,_Y,aqe,XRe,Qn,nqe,uY,sqe,lqe,bY,iqe,dqe,zRe,IC,QRe,L9,cqe,WRe,Of,HRe,zi,Vf,vY,qC,fqe,FY,mqe,URe,Qo,NC,gqe,jC,hqe,x9,pqe,_qe,uqe,DC,bqe,TY,vqe,Fqe,Tqe,mo,GC,Mqe,MY,Eqe,Cqe,Qi,wqe,EY,Aqe,yqe,CY,Lqe,xqe,kqe,v,Xf,wY,Sqe,Rqe,k9,Bqe,Pqe,$qe,zf,AY,Iqe,qqe,S9,Nqe,jqe,Dqe,Qf,yY,Gqe,Oqe,R9,Vqe,Xqe,zqe,Wf,LY,Qqe,Wqe,B9,Hqe,Uqe,Jqe,Hf,xY,Yqe,Kqe,P9,Zqe,eNe,oNe,Uf,kY,rNe,tNe,$9,aNe,nNe,sNe,Jf,SY,lNe,iNe,I9,dNe,cNe,fNe,Yf,RY,mNe,gNe,q9,hNe,pNe,_Ne,Kf,BY,uNe,bNe,N9,vNe,FNe,TNe,Zf,PY,MNe,ENe,j9,CNe,wNe,ANe,em,$Y,yNe,LNe,D9,xNe,kNe,SNe,om,IY,RNe,BNe,G9,PNe,$Ne,INe,rm,qY,qNe,NNe,O9,jNe,DNe,GNe,tm,NY,ONe,VNe,V9,XNe,zNe,QNe,am,jY,WNe,HNe,X9,UNe,JNe,YNe,nm,DY,KNe,ZNe,z9,eje,oje,rje,sm,GY,tje,aje,Q9,nje,sje,lje,lm,OY,ije,dje,W9,cje,fje,mje,im,VY,gje,hje,H9,pje,_je,uje,dm,XY,bje,vje,U9,Fje,Tje,Mje,cm,zY,Eje,Cje,J9,wje,Aje,yje,fm,QY,Lje,xje,Y9,kje,Sje,Rje,mm,WY,Bje,Pje,K9,$je,Ije,qje,gm,HY,Nje,jje,Z9,Dje,Gje,Oje,hm,UY,Vje,Xje,ex,zje,Qje,Wje,pm,JY,Hje,Uje,ox,Jje,Yje,Kje,_m,YY,Zje,eDe,rx,oDe,rDe,tDe,um,KY,aDe,nDe,tx,sDe,lDe,iDe,bm,ZY,dDe,cDe,ax,fDe,mDe,gDe,vm,eK,hDe,pDe,nx,_De,uDe,bDe,Fm,oK,vDe,FDe,sx,TDe,MDe,EDe,Tm,rK,CDe,wDe,lx,ADe,yDe,LDe,Mm,tK,xDe,kDe,ix,SDe,RDe,BDe,Em,aK,PDe,$De,dx,IDe,qDe,NDe,Cm,nK,jDe,DDe,cx,GDe,ODe,VDe,wm,sK,XDe,zDe,fx,QDe,WDe,HDe,Am,lK,UDe,JDe,mx,YDe,KDe,ZDe,ym,iK,eGe,oGe,gx,rGe,tGe,aGe,Lm,dK,nGe,sGe,hx,lGe,iGe,dGe,xm,cK,cGe,fGe,px,mGe,gGe,hGe,km,fK,pGe,_Ge,_x,uGe,bGe,vGe,Sm,mK,FGe,TGe,ux,MGe,EGe,CGe,Rm,gK,wGe,AGe,bx,yGe,LGe,xGe,Bm,hK,kGe,SGe,vx,RGe,BGe,PGe,Pm,pK,$Ge,IGe,Fx,qGe,NGe,jGe,$m,_K,DGe,GGe,Tx,OGe,VGe,XGe,Im,uK,zGe,QGe,Mx,WGe,HGe,UGe,qm,bK,JGe,YGe,Ex,KGe,ZGe,eOe,Nm,vK,oOe,rOe,Cx,tOe,aOe,nOe,jm,FK,sOe,lOe,wx,iOe,dOe,cOe,Dm,TK,fOe,mOe,Ax,gOe,hOe,pOe,Gm,MK,_Oe,uOe,yx,bOe,vOe,FOe,Om,EK,TOe,MOe,Lx,EOe,COe,wOe,Vm,CK,AOe,yOe,xx,LOe,xOe,kOe,Xm,wK,SOe,ROe,kx,BOe,POe,$Oe,zm,AK,IOe,qOe,Sx,NOe,jOe,DOe,Qm,yK,GOe,OOe,Rx,VOe,XOe,zOe,Wm,LK,QOe,WOe,Bx,HOe,UOe,JOe,Hm,xK,YOe,KOe,Px,ZOe,eVe,oVe,Um,kK,rVe,tVe,$x,aVe,nVe,sVe,Jm,SK,lVe,iVe,Ix,dVe,cVe,fVe,Ym,RK,mVe,gVe,qx,hVe,pVe,_Ve,Km,BK,uVe,bVe,Nx,vVe,FVe,TVe,Zm,PK,MVe,EVe,jx,CVe,wVe,AVe,eg,$K,yVe,LVe,Dx,xVe,kVe,SVe,og,IK,RVe,BVe,Gx,PVe,$Ve,IVe,rg,qK,qVe,NVe,Ox,jVe,DVe,GVe,tg,NK,OVe,VVe,Vx,XVe,zVe,QVe,ag,jK,WVe,HVe,Xx,UVe,JVe,YVe,ng,DK,KVe,ZVe,zx,eXe,oXe,rXe,sg,GK,tXe,aXe,Qx,nXe,sXe,lXe,lg,OK,iXe,dXe,Wx,cXe,fXe,mXe,ig,VK,gXe,hXe,Hx,pXe,_Xe,uXe,dg,XK,bXe,vXe,Ux,FXe,TXe,MXe,cg,zK,EXe,CXe,Jx,wXe,AXe,yXe,fg,QK,LXe,xXe,Yx,kXe,SXe,RXe,mg,WK,BXe,PXe,Kx,$Xe,IXe,qXe,gg,HK,NXe,jXe,Zx,DXe,GXe,OXe,hg,UK,VXe,XXe,ek,zXe,QXe,WXe,pg,JK,HXe,UXe,ok,JXe,YXe,KXe,_g,YK,ZXe,eze,rk,oze,rze,tze,ug,KK,aze,nze,tk,sze,lze,ize,bg,ZK,dze,cze,ak,fze,mze,gze,vg,eZ,hze,pze,nk,_ze,uze,bze,Fg,oZ,vze,Fze,sk,Tze,Mze,Eze,Tg,rZ,Cze,wze,lk,Aze,yze,Lze,Mg,tZ,xze,kze,ik,Sze,Rze,Bze,Eg,aZ,Pze,$ze,dk,Ize,qze,Nze,Cg,nZ,jze,Dze,ck,Gze,Oze,Vze,wg,sZ,Xze,zze,fk,Qze,Wze,Hze,Ag,lZ,Uze,Jze,mk,Yze,Kze,Zze,yg,iZ,eQe,oQe,gk,rQe,tQe,aQe,Lg,dZ,nQe,sQe,hk,lQe,iQe,dQe,xg,cZ,cQe,fQe,pk,mQe,gQe,hQe,kg,fZ,pQe,_Qe,_k,uQe,bQe,vQe,Sg,mZ,FQe,TQe,uk,MQe,EQe,CQe,Rg,gZ,wQe,AQe,bk,yQe,LQe,xQe,Bg,hZ,kQe,SQe,vk,RQe,BQe,PQe,Pg,pZ,$Qe,IQe,Fk,qQe,NQe,jQe,$g,_Z,DQe,GQe,Tk,OQe,VQe,XQe,Ig,uZ,zQe,QQe,Mk,WQe,HQe,UQe,qg,bZ,JQe,YQe,Ek,KQe,ZQe,eWe,Ng,vZ,oWe,rWe,Ck,tWe,aWe,nWe,FZ,sWe,lWe,OC,iWe,jg,VC,dWe,TZ,cWe,JRe,Wi,Dg,MZ,XC,fWe,EZ,mWe,YRe,Wo,zC,gWe,QC,hWe,wk,pWe,_We,uWe,WC,bWe,CZ,vWe,FWe,TWe,go,HC,MWe,wZ,EWe,CWe,Oa,wWe,AZ,AWe,yWe,yZ,LWe,xWe,LZ,kWe,SWe,RWe,E,Wn,xZ,BWe,PWe,Ak,$We,IWe,yk,qWe,NWe,jWe,Hn,kZ,DWe,GWe,Lk,OWe,VWe,xk,XWe,zWe,QWe,Un,SZ,WWe,HWe,kk,UWe,JWe,Sk,YWe,KWe,ZWe,Gg,RZ,eHe,oHe,Rk,rHe,tHe,aHe,Jn,BZ,nHe,sHe,Bk,lHe,iHe,Pk,dHe,cHe,fHe,Og,PZ,mHe,gHe,$k,hHe,pHe,_He,Vg,$Z,uHe,bHe,Ik,vHe,FHe,THe,Xg,IZ,MHe,EHe,qk,CHe,wHe,AHe,Yn,qZ,yHe,LHe,Nk,xHe,kHe,jk,SHe,RHe,BHe,Kn,NZ,PHe,$He,Dk,IHe,qHe,Gk,NHe,jHe,DHe,Zn,jZ,GHe,OHe,Ok,VHe,XHe,Vk,zHe,QHe,WHe,zg,DZ,HHe,UHe,Xk,JHe,YHe,KHe,Qg,GZ,ZHe,eUe,zk,oUe,rUe,tUe,es,OZ,aUe,nUe,Qk,sUe,lUe,Wk,iUe,dUe,cUe,Wg,VZ,fUe,mUe,Hk,gUe,hUe,pUe,os,XZ,_Ue,uUe,Uk,bUe,vUe,Jk,FUe,TUe,MUe,rs,zZ,EUe,CUe,Yk,wUe,AUe,Kk,yUe,LUe,xUe,ts,QZ,kUe,SUe,Zk,RUe,BUe,WZ,PUe,$Ue,IUe,Hg,HZ,qUe,NUe,eS,jUe,DUe,GUe,as,UZ,OUe,VUe,oS,XUe,zUe,rS,QUe,WUe,HUe,Ug,JZ,UUe,JUe,tS,YUe,KUe,ZUe,ns,YZ,eJe,oJe,aS,rJe,tJe,nS,aJe,nJe,sJe,ss,KZ,lJe,iJe,sS,dJe,cJe,lS,fJe,mJe,gJe,ls,ZZ,hJe,pJe,iS,_Je,uJe,dS,bJe,vJe,FJe,Jg,eee,TJe,MJe,cS,EJe,CJe,wJe,Yg,oee,AJe,yJe,fS,LJe,xJe,kJe,is,ree,SJe,RJe,mS,BJe,PJe,gS,$Je,IJe,qJe,Kg,tee,NJe,jJe,hS,DJe,GJe,OJe,ds,aee,VJe,XJe,pS,zJe,QJe,_S,WJe,HJe,UJe,cs,nee,JJe,YJe,uS,KJe,ZJe,bS,eYe,oYe,rYe,fs,see,tYe,aYe,vS,nYe,sYe,FS,lYe,iYe,dYe,ms,lee,cYe,fYe,TS,mYe,gYe,MS,hYe,pYe,_Ye,Zg,iee,uYe,bYe,ES,vYe,FYe,TYe,gs,dee,MYe,EYe,CS,CYe,wYe,wS,AYe,yYe,LYe,hs,cee,xYe,kYe,AS,SYe,RYe,yS,BYe,PYe,$Ye,ps,fee,IYe,qYe,LS,NYe,jYe,xS,DYe,GYe,OYe,_s,mee,VYe,XYe,kS,zYe,QYe,SS,WYe,HYe,UYe,us,gee,JYe,YYe,RS,KYe,ZYe,BS,eKe,oKe,rKe,bs,hee,tKe,aKe,PS,nKe,sKe,$S,lKe,iKe,dKe,eh,pee,cKe,fKe,IS,mKe,gKe,hKe,vs,_ee,pKe,_Ke,qS,uKe,bKe,NS,vKe,FKe,TKe,oh,uee,MKe,EKe,jS,CKe,wKe,AKe,rh,bee,yKe,LKe,DS,xKe,kKe,SKe,Fs,vee,RKe,BKe,GS,PKe,$Ke,OS,IKe,qKe,NKe,Ts,Fee,jKe,DKe,VS,GKe,OKe,XS,VKe,XKe,zKe,th,Tee,QKe,WKe,zS,HKe,UKe,JKe,Ms,Mee,YKe,KKe,QS,ZKe,eZe,WS,oZe,rZe,tZe,Es,Eee,aZe,nZe,HS,sZe,lZe,US,iZe,dZe,cZe,Cs,Cee,fZe,mZe,JS,gZe,hZe,YS,pZe,_Ze,uZe,ws,wee,bZe,vZe,KS,FZe,TZe,ZS,MZe,EZe,CZe,As,Aee,wZe,AZe,eR,yZe,LZe,oR,xZe,kZe,SZe,ah,yee,RZe,BZe,rR,PZe,$Ze,IZe,nh,Lee,qZe,NZe,tR,jZe,DZe,GZe,sh,xee,OZe,VZe,aR,XZe,zZe,QZe,lh,kee,WZe,HZe,nR,UZe,JZe,YZe,ys,See,KZe,ZZe,sR,eeo,oeo,lR,reo,teo,aeo,ih,Ree,neo,seo,iR,leo,ieo,deo,Ls,Bee,ceo,feo,dR,meo,geo,cR,heo,peo,_eo,xs,Pee,ueo,beo,fR,veo,Feo,mR,Teo,Meo,Eeo,ks,$ee,Ceo,weo,gR,Aeo,yeo,hR,Leo,xeo,keo,Ss,Iee,Seo,Reo,pR,Beo,Peo,_R,$eo,Ieo,qeo,Rs,qee,Neo,jeo,uR,Deo,Geo,bR,Oeo,Veo,Xeo,Bs,Nee,zeo,Qeo,vR,Weo,Heo,FR,Ueo,Jeo,Yeo,dh,jee,Keo,Zeo,TR,eoo,ooo,roo,ch,Dee,too,aoo,MR,noo,soo,loo,Ps,Gee,ioo,doo,ER,coo,foo,CR,moo,goo,hoo,$s,Oee,poo,_oo,wR,uoo,boo,AR,voo,Foo,Too,Is,Vee,Moo,Eoo,yR,Coo,woo,LR,Aoo,yoo,Loo,fh,Xee,xoo,koo,xR,Soo,Roo,Boo,mh,zee,Poo,$oo,kR,Ioo,qoo,Noo,gh,Qee,joo,Doo,SR,Goo,Ooo,Voo,hh,Wee,Xoo,zoo,RR,Qoo,Woo,Hoo,ph,Hee,Uoo,Joo,BR,Yoo,Koo,Zoo,qs,Uee,ero,oro,PR,rro,tro,$R,aro,nro,sro,_h,Jee,lro,iro,IR,dro,cro,fro,uh,Yee,mro,gro,qR,hro,pro,_ro,Ns,Kee,uro,bro,NR,vro,Fro,jR,Tro,Mro,Ero,js,Zee,Cro,wro,DR,Aro,yro,GR,Lro,xro,kro,eoe,Sro,Rro,UC,Bro,bh,JC,Pro,ooe,$ro,KRe,Hi,vh,roe,YC,Iro,toe,qro,ZRe,Ho,KC,Nro,ZC,jro,OR,Dro,Gro,Oro,ew,Vro,aoe,Xro,zro,Qro,$e,ow,Wro,noe,Hro,Uro,Va,Jro,soe,Yro,Kro,loe,Zro,eto,ioe,oto,rto,tto,ee,Fh,doe,ato,nto,VR,sto,lto,ito,Th,coe,dto,cto,XR,fto,mto,gto,Mh,foe,hto,pto,zR,_to,uto,bto,Eh,moe,vto,Fto,QR,Tto,Mto,Eto,Ch,goe,Cto,wto,WR,Ato,yto,Lto,wh,hoe,xto,kto,HR,Sto,Rto,Bto,Ah,poe,Pto,$to,UR,Ito,qto,Nto,yh,_oe,jto,Dto,JR,Gto,Oto,Vto,Lh,uoe,Xto,zto,YR,Qto,Wto,Hto,xh,boe,Uto,Jto,KR,Yto,Kto,Zto,kh,voe,eao,oao,ZR,rao,tao,aao,Sh,Foe,nao,sao,eB,lao,iao,dao,Rh,Toe,cao,fao,oB,mao,gao,hao,Bh,Moe,pao,_ao,rB,uao,bao,vao,Ph,Eoe,Fao,Tao,tB,Mao,Eao,Cao,$h,Coe,wao,Aao,aB,yao,Lao,xao,Ih,woe,kao,Sao,nB,Rao,Bao,Pao,qh,Aoe,$ao,Iao,sB,qao,Nao,jao,Nh,yoe,Dao,Gao,lB,Oao,Vao,Xao,jh,zao,Loe,Qao,Wao,rw,Hao,Dh,tw,Uao,xoe,Jao,eBe,Ui,Gh,koe,aw,Yao,Soe,Kao,oBe,Uo,nw,Zao,sw,eno,iB,ono,rno,tno,lw,ano,Roe,nno,sno,lno,Ie,iw,ino,Boe,dno,cno,Ji,fno,Poe,mno,gno,$oe,hno,pno,_no,ke,Oh,Ioe,uno,bno,dB,vno,Fno,Tno,Vh,qoe,Mno,Eno,cB,Cno,wno,Ano,Xh,Noe,yno,Lno,fB,xno,kno,Sno,zh,joe,Rno,Bno,mB,Pno,$no,Ino,Qh,Doe,qno,Nno,gB,jno,Dno,Gno,Wh,Goe,Ono,Vno,hB,Xno,zno,Qno,Hh,Ooe,Wno,Hno,pB,Uno,Jno,Yno,Uh,Voe,Kno,Zno,_B,eso,oso,rso,Jh,tso,Xoe,aso,nso,dw,sso,Yh,cw,lso,zoe,iso,rBe,Yi,Kh,Qoe,fw,dso,Woe,cso,tBe,Jo,mw,fso,Ki,mso,uB,gso,hso,bB,pso,_so,uso,gw,bso,Hoe,vso,Fso,Tso,Xr,hw,Mso,Uoe,Eso,Cso,Zi,wso,Joe,Aso,yso,vB,Lso,xso,kso,Yoe,Sso,Rso,pw,Bso,qe,_w,Pso,Koe,$so,Iso,Xa,qso,Zoe,Nso,jso,ere,Dso,Gso,ore,Oso,Vso,Xso,T,Zh,rre,zso,Qso,FB,Wso,Hso,Uso,ep,tre,Jso,Yso,TB,Kso,Zso,elo,op,are,olo,rlo,MB,tlo,alo,nlo,rp,nre,slo,llo,EB,ilo,dlo,clo,tp,sre,flo,mlo,CB,glo,hlo,plo,ap,lre,_lo,ulo,wB,blo,vlo,Flo,np,ire,Tlo,Mlo,AB,Elo,Clo,wlo,sp,dre,Alo,ylo,yB,Llo,xlo,klo,lp,cre,Slo,Rlo,LB,Blo,Plo,$lo,ip,fre,Ilo,qlo,xB,Nlo,jlo,Dlo,dp,mre,Glo,Olo,kB,Vlo,Xlo,zlo,cp,gre,Qlo,Wlo,SB,Hlo,Ulo,Jlo,fp,hre,Ylo,Klo,RB,Zlo,eio,oio,mp,pre,rio,tio,BB,aio,nio,sio,gp,_re,lio,iio,PB,dio,cio,fio,hp,ure,mio,gio,$B,hio,pio,_io,pp,bre,uio,bio,IB,vio,Fio,Tio,_p,vre,Mio,Eio,qB,Cio,wio,Aio,up,Fre,yio,Lio,NB,xio,kio,Sio,bp,Tre,Rio,Bio,jB,Pio,$io,Iio,vp,Mre,qio,Nio,DB,jio,Dio,Gio,Fp,Ere,Oio,Vio,GB,Xio,zio,Qio,Tp,Cre,Wio,Hio,OB,Uio,Jio,Yio,Mp,wre,Kio,Zio,VB,edo,odo,rdo,Ep,Are,tdo,ado,XB,ndo,sdo,ldo,Cp,yre,ido,ddo,zB,cdo,fdo,mdo,wp,Lre,gdo,hdo,QB,pdo,_do,udo,Ap,xre,bdo,vdo,WB,Fdo,Tdo,Mdo,yp,kre,Edo,Cdo,HB,wdo,Ado,ydo,Lp,Sre,Ldo,xdo,UB,kdo,Sdo,Rdo,xp,Rre,Bdo,Pdo,JB,$do,Ido,qdo,Ds,Bre,Ndo,jdo,YB,Ddo,Gdo,KB,Odo,Vdo,Xdo,kp,Pre,zdo,Qdo,ZB,Wdo,Hdo,Udo,Sp,$re,Jdo,Ydo,eP,Kdo,Zdo,eco,Rp,Ire,oco,rco,oP,tco,aco,nco,Bp,qre,sco,lco,rP,ico,dco,cco,Pp,Nre,fco,mco,tP,gco,hco,pco,$p,jre,_co,uco,aP,bco,vco,Fco,Ip,Dre,Tco,Mco,nP,Eco,Cco,wco,qp,Gre,Aco,yco,sP,Lco,xco,kco,Np,Ore,Sco,Rco,lP,Bco,Pco,$co,jp,Vre,Ico,qco,iP,Nco,jco,Dco,Dp,Xre,Gco,Oco,dP,Vco,Xco,zco,Gp,zre,Qco,Wco,cP,Hco,Uco,Jco,Op,Qre,Yco,Kco,fP,Zco,efo,ofo,Vp,Wre,rfo,tfo,mP,afo,nfo,sfo,Xp,Hre,lfo,ifo,gP,dfo,cfo,ffo,zp,Ure,mfo,gfo,hP,hfo,pfo,_fo,Qp,Jre,ufo,bfo,pP,vfo,Ffo,Tfo,Wp,Yre,Mfo,Efo,_P,Cfo,wfo,Afo,Hp,Kre,yfo,Lfo,uP,xfo,kfo,Sfo,Up,Zre,Rfo,Bfo,bP,Pfo,$fo,Ifo,Jp,ete,qfo,Nfo,vP,jfo,Dfo,Gfo,Yp,ote,Ofo,Vfo,FP,Xfo,zfo,Qfo,Kp,rte,Wfo,Hfo,TP,Ufo,Jfo,Yfo,Zp,tte,Kfo,Zfo,MP,emo,omo,rmo,e_,ate,tmo,amo,EP,nmo,smo,lmo,o_,nte,imo,dmo,CP,cmo,fmo,mmo,r_,ste,gmo,hmo,wP,pmo,_mo,umo,t_,lte,bmo,vmo,AP,Fmo,Tmo,Mmo,a_,ite,Emo,Cmo,yP,wmo,Amo,ymo,n_,dte,Lmo,xmo,LP,kmo,Smo,Rmo,s_,cte,Bmo,Pmo,xP,$mo,Imo,qmo,l_,fte,Nmo,jmo,kP,Dmo,Gmo,Omo,i_,mte,Vmo,Xmo,SP,zmo,Qmo,Wmo,d_,gte,Hmo,Umo,RP,Jmo,Ymo,Kmo,c_,hte,Zmo,ego,BP,ogo,rgo,tgo,f_,pte,ago,ngo,PP,sgo,lgo,igo,m_,_te,dgo,cgo,$P,fgo,mgo,ggo,g_,ute,hgo,pgo,IP,_go,ugo,bgo,h_,bte,vgo,Fgo,qP,Tgo,Mgo,Ego,p_,vte,Cgo,wgo,NP,Ago,ygo,Lgo,__,Fte,xgo,kgo,jP,Sgo,Rgo,Bgo,u_,Tte,Pgo,$go,DP,Igo,qgo,Ngo,b_,Mte,jgo,Dgo,GP,Ggo,Ogo,Vgo,v_,Ete,Xgo,zgo,OP,Qgo,Wgo,Hgo,F_,Cte,Ugo,Jgo,VP,Ygo,Kgo,Zgo,T_,wte,eho,oho,XP,rho,tho,aho,M_,Ate,nho,sho,zP,lho,iho,dho,E_,yte,cho,fho,QP,mho,gho,hho,C_,Lte,pho,_ho,WP,uho,bho,vho,w_,xte,Fho,Tho,HP,Mho,Eho,Cho,A_,kte,who,Aho,UP,yho,Lho,xho,y_,Ste,kho,Sho,JP,Rho,Bho,Pho,L_,Rte,$ho,Iho,YP,qho,Nho,jho,x_,Bte,Dho,Gho,KP,Oho,Vho,Xho,k_,Pte,zho,Qho,ZP,Who,Hho,Uho,S_,$te,Jho,Yho,e$,Kho,Zho,epo,R_,Ite,opo,rpo,o$,tpo,apo,npo,B_,qte,spo,lpo,r$,ipo,dpo,cpo,P_,Nte,fpo,mpo,t$,gpo,hpo,ppo,$_,jte,_po,upo,a$,bpo,vpo,Fpo,I_,Dte,Tpo,Mpo,n$,Epo,Cpo,wpo,q_,Gte,Apo,ypo,s$,Lpo,xpo,kpo,N_,Ote,Spo,Rpo,l$,Bpo,Ppo,$po,j_,Ipo,Vte,qpo,Npo,Xte,jpo,Dpo,zte,Gpo,Opo,uw,aBe,ed,D_,Qte,bw,Vpo,Wte,Xpo,nBe,Yo,vw,zpo,od,Qpo,i$,Wpo,Hpo,d$,Upo,Jpo,Ypo,Fw,Kpo,Hte,Zpo,e_o,o_o,zr,Tw,r_o,Ute,t_o,a_o,rd,n_o,Jte,s_o,l_o,c$,i_o,d_o,c_o,Yte,f_o,m_o,Mw,g_o,Ne,Ew,h_o,Kte,p_o,__o,za,u_o,Zte,b_o,v_o,eae,F_o,T_o,oae,M_o,E_o,C_o,S,G_,rae,w_o,A_o,f$,y_o,L_o,x_o,O_,tae,k_o,S_o,m$,R_o,B_o,P_o,V_,aae,$_o,I_o,g$,q_o,N_o,j_o,X_,nae,D_o,G_o,h$,O_o,V_o,X_o,z_,sae,z_o,Q_o,p$,W_o,H_o,U_o,Q_,lae,J_o,Y_o,_$,K_o,Z_o,euo,W_,iae,ouo,ruo,u$,tuo,auo,nuo,H_,dae,suo,luo,b$,iuo,duo,cuo,U_,cae,fuo,muo,v$,guo,huo,puo,J_,fae,_uo,uuo,F$,buo,vuo,Fuo,Y_,mae,Tuo,Muo,T$,Euo,Cuo,wuo,K_,gae,Auo,yuo,M$,Luo,xuo,kuo,Z_,hae,Suo,Ruo,E$,Buo,Puo,$uo,eu,pae,Iuo,quo,C$,Nuo,juo,Duo,ou,_ae,Guo,Ouo,w$,Vuo,Xuo,zuo,ru,uae,Quo,Wuo,A$,Huo,Uuo,Juo,tu,bae,Yuo,Kuo,y$,Zuo,e1o,o1o,au,vae,r1o,t1o,L$,a1o,n1o,s1o,nu,Fae,l1o,i1o,x$,d1o,c1o,f1o,su,Tae,m1o,g1o,k$,h1o,p1o,_1o,lu,Mae,u1o,b1o,S$,v1o,F1o,T1o,iu,Eae,M1o,E1o,R$,C1o,w1o,A1o,du,Cae,y1o,L1o,B$,x1o,k1o,S1o,cu,wae,R1o,B1o,P$,P1o,$1o,I1o,fu,Aae,q1o,N1o,$$,j1o,D1o,G1o,mu,yae,O1o,V1o,I$,X1o,z1o,Q1o,gu,Lae,W1o,H1o,q$,U1o,J1o,Y1o,hu,xae,K1o,Z1o,N$,e7o,o7o,r7o,pu,kae,t7o,a7o,j$,n7o,s7o,l7o,_u,Sae,i7o,d7o,D$,c7o,f7o,m7o,uu,Rae,g7o,h7o,G$,p7o,_7o,u7o,bu,Bae,b7o,v7o,O$,F7o,T7o,M7o,vu,Pae,E7o,C7o,V$,w7o,A7o,y7o,Fu,$ae,L7o,x7o,X$,k7o,S7o,R7o,Tu,Iae,B7o,P7o,z$,$7o,I7o,q7o,Mu,qae,N7o,j7o,Q$,D7o,G7o,O7o,Eu,Nae,V7o,X7o,W$,z7o,Q7o,W7o,Cu,jae,H7o,U7o,H$,J7o,Y7o,K7o,wu,Dae,Z7o,ebo,U$,obo,rbo,tbo,Au,abo,Gae,nbo,sbo,Oae,lbo,ibo,Vae,dbo,cbo,Cw,sBe,td,yu,Xae,ww,fbo,zae,mbo,lBe,Ko,Aw,gbo,ad,hbo,J$,pbo,_bo,Y$,ubo,bbo,vbo,yw,Fbo,Qae,Tbo,Mbo,Ebo,Qr,Lw,Cbo,Wae,wbo,Abo,nd,ybo,Hae,Lbo,xbo,K$,kbo,Sbo,Rbo,Uae,Bbo,Pbo,xw,$bo,je,kw,Ibo,Jae,qbo,Nbo,Qa,jbo,Yae,Dbo,Gbo,Kae,Obo,Vbo,Zae,Xbo,zbo,Qbo,$,Lu,ene,Wbo,Hbo,Z$,Ubo,Jbo,Ybo,xu,one,Kbo,Zbo,eI,e2o,o2o,r2o,ku,rne,t2o,a2o,oI,n2o,s2o,l2o,Su,tne,i2o,d2o,rI,c2o,f2o,m2o,Ru,ane,g2o,h2o,tI,p2o,_2o,u2o,Bu,nne,b2o,v2o,aI,F2o,T2o,M2o,Pu,sne,E2o,C2o,nI,w2o,A2o,y2o,$u,lne,L2o,x2o,sI,k2o,S2o,R2o,Iu,ine,B2o,P2o,lI,$2o,I2o,q2o,qu,dne,N2o,j2o,iI,D2o,G2o,O2o,Nu,cne,V2o,X2o,dI,z2o,Q2o,W2o,ju,fne,H2o,U2o,cI,J2o,Y2o,K2o,Du,mne,Z2o,e5o,fI,o5o,r5o,t5o,Gu,gne,a5o,n5o,mI,s5o,l5o,i5o,Ou,hne,d5o,c5o,gI,f5o,m5o,g5o,Vu,pne,h5o,p5o,hI,_5o,u5o,b5o,Xu,_ne,v5o,F5o,pI,T5o,M5o,E5o,zu,une,C5o,w5o,_I,A5o,y5o,L5o,Qu,bne,x5o,k5o,uI,S5o,R5o,B5o,Wu,vne,P5o,$5o,bI,I5o,q5o,N5o,Hu,Fne,j5o,D5o,vI,G5o,O5o,V5o,Uu,Tne,X5o,z5o,FI,Q5o,W5o,H5o,Ju,Mne,U5o,J5o,TI,Y5o,K5o,Z5o,Yu,Ene,e3o,o3o,MI,r3o,t3o,a3o,Ku,Cne,n3o,s3o,EI,l3o,i3o,d3o,Zu,wne,c3o,f3o,CI,m3o,g3o,h3o,e1,Ane,p3o,_3o,wI,u3o,b3o,v3o,o1,yne,F3o,T3o,AI,M3o,E3o,C3o,r1,Lne,w3o,A3o,yI,y3o,L3o,x3o,t1,xne,k3o,S3o,LI,R3o,B3o,P3o,a1,kne,$3o,I3o,xI,q3o,N3o,j3o,n1,Sne,D3o,G3o,kI,O3o,V3o,X3o,s1,Rne,z3o,Q3o,SI,W3o,H3o,U3o,l1,Bne,J3o,Y3o,RI,K3o,Z3o,evo,i1,Pne,ovo,rvo,BI,tvo,avo,nvo,d1,svo,$ne,lvo,ivo,Ine,dvo,cvo,qne,fvo,mvo,Sw,iBe,sd,c1,Nne,Rw,gvo,jne,hvo,dBe,Zo,Bw,pvo,ld,_vo,PI,uvo,bvo,$I,vvo,Fvo,Tvo,Pw,Mvo,Dne,Evo,Cvo,wvo,Wr,$w,Avo,Gne,yvo,Lvo,id,xvo,One,kvo,Svo,II,Rvo,Bvo,Pvo,Vne,$vo,Ivo,Iw,qvo,De,qw,Nvo,Xne,jvo,Dvo,Wa,Gvo,zne,Ovo,Vvo,Qne,Xvo,zvo,Wne,Qvo,Wvo,Hvo,I,f1,Hne,Uvo,Jvo,qI,Yvo,Kvo,Zvo,m1,Une,eFo,oFo,NI,rFo,tFo,aFo,g1,Jne,nFo,sFo,jI,lFo,iFo,dFo,h1,Yne,cFo,fFo,DI,mFo,gFo,hFo,p1,Kne,pFo,_Fo,GI,uFo,bFo,vFo,_1,Zne,FFo,TFo,OI,MFo,EFo,CFo,u1,ese,wFo,AFo,VI,yFo,LFo,xFo,b1,ose,kFo,SFo,XI,RFo,BFo,PFo,v1,rse,$Fo,IFo,zI,qFo,NFo,jFo,F1,tse,DFo,GFo,QI,OFo,VFo,XFo,T1,ase,zFo,QFo,WI,WFo,HFo,UFo,M1,nse,JFo,YFo,HI,KFo,ZFo,eTo,E1,sse,oTo,rTo,UI,tTo,aTo,nTo,C1,lse,sTo,lTo,JI,iTo,dTo,cTo,w1,ise,fTo,mTo,YI,gTo,hTo,pTo,A1,dse,_To,uTo,KI,bTo,vTo,FTo,y1,cse,TTo,MTo,ZI,ETo,CTo,wTo,L1,fse,ATo,yTo,eq,LTo,xTo,kTo,x1,mse,STo,RTo,oq,BTo,PTo,$To,k1,gse,ITo,qTo,rq,NTo,jTo,DTo,S1,hse,GTo,OTo,tq,VTo,XTo,zTo,R1,pse,QTo,WTo,aq,HTo,UTo,JTo,B1,_se,YTo,KTo,nq,ZTo,eMo,oMo,P1,use,rMo,tMo,sq,aMo,nMo,sMo,$1,bse,lMo,iMo,lq,dMo,cMo,fMo,I1,vse,mMo,gMo,iq,hMo,pMo,_Mo,q1,Fse,uMo,bMo,dq,vMo,FMo,TMo,N1,Tse,MMo,EMo,cq,CMo,wMo,AMo,j1,Mse,yMo,LMo,fq,xMo,kMo,SMo,D1,Ese,RMo,BMo,mq,PMo,$Mo,IMo,G1,Cse,qMo,NMo,wse,jMo,DMo,GMo,O1,Ase,OMo,VMo,gq,XMo,zMo,QMo,V1,yse,WMo,HMo,hq,UMo,JMo,YMo,X1,Lse,KMo,ZMo,pq,e4o,o4o,r4o,z1,xse,t4o,a4o,_q,n4o,s4o,l4o,Q1,i4o,kse,d4o,c4o,Sse,f4o,m4o,Rse,g4o,h4o,Nw,cBe,dd,W1,Bse,jw,p4o,Pse,_4o,fBe,er,Dw,u4o,cd,b4o,uq,v4o,F4o,bq,T4o,M4o,E4o,Gw,C4o,$se,w4o,A4o,y4o,Hr,Ow,L4o,Ise,x4o,k4o,fd,S4o,qse,R4o,B4o,vq,P4o,$4o,I4o,Nse,q4o,N4o,Vw,j4o,Ge,Xw,D4o,jse,G4o,O4o,Ha,V4o,Dse,X4o,z4o,Gse,Q4o,W4o,Ose,H4o,U4o,J4o,ne,H1,Vse,Y4o,K4o,Fq,Z4o,eEo,oEo,U1,Xse,rEo,tEo,Tq,aEo,nEo,sEo,J1,zse,lEo,iEo,Mq,dEo,cEo,fEo,Y1,Qse,mEo,gEo,Eq,hEo,pEo,_Eo,K1,Wse,uEo,bEo,Cq,vEo,FEo,TEo,Z1,Hse,MEo,EEo,wq,CEo,wEo,AEo,e7,Use,yEo,LEo,Aq,xEo,kEo,SEo,o7,Jse,REo,BEo,yq,PEo,$Eo,IEo,r7,Yse,qEo,NEo,Lq,jEo,DEo,GEo,t7,Kse,OEo,VEo,xq,XEo,zEo,QEo,a7,Zse,WEo,HEo,kq,UEo,JEo,YEo,n7,ele,KEo,ZEo,Sq,eCo,oCo,rCo,s7,ole,tCo,aCo,Rq,nCo,sCo,lCo,l7,rle,iCo,dCo,Bq,cCo,fCo,mCo,i7,tle,gCo,hCo,Pq,pCo,_Co,uCo,d7,ale,bCo,vCo,$q,FCo,TCo,MCo,c7,nle,ECo,CCo,Iq,wCo,ACo,yCo,f7,LCo,sle,xCo,kCo,lle,SCo,RCo,ile,BCo,PCo,zw,mBe,md,m7,dle,Qw,$Co,cle,ICo,gBe,or,Ww,qCo,gd,NCo,qq,jCo,DCo,Nq,GCo,OCo,VCo,Hw,XCo,fle,zCo,QCo,WCo,Ur,Uw,HCo,mle,UCo,JCo,hd,YCo,gle,KCo,ZCo,jq,ewo,owo,rwo,hle,two,awo,Jw,nwo,Oe,Yw,swo,ple,lwo,iwo,Ua,dwo,_le,cwo,fwo,ule,mwo,gwo,ble,hwo,pwo,_wo,y,g7,vle,uwo,bwo,Dq,vwo,Fwo,Two,h7,Fle,Mwo,Ewo,Gq,Cwo,wwo,Awo,p7,Tle,ywo,Lwo,Oq,xwo,kwo,Swo,_7,Mle,Rwo,Bwo,Vq,Pwo,$wo,Iwo,u7,Ele,qwo,Nwo,Xq,jwo,Dwo,Gwo,b7,Cle,Owo,Vwo,zq,Xwo,zwo,Qwo,v7,wle,Wwo,Hwo,Qq,Uwo,Jwo,Ywo,F7,Ale,Kwo,Zwo,Wq,e6o,o6o,r6o,T7,yle,t6o,a6o,Hq,n6o,s6o,l6o,M7,Lle,i6o,d6o,Uq,c6o,f6o,m6o,E7,xle,g6o,h6o,Jq,p6o,_6o,u6o,C7,kle,b6o,v6o,Yq,F6o,T6o,M6o,w7,Sle,E6o,C6o,Kq,w6o,A6o,y6o,A7,Rle,L6o,x6o,Zq,k6o,S6o,R6o,y7,Ble,B6o,P6o,eN,$6o,I6o,q6o,L7,Ple,N6o,j6o,oN,D6o,G6o,O6o,x7,$le,V6o,X6o,rN,z6o,Q6o,W6o,k7,Ile,H6o,U6o,tN,J6o,Y6o,K6o,S7,qle,Z6o,eAo,aN,oAo,rAo,tAo,R7,Nle,aAo,nAo,nN,sAo,lAo,iAo,B7,jle,dAo,cAo,sN,fAo,mAo,gAo,P7,Dle,hAo,pAo,lN,_Ao,uAo,bAo,$7,Gle,vAo,FAo,iN,TAo,MAo,EAo,I7,Ole,CAo,wAo,dN,AAo,yAo,LAo,q7,Vle,xAo,kAo,cN,SAo,RAo,BAo,N7,Xle,PAo,$Ao,fN,IAo,qAo,NAo,j7,zle,jAo,DAo,mN,GAo,OAo,VAo,D7,Qle,XAo,zAo,gN,QAo,WAo,HAo,G7,Wle,UAo,JAo,hN,YAo,KAo,ZAo,O7,Hle,e0o,o0o,pN,r0o,t0o,a0o,V7,Ule,n0o,s0o,_N,l0o,i0o,d0o,X7,Jle,c0o,f0o,uN,m0o,g0o,h0o,z7,Yle,p0o,_0o,bN,u0o,b0o,v0o,Q7,Kle,F0o,T0o,vN,M0o,E0o,C0o,W7,Zle,w0o,A0o,FN,y0o,L0o,x0o,H7,eie,k0o,S0o,TN,R0o,B0o,P0o,U7,oie,$0o,I0o,MN,q0o,N0o,j0o,J7,rie,D0o,G0o,EN,O0o,V0o,X0o,Y7,tie,z0o,Q0o,CN,W0o,H0o,U0o,K7,aie,J0o,Y0o,wN,K0o,Z0o,eyo,Z7,nie,oyo,ryo,AN,tyo,ayo,nyo,eb,sie,syo,lyo,yN,iyo,dyo,cyo,ob,lie,fyo,myo,LN,gyo,hyo,pyo,rb,iie,_yo,uyo,xN,byo,vyo,Fyo,tb,die,Tyo,Myo,kN,Eyo,Cyo,wyo,ab,cie,Ayo,yyo,SN,Lyo,xyo,kyo,nb,fie,Syo,Ryo,RN,Byo,Pyo,$yo,sb,Iyo,mie,qyo,Nyo,gie,jyo,Dyo,hie,Gyo,Oyo,Kw,hBe,pd,lb,pie,Zw,Vyo,_ie,Xyo,pBe,rr,e6,zyo,_d,Qyo,BN,Wyo,Hyo,PN,Uyo,Jyo,Yyo,o6,Kyo,uie,Zyo,e8o,o8o,Jr,r6,r8o,bie,t8o,a8o,ud,n8o,vie,s8o,l8o,$N,i8o,d8o,c8o,Fie,f8o,m8o,t6,g8o,Ve,a6,h8o,Tie,p8o,_8o,Ja,u8o,Mie,b8o,v8o,Eie,F8o,T8o,Cie,M8o,E8o,C8o,G,ib,wie,w8o,A8o,IN,y8o,L8o,x8o,db,Aie,k8o,S8o,qN,R8o,B8o,P8o,cb,yie,$8o,I8o,NN,q8o,N8o,j8o,fb,Lie,D8o,G8o,jN,O8o,V8o,X8o,mb,xie,z8o,Q8o,DN,W8o,H8o,U8o,gb,kie,J8o,Y8o,GN,K8o,Z8o,eLo,hb,Sie,oLo,rLo,ON,tLo,aLo,nLo,pb,Rie,sLo,lLo,VN,iLo,dLo,cLo,_b,Bie,fLo,mLo,XN,gLo,hLo,pLo,ub,Pie,_Lo,uLo,zN,bLo,vLo,FLo,bb,$ie,TLo,MLo,QN,ELo,CLo,wLo,vb,Iie,ALo,yLo,WN,LLo,xLo,kLo,Fb,qie,SLo,RLo,HN,BLo,PLo,$Lo,Tb,Nie,ILo,qLo,UN,NLo,jLo,DLo,Mb,jie,GLo,OLo,JN,VLo,XLo,zLo,Eb,Die,QLo,WLo,YN,HLo,ULo,JLo,Cb,Gie,YLo,KLo,KN,ZLo,e9o,o9o,wb,Oie,r9o,t9o,ZN,a9o,n9o,s9o,Ab,Vie,l9o,i9o,ej,d9o,c9o,f9o,yb,Xie,m9o,g9o,oj,h9o,p9o,_9o,Lb,zie,u9o,b9o,rj,v9o,F9o,T9o,xb,Qie,M9o,E9o,tj,C9o,w9o,A9o,kb,Wie,y9o,L9o,aj,x9o,k9o,S9o,Sb,Hie,R9o,B9o,nj,P9o,$9o,I9o,Rb,Uie,q9o,N9o,sj,j9o,D9o,G9o,Bb,Jie,O9o,V9o,lj,X9o,z9o,Q9o,Pb,Yie,W9o,H9o,ij,U9o,J9o,Y9o,$b,Kie,K9o,Z9o,dj,exo,oxo,rxo,Ib,txo,Zie,axo,nxo,ede,sxo,lxo,ode,ixo,dxo,n6,_Be,bd,qb,rde,s6,cxo,tde,fxo,uBe,tr,l6,mxo,vd,gxo,cj,hxo,pxo,fj,_xo,uxo,bxo,i6,vxo,ade,Fxo,Txo,Mxo,Yr,d6,Exo,nde,Cxo,wxo,Fd,Axo,sde,yxo,Lxo,mj,xxo,kxo,Sxo,lde,Rxo,Bxo,c6,Pxo,Xe,f6,$xo,ide,Ixo,qxo,Ya,Nxo,dde,jxo,Dxo,cde,Gxo,Oxo,fde,Vxo,Xxo,zxo,da,Nb,mde,Qxo,Wxo,gj,Hxo,Uxo,Jxo,jb,gde,Yxo,Kxo,hj,Zxo,eko,oko,Db,hde,rko,tko,pj,ako,nko,sko,Gb,pde,lko,iko,_j,dko,cko,fko,Ob,_de,mko,gko,uj,hko,pko,_ko,Vb,uko,ude,bko,vko,bde,Fko,Tko,vde,Mko,Eko,m6,bBe,Td,Xb,Fde,g6,Cko,Tde,wko,vBe,ar,h6,Ako,Md,yko,bj,Lko,xko,vj,kko,Sko,Rko,p6,Bko,Mde,Pko,$ko,Iko,Kr,_6,qko,Ede,Nko,jko,Ed,Dko,Cde,Gko,Oko,Fj,Vko,Xko,zko,wde,Qko,Wko,u6,Hko,ze,b6,Uko,Ade,Jko,Yko,Ka,Kko,yde,Zko,eSo,Lde,oSo,rSo,xde,tSo,aSo,nSo,j,zb,kde,sSo,lSo,Tj,iSo,dSo,cSo,Qb,Sde,fSo,mSo,Mj,gSo,hSo,pSo,Wb,Rde,_So,uSo,Ej,bSo,vSo,FSo,Hb,Bde,TSo,MSo,Cj,ESo,CSo,wSo,Ub,Pde,ASo,ySo,wj,LSo,xSo,kSo,Jb,$de,SSo,RSo,Aj,BSo,PSo,$So,Yb,Ide,ISo,qSo,yj,NSo,jSo,DSo,Kb,qde,GSo,OSo,Lj,VSo,XSo,zSo,Zb,Nde,QSo,WSo,xj,HSo,USo,JSo,e2,jde,YSo,KSo,kj,ZSo,eRo,oRo,o2,Dde,rRo,tRo,Sj,aRo,nRo,sRo,r2,Gde,lRo,iRo,Rj,dRo,cRo,fRo,t2,Ode,mRo,gRo,Bj,hRo,pRo,_Ro,a2,Vde,uRo,bRo,Pj,vRo,FRo,TRo,n2,Xde,MRo,ERo,$j,CRo,wRo,ARo,s2,zde,yRo,LRo,Ij,xRo,kRo,SRo,l2,Qde,RRo,BRo,qj,PRo,$Ro,IRo,i2,Wde,qRo,NRo,Nj,jRo,DRo,GRo,d2,Hde,ORo,VRo,jj,XRo,zRo,QRo,c2,Ude,WRo,HRo,Dj,URo,JRo,YRo,f2,Jde,KRo,ZRo,Gj,eBo,oBo,rBo,m2,Yde,tBo,aBo,Oj,nBo,sBo,lBo,g2,Kde,iBo,dBo,Vj,cBo,fBo,mBo,h2,Zde,gBo,hBo,Xj,pBo,_Bo,uBo,p2,ece,bBo,vBo,zj,FBo,TBo,MBo,_2,oce,EBo,CBo,Qj,wBo,ABo,yBo,u2,rce,LBo,xBo,Wj,kBo,SBo,RBo,b2,tce,BBo,PBo,Hj,$Bo,IBo,qBo,v2,ace,NBo,jBo,Uj,DBo,GBo,OBo,F2,nce,VBo,XBo,Jj,zBo,QBo,WBo,T2,sce,HBo,UBo,Yj,JBo,YBo,KBo,M2,lce,ZBo,ePo,Kj,oPo,rPo,tPo,E2,ice,aPo,nPo,Zj,sPo,lPo,iPo,C2,dPo,dce,cPo,fPo,cce,mPo,gPo,fce,hPo,pPo,v6,FBe,Cd,w2,mce,F6,_Po,gce,uPo,TBe,nr,T6,bPo,wd,vPo,eD,FPo,TPo,oD,MPo,EPo,CPo,M6,wPo,hce,APo,yPo,LPo,Zr,E6,xPo,pce,kPo,SPo,Ad,RPo,_ce,BPo,PPo,rD,$Po,IPo,qPo,uce,NPo,jPo,C6,DPo,Qe,w6,GPo,bce,OPo,VPo,Za,XPo,vce,zPo,QPo,Fce,WPo,HPo,Tce,UPo,JPo,YPo,R,A2,Mce,KPo,ZPo,tD,e$o,o$o,r$o,y2,Ece,t$o,a$o,aD,n$o,s$o,l$o,L2,Cce,i$o,d$o,nD,c$o,f$o,m$o,x2,wce,g$o,h$o,sD,p$o,_$o,u$o,k2,Ace,b$o,v$o,lD,F$o,T$o,M$o,S2,yce,E$o,C$o,iD,w$o,A$o,y$o,R2,Lce,L$o,x$o,dD,k$o,S$o,R$o,B2,xce,B$o,P$o,cD,$$o,I$o,q$o,P2,kce,N$o,j$o,fD,D$o,G$o,O$o,$2,Sce,V$o,X$o,mD,z$o,Q$o,W$o,I2,Rce,H$o,U$o,gD,J$o,Y$o,K$o,q2,Bce,Z$o,eIo,hD,oIo,rIo,tIo,N2,Pce,aIo,nIo,pD,sIo,lIo,iIo,j2,$ce,dIo,cIo,_D,fIo,mIo,gIo,D2,Ice,hIo,pIo,uD,_Io,uIo,bIo,G2,qce,vIo,FIo,bD,TIo,MIo,EIo,O2,Nce,CIo,wIo,vD,AIo,yIo,LIo,V2,jce,xIo,kIo,FD,SIo,RIo,BIo,X2,Dce,PIo,$Io,TD,IIo,qIo,NIo,z2,Gce,jIo,DIo,MD,GIo,OIo,VIo,Q2,Oce,XIo,zIo,ED,QIo,WIo,HIo,W2,Vce,UIo,JIo,CD,YIo,KIo,ZIo,H2,Xce,eqo,oqo,wD,rqo,tqo,aqo,U2,zce,nqo,sqo,AD,lqo,iqo,dqo,J2,Qce,cqo,fqo,yD,mqo,gqo,hqo,Y2,Wce,pqo,_qo,LD,uqo,bqo,vqo,K2,Hce,Fqo,Tqo,xD,Mqo,Eqo,Cqo,Z2,Uce,wqo,Aqo,kD,yqo,Lqo,xqo,e5,Jce,kqo,Sqo,SD,Rqo,Bqo,Pqo,o5,Yce,$qo,Iqo,RD,qqo,Nqo,jqo,r5,Kce,Dqo,Gqo,BD,Oqo,Vqo,Xqo,t5,Zce,zqo,Qqo,PD,Wqo,Hqo,Uqo,a5,efe,Jqo,Yqo,$D,Kqo,Zqo,eNo,n5,ofe,oNo,rNo,ID,tNo,aNo,nNo,s5,rfe,sNo,lNo,qD,iNo,dNo,cNo,l5,tfe,fNo,mNo,ND,gNo,hNo,pNo,i5,afe,_No,uNo,jD,bNo,vNo,FNo,d5,nfe,TNo,MNo,DD,ENo,CNo,wNo,c5,sfe,ANo,yNo,GD,LNo,xNo,kNo,f5,SNo,lfe,RNo,BNo,ife,PNo,$No,dfe,INo,qNo,A6,MBe,yd,m5,cfe,y6,NNo,ffe,jNo,EBe,sr,L6,DNo,Ld,GNo,OD,ONo,VNo,VD,XNo,zNo,QNo,x6,WNo,mfe,HNo,UNo,JNo,et,k6,YNo,gfe,KNo,ZNo,xd,ejo,hfe,ojo,rjo,XD,tjo,ajo,njo,pfe,sjo,ljo,S6,ijo,We,R6,djo,_fe,cjo,fjo,en,mjo,ufe,gjo,hjo,bfe,pjo,_jo,vfe,ujo,bjo,vjo,Ffe,g5,Tfe,Fjo,Tjo,zD,Mjo,Ejo,Cjo,h5,wjo,Mfe,Ajo,yjo,Efe,Ljo,xjo,Cfe,kjo,Sjo,B6,CBe,kd,p5,wfe,P6,Rjo,Afe,Bjo,wBe,lr,$6,Pjo,Sd,$jo,QD,Ijo,qjo,WD,Njo,jjo,Djo,I6,Gjo,yfe,Ojo,Vjo,Xjo,ot,q6,zjo,Lfe,Qjo,Wjo,Rd,Hjo,xfe,Ujo,Jjo,HD,Yjo,Kjo,Zjo,kfe,eDo,oDo,N6,rDo,He,j6,tDo,Sfe,aDo,nDo,on,sDo,Rfe,lDo,iDo,Bfe,dDo,cDo,Pfe,fDo,mDo,gDo,de,_5,$fe,hDo,pDo,UD,_Do,uDo,bDo,u5,Ife,vDo,FDo,JD,TDo,MDo,EDo,b5,qfe,CDo,wDo,YD,ADo,yDo,LDo,Gs,Nfe,xDo,kDo,KD,SDo,RDo,ZD,BDo,PDo,$Do,v5,jfe,IDo,qDo,eG,NDo,jDo,DDo,ma,Dfe,GDo,ODo,oG,VDo,XDo,rG,zDo,QDo,tG,WDo,HDo,UDo,F5,Gfe,JDo,YDo,aG,KDo,ZDo,eGo,T5,Ofe,oGo,rGo,nG,tGo,aGo,nGo,M5,Vfe,sGo,lGo,sG,iGo,dGo,cGo,E5,Xfe,fGo,mGo,lG,gGo,hGo,pGo,C5,zfe,_Go,uGo,iG,bGo,vGo,FGo,w5,Qfe,TGo,MGo,dG,EGo,CGo,wGo,A5,Wfe,AGo,yGo,cG,LGo,xGo,kGo,y5,SGo,Hfe,RGo,BGo,Ufe,PGo,$Go,Jfe,IGo,qGo,D6,ABe,Bd,L5,Yfe,G6,NGo,Kfe,jGo,yBe,ir,O6,DGo,Pd,GGo,fG,OGo,VGo,mG,XGo,zGo,QGo,V6,WGo,Zfe,HGo,UGo,JGo,rt,X6,YGo,eme,KGo,ZGo,$d,eOo,ome,oOo,rOo,gG,tOo,aOo,nOo,rme,sOo,lOo,z6,iOo,Ue,Q6,dOo,tme,cOo,fOo,rn,mOo,ame,gOo,hOo,nme,pOo,_Oo,sme,uOo,bOo,vOo,lme,x5,ime,FOo,TOo,hG,MOo,EOo,COo,k5,wOo,dme,AOo,yOo,cme,LOo,xOo,fme,kOo,SOo,W6,LBe,Id,S5,mme,H6,ROo,gme,BOo,xBe,dr,U6,POo,qd,$Oo,pG,IOo,qOo,_G,NOo,jOo,DOo,J6,GOo,hme,OOo,VOo,XOo,tt,Y6,zOo,pme,QOo,WOo,Nd,HOo,_me,UOo,JOo,uG,YOo,KOo,ZOo,ume,eVo,oVo,K6,rVo,Je,Z6,tVo,bme,aVo,nVo,tn,sVo,vme,lVo,iVo,Fme,dVo,cVo,Tme,fVo,mVo,gVo,Se,R5,Mme,hVo,pVo,bG,_Vo,uVo,bVo,B5,Eme,vVo,FVo,vG,TVo,MVo,EVo,P5,Cme,CVo,wVo,FG,AVo,yVo,LVo,$5,wme,xVo,kVo,TG,SVo,RVo,BVo,I5,Ame,PVo,$Vo,MG,IVo,qVo,NVo,q5,yme,jVo,DVo,EG,GVo,OVo,VVo,N5,Lme,XVo,zVo,CG,QVo,WVo,HVo,j5,xme,UVo,JVo,wG,YVo,KVo,ZVo,D5,eXo,kme,oXo,rXo,Sme,tXo,aXo,Rme,nXo,sXo,eA,kBe,jd,G5,Bme,oA,lXo,Pme,iXo,SBe,cr,rA,dXo,Dd,cXo,AG,fXo,mXo,yG,gXo,hXo,pXo,tA,_Xo,$me,uXo,bXo,vXo,at,aA,FXo,Ime,TXo,MXo,Gd,EXo,qme,CXo,wXo,LG,AXo,yXo,LXo,Nme,xXo,kXo,nA,SXo,Ye,sA,RXo,jme,BXo,PXo,an,$Xo,Dme,IXo,qXo,Gme,NXo,jXo,Ome,DXo,GXo,OXo,nn,O5,Vme,VXo,XXo,xG,zXo,QXo,WXo,V5,Xme,HXo,UXo,kG,JXo,YXo,KXo,X5,zme,ZXo,ezo,SG,ozo,rzo,tzo,z5,Qme,azo,nzo,RG,szo,lzo,izo,Q5,dzo,Wme,czo,fzo,Hme,mzo,gzo,Ume,hzo,pzo,lA,RBe,Od,W5,Jme,iA,_zo,Yme,uzo,BBe,fr,dA,bzo,Vd,vzo,BG,Fzo,Tzo,PG,Mzo,Ezo,Czo,cA,wzo,Kme,Azo,yzo,Lzo,nt,fA,xzo,Zme,kzo,Szo,Xd,Rzo,ege,Bzo,Pzo,$G,$zo,Izo,qzo,oge,Nzo,jzo,mA,Dzo,Ke,gA,Gzo,rge,Ozo,Vzo,sn,Xzo,tge,zzo,Qzo,age,Wzo,Hzo,nge,Uzo,Jzo,Yzo,Re,H5,sge,Kzo,Zzo,IG,eQo,oQo,rQo,U5,lge,tQo,aQo,qG,nQo,sQo,lQo,J5,ige,iQo,dQo,NG,cQo,fQo,mQo,Y5,dge,gQo,hQo,jG,pQo,_Qo,uQo,K5,cge,bQo,vQo,DG,FQo,TQo,MQo,Z5,fge,EQo,CQo,GG,wQo,AQo,yQo,e3,mge,LQo,xQo,OG,kQo,SQo,RQo,o3,gge,BQo,PQo,VG,$Qo,IQo,qQo,r3,NQo,hge,jQo,DQo,pge,GQo,OQo,_ge,VQo,XQo,hA,PBe,zd,t3,uge,pA,zQo,bge,QQo,$Be,mr,_A,WQo,Qd,HQo,XG,UQo,JQo,zG,YQo,KQo,ZQo,uA,eWo,vge,oWo,rWo,tWo,st,bA,aWo,Fge,nWo,sWo,Wd,lWo,Tge,iWo,dWo,QG,cWo,fWo,mWo,Mge,gWo,hWo,vA,pWo,Ze,FA,_Wo,Ege,uWo,bWo,ln,vWo,Cge,FWo,TWo,wge,MWo,EWo,Age,CWo,wWo,AWo,TA,a3,yge,yWo,LWo,WG,xWo,kWo,SWo,n3,Lge,RWo,BWo,HG,PWo,$Wo,IWo,s3,qWo,xge,NWo,jWo,kge,DWo,GWo,Sge,OWo,VWo,MA,IBe,Hd,l3,Rge,EA,XWo,Bge,zWo,qBe,gr,CA,QWo,Ud,WWo,UG,HWo,UWo,JG,JWo,YWo,KWo,wA,ZWo,Pge,eHo,oHo,rHo,lt,AA,tHo,$ge,aHo,nHo,Jd,sHo,Ige,lHo,iHo,YG,dHo,cHo,fHo,qge,mHo,gHo,yA,hHo,eo,LA,pHo,Nge,_Ho,uHo,dn,bHo,jge,vHo,FHo,Dge,THo,MHo,Gge,EHo,CHo,wHo,cn,i3,Oge,AHo,yHo,KG,LHo,xHo,kHo,d3,Vge,SHo,RHo,ZG,BHo,PHo,$Ho,c3,Xge,IHo,qHo,eO,NHo,jHo,DHo,f3,zge,GHo,OHo,oO,VHo,XHo,zHo,m3,QHo,Qge,WHo,HHo,Wge,UHo,JHo,Hge,YHo,KHo,xA,NBe,Yd,g3,Uge,kA,ZHo,Jge,eUo,jBe,hr,SA,oUo,Kd,rUo,rO,tUo,aUo,tO,nUo,sUo,lUo,RA,iUo,Yge,dUo,cUo,fUo,it,BA,mUo,Kge,gUo,hUo,Zd,pUo,Zge,_Uo,uUo,aO,bUo,vUo,FUo,ehe,TUo,MUo,PA,EUo,oo,$A,CUo,ohe,wUo,AUo,fn,yUo,rhe,LUo,xUo,the,kUo,SUo,ahe,RUo,BUo,PUo,ec,h3,nhe,$Uo,IUo,nO,qUo,NUo,jUo,p3,she,DUo,GUo,sO,OUo,VUo,XUo,_3,lhe,zUo,QUo,lO,WUo,HUo,UUo,u3,JUo,ihe,YUo,KUo,dhe,ZUo,eJo,che,oJo,rJo,IA,DBe,oc,b3,fhe,qA,tJo,mhe,aJo,GBe,pr,NA,nJo,rc,sJo,iO,lJo,iJo,dO,dJo,cJo,fJo,jA,mJo,ghe,gJo,hJo,pJo,dt,DA,_Jo,hhe,uJo,bJo,tc,vJo,phe,FJo,TJo,cO,MJo,EJo,CJo,_he,wJo,AJo,GA,yJo,ro,OA,LJo,uhe,xJo,kJo,mn,SJo,bhe,RJo,BJo,vhe,PJo,$Jo,Fhe,IJo,qJo,NJo,The,v3,Mhe,jJo,DJo,fO,GJo,OJo,VJo,F3,XJo,Ehe,zJo,QJo,Che,WJo,HJo,whe,UJo,JJo,VA,OBe,ac,T3,Ahe,XA,YJo,yhe,KJo,VBe,_r,zA,ZJo,nc,eYo,mO,oYo,rYo,gO,tYo,aYo,nYo,QA,sYo,Lhe,lYo,iYo,dYo,ct,WA,cYo,xhe,fYo,mYo,sc,gYo,khe,hYo,pYo,hO,_Yo,uYo,bYo,She,vYo,FYo,HA,TYo,to,UA,MYo,Rhe,EYo,CYo,gn,wYo,Bhe,AYo,yYo,Phe,LYo,xYo,$he,kYo,SYo,RYo,Ihe,M3,qhe,BYo,PYo,pO,$Yo,IYo,qYo,E3,NYo,Nhe,jYo,DYo,jhe,GYo,OYo,Dhe,VYo,XYo,JA,XBe,lc,C3,Ghe,YA,zYo,Ohe,QYo,zBe,ur,KA,WYo,ic,HYo,_O,UYo,JYo,uO,YYo,KYo,ZYo,ZA,eKo,Vhe,oKo,rKo,tKo,ft,e0,aKo,Xhe,nKo,sKo,dc,lKo,zhe,iKo,dKo,bO,cKo,fKo,mKo,Qhe,gKo,hKo,o0,pKo,ao,r0,_Ko,Whe,uKo,bKo,hn,vKo,Hhe,FKo,TKo,Uhe,MKo,EKo,Jhe,CKo,wKo,AKo,pn,w3,Yhe,yKo,LKo,vO,xKo,kKo,SKo,A3,Khe,RKo,BKo,FO,PKo,$Ko,IKo,y3,Zhe,qKo,NKo,TO,jKo,DKo,GKo,L3,epe,OKo,VKo,MO,XKo,zKo,QKo,x3,WKo,ope,HKo,UKo,rpe,JKo,YKo,tpe,KKo,ZKo,t0,QBe,cc,k3,ape,a0,eZo,npe,oZo,WBe,br,n0,rZo,fc,tZo,EO,aZo,nZo,CO,sZo,lZo,iZo,s0,dZo,spe,cZo,fZo,mZo,mt,l0,gZo,lpe,hZo,pZo,mc,_Zo,ipe,uZo,bZo,wO,vZo,FZo,TZo,dpe,MZo,EZo,i0,CZo,no,d0,wZo,cpe,AZo,yZo,_n,LZo,fpe,xZo,kZo,mpe,SZo,RZo,gpe,BZo,PZo,$Zo,hpe,S3,ppe,IZo,qZo,AO,NZo,jZo,DZo,R3,GZo,_pe,OZo,VZo,upe,XZo,zZo,bpe,QZo,WZo,c0,HBe,gc,B3,vpe,f0,HZo,Fpe,UZo,UBe,vr,m0,JZo,hc,YZo,yO,KZo,ZZo,LO,eer,oer,rer,g0,ter,Tpe,aer,ner,ser,gt,h0,ler,Mpe,ier,der,pc,cer,Epe,fer,mer,xO,ger,her,per,Cpe,_er,uer,p0,ber,ho,_0,ver,wpe,Fer,Ter,un,Mer,Ape,Eer,Cer,ype,wer,Aer,Lpe,yer,Ler,xer,x,P3,xpe,ker,Ser,kO,Rer,Ber,Per,$3,kpe,$er,Ier,SO,qer,Ner,jer,I3,Spe,Der,Ger,RO,Oer,Ver,Xer,q3,Rpe,zer,Qer,BO,Wer,Her,Uer,N3,Bpe,Jer,Yer,PO,Ker,Zer,eor,j3,Ppe,oor,ror,$O,tor,aor,nor,D3,$pe,sor,lor,IO,ior,dor,cor,G3,Ipe,mor,gor,qO,hor,por,_or,O3,qpe,uor,bor,NO,vor,For,Tor,V3,Npe,Mor,Eor,jO,Cor,wor,Aor,X3,jpe,yor,Lor,DO,xor,kor,Sor,z3,Dpe,Ror,Bor,GO,Por,$or,Ior,Q3,Gpe,qor,Nor,OO,jor,Dor,Gor,W3,Ope,Oor,Vor,VO,Xor,zor,Qor,H3,Vpe,Wor,Hor,XO,Uor,Jor,Yor,U3,Xpe,Kor,Zor,zO,err,orr,rrr,Os,zpe,trr,arr,QO,nrr,srr,WO,lrr,irr,drr,J3,Qpe,crr,frr,HO,mrr,grr,hrr,Y3,Wpe,prr,_rr,UO,urr,brr,vrr,K3,Hpe,Frr,Trr,JO,Mrr,Err,Crr,Z3,Upe,wrr,Arr,YO,yrr,Lrr,xrr,ev,Jpe,krr,Srr,KO,Rrr,Brr,Prr,ov,Ype,$rr,Irr,ZO,qrr,Nrr,jrr,rv,Kpe,Drr,Grr,eV,Orr,Vrr,Xrr,tv,Zpe,zrr,Qrr,oV,Wrr,Hrr,Urr,av,e_e,Jrr,Yrr,rV,Krr,Zrr,etr,nv,o_e,otr,rtr,tV,ttr,atr,ntr,sv,r_e,str,ltr,aV,itr,dtr,ctr,lv,t_e,ftr,mtr,nV,gtr,htr,ptr,iv,a_e,_tr,utr,sV,btr,vtr,Ftr,dv,n_e,Ttr,Mtr,lV,Etr,Ctr,wtr,cv,s_e,Atr,ytr,iV,Ltr,xtr,ktr,fv,l_e,Str,Rtr,dV,Btr,Ptr,$tr,mv,i_e,Itr,qtr,cV,Ntr,jtr,Dtr,gv,d_e,Gtr,Otr,fV,Vtr,Xtr,ztr,hv,c_e,Qtr,Wtr,mV,Htr,Utr,Jtr,pv,f_e,Ytr,Ktr,gV,Ztr,ear,oar,_v,m_e,rar,tar,hV,aar,nar,sar,uv,g_e,lar,iar,pV,dar,car,far,bv,h_e,mar,gar,_V,har,par,_ar,vv,p_e,uar,bar,uV,Far,Tar,Mar,Fv,__e,Ear,Car,bV,war,Aar,yar,Tv,u_e,Lar,xar,vV,kar,Sar,Rar,Mv,b_e,Bar,Par,FV,$ar,Iar,qar,v_e,Nar,jar,u0,JBe,_c,Ev,F_e,b0,Dar,T_e,Gar,YBe,Fr,v0,Oar,uc,Var,TV,Xar,zar,MV,Qar,War,Har,F0,Uar,M_e,Jar,Yar,Kar,ht,T0,Zar,E_e,enr,onr,bc,rnr,C_e,tnr,anr,EV,nnr,snr,lnr,w_e,inr,dnr,M0,cnr,po,E0,fnr,A_e,mnr,gnr,bn,hnr,y_e,pnr,_nr,L_e,unr,bnr,x_e,vnr,Fnr,Tnr,H,Cv,k_e,Mnr,Enr,CV,Cnr,wnr,Anr,wv,S_e,ynr,Lnr,wV,xnr,knr,Snr,Av,R_e,Rnr,Bnr,AV,Pnr,$nr,Inr,yv,B_e,qnr,Nnr,yV,jnr,Dnr,Gnr,Lv,P_e,Onr,Vnr,LV,Xnr,znr,Qnr,xv,$_e,Wnr,Hnr,xV,Unr,Jnr,Ynr,kv,I_e,Knr,Znr,kV,esr,osr,rsr,Sv,q_e,tsr,asr,SV,nsr,ssr,lsr,Rv,N_e,isr,dsr,RV,csr,fsr,msr,Bv,j_e,gsr,hsr,BV,psr,_sr,usr,Pv,D_e,bsr,vsr,PV,Fsr,Tsr,Msr,$v,G_e,Esr,Csr,$V,wsr,Asr,ysr,Iv,O_e,Lsr,xsr,IV,ksr,Ssr,Rsr,qv,V_e,Bsr,Psr,qV,$sr,Isr,qsr,Nv,X_e,Nsr,jsr,NV,Dsr,Gsr,Osr,jv,z_e,Vsr,Xsr,jV,zsr,Qsr,Wsr,Dv,Q_e,Hsr,Usr,DV,Jsr,Ysr,Ksr,Gv,W_e,Zsr,elr,GV,olr,rlr,tlr,Ov,H_e,alr,nlr,OV,slr,llr,ilr,Vv,U_e,dlr,clr,VV,flr,mlr,glr,Xv,J_e,hlr,plr,XV,_lr,ulr,blr,zv,Y_e,vlr,Flr,zV,Tlr,Mlr,Elr,Qv,K_e,Clr,wlr,QV,Alr,ylr,Llr,Z_e,xlr,klr,C0,KBe,vc,Wv,eue,w0,Slr,oue,Rlr,ZBe,Tr,A0,Blr,Fc,Plr,WV,$lr,Ilr,HV,qlr,Nlr,jlr,y0,Dlr,rue,Glr,Olr,Vlr,pt,L0,Xlr,tue,zlr,Qlr,Tc,Wlr,aue,Hlr,Ulr,UV,Jlr,Ylr,Klr,nue,Zlr,eir,x0,oir,_o,k0,rir,sue,tir,air,vn,nir,lue,sir,lir,iue,iir,dir,due,cir,fir,mir,fe,Hv,cue,gir,hir,JV,pir,_ir,uir,Uv,fue,bir,vir,YV,Fir,Tir,Mir,Jv,mue,Eir,Cir,KV,wir,Air,yir,Yv,gue,Lir,xir,ZV,kir,Sir,Rir,Kv,hue,Bir,Pir,eX,$ir,Iir,qir,Zv,pue,Nir,jir,oX,Dir,Gir,Oir,eF,_ue,Vir,Xir,rX,zir,Qir,Wir,oF,uue,Hir,Uir,tX,Jir,Yir,Kir,rF,bue,Zir,edr,aX,odr,rdr,tdr,tF,vue,adr,ndr,nX,sdr,ldr,idr,aF,Fue,ddr,cdr,sX,fdr,mdr,gdr,nF,Tue,hdr,pdr,lX,_dr,udr,bdr,Mue,vdr,Fdr,S0,ePe,Mc,sF,Eue,R0,Tdr,Cue,Mdr,oPe,Mr,B0,Edr,Ec,Cdr,iX,wdr,Adr,dX,ydr,Ldr,xdr,P0,kdr,wue,Sdr,Rdr,Bdr,_t,$0,Pdr,Aue,$dr,Idr,Cc,qdr,yue,Ndr,jdr,cX,Ddr,Gdr,Odr,Lue,Vdr,Xdr,I0,zdr,uo,q0,Qdr,xue,Wdr,Hdr,Fn,Udr,kue,Jdr,Ydr,Sue,Kdr,Zdr,Rue,ecr,ocr,rcr,N0,lF,Bue,tcr,acr,fX,ncr,scr,lcr,iF,Pue,icr,dcr,mX,ccr,fcr,mcr,$ue,gcr,hcr,j0,rPe,wc,dF,Iue,D0,pcr,que,_cr,tPe,Er,G0,ucr,Ac,bcr,gX,vcr,Fcr,hX,Tcr,Mcr,Ecr,O0,Ccr,Nue,wcr,Acr,ycr,ut,V0,Lcr,jue,xcr,kcr,yc,Scr,Due,Rcr,Bcr,pX,Pcr,$cr,Icr,Gue,qcr,Ncr,X0,jcr,bo,z0,Dcr,Oue,Gcr,Ocr,Tn,Vcr,Vue,Xcr,zcr,Xue,Qcr,Wcr,zue,Hcr,Ucr,Jcr,J,cF,Que,Ycr,Kcr,_X,Zcr,efr,ofr,fF,Wue,rfr,tfr,uX,afr,nfr,sfr,mF,Hue,lfr,ifr,bX,dfr,cfr,ffr,gF,Uue,mfr,gfr,vX,hfr,pfr,_fr,hF,Jue,ufr,bfr,FX,vfr,Ffr,Tfr,pF,Yue,Mfr,Efr,TX,Cfr,wfr,Afr,_F,Kue,yfr,Lfr,MX,xfr,kfr,Sfr,uF,Zue,Rfr,Bfr,EX,Pfr,$fr,Ifr,bF,e1e,qfr,Nfr,CX,jfr,Dfr,Gfr,vF,o1e,Ofr,Vfr,wX,Xfr,zfr,Qfr,FF,r1e,Wfr,Hfr,AX,Ufr,Jfr,Yfr,TF,t1e,Kfr,Zfr,yX,emr,omr,rmr,MF,a1e,tmr,amr,LX,nmr,smr,lmr,EF,n1e,imr,dmr,xX,cmr,fmr,mmr,CF,s1e,gmr,hmr,kX,pmr,_mr,umr,wF,l1e,bmr,vmr,SX,Fmr,Tmr,Mmr,AF,i1e,Emr,Cmr,RX,wmr,Amr,ymr,yF,d1e,Lmr,xmr,BX,kmr,Smr,Rmr,LF,c1e,Bmr,Pmr,PX,$mr,Imr,qmr,xF,f1e,Nmr,jmr,$X,Dmr,Gmr,Omr,m1e,Vmr,Xmr,Q0,aPe,Lc,kF,g1e,W0,zmr,h1e,Qmr,nPe,Cr,H0,Wmr,xc,Hmr,IX,Umr,Jmr,qX,Ymr,Kmr,Zmr,U0,egr,p1e,ogr,rgr,tgr,bt,J0,agr,_1e,ngr,sgr,kc,lgr,u1e,igr,dgr,NX,cgr,fgr,mgr,b1e,ggr,hgr,Y0,pgr,vo,K0,_gr,v1e,ugr,bgr,Mn,vgr,F1e,Fgr,Tgr,T1e,Mgr,Egr,M1e,Cgr,wgr,Agr,be,SF,E1e,ygr,Lgr,jX,xgr,kgr,Sgr,RF,C1e,Rgr,Bgr,DX,Pgr,$gr,Igr,BF,w1e,qgr,Ngr,GX,jgr,Dgr,Ggr,PF,A1e,Ogr,Vgr,OX,Xgr,zgr,Qgr,$F,y1e,Wgr,Hgr,VX,Ugr,Jgr,Ygr,IF,L1e,Kgr,Zgr,XX,ehr,ohr,rhr,qF,x1e,thr,ahr,zX,nhr,shr,lhr,NF,k1e,ihr,dhr,QX,chr,fhr,mhr,jF,S1e,ghr,hhr,WX,phr,_hr,uhr,DF,R1e,bhr,vhr,HX,Fhr,Thr,Mhr,B1e,Ehr,Chr,Z0,sPe,Sc,GF,P1e,ey,whr,$1e,Ahr,lPe,wr,oy,yhr,Rc,Lhr,UX,xhr,khr,JX,Shr,Rhr,Bhr,ry,Phr,I1e,$hr,Ihr,qhr,vt,ty,Nhr,q1e,jhr,Dhr,Bc,Ghr,N1e,Ohr,Vhr,YX,Xhr,zhr,Qhr,j1e,Whr,Hhr,ay,Uhr,Fo,ny,Jhr,D1e,Yhr,Khr,En,Zhr,G1e,epr,opr,O1e,rpr,tpr,V1e,apr,npr,spr,V,OF,X1e,lpr,ipr,KX,dpr,cpr,fpr,VF,z1e,mpr,gpr,ZX,hpr,ppr,_pr,XF,Q1e,upr,bpr,ez,vpr,Fpr,Tpr,zF,W1e,Mpr,Epr,oz,Cpr,wpr,Apr,QF,H1e,ypr,Lpr,rz,xpr,kpr,Spr,WF,U1e,Rpr,Bpr,tz,Ppr,$pr,Ipr,HF,J1e,qpr,Npr,az,jpr,Dpr,Gpr,UF,Y1e,Opr,Vpr,nz,Xpr,zpr,Qpr,JF,K1e,Wpr,Hpr,sz,Upr,Jpr,Ypr,YF,Z1e,Kpr,Zpr,lz,e_r,o_r,r_r,KF,e7e,t_r,a_r,iz,n_r,s_r,l_r,ZF,o7e,i_r,d_r,dz,c_r,f_r,m_r,eT,r7e,g_r,h_r,cz,p_r,__r,u_r,oT,t7e,b_r,v_r,fz,F_r,T_r,M_r,rT,a7e,E_r,C_r,mz,w_r,A_r,y_r,tT,n7e,L_r,x_r,gz,k_r,S_r,R_r,aT,s7e,B_r,P_r,hz,$_r,I_r,q_r,nT,l7e,N_r,j_r,pz,D_r,G_r,O_r,sT,i7e,V_r,X_r,_z,z_r,Q_r,W_r,lT,d7e,H_r,U_r,uz,J_r,Y_r,K_r,iT,c7e,Z_r,eur,bz,our,rur,tur,dT,f7e,aur,nur,vz,sur,lur,iur,cT,m7e,dur,cur,Fz,fur,mur,gur,fT,g7e,hur,pur,Tz,_ur,uur,bur,mT,h7e,vur,Fur,Mz,Tur,Mur,Eur,gT,p7e,Cur,wur,Ez,Aur,yur,Lur,_7e,xur,kur,sy,iPe,Pc,hT,u7e,ly,Sur,b7e,Rur,dPe,Ar,iy,Bur,$c,Pur,Cz,$ur,Iur,wz,qur,Nur,jur,dy,Dur,v7e,Gur,Our,Vur,Ft,cy,Xur,F7e,zur,Qur,Ic,Wur,T7e,Hur,Uur,Az,Jur,Yur,Kur,M7e,Zur,e1r,fy,o1r,To,my,r1r,E7e,t1r,a1r,Cn,n1r,C7e,s1r,l1r,w7e,i1r,d1r,A7e,c1r,f1r,m1r,se,pT,y7e,g1r,h1r,yz,p1r,_1r,u1r,_T,L7e,b1r,v1r,Lz,F1r,T1r,M1r,uT,x7e,E1r,C1r,xz,w1r,A1r,y1r,bT,k7e,L1r,x1r,kz,k1r,S1r,R1r,vT,S7e,B1r,P1r,Sz,$1r,I1r,q1r,FT,R7e,N1r,j1r,Rz,D1r,G1r,O1r,TT,B7e,V1r,X1r,Bz,z1r,Q1r,W1r,MT,P7e,H1r,U1r,Pz,J1r,Y1r,K1r,ET,$7e,Z1r,e7r,$z,o7r,r7r,t7r,CT,I7e,a7r,n7r,Iz,s7r,l7r,i7r,wT,q7e,d7r,c7r,qz,f7r,m7r,g7r,AT,N7e,h7r,p7r,Nz,_7r,u7r,b7r,yT,j7e,v7r,F7r,jz,T7r,M7r,E7r,LT,D7e,C7r,w7r,Dz,A7r,y7r,L7r,xT,G7e,x7r,k7r,Gz,S7r,R7r,B7r,kT,O7e,P7r,$7r,Oz,I7r,q7r,N7r,ST,V7e,j7r,D7r,Vz,G7r,O7r,V7r,X7e,X7r,z7r,gy,cPe,qc,RT,z7e,hy,Q7r,Q7e,W7r,fPe,yr,py,H7r,Nc,U7r,Xz,J7r,Y7r,zz,K7r,Z7r,ebr,_y,obr,W7e,rbr,tbr,abr,Tt,uy,nbr,H7e,sbr,lbr,jc,ibr,U7e,dbr,cbr,Qz,fbr,mbr,gbr,J7e,hbr,pbr,by,_br,Mo,vy,ubr,Y7e,bbr,vbr,wn,Fbr,K7e,Tbr,Mbr,Z7e,Ebr,Cbr,ebe,wbr,Abr,ybr,obe,BT,rbe,Lbr,xbr,Wz,kbr,Sbr,Rbr,tbe,Bbr,Pbr,Fy,mPe,Dc,PT,abe,Ty,$br,nbe,Ibr,gPe,Lr,My,qbr,Gc,Nbr,Hz,jbr,Dbr,Uz,Gbr,Obr,Vbr,Ey,Xbr,sbe,zbr,Qbr,Wbr,Mt,Cy,Hbr,lbe,Ubr,Jbr,Oc,Ybr,ibe,Kbr,Zbr,Jz,e2r,o2r,r2r,dbe,t2r,a2r,wy,n2r,Eo,Ay,s2r,cbe,l2r,i2r,An,d2r,fbe,c2r,f2r,mbe,m2r,g2r,gbe,h2r,p2r,_2r,Y,$T,hbe,u2r,b2r,Yz,v2r,F2r,T2r,IT,pbe,M2r,E2r,Kz,C2r,w2r,A2r,qT,_be,y2r,L2r,Zz,x2r,k2r,S2r,NT,ube,R2r,B2r,eQ,P2r,$2r,I2r,jT,bbe,q2r,N2r,oQ,j2r,D2r,G2r,DT,vbe,O2r,V2r,rQ,X2r,z2r,Q2r,GT,Fbe,W2r,H2r,tQ,U2r,J2r,Y2r,OT,Tbe,K2r,Z2r,aQ,e5r,o5r,r5r,VT,Mbe,t5r,a5r,nQ,n5r,s5r,l5r,XT,Ebe,i5r,d5r,sQ,c5r,f5r,m5r,zT,Cbe,g5r,h5r,lQ,p5r,_5r,u5r,QT,wbe,b5r,v5r,iQ,F5r,T5r,M5r,WT,Abe,E5r,C5r,dQ,w5r,A5r,y5r,HT,ybe,L5r,x5r,cQ,k5r,S5r,R5r,UT,Lbe,B5r,P5r,fQ,$5r,I5r,q5r,JT,xbe,N5r,j5r,mQ,D5r,G5r,O5r,YT,kbe,V5r,X5r,gQ,z5r,Q5r,W5r,KT,Sbe,H5r,U5r,hQ,J5r,Y5r,K5r,ZT,Rbe,Z5r,e3r,pQ,o3r,r3r,t3r,eM,Bbe,a3r,n3r,_Q,s3r,l3r,i3r,Pbe,d3r,c3r,yy,hPe,Vc,oM,$be,Ly,f3r,Ibe,m3r,pPe,xr,xy,g3r,Xc,h3r,uQ,p3r,_3r,bQ,u3r,b3r,v3r,ky,F3r,qbe,T3r,M3r,E3r,Et,Sy,C3r,Nbe,w3r,A3r,zc,y3r,jbe,L3r,x3r,vQ,k3r,S3r,R3r,Dbe,B3r,P3r,Ry,$3r,Co,By,I3r,Gbe,q3r,N3r,yn,j3r,Obe,D3r,G3r,Vbe,O3r,V3r,Xbe,X3r,z3r,Q3r,K,rM,zbe,W3r,H3r,FQ,U3r,J3r,Y3r,tM,Qbe,K3r,Z3r,TQ,evr,ovr,rvr,aM,Wbe,tvr,avr,MQ,nvr,svr,lvr,nM,Hbe,ivr,dvr,EQ,cvr,fvr,mvr,sM,Ube,gvr,hvr,CQ,pvr,_vr,uvr,lM,Jbe,bvr,vvr,wQ,Fvr,Tvr,Mvr,iM,Ybe,Evr,Cvr,AQ,wvr,Avr,yvr,dM,Kbe,Lvr,xvr,yQ,kvr,Svr,Rvr,cM,Zbe,Bvr,Pvr,LQ,$vr,Ivr,qvr,fM,e2e,Nvr,jvr,xQ,Dvr,Gvr,Ovr,mM,o2e,Vvr,Xvr,kQ,zvr,Qvr,Wvr,gM,r2e,Hvr,Uvr,SQ,Jvr,Yvr,Kvr,hM,t2e,Zvr,eFr,RQ,oFr,rFr,tFr,pM,a2e,aFr,nFr,BQ,sFr,lFr,iFr,_M,n2e,dFr,cFr,PQ,fFr,mFr,gFr,uM,s2e,hFr,pFr,$Q,_Fr,uFr,bFr,bM,l2e,vFr,FFr,IQ,TFr,MFr,EFr,vM,i2e,CFr,wFr,qQ,AFr,yFr,LFr,FM,d2e,xFr,kFr,NQ,SFr,RFr,BFr,TM,c2e,PFr,$Fr,jQ,IFr,qFr,NFr,f2e,jFr,DFr,Py,_Pe,Qc,MM,m2e,$y,GFr,g2e,OFr,uPe,kr,Iy,VFr,Wc,XFr,DQ,zFr,QFr,GQ,WFr,HFr,UFr,qy,JFr,h2e,YFr,KFr,ZFr,Ct,Ny,eTr,p2e,oTr,rTr,Hc,tTr,_2e,aTr,nTr,OQ,sTr,lTr,iTr,u2e,dTr,cTr,jy,fTr,wo,Dy,mTr,b2e,gTr,hTr,Ln,pTr,v2e,_Tr,uTr,F2e,bTr,vTr,T2e,FTr,TTr,MTr,M2e,EM,E2e,ETr,CTr,VQ,wTr,ATr,yTr,C2e,LTr,xTr,Gy,bPe,Uc,CM,w2e,Oy,kTr,A2e,STr,vPe,Sr,Vy,RTr,Jc,BTr,XQ,PTr,$Tr,zQ,ITr,qTr,NTr,Xy,jTr,y2e,DTr,GTr,OTr,wt,zy,VTr,L2e,XTr,zTr,Yc,QTr,x2e,WTr,HTr,QQ,UTr,JTr,YTr,k2e,KTr,ZTr,Qy,eMr,Ao,Wy,oMr,S2e,rMr,tMr,xn,aMr,R2e,nMr,sMr,B2e,lMr,iMr,P2e,dMr,cMr,fMr,$2e,wM,I2e,mMr,gMr,WQ,hMr,pMr,_Mr,q2e,uMr,bMr,Hy,FPe,Kc,AM,N2e,Uy,vMr,j2e,FMr,TPe,Rr,Jy,TMr,Zc,MMr,HQ,EMr,CMr,UQ,wMr,AMr,yMr,Yy,LMr,D2e,xMr,kMr,SMr,At,Ky,RMr,G2e,BMr,PMr,ef,$Mr,O2e,IMr,qMr,JQ,NMr,jMr,DMr,V2e,GMr,OMr,Zy,VMr,yo,e8,XMr,X2e,zMr,QMr,kn,WMr,z2e,HMr,UMr,Q2e,JMr,YMr,W2e,KMr,ZMr,e4r,z,yM,H2e,o4r,r4r,YQ,t4r,a4r,n4r,LM,U2e,s4r,l4r,KQ,i4r,d4r,c4r,xM,J2e,f4r,m4r,ZQ,g4r,h4r,p4r,kM,Y2e,_4r,u4r,eW,b4r,v4r,F4r,SM,K2e,T4r,M4r,oW,E4r,C4r,w4r,RM,Z2e,A4r,y4r,rW,L4r,x4r,k4r,BM,e5e,S4r,R4r,tW,B4r,P4r,$4r,PM,o5e,I4r,q4r,aW,N4r,j4r,D4r,$M,r5e,G4r,O4r,nW,V4r,X4r,z4r,IM,t5e,Q4r,W4r,sW,H4r,U4r,J4r,qM,a5e,Y4r,K4r,lW,Z4r,eEr,oEr,NM,n5e,rEr,tEr,iW,aEr,nEr,sEr,jM,s5e,lEr,iEr,dW,dEr,cEr,fEr,DM,l5e,mEr,gEr,cW,hEr,pEr,_Er,GM,i5e,uEr,bEr,fW,vEr,FEr,TEr,OM,d5e,MEr,EEr,mW,CEr,wEr,AEr,VM,c5e,yEr,LEr,gW,xEr,kEr,SEr,XM,f5e,REr,BEr,hW,PEr,$Er,IEr,zM,m5e,qEr,NEr,pW,jEr,DEr,GEr,QM,g5e,OEr,VEr,_W,XEr,zEr,QEr,WM,h5e,WEr,HEr,uW,UEr,JEr,YEr,HM,p5e,KEr,ZEr,bW,eCr,oCr,rCr,UM,_5e,tCr,aCr,vW,nCr,sCr,lCr,JM,u5e,iCr,dCr,FW,cCr,fCr,mCr,YM,b5e,gCr,hCr,TW,pCr,_Cr,uCr,v5e,bCr,vCr,o8,MPe,of,KM,F5e,r8,FCr,T5e,TCr,EPe,Br,t8,MCr,rf,ECr,MW,CCr,wCr,EW,ACr,yCr,LCr,a8,xCr,M5e,kCr,SCr,RCr,yt,n8,BCr,E5e,PCr,$Cr,tf,ICr,C5e,qCr,NCr,CW,jCr,DCr,GCr,w5e,OCr,VCr,s8,XCr,Lo,l8,zCr,A5e,QCr,WCr,Sn,HCr,y5e,UCr,JCr,L5e,YCr,KCr,x5e,ZCr,ewr,owr,ca,ZM,k5e,rwr,twr,wW,awr,nwr,swr,e4,S5e,lwr,iwr,AW,dwr,cwr,fwr,o4,R5e,mwr,gwr,yW,hwr,pwr,_wr,r4,B5e,uwr,bwr,LW,vwr,Fwr,Twr,t4,P5e,Mwr,Ewr,xW,Cwr,wwr,Awr,$5e,ywr,Lwr,i8,CPe,af,a4,I5e,d8,xwr,q5e,kwr,wPe,Pr,c8,Swr,nf,Rwr,kW,Bwr,Pwr,SW,$wr,Iwr,qwr,f8,Nwr,N5e,jwr,Dwr,Gwr,Lt,m8,Owr,j5e,Vwr,Xwr,sf,zwr,D5e,Qwr,Wwr,RW,Hwr,Uwr,Jwr,G5e,Ywr,Kwr,g8,Zwr,xo,h8,e6r,O5e,o6r,r6r,Rn,t6r,V5e,a6r,n6r,X5e,s6r,l6r,z5e,i6r,d6r,c6r,me,n4,Q5e,f6r,m6r,BW,g6r,h6r,p6r,s4,W5e,_6r,u6r,PW,b6r,v6r,F6r,l4,H5e,T6r,M6r,$W,E6r,C6r,w6r,i4,U5e,A6r,y6r,IW,L6r,x6r,k6r,d4,J5e,S6r,R6r,qW,B6r,P6r,$6r,c4,Y5e,I6r,q6r,NW,N6r,j6r,D6r,f4,K5e,G6r,O6r,jW,V6r,X6r,z6r,m4,Z5e,Q6r,W6r,DW,H6r,U6r,J6r,g4,e3e,Y6r,K6r,GW,Z6r,eAr,oAr,h4,o3e,rAr,tAr,OW,aAr,nAr,sAr,p4,r3e,lAr,iAr,VW,dAr,cAr,fAr,_4,t3e,mAr,gAr,XW,hAr,pAr,_Ar,a3e,uAr,bAr,p8,APe,lf,u4,n3e,_8,vAr,s3e,FAr,yPe,$r,u8,TAr,df,MAr,zW,EAr,CAr,QW,wAr,AAr,yAr,b8,LAr,l3e,xAr,kAr,SAr,xt,v8,RAr,i3e,BAr,PAr,cf,$Ar,d3e,IAr,qAr,WW,NAr,jAr,DAr,c3e,GAr,OAr,F8,VAr,ko,T8,XAr,f3e,zAr,QAr,Bn,WAr,m3e,HAr,UAr,g3e,JAr,YAr,h3e,KAr,ZAr,e0r,ve,b4,p3e,o0r,r0r,HW,t0r,a0r,n0r,v4,_3e,s0r,l0r,UW,i0r,d0r,c0r,F4,u3e,f0r,m0r,JW,g0r,h0r,p0r,T4,b3e,_0r,u0r,YW,b0r,v0r,F0r,M4,v3e,T0r,M0r,KW,E0r,C0r,w0r,E4,F3e,A0r,y0r,ZW,L0r,x0r,k0r,C4,T3e,S0r,R0r,eH,B0r,P0r,$0r,w4,M3e,I0r,q0r,oH,N0r,j0r,D0r,A4,E3e,G0r,O0r,rH,V0r,X0r,z0r,y4,C3e,Q0r,W0r,tH,H0r,U0r,J0r,w3e,Y0r,K0r,M8,LPe,ff,L4,A3e,E8,Z0r,y3e,eyr,xPe,Ir,C8,oyr,mf,ryr,aH,tyr,ayr,nH,nyr,syr,lyr,w8,iyr,L3e,dyr,cyr,fyr,kt,A8,myr,x3e,gyr,hyr,gf,pyr,k3e,_yr,uyr,sH,byr,vyr,Fyr,S3e,Tyr,Myr,y8,Eyr,So,L8,Cyr,R3e,wyr,Ayr,Pn,yyr,B3e,Lyr,xyr,P3e,kyr,Syr,$3e,Ryr,Byr,Pyr,Ee,x4,I3e,$yr,Iyr,lH,qyr,Nyr,jyr,k4,q3e,Dyr,Gyr,iH,Oyr,Vyr,Xyr,S4,N3e,zyr,Qyr,dH,Wyr,Hyr,Uyr,R4,j3e,Jyr,Yyr,cH,Kyr,Zyr,e8r,B4,D3e,o8r,r8r,fH,t8r,a8r,n8r,P4,G3e,s8r,l8r,mH,i8r,d8r,c8r,$4,O3e,f8r,m8r,gH,g8r,h8r,p8r,I4,V3e,_8r,u8r,hH,b8r,v8r,F8r,q4,X3e,T8r,M8r,pH,E8r,C8r,w8r,z3e,A8r,y8r,x8,kPe,hf,N4,Q3e,k8,L8r,W3e,x8r,SPe,qr,S8,k8r,pf,S8r,_H,R8r,B8r,uH,P8r,$8r,I8r,R8,q8r,H3e,N8r,j8r,D8r,St,B8,G8r,U3e,O8r,V8r,_f,X8r,J3e,z8r,Q8r,bH,W8r,H8r,U8r,Y3e,J8r,Y8r,P8,K8r,Ro,$8,Z8r,K3e,eLr,oLr,$n,rLr,Z3e,tLr,aLr,eve,nLr,sLr,ove,lLr,iLr,dLr,Fe,j4,rve,cLr,fLr,vH,mLr,gLr,hLr,D4,tve,pLr,_Lr,FH,uLr,bLr,vLr,G4,ave,FLr,TLr,TH,MLr,ELr,CLr,O4,nve,wLr,ALr,MH,yLr,LLr,xLr,V4,sve,kLr,SLr,EH,RLr,BLr,PLr,X4,lve,$Lr,ILr,CH,qLr,NLr,jLr,z4,ive,DLr,GLr,wH,OLr,VLr,XLr,Q4,dve,zLr,QLr,AH,WLr,HLr,ULr,W4,cve,JLr,YLr,yH,KLr,ZLr,e9r,H4,fve,o9r,r9r,LH,t9r,a9r,n9r,mve,s9r,l9r,I8,RPe,uf,U4,gve,q8,i9r,hve,d9r,BPe,Nr,N8,c9r,bf,f9r,xH,m9r,g9r,kH,h9r,p9r,_9r,j8,u9r,pve,b9r,v9r,F9r,Rt,D8,T9r,_ve,M9r,E9r,vf,C9r,uve,w9r,A9r,SH,y9r,L9r,x9r,bve,k9r,S9r,G8,R9r,Bo,O8,B9r,vve,P9r,$9r,In,I9r,Fve,q9r,N9r,Tve,j9r,D9r,Mve,G9r,O9r,V9r,Te,J4,Eve,X9r,z9r,RH,Q9r,W9r,H9r,Y4,Cve,U9r,J9r,BH,Y9r,K9r,Z9r,K4,wve,exr,oxr,PH,rxr,txr,axr,Z4,Ave,nxr,sxr,$H,lxr,ixr,dxr,eE,yve,cxr,fxr,IH,mxr,gxr,hxr,oE,Lve,pxr,_xr,qH,uxr,bxr,vxr,rE,xve,Fxr,Txr,NH,Mxr,Exr,Cxr,tE,kve,wxr,Axr,jH,yxr,Lxr,xxr,aE,Sve,kxr,Sxr,DH,Rxr,Bxr,Pxr,nE,Rve,$xr,Ixr,GH,qxr,Nxr,jxr,Bve,Dxr,Gxr,V8,PPe,Ff,sE,Pve,X8,Oxr,$ve,Vxr,$Pe,jr,z8,Xxr,Tf,zxr,OH,Qxr,Wxr,VH,Hxr,Uxr,Jxr,Q8,Yxr,Ive,Kxr,Zxr,ekr,Bt,W8,okr,qve,rkr,tkr,Mf,akr,Nve,nkr,skr,XH,lkr,ikr,dkr,jve,ckr,fkr,H8,mkr,Po,U8,gkr,Dve,hkr,pkr,qn,_kr,Gve,ukr,bkr,Ove,vkr,Fkr,Vve,Tkr,Mkr,Ekr,Be,lE,Xve,Ckr,wkr,zH,Akr,ykr,Lkr,iE,zve,xkr,kkr,QH,Skr,Rkr,Bkr,dE,Qve,Pkr,$kr,WH,Ikr,qkr,Nkr,cE,Wve,jkr,Dkr,HH,Gkr,Okr,Vkr,fE,Hve,Xkr,zkr,UH,Qkr,Wkr,Hkr,mE,Uve,Ukr,Jkr,JH,Ykr,Kkr,Zkr,gE,Jve,eSr,oSr,YH,rSr,tSr,aSr,hE,Yve,nSr,sSr,KH,lSr,iSr,dSr,Kve,cSr,fSr,J8,IPe,Ef,pE,Zve,Y8,mSr,eFe,gSr,qPe,Dr,K8,hSr,Cf,pSr,ZH,_Sr,uSr,eU,bSr,vSr,FSr,Z8,TSr,oFe,MSr,ESr,CSr,Pt,eL,wSr,rFe,ASr,ySr,wf,LSr,tFe,xSr,kSr,oU,SSr,RSr,BSr,aFe,PSr,$Sr,oL,ISr,$o,rL,qSr,nFe,NSr,jSr,Nn,DSr,sFe,GSr,OSr,lFe,VSr,XSr,iFe,zSr,QSr,WSr,Pe,_E,dFe,HSr,USr,rU,JSr,YSr,KSr,uE,cFe,ZSr,eRr,tU,oRr,rRr,tRr,bE,fFe,aRr,nRr,aU,sRr,lRr,iRr,vE,mFe,dRr,cRr,nU,fRr,mRr,gRr,FE,gFe,hRr,pRr,sU,_Rr,uRr,bRr,TE,hFe,vRr,FRr,lU,TRr,MRr,ERr,ME,pFe,CRr,wRr,iU,ARr,yRr,LRr,EE,_Fe,xRr,kRr,dU,SRr,RRr,BRr,uFe,PRr,$Rr,tL,NPe,Af,CE,bFe,aL,IRr,vFe,qRr,jPe,Gr,nL,NRr,yf,jRr,cU,DRr,GRr,fU,ORr,VRr,XRr,sL,zRr,FFe,QRr,WRr,HRr,$t,lL,URr,TFe,JRr,YRr,Lf,KRr,MFe,ZRr,eBr,mU,oBr,rBr,tBr,EFe,aBr,nBr,iL,sBr,Io,dL,lBr,CFe,iBr,dBr,jn,cBr,wFe,fBr,mBr,AFe,gBr,hBr,yFe,pBr,_Br,uBr,LFe,wE,xFe,bBr,vBr,gU,FBr,TBr,MBr,kFe,EBr,CBr,cL,DPe,xf,AE,SFe,fL,wBr,RFe,ABr,GPe,Or,mL,yBr,kf,LBr,hU,xBr,kBr,pU,SBr,RBr,BBr,gL,PBr,BFe,$Br,IBr,qBr,It,hL,NBr,PFe,jBr,DBr,Sf,GBr,$Fe,OBr,VBr,_U,XBr,zBr,QBr,IFe,WBr,HBr,pL,UBr,qo,_L,JBr,qFe,YBr,KBr,Dn,ZBr,NFe,ePr,oPr,jFe,rPr,tPr,DFe,aPr,nPr,sPr,uL,yE,GFe,lPr,iPr,uU,dPr,cPr,fPr,LE,OFe,mPr,gPr,bU,hPr,pPr,_Pr,VFe,uPr,bPr,bL,OPe,Rf,xE,XFe,vL,vPr,zFe,FPr,VPe,Vr,FL,TPr,Bf,MPr,vU,EPr,CPr,FU,wPr,APr,yPr,TL,LPr,QFe,xPr,kPr,SPr,qt,ML,RPr,WFe,BPr,PPr,Pf,$Pr,HFe,IPr,qPr,TU,NPr,jPr,DPr,UFe,GPr,OPr,EL,VPr,No,CL,XPr,JFe,zPr,QPr,Gn,WPr,YFe,HPr,UPr,KFe,JPr,YPr,ZFe,KPr,ZPr,e$r,eTe,kE,oTe,o$r,r$r,MU,t$r,a$r,n$r,rTe,s$r,l$r,wL,XPe;return he=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),$C=new X({}),IC=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Of=new i$r({props:{warning:!0,$$slots:{default:[a6t]},$$scope:{ctx:If}}}),qC=new X({}),NC=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/configuration_auto.py#L563"}}),GC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/configuration_auto.py#L586"}}),OC=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),VC=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/configuration_auto.py#L708"}}),XC=new X({}),zC=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/tokenization_auto.py#L353"}}),HC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_15773/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/tokenization_auto.py#L367"}}),UC=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),JC=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/tokenization_auto.py#L563"}}),YC=new X({}),KC=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),ow=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_15773/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/feature_extraction_auto.py#L186"}}),jh=new i$r({props:{$$slots:{default:[n6t]},$$scope:{ctx:If}}}),rw=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),tw=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/feature_extraction_auto.py#L313"}}),aw=new X({}),nw=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/processing_auto.py#L70"}}),iw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/processing_auto.py#L84"}}),Jh=new i$r({props:{$$slots:{default:[s6t]},$$scope:{ctx:If}}}),dw=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),cw=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/processing_auto.py#L237"}}),fw=new X({}),mw=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L715"}}),hw=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Config">FastSpeech2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Model">FastSpeech2Model</a> (FastSpeech2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),pw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),_w=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),uw=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),bw=new X({}),vw=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L722"}}),Tw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),Ew=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Cw=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ww=new X({}),Aw=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L737"}}),Lw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),kw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Rw=new X({}),Bw=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L744"}}),$w=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),Iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),qw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Nw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jw=new X({}),Dw=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L751"}}),Ow=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),Vw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),Xw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),zw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Qw=new X({}),Ww=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L760"}}),Uw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),Jw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),Yw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Kw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zw=new X({}),e6=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L794"}}),r6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),a6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),n6=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),s6=new X({}),l6=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L801"}}),d6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),c6=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),f6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),m6=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g6=new X({}),h6=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L787"}}),_6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),u6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),b6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),v6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),F6=new X({}),T6=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L769"}}),E6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),C6=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),w6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),A6=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),y6=new X({}),L6=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L776"}}),k6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),S6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),R6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),B6=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P6=new X({}),$6=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L810"}}),q6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),N6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),j6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),D6=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G6=new X({}),O6=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L849"}}),X6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),z6=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),Q6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),W6=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H6=new X({}),U6=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L856"}}),Y6=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),K6=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),Z6=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),eA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oA=new X({}),rA=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L879"}}),aA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),nA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),sA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),lA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iA=new X({}),dA=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L863"}}),fA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),mA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),gA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),hA=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pA=new X({}),_A=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L870"}}),bA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),vA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),FA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),MA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),EA=new X({}),CA=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L888"}}),AA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),yA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),LA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),xA=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new X({}),SA=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L895"}}),BA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),PA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),$A=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),IA=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),qA=new X({}),NA=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L842"}}),DA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),GA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),OA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),VA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XA=new X({}),zA=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L817"}}),WA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),HA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),UA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),JA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YA=new X({}),KA=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L824"}}),e0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),o0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),r0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),a0=new X({}),n0=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_auto.py#L833"}}),l0=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),i0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),d0=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),c0=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),f0=new X({}),m0=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),h0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),p0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),_0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),u0=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),b0=new X({}),v0=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),T0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),M0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),E0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),C0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),w0=new X({}),A0=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),L0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),x0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),k0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),S0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),R0=new X({}),B0=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),$0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),I0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),q0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),j0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D0=new X({}),G0=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),V0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),X0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),z0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Q0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W0=new X({}),H0=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),J0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),Y0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),K0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Z0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ey=new X({}),oy=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),ty=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),ay=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),ny=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),sy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ly=new X({}),iy=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),cy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),my=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hy=new X({}),py=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),uy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),by=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),vy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Fy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ty=new X({}),My=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),Cy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),wy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Ay=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),yy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ly=new X({}),xy=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Sy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),Ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),By=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Py=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$y=new X({}),Iy=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Ny=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),jy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),Dy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Gy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Oy=new X({}),Vy=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),zy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),Qy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),Wy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),Hy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uy=new X({}),Jy=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),Ky=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),Zy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),e8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),o8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),r8=new X({}),t8=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),n8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),s8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),l8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),i8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),d8=new X({}),c8=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),m8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),g8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),h8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),p8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_8=new X({}),u8=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),v8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),F8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),T8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),M8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E8=new X({}),C8=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),A8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),y8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),L8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),x8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k8=new X({}),S8=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),B8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),P8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),$8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),I8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),q8=new X({}),N8=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),D8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),G8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),O8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),V8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),X8=new X({}),z8=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),W8=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),H8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),U8=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),J8=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Y8=new X({}),K8=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),eL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),oL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),rL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),tL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),aL=new X({}),nL=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),lL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),iL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),dL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),cL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fL=new X({}),mL=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),hL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),pL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),_L=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),bL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),FL=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),ML=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L389"}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),CL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_15773/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_15773/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_15773/src/transformers/models/auto/auto_factory.py#L417"}}),wL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){Z=a("meta"),io=l(),ce=a("h1"),Ce=a("a"),lo=a("span"),f(he.$$.fragment),Me=l(),Xo=a("span"),qi=o("Auto Classes"),qf=l(),fa=a("p"),Ni=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=a("code"),SC=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),xe=l(),co=a("p"),Di=o("Instantiating one of "),On=a("a"),RC=o("AutoConfig"),Vn=o(", "),Xn=a("a"),BC=o("AutoModel"),Gi=o(`, and
`),zn=a("a"),PC=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(Da.$$.fragment),fo=l(),ue=a("p"),E9=o("will create a model that is an instance of "),Vi=a("a"),C9=o("BertModel"),w9=o("."),zo=l(),Ga=a("p"),A9=o("There is one class of "),Df=a("code"),y9=o("AutoModel"),rqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),VRe=l(),Xi=a("h2"),Gf=a("a"),pY=a("span"),f($C.$$.fragment),tqe=l(),_Y=a("span"),aqe=o("Extending the Auto Classes"),XRe=l(),Qn=a("p"),nqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),uY=a("code"),sqe=o("NewModel"),lqe=o(", make sure you have a "),bY=a("code"),iqe=o("NewModelConfig"),dqe=o(` then you can add those to the auto
classes like this:`),zRe=l(),f(IC.$$.fragment),QRe=l(),L9=a("p"),cqe=o("You will then be able to use the auto classes like you would usually do!"),WRe=l(),f(Of.$$.fragment),HRe=l(),zi=a("h2"),Vf=a("a"),vY=a("span"),f(qC.$$.fragment),fqe=l(),FY=a("span"),mqe=o("AutoConfig"),URe=l(),Qo=a("div"),f(NC.$$.fragment),gqe=l(),jC=a("p"),hqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),x9=a("a"),pqe=o("from_pretrained()"),_qe=o(" class method."),uqe=l(),DC=a("p"),bqe=o("This class cannot be instantiated directly using "),TY=a("code"),vqe=o("__init__()"),Fqe=o(" (throws an error)."),Tqe=l(),mo=a("div"),f(GC.$$.fragment),Mqe=l(),MY=a("p"),Eqe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Cqe=l(),Qi=a("p"),wqe=o("The configuration class to instantiate is selected based on the "),EY=a("code"),Aqe=o("model_type"),yqe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),CY=a("code"),Lqe=o("pretrained_model_name_or_path"),xqe=o(":"),kqe=l(),v=a("ul"),Xf=a("li"),wY=a("strong"),Sqe=o("albert"),Rqe=o(" \u2014 "),k9=a("a"),Bqe=o("AlbertConfig"),Pqe=o(" (ALBERT model)"),$qe=l(),zf=a("li"),AY=a("strong"),Iqe=o("bart"),qqe=o(" \u2014 "),S9=a("a"),Nqe=o("BartConfig"),jqe=o(" (BART model)"),Dqe=l(),Qf=a("li"),yY=a("strong"),Gqe=o("beit"),Oqe=o(" \u2014 "),R9=a("a"),Vqe=o("BeitConfig"),Xqe=o(" (BEiT model)"),zqe=l(),Wf=a("li"),LY=a("strong"),Qqe=o("bert"),Wqe=o(" \u2014 "),B9=a("a"),Hqe=o("BertConfig"),Uqe=o(" (BERT model)"),Jqe=l(),Hf=a("li"),xY=a("strong"),Yqe=o("bert-generation"),Kqe=o(" \u2014 "),P9=a("a"),Zqe=o("BertGenerationConfig"),eNe=o(" (Bert Generation model)"),oNe=l(),Uf=a("li"),kY=a("strong"),rNe=o("big_bird"),tNe=o(" \u2014 "),$9=a("a"),aNe=o("BigBirdConfig"),nNe=o(" (BigBird model)"),sNe=l(),Jf=a("li"),SY=a("strong"),lNe=o("bigbird_pegasus"),iNe=o(" \u2014 "),I9=a("a"),dNe=o("BigBirdPegasusConfig"),cNe=o(" (BigBirdPegasus model)"),fNe=l(),Yf=a("li"),RY=a("strong"),mNe=o("blenderbot"),gNe=o(" \u2014 "),q9=a("a"),hNe=o("BlenderbotConfig"),pNe=o(" (Blenderbot model)"),_Ne=l(),Kf=a("li"),BY=a("strong"),uNe=o("blenderbot-small"),bNe=o(" \u2014 "),N9=a("a"),vNe=o("BlenderbotSmallConfig"),FNe=o(" (BlenderbotSmall model)"),TNe=l(),Zf=a("li"),PY=a("strong"),MNe=o("camembert"),ENe=o(" \u2014 "),j9=a("a"),CNe=o("CamembertConfig"),wNe=o(" (CamemBERT model)"),ANe=l(),em=a("li"),$Y=a("strong"),yNe=o("canine"),LNe=o(" \u2014 "),D9=a("a"),xNe=o("CanineConfig"),kNe=o(" (Canine model)"),SNe=l(),om=a("li"),IY=a("strong"),RNe=o("clip"),BNe=o(" \u2014 "),G9=a("a"),PNe=o("CLIPConfig"),$Ne=o(" (CLIP model)"),INe=l(),rm=a("li"),qY=a("strong"),qNe=o("convbert"),NNe=o(" \u2014 "),O9=a("a"),jNe=o("ConvBertConfig"),DNe=o(" (ConvBERT model)"),GNe=l(),tm=a("li"),NY=a("strong"),ONe=o("convnext"),VNe=o(" \u2014 "),V9=a("a"),XNe=o("ConvNextConfig"),zNe=o(" (ConvNext model)"),QNe=l(),am=a("li"),jY=a("strong"),WNe=o("ctrl"),HNe=o(" \u2014 "),X9=a("a"),UNe=o("CTRLConfig"),JNe=o(" (CTRL model)"),YNe=l(),nm=a("li"),DY=a("strong"),KNe=o("data2vec-audio"),ZNe=o(" \u2014 "),z9=a("a"),eje=o("Data2VecAudioConfig"),oje=o(" (Data2VecAudio model)"),rje=l(),sm=a("li"),GY=a("strong"),tje=o("data2vec-text"),aje=o(" \u2014 "),Q9=a("a"),nje=o("Data2VecTextConfig"),sje=o(" (Data2VecText model)"),lje=l(),lm=a("li"),OY=a("strong"),ije=o("data2vec-vision"),dje=o(" \u2014 "),W9=a("a"),cje=o("Data2VecVisionConfig"),fje=o(" (Data2VecVision model)"),mje=l(),im=a("li"),VY=a("strong"),gje=o("deberta"),hje=o(" \u2014 "),H9=a("a"),pje=o("DebertaConfig"),_je=o(" (DeBERTa model)"),uje=l(),dm=a("li"),XY=a("strong"),bje=o("deberta-v2"),vje=o(" \u2014 "),U9=a("a"),Fje=o("DebertaV2Config"),Tje=o(" (DeBERTa-v2 model)"),Mje=l(),cm=a("li"),zY=a("strong"),Eje=o("decision_transformer"),Cje=o(" \u2014 "),J9=a("a"),wje=o("DecisionTransformerConfig"),Aje=o(" (Decision Transformer model)"),yje=l(),fm=a("li"),QY=a("strong"),Lje=o("deit"),xje=o(" \u2014 "),Y9=a("a"),kje=o("DeiTConfig"),Sje=o(" (DeiT model)"),Rje=l(),mm=a("li"),WY=a("strong"),Bje=o("detr"),Pje=o(" \u2014 "),K9=a("a"),$je=o("DetrConfig"),Ije=o(" (DETR model)"),qje=l(),gm=a("li"),HY=a("strong"),Nje=o("distilbert"),jje=o(" \u2014 "),Z9=a("a"),Dje=o("DistilBertConfig"),Gje=o(" (DistilBERT model)"),Oje=l(),hm=a("li"),UY=a("strong"),Vje=o("dpr"),Xje=o(" \u2014 "),ex=a("a"),zje=o("DPRConfig"),Qje=o(" (DPR model)"),Wje=l(),pm=a("li"),JY=a("strong"),Hje=o("dpt"),Uje=o(" \u2014 "),ox=a("a"),Jje=o("DPTConfig"),Yje=o(" (DPT model)"),Kje=l(),_m=a("li"),YY=a("strong"),Zje=o("electra"),eDe=o(" \u2014 "),rx=a("a"),oDe=o("ElectraConfig"),rDe=o(" (ELECTRA model)"),tDe=l(),um=a("li"),KY=a("strong"),aDe=o("encoder-decoder"),nDe=o(" \u2014 "),tx=a("a"),sDe=o("EncoderDecoderConfig"),lDe=o(" (Encoder decoder model)"),iDe=l(),bm=a("li"),ZY=a("strong"),dDe=o("fastspeech2"),cDe=o(" \u2014 "),ax=a("a"),fDe=o("FastSpeech2Config"),mDe=o(" (FastSpeech2 model)"),gDe=l(),vm=a("li"),eK=a("strong"),hDe=o("flaubert"),pDe=o(" \u2014 "),nx=a("a"),_De=o("FlaubertConfig"),uDe=o(" (FlauBERT model)"),bDe=l(),Fm=a("li"),oK=a("strong"),vDe=o("fnet"),FDe=o(" \u2014 "),sx=a("a"),TDe=o("FNetConfig"),MDe=o(" (FNet model)"),EDe=l(),Tm=a("li"),rK=a("strong"),CDe=o("fsmt"),wDe=o(" \u2014 "),lx=a("a"),ADe=o("FSMTConfig"),yDe=o(" (FairSeq Machine-Translation model)"),LDe=l(),Mm=a("li"),tK=a("strong"),xDe=o("funnel"),kDe=o(" \u2014 "),ix=a("a"),SDe=o("FunnelConfig"),RDe=o(" (Funnel Transformer model)"),BDe=l(),Em=a("li"),aK=a("strong"),PDe=o("glpn"),$De=o(" \u2014 "),dx=a("a"),IDe=o("GLPNConfig"),qDe=o(" (GLPN model)"),NDe=l(),Cm=a("li"),nK=a("strong"),jDe=o("gpt2"),DDe=o(" \u2014 "),cx=a("a"),GDe=o("GPT2Config"),ODe=o(" (OpenAI GPT-2 model)"),VDe=l(),wm=a("li"),sK=a("strong"),XDe=o("gpt_neo"),zDe=o(" \u2014 "),fx=a("a"),QDe=o("GPTNeoConfig"),WDe=o(" (GPT Neo model)"),HDe=l(),Am=a("li"),lK=a("strong"),UDe=o("gptj"),JDe=o(" \u2014 "),mx=a("a"),YDe=o("GPTJConfig"),KDe=o(" (GPT-J model)"),ZDe=l(),ym=a("li"),iK=a("strong"),eGe=o("hubert"),oGe=o(" \u2014 "),gx=a("a"),rGe=o("HubertConfig"),tGe=o(" (Hubert model)"),aGe=l(),Lm=a("li"),dK=a("strong"),nGe=o("ibert"),sGe=o(" \u2014 "),hx=a("a"),lGe=o("IBertConfig"),iGe=o(" (I-BERT model)"),dGe=l(),xm=a("li"),cK=a("strong"),cGe=o("imagegpt"),fGe=o(" \u2014 "),px=a("a"),mGe=o("ImageGPTConfig"),gGe=o(" (ImageGPT model)"),hGe=l(),km=a("li"),fK=a("strong"),pGe=o("layoutlm"),_Ge=o(" \u2014 "),_x=a("a"),uGe=o("LayoutLMConfig"),bGe=o(" (LayoutLM model)"),vGe=l(),Sm=a("li"),mK=a("strong"),FGe=o("layoutlmv2"),TGe=o(" \u2014 "),ux=a("a"),MGe=o("LayoutLMv2Config"),EGe=o(" (LayoutLMv2 model)"),CGe=l(),Rm=a("li"),gK=a("strong"),wGe=o("led"),AGe=o(" \u2014 "),bx=a("a"),yGe=o("LEDConfig"),LGe=o(" (LED model)"),xGe=l(),Bm=a("li"),hK=a("strong"),kGe=o("longformer"),SGe=o(" \u2014 "),vx=a("a"),RGe=o("LongformerConfig"),BGe=o(" (Longformer model)"),PGe=l(),Pm=a("li"),pK=a("strong"),$Ge=o("luke"),IGe=o(" \u2014 "),Fx=a("a"),qGe=o("LukeConfig"),NGe=o(" (LUKE model)"),jGe=l(),$m=a("li"),_K=a("strong"),DGe=o("lxmert"),GGe=o(" \u2014 "),Tx=a("a"),OGe=o("LxmertConfig"),VGe=o(" (LXMERT model)"),XGe=l(),Im=a("li"),uK=a("strong"),zGe=o("m2m_100"),QGe=o(" \u2014 "),Mx=a("a"),WGe=o("M2M100Config"),HGe=o(" (M2M100 model)"),UGe=l(),qm=a("li"),bK=a("strong"),JGe=o("marian"),YGe=o(" \u2014 "),Ex=a("a"),KGe=o("MarianConfig"),ZGe=o(" (Marian model)"),eOe=l(),Nm=a("li"),vK=a("strong"),oOe=o("maskformer"),rOe=o(" \u2014 "),Cx=a("a"),tOe=o("MaskFormerConfig"),aOe=o(" (MaskFormer model)"),nOe=l(),jm=a("li"),FK=a("strong"),sOe=o("mbart"),lOe=o(" \u2014 "),wx=a("a"),iOe=o("MBartConfig"),dOe=o(" (mBART model)"),cOe=l(),Dm=a("li"),TK=a("strong"),fOe=o("megatron-bert"),mOe=o(" \u2014 "),Ax=a("a"),gOe=o("MegatronBertConfig"),hOe=o(" (MegatronBert model)"),pOe=l(),Gm=a("li"),MK=a("strong"),_Oe=o("mobilebert"),uOe=o(" \u2014 "),yx=a("a"),bOe=o("MobileBertConfig"),vOe=o(" (MobileBERT model)"),FOe=l(),Om=a("li"),EK=a("strong"),TOe=o("mpnet"),MOe=o(" \u2014 "),Lx=a("a"),EOe=o("MPNetConfig"),COe=o(" (MPNet model)"),wOe=l(),Vm=a("li"),CK=a("strong"),AOe=o("mt5"),yOe=o(" \u2014 "),xx=a("a"),LOe=o("MT5Config"),xOe=o(" (mT5 model)"),kOe=l(),Xm=a("li"),wK=a("strong"),SOe=o("nystromformer"),ROe=o(" \u2014 "),kx=a("a"),BOe=o("NystromformerConfig"),POe=o(" (Nystromformer model)"),$Oe=l(),zm=a("li"),AK=a("strong"),IOe=o("openai-gpt"),qOe=o(" \u2014 "),Sx=a("a"),NOe=o("OpenAIGPTConfig"),jOe=o(" (OpenAI GPT model)"),DOe=l(),Qm=a("li"),yK=a("strong"),GOe=o("pegasus"),OOe=o(" \u2014 "),Rx=a("a"),VOe=o("PegasusConfig"),XOe=o(" (Pegasus model)"),zOe=l(),Wm=a("li"),LK=a("strong"),QOe=o("perceiver"),WOe=o(" \u2014 "),Bx=a("a"),HOe=o("PerceiverConfig"),UOe=o(" (Perceiver model)"),JOe=l(),Hm=a("li"),xK=a("strong"),YOe=o("plbart"),KOe=o(" \u2014 "),Px=a("a"),ZOe=o("PLBartConfig"),eVe=o(" (PLBart model)"),oVe=l(),Um=a("li"),kK=a("strong"),rVe=o("poolformer"),tVe=o(" \u2014 "),$x=a("a"),aVe=o("PoolFormerConfig"),nVe=o(" (PoolFormer model)"),sVe=l(),Jm=a("li"),SK=a("strong"),lVe=o("prophetnet"),iVe=o(" \u2014 "),Ix=a("a"),dVe=o("ProphetNetConfig"),cVe=o(" (ProphetNet model)"),fVe=l(),Ym=a("li"),RK=a("strong"),mVe=o("qdqbert"),gVe=o(" \u2014 "),qx=a("a"),hVe=o("QDQBertConfig"),pVe=o(" (QDQBert model)"),_Ve=l(),Km=a("li"),BK=a("strong"),uVe=o("rag"),bVe=o(" \u2014 "),Nx=a("a"),vVe=o("RagConfig"),FVe=o(" (RAG model)"),TVe=l(),Zm=a("li"),PK=a("strong"),MVe=o("realm"),EVe=o(" \u2014 "),jx=a("a"),CVe=o("RealmConfig"),wVe=o(" (Realm model)"),AVe=l(),eg=a("li"),$K=a("strong"),yVe=o("reformer"),LVe=o(" \u2014 "),Dx=a("a"),xVe=o("ReformerConfig"),kVe=o(" (Reformer model)"),SVe=l(),og=a("li"),IK=a("strong"),RVe=o("regnet"),BVe=o(" \u2014 "),Gx=a("a"),PVe=o("RegNetConfig"),$Ve=o(" (RegNet model)"),IVe=l(),rg=a("li"),qK=a("strong"),qVe=o("rembert"),NVe=o(" \u2014 "),Ox=a("a"),jVe=o("RemBertConfig"),DVe=o(" (RemBERT model)"),GVe=l(),tg=a("li"),NK=a("strong"),OVe=o("resnet"),VVe=o(" \u2014 "),Vx=a("a"),XVe=o("ResNetConfig"),zVe=o(" (ResNet model)"),QVe=l(),ag=a("li"),jK=a("strong"),WVe=o("retribert"),HVe=o(" \u2014 "),Xx=a("a"),UVe=o("RetriBertConfig"),JVe=o(" (RetriBERT model)"),YVe=l(),ng=a("li"),DK=a("strong"),KVe=o("roberta"),ZVe=o(" \u2014 "),zx=a("a"),eXe=o("RobertaConfig"),oXe=o(" (RoBERTa model)"),rXe=l(),sg=a("li"),GK=a("strong"),tXe=o("roformer"),aXe=o(" \u2014 "),Qx=a("a"),nXe=o("RoFormerConfig"),sXe=o(" (RoFormer model)"),lXe=l(),lg=a("li"),OK=a("strong"),iXe=o("segformer"),dXe=o(" \u2014 "),Wx=a("a"),cXe=o("SegformerConfig"),fXe=o(" (SegFormer model)"),mXe=l(),ig=a("li"),VK=a("strong"),gXe=o("sew"),hXe=o(" \u2014 "),Hx=a("a"),pXe=o("SEWConfig"),_Xe=o(" (SEW model)"),uXe=l(),dg=a("li"),XK=a("strong"),bXe=o("sew-d"),vXe=o(" \u2014 "),Ux=a("a"),FXe=o("SEWDConfig"),TXe=o(" (SEW-D model)"),MXe=l(),cg=a("li"),zK=a("strong"),EXe=o("speech-encoder-decoder"),CXe=o(" \u2014 "),Jx=a("a"),wXe=o("SpeechEncoderDecoderConfig"),AXe=o(" (Speech Encoder decoder model)"),yXe=l(),fg=a("li"),QK=a("strong"),LXe=o("speech_to_text"),xXe=o(" \u2014 "),Yx=a("a"),kXe=o("Speech2TextConfig"),SXe=o(" (Speech2Text model)"),RXe=l(),mg=a("li"),WK=a("strong"),BXe=o("speech_to_text_2"),PXe=o(" \u2014 "),Kx=a("a"),$Xe=o("Speech2Text2Config"),IXe=o(" (Speech2Text2 model)"),qXe=l(),gg=a("li"),HK=a("strong"),NXe=o("splinter"),jXe=o(" \u2014 "),Zx=a("a"),DXe=o("SplinterConfig"),GXe=o(" (Splinter model)"),OXe=l(),hg=a("li"),UK=a("strong"),VXe=o("squeezebert"),XXe=o(" \u2014 "),ek=a("a"),zXe=o("SqueezeBertConfig"),QXe=o(" (SqueezeBERT model)"),WXe=l(),pg=a("li"),JK=a("strong"),HXe=o("swin"),UXe=o(" \u2014 "),ok=a("a"),JXe=o("SwinConfig"),YXe=o(" (Swin model)"),KXe=l(),_g=a("li"),YK=a("strong"),ZXe=o("t5"),eze=o(" \u2014 "),rk=a("a"),oze=o("T5Config"),rze=o(" (T5 model)"),tze=l(),ug=a("li"),KK=a("strong"),aze=o("tapas"),nze=o(" \u2014 "),tk=a("a"),sze=o("TapasConfig"),lze=o(" (TAPAS model)"),ize=l(),bg=a("li"),ZK=a("strong"),dze=o("tapex"),cze=o(" \u2014 "),ak=a("a"),fze=o("BartConfig"),mze=o(" (TAPEX model)"),gze=l(),vg=a("li"),eZ=a("strong"),hze=o("transfo-xl"),pze=o(" \u2014 "),nk=a("a"),_ze=o("TransfoXLConfig"),uze=o(" (Transformer-XL model)"),bze=l(),Fg=a("li"),oZ=a("strong"),vze=o("trocr"),Fze=o(" \u2014 "),sk=a("a"),Tze=o("TrOCRConfig"),Mze=o(" (TrOCR model)"),Eze=l(),Tg=a("li"),rZ=a("strong"),Cze=o("unispeech"),wze=o(" \u2014 "),lk=a("a"),Aze=o("UniSpeechConfig"),yze=o(" (UniSpeech model)"),Lze=l(),Mg=a("li"),tZ=a("strong"),xze=o("unispeech-sat"),kze=o(" \u2014 "),ik=a("a"),Sze=o("UniSpeechSatConfig"),Rze=o(" (UniSpeechSat model)"),Bze=l(),Eg=a("li"),aZ=a("strong"),Pze=o("van"),$ze=o(" \u2014 "),dk=a("a"),Ize=o("VanConfig"),qze=o(" (VAN model)"),Nze=l(),Cg=a("li"),nZ=a("strong"),jze=o("vilt"),Dze=o(" \u2014 "),ck=a("a"),Gze=o("ViltConfig"),Oze=o(" (ViLT model)"),Vze=l(),wg=a("li"),sZ=a("strong"),Xze=o("vision-encoder-decoder"),zze=o(" \u2014 "),fk=a("a"),Qze=o("VisionEncoderDecoderConfig"),Wze=o(" (Vision Encoder decoder model)"),Hze=l(),Ag=a("li"),lZ=a("strong"),Uze=o("vision-text-dual-encoder"),Jze=o(" \u2014 "),mk=a("a"),Yze=o("VisionTextDualEncoderConfig"),Kze=o(" (VisionTextDualEncoder model)"),Zze=l(),yg=a("li"),iZ=a("strong"),eQe=o("visual_bert"),oQe=o(" \u2014 "),gk=a("a"),rQe=o("VisualBertConfig"),tQe=o(" (VisualBert model)"),aQe=l(),Lg=a("li"),dZ=a("strong"),nQe=o("vit"),sQe=o(" \u2014 "),hk=a("a"),lQe=o("ViTConfig"),iQe=o(" (ViT model)"),dQe=l(),xg=a("li"),cZ=a("strong"),cQe=o("vit_mae"),fQe=o(" \u2014 "),pk=a("a"),mQe=o("ViTMAEConfig"),gQe=o(" (ViTMAE model)"),hQe=l(),kg=a("li"),fZ=a("strong"),pQe=o("wav2vec2"),_Qe=o(" \u2014 "),_k=a("a"),uQe=o("Wav2Vec2Config"),bQe=o(" (Wav2Vec2 model)"),vQe=l(),Sg=a("li"),mZ=a("strong"),FQe=o("wavlm"),TQe=o(" \u2014 "),uk=a("a"),MQe=o("WavLMConfig"),EQe=o(" (WavLM model)"),CQe=l(),Rg=a("li"),gZ=a("strong"),wQe=o("xglm"),AQe=o(" \u2014 "),bk=a("a"),yQe=o("XGLMConfig"),LQe=o(" (XGLM model)"),xQe=l(),Bg=a("li"),hZ=a("strong"),kQe=o("xlm"),SQe=o(" \u2014 "),vk=a("a"),RQe=o("XLMConfig"),BQe=o(" (XLM model)"),PQe=l(),Pg=a("li"),pZ=a("strong"),$Qe=o("xlm-prophetnet"),IQe=o(" \u2014 "),Fk=a("a"),qQe=o("XLMProphetNetConfig"),NQe=o(" (XLMProphetNet model)"),jQe=l(),$g=a("li"),_Z=a("strong"),DQe=o("xlm-roberta"),GQe=o(" \u2014 "),Tk=a("a"),OQe=o("XLMRobertaConfig"),VQe=o(" (XLM-RoBERTa model)"),XQe=l(),Ig=a("li"),uZ=a("strong"),zQe=o("xlm-roberta-xl"),QQe=o(" \u2014 "),Mk=a("a"),WQe=o("XLMRobertaXLConfig"),HQe=o(" (XLM-RoBERTa-XL model)"),UQe=l(),qg=a("li"),bZ=a("strong"),JQe=o("xlnet"),YQe=o(" \u2014 "),Ek=a("a"),KQe=o("XLNetConfig"),ZQe=o(" (XLNet model)"),eWe=l(),Ng=a("li"),vZ=a("strong"),oWe=o("yoso"),rWe=o(" \u2014 "),Ck=a("a"),tWe=o("YosoConfig"),aWe=o(" (YOSO model)"),nWe=l(),FZ=a("p"),sWe=o("Examples:"),lWe=l(),f(OC.$$.fragment),iWe=l(),jg=a("div"),f(VC.$$.fragment),dWe=l(),TZ=a("p"),cWe=o("Register a new configuration for this class."),JRe=l(),Wi=a("h2"),Dg=a("a"),MZ=a("span"),f(XC.$$.fragment),fWe=l(),EZ=a("span"),mWe=o("AutoTokenizer"),YRe=l(),Wo=a("div"),f(zC.$$.fragment),gWe=l(),QC=a("p"),hWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=a("a"),pWe=o("AutoTokenizer.from_pretrained()"),_We=o(" class method."),uWe=l(),WC=a("p"),bWe=o("This class cannot be instantiated directly using "),CZ=a("code"),vWe=o("__init__()"),FWe=o(" (throws an error)."),TWe=l(),go=a("div"),f(HC.$$.fragment),MWe=l(),wZ=a("p"),EWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),CWe=l(),Oa=a("p"),wWe=o("The tokenizer class to instantiate is selected based on the "),AZ=a("code"),AWe=o("model_type"),yWe=o(` property of the config object (either
passed as an argument or loaded from `),yZ=a("code"),LWe=o("pretrained_model_name_or_path"),xWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LZ=a("code"),kWe=o("pretrained_model_name_or_path"),SWe=o(":"),RWe=l(),E=a("ul"),Wn=a("li"),xZ=a("strong"),BWe=o("albert"),PWe=o(" \u2014 "),Ak=a("a"),$We=o("AlbertTokenizer"),IWe=o(" or "),yk=a("a"),qWe=o("AlbertTokenizerFast"),NWe=o(" (ALBERT model)"),jWe=l(),Hn=a("li"),kZ=a("strong"),DWe=o("bart"),GWe=o(" \u2014 "),Lk=a("a"),OWe=o("BartTokenizer"),VWe=o(" or "),xk=a("a"),XWe=o("BartTokenizerFast"),zWe=o(" (BART model)"),QWe=l(),Un=a("li"),SZ=a("strong"),WWe=o("barthez"),HWe=o(" \u2014 "),kk=a("a"),UWe=o("BarthezTokenizer"),JWe=o(" or "),Sk=a("a"),YWe=o("BarthezTokenizerFast"),KWe=o(" (BARThez model)"),ZWe=l(),Gg=a("li"),RZ=a("strong"),eHe=o("bartpho"),oHe=o(" \u2014 "),Rk=a("a"),rHe=o("BartphoTokenizer"),tHe=o(" (BARTpho model)"),aHe=l(),Jn=a("li"),BZ=a("strong"),nHe=o("bert"),sHe=o(" \u2014 "),Bk=a("a"),lHe=o("BertTokenizer"),iHe=o(" or "),Pk=a("a"),dHe=o("BertTokenizerFast"),cHe=o(" (BERT model)"),fHe=l(),Og=a("li"),PZ=a("strong"),mHe=o("bert-generation"),gHe=o(" \u2014 "),$k=a("a"),hHe=o("BertGenerationTokenizer"),pHe=o(" (Bert Generation model)"),_He=l(),Vg=a("li"),$Z=a("strong"),uHe=o("bert-japanese"),bHe=o(" \u2014 "),Ik=a("a"),vHe=o("BertJapaneseTokenizer"),FHe=o(" (BertJapanese model)"),THe=l(),Xg=a("li"),IZ=a("strong"),MHe=o("bertweet"),EHe=o(" \u2014 "),qk=a("a"),CHe=o("BertweetTokenizer"),wHe=o(" (Bertweet model)"),AHe=l(),Yn=a("li"),qZ=a("strong"),yHe=o("big_bird"),LHe=o(" \u2014 "),Nk=a("a"),xHe=o("BigBirdTokenizer"),kHe=o(" or "),jk=a("a"),SHe=o("BigBirdTokenizerFast"),RHe=o(" (BigBird model)"),BHe=l(),Kn=a("li"),NZ=a("strong"),PHe=o("bigbird_pegasus"),$He=o(" \u2014 "),Dk=a("a"),IHe=o("PegasusTokenizer"),qHe=o(" or "),Gk=a("a"),NHe=o("PegasusTokenizerFast"),jHe=o(" (BigBirdPegasus model)"),DHe=l(),Zn=a("li"),jZ=a("strong"),GHe=o("blenderbot"),OHe=o(" \u2014 "),Ok=a("a"),VHe=o("BlenderbotTokenizer"),XHe=o(" or "),Vk=a("a"),zHe=o("BlenderbotTokenizerFast"),QHe=o(" (Blenderbot model)"),WHe=l(),zg=a("li"),DZ=a("strong"),HHe=o("blenderbot-small"),UHe=o(" \u2014 "),Xk=a("a"),JHe=o("BlenderbotSmallTokenizer"),YHe=o(" (BlenderbotSmall model)"),KHe=l(),Qg=a("li"),GZ=a("strong"),ZHe=o("byt5"),eUe=o(" \u2014 "),zk=a("a"),oUe=o("ByT5Tokenizer"),rUe=o(" (ByT5 model)"),tUe=l(),es=a("li"),OZ=a("strong"),aUe=o("camembert"),nUe=o(" \u2014 "),Qk=a("a"),sUe=o("CamembertTokenizer"),lUe=o(" or "),Wk=a("a"),iUe=o("CamembertTokenizerFast"),dUe=o(" (CamemBERT model)"),cUe=l(),Wg=a("li"),VZ=a("strong"),fUe=o("canine"),mUe=o(" \u2014 "),Hk=a("a"),gUe=o("CanineTokenizer"),hUe=o(" (Canine model)"),pUe=l(),os=a("li"),XZ=a("strong"),_Ue=o("clip"),uUe=o(" \u2014 "),Uk=a("a"),bUe=o("CLIPTokenizer"),vUe=o(" or "),Jk=a("a"),FUe=o("CLIPTokenizerFast"),TUe=o(" (CLIP model)"),MUe=l(),rs=a("li"),zZ=a("strong"),EUe=o("convbert"),CUe=o(" \u2014 "),Yk=a("a"),wUe=o("ConvBertTokenizer"),AUe=o(" or "),Kk=a("a"),yUe=o("ConvBertTokenizerFast"),LUe=o(" (ConvBERT model)"),xUe=l(),ts=a("li"),QZ=a("strong"),kUe=o("cpm"),SUe=o(" \u2014 "),Zk=a("a"),RUe=o("CpmTokenizer"),BUe=o(" or "),WZ=a("code"),PUe=o("CpmTokenizerFast"),$Ue=o(" (CPM model)"),IUe=l(),Hg=a("li"),HZ=a("strong"),qUe=o("ctrl"),NUe=o(" \u2014 "),eS=a("a"),jUe=o("CTRLTokenizer"),DUe=o(" (CTRL model)"),GUe=l(),as=a("li"),UZ=a("strong"),OUe=o("deberta"),VUe=o(" \u2014 "),oS=a("a"),XUe=o("DebertaTokenizer"),zUe=o(" or "),rS=a("a"),QUe=o("DebertaTokenizerFast"),WUe=o(" (DeBERTa model)"),HUe=l(),Ug=a("li"),JZ=a("strong"),UUe=o("deberta-v2"),JUe=o(" \u2014 "),tS=a("a"),YUe=o("DebertaV2Tokenizer"),KUe=o(" (DeBERTa-v2 model)"),ZUe=l(),ns=a("li"),YZ=a("strong"),eJe=o("distilbert"),oJe=o(" \u2014 "),aS=a("a"),rJe=o("DistilBertTokenizer"),tJe=o(" or "),nS=a("a"),aJe=o("DistilBertTokenizerFast"),nJe=o(" (DistilBERT model)"),sJe=l(),ss=a("li"),KZ=a("strong"),lJe=o("dpr"),iJe=o(" \u2014 "),sS=a("a"),dJe=o("DPRQuestionEncoderTokenizer"),cJe=o(" or "),lS=a("a"),fJe=o("DPRQuestionEncoderTokenizerFast"),mJe=o(" (DPR model)"),gJe=l(),ls=a("li"),ZZ=a("strong"),hJe=o("electra"),pJe=o(" \u2014 "),iS=a("a"),_Je=o("ElectraTokenizer"),uJe=o(" or "),dS=a("a"),bJe=o("ElectraTokenizerFast"),vJe=o(" (ELECTRA model)"),FJe=l(),Jg=a("li"),eee=a("strong"),TJe=o("fastspeech2"),MJe=o(" \u2014 "),cS=a("a"),EJe=o("FastSpeech2Tokenizer"),CJe=o(" (FastSpeech2 model)"),wJe=l(),Yg=a("li"),oee=a("strong"),AJe=o("flaubert"),yJe=o(" \u2014 "),fS=a("a"),LJe=o("FlaubertTokenizer"),xJe=o(" (FlauBERT model)"),kJe=l(),is=a("li"),ree=a("strong"),SJe=o("fnet"),RJe=o(" \u2014 "),mS=a("a"),BJe=o("FNetTokenizer"),PJe=o(" or "),gS=a("a"),$Je=o("FNetTokenizerFast"),IJe=o(" (FNet model)"),qJe=l(),Kg=a("li"),tee=a("strong"),NJe=o("fsmt"),jJe=o(" \u2014 "),hS=a("a"),DJe=o("FSMTTokenizer"),GJe=o(" (FairSeq Machine-Translation model)"),OJe=l(),ds=a("li"),aee=a("strong"),VJe=o("funnel"),XJe=o(" \u2014 "),pS=a("a"),zJe=o("FunnelTokenizer"),QJe=o(" or "),_S=a("a"),WJe=o("FunnelTokenizerFast"),HJe=o(" (Funnel Transformer model)"),UJe=l(),cs=a("li"),nee=a("strong"),JJe=o("gpt2"),YJe=o(" \u2014 "),uS=a("a"),KJe=o("GPT2Tokenizer"),ZJe=o(" or "),bS=a("a"),eYe=o("GPT2TokenizerFast"),oYe=o(" (OpenAI GPT-2 model)"),rYe=l(),fs=a("li"),see=a("strong"),tYe=o("gpt_neo"),aYe=o(" \u2014 "),vS=a("a"),nYe=o("GPT2Tokenizer"),sYe=o(" or "),FS=a("a"),lYe=o("GPT2TokenizerFast"),iYe=o(" (GPT Neo model)"),dYe=l(),ms=a("li"),lee=a("strong"),cYe=o("herbert"),fYe=o(" \u2014 "),TS=a("a"),mYe=o("HerbertTokenizer"),gYe=o(" or "),MS=a("a"),hYe=o("HerbertTokenizerFast"),pYe=o(" (HerBERT model)"),_Ye=l(),Zg=a("li"),iee=a("strong"),uYe=o("hubert"),bYe=o(" \u2014 "),ES=a("a"),vYe=o("Wav2Vec2CTCTokenizer"),FYe=o(" (Hubert model)"),TYe=l(),gs=a("li"),dee=a("strong"),MYe=o("ibert"),EYe=o(" \u2014 "),CS=a("a"),CYe=o("RobertaTokenizer"),wYe=o(" or "),wS=a("a"),AYe=o("RobertaTokenizerFast"),yYe=o(" (I-BERT model)"),LYe=l(),hs=a("li"),cee=a("strong"),xYe=o("layoutlm"),kYe=o(" \u2014 "),AS=a("a"),SYe=o("LayoutLMTokenizer"),RYe=o(" or "),yS=a("a"),BYe=o("LayoutLMTokenizerFast"),PYe=o(" (LayoutLM model)"),$Ye=l(),ps=a("li"),fee=a("strong"),IYe=o("layoutlmv2"),qYe=o(" \u2014 "),LS=a("a"),NYe=o("LayoutLMv2Tokenizer"),jYe=o(" or "),xS=a("a"),DYe=o("LayoutLMv2TokenizerFast"),GYe=o(" (LayoutLMv2 model)"),OYe=l(),_s=a("li"),mee=a("strong"),VYe=o("layoutxlm"),XYe=o(" \u2014 "),kS=a("a"),zYe=o("LayoutXLMTokenizer"),QYe=o(" or "),SS=a("a"),WYe=o("LayoutXLMTokenizerFast"),HYe=o(" (LayoutXLM model)"),UYe=l(),us=a("li"),gee=a("strong"),JYe=o("led"),YYe=o(" \u2014 "),RS=a("a"),KYe=o("LEDTokenizer"),ZYe=o(" or "),BS=a("a"),eKe=o("LEDTokenizerFast"),oKe=o(" (LED model)"),rKe=l(),bs=a("li"),hee=a("strong"),tKe=o("longformer"),aKe=o(" \u2014 "),PS=a("a"),nKe=o("LongformerTokenizer"),sKe=o(" or "),$S=a("a"),lKe=o("LongformerTokenizerFast"),iKe=o(" (Longformer model)"),dKe=l(),eh=a("li"),pee=a("strong"),cKe=o("luke"),fKe=o(" \u2014 "),IS=a("a"),mKe=o("LukeTokenizer"),gKe=o(" (LUKE model)"),hKe=l(),vs=a("li"),_ee=a("strong"),pKe=o("lxmert"),_Ke=o(" \u2014 "),qS=a("a"),uKe=o("LxmertTokenizer"),bKe=o(" or "),NS=a("a"),vKe=o("LxmertTokenizerFast"),FKe=o(" (LXMERT model)"),TKe=l(),oh=a("li"),uee=a("strong"),MKe=o("m2m_100"),EKe=o(" \u2014 "),jS=a("a"),CKe=o("M2M100Tokenizer"),wKe=o(" (M2M100 model)"),AKe=l(),rh=a("li"),bee=a("strong"),yKe=o("marian"),LKe=o(" \u2014 "),DS=a("a"),xKe=o("MarianTokenizer"),kKe=o(" (Marian model)"),SKe=l(),Fs=a("li"),vee=a("strong"),RKe=o("mbart"),BKe=o(" \u2014 "),GS=a("a"),PKe=o("MBartTokenizer"),$Ke=o(" or "),OS=a("a"),IKe=o("MBartTokenizerFast"),qKe=o(" (mBART model)"),NKe=l(),Ts=a("li"),Fee=a("strong"),jKe=o("mbart50"),DKe=o(" \u2014 "),VS=a("a"),GKe=o("MBart50Tokenizer"),OKe=o(" or "),XS=a("a"),VKe=o("MBart50TokenizerFast"),XKe=o(" (mBART-50 model)"),zKe=l(),th=a("li"),Tee=a("strong"),QKe=o("mluke"),WKe=o(" \u2014 "),zS=a("a"),HKe=o("MLukeTokenizer"),UKe=o(" (mLUKE model)"),JKe=l(),Ms=a("li"),Mee=a("strong"),YKe=o("mobilebert"),KKe=o(" \u2014 "),QS=a("a"),ZKe=o("MobileBertTokenizer"),eZe=o(" or "),WS=a("a"),oZe=o("MobileBertTokenizerFast"),rZe=o(" (MobileBERT model)"),tZe=l(),Es=a("li"),Eee=a("strong"),aZe=o("mpnet"),nZe=o(" \u2014 "),HS=a("a"),sZe=o("MPNetTokenizer"),lZe=o(" or "),US=a("a"),iZe=o("MPNetTokenizerFast"),dZe=o(" (MPNet model)"),cZe=l(),Cs=a("li"),Cee=a("strong"),fZe=o("mt5"),mZe=o(" \u2014 "),JS=a("a"),gZe=o("MT5Tokenizer"),hZe=o(" or "),YS=a("a"),pZe=o("MT5TokenizerFast"),_Ze=o(" (mT5 model)"),uZe=l(),ws=a("li"),wee=a("strong"),bZe=o("openai-gpt"),vZe=o(" \u2014 "),KS=a("a"),FZe=o("OpenAIGPTTokenizer"),TZe=o(" or "),ZS=a("a"),MZe=o("OpenAIGPTTokenizerFast"),EZe=o(" (OpenAI GPT model)"),CZe=l(),As=a("li"),Aee=a("strong"),wZe=o("pegasus"),AZe=o(" \u2014 "),eR=a("a"),yZe=o("PegasusTokenizer"),LZe=o(" or "),oR=a("a"),xZe=o("PegasusTokenizerFast"),kZe=o(" (Pegasus model)"),SZe=l(),ah=a("li"),yee=a("strong"),RZe=o("perceiver"),BZe=o(" \u2014 "),rR=a("a"),PZe=o("PerceiverTokenizer"),$Ze=o(" (Perceiver model)"),IZe=l(),nh=a("li"),Lee=a("strong"),qZe=o("phobert"),NZe=o(" \u2014 "),tR=a("a"),jZe=o("PhobertTokenizer"),DZe=o(" (PhoBERT model)"),GZe=l(),sh=a("li"),xee=a("strong"),OZe=o("plbart"),VZe=o(" \u2014 "),aR=a("a"),XZe=o("PLBartTokenizer"),zZe=o(" (PLBart model)"),QZe=l(),lh=a("li"),kee=a("strong"),WZe=o("prophetnet"),HZe=o(" \u2014 "),nR=a("a"),UZe=o("ProphetNetTokenizer"),JZe=o(" (ProphetNet model)"),YZe=l(),ys=a("li"),See=a("strong"),KZe=o("qdqbert"),ZZe=o(" \u2014 "),sR=a("a"),eeo=o("BertTokenizer"),oeo=o(" or "),lR=a("a"),reo=o("BertTokenizerFast"),teo=o(" (QDQBert model)"),aeo=l(),ih=a("li"),Ree=a("strong"),neo=o("rag"),seo=o(" \u2014 "),iR=a("a"),leo=o("RagTokenizer"),ieo=o(" (RAG model)"),deo=l(),Ls=a("li"),Bee=a("strong"),ceo=o("realm"),feo=o(" \u2014 "),dR=a("a"),meo=o("RealmTokenizer"),geo=o(" or "),cR=a("a"),heo=o("RealmTokenizerFast"),peo=o(" (Realm model)"),_eo=l(),xs=a("li"),Pee=a("strong"),ueo=o("reformer"),beo=o(" \u2014 "),fR=a("a"),veo=o("ReformerTokenizer"),Feo=o(" or "),mR=a("a"),Teo=o("ReformerTokenizerFast"),Meo=o(" (Reformer model)"),Eeo=l(),ks=a("li"),$ee=a("strong"),Ceo=o("rembert"),weo=o(" \u2014 "),gR=a("a"),Aeo=o("RemBertTokenizer"),yeo=o(" or "),hR=a("a"),Leo=o("RemBertTokenizerFast"),xeo=o(" (RemBERT model)"),keo=l(),Ss=a("li"),Iee=a("strong"),Seo=o("retribert"),Reo=o(" \u2014 "),pR=a("a"),Beo=o("RetriBertTokenizer"),Peo=o(" or "),_R=a("a"),$eo=o("RetriBertTokenizerFast"),Ieo=o(" (RetriBERT model)"),qeo=l(),Rs=a("li"),qee=a("strong"),Neo=o("roberta"),jeo=o(" \u2014 "),uR=a("a"),Deo=o("RobertaTokenizer"),Geo=o(" or "),bR=a("a"),Oeo=o("RobertaTokenizerFast"),Veo=o(" (RoBERTa model)"),Xeo=l(),Bs=a("li"),Nee=a("strong"),zeo=o("roformer"),Qeo=o(" \u2014 "),vR=a("a"),Weo=o("RoFormerTokenizer"),Heo=o(" or "),FR=a("a"),Ueo=o("RoFormerTokenizerFast"),Jeo=o(" (RoFormer model)"),Yeo=l(),dh=a("li"),jee=a("strong"),Keo=o("speech_to_text"),Zeo=o(" \u2014 "),TR=a("a"),eoo=o("Speech2TextTokenizer"),ooo=o(" (Speech2Text model)"),roo=l(),ch=a("li"),Dee=a("strong"),too=o("speech_to_text_2"),aoo=o(" \u2014 "),MR=a("a"),noo=o("Speech2Text2Tokenizer"),soo=o(" (Speech2Text2 model)"),loo=l(),Ps=a("li"),Gee=a("strong"),ioo=o("splinter"),doo=o(" \u2014 "),ER=a("a"),coo=o("SplinterTokenizer"),foo=o(" or "),CR=a("a"),moo=o("SplinterTokenizerFast"),goo=o(" (Splinter model)"),hoo=l(),$s=a("li"),Oee=a("strong"),poo=o("squeezebert"),_oo=o(" \u2014 "),wR=a("a"),uoo=o("SqueezeBertTokenizer"),boo=o(" or "),AR=a("a"),voo=o("SqueezeBertTokenizerFast"),Foo=o(" (SqueezeBERT model)"),Too=l(),Is=a("li"),Vee=a("strong"),Moo=o("t5"),Eoo=o(" \u2014 "),yR=a("a"),Coo=o("T5Tokenizer"),woo=o(" or "),LR=a("a"),Aoo=o("T5TokenizerFast"),yoo=o(" (T5 model)"),Loo=l(),fh=a("li"),Xee=a("strong"),xoo=o("tapas"),koo=o(" \u2014 "),xR=a("a"),Soo=o("TapasTokenizer"),Roo=o(" (TAPAS model)"),Boo=l(),mh=a("li"),zee=a("strong"),Poo=o("tapex"),$oo=o(" \u2014 "),kR=a("a"),Ioo=o("TapexTokenizer"),qoo=o(" (TAPEX model)"),Noo=l(),gh=a("li"),Qee=a("strong"),joo=o("transfo-xl"),Doo=o(" \u2014 "),SR=a("a"),Goo=o("TransfoXLTokenizer"),Ooo=o(" (Transformer-XL model)"),Voo=l(),hh=a("li"),Wee=a("strong"),Xoo=o("wav2vec2"),zoo=o(" \u2014 "),RR=a("a"),Qoo=o("Wav2Vec2CTCTokenizer"),Woo=o(" (Wav2Vec2 model)"),Hoo=l(),ph=a("li"),Hee=a("strong"),Uoo=o("wav2vec2_phoneme"),Joo=o(" \u2014 "),BR=a("a"),Yoo=o("Wav2Vec2PhonemeCTCTokenizer"),Koo=o(" (Wav2Vec2Phoneme model)"),Zoo=l(),qs=a("li"),Uee=a("strong"),ero=o("xglm"),oro=o(" \u2014 "),PR=a("a"),rro=o("XGLMTokenizer"),tro=o(" or "),$R=a("a"),aro=o("XGLMTokenizerFast"),nro=o(" (XGLM model)"),sro=l(),_h=a("li"),Jee=a("strong"),lro=o("xlm"),iro=o(" \u2014 "),IR=a("a"),dro=o("XLMTokenizer"),cro=o(" (XLM model)"),fro=l(),uh=a("li"),Yee=a("strong"),mro=o("xlm-prophetnet"),gro=o(" \u2014 "),qR=a("a"),hro=o("XLMProphetNetTokenizer"),pro=o(" (XLMProphetNet model)"),_ro=l(),Ns=a("li"),Kee=a("strong"),uro=o("xlm-roberta"),bro=o(" \u2014 "),NR=a("a"),vro=o("XLMRobertaTokenizer"),Fro=o(" or "),jR=a("a"),Tro=o("XLMRobertaTokenizerFast"),Mro=o(" (XLM-RoBERTa model)"),Ero=l(),js=a("li"),Zee=a("strong"),Cro=o("xlnet"),wro=o(" \u2014 "),DR=a("a"),Aro=o("XLNetTokenizer"),yro=o(" or "),GR=a("a"),Lro=o("XLNetTokenizerFast"),xro=o(" (XLNet model)"),kro=l(),eoe=a("p"),Sro=o("Examples:"),Rro=l(),f(UC.$$.fragment),Bro=l(),bh=a("div"),f(JC.$$.fragment),Pro=l(),ooe=a("p"),$ro=o("Register a new tokenizer in this mapping."),KRe=l(),Hi=a("h2"),vh=a("a"),roe=a("span"),f(YC.$$.fragment),Iro=l(),toe=a("span"),qro=o("AutoFeatureExtractor"),ZRe=l(),Ho=a("div"),f(KC.$$.fragment),Nro=l(),ZC=a("p"),jro=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),OR=a("a"),Dro=o("AutoFeatureExtractor.from_pretrained()"),Gro=o(" class method."),Oro=l(),ew=a("p"),Vro=o("This class cannot be instantiated directly using "),aoe=a("code"),Xro=o("__init__()"),zro=o(" (throws an error)."),Qro=l(),$e=a("div"),f(ow.$$.fragment),Wro=l(),noe=a("p"),Hro=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Uro=l(),Va=a("p"),Jro=o("The feature extractor class to instantiate is selected based on the "),soe=a("code"),Yro=o("model_type"),Kro=o(` property of the config object
(either passed as an argument or loaded from `),loe=a("code"),Zro=o("pretrained_model_name_or_path"),eto=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ioe=a("code"),oto=o("pretrained_model_name_or_path"),rto=o(":"),tto=l(),ee=a("ul"),Fh=a("li"),doe=a("strong"),ato=o("beit"),nto=o(" \u2014 "),VR=a("a"),sto=o("BeitFeatureExtractor"),lto=o(" (BEiT model)"),ito=l(),Th=a("li"),coe=a("strong"),dto=o("clip"),cto=o(" \u2014 "),XR=a("a"),fto=o("CLIPFeatureExtractor"),mto=o(" (CLIP model)"),gto=l(),Mh=a("li"),foe=a("strong"),hto=o("convnext"),pto=o(" \u2014 "),zR=a("a"),_to=o("ConvNextFeatureExtractor"),uto=o(" (ConvNext model)"),bto=l(),Eh=a("li"),moe=a("strong"),vto=o("deit"),Fto=o(" \u2014 "),QR=a("a"),Tto=o("DeiTFeatureExtractor"),Mto=o(" (DeiT model)"),Eto=l(),Ch=a("li"),goe=a("strong"),Cto=o("detr"),wto=o(" \u2014 "),WR=a("a"),Ato=o("DetrFeatureExtractor"),yto=o(" (DETR model)"),Lto=l(),wh=a("li"),hoe=a("strong"),xto=o("hubert"),kto=o(" \u2014 "),HR=a("a"),Sto=o("Wav2Vec2FeatureExtractor"),Rto=o(" (Hubert model)"),Bto=l(),Ah=a("li"),poe=a("strong"),Pto=o("layoutlmv2"),$to=o(" \u2014 "),UR=a("a"),Ito=o("LayoutLMv2FeatureExtractor"),qto=o(" (LayoutLMv2 model)"),Nto=l(),yh=a("li"),_oe=a("strong"),jto=o("maskformer"),Dto=o(" \u2014 "),JR=a("a"),Gto=o("MaskFormerFeatureExtractor"),Oto=o(" (MaskFormer model)"),Vto=l(),Lh=a("li"),uoe=a("strong"),Xto=o("perceiver"),zto=o(" \u2014 "),YR=a("a"),Qto=o("PerceiverFeatureExtractor"),Wto=o(" (Perceiver model)"),Hto=l(),xh=a("li"),boe=a("strong"),Uto=o("poolformer"),Jto=o(" \u2014 "),KR=a("a"),Yto=o("PoolFormerFeatureExtractor"),Kto=o(" (PoolFormer model)"),Zto=l(),kh=a("li"),voe=a("strong"),eao=o("regnet"),oao=o(" \u2014 "),ZR=a("a"),rao=o("ConvNextFeatureExtractor"),tao=o(" (RegNet model)"),aao=l(),Sh=a("li"),Foe=a("strong"),nao=o("resnet"),sao=o(" \u2014 "),eB=a("a"),lao=o("ConvNextFeatureExtractor"),iao=o(" (ResNet model)"),dao=l(),Rh=a("li"),Toe=a("strong"),cao=o("segformer"),fao=o(" \u2014 "),oB=a("a"),mao=o("SegformerFeatureExtractor"),gao=o(" (SegFormer model)"),hao=l(),Bh=a("li"),Moe=a("strong"),pao=o("speech_to_text"),_ao=o(" \u2014 "),rB=a("a"),uao=o("Speech2TextFeatureExtractor"),bao=o(" (Speech2Text model)"),vao=l(),Ph=a("li"),Eoe=a("strong"),Fao=o("swin"),Tao=o(" \u2014 "),tB=a("a"),Mao=o("ViTFeatureExtractor"),Eao=o(" (Swin model)"),Cao=l(),$h=a("li"),Coe=a("strong"),wao=o("van"),Aao=o(" \u2014 "),aB=a("a"),yao=o("ConvNextFeatureExtractor"),Lao=o(" (VAN model)"),xao=l(),Ih=a("li"),woe=a("strong"),kao=o("vit"),Sao=o(" \u2014 "),nB=a("a"),Rao=o("ViTFeatureExtractor"),Bao=o(" (ViT model)"),Pao=l(),qh=a("li"),Aoe=a("strong"),$ao=o("vit_mae"),Iao=o(" \u2014 "),sB=a("a"),qao=o("ViTFeatureExtractor"),Nao=o(" (ViTMAE model)"),jao=l(),Nh=a("li"),yoe=a("strong"),Dao=o("wav2vec2"),Gao=o(" \u2014 "),lB=a("a"),Oao=o("Wav2Vec2FeatureExtractor"),Vao=o(" (Wav2Vec2 model)"),Xao=l(),f(jh.$$.fragment),zao=l(),Loe=a("p"),Qao=o("Examples:"),Wao=l(),f(rw.$$.fragment),Hao=l(),Dh=a("div"),f(tw.$$.fragment),Uao=l(),xoe=a("p"),Jao=o("Register a new feature extractor for this class."),eBe=l(),Ui=a("h2"),Gh=a("a"),koe=a("span"),f(aw.$$.fragment),Yao=l(),Soe=a("span"),Kao=o("AutoProcessor"),oBe=l(),Uo=a("div"),f(nw.$$.fragment),Zao=l(),sw=a("p"),eno=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),iB=a("a"),ono=o("AutoProcessor.from_pretrained()"),rno=o(" class method."),tno=l(),lw=a("p"),ano=o("This class cannot be instantiated directly using "),Roe=a("code"),nno=o("__init__()"),sno=o(" (throws an error)."),lno=l(),Ie=a("div"),f(iw.$$.fragment),ino=l(),Boe=a("p"),dno=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),cno=l(),Ji=a("p"),fno=o("The processor class to instantiate is selected based on the "),Poe=a("code"),mno=o("model_type"),gno=o(` property of the config object (either
passed as an argument or loaded from `),$oe=a("code"),hno=o("pretrained_model_name_or_path"),pno=o(" if possible):"),_no=l(),ke=a("ul"),Oh=a("li"),Ioe=a("strong"),uno=o("clip"),bno=o(" \u2014 "),dB=a("a"),vno=o("CLIPProcessor"),Fno=o(" (CLIP model)"),Tno=l(),Vh=a("li"),qoe=a("strong"),Mno=o("layoutlmv2"),Eno=o(" \u2014 "),cB=a("a"),Cno=o("LayoutLMv2Processor"),wno=o(" (LayoutLMv2 model)"),Ano=l(),Xh=a("li"),Noe=a("strong"),yno=o("layoutxlm"),Lno=o(" \u2014 "),fB=a("a"),xno=o("LayoutXLMProcessor"),kno=o(" (LayoutXLM model)"),Sno=l(),zh=a("li"),joe=a("strong"),Rno=o("speech_to_text"),Bno=o(" \u2014 "),mB=a("a"),Pno=o("Speech2TextProcessor"),$no=o(" (Speech2Text model)"),Ino=l(),Qh=a("li"),Doe=a("strong"),qno=o("speech_to_text_2"),Nno=o(" \u2014 "),gB=a("a"),jno=o("Speech2Text2Processor"),Dno=o(" (Speech2Text2 model)"),Gno=l(),Wh=a("li"),Goe=a("strong"),Ono=o("trocr"),Vno=o(" \u2014 "),hB=a("a"),Xno=o("TrOCRProcessor"),zno=o(" (TrOCR model)"),Qno=l(),Hh=a("li"),Ooe=a("strong"),Wno=o("vision-text-dual-encoder"),Hno=o(" \u2014 "),pB=a("a"),Uno=o("VisionTextDualEncoderProcessor"),Jno=o(" (VisionTextDualEncoder model)"),Yno=l(),Uh=a("li"),Voe=a("strong"),Kno=o("wav2vec2"),Zno=o(" \u2014 "),_B=a("a"),eso=o("Wav2Vec2Processor"),oso=o(" (Wav2Vec2 model)"),rso=l(),f(Jh.$$.fragment),tso=l(),Xoe=a("p"),aso=o("Examples:"),nso=l(),f(dw.$$.fragment),sso=l(),Yh=a("div"),f(cw.$$.fragment),lso=l(),zoe=a("p"),iso=o("Register a new processor for this class."),rBe=l(),Yi=a("h2"),Kh=a("a"),Qoe=a("span"),f(fw.$$.fragment),dso=l(),Woe=a("span"),cso=o("AutoModel"),tBe=l(),Jo=a("div"),f(mw.$$.fragment),fso=l(),Ki=a("p"),mso=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uB=a("a"),gso=o("from_pretrained()"),hso=o(" class method or the "),bB=a("a"),pso=o("from_config()"),_so=o(` class
method.`),uso=l(),gw=a("p"),bso=o("This class cannot be instantiated directly using "),Hoe=a("code"),vso=o("__init__()"),Fso=o(" (throws an error)."),Tso=l(),Xr=a("div"),f(hw.$$.fragment),Mso=l(),Uoe=a("p"),Eso=o("Instantiates one of the base model classes of the library from a configuration."),Cso=l(),Zi=a("p"),wso=o(`Note:
Loading a model from its configuration file does `),Joe=a("strong"),Aso=o("not"),yso=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vB=a("a"),Lso=o("from_pretrained()"),xso=o(" to load the model weights."),kso=l(),Yoe=a("p"),Sso=o("Examples:"),Rso=l(),f(pw.$$.fragment),Bso=l(),qe=a("div"),f(_w.$$.fragment),Pso=l(),Koe=a("p"),$so=o("Instantiate one of the base model classes of the library from a pretrained model."),Iso=l(),Xa=a("p"),qso=o("The model class to instantiate is selected based on the "),Zoe=a("code"),Nso=o("model_type"),jso=o(` property of the config object (either
passed as an argument or loaded from `),ere=a("code"),Dso=o("pretrained_model_name_or_path"),Gso=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ore=a("code"),Oso=o("pretrained_model_name_or_path"),Vso=o(":"),Xso=l(),T=a("ul"),Zh=a("li"),rre=a("strong"),zso=o("albert"),Qso=o(" \u2014 "),FB=a("a"),Wso=o("AlbertModel"),Hso=o(" (ALBERT model)"),Uso=l(),ep=a("li"),tre=a("strong"),Jso=o("bart"),Yso=o(" \u2014 "),TB=a("a"),Kso=o("BartModel"),Zso=o(" (BART model)"),elo=l(),op=a("li"),are=a("strong"),olo=o("beit"),rlo=o(" \u2014 "),MB=a("a"),tlo=o("BeitModel"),alo=o(" (BEiT model)"),nlo=l(),rp=a("li"),nre=a("strong"),slo=o("bert"),llo=o(" \u2014 "),EB=a("a"),ilo=o("BertModel"),dlo=o(" (BERT model)"),clo=l(),tp=a("li"),sre=a("strong"),flo=o("bert-generation"),mlo=o(" \u2014 "),CB=a("a"),glo=o("BertGenerationEncoder"),hlo=o(" (Bert Generation model)"),plo=l(),ap=a("li"),lre=a("strong"),_lo=o("big_bird"),ulo=o(" \u2014 "),wB=a("a"),blo=o("BigBirdModel"),vlo=o(" (BigBird model)"),Flo=l(),np=a("li"),ire=a("strong"),Tlo=o("bigbird_pegasus"),Mlo=o(" \u2014 "),AB=a("a"),Elo=o("BigBirdPegasusModel"),Clo=o(" (BigBirdPegasus model)"),wlo=l(),sp=a("li"),dre=a("strong"),Alo=o("blenderbot"),ylo=o(" \u2014 "),yB=a("a"),Llo=o("BlenderbotModel"),xlo=o(" (Blenderbot model)"),klo=l(),lp=a("li"),cre=a("strong"),Slo=o("blenderbot-small"),Rlo=o(" \u2014 "),LB=a("a"),Blo=o("BlenderbotSmallModel"),Plo=o(" (BlenderbotSmall model)"),$lo=l(),ip=a("li"),fre=a("strong"),Ilo=o("camembert"),qlo=o(" \u2014 "),xB=a("a"),Nlo=o("CamembertModel"),jlo=o(" (CamemBERT model)"),Dlo=l(),dp=a("li"),mre=a("strong"),Glo=o("canine"),Olo=o(" \u2014 "),kB=a("a"),Vlo=o("CanineModel"),Xlo=o(" (Canine model)"),zlo=l(),cp=a("li"),gre=a("strong"),Qlo=o("clip"),Wlo=o(" \u2014 "),SB=a("a"),Hlo=o("CLIPModel"),Ulo=o(" (CLIP model)"),Jlo=l(),fp=a("li"),hre=a("strong"),Ylo=o("convbert"),Klo=o(" \u2014 "),RB=a("a"),Zlo=o("ConvBertModel"),eio=o(" (ConvBERT model)"),oio=l(),mp=a("li"),pre=a("strong"),rio=o("convnext"),tio=o(" \u2014 "),BB=a("a"),aio=o("ConvNextModel"),nio=o(" (ConvNext model)"),sio=l(),gp=a("li"),_re=a("strong"),lio=o("ctrl"),iio=o(" \u2014 "),PB=a("a"),dio=o("CTRLModel"),cio=o(" (CTRL model)"),fio=l(),hp=a("li"),ure=a("strong"),mio=o("data2vec-audio"),gio=o(" \u2014 "),$B=a("a"),hio=o("Data2VecAudioModel"),pio=o(" (Data2VecAudio model)"),_io=l(),pp=a("li"),bre=a("strong"),uio=o("data2vec-text"),bio=o(" \u2014 "),IB=a("a"),vio=o("Data2VecTextModel"),Fio=o(" (Data2VecText model)"),Tio=l(),_p=a("li"),vre=a("strong"),Mio=o("data2vec-vision"),Eio=o(" \u2014 "),qB=a("a"),Cio=o("Data2VecVisionModel"),wio=o(" (Data2VecVision model)"),Aio=l(),up=a("li"),Fre=a("strong"),yio=o("deberta"),Lio=o(" \u2014 "),NB=a("a"),xio=o("DebertaModel"),kio=o(" (DeBERTa model)"),Sio=l(),bp=a("li"),Tre=a("strong"),Rio=o("deberta-v2"),Bio=o(" \u2014 "),jB=a("a"),Pio=o("DebertaV2Model"),$io=o(" (DeBERTa-v2 model)"),Iio=l(),vp=a("li"),Mre=a("strong"),qio=o("decision_transformer"),Nio=o(" \u2014 "),DB=a("a"),jio=o("DecisionTransformerModel"),Dio=o(" (Decision Transformer model)"),Gio=l(),Fp=a("li"),Ere=a("strong"),Oio=o("deit"),Vio=o(" \u2014 "),GB=a("a"),Xio=o("DeiTModel"),zio=o(" (DeiT model)"),Qio=l(),Tp=a("li"),Cre=a("strong"),Wio=o("detr"),Hio=o(" \u2014 "),OB=a("a"),Uio=o("DetrModel"),Jio=o(" (DETR model)"),Yio=l(),Mp=a("li"),wre=a("strong"),Kio=o("distilbert"),Zio=o(" \u2014 "),VB=a("a"),edo=o("DistilBertModel"),odo=o(" (DistilBERT model)"),rdo=l(),Ep=a("li"),Are=a("strong"),tdo=o("dpr"),ado=o(" \u2014 "),XB=a("a"),ndo=o("DPRQuestionEncoder"),sdo=o(" (DPR model)"),ldo=l(),Cp=a("li"),yre=a("strong"),ido=o("dpt"),ddo=o(" \u2014 "),zB=a("a"),cdo=o("DPTModel"),fdo=o(" (DPT model)"),mdo=l(),wp=a("li"),Lre=a("strong"),gdo=o("electra"),hdo=o(" \u2014 "),QB=a("a"),pdo=o("ElectraModel"),_do=o(" (ELECTRA model)"),udo=l(),Ap=a("li"),xre=a("strong"),bdo=o("fastspeech2"),vdo=o(" \u2014 "),WB=a("a"),Fdo=o("FastSpeech2Model"),Tdo=o(" (FastSpeech2 model)"),Mdo=l(),yp=a("li"),kre=a("strong"),Edo=o("flaubert"),Cdo=o(" \u2014 "),HB=a("a"),wdo=o("FlaubertModel"),Ado=o(" (FlauBERT model)"),ydo=l(),Lp=a("li"),Sre=a("strong"),Ldo=o("fnet"),xdo=o(" \u2014 "),UB=a("a"),kdo=o("FNetModel"),Sdo=o(" (FNet model)"),Rdo=l(),xp=a("li"),Rre=a("strong"),Bdo=o("fsmt"),Pdo=o(" \u2014 "),JB=a("a"),$do=o("FSMTModel"),Ido=o(" (FairSeq Machine-Translation model)"),qdo=l(),Ds=a("li"),Bre=a("strong"),Ndo=o("funnel"),jdo=o(" \u2014 "),YB=a("a"),Ddo=o("FunnelModel"),Gdo=o(" or "),KB=a("a"),Odo=o("FunnelBaseModel"),Vdo=o(" (Funnel Transformer model)"),Xdo=l(),kp=a("li"),Pre=a("strong"),zdo=o("glpn"),Qdo=o(" \u2014 "),ZB=a("a"),Wdo=o("GLPNModel"),Hdo=o(" (GLPN model)"),Udo=l(),Sp=a("li"),$re=a("strong"),Jdo=o("gpt2"),Ydo=o(" \u2014 "),eP=a("a"),Kdo=o("GPT2Model"),Zdo=o(" (OpenAI GPT-2 model)"),eco=l(),Rp=a("li"),Ire=a("strong"),oco=o("gpt_neo"),rco=o(" \u2014 "),oP=a("a"),tco=o("GPTNeoModel"),aco=o(" (GPT Neo model)"),nco=l(),Bp=a("li"),qre=a("strong"),sco=o("gptj"),lco=o(" \u2014 "),rP=a("a"),ico=o("GPTJModel"),dco=o(" (GPT-J model)"),cco=l(),Pp=a("li"),Nre=a("strong"),fco=o("hubert"),mco=o(" \u2014 "),tP=a("a"),gco=o("HubertModel"),hco=o(" (Hubert model)"),pco=l(),$p=a("li"),jre=a("strong"),_co=o("ibert"),uco=o(" \u2014 "),aP=a("a"),bco=o("IBertModel"),vco=o(" (I-BERT model)"),Fco=l(),Ip=a("li"),Dre=a("strong"),Tco=o("imagegpt"),Mco=o(" \u2014 "),nP=a("a"),Eco=o("ImageGPTModel"),Cco=o(" (ImageGPT model)"),wco=l(),qp=a("li"),Gre=a("strong"),Aco=o("layoutlm"),yco=o(" \u2014 "),sP=a("a"),Lco=o("LayoutLMModel"),xco=o(" (LayoutLM model)"),kco=l(),Np=a("li"),Ore=a("strong"),Sco=o("layoutlmv2"),Rco=o(" \u2014 "),lP=a("a"),Bco=o("LayoutLMv2Model"),Pco=o(" (LayoutLMv2 model)"),$co=l(),jp=a("li"),Vre=a("strong"),Ico=o("led"),qco=o(" \u2014 "),iP=a("a"),Nco=o("LEDModel"),jco=o(" (LED model)"),Dco=l(),Dp=a("li"),Xre=a("strong"),Gco=o("longformer"),Oco=o(" \u2014 "),dP=a("a"),Vco=o("LongformerModel"),Xco=o(" (Longformer model)"),zco=l(),Gp=a("li"),zre=a("strong"),Qco=o("luke"),Wco=o(" \u2014 "),cP=a("a"),Hco=o("LukeModel"),Uco=o(" (LUKE model)"),Jco=l(),Op=a("li"),Qre=a("strong"),Yco=o("lxmert"),Kco=o(" \u2014 "),fP=a("a"),Zco=o("LxmertModel"),efo=o(" (LXMERT model)"),ofo=l(),Vp=a("li"),Wre=a("strong"),rfo=o("m2m_100"),tfo=o(" \u2014 "),mP=a("a"),afo=o("M2M100Model"),nfo=o(" (M2M100 model)"),sfo=l(),Xp=a("li"),Hre=a("strong"),lfo=o("marian"),ifo=o(" \u2014 "),gP=a("a"),dfo=o("MarianModel"),cfo=o(" (Marian model)"),ffo=l(),zp=a("li"),Ure=a("strong"),mfo=o("maskformer"),gfo=o(" \u2014 "),hP=a("a"),hfo=o("MaskFormerModel"),pfo=o(" (MaskFormer model)"),_fo=l(),Qp=a("li"),Jre=a("strong"),ufo=o("mbart"),bfo=o(" \u2014 "),pP=a("a"),vfo=o("MBartModel"),Ffo=o(" (mBART model)"),Tfo=l(),Wp=a("li"),Yre=a("strong"),Mfo=o("megatron-bert"),Efo=o(" \u2014 "),_P=a("a"),Cfo=o("MegatronBertModel"),wfo=o(" (MegatronBert model)"),Afo=l(),Hp=a("li"),Kre=a("strong"),yfo=o("mobilebert"),Lfo=o(" \u2014 "),uP=a("a"),xfo=o("MobileBertModel"),kfo=o(" (MobileBERT model)"),Sfo=l(),Up=a("li"),Zre=a("strong"),Rfo=o("mpnet"),Bfo=o(" \u2014 "),bP=a("a"),Pfo=o("MPNetModel"),$fo=o(" (MPNet model)"),Ifo=l(),Jp=a("li"),ete=a("strong"),qfo=o("mt5"),Nfo=o(" \u2014 "),vP=a("a"),jfo=o("MT5Model"),Dfo=o(" (mT5 model)"),Gfo=l(),Yp=a("li"),ote=a("strong"),Ofo=o("nystromformer"),Vfo=o(" \u2014 "),FP=a("a"),Xfo=o("NystromformerModel"),zfo=o(" (Nystromformer model)"),Qfo=l(),Kp=a("li"),rte=a("strong"),Wfo=o("openai-gpt"),Hfo=o(" \u2014 "),TP=a("a"),Ufo=o("OpenAIGPTModel"),Jfo=o(" (OpenAI GPT model)"),Yfo=l(),Zp=a("li"),tte=a("strong"),Kfo=o("pegasus"),Zfo=o(" \u2014 "),MP=a("a"),emo=o("PegasusModel"),omo=o(" (Pegasus model)"),rmo=l(),e_=a("li"),ate=a("strong"),tmo=o("perceiver"),amo=o(" \u2014 "),EP=a("a"),nmo=o("PerceiverModel"),smo=o(" (Perceiver model)"),lmo=l(),o_=a("li"),nte=a("strong"),imo=o("plbart"),dmo=o(" \u2014 "),CP=a("a"),cmo=o("PLBartModel"),fmo=o(" (PLBart model)"),mmo=l(),r_=a("li"),ste=a("strong"),gmo=o("poolformer"),hmo=o(" \u2014 "),wP=a("a"),pmo=o("PoolFormerModel"),_mo=o(" (PoolFormer model)"),umo=l(),t_=a("li"),lte=a("strong"),bmo=o("prophetnet"),vmo=o(" \u2014 "),AP=a("a"),Fmo=o("ProphetNetModel"),Tmo=o(" (ProphetNet model)"),Mmo=l(),a_=a("li"),ite=a("strong"),Emo=o("qdqbert"),Cmo=o(" \u2014 "),yP=a("a"),wmo=o("QDQBertModel"),Amo=o(" (QDQBert model)"),ymo=l(),n_=a("li"),dte=a("strong"),Lmo=o("reformer"),xmo=o(" \u2014 "),LP=a("a"),kmo=o("ReformerModel"),Smo=o(" (Reformer model)"),Rmo=l(),s_=a("li"),cte=a("strong"),Bmo=o("regnet"),Pmo=o(" \u2014 "),xP=a("a"),$mo=o("RegNetModel"),Imo=o(" (RegNet model)"),qmo=l(),l_=a("li"),fte=a("strong"),Nmo=o("rembert"),jmo=o(" \u2014 "),kP=a("a"),Dmo=o("RemBertModel"),Gmo=o(" (RemBERT model)"),Omo=l(),i_=a("li"),mte=a("strong"),Vmo=o("resnet"),Xmo=o(" \u2014 "),SP=a("a"),zmo=o("ResNetModel"),Qmo=o(" (ResNet model)"),Wmo=l(),d_=a("li"),gte=a("strong"),Hmo=o("retribert"),Umo=o(" \u2014 "),RP=a("a"),Jmo=o("RetriBertModel"),Ymo=o(" (RetriBERT model)"),Kmo=l(),c_=a("li"),hte=a("strong"),Zmo=o("roberta"),ego=o(" \u2014 "),BP=a("a"),ogo=o("RobertaModel"),rgo=o(" (RoBERTa model)"),tgo=l(),f_=a("li"),pte=a("strong"),ago=o("roformer"),ngo=o(" \u2014 "),PP=a("a"),sgo=o("RoFormerModel"),lgo=o(" (RoFormer model)"),igo=l(),m_=a("li"),_te=a("strong"),dgo=o("segformer"),cgo=o(" \u2014 "),$P=a("a"),fgo=o("SegformerModel"),mgo=o(" (SegFormer model)"),ggo=l(),g_=a("li"),ute=a("strong"),hgo=o("sew"),pgo=o(" \u2014 "),IP=a("a"),_go=o("SEWModel"),ugo=o(" (SEW model)"),bgo=l(),h_=a("li"),bte=a("strong"),vgo=o("sew-d"),Fgo=o(" \u2014 "),qP=a("a"),Tgo=o("SEWDModel"),Mgo=o(" (SEW-D model)"),Ego=l(),p_=a("li"),vte=a("strong"),Cgo=o("speech_to_text"),wgo=o(" \u2014 "),NP=a("a"),Ago=o("Speech2TextModel"),ygo=o(" (Speech2Text model)"),Lgo=l(),__=a("li"),Fte=a("strong"),xgo=o("splinter"),kgo=o(" \u2014 "),jP=a("a"),Sgo=o("SplinterModel"),Rgo=o(" (Splinter model)"),Bgo=l(),u_=a("li"),Tte=a("strong"),Pgo=o("squeezebert"),$go=o(" \u2014 "),DP=a("a"),Igo=o("SqueezeBertModel"),qgo=o(" (SqueezeBERT model)"),Ngo=l(),b_=a("li"),Mte=a("strong"),jgo=o("swin"),Dgo=o(" \u2014 "),GP=a("a"),Ggo=o("SwinModel"),Ogo=o(" (Swin model)"),Vgo=l(),v_=a("li"),Ete=a("strong"),Xgo=o("t5"),zgo=o(" \u2014 "),OP=a("a"),Qgo=o("T5Model"),Wgo=o(" (T5 model)"),Hgo=l(),F_=a("li"),Cte=a("strong"),Ugo=o("tapas"),Jgo=o(" \u2014 "),VP=a("a"),Ygo=o("TapasModel"),Kgo=o(" (TAPAS model)"),Zgo=l(),T_=a("li"),wte=a("strong"),eho=o("transfo-xl"),oho=o(" \u2014 "),XP=a("a"),rho=o("TransfoXLModel"),tho=o(" (Transformer-XL model)"),aho=l(),M_=a("li"),Ate=a("strong"),nho=o("unispeech"),sho=o(" \u2014 "),zP=a("a"),lho=o("UniSpeechModel"),iho=o(" (UniSpeech model)"),dho=l(),E_=a("li"),yte=a("strong"),cho=o("unispeech-sat"),fho=o(" \u2014 "),QP=a("a"),mho=o("UniSpeechSatModel"),gho=o(" (UniSpeechSat model)"),hho=l(),C_=a("li"),Lte=a("strong"),pho=o("van"),_ho=o(" \u2014 "),WP=a("a"),uho=o("VanModel"),bho=o(" (VAN model)"),vho=l(),w_=a("li"),xte=a("strong"),Fho=o("vilt"),Tho=o(" \u2014 "),HP=a("a"),Mho=o("ViltModel"),Eho=o(" (ViLT model)"),Cho=l(),A_=a("li"),kte=a("strong"),who=o("vision-text-dual-encoder"),Aho=o(" \u2014 "),UP=a("a"),yho=o("VisionTextDualEncoderModel"),Lho=o(" (VisionTextDualEncoder model)"),xho=l(),y_=a("li"),Ste=a("strong"),kho=o("visual_bert"),Sho=o(" \u2014 "),JP=a("a"),Rho=o("VisualBertModel"),Bho=o(" (VisualBert model)"),Pho=l(),L_=a("li"),Rte=a("strong"),$ho=o("vit"),Iho=o(" \u2014 "),YP=a("a"),qho=o("ViTModel"),Nho=o(" (ViT model)"),jho=l(),x_=a("li"),Bte=a("strong"),Dho=o("vit_mae"),Gho=o(" \u2014 "),KP=a("a"),Oho=o("ViTMAEModel"),Vho=o(" (ViTMAE model)"),Xho=l(),k_=a("li"),Pte=a("strong"),zho=o("wav2vec2"),Qho=o(" \u2014 "),ZP=a("a"),Who=o("Wav2Vec2Model"),Hho=o(" (Wav2Vec2 model)"),Uho=l(),S_=a("li"),$te=a("strong"),Jho=o("wavlm"),Yho=o(" \u2014 "),e$=a("a"),Kho=o("WavLMModel"),Zho=o(" (WavLM model)"),epo=l(),R_=a("li"),Ite=a("strong"),opo=o("xglm"),rpo=o(" \u2014 "),o$=a("a"),tpo=o("XGLMModel"),apo=o(" (XGLM model)"),npo=l(),B_=a("li"),qte=a("strong"),spo=o("xlm"),lpo=o(" \u2014 "),r$=a("a"),ipo=o("XLMModel"),dpo=o(" (XLM model)"),cpo=l(),P_=a("li"),Nte=a("strong"),fpo=o("xlm-prophetnet"),mpo=o(" \u2014 "),t$=a("a"),gpo=o("XLMProphetNetModel"),hpo=o(" (XLMProphetNet model)"),ppo=l(),$_=a("li"),jte=a("strong"),_po=o("xlm-roberta"),upo=o(" \u2014 "),a$=a("a"),bpo=o("XLMRobertaModel"),vpo=o(" (XLM-RoBERTa model)"),Fpo=l(),I_=a("li"),Dte=a("strong"),Tpo=o("xlm-roberta-xl"),Mpo=o(" \u2014 "),n$=a("a"),Epo=o("XLMRobertaXLModel"),Cpo=o(" (XLM-RoBERTa-XL model)"),wpo=l(),q_=a("li"),Gte=a("strong"),Apo=o("xlnet"),ypo=o(" \u2014 "),s$=a("a"),Lpo=o("XLNetModel"),xpo=o(" (XLNet model)"),kpo=l(),N_=a("li"),Ote=a("strong"),Spo=o("yoso"),Rpo=o(" \u2014 "),l$=a("a"),Bpo=o("YosoModel"),Ppo=o(" (YOSO model)"),$po=l(),j_=a("p"),Ipo=o("The model is set in evaluation mode by default using "),Vte=a("code"),qpo=o("model.eval()"),Npo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xte=a("code"),jpo=o("model.train()"),Dpo=l(),zte=a("p"),Gpo=o("Examples:"),Opo=l(),f(uw.$$.fragment),aBe=l(),ed=a("h2"),D_=a("a"),Qte=a("span"),f(bw.$$.fragment),Vpo=l(),Wte=a("span"),Xpo=o("AutoModelForPreTraining"),nBe=l(),Yo=a("div"),f(vw.$$.fragment),zpo=l(),od=a("p"),Qpo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),i$=a("a"),Wpo=o("from_pretrained()"),Hpo=o(" class method or the "),d$=a("a"),Upo=o("from_config()"),Jpo=o(` class
method.`),Ypo=l(),Fw=a("p"),Kpo=o("This class cannot be instantiated directly using "),Hte=a("code"),Zpo=o("__init__()"),e_o=o(" (throws an error)."),o_o=l(),zr=a("div"),f(Tw.$$.fragment),r_o=l(),Ute=a("p"),t_o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),a_o=l(),rd=a("p"),n_o=o(`Note:
Loading a model from its configuration file does `),Jte=a("strong"),s_o=o("not"),l_o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),c$=a("a"),i_o=o("from_pretrained()"),d_o=o(" to load the model weights."),c_o=l(),Yte=a("p"),f_o=o("Examples:"),m_o=l(),f(Mw.$$.fragment),g_o=l(),Ne=a("div"),f(Ew.$$.fragment),h_o=l(),Kte=a("p"),p_o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),__o=l(),za=a("p"),u_o=o("The model class to instantiate is selected based on the "),Zte=a("code"),b_o=o("model_type"),v_o=o(` property of the config object (either
passed as an argument or loaded from `),eae=a("code"),F_o=o("pretrained_model_name_or_path"),T_o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oae=a("code"),M_o=o("pretrained_model_name_or_path"),E_o=o(":"),C_o=l(),S=a("ul"),G_=a("li"),rae=a("strong"),w_o=o("albert"),A_o=o(" \u2014 "),f$=a("a"),y_o=o("AlbertForPreTraining"),L_o=o(" (ALBERT model)"),x_o=l(),O_=a("li"),tae=a("strong"),k_o=o("bart"),S_o=o(" \u2014 "),m$=a("a"),R_o=o("BartForConditionalGeneration"),B_o=o(" (BART model)"),P_o=l(),V_=a("li"),aae=a("strong"),$_o=o("bert"),I_o=o(" \u2014 "),g$=a("a"),q_o=o("BertForPreTraining"),N_o=o(" (BERT model)"),j_o=l(),X_=a("li"),nae=a("strong"),D_o=o("big_bird"),G_o=o(" \u2014 "),h$=a("a"),O_o=o("BigBirdForPreTraining"),V_o=o(" (BigBird model)"),X_o=l(),z_=a("li"),sae=a("strong"),z_o=o("camembert"),Q_o=o(" \u2014 "),p$=a("a"),W_o=o("CamembertForMaskedLM"),H_o=o(" (CamemBERT model)"),U_o=l(),Q_=a("li"),lae=a("strong"),J_o=o("ctrl"),Y_o=o(" \u2014 "),_$=a("a"),K_o=o("CTRLLMHeadModel"),Z_o=o(" (CTRL model)"),euo=l(),W_=a("li"),iae=a("strong"),ouo=o("data2vec-text"),ruo=o(" \u2014 "),u$=a("a"),tuo=o("Data2VecTextForMaskedLM"),auo=o(" (Data2VecText model)"),nuo=l(),H_=a("li"),dae=a("strong"),suo=o("deberta"),luo=o(" \u2014 "),b$=a("a"),iuo=o("DebertaForMaskedLM"),duo=o(" (DeBERTa model)"),cuo=l(),U_=a("li"),cae=a("strong"),fuo=o("deberta-v2"),muo=o(" \u2014 "),v$=a("a"),guo=o("DebertaV2ForMaskedLM"),huo=o(" (DeBERTa-v2 model)"),puo=l(),J_=a("li"),fae=a("strong"),_uo=o("distilbert"),uuo=o(" \u2014 "),F$=a("a"),buo=o("DistilBertForMaskedLM"),vuo=o(" (DistilBERT model)"),Fuo=l(),Y_=a("li"),mae=a("strong"),Tuo=o("electra"),Muo=o(" \u2014 "),T$=a("a"),Euo=o("ElectraForPreTraining"),Cuo=o(" (ELECTRA model)"),wuo=l(),K_=a("li"),gae=a("strong"),Auo=o("flaubert"),yuo=o(" \u2014 "),M$=a("a"),Luo=o("FlaubertWithLMHeadModel"),xuo=o(" (FlauBERT model)"),kuo=l(),Z_=a("li"),hae=a("strong"),Suo=o("fnet"),Ruo=o(" \u2014 "),E$=a("a"),Buo=o("FNetForPreTraining"),Puo=o(" (FNet model)"),$uo=l(),eu=a("li"),pae=a("strong"),Iuo=o("fsmt"),quo=o(" \u2014 "),C$=a("a"),Nuo=o("FSMTForConditionalGeneration"),juo=o(" (FairSeq Machine-Translation model)"),Duo=l(),ou=a("li"),_ae=a("strong"),Guo=o("funnel"),Ouo=o(" \u2014 "),w$=a("a"),Vuo=o("FunnelForPreTraining"),Xuo=o(" (Funnel Transformer model)"),zuo=l(),ru=a("li"),uae=a("strong"),Quo=o("gpt2"),Wuo=o(" \u2014 "),A$=a("a"),Huo=o("GPT2LMHeadModel"),Uuo=o(" (OpenAI GPT-2 model)"),Juo=l(),tu=a("li"),bae=a("strong"),Yuo=o("ibert"),Kuo=o(" \u2014 "),y$=a("a"),Zuo=o("IBertForMaskedLM"),e1o=o(" (I-BERT model)"),o1o=l(),au=a("li"),vae=a("strong"),r1o=o("layoutlm"),t1o=o(" \u2014 "),L$=a("a"),a1o=o("LayoutLMForMaskedLM"),n1o=o(" (LayoutLM model)"),s1o=l(),nu=a("li"),Fae=a("strong"),l1o=o("longformer"),i1o=o(" \u2014 "),x$=a("a"),d1o=o("LongformerForMaskedLM"),c1o=o(" (Longformer model)"),f1o=l(),su=a("li"),Tae=a("strong"),m1o=o("lxmert"),g1o=o(" \u2014 "),k$=a("a"),h1o=o("LxmertForPreTraining"),p1o=o(" (LXMERT model)"),_1o=l(),lu=a("li"),Mae=a("strong"),u1o=o("megatron-bert"),b1o=o(" \u2014 "),S$=a("a"),v1o=o("MegatronBertForPreTraining"),F1o=o(" (MegatronBert model)"),T1o=l(),iu=a("li"),Eae=a("strong"),M1o=o("mobilebert"),E1o=o(" \u2014 "),R$=a("a"),C1o=o("MobileBertForPreTraining"),w1o=o(" (MobileBERT model)"),A1o=l(),du=a("li"),Cae=a("strong"),y1o=o("mpnet"),L1o=o(" \u2014 "),B$=a("a"),x1o=o("MPNetForMaskedLM"),k1o=o(" (MPNet model)"),S1o=l(),cu=a("li"),wae=a("strong"),R1o=o("openai-gpt"),B1o=o(" \u2014 "),P$=a("a"),P1o=o("OpenAIGPTLMHeadModel"),$1o=o(" (OpenAI GPT model)"),I1o=l(),fu=a("li"),Aae=a("strong"),q1o=o("retribert"),N1o=o(" \u2014 "),$$=a("a"),j1o=o("RetriBertModel"),D1o=o(" (RetriBERT model)"),G1o=l(),mu=a("li"),yae=a("strong"),O1o=o("roberta"),V1o=o(" \u2014 "),I$=a("a"),X1o=o("RobertaForMaskedLM"),z1o=o(" (RoBERTa model)"),Q1o=l(),gu=a("li"),Lae=a("strong"),W1o=o("squeezebert"),H1o=o(" \u2014 "),q$=a("a"),U1o=o("SqueezeBertForMaskedLM"),J1o=o(" (SqueezeBERT model)"),Y1o=l(),hu=a("li"),xae=a("strong"),K1o=o("t5"),Z1o=o(" \u2014 "),N$=a("a"),e7o=o("T5ForConditionalGeneration"),o7o=o(" (T5 model)"),r7o=l(),pu=a("li"),kae=a("strong"),t7o=o("tapas"),a7o=o(" \u2014 "),j$=a("a"),n7o=o("TapasForMaskedLM"),s7o=o(" (TAPAS model)"),l7o=l(),_u=a("li"),Sae=a("strong"),i7o=o("transfo-xl"),d7o=o(" \u2014 "),D$=a("a"),c7o=o("TransfoXLLMHeadModel"),f7o=o(" (Transformer-XL model)"),m7o=l(),uu=a("li"),Rae=a("strong"),g7o=o("unispeech"),h7o=o(" \u2014 "),G$=a("a"),p7o=o("UniSpeechForPreTraining"),_7o=o(" (UniSpeech model)"),u7o=l(),bu=a("li"),Bae=a("strong"),b7o=o("unispeech-sat"),v7o=o(" \u2014 "),O$=a("a"),F7o=o("UniSpeechSatForPreTraining"),T7o=o(" (UniSpeechSat model)"),M7o=l(),vu=a("li"),Pae=a("strong"),E7o=o("visual_bert"),C7o=o(" \u2014 "),V$=a("a"),w7o=o("VisualBertForPreTraining"),A7o=o(" (VisualBert model)"),y7o=l(),Fu=a("li"),$ae=a("strong"),L7o=o("vit_mae"),x7o=o(" \u2014 "),X$=a("a"),k7o=o("ViTMAEForPreTraining"),S7o=o(" (ViTMAE model)"),R7o=l(),Tu=a("li"),Iae=a("strong"),B7o=o("wav2vec2"),P7o=o(" \u2014 "),z$=a("a"),$7o=o("Wav2Vec2ForPreTraining"),I7o=o(" (Wav2Vec2 model)"),q7o=l(),Mu=a("li"),qae=a("strong"),N7o=o("xlm"),j7o=o(" \u2014 "),Q$=a("a"),D7o=o("XLMWithLMHeadModel"),G7o=o(" (XLM model)"),O7o=l(),Eu=a("li"),Nae=a("strong"),V7o=o("xlm-roberta"),X7o=o(" \u2014 "),W$=a("a"),z7o=o("XLMRobertaForMaskedLM"),Q7o=o(" (XLM-RoBERTa model)"),W7o=l(),Cu=a("li"),jae=a("strong"),H7o=o("xlm-roberta-xl"),U7o=o(" \u2014 "),H$=a("a"),J7o=o("XLMRobertaXLForMaskedLM"),Y7o=o(" (XLM-RoBERTa-XL model)"),K7o=l(),wu=a("li"),Dae=a("strong"),Z7o=o("xlnet"),ebo=o(" \u2014 "),U$=a("a"),obo=o("XLNetLMHeadModel"),rbo=o(" (XLNet model)"),tbo=l(),Au=a("p"),abo=o("The model is set in evaluation mode by default using "),Gae=a("code"),nbo=o("model.eval()"),sbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oae=a("code"),lbo=o("model.train()"),ibo=l(),Vae=a("p"),dbo=o("Examples:"),cbo=l(),f(Cw.$$.fragment),sBe=l(),td=a("h2"),yu=a("a"),Xae=a("span"),f(ww.$$.fragment),fbo=l(),zae=a("span"),mbo=o("AutoModelForCausalLM"),lBe=l(),Ko=a("div"),f(Aw.$$.fragment),gbo=l(),ad=a("p"),hbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),J$=a("a"),pbo=o("from_pretrained()"),_bo=o(" class method or the "),Y$=a("a"),ubo=o("from_config()"),bbo=o(` class
method.`),vbo=l(),yw=a("p"),Fbo=o("This class cannot be instantiated directly using "),Qae=a("code"),Tbo=o("__init__()"),Mbo=o(" (throws an error)."),Ebo=l(),Qr=a("div"),f(Lw.$$.fragment),Cbo=l(),Wae=a("p"),wbo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Abo=l(),nd=a("p"),ybo=o(`Note:
Loading a model from its configuration file does `),Hae=a("strong"),Lbo=o("not"),xbo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),K$=a("a"),kbo=o("from_pretrained()"),Sbo=o(" to load the model weights."),Rbo=l(),Uae=a("p"),Bbo=o("Examples:"),Pbo=l(),f(xw.$$.fragment),$bo=l(),je=a("div"),f(kw.$$.fragment),Ibo=l(),Jae=a("p"),qbo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Nbo=l(),Qa=a("p"),jbo=o("The model class to instantiate is selected based on the "),Yae=a("code"),Dbo=o("model_type"),Gbo=o(` property of the config object (either
passed as an argument or loaded from `),Kae=a("code"),Obo=o("pretrained_model_name_or_path"),Vbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zae=a("code"),Xbo=o("pretrained_model_name_or_path"),zbo=o(":"),Qbo=l(),$=a("ul"),Lu=a("li"),ene=a("strong"),Wbo=o("bart"),Hbo=o(" \u2014 "),Z$=a("a"),Ubo=o("BartForCausalLM"),Jbo=o(" (BART model)"),Ybo=l(),xu=a("li"),one=a("strong"),Kbo=o("bert"),Zbo=o(" \u2014 "),eI=a("a"),e2o=o("BertLMHeadModel"),o2o=o(" (BERT model)"),r2o=l(),ku=a("li"),rne=a("strong"),t2o=o("bert-generation"),a2o=o(" \u2014 "),oI=a("a"),n2o=o("BertGenerationDecoder"),s2o=o(" (Bert Generation model)"),l2o=l(),Su=a("li"),tne=a("strong"),i2o=o("big_bird"),d2o=o(" \u2014 "),rI=a("a"),c2o=o("BigBirdForCausalLM"),f2o=o(" (BigBird model)"),m2o=l(),Ru=a("li"),ane=a("strong"),g2o=o("bigbird_pegasus"),h2o=o(" \u2014 "),tI=a("a"),p2o=o("BigBirdPegasusForCausalLM"),_2o=o(" (BigBirdPegasus model)"),u2o=l(),Bu=a("li"),nne=a("strong"),b2o=o("blenderbot"),v2o=o(" \u2014 "),aI=a("a"),F2o=o("BlenderbotForCausalLM"),T2o=o(" (Blenderbot model)"),M2o=l(),Pu=a("li"),sne=a("strong"),E2o=o("blenderbot-small"),C2o=o(" \u2014 "),nI=a("a"),w2o=o("BlenderbotSmallForCausalLM"),A2o=o(" (BlenderbotSmall model)"),y2o=l(),$u=a("li"),lne=a("strong"),L2o=o("camembert"),x2o=o(" \u2014 "),sI=a("a"),k2o=o("CamembertForCausalLM"),S2o=o(" (CamemBERT model)"),R2o=l(),Iu=a("li"),ine=a("strong"),B2o=o("ctrl"),P2o=o(" \u2014 "),lI=a("a"),$2o=o("CTRLLMHeadModel"),I2o=o(" (CTRL model)"),q2o=l(),qu=a("li"),dne=a("strong"),N2o=o("data2vec-text"),j2o=o(" \u2014 "),iI=a("a"),D2o=o("Data2VecTextForCausalLM"),G2o=o(" (Data2VecText model)"),O2o=l(),Nu=a("li"),cne=a("strong"),V2o=o("electra"),X2o=o(" \u2014 "),dI=a("a"),z2o=o("ElectraForCausalLM"),Q2o=o(" (ELECTRA model)"),W2o=l(),ju=a("li"),fne=a("strong"),H2o=o("gpt2"),U2o=o(" \u2014 "),cI=a("a"),J2o=o("GPT2LMHeadModel"),Y2o=o(" (OpenAI GPT-2 model)"),K2o=l(),Du=a("li"),mne=a("strong"),Z2o=o("gpt_neo"),e5o=o(" \u2014 "),fI=a("a"),o5o=o("GPTNeoForCausalLM"),r5o=o(" (GPT Neo model)"),t5o=l(),Gu=a("li"),gne=a("strong"),a5o=o("gptj"),n5o=o(" \u2014 "),mI=a("a"),s5o=o("GPTJForCausalLM"),l5o=o(" (GPT-J model)"),i5o=l(),Ou=a("li"),hne=a("strong"),d5o=o("marian"),c5o=o(" \u2014 "),gI=a("a"),f5o=o("MarianForCausalLM"),m5o=o(" (Marian model)"),g5o=l(),Vu=a("li"),pne=a("strong"),h5o=o("mbart"),p5o=o(" \u2014 "),hI=a("a"),_5o=o("MBartForCausalLM"),u5o=o(" (mBART model)"),b5o=l(),Xu=a("li"),_ne=a("strong"),v5o=o("megatron-bert"),F5o=o(" \u2014 "),pI=a("a"),T5o=o("MegatronBertForCausalLM"),M5o=o(" (MegatronBert model)"),E5o=l(),zu=a("li"),une=a("strong"),C5o=o("openai-gpt"),w5o=o(" \u2014 "),_I=a("a"),A5o=o("OpenAIGPTLMHeadModel"),y5o=o(" (OpenAI GPT model)"),L5o=l(),Qu=a("li"),bne=a("strong"),x5o=o("pegasus"),k5o=o(" \u2014 "),uI=a("a"),S5o=o("PegasusForCausalLM"),R5o=o(" (Pegasus model)"),B5o=l(),Wu=a("li"),vne=a("strong"),P5o=o("plbart"),$5o=o(" \u2014 "),bI=a("a"),I5o=o("PLBartForCausalLM"),q5o=o(" (PLBart model)"),N5o=l(),Hu=a("li"),Fne=a("strong"),j5o=o("prophetnet"),D5o=o(" \u2014 "),vI=a("a"),G5o=o("ProphetNetForCausalLM"),O5o=o(" (ProphetNet model)"),V5o=l(),Uu=a("li"),Tne=a("strong"),X5o=o("qdqbert"),z5o=o(" \u2014 "),FI=a("a"),Q5o=o("QDQBertLMHeadModel"),W5o=o(" (QDQBert model)"),H5o=l(),Ju=a("li"),Mne=a("strong"),U5o=o("reformer"),J5o=o(" \u2014 "),TI=a("a"),Y5o=o("ReformerModelWithLMHead"),K5o=o(" (Reformer model)"),Z5o=l(),Yu=a("li"),Ene=a("strong"),e3o=o("rembert"),o3o=o(" \u2014 "),MI=a("a"),r3o=o("RemBertForCausalLM"),t3o=o(" (RemBERT model)"),a3o=l(),Ku=a("li"),Cne=a("strong"),n3o=o("roberta"),s3o=o(" \u2014 "),EI=a("a"),l3o=o("RobertaForCausalLM"),i3o=o(" (RoBERTa model)"),d3o=l(),Zu=a("li"),wne=a("strong"),c3o=o("roformer"),f3o=o(" \u2014 "),CI=a("a"),m3o=o("RoFormerForCausalLM"),g3o=o(" (RoFormer model)"),h3o=l(),e1=a("li"),Ane=a("strong"),p3o=o("speech_to_text_2"),_3o=o(" \u2014 "),wI=a("a"),u3o=o("Speech2Text2ForCausalLM"),b3o=o(" (Speech2Text2 model)"),v3o=l(),o1=a("li"),yne=a("strong"),F3o=o("transfo-xl"),T3o=o(" \u2014 "),AI=a("a"),M3o=o("TransfoXLLMHeadModel"),E3o=o(" (Transformer-XL model)"),C3o=l(),r1=a("li"),Lne=a("strong"),w3o=o("trocr"),A3o=o(" \u2014 "),yI=a("a"),y3o=o("TrOCRForCausalLM"),L3o=o(" (TrOCR model)"),x3o=l(),t1=a("li"),xne=a("strong"),k3o=o("xglm"),S3o=o(" \u2014 "),LI=a("a"),R3o=o("XGLMForCausalLM"),B3o=o(" (XGLM model)"),P3o=l(),a1=a("li"),kne=a("strong"),$3o=o("xlm"),I3o=o(" \u2014 "),xI=a("a"),q3o=o("XLMWithLMHeadModel"),N3o=o(" (XLM model)"),j3o=l(),n1=a("li"),Sne=a("strong"),D3o=o("xlm-prophetnet"),G3o=o(" \u2014 "),kI=a("a"),O3o=o("XLMProphetNetForCausalLM"),V3o=o(" (XLMProphetNet model)"),X3o=l(),s1=a("li"),Rne=a("strong"),z3o=o("xlm-roberta"),Q3o=o(" \u2014 "),SI=a("a"),W3o=o("XLMRobertaForCausalLM"),H3o=o(" (XLM-RoBERTa model)"),U3o=l(),l1=a("li"),Bne=a("strong"),J3o=o("xlm-roberta-xl"),Y3o=o(" \u2014 "),RI=a("a"),K3o=o("XLMRobertaXLForCausalLM"),Z3o=o(" (XLM-RoBERTa-XL model)"),evo=l(),i1=a("li"),Pne=a("strong"),ovo=o("xlnet"),rvo=o(" \u2014 "),BI=a("a"),tvo=o("XLNetLMHeadModel"),avo=o(" (XLNet model)"),nvo=l(),d1=a("p"),svo=o("The model is set in evaluation mode by default using "),$ne=a("code"),lvo=o("model.eval()"),ivo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ine=a("code"),dvo=o("model.train()"),cvo=l(),qne=a("p"),fvo=o("Examples:"),mvo=l(),f(Sw.$$.fragment),iBe=l(),sd=a("h2"),c1=a("a"),Nne=a("span"),f(Rw.$$.fragment),gvo=l(),jne=a("span"),hvo=o("AutoModelForMaskedLM"),dBe=l(),Zo=a("div"),f(Bw.$$.fragment),pvo=l(),ld=a("p"),_vo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PI=a("a"),uvo=o("from_pretrained()"),bvo=o(" class method or the "),$I=a("a"),vvo=o("from_config()"),Fvo=o(` class
method.`),Tvo=l(),Pw=a("p"),Mvo=o("This class cannot be instantiated directly using "),Dne=a("code"),Evo=o("__init__()"),Cvo=o(" (throws an error)."),wvo=l(),Wr=a("div"),f($w.$$.fragment),Avo=l(),Gne=a("p"),yvo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Lvo=l(),id=a("p"),xvo=o(`Note:
Loading a model from its configuration file does `),One=a("strong"),kvo=o("not"),Svo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),II=a("a"),Rvo=o("from_pretrained()"),Bvo=o(" to load the model weights."),Pvo=l(),Vne=a("p"),$vo=o("Examples:"),Ivo=l(),f(Iw.$$.fragment),qvo=l(),De=a("div"),f(qw.$$.fragment),Nvo=l(),Xne=a("p"),jvo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Dvo=l(),Wa=a("p"),Gvo=o("The model class to instantiate is selected based on the "),zne=a("code"),Ovo=o("model_type"),Vvo=o(` property of the config object (either
passed as an argument or loaded from `),Qne=a("code"),Xvo=o("pretrained_model_name_or_path"),zvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wne=a("code"),Qvo=o("pretrained_model_name_or_path"),Wvo=o(":"),Hvo=l(),I=a("ul"),f1=a("li"),Hne=a("strong"),Uvo=o("albert"),Jvo=o(" \u2014 "),qI=a("a"),Yvo=o("AlbertForMaskedLM"),Kvo=o(" (ALBERT model)"),Zvo=l(),m1=a("li"),Une=a("strong"),eFo=o("bart"),oFo=o(" \u2014 "),NI=a("a"),rFo=o("BartForConditionalGeneration"),tFo=o(" (BART model)"),aFo=l(),g1=a("li"),Jne=a("strong"),nFo=o("bert"),sFo=o(" \u2014 "),jI=a("a"),lFo=o("BertForMaskedLM"),iFo=o(" (BERT model)"),dFo=l(),h1=a("li"),Yne=a("strong"),cFo=o("big_bird"),fFo=o(" \u2014 "),DI=a("a"),mFo=o("BigBirdForMaskedLM"),gFo=o(" (BigBird model)"),hFo=l(),p1=a("li"),Kne=a("strong"),pFo=o("camembert"),_Fo=o(" \u2014 "),GI=a("a"),uFo=o("CamembertForMaskedLM"),bFo=o(" (CamemBERT model)"),vFo=l(),_1=a("li"),Zne=a("strong"),FFo=o("convbert"),TFo=o(" \u2014 "),OI=a("a"),MFo=o("ConvBertForMaskedLM"),EFo=o(" (ConvBERT model)"),CFo=l(),u1=a("li"),ese=a("strong"),wFo=o("data2vec-text"),AFo=o(" \u2014 "),VI=a("a"),yFo=o("Data2VecTextForMaskedLM"),LFo=o(" (Data2VecText model)"),xFo=l(),b1=a("li"),ose=a("strong"),kFo=o("deberta"),SFo=o(" \u2014 "),XI=a("a"),RFo=o("DebertaForMaskedLM"),BFo=o(" (DeBERTa model)"),PFo=l(),v1=a("li"),rse=a("strong"),$Fo=o("deberta-v2"),IFo=o(" \u2014 "),zI=a("a"),qFo=o("DebertaV2ForMaskedLM"),NFo=o(" (DeBERTa-v2 model)"),jFo=l(),F1=a("li"),tse=a("strong"),DFo=o("distilbert"),GFo=o(" \u2014 "),QI=a("a"),OFo=o("DistilBertForMaskedLM"),VFo=o(" (DistilBERT model)"),XFo=l(),T1=a("li"),ase=a("strong"),zFo=o("electra"),QFo=o(" \u2014 "),WI=a("a"),WFo=o("ElectraForMaskedLM"),HFo=o(" (ELECTRA model)"),UFo=l(),M1=a("li"),nse=a("strong"),JFo=o("flaubert"),YFo=o(" \u2014 "),HI=a("a"),KFo=o("FlaubertWithLMHeadModel"),ZFo=o(" (FlauBERT model)"),eTo=l(),E1=a("li"),sse=a("strong"),oTo=o("fnet"),rTo=o(" \u2014 "),UI=a("a"),tTo=o("FNetForMaskedLM"),aTo=o(" (FNet model)"),nTo=l(),C1=a("li"),lse=a("strong"),sTo=o("funnel"),lTo=o(" \u2014 "),JI=a("a"),iTo=o("FunnelForMaskedLM"),dTo=o(" (Funnel Transformer model)"),cTo=l(),w1=a("li"),ise=a("strong"),fTo=o("ibert"),mTo=o(" \u2014 "),YI=a("a"),gTo=o("IBertForMaskedLM"),hTo=o(" (I-BERT model)"),pTo=l(),A1=a("li"),dse=a("strong"),_To=o("layoutlm"),uTo=o(" \u2014 "),KI=a("a"),bTo=o("LayoutLMForMaskedLM"),vTo=o(" (LayoutLM model)"),FTo=l(),y1=a("li"),cse=a("strong"),TTo=o("longformer"),MTo=o(" \u2014 "),ZI=a("a"),ETo=o("LongformerForMaskedLM"),CTo=o(" (Longformer model)"),wTo=l(),L1=a("li"),fse=a("strong"),ATo=o("mbart"),yTo=o(" \u2014 "),eq=a("a"),LTo=o("MBartForConditionalGeneration"),xTo=o(" (mBART model)"),kTo=l(),x1=a("li"),mse=a("strong"),STo=o("megatron-bert"),RTo=o(" \u2014 "),oq=a("a"),BTo=o("MegatronBertForMaskedLM"),PTo=o(" (MegatronBert model)"),$To=l(),k1=a("li"),gse=a("strong"),ITo=o("mobilebert"),qTo=o(" \u2014 "),rq=a("a"),NTo=o("MobileBertForMaskedLM"),jTo=o(" (MobileBERT model)"),DTo=l(),S1=a("li"),hse=a("strong"),GTo=o("mpnet"),OTo=o(" \u2014 "),tq=a("a"),VTo=o("MPNetForMaskedLM"),XTo=o(" (MPNet model)"),zTo=l(),R1=a("li"),pse=a("strong"),QTo=o("nystromformer"),WTo=o(" \u2014 "),aq=a("a"),HTo=o("NystromformerForMaskedLM"),UTo=o(" (Nystromformer model)"),JTo=l(),B1=a("li"),_se=a("strong"),YTo=o("perceiver"),KTo=o(" \u2014 "),nq=a("a"),ZTo=o("PerceiverForMaskedLM"),eMo=o(" (Perceiver model)"),oMo=l(),P1=a("li"),use=a("strong"),rMo=o("qdqbert"),tMo=o(" \u2014 "),sq=a("a"),aMo=o("QDQBertForMaskedLM"),nMo=o(" (QDQBert model)"),sMo=l(),$1=a("li"),bse=a("strong"),lMo=o("reformer"),iMo=o(" \u2014 "),lq=a("a"),dMo=o("ReformerForMaskedLM"),cMo=o(" (Reformer model)"),fMo=l(),I1=a("li"),vse=a("strong"),mMo=o("rembert"),gMo=o(" \u2014 "),iq=a("a"),hMo=o("RemBertForMaskedLM"),pMo=o(" (RemBERT model)"),_Mo=l(),q1=a("li"),Fse=a("strong"),uMo=o("roberta"),bMo=o(" \u2014 "),dq=a("a"),vMo=o("RobertaForMaskedLM"),FMo=o(" (RoBERTa model)"),TMo=l(),N1=a("li"),Tse=a("strong"),MMo=o("roformer"),EMo=o(" \u2014 "),cq=a("a"),CMo=o("RoFormerForMaskedLM"),wMo=o(" (RoFormer model)"),AMo=l(),j1=a("li"),Mse=a("strong"),yMo=o("squeezebert"),LMo=o(" \u2014 "),fq=a("a"),xMo=o("SqueezeBertForMaskedLM"),kMo=o(" (SqueezeBERT model)"),SMo=l(),D1=a("li"),Ese=a("strong"),RMo=o("tapas"),BMo=o(" \u2014 "),mq=a("a"),PMo=o("TapasForMaskedLM"),$Mo=o(" (TAPAS model)"),IMo=l(),G1=a("li"),Cse=a("strong"),qMo=o("wav2vec2"),NMo=o(" \u2014 "),wse=a("code"),jMo=o("Wav2Vec2ForMaskedLM"),DMo=o(" (Wav2Vec2 model)"),GMo=l(),O1=a("li"),Ase=a("strong"),OMo=o("xlm"),VMo=o(" \u2014 "),gq=a("a"),XMo=o("XLMWithLMHeadModel"),zMo=o(" (XLM model)"),QMo=l(),V1=a("li"),yse=a("strong"),WMo=o("xlm-roberta"),HMo=o(" \u2014 "),hq=a("a"),UMo=o("XLMRobertaForMaskedLM"),JMo=o(" (XLM-RoBERTa model)"),YMo=l(),X1=a("li"),Lse=a("strong"),KMo=o("xlm-roberta-xl"),ZMo=o(" \u2014 "),pq=a("a"),e4o=o("XLMRobertaXLForMaskedLM"),o4o=o(" (XLM-RoBERTa-XL model)"),r4o=l(),z1=a("li"),xse=a("strong"),t4o=o("yoso"),a4o=o(" \u2014 "),_q=a("a"),n4o=o("YosoForMaskedLM"),s4o=o(" (YOSO model)"),l4o=l(),Q1=a("p"),i4o=o("The model is set in evaluation mode by default using "),kse=a("code"),d4o=o("model.eval()"),c4o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=a("code"),f4o=o("model.train()"),m4o=l(),Rse=a("p"),g4o=o("Examples:"),h4o=l(),f(Nw.$$.fragment),cBe=l(),dd=a("h2"),W1=a("a"),Bse=a("span"),f(jw.$$.fragment),p4o=l(),Pse=a("span"),_4o=o("AutoModelForSeq2SeqLM"),fBe=l(),er=a("div"),f(Dw.$$.fragment),u4o=l(),cd=a("p"),b4o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uq=a("a"),v4o=o("from_pretrained()"),F4o=o(" class method or the "),bq=a("a"),T4o=o("from_config()"),M4o=o(` class
method.`),E4o=l(),Gw=a("p"),C4o=o("This class cannot be instantiated directly using "),$se=a("code"),w4o=o("__init__()"),A4o=o(" (throws an error)."),y4o=l(),Hr=a("div"),f(Ow.$$.fragment),L4o=l(),Ise=a("p"),x4o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),k4o=l(),fd=a("p"),S4o=o(`Note:
Loading a model from its configuration file does `),qse=a("strong"),R4o=o("not"),B4o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vq=a("a"),P4o=o("from_pretrained()"),$4o=o(" to load the model weights."),I4o=l(),Nse=a("p"),q4o=o("Examples:"),N4o=l(),f(Vw.$$.fragment),j4o=l(),Ge=a("div"),f(Xw.$$.fragment),D4o=l(),jse=a("p"),G4o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),O4o=l(),Ha=a("p"),V4o=o("The model class to instantiate is selected based on the "),Dse=a("code"),X4o=o("model_type"),z4o=o(` property of the config object (either
passed as an argument or loaded from `),Gse=a("code"),Q4o=o("pretrained_model_name_or_path"),W4o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=a("code"),H4o=o("pretrained_model_name_or_path"),U4o=o(":"),J4o=l(),ne=a("ul"),H1=a("li"),Vse=a("strong"),Y4o=o("bart"),K4o=o(" \u2014 "),Fq=a("a"),Z4o=o("BartForConditionalGeneration"),eEo=o(" (BART model)"),oEo=l(),U1=a("li"),Xse=a("strong"),rEo=o("bigbird_pegasus"),tEo=o(" \u2014 "),Tq=a("a"),aEo=o("BigBirdPegasusForConditionalGeneration"),nEo=o(" (BigBirdPegasus model)"),sEo=l(),J1=a("li"),zse=a("strong"),lEo=o("blenderbot"),iEo=o(" \u2014 "),Mq=a("a"),dEo=o("BlenderbotForConditionalGeneration"),cEo=o(" (Blenderbot model)"),fEo=l(),Y1=a("li"),Qse=a("strong"),mEo=o("blenderbot-small"),gEo=o(" \u2014 "),Eq=a("a"),hEo=o("BlenderbotSmallForConditionalGeneration"),pEo=o(" (BlenderbotSmall model)"),_Eo=l(),K1=a("li"),Wse=a("strong"),uEo=o("encoder-decoder"),bEo=o(" \u2014 "),Cq=a("a"),vEo=o("EncoderDecoderModel"),FEo=o(" (Encoder decoder model)"),TEo=l(),Z1=a("li"),Hse=a("strong"),MEo=o("fsmt"),EEo=o(" \u2014 "),wq=a("a"),CEo=o("FSMTForConditionalGeneration"),wEo=o(" (FairSeq Machine-Translation model)"),AEo=l(),e7=a("li"),Use=a("strong"),yEo=o("led"),LEo=o(" \u2014 "),Aq=a("a"),xEo=o("LEDForConditionalGeneration"),kEo=o(" (LED model)"),SEo=l(),o7=a("li"),Jse=a("strong"),REo=o("m2m_100"),BEo=o(" \u2014 "),yq=a("a"),PEo=o("M2M100ForConditionalGeneration"),$Eo=o(" (M2M100 model)"),IEo=l(),r7=a("li"),Yse=a("strong"),qEo=o("marian"),NEo=o(" \u2014 "),Lq=a("a"),jEo=o("MarianMTModel"),DEo=o(" (Marian model)"),GEo=l(),t7=a("li"),Kse=a("strong"),OEo=o("mbart"),VEo=o(" \u2014 "),xq=a("a"),XEo=o("MBartForConditionalGeneration"),zEo=o(" (mBART model)"),QEo=l(),a7=a("li"),Zse=a("strong"),WEo=o("mt5"),HEo=o(" \u2014 "),kq=a("a"),UEo=o("MT5ForConditionalGeneration"),JEo=o(" (mT5 model)"),YEo=l(),n7=a("li"),ele=a("strong"),KEo=o("pegasus"),ZEo=o(" \u2014 "),Sq=a("a"),eCo=o("PegasusForConditionalGeneration"),oCo=o(" (Pegasus model)"),rCo=l(),s7=a("li"),ole=a("strong"),tCo=o("plbart"),aCo=o(" \u2014 "),Rq=a("a"),nCo=o("PLBartForConditionalGeneration"),sCo=o(" (PLBart model)"),lCo=l(),l7=a("li"),rle=a("strong"),iCo=o("prophetnet"),dCo=o(" \u2014 "),Bq=a("a"),cCo=o("ProphetNetForConditionalGeneration"),fCo=o(" (ProphetNet model)"),mCo=l(),i7=a("li"),tle=a("strong"),gCo=o("t5"),hCo=o(" \u2014 "),Pq=a("a"),pCo=o("T5ForConditionalGeneration"),_Co=o(" (T5 model)"),uCo=l(),d7=a("li"),ale=a("strong"),bCo=o("tapex"),vCo=o(" \u2014 "),$q=a("a"),FCo=o("BartForConditionalGeneration"),TCo=o(" (TAPEX model)"),MCo=l(),c7=a("li"),nle=a("strong"),ECo=o("xlm-prophetnet"),CCo=o(" \u2014 "),Iq=a("a"),wCo=o("XLMProphetNetForConditionalGeneration"),ACo=o(" (XLMProphetNet model)"),yCo=l(),f7=a("p"),LCo=o("The model is set in evaluation mode by default using "),sle=a("code"),xCo=o("model.eval()"),kCo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lle=a("code"),SCo=o("model.train()"),RCo=l(),ile=a("p"),BCo=o("Examples:"),PCo=l(),f(zw.$$.fragment),mBe=l(),md=a("h2"),m7=a("a"),dle=a("span"),f(Qw.$$.fragment),$Co=l(),cle=a("span"),ICo=o("AutoModelForSequenceClassification"),gBe=l(),or=a("div"),f(Ww.$$.fragment),qCo=l(),gd=a("p"),NCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qq=a("a"),jCo=o("from_pretrained()"),DCo=o(" class method or the "),Nq=a("a"),GCo=o("from_config()"),OCo=o(` class
method.`),VCo=l(),Hw=a("p"),XCo=o("This class cannot be instantiated directly using "),fle=a("code"),zCo=o("__init__()"),QCo=o(" (throws an error)."),WCo=l(),Ur=a("div"),f(Uw.$$.fragment),HCo=l(),mle=a("p"),UCo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),JCo=l(),hd=a("p"),YCo=o(`Note:
Loading a model from its configuration file does `),gle=a("strong"),KCo=o("not"),ZCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jq=a("a"),ewo=o("from_pretrained()"),owo=o(" to load the model weights."),rwo=l(),hle=a("p"),two=o("Examples:"),awo=l(),f(Jw.$$.fragment),nwo=l(),Oe=a("div"),f(Yw.$$.fragment),swo=l(),ple=a("p"),lwo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),iwo=l(),Ua=a("p"),dwo=o("The model class to instantiate is selected based on the "),_le=a("code"),cwo=o("model_type"),fwo=o(` property of the config object (either
passed as an argument or loaded from `),ule=a("code"),mwo=o("pretrained_model_name_or_path"),gwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=a("code"),hwo=o("pretrained_model_name_or_path"),pwo=o(":"),_wo=l(),y=a("ul"),g7=a("li"),vle=a("strong"),uwo=o("albert"),bwo=o(" \u2014 "),Dq=a("a"),vwo=o("AlbertForSequenceClassification"),Fwo=o(" (ALBERT model)"),Two=l(),h7=a("li"),Fle=a("strong"),Mwo=o("bart"),Ewo=o(" \u2014 "),Gq=a("a"),Cwo=o("BartForSequenceClassification"),wwo=o(" (BART model)"),Awo=l(),p7=a("li"),Tle=a("strong"),ywo=o("bert"),Lwo=o(" \u2014 "),Oq=a("a"),xwo=o("BertForSequenceClassification"),kwo=o(" (BERT model)"),Swo=l(),_7=a("li"),Mle=a("strong"),Rwo=o("big_bird"),Bwo=o(" \u2014 "),Vq=a("a"),Pwo=o("BigBirdForSequenceClassification"),$wo=o(" (BigBird model)"),Iwo=l(),u7=a("li"),Ele=a("strong"),qwo=o("bigbird_pegasus"),Nwo=o(" \u2014 "),Xq=a("a"),jwo=o("BigBirdPegasusForSequenceClassification"),Dwo=o(" (BigBirdPegasus model)"),Gwo=l(),b7=a("li"),Cle=a("strong"),Owo=o("camembert"),Vwo=o(" \u2014 "),zq=a("a"),Xwo=o("CamembertForSequenceClassification"),zwo=o(" (CamemBERT model)"),Qwo=l(),v7=a("li"),wle=a("strong"),Wwo=o("canine"),Hwo=o(" \u2014 "),Qq=a("a"),Uwo=o("CanineForSequenceClassification"),Jwo=o(" (Canine model)"),Ywo=l(),F7=a("li"),Ale=a("strong"),Kwo=o("convbert"),Zwo=o(" \u2014 "),Wq=a("a"),e6o=o("ConvBertForSequenceClassification"),o6o=o(" (ConvBERT model)"),r6o=l(),T7=a("li"),yle=a("strong"),t6o=o("ctrl"),a6o=o(" \u2014 "),Hq=a("a"),n6o=o("CTRLForSequenceClassification"),s6o=o(" (CTRL model)"),l6o=l(),M7=a("li"),Lle=a("strong"),i6o=o("data2vec-text"),d6o=o(" \u2014 "),Uq=a("a"),c6o=o("Data2VecTextForSequenceClassification"),f6o=o(" (Data2VecText model)"),m6o=l(),E7=a("li"),xle=a("strong"),g6o=o("deberta"),h6o=o(" \u2014 "),Jq=a("a"),p6o=o("DebertaForSequenceClassification"),_6o=o(" (DeBERTa model)"),u6o=l(),C7=a("li"),kle=a("strong"),b6o=o("deberta-v2"),v6o=o(" \u2014 "),Yq=a("a"),F6o=o("DebertaV2ForSequenceClassification"),T6o=o(" (DeBERTa-v2 model)"),M6o=l(),w7=a("li"),Sle=a("strong"),E6o=o("distilbert"),C6o=o(" \u2014 "),Kq=a("a"),w6o=o("DistilBertForSequenceClassification"),A6o=o(" (DistilBERT model)"),y6o=l(),A7=a("li"),Rle=a("strong"),L6o=o("electra"),x6o=o(" \u2014 "),Zq=a("a"),k6o=o("ElectraForSequenceClassification"),S6o=o(" (ELECTRA model)"),R6o=l(),y7=a("li"),Ble=a("strong"),B6o=o("flaubert"),P6o=o(" \u2014 "),eN=a("a"),$6o=o("FlaubertForSequenceClassification"),I6o=o(" (FlauBERT model)"),q6o=l(),L7=a("li"),Ple=a("strong"),N6o=o("fnet"),j6o=o(" \u2014 "),oN=a("a"),D6o=o("FNetForSequenceClassification"),G6o=o(" (FNet model)"),O6o=l(),x7=a("li"),$le=a("strong"),V6o=o("funnel"),X6o=o(" \u2014 "),rN=a("a"),z6o=o("FunnelForSequenceClassification"),Q6o=o(" (Funnel Transformer model)"),W6o=l(),k7=a("li"),Ile=a("strong"),H6o=o("gpt2"),U6o=o(" \u2014 "),tN=a("a"),J6o=o("GPT2ForSequenceClassification"),Y6o=o(" (OpenAI GPT-2 model)"),K6o=l(),S7=a("li"),qle=a("strong"),Z6o=o("gpt_neo"),eAo=o(" \u2014 "),aN=a("a"),oAo=o("GPTNeoForSequenceClassification"),rAo=o(" (GPT Neo model)"),tAo=l(),R7=a("li"),Nle=a("strong"),aAo=o("gptj"),nAo=o(" \u2014 "),nN=a("a"),sAo=o("GPTJForSequenceClassification"),lAo=o(" (GPT-J model)"),iAo=l(),B7=a("li"),jle=a("strong"),dAo=o("ibert"),cAo=o(" \u2014 "),sN=a("a"),fAo=o("IBertForSequenceClassification"),mAo=o(" (I-BERT model)"),gAo=l(),P7=a("li"),Dle=a("strong"),hAo=o("layoutlm"),pAo=o(" \u2014 "),lN=a("a"),_Ao=o("LayoutLMForSequenceClassification"),uAo=o(" (LayoutLM model)"),bAo=l(),$7=a("li"),Gle=a("strong"),vAo=o("layoutlmv2"),FAo=o(" \u2014 "),iN=a("a"),TAo=o("LayoutLMv2ForSequenceClassification"),MAo=o(" (LayoutLMv2 model)"),EAo=l(),I7=a("li"),Ole=a("strong"),CAo=o("led"),wAo=o(" \u2014 "),dN=a("a"),AAo=o("LEDForSequenceClassification"),yAo=o(" (LED model)"),LAo=l(),q7=a("li"),Vle=a("strong"),xAo=o("longformer"),kAo=o(" \u2014 "),cN=a("a"),SAo=o("LongformerForSequenceClassification"),RAo=o(" (Longformer model)"),BAo=l(),N7=a("li"),Xle=a("strong"),PAo=o("mbart"),$Ao=o(" \u2014 "),fN=a("a"),IAo=o("MBartForSequenceClassification"),qAo=o(" (mBART model)"),NAo=l(),j7=a("li"),zle=a("strong"),jAo=o("megatron-bert"),DAo=o(" \u2014 "),mN=a("a"),GAo=o("MegatronBertForSequenceClassification"),OAo=o(" (MegatronBert model)"),VAo=l(),D7=a("li"),Qle=a("strong"),XAo=o("mobilebert"),zAo=o(" \u2014 "),gN=a("a"),QAo=o("MobileBertForSequenceClassification"),WAo=o(" (MobileBERT model)"),HAo=l(),G7=a("li"),Wle=a("strong"),UAo=o("mpnet"),JAo=o(" \u2014 "),hN=a("a"),YAo=o("MPNetForSequenceClassification"),KAo=o(" (MPNet model)"),ZAo=l(),O7=a("li"),Hle=a("strong"),e0o=o("nystromformer"),o0o=o(" \u2014 "),pN=a("a"),r0o=o("NystromformerForSequenceClassification"),t0o=o(" (Nystromformer model)"),a0o=l(),V7=a("li"),Ule=a("strong"),n0o=o("openai-gpt"),s0o=o(" \u2014 "),_N=a("a"),l0o=o("OpenAIGPTForSequenceClassification"),i0o=o(" (OpenAI GPT model)"),d0o=l(),X7=a("li"),Jle=a("strong"),c0o=o("perceiver"),f0o=o(" \u2014 "),uN=a("a"),m0o=o("PerceiverForSequenceClassification"),g0o=o(" (Perceiver model)"),h0o=l(),z7=a("li"),Yle=a("strong"),p0o=o("plbart"),_0o=o(" \u2014 "),bN=a("a"),u0o=o("PLBartForSequenceClassification"),b0o=o(" (PLBart model)"),v0o=l(),Q7=a("li"),Kle=a("strong"),F0o=o("qdqbert"),T0o=o(" \u2014 "),vN=a("a"),M0o=o("QDQBertForSequenceClassification"),E0o=o(" (QDQBert model)"),C0o=l(),W7=a("li"),Zle=a("strong"),w0o=o("reformer"),A0o=o(" \u2014 "),FN=a("a"),y0o=o("ReformerForSequenceClassification"),L0o=o(" (Reformer model)"),x0o=l(),H7=a("li"),eie=a("strong"),k0o=o("rembert"),S0o=o(" \u2014 "),TN=a("a"),R0o=o("RemBertForSequenceClassification"),B0o=o(" (RemBERT model)"),P0o=l(),U7=a("li"),oie=a("strong"),$0o=o("roberta"),I0o=o(" \u2014 "),MN=a("a"),q0o=o("RobertaForSequenceClassification"),N0o=o(" (RoBERTa model)"),j0o=l(),J7=a("li"),rie=a("strong"),D0o=o("roformer"),G0o=o(" \u2014 "),EN=a("a"),O0o=o("RoFormerForSequenceClassification"),V0o=o(" (RoFormer model)"),X0o=l(),Y7=a("li"),tie=a("strong"),z0o=o("squeezebert"),Q0o=o(" \u2014 "),CN=a("a"),W0o=o("SqueezeBertForSequenceClassification"),H0o=o(" (SqueezeBERT model)"),U0o=l(),K7=a("li"),aie=a("strong"),J0o=o("tapas"),Y0o=o(" \u2014 "),wN=a("a"),K0o=o("TapasForSequenceClassification"),Z0o=o(" (TAPAS model)"),eyo=l(),Z7=a("li"),nie=a("strong"),oyo=o("tapex"),ryo=o(" \u2014 "),AN=a("a"),tyo=o("BartForSequenceClassification"),ayo=o(" (TAPEX model)"),nyo=l(),eb=a("li"),sie=a("strong"),syo=o("transfo-xl"),lyo=o(" \u2014 "),yN=a("a"),iyo=o("TransfoXLForSequenceClassification"),dyo=o(" (Transformer-XL model)"),cyo=l(),ob=a("li"),lie=a("strong"),fyo=o("xlm"),myo=o(" \u2014 "),LN=a("a"),gyo=o("XLMForSequenceClassification"),hyo=o(" (XLM model)"),pyo=l(),rb=a("li"),iie=a("strong"),_yo=o("xlm-roberta"),uyo=o(" \u2014 "),xN=a("a"),byo=o("XLMRobertaForSequenceClassification"),vyo=o(" (XLM-RoBERTa model)"),Fyo=l(),tb=a("li"),die=a("strong"),Tyo=o("xlm-roberta-xl"),Myo=o(" \u2014 "),kN=a("a"),Eyo=o("XLMRobertaXLForSequenceClassification"),Cyo=o(" (XLM-RoBERTa-XL model)"),wyo=l(),ab=a("li"),cie=a("strong"),Ayo=o("xlnet"),yyo=o(" \u2014 "),SN=a("a"),Lyo=o("XLNetForSequenceClassification"),xyo=o(" (XLNet model)"),kyo=l(),nb=a("li"),fie=a("strong"),Syo=o("yoso"),Ryo=o(" \u2014 "),RN=a("a"),Byo=o("YosoForSequenceClassification"),Pyo=o(" (YOSO model)"),$yo=l(),sb=a("p"),Iyo=o("The model is set in evaluation mode by default using "),mie=a("code"),qyo=o("model.eval()"),Nyo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=a("code"),jyo=o("model.train()"),Dyo=l(),hie=a("p"),Gyo=o("Examples:"),Oyo=l(),f(Kw.$$.fragment),hBe=l(),pd=a("h2"),lb=a("a"),pie=a("span"),f(Zw.$$.fragment),Vyo=l(),_ie=a("span"),Xyo=o("AutoModelForMultipleChoice"),pBe=l(),rr=a("div"),f(e6.$$.fragment),zyo=l(),_d=a("p"),Qyo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BN=a("a"),Wyo=o("from_pretrained()"),Hyo=o(" class method or the "),PN=a("a"),Uyo=o("from_config()"),Jyo=o(` class
method.`),Yyo=l(),o6=a("p"),Kyo=o("This class cannot be instantiated directly using "),uie=a("code"),Zyo=o("__init__()"),e8o=o(" (throws an error)."),o8o=l(),Jr=a("div"),f(r6.$$.fragment),r8o=l(),bie=a("p"),t8o=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),a8o=l(),ud=a("p"),n8o=o(`Note:
Loading a model from its configuration file does `),vie=a("strong"),s8o=o("not"),l8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=a("a"),i8o=o("from_pretrained()"),d8o=o(" to load the model weights."),c8o=l(),Fie=a("p"),f8o=o("Examples:"),m8o=l(),f(t6.$$.fragment),g8o=l(),Ve=a("div"),f(a6.$$.fragment),h8o=l(),Tie=a("p"),p8o=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),_8o=l(),Ja=a("p"),u8o=o("The model class to instantiate is selected based on the "),Mie=a("code"),b8o=o("model_type"),v8o=o(` property of the config object (either
passed as an argument or loaded from `),Eie=a("code"),F8o=o("pretrained_model_name_or_path"),T8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cie=a("code"),M8o=o("pretrained_model_name_or_path"),E8o=o(":"),C8o=l(),G=a("ul"),ib=a("li"),wie=a("strong"),w8o=o("albert"),A8o=o(" \u2014 "),IN=a("a"),y8o=o("AlbertForMultipleChoice"),L8o=o(" (ALBERT model)"),x8o=l(),db=a("li"),Aie=a("strong"),k8o=o("bert"),S8o=o(" \u2014 "),qN=a("a"),R8o=o("BertForMultipleChoice"),B8o=o(" (BERT model)"),P8o=l(),cb=a("li"),yie=a("strong"),$8o=o("big_bird"),I8o=o(" \u2014 "),NN=a("a"),q8o=o("BigBirdForMultipleChoice"),N8o=o(" (BigBird model)"),j8o=l(),fb=a("li"),Lie=a("strong"),D8o=o("camembert"),G8o=o(" \u2014 "),jN=a("a"),O8o=o("CamembertForMultipleChoice"),V8o=o(" (CamemBERT model)"),X8o=l(),mb=a("li"),xie=a("strong"),z8o=o("canine"),Q8o=o(" \u2014 "),DN=a("a"),W8o=o("CanineForMultipleChoice"),H8o=o(" (Canine model)"),U8o=l(),gb=a("li"),kie=a("strong"),J8o=o("convbert"),Y8o=o(" \u2014 "),GN=a("a"),K8o=o("ConvBertForMultipleChoice"),Z8o=o(" (ConvBERT model)"),eLo=l(),hb=a("li"),Sie=a("strong"),oLo=o("data2vec-text"),rLo=o(" \u2014 "),ON=a("a"),tLo=o("Data2VecTextForMultipleChoice"),aLo=o(" (Data2VecText model)"),nLo=l(),pb=a("li"),Rie=a("strong"),sLo=o("distilbert"),lLo=o(" \u2014 "),VN=a("a"),iLo=o("DistilBertForMultipleChoice"),dLo=o(" (DistilBERT model)"),cLo=l(),_b=a("li"),Bie=a("strong"),fLo=o("electra"),mLo=o(" \u2014 "),XN=a("a"),gLo=o("ElectraForMultipleChoice"),hLo=o(" (ELECTRA model)"),pLo=l(),ub=a("li"),Pie=a("strong"),_Lo=o("flaubert"),uLo=o(" \u2014 "),zN=a("a"),bLo=o("FlaubertForMultipleChoice"),vLo=o(" (FlauBERT model)"),FLo=l(),bb=a("li"),$ie=a("strong"),TLo=o("fnet"),MLo=o(" \u2014 "),QN=a("a"),ELo=o("FNetForMultipleChoice"),CLo=o(" (FNet model)"),wLo=l(),vb=a("li"),Iie=a("strong"),ALo=o("funnel"),yLo=o(" \u2014 "),WN=a("a"),LLo=o("FunnelForMultipleChoice"),xLo=o(" (Funnel Transformer model)"),kLo=l(),Fb=a("li"),qie=a("strong"),SLo=o("ibert"),RLo=o(" \u2014 "),HN=a("a"),BLo=o("IBertForMultipleChoice"),PLo=o(" (I-BERT model)"),$Lo=l(),Tb=a("li"),Nie=a("strong"),ILo=o("longformer"),qLo=o(" \u2014 "),UN=a("a"),NLo=o("LongformerForMultipleChoice"),jLo=o(" (Longformer model)"),DLo=l(),Mb=a("li"),jie=a("strong"),GLo=o("megatron-bert"),OLo=o(" \u2014 "),JN=a("a"),VLo=o("MegatronBertForMultipleChoice"),XLo=o(" (MegatronBert model)"),zLo=l(),Eb=a("li"),Die=a("strong"),QLo=o("mobilebert"),WLo=o(" \u2014 "),YN=a("a"),HLo=o("MobileBertForMultipleChoice"),ULo=o(" (MobileBERT model)"),JLo=l(),Cb=a("li"),Gie=a("strong"),YLo=o("mpnet"),KLo=o(" \u2014 "),KN=a("a"),ZLo=o("MPNetForMultipleChoice"),e9o=o(" (MPNet model)"),o9o=l(),wb=a("li"),Oie=a("strong"),r9o=o("nystromformer"),t9o=o(" \u2014 "),ZN=a("a"),a9o=o("NystromformerForMultipleChoice"),n9o=o(" (Nystromformer model)"),s9o=l(),Ab=a("li"),Vie=a("strong"),l9o=o("qdqbert"),i9o=o(" \u2014 "),ej=a("a"),d9o=o("QDQBertForMultipleChoice"),c9o=o(" (QDQBert model)"),f9o=l(),yb=a("li"),Xie=a("strong"),m9o=o("rembert"),g9o=o(" \u2014 "),oj=a("a"),h9o=o("RemBertForMultipleChoice"),p9o=o(" (RemBERT model)"),_9o=l(),Lb=a("li"),zie=a("strong"),u9o=o("roberta"),b9o=o(" \u2014 "),rj=a("a"),v9o=o("RobertaForMultipleChoice"),F9o=o(" (RoBERTa model)"),T9o=l(),xb=a("li"),Qie=a("strong"),M9o=o("roformer"),E9o=o(" \u2014 "),tj=a("a"),C9o=o("RoFormerForMultipleChoice"),w9o=o(" (RoFormer model)"),A9o=l(),kb=a("li"),Wie=a("strong"),y9o=o("squeezebert"),L9o=o(" \u2014 "),aj=a("a"),x9o=o("SqueezeBertForMultipleChoice"),k9o=o(" (SqueezeBERT model)"),S9o=l(),Sb=a("li"),Hie=a("strong"),R9o=o("xlm"),B9o=o(" \u2014 "),nj=a("a"),P9o=o("XLMForMultipleChoice"),$9o=o(" (XLM model)"),I9o=l(),Rb=a("li"),Uie=a("strong"),q9o=o("xlm-roberta"),N9o=o(" \u2014 "),sj=a("a"),j9o=o("XLMRobertaForMultipleChoice"),D9o=o(" (XLM-RoBERTa model)"),G9o=l(),Bb=a("li"),Jie=a("strong"),O9o=o("xlm-roberta-xl"),V9o=o(" \u2014 "),lj=a("a"),X9o=o("XLMRobertaXLForMultipleChoice"),z9o=o(" (XLM-RoBERTa-XL model)"),Q9o=l(),Pb=a("li"),Yie=a("strong"),W9o=o("xlnet"),H9o=o(" \u2014 "),ij=a("a"),U9o=o("XLNetForMultipleChoice"),J9o=o(" (XLNet model)"),Y9o=l(),$b=a("li"),Kie=a("strong"),K9o=o("yoso"),Z9o=o(" \u2014 "),dj=a("a"),exo=o("YosoForMultipleChoice"),oxo=o(" (YOSO model)"),rxo=l(),Ib=a("p"),txo=o("The model is set in evaluation mode by default using "),Zie=a("code"),axo=o("model.eval()"),nxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=a("code"),sxo=o("model.train()"),lxo=l(),ode=a("p"),ixo=o("Examples:"),dxo=l(),f(n6.$$.fragment),_Be=l(),bd=a("h2"),qb=a("a"),rde=a("span"),f(s6.$$.fragment),cxo=l(),tde=a("span"),fxo=o("AutoModelForNextSentencePrediction"),uBe=l(),tr=a("div"),f(l6.$$.fragment),mxo=l(),vd=a("p"),gxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cj=a("a"),hxo=o("from_pretrained()"),pxo=o(" class method or the "),fj=a("a"),_xo=o("from_config()"),uxo=o(` class
method.`),bxo=l(),i6=a("p"),vxo=o("This class cannot be instantiated directly using "),ade=a("code"),Fxo=o("__init__()"),Txo=o(" (throws an error)."),Mxo=l(),Yr=a("div"),f(d6.$$.fragment),Exo=l(),nde=a("p"),Cxo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),wxo=l(),Fd=a("p"),Axo=o(`Note:
Loading a model from its configuration file does `),sde=a("strong"),yxo=o("not"),Lxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=a("a"),xxo=o("from_pretrained()"),kxo=o(" to load the model weights."),Sxo=l(),lde=a("p"),Rxo=o("Examples:"),Bxo=l(),f(c6.$$.fragment),Pxo=l(),Xe=a("div"),f(f6.$$.fragment),$xo=l(),ide=a("p"),Ixo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),qxo=l(),Ya=a("p"),Nxo=o("The model class to instantiate is selected based on the "),dde=a("code"),jxo=o("model_type"),Dxo=o(` property of the config object (either
passed as an argument or loaded from `),cde=a("code"),Gxo=o("pretrained_model_name_or_path"),Oxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=a("code"),Vxo=o("pretrained_model_name_or_path"),Xxo=o(":"),zxo=l(),da=a("ul"),Nb=a("li"),mde=a("strong"),Qxo=o("bert"),Wxo=o(" \u2014 "),gj=a("a"),Hxo=o("BertForNextSentencePrediction"),Uxo=o(" (BERT model)"),Jxo=l(),jb=a("li"),gde=a("strong"),Yxo=o("fnet"),Kxo=o(" \u2014 "),hj=a("a"),Zxo=o("FNetForNextSentencePrediction"),eko=o(" (FNet model)"),oko=l(),Db=a("li"),hde=a("strong"),rko=o("megatron-bert"),tko=o(" \u2014 "),pj=a("a"),ako=o("MegatronBertForNextSentencePrediction"),nko=o(" (MegatronBert model)"),sko=l(),Gb=a("li"),pde=a("strong"),lko=o("mobilebert"),iko=o(" \u2014 "),_j=a("a"),dko=o("MobileBertForNextSentencePrediction"),cko=o(" (MobileBERT model)"),fko=l(),Ob=a("li"),_de=a("strong"),mko=o("qdqbert"),gko=o(" \u2014 "),uj=a("a"),hko=o("QDQBertForNextSentencePrediction"),pko=o(" (QDQBert model)"),_ko=l(),Vb=a("p"),uko=o("The model is set in evaluation mode by default using "),ude=a("code"),bko=o("model.eval()"),vko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=a("code"),Fko=o("model.train()"),Tko=l(),vde=a("p"),Mko=o("Examples:"),Eko=l(),f(m6.$$.fragment),bBe=l(),Td=a("h2"),Xb=a("a"),Fde=a("span"),f(g6.$$.fragment),Cko=l(),Tde=a("span"),wko=o("AutoModelForTokenClassification"),vBe=l(),ar=a("div"),f(h6.$$.fragment),Ako=l(),Md=a("p"),yko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bj=a("a"),Lko=o("from_pretrained()"),xko=o(" class method or the "),vj=a("a"),kko=o("from_config()"),Sko=o(` class
method.`),Rko=l(),p6=a("p"),Bko=o("This class cannot be instantiated directly using "),Mde=a("code"),Pko=o("__init__()"),$ko=o(" (throws an error)."),Iko=l(),Kr=a("div"),f(_6.$$.fragment),qko=l(),Ede=a("p"),Nko=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),jko=l(),Ed=a("p"),Dko=o(`Note:
Loading a model from its configuration file does `),Cde=a("strong"),Gko=o("not"),Oko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=a("a"),Vko=o("from_pretrained()"),Xko=o(" to load the model weights."),zko=l(),wde=a("p"),Qko=o("Examples:"),Wko=l(),f(u6.$$.fragment),Hko=l(),ze=a("div"),f(b6.$$.fragment),Uko=l(),Ade=a("p"),Jko=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Yko=l(),Ka=a("p"),Kko=o("The model class to instantiate is selected based on the "),yde=a("code"),Zko=o("model_type"),eSo=o(` property of the config object (either
passed as an argument or loaded from `),Lde=a("code"),oSo=o("pretrained_model_name_or_path"),rSo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=a("code"),tSo=o("pretrained_model_name_or_path"),aSo=o(":"),nSo=l(),j=a("ul"),zb=a("li"),kde=a("strong"),sSo=o("albert"),lSo=o(" \u2014 "),Tj=a("a"),iSo=o("AlbertForTokenClassification"),dSo=o(" (ALBERT model)"),cSo=l(),Qb=a("li"),Sde=a("strong"),fSo=o("bert"),mSo=o(" \u2014 "),Mj=a("a"),gSo=o("BertForTokenClassification"),hSo=o(" (BERT model)"),pSo=l(),Wb=a("li"),Rde=a("strong"),_So=o("big_bird"),uSo=o(" \u2014 "),Ej=a("a"),bSo=o("BigBirdForTokenClassification"),vSo=o(" (BigBird model)"),FSo=l(),Hb=a("li"),Bde=a("strong"),TSo=o("camembert"),MSo=o(" \u2014 "),Cj=a("a"),ESo=o("CamembertForTokenClassification"),CSo=o(" (CamemBERT model)"),wSo=l(),Ub=a("li"),Pde=a("strong"),ASo=o("canine"),ySo=o(" \u2014 "),wj=a("a"),LSo=o("CanineForTokenClassification"),xSo=o(" (Canine model)"),kSo=l(),Jb=a("li"),$de=a("strong"),SSo=o("convbert"),RSo=o(" \u2014 "),Aj=a("a"),BSo=o("ConvBertForTokenClassification"),PSo=o(" (ConvBERT model)"),$So=l(),Yb=a("li"),Ide=a("strong"),ISo=o("data2vec-text"),qSo=o(" \u2014 "),yj=a("a"),NSo=o("Data2VecTextForTokenClassification"),jSo=o(" (Data2VecText model)"),DSo=l(),Kb=a("li"),qde=a("strong"),GSo=o("deberta"),OSo=o(" \u2014 "),Lj=a("a"),VSo=o("DebertaForTokenClassification"),XSo=o(" (DeBERTa model)"),zSo=l(),Zb=a("li"),Nde=a("strong"),QSo=o("deberta-v2"),WSo=o(" \u2014 "),xj=a("a"),HSo=o("DebertaV2ForTokenClassification"),USo=o(" (DeBERTa-v2 model)"),JSo=l(),e2=a("li"),jde=a("strong"),YSo=o("distilbert"),KSo=o(" \u2014 "),kj=a("a"),ZSo=o("DistilBertForTokenClassification"),eRo=o(" (DistilBERT model)"),oRo=l(),o2=a("li"),Dde=a("strong"),rRo=o("electra"),tRo=o(" \u2014 "),Sj=a("a"),aRo=o("ElectraForTokenClassification"),nRo=o(" (ELECTRA model)"),sRo=l(),r2=a("li"),Gde=a("strong"),lRo=o("flaubert"),iRo=o(" \u2014 "),Rj=a("a"),dRo=o("FlaubertForTokenClassification"),cRo=o(" (FlauBERT model)"),fRo=l(),t2=a("li"),Ode=a("strong"),mRo=o("fnet"),gRo=o(" \u2014 "),Bj=a("a"),hRo=o("FNetForTokenClassification"),pRo=o(" (FNet model)"),_Ro=l(),a2=a("li"),Vde=a("strong"),uRo=o("funnel"),bRo=o(" \u2014 "),Pj=a("a"),vRo=o("FunnelForTokenClassification"),FRo=o(" (Funnel Transformer model)"),TRo=l(),n2=a("li"),Xde=a("strong"),MRo=o("gpt2"),ERo=o(" \u2014 "),$j=a("a"),CRo=o("GPT2ForTokenClassification"),wRo=o(" (OpenAI GPT-2 model)"),ARo=l(),s2=a("li"),zde=a("strong"),yRo=o("ibert"),LRo=o(" \u2014 "),Ij=a("a"),xRo=o("IBertForTokenClassification"),kRo=o(" (I-BERT model)"),SRo=l(),l2=a("li"),Qde=a("strong"),RRo=o("layoutlm"),BRo=o(" \u2014 "),qj=a("a"),PRo=o("LayoutLMForTokenClassification"),$Ro=o(" (LayoutLM model)"),IRo=l(),i2=a("li"),Wde=a("strong"),qRo=o("layoutlmv2"),NRo=o(" \u2014 "),Nj=a("a"),jRo=o("LayoutLMv2ForTokenClassification"),DRo=o(" (LayoutLMv2 model)"),GRo=l(),d2=a("li"),Hde=a("strong"),ORo=o("longformer"),VRo=o(" \u2014 "),jj=a("a"),XRo=o("LongformerForTokenClassification"),zRo=o(" (Longformer model)"),QRo=l(),c2=a("li"),Ude=a("strong"),WRo=o("megatron-bert"),HRo=o(" \u2014 "),Dj=a("a"),URo=o("MegatronBertForTokenClassification"),JRo=o(" (MegatronBert model)"),YRo=l(),f2=a("li"),Jde=a("strong"),KRo=o("mobilebert"),ZRo=o(" \u2014 "),Gj=a("a"),eBo=o("MobileBertForTokenClassification"),oBo=o(" (MobileBERT model)"),rBo=l(),m2=a("li"),Yde=a("strong"),tBo=o("mpnet"),aBo=o(" \u2014 "),Oj=a("a"),nBo=o("MPNetForTokenClassification"),sBo=o(" (MPNet model)"),lBo=l(),g2=a("li"),Kde=a("strong"),iBo=o("nystromformer"),dBo=o(" \u2014 "),Vj=a("a"),cBo=o("NystromformerForTokenClassification"),fBo=o(" (Nystromformer model)"),mBo=l(),h2=a("li"),Zde=a("strong"),gBo=o("qdqbert"),hBo=o(" \u2014 "),Xj=a("a"),pBo=o("QDQBertForTokenClassification"),_Bo=o(" (QDQBert model)"),uBo=l(),p2=a("li"),ece=a("strong"),bBo=o("rembert"),vBo=o(" \u2014 "),zj=a("a"),FBo=o("RemBertForTokenClassification"),TBo=o(" (RemBERT model)"),MBo=l(),_2=a("li"),oce=a("strong"),EBo=o("roberta"),CBo=o(" \u2014 "),Qj=a("a"),wBo=o("RobertaForTokenClassification"),ABo=o(" (RoBERTa model)"),yBo=l(),u2=a("li"),rce=a("strong"),LBo=o("roformer"),xBo=o(" \u2014 "),Wj=a("a"),kBo=o("RoFormerForTokenClassification"),SBo=o(" (RoFormer model)"),RBo=l(),b2=a("li"),tce=a("strong"),BBo=o("squeezebert"),PBo=o(" \u2014 "),Hj=a("a"),$Bo=o("SqueezeBertForTokenClassification"),IBo=o(" (SqueezeBERT model)"),qBo=l(),v2=a("li"),ace=a("strong"),NBo=o("xlm"),jBo=o(" \u2014 "),Uj=a("a"),DBo=o("XLMForTokenClassification"),GBo=o(" (XLM model)"),OBo=l(),F2=a("li"),nce=a("strong"),VBo=o("xlm-roberta"),XBo=o(" \u2014 "),Jj=a("a"),zBo=o("XLMRobertaForTokenClassification"),QBo=o(" (XLM-RoBERTa model)"),WBo=l(),T2=a("li"),sce=a("strong"),HBo=o("xlm-roberta-xl"),UBo=o(" \u2014 "),Yj=a("a"),JBo=o("XLMRobertaXLForTokenClassification"),YBo=o(" (XLM-RoBERTa-XL model)"),KBo=l(),M2=a("li"),lce=a("strong"),ZBo=o("xlnet"),ePo=o(" \u2014 "),Kj=a("a"),oPo=o("XLNetForTokenClassification"),rPo=o(" (XLNet model)"),tPo=l(),E2=a("li"),ice=a("strong"),aPo=o("yoso"),nPo=o(" \u2014 "),Zj=a("a"),sPo=o("YosoForTokenClassification"),lPo=o(" (YOSO model)"),iPo=l(),C2=a("p"),dPo=o("The model is set in evaluation mode by default using "),dce=a("code"),cPo=o("model.eval()"),fPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=a("code"),mPo=o("model.train()"),gPo=l(),fce=a("p"),hPo=o("Examples:"),pPo=l(),f(v6.$$.fragment),FBe=l(),Cd=a("h2"),w2=a("a"),mce=a("span"),f(F6.$$.fragment),_Po=l(),gce=a("span"),uPo=o("AutoModelForQuestionAnswering"),TBe=l(),nr=a("div"),f(T6.$$.fragment),bPo=l(),wd=a("p"),vPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eD=a("a"),FPo=o("from_pretrained()"),TPo=o(" class method or the "),oD=a("a"),MPo=o("from_config()"),EPo=o(` class
method.`),CPo=l(),M6=a("p"),wPo=o("This class cannot be instantiated directly using "),hce=a("code"),APo=o("__init__()"),yPo=o(" (throws an error)."),LPo=l(),Zr=a("div"),f(E6.$$.fragment),xPo=l(),pce=a("p"),kPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),SPo=l(),Ad=a("p"),RPo=o(`Note:
Loading a model from its configuration file does `),_ce=a("strong"),BPo=o("not"),PPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=a("a"),$Po=o("from_pretrained()"),IPo=o(" to load the model weights."),qPo=l(),uce=a("p"),NPo=o("Examples:"),jPo=l(),f(C6.$$.fragment),DPo=l(),Qe=a("div"),f(w6.$$.fragment),GPo=l(),bce=a("p"),OPo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),VPo=l(),Za=a("p"),XPo=o("The model class to instantiate is selected based on the "),vce=a("code"),zPo=o("model_type"),QPo=o(` property of the config object (either
passed as an argument or loaded from `),Fce=a("code"),WPo=o("pretrained_model_name_or_path"),HPo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=a("code"),UPo=o("pretrained_model_name_or_path"),JPo=o(":"),YPo=l(),R=a("ul"),A2=a("li"),Mce=a("strong"),KPo=o("albert"),ZPo=o(" \u2014 "),tD=a("a"),e$o=o("AlbertForQuestionAnswering"),o$o=o(" (ALBERT model)"),r$o=l(),y2=a("li"),Ece=a("strong"),t$o=o("bart"),a$o=o(" \u2014 "),aD=a("a"),n$o=o("BartForQuestionAnswering"),s$o=o(" (BART model)"),l$o=l(),L2=a("li"),Cce=a("strong"),i$o=o("bert"),d$o=o(" \u2014 "),nD=a("a"),c$o=o("BertForQuestionAnswering"),f$o=o(" (BERT model)"),m$o=l(),x2=a("li"),wce=a("strong"),g$o=o("big_bird"),h$o=o(" \u2014 "),sD=a("a"),p$o=o("BigBirdForQuestionAnswering"),_$o=o(" (BigBird model)"),u$o=l(),k2=a("li"),Ace=a("strong"),b$o=o("bigbird_pegasus"),v$o=o(" \u2014 "),lD=a("a"),F$o=o("BigBirdPegasusForQuestionAnswering"),T$o=o(" (BigBirdPegasus model)"),M$o=l(),S2=a("li"),yce=a("strong"),E$o=o("camembert"),C$o=o(" \u2014 "),iD=a("a"),w$o=o("CamembertForQuestionAnswering"),A$o=o(" (CamemBERT model)"),y$o=l(),R2=a("li"),Lce=a("strong"),L$o=o("canine"),x$o=o(" \u2014 "),dD=a("a"),k$o=o("CanineForQuestionAnswering"),S$o=o(" (Canine model)"),R$o=l(),B2=a("li"),xce=a("strong"),B$o=o("convbert"),P$o=o(" \u2014 "),cD=a("a"),$$o=o("ConvBertForQuestionAnswering"),I$o=o(" (ConvBERT model)"),q$o=l(),P2=a("li"),kce=a("strong"),N$o=o("data2vec-text"),j$o=o(" \u2014 "),fD=a("a"),D$o=o("Data2VecTextForQuestionAnswering"),G$o=o(" (Data2VecText model)"),O$o=l(),$2=a("li"),Sce=a("strong"),V$o=o("deberta"),X$o=o(" \u2014 "),mD=a("a"),z$o=o("DebertaForQuestionAnswering"),Q$o=o(" (DeBERTa model)"),W$o=l(),I2=a("li"),Rce=a("strong"),H$o=o("deberta-v2"),U$o=o(" \u2014 "),gD=a("a"),J$o=o("DebertaV2ForQuestionAnswering"),Y$o=o(" (DeBERTa-v2 model)"),K$o=l(),q2=a("li"),Bce=a("strong"),Z$o=o("distilbert"),eIo=o(" \u2014 "),hD=a("a"),oIo=o("DistilBertForQuestionAnswering"),rIo=o(" (DistilBERT model)"),tIo=l(),N2=a("li"),Pce=a("strong"),aIo=o("electra"),nIo=o(" \u2014 "),pD=a("a"),sIo=o("ElectraForQuestionAnswering"),lIo=o(" (ELECTRA model)"),iIo=l(),j2=a("li"),$ce=a("strong"),dIo=o("flaubert"),cIo=o(" \u2014 "),_D=a("a"),fIo=o("FlaubertForQuestionAnsweringSimple"),mIo=o(" (FlauBERT model)"),gIo=l(),D2=a("li"),Ice=a("strong"),hIo=o("fnet"),pIo=o(" \u2014 "),uD=a("a"),_Io=o("FNetForQuestionAnswering"),uIo=o(" (FNet model)"),bIo=l(),G2=a("li"),qce=a("strong"),vIo=o("funnel"),FIo=o(" \u2014 "),bD=a("a"),TIo=o("FunnelForQuestionAnswering"),MIo=o(" (Funnel Transformer model)"),EIo=l(),O2=a("li"),Nce=a("strong"),CIo=o("gptj"),wIo=o(" \u2014 "),vD=a("a"),AIo=o("GPTJForQuestionAnswering"),yIo=o(" (GPT-J model)"),LIo=l(),V2=a("li"),jce=a("strong"),xIo=o("ibert"),kIo=o(" \u2014 "),FD=a("a"),SIo=o("IBertForQuestionAnswering"),RIo=o(" (I-BERT model)"),BIo=l(),X2=a("li"),Dce=a("strong"),PIo=o("layoutlmv2"),$Io=o(" \u2014 "),TD=a("a"),IIo=o("LayoutLMv2ForQuestionAnswering"),qIo=o(" (LayoutLMv2 model)"),NIo=l(),z2=a("li"),Gce=a("strong"),jIo=o("led"),DIo=o(" \u2014 "),MD=a("a"),GIo=o("LEDForQuestionAnswering"),OIo=o(" (LED model)"),VIo=l(),Q2=a("li"),Oce=a("strong"),XIo=o("longformer"),zIo=o(" \u2014 "),ED=a("a"),QIo=o("LongformerForQuestionAnswering"),WIo=o(" (Longformer model)"),HIo=l(),W2=a("li"),Vce=a("strong"),UIo=o("lxmert"),JIo=o(" \u2014 "),CD=a("a"),YIo=o("LxmertForQuestionAnswering"),KIo=o(" (LXMERT model)"),ZIo=l(),H2=a("li"),Xce=a("strong"),eqo=o("mbart"),oqo=o(" \u2014 "),wD=a("a"),rqo=o("MBartForQuestionAnswering"),tqo=o(" (mBART model)"),aqo=l(),U2=a("li"),zce=a("strong"),nqo=o("megatron-bert"),sqo=o(" \u2014 "),AD=a("a"),lqo=o("MegatronBertForQuestionAnswering"),iqo=o(" (MegatronBert model)"),dqo=l(),J2=a("li"),Qce=a("strong"),cqo=o("mobilebert"),fqo=o(" \u2014 "),yD=a("a"),mqo=o("MobileBertForQuestionAnswering"),gqo=o(" (MobileBERT model)"),hqo=l(),Y2=a("li"),Wce=a("strong"),pqo=o("mpnet"),_qo=o(" \u2014 "),LD=a("a"),uqo=o("MPNetForQuestionAnswering"),bqo=o(" (MPNet model)"),vqo=l(),K2=a("li"),Hce=a("strong"),Fqo=o("nystromformer"),Tqo=o(" \u2014 "),xD=a("a"),Mqo=o("NystromformerForQuestionAnswering"),Eqo=o(" (Nystromformer model)"),Cqo=l(),Z2=a("li"),Uce=a("strong"),wqo=o("qdqbert"),Aqo=o(" \u2014 "),kD=a("a"),yqo=o("QDQBertForQuestionAnswering"),Lqo=o(" (QDQBert model)"),xqo=l(),e5=a("li"),Jce=a("strong"),kqo=o("reformer"),Sqo=o(" \u2014 "),SD=a("a"),Rqo=o("ReformerForQuestionAnswering"),Bqo=o(" (Reformer model)"),Pqo=l(),o5=a("li"),Yce=a("strong"),$qo=o("rembert"),Iqo=o(" \u2014 "),RD=a("a"),qqo=o("RemBertForQuestionAnswering"),Nqo=o(" (RemBERT model)"),jqo=l(),r5=a("li"),Kce=a("strong"),Dqo=o("roberta"),Gqo=o(" \u2014 "),BD=a("a"),Oqo=o("RobertaForQuestionAnswering"),Vqo=o(" (RoBERTa model)"),Xqo=l(),t5=a("li"),Zce=a("strong"),zqo=o("roformer"),Qqo=o(" \u2014 "),PD=a("a"),Wqo=o("RoFormerForQuestionAnswering"),Hqo=o(" (RoFormer model)"),Uqo=l(),a5=a("li"),efe=a("strong"),Jqo=o("splinter"),Yqo=o(" \u2014 "),$D=a("a"),Kqo=o("SplinterForQuestionAnswering"),Zqo=o(" (Splinter model)"),eNo=l(),n5=a("li"),ofe=a("strong"),oNo=o("squeezebert"),rNo=o(" \u2014 "),ID=a("a"),tNo=o("SqueezeBertForQuestionAnswering"),aNo=o(" (SqueezeBERT model)"),nNo=l(),s5=a("li"),rfe=a("strong"),sNo=o("xlm"),lNo=o(" \u2014 "),qD=a("a"),iNo=o("XLMForQuestionAnsweringSimple"),dNo=o(" (XLM model)"),cNo=l(),l5=a("li"),tfe=a("strong"),fNo=o("xlm-roberta"),mNo=o(" \u2014 "),ND=a("a"),gNo=o("XLMRobertaForQuestionAnswering"),hNo=o(" (XLM-RoBERTa model)"),pNo=l(),i5=a("li"),afe=a("strong"),_No=o("xlm-roberta-xl"),uNo=o(" \u2014 "),jD=a("a"),bNo=o("XLMRobertaXLForQuestionAnswering"),vNo=o(" (XLM-RoBERTa-XL model)"),FNo=l(),d5=a("li"),nfe=a("strong"),TNo=o("xlnet"),MNo=o(" \u2014 "),DD=a("a"),ENo=o("XLNetForQuestionAnsweringSimple"),CNo=o(" (XLNet model)"),wNo=l(),c5=a("li"),sfe=a("strong"),ANo=o("yoso"),yNo=o(" \u2014 "),GD=a("a"),LNo=o("YosoForQuestionAnswering"),xNo=o(" (YOSO model)"),kNo=l(),f5=a("p"),SNo=o("The model is set in evaluation mode by default using "),lfe=a("code"),RNo=o("model.eval()"),BNo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=a("code"),PNo=o("model.train()"),$No=l(),dfe=a("p"),INo=o("Examples:"),qNo=l(),f(A6.$$.fragment),MBe=l(),yd=a("h2"),m5=a("a"),cfe=a("span"),f(y6.$$.fragment),NNo=l(),ffe=a("span"),jNo=o("AutoModelForTableQuestionAnswering"),EBe=l(),sr=a("div"),f(L6.$$.fragment),DNo=l(),Ld=a("p"),GNo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OD=a("a"),ONo=o("from_pretrained()"),VNo=o(" class method or the "),VD=a("a"),XNo=o("from_config()"),zNo=o(` class
method.`),QNo=l(),x6=a("p"),WNo=o("This class cannot be instantiated directly using "),mfe=a("code"),HNo=o("__init__()"),UNo=o(" (throws an error)."),JNo=l(),et=a("div"),f(k6.$$.fragment),YNo=l(),gfe=a("p"),KNo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),ZNo=l(),xd=a("p"),ejo=o(`Note:
Loading a model from its configuration file does `),hfe=a("strong"),ojo=o("not"),rjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=a("a"),tjo=o("from_pretrained()"),ajo=o(" to load the model weights."),njo=l(),pfe=a("p"),sjo=o("Examples:"),ljo=l(),f(S6.$$.fragment),ijo=l(),We=a("div"),f(R6.$$.fragment),djo=l(),_fe=a("p"),cjo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),fjo=l(),en=a("p"),mjo=o("The model class to instantiate is selected based on the "),ufe=a("code"),gjo=o("model_type"),hjo=o(` property of the config object (either
passed as an argument or loaded from `),bfe=a("code"),pjo=o("pretrained_model_name_or_path"),_jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=a("code"),ujo=o("pretrained_model_name_or_path"),bjo=o(":"),vjo=l(),Ffe=a("ul"),g5=a("li"),Tfe=a("strong"),Fjo=o("tapas"),Tjo=o(" \u2014 "),zD=a("a"),Mjo=o("TapasForQuestionAnswering"),Ejo=o(" (TAPAS model)"),Cjo=l(),h5=a("p"),wjo=o("The model is set in evaluation mode by default using "),Mfe=a("code"),Ajo=o("model.eval()"),yjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=a("code"),Ljo=o("model.train()"),xjo=l(),Cfe=a("p"),kjo=o("Examples:"),Sjo=l(),f(B6.$$.fragment),CBe=l(),kd=a("h2"),p5=a("a"),wfe=a("span"),f(P6.$$.fragment),Rjo=l(),Afe=a("span"),Bjo=o("AutoModelForImageClassification"),wBe=l(),lr=a("div"),f($6.$$.fragment),Pjo=l(),Sd=a("p"),$jo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QD=a("a"),Ijo=o("from_pretrained()"),qjo=o(" class method or the "),WD=a("a"),Njo=o("from_config()"),jjo=o(` class
method.`),Djo=l(),I6=a("p"),Gjo=o("This class cannot be instantiated directly using "),yfe=a("code"),Ojo=o("__init__()"),Vjo=o(" (throws an error)."),Xjo=l(),ot=a("div"),f(q6.$$.fragment),zjo=l(),Lfe=a("p"),Qjo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Wjo=l(),Rd=a("p"),Hjo=o(`Note:
Loading a model from its configuration file does `),xfe=a("strong"),Ujo=o("not"),Jjo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),Yjo=o("from_pretrained()"),Kjo=o(" to load the model weights."),Zjo=l(),kfe=a("p"),eDo=o("Examples:"),oDo=l(),f(N6.$$.fragment),rDo=l(),He=a("div"),f(j6.$$.fragment),tDo=l(),Sfe=a("p"),aDo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nDo=l(),on=a("p"),sDo=o("The model class to instantiate is selected based on the "),Rfe=a("code"),lDo=o("model_type"),iDo=o(` property of the config object (either
passed as an argument or loaded from `),Bfe=a("code"),dDo=o("pretrained_model_name_or_path"),cDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=a("code"),fDo=o("pretrained_model_name_or_path"),mDo=o(":"),gDo=l(),de=a("ul"),_5=a("li"),$fe=a("strong"),hDo=o("beit"),pDo=o(" \u2014 "),UD=a("a"),_Do=o("BeitForImageClassification"),uDo=o(" (BEiT model)"),bDo=l(),u5=a("li"),Ife=a("strong"),vDo=o("convnext"),FDo=o(" \u2014 "),JD=a("a"),TDo=o("ConvNextForImageClassification"),MDo=o(" (ConvNext model)"),EDo=l(),b5=a("li"),qfe=a("strong"),CDo=o("data2vec-vision"),wDo=o(" \u2014 "),YD=a("a"),ADo=o("Data2VecVisionForImageClassification"),yDo=o(" (Data2VecVision model)"),LDo=l(),Gs=a("li"),Nfe=a("strong"),xDo=o("deit"),kDo=o(" \u2014 "),KD=a("a"),SDo=o("DeiTForImageClassification"),RDo=o(" or "),ZD=a("a"),BDo=o("DeiTForImageClassificationWithTeacher"),PDo=o(" (DeiT model)"),$Do=l(),v5=a("li"),jfe=a("strong"),IDo=o("imagegpt"),qDo=o(" \u2014 "),eG=a("a"),NDo=o("ImageGPTForImageClassification"),jDo=o(" (ImageGPT model)"),DDo=l(),ma=a("li"),Dfe=a("strong"),GDo=o("perceiver"),ODo=o(" \u2014 "),oG=a("a"),VDo=o("PerceiverForImageClassificationLearned"),XDo=o(" or "),rG=a("a"),zDo=o("PerceiverForImageClassificationFourier"),QDo=o(" or "),tG=a("a"),WDo=o("PerceiverForImageClassificationConvProcessing"),HDo=o(" (Perceiver model)"),UDo=l(),F5=a("li"),Gfe=a("strong"),JDo=o("poolformer"),YDo=o(" \u2014 "),aG=a("a"),KDo=o("PoolFormerForImageClassification"),ZDo=o(" (PoolFormer model)"),eGo=l(),T5=a("li"),Ofe=a("strong"),oGo=o("regnet"),rGo=o(" \u2014 "),nG=a("a"),tGo=o("RegNetForImageClassification"),aGo=o(" (RegNet model)"),nGo=l(),M5=a("li"),Vfe=a("strong"),sGo=o("resnet"),lGo=o(" \u2014 "),sG=a("a"),iGo=o("ResNetForImageClassification"),dGo=o(" (ResNet model)"),cGo=l(),E5=a("li"),Xfe=a("strong"),fGo=o("segformer"),mGo=o(" \u2014 "),lG=a("a"),gGo=o("SegformerForImageClassification"),hGo=o(" (SegFormer model)"),pGo=l(),C5=a("li"),zfe=a("strong"),_Go=o("swin"),uGo=o(" \u2014 "),iG=a("a"),bGo=o("SwinForImageClassification"),vGo=o(" (Swin model)"),FGo=l(),w5=a("li"),Qfe=a("strong"),TGo=o("van"),MGo=o(" \u2014 "),dG=a("a"),EGo=o("VanForImageClassification"),CGo=o(" (VAN model)"),wGo=l(),A5=a("li"),Wfe=a("strong"),AGo=o("vit"),yGo=o(" \u2014 "),cG=a("a"),LGo=o("ViTForImageClassification"),xGo=o(" (ViT model)"),kGo=l(),y5=a("p"),SGo=o("The model is set in evaluation mode by default using "),Hfe=a("code"),RGo=o("model.eval()"),BGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=a("code"),PGo=o("model.train()"),$Go=l(),Jfe=a("p"),IGo=o("Examples:"),qGo=l(),f(D6.$$.fragment),ABe=l(),Bd=a("h2"),L5=a("a"),Yfe=a("span"),f(G6.$$.fragment),NGo=l(),Kfe=a("span"),jGo=o("AutoModelForVision2Seq"),yBe=l(),ir=a("div"),f(O6.$$.fragment),DGo=l(),Pd=a("p"),GGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fG=a("a"),OGo=o("from_pretrained()"),VGo=o(" class method or the "),mG=a("a"),XGo=o("from_config()"),zGo=o(` class
method.`),QGo=l(),V6=a("p"),WGo=o("This class cannot be instantiated directly using "),Zfe=a("code"),HGo=o("__init__()"),UGo=o(" (throws an error)."),JGo=l(),rt=a("div"),f(X6.$$.fragment),YGo=l(),eme=a("p"),KGo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZGo=l(),$d=a("p"),eOo=o(`Note:
Loading a model from its configuration file does `),ome=a("strong"),oOo=o("not"),rOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=a("a"),tOo=o("from_pretrained()"),aOo=o(" to load the model weights."),nOo=l(),rme=a("p"),sOo=o("Examples:"),lOo=l(),f(z6.$$.fragment),iOo=l(),Ue=a("div"),f(Q6.$$.fragment),dOo=l(),tme=a("p"),cOo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),fOo=l(),rn=a("p"),mOo=o("The model class to instantiate is selected based on the "),ame=a("code"),gOo=o("model_type"),hOo=o(` property of the config object (either
passed as an argument or loaded from `),nme=a("code"),pOo=o("pretrained_model_name_or_path"),_Oo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=a("code"),uOo=o("pretrained_model_name_or_path"),bOo=o(":"),vOo=l(),lme=a("ul"),x5=a("li"),ime=a("strong"),FOo=o("vision-encoder-decoder"),TOo=o(" \u2014 "),hG=a("a"),MOo=o("VisionEncoderDecoderModel"),EOo=o(" (Vision Encoder decoder model)"),COo=l(),k5=a("p"),wOo=o("The model is set in evaluation mode by default using "),dme=a("code"),AOo=o("model.eval()"),yOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=a("code"),LOo=o("model.train()"),xOo=l(),fme=a("p"),kOo=o("Examples:"),SOo=l(),f(W6.$$.fragment),LBe=l(),Id=a("h2"),S5=a("a"),mme=a("span"),f(H6.$$.fragment),ROo=l(),gme=a("span"),BOo=o("AutoModelForAudioClassification"),xBe=l(),dr=a("div"),f(U6.$$.fragment),POo=l(),qd=a("p"),$Oo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pG=a("a"),IOo=o("from_pretrained()"),qOo=o(" class method or the "),_G=a("a"),NOo=o("from_config()"),jOo=o(` class
method.`),DOo=l(),J6=a("p"),GOo=o("This class cannot be instantiated directly using "),hme=a("code"),OOo=o("__init__()"),VOo=o(" (throws an error)."),XOo=l(),tt=a("div"),f(Y6.$$.fragment),zOo=l(),pme=a("p"),QOo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),WOo=l(),Nd=a("p"),HOo=o(`Note:
Loading a model from its configuration file does `),_me=a("strong"),UOo=o("not"),JOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=a("a"),YOo=o("from_pretrained()"),KOo=o(" to load the model weights."),ZOo=l(),ume=a("p"),eVo=o("Examples:"),oVo=l(),f(K6.$$.fragment),rVo=l(),Je=a("div"),f(Z6.$$.fragment),tVo=l(),bme=a("p"),aVo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),nVo=l(),tn=a("p"),sVo=o("The model class to instantiate is selected based on the "),vme=a("code"),lVo=o("model_type"),iVo=o(` property of the config object (either
passed as an argument or loaded from `),Fme=a("code"),dVo=o("pretrained_model_name_or_path"),cVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=a("code"),fVo=o("pretrained_model_name_or_path"),mVo=o(":"),gVo=l(),Se=a("ul"),R5=a("li"),Mme=a("strong"),hVo=o("data2vec-audio"),pVo=o(" \u2014 "),bG=a("a"),_Vo=o("Data2VecAudioForSequenceClassification"),uVo=o(" (Data2VecAudio model)"),bVo=l(),B5=a("li"),Eme=a("strong"),vVo=o("hubert"),FVo=o(" \u2014 "),vG=a("a"),TVo=o("HubertForSequenceClassification"),MVo=o(" (Hubert model)"),EVo=l(),P5=a("li"),Cme=a("strong"),CVo=o("sew"),wVo=o(" \u2014 "),FG=a("a"),AVo=o("SEWForSequenceClassification"),yVo=o(" (SEW model)"),LVo=l(),$5=a("li"),wme=a("strong"),xVo=o("sew-d"),kVo=o(" \u2014 "),TG=a("a"),SVo=o("SEWDForSequenceClassification"),RVo=o(" (SEW-D model)"),BVo=l(),I5=a("li"),Ame=a("strong"),PVo=o("unispeech"),$Vo=o(" \u2014 "),MG=a("a"),IVo=o("UniSpeechForSequenceClassification"),qVo=o(" (UniSpeech model)"),NVo=l(),q5=a("li"),yme=a("strong"),jVo=o("unispeech-sat"),DVo=o(" \u2014 "),EG=a("a"),GVo=o("UniSpeechSatForSequenceClassification"),OVo=o(" (UniSpeechSat model)"),VVo=l(),N5=a("li"),Lme=a("strong"),XVo=o("wav2vec2"),zVo=o(" \u2014 "),CG=a("a"),QVo=o("Wav2Vec2ForSequenceClassification"),WVo=o(" (Wav2Vec2 model)"),HVo=l(),j5=a("li"),xme=a("strong"),UVo=o("wavlm"),JVo=o(" \u2014 "),wG=a("a"),YVo=o("WavLMForSequenceClassification"),KVo=o(" (WavLM model)"),ZVo=l(),D5=a("p"),eXo=o("The model is set in evaluation mode by default using "),kme=a("code"),oXo=o("model.eval()"),rXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=a("code"),tXo=o("model.train()"),aXo=l(),Rme=a("p"),nXo=o("Examples:"),sXo=l(),f(eA.$$.fragment),kBe=l(),jd=a("h2"),G5=a("a"),Bme=a("span"),f(oA.$$.fragment),lXo=l(),Pme=a("span"),iXo=o("AutoModelForAudioFrameClassification"),SBe=l(),cr=a("div"),f(rA.$$.fragment),dXo=l(),Dd=a("p"),cXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AG=a("a"),fXo=o("from_pretrained()"),mXo=o(" class method or the "),yG=a("a"),gXo=o("from_config()"),hXo=o(` class
method.`),pXo=l(),tA=a("p"),_Xo=o("This class cannot be instantiated directly using "),$me=a("code"),uXo=o("__init__()"),bXo=o(" (throws an error)."),vXo=l(),at=a("div"),f(aA.$$.fragment),FXo=l(),Ime=a("p"),TXo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),MXo=l(),Gd=a("p"),EXo=o(`Note:
Loading a model from its configuration file does `),qme=a("strong"),CXo=o("not"),wXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=a("a"),AXo=o("from_pretrained()"),yXo=o(" to load the model weights."),LXo=l(),Nme=a("p"),xXo=o("Examples:"),kXo=l(),f(nA.$$.fragment),SXo=l(),Ye=a("div"),f(sA.$$.fragment),RXo=l(),jme=a("p"),BXo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),PXo=l(),an=a("p"),$Xo=o("The model class to instantiate is selected based on the "),Dme=a("code"),IXo=o("model_type"),qXo=o(` property of the config object (either
passed as an argument or loaded from `),Gme=a("code"),NXo=o("pretrained_model_name_or_path"),jXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=a("code"),DXo=o("pretrained_model_name_or_path"),GXo=o(":"),OXo=l(),nn=a("ul"),O5=a("li"),Vme=a("strong"),VXo=o("data2vec-audio"),XXo=o(" \u2014 "),xG=a("a"),zXo=o("Data2VecAudioForAudioFrameClassification"),QXo=o(" (Data2VecAudio model)"),WXo=l(),V5=a("li"),Xme=a("strong"),HXo=o("unispeech-sat"),UXo=o(" \u2014 "),kG=a("a"),JXo=o("UniSpeechSatForAudioFrameClassification"),YXo=o(" (UniSpeechSat model)"),KXo=l(),X5=a("li"),zme=a("strong"),ZXo=o("wav2vec2"),ezo=o(" \u2014 "),SG=a("a"),ozo=o("Wav2Vec2ForAudioFrameClassification"),rzo=o(" (Wav2Vec2 model)"),tzo=l(),z5=a("li"),Qme=a("strong"),azo=o("wavlm"),nzo=o(" \u2014 "),RG=a("a"),szo=o("WavLMForAudioFrameClassification"),lzo=o(" (WavLM model)"),izo=l(),Q5=a("p"),dzo=o("The model is set in evaluation mode by default using "),Wme=a("code"),czo=o("model.eval()"),fzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=a("code"),mzo=o("model.train()"),gzo=l(),Ume=a("p"),hzo=o("Examples:"),pzo=l(),f(lA.$$.fragment),RBe=l(),Od=a("h2"),W5=a("a"),Jme=a("span"),f(iA.$$.fragment),_zo=l(),Yme=a("span"),uzo=o("AutoModelForCTC"),BBe=l(),fr=a("div"),f(dA.$$.fragment),bzo=l(),Vd=a("p"),vzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BG=a("a"),Fzo=o("from_pretrained()"),Tzo=o(" class method or the "),PG=a("a"),Mzo=o("from_config()"),Ezo=o(` class
method.`),Czo=l(),cA=a("p"),wzo=o("This class cannot be instantiated directly using "),Kme=a("code"),Azo=o("__init__()"),yzo=o(" (throws an error)."),Lzo=l(),nt=a("div"),f(fA.$$.fragment),xzo=l(),Zme=a("p"),kzo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Szo=l(),Xd=a("p"),Rzo=o(`Note:
Loading a model from its configuration file does `),ege=a("strong"),Bzo=o("not"),Pzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=a("a"),$zo=o("from_pretrained()"),Izo=o(" to load the model weights."),qzo=l(),oge=a("p"),Nzo=o("Examples:"),jzo=l(),f(mA.$$.fragment),Dzo=l(),Ke=a("div"),f(gA.$$.fragment),Gzo=l(),rge=a("p"),Ozo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Vzo=l(),sn=a("p"),Xzo=o("The model class to instantiate is selected based on the "),tge=a("code"),zzo=o("model_type"),Qzo=o(` property of the config object (either
passed as an argument or loaded from `),age=a("code"),Wzo=o("pretrained_model_name_or_path"),Hzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=a("code"),Uzo=o("pretrained_model_name_or_path"),Jzo=o(":"),Yzo=l(),Re=a("ul"),H5=a("li"),sge=a("strong"),Kzo=o("data2vec-audio"),Zzo=o(" \u2014 "),IG=a("a"),eQo=o("Data2VecAudioForCTC"),oQo=o(" (Data2VecAudio model)"),rQo=l(),U5=a("li"),lge=a("strong"),tQo=o("hubert"),aQo=o(" \u2014 "),qG=a("a"),nQo=o("HubertForCTC"),sQo=o(" (Hubert model)"),lQo=l(),J5=a("li"),ige=a("strong"),iQo=o("sew"),dQo=o(" \u2014 "),NG=a("a"),cQo=o("SEWForCTC"),fQo=o(" (SEW model)"),mQo=l(),Y5=a("li"),dge=a("strong"),gQo=o("sew-d"),hQo=o(" \u2014 "),jG=a("a"),pQo=o("SEWDForCTC"),_Qo=o(" (SEW-D model)"),uQo=l(),K5=a("li"),cge=a("strong"),bQo=o("unispeech"),vQo=o(" \u2014 "),DG=a("a"),FQo=o("UniSpeechForCTC"),TQo=o(" (UniSpeech model)"),MQo=l(),Z5=a("li"),fge=a("strong"),EQo=o("unispeech-sat"),CQo=o(" \u2014 "),GG=a("a"),wQo=o("UniSpeechSatForCTC"),AQo=o(" (UniSpeechSat model)"),yQo=l(),e3=a("li"),mge=a("strong"),LQo=o("wav2vec2"),xQo=o(" \u2014 "),OG=a("a"),kQo=o("Wav2Vec2ForCTC"),SQo=o(" (Wav2Vec2 model)"),RQo=l(),o3=a("li"),gge=a("strong"),BQo=o("wavlm"),PQo=o(" \u2014 "),VG=a("a"),$Qo=o("WavLMForCTC"),IQo=o(" (WavLM model)"),qQo=l(),r3=a("p"),NQo=o("The model is set in evaluation mode by default using "),hge=a("code"),jQo=o("model.eval()"),DQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=a("code"),GQo=o("model.train()"),OQo=l(),_ge=a("p"),VQo=o("Examples:"),XQo=l(),f(hA.$$.fragment),PBe=l(),zd=a("h2"),t3=a("a"),uge=a("span"),f(pA.$$.fragment),zQo=l(),bge=a("span"),QQo=o("AutoModelForSpeechSeq2Seq"),$Be=l(),mr=a("div"),f(_A.$$.fragment),WQo=l(),Qd=a("p"),HQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XG=a("a"),UQo=o("from_pretrained()"),JQo=o(" class method or the "),zG=a("a"),YQo=o("from_config()"),KQo=o(` class
method.`),ZQo=l(),uA=a("p"),eWo=o("This class cannot be instantiated directly using "),vge=a("code"),oWo=o("__init__()"),rWo=o(" (throws an error)."),tWo=l(),st=a("div"),f(bA.$$.fragment),aWo=l(),Fge=a("p"),nWo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),sWo=l(),Wd=a("p"),lWo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),iWo=o("not"),dWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=a("a"),cWo=o("from_pretrained()"),fWo=o(" to load the model weights."),mWo=l(),Mge=a("p"),gWo=o("Examples:"),hWo=l(),f(vA.$$.fragment),pWo=l(),Ze=a("div"),f(FA.$$.fragment),_Wo=l(),Ege=a("p"),uWo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),bWo=l(),ln=a("p"),vWo=o("The model class to instantiate is selected based on the "),Cge=a("code"),FWo=o("model_type"),TWo=o(` property of the config object (either
passed as an argument or loaded from `),wge=a("code"),MWo=o("pretrained_model_name_or_path"),EWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=a("code"),CWo=o("pretrained_model_name_or_path"),wWo=o(":"),AWo=l(),TA=a("ul"),a3=a("li"),yge=a("strong"),yWo=o("speech-encoder-decoder"),LWo=o(" \u2014 "),WG=a("a"),xWo=o("SpeechEncoderDecoderModel"),kWo=o(" (Speech Encoder decoder model)"),SWo=l(),n3=a("li"),Lge=a("strong"),RWo=o("speech_to_text"),BWo=o(" \u2014 "),HG=a("a"),PWo=o("Speech2TextForConditionalGeneration"),$Wo=o(" (Speech2Text model)"),IWo=l(),s3=a("p"),qWo=o("The model is set in evaluation mode by default using "),xge=a("code"),NWo=o("model.eval()"),jWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=a("code"),DWo=o("model.train()"),GWo=l(),Sge=a("p"),OWo=o("Examples:"),VWo=l(),f(MA.$$.fragment),IBe=l(),Hd=a("h2"),l3=a("a"),Rge=a("span"),f(EA.$$.fragment),XWo=l(),Bge=a("span"),zWo=o("AutoModelForAudioXVector"),qBe=l(),gr=a("div"),f(CA.$$.fragment),QWo=l(),Ud=a("p"),WWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UG=a("a"),HWo=o("from_pretrained()"),UWo=o(" class method or the "),JG=a("a"),JWo=o("from_config()"),YWo=o(` class
method.`),KWo=l(),wA=a("p"),ZWo=o("This class cannot be instantiated directly using "),Pge=a("code"),eHo=o("__init__()"),oHo=o(" (throws an error)."),rHo=l(),lt=a("div"),f(AA.$$.fragment),tHo=l(),$ge=a("p"),aHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),nHo=l(),Jd=a("p"),sHo=o(`Note:
Loading a model from its configuration file does `),Ige=a("strong"),lHo=o("not"),iHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=a("a"),dHo=o("from_pretrained()"),cHo=o(" to load the model weights."),fHo=l(),qge=a("p"),mHo=o("Examples:"),gHo=l(),f(yA.$$.fragment),hHo=l(),eo=a("div"),f(LA.$$.fragment),pHo=l(),Nge=a("p"),_Ho=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),uHo=l(),dn=a("p"),bHo=o("The model class to instantiate is selected based on the "),jge=a("code"),vHo=o("model_type"),FHo=o(` property of the config object (either
passed as an argument or loaded from `),Dge=a("code"),THo=o("pretrained_model_name_or_path"),MHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=a("code"),EHo=o("pretrained_model_name_or_path"),CHo=o(":"),wHo=l(),cn=a("ul"),i3=a("li"),Oge=a("strong"),AHo=o("data2vec-audio"),yHo=o(" \u2014 "),KG=a("a"),LHo=o("Data2VecAudioForXVector"),xHo=o(" (Data2VecAudio model)"),kHo=l(),d3=a("li"),Vge=a("strong"),SHo=o("unispeech-sat"),RHo=o(" \u2014 "),ZG=a("a"),BHo=o("UniSpeechSatForXVector"),PHo=o(" (UniSpeechSat model)"),$Ho=l(),c3=a("li"),Xge=a("strong"),IHo=o("wav2vec2"),qHo=o(" \u2014 "),eO=a("a"),NHo=o("Wav2Vec2ForXVector"),jHo=o(" (Wav2Vec2 model)"),DHo=l(),f3=a("li"),zge=a("strong"),GHo=o("wavlm"),OHo=o(" \u2014 "),oO=a("a"),VHo=o("WavLMForXVector"),XHo=o(" (WavLM model)"),zHo=l(),m3=a("p"),QHo=o("The model is set in evaluation mode by default using "),Qge=a("code"),WHo=o("model.eval()"),HHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=a("code"),UHo=o("model.train()"),JHo=l(),Hge=a("p"),YHo=o("Examples:"),KHo=l(),f(xA.$$.fragment),NBe=l(),Yd=a("h2"),g3=a("a"),Uge=a("span"),f(kA.$$.fragment),ZHo=l(),Jge=a("span"),eUo=o("AutoModelForMaskedImageModeling"),jBe=l(),hr=a("div"),f(SA.$$.fragment),oUo=l(),Kd=a("p"),rUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rO=a("a"),tUo=o("from_pretrained()"),aUo=o(" class method or the "),tO=a("a"),nUo=o("from_config()"),sUo=o(` class
method.`),lUo=l(),RA=a("p"),iUo=o("This class cannot be instantiated directly using "),Yge=a("code"),dUo=o("__init__()"),cUo=o(" (throws an error)."),fUo=l(),it=a("div"),f(BA.$$.fragment),mUo=l(),Kge=a("p"),gUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),hUo=l(),Zd=a("p"),pUo=o(`Note:
Loading a model from its configuration file does `),Zge=a("strong"),_Uo=o("not"),uUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=a("a"),bUo=o("from_pretrained()"),vUo=o(" to load the model weights."),FUo=l(),ehe=a("p"),TUo=o("Examples:"),MUo=l(),f(PA.$$.fragment),EUo=l(),oo=a("div"),f($A.$$.fragment),CUo=l(),ohe=a("p"),wUo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),AUo=l(),fn=a("p"),yUo=o("The model class to instantiate is selected based on the "),rhe=a("code"),LUo=o("model_type"),xUo=o(` property of the config object (either
passed as an argument or loaded from `),the=a("code"),kUo=o("pretrained_model_name_or_path"),SUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=a("code"),RUo=o("pretrained_model_name_or_path"),BUo=o(":"),PUo=l(),ec=a("ul"),h3=a("li"),nhe=a("strong"),$Uo=o("deit"),IUo=o(" \u2014 "),nO=a("a"),qUo=o("DeiTForMaskedImageModeling"),NUo=o(" (DeiT model)"),jUo=l(),p3=a("li"),she=a("strong"),DUo=o("swin"),GUo=o(" \u2014 "),sO=a("a"),OUo=o("SwinForMaskedImageModeling"),VUo=o(" (Swin model)"),XUo=l(),_3=a("li"),lhe=a("strong"),zUo=o("vit"),QUo=o(" \u2014 "),lO=a("a"),WUo=o("ViTForMaskedImageModeling"),HUo=o(" (ViT model)"),UUo=l(),u3=a("p"),JUo=o("The model is set in evaluation mode by default using "),ihe=a("code"),YUo=o("model.eval()"),KUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=a("code"),ZUo=o("model.train()"),eJo=l(),che=a("p"),oJo=o("Examples:"),rJo=l(),f(IA.$$.fragment),DBe=l(),oc=a("h2"),b3=a("a"),fhe=a("span"),f(qA.$$.fragment),tJo=l(),mhe=a("span"),aJo=o("AutoModelForObjectDetection"),GBe=l(),pr=a("div"),f(NA.$$.fragment),nJo=l(),rc=a("p"),sJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iO=a("a"),lJo=o("from_pretrained()"),iJo=o(" class method or the "),dO=a("a"),dJo=o("from_config()"),cJo=o(` class
method.`),fJo=l(),jA=a("p"),mJo=o("This class cannot be instantiated directly using "),ghe=a("code"),gJo=o("__init__()"),hJo=o(" (throws an error)."),pJo=l(),dt=a("div"),f(DA.$$.fragment),_Jo=l(),hhe=a("p"),uJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),bJo=l(),tc=a("p"),vJo=o(`Note:
Loading a model from its configuration file does `),phe=a("strong"),FJo=o("not"),TJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=a("a"),MJo=o("from_pretrained()"),EJo=o(" to load the model weights."),CJo=l(),_he=a("p"),wJo=o("Examples:"),AJo=l(),f(GA.$$.fragment),yJo=l(),ro=a("div"),f(OA.$$.fragment),LJo=l(),uhe=a("p"),xJo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),kJo=l(),mn=a("p"),SJo=o("The model class to instantiate is selected based on the "),bhe=a("code"),RJo=o("model_type"),BJo=o(` property of the config object (either
passed as an argument or loaded from `),vhe=a("code"),PJo=o("pretrained_model_name_or_path"),$Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=a("code"),IJo=o("pretrained_model_name_or_path"),qJo=o(":"),NJo=l(),The=a("ul"),v3=a("li"),Mhe=a("strong"),jJo=o("detr"),DJo=o(" \u2014 "),fO=a("a"),GJo=o("DetrForObjectDetection"),OJo=o(" (DETR model)"),VJo=l(),F3=a("p"),XJo=o("The model is set in evaluation mode by default using "),Ehe=a("code"),zJo=o("model.eval()"),QJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=a("code"),WJo=o("model.train()"),HJo=l(),whe=a("p"),UJo=o("Examples:"),JJo=l(),f(VA.$$.fragment),OBe=l(),ac=a("h2"),T3=a("a"),Ahe=a("span"),f(XA.$$.fragment),YJo=l(),yhe=a("span"),KJo=o("AutoModelForImageSegmentation"),VBe=l(),_r=a("div"),f(zA.$$.fragment),ZJo=l(),nc=a("p"),eYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mO=a("a"),oYo=o("from_pretrained()"),rYo=o(" class method or the "),gO=a("a"),tYo=o("from_config()"),aYo=o(` class
method.`),nYo=l(),QA=a("p"),sYo=o("This class cannot be instantiated directly using "),Lhe=a("code"),lYo=o("__init__()"),iYo=o(" (throws an error)."),dYo=l(),ct=a("div"),f(WA.$$.fragment),cYo=l(),xhe=a("p"),fYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),mYo=l(),sc=a("p"),gYo=o(`Note:
Loading a model from its configuration file does `),khe=a("strong"),hYo=o("not"),pYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=a("a"),_Yo=o("from_pretrained()"),uYo=o(" to load the model weights."),bYo=l(),She=a("p"),vYo=o("Examples:"),FYo=l(),f(HA.$$.fragment),TYo=l(),to=a("div"),f(UA.$$.fragment),MYo=l(),Rhe=a("p"),EYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),CYo=l(),gn=a("p"),wYo=o("The model class to instantiate is selected based on the "),Bhe=a("code"),AYo=o("model_type"),yYo=o(` property of the config object (either
passed as an argument or loaded from `),Phe=a("code"),LYo=o("pretrained_model_name_or_path"),xYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=a("code"),kYo=o("pretrained_model_name_or_path"),SYo=o(":"),RYo=l(),Ihe=a("ul"),M3=a("li"),qhe=a("strong"),BYo=o("detr"),PYo=o(" \u2014 "),pO=a("a"),$Yo=o("DetrForSegmentation"),IYo=o(" (DETR model)"),qYo=l(),E3=a("p"),NYo=o("The model is set in evaluation mode by default using "),Nhe=a("code"),jYo=o("model.eval()"),DYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),GYo=o("model.train()"),OYo=l(),Dhe=a("p"),VYo=o("Examples:"),XYo=l(),f(JA.$$.fragment),XBe=l(),lc=a("h2"),C3=a("a"),Ghe=a("span"),f(YA.$$.fragment),zYo=l(),Ohe=a("span"),QYo=o("AutoModelForSemanticSegmentation"),zBe=l(),ur=a("div"),f(KA.$$.fragment),WYo=l(),ic=a("p"),HYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_O=a("a"),UYo=o("from_pretrained()"),JYo=o(" class method or the "),uO=a("a"),YYo=o("from_config()"),KYo=o(` class
method.`),ZYo=l(),ZA=a("p"),eKo=o("This class cannot be instantiated directly using "),Vhe=a("code"),oKo=o("__init__()"),rKo=o(" (throws an error)."),tKo=l(),ft=a("div"),f(e0.$$.fragment),aKo=l(),Xhe=a("p"),nKo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),sKo=l(),dc=a("p"),lKo=o(`Note:
Loading a model from its configuration file does `),zhe=a("strong"),iKo=o("not"),dKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=a("a"),cKo=o("from_pretrained()"),fKo=o(" to load the model weights."),mKo=l(),Qhe=a("p"),gKo=o("Examples:"),hKo=l(),f(o0.$$.fragment),pKo=l(),ao=a("div"),f(r0.$$.fragment),_Ko=l(),Whe=a("p"),uKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),bKo=l(),hn=a("p"),vKo=o("The model class to instantiate is selected based on the "),Hhe=a("code"),FKo=o("model_type"),TKo=o(` property of the config object (either
passed as an argument or loaded from `),Uhe=a("code"),MKo=o("pretrained_model_name_or_path"),EKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=a("code"),CKo=o("pretrained_model_name_or_path"),wKo=o(":"),AKo=l(),pn=a("ul"),w3=a("li"),Yhe=a("strong"),yKo=o("beit"),LKo=o(" \u2014 "),vO=a("a"),xKo=o("BeitForSemanticSegmentation"),kKo=o(" (BEiT model)"),SKo=l(),A3=a("li"),Khe=a("strong"),RKo=o("data2vec-vision"),BKo=o(" \u2014 "),FO=a("a"),PKo=o("Data2VecVisionForSemanticSegmentation"),$Ko=o(" (Data2VecVision model)"),IKo=l(),y3=a("li"),Zhe=a("strong"),qKo=o("dpt"),NKo=o(" \u2014 "),TO=a("a"),jKo=o("DPTForSemanticSegmentation"),DKo=o(" (DPT model)"),GKo=l(),L3=a("li"),epe=a("strong"),OKo=o("segformer"),VKo=o(" \u2014 "),MO=a("a"),XKo=o("SegformerForSemanticSegmentation"),zKo=o(" (SegFormer model)"),QKo=l(),x3=a("p"),WKo=o("The model is set in evaluation mode by default using "),ope=a("code"),HKo=o("model.eval()"),UKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=a("code"),JKo=o("model.train()"),YKo=l(),tpe=a("p"),KKo=o("Examples:"),ZKo=l(),f(t0.$$.fragment),QBe=l(),cc=a("h2"),k3=a("a"),ape=a("span"),f(a0.$$.fragment),eZo=l(),npe=a("span"),oZo=o("AutoModelForInstanceSegmentation"),WBe=l(),br=a("div"),f(n0.$$.fragment),rZo=l(),fc=a("p"),tZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EO=a("a"),aZo=o("from_pretrained()"),nZo=o(" class method or the "),CO=a("a"),sZo=o("from_config()"),lZo=o(` class
method.`),iZo=l(),s0=a("p"),dZo=o("This class cannot be instantiated directly using "),spe=a("code"),cZo=o("__init__()"),fZo=o(" (throws an error)."),mZo=l(),mt=a("div"),f(l0.$$.fragment),gZo=l(),lpe=a("p"),hZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),pZo=l(),mc=a("p"),_Zo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),uZo=o("not"),bZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=a("a"),vZo=o("from_pretrained()"),FZo=o(" to load the model weights."),TZo=l(),dpe=a("p"),MZo=o("Examples:"),EZo=l(),f(i0.$$.fragment),CZo=l(),no=a("div"),f(d0.$$.fragment),wZo=l(),cpe=a("p"),AZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),yZo=l(),_n=a("p"),LZo=o("The model class to instantiate is selected based on the "),fpe=a("code"),xZo=o("model_type"),kZo=o(` property of the config object (either
passed as an argument or loaded from `),mpe=a("code"),SZo=o("pretrained_model_name_or_path"),RZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=a("code"),BZo=o("pretrained_model_name_or_path"),PZo=o(":"),$Zo=l(),hpe=a("ul"),S3=a("li"),ppe=a("strong"),IZo=o("maskformer"),qZo=o(" \u2014 "),AO=a("a"),NZo=o("MaskFormerForInstanceSegmentation"),jZo=o(" (MaskFormer model)"),DZo=l(),R3=a("p"),GZo=o("The model is set in evaluation mode by default using "),_pe=a("code"),OZo=o("model.eval()"),VZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),XZo=o("model.train()"),zZo=l(),bpe=a("p"),QZo=o("Examples:"),WZo=l(),f(c0.$$.fragment),HBe=l(),gc=a("h2"),B3=a("a"),vpe=a("span"),f(f0.$$.fragment),HZo=l(),Fpe=a("span"),UZo=o("TFAutoModel"),UBe=l(),vr=a("div"),f(m0.$$.fragment),JZo=l(),hc=a("p"),YZo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yO=a("a"),KZo=o("from_pretrained()"),ZZo=o(" class method or the "),LO=a("a"),eer=o("from_config()"),oer=o(` class
method.`),rer=l(),g0=a("p"),ter=o("This class cannot be instantiated directly using "),Tpe=a("code"),aer=o("__init__()"),ner=o(" (throws an error)."),ser=l(),gt=a("div"),f(h0.$$.fragment),ler=l(),Mpe=a("p"),ier=o("Instantiates one of the base model classes of the library from a configuration."),der=l(),pc=a("p"),cer=o(`Note:
Loading a model from its configuration file does `),Epe=a("strong"),fer=o("not"),mer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=a("a"),ger=o("from_pretrained()"),her=o(" to load the model weights."),per=l(),Cpe=a("p"),_er=o("Examples:"),uer=l(),f(p0.$$.fragment),ber=l(),ho=a("div"),f(_0.$$.fragment),ver=l(),wpe=a("p"),Fer=o("Instantiate one of the base model classes of the library from a pretrained model."),Ter=l(),un=a("p"),Mer=o("The model class to instantiate is selected based on the "),Ape=a("code"),Eer=o("model_type"),Cer=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),wer=o("pretrained_model_name_or_path"),Aer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),yer=o("pretrained_model_name_or_path"),Ler=o(":"),xer=l(),x=a("ul"),P3=a("li"),xpe=a("strong"),ker=o("albert"),Ser=o(" \u2014 "),kO=a("a"),Rer=o("TFAlbertModel"),Ber=o(" (ALBERT model)"),Per=l(),$3=a("li"),kpe=a("strong"),$er=o("bart"),Ier=o(" \u2014 "),SO=a("a"),qer=o("TFBartModel"),Ner=o(" (BART model)"),jer=l(),I3=a("li"),Spe=a("strong"),Der=o("bert"),Ger=o(" \u2014 "),RO=a("a"),Oer=o("TFBertModel"),Ver=o(" (BERT model)"),Xer=l(),q3=a("li"),Rpe=a("strong"),zer=o("blenderbot"),Qer=o(" \u2014 "),BO=a("a"),Wer=o("TFBlenderbotModel"),Her=o(" (Blenderbot model)"),Uer=l(),N3=a("li"),Bpe=a("strong"),Jer=o("blenderbot-small"),Yer=o(" \u2014 "),PO=a("a"),Ker=o("TFBlenderbotSmallModel"),Zer=o(" (BlenderbotSmall model)"),eor=l(),j3=a("li"),Ppe=a("strong"),oor=o("camembert"),ror=o(" \u2014 "),$O=a("a"),tor=o("TFCamembertModel"),aor=o(" (CamemBERT model)"),nor=l(),D3=a("li"),$pe=a("strong"),sor=o("clip"),lor=o(" \u2014 "),IO=a("a"),ior=o("TFCLIPModel"),dor=o(" (CLIP model)"),cor=l(),G3=a("li"),Ipe=a("strong"),mor=o("convbert"),gor=o(" \u2014 "),qO=a("a"),hor=o("TFConvBertModel"),por=o(" (ConvBERT model)"),_or=l(),O3=a("li"),qpe=a("strong"),uor=o("convnext"),bor=o(" \u2014 "),NO=a("a"),vor=o("TFConvNextModel"),For=o(" (ConvNext model)"),Tor=l(),V3=a("li"),Npe=a("strong"),Mor=o("ctrl"),Eor=o(" \u2014 "),jO=a("a"),Cor=o("TFCTRLModel"),wor=o(" (CTRL model)"),Aor=l(),X3=a("li"),jpe=a("strong"),yor=o("deberta"),Lor=o(" \u2014 "),DO=a("a"),xor=o("TFDebertaModel"),kor=o(" (DeBERTa model)"),Sor=l(),z3=a("li"),Dpe=a("strong"),Ror=o("deberta-v2"),Bor=o(" \u2014 "),GO=a("a"),Por=o("TFDebertaV2Model"),$or=o(" (DeBERTa-v2 model)"),Ior=l(),Q3=a("li"),Gpe=a("strong"),qor=o("distilbert"),Nor=o(" \u2014 "),OO=a("a"),jor=o("TFDistilBertModel"),Dor=o(" (DistilBERT model)"),Gor=l(),W3=a("li"),Ope=a("strong"),Oor=o("dpr"),Vor=o(" \u2014 "),VO=a("a"),Xor=o("TFDPRQuestionEncoder"),zor=o(" (DPR model)"),Qor=l(),H3=a("li"),Vpe=a("strong"),Wor=o("electra"),Hor=o(" \u2014 "),XO=a("a"),Uor=o("TFElectraModel"),Jor=o(" (ELECTRA model)"),Yor=l(),U3=a("li"),Xpe=a("strong"),Kor=o("flaubert"),Zor=o(" \u2014 "),zO=a("a"),err=o("TFFlaubertModel"),orr=o(" (FlauBERT model)"),rrr=l(),Os=a("li"),zpe=a("strong"),trr=o("funnel"),arr=o(" \u2014 "),QO=a("a"),nrr=o("TFFunnelModel"),srr=o(" or "),WO=a("a"),lrr=o("TFFunnelBaseModel"),irr=o(" (Funnel Transformer model)"),drr=l(),J3=a("li"),Qpe=a("strong"),crr=o("gpt2"),frr=o(" \u2014 "),HO=a("a"),mrr=o("TFGPT2Model"),grr=o(" (OpenAI GPT-2 model)"),hrr=l(),Y3=a("li"),Wpe=a("strong"),prr=o("gptj"),_rr=o(" \u2014 "),UO=a("a"),urr=o("TFGPTJModel"),brr=o(" (GPT-J model)"),vrr=l(),K3=a("li"),Hpe=a("strong"),Frr=o("hubert"),Trr=o(" \u2014 "),JO=a("a"),Mrr=o("TFHubertModel"),Err=o(" (Hubert model)"),Crr=l(),Z3=a("li"),Upe=a("strong"),wrr=o("layoutlm"),Arr=o(" \u2014 "),YO=a("a"),yrr=o("TFLayoutLMModel"),Lrr=o(" (LayoutLM model)"),xrr=l(),ev=a("li"),Jpe=a("strong"),krr=o("led"),Srr=o(" \u2014 "),KO=a("a"),Rrr=o("TFLEDModel"),Brr=o(" (LED model)"),Prr=l(),ov=a("li"),Ype=a("strong"),$rr=o("longformer"),Irr=o(" \u2014 "),ZO=a("a"),qrr=o("TFLongformerModel"),Nrr=o(" (Longformer model)"),jrr=l(),rv=a("li"),Kpe=a("strong"),Drr=o("lxmert"),Grr=o(" \u2014 "),eV=a("a"),Orr=o("TFLxmertModel"),Vrr=o(" (LXMERT model)"),Xrr=l(),tv=a("li"),Zpe=a("strong"),zrr=o("marian"),Qrr=o(" \u2014 "),oV=a("a"),Wrr=o("TFMarianModel"),Hrr=o(" (Marian model)"),Urr=l(),av=a("li"),e_e=a("strong"),Jrr=o("mbart"),Yrr=o(" \u2014 "),rV=a("a"),Krr=o("TFMBartModel"),Zrr=o(" (mBART model)"),etr=l(),nv=a("li"),o_e=a("strong"),otr=o("mobilebert"),rtr=o(" \u2014 "),tV=a("a"),ttr=o("TFMobileBertModel"),atr=o(" (MobileBERT model)"),ntr=l(),sv=a("li"),r_e=a("strong"),str=o("mpnet"),ltr=o(" \u2014 "),aV=a("a"),itr=o("TFMPNetModel"),dtr=o(" (MPNet model)"),ctr=l(),lv=a("li"),t_e=a("strong"),ftr=o("mt5"),mtr=o(" \u2014 "),nV=a("a"),gtr=o("TFMT5Model"),htr=o(" (mT5 model)"),ptr=l(),iv=a("li"),a_e=a("strong"),_tr=o("openai-gpt"),utr=o(" \u2014 "),sV=a("a"),btr=o("TFOpenAIGPTModel"),vtr=o(" (OpenAI GPT model)"),Ftr=l(),dv=a("li"),n_e=a("strong"),Ttr=o("pegasus"),Mtr=o(" \u2014 "),lV=a("a"),Etr=o("TFPegasusModel"),Ctr=o(" (Pegasus model)"),wtr=l(),cv=a("li"),s_e=a("strong"),Atr=o("rembert"),ytr=o(" \u2014 "),iV=a("a"),Ltr=o("TFRemBertModel"),xtr=o(" (RemBERT model)"),ktr=l(),fv=a("li"),l_e=a("strong"),Str=o("roberta"),Rtr=o(" \u2014 "),dV=a("a"),Btr=o("TFRobertaModel"),Ptr=o(" (RoBERTa model)"),$tr=l(),mv=a("li"),i_e=a("strong"),Itr=o("roformer"),qtr=o(" \u2014 "),cV=a("a"),Ntr=o("TFRoFormerModel"),jtr=o(" (RoFormer model)"),Dtr=l(),gv=a("li"),d_e=a("strong"),Gtr=o("speech_to_text"),Otr=o(" \u2014 "),fV=a("a"),Vtr=o("TFSpeech2TextModel"),Xtr=o(" (Speech2Text model)"),ztr=l(),hv=a("li"),c_e=a("strong"),Qtr=o("t5"),Wtr=o(" \u2014 "),mV=a("a"),Htr=o("TFT5Model"),Utr=o(" (T5 model)"),Jtr=l(),pv=a("li"),f_e=a("strong"),Ytr=o("tapas"),Ktr=o(" \u2014 "),gV=a("a"),Ztr=o("TFTapasModel"),ear=o(" (TAPAS model)"),oar=l(),_v=a("li"),m_e=a("strong"),rar=o("transfo-xl"),tar=o(" \u2014 "),hV=a("a"),aar=o("TFTransfoXLModel"),nar=o(" (Transformer-XL model)"),sar=l(),uv=a("li"),g_e=a("strong"),lar=o("vit"),iar=o(" \u2014 "),pV=a("a"),dar=o("TFViTModel"),car=o(" (ViT model)"),far=l(),bv=a("li"),h_e=a("strong"),mar=o("vit_mae"),gar=o(" \u2014 "),_V=a("a"),har=o("TFViTMAEModel"),par=o(" (ViTMAE model)"),_ar=l(),vv=a("li"),p_e=a("strong"),uar=o("wav2vec2"),bar=o(" \u2014 "),uV=a("a"),Far=o("TFWav2Vec2Model"),Tar=o(" (Wav2Vec2 model)"),Mar=l(),Fv=a("li"),__e=a("strong"),Ear=o("xlm"),Car=o(" \u2014 "),bV=a("a"),war=o("TFXLMModel"),Aar=o(" (XLM model)"),yar=l(),Tv=a("li"),u_e=a("strong"),Lar=o("xlm-roberta"),xar=o(" \u2014 "),vV=a("a"),kar=o("TFXLMRobertaModel"),Sar=o(" (XLM-RoBERTa model)"),Rar=l(),Mv=a("li"),b_e=a("strong"),Bar=o("xlnet"),Par=o(" \u2014 "),FV=a("a"),$ar=o("TFXLNetModel"),Iar=o(" (XLNet model)"),qar=l(),v_e=a("p"),Nar=o("Examples:"),jar=l(),f(u0.$$.fragment),JBe=l(),_c=a("h2"),Ev=a("a"),F_e=a("span"),f(b0.$$.fragment),Dar=l(),T_e=a("span"),Gar=o("TFAutoModelForPreTraining"),YBe=l(),Fr=a("div"),f(v0.$$.fragment),Oar=l(),uc=a("p"),Var=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TV=a("a"),Xar=o("from_pretrained()"),zar=o(" class method or the "),MV=a("a"),Qar=o("from_config()"),War=o(` class
method.`),Har=l(),F0=a("p"),Uar=o("This class cannot be instantiated directly using "),M_e=a("code"),Jar=o("__init__()"),Yar=o(" (throws an error)."),Kar=l(),ht=a("div"),f(T0.$$.fragment),Zar=l(),E_e=a("p"),enr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),onr=l(),bc=a("p"),rnr=o(`Note:
Loading a model from its configuration file does `),C_e=a("strong"),tnr=o("not"),anr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=a("a"),nnr=o("from_pretrained()"),snr=o(" to load the model weights."),lnr=l(),w_e=a("p"),inr=o("Examples:"),dnr=l(),f(M0.$$.fragment),cnr=l(),po=a("div"),f(E0.$$.fragment),fnr=l(),A_e=a("p"),mnr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gnr=l(),bn=a("p"),hnr=o("The model class to instantiate is selected based on the "),y_e=a("code"),pnr=o("model_type"),_nr=o(` property of the config object (either
passed as an argument or loaded from `),L_e=a("code"),unr=o("pretrained_model_name_or_path"),bnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=a("code"),vnr=o("pretrained_model_name_or_path"),Fnr=o(":"),Tnr=l(),H=a("ul"),Cv=a("li"),k_e=a("strong"),Mnr=o("albert"),Enr=o(" \u2014 "),CV=a("a"),Cnr=o("TFAlbertForPreTraining"),wnr=o(" (ALBERT model)"),Anr=l(),wv=a("li"),S_e=a("strong"),ynr=o("bart"),Lnr=o(" \u2014 "),wV=a("a"),xnr=o("TFBartForConditionalGeneration"),knr=o(" (BART model)"),Snr=l(),Av=a("li"),R_e=a("strong"),Rnr=o("bert"),Bnr=o(" \u2014 "),AV=a("a"),Pnr=o("TFBertForPreTraining"),$nr=o(" (BERT model)"),Inr=l(),yv=a("li"),B_e=a("strong"),qnr=o("camembert"),Nnr=o(" \u2014 "),yV=a("a"),jnr=o("TFCamembertForMaskedLM"),Dnr=o(" (CamemBERT model)"),Gnr=l(),Lv=a("li"),P_e=a("strong"),Onr=o("ctrl"),Vnr=o(" \u2014 "),LV=a("a"),Xnr=o("TFCTRLLMHeadModel"),znr=o(" (CTRL model)"),Qnr=l(),xv=a("li"),$_e=a("strong"),Wnr=o("distilbert"),Hnr=o(" \u2014 "),xV=a("a"),Unr=o("TFDistilBertForMaskedLM"),Jnr=o(" (DistilBERT model)"),Ynr=l(),kv=a("li"),I_e=a("strong"),Knr=o("electra"),Znr=o(" \u2014 "),kV=a("a"),esr=o("TFElectraForPreTraining"),osr=o(" (ELECTRA model)"),rsr=l(),Sv=a("li"),q_e=a("strong"),tsr=o("flaubert"),asr=o(" \u2014 "),SV=a("a"),nsr=o("TFFlaubertWithLMHeadModel"),ssr=o(" (FlauBERT model)"),lsr=l(),Rv=a("li"),N_e=a("strong"),isr=o("funnel"),dsr=o(" \u2014 "),RV=a("a"),csr=o("TFFunnelForPreTraining"),fsr=o(" (Funnel Transformer model)"),msr=l(),Bv=a("li"),j_e=a("strong"),gsr=o("gpt2"),hsr=o(" \u2014 "),BV=a("a"),psr=o("TFGPT2LMHeadModel"),_sr=o(" (OpenAI GPT-2 model)"),usr=l(),Pv=a("li"),D_e=a("strong"),bsr=o("layoutlm"),vsr=o(" \u2014 "),PV=a("a"),Fsr=o("TFLayoutLMForMaskedLM"),Tsr=o(" (LayoutLM model)"),Msr=l(),$v=a("li"),G_e=a("strong"),Esr=o("lxmert"),Csr=o(" \u2014 "),$V=a("a"),wsr=o("TFLxmertForPreTraining"),Asr=o(" (LXMERT model)"),ysr=l(),Iv=a("li"),O_e=a("strong"),Lsr=o("mobilebert"),xsr=o(" \u2014 "),IV=a("a"),ksr=o("TFMobileBertForPreTraining"),Ssr=o(" (MobileBERT model)"),Rsr=l(),qv=a("li"),V_e=a("strong"),Bsr=o("mpnet"),Psr=o(" \u2014 "),qV=a("a"),$sr=o("TFMPNetForMaskedLM"),Isr=o(" (MPNet model)"),qsr=l(),Nv=a("li"),X_e=a("strong"),Nsr=o("openai-gpt"),jsr=o(" \u2014 "),NV=a("a"),Dsr=o("TFOpenAIGPTLMHeadModel"),Gsr=o(" (OpenAI GPT model)"),Osr=l(),jv=a("li"),z_e=a("strong"),Vsr=o("roberta"),Xsr=o(" \u2014 "),jV=a("a"),zsr=o("TFRobertaForMaskedLM"),Qsr=o(" (RoBERTa model)"),Wsr=l(),Dv=a("li"),Q_e=a("strong"),Hsr=o("t5"),Usr=o(" \u2014 "),DV=a("a"),Jsr=o("TFT5ForConditionalGeneration"),Ysr=o(" (T5 model)"),Ksr=l(),Gv=a("li"),W_e=a("strong"),Zsr=o("tapas"),elr=o(" \u2014 "),GV=a("a"),olr=o("TFTapasForMaskedLM"),rlr=o(" (TAPAS model)"),tlr=l(),Ov=a("li"),H_e=a("strong"),alr=o("transfo-xl"),nlr=o(" \u2014 "),OV=a("a"),slr=o("TFTransfoXLLMHeadModel"),llr=o(" (Transformer-XL model)"),ilr=l(),Vv=a("li"),U_e=a("strong"),dlr=o("vit_mae"),clr=o(" \u2014 "),VV=a("a"),flr=o("TFViTMAEForPreTraining"),mlr=o(" (ViTMAE model)"),glr=l(),Xv=a("li"),J_e=a("strong"),hlr=o("xlm"),plr=o(" \u2014 "),XV=a("a"),_lr=o("TFXLMWithLMHeadModel"),ulr=o(" (XLM model)"),blr=l(),zv=a("li"),Y_e=a("strong"),vlr=o("xlm-roberta"),Flr=o(" \u2014 "),zV=a("a"),Tlr=o("TFXLMRobertaForMaskedLM"),Mlr=o(" (XLM-RoBERTa model)"),Elr=l(),Qv=a("li"),K_e=a("strong"),Clr=o("xlnet"),wlr=o(" \u2014 "),QV=a("a"),Alr=o("TFXLNetLMHeadModel"),ylr=o(" (XLNet model)"),Llr=l(),Z_e=a("p"),xlr=o("Examples:"),klr=l(),f(C0.$$.fragment),KBe=l(),vc=a("h2"),Wv=a("a"),eue=a("span"),f(w0.$$.fragment),Slr=l(),oue=a("span"),Rlr=o("TFAutoModelForCausalLM"),ZBe=l(),Tr=a("div"),f(A0.$$.fragment),Blr=l(),Fc=a("p"),Plr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WV=a("a"),$lr=o("from_pretrained()"),Ilr=o(" class method or the "),HV=a("a"),qlr=o("from_config()"),Nlr=o(` class
method.`),jlr=l(),y0=a("p"),Dlr=o("This class cannot be instantiated directly using "),rue=a("code"),Glr=o("__init__()"),Olr=o(" (throws an error)."),Vlr=l(),pt=a("div"),f(L0.$$.fragment),Xlr=l(),tue=a("p"),zlr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qlr=l(),Tc=a("p"),Wlr=o(`Note:
Loading a model from its configuration file does `),aue=a("strong"),Hlr=o("not"),Ulr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=a("a"),Jlr=o("from_pretrained()"),Ylr=o(" to load the model weights."),Klr=l(),nue=a("p"),Zlr=o("Examples:"),eir=l(),f(x0.$$.fragment),oir=l(),_o=a("div"),f(k0.$$.fragment),rir=l(),sue=a("p"),tir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),air=l(),vn=a("p"),nir=o("The model class to instantiate is selected based on the "),lue=a("code"),sir=o("model_type"),lir=o(` property of the config object (either
passed as an argument or loaded from `),iue=a("code"),iir=o("pretrained_model_name_or_path"),dir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=a("code"),cir=o("pretrained_model_name_or_path"),fir=o(":"),mir=l(),fe=a("ul"),Hv=a("li"),cue=a("strong"),gir=o("bert"),hir=o(" \u2014 "),JV=a("a"),pir=o("TFBertLMHeadModel"),_ir=o(" (BERT model)"),uir=l(),Uv=a("li"),fue=a("strong"),bir=o("camembert"),vir=o(" \u2014 "),YV=a("a"),Fir=o("TFCamembertForCausalLM"),Tir=o(" (CamemBERT model)"),Mir=l(),Jv=a("li"),mue=a("strong"),Eir=o("ctrl"),Cir=o(" \u2014 "),KV=a("a"),wir=o("TFCTRLLMHeadModel"),Air=o(" (CTRL model)"),yir=l(),Yv=a("li"),gue=a("strong"),Lir=o("gpt2"),xir=o(" \u2014 "),ZV=a("a"),kir=o("TFGPT2LMHeadModel"),Sir=o(" (OpenAI GPT-2 model)"),Rir=l(),Kv=a("li"),hue=a("strong"),Bir=o("gptj"),Pir=o(" \u2014 "),eX=a("a"),$ir=o("TFGPTJForCausalLM"),Iir=o(" (GPT-J model)"),qir=l(),Zv=a("li"),pue=a("strong"),Nir=o("openai-gpt"),jir=o(" \u2014 "),oX=a("a"),Dir=o("TFOpenAIGPTLMHeadModel"),Gir=o(" (OpenAI GPT model)"),Oir=l(),eF=a("li"),_ue=a("strong"),Vir=o("rembert"),Xir=o(" \u2014 "),rX=a("a"),zir=o("TFRemBertForCausalLM"),Qir=o(" (RemBERT model)"),Wir=l(),oF=a("li"),uue=a("strong"),Hir=o("roberta"),Uir=o(" \u2014 "),tX=a("a"),Jir=o("TFRobertaForCausalLM"),Yir=o(" (RoBERTa model)"),Kir=l(),rF=a("li"),bue=a("strong"),Zir=o("roformer"),edr=o(" \u2014 "),aX=a("a"),odr=o("TFRoFormerForCausalLM"),rdr=o(" (RoFormer model)"),tdr=l(),tF=a("li"),vue=a("strong"),adr=o("transfo-xl"),ndr=o(" \u2014 "),nX=a("a"),sdr=o("TFTransfoXLLMHeadModel"),ldr=o(" (Transformer-XL model)"),idr=l(),aF=a("li"),Fue=a("strong"),ddr=o("xlm"),cdr=o(" \u2014 "),sX=a("a"),fdr=o("TFXLMWithLMHeadModel"),mdr=o(" (XLM model)"),gdr=l(),nF=a("li"),Tue=a("strong"),hdr=o("xlnet"),pdr=o(" \u2014 "),lX=a("a"),_dr=o("TFXLNetLMHeadModel"),udr=o(" (XLNet model)"),bdr=l(),Mue=a("p"),vdr=o("Examples:"),Fdr=l(),f(S0.$$.fragment),ePe=l(),Mc=a("h2"),sF=a("a"),Eue=a("span"),f(R0.$$.fragment),Tdr=l(),Cue=a("span"),Mdr=o("TFAutoModelForImageClassification"),oPe=l(),Mr=a("div"),f(B0.$$.fragment),Edr=l(),Ec=a("p"),Cdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=a("a"),wdr=o("from_pretrained()"),Adr=o(" class method or the "),dX=a("a"),ydr=o("from_config()"),Ldr=o(` class
method.`),xdr=l(),P0=a("p"),kdr=o("This class cannot be instantiated directly using "),wue=a("code"),Sdr=o("__init__()"),Rdr=o(" (throws an error)."),Bdr=l(),_t=a("div"),f($0.$$.fragment),Pdr=l(),Aue=a("p"),$dr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Idr=l(),Cc=a("p"),qdr=o(`Note:
Loading a model from its configuration file does `),yue=a("strong"),Ndr=o("not"),jdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=a("a"),Ddr=o("from_pretrained()"),Gdr=o(" to load the model weights."),Odr=l(),Lue=a("p"),Vdr=o("Examples:"),Xdr=l(),f(I0.$$.fragment),zdr=l(),uo=a("div"),f(q0.$$.fragment),Qdr=l(),xue=a("p"),Wdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Hdr=l(),Fn=a("p"),Udr=o("The model class to instantiate is selected based on the "),kue=a("code"),Jdr=o("model_type"),Ydr=o(` property of the config object (either
passed as an argument or loaded from `),Sue=a("code"),Kdr=o("pretrained_model_name_or_path"),Zdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=a("code"),ecr=o("pretrained_model_name_or_path"),ocr=o(":"),rcr=l(),N0=a("ul"),lF=a("li"),Bue=a("strong"),tcr=o("convnext"),acr=o(" \u2014 "),fX=a("a"),ncr=o("TFConvNextForImageClassification"),scr=o(" (ConvNext model)"),lcr=l(),iF=a("li"),Pue=a("strong"),icr=o("vit"),dcr=o(" \u2014 "),mX=a("a"),ccr=o("TFViTForImageClassification"),fcr=o(" (ViT model)"),mcr=l(),$ue=a("p"),gcr=o("Examples:"),hcr=l(),f(j0.$$.fragment),rPe=l(),wc=a("h2"),dF=a("a"),Iue=a("span"),f(D0.$$.fragment),pcr=l(),que=a("span"),_cr=o("TFAutoModelForMaskedLM"),tPe=l(),Er=a("div"),f(G0.$$.fragment),ucr=l(),Ac=a("p"),bcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gX=a("a"),vcr=o("from_pretrained()"),Fcr=o(" class method or the "),hX=a("a"),Tcr=o("from_config()"),Mcr=o(` class
method.`),Ecr=l(),O0=a("p"),Ccr=o("This class cannot be instantiated directly using "),Nue=a("code"),wcr=o("__init__()"),Acr=o(" (throws an error)."),ycr=l(),ut=a("div"),f(V0.$$.fragment),Lcr=l(),jue=a("p"),xcr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kcr=l(),yc=a("p"),Scr=o(`Note:
Loading a model from its configuration file does `),Due=a("strong"),Rcr=o("not"),Bcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),Pcr=o("from_pretrained()"),$cr=o(" to load the model weights."),Icr=l(),Gue=a("p"),qcr=o("Examples:"),Ncr=l(),f(X0.$$.fragment),jcr=l(),bo=a("div"),f(z0.$$.fragment),Dcr=l(),Oue=a("p"),Gcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Ocr=l(),Tn=a("p"),Vcr=o("The model class to instantiate is selected based on the "),Vue=a("code"),Xcr=o("model_type"),zcr=o(` property of the config object (either
passed as an argument or loaded from `),Xue=a("code"),Qcr=o("pretrained_model_name_or_path"),Wcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=a("code"),Hcr=o("pretrained_model_name_or_path"),Ucr=o(":"),Jcr=l(),J=a("ul"),cF=a("li"),Que=a("strong"),Ycr=o("albert"),Kcr=o(" \u2014 "),_X=a("a"),Zcr=o("TFAlbertForMaskedLM"),efr=o(" (ALBERT model)"),ofr=l(),fF=a("li"),Wue=a("strong"),rfr=o("bert"),tfr=o(" \u2014 "),uX=a("a"),afr=o("TFBertForMaskedLM"),nfr=o(" (BERT model)"),sfr=l(),mF=a("li"),Hue=a("strong"),lfr=o("camembert"),ifr=o(" \u2014 "),bX=a("a"),dfr=o("TFCamembertForMaskedLM"),cfr=o(" (CamemBERT model)"),ffr=l(),gF=a("li"),Uue=a("strong"),mfr=o("convbert"),gfr=o(" \u2014 "),vX=a("a"),hfr=o("TFConvBertForMaskedLM"),pfr=o(" (ConvBERT model)"),_fr=l(),hF=a("li"),Jue=a("strong"),ufr=o("deberta"),bfr=o(" \u2014 "),FX=a("a"),vfr=o("TFDebertaForMaskedLM"),Ffr=o(" (DeBERTa model)"),Tfr=l(),pF=a("li"),Yue=a("strong"),Mfr=o("deberta-v2"),Efr=o(" \u2014 "),TX=a("a"),Cfr=o("TFDebertaV2ForMaskedLM"),wfr=o(" (DeBERTa-v2 model)"),Afr=l(),_F=a("li"),Kue=a("strong"),yfr=o("distilbert"),Lfr=o(" \u2014 "),MX=a("a"),xfr=o("TFDistilBertForMaskedLM"),kfr=o(" (DistilBERT model)"),Sfr=l(),uF=a("li"),Zue=a("strong"),Rfr=o("electra"),Bfr=o(" \u2014 "),EX=a("a"),Pfr=o("TFElectraForMaskedLM"),$fr=o(" (ELECTRA model)"),Ifr=l(),bF=a("li"),e1e=a("strong"),qfr=o("flaubert"),Nfr=o(" \u2014 "),CX=a("a"),jfr=o("TFFlaubertWithLMHeadModel"),Dfr=o(" (FlauBERT model)"),Gfr=l(),vF=a("li"),o1e=a("strong"),Ofr=o("funnel"),Vfr=o(" \u2014 "),wX=a("a"),Xfr=o("TFFunnelForMaskedLM"),zfr=o(" (Funnel Transformer model)"),Qfr=l(),FF=a("li"),r1e=a("strong"),Wfr=o("layoutlm"),Hfr=o(" \u2014 "),AX=a("a"),Ufr=o("TFLayoutLMForMaskedLM"),Jfr=o(" (LayoutLM model)"),Yfr=l(),TF=a("li"),t1e=a("strong"),Kfr=o("longformer"),Zfr=o(" \u2014 "),yX=a("a"),emr=o("TFLongformerForMaskedLM"),omr=o(" (Longformer model)"),rmr=l(),MF=a("li"),a1e=a("strong"),tmr=o("mobilebert"),amr=o(" \u2014 "),LX=a("a"),nmr=o("TFMobileBertForMaskedLM"),smr=o(" (MobileBERT model)"),lmr=l(),EF=a("li"),n1e=a("strong"),imr=o("mpnet"),dmr=o(" \u2014 "),xX=a("a"),cmr=o("TFMPNetForMaskedLM"),fmr=o(" (MPNet model)"),mmr=l(),CF=a("li"),s1e=a("strong"),gmr=o("rembert"),hmr=o(" \u2014 "),kX=a("a"),pmr=o("TFRemBertForMaskedLM"),_mr=o(" (RemBERT model)"),umr=l(),wF=a("li"),l1e=a("strong"),bmr=o("roberta"),vmr=o(" \u2014 "),SX=a("a"),Fmr=o("TFRobertaForMaskedLM"),Tmr=o(" (RoBERTa model)"),Mmr=l(),AF=a("li"),i1e=a("strong"),Emr=o("roformer"),Cmr=o(" \u2014 "),RX=a("a"),wmr=o("TFRoFormerForMaskedLM"),Amr=o(" (RoFormer model)"),ymr=l(),yF=a("li"),d1e=a("strong"),Lmr=o("tapas"),xmr=o(" \u2014 "),BX=a("a"),kmr=o("TFTapasForMaskedLM"),Smr=o(" (TAPAS model)"),Rmr=l(),LF=a("li"),c1e=a("strong"),Bmr=o("xlm"),Pmr=o(" \u2014 "),PX=a("a"),$mr=o("TFXLMWithLMHeadModel"),Imr=o(" (XLM model)"),qmr=l(),xF=a("li"),f1e=a("strong"),Nmr=o("xlm-roberta"),jmr=o(" \u2014 "),$X=a("a"),Dmr=o("TFXLMRobertaForMaskedLM"),Gmr=o(" (XLM-RoBERTa model)"),Omr=l(),m1e=a("p"),Vmr=o("Examples:"),Xmr=l(),f(Q0.$$.fragment),aPe=l(),Lc=a("h2"),kF=a("a"),g1e=a("span"),f(W0.$$.fragment),zmr=l(),h1e=a("span"),Qmr=o("TFAutoModelForSeq2SeqLM"),nPe=l(),Cr=a("div"),f(H0.$$.fragment),Wmr=l(),xc=a("p"),Hmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=a("a"),Umr=o("from_pretrained()"),Jmr=o(" class method or the "),qX=a("a"),Ymr=o("from_config()"),Kmr=o(` class
method.`),Zmr=l(),U0=a("p"),egr=o("This class cannot be instantiated directly using "),p1e=a("code"),ogr=o("__init__()"),rgr=o(" (throws an error)."),tgr=l(),bt=a("div"),f(J0.$$.fragment),agr=l(),_1e=a("p"),ngr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),sgr=l(),kc=a("p"),lgr=o(`Note:
Loading a model from its configuration file does `),u1e=a("strong"),igr=o("not"),dgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=a("a"),cgr=o("from_pretrained()"),fgr=o(" to load the model weights."),mgr=l(),b1e=a("p"),ggr=o("Examples:"),hgr=l(),f(Y0.$$.fragment),pgr=l(),vo=a("div"),f(K0.$$.fragment),_gr=l(),v1e=a("p"),ugr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),bgr=l(),Mn=a("p"),vgr=o("The model class to instantiate is selected based on the "),F1e=a("code"),Fgr=o("model_type"),Tgr=o(` property of the config object (either
passed as an argument or loaded from `),T1e=a("code"),Mgr=o("pretrained_model_name_or_path"),Egr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=a("code"),Cgr=o("pretrained_model_name_or_path"),wgr=o(":"),Agr=l(),be=a("ul"),SF=a("li"),E1e=a("strong"),ygr=o("bart"),Lgr=o(" \u2014 "),jX=a("a"),xgr=o("TFBartForConditionalGeneration"),kgr=o(" (BART model)"),Sgr=l(),RF=a("li"),C1e=a("strong"),Rgr=o("blenderbot"),Bgr=o(" \u2014 "),DX=a("a"),Pgr=o("TFBlenderbotForConditionalGeneration"),$gr=o(" (Blenderbot model)"),Igr=l(),BF=a("li"),w1e=a("strong"),qgr=o("blenderbot-small"),Ngr=o(" \u2014 "),GX=a("a"),jgr=o("TFBlenderbotSmallForConditionalGeneration"),Dgr=o(" (BlenderbotSmall model)"),Ggr=l(),PF=a("li"),A1e=a("strong"),Ogr=o("encoder-decoder"),Vgr=o(" \u2014 "),OX=a("a"),Xgr=o("TFEncoderDecoderModel"),zgr=o(" (Encoder decoder model)"),Qgr=l(),$F=a("li"),y1e=a("strong"),Wgr=o("led"),Hgr=o(" \u2014 "),VX=a("a"),Ugr=o("TFLEDForConditionalGeneration"),Jgr=o(" (LED model)"),Ygr=l(),IF=a("li"),L1e=a("strong"),Kgr=o("marian"),Zgr=o(" \u2014 "),XX=a("a"),ehr=o("TFMarianMTModel"),ohr=o(" (Marian model)"),rhr=l(),qF=a("li"),x1e=a("strong"),thr=o("mbart"),ahr=o(" \u2014 "),zX=a("a"),nhr=o("TFMBartForConditionalGeneration"),shr=o(" (mBART model)"),lhr=l(),NF=a("li"),k1e=a("strong"),ihr=o("mt5"),dhr=o(" \u2014 "),QX=a("a"),chr=o("TFMT5ForConditionalGeneration"),fhr=o(" (mT5 model)"),mhr=l(),jF=a("li"),S1e=a("strong"),ghr=o("pegasus"),hhr=o(" \u2014 "),WX=a("a"),phr=o("TFPegasusForConditionalGeneration"),_hr=o(" (Pegasus model)"),uhr=l(),DF=a("li"),R1e=a("strong"),bhr=o("t5"),vhr=o(" \u2014 "),HX=a("a"),Fhr=o("TFT5ForConditionalGeneration"),Thr=o(" (T5 model)"),Mhr=l(),B1e=a("p"),Ehr=o("Examples:"),Chr=l(),f(Z0.$$.fragment),sPe=l(),Sc=a("h2"),GF=a("a"),P1e=a("span"),f(ey.$$.fragment),whr=l(),$1e=a("span"),Ahr=o("TFAutoModelForSequenceClassification"),lPe=l(),wr=a("div"),f(oy.$$.fragment),yhr=l(),Rc=a("p"),Lhr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UX=a("a"),xhr=o("from_pretrained()"),khr=o(" class method or the "),JX=a("a"),Shr=o("from_config()"),Rhr=o(` class
method.`),Bhr=l(),ry=a("p"),Phr=o("This class cannot be instantiated directly using "),I1e=a("code"),$hr=o("__init__()"),Ihr=o(" (throws an error)."),qhr=l(),vt=a("div"),f(ty.$$.fragment),Nhr=l(),q1e=a("p"),jhr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dhr=l(),Bc=a("p"),Ghr=o(`Note:
Loading a model from its configuration file does `),N1e=a("strong"),Ohr=o("not"),Vhr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=a("a"),Xhr=o("from_pretrained()"),zhr=o(" to load the model weights."),Qhr=l(),j1e=a("p"),Whr=o("Examples:"),Hhr=l(),f(ay.$$.fragment),Uhr=l(),Fo=a("div"),f(ny.$$.fragment),Jhr=l(),D1e=a("p"),Yhr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Khr=l(),En=a("p"),Zhr=o("The model class to instantiate is selected based on the "),G1e=a("code"),epr=o("model_type"),opr=o(` property of the config object (either
passed as an argument or loaded from `),O1e=a("code"),rpr=o("pretrained_model_name_or_path"),tpr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=a("code"),apr=o("pretrained_model_name_or_path"),npr=o(":"),spr=l(),V=a("ul"),OF=a("li"),X1e=a("strong"),lpr=o("albert"),ipr=o(" \u2014 "),KX=a("a"),dpr=o("TFAlbertForSequenceClassification"),cpr=o(" (ALBERT model)"),fpr=l(),VF=a("li"),z1e=a("strong"),mpr=o("bert"),gpr=o(" \u2014 "),ZX=a("a"),hpr=o("TFBertForSequenceClassification"),ppr=o(" (BERT model)"),_pr=l(),XF=a("li"),Q1e=a("strong"),upr=o("camembert"),bpr=o(" \u2014 "),ez=a("a"),vpr=o("TFCamembertForSequenceClassification"),Fpr=o(" (CamemBERT model)"),Tpr=l(),zF=a("li"),W1e=a("strong"),Mpr=o("convbert"),Epr=o(" \u2014 "),oz=a("a"),Cpr=o("TFConvBertForSequenceClassification"),wpr=o(" (ConvBERT model)"),Apr=l(),QF=a("li"),H1e=a("strong"),ypr=o("ctrl"),Lpr=o(" \u2014 "),rz=a("a"),xpr=o("TFCTRLForSequenceClassification"),kpr=o(" (CTRL model)"),Spr=l(),WF=a("li"),U1e=a("strong"),Rpr=o("deberta"),Bpr=o(" \u2014 "),tz=a("a"),Ppr=o("TFDebertaForSequenceClassification"),$pr=o(" (DeBERTa model)"),Ipr=l(),HF=a("li"),J1e=a("strong"),qpr=o("deberta-v2"),Npr=o(" \u2014 "),az=a("a"),jpr=o("TFDebertaV2ForSequenceClassification"),Dpr=o(" (DeBERTa-v2 model)"),Gpr=l(),UF=a("li"),Y1e=a("strong"),Opr=o("distilbert"),Vpr=o(" \u2014 "),nz=a("a"),Xpr=o("TFDistilBertForSequenceClassification"),zpr=o(" (DistilBERT model)"),Qpr=l(),JF=a("li"),K1e=a("strong"),Wpr=o("electra"),Hpr=o(" \u2014 "),sz=a("a"),Upr=o("TFElectraForSequenceClassification"),Jpr=o(" (ELECTRA model)"),Ypr=l(),YF=a("li"),Z1e=a("strong"),Kpr=o("flaubert"),Zpr=o(" \u2014 "),lz=a("a"),e_r=o("TFFlaubertForSequenceClassification"),o_r=o(" (FlauBERT model)"),r_r=l(),KF=a("li"),e7e=a("strong"),t_r=o("funnel"),a_r=o(" \u2014 "),iz=a("a"),n_r=o("TFFunnelForSequenceClassification"),s_r=o(" (Funnel Transformer model)"),l_r=l(),ZF=a("li"),o7e=a("strong"),i_r=o("gpt2"),d_r=o(" \u2014 "),dz=a("a"),c_r=o("TFGPT2ForSequenceClassification"),f_r=o(" (OpenAI GPT-2 model)"),m_r=l(),eT=a("li"),r7e=a("strong"),g_r=o("gptj"),h_r=o(" \u2014 "),cz=a("a"),p_r=o("TFGPTJForSequenceClassification"),__r=o(" (GPT-J model)"),u_r=l(),oT=a("li"),t7e=a("strong"),b_r=o("layoutlm"),v_r=o(" \u2014 "),fz=a("a"),F_r=o("TFLayoutLMForSequenceClassification"),T_r=o(" (LayoutLM model)"),M_r=l(),rT=a("li"),a7e=a("strong"),E_r=o("longformer"),C_r=o(" \u2014 "),mz=a("a"),w_r=o("TFLongformerForSequenceClassification"),A_r=o(" (Longformer model)"),y_r=l(),tT=a("li"),n7e=a("strong"),L_r=o("mobilebert"),x_r=o(" \u2014 "),gz=a("a"),k_r=o("TFMobileBertForSequenceClassification"),S_r=o(" (MobileBERT model)"),R_r=l(),aT=a("li"),s7e=a("strong"),B_r=o("mpnet"),P_r=o(" \u2014 "),hz=a("a"),$_r=o("TFMPNetForSequenceClassification"),I_r=o(" (MPNet model)"),q_r=l(),nT=a("li"),l7e=a("strong"),N_r=o("openai-gpt"),j_r=o(" \u2014 "),pz=a("a"),D_r=o("TFOpenAIGPTForSequenceClassification"),G_r=o(" (OpenAI GPT model)"),O_r=l(),sT=a("li"),i7e=a("strong"),V_r=o("rembert"),X_r=o(" \u2014 "),_z=a("a"),z_r=o("TFRemBertForSequenceClassification"),Q_r=o(" (RemBERT model)"),W_r=l(),lT=a("li"),d7e=a("strong"),H_r=o("roberta"),U_r=o(" \u2014 "),uz=a("a"),J_r=o("TFRobertaForSequenceClassification"),Y_r=o(" (RoBERTa model)"),K_r=l(),iT=a("li"),c7e=a("strong"),Z_r=o("roformer"),eur=o(" \u2014 "),bz=a("a"),our=o("TFRoFormerForSequenceClassification"),rur=o(" (RoFormer model)"),tur=l(),dT=a("li"),f7e=a("strong"),aur=o("tapas"),nur=o(" \u2014 "),vz=a("a"),sur=o("TFTapasForSequenceClassification"),lur=o(" (TAPAS model)"),iur=l(),cT=a("li"),m7e=a("strong"),dur=o("transfo-xl"),cur=o(" \u2014 "),Fz=a("a"),fur=o("TFTransfoXLForSequenceClassification"),mur=o(" (Transformer-XL model)"),gur=l(),fT=a("li"),g7e=a("strong"),hur=o("xlm"),pur=o(" \u2014 "),Tz=a("a"),_ur=o("TFXLMForSequenceClassification"),uur=o(" (XLM model)"),bur=l(),mT=a("li"),h7e=a("strong"),vur=o("xlm-roberta"),Fur=o(" \u2014 "),Mz=a("a"),Tur=o("TFXLMRobertaForSequenceClassification"),Mur=o(" (XLM-RoBERTa model)"),Eur=l(),gT=a("li"),p7e=a("strong"),Cur=o("xlnet"),wur=o(" \u2014 "),Ez=a("a"),Aur=o("TFXLNetForSequenceClassification"),yur=o(" (XLNet model)"),Lur=l(),_7e=a("p"),xur=o("Examples:"),kur=l(),f(sy.$$.fragment),iPe=l(),Pc=a("h2"),hT=a("a"),u7e=a("span"),f(ly.$$.fragment),Sur=l(),b7e=a("span"),Rur=o("TFAutoModelForMultipleChoice"),dPe=l(),Ar=a("div"),f(iy.$$.fragment),Bur=l(),$c=a("p"),Pur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cz=a("a"),$ur=o("from_pretrained()"),Iur=o(" class method or the "),wz=a("a"),qur=o("from_config()"),Nur=o(` class
method.`),jur=l(),dy=a("p"),Dur=o("This class cannot be instantiated directly using "),v7e=a("code"),Gur=o("__init__()"),Our=o(" (throws an error)."),Vur=l(),Ft=a("div"),f(cy.$$.fragment),Xur=l(),F7e=a("p"),zur=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Qur=l(),Ic=a("p"),Wur=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),Hur=o("not"),Uur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=a("a"),Jur=o("from_pretrained()"),Yur=o(" to load the model weights."),Kur=l(),M7e=a("p"),Zur=o("Examples:"),e1r=l(),f(fy.$$.fragment),o1r=l(),To=a("div"),f(my.$$.fragment),r1r=l(),E7e=a("p"),t1r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),a1r=l(),Cn=a("p"),n1r=o("The model class to instantiate is selected based on the "),C7e=a("code"),s1r=o("model_type"),l1r=o(` property of the config object (either
passed as an argument or loaded from `),w7e=a("code"),i1r=o("pretrained_model_name_or_path"),d1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=a("code"),c1r=o("pretrained_model_name_or_path"),f1r=o(":"),m1r=l(),se=a("ul"),pT=a("li"),y7e=a("strong"),g1r=o("albert"),h1r=o(" \u2014 "),yz=a("a"),p1r=o("TFAlbertForMultipleChoice"),_1r=o(" (ALBERT model)"),u1r=l(),_T=a("li"),L7e=a("strong"),b1r=o("bert"),v1r=o(" \u2014 "),Lz=a("a"),F1r=o("TFBertForMultipleChoice"),T1r=o(" (BERT model)"),M1r=l(),uT=a("li"),x7e=a("strong"),E1r=o("camembert"),C1r=o(" \u2014 "),xz=a("a"),w1r=o("TFCamembertForMultipleChoice"),A1r=o(" (CamemBERT model)"),y1r=l(),bT=a("li"),k7e=a("strong"),L1r=o("convbert"),x1r=o(" \u2014 "),kz=a("a"),k1r=o("TFConvBertForMultipleChoice"),S1r=o(" (ConvBERT model)"),R1r=l(),vT=a("li"),S7e=a("strong"),B1r=o("distilbert"),P1r=o(" \u2014 "),Sz=a("a"),$1r=o("TFDistilBertForMultipleChoice"),I1r=o(" (DistilBERT model)"),q1r=l(),FT=a("li"),R7e=a("strong"),N1r=o("electra"),j1r=o(" \u2014 "),Rz=a("a"),D1r=o("TFElectraForMultipleChoice"),G1r=o(" (ELECTRA model)"),O1r=l(),TT=a("li"),B7e=a("strong"),V1r=o("flaubert"),X1r=o(" \u2014 "),Bz=a("a"),z1r=o("TFFlaubertForMultipleChoice"),Q1r=o(" (FlauBERT model)"),W1r=l(),MT=a("li"),P7e=a("strong"),H1r=o("funnel"),U1r=o(" \u2014 "),Pz=a("a"),J1r=o("TFFunnelForMultipleChoice"),Y1r=o(" (Funnel Transformer model)"),K1r=l(),ET=a("li"),$7e=a("strong"),Z1r=o("longformer"),e7r=o(" \u2014 "),$z=a("a"),o7r=o("TFLongformerForMultipleChoice"),r7r=o(" (Longformer model)"),t7r=l(),CT=a("li"),I7e=a("strong"),a7r=o("mobilebert"),n7r=o(" \u2014 "),Iz=a("a"),s7r=o("TFMobileBertForMultipleChoice"),l7r=o(" (MobileBERT model)"),i7r=l(),wT=a("li"),q7e=a("strong"),d7r=o("mpnet"),c7r=o(" \u2014 "),qz=a("a"),f7r=o("TFMPNetForMultipleChoice"),m7r=o(" (MPNet model)"),g7r=l(),AT=a("li"),N7e=a("strong"),h7r=o("rembert"),p7r=o(" \u2014 "),Nz=a("a"),_7r=o("TFRemBertForMultipleChoice"),u7r=o(" (RemBERT model)"),b7r=l(),yT=a("li"),j7e=a("strong"),v7r=o("roberta"),F7r=o(" \u2014 "),jz=a("a"),T7r=o("TFRobertaForMultipleChoice"),M7r=o(" (RoBERTa model)"),E7r=l(),LT=a("li"),D7e=a("strong"),C7r=o("roformer"),w7r=o(" \u2014 "),Dz=a("a"),A7r=o("TFRoFormerForMultipleChoice"),y7r=o(" (RoFormer model)"),L7r=l(),xT=a("li"),G7e=a("strong"),x7r=o("xlm"),k7r=o(" \u2014 "),Gz=a("a"),S7r=o("TFXLMForMultipleChoice"),R7r=o(" (XLM model)"),B7r=l(),kT=a("li"),O7e=a("strong"),P7r=o("xlm-roberta"),$7r=o(" \u2014 "),Oz=a("a"),I7r=o("TFXLMRobertaForMultipleChoice"),q7r=o(" (XLM-RoBERTa model)"),N7r=l(),ST=a("li"),V7e=a("strong"),j7r=o("xlnet"),D7r=o(" \u2014 "),Vz=a("a"),G7r=o("TFXLNetForMultipleChoice"),O7r=o(" (XLNet model)"),V7r=l(),X7e=a("p"),X7r=o("Examples:"),z7r=l(),f(gy.$$.fragment),cPe=l(),qc=a("h2"),RT=a("a"),z7e=a("span"),f(hy.$$.fragment),Q7r=l(),Q7e=a("span"),W7r=o("TFAutoModelForTableQuestionAnswering"),fPe=l(),yr=a("div"),f(py.$$.fragment),H7r=l(),Nc=a("p"),U7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=a("a"),J7r=o("from_pretrained()"),Y7r=o(" class method or the "),zz=a("a"),K7r=o("from_config()"),Z7r=o(` class
method.`),ebr=l(),_y=a("p"),obr=o("This class cannot be instantiated directly using "),W7e=a("code"),rbr=o("__init__()"),tbr=o(" (throws an error)."),abr=l(),Tt=a("div"),f(uy.$$.fragment),nbr=l(),H7e=a("p"),sbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),lbr=l(),jc=a("p"),ibr=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),dbr=o("not"),cbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=a("a"),fbr=o("from_pretrained()"),mbr=o(" to load the model weights."),gbr=l(),J7e=a("p"),hbr=o("Examples:"),pbr=l(),f(by.$$.fragment),_br=l(),Mo=a("div"),f(vy.$$.fragment),ubr=l(),Y7e=a("p"),bbr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),vbr=l(),wn=a("p"),Fbr=o("The model class to instantiate is selected based on the "),K7e=a("code"),Tbr=o("model_type"),Mbr=o(` property of the config object (either
passed as an argument or loaded from `),Z7e=a("code"),Ebr=o("pretrained_model_name_or_path"),Cbr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=a("code"),wbr=o("pretrained_model_name_or_path"),Abr=o(":"),ybr=l(),obe=a("ul"),BT=a("li"),rbe=a("strong"),Lbr=o("tapas"),xbr=o(" \u2014 "),Wz=a("a"),kbr=o("TFTapasForQuestionAnswering"),Sbr=o(" (TAPAS model)"),Rbr=l(),tbe=a("p"),Bbr=o("Examples:"),Pbr=l(),f(Fy.$$.fragment),mPe=l(),Dc=a("h2"),PT=a("a"),abe=a("span"),f(Ty.$$.fragment),$br=l(),nbe=a("span"),Ibr=o("TFAutoModelForTokenClassification"),gPe=l(),Lr=a("div"),f(My.$$.fragment),qbr=l(),Gc=a("p"),Nbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hz=a("a"),jbr=o("from_pretrained()"),Dbr=o(" class method or the "),Uz=a("a"),Gbr=o("from_config()"),Obr=o(` class
method.`),Vbr=l(),Ey=a("p"),Xbr=o("This class cannot be instantiated directly using "),sbe=a("code"),zbr=o("__init__()"),Qbr=o(" (throws an error)."),Wbr=l(),Mt=a("div"),f(Cy.$$.fragment),Hbr=l(),lbe=a("p"),Ubr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Jbr=l(),Oc=a("p"),Ybr=o(`Note:
Loading a model from its configuration file does `),ibe=a("strong"),Kbr=o("not"),Zbr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=a("a"),e2r=o("from_pretrained()"),o2r=o(" to load the model weights."),r2r=l(),dbe=a("p"),t2r=o("Examples:"),a2r=l(),f(wy.$$.fragment),n2r=l(),Eo=a("div"),f(Ay.$$.fragment),s2r=l(),cbe=a("p"),l2r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),i2r=l(),An=a("p"),d2r=o("The model class to instantiate is selected based on the "),fbe=a("code"),c2r=o("model_type"),f2r=o(` property of the config object (either
passed as an argument or loaded from `),mbe=a("code"),m2r=o("pretrained_model_name_or_path"),g2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=a("code"),h2r=o("pretrained_model_name_or_path"),p2r=o(":"),_2r=l(),Y=a("ul"),$T=a("li"),hbe=a("strong"),u2r=o("albert"),b2r=o(" \u2014 "),Yz=a("a"),v2r=o("TFAlbertForTokenClassification"),F2r=o(" (ALBERT model)"),T2r=l(),IT=a("li"),pbe=a("strong"),M2r=o("bert"),E2r=o(" \u2014 "),Kz=a("a"),C2r=o("TFBertForTokenClassification"),w2r=o(" (BERT model)"),A2r=l(),qT=a("li"),_be=a("strong"),y2r=o("camembert"),L2r=o(" \u2014 "),Zz=a("a"),x2r=o("TFCamembertForTokenClassification"),k2r=o(" (CamemBERT model)"),S2r=l(),NT=a("li"),ube=a("strong"),R2r=o("convbert"),B2r=o(" \u2014 "),eQ=a("a"),P2r=o("TFConvBertForTokenClassification"),$2r=o(" (ConvBERT model)"),I2r=l(),jT=a("li"),bbe=a("strong"),q2r=o("deberta"),N2r=o(" \u2014 "),oQ=a("a"),j2r=o("TFDebertaForTokenClassification"),D2r=o(" (DeBERTa model)"),G2r=l(),DT=a("li"),vbe=a("strong"),O2r=o("deberta-v2"),V2r=o(" \u2014 "),rQ=a("a"),X2r=o("TFDebertaV2ForTokenClassification"),z2r=o(" (DeBERTa-v2 model)"),Q2r=l(),GT=a("li"),Fbe=a("strong"),W2r=o("distilbert"),H2r=o(" \u2014 "),tQ=a("a"),U2r=o("TFDistilBertForTokenClassification"),J2r=o(" (DistilBERT model)"),Y2r=l(),OT=a("li"),Tbe=a("strong"),K2r=o("electra"),Z2r=o(" \u2014 "),aQ=a("a"),e5r=o("TFElectraForTokenClassification"),o5r=o(" (ELECTRA model)"),r5r=l(),VT=a("li"),Mbe=a("strong"),t5r=o("flaubert"),a5r=o(" \u2014 "),nQ=a("a"),n5r=o("TFFlaubertForTokenClassification"),s5r=o(" (FlauBERT model)"),l5r=l(),XT=a("li"),Ebe=a("strong"),i5r=o("funnel"),d5r=o(" \u2014 "),sQ=a("a"),c5r=o("TFFunnelForTokenClassification"),f5r=o(" (Funnel Transformer model)"),m5r=l(),zT=a("li"),Cbe=a("strong"),g5r=o("layoutlm"),h5r=o(" \u2014 "),lQ=a("a"),p5r=o("TFLayoutLMForTokenClassification"),_5r=o(" (LayoutLM model)"),u5r=l(),QT=a("li"),wbe=a("strong"),b5r=o("longformer"),v5r=o(" \u2014 "),iQ=a("a"),F5r=o("TFLongformerForTokenClassification"),T5r=o(" (Longformer model)"),M5r=l(),WT=a("li"),Abe=a("strong"),E5r=o("mobilebert"),C5r=o(" \u2014 "),dQ=a("a"),w5r=o("TFMobileBertForTokenClassification"),A5r=o(" (MobileBERT model)"),y5r=l(),HT=a("li"),ybe=a("strong"),L5r=o("mpnet"),x5r=o(" \u2014 "),cQ=a("a"),k5r=o("TFMPNetForTokenClassification"),S5r=o(" (MPNet model)"),R5r=l(),UT=a("li"),Lbe=a("strong"),B5r=o("rembert"),P5r=o(" \u2014 "),fQ=a("a"),$5r=o("TFRemBertForTokenClassification"),I5r=o(" (RemBERT model)"),q5r=l(),JT=a("li"),xbe=a("strong"),N5r=o("roberta"),j5r=o(" \u2014 "),mQ=a("a"),D5r=o("TFRobertaForTokenClassification"),G5r=o(" (RoBERTa model)"),O5r=l(),YT=a("li"),kbe=a("strong"),V5r=o("roformer"),X5r=o(" \u2014 "),gQ=a("a"),z5r=o("TFRoFormerForTokenClassification"),Q5r=o(" (RoFormer model)"),W5r=l(),KT=a("li"),Sbe=a("strong"),H5r=o("xlm"),U5r=o(" \u2014 "),hQ=a("a"),J5r=o("TFXLMForTokenClassification"),Y5r=o(" (XLM model)"),K5r=l(),ZT=a("li"),Rbe=a("strong"),Z5r=o("xlm-roberta"),e3r=o(" \u2014 "),pQ=a("a"),o3r=o("TFXLMRobertaForTokenClassification"),r3r=o(" (XLM-RoBERTa model)"),t3r=l(),eM=a("li"),Bbe=a("strong"),a3r=o("xlnet"),n3r=o(" \u2014 "),_Q=a("a"),s3r=o("TFXLNetForTokenClassification"),l3r=o(" (XLNet model)"),i3r=l(),Pbe=a("p"),d3r=o("Examples:"),c3r=l(),f(yy.$$.fragment),hPe=l(),Vc=a("h2"),oM=a("a"),$be=a("span"),f(Ly.$$.fragment),f3r=l(),Ibe=a("span"),m3r=o("TFAutoModelForQuestionAnswering"),pPe=l(),xr=a("div"),f(xy.$$.fragment),g3r=l(),Xc=a("p"),h3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uQ=a("a"),p3r=o("from_pretrained()"),_3r=o(" class method or the "),bQ=a("a"),u3r=o("from_config()"),b3r=o(` class
method.`),v3r=l(),ky=a("p"),F3r=o("This class cannot be instantiated directly using "),qbe=a("code"),T3r=o("__init__()"),M3r=o(" (throws an error)."),E3r=l(),Et=a("div"),f(Sy.$$.fragment),C3r=l(),Nbe=a("p"),w3r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),A3r=l(),zc=a("p"),y3r=o(`Note:
Loading a model from its configuration file does `),jbe=a("strong"),L3r=o("not"),x3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=a("a"),k3r=o("from_pretrained()"),S3r=o(" to load the model weights."),R3r=l(),Dbe=a("p"),B3r=o("Examples:"),P3r=l(),f(Ry.$$.fragment),$3r=l(),Co=a("div"),f(By.$$.fragment),I3r=l(),Gbe=a("p"),q3r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),N3r=l(),yn=a("p"),j3r=o("The model class to instantiate is selected based on the "),Obe=a("code"),D3r=o("model_type"),G3r=o(` property of the config object (either
passed as an argument or loaded from `),Vbe=a("code"),O3r=o("pretrained_model_name_or_path"),V3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=a("code"),X3r=o("pretrained_model_name_or_path"),z3r=o(":"),Q3r=l(),K=a("ul"),rM=a("li"),zbe=a("strong"),W3r=o("albert"),H3r=o(" \u2014 "),FQ=a("a"),U3r=o("TFAlbertForQuestionAnswering"),J3r=o(" (ALBERT model)"),Y3r=l(),tM=a("li"),Qbe=a("strong"),K3r=o("bert"),Z3r=o(" \u2014 "),TQ=a("a"),evr=o("TFBertForQuestionAnswering"),ovr=o(" (BERT model)"),rvr=l(),aM=a("li"),Wbe=a("strong"),tvr=o("camembert"),avr=o(" \u2014 "),MQ=a("a"),nvr=o("TFCamembertForQuestionAnswering"),svr=o(" (CamemBERT model)"),lvr=l(),nM=a("li"),Hbe=a("strong"),ivr=o("convbert"),dvr=o(" \u2014 "),EQ=a("a"),cvr=o("TFConvBertForQuestionAnswering"),fvr=o(" (ConvBERT model)"),mvr=l(),sM=a("li"),Ube=a("strong"),gvr=o("deberta"),hvr=o(" \u2014 "),CQ=a("a"),pvr=o("TFDebertaForQuestionAnswering"),_vr=o(" (DeBERTa model)"),uvr=l(),lM=a("li"),Jbe=a("strong"),bvr=o("deberta-v2"),vvr=o(" \u2014 "),wQ=a("a"),Fvr=o("TFDebertaV2ForQuestionAnswering"),Tvr=o(" (DeBERTa-v2 model)"),Mvr=l(),iM=a("li"),Ybe=a("strong"),Evr=o("distilbert"),Cvr=o(" \u2014 "),AQ=a("a"),wvr=o("TFDistilBertForQuestionAnswering"),Avr=o(" (DistilBERT model)"),yvr=l(),dM=a("li"),Kbe=a("strong"),Lvr=o("electra"),xvr=o(" \u2014 "),yQ=a("a"),kvr=o("TFElectraForQuestionAnswering"),Svr=o(" (ELECTRA model)"),Rvr=l(),cM=a("li"),Zbe=a("strong"),Bvr=o("flaubert"),Pvr=o(" \u2014 "),LQ=a("a"),$vr=o("TFFlaubertForQuestionAnsweringSimple"),Ivr=o(" (FlauBERT model)"),qvr=l(),fM=a("li"),e2e=a("strong"),Nvr=o("funnel"),jvr=o(" \u2014 "),xQ=a("a"),Dvr=o("TFFunnelForQuestionAnswering"),Gvr=o(" (Funnel Transformer model)"),Ovr=l(),mM=a("li"),o2e=a("strong"),Vvr=o("gptj"),Xvr=o(" \u2014 "),kQ=a("a"),zvr=o("TFGPTJForQuestionAnswering"),Qvr=o(" (GPT-J model)"),Wvr=l(),gM=a("li"),r2e=a("strong"),Hvr=o("longformer"),Uvr=o(" \u2014 "),SQ=a("a"),Jvr=o("TFLongformerForQuestionAnswering"),Yvr=o(" (Longformer model)"),Kvr=l(),hM=a("li"),t2e=a("strong"),Zvr=o("mobilebert"),eFr=o(" \u2014 "),RQ=a("a"),oFr=o("TFMobileBertForQuestionAnswering"),rFr=o(" (MobileBERT model)"),tFr=l(),pM=a("li"),a2e=a("strong"),aFr=o("mpnet"),nFr=o(" \u2014 "),BQ=a("a"),sFr=o("TFMPNetForQuestionAnswering"),lFr=o(" (MPNet model)"),iFr=l(),_M=a("li"),n2e=a("strong"),dFr=o("rembert"),cFr=o(" \u2014 "),PQ=a("a"),fFr=o("TFRemBertForQuestionAnswering"),mFr=o(" (RemBERT model)"),gFr=l(),uM=a("li"),s2e=a("strong"),hFr=o("roberta"),pFr=o(" \u2014 "),$Q=a("a"),_Fr=o("TFRobertaForQuestionAnswering"),uFr=o(" (RoBERTa model)"),bFr=l(),bM=a("li"),l2e=a("strong"),vFr=o("roformer"),FFr=o(" \u2014 "),IQ=a("a"),TFr=o("TFRoFormerForQuestionAnswering"),MFr=o(" (RoFormer model)"),EFr=l(),vM=a("li"),i2e=a("strong"),CFr=o("xlm"),wFr=o(" \u2014 "),qQ=a("a"),AFr=o("TFXLMForQuestionAnsweringSimple"),yFr=o(" (XLM model)"),LFr=l(),FM=a("li"),d2e=a("strong"),xFr=o("xlm-roberta"),kFr=o(" \u2014 "),NQ=a("a"),SFr=o("TFXLMRobertaForQuestionAnswering"),RFr=o(" (XLM-RoBERTa model)"),BFr=l(),TM=a("li"),c2e=a("strong"),PFr=o("xlnet"),$Fr=o(" \u2014 "),jQ=a("a"),IFr=o("TFXLNetForQuestionAnsweringSimple"),qFr=o(" (XLNet model)"),NFr=l(),f2e=a("p"),jFr=o("Examples:"),DFr=l(),f(Py.$$.fragment),_Pe=l(),Qc=a("h2"),MM=a("a"),m2e=a("span"),f($y.$$.fragment),GFr=l(),g2e=a("span"),OFr=o("TFAutoModelForVision2Seq"),uPe=l(),kr=a("div"),f(Iy.$$.fragment),VFr=l(),Wc=a("p"),XFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=a("a"),zFr=o("from_pretrained()"),QFr=o(" class method or the "),GQ=a("a"),WFr=o("from_config()"),HFr=o(` class
method.`),UFr=l(),qy=a("p"),JFr=o("This class cannot be instantiated directly using "),h2e=a("code"),YFr=o("__init__()"),KFr=o(" (throws an error)."),ZFr=l(),Ct=a("div"),f(Ny.$$.fragment),eTr=l(),p2e=a("p"),oTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),rTr=l(),Hc=a("p"),tTr=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),aTr=o("not"),nTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),sTr=o("from_pretrained()"),lTr=o(" to load the model weights."),iTr=l(),u2e=a("p"),dTr=o("Examples:"),cTr=l(),f(jy.$$.fragment),fTr=l(),wo=a("div"),f(Dy.$$.fragment),mTr=l(),b2e=a("p"),gTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),hTr=l(),Ln=a("p"),pTr=o("The model class to instantiate is selected based on the "),v2e=a("code"),_Tr=o("model_type"),uTr=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),bTr=o("pretrained_model_name_or_path"),vTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),FTr=o("pretrained_model_name_or_path"),TTr=o(":"),MTr=l(),M2e=a("ul"),EM=a("li"),E2e=a("strong"),ETr=o("vision-encoder-decoder"),CTr=o(" \u2014 "),VQ=a("a"),wTr=o("TFVisionEncoderDecoderModel"),ATr=o(" (Vision Encoder decoder model)"),yTr=l(),C2e=a("p"),LTr=o("Examples:"),xTr=l(),f(Gy.$$.fragment),bPe=l(),Uc=a("h2"),CM=a("a"),w2e=a("span"),f(Oy.$$.fragment),kTr=l(),A2e=a("span"),STr=o("TFAutoModelForSpeechSeq2Seq"),vPe=l(),Sr=a("div"),f(Vy.$$.fragment),RTr=l(),Jc=a("p"),BTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XQ=a("a"),PTr=o("from_pretrained()"),$Tr=o(" class method or the "),zQ=a("a"),ITr=o("from_config()"),qTr=o(` class
method.`),NTr=l(),Xy=a("p"),jTr=o("This class cannot be instantiated directly using "),y2e=a("code"),DTr=o("__init__()"),GTr=o(" (throws an error)."),OTr=l(),wt=a("div"),f(zy.$$.fragment),VTr=l(),L2e=a("p"),XTr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),zTr=l(),Yc=a("p"),QTr=o(`Note:
Loading a model from its configuration file does `),x2e=a("strong"),WTr=o("not"),HTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=a("a"),UTr=o("from_pretrained()"),JTr=o(" to load the model weights."),YTr=l(),k2e=a("p"),KTr=o("Examples:"),ZTr=l(),f(Qy.$$.fragment),eMr=l(),Ao=a("div"),f(Wy.$$.fragment),oMr=l(),S2e=a("p"),rMr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),tMr=l(),xn=a("p"),aMr=o("The model class to instantiate is selected based on the "),R2e=a("code"),nMr=o("model_type"),sMr=o(` property of the config object (either
passed as an argument or loaded from `),B2e=a("code"),lMr=o("pretrained_model_name_or_path"),iMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=a("code"),dMr=o("pretrained_model_name_or_path"),cMr=o(":"),fMr=l(),$2e=a("ul"),wM=a("li"),I2e=a("strong"),mMr=o("speech_to_text"),gMr=o(" \u2014 "),WQ=a("a"),hMr=o("TFSpeech2TextForConditionalGeneration"),pMr=o(" (Speech2Text model)"),_Mr=l(),q2e=a("p"),uMr=o("Examples:"),bMr=l(),f(Hy.$$.fragment),FPe=l(),Kc=a("h2"),AM=a("a"),N2e=a("span"),f(Uy.$$.fragment),vMr=l(),j2e=a("span"),FMr=o("FlaxAutoModel"),TPe=l(),Rr=a("div"),f(Jy.$$.fragment),TMr=l(),Zc=a("p"),MMr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HQ=a("a"),EMr=o("from_pretrained()"),CMr=o(" class method or the "),UQ=a("a"),wMr=o("from_config()"),AMr=o(` class
method.`),yMr=l(),Yy=a("p"),LMr=o("This class cannot be instantiated directly using "),D2e=a("code"),xMr=o("__init__()"),kMr=o(" (throws an error)."),SMr=l(),At=a("div"),f(Ky.$$.fragment),RMr=l(),G2e=a("p"),BMr=o("Instantiates one of the base model classes of the library from a configuration."),PMr=l(),ef=a("p"),$Mr=o(`Note:
Loading a model from its configuration file does `),O2e=a("strong"),IMr=o("not"),qMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),NMr=o("from_pretrained()"),jMr=o(" to load the model weights."),DMr=l(),V2e=a("p"),GMr=o("Examples:"),OMr=l(),f(Zy.$$.fragment),VMr=l(),yo=a("div"),f(e8.$$.fragment),XMr=l(),X2e=a("p"),zMr=o("Instantiate one of the base model classes of the library from a pretrained model."),QMr=l(),kn=a("p"),WMr=o("The model class to instantiate is selected based on the "),z2e=a("code"),HMr=o("model_type"),UMr=o(` property of the config object (either
passed as an argument or loaded from `),Q2e=a("code"),JMr=o("pretrained_model_name_or_path"),YMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=a("code"),KMr=o("pretrained_model_name_or_path"),ZMr=o(":"),e4r=l(),z=a("ul"),yM=a("li"),H2e=a("strong"),o4r=o("albert"),r4r=o(" \u2014 "),YQ=a("a"),t4r=o("FlaxAlbertModel"),a4r=o(" (ALBERT model)"),n4r=l(),LM=a("li"),U2e=a("strong"),s4r=o("bart"),l4r=o(" \u2014 "),KQ=a("a"),i4r=o("FlaxBartModel"),d4r=o(" (BART model)"),c4r=l(),xM=a("li"),J2e=a("strong"),f4r=o("beit"),m4r=o(" \u2014 "),ZQ=a("a"),g4r=o("FlaxBeitModel"),h4r=o(" (BEiT model)"),p4r=l(),kM=a("li"),Y2e=a("strong"),_4r=o("bert"),u4r=o(" \u2014 "),eW=a("a"),b4r=o("FlaxBertModel"),v4r=o(" (BERT model)"),F4r=l(),SM=a("li"),K2e=a("strong"),T4r=o("big_bird"),M4r=o(" \u2014 "),oW=a("a"),E4r=o("FlaxBigBirdModel"),C4r=o(" (BigBird model)"),w4r=l(),RM=a("li"),Z2e=a("strong"),A4r=o("blenderbot"),y4r=o(" \u2014 "),rW=a("a"),L4r=o("FlaxBlenderbotModel"),x4r=o(" (Blenderbot model)"),k4r=l(),BM=a("li"),e5e=a("strong"),S4r=o("blenderbot-small"),R4r=o(" \u2014 "),tW=a("a"),B4r=o("FlaxBlenderbotSmallModel"),P4r=o(" (BlenderbotSmall model)"),$4r=l(),PM=a("li"),o5e=a("strong"),I4r=o("clip"),q4r=o(" \u2014 "),aW=a("a"),N4r=o("FlaxCLIPModel"),j4r=o(" (CLIP model)"),D4r=l(),$M=a("li"),r5e=a("strong"),G4r=o("distilbert"),O4r=o(" \u2014 "),nW=a("a"),V4r=o("FlaxDistilBertModel"),X4r=o(" (DistilBERT model)"),z4r=l(),IM=a("li"),t5e=a("strong"),Q4r=o("electra"),W4r=o(" \u2014 "),sW=a("a"),H4r=o("FlaxElectraModel"),U4r=o(" (ELECTRA model)"),J4r=l(),qM=a("li"),a5e=a("strong"),Y4r=o("gpt2"),K4r=o(" \u2014 "),lW=a("a"),Z4r=o("FlaxGPT2Model"),eEr=o(" (OpenAI GPT-2 model)"),oEr=l(),NM=a("li"),n5e=a("strong"),rEr=o("gpt_neo"),tEr=o(" \u2014 "),iW=a("a"),aEr=o("FlaxGPTNeoModel"),nEr=o(" (GPT Neo model)"),sEr=l(),jM=a("li"),s5e=a("strong"),lEr=o("gptj"),iEr=o(" \u2014 "),dW=a("a"),dEr=o("FlaxGPTJModel"),cEr=o(" (GPT-J model)"),fEr=l(),DM=a("li"),l5e=a("strong"),mEr=o("marian"),gEr=o(" \u2014 "),cW=a("a"),hEr=o("FlaxMarianModel"),pEr=o(" (Marian model)"),_Er=l(),GM=a("li"),i5e=a("strong"),uEr=o("mbart"),bEr=o(" \u2014 "),fW=a("a"),vEr=o("FlaxMBartModel"),FEr=o(" (mBART model)"),TEr=l(),OM=a("li"),d5e=a("strong"),MEr=o("mt5"),EEr=o(" \u2014 "),mW=a("a"),CEr=o("FlaxMT5Model"),wEr=o(" (mT5 model)"),AEr=l(),VM=a("li"),c5e=a("strong"),yEr=o("pegasus"),LEr=o(" \u2014 "),gW=a("a"),xEr=o("FlaxPegasusModel"),kEr=o(" (Pegasus model)"),SEr=l(),XM=a("li"),f5e=a("strong"),REr=o("roberta"),BEr=o(" \u2014 "),hW=a("a"),PEr=o("FlaxRobertaModel"),$Er=o(" (RoBERTa model)"),IEr=l(),zM=a("li"),m5e=a("strong"),qEr=o("roformer"),NEr=o(" \u2014 "),pW=a("a"),jEr=o("FlaxRoFormerModel"),DEr=o(" (RoFormer model)"),GEr=l(),QM=a("li"),g5e=a("strong"),OEr=o("t5"),VEr=o(" \u2014 "),_W=a("a"),XEr=o("FlaxT5Model"),zEr=o(" (T5 model)"),QEr=l(),WM=a("li"),h5e=a("strong"),WEr=o("vision-text-dual-encoder"),HEr=o(" \u2014 "),uW=a("a"),UEr=o("FlaxVisionTextDualEncoderModel"),JEr=o(" (VisionTextDualEncoder model)"),YEr=l(),HM=a("li"),p5e=a("strong"),KEr=o("vit"),ZEr=o(" \u2014 "),bW=a("a"),eCr=o("FlaxViTModel"),oCr=o(" (ViT model)"),rCr=l(),UM=a("li"),_5e=a("strong"),tCr=o("wav2vec2"),aCr=o(" \u2014 "),vW=a("a"),nCr=o("FlaxWav2Vec2Model"),sCr=o(" (Wav2Vec2 model)"),lCr=l(),JM=a("li"),u5e=a("strong"),iCr=o("xglm"),dCr=o(" \u2014 "),FW=a("a"),cCr=o("FlaxXGLMModel"),fCr=o(" (XGLM model)"),mCr=l(),YM=a("li"),b5e=a("strong"),gCr=o("xlm-roberta"),hCr=o(" \u2014 "),TW=a("a"),pCr=o("FlaxXLMRobertaModel"),_Cr=o(" (XLM-RoBERTa model)"),uCr=l(),v5e=a("p"),bCr=o("Examples:"),vCr=l(),f(o8.$$.fragment),MPe=l(),of=a("h2"),KM=a("a"),F5e=a("span"),f(r8.$$.fragment),FCr=l(),T5e=a("span"),TCr=o("FlaxAutoModelForCausalLM"),EPe=l(),Br=a("div"),f(t8.$$.fragment),MCr=l(),rf=a("p"),ECr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MW=a("a"),CCr=o("from_pretrained()"),wCr=o(" class method or the "),EW=a("a"),ACr=o("from_config()"),yCr=o(` class
method.`),LCr=l(),a8=a("p"),xCr=o("This class cannot be instantiated directly using "),M5e=a("code"),kCr=o("__init__()"),SCr=o(" (throws an error)."),RCr=l(),yt=a("div"),f(n8.$$.fragment),BCr=l(),E5e=a("p"),PCr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),$Cr=l(),tf=a("p"),ICr=o(`Note:
Loading a model from its configuration file does `),C5e=a("strong"),qCr=o("not"),NCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=a("a"),jCr=o("from_pretrained()"),DCr=o(" to load the model weights."),GCr=l(),w5e=a("p"),OCr=o("Examples:"),VCr=l(),f(s8.$$.fragment),XCr=l(),Lo=a("div"),f(l8.$$.fragment),zCr=l(),A5e=a("p"),QCr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),WCr=l(),Sn=a("p"),HCr=o("The model class to instantiate is selected based on the "),y5e=a("code"),UCr=o("model_type"),JCr=o(` property of the config object (either
passed as an argument or loaded from `),L5e=a("code"),YCr=o("pretrained_model_name_or_path"),KCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=a("code"),ZCr=o("pretrained_model_name_or_path"),ewr=o(":"),owr=l(),ca=a("ul"),ZM=a("li"),k5e=a("strong"),rwr=o("bart"),twr=o(" \u2014 "),wW=a("a"),awr=o("FlaxBartForCausalLM"),nwr=o(" (BART model)"),swr=l(),e4=a("li"),S5e=a("strong"),lwr=o("gpt2"),iwr=o(" \u2014 "),AW=a("a"),dwr=o("FlaxGPT2LMHeadModel"),cwr=o(" (OpenAI GPT-2 model)"),fwr=l(),o4=a("li"),R5e=a("strong"),mwr=o("gpt_neo"),gwr=o(" \u2014 "),yW=a("a"),hwr=o("FlaxGPTNeoForCausalLM"),pwr=o(" (GPT Neo model)"),_wr=l(),r4=a("li"),B5e=a("strong"),uwr=o("gptj"),bwr=o(" \u2014 "),LW=a("a"),vwr=o("FlaxGPTJForCausalLM"),Fwr=o(" (GPT-J model)"),Twr=l(),t4=a("li"),P5e=a("strong"),Mwr=o("xglm"),Ewr=o(" \u2014 "),xW=a("a"),Cwr=o("FlaxXGLMForCausalLM"),wwr=o(" (XGLM model)"),Awr=l(),$5e=a("p"),ywr=o("Examples:"),Lwr=l(),f(i8.$$.fragment),CPe=l(),af=a("h2"),a4=a("a"),I5e=a("span"),f(d8.$$.fragment),xwr=l(),q5e=a("span"),kwr=o("FlaxAutoModelForPreTraining"),wPe=l(),Pr=a("div"),f(c8.$$.fragment),Swr=l(),nf=a("p"),Rwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kW=a("a"),Bwr=o("from_pretrained()"),Pwr=o(" class method or the "),SW=a("a"),$wr=o("from_config()"),Iwr=o(` class
method.`),qwr=l(),f8=a("p"),Nwr=o("This class cannot be instantiated directly using "),N5e=a("code"),jwr=o("__init__()"),Dwr=o(" (throws an error)."),Gwr=l(),Lt=a("div"),f(m8.$$.fragment),Owr=l(),j5e=a("p"),Vwr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Xwr=l(),sf=a("p"),zwr=o(`Note:
Loading a model from its configuration file does `),D5e=a("strong"),Qwr=o("not"),Wwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=a("a"),Hwr=o("from_pretrained()"),Uwr=o(" to load the model weights."),Jwr=l(),G5e=a("p"),Ywr=o("Examples:"),Kwr=l(),f(g8.$$.fragment),Zwr=l(),xo=a("div"),f(h8.$$.fragment),e6r=l(),O5e=a("p"),o6r=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),r6r=l(),Rn=a("p"),t6r=o("The model class to instantiate is selected based on the "),V5e=a("code"),a6r=o("model_type"),n6r=o(` property of the config object (either
passed as an argument or loaded from `),X5e=a("code"),s6r=o("pretrained_model_name_or_path"),l6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=a("code"),i6r=o("pretrained_model_name_or_path"),d6r=o(":"),c6r=l(),me=a("ul"),n4=a("li"),Q5e=a("strong"),f6r=o("albert"),m6r=o(" \u2014 "),BW=a("a"),g6r=o("FlaxAlbertForPreTraining"),h6r=o(" (ALBERT model)"),p6r=l(),s4=a("li"),W5e=a("strong"),_6r=o("bart"),u6r=o(" \u2014 "),PW=a("a"),b6r=o("FlaxBartForConditionalGeneration"),v6r=o(" (BART model)"),F6r=l(),l4=a("li"),H5e=a("strong"),T6r=o("bert"),M6r=o(" \u2014 "),$W=a("a"),E6r=o("FlaxBertForPreTraining"),C6r=o(" (BERT model)"),w6r=l(),i4=a("li"),U5e=a("strong"),A6r=o("big_bird"),y6r=o(" \u2014 "),IW=a("a"),L6r=o("FlaxBigBirdForPreTraining"),x6r=o(" (BigBird model)"),k6r=l(),d4=a("li"),J5e=a("strong"),S6r=o("electra"),R6r=o(" \u2014 "),qW=a("a"),B6r=o("FlaxElectraForPreTraining"),P6r=o(" (ELECTRA model)"),$6r=l(),c4=a("li"),Y5e=a("strong"),I6r=o("mbart"),q6r=o(" \u2014 "),NW=a("a"),N6r=o("FlaxMBartForConditionalGeneration"),j6r=o(" (mBART model)"),D6r=l(),f4=a("li"),K5e=a("strong"),G6r=o("mt5"),O6r=o(" \u2014 "),jW=a("a"),V6r=o("FlaxMT5ForConditionalGeneration"),X6r=o(" (mT5 model)"),z6r=l(),m4=a("li"),Z5e=a("strong"),Q6r=o("roberta"),W6r=o(" \u2014 "),DW=a("a"),H6r=o("FlaxRobertaForMaskedLM"),U6r=o(" (RoBERTa model)"),J6r=l(),g4=a("li"),e3e=a("strong"),Y6r=o("roformer"),K6r=o(" \u2014 "),GW=a("a"),Z6r=o("FlaxRoFormerForMaskedLM"),eAr=o(" (RoFormer model)"),oAr=l(),h4=a("li"),o3e=a("strong"),rAr=o("t5"),tAr=o(" \u2014 "),OW=a("a"),aAr=o("FlaxT5ForConditionalGeneration"),nAr=o(" (T5 model)"),sAr=l(),p4=a("li"),r3e=a("strong"),lAr=o("wav2vec2"),iAr=o(" \u2014 "),VW=a("a"),dAr=o("FlaxWav2Vec2ForPreTraining"),cAr=o(" (Wav2Vec2 model)"),fAr=l(),_4=a("li"),t3e=a("strong"),mAr=o("xlm-roberta"),gAr=o(" \u2014 "),XW=a("a"),hAr=o("FlaxXLMRobertaForMaskedLM"),pAr=o(" (XLM-RoBERTa model)"),_Ar=l(),a3e=a("p"),uAr=o("Examples:"),bAr=l(),f(p8.$$.fragment),APe=l(),lf=a("h2"),u4=a("a"),n3e=a("span"),f(_8.$$.fragment),vAr=l(),s3e=a("span"),FAr=o("FlaxAutoModelForMaskedLM"),yPe=l(),$r=a("div"),f(u8.$$.fragment),TAr=l(),df=a("p"),MAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zW=a("a"),EAr=o("from_pretrained()"),CAr=o(" class method or the "),QW=a("a"),wAr=o("from_config()"),AAr=o(` class
method.`),yAr=l(),b8=a("p"),LAr=o("This class cannot be instantiated directly using "),l3e=a("code"),xAr=o("__init__()"),kAr=o(" (throws an error)."),SAr=l(),xt=a("div"),f(v8.$$.fragment),RAr=l(),i3e=a("p"),BAr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),PAr=l(),cf=a("p"),$Ar=o(`Note:
Loading a model from its configuration file does `),d3e=a("strong"),IAr=o("not"),qAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=a("a"),NAr=o("from_pretrained()"),jAr=o(" to load the model weights."),DAr=l(),c3e=a("p"),GAr=o("Examples:"),OAr=l(),f(F8.$$.fragment),VAr=l(),ko=a("div"),f(T8.$$.fragment),XAr=l(),f3e=a("p"),zAr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),QAr=l(),Bn=a("p"),WAr=o("The model class to instantiate is selected based on the "),m3e=a("code"),HAr=o("model_type"),UAr=o(` property of the config object (either
passed as an argument or loaded from `),g3e=a("code"),JAr=o("pretrained_model_name_or_path"),YAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=a("code"),KAr=o("pretrained_model_name_or_path"),ZAr=o(":"),e0r=l(),ve=a("ul"),b4=a("li"),p3e=a("strong"),o0r=o("albert"),r0r=o(" \u2014 "),HW=a("a"),t0r=o("FlaxAlbertForMaskedLM"),a0r=o(" (ALBERT model)"),n0r=l(),v4=a("li"),_3e=a("strong"),s0r=o("bart"),l0r=o(" \u2014 "),UW=a("a"),i0r=o("FlaxBartForConditionalGeneration"),d0r=o(" (BART model)"),c0r=l(),F4=a("li"),u3e=a("strong"),f0r=o("bert"),m0r=o(" \u2014 "),JW=a("a"),g0r=o("FlaxBertForMaskedLM"),h0r=o(" (BERT model)"),p0r=l(),T4=a("li"),b3e=a("strong"),_0r=o("big_bird"),u0r=o(" \u2014 "),YW=a("a"),b0r=o("FlaxBigBirdForMaskedLM"),v0r=o(" (BigBird model)"),F0r=l(),M4=a("li"),v3e=a("strong"),T0r=o("distilbert"),M0r=o(" \u2014 "),KW=a("a"),E0r=o("FlaxDistilBertForMaskedLM"),C0r=o(" (DistilBERT model)"),w0r=l(),E4=a("li"),F3e=a("strong"),A0r=o("electra"),y0r=o(" \u2014 "),ZW=a("a"),L0r=o("FlaxElectraForMaskedLM"),x0r=o(" (ELECTRA model)"),k0r=l(),C4=a("li"),T3e=a("strong"),S0r=o("mbart"),R0r=o(" \u2014 "),eH=a("a"),B0r=o("FlaxMBartForConditionalGeneration"),P0r=o(" (mBART model)"),$0r=l(),w4=a("li"),M3e=a("strong"),I0r=o("roberta"),q0r=o(" \u2014 "),oH=a("a"),N0r=o("FlaxRobertaForMaskedLM"),j0r=o(" (RoBERTa model)"),D0r=l(),A4=a("li"),E3e=a("strong"),G0r=o("roformer"),O0r=o(" \u2014 "),rH=a("a"),V0r=o("FlaxRoFormerForMaskedLM"),X0r=o(" (RoFormer model)"),z0r=l(),y4=a("li"),C3e=a("strong"),Q0r=o("xlm-roberta"),W0r=o(" \u2014 "),tH=a("a"),H0r=o("FlaxXLMRobertaForMaskedLM"),U0r=o(" (XLM-RoBERTa model)"),J0r=l(),w3e=a("p"),Y0r=o("Examples:"),K0r=l(),f(M8.$$.fragment),LPe=l(),ff=a("h2"),L4=a("a"),A3e=a("span"),f(E8.$$.fragment),Z0r=l(),y3e=a("span"),eyr=o("FlaxAutoModelForSeq2SeqLM"),xPe=l(),Ir=a("div"),f(C8.$$.fragment),oyr=l(),mf=a("p"),ryr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aH=a("a"),tyr=o("from_pretrained()"),ayr=o(" class method or the "),nH=a("a"),nyr=o("from_config()"),syr=o(` class
method.`),lyr=l(),w8=a("p"),iyr=o("This class cannot be instantiated directly using "),L3e=a("code"),dyr=o("__init__()"),cyr=o(" (throws an error)."),fyr=l(),kt=a("div"),f(A8.$$.fragment),myr=l(),x3e=a("p"),gyr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),hyr=l(),gf=a("p"),pyr=o(`Note:
Loading a model from its configuration file does `),k3e=a("strong"),_yr=o("not"),uyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=a("a"),byr=o("from_pretrained()"),vyr=o(" to load the model weights."),Fyr=l(),S3e=a("p"),Tyr=o("Examples:"),Myr=l(),f(y8.$$.fragment),Eyr=l(),So=a("div"),f(L8.$$.fragment),Cyr=l(),R3e=a("p"),wyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ayr=l(),Pn=a("p"),yyr=o("The model class to instantiate is selected based on the "),B3e=a("code"),Lyr=o("model_type"),xyr=o(` property of the config object (either
passed as an argument or loaded from `),P3e=a("code"),kyr=o("pretrained_model_name_or_path"),Syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=a("code"),Ryr=o("pretrained_model_name_or_path"),Byr=o(":"),Pyr=l(),Ee=a("ul"),x4=a("li"),I3e=a("strong"),$yr=o("bart"),Iyr=o(" \u2014 "),lH=a("a"),qyr=o("FlaxBartForConditionalGeneration"),Nyr=o(" (BART model)"),jyr=l(),k4=a("li"),q3e=a("strong"),Dyr=o("blenderbot"),Gyr=o(" \u2014 "),iH=a("a"),Oyr=o("FlaxBlenderbotForConditionalGeneration"),Vyr=o(" (Blenderbot model)"),Xyr=l(),S4=a("li"),N3e=a("strong"),zyr=o("blenderbot-small"),Qyr=o(" \u2014 "),dH=a("a"),Wyr=o("FlaxBlenderbotSmallForConditionalGeneration"),Hyr=o(" (BlenderbotSmall model)"),Uyr=l(),R4=a("li"),j3e=a("strong"),Jyr=o("encoder-decoder"),Yyr=o(" \u2014 "),cH=a("a"),Kyr=o("FlaxEncoderDecoderModel"),Zyr=o(" (Encoder decoder model)"),e8r=l(),B4=a("li"),D3e=a("strong"),o8r=o("marian"),r8r=o(" \u2014 "),fH=a("a"),t8r=o("FlaxMarianMTModel"),a8r=o(" (Marian model)"),n8r=l(),P4=a("li"),G3e=a("strong"),s8r=o("mbart"),l8r=o(" \u2014 "),mH=a("a"),i8r=o("FlaxMBartForConditionalGeneration"),d8r=o(" (mBART model)"),c8r=l(),$4=a("li"),O3e=a("strong"),f8r=o("mt5"),m8r=o(" \u2014 "),gH=a("a"),g8r=o("FlaxMT5ForConditionalGeneration"),h8r=o(" (mT5 model)"),p8r=l(),I4=a("li"),V3e=a("strong"),_8r=o("pegasus"),u8r=o(" \u2014 "),hH=a("a"),b8r=o("FlaxPegasusForConditionalGeneration"),v8r=o(" (Pegasus model)"),F8r=l(),q4=a("li"),X3e=a("strong"),T8r=o("t5"),M8r=o(" \u2014 "),pH=a("a"),E8r=o("FlaxT5ForConditionalGeneration"),C8r=o(" (T5 model)"),w8r=l(),z3e=a("p"),A8r=o("Examples:"),y8r=l(),f(x8.$$.fragment),kPe=l(),hf=a("h2"),N4=a("a"),Q3e=a("span"),f(k8.$$.fragment),L8r=l(),W3e=a("span"),x8r=o("FlaxAutoModelForSequenceClassification"),SPe=l(),qr=a("div"),f(S8.$$.fragment),k8r=l(),pf=a("p"),S8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_H=a("a"),R8r=o("from_pretrained()"),B8r=o(" class method or the "),uH=a("a"),P8r=o("from_config()"),$8r=o(` class
method.`),I8r=l(),R8=a("p"),q8r=o("This class cannot be instantiated directly using "),H3e=a("code"),N8r=o("__init__()"),j8r=o(" (throws an error)."),D8r=l(),St=a("div"),f(B8.$$.fragment),G8r=l(),U3e=a("p"),O8r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),V8r=l(),_f=a("p"),X8r=o(`Note:
Loading a model from its configuration file does `),J3e=a("strong"),z8r=o("not"),Q8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=a("a"),W8r=o("from_pretrained()"),H8r=o(" to load the model weights."),U8r=l(),Y3e=a("p"),J8r=o("Examples:"),Y8r=l(),f(P8.$$.fragment),K8r=l(),Ro=a("div"),f($8.$$.fragment),Z8r=l(),K3e=a("p"),eLr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oLr=l(),$n=a("p"),rLr=o("The model class to instantiate is selected based on the "),Z3e=a("code"),tLr=o("model_type"),aLr=o(` property of the config object (either
passed as an argument or loaded from `),eve=a("code"),nLr=o("pretrained_model_name_or_path"),sLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=a("code"),lLr=o("pretrained_model_name_or_path"),iLr=o(":"),dLr=l(),Fe=a("ul"),j4=a("li"),rve=a("strong"),cLr=o("albert"),fLr=o(" \u2014 "),vH=a("a"),mLr=o("FlaxAlbertForSequenceClassification"),gLr=o(" (ALBERT model)"),hLr=l(),D4=a("li"),tve=a("strong"),pLr=o("bart"),_Lr=o(" \u2014 "),FH=a("a"),uLr=o("FlaxBartForSequenceClassification"),bLr=o(" (BART model)"),vLr=l(),G4=a("li"),ave=a("strong"),FLr=o("bert"),TLr=o(" \u2014 "),TH=a("a"),MLr=o("FlaxBertForSequenceClassification"),ELr=o(" (BERT model)"),CLr=l(),O4=a("li"),nve=a("strong"),wLr=o("big_bird"),ALr=o(" \u2014 "),MH=a("a"),yLr=o("FlaxBigBirdForSequenceClassification"),LLr=o(" (BigBird model)"),xLr=l(),V4=a("li"),sve=a("strong"),kLr=o("distilbert"),SLr=o(" \u2014 "),EH=a("a"),RLr=o("FlaxDistilBertForSequenceClassification"),BLr=o(" (DistilBERT model)"),PLr=l(),X4=a("li"),lve=a("strong"),$Lr=o("electra"),ILr=o(" \u2014 "),CH=a("a"),qLr=o("FlaxElectraForSequenceClassification"),NLr=o(" (ELECTRA model)"),jLr=l(),z4=a("li"),ive=a("strong"),DLr=o("mbart"),GLr=o(" \u2014 "),wH=a("a"),OLr=o("FlaxMBartForSequenceClassification"),VLr=o(" (mBART model)"),XLr=l(),Q4=a("li"),dve=a("strong"),zLr=o("roberta"),QLr=o(" \u2014 "),AH=a("a"),WLr=o("FlaxRobertaForSequenceClassification"),HLr=o(" (RoBERTa model)"),ULr=l(),W4=a("li"),cve=a("strong"),JLr=o("roformer"),YLr=o(" \u2014 "),yH=a("a"),KLr=o("FlaxRoFormerForSequenceClassification"),ZLr=o(" (RoFormer model)"),e9r=l(),H4=a("li"),fve=a("strong"),o9r=o("xlm-roberta"),r9r=o(" \u2014 "),LH=a("a"),t9r=o("FlaxXLMRobertaForSequenceClassification"),a9r=o(" (XLM-RoBERTa model)"),n9r=l(),mve=a("p"),s9r=o("Examples:"),l9r=l(),f(I8.$$.fragment),RPe=l(),uf=a("h2"),U4=a("a"),gve=a("span"),f(q8.$$.fragment),i9r=l(),hve=a("span"),d9r=o("FlaxAutoModelForQuestionAnswering"),BPe=l(),Nr=a("div"),f(N8.$$.fragment),c9r=l(),bf=a("p"),f9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xH=a("a"),m9r=o("from_pretrained()"),g9r=o(" class method or the "),kH=a("a"),h9r=o("from_config()"),p9r=o(` class
method.`),_9r=l(),j8=a("p"),u9r=o("This class cannot be instantiated directly using "),pve=a("code"),b9r=o("__init__()"),v9r=o(" (throws an error)."),F9r=l(),Rt=a("div"),f(D8.$$.fragment),T9r=l(),_ve=a("p"),M9r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E9r=l(),vf=a("p"),C9r=o(`Note:
Loading a model from its configuration file does `),uve=a("strong"),w9r=o("not"),A9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=a("a"),y9r=o("from_pretrained()"),L9r=o(" to load the model weights."),x9r=l(),bve=a("p"),k9r=o("Examples:"),S9r=l(),f(G8.$$.fragment),R9r=l(),Bo=a("div"),f(O8.$$.fragment),B9r=l(),vve=a("p"),P9r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$9r=l(),In=a("p"),I9r=o("The model class to instantiate is selected based on the "),Fve=a("code"),q9r=o("model_type"),N9r=o(` property of the config object (either
passed as an argument or loaded from `),Tve=a("code"),j9r=o("pretrained_model_name_or_path"),D9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=a("code"),G9r=o("pretrained_model_name_or_path"),O9r=o(":"),V9r=l(),Te=a("ul"),J4=a("li"),Eve=a("strong"),X9r=o("albert"),z9r=o(" \u2014 "),RH=a("a"),Q9r=o("FlaxAlbertForQuestionAnswering"),W9r=o(" (ALBERT model)"),H9r=l(),Y4=a("li"),Cve=a("strong"),U9r=o("bart"),J9r=o(" \u2014 "),BH=a("a"),Y9r=o("FlaxBartForQuestionAnswering"),K9r=o(" (BART model)"),Z9r=l(),K4=a("li"),wve=a("strong"),exr=o("bert"),oxr=o(" \u2014 "),PH=a("a"),rxr=o("FlaxBertForQuestionAnswering"),txr=o(" (BERT model)"),axr=l(),Z4=a("li"),Ave=a("strong"),nxr=o("big_bird"),sxr=o(" \u2014 "),$H=a("a"),lxr=o("FlaxBigBirdForQuestionAnswering"),ixr=o(" (BigBird model)"),dxr=l(),eE=a("li"),yve=a("strong"),cxr=o("distilbert"),fxr=o(" \u2014 "),IH=a("a"),mxr=o("FlaxDistilBertForQuestionAnswering"),gxr=o(" (DistilBERT model)"),hxr=l(),oE=a("li"),Lve=a("strong"),pxr=o("electra"),_xr=o(" \u2014 "),qH=a("a"),uxr=o("FlaxElectraForQuestionAnswering"),bxr=o(" (ELECTRA model)"),vxr=l(),rE=a("li"),xve=a("strong"),Fxr=o("mbart"),Txr=o(" \u2014 "),NH=a("a"),Mxr=o("FlaxMBartForQuestionAnswering"),Exr=o(" (mBART model)"),Cxr=l(),tE=a("li"),kve=a("strong"),wxr=o("roberta"),Axr=o(" \u2014 "),jH=a("a"),yxr=o("FlaxRobertaForQuestionAnswering"),Lxr=o(" (RoBERTa model)"),xxr=l(),aE=a("li"),Sve=a("strong"),kxr=o("roformer"),Sxr=o(" \u2014 "),DH=a("a"),Rxr=o("FlaxRoFormerForQuestionAnswering"),Bxr=o(" (RoFormer model)"),Pxr=l(),nE=a("li"),Rve=a("strong"),$xr=o("xlm-roberta"),Ixr=o(" \u2014 "),GH=a("a"),qxr=o("FlaxXLMRobertaForQuestionAnswering"),Nxr=o(" (XLM-RoBERTa model)"),jxr=l(),Bve=a("p"),Dxr=o("Examples:"),Gxr=l(),f(V8.$$.fragment),PPe=l(),Ff=a("h2"),sE=a("a"),Pve=a("span"),f(X8.$$.fragment),Oxr=l(),$ve=a("span"),Vxr=o("FlaxAutoModelForTokenClassification"),$Pe=l(),jr=a("div"),f(z8.$$.fragment),Xxr=l(),Tf=a("p"),zxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=a("a"),Qxr=o("from_pretrained()"),Wxr=o(" class method or the "),VH=a("a"),Hxr=o("from_config()"),Uxr=o(` class
method.`),Jxr=l(),Q8=a("p"),Yxr=o("This class cannot be instantiated directly using "),Ive=a("code"),Kxr=o("__init__()"),Zxr=o(" (throws an error)."),ekr=l(),Bt=a("div"),f(W8.$$.fragment),okr=l(),qve=a("p"),rkr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),tkr=l(),Mf=a("p"),akr=o(`Note:
Loading a model from its configuration file does `),Nve=a("strong"),nkr=o("not"),skr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=a("a"),lkr=o("from_pretrained()"),ikr=o(" to load the model weights."),dkr=l(),jve=a("p"),ckr=o("Examples:"),fkr=l(),f(H8.$$.fragment),mkr=l(),Po=a("div"),f(U8.$$.fragment),gkr=l(),Dve=a("p"),hkr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),pkr=l(),qn=a("p"),_kr=o("The model class to instantiate is selected based on the "),Gve=a("code"),ukr=o("model_type"),bkr=o(` property of the config object (either
passed as an argument or loaded from `),Ove=a("code"),vkr=o("pretrained_model_name_or_path"),Fkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=a("code"),Tkr=o("pretrained_model_name_or_path"),Mkr=o(":"),Ekr=l(),Be=a("ul"),lE=a("li"),Xve=a("strong"),Ckr=o("albert"),wkr=o(" \u2014 "),zH=a("a"),Akr=o("FlaxAlbertForTokenClassification"),ykr=o(" (ALBERT model)"),Lkr=l(),iE=a("li"),zve=a("strong"),xkr=o("bert"),kkr=o(" \u2014 "),QH=a("a"),Skr=o("FlaxBertForTokenClassification"),Rkr=o(" (BERT model)"),Bkr=l(),dE=a("li"),Qve=a("strong"),Pkr=o("big_bird"),$kr=o(" \u2014 "),WH=a("a"),Ikr=o("FlaxBigBirdForTokenClassification"),qkr=o(" (BigBird model)"),Nkr=l(),cE=a("li"),Wve=a("strong"),jkr=o("distilbert"),Dkr=o(" \u2014 "),HH=a("a"),Gkr=o("FlaxDistilBertForTokenClassification"),Okr=o(" (DistilBERT model)"),Vkr=l(),fE=a("li"),Hve=a("strong"),Xkr=o("electra"),zkr=o(" \u2014 "),UH=a("a"),Qkr=o("FlaxElectraForTokenClassification"),Wkr=o(" (ELECTRA model)"),Hkr=l(),mE=a("li"),Uve=a("strong"),Ukr=o("roberta"),Jkr=o(" \u2014 "),JH=a("a"),Ykr=o("FlaxRobertaForTokenClassification"),Kkr=o(" (RoBERTa model)"),Zkr=l(),gE=a("li"),Jve=a("strong"),eSr=o("roformer"),oSr=o(" \u2014 "),YH=a("a"),rSr=o("FlaxRoFormerForTokenClassification"),tSr=o(" (RoFormer model)"),aSr=l(),hE=a("li"),Yve=a("strong"),nSr=o("xlm-roberta"),sSr=o(" \u2014 "),KH=a("a"),lSr=o("FlaxXLMRobertaForTokenClassification"),iSr=o(" (XLM-RoBERTa model)"),dSr=l(),Kve=a("p"),cSr=o("Examples:"),fSr=l(),f(J8.$$.fragment),IPe=l(),Ef=a("h2"),pE=a("a"),Zve=a("span"),f(Y8.$$.fragment),mSr=l(),eFe=a("span"),gSr=o("FlaxAutoModelForMultipleChoice"),qPe=l(),Dr=a("div"),f(K8.$$.fragment),hSr=l(),Cf=a("p"),pSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZH=a("a"),_Sr=o("from_pretrained()"),uSr=o(" class method or the "),eU=a("a"),bSr=o("from_config()"),vSr=o(` class
method.`),FSr=l(),Z8=a("p"),TSr=o("This class cannot be instantiated directly using "),oFe=a("code"),MSr=o("__init__()"),ESr=o(" (throws an error)."),CSr=l(),Pt=a("div"),f(eL.$$.fragment),wSr=l(),rFe=a("p"),ASr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),ySr=l(),wf=a("p"),LSr=o(`Note:
Loading a model from its configuration file does `),tFe=a("strong"),xSr=o("not"),kSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),SSr=o("from_pretrained()"),RSr=o(" to load the model weights."),BSr=l(),aFe=a("p"),PSr=o("Examples:"),$Sr=l(),f(oL.$$.fragment),ISr=l(),$o=a("div"),f(rL.$$.fragment),qSr=l(),nFe=a("p"),NSr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),jSr=l(),Nn=a("p"),DSr=o("The model class to instantiate is selected based on the "),sFe=a("code"),GSr=o("model_type"),OSr=o(` property of the config object (either
passed as an argument or loaded from `),lFe=a("code"),VSr=o("pretrained_model_name_or_path"),XSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=a("code"),zSr=o("pretrained_model_name_or_path"),QSr=o(":"),WSr=l(),Pe=a("ul"),_E=a("li"),dFe=a("strong"),HSr=o("albert"),USr=o(" \u2014 "),rU=a("a"),JSr=o("FlaxAlbertForMultipleChoice"),YSr=o(" (ALBERT model)"),KSr=l(),uE=a("li"),cFe=a("strong"),ZSr=o("bert"),eRr=o(" \u2014 "),tU=a("a"),oRr=o("FlaxBertForMultipleChoice"),rRr=o(" (BERT model)"),tRr=l(),bE=a("li"),fFe=a("strong"),aRr=o("big_bird"),nRr=o(" \u2014 "),aU=a("a"),sRr=o("FlaxBigBirdForMultipleChoice"),lRr=o(" (BigBird model)"),iRr=l(),vE=a("li"),mFe=a("strong"),dRr=o("distilbert"),cRr=o(" \u2014 "),nU=a("a"),fRr=o("FlaxDistilBertForMultipleChoice"),mRr=o(" (DistilBERT model)"),gRr=l(),FE=a("li"),gFe=a("strong"),hRr=o("electra"),pRr=o(" \u2014 "),sU=a("a"),_Rr=o("FlaxElectraForMultipleChoice"),uRr=o(" (ELECTRA model)"),bRr=l(),TE=a("li"),hFe=a("strong"),vRr=o("roberta"),FRr=o(" \u2014 "),lU=a("a"),TRr=o("FlaxRobertaForMultipleChoice"),MRr=o(" (RoBERTa model)"),ERr=l(),ME=a("li"),pFe=a("strong"),CRr=o("roformer"),wRr=o(" \u2014 "),iU=a("a"),ARr=o("FlaxRoFormerForMultipleChoice"),yRr=o(" (RoFormer model)"),LRr=l(),EE=a("li"),_Fe=a("strong"),xRr=o("xlm-roberta"),kRr=o(" \u2014 "),dU=a("a"),SRr=o("FlaxXLMRobertaForMultipleChoice"),RRr=o(" (XLM-RoBERTa model)"),BRr=l(),uFe=a("p"),PRr=o("Examples:"),$Rr=l(),f(tL.$$.fragment),NPe=l(),Af=a("h2"),CE=a("a"),bFe=a("span"),f(aL.$$.fragment),IRr=l(),vFe=a("span"),qRr=o("FlaxAutoModelForNextSentencePrediction"),jPe=l(),Gr=a("div"),f(nL.$$.fragment),NRr=l(),yf=a("p"),jRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cU=a("a"),DRr=o("from_pretrained()"),GRr=o(" class method or the "),fU=a("a"),ORr=o("from_config()"),VRr=o(` class
method.`),XRr=l(),sL=a("p"),zRr=o("This class cannot be instantiated directly using "),FFe=a("code"),QRr=o("__init__()"),WRr=o(" (throws an error)."),HRr=l(),$t=a("div"),f(lL.$$.fragment),URr=l(),TFe=a("p"),JRr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),YRr=l(),Lf=a("p"),KRr=o(`Note:
Loading a model from its configuration file does `),MFe=a("strong"),ZRr=o("not"),eBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=a("a"),oBr=o("from_pretrained()"),rBr=o(" to load the model weights."),tBr=l(),EFe=a("p"),aBr=o("Examples:"),nBr=l(),f(iL.$$.fragment),sBr=l(),Io=a("div"),f(dL.$$.fragment),lBr=l(),CFe=a("p"),iBr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),dBr=l(),jn=a("p"),cBr=o("The model class to instantiate is selected based on the "),wFe=a("code"),fBr=o("model_type"),mBr=o(` property of the config object (either
passed as an argument or loaded from `),AFe=a("code"),gBr=o("pretrained_model_name_or_path"),hBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=a("code"),pBr=o("pretrained_model_name_or_path"),_Br=o(":"),uBr=l(),LFe=a("ul"),wE=a("li"),xFe=a("strong"),bBr=o("bert"),vBr=o(" \u2014 "),gU=a("a"),FBr=o("FlaxBertForNextSentencePrediction"),TBr=o(" (BERT model)"),MBr=l(),kFe=a("p"),EBr=o("Examples:"),CBr=l(),f(cL.$$.fragment),DPe=l(),xf=a("h2"),AE=a("a"),SFe=a("span"),f(fL.$$.fragment),wBr=l(),RFe=a("span"),ABr=o("FlaxAutoModelForImageClassification"),GPe=l(),Or=a("div"),f(mL.$$.fragment),yBr=l(),kf=a("p"),LBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hU=a("a"),xBr=o("from_pretrained()"),kBr=o(" class method or the "),pU=a("a"),SBr=o("from_config()"),RBr=o(` class
method.`),BBr=l(),gL=a("p"),PBr=o("This class cannot be instantiated directly using "),BFe=a("code"),$Br=o("__init__()"),IBr=o(" (throws an error)."),qBr=l(),It=a("div"),f(hL.$$.fragment),NBr=l(),PFe=a("p"),jBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),DBr=l(),Sf=a("p"),GBr=o(`Note:
Loading a model from its configuration file does `),$Fe=a("strong"),OBr=o("not"),VBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=a("a"),XBr=o("from_pretrained()"),zBr=o(" to load the model weights."),QBr=l(),IFe=a("p"),WBr=o("Examples:"),HBr=l(),f(pL.$$.fragment),UBr=l(),qo=a("div"),f(_L.$$.fragment),JBr=l(),qFe=a("p"),YBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),KBr=l(),Dn=a("p"),ZBr=o("The model class to instantiate is selected based on the "),NFe=a("code"),ePr=o("model_type"),oPr=o(` property of the config object (either
passed as an argument or loaded from `),jFe=a("code"),rPr=o("pretrained_model_name_or_path"),tPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=a("code"),aPr=o("pretrained_model_name_or_path"),nPr=o(":"),sPr=l(),uL=a("ul"),yE=a("li"),GFe=a("strong"),lPr=o("beit"),iPr=o(" \u2014 "),uU=a("a"),dPr=o("FlaxBeitForImageClassification"),cPr=o(" (BEiT model)"),fPr=l(),LE=a("li"),OFe=a("strong"),mPr=o("vit"),gPr=o(" \u2014 "),bU=a("a"),hPr=o("FlaxViTForImageClassification"),pPr=o(" (ViT model)"),_Pr=l(),VFe=a("p"),uPr=o("Examples:"),bPr=l(),f(bL.$$.fragment),OPe=l(),Rf=a("h2"),xE=a("a"),XFe=a("span"),f(vL.$$.fragment),vPr=l(),zFe=a("span"),FPr=o("FlaxAutoModelForVision2Seq"),VPe=l(),Vr=a("div"),f(FL.$$.fragment),TPr=l(),Bf=a("p"),MPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=a("a"),EPr=o("from_pretrained()"),CPr=o(" class method or the "),FU=a("a"),wPr=o("from_config()"),APr=o(` class
method.`),yPr=l(),TL=a("p"),LPr=o("This class cannot be instantiated directly using "),QFe=a("code"),xPr=o("__init__()"),kPr=o(" (throws an error)."),SPr=l(),qt=a("div"),f(ML.$$.fragment),RPr=l(),WFe=a("p"),BPr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),PPr=l(),Pf=a("p"),$Pr=o(`Note:
Loading a model from its configuration file does `),HFe=a("strong"),IPr=o("not"),qPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=a("a"),NPr=o("from_pretrained()"),jPr=o(" to load the model weights."),DPr=l(),UFe=a("p"),GPr=o("Examples:"),OPr=l(),f(EL.$$.fragment),VPr=l(),No=a("div"),f(CL.$$.fragment),XPr=l(),JFe=a("p"),zPr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),QPr=l(),Gn=a("p"),WPr=o("The model class to instantiate is selected based on the "),YFe=a("code"),HPr=o("model_type"),UPr=o(` property of the config object (either
passed as an argument or loaded from `),KFe=a("code"),JPr=o("pretrained_model_name_or_path"),YPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=a("code"),KPr=o("pretrained_model_name_or_path"),ZPr=o(":"),e$r=l(),eTe=a("ul"),kE=a("li"),oTe=a("strong"),o$r=o("vision-encoder-decoder"),r$r=o(" \u2014 "),MU=a("a"),t$r=o("FlaxVisionEncoderDecoderModel"),a$r=o(" (Vision Encoder decoder model)"),n$r=l(),rTe=a("p"),s$r=o("Examples:"),l$r=l(),f(wL.$$.fragment),this.h()},l(c){const u=r6t('[data-svelte="svelte-1phssyn"]',document.head);Z=n(u,"META",{name:!0,content:!0}),u.forEach(t),io=i(c),ce=n(c,"H1",{class:!0});var AL=s(ce);Ce=n(AL,"A",{id:!0,class:!0,href:!0});var tTe=s(Ce);lo=n(tTe,"SPAN",{});var aTe=s(lo);m(he.$$.fragment,aTe),aTe.forEach(t),tTe.forEach(t),Me=i(AL),Xo=n(AL,"SPAN",{});var d$r=s(Xo);qi=r(d$r,"Auto Classes"),d$r.forEach(t),AL.forEach(t),qf=i(c),fa=n(c,"P",{});var zPe=s(fa);Ni=r(zPe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ji=n(zPe,"CODE",{});var c$r=s(ji);SC=r(c$r,"from_pretrained()"),c$r.forEach(t),Nf=r(zPe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),zPe.forEach(t),xe=i(c),co=n(c,"P",{});var SE=s(co);Di=r(SE,"Instantiating one of "),On=n(SE,"A",{href:!0});var f$r=s(On);RC=r(f$r,"AutoConfig"),f$r.forEach(t),Vn=r(SE,", "),Xn=n(SE,"A",{href:!0});var m$r=s(Xn);BC=r(m$r,"AutoModel"),m$r.forEach(t),Gi=r(SE,`, and
`),zn=n(SE,"A",{href:!0});var g$r=s(zn);PC=r(g$r,"AutoTokenizer"),g$r.forEach(t),Oi=r(SE," will directly create a class of the relevant architecture. For instance"),SE.forEach(t),jf=i(c),m(Da.$$.fragment,c),fo=i(c),ue=n(c,"P",{});var QPe=s(ue);E9=r(QPe,"will create a model that is an instance of "),Vi=n(QPe,"A",{href:!0});var h$r=s(Vi);C9=r(h$r,"BertModel"),h$r.forEach(t),w9=r(QPe,"."),QPe.forEach(t),zo=i(c),Ga=n(c,"P",{});var WPe=s(Ga);A9=r(WPe,"There is one class of "),Df=n(WPe,"CODE",{});var p$r=s(Df);y9=r(p$r,"AutoModel"),p$r.forEach(t),rqe=r(WPe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),WPe.forEach(t),VRe=i(c),Xi=n(c,"H2",{class:!0});var HPe=s(Xi);Gf=n(HPe,"A",{id:!0,class:!0,href:!0});var _$r=s(Gf);pY=n(_$r,"SPAN",{});var u$r=s(pY);m($C.$$.fragment,u$r),u$r.forEach(t),_$r.forEach(t),tqe=i(HPe),_Y=n(HPe,"SPAN",{});var b$r=s(_Y);aqe=r(b$r,"Extending the Auto Classes"),b$r.forEach(t),HPe.forEach(t),XRe=i(c),Qn=n(c,"P",{});var EU=s(Qn);nqe=r(EU,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),uY=n(EU,"CODE",{});var v$r=s(uY);sqe=r(v$r,"NewModel"),v$r.forEach(t),lqe=r(EU,", make sure you have a "),bY=n(EU,"CODE",{});var F$r=s(bY);iqe=r(F$r,"NewModelConfig"),F$r.forEach(t),dqe=r(EU,` then you can add those to the auto
classes like this:`),EU.forEach(t),zRe=i(c),m(IC.$$.fragment,c),QRe=i(c),L9=n(c,"P",{});var T$r=s(L9);cqe=r(T$r,"You will then be able to use the auto classes like you would usually do!"),T$r.forEach(t),WRe=i(c),m(Of.$$.fragment,c),HRe=i(c),zi=n(c,"H2",{class:!0});var UPe=s(zi);Vf=n(UPe,"A",{id:!0,class:!0,href:!0});var M$r=s(Vf);vY=n(M$r,"SPAN",{});var E$r=s(vY);m(qC.$$.fragment,E$r),E$r.forEach(t),M$r.forEach(t),fqe=i(UPe),FY=n(UPe,"SPAN",{});var C$r=s(FY);mqe=r(C$r,"AutoConfig"),C$r.forEach(t),UPe.forEach(t),URe=i(c),Qo=n(c,"DIV",{class:!0});var Vs=s(Qo);m(NC.$$.fragment,Vs),gqe=i(Vs),jC=n(Vs,"P",{});var JPe=s(jC);hqe=r(JPe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),x9=n(JPe,"A",{href:!0});var w$r=s(x9);pqe=r(w$r,"from_pretrained()"),w$r.forEach(t),_qe=r(JPe," class method."),JPe.forEach(t),uqe=i(Vs),DC=n(Vs,"P",{});var YPe=s(DC);bqe=r(YPe,"This class cannot be instantiated directly using "),TY=n(YPe,"CODE",{});var A$r=s(TY);vqe=r(A$r,"__init__()"),A$r.forEach(t),Fqe=r(YPe," (throws an error)."),YPe.forEach(t),Tqe=i(Vs),mo=n(Vs,"DIV",{class:!0});var ga=s(mo);m(GC.$$.fragment,ga),Mqe=i(ga),MY=n(ga,"P",{});var y$r=s(MY);Eqe=r(y$r,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),y$r.forEach(t),Cqe=i(ga),Qi=n(ga,"P",{});var CU=s(Qi);wqe=r(CU,"The configuration class to instantiate is selected based on the "),EY=n(CU,"CODE",{});var L$r=s(EY);Aqe=r(L$r,"model_type"),L$r.forEach(t),yqe=r(CU,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),CY=n(CU,"CODE",{});var x$r=s(CY);Lqe=r(x$r,"pretrained_model_name_or_path"),x$r.forEach(t),xqe=r(CU,":"),CU.forEach(t),kqe=i(ga),v=n(ga,"UL",{});var F=s(v);Xf=n(F,"LI",{});var nTe=s(Xf);wY=n(nTe,"STRONG",{});var k$r=s(wY);Sqe=r(k$r,"albert"),k$r.forEach(t),Rqe=r(nTe," \u2014 "),k9=n(nTe,"A",{href:!0});var S$r=s(k9);Bqe=r(S$r,"AlbertConfig"),S$r.forEach(t),Pqe=r(nTe," (ALBERT model)"),nTe.forEach(t),$qe=i(F),zf=n(F,"LI",{});var sTe=s(zf);AY=n(sTe,"STRONG",{});var R$r=s(AY);Iqe=r(R$r,"bart"),R$r.forEach(t),qqe=r(sTe," \u2014 "),S9=n(sTe,"A",{href:!0});var B$r=s(S9);Nqe=r(B$r,"BartConfig"),B$r.forEach(t),jqe=r(sTe," (BART model)"),sTe.forEach(t),Dqe=i(F),Qf=n(F,"LI",{});var lTe=s(Qf);yY=n(lTe,"STRONG",{});var P$r=s(yY);Gqe=r(P$r,"beit"),P$r.forEach(t),Oqe=r(lTe," \u2014 "),R9=n(lTe,"A",{href:!0});var $$r=s(R9);Vqe=r($$r,"BeitConfig"),$$r.forEach(t),Xqe=r(lTe," (BEiT model)"),lTe.forEach(t),zqe=i(F),Wf=n(F,"LI",{});var iTe=s(Wf);LY=n(iTe,"STRONG",{});var I$r=s(LY);Qqe=r(I$r,"bert"),I$r.forEach(t),Wqe=r(iTe," \u2014 "),B9=n(iTe,"A",{href:!0});var q$r=s(B9);Hqe=r(q$r,"BertConfig"),q$r.forEach(t),Uqe=r(iTe," (BERT model)"),iTe.forEach(t),Jqe=i(F),Hf=n(F,"LI",{});var dTe=s(Hf);xY=n(dTe,"STRONG",{});var N$r=s(xY);Yqe=r(N$r,"bert-generation"),N$r.forEach(t),Kqe=r(dTe," \u2014 "),P9=n(dTe,"A",{href:!0});var j$r=s(P9);Zqe=r(j$r,"BertGenerationConfig"),j$r.forEach(t),eNe=r(dTe," (Bert Generation model)"),dTe.forEach(t),oNe=i(F),Uf=n(F,"LI",{});var cTe=s(Uf);kY=n(cTe,"STRONG",{});var D$r=s(kY);rNe=r(D$r,"big_bird"),D$r.forEach(t),tNe=r(cTe," \u2014 "),$9=n(cTe,"A",{href:!0});var G$r=s($9);aNe=r(G$r,"BigBirdConfig"),G$r.forEach(t),nNe=r(cTe," (BigBird model)"),cTe.forEach(t),sNe=i(F),Jf=n(F,"LI",{});var fTe=s(Jf);SY=n(fTe,"STRONG",{});var O$r=s(SY);lNe=r(O$r,"bigbird_pegasus"),O$r.forEach(t),iNe=r(fTe," \u2014 "),I9=n(fTe,"A",{href:!0});var V$r=s(I9);dNe=r(V$r,"BigBirdPegasusConfig"),V$r.forEach(t),cNe=r(fTe," (BigBirdPegasus model)"),fTe.forEach(t),fNe=i(F),Yf=n(F,"LI",{});var mTe=s(Yf);RY=n(mTe,"STRONG",{});var X$r=s(RY);mNe=r(X$r,"blenderbot"),X$r.forEach(t),gNe=r(mTe," \u2014 "),q9=n(mTe,"A",{href:!0});var z$r=s(q9);hNe=r(z$r,"BlenderbotConfig"),z$r.forEach(t),pNe=r(mTe," (Blenderbot model)"),mTe.forEach(t),_Ne=i(F),Kf=n(F,"LI",{});var gTe=s(Kf);BY=n(gTe,"STRONG",{});var Q$r=s(BY);uNe=r(Q$r,"blenderbot-small"),Q$r.forEach(t),bNe=r(gTe," \u2014 "),N9=n(gTe,"A",{href:!0});var W$r=s(N9);vNe=r(W$r,"BlenderbotSmallConfig"),W$r.forEach(t),FNe=r(gTe," (BlenderbotSmall model)"),gTe.forEach(t),TNe=i(F),Zf=n(F,"LI",{});var hTe=s(Zf);PY=n(hTe,"STRONG",{});var H$r=s(PY);MNe=r(H$r,"camembert"),H$r.forEach(t),ENe=r(hTe," \u2014 "),j9=n(hTe,"A",{href:!0});var U$r=s(j9);CNe=r(U$r,"CamembertConfig"),U$r.forEach(t),wNe=r(hTe," (CamemBERT model)"),hTe.forEach(t),ANe=i(F),em=n(F,"LI",{});var pTe=s(em);$Y=n(pTe,"STRONG",{});var J$r=s($Y);yNe=r(J$r,"canine"),J$r.forEach(t),LNe=r(pTe," \u2014 "),D9=n(pTe,"A",{href:!0});var Y$r=s(D9);xNe=r(Y$r,"CanineConfig"),Y$r.forEach(t),kNe=r(pTe," (Canine model)"),pTe.forEach(t),SNe=i(F),om=n(F,"LI",{});var _Te=s(om);IY=n(_Te,"STRONG",{});var K$r=s(IY);RNe=r(K$r,"clip"),K$r.forEach(t),BNe=r(_Te," \u2014 "),G9=n(_Te,"A",{href:!0});var Z$r=s(G9);PNe=r(Z$r,"CLIPConfig"),Z$r.forEach(t),$Ne=r(_Te," (CLIP model)"),_Te.forEach(t),INe=i(F),rm=n(F,"LI",{});var uTe=s(rm);qY=n(uTe,"STRONG",{});var eIr=s(qY);qNe=r(eIr,"convbert"),eIr.forEach(t),NNe=r(uTe," \u2014 "),O9=n(uTe,"A",{href:!0});var oIr=s(O9);jNe=r(oIr,"ConvBertConfig"),oIr.forEach(t),DNe=r(uTe," (ConvBERT model)"),uTe.forEach(t),GNe=i(F),tm=n(F,"LI",{});var bTe=s(tm);NY=n(bTe,"STRONG",{});var rIr=s(NY);ONe=r(rIr,"convnext"),rIr.forEach(t),VNe=r(bTe," \u2014 "),V9=n(bTe,"A",{href:!0});var tIr=s(V9);XNe=r(tIr,"ConvNextConfig"),tIr.forEach(t),zNe=r(bTe," (ConvNext model)"),bTe.forEach(t),QNe=i(F),am=n(F,"LI",{});var vTe=s(am);jY=n(vTe,"STRONG",{});var aIr=s(jY);WNe=r(aIr,"ctrl"),aIr.forEach(t),HNe=r(vTe," \u2014 "),X9=n(vTe,"A",{href:!0});var nIr=s(X9);UNe=r(nIr,"CTRLConfig"),nIr.forEach(t),JNe=r(vTe," (CTRL model)"),vTe.forEach(t),YNe=i(F),nm=n(F,"LI",{});var FTe=s(nm);DY=n(FTe,"STRONG",{});var sIr=s(DY);KNe=r(sIr,"data2vec-audio"),sIr.forEach(t),ZNe=r(FTe," \u2014 "),z9=n(FTe,"A",{href:!0});var lIr=s(z9);eje=r(lIr,"Data2VecAudioConfig"),lIr.forEach(t),oje=r(FTe," (Data2VecAudio model)"),FTe.forEach(t),rje=i(F),sm=n(F,"LI",{});var TTe=s(sm);GY=n(TTe,"STRONG",{});var iIr=s(GY);tje=r(iIr,"data2vec-text"),iIr.forEach(t),aje=r(TTe," \u2014 "),Q9=n(TTe,"A",{href:!0});var dIr=s(Q9);nje=r(dIr,"Data2VecTextConfig"),dIr.forEach(t),sje=r(TTe," (Data2VecText model)"),TTe.forEach(t),lje=i(F),lm=n(F,"LI",{});var MTe=s(lm);OY=n(MTe,"STRONG",{});var cIr=s(OY);ije=r(cIr,"data2vec-vision"),cIr.forEach(t),dje=r(MTe," \u2014 "),W9=n(MTe,"A",{href:!0});var fIr=s(W9);cje=r(fIr,"Data2VecVisionConfig"),fIr.forEach(t),fje=r(MTe," (Data2VecVision model)"),MTe.forEach(t),mje=i(F),im=n(F,"LI",{});var ETe=s(im);VY=n(ETe,"STRONG",{});var mIr=s(VY);gje=r(mIr,"deberta"),mIr.forEach(t),hje=r(ETe," \u2014 "),H9=n(ETe,"A",{href:!0});var gIr=s(H9);pje=r(gIr,"DebertaConfig"),gIr.forEach(t),_je=r(ETe," (DeBERTa model)"),ETe.forEach(t),uje=i(F),dm=n(F,"LI",{});var CTe=s(dm);XY=n(CTe,"STRONG",{});var hIr=s(XY);bje=r(hIr,"deberta-v2"),hIr.forEach(t),vje=r(CTe," \u2014 "),U9=n(CTe,"A",{href:!0});var pIr=s(U9);Fje=r(pIr,"DebertaV2Config"),pIr.forEach(t),Tje=r(CTe," (DeBERTa-v2 model)"),CTe.forEach(t),Mje=i(F),cm=n(F,"LI",{});var wTe=s(cm);zY=n(wTe,"STRONG",{});var _Ir=s(zY);Eje=r(_Ir,"decision_transformer"),_Ir.forEach(t),Cje=r(wTe," \u2014 "),J9=n(wTe,"A",{href:!0});var uIr=s(J9);wje=r(uIr,"DecisionTransformerConfig"),uIr.forEach(t),Aje=r(wTe," (Decision Transformer model)"),wTe.forEach(t),yje=i(F),fm=n(F,"LI",{});var ATe=s(fm);QY=n(ATe,"STRONG",{});var bIr=s(QY);Lje=r(bIr,"deit"),bIr.forEach(t),xje=r(ATe," \u2014 "),Y9=n(ATe,"A",{href:!0});var vIr=s(Y9);kje=r(vIr,"DeiTConfig"),vIr.forEach(t),Sje=r(ATe," (DeiT model)"),ATe.forEach(t),Rje=i(F),mm=n(F,"LI",{});var yTe=s(mm);WY=n(yTe,"STRONG",{});var FIr=s(WY);Bje=r(FIr,"detr"),FIr.forEach(t),Pje=r(yTe," \u2014 "),K9=n(yTe,"A",{href:!0});var TIr=s(K9);$je=r(TIr,"DetrConfig"),TIr.forEach(t),Ije=r(yTe," (DETR model)"),yTe.forEach(t),qje=i(F),gm=n(F,"LI",{});var LTe=s(gm);HY=n(LTe,"STRONG",{});var MIr=s(HY);Nje=r(MIr,"distilbert"),MIr.forEach(t),jje=r(LTe," \u2014 "),Z9=n(LTe,"A",{href:!0});var EIr=s(Z9);Dje=r(EIr,"DistilBertConfig"),EIr.forEach(t),Gje=r(LTe," (DistilBERT model)"),LTe.forEach(t),Oje=i(F),hm=n(F,"LI",{});var xTe=s(hm);UY=n(xTe,"STRONG",{});var CIr=s(UY);Vje=r(CIr,"dpr"),CIr.forEach(t),Xje=r(xTe," \u2014 "),ex=n(xTe,"A",{href:!0});var wIr=s(ex);zje=r(wIr,"DPRConfig"),wIr.forEach(t),Qje=r(xTe," (DPR model)"),xTe.forEach(t),Wje=i(F),pm=n(F,"LI",{});var kTe=s(pm);JY=n(kTe,"STRONG",{});var AIr=s(JY);Hje=r(AIr,"dpt"),AIr.forEach(t),Uje=r(kTe," \u2014 "),ox=n(kTe,"A",{href:!0});var yIr=s(ox);Jje=r(yIr,"DPTConfig"),yIr.forEach(t),Yje=r(kTe," (DPT model)"),kTe.forEach(t),Kje=i(F),_m=n(F,"LI",{});var STe=s(_m);YY=n(STe,"STRONG",{});var LIr=s(YY);Zje=r(LIr,"electra"),LIr.forEach(t),eDe=r(STe," \u2014 "),rx=n(STe,"A",{href:!0});var xIr=s(rx);oDe=r(xIr,"ElectraConfig"),xIr.forEach(t),rDe=r(STe," (ELECTRA model)"),STe.forEach(t),tDe=i(F),um=n(F,"LI",{});var RTe=s(um);KY=n(RTe,"STRONG",{});var kIr=s(KY);aDe=r(kIr,"encoder-decoder"),kIr.forEach(t),nDe=r(RTe," \u2014 "),tx=n(RTe,"A",{href:!0});var SIr=s(tx);sDe=r(SIr,"EncoderDecoderConfig"),SIr.forEach(t),lDe=r(RTe," (Encoder decoder model)"),RTe.forEach(t),iDe=i(F),bm=n(F,"LI",{});var BTe=s(bm);ZY=n(BTe,"STRONG",{});var RIr=s(ZY);dDe=r(RIr,"fastspeech2"),RIr.forEach(t),cDe=r(BTe," \u2014 "),ax=n(BTe,"A",{href:!0});var BIr=s(ax);fDe=r(BIr,"FastSpeech2Config"),BIr.forEach(t),mDe=r(BTe," (FastSpeech2 model)"),BTe.forEach(t),gDe=i(F),vm=n(F,"LI",{});var PTe=s(vm);eK=n(PTe,"STRONG",{});var PIr=s(eK);hDe=r(PIr,"flaubert"),PIr.forEach(t),pDe=r(PTe," \u2014 "),nx=n(PTe,"A",{href:!0});var $Ir=s(nx);_De=r($Ir,"FlaubertConfig"),$Ir.forEach(t),uDe=r(PTe," (FlauBERT model)"),PTe.forEach(t),bDe=i(F),Fm=n(F,"LI",{});var $Te=s(Fm);oK=n($Te,"STRONG",{});var IIr=s(oK);vDe=r(IIr,"fnet"),IIr.forEach(t),FDe=r($Te," \u2014 "),sx=n($Te,"A",{href:!0});var qIr=s(sx);TDe=r(qIr,"FNetConfig"),qIr.forEach(t),MDe=r($Te," (FNet model)"),$Te.forEach(t),EDe=i(F),Tm=n(F,"LI",{});var ITe=s(Tm);rK=n(ITe,"STRONG",{});var NIr=s(rK);CDe=r(NIr,"fsmt"),NIr.forEach(t),wDe=r(ITe," \u2014 "),lx=n(ITe,"A",{href:!0});var jIr=s(lx);ADe=r(jIr,"FSMTConfig"),jIr.forEach(t),yDe=r(ITe," (FairSeq Machine-Translation model)"),ITe.forEach(t),LDe=i(F),Mm=n(F,"LI",{});var qTe=s(Mm);tK=n(qTe,"STRONG",{});var DIr=s(tK);xDe=r(DIr,"funnel"),DIr.forEach(t),kDe=r(qTe," \u2014 "),ix=n(qTe,"A",{href:!0});var GIr=s(ix);SDe=r(GIr,"FunnelConfig"),GIr.forEach(t),RDe=r(qTe," (Funnel Transformer model)"),qTe.forEach(t),BDe=i(F),Em=n(F,"LI",{});var NTe=s(Em);aK=n(NTe,"STRONG",{});var OIr=s(aK);PDe=r(OIr,"glpn"),OIr.forEach(t),$De=r(NTe," \u2014 "),dx=n(NTe,"A",{href:!0});var VIr=s(dx);IDe=r(VIr,"GLPNConfig"),VIr.forEach(t),qDe=r(NTe," (GLPN model)"),NTe.forEach(t),NDe=i(F),Cm=n(F,"LI",{});var jTe=s(Cm);nK=n(jTe,"STRONG",{});var XIr=s(nK);jDe=r(XIr,"gpt2"),XIr.forEach(t),DDe=r(jTe," \u2014 "),cx=n(jTe,"A",{href:!0});var zIr=s(cx);GDe=r(zIr,"GPT2Config"),zIr.forEach(t),ODe=r(jTe," (OpenAI GPT-2 model)"),jTe.forEach(t),VDe=i(F),wm=n(F,"LI",{});var DTe=s(wm);sK=n(DTe,"STRONG",{});var QIr=s(sK);XDe=r(QIr,"gpt_neo"),QIr.forEach(t),zDe=r(DTe," \u2014 "),fx=n(DTe,"A",{href:!0});var WIr=s(fx);QDe=r(WIr,"GPTNeoConfig"),WIr.forEach(t),WDe=r(DTe," (GPT Neo model)"),DTe.forEach(t),HDe=i(F),Am=n(F,"LI",{});var GTe=s(Am);lK=n(GTe,"STRONG",{});var HIr=s(lK);UDe=r(HIr,"gptj"),HIr.forEach(t),JDe=r(GTe," \u2014 "),mx=n(GTe,"A",{href:!0});var UIr=s(mx);YDe=r(UIr,"GPTJConfig"),UIr.forEach(t),KDe=r(GTe," (GPT-J model)"),GTe.forEach(t),ZDe=i(F),ym=n(F,"LI",{});var OTe=s(ym);iK=n(OTe,"STRONG",{});var JIr=s(iK);eGe=r(JIr,"hubert"),JIr.forEach(t),oGe=r(OTe," \u2014 "),gx=n(OTe,"A",{href:!0});var YIr=s(gx);rGe=r(YIr,"HubertConfig"),YIr.forEach(t),tGe=r(OTe," (Hubert model)"),OTe.forEach(t),aGe=i(F),Lm=n(F,"LI",{});var VTe=s(Lm);dK=n(VTe,"STRONG",{});var KIr=s(dK);nGe=r(KIr,"ibert"),KIr.forEach(t),sGe=r(VTe," \u2014 "),hx=n(VTe,"A",{href:!0});var ZIr=s(hx);lGe=r(ZIr,"IBertConfig"),ZIr.forEach(t),iGe=r(VTe," (I-BERT model)"),VTe.forEach(t),dGe=i(F),xm=n(F,"LI",{});var XTe=s(xm);cK=n(XTe,"STRONG",{});var eqr=s(cK);cGe=r(eqr,"imagegpt"),eqr.forEach(t),fGe=r(XTe," \u2014 "),px=n(XTe,"A",{href:!0});var oqr=s(px);mGe=r(oqr,"ImageGPTConfig"),oqr.forEach(t),gGe=r(XTe," (ImageGPT model)"),XTe.forEach(t),hGe=i(F),km=n(F,"LI",{});var zTe=s(km);fK=n(zTe,"STRONG",{});var rqr=s(fK);pGe=r(rqr,"layoutlm"),rqr.forEach(t),_Ge=r(zTe," \u2014 "),_x=n(zTe,"A",{href:!0});var tqr=s(_x);uGe=r(tqr,"LayoutLMConfig"),tqr.forEach(t),bGe=r(zTe," (LayoutLM model)"),zTe.forEach(t),vGe=i(F),Sm=n(F,"LI",{});var QTe=s(Sm);mK=n(QTe,"STRONG",{});var aqr=s(mK);FGe=r(aqr,"layoutlmv2"),aqr.forEach(t),TGe=r(QTe," \u2014 "),ux=n(QTe,"A",{href:!0});var nqr=s(ux);MGe=r(nqr,"LayoutLMv2Config"),nqr.forEach(t),EGe=r(QTe," (LayoutLMv2 model)"),QTe.forEach(t),CGe=i(F),Rm=n(F,"LI",{});var WTe=s(Rm);gK=n(WTe,"STRONG",{});var sqr=s(gK);wGe=r(sqr,"led"),sqr.forEach(t),AGe=r(WTe," \u2014 "),bx=n(WTe,"A",{href:!0});var lqr=s(bx);yGe=r(lqr,"LEDConfig"),lqr.forEach(t),LGe=r(WTe," (LED model)"),WTe.forEach(t),xGe=i(F),Bm=n(F,"LI",{});var HTe=s(Bm);hK=n(HTe,"STRONG",{});var iqr=s(hK);kGe=r(iqr,"longformer"),iqr.forEach(t),SGe=r(HTe," \u2014 "),vx=n(HTe,"A",{href:!0});var dqr=s(vx);RGe=r(dqr,"LongformerConfig"),dqr.forEach(t),BGe=r(HTe," (Longformer model)"),HTe.forEach(t),PGe=i(F),Pm=n(F,"LI",{});var UTe=s(Pm);pK=n(UTe,"STRONG",{});var cqr=s(pK);$Ge=r(cqr,"luke"),cqr.forEach(t),IGe=r(UTe," \u2014 "),Fx=n(UTe,"A",{href:!0});var fqr=s(Fx);qGe=r(fqr,"LukeConfig"),fqr.forEach(t),NGe=r(UTe," (LUKE model)"),UTe.forEach(t),jGe=i(F),$m=n(F,"LI",{});var JTe=s($m);_K=n(JTe,"STRONG",{});var mqr=s(_K);DGe=r(mqr,"lxmert"),mqr.forEach(t),GGe=r(JTe," \u2014 "),Tx=n(JTe,"A",{href:!0});var gqr=s(Tx);OGe=r(gqr,"LxmertConfig"),gqr.forEach(t),VGe=r(JTe," (LXMERT model)"),JTe.forEach(t),XGe=i(F),Im=n(F,"LI",{});var YTe=s(Im);uK=n(YTe,"STRONG",{});var hqr=s(uK);zGe=r(hqr,"m2m_100"),hqr.forEach(t),QGe=r(YTe," \u2014 "),Mx=n(YTe,"A",{href:!0});var pqr=s(Mx);WGe=r(pqr,"M2M100Config"),pqr.forEach(t),HGe=r(YTe," (M2M100 model)"),YTe.forEach(t),UGe=i(F),qm=n(F,"LI",{});var KTe=s(qm);bK=n(KTe,"STRONG",{});var _qr=s(bK);JGe=r(_qr,"marian"),_qr.forEach(t),YGe=r(KTe," \u2014 "),Ex=n(KTe,"A",{href:!0});var uqr=s(Ex);KGe=r(uqr,"MarianConfig"),uqr.forEach(t),ZGe=r(KTe," (Marian model)"),KTe.forEach(t),eOe=i(F),Nm=n(F,"LI",{});var ZTe=s(Nm);vK=n(ZTe,"STRONG",{});var bqr=s(vK);oOe=r(bqr,"maskformer"),bqr.forEach(t),rOe=r(ZTe," \u2014 "),Cx=n(ZTe,"A",{href:!0});var vqr=s(Cx);tOe=r(vqr,"MaskFormerConfig"),vqr.forEach(t),aOe=r(ZTe," (MaskFormer model)"),ZTe.forEach(t),nOe=i(F),jm=n(F,"LI",{});var eMe=s(jm);FK=n(eMe,"STRONG",{});var Fqr=s(FK);sOe=r(Fqr,"mbart"),Fqr.forEach(t),lOe=r(eMe," \u2014 "),wx=n(eMe,"A",{href:!0});var Tqr=s(wx);iOe=r(Tqr,"MBartConfig"),Tqr.forEach(t),dOe=r(eMe," (mBART model)"),eMe.forEach(t),cOe=i(F),Dm=n(F,"LI",{});var oMe=s(Dm);TK=n(oMe,"STRONG",{});var Mqr=s(TK);fOe=r(Mqr,"megatron-bert"),Mqr.forEach(t),mOe=r(oMe," \u2014 "),Ax=n(oMe,"A",{href:!0});var Eqr=s(Ax);gOe=r(Eqr,"MegatronBertConfig"),Eqr.forEach(t),hOe=r(oMe," (MegatronBert model)"),oMe.forEach(t),pOe=i(F),Gm=n(F,"LI",{});var rMe=s(Gm);MK=n(rMe,"STRONG",{});var Cqr=s(MK);_Oe=r(Cqr,"mobilebert"),Cqr.forEach(t),uOe=r(rMe," \u2014 "),yx=n(rMe,"A",{href:!0});var wqr=s(yx);bOe=r(wqr,"MobileBertConfig"),wqr.forEach(t),vOe=r(rMe," (MobileBERT model)"),rMe.forEach(t),FOe=i(F),Om=n(F,"LI",{});var tMe=s(Om);EK=n(tMe,"STRONG",{});var Aqr=s(EK);TOe=r(Aqr,"mpnet"),Aqr.forEach(t),MOe=r(tMe," \u2014 "),Lx=n(tMe,"A",{href:!0});var yqr=s(Lx);EOe=r(yqr,"MPNetConfig"),yqr.forEach(t),COe=r(tMe," (MPNet model)"),tMe.forEach(t),wOe=i(F),Vm=n(F,"LI",{});var aMe=s(Vm);CK=n(aMe,"STRONG",{});var Lqr=s(CK);AOe=r(Lqr,"mt5"),Lqr.forEach(t),yOe=r(aMe," \u2014 "),xx=n(aMe,"A",{href:!0});var xqr=s(xx);LOe=r(xqr,"MT5Config"),xqr.forEach(t),xOe=r(aMe," (mT5 model)"),aMe.forEach(t),kOe=i(F),Xm=n(F,"LI",{});var nMe=s(Xm);wK=n(nMe,"STRONG",{});var kqr=s(wK);SOe=r(kqr,"nystromformer"),kqr.forEach(t),ROe=r(nMe," \u2014 "),kx=n(nMe,"A",{href:!0});var Sqr=s(kx);BOe=r(Sqr,"NystromformerConfig"),Sqr.forEach(t),POe=r(nMe," (Nystromformer model)"),nMe.forEach(t),$Oe=i(F),zm=n(F,"LI",{});var sMe=s(zm);AK=n(sMe,"STRONG",{});var Rqr=s(AK);IOe=r(Rqr,"openai-gpt"),Rqr.forEach(t),qOe=r(sMe," \u2014 "),Sx=n(sMe,"A",{href:!0});var Bqr=s(Sx);NOe=r(Bqr,"OpenAIGPTConfig"),Bqr.forEach(t),jOe=r(sMe," (OpenAI GPT model)"),sMe.forEach(t),DOe=i(F),Qm=n(F,"LI",{});var lMe=s(Qm);yK=n(lMe,"STRONG",{});var Pqr=s(yK);GOe=r(Pqr,"pegasus"),Pqr.forEach(t),OOe=r(lMe," \u2014 "),Rx=n(lMe,"A",{href:!0});var $qr=s(Rx);VOe=r($qr,"PegasusConfig"),$qr.forEach(t),XOe=r(lMe," (Pegasus model)"),lMe.forEach(t),zOe=i(F),Wm=n(F,"LI",{});var iMe=s(Wm);LK=n(iMe,"STRONG",{});var Iqr=s(LK);QOe=r(Iqr,"perceiver"),Iqr.forEach(t),WOe=r(iMe," \u2014 "),Bx=n(iMe,"A",{href:!0});var qqr=s(Bx);HOe=r(qqr,"PerceiverConfig"),qqr.forEach(t),UOe=r(iMe," (Perceiver model)"),iMe.forEach(t),JOe=i(F),Hm=n(F,"LI",{});var dMe=s(Hm);xK=n(dMe,"STRONG",{});var Nqr=s(xK);YOe=r(Nqr,"plbart"),Nqr.forEach(t),KOe=r(dMe," \u2014 "),Px=n(dMe,"A",{href:!0});var jqr=s(Px);ZOe=r(jqr,"PLBartConfig"),jqr.forEach(t),eVe=r(dMe," (PLBart model)"),dMe.forEach(t),oVe=i(F),Um=n(F,"LI",{});var cMe=s(Um);kK=n(cMe,"STRONG",{});var Dqr=s(kK);rVe=r(Dqr,"poolformer"),Dqr.forEach(t),tVe=r(cMe," \u2014 "),$x=n(cMe,"A",{href:!0});var Gqr=s($x);aVe=r(Gqr,"PoolFormerConfig"),Gqr.forEach(t),nVe=r(cMe," (PoolFormer model)"),cMe.forEach(t),sVe=i(F),Jm=n(F,"LI",{});var fMe=s(Jm);SK=n(fMe,"STRONG",{});var Oqr=s(SK);lVe=r(Oqr,"prophetnet"),Oqr.forEach(t),iVe=r(fMe," \u2014 "),Ix=n(fMe,"A",{href:!0});var Vqr=s(Ix);dVe=r(Vqr,"ProphetNetConfig"),Vqr.forEach(t),cVe=r(fMe," (ProphetNet model)"),fMe.forEach(t),fVe=i(F),Ym=n(F,"LI",{});var mMe=s(Ym);RK=n(mMe,"STRONG",{});var Xqr=s(RK);mVe=r(Xqr,"qdqbert"),Xqr.forEach(t),gVe=r(mMe," \u2014 "),qx=n(mMe,"A",{href:!0});var zqr=s(qx);hVe=r(zqr,"QDQBertConfig"),zqr.forEach(t),pVe=r(mMe," (QDQBert model)"),mMe.forEach(t),_Ve=i(F),Km=n(F,"LI",{});var gMe=s(Km);BK=n(gMe,"STRONG",{});var Qqr=s(BK);uVe=r(Qqr,"rag"),Qqr.forEach(t),bVe=r(gMe," \u2014 "),Nx=n(gMe,"A",{href:!0});var Wqr=s(Nx);vVe=r(Wqr,"RagConfig"),Wqr.forEach(t),FVe=r(gMe," (RAG model)"),gMe.forEach(t),TVe=i(F),Zm=n(F,"LI",{});var hMe=s(Zm);PK=n(hMe,"STRONG",{});var Hqr=s(PK);MVe=r(Hqr,"realm"),Hqr.forEach(t),EVe=r(hMe," \u2014 "),jx=n(hMe,"A",{href:!0});var Uqr=s(jx);CVe=r(Uqr,"RealmConfig"),Uqr.forEach(t),wVe=r(hMe," (Realm model)"),hMe.forEach(t),AVe=i(F),eg=n(F,"LI",{});var pMe=s(eg);$K=n(pMe,"STRONG",{});var Jqr=s($K);yVe=r(Jqr,"reformer"),Jqr.forEach(t),LVe=r(pMe," \u2014 "),Dx=n(pMe,"A",{href:!0});var Yqr=s(Dx);xVe=r(Yqr,"ReformerConfig"),Yqr.forEach(t),kVe=r(pMe," (Reformer model)"),pMe.forEach(t),SVe=i(F),og=n(F,"LI",{});var _Me=s(og);IK=n(_Me,"STRONG",{});var Kqr=s(IK);RVe=r(Kqr,"regnet"),Kqr.forEach(t),BVe=r(_Me," \u2014 "),Gx=n(_Me,"A",{href:!0});var Zqr=s(Gx);PVe=r(Zqr,"RegNetConfig"),Zqr.forEach(t),$Ve=r(_Me," (RegNet model)"),_Me.forEach(t),IVe=i(F),rg=n(F,"LI",{});var uMe=s(rg);qK=n(uMe,"STRONG",{});var eNr=s(qK);qVe=r(eNr,"rembert"),eNr.forEach(t),NVe=r(uMe," \u2014 "),Ox=n(uMe,"A",{href:!0});var oNr=s(Ox);jVe=r(oNr,"RemBertConfig"),oNr.forEach(t),DVe=r(uMe," (RemBERT model)"),uMe.forEach(t),GVe=i(F),tg=n(F,"LI",{});var bMe=s(tg);NK=n(bMe,"STRONG",{});var rNr=s(NK);OVe=r(rNr,"resnet"),rNr.forEach(t),VVe=r(bMe," \u2014 "),Vx=n(bMe,"A",{href:!0});var tNr=s(Vx);XVe=r(tNr,"ResNetConfig"),tNr.forEach(t),zVe=r(bMe," (ResNet model)"),bMe.forEach(t),QVe=i(F),ag=n(F,"LI",{});var vMe=s(ag);jK=n(vMe,"STRONG",{});var aNr=s(jK);WVe=r(aNr,"retribert"),aNr.forEach(t),HVe=r(vMe," \u2014 "),Xx=n(vMe,"A",{href:!0});var nNr=s(Xx);UVe=r(nNr,"RetriBertConfig"),nNr.forEach(t),JVe=r(vMe," (RetriBERT model)"),vMe.forEach(t),YVe=i(F),ng=n(F,"LI",{});var FMe=s(ng);DK=n(FMe,"STRONG",{});var sNr=s(DK);KVe=r(sNr,"roberta"),sNr.forEach(t),ZVe=r(FMe," \u2014 "),zx=n(FMe,"A",{href:!0});var lNr=s(zx);eXe=r(lNr,"RobertaConfig"),lNr.forEach(t),oXe=r(FMe," (RoBERTa model)"),FMe.forEach(t),rXe=i(F),sg=n(F,"LI",{});var TMe=s(sg);GK=n(TMe,"STRONG",{});var iNr=s(GK);tXe=r(iNr,"roformer"),iNr.forEach(t),aXe=r(TMe," \u2014 "),Qx=n(TMe,"A",{href:!0});var dNr=s(Qx);nXe=r(dNr,"RoFormerConfig"),dNr.forEach(t),sXe=r(TMe," (RoFormer model)"),TMe.forEach(t),lXe=i(F),lg=n(F,"LI",{});var MMe=s(lg);OK=n(MMe,"STRONG",{});var cNr=s(OK);iXe=r(cNr,"segformer"),cNr.forEach(t),dXe=r(MMe," \u2014 "),Wx=n(MMe,"A",{href:!0});var fNr=s(Wx);cXe=r(fNr,"SegformerConfig"),fNr.forEach(t),fXe=r(MMe," (SegFormer model)"),MMe.forEach(t),mXe=i(F),ig=n(F,"LI",{});var EMe=s(ig);VK=n(EMe,"STRONG",{});var mNr=s(VK);gXe=r(mNr,"sew"),mNr.forEach(t),hXe=r(EMe," \u2014 "),Hx=n(EMe,"A",{href:!0});var gNr=s(Hx);pXe=r(gNr,"SEWConfig"),gNr.forEach(t),_Xe=r(EMe," (SEW model)"),EMe.forEach(t),uXe=i(F),dg=n(F,"LI",{});var CMe=s(dg);XK=n(CMe,"STRONG",{});var hNr=s(XK);bXe=r(hNr,"sew-d"),hNr.forEach(t),vXe=r(CMe," \u2014 "),Ux=n(CMe,"A",{href:!0});var pNr=s(Ux);FXe=r(pNr,"SEWDConfig"),pNr.forEach(t),TXe=r(CMe," (SEW-D model)"),CMe.forEach(t),MXe=i(F),cg=n(F,"LI",{});var wMe=s(cg);zK=n(wMe,"STRONG",{});var _Nr=s(zK);EXe=r(_Nr,"speech-encoder-decoder"),_Nr.forEach(t),CXe=r(wMe," \u2014 "),Jx=n(wMe,"A",{href:!0});var uNr=s(Jx);wXe=r(uNr,"SpeechEncoderDecoderConfig"),uNr.forEach(t),AXe=r(wMe," (Speech Encoder decoder model)"),wMe.forEach(t),yXe=i(F),fg=n(F,"LI",{});var AMe=s(fg);QK=n(AMe,"STRONG",{});var bNr=s(QK);LXe=r(bNr,"speech_to_text"),bNr.forEach(t),xXe=r(AMe," \u2014 "),Yx=n(AMe,"A",{href:!0});var vNr=s(Yx);kXe=r(vNr,"Speech2TextConfig"),vNr.forEach(t),SXe=r(AMe," (Speech2Text model)"),AMe.forEach(t),RXe=i(F),mg=n(F,"LI",{});var yMe=s(mg);WK=n(yMe,"STRONG",{});var FNr=s(WK);BXe=r(FNr,"speech_to_text_2"),FNr.forEach(t),PXe=r(yMe," \u2014 "),Kx=n(yMe,"A",{href:!0});var TNr=s(Kx);$Xe=r(TNr,"Speech2Text2Config"),TNr.forEach(t),IXe=r(yMe," (Speech2Text2 model)"),yMe.forEach(t),qXe=i(F),gg=n(F,"LI",{});var LMe=s(gg);HK=n(LMe,"STRONG",{});var MNr=s(HK);NXe=r(MNr,"splinter"),MNr.forEach(t),jXe=r(LMe," \u2014 "),Zx=n(LMe,"A",{href:!0});var ENr=s(Zx);DXe=r(ENr,"SplinterConfig"),ENr.forEach(t),GXe=r(LMe," (Splinter model)"),LMe.forEach(t),OXe=i(F),hg=n(F,"LI",{});var xMe=s(hg);UK=n(xMe,"STRONG",{});var CNr=s(UK);VXe=r(CNr,"squeezebert"),CNr.forEach(t),XXe=r(xMe," \u2014 "),ek=n(xMe,"A",{href:!0});var wNr=s(ek);zXe=r(wNr,"SqueezeBertConfig"),wNr.forEach(t),QXe=r(xMe," (SqueezeBERT model)"),xMe.forEach(t),WXe=i(F),pg=n(F,"LI",{});var kMe=s(pg);JK=n(kMe,"STRONG",{});var ANr=s(JK);HXe=r(ANr,"swin"),ANr.forEach(t),UXe=r(kMe," \u2014 "),ok=n(kMe,"A",{href:!0});var yNr=s(ok);JXe=r(yNr,"SwinConfig"),yNr.forEach(t),YXe=r(kMe," (Swin model)"),kMe.forEach(t),KXe=i(F),_g=n(F,"LI",{});var SMe=s(_g);YK=n(SMe,"STRONG",{});var LNr=s(YK);ZXe=r(LNr,"t5"),LNr.forEach(t),eze=r(SMe," \u2014 "),rk=n(SMe,"A",{href:!0});var xNr=s(rk);oze=r(xNr,"T5Config"),xNr.forEach(t),rze=r(SMe," (T5 model)"),SMe.forEach(t),tze=i(F),ug=n(F,"LI",{});var RMe=s(ug);KK=n(RMe,"STRONG",{});var kNr=s(KK);aze=r(kNr,"tapas"),kNr.forEach(t),nze=r(RMe," \u2014 "),tk=n(RMe,"A",{href:!0});var SNr=s(tk);sze=r(SNr,"TapasConfig"),SNr.forEach(t),lze=r(RMe," (TAPAS model)"),RMe.forEach(t),ize=i(F),bg=n(F,"LI",{});var BMe=s(bg);ZK=n(BMe,"STRONG",{});var RNr=s(ZK);dze=r(RNr,"tapex"),RNr.forEach(t),cze=r(BMe," \u2014 "),ak=n(BMe,"A",{href:!0});var BNr=s(ak);fze=r(BNr,"BartConfig"),BNr.forEach(t),mze=r(BMe," (TAPEX model)"),BMe.forEach(t),gze=i(F),vg=n(F,"LI",{});var PMe=s(vg);eZ=n(PMe,"STRONG",{});var PNr=s(eZ);hze=r(PNr,"transfo-xl"),PNr.forEach(t),pze=r(PMe," \u2014 "),nk=n(PMe,"A",{href:!0});var $Nr=s(nk);_ze=r($Nr,"TransfoXLConfig"),$Nr.forEach(t),uze=r(PMe," (Transformer-XL model)"),PMe.forEach(t),bze=i(F),Fg=n(F,"LI",{});var $Me=s(Fg);oZ=n($Me,"STRONG",{});var INr=s(oZ);vze=r(INr,"trocr"),INr.forEach(t),Fze=r($Me," \u2014 "),sk=n($Me,"A",{href:!0});var qNr=s(sk);Tze=r(qNr,"TrOCRConfig"),qNr.forEach(t),Mze=r($Me," (TrOCR model)"),$Me.forEach(t),Eze=i(F),Tg=n(F,"LI",{});var IMe=s(Tg);rZ=n(IMe,"STRONG",{});var NNr=s(rZ);Cze=r(NNr,"unispeech"),NNr.forEach(t),wze=r(IMe," \u2014 "),lk=n(IMe,"A",{href:!0});var jNr=s(lk);Aze=r(jNr,"UniSpeechConfig"),jNr.forEach(t),yze=r(IMe," (UniSpeech model)"),IMe.forEach(t),Lze=i(F),Mg=n(F,"LI",{});var qMe=s(Mg);tZ=n(qMe,"STRONG",{});var DNr=s(tZ);xze=r(DNr,"unispeech-sat"),DNr.forEach(t),kze=r(qMe," \u2014 "),ik=n(qMe,"A",{href:!0});var GNr=s(ik);Sze=r(GNr,"UniSpeechSatConfig"),GNr.forEach(t),Rze=r(qMe," (UniSpeechSat model)"),qMe.forEach(t),Bze=i(F),Eg=n(F,"LI",{});var NMe=s(Eg);aZ=n(NMe,"STRONG",{});var ONr=s(aZ);Pze=r(ONr,"van"),ONr.forEach(t),$ze=r(NMe," \u2014 "),dk=n(NMe,"A",{href:!0});var VNr=s(dk);Ize=r(VNr,"VanConfig"),VNr.forEach(t),qze=r(NMe," (VAN model)"),NMe.forEach(t),Nze=i(F),Cg=n(F,"LI",{});var jMe=s(Cg);nZ=n(jMe,"STRONG",{});var XNr=s(nZ);jze=r(XNr,"vilt"),XNr.forEach(t),Dze=r(jMe," \u2014 "),ck=n(jMe,"A",{href:!0});var zNr=s(ck);Gze=r(zNr,"ViltConfig"),zNr.forEach(t),Oze=r(jMe," (ViLT model)"),jMe.forEach(t),Vze=i(F),wg=n(F,"LI",{});var DMe=s(wg);sZ=n(DMe,"STRONG",{});var QNr=s(sZ);Xze=r(QNr,"vision-encoder-decoder"),QNr.forEach(t),zze=r(DMe," \u2014 "),fk=n(DMe,"A",{href:!0});var WNr=s(fk);Qze=r(WNr,"VisionEncoderDecoderConfig"),WNr.forEach(t),Wze=r(DMe," (Vision Encoder decoder model)"),DMe.forEach(t),Hze=i(F),Ag=n(F,"LI",{});var GMe=s(Ag);lZ=n(GMe,"STRONG",{});var HNr=s(lZ);Uze=r(HNr,"vision-text-dual-encoder"),HNr.forEach(t),Jze=r(GMe," \u2014 "),mk=n(GMe,"A",{href:!0});var UNr=s(mk);Yze=r(UNr,"VisionTextDualEncoderConfig"),UNr.forEach(t),Kze=r(GMe," (VisionTextDualEncoder model)"),GMe.forEach(t),Zze=i(F),yg=n(F,"LI",{});var OMe=s(yg);iZ=n(OMe,"STRONG",{});var JNr=s(iZ);eQe=r(JNr,"visual_bert"),JNr.forEach(t),oQe=r(OMe," \u2014 "),gk=n(OMe,"A",{href:!0});var YNr=s(gk);rQe=r(YNr,"VisualBertConfig"),YNr.forEach(t),tQe=r(OMe," (VisualBert model)"),OMe.forEach(t),aQe=i(F),Lg=n(F,"LI",{});var VMe=s(Lg);dZ=n(VMe,"STRONG",{});var KNr=s(dZ);nQe=r(KNr,"vit"),KNr.forEach(t),sQe=r(VMe," \u2014 "),hk=n(VMe,"A",{href:!0});var ZNr=s(hk);lQe=r(ZNr,"ViTConfig"),ZNr.forEach(t),iQe=r(VMe," (ViT model)"),VMe.forEach(t),dQe=i(F),xg=n(F,"LI",{});var XMe=s(xg);cZ=n(XMe,"STRONG",{});var ejr=s(cZ);cQe=r(ejr,"vit_mae"),ejr.forEach(t),fQe=r(XMe," \u2014 "),pk=n(XMe,"A",{href:!0});var ojr=s(pk);mQe=r(ojr,"ViTMAEConfig"),ojr.forEach(t),gQe=r(XMe," (ViTMAE model)"),XMe.forEach(t),hQe=i(F),kg=n(F,"LI",{});var zMe=s(kg);fZ=n(zMe,"STRONG",{});var rjr=s(fZ);pQe=r(rjr,"wav2vec2"),rjr.forEach(t),_Qe=r(zMe," \u2014 "),_k=n(zMe,"A",{href:!0});var tjr=s(_k);uQe=r(tjr,"Wav2Vec2Config"),tjr.forEach(t),bQe=r(zMe," (Wav2Vec2 model)"),zMe.forEach(t),vQe=i(F),Sg=n(F,"LI",{});var QMe=s(Sg);mZ=n(QMe,"STRONG",{});var ajr=s(mZ);FQe=r(ajr,"wavlm"),ajr.forEach(t),TQe=r(QMe," \u2014 "),uk=n(QMe,"A",{href:!0});var njr=s(uk);MQe=r(njr,"WavLMConfig"),njr.forEach(t),EQe=r(QMe," (WavLM model)"),QMe.forEach(t),CQe=i(F),Rg=n(F,"LI",{});var WMe=s(Rg);gZ=n(WMe,"STRONG",{});var sjr=s(gZ);wQe=r(sjr,"xglm"),sjr.forEach(t),AQe=r(WMe," \u2014 "),bk=n(WMe,"A",{href:!0});var ljr=s(bk);yQe=r(ljr,"XGLMConfig"),ljr.forEach(t),LQe=r(WMe," (XGLM model)"),WMe.forEach(t),xQe=i(F),Bg=n(F,"LI",{});var HMe=s(Bg);hZ=n(HMe,"STRONG",{});var ijr=s(hZ);kQe=r(ijr,"xlm"),ijr.forEach(t),SQe=r(HMe," \u2014 "),vk=n(HMe,"A",{href:!0});var djr=s(vk);RQe=r(djr,"XLMConfig"),djr.forEach(t),BQe=r(HMe," (XLM model)"),HMe.forEach(t),PQe=i(F),Pg=n(F,"LI",{});var UMe=s(Pg);pZ=n(UMe,"STRONG",{});var cjr=s(pZ);$Qe=r(cjr,"xlm-prophetnet"),cjr.forEach(t),IQe=r(UMe," \u2014 "),Fk=n(UMe,"A",{href:!0});var fjr=s(Fk);qQe=r(fjr,"XLMProphetNetConfig"),fjr.forEach(t),NQe=r(UMe," (XLMProphetNet model)"),UMe.forEach(t),jQe=i(F),$g=n(F,"LI",{});var JMe=s($g);_Z=n(JMe,"STRONG",{});var mjr=s(_Z);DQe=r(mjr,"xlm-roberta"),mjr.forEach(t),GQe=r(JMe," \u2014 "),Tk=n(JMe,"A",{href:!0});var gjr=s(Tk);OQe=r(gjr,"XLMRobertaConfig"),gjr.forEach(t),VQe=r(JMe," (XLM-RoBERTa model)"),JMe.forEach(t),XQe=i(F),Ig=n(F,"LI",{});var YMe=s(Ig);uZ=n(YMe,"STRONG",{});var hjr=s(uZ);zQe=r(hjr,"xlm-roberta-xl"),hjr.forEach(t),QQe=r(YMe," \u2014 "),Mk=n(YMe,"A",{href:!0});var pjr=s(Mk);WQe=r(pjr,"XLMRobertaXLConfig"),pjr.forEach(t),HQe=r(YMe," (XLM-RoBERTa-XL model)"),YMe.forEach(t),UQe=i(F),qg=n(F,"LI",{});var KMe=s(qg);bZ=n(KMe,"STRONG",{});var _jr=s(bZ);JQe=r(_jr,"xlnet"),_jr.forEach(t),YQe=r(KMe," \u2014 "),Ek=n(KMe,"A",{href:!0});var ujr=s(Ek);KQe=r(ujr,"XLNetConfig"),ujr.forEach(t),ZQe=r(KMe," (XLNet model)"),KMe.forEach(t),eWe=i(F),Ng=n(F,"LI",{});var ZMe=s(Ng);vZ=n(ZMe,"STRONG",{});var bjr=s(vZ);oWe=r(bjr,"yoso"),bjr.forEach(t),rWe=r(ZMe," \u2014 "),Ck=n(ZMe,"A",{href:!0});var vjr=s(Ck);tWe=r(vjr,"YosoConfig"),vjr.forEach(t),aWe=r(ZMe," (YOSO model)"),ZMe.forEach(t),F.forEach(t),nWe=i(ga),FZ=n(ga,"P",{});var Fjr=s(FZ);sWe=r(Fjr,"Examples:"),Fjr.forEach(t),lWe=i(ga),m(OC.$$.fragment,ga),ga.forEach(t),iWe=i(Vs),jg=n(Vs,"DIV",{class:!0});var KPe=s(jg);m(VC.$$.fragment,KPe),dWe=i(KPe),TZ=n(KPe,"P",{});var Tjr=s(TZ);cWe=r(Tjr,"Register a new configuration for this class."),Tjr.forEach(t),KPe.forEach(t),Vs.forEach(t),JRe=i(c),Wi=n(c,"H2",{class:!0});var ZPe=s(Wi);Dg=n(ZPe,"A",{id:!0,class:!0,href:!0});var Mjr=s(Dg);MZ=n(Mjr,"SPAN",{});var Ejr=s(MZ);m(XC.$$.fragment,Ejr),Ejr.forEach(t),Mjr.forEach(t),fWe=i(ZPe),EZ=n(ZPe,"SPAN",{});var Cjr=s(EZ);mWe=r(Cjr,"AutoTokenizer"),Cjr.forEach(t),ZPe.forEach(t),YRe=i(c),Wo=n(c,"DIV",{class:!0});var Xs=s(Wo);m(zC.$$.fragment,Xs),gWe=i(Xs),QC=n(Xs,"P",{});var e$e=s(QC);hWe=r(e$e,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=n(e$e,"A",{href:!0});var wjr=s(wk);pWe=r(wjr,"AutoTokenizer.from_pretrained()"),wjr.forEach(t),_We=r(e$e," class method."),e$e.forEach(t),uWe=i(Xs),WC=n(Xs,"P",{});var o$e=s(WC);bWe=r(o$e,"This class cannot be instantiated directly using "),CZ=n(o$e,"CODE",{});var Ajr=s(CZ);vWe=r(Ajr,"__init__()"),Ajr.forEach(t),FWe=r(o$e," (throws an error)."),o$e.forEach(t),TWe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(HC.$$.fragment,ha),MWe=i(ha),wZ=n(ha,"P",{});var yjr=s(wZ);EWe=r(yjr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),yjr.forEach(t),CWe=i(ha),Oa=n(ha,"P",{});var RE=s(Oa);wWe=r(RE,"The tokenizer class to instantiate is selected based on the "),AZ=n(RE,"CODE",{});var Ljr=s(AZ);AWe=r(Ljr,"model_type"),Ljr.forEach(t),yWe=r(RE,` property of the config object (either
passed as an argument or loaded from `),yZ=n(RE,"CODE",{});var xjr=s(yZ);LWe=r(xjr,"pretrained_model_name_or_path"),xjr.forEach(t),xWe=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),LZ=n(RE,"CODE",{});var kjr=s(LZ);kWe=r(kjr,"pretrained_model_name_or_path"),kjr.forEach(t),SWe=r(RE,":"),RE.forEach(t),RWe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var yL=s(Wn);xZ=n(yL,"STRONG",{});var Sjr=s(xZ);BWe=r(Sjr,"albert"),Sjr.forEach(t),PWe=r(yL," \u2014 "),Ak=n(yL,"A",{href:!0});var Rjr=s(Ak);$We=r(Rjr,"AlbertTokenizer"),Rjr.forEach(t),IWe=r(yL," or "),yk=n(yL,"A",{href:!0});var Bjr=s(yk);qWe=r(Bjr,"AlbertTokenizerFast"),Bjr.forEach(t),NWe=r(yL," (ALBERT model)"),yL.forEach(t),jWe=i(C),Hn=n(C,"LI",{});var LL=s(Hn);kZ=n(LL,"STRONG",{});var Pjr=s(kZ);DWe=r(Pjr,"bart"),Pjr.forEach(t),GWe=r(LL," \u2014 "),Lk=n(LL,"A",{href:!0});var $jr=s(Lk);OWe=r($jr,"BartTokenizer"),$jr.forEach(t),VWe=r(LL," or "),xk=n(LL,"A",{href:!0});var Ijr=s(xk);XWe=r(Ijr,"BartTokenizerFast"),Ijr.forEach(t),zWe=r(LL," (BART model)"),LL.forEach(t),QWe=i(C),Un=n(C,"LI",{});var xL=s(Un);SZ=n(xL,"STRONG",{});var qjr=s(SZ);WWe=r(qjr,"barthez"),qjr.forEach(t),HWe=r(xL," \u2014 "),kk=n(xL,"A",{href:!0});var Njr=s(kk);UWe=r(Njr,"BarthezTokenizer"),Njr.forEach(t),JWe=r(xL," or "),Sk=n(xL,"A",{href:!0});var jjr=s(Sk);YWe=r(jjr,"BarthezTokenizerFast"),jjr.forEach(t),KWe=r(xL," (BARThez model)"),xL.forEach(t),ZWe=i(C),Gg=n(C,"LI",{});var e4e=s(Gg);RZ=n(e4e,"STRONG",{});var Djr=s(RZ);eHe=r(Djr,"bartpho"),Djr.forEach(t),oHe=r(e4e," \u2014 "),Rk=n(e4e,"A",{href:!0});var Gjr=s(Rk);rHe=r(Gjr,"BartphoTokenizer"),Gjr.forEach(t),tHe=r(e4e," (BARTpho model)"),e4e.forEach(t),aHe=i(C),Jn=n(C,"LI",{});var kL=s(Jn);BZ=n(kL,"STRONG",{});var Ojr=s(BZ);nHe=r(Ojr,"bert"),Ojr.forEach(t),sHe=r(kL," \u2014 "),Bk=n(kL,"A",{href:!0});var Vjr=s(Bk);lHe=r(Vjr,"BertTokenizer"),Vjr.forEach(t),iHe=r(kL," or "),Pk=n(kL,"A",{href:!0});var Xjr=s(Pk);dHe=r(Xjr,"BertTokenizerFast"),Xjr.forEach(t),cHe=r(kL," (BERT model)"),kL.forEach(t),fHe=i(C),Og=n(C,"LI",{});var o4e=s(Og);PZ=n(o4e,"STRONG",{});var zjr=s(PZ);mHe=r(zjr,"bert-generation"),zjr.forEach(t),gHe=r(o4e," \u2014 "),$k=n(o4e,"A",{href:!0});var Qjr=s($k);hHe=r(Qjr,"BertGenerationTokenizer"),Qjr.forEach(t),pHe=r(o4e," (Bert Generation model)"),o4e.forEach(t),_He=i(C),Vg=n(C,"LI",{});var r4e=s(Vg);$Z=n(r4e,"STRONG",{});var Wjr=s($Z);uHe=r(Wjr,"bert-japanese"),Wjr.forEach(t),bHe=r(r4e," \u2014 "),Ik=n(r4e,"A",{href:!0});var Hjr=s(Ik);vHe=r(Hjr,"BertJapaneseTokenizer"),Hjr.forEach(t),FHe=r(r4e," (BertJapanese model)"),r4e.forEach(t),THe=i(C),Xg=n(C,"LI",{});var t4e=s(Xg);IZ=n(t4e,"STRONG",{});var Ujr=s(IZ);MHe=r(Ujr,"bertweet"),Ujr.forEach(t),EHe=r(t4e," \u2014 "),qk=n(t4e,"A",{href:!0});var Jjr=s(qk);CHe=r(Jjr,"BertweetTokenizer"),Jjr.forEach(t),wHe=r(t4e," (Bertweet model)"),t4e.forEach(t),AHe=i(C),Yn=n(C,"LI",{});var SL=s(Yn);qZ=n(SL,"STRONG",{});var Yjr=s(qZ);yHe=r(Yjr,"big_bird"),Yjr.forEach(t),LHe=r(SL," \u2014 "),Nk=n(SL,"A",{href:!0});var Kjr=s(Nk);xHe=r(Kjr,"BigBirdTokenizer"),Kjr.forEach(t),kHe=r(SL," or "),jk=n(SL,"A",{href:!0});var Zjr=s(jk);SHe=r(Zjr,"BigBirdTokenizerFast"),Zjr.forEach(t),RHe=r(SL," (BigBird model)"),SL.forEach(t),BHe=i(C),Kn=n(C,"LI",{});var RL=s(Kn);NZ=n(RL,"STRONG",{});var eDr=s(NZ);PHe=r(eDr,"bigbird_pegasus"),eDr.forEach(t),$He=r(RL," \u2014 "),Dk=n(RL,"A",{href:!0});var oDr=s(Dk);IHe=r(oDr,"PegasusTokenizer"),oDr.forEach(t),qHe=r(RL," or "),Gk=n(RL,"A",{href:!0});var rDr=s(Gk);NHe=r(rDr,"PegasusTokenizerFast"),rDr.forEach(t),jHe=r(RL," (BigBirdPegasus model)"),RL.forEach(t),DHe=i(C),Zn=n(C,"LI",{});var BL=s(Zn);jZ=n(BL,"STRONG",{});var tDr=s(jZ);GHe=r(tDr,"blenderbot"),tDr.forEach(t),OHe=r(BL," \u2014 "),Ok=n(BL,"A",{href:!0});var aDr=s(Ok);VHe=r(aDr,"BlenderbotTokenizer"),aDr.forEach(t),XHe=r(BL," or "),Vk=n(BL,"A",{href:!0});var nDr=s(Vk);zHe=r(nDr,"BlenderbotTokenizerFast"),nDr.forEach(t),QHe=r(BL," (Blenderbot model)"),BL.forEach(t),WHe=i(C),zg=n(C,"LI",{});var a4e=s(zg);DZ=n(a4e,"STRONG",{});var sDr=s(DZ);HHe=r(sDr,"blenderbot-small"),sDr.forEach(t),UHe=r(a4e," \u2014 "),Xk=n(a4e,"A",{href:!0});var lDr=s(Xk);JHe=r(lDr,"BlenderbotSmallTokenizer"),lDr.forEach(t),YHe=r(a4e," (BlenderbotSmall model)"),a4e.forEach(t),KHe=i(C),Qg=n(C,"LI",{});var n4e=s(Qg);GZ=n(n4e,"STRONG",{});var iDr=s(GZ);ZHe=r(iDr,"byt5"),iDr.forEach(t),eUe=r(n4e," \u2014 "),zk=n(n4e,"A",{href:!0});var dDr=s(zk);oUe=r(dDr,"ByT5Tokenizer"),dDr.forEach(t),rUe=r(n4e," (ByT5 model)"),n4e.forEach(t),tUe=i(C),es=n(C,"LI",{});var PL=s(es);OZ=n(PL,"STRONG",{});var cDr=s(OZ);aUe=r(cDr,"camembert"),cDr.forEach(t),nUe=r(PL," \u2014 "),Qk=n(PL,"A",{href:!0});var fDr=s(Qk);sUe=r(fDr,"CamembertTokenizer"),fDr.forEach(t),lUe=r(PL," or "),Wk=n(PL,"A",{href:!0});var mDr=s(Wk);iUe=r(mDr,"CamembertTokenizerFast"),mDr.forEach(t),dUe=r(PL," (CamemBERT model)"),PL.forEach(t),cUe=i(C),Wg=n(C,"LI",{});var s4e=s(Wg);VZ=n(s4e,"STRONG",{});var gDr=s(VZ);fUe=r(gDr,"canine"),gDr.forEach(t),mUe=r(s4e," \u2014 "),Hk=n(s4e,"A",{href:!0});var hDr=s(Hk);gUe=r(hDr,"CanineTokenizer"),hDr.forEach(t),hUe=r(s4e," (Canine model)"),s4e.forEach(t),pUe=i(C),os=n(C,"LI",{});var $L=s(os);XZ=n($L,"STRONG",{});var pDr=s(XZ);_Ue=r(pDr,"clip"),pDr.forEach(t),uUe=r($L," \u2014 "),Uk=n($L,"A",{href:!0});var _Dr=s(Uk);bUe=r(_Dr,"CLIPTokenizer"),_Dr.forEach(t),vUe=r($L," or "),Jk=n($L,"A",{href:!0});var uDr=s(Jk);FUe=r(uDr,"CLIPTokenizerFast"),uDr.forEach(t),TUe=r($L," (CLIP model)"),$L.forEach(t),MUe=i(C),rs=n(C,"LI",{});var IL=s(rs);zZ=n(IL,"STRONG",{});var bDr=s(zZ);EUe=r(bDr,"convbert"),bDr.forEach(t),CUe=r(IL," \u2014 "),Yk=n(IL,"A",{href:!0});var vDr=s(Yk);wUe=r(vDr,"ConvBertTokenizer"),vDr.forEach(t),AUe=r(IL," or "),Kk=n(IL,"A",{href:!0});var FDr=s(Kk);yUe=r(FDr,"ConvBertTokenizerFast"),FDr.forEach(t),LUe=r(IL," (ConvBERT model)"),IL.forEach(t),xUe=i(C),ts=n(C,"LI",{});var qL=s(ts);QZ=n(qL,"STRONG",{});var TDr=s(QZ);kUe=r(TDr,"cpm"),TDr.forEach(t),SUe=r(qL," \u2014 "),Zk=n(qL,"A",{href:!0});var MDr=s(Zk);RUe=r(MDr,"CpmTokenizer"),MDr.forEach(t),BUe=r(qL," or "),WZ=n(qL,"CODE",{});var EDr=s(WZ);PUe=r(EDr,"CpmTokenizerFast"),EDr.forEach(t),$Ue=r(qL," (CPM model)"),qL.forEach(t),IUe=i(C),Hg=n(C,"LI",{});var l4e=s(Hg);HZ=n(l4e,"STRONG",{});var CDr=s(HZ);qUe=r(CDr,"ctrl"),CDr.forEach(t),NUe=r(l4e," \u2014 "),eS=n(l4e,"A",{href:!0});var wDr=s(eS);jUe=r(wDr,"CTRLTokenizer"),wDr.forEach(t),DUe=r(l4e," (CTRL model)"),l4e.forEach(t),GUe=i(C),as=n(C,"LI",{});var NL=s(as);UZ=n(NL,"STRONG",{});var ADr=s(UZ);OUe=r(ADr,"deberta"),ADr.forEach(t),VUe=r(NL," \u2014 "),oS=n(NL,"A",{href:!0});var yDr=s(oS);XUe=r(yDr,"DebertaTokenizer"),yDr.forEach(t),zUe=r(NL," or "),rS=n(NL,"A",{href:!0});var LDr=s(rS);QUe=r(LDr,"DebertaTokenizerFast"),LDr.forEach(t),WUe=r(NL," (DeBERTa model)"),NL.forEach(t),HUe=i(C),Ug=n(C,"LI",{});var i4e=s(Ug);JZ=n(i4e,"STRONG",{});var xDr=s(JZ);UUe=r(xDr,"deberta-v2"),xDr.forEach(t),JUe=r(i4e," \u2014 "),tS=n(i4e,"A",{href:!0});var kDr=s(tS);YUe=r(kDr,"DebertaV2Tokenizer"),kDr.forEach(t),KUe=r(i4e," (DeBERTa-v2 model)"),i4e.forEach(t),ZUe=i(C),ns=n(C,"LI",{});var jL=s(ns);YZ=n(jL,"STRONG",{});var SDr=s(YZ);eJe=r(SDr,"distilbert"),SDr.forEach(t),oJe=r(jL," \u2014 "),aS=n(jL,"A",{href:!0});var RDr=s(aS);rJe=r(RDr,"DistilBertTokenizer"),RDr.forEach(t),tJe=r(jL," or "),nS=n(jL,"A",{href:!0});var BDr=s(nS);aJe=r(BDr,"DistilBertTokenizerFast"),BDr.forEach(t),nJe=r(jL," (DistilBERT model)"),jL.forEach(t),sJe=i(C),ss=n(C,"LI",{});var DL=s(ss);KZ=n(DL,"STRONG",{});var PDr=s(KZ);lJe=r(PDr,"dpr"),PDr.forEach(t),iJe=r(DL," \u2014 "),sS=n(DL,"A",{href:!0});var $Dr=s(sS);dJe=r($Dr,"DPRQuestionEncoderTokenizer"),$Dr.forEach(t),cJe=r(DL," or "),lS=n(DL,"A",{href:!0});var IDr=s(lS);fJe=r(IDr,"DPRQuestionEncoderTokenizerFast"),IDr.forEach(t),mJe=r(DL," (DPR model)"),DL.forEach(t),gJe=i(C),ls=n(C,"LI",{});var GL=s(ls);ZZ=n(GL,"STRONG",{});var qDr=s(ZZ);hJe=r(qDr,"electra"),qDr.forEach(t),pJe=r(GL," \u2014 "),iS=n(GL,"A",{href:!0});var NDr=s(iS);_Je=r(NDr,"ElectraTokenizer"),NDr.forEach(t),uJe=r(GL," or "),dS=n(GL,"A",{href:!0});var jDr=s(dS);bJe=r(jDr,"ElectraTokenizerFast"),jDr.forEach(t),vJe=r(GL," (ELECTRA model)"),GL.forEach(t),FJe=i(C),Jg=n(C,"LI",{});var d4e=s(Jg);eee=n(d4e,"STRONG",{});var DDr=s(eee);TJe=r(DDr,"fastspeech2"),DDr.forEach(t),MJe=r(d4e," \u2014 "),cS=n(d4e,"A",{href:!0});var GDr=s(cS);EJe=r(GDr,"FastSpeech2Tokenizer"),GDr.forEach(t),CJe=r(d4e," (FastSpeech2 model)"),d4e.forEach(t),wJe=i(C),Yg=n(C,"LI",{});var c4e=s(Yg);oee=n(c4e,"STRONG",{});var ODr=s(oee);AJe=r(ODr,"flaubert"),ODr.forEach(t),yJe=r(c4e," \u2014 "),fS=n(c4e,"A",{href:!0});var VDr=s(fS);LJe=r(VDr,"FlaubertTokenizer"),VDr.forEach(t),xJe=r(c4e," (FlauBERT model)"),c4e.forEach(t),kJe=i(C),is=n(C,"LI",{});var OL=s(is);ree=n(OL,"STRONG",{});var XDr=s(ree);SJe=r(XDr,"fnet"),XDr.forEach(t),RJe=r(OL," \u2014 "),mS=n(OL,"A",{href:!0});var zDr=s(mS);BJe=r(zDr,"FNetTokenizer"),zDr.forEach(t),PJe=r(OL," or "),gS=n(OL,"A",{href:!0});var QDr=s(gS);$Je=r(QDr,"FNetTokenizerFast"),QDr.forEach(t),IJe=r(OL," (FNet model)"),OL.forEach(t),qJe=i(C),Kg=n(C,"LI",{});var f4e=s(Kg);tee=n(f4e,"STRONG",{});var WDr=s(tee);NJe=r(WDr,"fsmt"),WDr.forEach(t),jJe=r(f4e," \u2014 "),hS=n(f4e,"A",{href:!0});var HDr=s(hS);DJe=r(HDr,"FSMTTokenizer"),HDr.forEach(t),GJe=r(f4e," (FairSeq Machine-Translation model)"),f4e.forEach(t),OJe=i(C),ds=n(C,"LI",{});var VL=s(ds);aee=n(VL,"STRONG",{});var UDr=s(aee);VJe=r(UDr,"funnel"),UDr.forEach(t),XJe=r(VL," \u2014 "),pS=n(VL,"A",{href:!0});var JDr=s(pS);zJe=r(JDr,"FunnelTokenizer"),JDr.forEach(t),QJe=r(VL," or "),_S=n(VL,"A",{href:!0});var YDr=s(_S);WJe=r(YDr,"FunnelTokenizerFast"),YDr.forEach(t),HJe=r(VL," (Funnel Transformer model)"),VL.forEach(t),UJe=i(C),cs=n(C,"LI",{});var XL=s(cs);nee=n(XL,"STRONG",{});var KDr=s(nee);JJe=r(KDr,"gpt2"),KDr.forEach(t),YJe=r(XL," \u2014 "),uS=n(XL,"A",{href:!0});var ZDr=s(uS);KJe=r(ZDr,"GPT2Tokenizer"),ZDr.forEach(t),ZJe=r(XL," or "),bS=n(XL,"A",{href:!0});var eGr=s(bS);eYe=r(eGr,"GPT2TokenizerFast"),eGr.forEach(t),oYe=r(XL," (OpenAI GPT-2 model)"),XL.forEach(t),rYe=i(C),fs=n(C,"LI",{});var zL=s(fs);see=n(zL,"STRONG",{});var oGr=s(see);tYe=r(oGr,"gpt_neo"),oGr.forEach(t),aYe=r(zL," \u2014 "),vS=n(zL,"A",{href:!0});var rGr=s(vS);nYe=r(rGr,"GPT2Tokenizer"),rGr.forEach(t),sYe=r(zL," or "),FS=n(zL,"A",{href:!0});var tGr=s(FS);lYe=r(tGr,"GPT2TokenizerFast"),tGr.forEach(t),iYe=r(zL," (GPT Neo model)"),zL.forEach(t),dYe=i(C),ms=n(C,"LI",{});var QL=s(ms);lee=n(QL,"STRONG",{});var aGr=s(lee);cYe=r(aGr,"herbert"),aGr.forEach(t),fYe=r(QL," \u2014 "),TS=n(QL,"A",{href:!0});var nGr=s(TS);mYe=r(nGr,"HerbertTokenizer"),nGr.forEach(t),gYe=r(QL," or "),MS=n(QL,"A",{href:!0});var sGr=s(MS);hYe=r(sGr,"HerbertTokenizerFast"),sGr.forEach(t),pYe=r(QL," (HerBERT model)"),QL.forEach(t),_Ye=i(C),Zg=n(C,"LI",{});var m4e=s(Zg);iee=n(m4e,"STRONG",{});var lGr=s(iee);uYe=r(lGr,"hubert"),lGr.forEach(t),bYe=r(m4e," \u2014 "),ES=n(m4e,"A",{href:!0});var iGr=s(ES);vYe=r(iGr,"Wav2Vec2CTCTokenizer"),iGr.forEach(t),FYe=r(m4e," (Hubert model)"),m4e.forEach(t),TYe=i(C),gs=n(C,"LI",{});var WL=s(gs);dee=n(WL,"STRONG",{});var dGr=s(dee);MYe=r(dGr,"ibert"),dGr.forEach(t),EYe=r(WL," \u2014 "),CS=n(WL,"A",{href:!0});var cGr=s(CS);CYe=r(cGr,"RobertaTokenizer"),cGr.forEach(t),wYe=r(WL," or "),wS=n(WL,"A",{href:!0});var fGr=s(wS);AYe=r(fGr,"RobertaTokenizerFast"),fGr.forEach(t),yYe=r(WL," (I-BERT model)"),WL.forEach(t),LYe=i(C),hs=n(C,"LI",{});var HL=s(hs);cee=n(HL,"STRONG",{});var mGr=s(cee);xYe=r(mGr,"layoutlm"),mGr.forEach(t),kYe=r(HL," \u2014 "),AS=n(HL,"A",{href:!0});var gGr=s(AS);SYe=r(gGr,"LayoutLMTokenizer"),gGr.forEach(t),RYe=r(HL," or "),yS=n(HL,"A",{href:!0});var hGr=s(yS);BYe=r(hGr,"LayoutLMTokenizerFast"),hGr.forEach(t),PYe=r(HL," (LayoutLM model)"),HL.forEach(t),$Ye=i(C),ps=n(C,"LI",{});var UL=s(ps);fee=n(UL,"STRONG",{});var pGr=s(fee);IYe=r(pGr,"layoutlmv2"),pGr.forEach(t),qYe=r(UL," \u2014 "),LS=n(UL,"A",{href:!0});var _Gr=s(LS);NYe=r(_Gr,"LayoutLMv2Tokenizer"),_Gr.forEach(t),jYe=r(UL," or "),xS=n(UL,"A",{href:!0});var uGr=s(xS);DYe=r(uGr,"LayoutLMv2TokenizerFast"),uGr.forEach(t),GYe=r(UL," (LayoutLMv2 model)"),UL.forEach(t),OYe=i(C),_s=n(C,"LI",{});var JL=s(_s);mee=n(JL,"STRONG",{});var bGr=s(mee);VYe=r(bGr,"layoutxlm"),bGr.forEach(t),XYe=r(JL," \u2014 "),kS=n(JL,"A",{href:!0});var vGr=s(kS);zYe=r(vGr,"LayoutXLMTokenizer"),vGr.forEach(t),QYe=r(JL," or "),SS=n(JL,"A",{href:!0});var FGr=s(SS);WYe=r(FGr,"LayoutXLMTokenizerFast"),FGr.forEach(t),HYe=r(JL," (LayoutXLM model)"),JL.forEach(t),UYe=i(C),us=n(C,"LI",{});var YL=s(us);gee=n(YL,"STRONG",{});var TGr=s(gee);JYe=r(TGr,"led"),TGr.forEach(t),YYe=r(YL," \u2014 "),RS=n(YL,"A",{href:!0});var MGr=s(RS);KYe=r(MGr,"LEDTokenizer"),MGr.forEach(t),ZYe=r(YL," or "),BS=n(YL,"A",{href:!0});var EGr=s(BS);eKe=r(EGr,"LEDTokenizerFast"),EGr.forEach(t),oKe=r(YL," (LED model)"),YL.forEach(t),rKe=i(C),bs=n(C,"LI",{});var KL=s(bs);hee=n(KL,"STRONG",{});var CGr=s(hee);tKe=r(CGr,"longformer"),CGr.forEach(t),aKe=r(KL," \u2014 "),PS=n(KL,"A",{href:!0});var wGr=s(PS);nKe=r(wGr,"LongformerTokenizer"),wGr.forEach(t),sKe=r(KL," or "),$S=n(KL,"A",{href:!0});var AGr=s($S);lKe=r(AGr,"LongformerTokenizerFast"),AGr.forEach(t),iKe=r(KL," (Longformer model)"),KL.forEach(t),dKe=i(C),eh=n(C,"LI",{});var g4e=s(eh);pee=n(g4e,"STRONG",{});var yGr=s(pee);cKe=r(yGr,"luke"),yGr.forEach(t),fKe=r(g4e," \u2014 "),IS=n(g4e,"A",{href:!0});var LGr=s(IS);mKe=r(LGr,"LukeTokenizer"),LGr.forEach(t),gKe=r(g4e," (LUKE model)"),g4e.forEach(t),hKe=i(C),vs=n(C,"LI",{});var ZL=s(vs);_ee=n(ZL,"STRONG",{});var xGr=s(_ee);pKe=r(xGr,"lxmert"),xGr.forEach(t),_Ke=r(ZL," \u2014 "),qS=n(ZL,"A",{href:!0});var kGr=s(qS);uKe=r(kGr,"LxmertTokenizer"),kGr.forEach(t),bKe=r(ZL," or "),NS=n(ZL,"A",{href:!0});var SGr=s(NS);vKe=r(SGr,"LxmertTokenizerFast"),SGr.forEach(t),FKe=r(ZL," (LXMERT model)"),ZL.forEach(t),TKe=i(C),oh=n(C,"LI",{});var h4e=s(oh);uee=n(h4e,"STRONG",{});var RGr=s(uee);MKe=r(RGr,"m2m_100"),RGr.forEach(t),EKe=r(h4e," \u2014 "),jS=n(h4e,"A",{href:!0});var BGr=s(jS);CKe=r(BGr,"M2M100Tokenizer"),BGr.forEach(t),wKe=r(h4e," (M2M100 model)"),h4e.forEach(t),AKe=i(C),rh=n(C,"LI",{});var p4e=s(rh);bee=n(p4e,"STRONG",{});var PGr=s(bee);yKe=r(PGr,"marian"),PGr.forEach(t),LKe=r(p4e," \u2014 "),DS=n(p4e,"A",{href:!0});var $Gr=s(DS);xKe=r($Gr,"MarianTokenizer"),$Gr.forEach(t),kKe=r(p4e," (Marian model)"),p4e.forEach(t),SKe=i(C),Fs=n(C,"LI",{});var e9=s(Fs);vee=n(e9,"STRONG",{});var IGr=s(vee);RKe=r(IGr,"mbart"),IGr.forEach(t),BKe=r(e9," \u2014 "),GS=n(e9,"A",{href:!0});var qGr=s(GS);PKe=r(qGr,"MBartTokenizer"),qGr.forEach(t),$Ke=r(e9," or "),OS=n(e9,"A",{href:!0});var NGr=s(OS);IKe=r(NGr,"MBartTokenizerFast"),NGr.forEach(t),qKe=r(e9," (mBART model)"),e9.forEach(t),NKe=i(C),Ts=n(C,"LI",{});var o9=s(Ts);Fee=n(o9,"STRONG",{});var jGr=s(Fee);jKe=r(jGr,"mbart50"),jGr.forEach(t),DKe=r(o9," \u2014 "),VS=n(o9,"A",{href:!0});var DGr=s(VS);GKe=r(DGr,"MBart50Tokenizer"),DGr.forEach(t),OKe=r(o9," or "),XS=n(o9,"A",{href:!0});var GGr=s(XS);VKe=r(GGr,"MBart50TokenizerFast"),GGr.forEach(t),XKe=r(o9," (mBART-50 model)"),o9.forEach(t),zKe=i(C),th=n(C,"LI",{});var _4e=s(th);Tee=n(_4e,"STRONG",{});var OGr=s(Tee);QKe=r(OGr,"mluke"),OGr.forEach(t),WKe=r(_4e," \u2014 "),zS=n(_4e,"A",{href:!0});var VGr=s(zS);HKe=r(VGr,"MLukeTokenizer"),VGr.forEach(t),UKe=r(_4e," (mLUKE model)"),_4e.forEach(t),JKe=i(C),Ms=n(C,"LI",{});var r9=s(Ms);Mee=n(r9,"STRONG",{});var XGr=s(Mee);YKe=r(XGr,"mobilebert"),XGr.forEach(t),KKe=r(r9," \u2014 "),QS=n(r9,"A",{href:!0});var zGr=s(QS);ZKe=r(zGr,"MobileBertTokenizer"),zGr.forEach(t),eZe=r(r9," or "),WS=n(r9,"A",{href:!0});var QGr=s(WS);oZe=r(QGr,"MobileBertTokenizerFast"),QGr.forEach(t),rZe=r(r9," (MobileBERT model)"),r9.forEach(t),tZe=i(C),Es=n(C,"LI",{});var t9=s(Es);Eee=n(t9,"STRONG",{});var WGr=s(Eee);aZe=r(WGr,"mpnet"),WGr.forEach(t),nZe=r(t9," \u2014 "),HS=n(t9,"A",{href:!0});var HGr=s(HS);sZe=r(HGr,"MPNetTokenizer"),HGr.forEach(t),lZe=r(t9," or "),US=n(t9,"A",{href:!0});var UGr=s(US);iZe=r(UGr,"MPNetTokenizerFast"),UGr.forEach(t),dZe=r(t9," (MPNet model)"),t9.forEach(t),cZe=i(C),Cs=n(C,"LI",{});var a9=s(Cs);Cee=n(a9,"STRONG",{});var JGr=s(Cee);fZe=r(JGr,"mt5"),JGr.forEach(t),mZe=r(a9," \u2014 "),JS=n(a9,"A",{href:!0});var YGr=s(JS);gZe=r(YGr,"MT5Tokenizer"),YGr.forEach(t),hZe=r(a9," or "),YS=n(a9,"A",{href:!0});var KGr=s(YS);pZe=r(KGr,"MT5TokenizerFast"),KGr.forEach(t),_Ze=r(a9," (mT5 model)"),a9.forEach(t),uZe=i(C),ws=n(C,"LI",{});var n9=s(ws);wee=n(n9,"STRONG",{});var ZGr=s(wee);bZe=r(ZGr,"openai-gpt"),ZGr.forEach(t),vZe=r(n9," \u2014 "),KS=n(n9,"A",{href:!0});var eOr=s(KS);FZe=r(eOr,"OpenAIGPTTokenizer"),eOr.forEach(t),TZe=r(n9," or "),ZS=n(n9,"A",{href:!0});var oOr=s(ZS);MZe=r(oOr,"OpenAIGPTTokenizerFast"),oOr.forEach(t),EZe=r(n9," (OpenAI GPT model)"),n9.forEach(t),CZe=i(C),As=n(C,"LI",{});var s9=s(As);Aee=n(s9,"STRONG",{});var rOr=s(Aee);wZe=r(rOr,"pegasus"),rOr.forEach(t),AZe=r(s9," \u2014 "),eR=n(s9,"A",{href:!0});var tOr=s(eR);yZe=r(tOr,"PegasusTokenizer"),tOr.forEach(t),LZe=r(s9," or "),oR=n(s9,"A",{href:!0});var aOr=s(oR);xZe=r(aOr,"PegasusTokenizerFast"),aOr.forEach(t),kZe=r(s9," (Pegasus model)"),s9.forEach(t),SZe=i(C),ah=n(C,"LI",{});var u4e=s(ah);yee=n(u4e,"STRONG",{});var nOr=s(yee);RZe=r(nOr,"perceiver"),nOr.forEach(t),BZe=r(u4e," \u2014 "),rR=n(u4e,"A",{href:!0});var sOr=s(rR);PZe=r(sOr,"PerceiverTokenizer"),sOr.forEach(t),$Ze=r(u4e," (Perceiver model)"),u4e.forEach(t),IZe=i(C),nh=n(C,"LI",{});var b4e=s(nh);Lee=n(b4e,"STRONG",{});var lOr=s(Lee);qZe=r(lOr,"phobert"),lOr.forEach(t),NZe=r(b4e," \u2014 "),tR=n(b4e,"A",{href:!0});var iOr=s(tR);jZe=r(iOr,"PhobertTokenizer"),iOr.forEach(t),DZe=r(b4e," (PhoBERT model)"),b4e.forEach(t),GZe=i(C),sh=n(C,"LI",{});var v4e=s(sh);xee=n(v4e,"STRONG",{});var dOr=s(xee);OZe=r(dOr,"plbart"),dOr.forEach(t),VZe=r(v4e," \u2014 "),aR=n(v4e,"A",{href:!0});var cOr=s(aR);XZe=r(cOr,"PLBartTokenizer"),cOr.forEach(t),zZe=r(v4e," (PLBart model)"),v4e.forEach(t),QZe=i(C),lh=n(C,"LI",{});var F4e=s(lh);kee=n(F4e,"STRONG",{});var fOr=s(kee);WZe=r(fOr,"prophetnet"),fOr.forEach(t),HZe=r(F4e," \u2014 "),nR=n(F4e,"A",{href:!0});var mOr=s(nR);UZe=r(mOr,"ProphetNetTokenizer"),mOr.forEach(t),JZe=r(F4e," (ProphetNet model)"),F4e.forEach(t),YZe=i(C),ys=n(C,"LI",{});var l9=s(ys);See=n(l9,"STRONG",{});var gOr=s(See);KZe=r(gOr,"qdqbert"),gOr.forEach(t),ZZe=r(l9," \u2014 "),sR=n(l9,"A",{href:!0});var hOr=s(sR);eeo=r(hOr,"BertTokenizer"),hOr.forEach(t),oeo=r(l9," or "),lR=n(l9,"A",{href:!0});var pOr=s(lR);reo=r(pOr,"BertTokenizerFast"),pOr.forEach(t),teo=r(l9," (QDQBert model)"),l9.forEach(t),aeo=i(C),ih=n(C,"LI",{});var T4e=s(ih);Ree=n(T4e,"STRONG",{});var _Or=s(Ree);neo=r(_Or,"rag"),_Or.forEach(t),seo=r(T4e," \u2014 "),iR=n(T4e,"A",{href:!0});var uOr=s(iR);leo=r(uOr,"RagTokenizer"),uOr.forEach(t),ieo=r(T4e," (RAG model)"),T4e.forEach(t),deo=i(C),Ls=n(C,"LI",{});var i9=s(Ls);Bee=n(i9,"STRONG",{});var bOr=s(Bee);ceo=r(bOr,"realm"),bOr.forEach(t),feo=r(i9," \u2014 "),dR=n(i9,"A",{href:!0});var vOr=s(dR);meo=r(vOr,"RealmTokenizer"),vOr.forEach(t),geo=r(i9," or "),cR=n(i9,"A",{href:!0});var FOr=s(cR);heo=r(FOr,"RealmTokenizerFast"),FOr.forEach(t),peo=r(i9," (Realm model)"),i9.forEach(t),_eo=i(C),xs=n(C,"LI",{});var d9=s(xs);Pee=n(d9,"STRONG",{});var TOr=s(Pee);ueo=r(TOr,"reformer"),TOr.forEach(t),beo=r(d9," \u2014 "),fR=n(d9,"A",{href:!0});var MOr=s(fR);veo=r(MOr,"ReformerTokenizer"),MOr.forEach(t),Feo=r(d9," or "),mR=n(d9,"A",{href:!0});var EOr=s(mR);Teo=r(EOr,"ReformerTokenizerFast"),EOr.forEach(t),Meo=r(d9," (Reformer model)"),d9.forEach(t),Eeo=i(C),ks=n(C,"LI",{});var c9=s(ks);$ee=n(c9,"STRONG",{});var COr=s($ee);Ceo=r(COr,"rembert"),COr.forEach(t),weo=r(c9," \u2014 "),gR=n(c9,"A",{href:!0});var wOr=s(gR);Aeo=r(wOr,"RemBertTokenizer"),wOr.forEach(t),yeo=r(c9," or "),hR=n(c9,"A",{href:!0});var AOr=s(hR);Leo=r(AOr,"RemBertTokenizerFast"),AOr.forEach(t),xeo=r(c9," (RemBERT model)"),c9.forEach(t),keo=i(C),Ss=n(C,"LI",{});var f9=s(Ss);Iee=n(f9,"STRONG",{});var yOr=s(Iee);Seo=r(yOr,"retribert"),yOr.forEach(t),Reo=r(f9," \u2014 "),pR=n(f9,"A",{href:!0});var LOr=s(pR);Beo=r(LOr,"RetriBertTokenizer"),LOr.forEach(t),Peo=r(f9," or "),_R=n(f9,"A",{href:!0});var xOr=s(_R);$eo=r(xOr,"RetriBertTokenizerFast"),xOr.forEach(t),Ieo=r(f9," (RetriBERT model)"),f9.forEach(t),qeo=i(C),Rs=n(C,"LI",{});var m9=s(Rs);qee=n(m9,"STRONG",{});var kOr=s(qee);Neo=r(kOr,"roberta"),kOr.forEach(t),jeo=r(m9," \u2014 "),uR=n(m9,"A",{href:!0});var SOr=s(uR);Deo=r(SOr,"RobertaTokenizer"),SOr.forEach(t),Geo=r(m9," or "),bR=n(m9,"A",{href:!0});var ROr=s(bR);Oeo=r(ROr,"RobertaTokenizerFast"),ROr.forEach(t),Veo=r(m9," (RoBERTa model)"),m9.forEach(t),Xeo=i(C),Bs=n(C,"LI",{});var g9=s(Bs);Nee=n(g9,"STRONG",{});var BOr=s(Nee);zeo=r(BOr,"roformer"),BOr.forEach(t),Qeo=r(g9," \u2014 "),vR=n(g9,"A",{href:!0});var POr=s(vR);Weo=r(POr,"RoFormerTokenizer"),POr.forEach(t),Heo=r(g9," or "),FR=n(g9,"A",{href:!0});var $Or=s(FR);Ueo=r($Or,"RoFormerTokenizerFast"),$Or.forEach(t),Jeo=r(g9," (RoFormer model)"),g9.forEach(t),Yeo=i(C),dh=n(C,"LI",{});var M4e=s(dh);jee=n(M4e,"STRONG",{});var IOr=s(jee);Keo=r(IOr,"speech_to_text"),IOr.forEach(t),Zeo=r(M4e," \u2014 "),TR=n(M4e,"A",{href:!0});var qOr=s(TR);eoo=r(qOr,"Speech2TextTokenizer"),qOr.forEach(t),ooo=r(M4e," (Speech2Text model)"),M4e.forEach(t),roo=i(C),ch=n(C,"LI",{});var E4e=s(ch);Dee=n(E4e,"STRONG",{});var NOr=s(Dee);too=r(NOr,"speech_to_text_2"),NOr.forEach(t),aoo=r(E4e," \u2014 "),MR=n(E4e,"A",{href:!0});var jOr=s(MR);noo=r(jOr,"Speech2Text2Tokenizer"),jOr.forEach(t),soo=r(E4e," (Speech2Text2 model)"),E4e.forEach(t),loo=i(C),Ps=n(C,"LI",{});var h9=s(Ps);Gee=n(h9,"STRONG",{});var DOr=s(Gee);ioo=r(DOr,"splinter"),DOr.forEach(t),doo=r(h9," \u2014 "),ER=n(h9,"A",{href:!0});var GOr=s(ER);coo=r(GOr,"SplinterTokenizer"),GOr.forEach(t),foo=r(h9," or "),CR=n(h9,"A",{href:!0});var OOr=s(CR);moo=r(OOr,"SplinterTokenizerFast"),OOr.forEach(t),goo=r(h9," (Splinter model)"),h9.forEach(t),hoo=i(C),$s=n(C,"LI",{});var p9=s($s);Oee=n(p9,"STRONG",{});var VOr=s(Oee);poo=r(VOr,"squeezebert"),VOr.forEach(t),_oo=r(p9," \u2014 "),wR=n(p9,"A",{href:!0});var XOr=s(wR);uoo=r(XOr,"SqueezeBertTokenizer"),XOr.forEach(t),boo=r(p9," or "),AR=n(p9,"A",{href:!0});var zOr=s(AR);voo=r(zOr,"SqueezeBertTokenizerFast"),zOr.forEach(t),Foo=r(p9," (SqueezeBERT model)"),p9.forEach(t),Too=i(C),Is=n(C,"LI",{});var _9=s(Is);Vee=n(_9,"STRONG",{});var QOr=s(Vee);Moo=r(QOr,"t5"),QOr.forEach(t),Eoo=r(_9," \u2014 "),yR=n(_9,"A",{href:!0});var WOr=s(yR);Coo=r(WOr,"T5Tokenizer"),WOr.forEach(t),woo=r(_9," or "),LR=n(_9,"A",{href:!0});var HOr=s(LR);Aoo=r(HOr,"T5TokenizerFast"),HOr.forEach(t),yoo=r(_9," (T5 model)"),_9.forEach(t),Loo=i(C),fh=n(C,"LI",{});var C4e=s(fh);Xee=n(C4e,"STRONG",{});var UOr=s(Xee);xoo=r(UOr,"tapas"),UOr.forEach(t),koo=r(C4e," \u2014 "),xR=n(C4e,"A",{href:!0});var JOr=s(xR);Soo=r(JOr,"TapasTokenizer"),JOr.forEach(t),Roo=r(C4e," (TAPAS model)"),C4e.forEach(t),Boo=i(C),mh=n(C,"LI",{});var w4e=s(mh);zee=n(w4e,"STRONG",{});var YOr=s(zee);Poo=r(YOr,"tapex"),YOr.forEach(t),$oo=r(w4e," \u2014 "),kR=n(w4e,"A",{href:!0});var KOr=s(kR);Ioo=r(KOr,"TapexTokenizer"),KOr.forEach(t),qoo=r(w4e," (TAPEX model)"),w4e.forEach(t),Noo=i(C),gh=n(C,"LI",{});var A4e=s(gh);Qee=n(A4e,"STRONG",{});var ZOr=s(Qee);joo=r(ZOr,"transfo-xl"),ZOr.forEach(t),Doo=r(A4e," \u2014 "),SR=n(A4e,"A",{href:!0});var eVr=s(SR);Goo=r(eVr,"TransfoXLTokenizer"),eVr.forEach(t),Ooo=r(A4e," (Transformer-XL model)"),A4e.forEach(t),Voo=i(C),hh=n(C,"LI",{});var y4e=s(hh);Wee=n(y4e,"STRONG",{});var oVr=s(Wee);Xoo=r(oVr,"wav2vec2"),oVr.forEach(t),zoo=r(y4e," \u2014 "),RR=n(y4e,"A",{href:!0});var rVr=s(RR);Qoo=r(rVr,"Wav2Vec2CTCTokenizer"),rVr.forEach(t),Woo=r(y4e," (Wav2Vec2 model)"),y4e.forEach(t),Hoo=i(C),ph=n(C,"LI",{});var L4e=s(ph);Hee=n(L4e,"STRONG",{});var tVr=s(Hee);Uoo=r(tVr,"wav2vec2_phoneme"),tVr.forEach(t),Joo=r(L4e," \u2014 "),BR=n(L4e,"A",{href:!0});var aVr=s(BR);Yoo=r(aVr,"Wav2Vec2PhonemeCTCTokenizer"),aVr.forEach(t),Koo=r(L4e," (Wav2Vec2Phoneme model)"),L4e.forEach(t),Zoo=i(C),qs=n(C,"LI",{});var u9=s(qs);Uee=n(u9,"STRONG",{});var nVr=s(Uee);ero=r(nVr,"xglm"),nVr.forEach(t),oro=r(u9," \u2014 "),PR=n(u9,"A",{href:!0});var sVr=s(PR);rro=r(sVr,"XGLMTokenizer"),sVr.forEach(t),tro=r(u9," or "),$R=n(u9,"A",{href:!0});var lVr=s($R);aro=r(lVr,"XGLMTokenizerFast"),lVr.forEach(t),nro=r(u9," (XGLM model)"),u9.forEach(t),sro=i(C),_h=n(C,"LI",{});var x4e=s(_h);Jee=n(x4e,"STRONG",{});var iVr=s(Jee);lro=r(iVr,"xlm"),iVr.forEach(t),iro=r(x4e," \u2014 "),IR=n(x4e,"A",{href:!0});var dVr=s(IR);dro=r(dVr,"XLMTokenizer"),dVr.forEach(t),cro=r(x4e," (XLM model)"),x4e.forEach(t),fro=i(C),uh=n(C,"LI",{});var k4e=s(uh);Yee=n(k4e,"STRONG",{});var cVr=s(Yee);mro=r(cVr,"xlm-prophetnet"),cVr.forEach(t),gro=r(k4e," \u2014 "),qR=n(k4e,"A",{href:!0});var fVr=s(qR);hro=r(fVr,"XLMProphetNetTokenizer"),fVr.forEach(t),pro=r(k4e," (XLMProphetNet model)"),k4e.forEach(t),_ro=i(C),Ns=n(C,"LI",{});var b9=s(Ns);Kee=n(b9,"STRONG",{});var mVr=s(Kee);uro=r(mVr,"xlm-roberta"),mVr.forEach(t),bro=r(b9," \u2014 "),NR=n(b9,"A",{href:!0});var gVr=s(NR);vro=r(gVr,"XLMRobertaTokenizer"),gVr.forEach(t),Fro=r(b9," or "),jR=n(b9,"A",{href:!0});var hVr=s(jR);Tro=r(hVr,"XLMRobertaTokenizerFast"),hVr.forEach(t),Mro=r(b9," (XLM-RoBERTa model)"),b9.forEach(t),Ero=i(C),js=n(C,"LI",{});var v9=s(js);Zee=n(v9,"STRONG",{});var pVr=s(Zee);Cro=r(pVr,"xlnet"),pVr.forEach(t),wro=r(v9," \u2014 "),DR=n(v9,"A",{href:!0});var _Vr=s(DR);Aro=r(_Vr,"XLNetTokenizer"),_Vr.forEach(t),yro=r(v9," or "),GR=n(v9,"A",{href:!0});var uVr=s(GR);Lro=r(uVr,"XLNetTokenizerFast"),uVr.forEach(t),xro=r(v9," (XLNet model)"),v9.forEach(t),C.forEach(t),kro=i(ha),eoe=n(ha,"P",{});var bVr=s(eoe);Sro=r(bVr,"Examples:"),bVr.forEach(t),Rro=i(ha),m(UC.$$.fragment,ha),ha.forEach(t),Bro=i(Xs),bh=n(Xs,"DIV",{class:!0});var r$e=s(bh);m(JC.$$.fragment,r$e),Pro=i(r$e),ooe=n(r$e,"P",{});var vVr=s(ooe);$ro=r(vVr,"Register a new tokenizer in this mapping."),vVr.forEach(t),r$e.forEach(t),Xs.forEach(t),KRe=i(c),Hi=n(c,"H2",{class:!0});var t$e=s(Hi);vh=n(t$e,"A",{id:!0,class:!0,href:!0});var FVr=s(vh);roe=n(FVr,"SPAN",{});var TVr=s(roe);m(YC.$$.fragment,TVr),TVr.forEach(t),FVr.forEach(t),Iro=i(t$e),toe=n(t$e,"SPAN",{});var MVr=s(toe);qro=r(MVr,"AutoFeatureExtractor"),MVr.forEach(t),t$e.forEach(t),ZRe=i(c),Ho=n(c,"DIV",{class:!0});var zs=s(Ho);m(KC.$$.fragment,zs),Nro=i(zs),ZC=n(zs,"P",{});var a$e=s(ZC);jro=r(a$e,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),OR=n(a$e,"A",{href:!0});var EVr=s(OR);Dro=r(EVr,"AutoFeatureExtractor.from_pretrained()"),EVr.forEach(t),Gro=r(a$e," class method."),a$e.forEach(t),Oro=i(zs),ew=n(zs,"P",{});var n$e=s(ew);Vro=r(n$e,"This class cannot be instantiated directly using "),aoe=n(n$e,"CODE",{});var CVr=s(aoe);Xro=r(CVr,"__init__()"),CVr.forEach(t),zro=r(n$e," (throws an error)."),n$e.forEach(t),Qro=i(zs),$e=n(zs,"DIV",{class:!0});var Nt=s($e);m(ow.$$.fragment,Nt),Wro=i(Nt),noe=n(Nt,"P",{});var wVr=s(noe);Hro=r(wVr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),wVr.forEach(t),Uro=i(Nt),Va=n(Nt,"P",{});var BE=s(Va);Jro=r(BE,"The feature extractor class to instantiate is selected based on the "),soe=n(BE,"CODE",{});var AVr=s(soe);Yro=r(AVr,"model_type"),AVr.forEach(t),Kro=r(BE,` property of the config object
(either passed as an argument or loaded from `),loe=n(BE,"CODE",{});var yVr=s(loe);Zro=r(yVr,"pretrained_model_name_or_path"),yVr.forEach(t),eto=r(BE,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),ioe=n(BE,"CODE",{});var LVr=s(ioe);oto=r(LVr,"pretrained_model_name_or_path"),LVr.forEach(t),rto=r(BE,":"),BE.forEach(t),tto=i(Nt),ee=n(Nt,"UL",{});var ae=s(ee);Fh=n(ae,"LI",{});var S4e=s(Fh);doe=n(S4e,"STRONG",{});var xVr=s(doe);ato=r(xVr,"beit"),xVr.forEach(t),nto=r(S4e," \u2014 "),VR=n(S4e,"A",{href:!0});var kVr=s(VR);sto=r(kVr,"BeitFeatureExtractor"),kVr.forEach(t),lto=r(S4e," (BEiT model)"),S4e.forEach(t),ito=i(ae),Th=n(ae,"LI",{});var R4e=s(Th);coe=n(R4e,"STRONG",{});var SVr=s(coe);dto=r(SVr,"clip"),SVr.forEach(t),cto=r(R4e," \u2014 "),XR=n(R4e,"A",{href:!0});var RVr=s(XR);fto=r(RVr,"CLIPFeatureExtractor"),RVr.forEach(t),mto=r(R4e," (CLIP model)"),R4e.forEach(t),gto=i(ae),Mh=n(ae,"LI",{});var B4e=s(Mh);foe=n(B4e,"STRONG",{});var BVr=s(foe);hto=r(BVr,"convnext"),BVr.forEach(t),pto=r(B4e," \u2014 "),zR=n(B4e,"A",{href:!0});var PVr=s(zR);_to=r(PVr,"ConvNextFeatureExtractor"),PVr.forEach(t),uto=r(B4e," (ConvNext model)"),B4e.forEach(t),bto=i(ae),Eh=n(ae,"LI",{});var P4e=s(Eh);moe=n(P4e,"STRONG",{});var $Vr=s(moe);vto=r($Vr,"deit"),$Vr.forEach(t),Fto=r(P4e," \u2014 "),QR=n(P4e,"A",{href:!0});var IVr=s(QR);Tto=r(IVr,"DeiTFeatureExtractor"),IVr.forEach(t),Mto=r(P4e," (DeiT model)"),P4e.forEach(t),Eto=i(ae),Ch=n(ae,"LI",{});var $4e=s(Ch);goe=n($4e,"STRONG",{});var qVr=s(goe);Cto=r(qVr,"detr"),qVr.forEach(t),wto=r($4e," \u2014 "),WR=n($4e,"A",{href:!0});var NVr=s(WR);Ato=r(NVr,"DetrFeatureExtractor"),NVr.forEach(t),yto=r($4e," (DETR model)"),$4e.forEach(t),Lto=i(ae),wh=n(ae,"LI",{});var I4e=s(wh);hoe=n(I4e,"STRONG",{});var jVr=s(hoe);xto=r(jVr,"hubert"),jVr.forEach(t),kto=r(I4e," \u2014 "),HR=n(I4e,"A",{href:!0});var DVr=s(HR);Sto=r(DVr,"Wav2Vec2FeatureExtractor"),DVr.forEach(t),Rto=r(I4e," (Hubert model)"),I4e.forEach(t),Bto=i(ae),Ah=n(ae,"LI",{});var q4e=s(Ah);poe=n(q4e,"STRONG",{});var GVr=s(poe);Pto=r(GVr,"layoutlmv2"),GVr.forEach(t),$to=r(q4e," \u2014 "),UR=n(q4e,"A",{href:!0});var OVr=s(UR);Ito=r(OVr,"LayoutLMv2FeatureExtractor"),OVr.forEach(t),qto=r(q4e," (LayoutLMv2 model)"),q4e.forEach(t),Nto=i(ae),yh=n(ae,"LI",{});var N4e=s(yh);_oe=n(N4e,"STRONG",{});var VVr=s(_oe);jto=r(VVr,"maskformer"),VVr.forEach(t),Dto=r(N4e," \u2014 "),JR=n(N4e,"A",{href:!0});var XVr=s(JR);Gto=r(XVr,"MaskFormerFeatureExtractor"),XVr.forEach(t),Oto=r(N4e," (MaskFormer model)"),N4e.forEach(t),Vto=i(ae),Lh=n(ae,"LI",{});var j4e=s(Lh);uoe=n(j4e,"STRONG",{});var zVr=s(uoe);Xto=r(zVr,"perceiver"),zVr.forEach(t),zto=r(j4e," \u2014 "),YR=n(j4e,"A",{href:!0});var QVr=s(YR);Qto=r(QVr,"PerceiverFeatureExtractor"),QVr.forEach(t),Wto=r(j4e," (Perceiver model)"),j4e.forEach(t),Hto=i(ae),xh=n(ae,"LI",{});var D4e=s(xh);boe=n(D4e,"STRONG",{});var WVr=s(boe);Uto=r(WVr,"poolformer"),WVr.forEach(t),Jto=r(D4e," \u2014 "),KR=n(D4e,"A",{href:!0});var HVr=s(KR);Yto=r(HVr,"PoolFormerFeatureExtractor"),HVr.forEach(t),Kto=r(D4e," (PoolFormer model)"),D4e.forEach(t),Zto=i(ae),kh=n(ae,"LI",{});var G4e=s(kh);voe=n(G4e,"STRONG",{});var UVr=s(voe);eao=r(UVr,"regnet"),UVr.forEach(t),oao=r(G4e," \u2014 "),ZR=n(G4e,"A",{href:!0});var JVr=s(ZR);rao=r(JVr,"ConvNextFeatureExtractor"),JVr.forEach(t),tao=r(G4e," (RegNet model)"),G4e.forEach(t),aao=i(ae),Sh=n(ae,"LI",{});var O4e=s(Sh);Foe=n(O4e,"STRONG",{});var YVr=s(Foe);nao=r(YVr,"resnet"),YVr.forEach(t),sao=r(O4e," \u2014 "),eB=n(O4e,"A",{href:!0});var KVr=s(eB);lao=r(KVr,"ConvNextFeatureExtractor"),KVr.forEach(t),iao=r(O4e," (ResNet model)"),O4e.forEach(t),dao=i(ae),Rh=n(ae,"LI",{});var V4e=s(Rh);Toe=n(V4e,"STRONG",{});var ZVr=s(Toe);cao=r(ZVr,"segformer"),ZVr.forEach(t),fao=r(V4e," \u2014 "),oB=n(V4e,"A",{href:!0});var eXr=s(oB);mao=r(eXr,"SegformerFeatureExtractor"),eXr.forEach(t),gao=r(V4e," (SegFormer model)"),V4e.forEach(t),hao=i(ae),Bh=n(ae,"LI",{});var X4e=s(Bh);Moe=n(X4e,"STRONG",{});var oXr=s(Moe);pao=r(oXr,"speech_to_text"),oXr.forEach(t),_ao=r(X4e," \u2014 "),rB=n(X4e,"A",{href:!0});var rXr=s(rB);uao=r(rXr,"Speech2TextFeatureExtractor"),rXr.forEach(t),bao=r(X4e," (Speech2Text model)"),X4e.forEach(t),vao=i(ae),Ph=n(ae,"LI",{});var z4e=s(Ph);Eoe=n(z4e,"STRONG",{});var tXr=s(Eoe);Fao=r(tXr,"swin"),tXr.forEach(t),Tao=r(z4e," \u2014 "),tB=n(z4e,"A",{href:!0});var aXr=s(tB);Mao=r(aXr,"ViTFeatureExtractor"),aXr.forEach(t),Eao=r(z4e," (Swin model)"),z4e.forEach(t),Cao=i(ae),$h=n(ae,"LI",{});var Q4e=s($h);Coe=n(Q4e,"STRONG",{});var nXr=s(Coe);wao=r(nXr,"van"),nXr.forEach(t),Aao=r(Q4e," \u2014 "),aB=n(Q4e,"A",{href:!0});var sXr=s(aB);yao=r(sXr,"ConvNextFeatureExtractor"),sXr.forEach(t),Lao=r(Q4e," (VAN model)"),Q4e.forEach(t),xao=i(ae),Ih=n(ae,"LI",{});var W4e=s(Ih);woe=n(W4e,"STRONG",{});var lXr=s(woe);kao=r(lXr,"vit"),lXr.forEach(t),Sao=r(W4e," \u2014 "),nB=n(W4e,"A",{href:!0});var iXr=s(nB);Rao=r(iXr,"ViTFeatureExtractor"),iXr.forEach(t),Bao=r(W4e," (ViT model)"),W4e.forEach(t),Pao=i(ae),qh=n(ae,"LI",{});var H4e=s(qh);Aoe=n(H4e,"STRONG",{});var dXr=s(Aoe);$ao=r(dXr,"vit_mae"),dXr.forEach(t),Iao=r(H4e," \u2014 "),sB=n(H4e,"A",{href:!0});var cXr=s(sB);qao=r(cXr,"ViTFeatureExtractor"),cXr.forEach(t),Nao=r(H4e," (ViTMAE model)"),H4e.forEach(t),jao=i(ae),Nh=n(ae,"LI",{});var U4e=s(Nh);yoe=n(U4e,"STRONG",{});var fXr=s(yoe);Dao=r(fXr,"wav2vec2"),fXr.forEach(t),Gao=r(U4e," \u2014 "),lB=n(U4e,"A",{href:!0});var mXr=s(lB);Oao=r(mXr,"Wav2Vec2FeatureExtractor"),mXr.forEach(t),Vao=r(U4e," (Wav2Vec2 model)"),U4e.forEach(t),ae.forEach(t),Xao=i(Nt),m(jh.$$.fragment,Nt),zao=i(Nt),Loe=n(Nt,"P",{});var gXr=s(Loe);Qao=r(gXr,"Examples:"),gXr.forEach(t),Wao=i(Nt),m(rw.$$.fragment,Nt),Nt.forEach(t),Hao=i(zs),Dh=n(zs,"DIV",{class:!0});var s$e=s(Dh);m(tw.$$.fragment,s$e),Uao=i(s$e),xoe=n(s$e,"P",{});var hXr=s(xoe);Jao=r(hXr,"Register a new feature extractor for this class."),hXr.forEach(t),s$e.forEach(t),zs.forEach(t),eBe=i(c),Ui=n(c,"H2",{class:!0});var l$e=s(Ui);Gh=n(l$e,"A",{id:!0,class:!0,href:!0});var pXr=s(Gh);koe=n(pXr,"SPAN",{});var _Xr=s(koe);m(aw.$$.fragment,_Xr),_Xr.forEach(t),pXr.forEach(t),Yao=i(l$e),Soe=n(l$e,"SPAN",{});var uXr=s(Soe);Kao=r(uXr,"AutoProcessor"),uXr.forEach(t),l$e.forEach(t),oBe=i(c),Uo=n(c,"DIV",{class:!0});var Qs=s(Uo);m(nw.$$.fragment,Qs),Zao=i(Qs),sw=n(Qs,"P",{});var i$e=s(sw);eno=r(i$e,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),iB=n(i$e,"A",{href:!0});var bXr=s(iB);ono=r(bXr,"AutoProcessor.from_pretrained()"),bXr.forEach(t),rno=r(i$e," class method."),i$e.forEach(t),tno=i(Qs),lw=n(Qs,"P",{});var d$e=s(lw);ano=r(d$e,"This class cannot be instantiated directly using "),Roe=n(d$e,"CODE",{});var vXr=s(Roe);nno=r(vXr,"__init__()"),vXr.forEach(t),sno=r(d$e," (throws an error)."),d$e.forEach(t),lno=i(Qs),Ie=n(Qs,"DIV",{class:!0});var jt=s(Ie);m(iw.$$.fragment,jt),ino=i(jt),Boe=n(jt,"P",{});var FXr=s(Boe);dno=r(FXr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),FXr.forEach(t),cno=i(jt),Ji=n(jt,"P",{});var wU=s(Ji);fno=r(wU,"The processor class to instantiate is selected based on the "),Poe=n(wU,"CODE",{});var TXr=s(Poe);mno=r(TXr,"model_type"),TXr.forEach(t),gno=r(wU,` property of the config object (either
passed as an argument or loaded from `),$oe=n(wU,"CODE",{});var MXr=s($oe);hno=r(MXr,"pretrained_model_name_or_path"),MXr.forEach(t),pno=r(wU," if possible):"),wU.forEach(t),_no=i(jt),ke=n(jt,"UL",{});var jo=s(ke);Oh=n(jo,"LI",{});var J4e=s(Oh);Ioe=n(J4e,"STRONG",{});var EXr=s(Ioe);uno=r(EXr,"clip"),EXr.forEach(t),bno=r(J4e," \u2014 "),dB=n(J4e,"A",{href:!0});var CXr=s(dB);vno=r(CXr,"CLIPProcessor"),CXr.forEach(t),Fno=r(J4e," (CLIP model)"),J4e.forEach(t),Tno=i(jo),Vh=n(jo,"LI",{});var Y4e=s(Vh);qoe=n(Y4e,"STRONG",{});var wXr=s(qoe);Mno=r(wXr,"layoutlmv2"),wXr.forEach(t),Eno=r(Y4e," \u2014 "),cB=n(Y4e,"A",{href:!0});var AXr=s(cB);Cno=r(AXr,"LayoutLMv2Processor"),AXr.forEach(t),wno=r(Y4e," (LayoutLMv2 model)"),Y4e.forEach(t),Ano=i(jo),Xh=n(jo,"LI",{});var K4e=s(Xh);Noe=n(K4e,"STRONG",{});var yXr=s(Noe);yno=r(yXr,"layoutxlm"),yXr.forEach(t),Lno=r(K4e," \u2014 "),fB=n(K4e,"A",{href:!0});var LXr=s(fB);xno=r(LXr,"LayoutXLMProcessor"),LXr.forEach(t),kno=r(K4e," (LayoutXLM model)"),K4e.forEach(t),Sno=i(jo),zh=n(jo,"LI",{});var Z4e=s(zh);joe=n(Z4e,"STRONG",{});var xXr=s(joe);Rno=r(xXr,"speech_to_text"),xXr.forEach(t),Bno=r(Z4e," \u2014 "),mB=n(Z4e,"A",{href:!0});var kXr=s(mB);Pno=r(kXr,"Speech2TextProcessor"),kXr.forEach(t),$no=r(Z4e," (Speech2Text model)"),Z4e.forEach(t),Ino=i(jo),Qh=n(jo,"LI",{});var eEe=s(Qh);Doe=n(eEe,"STRONG",{});var SXr=s(Doe);qno=r(SXr,"speech_to_text_2"),SXr.forEach(t),Nno=r(eEe," \u2014 "),gB=n(eEe,"A",{href:!0});var RXr=s(gB);jno=r(RXr,"Speech2Text2Processor"),RXr.forEach(t),Dno=r(eEe," (Speech2Text2 model)"),eEe.forEach(t),Gno=i(jo),Wh=n(jo,"LI",{});var oEe=s(Wh);Goe=n(oEe,"STRONG",{});var BXr=s(Goe);Ono=r(BXr,"trocr"),BXr.forEach(t),Vno=r(oEe," \u2014 "),hB=n(oEe,"A",{href:!0});var PXr=s(hB);Xno=r(PXr,"TrOCRProcessor"),PXr.forEach(t),zno=r(oEe," (TrOCR model)"),oEe.forEach(t),Qno=i(jo),Hh=n(jo,"LI",{});var rEe=s(Hh);Ooe=n(rEe,"STRONG",{});var $Xr=s(Ooe);Wno=r($Xr,"vision-text-dual-encoder"),$Xr.forEach(t),Hno=r(rEe," \u2014 "),pB=n(rEe,"A",{href:!0});var IXr=s(pB);Uno=r(IXr,"VisionTextDualEncoderProcessor"),IXr.forEach(t),Jno=r(rEe," (VisionTextDualEncoder model)"),rEe.forEach(t),Yno=i(jo),Uh=n(jo,"LI",{});var tEe=s(Uh);Voe=n(tEe,"STRONG",{});var qXr=s(Voe);Kno=r(qXr,"wav2vec2"),qXr.forEach(t),Zno=r(tEe," \u2014 "),_B=n(tEe,"A",{href:!0});var NXr=s(_B);eso=r(NXr,"Wav2Vec2Processor"),NXr.forEach(t),oso=r(tEe," (Wav2Vec2 model)"),tEe.forEach(t),jo.forEach(t),rso=i(jt),m(Jh.$$.fragment,jt),tso=i(jt),Xoe=n(jt,"P",{});var jXr=s(Xoe);aso=r(jXr,"Examples:"),jXr.forEach(t),nso=i(jt),m(dw.$$.fragment,jt),jt.forEach(t),sso=i(Qs),Yh=n(Qs,"DIV",{class:!0});var c$e=s(Yh);m(cw.$$.fragment,c$e),lso=i(c$e),zoe=n(c$e,"P",{});var DXr=s(zoe);iso=r(DXr,"Register a new processor for this class."),DXr.forEach(t),c$e.forEach(t),Qs.forEach(t),rBe=i(c),Yi=n(c,"H2",{class:!0});var f$e=s(Yi);Kh=n(f$e,"A",{id:!0,class:!0,href:!0});var GXr=s(Kh);Qoe=n(GXr,"SPAN",{});var OXr=s(Qoe);m(fw.$$.fragment,OXr),OXr.forEach(t),GXr.forEach(t),dso=i(f$e),Woe=n(f$e,"SPAN",{});var VXr=s(Woe);cso=r(VXr,"AutoModel"),VXr.forEach(t),f$e.forEach(t),tBe=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(mw.$$.fragment,Ws),fso=i(Ws),Ki=n(Ws,"P",{});var AU=s(Ki);mso=r(AU,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),uB=n(AU,"A",{href:!0});var XXr=s(uB);gso=r(XXr,"from_pretrained()"),XXr.forEach(t),hso=r(AU," class method or the "),bB=n(AU,"A",{href:!0});var zXr=s(bB);pso=r(zXr,"from_config()"),zXr.forEach(t),_so=r(AU,` class
method.`),AU.forEach(t),uso=i(Ws),gw=n(Ws,"P",{});var m$e=s(gw);bso=r(m$e,"This class cannot be instantiated directly using "),Hoe=n(m$e,"CODE",{});var QXr=s(Hoe);vso=r(QXr,"__init__()"),QXr.forEach(t),Fso=r(m$e," (throws an error)."),m$e.forEach(t),Tso=i(Ws),Xr=n(Ws,"DIV",{class:!0});var Hs=s(Xr);m(hw.$$.fragment,Hs),Mso=i(Hs),Uoe=n(Hs,"P",{});var WXr=s(Uoe);Eso=r(WXr,"Instantiates one of the base model classes of the library from a configuration."),WXr.forEach(t),Cso=i(Hs),Zi=n(Hs,"P",{});var yU=s(Zi);wso=r(yU,`Note:
Loading a model from its configuration file does `),Joe=n(yU,"STRONG",{});var HXr=s(Joe);Aso=r(HXr,"not"),HXr.forEach(t),yso=r(yU,` load the model weights. It only affects the
model\u2019s configuration. Use `),vB=n(yU,"A",{href:!0});var UXr=s(vB);Lso=r(UXr,"from_pretrained()"),UXr.forEach(t),xso=r(yU," to load the model weights."),yU.forEach(t),kso=i(Hs),Yoe=n(Hs,"P",{});var JXr=s(Yoe);Sso=r(JXr,"Examples:"),JXr.forEach(t),Rso=i(Hs),m(pw.$$.fragment,Hs),Hs.forEach(t),Bso=i(Ws),qe=n(Ws,"DIV",{class:!0});var Dt=s(qe);m(_w.$$.fragment,Dt),Pso=i(Dt),Koe=n(Dt,"P",{});var YXr=s(Koe);$so=r(YXr,"Instantiate one of the base model classes of the library from a pretrained model."),YXr.forEach(t),Iso=i(Dt),Xa=n(Dt,"P",{});var PE=s(Xa);qso=r(PE,"The model class to instantiate is selected based on the "),Zoe=n(PE,"CODE",{});var KXr=s(Zoe);Nso=r(KXr,"model_type"),KXr.forEach(t),jso=r(PE,` property of the config object (either
passed as an argument or loaded from `),ere=n(PE,"CODE",{});var ZXr=s(ere);Dso=r(ZXr,"pretrained_model_name_or_path"),ZXr.forEach(t),Gso=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ore=n(PE,"CODE",{});var ezr=s(ore);Oso=r(ezr,"pretrained_model_name_or_path"),ezr.forEach(t),Vso=r(PE,":"),PE.forEach(t),Xso=i(Dt),T=n(Dt,"UL",{});var M=s(T);Zh=n(M,"LI",{});var aEe=s(Zh);rre=n(aEe,"STRONG",{});var ozr=s(rre);zso=r(ozr,"albert"),ozr.forEach(t),Qso=r(aEe," \u2014 "),FB=n(aEe,"A",{href:!0});var rzr=s(FB);Wso=r(rzr,"AlbertModel"),rzr.forEach(t),Hso=r(aEe," (ALBERT model)"),aEe.forEach(t),Uso=i(M),ep=n(M,"LI",{});var nEe=s(ep);tre=n(nEe,"STRONG",{});var tzr=s(tre);Jso=r(tzr,"bart"),tzr.forEach(t),Yso=r(nEe," \u2014 "),TB=n(nEe,"A",{href:!0});var azr=s(TB);Kso=r(azr,"BartModel"),azr.forEach(t),Zso=r(nEe," (BART model)"),nEe.forEach(t),elo=i(M),op=n(M,"LI",{});var sEe=s(op);are=n(sEe,"STRONG",{});var nzr=s(are);olo=r(nzr,"beit"),nzr.forEach(t),rlo=r(sEe," \u2014 "),MB=n(sEe,"A",{href:!0});var szr=s(MB);tlo=r(szr,"BeitModel"),szr.forEach(t),alo=r(sEe," (BEiT model)"),sEe.forEach(t),nlo=i(M),rp=n(M,"LI",{});var lEe=s(rp);nre=n(lEe,"STRONG",{});var lzr=s(nre);slo=r(lzr,"bert"),lzr.forEach(t),llo=r(lEe," \u2014 "),EB=n(lEe,"A",{href:!0});var izr=s(EB);ilo=r(izr,"BertModel"),izr.forEach(t),dlo=r(lEe," (BERT model)"),lEe.forEach(t),clo=i(M),tp=n(M,"LI",{});var iEe=s(tp);sre=n(iEe,"STRONG",{});var dzr=s(sre);flo=r(dzr,"bert-generation"),dzr.forEach(t),mlo=r(iEe," \u2014 "),CB=n(iEe,"A",{href:!0});var czr=s(CB);glo=r(czr,"BertGenerationEncoder"),czr.forEach(t),hlo=r(iEe," (Bert Generation model)"),iEe.forEach(t),plo=i(M),ap=n(M,"LI",{});var dEe=s(ap);lre=n(dEe,"STRONG",{});var fzr=s(lre);_lo=r(fzr,"big_bird"),fzr.forEach(t),ulo=r(dEe," \u2014 "),wB=n(dEe,"A",{href:!0});var mzr=s(wB);blo=r(mzr,"BigBirdModel"),mzr.forEach(t),vlo=r(dEe," (BigBird model)"),dEe.forEach(t),Flo=i(M),np=n(M,"LI",{});var cEe=s(np);ire=n(cEe,"STRONG",{});var gzr=s(ire);Tlo=r(gzr,"bigbird_pegasus"),gzr.forEach(t),Mlo=r(cEe," \u2014 "),AB=n(cEe,"A",{href:!0});var hzr=s(AB);Elo=r(hzr,"BigBirdPegasusModel"),hzr.forEach(t),Clo=r(cEe," (BigBirdPegasus model)"),cEe.forEach(t),wlo=i(M),sp=n(M,"LI",{});var fEe=s(sp);dre=n(fEe,"STRONG",{});var pzr=s(dre);Alo=r(pzr,"blenderbot"),pzr.forEach(t),ylo=r(fEe," \u2014 "),yB=n(fEe,"A",{href:!0});var _zr=s(yB);Llo=r(_zr,"BlenderbotModel"),_zr.forEach(t),xlo=r(fEe," (Blenderbot model)"),fEe.forEach(t),klo=i(M),lp=n(M,"LI",{});var mEe=s(lp);cre=n(mEe,"STRONG",{});var uzr=s(cre);Slo=r(uzr,"blenderbot-small"),uzr.forEach(t),Rlo=r(mEe," \u2014 "),LB=n(mEe,"A",{href:!0});var bzr=s(LB);Blo=r(bzr,"BlenderbotSmallModel"),bzr.forEach(t),Plo=r(mEe," (BlenderbotSmall model)"),mEe.forEach(t),$lo=i(M),ip=n(M,"LI",{});var gEe=s(ip);fre=n(gEe,"STRONG",{});var vzr=s(fre);Ilo=r(vzr,"camembert"),vzr.forEach(t),qlo=r(gEe," \u2014 "),xB=n(gEe,"A",{href:!0});var Fzr=s(xB);Nlo=r(Fzr,"CamembertModel"),Fzr.forEach(t),jlo=r(gEe," (CamemBERT model)"),gEe.forEach(t),Dlo=i(M),dp=n(M,"LI",{});var hEe=s(dp);mre=n(hEe,"STRONG",{});var Tzr=s(mre);Glo=r(Tzr,"canine"),Tzr.forEach(t),Olo=r(hEe," \u2014 "),kB=n(hEe,"A",{href:!0});var Mzr=s(kB);Vlo=r(Mzr,"CanineModel"),Mzr.forEach(t),Xlo=r(hEe," (Canine model)"),hEe.forEach(t),zlo=i(M),cp=n(M,"LI",{});var pEe=s(cp);gre=n(pEe,"STRONG",{});var Ezr=s(gre);Qlo=r(Ezr,"clip"),Ezr.forEach(t),Wlo=r(pEe," \u2014 "),SB=n(pEe,"A",{href:!0});var Czr=s(SB);Hlo=r(Czr,"CLIPModel"),Czr.forEach(t),Ulo=r(pEe," (CLIP model)"),pEe.forEach(t),Jlo=i(M),fp=n(M,"LI",{});var _Ee=s(fp);hre=n(_Ee,"STRONG",{});var wzr=s(hre);Ylo=r(wzr,"convbert"),wzr.forEach(t),Klo=r(_Ee," \u2014 "),RB=n(_Ee,"A",{href:!0});var Azr=s(RB);Zlo=r(Azr,"ConvBertModel"),Azr.forEach(t),eio=r(_Ee," (ConvBERT model)"),_Ee.forEach(t),oio=i(M),mp=n(M,"LI",{});var uEe=s(mp);pre=n(uEe,"STRONG",{});var yzr=s(pre);rio=r(yzr,"convnext"),yzr.forEach(t),tio=r(uEe," \u2014 "),BB=n(uEe,"A",{href:!0});var Lzr=s(BB);aio=r(Lzr,"ConvNextModel"),Lzr.forEach(t),nio=r(uEe," (ConvNext model)"),uEe.forEach(t),sio=i(M),gp=n(M,"LI",{});var bEe=s(gp);_re=n(bEe,"STRONG",{});var xzr=s(_re);lio=r(xzr,"ctrl"),xzr.forEach(t),iio=r(bEe," \u2014 "),PB=n(bEe,"A",{href:!0});var kzr=s(PB);dio=r(kzr,"CTRLModel"),kzr.forEach(t),cio=r(bEe," (CTRL model)"),bEe.forEach(t),fio=i(M),hp=n(M,"LI",{});var vEe=s(hp);ure=n(vEe,"STRONG",{});var Szr=s(ure);mio=r(Szr,"data2vec-audio"),Szr.forEach(t),gio=r(vEe," \u2014 "),$B=n(vEe,"A",{href:!0});var Rzr=s($B);hio=r(Rzr,"Data2VecAudioModel"),Rzr.forEach(t),pio=r(vEe," (Data2VecAudio model)"),vEe.forEach(t),_io=i(M),pp=n(M,"LI",{});var FEe=s(pp);bre=n(FEe,"STRONG",{});var Bzr=s(bre);uio=r(Bzr,"data2vec-text"),Bzr.forEach(t),bio=r(FEe," \u2014 "),IB=n(FEe,"A",{href:!0});var Pzr=s(IB);vio=r(Pzr,"Data2VecTextModel"),Pzr.forEach(t),Fio=r(FEe," (Data2VecText model)"),FEe.forEach(t),Tio=i(M),_p=n(M,"LI",{});var TEe=s(_p);vre=n(TEe,"STRONG",{});var $zr=s(vre);Mio=r($zr,"data2vec-vision"),$zr.forEach(t),Eio=r(TEe," \u2014 "),qB=n(TEe,"A",{href:!0});var Izr=s(qB);Cio=r(Izr,"Data2VecVisionModel"),Izr.forEach(t),wio=r(TEe," (Data2VecVision model)"),TEe.forEach(t),Aio=i(M),up=n(M,"LI",{});var MEe=s(up);Fre=n(MEe,"STRONG",{});var qzr=s(Fre);yio=r(qzr,"deberta"),qzr.forEach(t),Lio=r(MEe," \u2014 "),NB=n(MEe,"A",{href:!0});var Nzr=s(NB);xio=r(Nzr,"DebertaModel"),Nzr.forEach(t),kio=r(MEe," (DeBERTa model)"),MEe.forEach(t),Sio=i(M),bp=n(M,"LI",{});var EEe=s(bp);Tre=n(EEe,"STRONG",{});var jzr=s(Tre);Rio=r(jzr,"deberta-v2"),jzr.forEach(t),Bio=r(EEe," \u2014 "),jB=n(EEe,"A",{href:!0});var Dzr=s(jB);Pio=r(Dzr,"DebertaV2Model"),Dzr.forEach(t),$io=r(EEe," (DeBERTa-v2 model)"),EEe.forEach(t),Iio=i(M),vp=n(M,"LI",{});var CEe=s(vp);Mre=n(CEe,"STRONG",{});var Gzr=s(Mre);qio=r(Gzr,"decision_transformer"),Gzr.forEach(t),Nio=r(CEe," \u2014 "),DB=n(CEe,"A",{href:!0});var Ozr=s(DB);jio=r(Ozr,"DecisionTransformerModel"),Ozr.forEach(t),Dio=r(CEe," (Decision Transformer model)"),CEe.forEach(t),Gio=i(M),Fp=n(M,"LI",{});var wEe=s(Fp);Ere=n(wEe,"STRONG",{});var Vzr=s(Ere);Oio=r(Vzr,"deit"),Vzr.forEach(t),Vio=r(wEe," \u2014 "),GB=n(wEe,"A",{href:!0});var Xzr=s(GB);Xio=r(Xzr,"DeiTModel"),Xzr.forEach(t),zio=r(wEe," (DeiT model)"),wEe.forEach(t),Qio=i(M),Tp=n(M,"LI",{});var AEe=s(Tp);Cre=n(AEe,"STRONG",{});var zzr=s(Cre);Wio=r(zzr,"detr"),zzr.forEach(t),Hio=r(AEe," \u2014 "),OB=n(AEe,"A",{href:!0});var Qzr=s(OB);Uio=r(Qzr,"DetrModel"),Qzr.forEach(t),Jio=r(AEe," (DETR model)"),AEe.forEach(t),Yio=i(M),Mp=n(M,"LI",{});var yEe=s(Mp);wre=n(yEe,"STRONG",{});var Wzr=s(wre);Kio=r(Wzr,"distilbert"),Wzr.forEach(t),Zio=r(yEe," \u2014 "),VB=n(yEe,"A",{href:!0});var Hzr=s(VB);edo=r(Hzr,"DistilBertModel"),Hzr.forEach(t),odo=r(yEe," (DistilBERT model)"),yEe.forEach(t),rdo=i(M),Ep=n(M,"LI",{});var LEe=s(Ep);Are=n(LEe,"STRONG",{});var Uzr=s(Are);tdo=r(Uzr,"dpr"),Uzr.forEach(t),ado=r(LEe," \u2014 "),XB=n(LEe,"A",{href:!0});var Jzr=s(XB);ndo=r(Jzr,"DPRQuestionEncoder"),Jzr.forEach(t),sdo=r(LEe," (DPR model)"),LEe.forEach(t),ldo=i(M),Cp=n(M,"LI",{});var xEe=s(Cp);yre=n(xEe,"STRONG",{});var Yzr=s(yre);ido=r(Yzr,"dpt"),Yzr.forEach(t),ddo=r(xEe," \u2014 "),zB=n(xEe,"A",{href:!0});var Kzr=s(zB);cdo=r(Kzr,"DPTModel"),Kzr.forEach(t),fdo=r(xEe," (DPT model)"),xEe.forEach(t),mdo=i(M),wp=n(M,"LI",{});var kEe=s(wp);Lre=n(kEe,"STRONG",{});var Zzr=s(Lre);gdo=r(Zzr,"electra"),Zzr.forEach(t),hdo=r(kEe," \u2014 "),QB=n(kEe,"A",{href:!0});var eQr=s(QB);pdo=r(eQr,"ElectraModel"),eQr.forEach(t),_do=r(kEe," (ELECTRA model)"),kEe.forEach(t),udo=i(M),Ap=n(M,"LI",{});var SEe=s(Ap);xre=n(SEe,"STRONG",{});var oQr=s(xre);bdo=r(oQr,"fastspeech2"),oQr.forEach(t),vdo=r(SEe," \u2014 "),WB=n(SEe,"A",{href:!0});var rQr=s(WB);Fdo=r(rQr,"FastSpeech2Model"),rQr.forEach(t),Tdo=r(SEe," (FastSpeech2 model)"),SEe.forEach(t),Mdo=i(M),yp=n(M,"LI",{});var REe=s(yp);kre=n(REe,"STRONG",{});var tQr=s(kre);Edo=r(tQr,"flaubert"),tQr.forEach(t),Cdo=r(REe," \u2014 "),HB=n(REe,"A",{href:!0});var aQr=s(HB);wdo=r(aQr,"FlaubertModel"),aQr.forEach(t),Ado=r(REe," (FlauBERT model)"),REe.forEach(t),ydo=i(M),Lp=n(M,"LI",{});var BEe=s(Lp);Sre=n(BEe,"STRONG",{});var nQr=s(Sre);Ldo=r(nQr,"fnet"),nQr.forEach(t),xdo=r(BEe," \u2014 "),UB=n(BEe,"A",{href:!0});var sQr=s(UB);kdo=r(sQr,"FNetModel"),sQr.forEach(t),Sdo=r(BEe," (FNet model)"),BEe.forEach(t),Rdo=i(M),xp=n(M,"LI",{});var PEe=s(xp);Rre=n(PEe,"STRONG",{});var lQr=s(Rre);Bdo=r(lQr,"fsmt"),lQr.forEach(t),Pdo=r(PEe," \u2014 "),JB=n(PEe,"A",{href:!0});var iQr=s(JB);$do=r(iQr,"FSMTModel"),iQr.forEach(t),Ido=r(PEe," (FairSeq Machine-Translation model)"),PEe.forEach(t),qdo=i(M),Ds=n(M,"LI",{});var F9=s(Ds);Bre=n(F9,"STRONG",{});var dQr=s(Bre);Ndo=r(dQr,"funnel"),dQr.forEach(t),jdo=r(F9," \u2014 "),YB=n(F9,"A",{href:!0});var cQr=s(YB);Ddo=r(cQr,"FunnelModel"),cQr.forEach(t),Gdo=r(F9," or "),KB=n(F9,"A",{href:!0});var fQr=s(KB);Odo=r(fQr,"FunnelBaseModel"),fQr.forEach(t),Vdo=r(F9," (Funnel Transformer model)"),F9.forEach(t),Xdo=i(M),kp=n(M,"LI",{});var $Ee=s(kp);Pre=n($Ee,"STRONG",{});var mQr=s(Pre);zdo=r(mQr,"glpn"),mQr.forEach(t),Qdo=r($Ee," \u2014 "),ZB=n($Ee,"A",{href:!0});var gQr=s(ZB);Wdo=r(gQr,"GLPNModel"),gQr.forEach(t),Hdo=r($Ee," (GLPN model)"),$Ee.forEach(t),Udo=i(M),Sp=n(M,"LI",{});var IEe=s(Sp);$re=n(IEe,"STRONG",{});var hQr=s($re);Jdo=r(hQr,"gpt2"),hQr.forEach(t),Ydo=r(IEe," \u2014 "),eP=n(IEe,"A",{href:!0});var pQr=s(eP);Kdo=r(pQr,"GPT2Model"),pQr.forEach(t),Zdo=r(IEe," (OpenAI GPT-2 model)"),IEe.forEach(t),eco=i(M),Rp=n(M,"LI",{});var qEe=s(Rp);Ire=n(qEe,"STRONG",{});var _Qr=s(Ire);oco=r(_Qr,"gpt_neo"),_Qr.forEach(t),rco=r(qEe," \u2014 "),oP=n(qEe,"A",{href:!0});var uQr=s(oP);tco=r(uQr,"GPTNeoModel"),uQr.forEach(t),aco=r(qEe," (GPT Neo model)"),qEe.forEach(t),nco=i(M),Bp=n(M,"LI",{});var NEe=s(Bp);qre=n(NEe,"STRONG",{});var bQr=s(qre);sco=r(bQr,"gptj"),bQr.forEach(t),lco=r(NEe," \u2014 "),rP=n(NEe,"A",{href:!0});var vQr=s(rP);ico=r(vQr,"GPTJModel"),vQr.forEach(t),dco=r(NEe," (GPT-J model)"),NEe.forEach(t),cco=i(M),Pp=n(M,"LI",{});var jEe=s(Pp);Nre=n(jEe,"STRONG",{});var FQr=s(Nre);fco=r(FQr,"hubert"),FQr.forEach(t),mco=r(jEe," \u2014 "),tP=n(jEe,"A",{href:!0});var TQr=s(tP);gco=r(TQr,"HubertModel"),TQr.forEach(t),hco=r(jEe," (Hubert model)"),jEe.forEach(t),pco=i(M),$p=n(M,"LI",{});var DEe=s($p);jre=n(DEe,"STRONG",{});var MQr=s(jre);_co=r(MQr,"ibert"),MQr.forEach(t),uco=r(DEe," \u2014 "),aP=n(DEe,"A",{href:!0});var EQr=s(aP);bco=r(EQr,"IBertModel"),EQr.forEach(t),vco=r(DEe," (I-BERT model)"),DEe.forEach(t),Fco=i(M),Ip=n(M,"LI",{});var GEe=s(Ip);Dre=n(GEe,"STRONG",{});var CQr=s(Dre);Tco=r(CQr,"imagegpt"),CQr.forEach(t),Mco=r(GEe," \u2014 "),nP=n(GEe,"A",{href:!0});var wQr=s(nP);Eco=r(wQr,"ImageGPTModel"),wQr.forEach(t),Cco=r(GEe," (ImageGPT model)"),GEe.forEach(t),wco=i(M),qp=n(M,"LI",{});var OEe=s(qp);Gre=n(OEe,"STRONG",{});var AQr=s(Gre);Aco=r(AQr,"layoutlm"),AQr.forEach(t),yco=r(OEe," \u2014 "),sP=n(OEe,"A",{href:!0});var yQr=s(sP);Lco=r(yQr,"LayoutLMModel"),yQr.forEach(t),xco=r(OEe," (LayoutLM model)"),OEe.forEach(t),kco=i(M),Np=n(M,"LI",{});var VEe=s(Np);Ore=n(VEe,"STRONG",{});var LQr=s(Ore);Sco=r(LQr,"layoutlmv2"),LQr.forEach(t),Rco=r(VEe," \u2014 "),lP=n(VEe,"A",{href:!0});var xQr=s(lP);Bco=r(xQr,"LayoutLMv2Model"),xQr.forEach(t),Pco=r(VEe," (LayoutLMv2 model)"),VEe.forEach(t),$co=i(M),jp=n(M,"LI",{});var XEe=s(jp);Vre=n(XEe,"STRONG",{});var kQr=s(Vre);Ico=r(kQr,"led"),kQr.forEach(t),qco=r(XEe," \u2014 "),iP=n(XEe,"A",{href:!0});var SQr=s(iP);Nco=r(SQr,"LEDModel"),SQr.forEach(t),jco=r(XEe," (LED model)"),XEe.forEach(t),Dco=i(M),Dp=n(M,"LI",{});var zEe=s(Dp);Xre=n(zEe,"STRONG",{});var RQr=s(Xre);Gco=r(RQr,"longformer"),RQr.forEach(t),Oco=r(zEe," \u2014 "),dP=n(zEe,"A",{href:!0});var BQr=s(dP);Vco=r(BQr,"LongformerModel"),BQr.forEach(t),Xco=r(zEe," (Longformer model)"),zEe.forEach(t),zco=i(M),Gp=n(M,"LI",{});var QEe=s(Gp);zre=n(QEe,"STRONG",{});var PQr=s(zre);Qco=r(PQr,"luke"),PQr.forEach(t),Wco=r(QEe," \u2014 "),cP=n(QEe,"A",{href:!0});var $Qr=s(cP);Hco=r($Qr,"LukeModel"),$Qr.forEach(t),Uco=r(QEe," (LUKE model)"),QEe.forEach(t),Jco=i(M),Op=n(M,"LI",{});var WEe=s(Op);Qre=n(WEe,"STRONG",{});var IQr=s(Qre);Yco=r(IQr,"lxmert"),IQr.forEach(t),Kco=r(WEe," \u2014 "),fP=n(WEe,"A",{href:!0});var qQr=s(fP);Zco=r(qQr,"LxmertModel"),qQr.forEach(t),efo=r(WEe," (LXMERT model)"),WEe.forEach(t),ofo=i(M),Vp=n(M,"LI",{});var HEe=s(Vp);Wre=n(HEe,"STRONG",{});var NQr=s(Wre);rfo=r(NQr,"m2m_100"),NQr.forEach(t),tfo=r(HEe," \u2014 "),mP=n(HEe,"A",{href:!0});var jQr=s(mP);afo=r(jQr,"M2M100Model"),jQr.forEach(t),nfo=r(HEe," (M2M100 model)"),HEe.forEach(t),sfo=i(M),Xp=n(M,"LI",{});var UEe=s(Xp);Hre=n(UEe,"STRONG",{});var DQr=s(Hre);lfo=r(DQr,"marian"),DQr.forEach(t),ifo=r(UEe," \u2014 "),gP=n(UEe,"A",{href:!0});var GQr=s(gP);dfo=r(GQr,"MarianModel"),GQr.forEach(t),cfo=r(UEe," (Marian model)"),UEe.forEach(t),ffo=i(M),zp=n(M,"LI",{});var JEe=s(zp);Ure=n(JEe,"STRONG",{});var OQr=s(Ure);mfo=r(OQr,"maskformer"),OQr.forEach(t),gfo=r(JEe," \u2014 "),hP=n(JEe,"A",{href:!0});var VQr=s(hP);hfo=r(VQr,"MaskFormerModel"),VQr.forEach(t),pfo=r(JEe," (MaskFormer model)"),JEe.forEach(t),_fo=i(M),Qp=n(M,"LI",{});var YEe=s(Qp);Jre=n(YEe,"STRONG",{});var XQr=s(Jre);ufo=r(XQr,"mbart"),XQr.forEach(t),bfo=r(YEe," \u2014 "),pP=n(YEe,"A",{href:!0});var zQr=s(pP);vfo=r(zQr,"MBartModel"),zQr.forEach(t),Ffo=r(YEe," (mBART model)"),YEe.forEach(t),Tfo=i(M),Wp=n(M,"LI",{});var KEe=s(Wp);Yre=n(KEe,"STRONG",{});var QQr=s(Yre);Mfo=r(QQr,"megatron-bert"),QQr.forEach(t),Efo=r(KEe," \u2014 "),_P=n(KEe,"A",{href:!0});var WQr=s(_P);Cfo=r(WQr,"MegatronBertModel"),WQr.forEach(t),wfo=r(KEe," (MegatronBert model)"),KEe.forEach(t),Afo=i(M),Hp=n(M,"LI",{});var ZEe=s(Hp);Kre=n(ZEe,"STRONG",{});var HQr=s(Kre);yfo=r(HQr,"mobilebert"),HQr.forEach(t),Lfo=r(ZEe," \u2014 "),uP=n(ZEe,"A",{href:!0});var UQr=s(uP);xfo=r(UQr,"MobileBertModel"),UQr.forEach(t),kfo=r(ZEe," (MobileBERT model)"),ZEe.forEach(t),Sfo=i(M),Up=n(M,"LI",{});var eCe=s(Up);Zre=n(eCe,"STRONG",{});var JQr=s(Zre);Rfo=r(JQr,"mpnet"),JQr.forEach(t),Bfo=r(eCe," \u2014 "),bP=n(eCe,"A",{href:!0});var YQr=s(bP);Pfo=r(YQr,"MPNetModel"),YQr.forEach(t),$fo=r(eCe," (MPNet model)"),eCe.forEach(t),Ifo=i(M),Jp=n(M,"LI",{});var oCe=s(Jp);ete=n(oCe,"STRONG",{});var KQr=s(ete);qfo=r(KQr,"mt5"),KQr.forEach(t),Nfo=r(oCe," \u2014 "),vP=n(oCe,"A",{href:!0});var ZQr=s(vP);jfo=r(ZQr,"MT5Model"),ZQr.forEach(t),Dfo=r(oCe," (mT5 model)"),oCe.forEach(t),Gfo=i(M),Yp=n(M,"LI",{});var rCe=s(Yp);ote=n(rCe,"STRONG",{});var eWr=s(ote);Ofo=r(eWr,"nystromformer"),eWr.forEach(t),Vfo=r(rCe," \u2014 "),FP=n(rCe,"A",{href:!0});var oWr=s(FP);Xfo=r(oWr,"NystromformerModel"),oWr.forEach(t),zfo=r(rCe," (Nystromformer model)"),rCe.forEach(t),Qfo=i(M),Kp=n(M,"LI",{});var tCe=s(Kp);rte=n(tCe,"STRONG",{});var rWr=s(rte);Wfo=r(rWr,"openai-gpt"),rWr.forEach(t),Hfo=r(tCe," \u2014 "),TP=n(tCe,"A",{href:!0});var tWr=s(TP);Ufo=r(tWr,"OpenAIGPTModel"),tWr.forEach(t),Jfo=r(tCe," (OpenAI GPT model)"),tCe.forEach(t),Yfo=i(M),Zp=n(M,"LI",{});var aCe=s(Zp);tte=n(aCe,"STRONG",{});var aWr=s(tte);Kfo=r(aWr,"pegasus"),aWr.forEach(t),Zfo=r(aCe," \u2014 "),MP=n(aCe,"A",{href:!0});var nWr=s(MP);emo=r(nWr,"PegasusModel"),nWr.forEach(t),omo=r(aCe," (Pegasus model)"),aCe.forEach(t),rmo=i(M),e_=n(M,"LI",{});var nCe=s(e_);ate=n(nCe,"STRONG",{});var sWr=s(ate);tmo=r(sWr,"perceiver"),sWr.forEach(t),amo=r(nCe," \u2014 "),EP=n(nCe,"A",{href:!0});var lWr=s(EP);nmo=r(lWr,"PerceiverModel"),lWr.forEach(t),smo=r(nCe," (Perceiver model)"),nCe.forEach(t),lmo=i(M),o_=n(M,"LI",{});var sCe=s(o_);nte=n(sCe,"STRONG",{});var iWr=s(nte);imo=r(iWr,"plbart"),iWr.forEach(t),dmo=r(sCe," \u2014 "),CP=n(sCe,"A",{href:!0});var dWr=s(CP);cmo=r(dWr,"PLBartModel"),dWr.forEach(t),fmo=r(sCe," (PLBart model)"),sCe.forEach(t),mmo=i(M),r_=n(M,"LI",{});var lCe=s(r_);ste=n(lCe,"STRONG",{});var cWr=s(ste);gmo=r(cWr,"poolformer"),cWr.forEach(t),hmo=r(lCe," \u2014 "),wP=n(lCe,"A",{href:!0});var fWr=s(wP);pmo=r(fWr,"PoolFormerModel"),fWr.forEach(t),_mo=r(lCe," (PoolFormer model)"),lCe.forEach(t),umo=i(M),t_=n(M,"LI",{});var iCe=s(t_);lte=n(iCe,"STRONG",{});var mWr=s(lte);bmo=r(mWr,"prophetnet"),mWr.forEach(t),vmo=r(iCe," \u2014 "),AP=n(iCe,"A",{href:!0});var gWr=s(AP);Fmo=r(gWr,"ProphetNetModel"),gWr.forEach(t),Tmo=r(iCe," (ProphetNet model)"),iCe.forEach(t),Mmo=i(M),a_=n(M,"LI",{});var dCe=s(a_);ite=n(dCe,"STRONG",{});var hWr=s(ite);Emo=r(hWr,"qdqbert"),hWr.forEach(t),Cmo=r(dCe," \u2014 "),yP=n(dCe,"A",{href:!0});var pWr=s(yP);wmo=r(pWr,"QDQBertModel"),pWr.forEach(t),Amo=r(dCe," (QDQBert model)"),dCe.forEach(t),ymo=i(M),n_=n(M,"LI",{});var cCe=s(n_);dte=n(cCe,"STRONG",{});var _Wr=s(dte);Lmo=r(_Wr,"reformer"),_Wr.forEach(t),xmo=r(cCe," \u2014 "),LP=n(cCe,"A",{href:!0});var uWr=s(LP);kmo=r(uWr,"ReformerModel"),uWr.forEach(t),Smo=r(cCe," (Reformer model)"),cCe.forEach(t),Rmo=i(M),s_=n(M,"LI",{});var fCe=s(s_);cte=n(fCe,"STRONG",{});var bWr=s(cte);Bmo=r(bWr,"regnet"),bWr.forEach(t),Pmo=r(fCe," \u2014 "),xP=n(fCe,"A",{href:!0});var vWr=s(xP);$mo=r(vWr,"RegNetModel"),vWr.forEach(t),Imo=r(fCe," (RegNet model)"),fCe.forEach(t),qmo=i(M),l_=n(M,"LI",{});var mCe=s(l_);fte=n(mCe,"STRONG",{});var FWr=s(fte);Nmo=r(FWr,"rembert"),FWr.forEach(t),jmo=r(mCe," \u2014 "),kP=n(mCe,"A",{href:!0});var TWr=s(kP);Dmo=r(TWr,"RemBertModel"),TWr.forEach(t),Gmo=r(mCe," (RemBERT model)"),mCe.forEach(t),Omo=i(M),i_=n(M,"LI",{});var gCe=s(i_);mte=n(gCe,"STRONG",{});var MWr=s(mte);Vmo=r(MWr,"resnet"),MWr.forEach(t),Xmo=r(gCe," \u2014 "),SP=n(gCe,"A",{href:!0});var EWr=s(SP);zmo=r(EWr,"ResNetModel"),EWr.forEach(t),Qmo=r(gCe," (ResNet model)"),gCe.forEach(t),Wmo=i(M),d_=n(M,"LI",{});var hCe=s(d_);gte=n(hCe,"STRONG",{});var CWr=s(gte);Hmo=r(CWr,"retribert"),CWr.forEach(t),Umo=r(hCe," \u2014 "),RP=n(hCe,"A",{href:!0});var wWr=s(RP);Jmo=r(wWr,"RetriBertModel"),wWr.forEach(t),Ymo=r(hCe," (RetriBERT model)"),hCe.forEach(t),Kmo=i(M),c_=n(M,"LI",{});var pCe=s(c_);hte=n(pCe,"STRONG",{});var AWr=s(hte);Zmo=r(AWr,"roberta"),AWr.forEach(t),ego=r(pCe," \u2014 "),BP=n(pCe,"A",{href:!0});var yWr=s(BP);ogo=r(yWr,"RobertaModel"),yWr.forEach(t),rgo=r(pCe," (RoBERTa model)"),pCe.forEach(t),tgo=i(M),f_=n(M,"LI",{});var _Ce=s(f_);pte=n(_Ce,"STRONG",{});var LWr=s(pte);ago=r(LWr,"roformer"),LWr.forEach(t),ngo=r(_Ce," \u2014 "),PP=n(_Ce,"A",{href:!0});var xWr=s(PP);sgo=r(xWr,"RoFormerModel"),xWr.forEach(t),lgo=r(_Ce," (RoFormer model)"),_Ce.forEach(t),igo=i(M),m_=n(M,"LI",{});var uCe=s(m_);_te=n(uCe,"STRONG",{});var kWr=s(_te);dgo=r(kWr,"segformer"),kWr.forEach(t),cgo=r(uCe," \u2014 "),$P=n(uCe,"A",{href:!0});var SWr=s($P);fgo=r(SWr,"SegformerModel"),SWr.forEach(t),mgo=r(uCe," (SegFormer model)"),uCe.forEach(t),ggo=i(M),g_=n(M,"LI",{});var bCe=s(g_);ute=n(bCe,"STRONG",{});var RWr=s(ute);hgo=r(RWr,"sew"),RWr.forEach(t),pgo=r(bCe," \u2014 "),IP=n(bCe,"A",{href:!0});var BWr=s(IP);_go=r(BWr,"SEWModel"),BWr.forEach(t),ugo=r(bCe," (SEW model)"),bCe.forEach(t),bgo=i(M),h_=n(M,"LI",{});var vCe=s(h_);bte=n(vCe,"STRONG",{});var PWr=s(bte);vgo=r(PWr,"sew-d"),PWr.forEach(t),Fgo=r(vCe," \u2014 "),qP=n(vCe,"A",{href:!0});var $Wr=s(qP);Tgo=r($Wr,"SEWDModel"),$Wr.forEach(t),Mgo=r(vCe," (SEW-D model)"),vCe.forEach(t),Ego=i(M),p_=n(M,"LI",{});var FCe=s(p_);vte=n(FCe,"STRONG",{});var IWr=s(vte);Cgo=r(IWr,"speech_to_text"),IWr.forEach(t),wgo=r(FCe," \u2014 "),NP=n(FCe,"A",{href:!0});var qWr=s(NP);Ago=r(qWr,"Speech2TextModel"),qWr.forEach(t),ygo=r(FCe," (Speech2Text model)"),FCe.forEach(t),Lgo=i(M),__=n(M,"LI",{});var TCe=s(__);Fte=n(TCe,"STRONG",{});var NWr=s(Fte);xgo=r(NWr,"splinter"),NWr.forEach(t),kgo=r(TCe," \u2014 "),jP=n(TCe,"A",{href:!0});var jWr=s(jP);Sgo=r(jWr,"SplinterModel"),jWr.forEach(t),Rgo=r(TCe," (Splinter model)"),TCe.forEach(t),Bgo=i(M),u_=n(M,"LI",{});var MCe=s(u_);Tte=n(MCe,"STRONG",{});var DWr=s(Tte);Pgo=r(DWr,"squeezebert"),DWr.forEach(t),$go=r(MCe," \u2014 "),DP=n(MCe,"A",{href:!0});var GWr=s(DP);Igo=r(GWr,"SqueezeBertModel"),GWr.forEach(t),qgo=r(MCe," (SqueezeBERT model)"),MCe.forEach(t),Ngo=i(M),b_=n(M,"LI",{});var ECe=s(b_);Mte=n(ECe,"STRONG",{});var OWr=s(Mte);jgo=r(OWr,"swin"),OWr.forEach(t),Dgo=r(ECe," \u2014 "),GP=n(ECe,"A",{href:!0});var VWr=s(GP);Ggo=r(VWr,"SwinModel"),VWr.forEach(t),Ogo=r(ECe," (Swin model)"),ECe.forEach(t),Vgo=i(M),v_=n(M,"LI",{});var CCe=s(v_);Ete=n(CCe,"STRONG",{});var XWr=s(Ete);Xgo=r(XWr,"t5"),XWr.forEach(t),zgo=r(CCe," \u2014 "),OP=n(CCe,"A",{href:!0});var zWr=s(OP);Qgo=r(zWr,"T5Model"),zWr.forEach(t),Wgo=r(CCe," (T5 model)"),CCe.forEach(t),Hgo=i(M),F_=n(M,"LI",{});var wCe=s(F_);Cte=n(wCe,"STRONG",{});var QWr=s(Cte);Ugo=r(QWr,"tapas"),QWr.forEach(t),Jgo=r(wCe," \u2014 "),VP=n(wCe,"A",{href:!0});var WWr=s(VP);Ygo=r(WWr,"TapasModel"),WWr.forEach(t),Kgo=r(wCe," (TAPAS model)"),wCe.forEach(t),Zgo=i(M),T_=n(M,"LI",{});var ACe=s(T_);wte=n(ACe,"STRONG",{});var HWr=s(wte);eho=r(HWr,"transfo-xl"),HWr.forEach(t),oho=r(ACe," \u2014 "),XP=n(ACe,"A",{href:!0});var UWr=s(XP);rho=r(UWr,"TransfoXLModel"),UWr.forEach(t),tho=r(ACe," (Transformer-XL model)"),ACe.forEach(t),aho=i(M),M_=n(M,"LI",{});var yCe=s(M_);Ate=n(yCe,"STRONG",{});var JWr=s(Ate);nho=r(JWr,"unispeech"),JWr.forEach(t),sho=r(yCe," \u2014 "),zP=n(yCe,"A",{href:!0});var YWr=s(zP);lho=r(YWr,"UniSpeechModel"),YWr.forEach(t),iho=r(yCe," (UniSpeech model)"),yCe.forEach(t),dho=i(M),E_=n(M,"LI",{});var LCe=s(E_);yte=n(LCe,"STRONG",{});var KWr=s(yte);cho=r(KWr,"unispeech-sat"),KWr.forEach(t),fho=r(LCe," \u2014 "),QP=n(LCe,"A",{href:!0});var ZWr=s(QP);mho=r(ZWr,"UniSpeechSatModel"),ZWr.forEach(t),gho=r(LCe," (UniSpeechSat model)"),LCe.forEach(t),hho=i(M),C_=n(M,"LI",{});var xCe=s(C_);Lte=n(xCe,"STRONG",{});var eHr=s(Lte);pho=r(eHr,"van"),eHr.forEach(t),_ho=r(xCe," \u2014 "),WP=n(xCe,"A",{href:!0});var oHr=s(WP);uho=r(oHr,"VanModel"),oHr.forEach(t),bho=r(xCe," (VAN model)"),xCe.forEach(t),vho=i(M),w_=n(M,"LI",{});var kCe=s(w_);xte=n(kCe,"STRONG",{});var rHr=s(xte);Fho=r(rHr,"vilt"),rHr.forEach(t),Tho=r(kCe," \u2014 "),HP=n(kCe,"A",{href:!0});var tHr=s(HP);Mho=r(tHr,"ViltModel"),tHr.forEach(t),Eho=r(kCe," (ViLT model)"),kCe.forEach(t),Cho=i(M),A_=n(M,"LI",{});var SCe=s(A_);kte=n(SCe,"STRONG",{});var aHr=s(kte);who=r(aHr,"vision-text-dual-encoder"),aHr.forEach(t),Aho=r(SCe," \u2014 "),UP=n(SCe,"A",{href:!0});var nHr=s(UP);yho=r(nHr,"VisionTextDualEncoderModel"),nHr.forEach(t),Lho=r(SCe," (VisionTextDualEncoder model)"),SCe.forEach(t),xho=i(M),y_=n(M,"LI",{});var RCe=s(y_);Ste=n(RCe,"STRONG",{});var sHr=s(Ste);kho=r(sHr,"visual_bert"),sHr.forEach(t),Sho=r(RCe," \u2014 "),JP=n(RCe,"A",{href:!0});var lHr=s(JP);Rho=r(lHr,"VisualBertModel"),lHr.forEach(t),Bho=r(RCe," (VisualBert model)"),RCe.forEach(t),Pho=i(M),L_=n(M,"LI",{});var BCe=s(L_);Rte=n(BCe,"STRONG",{});var iHr=s(Rte);$ho=r(iHr,"vit"),iHr.forEach(t),Iho=r(BCe," \u2014 "),YP=n(BCe,"A",{href:!0});var dHr=s(YP);qho=r(dHr,"ViTModel"),dHr.forEach(t),Nho=r(BCe," (ViT model)"),BCe.forEach(t),jho=i(M),x_=n(M,"LI",{});var PCe=s(x_);Bte=n(PCe,"STRONG",{});var cHr=s(Bte);Dho=r(cHr,"vit_mae"),cHr.forEach(t),Gho=r(PCe," \u2014 "),KP=n(PCe,"A",{href:!0});var fHr=s(KP);Oho=r(fHr,"ViTMAEModel"),fHr.forEach(t),Vho=r(PCe," (ViTMAE model)"),PCe.forEach(t),Xho=i(M),k_=n(M,"LI",{});var $Ce=s(k_);Pte=n($Ce,"STRONG",{});var mHr=s(Pte);zho=r(mHr,"wav2vec2"),mHr.forEach(t),Qho=r($Ce," \u2014 "),ZP=n($Ce,"A",{href:!0});var gHr=s(ZP);Who=r(gHr,"Wav2Vec2Model"),gHr.forEach(t),Hho=r($Ce," (Wav2Vec2 model)"),$Ce.forEach(t),Uho=i(M),S_=n(M,"LI",{});var ICe=s(S_);$te=n(ICe,"STRONG",{});var hHr=s($te);Jho=r(hHr,"wavlm"),hHr.forEach(t),Yho=r(ICe," \u2014 "),e$=n(ICe,"A",{href:!0});var pHr=s(e$);Kho=r(pHr,"WavLMModel"),pHr.forEach(t),Zho=r(ICe," (WavLM model)"),ICe.forEach(t),epo=i(M),R_=n(M,"LI",{});var qCe=s(R_);Ite=n(qCe,"STRONG",{});var _Hr=s(Ite);opo=r(_Hr,"xglm"),_Hr.forEach(t),rpo=r(qCe," \u2014 "),o$=n(qCe,"A",{href:!0});var uHr=s(o$);tpo=r(uHr,"XGLMModel"),uHr.forEach(t),apo=r(qCe," (XGLM model)"),qCe.forEach(t),npo=i(M),B_=n(M,"LI",{});var NCe=s(B_);qte=n(NCe,"STRONG",{});var bHr=s(qte);spo=r(bHr,"xlm"),bHr.forEach(t),lpo=r(NCe," \u2014 "),r$=n(NCe,"A",{href:!0});var vHr=s(r$);ipo=r(vHr,"XLMModel"),vHr.forEach(t),dpo=r(NCe," (XLM model)"),NCe.forEach(t),cpo=i(M),P_=n(M,"LI",{});var jCe=s(P_);Nte=n(jCe,"STRONG",{});var FHr=s(Nte);fpo=r(FHr,"xlm-prophetnet"),FHr.forEach(t),mpo=r(jCe," \u2014 "),t$=n(jCe,"A",{href:!0});var THr=s(t$);gpo=r(THr,"XLMProphetNetModel"),THr.forEach(t),hpo=r(jCe," (XLMProphetNet model)"),jCe.forEach(t),ppo=i(M),$_=n(M,"LI",{});var DCe=s($_);jte=n(DCe,"STRONG",{});var MHr=s(jte);_po=r(MHr,"xlm-roberta"),MHr.forEach(t),upo=r(DCe," \u2014 "),a$=n(DCe,"A",{href:!0});var EHr=s(a$);bpo=r(EHr,"XLMRobertaModel"),EHr.forEach(t),vpo=r(DCe," (XLM-RoBERTa model)"),DCe.forEach(t),Fpo=i(M),I_=n(M,"LI",{});var GCe=s(I_);Dte=n(GCe,"STRONG",{});var CHr=s(Dte);Tpo=r(CHr,"xlm-roberta-xl"),CHr.forEach(t),Mpo=r(GCe," \u2014 "),n$=n(GCe,"A",{href:!0});var wHr=s(n$);Epo=r(wHr,"XLMRobertaXLModel"),wHr.forEach(t),Cpo=r(GCe," (XLM-RoBERTa-XL model)"),GCe.forEach(t),wpo=i(M),q_=n(M,"LI",{});var OCe=s(q_);Gte=n(OCe,"STRONG",{});var AHr=s(Gte);Apo=r(AHr,"xlnet"),AHr.forEach(t),ypo=r(OCe," \u2014 "),s$=n(OCe,"A",{href:!0});var yHr=s(s$);Lpo=r(yHr,"XLNetModel"),yHr.forEach(t),xpo=r(OCe," (XLNet model)"),OCe.forEach(t),kpo=i(M),N_=n(M,"LI",{});var VCe=s(N_);Ote=n(VCe,"STRONG",{});var LHr=s(Ote);Spo=r(LHr,"yoso"),LHr.forEach(t),Rpo=r(VCe," \u2014 "),l$=n(VCe,"A",{href:!0});var xHr=s(l$);Bpo=r(xHr,"YosoModel"),xHr.forEach(t),Ppo=r(VCe," (YOSO model)"),VCe.forEach(t),M.forEach(t),$po=i(Dt),j_=n(Dt,"P",{});var XCe=s(j_);Ipo=r(XCe,"The model is set in evaluation mode by default using "),Vte=n(XCe,"CODE",{});var kHr=s(Vte);qpo=r(kHr,"model.eval()"),kHr.forEach(t),Npo=r(XCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xte=n(XCe,"CODE",{});var SHr=s(Xte);jpo=r(SHr,"model.train()"),SHr.forEach(t),XCe.forEach(t),Dpo=i(Dt),zte=n(Dt,"P",{});var RHr=s(zte);Gpo=r(RHr,"Examples:"),RHr.forEach(t),Opo=i(Dt),m(uw.$$.fragment,Dt),Dt.forEach(t),Ws.forEach(t),aBe=i(c),ed=n(c,"H2",{class:!0});var g$e=s(ed);D_=n(g$e,"A",{id:!0,class:!0,href:!0});var BHr=s(D_);Qte=n(BHr,"SPAN",{});var PHr=s(Qte);m(bw.$$.fragment,PHr),PHr.forEach(t),BHr.forEach(t),Vpo=i(g$e),Wte=n(g$e,"SPAN",{});var $Hr=s(Wte);Xpo=r($Hr,"AutoModelForPreTraining"),$Hr.forEach(t),g$e.forEach(t),nBe=i(c),Yo=n(c,"DIV",{class:!0});var Us=s(Yo);m(vw.$$.fragment,Us),zpo=i(Us),od=n(Us,"P",{});var LU=s(od);Qpo=r(LU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),i$=n(LU,"A",{href:!0});var IHr=s(i$);Wpo=r(IHr,"from_pretrained()"),IHr.forEach(t),Hpo=r(LU," class method or the "),d$=n(LU,"A",{href:!0});var qHr=s(d$);Upo=r(qHr,"from_config()"),qHr.forEach(t),Jpo=r(LU,` class
method.`),LU.forEach(t),Ypo=i(Us),Fw=n(Us,"P",{});var h$e=s(Fw);Kpo=r(h$e,"This class cannot be instantiated directly using "),Hte=n(h$e,"CODE",{});var NHr=s(Hte);Zpo=r(NHr,"__init__()"),NHr.forEach(t),e_o=r(h$e," (throws an error)."),h$e.forEach(t),o_o=i(Us),zr=n(Us,"DIV",{class:!0});var Js=s(zr);m(Tw.$$.fragment,Js),r_o=i(Js),Ute=n(Js,"P",{});var jHr=s(Ute);t_o=r(jHr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),jHr.forEach(t),a_o=i(Js),rd=n(Js,"P",{});var xU=s(rd);n_o=r(xU,`Note:
Loading a model from its configuration file does `),Jte=n(xU,"STRONG",{});var DHr=s(Jte);s_o=r(DHr,"not"),DHr.forEach(t),l_o=r(xU,` load the model weights. It only affects the
model\u2019s configuration. Use `),c$=n(xU,"A",{href:!0});var GHr=s(c$);i_o=r(GHr,"from_pretrained()"),GHr.forEach(t),d_o=r(xU," to load the model weights."),xU.forEach(t),c_o=i(Js),Yte=n(Js,"P",{});var OHr=s(Yte);f_o=r(OHr,"Examples:"),OHr.forEach(t),m_o=i(Js),m(Mw.$$.fragment,Js),Js.forEach(t),g_o=i(Us),Ne=n(Us,"DIV",{class:!0});var Gt=s(Ne);m(Ew.$$.fragment,Gt),h_o=i(Gt),Kte=n(Gt,"P",{});var VHr=s(Kte);p_o=r(VHr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),VHr.forEach(t),__o=i(Gt),za=n(Gt,"P",{});var $E=s(za);u_o=r($E,"The model class to instantiate is selected based on the "),Zte=n($E,"CODE",{});var XHr=s(Zte);b_o=r(XHr,"model_type"),XHr.forEach(t),v_o=r($E,` property of the config object (either
passed as an argument or loaded from `),eae=n($E,"CODE",{});var zHr=s(eae);F_o=r(zHr,"pretrained_model_name_or_path"),zHr.forEach(t),T_o=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oae=n($E,"CODE",{});var QHr=s(oae);M_o=r(QHr,"pretrained_model_name_or_path"),QHr.forEach(t),E_o=r($E,":"),$E.forEach(t),C_o=i(Gt),S=n(Gt,"UL",{});var B=s(S);G_=n(B,"LI",{});var zCe=s(G_);rae=n(zCe,"STRONG",{});var WHr=s(rae);w_o=r(WHr,"albert"),WHr.forEach(t),A_o=r(zCe," \u2014 "),f$=n(zCe,"A",{href:!0});var HHr=s(f$);y_o=r(HHr,"AlbertForPreTraining"),HHr.forEach(t),L_o=r(zCe," (ALBERT model)"),zCe.forEach(t),x_o=i(B),O_=n(B,"LI",{});var QCe=s(O_);tae=n(QCe,"STRONG",{});var UHr=s(tae);k_o=r(UHr,"bart"),UHr.forEach(t),S_o=r(QCe," \u2014 "),m$=n(QCe,"A",{href:!0});var JHr=s(m$);R_o=r(JHr,"BartForConditionalGeneration"),JHr.forEach(t),B_o=r(QCe," (BART model)"),QCe.forEach(t),P_o=i(B),V_=n(B,"LI",{});var WCe=s(V_);aae=n(WCe,"STRONG",{});var YHr=s(aae);$_o=r(YHr,"bert"),YHr.forEach(t),I_o=r(WCe," \u2014 "),g$=n(WCe,"A",{href:!0});var KHr=s(g$);q_o=r(KHr,"BertForPreTraining"),KHr.forEach(t),N_o=r(WCe," (BERT model)"),WCe.forEach(t),j_o=i(B),X_=n(B,"LI",{});var HCe=s(X_);nae=n(HCe,"STRONG",{});var ZHr=s(nae);D_o=r(ZHr,"big_bird"),ZHr.forEach(t),G_o=r(HCe," \u2014 "),h$=n(HCe,"A",{href:!0});var eUr=s(h$);O_o=r(eUr,"BigBirdForPreTraining"),eUr.forEach(t),V_o=r(HCe," (BigBird model)"),HCe.forEach(t),X_o=i(B),z_=n(B,"LI",{});var UCe=s(z_);sae=n(UCe,"STRONG",{});var oUr=s(sae);z_o=r(oUr,"camembert"),oUr.forEach(t),Q_o=r(UCe," \u2014 "),p$=n(UCe,"A",{href:!0});var rUr=s(p$);W_o=r(rUr,"CamembertForMaskedLM"),rUr.forEach(t),H_o=r(UCe," (CamemBERT model)"),UCe.forEach(t),U_o=i(B),Q_=n(B,"LI",{});var JCe=s(Q_);lae=n(JCe,"STRONG",{});var tUr=s(lae);J_o=r(tUr,"ctrl"),tUr.forEach(t),Y_o=r(JCe," \u2014 "),_$=n(JCe,"A",{href:!0});var aUr=s(_$);K_o=r(aUr,"CTRLLMHeadModel"),aUr.forEach(t),Z_o=r(JCe," (CTRL model)"),JCe.forEach(t),euo=i(B),W_=n(B,"LI",{});var YCe=s(W_);iae=n(YCe,"STRONG",{});var nUr=s(iae);ouo=r(nUr,"data2vec-text"),nUr.forEach(t),ruo=r(YCe," \u2014 "),u$=n(YCe,"A",{href:!0});var sUr=s(u$);tuo=r(sUr,"Data2VecTextForMaskedLM"),sUr.forEach(t),auo=r(YCe," (Data2VecText model)"),YCe.forEach(t),nuo=i(B),H_=n(B,"LI",{});var KCe=s(H_);dae=n(KCe,"STRONG",{});var lUr=s(dae);suo=r(lUr,"deberta"),lUr.forEach(t),luo=r(KCe," \u2014 "),b$=n(KCe,"A",{href:!0});var iUr=s(b$);iuo=r(iUr,"DebertaForMaskedLM"),iUr.forEach(t),duo=r(KCe," (DeBERTa model)"),KCe.forEach(t),cuo=i(B),U_=n(B,"LI",{});var ZCe=s(U_);cae=n(ZCe,"STRONG",{});var dUr=s(cae);fuo=r(dUr,"deberta-v2"),dUr.forEach(t),muo=r(ZCe," \u2014 "),v$=n(ZCe,"A",{href:!0});var cUr=s(v$);guo=r(cUr,"DebertaV2ForMaskedLM"),cUr.forEach(t),huo=r(ZCe," (DeBERTa-v2 model)"),ZCe.forEach(t),puo=i(B),J_=n(B,"LI",{});var ewe=s(J_);fae=n(ewe,"STRONG",{});var fUr=s(fae);_uo=r(fUr,"distilbert"),fUr.forEach(t),uuo=r(ewe," \u2014 "),F$=n(ewe,"A",{href:!0});var mUr=s(F$);buo=r(mUr,"DistilBertForMaskedLM"),mUr.forEach(t),vuo=r(ewe," (DistilBERT model)"),ewe.forEach(t),Fuo=i(B),Y_=n(B,"LI",{});var owe=s(Y_);mae=n(owe,"STRONG",{});var gUr=s(mae);Tuo=r(gUr,"electra"),gUr.forEach(t),Muo=r(owe," \u2014 "),T$=n(owe,"A",{href:!0});var hUr=s(T$);Euo=r(hUr,"ElectraForPreTraining"),hUr.forEach(t),Cuo=r(owe," (ELECTRA model)"),owe.forEach(t),wuo=i(B),K_=n(B,"LI",{});var rwe=s(K_);gae=n(rwe,"STRONG",{});var pUr=s(gae);Auo=r(pUr,"flaubert"),pUr.forEach(t),yuo=r(rwe," \u2014 "),M$=n(rwe,"A",{href:!0});var _Ur=s(M$);Luo=r(_Ur,"FlaubertWithLMHeadModel"),_Ur.forEach(t),xuo=r(rwe," (FlauBERT model)"),rwe.forEach(t),kuo=i(B),Z_=n(B,"LI",{});var twe=s(Z_);hae=n(twe,"STRONG",{});var uUr=s(hae);Suo=r(uUr,"fnet"),uUr.forEach(t),Ruo=r(twe," \u2014 "),E$=n(twe,"A",{href:!0});var bUr=s(E$);Buo=r(bUr,"FNetForPreTraining"),bUr.forEach(t),Puo=r(twe," (FNet model)"),twe.forEach(t),$uo=i(B),eu=n(B,"LI",{});var awe=s(eu);pae=n(awe,"STRONG",{});var vUr=s(pae);Iuo=r(vUr,"fsmt"),vUr.forEach(t),quo=r(awe," \u2014 "),C$=n(awe,"A",{href:!0});var FUr=s(C$);Nuo=r(FUr,"FSMTForConditionalGeneration"),FUr.forEach(t),juo=r(awe," (FairSeq Machine-Translation model)"),awe.forEach(t),Duo=i(B),ou=n(B,"LI",{});var nwe=s(ou);_ae=n(nwe,"STRONG",{});var TUr=s(_ae);Guo=r(TUr,"funnel"),TUr.forEach(t),Ouo=r(nwe," \u2014 "),w$=n(nwe,"A",{href:!0});var MUr=s(w$);Vuo=r(MUr,"FunnelForPreTraining"),MUr.forEach(t),Xuo=r(nwe," (Funnel Transformer model)"),nwe.forEach(t),zuo=i(B),ru=n(B,"LI",{});var swe=s(ru);uae=n(swe,"STRONG",{});var EUr=s(uae);Quo=r(EUr,"gpt2"),EUr.forEach(t),Wuo=r(swe," \u2014 "),A$=n(swe,"A",{href:!0});var CUr=s(A$);Huo=r(CUr,"GPT2LMHeadModel"),CUr.forEach(t),Uuo=r(swe," (OpenAI GPT-2 model)"),swe.forEach(t),Juo=i(B),tu=n(B,"LI",{});var lwe=s(tu);bae=n(lwe,"STRONG",{});var wUr=s(bae);Yuo=r(wUr,"ibert"),wUr.forEach(t),Kuo=r(lwe," \u2014 "),y$=n(lwe,"A",{href:!0});var AUr=s(y$);Zuo=r(AUr,"IBertForMaskedLM"),AUr.forEach(t),e1o=r(lwe," (I-BERT model)"),lwe.forEach(t),o1o=i(B),au=n(B,"LI",{});var iwe=s(au);vae=n(iwe,"STRONG",{});var yUr=s(vae);r1o=r(yUr,"layoutlm"),yUr.forEach(t),t1o=r(iwe," \u2014 "),L$=n(iwe,"A",{href:!0});var LUr=s(L$);a1o=r(LUr,"LayoutLMForMaskedLM"),LUr.forEach(t),n1o=r(iwe," (LayoutLM model)"),iwe.forEach(t),s1o=i(B),nu=n(B,"LI",{});var dwe=s(nu);Fae=n(dwe,"STRONG",{});var xUr=s(Fae);l1o=r(xUr,"longformer"),xUr.forEach(t),i1o=r(dwe," \u2014 "),x$=n(dwe,"A",{href:!0});var kUr=s(x$);d1o=r(kUr,"LongformerForMaskedLM"),kUr.forEach(t),c1o=r(dwe," (Longformer model)"),dwe.forEach(t),f1o=i(B),su=n(B,"LI",{});var cwe=s(su);Tae=n(cwe,"STRONG",{});var SUr=s(Tae);m1o=r(SUr,"lxmert"),SUr.forEach(t),g1o=r(cwe," \u2014 "),k$=n(cwe,"A",{href:!0});var RUr=s(k$);h1o=r(RUr,"LxmertForPreTraining"),RUr.forEach(t),p1o=r(cwe," (LXMERT model)"),cwe.forEach(t),_1o=i(B),lu=n(B,"LI",{});var fwe=s(lu);Mae=n(fwe,"STRONG",{});var BUr=s(Mae);u1o=r(BUr,"megatron-bert"),BUr.forEach(t),b1o=r(fwe," \u2014 "),S$=n(fwe,"A",{href:!0});var PUr=s(S$);v1o=r(PUr,"MegatronBertForPreTraining"),PUr.forEach(t),F1o=r(fwe," (MegatronBert model)"),fwe.forEach(t),T1o=i(B),iu=n(B,"LI",{});var mwe=s(iu);Eae=n(mwe,"STRONG",{});var $Ur=s(Eae);M1o=r($Ur,"mobilebert"),$Ur.forEach(t),E1o=r(mwe," \u2014 "),R$=n(mwe,"A",{href:!0});var IUr=s(R$);C1o=r(IUr,"MobileBertForPreTraining"),IUr.forEach(t),w1o=r(mwe," (MobileBERT model)"),mwe.forEach(t),A1o=i(B),du=n(B,"LI",{});var gwe=s(du);Cae=n(gwe,"STRONG",{});var qUr=s(Cae);y1o=r(qUr,"mpnet"),qUr.forEach(t),L1o=r(gwe," \u2014 "),B$=n(gwe,"A",{href:!0});var NUr=s(B$);x1o=r(NUr,"MPNetForMaskedLM"),NUr.forEach(t),k1o=r(gwe," (MPNet model)"),gwe.forEach(t),S1o=i(B),cu=n(B,"LI",{});var hwe=s(cu);wae=n(hwe,"STRONG",{});var jUr=s(wae);R1o=r(jUr,"openai-gpt"),jUr.forEach(t),B1o=r(hwe," \u2014 "),P$=n(hwe,"A",{href:!0});var DUr=s(P$);P1o=r(DUr,"OpenAIGPTLMHeadModel"),DUr.forEach(t),$1o=r(hwe," (OpenAI GPT model)"),hwe.forEach(t),I1o=i(B),fu=n(B,"LI",{});var pwe=s(fu);Aae=n(pwe,"STRONG",{});var GUr=s(Aae);q1o=r(GUr,"retribert"),GUr.forEach(t),N1o=r(pwe," \u2014 "),$$=n(pwe,"A",{href:!0});var OUr=s($$);j1o=r(OUr,"RetriBertModel"),OUr.forEach(t),D1o=r(pwe," (RetriBERT model)"),pwe.forEach(t),G1o=i(B),mu=n(B,"LI",{});var _we=s(mu);yae=n(_we,"STRONG",{});var VUr=s(yae);O1o=r(VUr,"roberta"),VUr.forEach(t),V1o=r(_we," \u2014 "),I$=n(_we,"A",{href:!0});var XUr=s(I$);X1o=r(XUr,"RobertaForMaskedLM"),XUr.forEach(t),z1o=r(_we," (RoBERTa model)"),_we.forEach(t),Q1o=i(B),gu=n(B,"LI",{});var uwe=s(gu);Lae=n(uwe,"STRONG",{});var zUr=s(Lae);W1o=r(zUr,"squeezebert"),zUr.forEach(t),H1o=r(uwe," \u2014 "),q$=n(uwe,"A",{href:!0});var QUr=s(q$);U1o=r(QUr,"SqueezeBertForMaskedLM"),QUr.forEach(t),J1o=r(uwe," (SqueezeBERT model)"),uwe.forEach(t),Y1o=i(B),hu=n(B,"LI",{});var bwe=s(hu);xae=n(bwe,"STRONG",{});var WUr=s(xae);K1o=r(WUr,"t5"),WUr.forEach(t),Z1o=r(bwe," \u2014 "),N$=n(bwe,"A",{href:!0});var HUr=s(N$);e7o=r(HUr,"T5ForConditionalGeneration"),HUr.forEach(t),o7o=r(bwe," (T5 model)"),bwe.forEach(t),r7o=i(B),pu=n(B,"LI",{});var vwe=s(pu);kae=n(vwe,"STRONG",{});var UUr=s(kae);t7o=r(UUr,"tapas"),UUr.forEach(t),a7o=r(vwe," \u2014 "),j$=n(vwe,"A",{href:!0});var JUr=s(j$);n7o=r(JUr,"TapasForMaskedLM"),JUr.forEach(t),s7o=r(vwe," (TAPAS model)"),vwe.forEach(t),l7o=i(B),_u=n(B,"LI",{});var Fwe=s(_u);Sae=n(Fwe,"STRONG",{});var YUr=s(Sae);i7o=r(YUr,"transfo-xl"),YUr.forEach(t),d7o=r(Fwe," \u2014 "),D$=n(Fwe,"A",{href:!0});var KUr=s(D$);c7o=r(KUr,"TransfoXLLMHeadModel"),KUr.forEach(t),f7o=r(Fwe," (Transformer-XL model)"),Fwe.forEach(t),m7o=i(B),uu=n(B,"LI",{});var Twe=s(uu);Rae=n(Twe,"STRONG",{});var ZUr=s(Rae);g7o=r(ZUr,"unispeech"),ZUr.forEach(t),h7o=r(Twe," \u2014 "),G$=n(Twe,"A",{href:!0});var eJr=s(G$);p7o=r(eJr,"UniSpeechForPreTraining"),eJr.forEach(t),_7o=r(Twe," (UniSpeech model)"),Twe.forEach(t),u7o=i(B),bu=n(B,"LI",{});var Mwe=s(bu);Bae=n(Mwe,"STRONG",{});var oJr=s(Bae);b7o=r(oJr,"unispeech-sat"),oJr.forEach(t),v7o=r(Mwe," \u2014 "),O$=n(Mwe,"A",{href:!0});var rJr=s(O$);F7o=r(rJr,"UniSpeechSatForPreTraining"),rJr.forEach(t),T7o=r(Mwe," (UniSpeechSat model)"),Mwe.forEach(t),M7o=i(B),vu=n(B,"LI",{});var Ewe=s(vu);Pae=n(Ewe,"STRONG",{});var tJr=s(Pae);E7o=r(tJr,"visual_bert"),tJr.forEach(t),C7o=r(Ewe," \u2014 "),V$=n(Ewe,"A",{href:!0});var aJr=s(V$);w7o=r(aJr,"VisualBertForPreTraining"),aJr.forEach(t),A7o=r(Ewe," (VisualBert model)"),Ewe.forEach(t),y7o=i(B),Fu=n(B,"LI",{});var Cwe=s(Fu);$ae=n(Cwe,"STRONG",{});var nJr=s($ae);L7o=r(nJr,"vit_mae"),nJr.forEach(t),x7o=r(Cwe," \u2014 "),X$=n(Cwe,"A",{href:!0});var sJr=s(X$);k7o=r(sJr,"ViTMAEForPreTraining"),sJr.forEach(t),S7o=r(Cwe," (ViTMAE model)"),Cwe.forEach(t),R7o=i(B),Tu=n(B,"LI",{});var wwe=s(Tu);Iae=n(wwe,"STRONG",{});var lJr=s(Iae);B7o=r(lJr,"wav2vec2"),lJr.forEach(t),P7o=r(wwe," \u2014 "),z$=n(wwe,"A",{href:!0});var iJr=s(z$);$7o=r(iJr,"Wav2Vec2ForPreTraining"),iJr.forEach(t),I7o=r(wwe," (Wav2Vec2 model)"),wwe.forEach(t),q7o=i(B),Mu=n(B,"LI",{});var Awe=s(Mu);qae=n(Awe,"STRONG",{});var dJr=s(qae);N7o=r(dJr,"xlm"),dJr.forEach(t),j7o=r(Awe," \u2014 "),Q$=n(Awe,"A",{href:!0});var cJr=s(Q$);D7o=r(cJr,"XLMWithLMHeadModel"),cJr.forEach(t),G7o=r(Awe," (XLM model)"),Awe.forEach(t),O7o=i(B),Eu=n(B,"LI",{});var ywe=s(Eu);Nae=n(ywe,"STRONG",{});var fJr=s(Nae);V7o=r(fJr,"xlm-roberta"),fJr.forEach(t),X7o=r(ywe," \u2014 "),W$=n(ywe,"A",{href:!0});var mJr=s(W$);z7o=r(mJr,"XLMRobertaForMaskedLM"),mJr.forEach(t),Q7o=r(ywe," (XLM-RoBERTa model)"),ywe.forEach(t),W7o=i(B),Cu=n(B,"LI",{});var Lwe=s(Cu);jae=n(Lwe,"STRONG",{});var gJr=s(jae);H7o=r(gJr,"xlm-roberta-xl"),gJr.forEach(t),U7o=r(Lwe," \u2014 "),H$=n(Lwe,"A",{href:!0});var hJr=s(H$);J7o=r(hJr,"XLMRobertaXLForMaskedLM"),hJr.forEach(t),Y7o=r(Lwe," (XLM-RoBERTa-XL model)"),Lwe.forEach(t),K7o=i(B),wu=n(B,"LI",{});var xwe=s(wu);Dae=n(xwe,"STRONG",{});var pJr=s(Dae);Z7o=r(pJr,"xlnet"),pJr.forEach(t),ebo=r(xwe," \u2014 "),U$=n(xwe,"A",{href:!0});var _Jr=s(U$);obo=r(_Jr,"XLNetLMHeadModel"),_Jr.forEach(t),rbo=r(xwe," (XLNet model)"),xwe.forEach(t),B.forEach(t),tbo=i(Gt),Au=n(Gt,"P",{});var kwe=s(Au);abo=r(kwe,"The model is set in evaluation mode by default using "),Gae=n(kwe,"CODE",{});var uJr=s(Gae);nbo=r(uJr,"model.eval()"),uJr.forEach(t),sbo=r(kwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Oae=n(kwe,"CODE",{});var bJr=s(Oae);lbo=r(bJr,"model.train()"),bJr.forEach(t),kwe.forEach(t),ibo=i(Gt),Vae=n(Gt,"P",{});var vJr=s(Vae);dbo=r(vJr,"Examples:"),vJr.forEach(t),cbo=i(Gt),m(Cw.$$.fragment,Gt),Gt.forEach(t),Us.forEach(t),sBe=i(c),td=n(c,"H2",{class:!0});var p$e=s(td);yu=n(p$e,"A",{id:!0,class:!0,href:!0});var FJr=s(yu);Xae=n(FJr,"SPAN",{});var TJr=s(Xae);m(ww.$$.fragment,TJr),TJr.forEach(t),FJr.forEach(t),fbo=i(p$e),zae=n(p$e,"SPAN",{});var MJr=s(zae);mbo=r(MJr,"AutoModelForCausalLM"),MJr.forEach(t),p$e.forEach(t),lBe=i(c),Ko=n(c,"DIV",{class:!0});var Ys=s(Ko);m(Aw.$$.fragment,Ys),gbo=i(Ys),ad=n(Ys,"P",{});var kU=s(ad);hbo=r(kU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),J$=n(kU,"A",{href:!0});var EJr=s(J$);pbo=r(EJr,"from_pretrained()"),EJr.forEach(t),_bo=r(kU," class method or the "),Y$=n(kU,"A",{href:!0});var CJr=s(Y$);ubo=r(CJr,"from_config()"),CJr.forEach(t),bbo=r(kU,` class
method.`),kU.forEach(t),vbo=i(Ys),yw=n(Ys,"P",{});var _$e=s(yw);Fbo=r(_$e,"This class cannot be instantiated directly using "),Qae=n(_$e,"CODE",{});var wJr=s(Qae);Tbo=r(wJr,"__init__()"),wJr.forEach(t),Mbo=r(_$e," (throws an error)."),_$e.forEach(t),Ebo=i(Ys),Qr=n(Ys,"DIV",{class:!0});var Ks=s(Qr);m(Lw.$$.fragment,Ks),Cbo=i(Ks),Wae=n(Ks,"P",{});var AJr=s(Wae);wbo=r(AJr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),AJr.forEach(t),Abo=i(Ks),nd=n(Ks,"P",{});var SU=s(nd);ybo=r(SU,`Note:
Loading a model from its configuration file does `),Hae=n(SU,"STRONG",{});var yJr=s(Hae);Lbo=r(yJr,"not"),yJr.forEach(t),xbo=r(SU,` load the model weights. It only affects the
model\u2019s configuration. Use `),K$=n(SU,"A",{href:!0});var LJr=s(K$);kbo=r(LJr,"from_pretrained()"),LJr.forEach(t),Sbo=r(SU," to load the model weights."),SU.forEach(t),Rbo=i(Ks),Uae=n(Ks,"P",{});var xJr=s(Uae);Bbo=r(xJr,"Examples:"),xJr.forEach(t),Pbo=i(Ks),m(xw.$$.fragment,Ks),Ks.forEach(t),$bo=i(Ys),je=n(Ys,"DIV",{class:!0});var Ot=s(je);m(kw.$$.fragment,Ot),Ibo=i(Ot),Jae=n(Ot,"P",{});var kJr=s(Jae);qbo=r(kJr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),kJr.forEach(t),Nbo=i(Ot),Qa=n(Ot,"P",{});var IE=s(Qa);jbo=r(IE,"The model class to instantiate is selected based on the "),Yae=n(IE,"CODE",{});var SJr=s(Yae);Dbo=r(SJr,"model_type"),SJr.forEach(t),Gbo=r(IE,` property of the config object (either
passed as an argument or loaded from `),Kae=n(IE,"CODE",{});var RJr=s(Kae);Obo=r(RJr,"pretrained_model_name_or_path"),RJr.forEach(t),Vbo=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zae=n(IE,"CODE",{});var BJr=s(Zae);Xbo=r(BJr,"pretrained_model_name_or_path"),BJr.forEach(t),zbo=r(IE,":"),IE.forEach(t),Qbo=i(Ot),$=n(Ot,"UL",{});var q=s($);Lu=n(q,"LI",{});var Swe=s(Lu);ene=n(Swe,"STRONG",{});var PJr=s(ene);Wbo=r(PJr,"bart"),PJr.forEach(t),Hbo=r(Swe," \u2014 "),Z$=n(Swe,"A",{href:!0});var $Jr=s(Z$);Ubo=r($Jr,"BartForCausalLM"),$Jr.forEach(t),Jbo=r(Swe," (BART model)"),Swe.forEach(t),Ybo=i(q),xu=n(q,"LI",{});var Rwe=s(xu);one=n(Rwe,"STRONG",{});var IJr=s(one);Kbo=r(IJr,"bert"),IJr.forEach(t),Zbo=r(Rwe," \u2014 "),eI=n(Rwe,"A",{href:!0});var qJr=s(eI);e2o=r(qJr,"BertLMHeadModel"),qJr.forEach(t),o2o=r(Rwe," (BERT model)"),Rwe.forEach(t),r2o=i(q),ku=n(q,"LI",{});var Bwe=s(ku);rne=n(Bwe,"STRONG",{});var NJr=s(rne);t2o=r(NJr,"bert-generation"),NJr.forEach(t),a2o=r(Bwe," \u2014 "),oI=n(Bwe,"A",{href:!0});var jJr=s(oI);n2o=r(jJr,"BertGenerationDecoder"),jJr.forEach(t),s2o=r(Bwe," (Bert Generation model)"),Bwe.forEach(t),l2o=i(q),Su=n(q,"LI",{});var Pwe=s(Su);tne=n(Pwe,"STRONG",{});var DJr=s(tne);i2o=r(DJr,"big_bird"),DJr.forEach(t),d2o=r(Pwe," \u2014 "),rI=n(Pwe,"A",{href:!0});var GJr=s(rI);c2o=r(GJr,"BigBirdForCausalLM"),GJr.forEach(t),f2o=r(Pwe," (BigBird model)"),Pwe.forEach(t),m2o=i(q),Ru=n(q,"LI",{});var $we=s(Ru);ane=n($we,"STRONG",{});var OJr=s(ane);g2o=r(OJr,"bigbird_pegasus"),OJr.forEach(t),h2o=r($we," \u2014 "),tI=n($we,"A",{href:!0});var VJr=s(tI);p2o=r(VJr,"BigBirdPegasusForCausalLM"),VJr.forEach(t),_2o=r($we," (BigBirdPegasus model)"),$we.forEach(t),u2o=i(q),Bu=n(q,"LI",{});var Iwe=s(Bu);nne=n(Iwe,"STRONG",{});var XJr=s(nne);b2o=r(XJr,"blenderbot"),XJr.forEach(t),v2o=r(Iwe," \u2014 "),aI=n(Iwe,"A",{href:!0});var zJr=s(aI);F2o=r(zJr,"BlenderbotForCausalLM"),zJr.forEach(t),T2o=r(Iwe," (Blenderbot model)"),Iwe.forEach(t),M2o=i(q),Pu=n(q,"LI",{});var qwe=s(Pu);sne=n(qwe,"STRONG",{});var QJr=s(sne);E2o=r(QJr,"blenderbot-small"),QJr.forEach(t),C2o=r(qwe," \u2014 "),nI=n(qwe,"A",{href:!0});var WJr=s(nI);w2o=r(WJr,"BlenderbotSmallForCausalLM"),WJr.forEach(t),A2o=r(qwe," (BlenderbotSmall model)"),qwe.forEach(t),y2o=i(q),$u=n(q,"LI",{});var Nwe=s($u);lne=n(Nwe,"STRONG",{});var HJr=s(lne);L2o=r(HJr,"camembert"),HJr.forEach(t),x2o=r(Nwe," \u2014 "),sI=n(Nwe,"A",{href:!0});var UJr=s(sI);k2o=r(UJr,"CamembertForCausalLM"),UJr.forEach(t),S2o=r(Nwe," (CamemBERT model)"),Nwe.forEach(t),R2o=i(q),Iu=n(q,"LI",{});var jwe=s(Iu);ine=n(jwe,"STRONG",{});var JJr=s(ine);B2o=r(JJr,"ctrl"),JJr.forEach(t),P2o=r(jwe," \u2014 "),lI=n(jwe,"A",{href:!0});var YJr=s(lI);$2o=r(YJr,"CTRLLMHeadModel"),YJr.forEach(t),I2o=r(jwe," (CTRL model)"),jwe.forEach(t),q2o=i(q),qu=n(q,"LI",{});var Dwe=s(qu);dne=n(Dwe,"STRONG",{});var KJr=s(dne);N2o=r(KJr,"data2vec-text"),KJr.forEach(t),j2o=r(Dwe," \u2014 "),iI=n(Dwe,"A",{href:!0});var ZJr=s(iI);D2o=r(ZJr,"Data2VecTextForCausalLM"),ZJr.forEach(t),G2o=r(Dwe," (Data2VecText model)"),Dwe.forEach(t),O2o=i(q),Nu=n(q,"LI",{});var Gwe=s(Nu);cne=n(Gwe,"STRONG",{});var eYr=s(cne);V2o=r(eYr,"electra"),eYr.forEach(t),X2o=r(Gwe," \u2014 "),dI=n(Gwe,"A",{href:!0});var oYr=s(dI);z2o=r(oYr,"ElectraForCausalLM"),oYr.forEach(t),Q2o=r(Gwe," (ELECTRA model)"),Gwe.forEach(t),W2o=i(q),ju=n(q,"LI",{});var Owe=s(ju);fne=n(Owe,"STRONG",{});var rYr=s(fne);H2o=r(rYr,"gpt2"),rYr.forEach(t),U2o=r(Owe," \u2014 "),cI=n(Owe,"A",{href:!0});var tYr=s(cI);J2o=r(tYr,"GPT2LMHeadModel"),tYr.forEach(t),Y2o=r(Owe," (OpenAI GPT-2 model)"),Owe.forEach(t),K2o=i(q),Du=n(q,"LI",{});var Vwe=s(Du);mne=n(Vwe,"STRONG",{});var aYr=s(mne);Z2o=r(aYr,"gpt_neo"),aYr.forEach(t),e5o=r(Vwe," \u2014 "),fI=n(Vwe,"A",{href:!0});var nYr=s(fI);o5o=r(nYr,"GPTNeoForCausalLM"),nYr.forEach(t),r5o=r(Vwe," (GPT Neo model)"),Vwe.forEach(t),t5o=i(q),Gu=n(q,"LI",{});var Xwe=s(Gu);gne=n(Xwe,"STRONG",{});var sYr=s(gne);a5o=r(sYr,"gptj"),sYr.forEach(t),n5o=r(Xwe," \u2014 "),mI=n(Xwe,"A",{href:!0});var lYr=s(mI);s5o=r(lYr,"GPTJForCausalLM"),lYr.forEach(t),l5o=r(Xwe," (GPT-J model)"),Xwe.forEach(t),i5o=i(q),Ou=n(q,"LI",{});var zwe=s(Ou);hne=n(zwe,"STRONG",{});var iYr=s(hne);d5o=r(iYr,"marian"),iYr.forEach(t),c5o=r(zwe," \u2014 "),gI=n(zwe,"A",{href:!0});var dYr=s(gI);f5o=r(dYr,"MarianForCausalLM"),dYr.forEach(t),m5o=r(zwe," (Marian model)"),zwe.forEach(t),g5o=i(q),Vu=n(q,"LI",{});var Qwe=s(Vu);pne=n(Qwe,"STRONG",{});var cYr=s(pne);h5o=r(cYr,"mbart"),cYr.forEach(t),p5o=r(Qwe," \u2014 "),hI=n(Qwe,"A",{href:!0});var fYr=s(hI);_5o=r(fYr,"MBartForCausalLM"),fYr.forEach(t),u5o=r(Qwe," (mBART model)"),Qwe.forEach(t),b5o=i(q),Xu=n(q,"LI",{});var Wwe=s(Xu);_ne=n(Wwe,"STRONG",{});var mYr=s(_ne);v5o=r(mYr,"megatron-bert"),mYr.forEach(t),F5o=r(Wwe," \u2014 "),pI=n(Wwe,"A",{href:!0});var gYr=s(pI);T5o=r(gYr,"MegatronBertForCausalLM"),gYr.forEach(t),M5o=r(Wwe," (MegatronBert model)"),Wwe.forEach(t),E5o=i(q),zu=n(q,"LI",{});var Hwe=s(zu);une=n(Hwe,"STRONG",{});var hYr=s(une);C5o=r(hYr,"openai-gpt"),hYr.forEach(t),w5o=r(Hwe," \u2014 "),_I=n(Hwe,"A",{href:!0});var pYr=s(_I);A5o=r(pYr,"OpenAIGPTLMHeadModel"),pYr.forEach(t),y5o=r(Hwe," (OpenAI GPT model)"),Hwe.forEach(t),L5o=i(q),Qu=n(q,"LI",{});var Uwe=s(Qu);bne=n(Uwe,"STRONG",{});var _Yr=s(bne);x5o=r(_Yr,"pegasus"),_Yr.forEach(t),k5o=r(Uwe," \u2014 "),uI=n(Uwe,"A",{href:!0});var uYr=s(uI);S5o=r(uYr,"PegasusForCausalLM"),uYr.forEach(t),R5o=r(Uwe," (Pegasus model)"),Uwe.forEach(t),B5o=i(q),Wu=n(q,"LI",{});var Jwe=s(Wu);vne=n(Jwe,"STRONG",{});var bYr=s(vne);P5o=r(bYr,"plbart"),bYr.forEach(t),$5o=r(Jwe," \u2014 "),bI=n(Jwe,"A",{href:!0});var vYr=s(bI);I5o=r(vYr,"PLBartForCausalLM"),vYr.forEach(t),q5o=r(Jwe," (PLBart model)"),Jwe.forEach(t),N5o=i(q),Hu=n(q,"LI",{});var Ywe=s(Hu);Fne=n(Ywe,"STRONG",{});var FYr=s(Fne);j5o=r(FYr,"prophetnet"),FYr.forEach(t),D5o=r(Ywe," \u2014 "),vI=n(Ywe,"A",{href:!0});var TYr=s(vI);G5o=r(TYr,"ProphetNetForCausalLM"),TYr.forEach(t),O5o=r(Ywe," (ProphetNet model)"),Ywe.forEach(t),V5o=i(q),Uu=n(q,"LI",{});var Kwe=s(Uu);Tne=n(Kwe,"STRONG",{});var MYr=s(Tne);X5o=r(MYr,"qdqbert"),MYr.forEach(t),z5o=r(Kwe," \u2014 "),FI=n(Kwe,"A",{href:!0});var EYr=s(FI);Q5o=r(EYr,"QDQBertLMHeadModel"),EYr.forEach(t),W5o=r(Kwe," (QDQBert model)"),Kwe.forEach(t),H5o=i(q),Ju=n(q,"LI",{});var Zwe=s(Ju);Mne=n(Zwe,"STRONG",{});var CYr=s(Mne);U5o=r(CYr,"reformer"),CYr.forEach(t),J5o=r(Zwe," \u2014 "),TI=n(Zwe,"A",{href:!0});var wYr=s(TI);Y5o=r(wYr,"ReformerModelWithLMHead"),wYr.forEach(t),K5o=r(Zwe," (Reformer model)"),Zwe.forEach(t),Z5o=i(q),Yu=n(q,"LI",{});var e6e=s(Yu);Ene=n(e6e,"STRONG",{});var AYr=s(Ene);e3o=r(AYr,"rembert"),AYr.forEach(t),o3o=r(e6e," \u2014 "),MI=n(e6e,"A",{href:!0});var yYr=s(MI);r3o=r(yYr,"RemBertForCausalLM"),yYr.forEach(t),t3o=r(e6e," (RemBERT model)"),e6e.forEach(t),a3o=i(q),Ku=n(q,"LI",{});var o6e=s(Ku);Cne=n(o6e,"STRONG",{});var LYr=s(Cne);n3o=r(LYr,"roberta"),LYr.forEach(t),s3o=r(o6e," \u2014 "),EI=n(o6e,"A",{href:!0});var xYr=s(EI);l3o=r(xYr,"RobertaForCausalLM"),xYr.forEach(t),i3o=r(o6e," (RoBERTa model)"),o6e.forEach(t),d3o=i(q),Zu=n(q,"LI",{});var r6e=s(Zu);wne=n(r6e,"STRONG",{});var kYr=s(wne);c3o=r(kYr,"roformer"),kYr.forEach(t),f3o=r(r6e," \u2014 "),CI=n(r6e,"A",{href:!0});var SYr=s(CI);m3o=r(SYr,"RoFormerForCausalLM"),SYr.forEach(t),g3o=r(r6e," (RoFormer model)"),r6e.forEach(t),h3o=i(q),e1=n(q,"LI",{});var t6e=s(e1);Ane=n(t6e,"STRONG",{});var RYr=s(Ane);p3o=r(RYr,"speech_to_text_2"),RYr.forEach(t),_3o=r(t6e," \u2014 "),wI=n(t6e,"A",{href:!0});var BYr=s(wI);u3o=r(BYr,"Speech2Text2ForCausalLM"),BYr.forEach(t),b3o=r(t6e," (Speech2Text2 model)"),t6e.forEach(t),v3o=i(q),o1=n(q,"LI",{});var a6e=s(o1);yne=n(a6e,"STRONG",{});var PYr=s(yne);F3o=r(PYr,"transfo-xl"),PYr.forEach(t),T3o=r(a6e," \u2014 "),AI=n(a6e,"A",{href:!0});var $Yr=s(AI);M3o=r($Yr,"TransfoXLLMHeadModel"),$Yr.forEach(t),E3o=r(a6e," (Transformer-XL model)"),a6e.forEach(t),C3o=i(q),r1=n(q,"LI",{});var n6e=s(r1);Lne=n(n6e,"STRONG",{});var IYr=s(Lne);w3o=r(IYr,"trocr"),IYr.forEach(t),A3o=r(n6e," \u2014 "),yI=n(n6e,"A",{href:!0});var qYr=s(yI);y3o=r(qYr,"TrOCRForCausalLM"),qYr.forEach(t),L3o=r(n6e," (TrOCR model)"),n6e.forEach(t),x3o=i(q),t1=n(q,"LI",{});var s6e=s(t1);xne=n(s6e,"STRONG",{});var NYr=s(xne);k3o=r(NYr,"xglm"),NYr.forEach(t),S3o=r(s6e," \u2014 "),LI=n(s6e,"A",{href:!0});var jYr=s(LI);R3o=r(jYr,"XGLMForCausalLM"),jYr.forEach(t),B3o=r(s6e," (XGLM model)"),s6e.forEach(t),P3o=i(q),a1=n(q,"LI",{});var l6e=s(a1);kne=n(l6e,"STRONG",{});var DYr=s(kne);$3o=r(DYr,"xlm"),DYr.forEach(t),I3o=r(l6e," \u2014 "),xI=n(l6e,"A",{href:!0});var GYr=s(xI);q3o=r(GYr,"XLMWithLMHeadModel"),GYr.forEach(t),N3o=r(l6e," (XLM model)"),l6e.forEach(t),j3o=i(q),n1=n(q,"LI",{});var i6e=s(n1);Sne=n(i6e,"STRONG",{});var OYr=s(Sne);D3o=r(OYr,"xlm-prophetnet"),OYr.forEach(t),G3o=r(i6e," \u2014 "),kI=n(i6e,"A",{href:!0});var VYr=s(kI);O3o=r(VYr,"XLMProphetNetForCausalLM"),VYr.forEach(t),V3o=r(i6e," (XLMProphetNet model)"),i6e.forEach(t),X3o=i(q),s1=n(q,"LI",{});var d6e=s(s1);Rne=n(d6e,"STRONG",{});var XYr=s(Rne);z3o=r(XYr,"xlm-roberta"),XYr.forEach(t),Q3o=r(d6e," \u2014 "),SI=n(d6e,"A",{href:!0});var zYr=s(SI);W3o=r(zYr,"XLMRobertaForCausalLM"),zYr.forEach(t),H3o=r(d6e," (XLM-RoBERTa model)"),d6e.forEach(t),U3o=i(q),l1=n(q,"LI",{});var c6e=s(l1);Bne=n(c6e,"STRONG",{});var QYr=s(Bne);J3o=r(QYr,"xlm-roberta-xl"),QYr.forEach(t),Y3o=r(c6e," \u2014 "),RI=n(c6e,"A",{href:!0});var WYr=s(RI);K3o=r(WYr,"XLMRobertaXLForCausalLM"),WYr.forEach(t),Z3o=r(c6e," (XLM-RoBERTa-XL model)"),c6e.forEach(t),evo=i(q),i1=n(q,"LI",{});var f6e=s(i1);Pne=n(f6e,"STRONG",{});var HYr=s(Pne);ovo=r(HYr,"xlnet"),HYr.forEach(t),rvo=r(f6e," \u2014 "),BI=n(f6e,"A",{href:!0});var UYr=s(BI);tvo=r(UYr,"XLNetLMHeadModel"),UYr.forEach(t),avo=r(f6e," (XLNet model)"),f6e.forEach(t),q.forEach(t),nvo=i(Ot),d1=n(Ot,"P",{});var m6e=s(d1);svo=r(m6e,"The model is set in evaluation mode by default using "),$ne=n(m6e,"CODE",{});var JYr=s($ne);lvo=r(JYr,"model.eval()"),JYr.forEach(t),ivo=r(m6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ine=n(m6e,"CODE",{});var YYr=s(Ine);dvo=r(YYr,"model.train()"),YYr.forEach(t),m6e.forEach(t),cvo=i(Ot),qne=n(Ot,"P",{});var KYr=s(qne);fvo=r(KYr,"Examples:"),KYr.forEach(t),mvo=i(Ot),m(Sw.$$.fragment,Ot),Ot.forEach(t),Ys.forEach(t),iBe=i(c),sd=n(c,"H2",{class:!0});var u$e=s(sd);c1=n(u$e,"A",{id:!0,class:!0,href:!0});var ZYr=s(c1);Nne=n(ZYr,"SPAN",{});var eKr=s(Nne);m(Rw.$$.fragment,eKr),eKr.forEach(t),ZYr.forEach(t),gvo=i(u$e),jne=n(u$e,"SPAN",{});var oKr=s(jne);hvo=r(oKr,"AutoModelForMaskedLM"),oKr.forEach(t),u$e.forEach(t),dBe=i(c),Zo=n(c,"DIV",{class:!0});var Zs=s(Zo);m(Bw.$$.fragment,Zs),pvo=i(Zs),ld=n(Zs,"P",{});var RU=s(ld);_vo=r(RU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),PI=n(RU,"A",{href:!0});var rKr=s(PI);uvo=r(rKr,"from_pretrained()"),rKr.forEach(t),bvo=r(RU," class method or the "),$I=n(RU,"A",{href:!0});var tKr=s($I);vvo=r(tKr,"from_config()"),tKr.forEach(t),Fvo=r(RU,` class
method.`),RU.forEach(t),Tvo=i(Zs),Pw=n(Zs,"P",{});var b$e=s(Pw);Mvo=r(b$e,"This class cannot be instantiated directly using "),Dne=n(b$e,"CODE",{});var aKr=s(Dne);Evo=r(aKr,"__init__()"),aKr.forEach(t),Cvo=r(b$e," (throws an error)."),b$e.forEach(t),wvo=i(Zs),Wr=n(Zs,"DIV",{class:!0});var el=s(Wr);m($w.$$.fragment,el),Avo=i(el),Gne=n(el,"P",{});var nKr=s(Gne);yvo=r(nKr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),nKr.forEach(t),Lvo=i(el),id=n(el,"P",{});var BU=s(id);xvo=r(BU,`Note:
Loading a model from its configuration file does `),One=n(BU,"STRONG",{});var sKr=s(One);kvo=r(sKr,"not"),sKr.forEach(t),Svo=r(BU,` load the model weights. It only affects the
model\u2019s configuration. Use `),II=n(BU,"A",{href:!0});var lKr=s(II);Rvo=r(lKr,"from_pretrained()"),lKr.forEach(t),Bvo=r(BU," to load the model weights."),BU.forEach(t),Pvo=i(el),Vne=n(el,"P",{});var iKr=s(Vne);$vo=r(iKr,"Examples:"),iKr.forEach(t),Ivo=i(el),m(Iw.$$.fragment,el),el.forEach(t),qvo=i(Zs),De=n(Zs,"DIV",{class:!0});var Vt=s(De);m(qw.$$.fragment,Vt),Nvo=i(Vt),Xne=n(Vt,"P",{});var dKr=s(Xne);jvo=r(dKr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),dKr.forEach(t),Dvo=i(Vt),Wa=n(Vt,"P",{});var qE=s(Wa);Gvo=r(qE,"The model class to instantiate is selected based on the "),zne=n(qE,"CODE",{});var cKr=s(zne);Ovo=r(cKr,"model_type"),cKr.forEach(t),Vvo=r(qE,` property of the config object (either
passed as an argument or loaded from `),Qne=n(qE,"CODE",{});var fKr=s(Qne);Xvo=r(fKr,"pretrained_model_name_or_path"),fKr.forEach(t),zvo=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wne=n(qE,"CODE",{});var mKr=s(Wne);Qvo=r(mKr,"pretrained_model_name_or_path"),mKr.forEach(t),Wvo=r(qE,":"),qE.forEach(t),Hvo=i(Vt),I=n(Vt,"UL",{});var N=s(I);f1=n(N,"LI",{});var g6e=s(f1);Hne=n(g6e,"STRONG",{});var gKr=s(Hne);Uvo=r(gKr,"albert"),gKr.forEach(t),Jvo=r(g6e," \u2014 "),qI=n(g6e,"A",{href:!0});var hKr=s(qI);Yvo=r(hKr,"AlbertForMaskedLM"),hKr.forEach(t),Kvo=r(g6e," (ALBERT model)"),g6e.forEach(t),Zvo=i(N),m1=n(N,"LI",{});var h6e=s(m1);Une=n(h6e,"STRONG",{});var pKr=s(Une);eFo=r(pKr,"bart"),pKr.forEach(t),oFo=r(h6e," \u2014 "),NI=n(h6e,"A",{href:!0});var _Kr=s(NI);rFo=r(_Kr,"BartForConditionalGeneration"),_Kr.forEach(t),tFo=r(h6e," (BART model)"),h6e.forEach(t),aFo=i(N),g1=n(N,"LI",{});var p6e=s(g1);Jne=n(p6e,"STRONG",{});var uKr=s(Jne);nFo=r(uKr,"bert"),uKr.forEach(t),sFo=r(p6e," \u2014 "),jI=n(p6e,"A",{href:!0});var bKr=s(jI);lFo=r(bKr,"BertForMaskedLM"),bKr.forEach(t),iFo=r(p6e," (BERT model)"),p6e.forEach(t),dFo=i(N),h1=n(N,"LI",{});var _6e=s(h1);Yne=n(_6e,"STRONG",{});var vKr=s(Yne);cFo=r(vKr,"big_bird"),vKr.forEach(t),fFo=r(_6e," \u2014 "),DI=n(_6e,"A",{href:!0});var FKr=s(DI);mFo=r(FKr,"BigBirdForMaskedLM"),FKr.forEach(t),gFo=r(_6e," (BigBird model)"),_6e.forEach(t),hFo=i(N),p1=n(N,"LI",{});var u6e=s(p1);Kne=n(u6e,"STRONG",{});var TKr=s(Kne);pFo=r(TKr,"camembert"),TKr.forEach(t),_Fo=r(u6e," \u2014 "),GI=n(u6e,"A",{href:!0});var MKr=s(GI);uFo=r(MKr,"CamembertForMaskedLM"),MKr.forEach(t),bFo=r(u6e," (CamemBERT model)"),u6e.forEach(t),vFo=i(N),_1=n(N,"LI",{});var b6e=s(_1);Zne=n(b6e,"STRONG",{});var EKr=s(Zne);FFo=r(EKr,"convbert"),EKr.forEach(t),TFo=r(b6e," \u2014 "),OI=n(b6e,"A",{href:!0});var CKr=s(OI);MFo=r(CKr,"ConvBertForMaskedLM"),CKr.forEach(t),EFo=r(b6e," (ConvBERT model)"),b6e.forEach(t),CFo=i(N),u1=n(N,"LI",{});var v6e=s(u1);ese=n(v6e,"STRONG",{});var wKr=s(ese);wFo=r(wKr,"data2vec-text"),wKr.forEach(t),AFo=r(v6e," \u2014 "),VI=n(v6e,"A",{href:!0});var AKr=s(VI);yFo=r(AKr,"Data2VecTextForMaskedLM"),AKr.forEach(t),LFo=r(v6e," (Data2VecText model)"),v6e.forEach(t),xFo=i(N),b1=n(N,"LI",{});var F6e=s(b1);ose=n(F6e,"STRONG",{});var yKr=s(ose);kFo=r(yKr,"deberta"),yKr.forEach(t),SFo=r(F6e," \u2014 "),XI=n(F6e,"A",{href:!0});var LKr=s(XI);RFo=r(LKr,"DebertaForMaskedLM"),LKr.forEach(t),BFo=r(F6e," (DeBERTa model)"),F6e.forEach(t),PFo=i(N),v1=n(N,"LI",{});var T6e=s(v1);rse=n(T6e,"STRONG",{});var xKr=s(rse);$Fo=r(xKr,"deberta-v2"),xKr.forEach(t),IFo=r(T6e," \u2014 "),zI=n(T6e,"A",{href:!0});var kKr=s(zI);qFo=r(kKr,"DebertaV2ForMaskedLM"),kKr.forEach(t),NFo=r(T6e," (DeBERTa-v2 model)"),T6e.forEach(t),jFo=i(N),F1=n(N,"LI",{});var M6e=s(F1);tse=n(M6e,"STRONG",{});var SKr=s(tse);DFo=r(SKr,"distilbert"),SKr.forEach(t),GFo=r(M6e," \u2014 "),QI=n(M6e,"A",{href:!0});var RKr=s(QI);OFo=r(RKr,"DistilBertForMaskedLM"),RKr.forEach(t),VFo=r(M6e," (DistilBERT model)"),M6e.forEach(t),XFo=i(N),T1=n(N,"LI",{});var E6e=s(T1);ase=n(E6e,"STRONG",{});var BKr=s(ase);zFo=r(BKr,"electra"),BKr.forEach(t),QFo=r(E6e," \u2014 "),WI=n(E6e,"A",{href:!0});var PKr=s(WI);WFo=r(PKr,"ElectraForMaskedLM"),PKr.forEach(t),HFo=r(E6e," (ELECTRA model)"),E6e.forEach(t),UFo=i(N),M1=n(N,"LI",{});var C6e=s(M1);nse=n(C6e,"STRONG",{});var $Kr=s(nse);JFo=r($Kr,"flaubert"),$Kr.forEach(t),YFo=r(C6e," \u2014 "),HI=n(C6e,"A",{href:!0});var IKr=s(HI);KFo=r(IKr,"FlaubertWithLMHeadModel"),IKr.forEach(t),ZFo=r(C6e," (FlauBERT model)"),C6e.forEach(t),eTo=i(N),E1=n(N,"LI",{});var w6e=s(E1);sse=n(w6e,"STRONG",{});var qKr=s(sse);oTo=r(qKr,"fnet"),qKr.forEach(t),rTo=r(w6e," \u2014 "),UI=n(w6e,"A",{href:!0});var NKr=s(UI);tTo=r(NKr,"FNetForMaskedLM"),NKr.forEach(t),aTo=r(w6e," (FNet model)"),w6e.forEach(t),nTo=i(N),C1=n(N,"LI",{});var A6e=s(C1);lse=n(A6e,"STRONG",{});var jKr=s(lse);sTo=r(jKr,"funnel"),jKr.forEach(t),lTo=r(A6e," \u2014 "),JI=n(A6e,"A",{href:!0});var DKr=s(JI);iTo=r(DKr,"FunnelForMaskedLM"),DKr.forEach(t),dTo=r(A6e," (Funnel Transformer model)"),A6e.forEach(t),cTo=i(N),w1=n(N,"LI",{});var y6e=s(w1);ise=n(y6e,"STRONG",{});var GKr=s(ise);fTo=r(GKr,"ibert"),GKr.forEach(t),mTo=r(y6e," \u2014 "),YI=n(y6e,"A",{href:!0});var OKr=s(YI);gTo=r(OKr,"IBertForMaskedLM"),OKr.forEach(t),hTo=r(y6e," (I-BERT model)"),y6e.forEach(t),pTo=i(N),A1=n(N,"LI",{});var L6e=s(A1);dse=n(L6e,"STRONG",{});var VKr=s(dse);_To=r(VKr,"layoutlm"),VKr.forEach(t),uTo=r(L6e," \u2014 "),KI=n(L6e,"A",{href:!0});var XKr=s(KI);bTo=r(XKr,"LayoutLMForMaskedLM"),XKr.forEach(t),vTo=r(L6e," (LayoutLM model)"),L6e.forEach(t),FTo=i(N),y1=n(N,"LI",{});var x6e=s(y1);cse=n(x6e,"STRONG",{});var zKr=s(cse);TTo=r(zKr,"longformer"),zKr.forEach(t),MTo=r(x6e," \u2014 "),ZI=n(x6e,"A",{href:!0});var QKr=s(ZI);ETo=r(QKr,"LongformerForMaskedLM"),QKr.forEach(t),CTo=r(x6e," (Longformer model)"),x6e.forEach(t),wTo=i(N),L1=n(N,"LI",{});var k6e=s(L1);fse=n(k6e,"STRONG",{});var WKr=s(fse);ATo=r(WKr,"mbart"),WKr.forEach(t),yTo=r(k6e," \u2014 "),eq=n(k6e,"A",{href:!0});var HKr=s(eq);LTo=r(HKr,"MBartForConditionalGeneration"),HKr.forEach(t),xTo=r(k6e," (mBART model)"),k6e.forEach(t),kTo=i(N),x1=n(N,"LI",{});var S6e=s(x1);mse=n(S6e,"STRONG",{});var UKr=s(mse);STo=r(UKr,"megatron-bert"),UKr.forEach(t),RTo=r(S6e," \u2014 "),oq=n(S6e,"A",{href:!0});var JKr=s(oq);BTo=r(JKr,"MegatronBertForMaskedLM"),JKr.forEach(t),PTo=r(S6e," (MegatronBert model)"),S6e.forEach(t),$To=i(N),k1=n(N,"LI",{});var R6e=s(k1);gse=n(R6e,"STRONG",{});var YKr=s(gse);ITo=r(YKr,"mobilebert"),YKr.forEach(t),qTo=r(R6e," \u2014 "),rq=n(R6e,"A",{href:!0});var KKr=s(rq);NTo=r(KKr,"MobileBertForMaskedLM"),KKr.forEach(t),jTo=r(R6e," (MobileBERT model)"),R6e.forEach(t),DTo=i(N),S1=n(N,"LI",{});var B6e=s(S1);hse=n(B6e,"STRONG",{});var ZKr=s(hse);GTo=r(ZKr,"mpnet"),ZKr.forEach(t),OTo=r(B6e," \u2014 "),tq=n(B6e,"A",{href:!0});var eZr=s(tq);VTo=r(eZr,"MPNetForMaskedLM"),eZr.forEach(t),XTo=r(B6e," (MPNet model)"),B6e.forEach(t),zTo=i(N),R1=n(N,"LI",{});var P6e=s(R1);pse=n(P6e,"STRONG",{});var oZr=s(pse);QTo=r(oZr,"nystromformer"),oZr.forEach(t),WTo=r(P6e," \u2014 "),aq=n(P6e,"A",{href:!0});var rZr=s(aq);HTo=r(rZr,"NystromformerForMaskedLM"),rZr.forEach(t),UTo=r(P6e," (Nystromformer model)"),P6e.forEach(t),JTo=i(N),B1=n(N,"LI",{});var $6e=s(B1);_se=n($6e,"STRONG",{});var tZr=s(_se);YTo=r(tZr,"perceiver"),tZr.forEach(t),KTo=r($6e," \u2014 "),nq=n($6e,"A",{href:!0});var aZr=s(nq);ZTo=r(aZr,"PerceiverForMaskedLM"),aZr.forEach(t),eMo=r($6e," (Perceiver model)"),$6e.forEach(t),oMo=i(N),P1=n(N,"LI",{});var I6e=s(P1);use=n(I6e,"STRONG",{});var nZr=s(use);rMo=r(nZr,"qdqbert"),nZr.forEach(t),tMo=r(I6e," \u2014 "),sq=n(I6e,"A",{href:!0});var sZr=s(sq);aMo=r(sZr,"QDQBertForMaskedLM"),sZr.forEach(t),nMo=r(I6e," (QDQBert model)"),I6e.forEach(t),sMo=i(N),$1=n(N,"LI",{});var q6e=s($1);bse=n(q6e,"STRONG",{});var lZr=s(bse);lMo=r(lZr,"reformer"),lZr.forEach(t),iMo=r(q6e," \u2014 "),lq=n(q6e,"A",{href:!0});var iZr=s(lq);dMo=r(iZr,"ReformerForMaskedLM"),iZr.forEach(t),cMo=r(q6e," (Reformer model)"),q6e.forEach(t),fMo=i(N),I1=n(N,"LI",{});var N6e=s(I1);vse=n(N6e,"STRONG",{});var dZr=s(vse);mMo=r(dZr,"rembert"),dZr.forEach(t),gMo=r(N6e," \u2014 "),iq=n(N6e,"A",{href:!0});var cZr=s(iq);hMo=r(cZr,"RemBertForMaskedLM"),cZr.forEach(t),pMo=r(N6e," (RemBERT model)"),N6e.forEach(t),_Mo=i(N),q1=n(N,"LI",{});var j6e=s(q1);Fse=n(j6e,"STRONG",{});var fZr=s(Fse);uMo=r(fZr,"roberta"),fZr.forEach(t),bMo=r(j6e," \u2014 "),dq=n(j6e,"A",{href:!0});var mZr=s(dq);vMo=r(mZr,"RobertaForMaskedLM"),mZr.forEach(t),FMo=r(j6e," (RoBERTa model)"),j6e.forEach(t),TMo=i(N),N1=n(N,"LI",{});var D6e=s(N1);Tse=n(D6e,"STRONG",{});var gZr=s(Tse);MMo=r(gZr,"roformer"),gZr.forEach(t),EMo=r(D6e," \u2014 "),cq=n(D6e,"A",{href:!0});var hZr=s(cq);CMo=r(hZr,"RoFormerForMaskedLM"),hZr.forEach(t),wMo=r(D6e," (RoFormer model)"),D6e.forEach(t),AMo=i(N),j1=n(N,"LI",{});var G6e=s(j1);Mse=n(G6e,"STRONG",{});var pZr=s(Mse);yMo=r(pZr,"squeezebert"),pZr.forEach(t),LMo=r(G6e," \u2014 "),fq=n(G6e,"A",{href:!0});var _Zr=s(fq);xMo=r(_Zr,"SqueezeBertForMaskedLM"),_Zr.forEach(t),kMo=r(G6e," (SqueezeBERT model)"),G6e.forEach(t),SMo=i(N),D1=n(N,"LI",{});var O6e=s(D1);Ese=n(O6e,"STRONG",{});var uZr=s(Ese);RMo=r(uZr,"tapas"),uZr.forEach(t),BMo=r(O6e," \u2014 "),mq=n(O6e,"A",{href:!0});var bZr=s(mq);PMo=r(bZr,"TapasForMaskedLM"),bZr.forEach(t),$Mo=r(O6e," (TAPAS model)"),O6e.forEach(t),IMo=i(N),G1=n(N,"LI",{});var V6e=s(G1);Cse=n(V6e,"STRONG",{});var vZr=s(Cse);qMo=r(vZr,"wav2vec2"),vZr.forEach(t),NMo=r(V6e," \u2014 "),wse=n(V6e,"CODE",{});var FZr=s(wse);jMo=r(FZr,"Wav2Vec2ForMaskedLM"),FZr.forEach(t),DMo=r(V6e," (Wav2Vec2 model)"),V6e.forEach(t),GMo=i(N),O1=n(N,"LI",{});var X6e=s(O1);Ase=n(X6e,"STRONG",{});var TZr=s(Ase);OMo=r(TZr,"xlm"),TZr.forEach(t),VMo=r(X6e," \u2014 "),gq=n(X6e,"A",{href:!0});var MZr=s(gq);XMo=r(MZr,"XLMWithLMHeadModel"),MZr.forEach(t),zMo=r(X6e," (XLM model)"),X6e.forEach(t),QMo=i(N),V1=n(N,"LI",{});var z6e=s(V1);yse=n(z6e,"STRONG",{});var EZr=s(yse);WMo=r(EZr,"xlm-roberta"),EZr.forEach(t),HMo=r(z6e," \u2014 "),hq=n(z6e,"A",{href:!0});var CZr=s(hq);UMo=r(CZr,"XLMRobertaForMaskedLM"),CZr.forEach(t),JMo=r(z6e," (XLM-RoBERTa model)"),z6e.forEach(t),YMo=i(N),X1=n(N,"LI",{});var Q6e=s(X1);Lse=n(Q6e,"STRONG",{});var wZr=s(Lse);KMo=r(wZr,"xlm-roberta-xl"),wZr.forEach(t),ZMo=r(Q6e," \u2014 "),pq=n(Q6e,"A",{href:!0});var AZr=s(pq);e4o=r(AZr,"XLMRobertaXLForMaskedLM"),AZr.forEach(t),o4o=r(Q6e," (XLM-RoBERTa-XL model)"),Q6e.forEach(t),r4o=i(N),z1=n(N,"LI",{});var W6e=s(z1);xse=n(W6e,"STRONG",{});var yZr=s(xse);t4o=r(yZr,"yoso"),yZr.forEach(t),a4o=r(W6e," \u2014 "),_q=n(W6e,"A",{href:!0});var LZr=s(_q);n4o=r(LZr,"YosoForMaskedLM"),LZr.forEach(t),s4o=r(W6e," (YOSO model)"),W6e.forEach(t),N.forEach(t),l4o=i(Vt),Q1=n(Vt,"P",{});var H6e=s(Q1);i4o=r(H6e,"The model is set in evaluation mode by default using "),kse=n(H6e,"CODE",{});var xZr=s(kse);d4o=r(xZr,"model.eval()"),xZr.forEach(t),c4o=r(H6e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sse=n(H6e,"CODE",{});var kZr=s(Sse);f4o=r(kZr,"model.train()"),kZr.forEach(t),H6e.forEach(t),m4o=i(Vt),Rse=n(Vt,"P",{});var SZr=s(Rse);g4o=r(SZr,"Examples:"),SZr.forEach(t),h4o=i(Vt),m(Nw.$$.fragment,Vt),Vt.forEach(t),Zs.forEach(t),cBe=i(c),dd=n(c,"H2",{class:!0});var v$e=s(dd);W1=n(v$e,"A",{id:!0,class:!0,href:!0});var RZr=s(W1);Bse=n(RZr,"SPAN",{});var BZr=s(Bse);m(jw.$$.fragment,BZr),BZr.forEach(t),RZr.forEach(t),p4o=i(v$e),Pse=n(v$e,"SPAN",{});var PZr=s(Pse);_4o=r(PZr,"AutoModelForSeq2SeqLM"),PZr.forEach(t),v$e.forEach(t),fBe=i(c),er=n(c,"DIV",{class:!0});var ol=s(er);m(Dw.$$.fragment,ol),u4o=i(ol),cd=n(ol,"P",{});var PU=s(cd);b4o=r(PU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),uq=n(PU,"A",{href:!0});var $Zr=s(uq);v4o=r($Zr,"from_pretrained()"),$Zr.forEach(t),F4o=r(PU," class method or the "),bq=n(PU,"A",{href:!0});var IZr=s(bq);T4o=r(IZr,"from_config()"),IZr.forEach(t),M4o=r(PU,` class
method.`),PU.forEach(t),E4o=i(ol),Gw=n(ol,"P",{});var F$e=s(Gw);C4o=r(F$e,"This class cannot be instantiated directly using "),$se=n(F$e,"CODE",{});var qZr=s($se);w4o=r(qZr,"__init__()"),qZr.forEach(t),A4o=r(F$e," (throws an error)."),F$e.forEach(t),y4o=i(ol),Hr=n(ol,"DIV",{class:!0});var rl=s(Hr);m(Ow.$$.fragment,rl),L4o=i(rl),Ise=n(rl,"P",{});var NZr=s(Ise);x4o=r(NZr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),NZr.forEach(t),k4o=i(rl),fd=n(rl,"P",{});var $U=s(fd);S4o=r($U,`Note:
Loading a model from its configuration file does `),qse=n($U,"STRONG",{});var jZr=s(qse);R4o=r(jZr,"not"),jZr.forEach(t),B4o=r($U,` load the model weights. It only affects the
model\u2019s configuration. Use `),vq=n($U,"A",{href:!0});var DZr=s(vq);P4o=r(DZr,"from_pretrained()"),DZr.forEach(t),$4o=r($U," to load the model weights."),$U.forEach(t),I4o=i(rl),Nse=n(rl,"P",{});var GZr=s(Nse);q4o=r(GZr,"Examples:"),GZr.forEach(t),N4o=i(rl),m(Vw.$$.fragment,rl),rl.forEach(t),j4o=i(ol),Ge=n(ol,"DIV",{class:!0});var Xt=s(Ge);m(Xw.$$.fragment,Xt),D4o=i(Xt),jse=n(Xt,"P",{});var OZr=s(jse);G4o=r(OZr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),OZr.forEach(t),O4o=i(Xt),Ha=n(Xt,"P",{});var NE=s(Ha);V4o=r(NE,"The model class to instantiate is selected based on the "),Dse=n(NE,"CODE",{});var VZr=s(Dse);X4o=r(VZr,"model_type"),VZr.forEach(t),z4o=r(NE,` property of the config object (either
passed as an argument or loaded from `),Gse=n(NE,"CODE",{});var XZr=s(Gse);Q4o=r(XZr,"pretrained_model_name_or_path"),XZr.forEach(t),W4o=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ose=n(NE,"CODE",{});var zZr=s(Ose);H4o=r(zZr,"pretrained_model_name_or_path"),zZr.forEach(t),U4o=r(NE,":"),NE.forEach(t),J4o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);H1=n(le,"LI",{});var U6e=s(H1);Vse=n(U6e,"STRONG",{});var QZr=s(Vse);Y4o=r(QZr,"bart"),QZr.forEach(t),K4o=r(U6e," \u2014 "),Fq=n(U6e,"A",{href:!0});var WZr=s(Fq);Z4o=r(WZr,"BartForConditionalGeneration"),WZr.forEach(t),eEo=r(U6e," (BART model)"),U6e.forEach(t),oEo=i(le),U1=n(le,"LI",{});var J6e=s(U1);Xse=n(J6e,"STRONG",{});var HZr=s(Xse);rEo=r(HZr,"bigbird_pegasus"),HZr.forEach(t),tEo=r(J6e," \u2014 "),Tq=n(J6e,"A",{href:!0});var UZr=s(Tq);aEo=r(UZr,"BigBirdPegasusForConditionalGeneration"),UZr.forEach(t),nEo=r(J6e," (BigBirdPegasus model)"),J6e.forEach(t),sEo=i(le),J1=n(le,"LI",{});var Y6e=s(J1);zse=n(Y6e,"STRONG",{});var JZr=s(zse);lEo=r(JZr,"blenderbot"),JZr.forEach(t),iEo=r(Y6e," \u2014 "),Mq=n(Y6e,"A",{href:!0});var YZr=s(Mq);dEo=r(YZr,"BlenderbotForConditionalGeneration"),YZr.forEach(t),cEo=r(Y6e," (Blenderbot model)"),Y6e.forEach(t),fEo=i(le),Y1=n(le,"LI",{});var K6e=s(Y1);Qse=n(K6e,"STRONG",{});var KZr=s(Qse);mEo=r(KZr,"blenderbot-small"),KZr.forEach(t),gEo=r(K6e," \u2014 "),Eq=n(K6e,"A",{href:!0});var ZZr=s(Eq);hEo=r(ZZr,"BlenderbotSmallForConditionalGeneration"),ZZr.forEach(t),pEo=r(K6e," (BlenderbotSmall model)"),K6e.forEach(t),_Eo=i(le),K1=n(le,"LI",{});var Z6e=s(K1);Wse=n(Z6e,"STRONG",{});var eet=s(Wse);uEo=r(eet,"encoder-decoder"),eet.forEach(t),bEo=r(Z6e," \u2014 "),Cq=n(Z6e,"A",{href:!0});var oet=s(Cq);vEo=r(oet,"EncoderDecoderModel"),oet.forEach(t),FEo=r(Z6e," (Encoder decoder model)"),Z6e.forEach(t),TEo=i(le),Z1=n(le,"LI",{});var eAe=s(Z1);Hse=n(eAe,"STRONG",{});var ret=s(Hse);MEo=r(ret,"fsmt"),ret.forEach(t),EEo=r(eAe," \u2014 "),wq=n(eAe,"A",{href:!0});var tet=s(wq);CEo=r(tet,"FSMTForConditionalGeneration"),tet.forEach(t),wEo=r(eAe," (FairSeq Machine-Translation model)"),eAe.forEach(t),AEo=i(le),e7=n(le,"LI",{});var oAe=s(e7);Use=n(oAe,"STRONG",{});var aet=s(Use);yEo=r(aet,"led"),aet.forEach(t),LEo=r(oAe," \u2014 "),Aq=n(oAe,"A",{href:!0});var net=s(Aq);xEo=r(net,"LEDForConditionalGeneration"),net.forEach(t),kEo=r(oAe," (LED model)"),oAe.forEach(t),SEo=i(le),o7=n(le,"LI",{});var rAe=s(o7);Jse=n(rAe,"STRONG",{});var set=s(Jse);REo=r(set,"m2m_100"),set.forEach(t),BEo=r(rAe," \u2014 "),yq=n(rAe,"A",{href:!0});var iet=s(yq);PEo=r(iet,"M2M100ForConditionalGeneration"),iet.forEach(t),$Eo=r(rAe," (M2M100 model)"),rAe.forEach(t),IEo=i(le),r7=n(le,"LI",{});var tAe=s(r7);Yse=n(tAe,"STRONG",{});var det=s(Yse);qEo=r(det,"marian"),det.forEach(t),NEo=r(tAe," \u2014 "),Lq=n(tAe,"A",{href:!0});var cet=s(Lq);jEo=r(cet,"MarianMTModel"),cet.forEach(t),DEo=r(tAe," (Marian model)"),tAe.forEach(t),GEo=i(le),t7=n(le,"LI",{});var aAe=s(t7);Kse=n(aAe,"STRONG",{});var fet=s(Kse);OEo=r(fet,"mbart"),fet.forEach(t),VEo=r(aAe," \u2014 "),xq=n(aAe,"A",{href:!0});var met=s(xq);XEo=r(met,"MBartForConditionalGeneration"),met.forEach(t),zEo=r(aAe," (mBART model)"),aAe.forEach(t),QEo=i(le),a7=n(le,"LI",{});var nAe=s(a7);Zse=n(nAe,"STRONG",{});var get=s(Zse);WEo=r(get,"mt5"),get.forEach(t),HEo=r(nAe," \u2014 "),kq=n(nAe,"A",{href:!0});var het=s(kq);UEo=r(het,"MT5ForConditionalGeneration"),het.forEach(t),JEo=r(nAe," (mT5 model)"),nAe.forEach(t),YEo=i(le),n7=n(le,"LI",{});var sAe=s(n7);ele=n(sAe,"STRONG",{});var pet=s(ele);KEo=r(pet,"pegasus"),pet.forEach(t),ZEo=r(sAe," \u2014 "),Sq=n(sAe,"A",{href:!0});var _et=s(Sq);eCo=r(_et,"PegasusForConditionalGeneration"),_et.forEach(t),oCo=r(sAe," (Pegasus model)"),sAe.forEach(t),rCo=i(le),s7=n(le,"LI",{});var lAe=s(s7);ole=n(lAe,"STRONG",{});var uet=s(ole);tCo=r(uet,"plbart"),uet.forEach(t),aCo=r(lAe," \u2014 "),Rq=n(lAe,"A",{href:!0});var bet=s(Rq);nCo=r(bet,"PLBartForConditionalGeneration"),bet.forEach(t),sCo=r(lAe," (PLBart model)"),lAe.forEach(t),lCo=i(le),l7=n(le,"LI",{});var iAe=s(l7);rle=n(iAe,"STRONG",{});var vet=s(rle);iCo=r(vet,"prophetnet"),vet.forEach(t),dCo=r(iAe," \u2014 "),Bq=n(iAe,"A",{href:!0});var Fet=s(Bq);cCo=r(Fet,"ProphetNetForConditionalGeneration"),Fet.forEach(t),fCo=r(iAe," (ProphetNet model)"),iAe.forEach(t),mCo=i(le),i7=n(le,"LI",{});var dAe=s(i7);tle=n(dAe,"STRONG",{});var Tet=s(tle);gCo=r(Tet,"t5"),Tet.forEach(t),hCo=r(dAe," \u2014 "),Pq=n(dAe,"A",{href:!0});var Met=s(Pq);pCo=r(Met,"T5ForConditionalGeneration"),Met.forEach(t),_Co=r(dAe," (T5 model)"),dAe.forEach(t),uCo=i(le),d7=n(le,"LI",{});var cAe=s(d7);ale=n(cAe,"STRONG",{});var Eet=s(ale);bCo=r(Eet,"tapex"),Eet.forEach(t),vCo=r(cAe," \u2014 "),$q=n(cAe,"A",{href:!0});var Cet=s($q);FCo=r(Cet,"BartForConditionalGeneration"),Cet.forEach(t),TCo=r(cAe," (TAPEX model)"),cAe.forEach(t),MCo=i(le),c7=n(le,"LI",{});var fAe=s(c7);nle=n(fAe,"STRONG",{});var wet=s(nle);ECo=r(wet,"xlm-prophetnet"),wet.forEach(t),CCo=r(fAe," \u2014 "),Iq=n(fAe,"A",{href:!0});var Aet=s(Iq);wCo=r(Aet,"XLMProphetNetForConditionalGeneration"),Aet.forEach(t),ACo=r(fAe," (XLMProphetNet model)"),fAe.forEach(t),le.forEach(t),yCo=i(Xt),f7=n(Xt,"P",{});var mAe=s(f7);LCo=r(mAe,"The model is set in evaluation mode by default using "),sle=n(mAe,"CODE",{});var yet=s(sle);xCo=r(yet,"model.eval()"),yet.forEach(t),kCo=r(mAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lle=n(mAe,"CODE",{});var Let=s(lle);SCo=r(Let,"model.train()"),Let.forEach(t),mAe.forEach(t),RCo=i(Xt),ile=n(Xt,"P",{});var xet=s(ile);BCo=r(xet,"Examples:"),xet.forEach(t),PCo=i(Xt),m(zw.$$.fragment,Xt),Xt.forEach(t),ol.forEach(t),mBe=i(c),md=n(c,"H2",{class:!0});var T$e=s(md);m7=n(T$e,"A",{id:!0,class:!0,href:!0});var ket=s(m7);dle=n(ket,"SPAN",{});var Set=s(dle);m(Qw.$$.fragment,Set),Set.forEach(t),ket.forEach(t),$Co=i(T$e),cle=n(T$e,"SPAN",{});var Ret=s(cle);ICo=r(Ret,"AutoModelForSequenceClassification"),Ret.forEach(t),T$e.forEach(t),gBe=i(c),or=n(c,"DIV",{class:!0});var tl=s(or);m(Ww.$$.fragment,tl),qCo=i(tl),gd=n(tl,"P",{});var IU=s(gd);NCo=r(IU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qq=n(IU,"A",{href:!0});var Bet=s(qq);jCo=r(Bet,"from_pretrained()"),Bet.forEach(t),DCo=r(IU," class method or the "),Nq=n(IU,"A",{href:!0});var Pet=s(Nq);GCo=r(Pet,"from_config()"),Pet.forEach(t),OCo=r(IU,` class
method.`),IU.forEach(t),VCo=i(tl),Hw=n(tl,"P",{});var M$e=s(Hw);XCo=r(M$e,"This class cannot be instantiated directly using "),fle=n(M$e,"CODE",{});var $et=s(fle);zCo=r($et,"__init__()"),$et.forEach(t),QCo=r(M$e," (throws an error)."),M$e.forEach(t),WCo=i(tl),Ur=n(tl,"DIV",{class:!0});var al=s(Ur);m(Uw.$$.fragment,al),HCo=i(al),mle=n(al,"P",{});var Iet=s(mle);UCo=r(Iet,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Iet.forEach(t),JCo=i(al),hd=n(al,"P",{});var qU=s(hd);YCo=r(qU,`Note:
Loading a model from its configuration file does `),gle=n(qU,"STRONG",{});var qet=s(gle);KCo=r(qet,"not"),qet.forEach(t),ZCo=r(qU,` load the model weights. It only affects the
model\u2019s configuration. Use `),jq=n(qU,"A",{href:!0});var Net=s(jq);ewo=r(Net,"from_pretrained()"),Net.forEach(t),owo=r(qU," to load the model weights."),qU.forEach(t),rwo=i(al),hle=n(al,"P",{});var jet=s(hle);two=r(jet,"Examples:"),jet.forEach(t),awo=i(al),m(Jw.$$.fragment,al),al.forEach(t),nwo=i(tl),Oe=n(tl,"DIV",{class:!0});var zt=s(Oe);m(Yw.$$.fragment,zt),swo=i(zt),ple=n(zt,"P",{});var Det=s(ple);lwo=r(Det,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Det.forEach(t),iwo=i(zt),Ua=n(zt,"P",{});var jE=s(Ua);dwo=r(jE,"The model class to instantiate is selected based on the "),_le=n(jE,"CODE",{});var Get=s(_le);cwo=r(Get,"model_type"),Get.forEach(t),fwo=r(jE,` property of the config object (either
passed as an argument or loaded from `),ule=n(jE,"CODE",{});var Oet=s(ule);mwo=r(Oet,"pretrained_model_name_or_path"),Oet.forEach(t),gwo=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ble=n(jE,"CODE",{});var Vet=s(ble);hwo=r(Vet,"pretrained_model_name_or_path"),Vet.forEach(t),pwo=r(jE,":"),jE.forEach(t),_wo=i(zt),y=n(zt,"UL",{});var L=s(y);g7=n(L,"LI",{});var gAe=s(g7);vle=n(gAe,"STRONG",{});var Xet=s(vle);uwo=r(Xet,"albert"),Xet.forEach(t),bwo=r(gAe," \u2014 "),Dq=n(gAe,"A",{href:!0});var zet=s(Dq);vwo=r(zet,"AlbertForSequenceClassification"),zet.forEach(t),Fwo=r(gAe," (ALBERT model)"),gAe.forEach(t),Two=i(L),h7=n(L,"LI",{});var hAe=s(h7);Fle=n(hAe,"STRONG",{});var Qet=s(Fle);Mwo=r(Qet,"bart"),Qet.forEach(t),Ewo=r(hAe," \u2014 "),Gq=n(hAe,"A",{href:!0});var Wet=s(Gq);Cwo=r(Wet,"BartForSequenceClassification"),Wet.forEach(t),wwo=r(hAe," (BART model)"),hAe.forEach(t),Awo=i(L),p7=n(L,"LI",{});var pAe=s(p7);Tle=n(pAe,"STRONG",{});var Het=s(Tle);ywo=r(Het,"bert"),Het.forEach(t),Lwo=r(pAe," \u2014 "),Oq=n(pAe,"A",{href:!0});var Uet=s(Oq);xwo=r(Uet,"BertForSequenceClassification"),Uet.forEach(t),kwo=r(pAe," (BERT model)"),pAe.forEach(t),Swo=i(L),_7=n(L,"LI",{});var _Ae=s(_7);Mle=n(_Ae,"STRONG",{});var Jet=s(Mle);Rwo=r(Jet,"big_bird"),Jet.forEach(t),Bwo=r(_Ae," \u2014 "),Vq=n(_Ae,"A",{href:!0});var Yet=s(Vq);Pwo=r(Yet,"BigBirdForSequenceClassification"),Yet.forEach(t),$wo=r(_Ae," (BigBird model)"),_Ae.forEach(t),Iwo=i(L),u7=n(L,"LI",{});var uAe=s(u7);Ele=n(uAe,"STRONG",{});var Ket=s(Ele);qwo=r(Ket,"bigbird_pegasus"),Ket.forEach(t),Nwo=r(uAe," \u2014 "),Xq=n(uAe,"A",{href:!0});var Zet=s(Xq);jwo=r(Zet,"BigBirdPegasusForSequenceClassification"),Zet.forEach(t),Dwo=r(uAe," (BigBirdPegasus model)"),uAe.forEach(t),Gwo=i(L),b7=n(L,"LI",{});var bAe=s(b7);Cle=n(bAe,"STRONG",{});var eot=s(Cle);Owo=r(eot,"camembert"),eot.forEach(t),Vwo=r(bAe," \u2014 "),zq=n(bAe,"A",{href:!0});var oot=s(zq);Xwo=r(oot,"CamembertForSequenceClassification"),oot.forEach(t),zwo=r(bAe," (CamemBERT model)"),bAe.forEach(t),Qwo=i(L),v7=n(L,"LI",{});var vAe=s(v7);wle=n(vAe,"STRONG",{});var rot=s(wle);Wwo=r(rot,"canine"),rot.forEach(t),Hwo=r(vAe," \u2014 "),Qq=n(vAe,"A",{href:!0});var tot=s(Qq);Uwo=r(tot,"CanineForSequenceClassification"),tot.forEach(t),Jwo=r(vAe," (Canine model)"),vAe.forEach(t),Ywo=i(L),F7=n(L,"LI",{});var FAe=s(F7);Ale=n(FAe,"STRONG",{});var aot=s(Ale);Kwo=r(aot,"convbert"),aot.forEach(t),Zwo=r(FAe," \u2014 "),Wq=n(FAe,"A",{href:!0});var not=s(Wq);e6o=r(not,"ConvBertForSequenceClassification"),not.forEach(t),o6o=r(FAe," (ConvBERT model)"),FAe.forEach(t),r6o=i(L),T7=n(L,"LI",{});var TAe=s(T7);yle=n(TAe,"STRONG",{});var sot=s(yle);t6o=r(sot,"ctrl"),sot.forEach(t),a6o=r(TAe," \u2014 "),Hq=n(TAe,"A",{href:!0});var lot=s(Hq);n6o=r(lot,"CTRLForSequenceClassification"),lot.forEach(t),s6o=r(TAe," (CTRL model)"),TAe.forEach(t),l6o=i(L),M7=n(L,"LI",{});var MAe=s(M7);Lle=n(MAe,"STRONG",{});var iot=s(Lle);i6o=r(iot,"data2vec-text"),iot.forEach(t),d6o=r(MAe," \u2014 "),Uq=n(MAe,"A",{href:!0});var dot=s(Uq);c6o=r(dot,"Data2VecTextForSequenceClassification"),dot.forEach(t),f6o=r(MAe," (Data2VecText model)"),MAe.forEach(t),m6o=i(L),E7=n(L,"LI",{});var EAe=s(E7);xle=n(EAe,"STRONG",{});var cot=s(xle);g6o=r(cot,"deberta"),cot.forEach(t),h6o=r(EAe," \u2014 "),Jq=n(EAe,"A",{href:!0});var fot=s(Jq);p6o=r(fot,"DebertaForSequenceClassification"),fot.forEach(t),_6o=r(EAe," (DeBERTa model)"),EAe.forEach(t),u6o=i(L),C7=n(L,"LI",{});var CAe=s(C7);kle=n(CAe,"STRONG",{});var mot=s(kle);b6o=r(mot,"deberta-v2"),mot.forEach(t),v6o=r(CAe," \u2014 "),Yq=n(CAe,"A",{href:!0});var got=s(Yq);F6o=r(got,"DebertaV2ForSequenceClassification"),got.forEach(t),T6o=r(CAe," (DeBERTa-v2 model)"),CAe.forEach(t),M6o=i(L),w7=n(L,"LI",{});var wAe=s(w7);Sle=n(wAe,"STRONG",{});var hot=s(Sle);E6o=r(hot,"distilbert"),hot.forEach(t),C6o=r(wAe," \u2014 "),Kq=n(wAe,"A",{href:!0});var pot=s(Kq);w6o=r(pot,"DistilBertForSequenceClassification"),pot.forEach(t),A6o=r(wAe," (DistilBERT model)"),wAe.forEach(t),y6o=i(L),A7=n(L,"LI",{});var AAe=s(A7);Rle=n(AAe,"STRONG",{});var _ot=s(Rle);L6o=r(_ot,"electra"),_ot.forEach(t),x6o=r(AAe," \u2014 "),Zq=n(AAe,"A",{href:!0});var uot=s(Zq);k6o=r(uot,"ElectraForSequenceClassification"),uot.forEach(t),S6o=r(AAe," (ELECTRA model)"),AAe.forEach(t),R6o=i(L),y7=n(L,"LI",{});var yAe=s(y7);Ble=n(yAe,"STRONG",{});var bot=s(Ble);B6o=r(bot,"flaubert"),bot.forEach(t),P6o=r(yAe," \u2014 "),eN=n(yAe,"A",{href:!0});var vot=s(eN);$6o=r(vot,"FlaubertForSequenceClassification"),vot.forEach(t),I6o=r(yAe," (FlauBERT model)"),yAe.forEach(t),q6o=i(L),L7=n(L,"LI",{});var LAe=s(L7);Ple=n(LAe,"STRONG",{});var Fot=s(Ple);N6o=r(Fot,"fnet"),Fot.forEach(t),j6o=r(LAe," \u2014 "),oN=n(LAe,"A",{href:!0});var Tot=s(oN);D6o=r(Tot,"FNetForSequenceClassification"),Tot.forEach(t),G6o=r(LAe," (FNet model)"),LAe.forEach(t),O6o=i(L),x7=n(L,"LI",{});var xAe=s(x7);$le=n(xAe,"STRONG",{});var Mot=s($le);V6o=r(Mot,"funnel"),Mot.forEach(t),X6o=r(xAe," \u2014 "),rN=n(xAe,"A",{href:!0});var Eot=s(rN);z6o=r(Eot,"FunnelForSequenceClassification"),Eot.forEach(t),Q6o=r(xAe," (Funnel Transformer model)"),xAe.forEach(t),W6o=i(L),k7=n(L,"LI",{});var kAe=s(k7);Ile=n(kAe,"STRONG",{});var Cot=s(Ile);H6o=r(Cot,"gpt2"),Cot.forEach(t),U6o=r(kAe," \u2014 "),tN=n(kAe,"A",{href:!0});var wot=s(tN);J6o=r(wot,"GPT2ForSequenceClassification"),wot.forEach(t),Y6o=r(kAe," (OpenAI GPT-2 model)"),kAe.forEach(t),K6o=i(L),S7=n(L,"LI",{});var SAe=s(S7);qle=n(SAe,"STRONG",{});var Aot=s(qle);Z6o=r(Aot,"gpt_neo"),Aot.forEach(t),eAo=r(SAe," \u2014 "),aN=n(SAe,"A",{href:!0});var yot=s(aN);oAo=r(yot,"GPTNeoForSequenceClassification"),yot.forEach(t),rAo=r(SAe," (GPT Neo model)"),SAe.forEach(t),tAo=i(L),R7=n(L,"LI",{});var RAe=s(R7);Nle=n(RAe,"STRONG",{});var Lot=s(Nle);aAo=r(Lot,"gptj"),Lot.forEach(t),nAo=r(RAe," \u2014 "),nN=n(RAe,"A",{href:!0});var xot=s(nN);sAo=r(xot,"GPTJForSequenceClassification"),xot.forEach(t),lAo=r(RAe," (GPT-J model)"),RAe.forEach(t),iAo=i(L),B7=n(L,"LI",{});var BAe=s(B7);jle=n(BAe,"STRONG",{});var kot=s(jle);dAo=r(kot,"ibert"),kot.forEach(t),cAo=r(BAe," \u2014 "),sN=n(BAe,"A",{href:!0});var Sot=s(sN);fAo=r(Sot,"IBertForSequenceClassification"),Sot.forEach(t),mAo=r(BAe," (I-BERT model)"),BAe.forEach(t),gAo=i(L),P7=n(L,"LI",{});var PAe=s(P7);Dle=n(PAe,"STRONG",{});var Rot=s(Dle);hAo=r(Rot,"layoutlm"),Rot.forEach(t),pAo=r(PAe," \u2014 "),lN=n(PAe,"A",{href:!0});var Bot=s(lN);_Ao=r(Bot,"LayoutLMForSequenceClassification"),Bot.forEach(t),uAo=r(PAe," (LayoutLM model)"),PAe.forEach(t),bAo=i(L),$7=n(L,"LI",{});var $Ae=s($7);Gle=n($Ae,"STRONG",{});var Pot=s(Gle);vAo=r(Pot,"layoutlmv2"),Pot.forEach(t),FAo=r($Ae," \u2014 "),iN=n($Ae,"A",{href:!0});var $ot=s(iN);TAo=r($ot,"LayoutLMv2ForSequenceClassification"),$ot.forEach(t),MAo=r($Ae," (LayoutLMv2 model)"),$Ae.forEach(t),EAo=i(L),I7=n(L,"LI",{});var IAe=s(I7);Ole=n(IAe,"STRONG",{});var Iot=s(Ole);CAo=r(Iot,"led"),Iot.forEach(t),wAo=r(IAe," \u2014 "),dN=n(IAe,"A",{href:!0});var qot=s(dN);AAo=r(qot,"LEDForSequenceClassification"),qot.forEach(t),yAo=r(IAe," (LED model)"),IAe.forEach(t),LAo=i(L),q7=n(L,"LI",{});var qAe=s(q7);Vle=n(qAe,"STRONG",{});var Not=s(Vle);xAo=r(Not,"longformer"),Not.forEach(t),kAo=r(qAe," \u2014 "),cN=n(qAe,"A",{href:!0});var jot=s(cN);SAo=r(jot,"LongformerForSequenceClassification"),jot.forEach(t),RAo=r(qAe," (Longformer model)"),qAe.forEach(t),BAo=i(L),N7=n(L,"LI",{});var NAe=s(N7);Xle=n(NAe,"STRONG",{});var Dot=s(Xle);PAo=r(Dot,"mbart"),Dot.forEach(t),$Ao=r(NAe," \u2014 "),fN=n(NAe,"A",{href:!0});var Got=s(fN);IAo=r(Got,"MBartForSequenceClassification"),Got.forEach(t),qAo=r(NAe," (mBART model)"),NAe.forEach(t),NAo=i(L),j7=n(L,"LI",{});var jAe=s(j7);zle=n(jAe,"STRONG",{});var Oot=s(zle);jAo=r(Oot,"megatron-bert"),Oot.forEach(t),DAo=r(jAe," \u2014 "),mN=n(jAe,"A",{href:!0});var Vot=s(mN);GAo=r(Vot,"MegatronBertForSequenceClassification"),Vot.forEach(t),OAo=r(jAe," (MegatronBert model)"),jAe.forEach(t),VAo=i(L),D7=n(L,"LI",{});var DAe=s(D7);Qle=n(DAe,"STRONG",{});var Xot=s(Qle);XAo=r(Xot,"mobilebert"),Xot.forEach(t),zAo=r(DAe," \u2014 "),gN=n(DAe,"A",{href:!0});var zot=s(gN);QAo=r(zot,"MobileBertForSequenceClassification"),zot.forEach(t),WAo=r(DAe," (MobileBERT model)"),DAe.forEach(t),HAo=i(L),G7=n(L,"LI",{});var GAe=s(G7);Wle=n(GAe,"STRONG",{});var Qot=s(Wle);UAo=r(Qot,"mpnet"),Qot.forEach(t),JAo=r(GAe," \u2014 "),hN=n(GAe,"A",{href:!0});var Wot=s(hN);YAo=r(Wot,"MPNetForSequenceClassification"),Wot.forEach(t),KAo=r(GAe," (MPNet model)"),GAe.forEach(t),ZAo=i(L),O7=n(L,"LI",{});var OAe=s(O7);Hle=n(OAe,"STRONG",{});var Hot=s(Hle);e0o=r(Hot,"nystromformer"),Hot.forEach(t),o0o=r(OAe," \u2014 "),pN=n(OAe,"A",{href:!0});var Uot=s(pN);r0o=r(Uot,"NystromformerForSequenceClassification"),Uot.forEach(t),t0o=r(OAe," (Nystromformer model)"),OAe.forEach(t),a0o=i(L),V7=n(L,"LI",{});var VAe=s(V7);Ule=n(VAe,"STRONG",{});var Jot=s(Ule);n0o=r(Jot,"openai-gpt"),Jot.forEach(t),s0o=r(VAe," \u2014 "),_N=n(VAe,"A",{href:!0});var Yot=s(_N);l0o=r(Yot,"OpenAIGPTForSequenceClassification"),Yot.forEach(t),i0o=r(VAe," (OpenAI GPT model)"),VAe.forEach(t),d0o=i(L),X7=n(L,"LI",{});var XAe=s(X7);Jle=n(XAe,"STRONG",{});var Kot=s(Jle);c0o=r(Kot,"perceiver"),Kot.forEach(t),f0o=r(XAe," \u2014 "),uN=n(XAe,"A",{href:!0});var Zot=s(uN);m0o=r(Zot,"PerceiverForSequenceClassification"),Zot.forEach(t),g0o=r(XAe," (Perceiver model)"),XAe.forEach(t),h0o=i(L),z7=n(L,"LI",{});var zAe=s(z7);Yle=n(zAe,"STRONG",{});var ert=s(Yle);p0o=r(ert,"plbart"),ert.forEach(t),_0o=r(zAe," \u2014 "),bN=n(zAe,"A",{href:!0});var ort=s(bN);u0o=r(ort,"PLBartForSequenceClassification"),ort.forEach(t),b0o=r(zAe," (PLBart model)"),zAe.forEach(t),v0o=i(L),Q7=n(L,"LI",{});var QAe=s(Q7);Kle=n(QAe,"STRONG",{});var rrt=s(Kle);F0o=r(rrt,"qdqbert"),rrt.forEach(t),T0o=r(QAe," \u2014 "),vN=n(QAe,"A",{href:!0});var trt=s(vN);M0o=r(trt,"QDQBertForSequenceClassification"),trt.forEach(t),E0o=r(QAe," (QDQBert model)"),QAe.forEach(t),C0o=i(L),W7=n(L,"LI",{});var WAe=s(W7);Zle=n(WAe,"STRONG",{});var art=s(Zle);w0o=r(art,"reformer"),art.forEach(t),A0o=r(WAe," \u2014 "),FN=n(WAe,"A",{href:!0});var nrt=s(FN);y0o=r(nrt,"ReformerForSequenceClassification"),nrt.forEach(t),L0o=r(WAe," (Reformer model)"),WAe.forEach(t),x0o=i(L),H7=n(L,"LI",{});var HAe=s(H7);eie=n(HAe,"STRONG",{});var srt=s(eie);k0o=r(srt,"rembert"),srt.forEach(t),S0o=r(HAe," \u2014 "),TN=n(HAe,"A",{href:!0});var lrt=s(TN);R0o=r(lrt,"RemBertForSequenceClassification"),lrt.forEach(t),B0o=r(HAe," (RemBERT model)"),HAe.forEach(t),P0o=i(L),U7=n(L,"LI",{});var UAe=s(U7);oie=n(UAe,"STRONG",{});var irt=s(oie);$0o=r(irt,"roberta"),irt.forEach(t),I0o=r(UAe," \u2014 "),MN=n(UAe,"A",{href:!0});var drt=s(MN);q0o=r(drt,"RobertaForSequenceClassification"),drt.forEach(t),N0o=r(UAe," (RoBERTa model)"),UAe.forEach(t),j0o=i(L),J7=n(L,"LI",{});var JAe=s(J7);rie=n(JAe,"STRONG",{});var crt=s(rie);D0o=r(crt,"roformer"),crt.forEach(t),G0o=r(JAe," \u2014 "),EN=n(JAe,"A",{href:!0});var frt=s(EN);O0o=r(frt,"RoFormerForSequenceClassification"),frt.forEach(t),V0o=r(JAe," (RoFormer model)"),JAe.forEach(t),X0o=i(L),Y7=n(L,"LI",{});var YAe=s(Y7);tie=n(YAe,"STRONG",{});var mrt=s(tie);z0o=r(mrt,"squeezebert"),mrt.forEach(t),Q0o=r(YAe," \u2014 "),CN=n(YAe,"A",{href:!0});var grt=s(CN);W0o=r(grt,"SqueezeBertForSequenceClassification"),grt.forEach(t),H0o=r(YAe," (SqueezeBERT model)"),YAe.forEach(t),U0o=i(L),K7=n(L,"LI",{});var KAe=s(K7);aie=n(KAe,"STRONG",{});var hrt=s(aie);J0o=r(hrt,"tapas"),hrt.forEach(t),Y0o=r(KAe," \u2014 "),wN=n(KAe,"A",{href:!0});var prt=s(wN);K0o=r(prt,"TapasForSequenceClassification"),prt.forEach(t),Z0o=r(KAe," (TAPAS model)"),KAe.forEach(t),eyo=i(L),Z7=n(L,"LI",{});var ZAe=s(Z7);nie=n(ZAe,"STRONG",{});var _rt=s(nie);oyo=r(_rt,"tapex"),_rt.forEach(t),ryo=r(ZAe," \u2014 "),AN=n(ZAe,"A",{href:!0});var urt=s(AN);tyo=r(urt,"BartForSequenceClassification"),urt.forEach(t),ayo=r(ZAe," (TAPEX model)"),ZAe.forEach(t),nyo=i(L),eb=n(L,"LI",{});var e0e=s(eb);sie=n(e0e,"STRONG",{});var brt=s(sie);syo=r(brt,"transfo-xl"),brt.forEach(t),lyo=r(e0e," \u2014 "),yN=n(e0e,"A",{href:!0});var vrt=s(yN);iyo=r(vrt,"TransfoXLForSequenceClassification"),vrt.forEach(t),dyo=r(e0e," (Transformer-XL model)"),e0e.forEach(t),cyo=i(L),ob=n(L,"LI",{});var o0e=s(ob);lie=n(o0e,"STRONG",{});var Frt=s(lie);fyo=r(Frt,"xlm"),Frt.forEach(t),myo=r(o0e," \u2014 "),LN=n(o0e,"A",{href:!0});var Trt=s(LN);gyo=r(Trt,"XLMForSequenceClassification"),Trt.forEach(t),hyo=r(o0e," (XLM model)"),o0e.forEach(t),pyo=i(L),rb=n(L,"LI",{});var r0e=s(rb);iie=n(r0e,"STRONG",{});var Mrt=s(iie);_yo=r(Mrt,"xlm-roberta"),Mrt.forEach(t),uyo=r(r0e," \u2014 "),xN=n(r0e,"A",{href:!0});var Ert=s(xN);byo=r(Ert,"XLMRobertaForSequenceClassification"),Ert.forEach(t),vyo=r(r0e," (XLM-RoBERTa model)"),r0e.forEach(t),Fyo=i(L),tb=n(L,"LI",{});var t0e=s(tb);die=n(t0e,"STRONG",{});var Crt=s(die);Tyo=r(Crt,"xlm-roberta-xl"),Crt.forEach(t),Myo=r(t0e," \u2014 "),kN=n(t0e,"A",{href:!0});var wrt=s(kN);Eyo=r(wrt,"XLMRobertaXLForSequenceClassification"),wrt.forEach(t),Cyo=r(t0e," (XLM-RoBERTa-XL model)"),t0e.forEach(t),wyo=i(L),ab=n(L,"LI",{});var a0e=s(ab);cie=n(a0e,"STRONG",{});var Art=s(cie);Ayo=r(Art,"xlnet"),Art.forEach(t),yyo=r(a0e," \u2014 "),SN=n(a0e,"A",{href:!0});var yrt=s(SN);Lyo=r(yrt,"XLNetForSequenceClassification"),yrt.forEach(t),xyo=r(a0e," (XLNet model)"),a0e.forEach(t),kyo=i(L),nb=n(L,"LI",{});var n0e=s(nb);fie=n(n0e,"STRONG",{});var Lrt=s(fie);Syo=r(Lrt,"yoso"),Lrt.forEach(t),Ryo=r(n0e," \u2014 "),RN=n(n0e,"A",{href:!0});var xrt=s(RN);Byo=r(xrt,"YosoForSequenceClassification"),xrt.forEach(t),Pyo=r(n0e," (YOSO model)"),n0e.forEach(t),L.forEach(t),$yo=i(zt),sb=n(zt,"P",{});var s0e=s(sb);Iyo=r(s0e,"The model is set in evaluation mode by default using "),mie=n(s0e,"CODE",{});var krt=s(mie);qyo=r(krt,"model.eval()"),krt.forEach(t),Nyo=r(s0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gie=n(s0e,"CODE",{});var Srt=s(gie);jyo=r(Srt,"model.train()"),Srt.forEach(t),s0e.forEach(t),Dyo=i(zt),hie=n(zt,"P",{});var Rrt=s(hie);Gyo=r(Rrt,"Examples:"),Rrt.forEach(t),Oyo=i(zt),m(Kw.$$.fragment,zt),zt.forEach(t),tl.forEach(t),hBe=i(c),pd=n(c,"H2",{class:!0});var E$e=s(pd);lb=n(E$e,"A",{id:!0,class:!0,href:!0});var Brt=s(lb);pie=n(Brt,"SPAN",{});var Prt=s(pie);m(Zw.$$.fragment,Prt),Prt.forEach(t),Brt.forEach(t),Vyo=i(E$e),_ie=n(E$e,"SPAN",{});var $rt=s(_ie);Xyo=r($rt,"AutoModelForMultipleChoice"),$rt.forEach(t),E$e.forEach(t),pBe=i(c),rr=n(c,"DIV",{class:!0});var nl=s(rr);m(e6.$$.fragment,nl),zyo=i(nl),_d=n(nl,"P",{});var NU=s(_d);Qyo=r(NU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),BN=n(NU,"A",{href:!0});var Irt=s(BN);Wyo=r(Irt,"from_pretrained()"),Irt.forEach(t),Hyo=r(NU," class method or the "),PN=n(NU,"A",{href:!0});var qrt=s(PN);Uyo=r(qrt,"from_config()"),qrt.forEach(t),Jyo=r(NU,` class
method.`),NU.forEach(t),Yyo=i(nl),o6=n(nl,"P",{});var C$e=s(o6);Kyo=r(C$e,"This class cannot be instantiated directly using "),uie=n(C$e,"CODE",{});var Nrt=s(uie);Zyo=r(Nrt,"__init__()"),Nrt.forEach(t),e8o=r(C$e," (throws an error)."),C$e.forEach(t),o8o=i(nl),Jr=n(nl,"DIV",{class:!0});var sl=s(Jr);m(r6.$$.fragment,sl),r8o=i(sl),bie=n(sl,"P",{});var jrt=s(bie);t8o=r(jrt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),jrt.forEach(t),a8o=i(sl),ud=n(sl,"P",{});var jU=s(ud);n8o=r(jU,`Note:
Loading a model from its configuration file does `),vie=n(jU,"STRONG",{});var Drt=s(vie);s8o=r(Drt,"not"),Drt.forEach(t),l8o=r(jU,` load the model weights. It only affects the
model\u2019s configuration. Use `),$N=n(jU,"A",{href:!0});var Grt=s($N);i8o=r(Grt,"from_pretrained()"),Grt.forEach(t),d8o=r(jU," to load the model weights."),jU.forEach(t),c8o=i(sl),Fie=n(sl,"P",{});var Ort=s(Fie);f8o=r(Ort,"Examples:"),Ort.forEach(t),m8o=i(sl),m(t6.$$.fragment,sl),sl.forEach(t),g8o=i(nl),Ve=n(nl,"DIV",{class:!0});var Qt=s(Ve);m(a6.$$.fragment,Qt),h8o=i(Qt),Tie=n(Qt,"P",{});var Vrt=s(Tie);p8o=r(Vrt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Vrt.forEach(t),_8o=i(Qt),Ja=n(Qt,"P",{});var DE=s(Ja);u8o=r(DE,"The model class to instantiate is selected based on the "),Mie=n(DE,"CODE",{});var Xrt=s(Mie);b8o=r(Xrt,"model_type"),Xrt.forEach(t),v8o=r(DE,` property of the config object (either
passed as an argument or loaded from `),Eie=n(DE,"CODE",{});var zrt=s(Eie);F8o=r(zrt,"pretrained_model_name_or_path"),zrt.forEach(t),T8o=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Cie=n(DE,"CODE",{});var Qrt=s(Cie);M8o=r(Qrt,"pretrained_model_name_or_path"),Qrt.forEach(t),E8o=r(DE,":"),DE.forEach(t),C8o=i(Qt),G=n(Qt,"UL",{});var O=s(G);ib=n(O,"LI",{});var l0e=s(ib);wie=n(l0e,"STRONG",{});var Wrt=s(wie);w8o=r(Wrt,"albert"),Wrt.forEach(t),A8o=r(l0e," \u2014 "),IN=n(l0e,"A",{href:!0});var Hrt=s(IN);y8o=r(Hrt,"AlbertForMultipleChoice"),Hrt.forEach(t),L8o=r(l0e," (ALBERT model)"),l0e.forEach(t),x8o=i(O),db=n(O,"LI",{});var i0e=s(db);Aie=n(i0e,"STRONG",{});var Urt=s(Aie);k8o=r(Urt,"bert"),Urt.forEach(t),S8o=r(i0e," \u2014 "),qN=n(i0e,"A",{href:!0});var Jrt=s(qN);R8o=r(Jrt,"BertForMultipleChoice"),Jrt.forEach(t),B8o=r(i0e," (BERT model)"),i0e.forEach(t),P8o=i(O),cb=n(O,"LI",{});var d0e=s(cb);yie=n(d0e,"STRONG",{});var Yrt=s(yie);$8o=r(Yrt,"big_bird"),Yrt.forEach(t),I8o=r(d0e," \u2014 "),NN=n(d0e,"A",{href:!0});var Krt=s(NN);q8o=r(Krt,"BigBirdForMultipleChoice"),Krt.forEach(t),N8o=r(d0e," (BigBird model)"),d0e.forEach(t),j8o=i(O),fb=n(O,"LI",{});var c0e=s(fb);Lie=n(c0e,"STRONG",{});var Zrt=s(Lie);D8o=r(Zrt,"camembert"),Zrt.forEach(t),G8o=r(c0e," \u2014 "),jN=n(c0e,"A",{href:!0});var ett=s(jN);O8o=r(ett,"CamembertForMultipleChoice"),ett.forEach(t),V8o=r(c0e," (CamemBERT model)"),c0e.forEach(t),X8o=i(O),mb=n(O,"LI",{});var f0e=s(mb);xie=n(f0e,"STRONG",{});var ott=s(xie);z8o=r(ott,"canine"),ott.forEach(t),Q8o=r(f0e," \u2014 "),DN=n(f0e,"A",{href:!0});var rtt=s(DN);W8o=r(rtt,"CanineForMultipleChoice"),rtt.forEach(t),H8o=r(f0e," (Canine model)"),f0e.forEach(t),U8o=i(O),gb=n(O,"LI",{});var m0e=s(gb);kie=n(m0e,"STRONG",{});var ttt=s(kie);J8o=r(ttt,"convbert"),ttt.forEach(t),Y8o=r(m0e," \u2014 "),GN=n(m0e,"A",{href:!0});var att=s(GN);K8o=r(att,"ConvBertForMultipleChoice"),att.forEach(t),Z8o=r(m0e," (ConvBERT model)"),m0e.forEach(t),eLo=i(O),hb=n(O,"LI",{});var g0e=s(hb);Sie=n(g0e,"STRONG",{});var ntt=s(Sie);oLo=r(ntt,"data2vec-text"),ntt.forEach(t),rLo=r(g0e," \u2014 "),ON=n(g0e,"A",{href:!0});var stt=s(ON);tLo=r(stt,"Data2VecTextForMultipleChoice"),stt.forEach(t),aLo=r(g0e," (Data2VecText model)"),g0e.forEach(t),nLo=i(O),pb=n(O,"LI",{});var h0e=s(pb);Rie=n(h0e,"STRONG",{});var ltt=s(Rie);sLo=r(ltt,"distilbert"),ltt.forEach(t),lLo=r(h0e," \u2014 "),VN=n(h0e,"A",{href:!0});var itt=s(VN);iLo=r(itt,"DistilBertForMultipleChoice"),itt.forEach(t),dLo=r(h0e," (DistilBERT model)"),h0e.forEach(t),cLo=i(O),_b=n(O,"LI",{});var p0e=s(_b);Bie=n(p0e,"STRONG",{});var dtt=s(Bie);fLo=r(dtt,"electra"),dtt.forEach(t),mLo=r(p0e," \u2014 "),XN=n(p0e,"A",{href:!0});var ctt=s(XN);gLo=r(ctt,"ElectraForMultipleChoice"),ctt.forEach(t),hLo=r(p0e," (ELECTRA model)"),p0e.forEach(t),pLo=i(O),ub=n(O,"LI",{});var _0e=s(ub);Pie=n(_0e,"STRONG",{});var ftt=s(Pie);_Lo=r(ftt,"flaubert"),ftt.forEach(t),uLo=r(_0e," \u2014 "),zN=n(_0e,"A",{href:!0});var mtt=s(zN);bLo=r(mtt,"FlaubertForMultipleChoice"),mtt.forEach(t),vLo=r(_0e," (FlauBERT model)"),_0e.forEach(t),FLo=i(O),bb=n(O,"LI",{});var u0e=s(bb);$ie=n(u0e,"STRONG",{});var gtt=s($ie);TLo=r(gtt,"fnet"),gtt.forEach(t),MLo=r(u0e," \u2014 "),QN=n(u0e,"A",{href:!0});var htt=s(QN);ELo=r(htt,"FNetForMultipleChoice"),htt.forEach(t),CLo=r(u0e," (FNet model)"),u0e.forEach(t),wLo=i(O),vb=n(O,"LI",{});var b0e=s(vb);Iie=n(b0e,"STRONG",{});var ptt=s(Iie);ALo=r(ptt,"funnel"),ptt.forEach(t),yLo=r(b0e," \u2014 "),WN=n(b0e,"A",{href:!0});var _tt=s(WN);LLo=r(_tt,"FunnelForMultipleChoice"),_tt.forEach(t),xLo=r(b0e," (Funnel Transformer model)"),b0e.forEach(t),kLo=i(O),Fb=n(O,"LI",{});var v0e=s(Fb);qie=n(v0e,"STRONG",{});var utt=s(qie);SLo=r(utt,"ibert"),utt.forEach(t),RLo=r(v0e," \u2014 "),HN=n(v0e,"A",{href:!0});var btt=s(HN);BLo=r(btt,"IBertForMultipleChoice"),btt.forEach(t),PLo=r(v0e," (I-BERT model)"),v0e.forEach(t),$Lo=i(O),Tb=n(O,"LI",{});var F0e=s(Tb);Nie=n(F0e,"STRONG",{});var vtt=s(Nie);ILo=r(vtt,"longformer"),vtt.forEach(t),qLo=r(F0e," \u2014 "),UN=n(F0e,"A",{href:!0});var Ftt=s(UN);NLo=r(Ftt,"LongformerForMultipleChoice"),Ftt.forEach(t),jLo=r(F0e," (Longformer model)"),F0e.forEach(t),DLo=i(O),Mb=n(O,"LI",{});var T0e=s(Mb);jie=n(T0e,"STRONG",{});var Ttt=s(jie);GLo=r(Ttt,"megatron-bert"),Ttt.forEach(t),OLo=r(T0e," \u2014 "),JN=n(T0e,"A",{href:!0});var Mtt=s(JN);VLo=r(Mtt,"MegatronBertForMultipleChoice"),Mtt.forEach(t),XLo=r(T0e," (MegatronBert model)"),T0e.forEach(t),zLo=i(O),Eb=n(O,"LI",{});var M0e=s(Eb);Die=n(M0e,"STRONG",{});var Ett=s(Die);QLo=r(Ett,"mobilebert"),Ett.forEach(t),WLo=r(M0e," \u2014 "),YN=n(M0e,"A",{href:!0});var Ctt=s(YN);HLo=r(Ctt,"MobileBertForMultipleChoice"),Ctt.forEach(t),ULo=r(M0e," (MobileBERT model)"),M0e.forEach(t),JLo=i(O),Cb=n(O,"LI",{});var E0e=s(Cb);Gie=n(E0e,"STRONG",{});var wtt=s(Gie);YLo=r(wtt,"mpnet"),wtt.forEach(t),KLo=r(E0e," \u2014 "),KN=n(E0e,"A",{href:!0});var Att=s(KN);ZLo=r(Att,"MPNetForMultipleChoice"),Att.forEach(t),e9o=r(E0e," (MPNet model)"),E0e.forEach(t),o9o=i(O),wb=n(O,"LI",{});var C0e=s(wb);Oie=n(C0e,"STRONG",{});var ytt=s(Oie);r9o=r(ytt,"nystromformer"),ytt.forEach(t),t9o=r(C0e," \u2014 "),ZN=n(C0e,"A",{href:!0});var Ltt=s(ZN);a9o=r(Ltt,"NystromformerForMultipleChoice"),Ltt.forEach(t),n9o=r(C0e," (Nystromformer model)"),C0e.forEach(t),s9o=i(O),Ab=n(O,"LI",{});var w0e=s(Ab);Vie=n(w0e,"STRONG",{});var xtt=s(Vie);l9o=r(xtt,"qdqbert"),xtt.forEach(t),i9o=r(w0e," \u2014 "),ej=n(w0e,"A",{href:!0});var ktt=s(ej);d9o=r(ktt,"QDQBertForMultipleChoice"),ktt.forEach(t),c9o=r(w0e," (QDQBert model)"),w0e.forEach(t),f9o=i(O),yb=n(O,"LI",{});var A0e=s(yb);Xie=n(A0e,"STRONG",{});var Stt=s(Xie);m9o=r(Stt,"rembert"),Stt.forEach(t),g9o=r(A0e," \u2014 "),oj=n(A0e,"A",{href:!0});var Rtt=s(oj);h9o=r(Rtt,"RemBertForMultipleChoice"),Rtt.forEach(t),p9o=r(A0e," (RemBERT model)"),A0e.forEach(t),_9o=i(O),Lb=n(O,"LI",{});var y0e=s(Lb);zie=n(y0e,"STRONG",{});var Btt=s(zie);u9o=r(Btt,"roberta"),Btt.forEach(t),b9o=r(y0e," \u2014 "),rj=n(y0e,"A",{href:!0});var Ptt=s(rj);v9o=r(Ptt,"RobertaForMultipleChoice"),Ptt.forEach(t),F9o=r(y0e," (RoBERTa model)"),y0e.forEach(t),T9o=i(O),xb=n(O,"LI",{});var L0e=s(xb);Qie=n(L0e,"STRONG",{});var $tt=s(Qie);M9o=r($tt,"roformer"),$tt.forEach(t),E9o=r(L0e," \u2014 "),tj=n(L0e,"A",{href:!0});var Itt=s(tj);C9o=r(Itt,"RoFormerForMultipleChoice"),Itt.forEach(t),w9o=r(L0e," (RoFormer model)"),L0e.forEach(t),A9o=i(O),kb=n(O,"LI",{});var x0e=s(kb);Wie=n(x0e,"STRONG",{});var qtt=s(Wie);y9o=r(qtt,"squeezebert"),qtt.forEach(t),L9o=r(x0e," \u2014 "),aj=n(x0e,"A",{href:!0});var Ntt=s(aj);x9o=r(Ntt,"SqueezeBertForMultipleChoice"),Ntt.forEach(t),k9o=r(x0e," (SqueezeBERT model)"),x0e.forEach(t),S9o=i(O),Sb=n(O,"LI",{});var k0e=s(Sb);Hie=n(k0e,"STRONG",{});var jtt=s(Hie);R9o=r(jtt,"xlm"),jtt.forEach(t),B9o=r(k0e," \u2014 "),nj=n(k0e,"A",{href:!0});var Dtt=s(nj);P9o=r(Dtt,"XLMForMultipleChoice"),Dtt.forEach(t),$9o=r(k0e," (XLM model)"),k0e.forEach(t),I9o=i(O),Rb=n(O,"LI",{});var S0e=s(Rb);Uie=n(S0e,"STRONG",{});var Gtt=s(Uie);q9o=r(Gtt,"xlm-roberta"),Gtt.forEach(t),N9o=r(S0e," \u2014 "),sj=n(S0e,"A",{href:!0});var Ott=s(sj);j9o=r(Ott,"XLMRobertaForMultipleChoice"),Ott.forEach(t),D9o=r(S0e," (XLM-RoBERTa model)"),S0e.forEach(t),G9o=i(O),Bb=n(O,"LI",{});var R0e=s(Bb);Jie=n(R0e,"STRONG",{});var Vtt=s(Jie);O9o=r(Vtt,"xlm-roberta-xl"),Vtt.forEach(t),V9o=r(R0e," \u2014 "),lj=n(R0e,"A",{href:!0});var Xtt=s(lj);X9o=r(Xtt,"XLMRobertaXLForMultipleChoice"),Xtt.forEach(t),z9o=r(R0e," (XLM-RoBERTa-XL model)"),R0e.forEach(t),Q9o=i(O),Pb=n(O,"LI",{});var B0e=s(Pb);Yie=n(B0e,"STRONG",{});var ztt=s(Yie);W9o=r(ztt,"xlnet"),ztt.forEach(t),H9o=r(B0e," \u2014 "),ij=n(B0e,"A",{href:!0});var Qtt=s(ij);U9o=r(Qtt,"XLNetForMultipleChoice"),Qtt.forEach(t),J9o=r(B0e," (XLNet model)"),B0e.forEach(t),Y9o=i(O),$b=n(O,"LI",{});var P0e=s($b);Kie=n(P0e,"STRONG",{});var Wtt=s(Kie);K9o=r(Wtt,"yoso"),Wtt.forEach(t),Z9o=r(P0e," \u2014 "),dj=n(P0e,"A",{href:!0});var Htt=s(dj);exo=r(Htt,"YosoForMultipleChoice"),Htt.forEach(t),oxo=r(P0e," (YOSO model)"),P0e.forEach(t),O.forEach(t),rxo=i(Qt),Ib=n(Qt,"P",{});var $0e=s(Ib);txo=r($0e,"The model is set in evaluation mode by default using "),Zie=n($0e,"CODE",{});var Utt=s(Zie);axo=r(Utt,"model.eval()"),Utt.forEach(t),nxo=r($0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ede=n($0e,"CODE",{});var Jtt=s(ede);sxo=r(Jtt,"model.train()"),Jtt.forEach(t),$0e.forEach(t),lxo=i(Qt),ode=n(Qt,"P",{});var Ytt=s(ode);ixo=r(Ytt,"Examples:"),Ytt.forEach(t),dxo=i(Qt),m(n6.$$.fragment,Qt),Qt.forEach(t),nl.forEach(t),_Be=i(c),bd=n(c,"H2",{class:!0});var w$e=s(bd);qb=n(w$e,"A",{id:!0,class:!0,href:!0});var Ktt=s(qb);rde=n(Ktt,"SPAN",{});var Ztt=s(rde);m(s6.$$.fragment,Ztt),Ztt.forEach(t),Ktt.forEach(t),cxo=i(w$e),tde=n(w$e,"SPAN",{});var eat=s(tde);fxo=r(eat,"AutoModelForNextSentencePrediction"),eat.forEach(t),w$e.forEach(t),uBe=i(c),tr=n(c,"DIV",{class:!0});var ll=s(tr);m(l6.$$.fragment,ll),mxo=i(ll),vd=n(ll,"P",{});var DU=s(vd);gxo=r(DU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cj=n(DU,"A",{href:!0});var oat=s(cj);hxo=r(oat,"from_pretrained()"),oat.forEach(t),pxo=r(DU," class method or the "),fj=n(DU,"A",{href:!0});var rat=s(fj);_xo=r(rat,"from_config()"),rat.forEach(t),uxo=r(DU,` class
method.`),DU.forEach(t),bxo=i(ll),i6=n(ll,"P",{});var A$e=s(i6);vxo=r(A$e,"This class cannot be instantiated directly using "),ade=n(A$e,"CODE",{});var tat=s(ade);Fxo=r(tat,"__init__()"),tat.forEach(t),Txo=r(A$e," (throws an error)."),A$e.forEach(t),Mxo=i(ll),Yr=n(ll,"DIV",{class:!0});var il=s(Yr);m(d6.$$.fragment,il),Exo=i(il),nde=n(il,"P",{});var aat=s(nde);Cxo=r(aat,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),aat.forEach(t),wxo=i(il),Fd=n(il,"P",{});var GU=s(Fd);Axo=r(GU,`Note:
Loading a model from its configuration file does `),sde=n(GU,"STRONG",{});var nat=s(sde);yxo=r(nat,"not"),nat.forEach(t),Lxo=r(GU,` load the model weights. It only affects the
model\u2019s configuration. Use `),mj=n(GU,"A",{href:!0});var sat=s(mj);xxo=r(sat,"from_pretrained()"),sat.forEach(t),kxo=r(GU," to load the model weights."),GU.forEach(t),Sxo=i(il),lde=n(il,"P",{});var lat=s(lde);Rxo=r(lat,"Examples:"),lat.forEach(t),Bxo=i(il),m(c6.$$.fragment,il),il.forEach(t),Pxo=i(ll),Xe=n(ll,"DIV",{class:!0});var Wt=s(Xe);m(f6.$$.fragment,Wt),$xo=i(Wt),ide=n(Wt,"P",{});var iat=s(ide);Ixo=r(iat,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iat.forEach(t),qxo=i(Wt),Ya=n(Wt,"P",{});var GE=s(Ya);Nxo=r(GE,"The model class to instantiate is selected based on the "),dde=n(GE,"CODE",{});var dat=s(dde);jxo=r(dat,"model_type"),dat.forEach(t),Dxo=r(GE,` property of the config object (either
passed as an argument or loaded from `),cde=n(GE,"CODE",{});var cat=s(cde);Gxo=r(cat,"pretrained_model_name_or_path"),cat.forEach(t),Oxo=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fde=n(GE,"CODE",{});var fat=s(fde);Vxo=r(fat,"pretrained_model_name_or_path"),fat.forEach(t),Xxo=r(GE,":"),GE.forEach(t),zxo=i(Wt),da=n(Wt,"UL",{});var dl=s(da);Nb=n(dl,"LI",{});var I0e=s(Nb);mde=n(I0e,"STRONG",{});var mat=s(mde);Qxo=r(mat,"bert"),mat.forEach(t),Wxo=r(I0e," \u2014 "),gj=n(I0e,"A",{href:!0});var gat=s(gj);Hxo=r(gat,"BertForNextSentencePrediction"),gat.forEach(t),Uxo=r(I0e," (BERT model)"),I0e.forEach(t),Jxo=i(dl),jb=n(dl,"LI",{});var q0e=s(jb);gde=n(q0e,"STRONG",{});var hat=s(gde);Yxo=r(hat,"fnet"),hat.forEach(t),Kxo=r(q0e," \u2014 "),hj=n(q0e,"A",{href:!0});var pat=s(hj);Zxo=r(pat,"FNetForNextSentencePrediction"),pat.forEach(t),eko=r(q0e," (FNet model)"),q0e.forEach(t),oko=i(dl),Db=n(dl,"LI",{});var N0e=s(Db);hde=n(N0e,"STRONG",{});var _at=s(hde);rko=r(_at,"megatron-bert"),_at.forEach(t),tko=r(N0e," \u2014 "),pj=n(N0e,"A",{href:!0});var uat=s(pj);ako=r(uat,"MegatronBertForNextSentencePrediction"),uat.forEach(t),nko=r(N0e," (MegatronBert model)"),N0e.forEach(t),sko=i(dl),Gb=n(dl,"LI",{});var j0e=s(Gb);pde=n(j0e,"STRONG",{});var bat=s(pde);lko=r(bat,"mobilebert"),bat.forEach(t),iko=r(j0e," \u2014 "),_j=n(j0e,"A",{href:!0});var vat=s(_j);dko=r(vat,"MobileBertForNextSentencePrediction"),vat.forEach(t),cko=r(j0e," (MobileBERT model)"),j0e.forEach(t),fko=i(dl),Ob=n(dl,"LI",{});var D0e=s(Ob);_de=n(D0e,"STRONG",{});var Fat=s(_de);mko=r(Fat,"qdqbert"),Fat.forEach(t),gko=r(D0e," \u2014 "),uj=n(D0e,"A",{href:!0});var Tat=s(uj);hko=r(Tat,"QDQBertForNextSentencePrediction"),Tat.forEach(t),pko=r(D0e," (QDQBert model)"),D0e.forEach(t),dl.forEach(t),_ko=i(Wt),Vb=n(Wt,"P",{});var G0e=s(Vb);uko=r(G0e,"The model is set in evaluation mode by default using "),ude=n(G0e,"CODE",{});var Mat=s(ude);bko=r(Mat,"model.eval()"),Mat.forEach(t),vko=r(G0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bde=n(G0e,"CODE",{});var Eat=s(bde);Fko=r(Eat,"model.train()"),Eat.forEach(t),G0e.forEach(t),Tko=i(Wt),vde=n(Wt,"P",{});var Cat=s(vde);Mko=r(Cat,"Examples:"),Cat.forEach(t),Eko=i(Wt),m(m6.$$.fragment,Wt),Wt.forEach(t),ll.forEach(t),bBe=i(c),Td=n(c,"H2",{class:!0});var y$e=s(Td);Xb=n(y$e,"A",{id:!0,class:!0,href:!0});var wat=s(Xb);Fde=n(wat,"SPAN",{});var Aat=s(Fde);m(g6.$$.fragment,Aat),Aat.forEach(t),wat.forEach(t),Cko=i(y$e),Tde=n(y$e,"SPAN",{});var yat=s(Tde);wko=r(yat,"AutoModelForTokenClassification"),yat.forEach(t),y$e.forEach(t),vBe=i(c),ar=n(c,"DIV",{class:!0});var cl=s(ar);m(h6.$$.fragment,cl),Ako=i(cl),Md=n(cl,"P",{});var OU=s(Md);yko=r(OU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),bj=n(OU,"A",{href:!0});var Lat=s(bj);Lko=r(Lat,"from_pretrained()"),Lat.forEach(t),xko=r(OU," class method or the "),vj=n(OU,"A",{href:!0});var xat=s(vj);kko=r(xat,"from_config()"),xat.forEach(t),Sko=r(OU,` class
method.`),OU.forEach(t),Rko=i(cl),p6=n(cl,"P",{});var L$e=s(p6);Bko=r(L$e,"This class cannot be instantiated directly using "),Mde=n(L$e,"CODE",{});var kat=s(Mde);Pko=r(kat,"__init__()"),kat.forEach(t),$ko=r(L$e," (throws an error)."),L$e.forEach(t),Iko=i(cl),Kr=n(cl,"DIV",{class:!0});var fl=s(Kr);m(_6.$$.fragment,fl),qko=i(fl),Ede=n(fl,"P",{});var Sat=s(Ede);Nko=r(Sat,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Sat.forEach(t),jko=i(fl),Ed=n(fl,"P",{});var VU=s(Ed);Dko=r(VU,`Note:
Loading a model from its configuration file does `),Cde=n(VU,"STRONG",{});var Rat=s(Cde);Gko=r(Rat,"not"),Rat.forEach(t),Oko=r(VU,` load the model weights. It only affects the
model\u2019s configuration. Use `),Fj=n(VU,"A",{href:!0});var Bat=s(Fj);Vko=r(Bat,"from_pretrained()"),Bat.forEach(t),Xko=r(VU," to load the model weights."),VU.forEach(t),zko=i(fl),wde=n(fl,"P",{});var Pat=s(wde);Qko=r(Pat,"Examples:"),Pat.forEach(t),Wko=i(fl),m(u6.$$.fragment,fl),fl.forEach(t),Hko=i(cl),ze=n(cl,"DIV",{class:!0});var Ht=s(ze);m(b6.$$.fragment,Ht),Uko=i(Ht),Ade=n(Ht,"P",{});var $at=s(Ade);Jko=r($at,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$at.forEach(t),Yko=i(Ht),Ka=n(Ht,"P",{});var OE=s(Ka);Kko=r(OE,"The model class to instantiate is selected based on the "),yde=n(OE,"CODE",{});var Iat=s(yde);Zko=r(Iat,"model_type"),Iat.forEach(t),eSo=r(OE,` property of the config object (either
passed as an argument or loaded from `),Lde=n(OE,"CODE",{});var qat=s(Lde);oSo=r(qat,"pretrained_model_name_or_path"),qat.forEach(t),rSo=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xde=n(OE,"CODE",{});var Nat=s(xde);tSo=r(Nat,"pretrained_model_name_or_path"),Nat.forEach(t),aSo=r(OE,":"),OE.forEach(t),nSo=i(Ht),j=n(Ht,"UL",{});var D=s(j);zb=n(D,"LI",{});var O0e=s(zb);kde=n(O0e,"STRONG",{});var jat=s(kde);sSo=r(jat,"albert"),jat.forEach(t),lSo=r(O0e," \u2014 "),Tj=n(O0e,"A",{href:!0});var Dat=s(Tj);iSo=r(Dat,"AlbertForTokenClassification"),Dat.forEach(t),dSo=r(O0e," (ALBERT model)"),O0e.forEach(t),cSo=i(D),Qb=n(D,"LI",{});var V0e=s(Qb);Sde=n(V0e,"STRONG",{});var Gat=s(Sde);fSo=r(Gat,"bert"),Gat.forEach(t),mSo=r(V0e," \u2014 "),Mj=n(V0e,"A",{href:!0});var Oat=s(Mj);gSo=r(Oat,"BertForTokenClassification"),Oat.forEach(t),hSo=r(V0e," (BERT model)"),V0e.forEach(t),pSo=i(D),Wb=n(D,"LI",{});var X0e=s(Wb);Rde=n(X0e,"STRONG",{});var Vat=s(Rde);_So=r(Vat,"big_bird"),Vat.forEach(t),uSo=r(X0e," \u2014 "),Ej=n(X0e,"A",{href:!0});var Xat=s(Ej);bSo=r(Xat,"BigBirdForTokenClassification"),Xat.forEach(t),vSo=r(X0e," (BigBird model)"),X0e.forEach(t),FSo=i(D),Hb=n(D,"LI",{});var z0e=s(Hb);Bde=n(z0e,"STRONG",{});var zat=s(Bde);TSo=r(zat,"camembert"),zat.forEach(t),MSo=r(z0e," \u2014 "),Cj=n(z0e,"A",{href:!0});var Qat=s(Cj);ESo=r(Qat,"CamembertForTokenClassification"),Qat.forEach(t),CSo=r(z0e," (CamemBERT model)"),z0e.forEach(t),wSo=i(D),Ub=n(D,"LI",{});var Q0e=s(Ub);Pde=n(Q0e,"STRONG",{});var Wat=s(Pde);ASo=r(Wat,"canine"),Wat.forEach(t),ySo=r(Q0e," \u2014 "),wj=n(Q0e,"A",{href:!0});var Hat=s(wj);LSo=r(Hat,"CanineForTokenClassification"),Hat.forEach(t),xSo=r(Q0e," (Canine model)"),Q0e.forEach(t),kSo=i(D),Jb=n(D,"LI",{});var W0e=s(Jb);$de=n(W0e,"STRONG",{});var Uat=s($de);SSo=r(Uat,"convbert"),Uat.forEach(t),RSo=r(W0e," \u2014 "),Aj=n(W0e,"A",{href:!0});var Jat=s(Aj);BSo=r(Jat,"ConvBertForTokenClassification"),Jat.forEach(t),PSo=r(W0e," (ConvBERT model)"),W0e.forEach(t),$So=i(D),Yb=n(D,"LI",{});var H0e=s(Yb);Ide=n(H0e,"STRONG",{});var Yat=s(Ide);ISo=r(Yat,"data2vec-text"),Yat.forEach(t),qSo=r(H0e," \u2014 "),yj=n(H0e,"A",{href:!0});var Kat=s(yj);NSo=r(Kat,"Data2VecTextForTokenClassification"),Kat.forEach(t),jSo=r(H0e," (Data2VecText model)"),H0e.forEach(t),DSo=i(D),Kb=n(D,"LI",{});var U0e=s(Kb);qde=n(U0e,"STRONG",{});var Zat=s(qde);GSo=r(Zat,"deberta"),Zat.forEach(t),OSo=r(U0e," \u2014 "),Lj=n(U0e,"A",{href:!0});var ent=s(Lj);VSo=r(ent,"DebertaForTokenClassification"),ent.forEach(t),XSo=r(U0e," (DeBERTa model)"),U0e.forEach(t),zSo=i(D),Zb=n(D,"LI",{});var J0e=s(Zb);Nde=n(J0e,"STRONG",{});var ont=s(Nde);QSo=r(ont,"deberta-v2"),ont.forEach(t),WSo=r(J0e," \u2014 "),xj=n(J0e,"A",{href:!0});var rnt=s(xj);HSo=r(rnt,"DebertaV2ForTokenClassification"),rnt.forEach(t),USo=r(J0e," (DeBERTa-v2 model)"),J0e.forEach(t),JSo=i(D),e2=n(D,"LI",{});var Y0e=s(e2);jde=n(Y0e,"STRONG",{});var tnt=s(jde);YSo=r(tnt,"distilbert"),tnt.forEach(t),KSo=r(Y0e," \u2014 "),kj=n(Y0e,"A",{href:!0});var ant=s(kj);ZSo=r(ant,"DistilBertForTokenClassification"),ant.forEach(t),eRo=r(Y0e," (DistilBERT model)"),Y0e.forEach(t),oRo=i(D),o2=n(D,"LI",{});var K0e=s(o2);Dde=n(K0e,"STRONG",{});var nnt=s(Dde);rRo=r(nnt,"electra"),nnt.forEach(t),tRo=r(K0e," \u2014 "),Sj=n(K0e,"A",{href:!0});var snt=s(Sj);aRo=r(snt,"ElectraForTokenClassification"),snt.forEach(t),nRo=r(K0e," (ELECTRA model)"),K0e.forEach(t),sRo=i(D),r2=n(D,"LI",{});var Z0e=s(r2);Gde=n(Z0e,"STRONG",{});var lnt=s(Gde);lRo=r(lnt,"flaubert"),lnt.forEach(t),iRo=r(Z0e," \u2014 "),Rj=n(Z0e,"A",{href:!0});var int=s(Rj);dRo=r(int,"FlaubertForTokenClassification"),int.forEach(t),cRo=r(Z0e," (FlauBERT model)"),Z0e.forEach(t),fRo=i(D),t2=n(D,"LI",{});var eye=s(t2);Ode=n(eye,"STRONG",{});var dnt=s(Ode);mRo=r(dnt,"fnet"),dnt.forEach(t),gRo=r(eye," \u2014 "),Bj=n(eye,"A",{href:!0});var cnt=s(Bj);hRo=r(cnt,"FNetForTokenClassification"),cnt.forEach(t),pRo=r(eye," (FNet model)"),eye.forEach(t),_Ro=i(D),a2=n(D,"LI",{});var oye=s(a2);Vde=n(oye,"STRONG",{});var fnt=s(Vde);uRo=r(fnt,"funnel"),fnt.forEach(t),bRo=r(oye," \u2014 "),Pj=n(oye,"A",{href:!0});var mnt=s(Pj);vRo=r(mnt,"FunnelForTokenClassification"),mnt.forEach(t),FRo=r(oye," (Funnel Transformer model)"),oye.forEach(t),TRo=i(D),n2=n(D,"LI",{});var rye=s(n2);Xde=n(rye,"STRONG",{});var gnt=s(Xde);MRo=r(gnt,"gpt2"),gnt.forEach(t),ERo=r(rye," \u2014 "),$j=n(rye,"A",{href:!0});var hnt=s($j);CRo=r(hnt,"GPT2ForTokenClassification"),hnt.forEach(t),wRo=r(rye," (OpenAI GPT-2 model)"),rye.forEach(t),ARo=i(D),s2=n(D,"LI",{});var tye=s(s2);zde=n(tye,"STRONG",{});var pnt=s(zde);yRo=r(pnt,"ibert"),pnt.forEach(t),LRo=r(tye," \u2014 "),Ij=n(tye,"A",{href:!0});var _nt=s(Ij);xRo=r(_nt,"IBertForTokenClassification"),_nt.forEach(t),kRo=r(tye," (I-BERT model)"),tye.forEach(t),SRo=i(D),l2=n(D,"LI",{});var aye=s(l2);Qde=n(aye,"STRONG",{});var unt=s(Qde);RRo=r(unt,"layoutlm"),unt.forEach(t),BRo=r(aye," \u2014 "),qj=n(aye,"A",{href:!0});var bnt=s(qj);PRo=r(bnt,"LayoutLMForTokenClassification"),bnt.forEach(t),$Ro=r(aye," (LayoutLM model)"),aye.forEach(t),IRo=i(D),i2=n(D,"LI",{});var nye=s(i2);Wde=n(nye,"STRONG",{});var vnt=s(Wde);qRo=r(vnt,"layoutlmv2"),vnt.forEach(t),NRo=r(nye," \u2014 "),Nj=n(nye,"A",{href:!0});var Fnt=s(Nj);jRo=r(Fnt,"LayoutLMv2ForTokenClassification"),Fnt.forEach(t),DRo=r(nye," (LayoutLMv2 model)"),nye.forEach(t),GRo=i(D),d2=n(D,"LI",{});var sye=s(d2);Hde=n(sye,"STRONG",{});var Tnt=s(Hde);ORo=r(Tnt,"longformer"),Tnt.forEach(t),VRo=r(sye," \u2014 "),jj=n(sye,"A",{href:!0});var Mnt=s(jj);XRo=r(Mnt,"LongformerForTokenClassification"),Mnt.forEach(t),zRo=r(sye," (Longformer model)"),sye.forEach(t),QRo=i(D),c2=n(D,"LI",{});var lye=s(c2);Ude=n(lye,"STRONG",{});var Ent=s(Ude);WRo=r(Ent,"megatron-bert"),Ent.forEach(t),HRo=r(lye," \u2014 "),Dj=n(lye,"A",{href:!0});var Cnt=s(Dj);URo=r(Cnt,"MegatronBertForTokenClassification"),Cnt.forEach(t),JRo=r(lye," (MegatronBert model)"),lye.forEach(t),YRo=i(D),f2=n(D,"LI",{});var iye=s(f2);Jde=n(iye,"STRONG",{});var wnt=s(Jde);KRo=r(wnt,"mobilebert"),wnt.forEach(t),ZRo=r(iye," \u2014 "),Gj=n(iye,"A",{href:!0});var Ant=s(Gj);eBo=r(Ant,"MobileBertForTokenClassification"),Ant.forEach(t),oBo=r(iye," (MobileBERT model)"),iye.forEach(t),rBo=i(D),m2=n(D,"LI",{});var dye=s(m2);Yde=n(dye,"STRONG",{});var ynt=s(Yde);tBo=r(ynt,"mpnet"),ynt.forEach(t),aBo=r(dye," \u2014 "),Oj=n(dye,"A",{href:!0});var Lnt=s(Oj);nBo=r(Lnt,"MPNetForTokenClassification"),Lnt.forEach(t),sBo=r(dye," (MPNet model)"),dye.forEach(t),lBo=i(D),g2=n(D,"LI",{});var cye=s(g2);Kde=n(cye,"STRONG",{});var xnt=s(Kde);iBo=r(xnt,"nystromformer"),xnt.forEach(t),dBo=r(cye," \u2014 "),Vj=n(cye,"A",{href:!0});var knt=s(Vj);cBo=r(knt,"NystromformerForTokenClassification"),knt.forEach(t),fBo=r(cye," (Nystromformer model)"),cye.forEach(t),mBo=i(D),h2=n(D,"LI",{});var fye=s(h2);Zde=n(fye,"STRONG",{});var Snt=s(Zde);gBo=r(Snt,"qdqbert"),Snt.forEach(t),hBo=r(fye," \u2014 "),Xj=n(fye,"A",{href:!0});var Rnt=s(Xj);pBo=r(Rnt,"QDQBertForTokenClassification"),Rnt.forEach(t),_Bo=r(fye," (QDQBert model)"),fye.forEach(t),uBo=i(D),p2=n(D,"LI",{});var mye=s(p2);ece=n(mye,"STRONG",{});var Bnt=s(ece);bBo=r(Bnt,"rembert"),Bnt.forEach(t),vBo=r(mye," \u2014 "),zj=n(mye,"A",{href:!0});var Pnt=s(zj);FBo=r(Pnt,"RemBertForTokenClassification"),Pnt.forEach(t),TBo=r(mye," (RemBERT model)"),mye.forEach(t),MBo=i(D),_2=n(D,"LI",{});var gye=s(_2);oce=n(gye,"STRONG",{});var $nt=s(oce);EBo=r($nt,"roberta"),$nt.forEach(t),CBo=r(gye," \u2014 "),Qj=n(gye,"A",{href:!0});var Int=s(Qj);wBo=r(Int,"RobertaForTokenClassification"),Int.forEach(t),ABo=r(gye," (RoBERTa model)"),gye.forEach(t),yBo=i(D),u2=n(D,"LI",{});var hye=s(u2);rce=n(hye,"STRONG",{});var qnt=s(rce);LBo=r(qnt,"roformer"),qnt.forEach(t),xBo=r(hye," \u2014 "),Wj=n(hye,"A",{href:!0});var Nnt=s(Wj);kBo=r(Nnt,"RoFormerForTokenClassification"),Nnt.forEach(t),SBo=r(hye," (RoFormer model)"),hye.forEach(t),RBo=i(D),b2=n(D,"LI",{});var pye=s(b2);tce=n(pye,"STRONG",{});var jnt=s(tce);BBo=r(jnt,"squeezebert"),jnt.forEach(t),PBo=r(pye," \u2014 "),Hj=n(pye,"A",{href:!0});var Dnt=s(Hj);$Bo=r(Dnt,"SqueezeBertForTokenClassification"),Dnt.forEach(t),IBo=r(pye," (SqueezeBERT model)"),pye.forEach(t),qBo=i(D),v2=n(D,"LI",{});var _ye=s(v2);ace=n(_ye,"STRONG",{});var Gnt=s(ace);NBo=r(Gnt,"xlm"),Gnt.forEach(t),jBo=r(_ye," \u2014 "),Uj=n(_ye,"A",{href:!0});var Ont=s(Uj);DBo=r(Ont,"XLMForTokenClassification"),Ont.forEach(t),GBo=r(_ye," (XLM model)"),_ye.forEach(t),OBo=i(D),F2=n(D,"LI",{});var uye=s(F2);nce=n(uye,"STRONG",{});var Vnt=s(nce);VBo=r(Vnt,"xlm-roberta"),Vnt.forEach(t),XBo=r(uye," \u2014 "),Jj=n(uye,"A",{href:!0});var Xnt=s(Jj);zBo=r(Xnt,"XLMRobertaForTokenClassification"),Xnt.forEach(t),QBo=r(uye," (XLM-RoBERTa model)"),uye.forEach(t),WBo=i(D),T2=n(D,"LI",{});var bye=s(T2);sce=n(bye,"STRONG",{});var znt=s(sce);HBo=r(znt,"xlm-roberta-xl"),znt.forEach(t),UBo=r(bye," \u2014 "),Yj=n(bye,"A",{href:!0});var Qnt=s(Yj);JBo=r(Qnt,"XLMRobertaXLForTokenClassification"),Qnt.forEach(t),YBo=r(bye," (XLM-RoBERTa-XL model)"),bye.forEach(t),KBo=i(D),M2=n(D,"LI",{});var vye=s(M2);lce=n(vye,"STRONG",{});var Wnt=s(lce);ZBo=r(Wnt,"xlnet"),Wnt.forEach(t),ePo=r(vye," \u2014 "),Kj=n(vye,"A",{href:!0});var Hnt=s(Kj);oPo=r(Hnt,"XLNetForTokenClassification"),Hnt.forEach(t),rPo=r(vye," (XLNet model)"),vye.forEach(t),tPo=i(D),E2=n(D,"LI",{});var Fye=s(E2);ice=n(Fye,"STRONG",{});var Unt=s(ice);aPo=r(Unt,"yoso"),Unt.forEach(t),nPo=r(Fye," \u2014 "),Zj=n(Fye,"A",{href:!0});var Jnt=s(Zj);sPo=r(Jnt,"YosoForTokenClassification"),Jnt.forEach(t),lPo=r(Fye," (YOSO model)"),Fye.forEach(t),D.forEach(t),iPo=i(Ht),C2=n(Ht,"P",{});var Tye=s(C2);dPo=r(Tye,"The model is set in evaluation mode by default using "),dce=n(Tye,"CODE",{});var Ynt=s(dce);cPo=r(Ynt,"model.eval()"),Ynt.forEach(t),fPo=r(Tye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=n(Tye,"CODE",{});var Knt=s(cce);mPo=r(Knt,"model.train()"),Knt.forEach(t),Tye.forEach(t),gPo=i(Ht),fce=n(Ht,"P",{});var Znt=s(fce);hPo=r(Znt,"Examples:"),Znt.forEach(t),pPo=i(Ht),m(v6.$$.fragment,Ht),Ht.forEach(t),cl.forEach(t),FBe=i(c),Cd=n(c,"H2",{class:!0});var x$e=s(Cd);w2=n(x$e,"A",{id:!0,class:!0,href:!0});var est=s(w2);mce=n(est,"SPAN",{});var ost=s(mce);m(F6.$$.fragment,ost),ost.forEach(t),est.forEach(t),_Po=i(x$e),gce=n(x$e,"SPAN",{});var rst=s(gce);uPo=r(rst,"AutoModelForQuestionAnswering"),rst.forEach(t),x$e.forEach(t),TBe=i(c),nr=n(c,"DIV",{class:!0});var ml=s(nr);m(T6.$$.fragment,ml),bPo=i(ml),wd=n(ml,"P",{});var XU=s(wd);vPo=r(XU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),eD=n(XU,"A",{href:!0});var tst=s(eD);FPo=r(tst,"from_pretrained()"),tst.forEach(t),TPo=r(XU," class method or the "),oD=n(XU,"A",{href:!0});var ast=s(oD);MPo=r(ast,"from_config()"),ast.forEach(t),EPo=r(XU,` class
method.`),XU.forEach(t),CPo=i(ml),M6=n(ml,"P",{});var k$e=s(M6);wPo=r(k$e,"This class cannot be instantiated directly using "),hce=n(k$e,"CODE",{});var nst=s(hce);APo=r(nst,"__init__()"),nst.forEach(t),yPo=r(k$e," (throws an error)."),k$e.forEach(t),LPo=i(ml),Zr=n(ml,"DIV",{class:!0});var gl=s(Zr);m(E6.$$.fragment,gl),xPo=i(gl),pce=n(gl,"P",{});var sst=s(pce);kPo=r(sst,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),sst.forEach(t),SPo=i(gl),Ad=n(gl,"P",{});var zU=s(Ad);RPo=r(zU,`Note:
Loading a model from its configuration file does `),_ce=n(zU,"STRONG",{});var lst=s(_ce);BPo=r(lst,"not"),lst.forEach(t),PPo=r(zU,` load the model weights. It only affects the
model\u2019s configuration. Use `),rD=n(zU,"A",{href:!0});var ist=s(rD);$Po=r(ist,"from_pretrained()"),ist.forEach(t),IPo=r(zU," to load the model weights."),zU.forEach(t),qPo=i(gl),uce=n(gl,"P",{});var dst=s(uce);NPo=r(dst,"Examples:"),dst.forEach(t),jPo=i(gl),m(C6.$$.fragment,gl),gl.forEach(t),DPo=i(ml),Qe=n(ml,"DIV",{class:!0});var Ut=s(Qe);m(w6.$$.fragment,Ut),GPo=i(Ut),bce=n(Ut,"P",{});var cst=s(bce);OPo=r(cst,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),cst.forEach(t),VPo=i(Ut),Za=n(Ut,"P",{});var VE=s(Za);XPo=r(VE,"The model class to instantiate is selected based on the "),vce=n(VE,"CODE",{});var fst=s(vce);zPo=r(fst,"model_type"),fst.forEach(t),QPo=r(VE,` property of the config object (either
passed as an argument or loaded from `),Fce=n(VE,"CODE",{});var mst=s(Fce);WPo=r(mst,"pretrained_model_name_or_path"),mst.forEach(t),HPo=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tce=n(VE,"CODE",{});var gst=s(Tce);UPo=r(gst,"pretrained_model_name_or_path"),gst.forEach(t),JPo=r(VE,":"),VE.forEach(t),YPo=i(Ut),R=n(Ut,"UL",{});var P=s(R);A2=n(P,"LI",{});var Mye=s(A2);Mce=n(Mye,"STRONG",{});var hst=s(Mce);KPo=r(hst,"albert"),hst.forEach(t),ZPo=r(Mye," \u2014 "),tD=n(Mye,"A",{href:!0});var pst=s(tD);e$o=r(pst,"AlbertForQuestionAnswering"),pst.forEach(t),o$o=r(Mye," (ALBERT model)"),Mye.forEach(t),r$o=i(P),y2=n(P,"LI",{});var Eye=s(y2);Ece=n(Eye,"STRONG",{});var _st=s(Ece);t$o=r(_st,"bart"),_st.forEach(t),a$o=r(Eye," \u2014 "),aD=n(Eye,"A",{href:!0});var ust=s(aD);n$o=r(ust,"BartForQuestionAnswering"),ust.forEach(t),s$o=r(Eye," (BART model)"),Eye.forEach(t),l$o=i(P),L2=n(P,"LI",{});var Cye=s(L2);Cce=n(Cye,"STRONG",{});var bst=s(Cce);i$o=r(bst,"bert"),bst.forEach(t),d$o=r(Cye," \u2014 "),nD=n(Cye,"A",{href:!0});var vst=s(nD);c$o=r(vst,"BertForQuestionAnswering"),vst.forEach(t),f$o=r(Cye," (BERT model)"),Cye.forEach(t),m$o=i(P),x2=n(P,"LI",{});var wye=s(x2);wce=n(wye,"STRONG",{});var Fst=s(wce);g$o=r(Fst,"big_bird"),Fst.forEach(t),h$o=r(wye," \u2014 "),sD=n(wye,"A",{href:!0});var Tst=s(sD);p$o=r(Tst,"BigBirdForQuestionAnswering"),Tst.forEach(t),_$o=r(wye," (BigBird model)"),wye.forEach(t),u$o=i(P),k2=n(P,"LI",{});var Aye=s(k2);Ace=n(Aye,"STRONG",{});var Mst=s(Ace);b$o=r(Mst,"bigbird_pegasus"),Mst.forEach(t),v$o=r(Aye," \u2014 "),lD=n(Aye,"A",{href:!0});var Est=s(lD);F$o=r(Est,"BigBirdPegasusForQuestionAnswering"),Est.forEach(t),T$o=r(Aye," (BigBirdPegasus model)"),Aye.forEach(t),M$o=i(P),S2=n(P,"LI",{});var yye=s(S2);yce=n(yye,"STRONG",{});var Cst=s(yce);E$o=r(Cst,"camembert"),Cst.forEach(t),C$o=r(yye," \u2014 "),iD=n(yye,"A",{href:!0});var wst=s(iD);w$o=r(wst,"CamembertForQuestionAnswering"),wst.forEach(t),A$o=r(yye," (CamemBERT model)"),yye.forEach(t),y$o=i(P),R2=n(P,"LI",{});var Lye=s(R2);Lce=n(Lye,"STRONG",{});var Ast=s(Lce);L$o=r(Ast,"canine"),Ast.forEach(t),x$o=r(Lye," \u2014 "),dD=n(Lye,"A",{href:!0});var yst=s(dD);k$o=r(yst,"CanineForQuestionAnswering"),yst.forEach(t),S$o=r(Lye," (Canine model)"),Lye.forEach(t),R$o=i(P),B2=n(P,"LI",{});var xye=s(B2);xce=n(xye,"STRONG",{});var Lst=s(xce);B$o=r(Lst,"convbert"),Lst.forEach(t),P$o=r(xye," \u2014 "),cD=n(xye,"A",{href:!0});var xst=s(cD);$$o=r(xst,"ConvBertForQuestionAnswering"),xst.forEach(t),I$o=r(xye," (ConvBERT model)"),xye.forEach(t),q$o=i(P),P2=n(P,"LI",{});var kye=s(P2);kce=n(kye,"STRONG",{});var kst=s(kce);N$o=r(kst,"data2vec-text"),kst.forEach(t),j$o=r(kye," \u2014 "),fD=n(kye,"A",{href:!0});var Sst=s(fD);D$o=r(Sst,"Data2VecTextForQuestionAnswering"),Sst.forEach(t),G$o=r(kye," (Data2VecText model)"),kye.forEach(t),O$o=i(P),$2=n(P,"LI",{});var Sye=s($2);Sce=n(Sye,"STRONG",{});var Rst=s(Sce);V$o=r(Rst,"deberta"),Rst.forEach(t),X$o=r(Sye," \u2014 "),mD=n(Sye,"A",{href:!0});var Bst=s(mD);z$o=r(Bst,"DebertaForQuestionAnswering"),Bst.forEach(t),Q$o=r(Sye," (DeBERTa model)"),Sye.forEach(t),W$o=i(P),I2=n(P,"LI",{});var Rye=s(I2);Rce=n(Rye,"STRONG",{});var Pst=s(Rce);H$o=r(Pst,"deberta-v2"),Pst.forEach(t),U$o=r(Rye," \u2014 "),gD=n(Rye,"A",{href:!0});var $st=s(gD);J$o=r($st,"DebertaV2ForQuestionAnswering"),$st.forEach(t),Y$o=r(Rye," (DeBERTa-v2 model)"),Rye.forEach(t),K$o=i(P),q2=n(P,"LI",{});var Bye=s(q2);Bce=n(Bye,"STRONG",{});var Ist=s(Bce);Z$o=r(Ist,"distilbert"),Ist.forEach(t),eIo=r(Bye," \u2014 "),hD=n(Bye,"A",{href:!0});var qst=s(hD);oIo=r(qst,"DistilBertForQuestionAnswering"),qst.forEach(t),rIo=r(Bye," (DistilBERT model)"),Bye.forEach(t),tIo=i(P),N2=n(P,"LI",{});var Pye=s(N2);Pce=n(Pye,"STRONG",{});var Nst=s(Pce);aIo=r(Nst,"electra"),Nst.forEach(t),nIo=r(Pye," \u2014 "),pD=n(Pye,"A",{href:!0});var jst=s(pD);sIo=r(jst,"ElectraForQuestionAnswering"),jst.forEach(t),lIo=r(Pye," (ELECTRA model)"),Pye.forEach(t),iIo=i(P),j2=n(P,"LI",{});var $ye=s(j2);$ce=n($ye,"STRONG",{});var Dst=s($ce);dIo=r(Dst,"flaubert"),Dst.forEach(t),cIo=r($ye," \u2014 "),_D=n($ye,"A",{href:!0});var Gst=s(_D);fIo=r(Gst,"FlaubertForQuestionAnsweringSimple"),Gst.forEach(t),mIo=r($ye," (FlauBERT model)"),$ye.forEach(t),gIo=i(P),D2=n(P,"LI",{});var Iye=s(D2);Ice=n(Iye,"STRONG",{});var Ost=s(Ice);hIo=r(Ost,"fnet"),Ost.forEach(t),pIo=r(Iye," \u2014 "),uD=n(Iye,"A",{href:!0});var Vst=s(uD);_Io=r(Vst,"FNetForQuestionAnswering"),Vst.forEach(t),uIo=r(Iye," (FNet model)"),Iye.forEach(t),bIo=i(P),G2=n(P,"LI",{});var qye=s(G2);qce=n(qye,"STRONG",{});var Xst=s(qce);vIo=r(Xst,"funnel"),Xst.forEach(t),FIo=r(qye," \u2014 "),bD=n(qye,"A",{href:!0});var zst=s(bD);TIo=r(zst,"FunnelForQuestionAnswering"),zst.forEach(t),MIo=r(qye," (Funnel Transformer model)"),qye.forEach(t),EIo=i(P),O2=n(P,"LI",{});var Nye=s(O2);Nce=n(Nye,"STRONG",{});var Qst=s(Nce);CIo=r(Qst,"gptj"),Qst.forEach(t),wIo=r(Nye," \u2014 "),vD=n(Nye,"A",{href:!0});var Wst=s(vD);AIo=r(Wst,"GPTJForQuestionAnswering"),Wst.forEach(t),yIo=r(Nye," (GPT-J model)"),Nye.forEach(t),LIo=i(P),V2=n(P,"LI",{});var jye=s(V2);jce=n(jye,"STRONG",{});var Hst=s(jce);xIo=r(Hst,"ibert"),Hst.forEach(t),kIo=r(jye," \u2014 "),FD=n(jye,"A",{href:!0});var Ust=s(FD);SIo=r(Ust,"IBertForQuestionAnswering"),Ust.forEach(t),RIo=r(jye," (I-BERT model)"),jye.forEach(t),BIo=i(P),X2=n(P,"LI",{});var Dye=s(X2);Dce=n(Dye,"STRONG",{});var Jst=s(Dce);PIo=r(Jst,"layoutlmv2"),Jst.forEach(t),$Io=r(Dye," \u2014 "),TD=n(Dye,"A",{href:!0});var Yst=s(TD);IIo=r(Yst,"LayoutLMv2ForQuestionAnswering"),Yst.forEach(t),qIo=r(Dye," (LayoutLMv2 model)"),Dye.forEach(t),NIo=i(P),z2=n(P,"LI",{});var Gye=s(z2);Gce=n(Gye,"STRONG",{});var Kst=s(Gce);jIo=r(Kst,"led"),Kst.forEach(t),DIo=r(Gye," \u2014 "),MD=n(Gye,"A",{href:!0});var Zst=s(MD);GIo=r(Zst,"LEDForQuestionAnswering"),Zst.forEach(t),OIo=r(Gye," (LED model)"),Gye.forEach(t),VIo=i(P),Q2=n(P,"LI",{});var Oye=s(Q2);Oce=n(Oye,"STRONG",{});var elt=s(Oce);XIo=r(elt,"longformer"),elt.forEach(t),zIo=r(Oye," \u2014 "),ED=n(Oye,"A",{href:!0});var olt=s(ED);QIo=r(olt,"LongformerForQuestionAnswering"),olt.forEach(t),WIo=r(Oye," (Longformer model)"),Oye.forEach(t),HIo=i(P),W2=n(P,"LI",{});var Vye=s(W2);Vce=n(Vye,"STRONG",{});var rlt=s(Vce);UIo=r(rlt,"lxmert"),rlt.forEach(t),JIo=r(Vye," \u2014 "),CD=n(Vye,"A",{href:!0});var tlt=s(CD);YIo=r(tlt,"LxmertForQuestionAnswering"),tlt.forEach(t),KIo=r(Vye," (LXMERT model)"),Vye.forEach(t),ZIo=i(P),H2=n(P,"LI",{});var Xye=s(H2);Xce=n(Xye,"STRONG",{});var alt=s(Xce);eqo=r(alt,"mbart"),alt.forEach(t),oqo=r(Xye," \u2014 "),wD=n(Xye,"A",{href:!0});var nlt=s(wD);rqo=r(nlt,"MBartForQuestionAnswering"),nlt.forEach(t),tqo=r(Xye," (mBART model)"),Xye.forEach(t),aqo=i(P),U2=n(P,"LI",{});var zye=s(U2);zce=n(zye,"STRONG",{});var slt=s(zce);nqo=r(slt,"megatron-bert"),slt.forEach(t),sqo=r(zye," \u2014 "),AD=n(zye,"A",{href:!0});var llt=s(AD);lqo=r(llt,"MegatronBertForQuestionAnswering"),llt.forEach(t),iqo=r(zye," (MegatronBert model)"),zye.forEach(t),dqo=i(P),J2=n(P,"LI",{});var Qye=s(J2);Qce=n(Qye,"STRONG",{});var ilt=s(Qce);cqo=r(ilt,"mobilebert"),ilt.forEach(t),fqo=r(Qye," \u2014 "),yD=n(Qye,"A",{href:!0});var dlt=s(yD);mqo=r(dlt,"MobileBertForQuestionAnswering"),dlt.forEach(t),gqo=r(Qye," (MobileBERT model)"),Qye.forEach(t),hqo=i(P),Y2=n(P,"LI",{});var Wye=s(Y2);Wce=n(Wye,"STRONG",{});var clt=s(Wce);pqo=r(clt,"mpnet"),clt.forEach(t),_qo=r(Wye," \u2014 "),LD=n(Wye,"A",{href:!0});var flt=s(LD);uqo=r(flt,"MPNetForQuestionAnswering"),flt.forEach(t),bqo=r(Wye," (MPNet model)"),Wye.forEach(t),vqo=i(P),K2=n(P,"LI",{});var Hye=s(K2);Hce=n(Hye,"STRONG",{});var mlt=s(Hce);Fqo=r(mlt,"nystromformer"),mlt.forEach(t),Tqo=r(Hye," \u2014 "),xD=n(Hye,"A",{href:!0});var glt=s(xD);Mqo=r(glt,"NystromformerForQuestionAnswering"),glt.forEach(t),Eqo=r(Hye," (Nystromformer model)"),Hye.forEach(t),Cqo=i(P),Z2=n(P,"LI",{});var Uye=s(Z2);Uce=n(Uye,"STRONG",{});var hlt=s(Uce);wqo=r(hlt,"qdqbert"),hlt.forEach(t),Aqo=r(Uye," \u2014 "),kD=n(Uye,"A",{href:!0});var plt=s(kD);yqo=r(plt,"QDQBertForQuestionAnswering"),plt.forEach(t),Lqo=r(Uye," (QDQBert model)"),Uye.forEach(t),xqo=i(P),e5=n(P,"LI",{});var Jye=s(e5);Jce=n(Jye,"STRONG",{});var _lt=s(Jce);kqo=r(_lt,"reformer"),_lt.forEach(t),Sqo=r(Jye," \u2014 "),SD=n(Jye,"A",{href:!0});var ult=s(SD);Rqo=r(ult,"ReformerForQuestionAnswering"),ult.forEach(t),Bqo=r(Jye," (Reformer model)"),Jye.forEach(t),Pqo=i(P),o5=n(P,"LI",{});var Yye=s(o5);Yce=n(Yye,"STRONG",{});var blt=s(Yce);$qo=r(blt,"rembert"),blt.forEach(t),Iqo=r(Yye," \u2014 "),RD=n(Yye,"A",{href:!0});var vlt=s(RD);qqo=r(vlt,"RemBertForQuestionAnswering"),vlt.forEach(t),Nqo=r(Yye," (RemBERT model)"),Yye.forEach(t),jqo=i(P),r5=n(P,"LI",{});var Kye=s(r5);Kce=n(Kye,"STRONG",{});var Flt=s(Kce);Dqo=r(Flt,"roberta"),Flt.forEach(t),Gqo=r(Kye," \u2014 "),BD=n(Kye,"A",{href:!0});var Tlt=s(BD);Oqo=r(Tlt,"RobertaForQuestionAnswering"),Tlt.forEach(t),Vqo=r(Kye," (RoBERTa model)"),Kye.forEach(t),Xqo=i(P),t5=n(P,"LI",{});var Zye=s(t5);Zce=n(Zye,"STRONG",{});var Mlt=s(Zce);zqo=r(Mlt,"roformer"),Mlt.forEach(t),Qqo=r(Zye," \u2014 "),PD=n(Zye,"A",{href:!0});var Elt=s(PD);Wqo=r(Elt,"RoFormerForQuestionAnswering"),Elt.forEach(t),Hqo=r(Zye," (RoFormer model)"),Zye.forEach(t),Uqo=i(P),a5=n(P,"LI",{});var e8e=s(a5);efe=n(e8e,"STRONG",{});var Clt=s(efe);Jqo=r(Clt,"splinter"),Clt.forEach(t),Yqo=r(e8e," \u2014 "),$D=n(e8e,"A",{href:!0});var wlt=s($D);Kqo=r(wlt,"SplinterForQuestionAnswering"),wlt.forEach(t),Zqo=r(e8e," (Splinter model)"),e8e.forEach(t),eNo=i(P),n5=n(P,"LI",{});var o8e=s(n5);ofe=n(o8e,"STRONG",{});var Alt=s(ofe);oNo=r(Alt,"squeezebert"),Alt.forEach(t),rNo=r(o8e," \u2014 "),ID=n(o8e,"A",{href:!0});var ylt=s(ID);tNo=r(ylt,"SqueezeBertForQuestionAnswering"),ylt.forEach(t),aNo=r(o8e," (SqueezeBERT model)"),o8e.forEach(t),nNo=i(P),s5=n(P,"LI",{});var r8e=s(s5);rfe=n(r8e,"STRONG",{});var Llt=s(rfe);sNo=r(Llt,"xlm"),Llt.forEach(t),lNo=r(r8e," \u2014 "),qD=n(r8e,"A",{href:!0});var xlt=s(qD);iNo=r(xlt,"XLMForQuestionAnsweringSimple"),xlt.forEach(t),dNo=r(r8e," (XLM model)"),r8e.forEach(t),cNo=i(P),l5=n(P,"LI",{});var t8e=s(l5);tfe=n(t8e,"STRONG",{});var klt=s(tfe);fNo=r(klt,"xlm-roberta"),klt.forEach(t),mNo=r(t8e," \u2014 "),ND=n(t8e,"A",{href:!0});var Slt=s(ND);gNo=r(Slt,"XLMRobertaForQuestionAnswering"),Slt.forEach(t),hNo=r(t8e," (XLM-RoBERTa model)"),t8e.forEach(t),pNo=i(P),i5=n(P,"LI",{});var a8e=s(i5);afe=n(a8e,"STRONG",{});var Rlt=s(afe);_No=r(Rlt,"xlm-roberta-xl"),Rlt.forEach(t),uNo=r(a8e," \u2014 "),jD=n(a8e,"A",{href:!0});var Blt=s(jD);bNo=r(Blt,"XLMRobertaXLForQuestionAnswering"),Blt.forEach(t),vNo=r(a8e," (XLM-RoBERTa-XL model)"),a8e.forEach(t),FNo=i(P),d5=n(P,"LI",{});var n8e=s(d5);nfe=n(n8e,"STRONG",{});var Plt=s(nfe);TNo=r(Plt,"xlnet"),Plt.forEach(t),MNo=r(n8e," \u2014 "),DD=n(n8e,"A",{href:!0});var $lt=s(DD);ENo=r($lt,"XLNetForQuestionAnsweringSimple"),$lt.forEach(t),CNo=r(n8e," (XLNet model)"),n8e.forEach(t),wNo=i(P),c5=n(P,"LI",{});var s8e=s(c5);sfe=n(s8e,"STRONG",{});var Ilt=s(sfe);ANo=r(Ilt,"yoso"),Ilt.forEach(t),yNo=r(s8e," \u2014 "),GD=n(s8e,"A",{href:!0});var qlt=s(GD);LNo=r(qlt,"YosoForQuestionAnswering"),qlt.forEach(t),xNo=r(s8e," (YOSO model)"),s8e.forEach(t),P.forEach(t),kNo=i(Ut),f5=n(Ut,"P",{});var l8e=s(f5);SNo=r(l8e,"The model is set in evaluation mode by default using "),lfe=n(l8e,"CODE",{});var Nlt=s(lfe);RNo=r(Nlt,"model.eval()"),Nlt.forEach(t),BNo=r(l8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ife=n(l8e,"CODE",{});var jlt=s(ife);PNo=r(jlt,"model.train()"),jlt.forEach(t),l8e.forEach(t),$No=i(Ut),dfe=n(Ut,"P",{});var Dlt=s(dfe);INo=r(Dlt,"Examples:"),Dlt.forEach(t),qNo=i(Ut),m(A6.$$.fragment,Ut),Ut.forEach(t),ml.forEach(t),MBe=i(c),yd=n(c,"H2",{class:!0});var S$e=s(yd);m5=n(S$e,"A",{id:!0,class:!0,href:!0});var Glt=s(m5);cfe=n(Glt,"SPAN",{});var Olt=s(cfe);m(y6.$$.fragment,Olt),Olt.forEach(t),Glt.forEach(t),NNo=i(S$e),ffe=n(S$e,"SPAN",{});var Vlt=s(ffe);jNo=r(Vlt,"AutoModelForTableQuestionAnswering"),Vlt.forEach(t),S$e.forEach(t),EBe=i(c),sr=n(c,"DIV",{class:!0});var hl=s(sr);m(L6.$$.fragment,hl),DNo=i(hl),Ld=n(hl,"P",{});var QU=s(Ld);GNo=r(QU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),OD=n(QU,"A",{href:!0});var Xlt=s(OD);ONo=r(Xlt,"from_pretrained()"),Xlt.forEach(t),VNo=r(QU," class method or the "),VD=n(QU,"A",{href:!0});var zlt=s(VD);XNo=r(zlt,"from_config()"),zlt.forEach(t),zNo=r(QU,` class
method.`),QU.forEach(t),QNo=i(hl),x6=n(hl,"P",{});var R$e=s(x6);WNo=r(R$e,"This class cannot be instantiated directly using "),mfe=n(R$e,"CODE",{});var Qlt=s(mfe);HNo=r(Qlt,"__init__()"),Qlt.forEach(t),UNo=r(R$e," (throws an error)."),R$e.forEach(t),JNo=i(hl),et=n(hl,"DIV",{class:!0});var pl=s(et);m(k6.$$.fragment,pl),YNo=i(pl),gfe=n(pl,"P",{});var Wlt=s(gfe);KNo=r(Wlt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Wlt.forEach(t),ZNo=i(pl),xd=n(pl,"P",{});var WU=s(xd);ejo=r(WU,`Note:
Loading a model from its configuration file does `),hfe=n(WU,"STRONG",{});var Hlt=s(hfe);ojo=r(Hlt,"not"),Hlt.forEach(t),rjo=r(WU,` load the model weights. It only affects the
model\u2019s configuration. Use `),XD=n(WU,"A",{href:!0});var Ult=s(XD);tjo=r(Ult,"from_pretrained()"),Ult.forEach(t),ajo=r(WU," to load the model weights."),WU.forEach(t),njo=i(pl),pfe=n(pl,"P",{});var Jlt=s(pfe);sjo=r(Jlt,"Examples:"),Jlt.forEach(t),ljo=i(pl),m(S6.$$.fragment,pl),pl.forEach(t),ijo=i(hl),We=n(hl,"DIV",{class:!0});var Jt=s(We);m(R6.$$.fragment,Jt),djo=i(Jt),_fe=n(Jt,"P",{});var Ylt=s(_fe);cjo=r(Ylt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Ylt.forEach(t),fjo=i(Jt),en=n(Jt,"P",{});var XE=s(en);mjo=r(XE,"The model class to instantiate is selected based on the "),ufe=n(XE,"CODE",{});var Klt=s(ufe);gjo=r(Klt,"model_type"),Klt.forEach(t),hjo=r(XE,` property of the config object (either
passed as an argument or loaded from `),bfe=n(XE,"CODE",{});var Zlt=s(bfe);pjo=r(Zlt,"pretrained_model_name_or_path"),Zlt.forEach(t),_jo=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vfe=n(XE,"CODE",{});var eit=s(vfe);ujo=r(eit,"pretrained_model_name_or_path"),eit.forEach(t),bjo=r(XE,":"),XE.forEach(t),vjo=i(Jt),Ffe=n(Jt,"UL",{});var oit=s(Ffe);g5=n(oit,"LI",{});var i8e=s(g5);Tfe=n(i8e,"STRONG",{});var rit=s(Tfe);Fjo=r(rit,"tapas"),rit.forEach(t),Tjo=r(i8e," \u2014 "),zD=n(i8e,"A",{href:!0});var tit=s(zD);Mjo=r(tit,"TapasForQuestionAnswering"),tit.forEach(t),Ejo=r(i8e," (TAPAS model)"),i8e.forEach(t),oit.forEach(t),Cjo=i(Jt),h5=n(Jt,"P",{});var d8e=s(h5);wjo=r(d8e,"The model is set in evaluation mode by default using "),Mfe=n(d8e,"CODE",{});var ait=s(Mfe);Ajo=r(ait,"model.eval()"),ait.forEach(t),yjo=r(d8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Efe=n(d8e,"CODE",{});var nit=s(Efe);Ljo=r(nit,"model.train()"),nit.forEach(t),d8e.forEach(t),xjo=i(Jt),Cfe=n(Jt,"P",{});var sit=s(Cfe);kjo=r(sit,"Examples:"),sit.forEach(t),Sjo=i(Jt),m(B6.$$.fragment,Jt),Jt.forEach(t),hl.forEach(t),CBe=i(c),kd=n(c,"H2",{class:!0});var B$e=s(kd);p5=n(B$e,"A",{id:!0,class:!0,href:!0});var lit=s(p5);wfe=n(lit,"SPAN",{});var iit=s(wfe);m(P6.$$.fragment,iit),iit.forEach(t),lit.forEach(t),Rjo=i(B$e),Afe=n(B$e,"SPAN",{});var dit=s(Afe);Bjo=r(dit,"AutoModelForImageClassification"),dit.forEach(t),B$e.forEach(t),wBe=i(c),lr=n(c,"DIV",{class:!0});var _l=s(lr);m($6.$$.fragment,_l),Pjo=i(_l),Sd=n(_l,"P",{});var HU=s(Sd);$jo=r(HU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),QD=n(HU,"A",{href:!0});var cit=s(QD);Ijo=r(cit,"from_pretrained()"),cit.forEach(t),qjo=r(HU," class method or the "),WD=n(HU,"A",{href:!0});var fit=s(WD);Njo=r(fit,"from_config()"),fit.forEach(t),jjo=r(HU,` class
method.`),HU.forEach(t),Djo=i(_l),I6=n(_l,"P",{});var P$e=s(I6);Gjo=r(P$e,"This class cannot be instantiated directly using "),yfe=n(P$e,"CODE",{});var mit=s(yfe);Ojo=r(mit,"__init__()"),mit.forEach(t),Vjo=r(P$e," (throws an error)."),P$e.forEach(t),Xjo=i(_l),ot=n(_l,"DIV",{class:!0});var ul=s(ot);m(q6.$$.fragment,ul),zjo=i(ul),Lfe=n(ul,"P",{});var git=s(Lfe);Qjo=r(git,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),git.forEach(t),Wjo=i(ul),Rd=n(ul,"P",{});var UU=s(Rd);Hjo=r(UU,`Note:
Loading a model from its configuration file does `),xfe=n(UU,"STRONG",{});var hit=s(xfe);Ujo=r(hit,"not"),hit.forEach(t),Jjo=r(UU,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(UU,"A",{href:!0});var pit=s(HD);Yjo=r(pit,"from_pretrained()"),pit.forEach(t),Kjo=r(UU," to load the model weights."),UU.forEach(t),Zjo=i(ul),kfe=n(ul,"P",{});var _it=s(kfe);eDo=r(_it,"Examples:"),_it.forEach(t),oDo=i(ul),m(N6.$$.fragment,ul),ul.forEach(t),rDo=i(_l),He=n(_l,"DIV",{class:!0});var Yt=s(He);m(j6.$$.fragment,Yt),tDo=i(Yt),Sfe=n(Yt,"P",{});var uit=s(Sfe);aDo=r(uit,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),uit.forEach(t),nDo=i(Yt),on=n(Yt,"P",{});var zE=s(on);sDo=r(zE,"The model class to instantiate is selected based on the "),Rfe=n(zE,"CODE",{});var bit=s(Rfe);lDo=r(bit,"model_type"),bit.forEach(t),iDo=r(zE,` property of the config object (either
passed as an argument or loaded from `),Bfe=n(zE,"CODE",{});var vit=s(Bfe);dDo=r(vit,"pretrained_model_name_or_path"),vit.forEach(t),cDo=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pfe=n(zE,"CODE",{});var Fit=s(Pfe);fDo=r(Fit,"pretrained_model_name_or_path"),Fit.forEach(t),mDo=r(zE,":"),zE.forEach(t),gDo=i(Yt),de=n(Yt,"UL",{});var ge=s(de);_5=n(ge,"LI",{});var c8e=s(_5);$fe=n(c8e,"STRONG",{});var Tit=s($fe);hDo=r(Tit,"beit"),Tit.forEach(t),pDo=r(c8e," \u2014 "),UD=n(c8e,"A",{href:!0});var Mit=s(UD);_Do=r(Mit,"BeitForImageClassification"),Mit.forEach(t),uDo=r(c8e," (BEiT model)"),c8e.forEach(t),bDo=i(ge),u5=n(ge,"LI",{});var f8e=s(u5);Ife=n(f8e,"STRONG",{});var Eit=s(Ife);vDo=r(Eit,"convnext"),Eit.forEach(t),FDo=r(f8e," \u2014 "),JD=n(f8e,"A",{href:!0});var Cit=s(JD);TDo=r(Cit,"ConvNextForImageClassification"),Cit.forEach(t),MDo=r(f8e," (ConvNext model)"),f8e.forEach(t),EDo=i(ge),b5=n(ge,"LI",{});var m8e=s(b5);qfe=n(m8e,"STRONG",{});var wit=s(qfe);CDo=r(wit,"data2vec-vision"),wit.forEach(t),wDo=r(m8e," \u2014 "),YD=n(m8e,"A",{href:!0});var Ait=s(YD);ADo=r(Ait,"Data2VecVisionForImageClassification"),Ait.forEach(t),yDo=r(m8e," (Data2VecVision model)"),m8e.forEach(t),LDo=i(ge),Gs=n(ge,"LI",{});var T9=s(Gs);Nfe=n(T9,"STRONG",{});var yit=s(Nfe);xDo=r(yit,"deit"),yit.forEach(t),kDo=r(T9," \u2014 "),KD=n(T9,"A",{href:!0});var Lit=s(KD);SDo=r(Lit,"DeiTForImageClassification"),Lit.forEach(t),RDo=r(T9," or "),ZD=n(T9,"A",{href:!0});var xit=s(ZD);BDo=r(xit,"DeiTForImageClassificationWithTeacher"),xit.forEach(t),PDo=r(T9," (DeiT model)"),T9.forEach(t),$Do=i(ge),v5=n(ge,"LI",{});var g8e=s(v5);jfe=n(g8e,"STRONG",{});var kit=s(jfe);IDo=r(kit,"imagegpt"),kit.forEach(t),qDo=r(g8e," \u2014 "),eG=n(g8e,"A",{href:!0});var Sit=s(eG);NDo=r(Sit,"ImageGPTForImageClassification"),Sit.forEach(t),jDo=r(g8e," (ImageGPT model)"),g8e.forEach(t),DDo=i(ge),ma=n(ge,"LI",{});var $f=s(ma);Dfe=n($f,"STRONG",{});var Rit=s(Dfe);GDo=r(Rit,"perceiver"),Rit.forEach(t),ODo=r($f," \u2014 "),oG=n($f,"A",{href:!0});var Bit=s(oG);VDo=r(Bit,"PerceiverForImageClassificationLearned"),Bit.forEach(t),XDo=r($f," or "),rG=n($f,"A",{href:!0});var Pit=s(rG);zDo=r(Pit,"PerceiverForImageClassificationFourier"),Pit.forEach(t),QDo=r($f," or "),tG=n($f,"A",{href:!0});var $it=s(tG);WDo=r($it,"PerceiverForImageClassificationConvProcessing"),$it.forEach(t),HDo=r($f," (Perceiver model)"),$f.forEach(t),UDo=i(ge),F5=n(ge,"LI",{});var h8e=s(F5);Gfe=n(h8e,"STRONG",{});var Iit=s(Gfe);JDo=r(Iit,"poolformer"),Iit.forEach(t),YDo=r(h8e," \u2014 "),aG=n(h8e,"A",{href:!0});var qit=s(aG);KDo=r(qit,"PoolFormerForImageClassification"),qit.forEach(t),ZDo=r(h8e," (PoolFormer model)"),h8e.forEach(t),eGo=i(ge),T5=n(ge,"LI",{});var p8e=s(T5);Ofe=n(p8e,"STRONG",{});var Nit=s(Ofe);oGo=r(Nit,"regnet"),Nit.forEach(t),rGo=r(p8e," \u2014 "),nG=n(p8e,"A",{href:!0});var jit=s(nG);tGo=r(jit,"RegNetForImageClassification"),jit.forEach(t),aGo=r(p8e," (RegNet model)"),p8e.forEach(t),nGo=i(ge),M5=n(ge,"LI",{});var _8e=s(M5);Vfe=n(_8e,"STRONG",{});var Dit=s(Vfe);sGo=r(Dit,"resnet"),Dit.forEach(t),lGo=r(_8e," \u2014 "),sG=n(_8e,"A",{href:!0});var Git=s(sG);iGo=r(Git,"ResNetForImageClassification"),Git.forEach(t),dGo=r(_8e," (ResNet model)"),_8e.forEach(t),cGo=i(ge),E5=n(ge,"LI",{});var u8e=s(E5);Xfe=n(u8e,"STRONG",{});var Oit=s(Xfe);fGo=r(Oit,"segformer"),Oit.forEach(t),mGo=r(u8e," \u2014 "),lG=n(u8e,"A",{href:!0});var Vit=s(lG);gGo=r(Vit,"SegformerForImageClassification"),Vit.forEach(t),hGo=r(u8e," (SegFormer model)"),u8e.forEach(t),pGo=i(ge),C5=n(ge,"LI",{});var b8e=s(C5);zfe=n(b8e,"STRONG",{});var Xit=s(zfe);_Go=r(Xit,"swin"),Xit.forEach(t),uGo=r(b8e," \u2014 "),iG=n(b8e,"A",{href:!0});var zit=s(iG);bGo=r(zit,"SwinForImageClassification"),zit.forEach(t),vGo=r(b8e," (Swin model)"),b8e.forEach(t),FGo=i(ge),w5=n(ge,"LI",{});var v8e=s(w5);Qfe=n(v8e,"STRONG",{});var Qit=s(Qfe);TGo=r(Qit,"van"),Qit.forEach(t),MGo=r(v8e," \u2014 "),dG=n(v8e,"A",{href:!0});var Wit=s(dG);EGo=r(Wit,"VanForImageClassification"),Wit.forEach(t),CGo=r(v8e," (VAN model)"),v8e.forEach(t),wGo=i(ge),A5=n(ge,"LI",{});var F8e=s(A5);Wfe=n(F8e,"STRONG",{});var Hit=s(Wfe);AGo=r(Hit,"vit"),Hit.forEach(t),yGo=r(F8e," \u2014 "),cG=n(F8e,"A",{href:!0});var Uit=s(cG);LGo=r(Uit,"ViTForImageClassification"),Uit.forEach(t),xGo=r(F8e," (ViT model)"),F8e.forEach(t),ge.forEach(t),kGo=i(Yt),y5=n(Yt,"P",{});var T8e=s(y5);SGo=r(T8e,"The model is set in evaluation mode by default using "),Hfe=n(T8e,"CODE",{});var Jit=s(Hfe);RGo=r(Jit,"model.eval()"),Jit.forEach(t),BGo=r(T8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=n(T8e,"CODE",{});var Yit=s(Ufe);PGo=r(Yit,"model.train()"),Yit.forEach(t),T8e.forEach(t),$Go=i(Yt),Jfe=n(Yt,"P",{});var Kit=s(Jfe);IGo=r(Kit,"Examples:"),Kit.forEach(t),qGo=i(Yt),m(D6.$$.fragment,Yt),Yt.forEach(t),_l.forEach(t),ABe=i(c),Bd=n(c,"H2",{class:!0});var $$e=s(Bd);L5=n($$e,"A",{id:!0,class:!0,href:!0});var Zit=s(L5);Yfe=n(Zit,"SPAN",{});var edt=s(Yfe);m(G6.$$.fragment,edt),edt.forEach(t),Zit.forEach(t),NGo=i($$e),Kfe=n($$e,"SPAN",{});var odt=s(Kfe);jGo=r(odt,"AutoModelForVision2Seq"),odt.forEach(t),$$e.forEach(t),yBe=i(c),ir=n(c,"DIV",{class:!0});var bl=s(ir);m(O6.$$.fragment,bl),DGo=i(bl),Pd=n(bl,"P",{});var JU=s(Pd);GGo=r(JU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fG=n(JU,"A",{href:!0});var rdt=s(fG);OGo=r(rdt,"from_pretrained()"),rdt.forEach(t),VGo=r(JU," class method or the "),mG=n(JU,"A",{href:!0});var tdt=s(mG);XGo=r(tdt,"from_config()"),tdt.forEach(t),zGo=r(JU,` class
method.`),JU.forEach(t),QGo=i(bl),V6=n(bl,"P",{});var I$e=s(V6);WGo=r(I$e,"This class cannot be instantiated directly using "),Zfe=n(I$e,"CODE",{});var adt=s(Zfe);HGo=r(adt,"__init__()"),adt.forEach(t),UGo=r(I$e," (throws an error)."),I$e.forEach(t),JGo=i(bl),rt=n(bl,"DIV",{class:!0});var vl=s(rt);m(X6.$$.fragment,vl),YGo=i(vl),eme=n(vl,"P",{});var ndt=s(eme);KGo=r(ndt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ndt.forEach(t),ZGo=i(vl),$d=n(vl,"P",{});var YU=s($d);eOo=r(YU,`Note:
Loading a model from its configuration file does `),ome=n(YU,"STRONG",{});var sdt=s(ome);oOo=r(sdt,"not"),sdt.forEach(t),rOo=r(YU,` load the model weights. It only affects the
model\u2019s configuration. Use `),gG=n(YU,"A",{href:!0});var ldt=s(gG);tOo=r(ldt,"from_pretrained()"),ldt.forEach(t),aOo=r(YU," to load the model weights."),YU.forEach(t),nOo=i(vl),rme=n(vl,"P",{});var idt=s(rme);sOo=r(idt,"Examples:"),idt.forEach(t),lOo=i(vl),m(z6.$$.fragment,vl),vl.forEach(t),iOo=i(bl),Ue=n(bl,"DIV",{class:!0});var Kt=s(Ue);m(Q6.$$.fragment,Kt),dOo=i(Kt),tme=n(Kt,"P",{});var ddt=s(tme);cOo=r(ddt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),ddt.forEach(t),fOo=i(Kt),rn=n(Kt,"P",{});var QE=s(rn);mOo=r(QE,"The model class to instantiate is selected based on the "),ame=n(QE,"CODE",{});var cdt=s(ame);gOo=r(cdt,"model_type"),cdt.forEach(t),hOo=r(QE,` property of the config object (either
passed as an argument or loaded from `),nme=n(QE,"CODE",{});var fdt=s(nme);pOo=r(fdt,"pretrained_model_name_or_path"),fdt.forEach(t),_Oo=r(QE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sme=n(QE,"CODE",{});var mdt=s(sme);uOo=r(mdt,"pretrained_model_name_or_path"),mdt.forEach(t),bOo=r(QE,":"),QE.forEach(t),vOo=i(Kt),lme=n(Kt,"UL",{});var gdt=s(lme);x5=n(gdt,"LI",{});var M8e=s(x5);ime=n(M8e,"STRONG",{});var hdt=s(ime);FOo=r(hdt,"vision-encoder-decoder"),hdt.forEach(t),TOo=r(M8e," \u2014 "),hG=n(M8e,"A",{href:!0});var pdt=s(hG);MOo=r(pdt,"VisionEncoderDecoderModel"),pdt.forEach(t),EOo=r(M8e," (Vision Encoder decoder model)"),M8e.forEach(t),gdt.forEach(t),COo=i(Kt),k5=n(Kt,"P",{});var E8e=s(k5);wOo=r(E8e,"The model is set in evaluation mode by default using "),dme=n(E8e,"CODE",{});var _dt=s(dme);AOo=r(_dt,"model.eval()"),_dt.forEach(t),yOo=r(E8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cme=n(E8e,"CODE",{});var udt=s(cme);LOo=r(udt,"model.train()"),udt.forEach(t),E8e.forEach(t),xOo=i(Kt),fme=n(Kt,"P",{});var bdt=s(fme);kOo=r(bdt,"Examples:"),bdt.forEach(t),SOo=i(Kt),m(W6.$$.fragment,Kt),Kt.forEach(t),bl.forEach(t),LBe=i(c),Id=n(c,"H2",{class:!0});var q$e=s(Id);S5=n(q$e,"A",{id:!0,class:!0,href:!0});var vdt=s(S5);mme=n(vdt,"SPAN",{});var Fdt=s(mme);m(H6.$$.fragment,Fdt),Fdt.forEach(t),vdt.forEach(t),ROo=i(q$e),gme=n(q$e,"SPAN",{});var Tdt=s(gme);BOo=r(Tdt,"AutoModelForAudioClassification"),Tdt.forEach(t),q$e.forEach(t),xBe=i(c),dr=n(c,"DIV",{class:!0});var Fl=s(dr);m(U6.$$.fragment,Fl),POo=i(Fl),qd=n(Fl,"P",{});var KU=s(qd);$Oo=r(KU,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),pG=n(KU,"A",{href:!0});var Mdt=s(pG);IOo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),qOo=r(KU," class method or the "),_G=n(KU,"A",{href:!0});var Edt=s(_G);NOo=r(Edt,"from_config()"),Edt.forEach(t),jOo=r(KU,` class
method.`),KU.forEach(t),DOo=i(Fl),J6=n(Fl,"P",{});var N$e=s(J6);GOo=r(N$e,"This class cannot be instantiated directly using "),hme=n(N$e,"CODE",{});var Cdt=s(hme);OOo=r(Cdt,"__init__()"),Cdt.forEach(t),VOo=r(N$e," (throws an error)."),N$e.forEach(t),XOo=i(Fl),tt=n(Fl,"DIV",{class:!0});var Tl=s(tt);m(Y6.$$.fragment,Tl),zOo=i(Tl),pme=n(Tl,"P",{});var wdt=s(pme);QOo=r(wdt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),wdt.forEach(t),WOo=i(Tl),Nd=n(Tl,"P",{});var ZU=s(Nd);HOo=r(ZU,`Note:
Loading a model from its configuration file does `),_me=n(ZU,"STRONG",{});var Adt=s(_me);UOo=r(Adt,"not"),Adt.forEach(t),JOo=r(ZU,` load the model weights. It only affects the
model\u2019s configuration. Use `),uG=n(ZU,"A",{href:!0});var ydt=s(uG);YOo=r(ydt,"from_pretrained()"),ydt.forEach(t),KOo=r(ZU," to load the model weights."),ZU.forEach(t),ZOo=i(Tl),ume=n(Tl,"P",{});var Ldt=s(ume);eVo=r(Ldt,"Examples:"),Ldt.forEach(t),oVo=i(Tl),m(K6.$$.fragment,Tl),Tl.forEach(t),rVo=i(Fl),Je=n(Fl,"DIV",{class:!0});var Zt=s(Je);m(Z6.$$.fragment,Zt),tVo=i(Zt),bme=n(Zt,"P",{});var xdt=s(bme);aVo=r(xdt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),xdt.forEach(t),nVo=i(Zt),tn=n(Zt,"P",{});var WE=s(tn);sVo=r(WE,"The model class to instantiate is selected based on the "),vme=n(WE,"CODE",{});var kdt=s(vme);lVo=r(kdt,"model_type"),kdt.forEach(t),iVo=r(WE,` property of the config object (either
passed as an argument or loaded from `),Fme=n(WE,"CODE",{});var Sdt=s(Fme);dVo=r(Sdt,"pretrained_model_name_or_path"),Sdt.forEach(t),cVo=r(WE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Tme=n(WE,"CODE",{});var Rdt=s(Tme);fVo=r(Rdt,"pretrained_model_name_or_path"),Rdt.forEach(t),mVo=r(WE,":"),WE.forEach(t),gVo=i(Zt),Se=n(Zt,"UL",{});var Do=s(Se);R5=n(Do,"LI",{});var C8e=s(R5);Mme=n(C8e,"STRONG",{});var Bdt=s(Mme);hVo=r(Bdt,"data2vec-audio"),Bdt.forEach(t),pVo=r(C8e," \u2014 "),bG=n(C8e,"A",{href:!0});var Pdt=s(bG);_Vo=r(Pdt,"Data2VecAudioForSequenceClassification"),Pdt.forEach(t),uVo=r(C8e," (Data2VecAudio model)"),C8e.forEach(t),bVo=i(Do),B5=n(Do,"LI",{});var w8e=s(B5);Eme=n(w8e,"STRONG",{});var $dt=s(Eme);vVo=r($dt,"hubert"),$dt.forEach(t),FVo=r(w8e," \u2014 "),vG=n(w8e,"A",{href:!0});var Idt=s(vG);TVo=r(Idt,"HubertForSequenceClassification"),Idt.forEach(t),MVo=r(w8e," (Hubert model)"),w8e.forEach(t),EVo=i(Do),P5=n(Do,"LI",{});var A8e=s(P5);Cme=n(A8e,"STRONG",{});var qdt=s(Cme);CVo=r(qdt,"sew"),qdt.forEach(t),wVo=r(A8e," \u2014 "),FG=n(A8e,"A",{href:!0});var Ndt=s(FG);AVo=r(Ndt,"SEWForSequenceClassification"),Ndt.forEach(t),yVo=r(A8e," (SEW model)"),A8e.forEach(t),LVo=i(Do),$5=n(Do,"LI",{});var y8e=s($5);wme=n(y8e,"STRONG",{});var jdt=s(wme);xVo=r(jdt,"sew-d"),jdt.forEach(t),kVo=r(y8e," \u2014 "),TG=n(y8e,"A",{href:!0});var Ddt=s(TG);SVo=r(Ddt,"SEWDForSequenceClassification"),Ddt.forEach(t),RVo=r(y8e," (SEW-D model)"),y8e.forEach(t),BVo=i(Do),I5=n(Do,"LI",{});var L8e=s(I5);Ame=n(L8e,"STRONG",{});var Gdt=s(Ame);PVo=r(Gdt,"unispeech"),Gdt.forEach(t),$Vo=r(L8e," \u2014 "),MG=n(L8e,"A",{href:!0});var Odt=s(MG);IVo=r(Odt,"UniSpeechForSequenceClassification"),Odt.forEach(t),qVo=r(L8e," (UniSpeech model)"),L8e.forEach(t),NVo=i(Do),q5=n(Do,"LI",{});var x8e=s(q5);yme=n(x8e,"STRONG",{});var Vdt=s(yme);jVo=r(Vdt,"unispeech-sat"),Vdt.forEach(t),DVo=r(x8e," \u2014 "),EG=n(x8e,"A",{href:!0});var Xdt=s(EG);GVo=r(Xdt,"UniSpeechSatForSequenceClassification"),Xdt.forEach(t),OVo=r(x8e," (UniSpeechSat model)"),x8e.forEach(t),VVo=i(Do),N5=n(Do,"LI",{});var k8e=s(N5);Lme=n(k8e,"STRONG",{});var zdt=s(Lme);XVo=r(zdt,"wav2vec2"),zdt.forEach(t),zVo=r(k8e," \u2014 "),CG=n(k8e,"A",{href:!0});var Qdt=s(CG);QVo=r(Qdt,"Wav2Vec2ForSequenceClassification"),Qdt.forEach(t),WVo=r(k8e," (Wav2Vec2 model)"),k8e.forEach(t),HVo=i(Do),j5=n(Do,"LI",{});var S8e=s(j5);xme=n(S8e,"STRONG",{});var Wdt=s(xme);UVo=r(Wdt,"wavlm"),Wdt.forEach(t),JVo=r(S8e," \u2014 "),wG=n(S8e,"A",{href:!0});var Hdt=s(wG);YVo=r(Hdt,"WavLMForSequenceClassification"),Hdt.forEach(t),KVo=r(S8e," (WavLM model)"),S8e.forEach(t),Do.forEach(t),ZVo=i(Zt),D5=n(Zt,"P",{});var R8e=s(D5);eXo=r(R8e,"The model is set in evaluation mode by default using "),kme=n(R8e,"CODE",{});var Udt=s(kme);oXo=r(Udt,"model.eval()"),Udt.forEach(t),rXo=r(R8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sme=n(R8e,"CODE",{});var Jdt=s(Sme);tXo=r(Jdt,"model.train()"),Jdt.forEach(t),R8e.forEach(t),aXo=i(Zt),Rme=n(Zt,"P",{});var Ydt=s(Rme);nXo=r(Ydt,"Examples:"),Ydt.forEach(t),sXo=i(Zt),m(eA.$$.fragment,Zt),Zt.forEach(t),Fl.forEach(t),kBe=i(c),jd=n(c,"H2",{class:!0});var j$e=s(jd);G5=n(j$e,"A",{id:!0,class:!0,href:!0});var Kdt=s(G5);Bme=n(Kdt,"SPAN",{});var Zdt=s(Bme);m(oA.$$.fragment,Zdt),Zdt.forEach(t),Kdt.forEach(t),lXo=i(j$e),Pme=n(j$e,"SPAN",{});var ect=s(Pme);iXo=r(ect,"AutoModelForAudioFrameClassification"),ect.forEach(t),j$e.forEach(t),SBe=i(c),cr=n(c,"DIV",{class:!0});var Ml=s(cr);m(rA.$$.fragment,Ml),dXo=i(Ml),Dd=n(Ml,"P",{});var eJ=s(Dd);cXo=r(eJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),AG=n(eJ,"A",{href:!0});var oct=s(AG);fXo=r(oct,"from_pretrained()"),oct.forEach(t),mXo=r(eJ," class method or the "),yG=n(eJ,"A",{href:!0});var rct=s(yG);gXo=r(rct,"from_config()"),rct.forEach(t),hXo=r(eJ,` class
method.`),eJ.forEach(t),pXo=i(Ml),tA=n(Ml,"P",{});var D$e=s(tA);_Xo=r(D$e,"This class cannot be instantiated directly using "),$me=n(D$e,"CODE",{});var tct=s($me);uXo=r(tct,"__init__()"),tct.forEach(t),bXo=r(D$e," (throws an error)."),D$e.forEach(t),vXo=i(Ml),at=n(Ml,"DIV",{class:!0});var El=s(at);m(aA.$$.fragment,El),FXo=i(El),Ime=n(El,"P",{});var act=s(Ime);TXo=r(act,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),act.forEach(t),MXo=i(El),Gd=n(El,"P",{});var oJ=s(Gd);EXo=r(oJ,`Note:
Loading a model from its configuration file does `),qme=n(oJ,"STRONG",{});var nct=s(qme);CXo=r(nct,"not"),nct.forEach(t),wXo=r(oJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),LG=n(oJ,"A",{href:!0});var sct=s(LG);AXo=r(sct,"from_pretrained()"),sct.forEach(t),yXo=r(oJ," to load the model weights."),oJ.forEach(t),LXo=i(El),Nme=n(El,"P",{});var lct=s(Nme);xXo=r(lct,"Examples:"),lct.forEach(t),kXo=i(El),m(nA.$$.fragment,El),El.forEach(t),SXo=i(Ml),Ye=n(Ml,"DIV",{class:!0});var ea=s(Ye);m(sA.$$.fragment,ea),RXo=i(ea),jme=n(ea,"P",{});var ict=s(jme);BXo=r(ict,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ict.forEach(t),PXo=i(ea),an=n(ea,"P",{});var HE=s(an);$Xo=r(HE,"The model class to instantiate is selected based on the "),Dme=n(HE,"CODE",{});var dct=s(Dme);IXo=r(dct,"model_type"),dct.forEach(t),qXo=r(HE,` property of the config object (either
passed as an argument or loaded from `),Gme=n(HE,"CODE",{});var cct=s(Gme);NXo=r(cct,"pretrained_model_name_or_path"),cct.forEach(t),jXo=r(HE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=n(HE,"CODE",{});var fct=s(Ome);DXo=r(fct,"pretrained_model_name_or_path"),fct.forEach(t),GXo=r(HE,":"),HE.forEach(t),OXo=i(ea),nn=n(ea,"UL",{});var UE=s(nn);O5=n(UE,"LI",{});var B8e=s(O5);Vme=n(B8e,"STRONG",{});var mct=s(Vme);VXo=r(mct,"data2vec-audio"),mct.forEach(t),XXo=r(B8e," \u2014 "),xG=n(B8e,"A",{href:!0});var gct=s(xG);zXo=r(gct,"Data2VecAudioForAudioFrameClassification"),gct.forEach(t),QXo=r(B8e," (Data2VecAudio model)"),B8e.forEach(t),WXo=i(UE),V5=n(UE,"LI",{});var P8e=s(V5);Xme=n(P8e,"STRONG",{});var hct=s(Xme);HXo=r(hct,"unispeech-sat"),hct.forEach(t),UXo=r(P8e," \u2014 "),kG=n(P8e,"A",{href:!0});var pct=s(kG);JXo=r(pct,"UniSpeechSatForAudioFrameClassification"),pct.forEach(t),YXo=r(P8e," (UniSpeechSat model)"),P8e.forEach(t),KXo=i(UE),X5=n(UE,"LI",{});var $8e=s(X5);zme=n($8e,"STRONG",{});var _ct=s(zme);ZXo=r(_ct,"wav2vec2"),_ct.forEach(t),ezo=r($8e," \u2014 "),SG=n($8e,"A",{href:!0});var uct=s(SG);ozo=r(uct,"Wav2Vec2ForAudioFrameClassification"),uct.forEach(t),rzo=r($8e," (Wav2Vec2 model)"),$8e.forEach(t),tzo=i(UE),z5=n(UE,"LI",{});var I8e=s(z5);Qme=n(I8e,"STRONG",{});var bct=s(Qme);azo=r(bct,"wavlm"),bct.forEach(t),nzo=r(I8e," \u2014 "),RG=n(I8e,"A",{href:!0});var vct=s(RG);szo=r(vct,"WavLMForAudioFrameClassification"),vct.forEach(t),lzo=r(I8e," (WavLM model)"),I8e.forEach(t),UE.forEach(t),izo=i(ea),Q5=n(ea,"P",{});var q8e=s(Q5);dzo=r(q8e,"The model is set in evaluation mode by default using "),Wme=n(q8e,"CODE",{});var Fct=s(Wme);czo=r(Fct,"model.eval()"),Fct.forEach(t),fzo=r(q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hme=n(q8e,"CODE",{});var Tct=s(Hme);mzo=r(Tct,"model.train()"),Tct.forEach(t),q8e.forEach(t),gzo=i(ea),Ume=n(ea,"P",{});var Mct=s(Ume);hzo=r(Mct,"Examples:"),Mct.forEach(t),pzo=i(ea),m(lA.$$.fragment,ea),ea.forEach(t),Ml.forEach(t),RBe=i(c),Od=n(c,"H2",{class:!0});var G$e=s(Od);W5=n(G$e,"A",{id:!0,class:!0,href:!0});var Ect=s(W5);Jme=n(Ect,"SPAN",{});var Cct=s(Jme);m(iA.$$.fragment,Cct),Cct.forEach(t),Ect.forEach(t),_zo=i(G$e),Yme=n(G$e,"SPAN",{});var wct=s(Yme);uzo=r(wct,"AutoModelForCTC"),wct.forEach(t),G$e.forEach(t),BBe=i(c),fr=n(c,"DIV",{class:!0});var Cl=s(fr);m(dA.$$.fragment,Cl),bzo=i(Cl),Vd=n(Cl,"P",{});var rJ=s(Vd);vzo=r(rJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),BG=n(rJ,"A",{href:!0});var Act=s(BG);Fzo=r(Act,"from_pretrained()"),Act.forEach(t),Tzo=r(rJ," class method or the "),PG=n(rJ,"A",{href:!0});var yct=s(PG);Mzo=r(yct,"from_config()"),yct.forEach(t),Ezo=r(rJ,` class
method.`),rJ.forEach(t),Czo=i(Cl),cA=n(Cl,"P",{});var O$e=s(cA);wzo=r(O$e,"This class cannot be instantiated directly using "),Kme=n(O$e,"CODE",{});var Lct=s(Kme);Azo=r(Lct,"__init__()"),Lct.forEach(t),yzo=r(O$e," (throws an error)."),O$e.forEach(t),Lzo=i(Cl),nt=n(Cl,"DIV",{class:!0});var wl=s(nt);m(fA.$$.fragment,wl),xzo=i(wl),Zme=n(wl,"P",{});var xct=s(Zme);kzo=r(xct,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),xct.forEach(t),Szo=i(wl),Xd=n(wl,"P",{});var tJ=s(Xd);Rzo=r(tJ,`Note:
Loading a model from its configuration file does `),ege=n(tJ,"STRONG",{});var kct=s(ege);Bzo=r(kct,"not"),kct.forEach(t),Pzo=r(tJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),$G=n(tJ,"A",{href:!0});var Sct=s($G);$zo=r(Sct,"from_pretrained()"),Sct.forEach(t),Izo=r(tJ," to load the model weights."),tJ.forEach(t),qzo=i(wl),oge=n(wl,"P",{});var Rct=s(oge);Nzo=r(Rct,"Examples:"),Rct.forEach(t),jzo=i(wl),m(mA.$$.fragment,wl),wl.forEach(t),Dzo=i(Cl),Ke=n(Cl,"DIV",{class:!0});var oa=s(Ke);m(gA.$$.fragment,oa),Gzo=i(oa),rge=n(oa,"P",{});var Bct=s(rge);Ozo=r(Bct,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Bct.forEach(t),Vzo=i(oa),sn=n(oa,"P",{});var JE=s(sn);Xzo=r(JE,"The model class to instantiate is selected based on the "),tge=n(JE,"CODE",{});var Pct=s(tge);zzo=r(Pct,"model_type"),Pct.forEach(t),Qzo=r(JE,` property of the config object (either
passed as an argument or loaded from `),age=n(JE,"CODE",{});var $ct=s(age);Wzo=r($ct,"pretrained_model_name_or_path"),$ct.forEach(t),Hzo=r(JE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nge=n(JE,"CODE",{});var Ict=s(nge);Uzo=r(Ict,"pretrained_model_name_or_path"),Ict.forEach(t),Jzo=r(JE,":"),JE.forEach(t),Yzo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);H5=n(Go,"LI",{});var N8e=s(H5);sge=n(N8e,"STRONG",{});var qct=s(sge);Kzo=r(qct,"data2vec-audio"),qct.forEach(t),Zzo=r(N8e," \u2014 "),IG=n(N8e,"A",{href:!0});var Nct=s(IG);eQo=r(Nct,"Data2VecAudioForCTC"),Nct.forEach(t),oQo=r(N8e," (Data2VecAudio model)"),N8e.forEach(t),rQo=i(Go),U5=n(Go,"LI",{});var j8e=s(U5);lge=n(j8e,"STRONG",{});var jct=s(lge);tQo=r(jct,"hubert"),jct.forEach(t),aQo=r(j8e," \u2014 "),qG=n(j8e,"A",{href:!0});var Dct=s(qG);nQo=r(Dct,"HubertForCTC"),Dct.forEach(t),sQo=r(j8e," (Hubert model)"),j8e.forEach(t),lQo=i(Go),J5=n(Go,"LI",{});var D8e=s(J5);ige=n(D8e,"STRONG",{});var Gct=s(ige);iQo=r(Gct,"sew"),Gct.forEach(t),dQo=r(D8e," \u2014 "),NG=n(D8e,"A",{href:!0});var Oct=s(NG);cQo=r(Oct,"SEWForCTC"),Oct.forEach(t),fQo=r(D8e," (SEW model)"),D8e.forEach(t),mQo=i(Go),Y5=n(Go,"LI",{});var G8e=s(Y5);dge=n(G8e,"STRONG",{});var Vct=s(dge);gQo=r(Vct,"sew-d"),Vct.forEach(t),hQo=r(G8e," \u2014 "),jG=n(G8e,"A",{href:!0});var Xct=s(jG);pQo=r(Xct,"SEWDForCTC"),Xct.forEach(t),_Qo=r(G8e," (SEW-D model)"),G8e.forEach(t),uQo=i(Go),K5=n(Go,"LI",{});var O8e=s(K5);cge=n(O8e,"STRONG",{});var zct=s(cge);bQo=r(zct,"unispeech"),zct.forEach(t),vQo=r(O8e," \u2014 "),DG=n(O8e,"A",{href:!0});var Qct=s(DG);FQo=r(Qct,"UniSpeechForCTC"),Qct.forEach(t),TQo=r(O8e," (UniSpeech model)"),O8e.forEach(t),MQo=i(Go),Z5=n(Go,"LI",{});var V8e=s(Z5);fge=n(V8e,"STRONG",{});var Wct=s(fge);EQo=r(Wct,"unispeech-sat"),Wct.forEach(t),CQo=r(V8e," \u2014 "),GG=n(V8e,"A",{href:!0});var Hct=s(GG);wQo=r(Hct,"UniSpeechSatForCTC"),Hct.forEach(t),AQo=r(V8e," (UniSpeechSat model)"),V8e.forEach(t),yQo=i(Go),e3=n(Go,"LI",{});var X8e=s(e3);mge=n(X8e,"STRONG",{});var Uct=s(mge);LQo=r(Uct,"wav2vec2"),Uct.forEach(t),xQo=r(X8e," \u2014 "),OG=n(X8e,"A",{href:!0});var Jct=s(OG);kQo=r(Jct,"Wav2Vec2ForCTC"),Jct.forEach(t),SQo=r(X8e," (Wav2Vec2 model)"),X8e.forEach(t),RQo=i(Go),o3=n(Go,"LI",{});var z8e=s(o3);gge=n(z8e,"STRONG",{});var Yct=s(gge);BQo=r(Yct,"wavlm"),Yct.forEach(t),PQo=r(z8e," \u2014 "),VG=n(z8e,"A",{href:!0});var Kct=s(VG);$Qo=r(Kct,"WavLMForCTC"),Kct.forEach(t),IQo=r(z8e," (WavLM model)"),z8e.forEach(t),Go.forEach(t),qQo=i(oa),r3=n(oa,"P",{});var Q8e=s(r3);NQo=r(Q8e,"The model is set in evaluation mode by default using "),hge=n(Q8e,"CODE",{});var Zct=s(hge);jQo=r(Zct,"model.eval()"),Zct.forEach(t),DQo=r(Q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pge=n(Q8e,"CODE",{});var eft=s(pge);GQo=r(eft,"model.train()"),eft.forEach(t),Q8e.forEach(t),OQo=i(oa),_ge=n(oa,"P",{});var oft=s(_ge);VQo=r(oft,"Examples:"),oft.forEach(t),XQo=i(oa),m(hA.$$.fragment,oa),oa.forEach(t),Cl.forEach(t),PBe=i(c),zd=n(c,"H2",{class:!0});var V$e=s(zd);t3=n(V$e,"A",{id:!0,class:!0,href:!0});var rft=s(t3);uge=n(rft,"SPAN",{});var tft=s(uge);m(pA.$$.fragment,tft),tft.forEach(t),rft.forEach(t),zQo=i(V$e),bge=n(V$e,"SPAN",{});var aft=s(bge);QQo=r(aft,"AutoModelForSpeechSeq2Seq"),aft.forEach(t),V$e.forEach(t),$Be=i(c),mr=n(c,"DIV",{class:!0});var Al=s(mr);m(_A.$$.fragment,Al),WQo=i(Al),Qd=n(Al,"P",{});var aJ=s(Qd);HQo=r(aJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XG=n(aJ,"A",{href:!0});var nft=s(XG);UQo=r(nft,"from_pretrained()"),nft.forEach(t),JQo=r(aJ," class method or the "),zG=n(aJ,"A",{href:!0});var sft=s(zG);YQo=r(sft,"from_config()"),sft.forEach(t),KQo=r(aJ,` class
method.`),aJ.forEach(t),ZQo=i(Al),uA=n(Al,"P",{});var X$e=s(uA);eWo=r(X$e,"This class cannot be instantiated directly using "),vge=n(X$e,"CODE",{});var lft=s(vge);oWo=r(lft,"__init__()"),lft.forEach(t),rWo=r(X$e," (throws an error)."),X$e.forEach(t),tWo=i(Al),st=n(Al,"DIV",{class:!0});var yl=s(st);m(bA.$$.fragment,yl),aWo=i(yl),Fge=n(yl,"P",{});var ift=s(Fge);nWo=r(ift,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ift.forEach(t),sWo=i(yl),Wd=n(yl,"P",{});var nJ=s(Wd);lWo=r(nJ,`Note:
Loading a model from its configuration file does `),Tge=n(nJ,"STRONG",{});var dft=s(Tge);iWo=r(dft,"not"),dft.forEach(t),dWo=r(nJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QG=n(nJ,"A",{href:!0});var cft=s(QG);cWo=r(cft,"from_pretrained()"),cft.forEach(t),fWo=r(nJ," to load the model weights."),nJ.forEach(t),mWo=i(yl),Mge=n(yl,"P",{});var fft=s(Mge);gWo=r(fft,"Examples:"),fft.forEach(t),hWo=i(yl),m(vA.$$.fragment,yl),yl.forEach(t),pWo=i(Al),Ze=n(Al,"DIV",{class:!0});var ra=s(Ze);m(FA.$$.fragment,ra),_Wo=i(ra),Ege=n(ra,"P",{});var mft=s(Ege);uWo=r(mft,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mft.forEach(t),bWo=i(ra),ln=n(ra,"P",{});var YE=s(ln);vWo=r(YE,"The model class to instantiate is selected based on the "),Cge=n(YE,"CODE",{});var gft=s(Cge);FWo=r(gft,"model_type"),gft.forEach(t),TWo=r(YE,` property of the config object (either
passed as an argument or loaded from `),wge=n(YE,"CODE",{});var hft=s(wge);MWo=r(hft,"pretrained_model_name_or_path"),hft.forEach(t),EWo=r(YE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Age=n(YE,"CODE",{});var pft=s(Age);CWo=r(pft,"pretrained_model_name_or_path"),pft.forEach(t),wWo=r(YE,":"),YE.forEach(t),AWo=i(ra),TA=n(ra,"UL",{});var z$e=s(TA);a3=n(z$e,"LI",{});var W8e=s(a3);yge=n(W8e,"STRONG",{});var _ft=s(yge);yWo=r(_ft,"speech-encoder-decoder"),_ft.forEach(t),LWo=r(W8e," \u2014 "),WG=n(W8e,"A",{href:!0});var uft=s(WG);xWo=r(uft,"SpeechEncoderDecoderModel"),uft.forEach(t),kWo=r(W8e," (Speech Encoder decoder model)"),W8e.forEach(t),SWo=i(z$e),n3=n(z$e,"LI",{});var H8e=s(n3);Lge=n(H8e,"STRONG",{});var bft=s(Lge);RWo=r(bft,"speech_to_text"),bft.forEach(t),BWo=r(H8e," \u2014 "),HG=n(H8e,"A",{href:!0});var vft=s(HG);PWo=r(vft,"Speech2TextForConditionalGeneration"),vft.forEach(t),$Wo=r(H8e," (Speech2Text model)"),H8e.forEach(t),z$e.forEach(t),IWo=i(ra),s3=n(ra,"P",{});var U8e=s(s3);qWo=r(U8e,"The model is set in evaluation mode by default using "),xge=n(U8e,"CODE",{});var Fft=s(xge);NWo=r(Fft,"model.eval()"),Fft.forEach(t),jWo=r(U8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kge=n(U8e,"CODE",{});var Tft=s(kge);DWo=r(Tft,"model.train()"),Tft.forEach(t),U8e.forEach(t),GWo=i(ra),Sge=n(ra,"P",{});var Mft=s(Sge);OWo=r(Mft,"Examples:"),Mft.forEach(t),VWo=i(ra),m(MA.$$.fragment,ra),ra.forEach(t),Al.forEach(t),IBe=i(c),Hd=n(c,"H2",{class:!0});var Q$e=s(Hd);l3=n(Q$e,"A",{id:!0,class:!0,href:!0});var Eft=s(l3);Rge=n(Eft,"SPAN",{});var Cft=s(Rge);m(EA.$$.fragment,Cft),Cft.forEach(t),Eft.forEach(t),XWo=i(Q$e),Bge=n(Q$e,"SPAN",{});var wft=s(Bge);zWo=r(wft,"AutoModelForAudioXVector"),wft.forEach(t),Q$e.forEach(t),qBe=i(c),gr=n(c,"DIV",{class:!0});var Ll=s(gr);m(CA.$$.fragment,Ll),QWo=i(Ll),Ud=n(Ll,"P",{});var sJ=s(Ud);WWo=r(sJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),UG=n(sJ,"A",{href:!0});var Aft=s(UG);HWo=r(Aft,"from_pretrained()"),Aft.forEach(t),UWo=r(sJ," class method or the "),JG=n(sJ,"A",{href:!0});var yft=s(JG);JWo=r(yft,"from_config()"),yft.forEach(t),YWo=r(sJ,` class
method.`),sJ.forEach(t),KWo=i(Ll),wA=n(Ll,"P",{});var W$e=s(wA);ZWo=r(W$e,"This class cannot be instantiated directly using "),Pge=n(W$e,"CODE",{});var Lft=s(Pge);eHo=r(Lft,"__init__()"),Lft.forEach(t),oHo=r(W$e," (throws an error)."),W$e.forEach(t),rHo=i(Ll),lt=n(Ll,"DIV",{class:!0});var xl=s(lt);m(AA.$$.fragment,xl),tHo=i(xl),$ge=n(xl,"P",{});var xft=s($ge);aHo=r(xft,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),xft.forEach(t),nHo=i(xl),Jd=n(xl,"P",{});var lJ=s(Jd);sHo=r(lJ,`Note:
Loading a model from its configuration file does `),Ige=n(lJ,"STRONG",{});var kft=s(Ige);lHo=r(kft,"not"),kft.forEach(t),iHo=r(lJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YG=n(lJ,"A",{href:!0});var Sft=s(YG);dHo=r(Sft,"from_pretrained()"),Sft.forEach(t),cHo=r(lJ," to load the model weights."),lJ.forEach(t),fHo=i(xl),qge=n(xl,"P",{});var Rft=s(qge);mHo=r(Rft,"Examples:"),Rft.forEach(t),gHo=i(xl),m(yA.$$.fragment,xl),xl.forEach(t),hHo=i(Ll),eo=n(Ll,"DIV",{class:!0});var ta=s(eo);m(LA.$$.fragment,ta),pHo=i(ta),Nge=n(ta,"P",{});var Bft=s(Nge);_Ho=r(Bft,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Bft.forEach(t),uHo=i(ta),dn=n(ta,"P",{});var KE=s(dn);bHo=r(KE,"The model class to instantiate is selected based on the "),jge=n(KE,"CODE",{});var Pft=s(jge);vHo=r(Pft,"model_type"),Pft.forEach(t),FHo=r(KE,` property of the config object (either
passed as an argument or loaded from `),Dge=n(KE,"CODE",{});var $ft=s(Dge);THo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),MHo=r(KE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gge=n(KE,"CODE",{});var Ift=s(Gge);EHo=r(Ift,"pretrained_model_name_or_path"),Ift.forEach(t),CHo=r(KE,":"),KE.forEach(t),wHo=i(ta),cn=n(ta,"UL",{});var ZE=s(cn);i3=n(ZE,"LI",{});var J8e=s(i3);Oge=n(J8e,"STRONG",{});var qft=s(Oge);AHo=r(qft,"data2vec-audio"),qft.forEach(t),yHo=r(J8e," \u2014 "),KG=n(J8e,"A",{href:!0});var Nft=s(KG);LHo=r(Nft,"Data2VecAudioForXVector"),Nft.forEach(t),xHo=r(J8e," (Data2VecAudio model)"),J8e.forEach(t),kHo=i(ZE),d3=n(ZE,"LI",{});var Y8e=s(d3);Vge=n(Y8e,"STRONG",{});var jft=s(Vge);SHo=r(jft,"unispeech-sat"),jft.forEach(t),RHo=r(Y8e," \u2014 "),ZG=n(Y8e,"A",{href:!0});var Dft=s(ZG);BHo=r(Dft,"UniSpeechSatForXVector"),Dft.forEach(t),PHo=r(Y8e," (UniSpeechSat model)"),Y8e.forEach(t),$Ho=i(ZE),c3=n(ZE,"LI",{});var K8e=s(c3);Xge=n(K8e,"STRONG",{});var Gft=s(Xge);IHo=r(Gft,"wav2vec2"),Gft.forEach(t),qHo=r(K8e," \u2014 "),eO=n(K8e,"A",{href:!0});var Oft=s(eO);NHo=r(Oft,"Wav2Vec2ForXVector"),Oft.forEach(t),jHo=r(K8e," (Wav2Vec2 model)"),K8e.forEach(t),DHo=i(ZE),f3=n(ZE,"LI",{});var Z8e=s(f3);zge=n(Z8e,"STRONG",{});var Vft=s(zge);GHo=r(Vft,"wavlm"),Vft.forEach(t),OHo=r(Z8e," \u2014 "),oO=n(Z8e,"A",{href:!0});var Xft=s(oO);VHo=r(Xft,"WavLMForXVector"),Xft.forEach(t),XHo=r(Z8e," (WavLM model)"),Z8e.forEach(t),ZE.forEach(t),zHo=i(ta),m3=n(ta,"P",{});var eLe=s(m3);QHo=r(eLe,"The model is set in evaluation mode by default using "),Qge=n(eLe,"CODE",{});var zft=s(Qge);WHo=r(zft,"model.eval()"),zft.forEach(t),HHo=r(eLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wge=n(eLe,"CODE",{});var Qft=s(Wge);UHo=r(Qft,"model.train()"),Qft.forEach(t),eLe.forEach(t),JHo=i(ta),Hge=n(ta,"P",{});var Wft=s(Hge);YHo=r(Wft,"Examples:"),Wft.forEach(t),KHo=i(ta),m(xA.$$.fragment,ta),ta.forEach(t),Ll.forEach(t),NBe=i(c),Yd=n(c,"H2",{class:!0});var H$e=s(Yd);g3=n(H$e,"A",{id:!0,class:!0,href:!0});var Hft=s(g3);Uge=n(Hft,"SPAN",{});var Uft=s(Uge);m(kA.$$.fragment,Uft),Uft.forEach(t),Hft.forEach(t),ZHo=i(H$e),Jge=n(H$e,"SPAN",{});var Jft=s(Jge);eUo=r(Jft,"AutoModelForMaskedImageModeling"),Jft.forEach(t),H$e.forEach(t),jBe=i(c),hr=n(c,"DIV",{class:!0});var kl=s(hr);m(SA.$$.fragment,kl),oUo=i(kl),Kd=n(kl,"P",{});var iJ=s(Kd);rUo=r(iJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),rO=n(iJ,"A",{href:!0});var Yft=s(rO);tUo=r(Yft,"from_pretrained()"),Yft.forEach(t),aUo=r(iJ," class method or the "),tO=n(iJ,"A",{href:!0});var Kft=s(tO);nUo=r(Kft,"from_config()"),Kft.forEach(t),sUo=r(iJ,` class
method.`),iJ.forEach(t),lUo=i(kl),RA=n(kl,"P",{});var U$e=s(RA);iUo=r(U$e,"This class cannot be instantiated directly using "),Yge=n(U$e,"CODE",{});var Zft=s(Yge);dUo=r(Zft,"__init__()"),Zft.forEach(t),cUo=r(U$e," (throws an error)."),U$e.forEach(t),fUo=i(kl),it=n(kl,"DIV",{class:!0});var Sl=s(it);m(BA.$$.fragment,Sl),mUo=i(Sl),Kge=n(Sl,"P",{});var emt=s(Kge);gUo=r(emt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),emt.forEach(t),hUo=i(Sl),Zd=n(Sl,"P",{});var dJ=s(Zd);pUo=r(dJ,`Note:
Loading a model from its configuration file does `),Zge=n(dJ,"STRONG",{});var omt=s(Zge);_Uo=r(omt,"not"),omt.forEach(t),uUo=r(dJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aO=n(dJ,"A",{href:!0});var rmt=s(aO);bUo=r(rmt,"from_pretrained()"),rmt.forEach(t),vUo=r(dJ," to load the model weights."),dJ.forEach(t),FUo=i(Sl),ehe=n(Sl,"P",{});var tmt=s(ehe);TUo=r(tmt,"Examples:"),tmt.forEach(t),MUo=i(Sl),m(PA.$$.fragment,Sl),Sl.forEach(t),EUo=i(kl),oo=n(kl,"DIV",{class:!0});var aa=s(oo);m($A.$$.fragment,aa),CUo=i(aa),ohe=n(aa,"P",{});var amt=s(ohe);wUo=r(amt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),amt.forEach(t),AUo=i(aa),fn=n(aa,"P",{});var eC=s(fn);yUo=r(eC,"The model class to instantiate is selected based on the "),rhe=n(eC,"CODE",{});var nmt=s(rhe);LUo=r(nmt,"model_type"),nmt.forEach(t),xUo=r(eC,` property of the config object (either
passed as an argument or loaded from `),the=n(eC,"CODE",{});var smt=s(the);kUo=r(smt,"pretrained_model_name_or_path"),smt.forEach(t),SUo=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ahe=n(eC,"CODE",{});var lmt=s(ahe);RUo=r(lmt,"pretrained_model_name_or_path"),lmt.forEach(t),BUo=r(eC,":"),eC.forEach(t),PUo=i(aa),ec=n(aa,"UL",{});var cJ=s(ec);h3=n(cJ,"LI",{});var oLe=s(h3);nhe=n(oLe,"STRONG",{});var imt=s(nhe);$Uo=r(imt,"deit"),imt.forEach(t),IUo=r(oLe," \u2014 "),nO=n(oLe,"A",{href:!0});var dmt=s(nO);qUo=r(dmt,"DeiTForMaskedImageModeling"),dmt.forEach(t),NUo=r(oLe," (DeiT model)"),oLe.forEach(t),jUo=i(cJ),p3=n(cJ,"LI",{});var rLe=s(p3);she=n(rLe,"STRONG",{});var cmt=s(she);DUo=r(cmt,"swin"),cmt.forEach(t),GUo=r(rLe," \u2014 "),sO=n(rLe,"A",{href:!0});var fmt=s(sO);OUo=r(fmt,"SwinForMaskedImageModeling"),fmt.forEach(t),VUo=r(rLe," (Swin model)"),rLe.forEach(t),XUo=i(cJ),_3=n(cJ,"LI",{});var tLe=s(_3);lhe=n(tLe,"STRONG",{});var mmt=s(lhe);zUo=r(mmt,"vit"),mmt.forEach(t),QUo=r(tLe," \u2014 "),lO=n(tLe,"A",{href:!0});var gmt=s(lO);WUo=r(gmt,"ViTForMaskedImageModeling"),gmt.forEach(t),HUo=r(tLe," (ViT model)"),tLe.forEach(t),cJ.forEach(t),UUo=i(aa),u3=n(aa,"P",{});var aLe=s(u3);JUo=r(aLe,"The model is set in evaluation mode by default using "),ihe=n(aLe,"CODE",{});var hmt=s(ihe);YUo=r(hmt,"model.eval()"),hmt.forEach(t),KUo=r(aLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),dhe=n(aLe,"CODE",{});var pmt=s(dhe);ZUo=r(pmt,"model.train()"),pmt.forEach(t),aLe.forEach(t),eJo=i(aa),che=n(aa,"P",{});var _mt=s(che);oJo=r(_mt,"Examples:"),_mt.forEach(t),rJo=i(aa),m(IA.$$.fragment,aa),aa.forEach(t),kl.forEach(t),DBe=i(c),oc=n(c,"H2",{class:!0});var J$e=s(oc);b3=n(J$e,"A",{id:!0,class:!0,href:!0});var umt=s(b3);fhe=n(umt,"SPAN",{});var bmt=s(fhe);m(qA.$$.fragment,bmt),bmt.forEach(t),umt.forEach(t),tJo=i(J$e),mhe=n(J$e,"SPAN",{});var vmt=s(mhe);aJo=r(vmt,"AutoModelForObjectDetection"),vmt.forEach(t),J$e.forEach(t),GBe=i(c),pr=n(c,"DIV",{class:!0});var Rl=s(pr);m(NA.$$.fragment,Rl),nJo=i(Rl),rc=n(Rl,"P",{});var fJ=s(rc);sJo=r(fJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),iO=n(fJ,"A",{href:!0});var Fmt=s(iO);lJo=r(Fmt,"from_pretrained()"),Fmt.forEach(t),iJo=r(fJ," class method or the "),dO=n(fJ,"A",{href:!0});var Tmt=s(dO);dJo=r(Tmt,"from_config()"),Tmt.forEach(t),cJo=r(fJ,` class
method.`),fJ.forEach(t),fJo=i(Rl),jA=n(Rl,"P",{});var Y$e=s(jA);mJo=r(Y$e,"This class cannot be instantiated directly using "),ghe=n(Y$e,"CODE",{});var Mmt=s(ghe);gJo=r(Mmt,"__init__()"),Mmt.forEach(t),hJo=r(Y$e," (throws an error)."),Y$e.forEach(t),pJo=i(Rl),dt=n(Rl,"DIV",{class:!0});var Bl=s(dt);m(DA.$$.fragment,Bl),_Jo=i(Bl),hhe=n(Bl,"P",{});var Emt=s(hhe);uJo=r(Emt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Emt.forEach(t),bJo=i(Bl),tc=n(Bl,"P",{});var mJ=s(tc);vJo=r(mJ,`Note:
Loading a model from its configuration file does `),phe=n(mJ,"STRONG",{});var Cmt=s(phe);FJo=r(Cmt,"not"),Cmt.forEach(t),TJo=r(mJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cO=n(mJ,"A",{href:!0});var wmt=s(cO);MJo=r(wmt,"from_pretrained()"),wmt.forEach(t),EJo=r(mJ," to load the model weights."),mJ.forEach(t),CJo=i(Bl),_he=n(Bl,"P",{});var Amt=s(_he);wJo=r(Amt,"Examples:"),Amt.forEach(t),AJo=i(Bl),m(GA.$$.fragment,Bl),Bl.forEach(t),yJo=i(Rl),ro=n(Rl,"DIV",{class:!0});var na=s(ro);m(OA.$$.fragment,na),LJo=i(na),uhe=n(na,"P",{});var ymt=s(uhe);xJo=r(ymt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),ymt.forEach(t),kJo=i(na),mn=n(na,"P",{});var oC=s(mn);SJo=r(oC,"The model class to instantiate is selected based on the "),bhe=n(oC,"CODE",{});var Lmt=s(bhe);RJo=r(Lmt,"model_type"),Lmt.forEach(t),BJo=r(oC,` property of the config object (either
passed as an argument or loaded from `),vhe=n(oC,"CODE",{});var xmt=s(vhe);PJo=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),$Jo=r(oC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fhe=n(oC,"CODE",{});var kmt=s(Fhe);IJo=r(kmt,"pretrained_model_name_or_path"),kmt.forEach(t),qJo=r(oC,":"),oC.forEach(t),NJo=i(na),The=n(na,"UL",{});var Smt=s(The);v3=n(Smt,"LI",{});var nLe=s(v3);Mhe=n(nLe,"STRONG",{});var Rmt=s(Mhe);jJo=r(Rmt,"detr"),Rmt.forEach(t),DJo=r(nLe," \u2014 "),fO=n(nLe,"A",{href:!0});var Bmt=s(fO);GJo=r(Bmt,"DetrForObjectDetection"),Bmt.forEach(t),OJo=r(nLe," (DETR model)"),nLe.forEach(t),Smt.forEach(t),VJo=i(na),F3=n(na,"P",{});var sLe=s(F3);XJo=r(sLe,"The model is set in evaluation mode by default using "),Ehe=n(sLe,"CODE",{});var Pmt=s(Ehe);zJo=r(Pmt,"model.eval()"),Pmt.forEach(t),QJo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Che=n(sLe,"CODE",{});var $mt=s(Che);WJo=r($mt,"model.train()"),$mt.forEach(t),sLe.forEach(t),HJo=i(na),whe=n(na,"P",{});var Imt=s(whe);UJo=r(Imt,"Examples:"),Imt.forEach(t),JJo=i(na),m(VA.$$.fragment,na),na.forEach(t),Rl.forEach(t),OBe=i(c),ac=n(c,"H2",{class:!0});var K$e=s(ac);T3=n(K$e,"A",{id:!0,class:!0,href:!0});var qmt=s(T3);Ahe=n(qmt,"SPAN",{});var Nmt=s(Ahe);m(XA.$$.fragment,Nmt),Nmt.forEach(t),qmt.forEach(t),YJo=i(K$e),yhe=n(K$e,"SPAN",{});var jmt=s(yhe);KJo=r(jmt,"AutoModelForImageSegmentation"),jmt.forEach(t),K$e.forEach(t),VBe=i(c),_r=n(c,"DIV",{class:!0});var Pl=s(_r);m(zA.$$.fragment,Pl),ZJo=i(Pl),nc=n(Pl,"P",{});var gJ=s(nc);eYo=r(gJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),mO=n(gJ,"A",{href:!0});var Dmt=s(mO);oYo=r(Dmt,"from_pretrained()"),Dmt.forEach(t),rYo=r(gJ," class method or the "),gO=n(gJ,"A",{href:!0});var Gmt=s(gO);tYo=r(Gmt,"from_config()"),Gmt.forEach(t),aYo=r(gJ,` class
method.`),gJ.forEach(t),nYo=i(Pl),QA=n(Pl,"P",{});var Z$e=s(QA);sYo=r(Z$e,"This class cannot be instantiated directly using "),Lhe=n(Z$e,"CODE",{});var Omt=s(Lhe);lYo=r(Omt,"__init__()"),Omt.forEach(t),iYo=r(Z$e," (throws an error)."),Z$e.forEach(t),dYo=i(Pl),ct=n(Pl,"DIV",{class:!0});var $l=s(ct);m(WA.$$.fragment,$l),cYo=i($l),xhe=n($l,"P",{});var Vmt=s(xhe);fYo=r(Vmt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Vmt.forEach(t),mYo=i($l),sc=n($l,"P",{});var hJ=s(sc);gYo=r(hJ,`Note:
Loading a model from its configuration file does `),khe=n(hJ,"STRONG",{});var Xmt=s(khe);hYo=r(Xmt,"not"),Xmt.forEach(t),pYo=r(hJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hO=n(hJ,"A",{href:!0});var zmt=s(hO);_Yo=r(zmt,"from_pretrained()"),zmt.forEach(t),uYo=r(hJ," to load the model weights."),hJ.forEach(t),bYo=i($l),She=n($l,"P",{});var Qmt=s(She);vYo=r(Qmt,"Examples:"),Qmt.forEach(t),FYo=i($l),m(HA.$$.fragment,$l),$l.forEach(t),TYo=i(Pl),to=n(Pl,"DIV",{class:!0});var sa=s(to);m(UA.$$.fragment,sa),MYo=i(sa),Rhe=n(sa,"P",{});var Wmt=s(Rhe);EYo=r(Wmt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Wmt.forEach(t),CYo=i(sa),gn=n(sa,"P",{});var rC=s(gn);wYo=r(rC,"The model class to instantiate is selected based on the "),Bhe=n(rC,"CODE",{});var Hmt=s(Bhe);AYo=r(Hmt,"model_type"),Hmt.forEach(t),yYo=r(rC,` property of the config object (either
passed as an argument or loaded from `),Phe=n(rC,"CODE",{});var Umt=s(Phe);LYo=r(Umt,"pretrained_model_name_or_path"),Umt.forEach(t),xYo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$he=n(rC,"CODE",{});var Jmt=s($he);kYo=r(Jmt,"pretrained_model_name_or_path"),Jmt.forEach(t),SYo=r(rC,":"),rC.forEach(t),RYo=i(sa),Ihe=n(sa,"UL",{});var Ymt=s(Ihe);M3=n(Ymt,"LI",{});var lLe=s(M3);qhe=n(lLe,"STRONG",{});var Kmt=s(qhe);BYo=r(Kmt,"detr"),Kmt.forEach(t),PYo=r(lLe," \u2014 "),pO=n(lLe,"A",{href:!0});var Zmt=s(pO);$Yo=r(Zmt,"DetrForSegmentation"),Zmt.forEach(t),IYo=r(lLe," (DETR model)"),lLe.forEach(t),Ymt.forEach(t),qYo=i(sa),E3=n(sa,"P",{});var iLe=s(E3);NYo=r(iLe,"The model is set in evaluation mode by default using "),Nhe=n(iLe,"CODE",{});var egt=s(Nhe);jYo=r(egt,"model.eval()"),egt.forEach(t),DYo=r(iLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(iLe,"CODE",{});var ogt=s(jhe);GYo=r(ogt,"model.train()"),ogt.forEach(t),iLe.forEach(t),OYo=i(sa),Dhe=n(sa,"P",{});var rgt=s(Dhe);VYo=r(rgt,"Examples:"),rgt.forEach(t),XYo=i(sa),m(JA.$$.fragment,sa),sa.forEach(t),Pl.forEach(t),XBe=i(c),lc=n(c,"H2",{class:!0});var eIe=s(lc);C3=n(eIe,"A",{id:!0,class:!0,href:!0});var tgt=s(C3);Ghe=n(tgt,"SPAN",{});var agt=s(Ghe);m(YA.$$.fragment,agt),agt.forEach(t),tgt.forEach(t),zYo=i(eIe),Ohe=n(eIe,"SPAN",{});var ngt=s(Ohe);QYo=r(ngt,"AutoModelForSemanticSegmentation"),ngt.forEach(t),eIe.forEach(t),zBe=i(c),ur=n(c,"DIV",{class:!0});var Il=s(ur);m(KA.$$.fragment,Il),WYo=i(Il),ic=n(Il,"P",{});var pJ=s(ic);HYo=r(pJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),_O=n(pJ,"A",{href:!0});var sgt=s(_O);UYo=r(sgt,"from_pretrained()"),sgt.forEach(t),JYo=r(pJ," class method or the "),uO=n(pJ,"A",{href:!0});var lgt=s(uO);YYo=r(lgt,"from_config()"),lgt.forEach(t),KYo=r(pJ,` class
method.`),pJ.forEach(t),ZYo=i(Il),ZA=n(Il,"P",{});var oIe=s(ZA);eKo=r(oIe,"This class cannot be instantiated directly using "),Vhe=n(oIe,"CODE",{});var igt=s(Vhe);oKo=r(igt,"__init__()"),igt.forEach(t),rKo=r(oIe," (throws an error)."),oIe.forEach(t),tKo=i(Il),ft=n(Il,"DIV",{class:!0});var ql=s(ft);m(e0.$$.fragment,ql),aKo=i(ql),Xhe=n(ql,"P",{});var dgt=s(Xhe);nKo=r(dgt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dgt.forEach(t),sKo=i(ql),dc=n(ql,"P",{});var _J=s(dc);lKo=r(_J,`Note:
Loading a model from its configuration file does `),zhe=n(_J,"STRONG",{});var cgt=s(zhe);iKo=r(cgt,"not"),cgt.forEach(t),dKo=r(_J,` load the model weights. It only affects the
model\u2019s configuration. Use `),bO=n(_J,"A",{href:!0});var fgt=s(bO);cKo=r(fgt,"from_pretrained()"),fgt.forEach(t),fKo=r(_J," to load the model weights."),_J.forEach(t),mKo=i(ql),Qhe=n(ql,"P",{});var mgt=s(Qhe);gKo=r(mgt,"Examples:"),mgt.forEach(t),hKo=i(ql),m(o0.$$.fragment,ql),ql.forEach(t),pKo=i(Il),ao=n(Il,"DIV",{class:!0});var la=s(ao);m(r0.$$.fragment,la),_Ko=i(la),Whe=n(la,"P",{});var ggt=s(Whe);uKo=r(ggt,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),ggt.forEach(t),bKo=i(la),hn=n(la,"P",{});var tC=s(hn);vKo=r(tC,"The model class to instantiate is selected based on the "),Hhe=n(tC,"CODE",{});var hgt=s(Hhe);FKo=r(hgt,"model_type"),hgt.forEach(t),TKo=r(tC,` property of the config object (either
passed as an argument or loaded from `),Uhe=n(tC,"CODE",{});var pgt=s(Uhe);MKo=r(pgt,"pretrained_model_name_or_path"),pgt.forEach(t),EKo=r(tC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jhe=n(tC,"CODE",{});var _gt=s(Jhe);CKo=r(_gt,"pretrained_model_name_or_path"),_gt.forEach(t),wKo=r(tC,":"),tC.forEach(t),AKo=i(la),pn=n(la,"UL",{});var aC=s(pn);w3=n(aC,"LI",{});var dLe=s(w3);Yhe=n(dLe,"STRONG",{});var ugt=s(Yhe);yKo=r(ugt,"beit"),ugt.forEach(t),LKo=r(dLe," \u2014 "),vO=n(dLe,"A",{href:!0});var bgt=s(vO);xKo=r(bgt,"BeitForSemanticSegmentation"),bgt.forEach(t),kKo=r(dLe," (BEiT model)"),dLe.forEach(t),SKo=i(aC),A3=n(aC,"LI",{});var cLe=s(A3);Khe=n(cLe,"STRONG",{});var vgt=s(Khe);RKo=r(vgt,"data2vec-vision"),vgt.forEach(t),BKo=r(cLe," \u2014 "),FO=n(cLe,"A",{href:!0});var Fgt=s(FO);PKo=r(Fgt,"Data2VecVisionForSemanticSegmentation"),Fgt.forEach(t),$Ko=r(cLe," (Data2VecVision model)"),cLe.forEach(t),IKo=i(aC),y3=n(aC,"LI",{});var fLe=s(y3);Zhe=n(fLe,"STRONG",{});var Tgt=s(Zhe);qKo=r(Tgt,"dpt"),Tgt.forEach(t),NKo=r(fLe," \u2014 "),TO=n(fLe,"A",{href:!0});var Mgt=s(TO);jKo=r(Mgt,"DPTForSemanticSegmentation"),Mgt.forEach(t),DKo=r(fLe," (DPT model)"),fLe.forEach(t),GKo=i(aC),L3=n(aC,"LI",{});var mLe=s(L3);epe=n(mLe,"STRONG",{});var Egt=s(epe);OKo=r(Egt,"segformer"),Egt.forEach(t),VKo=r(mLe," \u2014 "),MO=n(mLe,"A",{href:!0});var Cgt=s(MO);XKo=r(Cgt,"SegformerForSemanticSegmentation"),Cgt.forEach(t),zKo=r(mLe," (SegFormer model)"),mLe.forEach(t),aC.forEach(t),QKo=i(la),x3=n(la,"P",{});var gLe=s(x3);WKo=r(gLe,"The model is set in evaluation mode by default using "),ope=n(gLe,"CODE",{});var wgt=s(ope);HKo=r(wgt,"model.eval()"),wgt.forEach(t),UKo=r(gLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rpe=n(gLe,"CODE",{});var Agt=s(rpe);JKo=r(Agt,"model.train()"),Agt.forEach(t),gLe.forEach(t),YKo=i(la),tpe=n(la,"P",{});var ygt=s(tpe);KKo=r(ygt,"Examples:"),ygt.forEach(t),ZKo=i(la),m(t0.$$.fragment,la),la.forEach(t),Il.forEach(t),QBe=i(c),cc=n(c,"H2",{class:!0});var rIe=s(cc);k3=n(rIe,"A",{id:!0,class:!0,href:!0});var Lgt=s(k3);ape=n(Lgt,"SPAN",{});var xgt=s(ape);m(a0.$$.fragment,xgt),xgt.forEach(t),Lgt.forEach(t),eZo=i(rIe),npe=n(rIe,"SPAN",{});var kgt=s(npe);oZo=r(kgt,"AutoModelForInstanceSegmentation"),kgt.forEach(t),rIe.forEach(t),WBe=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(n0.$$.fragment,Nl),rZo=i(Nl),fc=n(Nl,"P",{});var uJ=s(fc);tZo=r(uJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),EO=n(uJ,"A",{href:!0});var Sgt=s(EO);aZo=r(Sgt,"from_pretrained()"),Sgt.forEach(t),nZo=r(uJ," class method or the "),CO=n(uJ,"A",{href:!0});var Rgt=s(CO);sZo=r(Rgt,"from_config()"),Rgt.forEach(t),lZo=r(uJ,` class
method.`),uJ.forEach(t),iZo=i(Nl),s0=n(Nl,"P",{});var tIe=s(s0);dZo=r(tIe,"This class cannot be instantiated directly using "),spe=n(tIe,"CODE",{});var Bgt=s(spe);cZo=r(Bgt,"__init__()"),Bgt.forEach(t),fZo=r(tIe," (throws an error)."),tIe.forEach(t),mZo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(l0.$$.fragment,jl),gZo=i(jl),lpe=n(jl,"P",{});var Pgt=s(lpe);hZo=r(Pgt,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Pgt.forEach(t),pZo=i(jl),mc=n(jl,"P",{});var bJ=s(mc);_Zo=r(bJ,`Note:
Loading a model from its configuration file does `),ipe=n(bJ,"STRONG",{});var $gt=s(ipe);uZo=r($gt,"not"),$gt.forEach(t),bZo=r(bJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),wO=n(bJ,"A",{href:!0});var Igt=s(wO);vZo=r(Igt,"from_pretrained()"),Igt.forEach(t),FZo=r(bJ," to load the model weights."),bJ.forEach(t),TZo=i(jl),dpe=n(jl,"P",{});var qgt=s(dpe);MZo=r(qgt,"Examples:"),qgt.forEach(t),EZo=i(jl),m(i0.$$.fragment,jl),jl.forEach(t),CZo=i(Nl),no=n(Nl,"DIV",{class:!0});var ia=s(no);m(d0.$$.fragment,ia),wZo=i(ia),cpe=n(ia,"P",{});var Ngt=s(cpe);AZo=r(Ngt,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Ngt.forEach(t),yZo=i(ia),_n=n(ia,"P",{});var nC=s(_n);LZo=r(nC,"The model class to instantiate is selected based on the "),fpe=n(nC,"CODE",{});var jgt=s(fpe);xZo=r(jgt,"model_type"),jgt.forEach(t),kZo=r(nC,` property of the config object (either
passed as an argument or loaded from `),mpe=n(nC,"CODE",{});var Dgt=s(mpe);SZo=r(Dgt,"pretrained_model_name_or_path"),Dgt.forEach(t),RZo=r(nC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gpe=n(nC,"CODE",{});var Ggt=s(gpe);BZo=r(Ggt,"pretrained_model_name_or_path"),Ggt.forEach(t),PZo=r(nC,":"),nC.forEach(t),$Zo=i(ia),hpe=n(ia,"UL",{});var Ogt=s(hpe);S3=n(Ogt,"LI",{});var hLe=s(S3);ppe=n(hLe,"STRONG",{});var Vgt=s(ppe);IZo=r(Vgt,"maskformer"),Vgt.forEach(t),qZo=r(hLe," \u2014 "),AO=n(hLe,"A",{href:!0});var Xgt=s(AO);NZo=r(Xgt,"MaskFormerForInstanceSegmentation"),Xgt.forEach(t),jZo=r(hLe," (MaskFormer model)"),hLe.forEach(t),Ogt.forEach(t),DZo=i(ia),R3=n(ia,"P",{});var pLe=s(R3);GZo=r(pLe,"The model is set in evaluation mode by default using "),_pe=n(pLe,"CODE",{});var zgt=s(_pe);OZo=r(zgt,"model.eval()"),zgt.forEach(t),VZo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(pLe,"CODE",{});var Qgt=s(upe);XZo=r(Qgt,"model.train()"),Qgt.forEach(t),pLe.forEach(t),zZo=i(ia),bpe=n(ia,"P",{});var Wgt=s(bpe);QZo=r(Wgt,"Examples:"),Wgt.forEach(t),WZo=i(ia),m(c0.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),HBe=i(c),gc=n(c,"H2",{class:!0});var aIe=s(gc);B3=n(aIe,"A",{id:!0,class:!0,href:!0});var Hgt=s(B3);vpe=n(Hgt,"SPAN",{});var Ugt=s(vpe);m(f0.$$.fragment,Ugt),Ugt.forEach(t),Hgt.forEach(t),HZo=i(aIe),Fpe=n(aIe,"SPAN",{});var Jgt=s(Fpe);UZo=r(Jgt,"TFAutoModel"),Jgt.forEach(t),aIe.forEach(t),UBe=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(m0.$$.fragment,Dl),JZo=i(Dl),hc=n(Dl,"P",{});var vJ=s(hc);YZo=r(vJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),yO=n(vJ,"A",{href:!0});var Ygt=s(yO);KZo=r(Ygt,"from_pretrained()"),Ygt.forEach(t),ZZo=r(vJ," class method or the "),LO=n(vJ,"A",{href:!0});var Kgt=s(LO);eer=r(Kgt,"from_config()"),Kgt.forEach(t),oer=r(vJ,` class
method.`),vJ.forEach(t),rer=i(Dl),g0=n(Dl,"P",{});var nIe=s(g0);ter=r(nIe,"This class cannot be instantiated directly using "),Tpe=n(nIe,"CODE",{});var Zgt=s(Tpe);aer=r(Zgt,"__init__()"),Zgt.forEach(t),ner=r(nIe," (throws an error)."),nIe.forEach(t),ser=i(Dl),gt=n(Dl,"DIV",{class:!0});var Gl=s(gt);m(h0.$$.fragment,Gl),ler=i(Gl),Mpe=n(Gl,"P",{});var eht=s(Mpe);ier=r(eht,"Instantiates one of the base model classes of the library from a configuration."),eht.forEach(t),der=i(Gl),pc=n(Gl,"P",{});var FJ=s(pc);cer=r(FJ,`Note:
Loading a model from its configuration file does `),Epe=n(FJ,"STRONG",{});var oht=s(Epe);fer=r(oht,"not"),oht.forEach(t),mer=r(FJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),xO=n(FJ,"A",{href:!0});var rht=s(xO);ger=r(rht,"from_pretrained()"),rht.forEach(t),her=r(FJ," to load the model weights."),FJ.forEach(t),per=i(Gl),Cpe=n(Gl,"P",{});var tht=s(Cpe);_er=r(tht,"Examples:"),tht.forEach(t),uer=i(Gl),m(p0.$$.fragment,Gl),Gl.forEach(t),ber=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(_0.$$.fragment,pa),ver=i(pa),wpe=n(pa,"P",{});var aht=s(wpe);Fer=r(aht,"Instantiate one of the base model classes of the library from a pretrained model."),aht.forEach(t),Ter=i(pa),un=n(pa,"P",{});var sC=s(un);Mer=r(sC,"The model class to instantiate is selected based on the "),Ape=n(sC,"CODE",{});var nht=s(Ape);Eer=r(nht,"model_type"),nht.forEach(t),Cer=r(sC,` property of the config object (either
passed as an argument or loaded from `),ype=n(sC,"CODE",{});var sht=s(ype);wer=r(sht,"pretrained_model_name_or_path"),sht.forEach(t),Aer=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(sC,"CODE",{});var lht=s(Lpe);yer=r(lht,"pretrained_model_name_or_path"),lht.forEach(t),Ler=r(sC,":"),sC.forEach(t),xer=i(pa),x=n(pa,"UL",{});var k=s(x);P3=n(k,"LI",{});var _Le=s(P3);xpe=n(_Le,"STRONG",{});var iht=s(xpe);ker=r(iht,"albert"),iht.forEach(t),Ser=r(_Le," \u2014 "),kO=n(_Le,"A",{href:!0});var dht=s(kO);Rer=r(dht,"TFAlbertModel"),dht.forEach(t),Ber=r(_Le," (ALBERT model)"),_Le.forEach(t),Per=i(k),$3=n(k,"LI",{});var uLe=s($3);kpe=n(uLe,"STRONG",{});var cht=s(kpe);$er=r(cht,"bart"),cht.forEach(t),Ier=r(uLe," \u2014 "),SO=n(uLe,"A",{href:!0});var fht=s(SO);qer=r(fht,"TFBartModel"),fht.forEach(t),Ner=r(uLe," (BART model)"),uLe.forEach(t),jer=i(k),I3=n(k,"LI",{});var bLe=s(I3);Spe=n(bLe,"STRONG",{});var mht=s(Spe);Der=r(mht,"bert"),mht.forEach(t),Ger=r(bLe," \u2014 "),RO=n(bLe,"A",{href:!0});var ght=s(RO);Oer=r(ght,"TFBertModel"),ght.forEach(t),Ver=r(bLe," (BERT model)"),bLe.forEach(t),Xer=i(k),q3=n(k,"LI",{});var vLe=s(q3);Rpe=n(vLe,"STRONG",{});var hht=s(Rpe);zer=r(hht,"blenderbot"),hht.forEach(t),Qer=r(vLe," \u2014 "),BO=n(vLe,"A",{href:!0});var pht=s(BO);Wer=r(pht,"TFBlenderbotModel"),pht.forEach(t),Her=r(vLe," (Blenderbot model)"),vLe.forEach(t),Uer=i(k),N3=n(k,"LI",{});var FLe=s(N3);Bpe=n(FLe,"STRONG",{});var _ht=s(Bpe);Jer=r(_ht,"blenderbot-small"),_ht.forEach(t),Yer=r(FLe," \u2014 "),PO=n(FLe,"A",{href:!0});var uht=s(PO);Ker=r(uht,"TFBlenderbotSmallModel"),uht.forEach(t),Zer=r(FLe," (BlenderbotSmall model)"),FLe.forEach(t),eor=i(k),j3=n(k,"LI",{});var TLe=s(j3);Ppe=n(TLe,"STRONG",{});var bht=s(Ppe);oor=r(bht,"camembert"),bht.forEach(t),ror=r(TLe," \u2014 "),$O=n(TLe,"A",{href:!0});var vht=s($O);tor=r(vht,"TFCamembertModel"),vht.forEach(t),aor=r(TLe," (CamemBERT model)"),TLe.forEach(t),nor=i(k),D3=n(k,"LI",{});var MLe=s(D3);$pe=n(MLe,"STRONG",{});var Fht=s($pe);sor=r(Fht,"clip"),Fht.forEach(t),lor=r(MLe," \u2014 "),IO=n(MLe,"A",{href:!0});var Tht=s(IO);ior=r(Tht,"TFCLIPModel"),Tht.forEach(t),dor=r(MLe," (CLIP model)"),MLe.forEach(t),cor=i(k),G3=n(k,"LI",{});var ELe=s(G3);Ipe=n(ELe,"STRONG",{});var Mht=s(Ipe);mor=r(Mht,"convbert"),Mht.forEach(t),gor=r(ELe," \u2014 "),qO=n(ELe,"A",{href:!0});var Eht=s(qO);hor=r(Eht,"TFConvBertModel"),Eht.forEach(t),por=r(ELe," (ConvBERT model)"),ELe.forEach(t),_or=i(k),O3=n(k,"LI",{});var CLe=s(O3);qpe=n(CLe,"STRONG",{});var Cht=s(qpe);uor=r(Cht,"convnext"),Cht.forEach(t),bor=r(CLe," \u2014 "),NO=n(CLe,"A",{href:!0});var wht=s(NO);vor=r(wht,"TFConvNextModel"),wht.forEach(t),For=r(CLe," (ConvNext model)"),CLe.forEach(t),Tor=i(k),V3=n(k,"LI",{});var wLe=s(V3);Npe=n(wLe,"STRONG",{});var Aht=s(Npe);Mor=r(Aht,"ctrl"),Aht.forEach(t),Eor=r(wLe," \u2014 "),jO=n(wLe,"A",{href:!0});var yht=s(jO);Cor=r(yht,"TFCTRLModel"),yht.forEach(t),wor=r(wLe," (CTRL model)"),wLe.forEach(t),Aor=i(k),X3=n(k,"LI",{});var ALe=s(X3);jpe=n(ALe,"STRONG",{});var Lht=s(jpe);yor=r(Lht,"deberta"),Lht.forEach(t),Lor=r(ALe," \u2014 "),DO=n(ALe,"A",{href:!0});var xht=s(DO);xor=r(xht,"TFDebertaModel"),xht.forEach(t),kor=r(ALe," (DeBERTa model)"),ALe.forEach(t),Sor=i(k),z3=n(k,"LI",{});var yLe=s(z3);Dpe=n(yLe,"STRONG",{});var kht=s(Dpe);Ror=r(kht,"deberta-v2"),kht.forEach(t),Bor=r(yLe," \u2014 "),GO=n(yLe,"A",{href:!0});var Sht=s(GO);Por=r(Sht,"TFDebertaV2Model"),Sht.forEach(t),$or=r(yLe," (DeBERTa-v2 model)"),yLe.forEach(t),Ior=i(k),Q3=n(k,"LI",{});var LLe=s(Q3);Gpe=n(LLe,"STRONG",{});var Rht=s(Gpe);qor=r(Rht,"distilbert"),Rht.forEach(t),Nor=r(LLe," \u2014 "),OO=n(LLe,"A",{href:!0});var Bht=s(OO);jor=r(Bht,"TFDistilBertModel"),Bht.forEach(t),Dor=r(LLe," (DistilBERT model)"),LLe.forEach(t),Gor=i(k),W3=n(k,"LI",{});var xLe=s(W3);Ope=n(xLe,"STRONG",{});var Pht=s(Ope);Oor=r(Pht,"dpr"),Pht.forEach(t),Vor=r(xLe," \u2014 "),VO=n(xLe,"A",{href:!0});var $ht=s(VO);Xor=r($ht,"TFDPRQuestionEncoder"),$ht.forEach(t),zor=r(xLe," (DPR model)"),xLe.forEach(t),Qor=i(k),H3=n(k,"LI",{});var kLe=s(H3);Vpe=n(kLe,"STRONG",{});var Iht=s(Vpe);Wor=r(Iht,"electra"),Iht.forEach(t),Hor=r(kLe," \u2014 "),XO=n(kLe,"A",{href:!0});var qht=s(XO);Uor=r(qht,"TFElectraModel"),qht.forEach(t),Jor=r(kLe," (ELECTRA model)"),kLe.forEach(t),Yor=i(k),U3=n(k,"LI",{});var SLe=s(U3);Xpe=n(SLe,"STRONG",{});var Nht=s(Xpe);Kor=r(Nht,"flaubert"),Nht.forEach(t),Zor=r(SLe," \u2014 "),zO=n(SLe,"A",{href:!0});var jht=s(zO);err=r(jht,"TFFlaubertModel"),jht.forEach(t),orr=r(SLe," (FlauBERT model)"),SLe.forEach(t),rrr=i(k),Os=n(k,"LI",{});var M9=s(Os);zpe=n(M9,"STRONG",{});var Dht=s(zpe);trr=r(Dht,"funnel"),Dht.forEach(t),arr=r(M9," \u2014 "),QO=n(M9,"A",{href:!0});var Ght=s(QO);nrr=r(Ght,"TFFunnelModel"),Ght.forEach(t),srr=r(M9," or "),WO=n(M9,"A",{href:!0});var Oht=s(WO);lrr=r(Oht,"TFFunnelBaseModel"),Oht.forEach(t),irr=r(M9," (Funnel Transformer model)"),M9.forEach(t),drr=i(k),J3=n(k,"LI",{});var RLe=s(J3);Qpe=n(RLe,"STRONG",{});var Vht=s(Qpe);crr=r(Vht,"gpt2"),Vht.forEach(t),frr=r(RLe," \u2014 "),HO=n(RLe,"A",{href:!0});var Xht=s(HO);mrr=r(Xht,"TFGPT2Model"),Xht.forEach(t),grr=r(RLe," (OpenAI GPT-2 model)"),RLe.forEach(t),hrr=i(k),Y3=n(k,"LI",{});var BLe=s(Y3);Wpe=n(BLe,"STRONG",{});var zht=s(Wpe);prr=r(zht,"gptj"),zht.forEach(t),_rr=r(BLe," \u2014 "),UO=n(BLe,"A",{href:!0});var Qht=s(UO);urr=r(Qht,"TFGPTJModel"),Qht.forEach(t),brr=r(BLe," (GPT-J model)"),BLe.forEach(t),vrr=i(k),K3=n(k,"LI",{});var PLe=s(K3);Hpe=n(PLe,"STRONG",{});var Wht=s(Hpe);Frr=r(Wht,"hubert"),Wht.forEach(t),Trr=r(PLe," \u2014 "),JO=n(PLe,"A",{href:!0});var Hht=s(JO);Mrr=r(Hht,"TFHubertModel"),Hht.forEach(t),Err=r(PLe," (Hubert model)"),PLe.forEach(t),Crr=i(k),Z3=n(k,"LI",{});var $Le=s(Z3);Upe=n($Le,"STRONG",{});var Uht=s(Upe);wrr=r(Uht,"layoutlm"),Uht.forEach(t),Arr=r($Le," \u2014 "),YO=n($Le,"A",{href:!0});var Jht=s(YO);yrr=r(Jht,"TFLayoutLMModel"),Jht.forEach(t),Lrr=r($Le," (LayoutLM model)"),$Le.forEach(t),xrr=i(k),ev=n(k,"LI",{});var ILe=s(ev);Jpe=n(ILe,"STRONG",{});var Yht=s(Jpe);krr=r(Yht,"led"),Yht.forEach(t),Srr=r(ILe," \u2014 "),KO=n(ILe,"A",{href:!0});var Kht=s(KO);Rrr=r(Kht,"TFLEDModel"),Kht.forEach(t),Brr=r(ILe," (LED model)"),ILe.forEach(t),Prr=i(k),ov=n(k,"LI",{});var qLe=s(ov);Ype=n(qLe,"STRONG",{});var Zht=s(Ype);$rr=r(Zht,"longformer"),Zht.forEach(t),Irr=r(qLe," \u2014 "),ZO=n(qLe,"A",{href:!0});var ept=s(ZO);qrr=r(ept,"TFLongformerModel"),ept.forEach(t),Nrr=r(qLe," (Longformer model)"),qLe.forEach(t),jrr=i(k),rv=n(k,"LI",{});var NLe=s(rv);Kpe=n(NLe,"STRONG",{});var opt=s(Kpe);Drr=r(opt,"lxmert"),opt.forEach(t),Grr=r(NLe," \u2014 "),eV=n(NLe,"A",{href:!0});var rpt=s(eV);Orr=r(rpt,"TFLxmertModel"),rpt.forEach(t),Vrr=r(NLe," (LXMERT model)"),NLe.forEach(t),Xrr=i(k),tv=n(k,"LI",{});var jLe=s(tv);Zpe=n(jLe,"STRONG",{});var tpt=s(Zpe);zrr=r(tpt,"marian"),tpt.forEach(t),Qrr=r(jLe," \u2014 "),oV=n(jLe,"A",{href:!0});var apt=s(oV);Wrr=r(apt,"TFMarianModel"),apt.forEach(t),Hrr=r(jLe," (Marian model)"),jLe.forEach(t),Urr=i(k),av=n(k,"LI",{});var DLe=s(av);e_e=n(DLe,"STRONG",{});var npt=s(e_e);Jrr=r(npt,"mbart"),npt.forEach(t),Yrr=r(DLe," \u2014 "),rV=n(DLe,"A",{href:!0});var spt=s(rV);Krr=r(spt,"TFMBartModel"),spt.forEach(t),Zrr=r(DLe," (mBART model)"),DLe.forEach(t),etr=i(k),nv=n(k,"LI",{});var GLe=s(nv);o_e=n(GLe,"STRONG",{});var lpt=s(o_e);otr=r(lpt,"mobilebert"),lpt.forEach(t),rtr=r(GLe," \u2014 "),tV=n(GLe,"A",{href:!0});var ipt=s(tV);ttr=r(ipt,"TFMobileBertModel"),ipt.forEach(t),atr=r(GLe," (MobileBERT model)"),GLe.forEach(t),ntr=i(k),sv=n(k,"LI",{});var OLe=s(sv);r_e=n(OLe,"STRONG",{});var dpt=s(r_e);str=r(dpt,"mpnet"),dpt.forEach(t),ltr=r(OLe," \u2014 "),aV=n(OLe,"A",{href:!0});var cpt=s(aV);itr=r(cpt,"TFMPNetModel"),cpt.forEach(t),dtr=r(OLe," (MPNet model)"),OLe.forEach(t),ctr=i(k),lv=n(k,"LI",{});var VLe=s(lv);t_e=n(VLe,"STRONG",{});var fpt=s(t_e);ftr=r(fpt,"mt5"),fpt.forEach(t),mtr=r(VLe," \u2014 "),nV=n(VLe,"A",{href:!0});var mpt=s(nV);gtr=r(mpt,"TFMT5Model"),mpt.forEach(t),htr=r(VLe," (mT5 model)"),VLe.forEach(t),ptr=i(k),iv=n(k,"LI",{});var XLe=s(iv);a_e=n(XLe,"STRONG",{});var gpt=s(a_e);_tr=r(gpt,"openai-gpt"),gpt.forEach(t),utr=r(XLe," \u2014 "),sV=n(XLe,"A",{href:!0});var hpt=s(sV);btr=r(hpt,"TFOpenAIGPTModel"),hpt.forEach(t),vtr=r(XLe," (OpenAI GPT model)"),XLe.forEach(t),Ftr=i(k),dv=n(k,"LI",{});var zLe=s(dv);n_e=n(zLe,"STRONG",{});var ppt=s(n_e);Ttr=r(ppt,"pegasus"),ppt.forEach(t),Mtr=r(zLe," \u2014 "),lV=n(zLe,"A",{href:!0});var _pt=s(lV);Etr=r(_pt,"TFPegasusModel"),_pt.forEach(t),Ctr=r(zLe," (Pegasus model)"),zLe.forEach(t),wtr=i(k),cv=n(k,"LI",{});var QLe=s(cv);s_e=n(QLe,"STRONG",{});var upt=s(s_e);Atr=r(upt,"rembert"),upt.forEach(t),ytr=r(QLe," \u2014 "),iV=n(QLe,"A",{href:!0});var bpt=s(iV);Ltr=r(bpt,"TFRemBertModel"),bpt.forEach(t),xtr=r(QLe," (RemBERT model)"),QLe.forEach(t),ktr=i(k),fv=n(k,"LI",{});var WLe=s(fv);l_e=n(WLe,"STRONG",{});var vpt=s(l_e);Str=r(vpt,"roberta"),vpt.forEach(t),Rtr=r(WLe," \u2014 "),dV=n(WLe,"A",{href:!0});var Fpt=s(dV);Btr=r(Fpt,"TFRobertaModel"),Fpt.forEach(t),Ptr=r(WLe," (RoBERTa model)"),WLe.forEach(t),$tr=i(k),mv=n(k,"LI",{});var HLe=s(mv);i_e=n(HLe,"STRONG",{});var Tpt=s(i_e);Itr=r(Tpt,"roformer"),Tpt.forEach(t),qtr=r(HLe," \u2014 "),cV=n(HLe,"A",{href:!0});var Mpt=s(cV);Ntr=r(Mpt,"TFRoFormerModel"),Mpt.forEach(t),jtr=r(HLe," (RoFormer model)"),HLe.forEach(t),Dtr=i(k),gv=n(k,"LI",{});var ULe=s(gv);d_e=n(ULe,"STRONG",{});var Ept=s(d_e);Gtr=r(Ept,"speech_to_text"),Ept.forEach(t),Otr=r(ULe," \u2014 "),fV=n(ULe,"A",{href:!0});var Cpt=s(fV);Vtr=r(Cpt,"TFSpeech2TextModel"),Cpt.forEach(t),Xtr=r(ULe," (Speech2Text model)"),ULe.forEach(t),ztr=i(k),hv=n(k,"LI",{});var JLe=s(hv);c_e=n(JLe,"STRONG",{});var wpt=s(c_e);Qtr=r(wpt,"t5"),wpt.forEach(t),Wtr=r(JLe," \u2014 "),mV=n(JLe,"A",{href:!0});var Apt=s(mV);Htr=r(Apt,"TFT5Model"),Apt.forEach(t),Utr=r(JLe," (T5 model)"),JLe.forEach(t),Jtr=i(k),pv=n(k,"LI",{});var YLe=s(pv);f_e=n(YLe,"STRONG",{});var ypt=s(f_e);Ytr=r(ypt,"tapas"),ypt.forEach(t),Ktr=r(YLe," \u2014 "),gV=n(YLe,"A",{href:!0});var Lpt=s(gV);Ztr=r(Lpt,"TFTapasModel"),Lpt.forEach(t),ear=r(YLe," (TAPAS model)"),YLe.forEach(t),oar=i(k),_v=n(k,"LI",{});var KLe=s(_v);m_e=n(KLe,"STRONG",{});var xpt=s(m_e);rar=r(xpt,"transfo-xl"),xpt.forEach(t),tar=r(KLe," \u2014 "),hV=n(KLe,"A",{href:!0});var kpt=s(hV);aar=r(kpt,"TFTransfoXLModel"),kpt.forEach(t),nar=r(KLe," (Transformer-XL model)"),KLe.forEach(t),sar=i(k),uv=n(k,"LI",{});var ZLe=s(uv);g_e=n(ZLe,"STRONG",{});var Spt=s(g_e);lar=r(Spt,"vit"),Spt.forEach(t),iar=r(ZLe," \u2014 "),pV=n(ZLe,"A",{href:!0});var Rpt=s(pV);dar=r(Rpt,"TFViTModel"),Rpt.forEach(t),car=r(ZLe," (ViT model)"),ZLe.forEach(t),far=i(k),bv=n(k,"LI",{});var e9e=s(bv);h_e=n(e9e,"STRONG",{});var Bpt=s(h_e);mar=r(Bpt,"vit_mae"),Bpt.forEach(t),gar=r(e9e," \u2014 "),_V=n(e9e,"A",{href:!0});var Ppt=s(_V);har=r(Ppt,"TFViTMAEModel"),Ppt.forEach(t),par=r(e9e," (ViTMAE model)"),e9e.forEach(t),_ar=i(k),vv=n(k,"LI",{});var o9e=s(vv);p_e=n(o9e,"STRONG",{});var $pt=s(p_e);uar=r($pt,"wav2vec2"),$pt.forEach(t),bar=r(o9e," \u2014 "),uV=n(o9e,"A",{href:!0});var Ipt=s(uV);Far=r(Ipt,"TFWav2Vec2Model"),Ipt.forEach(t),Tar=r(o9e," (Wav2Vec2 model)"),o9e.forEach(t),Mar=i(k),Fv=n(k,"LI",{});var r9e=s(Fv);__e=n(r9e,"STRONG",{});var qpt=s(__e);Ear=r(qpt,"xlm"),qpt.forEach(t),Car=r(r9e," \u2014 "),bV=n(r9e,"A",{href:!0});var Npt=s(bV);war=r(Npt,"TFXLMModel"),Npt.forEach(t),Aar=r(r9e," (XLM model)"),r9e.forEach(t),yar=i(k),Tv=n(k,"LI",{});var t9e=s(Tv);u_e=n(t9e,"STRONG",{});var jpt=s(u_e);Lar=r(jpt,"xlm-roberta"),jpt.forEach(t),xar=r(t9e," \u2014 "),vV=n(t9e,"A",{href:!0});var Dpt=s(vV);kar=r(Dpt,"TFXLMRobertaModel"),Dpt.forEach(t),Sar=r(t9e," (XLM-RoBERTa model)"),t9e.forEach(t),Rar=i(k),Mv=n(k,"LI",{});var a9e=s(Mv);b_e=n(a9e,"STRONG",{});var Gpt=s(b_e);Bar=r(Gpt,"xlnet"),Gpt.forEach(t),Par=r(a9e," \u2014 "),FV=n(a9e,"A",{href:!0});var Opt=s(FV);$ar=r(Opt,"TFXLNetModel"),Opt.forEach(t),Iar=r(a9e," (XLNet model)"),a9e.forEach(t),k.forEach(t),qar=i(pa),v_e=n(pa,"P",{});var Vpt=s(v_e);Nar=r(Vpt,"Examples:"),Vpt.forEach(t),jar=i(pa),m(u0.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),JBe=i(c),_c=n(c,"H2",{class:!0});var sIe=s(_c);Ev=n(sIe,"A",{id:!0,class:!0,href:!0});var Xpt=s(Ev);F_e=n(Xpt,"SPAN",{});var zpt=s(F_e);m(b0.$$.fragment,zpt),zpt.forEach(t),Xpt.forEach(t),Dar=i(sIe),T_e=n(sIe,"SPAN",{});var Qpt=s(T_e);Gar=r(Qpt,"TFAutoModelForPreTraining"),Qpt.forEach(t),sIe.forEach(t),YBe=i(c),Fr=n(c,"DIV",{class:!0});var Ol=s(Fr);m(v0.$$.fragment,Ol),Oar=i(Ol),uc=n(Ol,"P",{});var TJ=s(uc);Var=r(TJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),TV=n(TJ,"A",{href:!0});var Wpt=s(TV);Xar=r(Wpt,"from_pretrained()"),Wpt.forEach(t),zar=r(TJ," class method or the "),MV=n(TJ,"A",{href:!0});var Hpt=s(MV);Qar=r(Hpt,"from_config()"),Hpt.forEach(t),War=r(TJ,` class
method.`),TJ.forEach(t),Har=i(Ol),F0=n(Ol,"P",{});var lIe=s(F0);Uar=r(lIe,"This class cannot be instantiated directly using "),M_e=n(lIe,"CODE",{});var Upt=s(M_e);Jar=r(Upt,"__init__()"),Upt.forEach(t),Yar=r(lIe," (throws an error)."),lIe.forEach(t),Kar=i(Ol),ht=n(Ol,"DIV",{class:!0});var Vl=s(ht);m(T0.$$.fragment,Vl),Zar=i(Vl),E_e=n(Vl,"P",{});var Jpt=s(E_e);enr=r(Jpt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Jpt.forEach(t),onr=i(Vl),bc=n(Vl,"P",{});var MJ=s(bc);rnr=r(MJ,`Note:
Loading a model from its configuration file does `),C_e=n(MJ,"STRONG",{});var Ypt=s(C_e);tnr=r(Ypt,"not"),Ypt.forEach(t),anr=r(MJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),EV=n(MJ,"A",{href:!0});var Kpt=s(EV);nnr=r(Kpt,"from_pretrained()"),Kpt.forEach(t),snr=r(MJ," to load the model weights."),MJ.forEach(t),lnr=i(Vl),w_e=n(Vl,"P",{});var Zpt=s(w_e);inr=r(Zpt,"Examples:"),Zpt.forEach(t),dnr=i(Vl),m(M0.$$.fragment,Vl),Vl.forEach(t),cnr=i(Ol),po=n(Ol,"DIV",{class:!0});var _a=s(po);m(E0.$$.fragment,_a),fnr=i(_a),A_e=n(_a,"P",{});var e_t=s(A_e);mnr=r(e_t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),e_t.forEach(t),gnr=i(_a),bn=n(_a,"P",{});var lC=s(bn);hnr=r(lC,"The model class to instantiate is selected based on the "),y_e=n(lC,"CODE",{});var o_t=s(y_e);pnr=r(o_t,"model_type"),o_t.forEach(t),_nr=r(lC,` property of the config object (either
passed as an argument or loaded from `),L_e=n(lC,"CODE",{});var r_t=s(L_e);unr=r(r_t,"pretrained_model_name_or_path"),r_t.forEach(t),bnr=r(lC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x_e=n(lC,"CODE",{});var t_t=s(x_e);vnr=r(t_t,"pretrained_model_name_or_path"),t_t.forEach(t),Fnr=r(lC,":"),lC.forEach(t),Tnr=i(_a),H=n(_a,"UL",{});var U=s(H);Cv=n(U,"LI",{});var n9e=s(Cv);k_e=n(n9e,"STRONG",{});var a_t=s(k_e);Mnr=r(a_t,"albert"),a_t.forEach(t),Enr=r(n9e," \u2014 "),CV=n(n9e,"A",{href:!0});var n_t=s(CV);Cnr=r(n_t,"TFAlbertForPreTraining"),n_t.forEach(t),wnr=r(n9e," (ALBERT model)"),n9e.forEach(t),Anr=i(U),wv=n(U,"LI",{});var s9e=s(wv);S_e=n(s9e,"STRONG",{});var s_t=s(S_e);ynr=r(s_t,"bart"),s_t.forEach(t),Lnr=r(s9e," \u2014 "),wV=n(s9e,"A",{href:!0});var l_t=s(wV);xnr=r(l_t,"TFBartForConditionalGeneration"),l_t.forEach(t),knr=r(s9e," (BART model)"),s9e.forEach(t),Snr=i(U),Av=n(U,"LI",{});var l9e=s(Av);R_e=n(l9e,"STRONG",{});var i_t=s(R_e);Rnr=r(i_t,"bert"),i_t.forEach(t),Bnr=r(l9e," \u2014 "),AV=n(l9e,"A",{href:!0});var d_t=s(AV);Pnr=r(d_t,"TFBertForPreTraining"),d_t.forEach(t),$nr=r(l9e," (BERT model)"),l9e.forEach(t),Inr=i(U),yv=n(U,"LI",{});var i9e=s(yv);B_e=n(i9e,"STRONG",{});var c_t=s(B_e);qnr=r(c_t,"camembert"),c_t.forEach(t),Nnr=r(i9e," \u2014 "),yV=n(i9e,"A",{href:!0});var f_t=s(yV);jnr=r(f_t,"TFCamembertForMaskedLM"),f_t.forEach(t),Dnr=r(i9e," (CamemBERT model)"),i9e.forEach(t),Gnr=i(U),Lv=n(U,"LI",{});var d9e=s(Lv);P_e=n(d9e,"STRONG",{});var m_t=s(P_e);Onr=r(m_t,"ctrl"),m_t.forEach(t),Vnr=r(d9e," \u2014 "),LV=n(d9e,"A",{href:!0});var g_t=s(LV);Xnr=r(g_t,"TFCTRLLMHeadModel"),g_t.forEach(t),znr=r(d9e," (CTRL model)"),d9e.forEach(t),Qnr=i(U),xv=n(U,"LI",{});var c9e=s(xv);$_e=n(c9e,"STRONG",{});var h_t=s($_e);Wnr=r(h_t,"distilbert"),h_t.forEach(t),Hnr=r(c9e," \u2014 "),xV=n(c9e,"A",{href:!0});var p_t=s(xV);Unr=r(p_t,"TFDistilBertForMaskedLM"),p_t.forEach(t),Jnr=r(c9e," (DistilBERT model)"),c9e.forEach(t),Ynr=i(U),kv=n(U,"LI",{});var f9e=s(kv);I_e=n(f9e,"STRONG",{});var __t=s(I_e);Knr=r(__t,"electra"),__t.forEach(t),Znr=r(f9e," \u2014 "),kV=n(f9e,"A",{href:!0});var u_t=s(kV);esr=r(u_t,"TFElectraForPreTraining"),u_t.forEach(t),osr=r(f9e," (ELECTRA model)"),f9e.forEach(t),rsr=i(U),Sv=n(U,"LI",{});var m9e=s(Sv);q_e=n(m9e,"STRONG",{});var b_t=s(q_e);tsr=r(b_t,"flaubert"),b_t.forEach(t),asr=r(m9e," \u2014 "),SV=n(m9e,"A",{href:!0});var v_t=s(SV);nsr=r(v_t,"TFFlaubertWithLMHeadModel"),v_t.forEach(t),ssr=r(m9e," (FlauBERT model)"),m9e.forEach(t),lsr=i(U),Rv=n(U,"LI",{});var g9e=s(Rv);N_e=n(g9e,"STRONG",{});var F_t=s(N_e);isr=r(F_t,"funnel"),F_t.forEach(t),dsr=r(g9e," \u2014 "),RV=n(g9e,"A",{href:!0});var T_t=s(RV);csr=r(T_t,"TFFunnelForPreTraining"),T_t.forEach(t),fsr=r(g9e," (Funnel Transformer model)"),g9e.forEach(t),msr=i(U),Bv=n(U,"LI",{});var h9e=s(Bv);j_e=n(h9e,"STRONG",{});var M_t=s(j_e);gsr=r(M_t,"gpt2"),M_t.forEach(t),hsr=r(h9e," \u2014 "),BV=n(h9e,"A",{href:!0});var E_t=s(BV);psr=r(E_t,"TFGPT2LMHeadModel"),E_t.forEach(t),_sr=r(h9e," (OpenAI GPT-2 model)"),h9e.forEach(t),usr=i(U),Pv=n(U,"LI",{});var p9e=s(Pv);D_e=n(p9e,"STRONG",{});var C_t=s(D_e);bsr=r(C_t,"layoutlm"),C_t.forEach(t),vsr=r(p9e," \u2014 "),PV=n(p9e,"A",{href:!0});var w_t=s(PV);Fsr=r(w_t,"TFLayoutLMForMaskedLM"),w_t.forEach(t),Tsr=r(p9e," (LayoutLM model)"),p9e.forEach(t),Msr=i(U),$v=n(U,"LI",{});var _9e=s($v);G_e=n(_9e,"STRONG",{});var A_t=s(G_e);Esr=r(A_t,"lxmert"),A_t.forEach(t),Csr=r(_9e," \u2014 "),$V=n(_9e,"A",{href:!0});var y_t=s($V);wsr=r(y_t,"TFLxmertForPreTraining"),y_t.forEach(t),Asr=r(_9e," (LXMERT model)"),_9e.forEach(t),ysr=i(U),Iv=n(U,"LI",{});var u9e=s(Iv);O_e=n(u9e,"STRONG",{});var L_t=s(O_e);Lsr=r(L_t,"mobilebert"),L_t.forEach(t),xsr=r(u9e," \u2014 "),IV=n(u9e,"A",{href:!0});var x_t=s(IV);ksr=r(x_t,"TFMobileBertForPreTraining"),x_t.forEach(t),Ssr=r(u9e," (MobileBERT model)"),u9e.forEach(t),Rsr=i(U),qv=n(U,"LI",{});var b9e=s(qv);V_e=n(b9e,"STRONG",{});var k_t=s(V_e);Bsr=r(k_t,"mpnet"),k_t.forEach(t),Psr=r(b9e," \u2014 "),qV=n(b9e,"A",{href:!0});var S_t=s(qV);$sr=r(S_t,"TFMPNetForMaskedLM"),S_t.forEach(t),Isr=r(b9e," (MPNet model)"),b9e.forEach(t),qsr=i(U),Nv=n(U,"LI",{});var v9e=s(Nv);X_e=n(v9e,"STRONG",{});var R_t=s(X_e);Nsr=r(R_t,"openai-gpt"),R_t.forEach(t),jsr=r(v9e," \u2014 "),NV=n(v9e,"A",{href:!0});var B_t=s(NV);Dsr=r(B_t,"TFOpenAIGPTLMHeadModel"),B_t.forEach(t),Gsr=r(v9e," (OpenAI GPT model)"),v9e.forEach(t),Osr=i(U),jv=n(U,"LI",{});var F9e=s(jv);z_e=n(F9e,"STRONG",{});var P_t=s(z_e);Vsr=r(P_t,"roberta"),P_t.forEach(t),Xsr=r(F9e," \u2014 "),jV=n(F9e,"A",{href:!0});var $_t=s(jV);zsr=r($_t,"TFRobertaForMaskedLM"),$_t.forEach(t),Qsr=r(F9e," (RoBERTa model)"),F9e.forEach(t),Wsr=i(U),Dv=n(U,"LI",{});var T9e=s(Dv);Q_e=n(T9e,"STRONG",{});var I_t=s(Q_e);Hsr=r(I_t,"t5"),I_t.forEach(t),Usr=r(T9e," \u2014 "),DV=n(T9e,"A",{href:!0});var q_t=s(DV);Jsr=r(q_t,"TFT5ForConditionalGeneration"),q_t.forEach(t),Ysr=r(T9e," (T5 model)"),T9e.forEach(t),Ksr=i(U),Gv=n(U,"LI",{});var M9e=s(Gv);W_e=n(M9e,"STRONG",{});var N_t=s(W_e);Zsr=r(N_t,"tapas"),N_t.forEach(t),elr=r(M9e," \u2014 "),GV=n(M9e,"A",{href:!0});var j_t=s(GV);olr=r(j_t,"TFTapasForMaskedLM"),j_t.forEach(t),rlr=r(M9e," (TAPAS model)"),M9e.forEach(t),tlr=i(U),Ov=n(U,"LI",{});var E9e=s(Ov);H_e=n(E9e,"STRONG",{});var D_t=s(H_e);alr=r(D_t,"transfo-xl"),D_t.forEach(t),nlr=r(E9e," \u2014 "),OV=n(E9e,"A",{href:!0});var G_t=s(OV);slr=r(G_t,"TFTransfoXLLMHeadModel"),G_t.forEach(t),llr=r(E9e," (Transformer-XL model)"),E9e.forEach(t),ilr=i(U),Vv=n(U,"LI",{});var C9e=s(Vv);U_e=n(C9e,"STRONG",{});var O_t=s(U_e);dlr=r(O_t,"vit_mae"),O_t.forEach(t),clr=r(C9e," \u2014 "),VV=n(C9e,"A",{href:!0});var V_t=s(VV);flr=r(V_t,"TFViTMAEForPreTraining"),V_t.forEach(t),mlr=r(C9e," (ViTMAE model)"),C9e.forEach(t),glr=i(U),Xv=n(U,"LI",{});var w9e=s(Xv);J_e=n(w9e,"STRONG",{});var X_t=s(J_e);hlr=r(X_t,"xlm"),X_t.forEach(t),plr=r(w9e," \u2014 "),XV=n(w9e,"A",{href:!0});var z_t=s(XV);_lr=r(z_t,"TFXLMWithLMHeadModel"),z_t.forEach(t),ulr=r(w9e," (XLM model)"),w9e.forEach(t),blr=i(U),zv=n(U,"LI",{});var A9e=s(zv);Y_e=n(A9e,"STRONG",{});var Q_t=s(Y_e);vlr=r(Q_t,"xlm-roberta"),Q_t.forEach(t),Flr=r(A9e," \u2014 "),zV=n(A9e,"A",{href:!0});var W_t=s(zV);Tlr=r(W_t,"TFXLMRobertaForMaskedLM"),W_t.forEach(t),Mlr=r(A9e," (XLM-RoBERTa model)"),A9e.forEach(t),Elr=i(U),Qv=n(U,"LI",{});var y9e=s(Qv);K_e=n(y9e,"STRONG",{});var H_t=s(K_e);Clr=r(H_t,"xlnet"),H_t.forEach(t),wlr=r(y9e," \u2014 "),QV=n(y9e,"A",{href:!0});var U_t=s(QV);Alr=r(U_t,"TFXLNetLMHeadModel"),U_t.forEach(t),ylr=r(y9e," (XLNet model)"),y9e.forEach(t),U.forEach(t),Llr=i(_a),Z_e=n(_a,"P",{});var J_t=s(Z_e);xlr=r(J_t,"Examples:"),J_t.forEach(t),klr=i(_a),m(C0.$$.fragment,_a),_a.forEach(t),Ol.forEach(t),KBe=i(c),vc=n(c,"H2",{class:!0});var iIe=s(vc);Wv=n(iIe,"A",{id:!0,class:!0,href:!0});var Y_t=s(Wv);eue=n(Y_t,"SPAN",{});var K_t=s(eue);m(w0.$$.fragment,K_t),K_t.forEach(t),Y_t.forEach(t),Slr=i(iIe),oue=n(iIe,"SPAN",{});var Z_t=s(oue);Rlr=r(Z_t,"TFAutoModelForCausalLM"),Z_t.forEach(t),iIe.forEach(t),ZBe=i(c),Tr=n(c,"DIV",{class:!0});var Xl=s(Tr);m(A0.$$.fragment,Xl),Blr=i(Xl),Fc=n(Xl,"P",{});var EJ=s(Fc);Plr=r(EJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),WV=n(EJ,"A",{href:!0});var eut=s(WV);$lr=r(eut,"from_pretrained()"),eut.forEach(t),Ilr=r(EJ," class method or the "),HV=n(EJ,"A",{href:!0});var out=s(HV);qlr=r(out,"from_config()"),out.forEach(t),Nlr=r(EJ,` class
method.`),EJ.forEach(t),jlr=i(Xl),y0=n(Xl,"P",{});var dIe=s(y0);Dlr=r(dIe,"This class cannot be instantiated directly using "),rue=n(dIe,"CODE",{});var rut=s(rue);Glr=r(rut,"__init__()"),rut.forEach(t),Olr=r(dIe," (throws an error)."),dIe.forEach(t),Vlr=i(Xl),pt=n(Xl,"DIV",{class:!0});var zl=s(pt);m(L0.$$.fragment,zl),Xlr=i(zl),tue=n(zl,"P",{});var tut=s(tue);zlr=r(tut,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),tut.forEach(t),Qlr=i(zl),Tc=n(zl,"P",{});var CJ=s(Tc);Wlr=r(CJ,`Note:
Loading a model from its configuration file does `),aue=n(CJ,"STRONG",{});var aut=s(aue);Hlr=r(aut,"not"),aut.forEach(t),Ulr=r(CJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),UV=n(CJ,"A",{href:!0});var nut=s(UV);Jlr=r(nut,"from_pretrained()"),nut.forEach(t),Ylr=r(CJ," to load the model weights."),CJ.forEach(t),Klr=i(zl),nue=n(zl,"P",{});var sut=s(nue);Zlr=r(sut,"Examples:"),sut.forEach(t),eir=i(zl),m(x0.$$.fragment,zl),zl.forEach(t),oir=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(k0.$$.fragment,ua),rir=i(ua),sue=n(ua,"P",{});var lut=s(sue);tir=r(lut,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),lut.forEach(t),air=i(ua),vn=n(ua,"P",{});var iC=s(vn);nir=r(iC,"The model class to instantiate is selected based on the "),lue=n(iC,"CODE",{});var iut=s(lue);sir=r(iut,"model_type"),iut.forEach(t),lir=r(iC,` property of the config object (either
passed as an argument or loaded from `),iue=n(iC,"CODE",{});var dut=s(iue);iir=r(dut,"pretrained_model_name_or_path"),dut.forEach(t),dir=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),due=n(iC,"CODE",{});var cut=s(due);cir=r(cut,"pretrained_model_name_or_path"),cut.forEach(t),fir=r(iC,":"),iC.forEach(t),mir=i(ua),fe=n(ua,"UL",{});var pe=s(fe);Hv=n(pe,"LI",{});var L9e=s(Hv);cue=n(L9e,"STRONG",{});var fut=s(cue);gir=r(fut,"bert"),fut.forEach(t),hir=r(L9e," \u2014 "),JV=n(L9e,"A",{href:!0});var mut=s(JV);pir=r(mut,"TFBertLMHeadModel"),mut.forEach(t),_ir=r(L9e," (BERT model)"),L9e.forEach(t),uir=i(pe),Uv=n(pe,"LI",{});var x9e=s(Uv);fue=n(x9e,"STRONG",{});var gut=s(fue);bir=r(gut,"camembert"),gut.forEach(t),vir=r(x9e," \u2014 "),YV=n(x9e,"A",{href:!0});var hut=s(YV);Fir=r(hut,"TFCamembertForCausalLM"),hut.forEach(t),Tir=r(x9e," (CamemBERT model)"),x9e.forEach(t),Mir=i(pe),Jv=n(pe,"LI",{});var k9e=s(Jv);mue=n(k9e,"STRONG",{});var put=s(mue);Eir=r(put,"ctrl"),put.forEach(t),Cir=r(k9e," \u2014 "),KV=n(k9e,"A",{href:!0});var _ut=s(KV);wir=r(_ut,"TFCTRLLMHeadModel"),_ut.forEach(t),Air=r(k9e," (CTRL model)"),k9e.forEach(t),yir=i(pe),Yv=n(pe,"LI",{});var S9e=s(Yv);gue=n(S9e,"STRONG",{});var uut=s(gue);Lir=r(uut,"gpt2"),uut.forEach(t),xir=r(S9e," \u2014 "),ZV=n(S9e,"A",{href:!0});var but=s(ZV);kir=r(but,"TFGPT2LMHeadModel"),but.forEach(t),Sir=r(S9e," (OpenAI GPT-2 model)"),S9e.forEach(t),Rir=i(pe),Kv=n(pe,"LI",{});var R9e=s(Kv);hue=n(R9e,"STRONG",{});var vut=s(hue);Bir=r(vut,"gptj"),vut.forEach(t),Pir=r(R9e," \u2014 "),eX=n(R9e,"A",{href:!0});var Fut=s(eX);$ir=r(Fut,"TFGPTJForCausalLM"),Fut.forEach(t),Iir=r(R9e," (GPT-J model)"),R9e.forEach(t),qir=i(pe),Zv=n(pe,"LI",{});var B9e=s(Zv);pue=n(B9e,"STRONG",{});var Tut=s(pue);Nir=r(Tut,"openai-gpt"),Tut.forEach(t),jir=r(B9e," \u2014 "),oX=n(B9e,"A",{href:!0});var Mut=s(oX);Dir=r(Mut,"TFOpenAIGPTLMHeadModel"),Mut.forEach(t),Gir=r(B9e," (OpenAI GPT model)"),B9e.forEach(t),Oir=i(pe),eF=n(pe,"LI",{});var P9e=s(eF);_ue=n(P9e,"STRONG",{});var Eut=s(_ue);Vir=r(Eut,"rembert"),Eut.forEach(t),Xir=r(P9e," \u2014 "),rX=n(P9e,"A",{href:!0});var Cut=s(rX);zir=r(Cut,"TFRemBertForCausalLM"),Cut.forEach(t),Qir=r(P9e," (RemBERT model)"),P9e.forEach(t),Wir=i(pe),oF=n(pe,"LI",{});var $9e=s(oF);uue=n($9e,"STRONG",{});var wut=s(uue);Hir=r(wut,"roberta"),wut.forEach(t),Uir=r($9e," \u2014 "),tX=n($9e,"A",{href:!0});var Aut=s(tX);Jir=r(Aut,"TFRobertaForCausalLM"),Aut.forEach(t),Yir=r($9e," (RoBERTa model)"),$9e.forEach(t),Kir=i(pe),rF=n(pe,"LI",{});var I9e=s(rF);bue=n(I9e,"STRONG",{});var yut=s(bue);Zir=r(yut,"roformer"),yut.forEach(t),edr=r(I9e," \u2014 "),aX=n(I9e,"A",{href:!0});var Lut=s(aX);odr=r(Lut,"TFRoFormerForCausalLM"),Lut.forEach(t),rdr=r(I9e," (RoFormer model)"),I9e.forEach(t),tdr=i(pe),tF=n(pe,"LI",{});var q9e=s(tF);vue=n(q9e,"STRONG",{});var xut=s(vue);adr=r(xut,"transfo-xl"),xut.forEach(t),ndr=r(q9e," \u2014 "),nX=n(q9e,"A",{href:!0});var kut=s(nX);sdr=r(kut,"TFTransfoXLLMHeadModel"),kut.forEach(t),ldr=r(q9e," (Transformer-XL model)"),q9e.forEach(t),idr=i(pe),aF=n(pe,"LI",{});var N9e=s(aF);Fue=n(N9e,"STRONG",{});var Sut=s(Fue);ddr=r(Sut,"xlm"),Sut.forEach(t),cdr=r(N9e," \u2014 "),sX=n(N9e,"A",{href:!0});var Rut=s(sX);fdr=r(Rut,"TFXLMWithLMHeadModel"),Rut.forEach(t),mdr=r(N9e," (XLM model)"),N9e.forEach(t),gdr=i(pe),nF=n(pe,"LI",{});var j9e=s(nF);Tue=n(j9e,"STRONG",{});var But=s(Tue);hdr=r(But,"xlnet"),But.forEach(t),pdr=r(j9e," \u2014 "),lX=n(j9e,"A",{href:!0});var Put=s(lX);_dr=r(Put,"TFXLNetLMHeadModel"),Put.forEach(t),udr=r(j9e," (XLNet model)"),j9e.forEach(t),pe.forEach(t),bdr=i(ua),Mue=n(ua,"P",{});var $ut=s(Mue);vdr=r($ut,"Examples:"),$ut.forEach(t),Fdr=i(ua),m(S0.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),ePe=i(c),Mc=n(c,"H2",{class:!0});var cIe=s(Mc);sF=n(cIe,"A",{id:!0,class:!0,href:!0});var Iut=s(sF);Eue=n(Iut,"SPAN",{});var qut=s(Eue);m(R0.$$.fragment,qut),qut.forEach(t),Iut.forEach(t),Tdr=i(cIe),Cue=n(cIe,"SPAN",{});var Nut=s(Cue);Mdr=r(Nut,"TFAutoModelForImageClassification"),Nut.forEach(t),cIe.forEach(t),oPe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(B0.$$.fragment,Ql),Edr=i(Ql),Ec=n(Ql,"P",{});var wJ=s(Ec);Cdr=r(wJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),iX=n(wJ,"A",{href:!0});var jut=s(iX);wdr=r(jut,"from_pretrained()"),jut.forEach(t),Adr=r(wJ," class method or the "),dX=n(wJ,"A",{href:!0});var Dut=s(dX);ydr=r(Dut,"from_config()"),Dut.forEach(t),Ldr=r(wJ,` class
method.`),wJ.forEach(t),xdr=i(Ql),P0=n(Ql,"P",{});var fIe=s(P0);kdr=r(fIe,"This class cannot be instantiated directly using "),wue=n(fIe,"CODE",{});var Gut=s(wue);Sdr=r(Gut,"__init__()"),Gut.forEach(t),Rdr=r(fIe," (throws an error)."),fIe.forEach(t),Bdr=i(Ql),_t=n(Ql,"DIV",{class:!0});var Wl=s(_t);m($0.$$.fragment,Wl),Pdr=i(Wl),Aue=n(Wl,"P",{});var Out=s(Aue);$dr=r(Out,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Out.forEach(t),Idr=i(Wl),Cc=n(Wl,"P",{});var AJ=s(Cc);qdr=r(AJ,`Note:
Loading a model from its configuration file does `),yue=n(AJ,"STRONG",{});var Vut=s(yue);Ndr=r(Vut,"not"),Vut.forEach(t),jdr=r(AJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),cX=n(AJ,"A",{href:!0});var Xut=s(cX);Ddr=r(Xut,"from_pretrained()"),Xut.forEach(t),Gdr=r(AJ," to load the model weights."),AJ.forEach(t),Odr=i(Wl),Lue=n(Wl,"P",{});var zut=s(Lue);Vdr=r(zut,"Examples:"),zut.forEach(t),Xdr=i(Wl),m(I0.$$.fragment,Wl),Wl.forEach(t),zdr=i(Ql),uo=n(Ql,"DIV",{class:!0});var ba=s(uo);m(q0.$$.fragment,ba),Qdr=i(ba),xue=n(ba,"P",{});var Qut=s(xue);Wdr=r(Qut,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Qut.forEach(t),Hdr=i(ba),Fn=n(ba,"P",{});var dC=s(Fn);Udr=r(dC,"The model class to instantiate is selected based on the "),kue=n(dC,"CODE",{});var Wut=s(kue);Jdr=r(Wut,"model_type"),Wut.forEach(t),Ydr=r(dC,` property of the config object (either
passed as an argument or loaded from `),Sue=n(dC,"CODE",{});var Hut=s(Sue);Kdr=r(Hut,"pretrained_model_name_or_path"),Hut.forEach(t),Zdr=r(dC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rue=n(dC,"CODE",{});var Uut=s(Rue);ecr=r(Uut,"pretrained_model_name_or_path"),Uut.forEach(t),ocr=r(dC,":"),dC.forEach(t),rcr=i(ba),N0=n(ba,"UL",{});var mIe=s(N0);lF=n(mIe,"LI",{});var D9e=s(lF);Bue=n(D9e,"STRONG",{});var Jut=s(Bue);tcr=r(Jut,"convnext"),Jut.forEach(t),acr=r(D9e," \u2014 "),fX=n(D9e,"A",{href:!0});var Yut=s(fX);ncr=r(Yut,"TFConvNextForImageClassification"),Yut.forEach(t),scr=r(D9e," (ConvNext model)"),D9e.forEach(t),lcr=i(mIe),iF=n(mIe,"LI",{});var G9e=s(iF);Pue=n(G9e,"STRONG",{});var Kut=s(Pue);icr=r(Kut,"vit"),Kut.forEach(t),dcr=r(G9e," \u2014 "),mX=n(G9e,"A",{href:!0});var Zut=s(mX);ccr=r(Zut,"TFViTForImageClassification"),Zut.forEach(t),fcr=r(G9e," (ViT model)"),G9e.forEach(t),mIe.forEach(t),mcr=i(ba),$ue=n(ba,"P",{});var e1t=s($ue);gcr=r(e1t,"Examples:"),e1t.forEach(t),hcr=i(ba),m(j0.$$.fragment,ba),ba.forEach(t),Ql.forEach(t),rPe=i(c),wc=n(c,"H2",{class:!0});var gIe=s(wc);dF=n(gIe,"A",{id:!0,class:!0,href:!0});var o1t=s(dF);Iue=n(o1t,"SPAN",{});var r1t=s(Iue);m(D0.$$.fragment,r1t),r1t.forEach(t),o1t.forEach(t),pcr=i(gIe),que=n(gIe,"SPAN",{});var t1t=s(que);_cr=r(t1t,"TFAutoModelForMaskedLM"),t1t.forEach(t),gIe.forEach(t),tPe=i(c),Er=n(c,"DIV",{class:!0});var Hl=s(Er);m(G0.$$.fragment,Hl),ucr=i(Hl),Ac=n(Hl,"P",{});var yJ=s(Ac);bcr=r(yJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),gX=n(yJ,"A",{href:!0});var a1t=s(gX);vcr=r(a1t,"from_pretrained()"),a1t.forEach(t),Fcr=r(yJ," class method or the "),hX=n(yJ,"A",{href:!0});var n1t=s(hX);Tcr=r(n1t,"from_config()"),n1t.forEach(t),Mcr=r(yJ,` class
method.`),yJ.forEach(t),Ecr=i(Hl),O0=n(Hl,"P",{});var hIe=s(O0);Ccr=r(hIe,"This class cannot be instantiated directly using "),Nue=n(hIe,"CODE",{});var s1t=s(Nue);wcr=r(s1t,"__init__()"),s1t.forEach(t),Acr=r(hIe," (throws an error)."),hIe.forEach(t),ycr=i(Hl),ut=n(Hl,"DIV",{class:!0});var Ul=s(ut);m(V0.$$.fragment,Ul),Lcr=i(Ul),jue=n(Ul,"P",{});var l1t=s(jue);xcr=r(l1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),l1t.forEach(t),kcr=i(Ul),yc=n(Ul,"P",{});var LJ=s(yc);Scr=r(LJ,`Note:
Loading a model from its configuration file does `),Due=n(LJ,"STRONG",{});var i1t=s(Due);Rcr=r(i1t,"not"),i1t.forEach(t),Bcr=r(LJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(LJ,"A",{href:!0});var d1t=s(pX);Pcr=r(d1t,"from_pretrained()"),d1t.forEach(t),$cr=r(LJ," to load the model weights."),LJ.forEach(t),Icr=i(Ul),Gue=n(Ul,"P",{});var c1t=s(Gue);qcr=r(c1t,"Examples:"),c1t.forEach(t),Ncr=i(Ul),m(X0.$$.fragment,Ul),Ul.forEach(t),jcr=i(Hl),bo=n(Hl,"DIV",{class:!0});var va=s(bo);m(z0.$$.fragment,va),Dcr=i(va),Oue=n(va,"P",{});var f1t=s(Oue);Gcr=r(f1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),f1t.forEach(t),Ocr=i(va),Tn=n(va,"P",{});var cC=s(Tn);Vcr=r(cC,"The model class to instantiate is selected based on the "),Vue=n(cC,"CODE",{});var m1t=s(Vue);Xcr=r(m1t,"model_type"),m1t.forEach(t),zcr=r(cC,` property of the config object (either
passed as an argument or loaded from `),Xue=n(cC,"CODE",{});var g1t=s(Xue);Qcr=r(g1t,"pretrained_model_name_or_path"),g1t.forEach(t),Wcr=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zue=n(cC,"CODE",{});var h1t=s(zue);Hcr=r(h1t,"pretrained_model_name_or_path"),h1t.forEach(t),Ucr=r(cC,":"),cC.forEach(t),Jcr=i(va),J=n(va,"UL",{});var oe=s(J);cF=n(oe,"LI",{});var O9e=s(cF);Que=n(O9e,"STRONG",{});var p1t=s(Que);Ycr=r(p1t,"albert"),p1t.forEach(t),Kcr=r(O9e," \u2014 "),_X=n(O9e,"A",{href:!0});var _1t=s(_X);Zcr=r(_1t,"TFAlbertForMaskedLM"),_1t.forEach(t),efr=r(O9e," (ALBERT model)"),O9e.forEach(t),ofr=i(oe),fF=n(oe,"LI",{});var V9e=s(fF);Wue=n(V9e,"STRONG",{});var u1t=s(Wue);rfr=r(u1t,"bert"),u1t.forEach(t),tfr=r(V9e," \u2014 "),uX=n(V9e,"A",{href:!0});var b1t=s(uX);afr=r(b1t,"TFBertForMaskedLM"),b1t.forEach(t),nfr=r(V9e," (BERT model)"),V9e.forEach(t),sfr=i(oe),mF=n(oe,"LI",{});var X9e=s(mF);Hue=n(X9e,"STRONG",{});var v1t=s(Hue);lfr=r(v1t,"camembert"),v1t.forEach(t),ifr=r(X9e," \u2014 "),bX=n(X9e,"A",{href:!0});var F1t=s(bX);dfr=r(F1t,"TFCamembertForMaskedLM"),F1t.forEach(t),cfr=r(X9e," (CamemBERT model)"),X9e.forEach(t),ffr=i(oe),gF=n(oe,"LI",{});var z9e=s(gF);Uue=n(z9e,"STRONG",{});var T1t=s(Uue);mfr=r(T1t,"convbert"),T1t.forEach(t),gfr=r(z9e," \u2014 "),vX=n(z9e,"A",{href:!0});var M1t=s(vX);hfr=r(M1t,"TFConvBertForMaskedLM"),M1t.forEach(t),pfr=r(z9e," (ConvBERT model)"),z9e.forEach(t),_fr=i(oe),hF=n(oe,"LI",{});var Q9e=s(hF);Jue=n(Q9e,"STRONG",{});var E1t=s(Jue);ufr=r(E1t,"deberta"),E1t.forEach(t),bfr=r(Q9e," \u2014 "),FX=n(Q9e,"A",{href:!0});var C1t=s(FX);vfr=r(C1t,"TFDebertaForMaskedLM"),C1t.forEach(t),Ffr=r(Q9e," (DeBERTa model)"),Q9e.forEach(t),Tfr=i(oe),pF=n(oe,"LI",{});var W9e=s(pF);Yue=n(W9e,"STRONG",{});var w1t=s(Yue);Mfr=r(w1t,"deberta-v2"),w1t.forEach(t),Efr=r(W9e," \u2014 "),TX=n(W9e,"A",{href:!0});var A1t=s(TX);Cfr=r(A1t,"TFDebertaV2ForMaskedLM"),A1t.forEach(t),wfr=r(W9e," (DeBERTa-v2 model)"),W9e.forEach(t),Afr=i(oe),_F=n(oe,"LI",{});var H9e=s(_F);Kue=n(H9e,"STRONG",{});var y1t=s(Kue);yfr=r(y1t,"distilbert"),y1t.forEach(t),Lfr=r(H9e," \u2014 "),MX=n(H9e,"A",{href:!0});var L1t=s(MX);xfr=r(L1t,"TFDistilBertForMaskedLM"),L1t.forEach(t),kfr=r(H9e," (DistilBERT model)"),H9e.forEach(t),Sfr=i(oe),uF=n(oe,"LI",{});var U9e=s(uF);Zue=n(U9e,"STRONG",{});var x1t=s(Zue);Rfr=r(x1t,"electra"),x1t.forEach(t),Bfr=r(U9e," \u2014 "),EX=n(U9e,"A",{href:!0});var k1t=s(EX);Pfr=r(k1t,"TFElectraForMaskedLM"),k1t.forEach(t),$fr=r(U9e," (ELECTRA model)"),U9e.forEach(t),Ifr=i(oe),bF=n(oe,"LI",{});var J9e=s(bF);e1e=n(J9e,"STRONG",{});var S1t=s(e1e);qfr=r(S1t,"flaubert"),S1t.forEach(t),Nfr=r(J9e," \u2014 "),CX=n(J9e,"A",{href:!0});var R1t=s(CX);jfr=r(R1t,"TFFlaubertWithLMHeadModel"),R1t.forEach(t),Dfr=r(J9e," (FlauBERT model)"),J9e.forEach(t),Gfr=i(oe),vF=n(oe,"LI",{});var Y9e=s(vF);o1e=n(Y9e,"STRONG",{});var B1t=s(o1e);Ofr=r(B1t,"funnel"),B1t.forEach(t),Vfr=r(Y9e," \u2014 "),wX=n(Y9e,"A",{href:!0});var P1t=s(wX);Xfr=r(P1t,"TFFunnelForMaskedLM"),P1t.forEach(t),zfr=r(Y9e," (Funnel Transformer model)"),Y9e.forEach(t),Qfr=i(oe),FF=n(oe,"LI",{});var K9e=s(FF);r1e=n(K9e,"STRONG",{});var $1t=s(r1e);Wfr=r($1t,"layoutlm"),$1t.forEach(t),Hfr=r(K9e," \u2014 "),AX=n(K9e,"A",{href:!0});var I1t=s(AX);Ufr=r(I1t,"TFLayoutLMForMaskedLM"),I1t.forEach(t),Jfr=r(K9e," (LayoutLM model)"),K9e.forEach(t),Yfr=i(oe),TF=n(oe,"LI",{});var Z9e=s(TF);t1e=n(Z9e,"STRONG",{});var q1t=s(t1e);Kfr=r(q1t,"longformer"),q1t.forEach(t),Zfr=r(Z9e," \u2014 "),yX=n(Z9e,"A",{href:!0});var N1t=s(yX);emr=r(N1t,"TFLongformerForMaskedLM"),N1t.forEach(t),omr=r(Z9e," (Longformer model)"),Z9e.forEach(t),rmr=i(oe),MF=n(oe,"LI",{});var exe=s(MF);a1e=n(exe,"STRONG",{});var j1t=s(a1e);tmr=r(j1t,"mobilebert"),j1t.forEach(t),amr=r(exe," \u2014 "),LX=n(exe,"A",{href:!0});var D1t=s(LX);nmr=r(D1t,"TFMobileBertForMaskedLM"),D1t.forEach(t),smr=r(exe," (MobileBERT model)"),exe.forEach(t),lmr=i(oe),EF=n(oe,"LI",{});var oxe=s(EF);n1e=n(oxe,"STRONG",{});var G1t=s(n1e);imr=r(G1t,"mpnet"),G1t.forEach(t),dmr=r(oxe," \u2014 "),xX=n(oxe,"A",{href:!0});var O1t=s(xX);cmr=r(O1t,"TFMPNetForMaskedLM"),O1t.forEach(t),fmr=r(oxe," (MPNet model)"),oxe.forEach(t),mmr=i(oe),CF=n(oe,"LI",{});var rxe=s(CF);s1e=n(rxe,"STRONG",{});var V1t=s(s1e);gmr=r(V1t,"rembert"),V1t.forEach(t),hmr=r(rxe," \u2014 "),kX=n(rxe,"A",{href:!0});var X1t=s(kX);pmr=r(X1t,"TFRemBertForMaskedLM"),X1t.forEach(t),_mr=r(rxe," (RemBERT model)"),rxe.forEach(t),umr=i(oe),wF=n(oe,"LI",{});var txe=s(wF);l1e=n(txe,"STRONG",{});var z1t=s(l1e);bmr=r(z1t,"roberta"),z1t.forEach(t),vmr=r(txe," \u2014 "),SX=n(txe,"A",{href:!0});var Q1t=s(SX);Fmr=r(Q1t,"TFRobertaForMaskedLM"),Q1t.forEach(t),Tmr=r(txe," (RoBERTa model)"),txe.forEach(t),Mmr=i(oe),AF=n(oe,"LI",{});var axe=s(AF);i1e=n(axe,"STRONG",{});var W1t=s(i1e);Emr=r(W1t,"roformer"),W1t.forEach(t),Cmr=r(axe," \u2014 "),RX=n(axe,"A",{href:!0});var H1t=s(RX);wmr=r(H1t,"TFRoFormerForMaskedLM"),H1t.forEach(t),Amr=r(axe," (RoFormer model)"),axe.forEach(t),ymr=i(oe),yF=n(oe,"LI",{});var nxe=s(yF);d1e=n(nxe,"STRONG",{});var U1t=s(d1e);Lmr=r(U1t,"tapas"),U1t.forEach(t),xmr=r(nxe," \u2014 "),BX=n(nxe,"A",{href:!0});var J1t=s(BX);kmr=r(J1t,"TFTapasForMaskedLM"),J1t.forEach(t),Smr=r(nxe," (TAPAS model)"),nxe.forEach(t),Rmr=i(oe),LF=n(oe,"LI",{});var sxe=s(LF);c1e=n(sxe,"STRONG",{});var Y1t=s(c1e);Bmr=r(Y1t,"xlm"),Y1t.forEach(t),Pmr=r(sxe," \u2014 "),PX=n(sxe,"A",{href:!0});var K1t=s(PX);$mr=r(K1t,"TFXLMWithLMHeadModel"),K1t.forEach(t),Imr=r(sxe," (XLM model)"),sxe.forEach(t),qmr=i(oe),xF=n(oe,"LI",{});var lxe=s(xF);f1e=n(lxe,"STRONG",{});var Z1t=s(f1e);Nmr=r(Z1t,"xlm-roberta"),Z1t.forEach(t),jmr=r(lxe," \u2014 "),$X=n(lxe,"A",{href:!0});var e7t=s($X);Dmr=r(e7t,"TFXLMRobertaForMaskedLM"),e7t.forEach(t),Gmr=r(lxe," (XLM-RoBERTa model)"),lxe.forEach(t),oe.forEach(t),Omr=i(va),m1e=n(va,"P",{});var o7t=s(m1e);Vmr=r(o7t,"Examples:"),o7t.forEach(t),Xmr=i(va),m(Q0.$$.fragment,va),va.forEach(t),Hl.forEach(t),aPe=i(c),Lc=n(c,"H2",{class:!0});var pIe=s(Lc);kF=n(pIe,"A",{id:!0,class:!0,href:!0});var r7t=s(kF);g1e=n(r7t,"SPAN",{});var t7t=s(g1e);m(W0.$$.fragment,t7t),t7t.forEach(t),r7t.forEach(t),zmr=i(pIe),h1e=n(pIe,"SPAN",{});var a7t=s(h1e);Qmr=r(a7t,"TFAutoModelForSeq2SeqLM"),a7t.forEach(t),pIe.forEach(t),nPe=i(c),Cr=n(c,"DIV",{class:!0});var Jl=s(Cr);m(H0.$$.fragment,Jl),Wmr=i(Jl),xc=n(Jl,"P",{});var xJ=s(xc);Hmr=r(xJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),IX=n(xJ,"A",{href:!0});var n7t=s(IX);Umr=r(n7t,"from_pretrained()"),n7t.forEach(t),Jmr=r(xJ," class method or the "),qX=n(xJ,"A",{href:!0});var s7t=s(qX);Ymr=r(s7t,"from_config()"),s7t.forEach(t),Kmr=r(xJ,` class
method.`),xJ.forEach(t),Zmr=i(Jl),U0=n(Jl,"P",{});var _Ie=s(U0);egr=r(_Ie,"This class cannot be instantiated directly using "),p1e=n(_Ie,"CODE",{});var l7t=s(p1e);ogr=r(l7t,"__init__()"),l7t.forEach(t),rgr=r(_Ie," (throws an error)."),_Ie.forEach(t),tgr=i(Jl),bt=n(Jl,"DIV",{class:!0});var Yl=s(bt);m(J0.$$.fragment,Yl),agr=i(Yl),_1e=n(Yl,"P",{});var i7t=s(_1e);ngr=r(i7t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),i7t.forEach(t),sgr=i(Yl),kc=n(Yl,"P",{});var kJ=s(kc);lgr=r(kJ,`Note:
Loading a model from its configuration file does `),u1e=n(kJ,"STRONG",{});var d7t=s(u1e);igr=r(d7t,"not"),d7t.forEach(t),dgr=r(kJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NX=n(kJ,"A",{href:!0});var c7t=s(NX);cgr=r(c7t,"from_pretrained()"),c7t.forEach(t),fgr=r(kJ," to load the model weights."),kJ.forEach(t),mgr=i(Yl),b1e=n(Yl,"P",{});var f7t=s(b1e);ggr=r(f7t,"Examples:"),f7t.forEach(t),hgr=i(Yl),m(Y0.$$.fragment,Yl),Yl.forEach(t),pgr=i(Jl),vo=n(Jl,"DIV",{class:!0});var Fa=s(vo);m(K0.$$.fragment,Fa),_gr=i(Fa),v1e=n(Fa,"P",{});var m7t=s(v1e);ugr=r(m7t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),m7t.forEach(t),bgr=i(Fa),Mn=n(Fa,"P",{});var fC=s(Mn);vgr=r(fC,"The model class to instantiate is selected based on the "),F1e=n(fC,"CODE",{});var g7t=s(F1e);Fgr=r(g7t,"model_type"),g7t.forEach(t),Tgr=r(fC,` property of the config object (either
passed as an argument or loaded from `),T1e=n(fC,"CODE",{});var h7t=s(T1e);Mgr=r(h7t,"pretrained_model_name_or_path"),h7t.forEach(t),Egr=r(fC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M1e=n(fC,"CODE",{});var p7t=s(M1e);Cgr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),wgr=r(fC,":"),fC.forEach(t),Agr=i(Fa),be=n(Fa,"UL",{});var we=s(be);SF=n(we,"LI",{});var ixe=s(SF);E1e=n(ixe,"STRONG",{});var _7t=s(E1e);ygr=r(_7t,"bart"),_7t.forEach(t),Lgr=r(ixe," \u2014 "),jX=n(ixe,"A",{href:!0});var u7t=s(jX);xgr=r(u7t,"TFBartForConditionalGeneration"),u7t.forEach(t),kgr=r(ixe," (BART model)"),ixe.forEach(t),Sgr=i(we),RF=n(we,"LI",{});var dxe=s(RF);C1e=n(dxe,"STRONG",{});var b7t=s(C1e);Rgr=r(b7t,"blenderbot"),b7t.forEach(t),Bgr=r(dxe," \u2014 "),DX=n(dxe,"A",{href:!0});var v7t=s(DX);Pgr=r(v7t,"TFBlenderbotForConditionalGeneration"),v7t.forEach(t),$gr=r(dxe," (Blenderbot model)"),dxe.forEach(t),Igr=i(we),BF=n(we,"LI",{});var cxe=s(BF);w1e=n(cxe,"STRONG",{});var F7t=s(w1e);qgr=r(F7t,"blenderbot-small"),F7t.forEach(t),Ngr=r(cxe," \u2014 "),GX=n(cxe,"A",{href:!0});var T7t=s(GX);jgr=r(T7t,"TFBlenderbotSmallForConditionalGeneration"),T7t.forEach(t),Dgr=r(cxe," (BlenderbotSmall model)"),cxe.forEach(t),Ggr=i(we),PF=n(we,"LI",{});var fxe=s(PF);A1e=n(fxe,"STRONG",{});var M7t=s(A1e);Ogr=r(M7t,"encoder-decoder"),M7t.forEach(t),Vgr=r(fxe," \u2014 "),OX=n(fxe,"A",{href:!0});var E7t=s(OX);Xgr=r(E7t,"TFEncoderDecoderModel"),E7t.forEach(t),zgr=r(fxe," (Encoder decoder model)"),fxe.forEach(t),Qgr=i(we),$F=n(we,"LI",{});var mxe=s($F);y1e=n(mxe,"STRONG",{});var C7t=s(y1e);Wgr=r(C7t,"led"),C7t.forEach(t),Hgr=r(mxe," \u2014 "),VX=n(mxe,"A",{href:!0});var w7t=s(VX);Ugr=r(w7t,"TFLEDForConditionalGeneration"),w7t.forEach(t),Jgr=r(mxe," (LED model)"),mxe.forEach(t),Ygr=i(we),IF=n(we,"LI",{});var gxe=s(IF);L1e=n(gxe,"STRONG",{});var A7t=s(L1e);Kgr=r(A7t,"marian"),A7t.forEach(t),Zgr=r(gxe," \u2014 "),XX=n(gxe,"A",{href:!0});var y7t=s(XX);ehr=r(y7t,"TFMarianMTModel"),y7t.forEach(t),ohr=r(gxe," (Marian model)"),gxe.forEach(t),rhr=i(we),qF=n(we,"LI",{});var hxe=s(qF);x1e=n(hxe,"STRONG",{});var L7t=s(x1e);thr=r(L7t,"mbart"),L7t.forEach(t),ahr=r(hxe," \u2014 "),zX=n(hxe,"A",{href:!0});var x7t=s(zX);nhr=r(x7t,"TFMBartForConditionalGeneration"),x7t.forEach(t),shr=r(hxe," (mBART model)"),hxe.forEach(t),lhr=i(we),NF=n(we,"LI",{});var pxe=s(NF);k1e=n(pxe,"STRONG",{});var k7t=s(k1e);ihr=r(k7t,"mt5"),k7t.forEach(t),dhr=r(pxe," \u2014 "),QX=n(pxe,"A",{href:!0});var S7t=s(QX);chr=r(S7t,"TFMT5ForConditionalGeneration"),S7t.forEach(t),fhr=r(pxe," (mT5 model)"),pxe.forEach(t),mhr=i(we),jF=n(we,"LI",{});var _xe=s(jF);S1e=n(_xe,"STRONG",{});var R7t=s(S1e);ghr=r(R7t,"pegasus"),R7t.forEach(t),hhr=r(_xe," \u2014 "),WX=n(_xe,"A",{href:!0});var B7t=s(WX);phr=r(B7t,"TFPegasusForConditionalGeneration"),B7t.forEach(t),_hr=r(_xe," (Pegasus model)"),_xe.forEach(t),uhr=i(we),DF=n(we,"LI",{});var uxe=s(DF);R1e=n(uxe,"STRONG",{});var P7t=s(R1e);bhr=r(P7t,"t5"),P7t.forEach(t),vhr=r(uxe," \u2014 "),HX=n(uxe,"A",{href:!0});var $7t=s(HX);Fhr=r($7t,"TFT5ForConditionalGeneration"),$7t.forEach(t),Thr=r(uxe," (T5 model)"),uxe.forEach(t),we.forEach(t),Mhr=i(Fa),B1e=n(Fa,"P",{});var I7t=s(B1e);Ehr=r(I7t,"Examples:"),I7t.forEach(t),Chr=i(Fa),m(Z0.$$.fragment,Fa),Fa.forEach(t),Jl.forEach(t),sPe=i(c),Sc=n(c,"H2",{class:!0});var uIe=s(Sc);GF=n(uIe,"A",{id:!0,class:!0,href:!0});var q7t=s(GF);P1e=n(q7t,"SPAN",{});var N7t=s(P1e);m(ey.$$.fragment,N7t),N7t.forEach(t),q7t.forEach(t),whr=i(uIe),$1e=n(uIe,"SPAN",{});var j7t=s($1e);Ahr=r(j7t,"TFAutoModelForSequenceClassification"),j7t.forEach(t),uIe.forEach(t),lPe=i(c),wr=n(c,"DIV",{class:!0});var Kl=s(wr);m(oy.$$.fragment,Kl),yhr=i(Kl),Rc=n(Kl,"P",{});var SJ=s(Rc);Lhr=r(SJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),UX=n(SJ,"A",{href:!0});var D7t=s(UX);xhr=r(D7t,"from_pretrained()"),D7t.forEach(t),khr=r(SJ," class method or the "),JX=n(SJ,"A",{href:!0});var G7t=s(JX);Shr=r(G7t,"from_config()"),G7t.forEach(t),Rhr=r(SJ,` class
method.`),SJ.forEach(t),Bhr=i(Kl),ry=n(Kl,"P",{});var bIe=s(ry);Phr=r(bIe,"This class cannot be instantiated directly using "),I1e=n(bIe,"CODE",{});var O7t=s(I1e);$hr=r(O7t,"__init__()"),O7t.forEach(t),Ihr=r(bIe," (throws an error)."),bIe.forEach(t),qhr=i(Kl),vt=n(Kl,"DIV",{class:!0});var Zl=s(vt);m(ty.$$.fragment,Zl),Nhr=i(Zl),q1e=n(Zl,"P",{});var V7t=s(q1e);jhr=r(V7t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),V7t.forEach(t),Dhr=i(Zl),Bc=n(Zl,"P",{});var RJ=s(Bc);Ghr=r(RJ,`Note:
Loading a model from its configuration file does `),N1e=n(RJ,"STRONG",{});var X7t=s(N1e);Ohr=r(X7t,"not"),X7t.forEach(t),Vhr=r(RJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),YX=n(RJ,"A",{href:!0});var z7t=s(YX);Xhr=r(z7t,"from_pretrained()"),z7t.forEach(t),zhr=r(RJ," to load the model weights."),RJ.forEach(t),Qhr=i(Zl),j1e=n(Zl,"P",{});var Q7t=s(j1e);Whr=r(Q7t,"Examples:"),Q7t.forEach(t),Hhr=i(Zl),m(ay.$$.fragment,Zl),Zl.forEach(t),Uhr=i(Kl),Fo=n(Kl,"DIV",{class:!0});var Ta=s(Fo);m(ny.$$.fragment,Ta),Jhr=i(Ta),D1e=n(Ta,"P",{});var W7t=s(D1e);Yhr=r(W7t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),W7t.forEach(t),Khr=i(Ta),En=n(Ta,"P",{});var mC=s(En);Zhr=r(mC,"The model class to instantiate is selected based on the "),G1e=n(mC,"CODE",{});var H7t=s(G1e);epr=r(H7t,"model_type"),H7t.forEach(t),opr=r(mC,` property of the config object (either
passed as an argument or loaded from `),O1e=n(mC,"CODE",{});var U7t=s(O1e);rpr=r(U7t,"pretrained_model_name_or_path"),U7t.forEach(t),tpr=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V1e=n(mC,"CODE",{});var J7t=s(V1e);apr=r(J7t,"pretrained_model_name_or_path"),J7t.forEach(t),npr=r(mC,":"),mC.forEach(t),spr=i(Ta),V=n(Ta,"UL",{});var Q=s(V);OF=n(Q,"LI",{});var bxe=s(OF);X1e=n(bxe,"STRONG",{});var Y7t=s(X1e);lpr=r(Y7t,"albert"),Y7t.forEach(t),ipr=r(bxe," \u2014 "),KX=n(bxe,"A",{href:!0});var K7t=s(KX);dpr=r(K7t,"TFAlbertForSequenceClassification"),K7t.forEach(t),cpr=r(bxe," (ALBERT model)"),bxe.forEach(t),fpr=i(Q),VF=n(Q,"LI",{});var vxe=s(VF);z1e=n(vxe,"STRONG",{});var Z7t=s(z1e);mpr=r(Z7t,"bert"),Z7t.forEach(t),gpr=r(vxe," \u2014 "),ZX=n(vxe,"A",{href:!0});var ebt=s(ZX);hpr=r(ebt,"TFBertForSequenceClassification"),ebt.forEach(t),ppr=r(vxe," (BERT model)"),vxe.forEach(t),_pr=i(Q),XF=n(Q,"LI",{});var Fxe=s(XF);Q1e=n(Fxe,"STRONG",{});var obt=s(Q1e);upr=r(obt,"camembert"),obt.forEach(t),bpr=r(Fxe," \u2014 "),ez=n(Fxe,"A",{href:!0});var rbt=s(ez);vpr=r(rbt,"TFCamembertForSequenceClassification"),rbt.forEach(t),Fpr=r(Fxe," (CamemBERT model)"),Fxe.forEach(t),Tpr=i(Q),zF=n(Q,"LI",{});var Txe=s(zF);W1e=n(Txe,"STRONG",{});var tbt=s(W1e);Mpr=r(tbt,"convbert"),tbt.forEach(t),Epr=r(Txe," \u2014 "),oz=n(Txe,"A",{href:!0});var abt=s(oz);Cpr=r(abt,"TFConvBertForSequenceClassification"),abt.forEach(t),wpr=r(Txe," (ConvBERT model)"),Txe.forEach(t),Apr=i(Q),QF=n(Q,"LI",{});var Mxe=s(QF);H1e=n(Mxe,"STRONG",{});var nbt=s(H1e);ypr=r(nbt,"ctrl"),nbt.forEach(t),Lpr=r(Mxe," \u2014 "),rz=n(Mxe,"A",{href:!0});var sbt=s(rz);xpr=r(sbt,"TFCTRLForSequenceClassification"),sbt.forEach(t),kpr=r(Mxe," (CTRL model)"),Mxe.forEach(t),Spr=i(Q),WF=n(Q,"LI",{});var Exe=s(WF);U1e=n(Exe,"STRONG",{});var lbt=s(U1e);Rpr=r(lbt,"deberta"),lbt.forEach(t),Bpr=r(Exe," \u2014 "),tz=n(Exe,"A",{href:!0});var ibt=s(tz);Ppr=r(ibt,"TFDebertaForSequenceClassification"),ibt.forEach(t),$pr=r(Exe," (DeBERTa model)"),Exe.forEach(t),Ipr=i(Q),HF=n(Q,"LI",{});var Cxe=s(HF);J1e=n(Cxe,"STRONG",{});var dbt=s(J1e);qpr=r(dbt,"deberta-v2"),dbt.forEach(t),Npr=r(Cxe," \u2014 "),az=n(Cxe,"A",{href:!0});var cbt=s(az);jpr=r(cbt,"TFDebertaV2ForSequenceClassification"),cbt.forEach(t),Dpr=r(Cxe," (DeBERTa-v2 model)"),Cxe.forEach(t),Gpr=i(Q),UF=n(Q,"LI",{});var wxe=s(UF);Y1e=n(wxe,"STRONG",{});var fbt=s(Y1e);Opr=r(fbt,"distilbert"),fbt.forEach(t),Vpr=r(wxe," \u2014 "),nz=n(wxe,"A",{href:!0});var mbt=s(nz);Xpr=r(mbt,"TFDistilBertForSequenceClassification"),mbt.forEach(t),zpr=r(wxe," (DistilBERT model)"),wxe.forEach(t),Qpr=i(Q),JF=n(Q,"LI",{});var Axe=s(JF);K1e=n(Axe,"STRONG",{});var gbt=s(K1e);Wpr=r(gbt,"electra"),gbt.forEach(t),Hpr=r(Axe," \u2014 "),sz=n(Axe,"A",{href:!0});var hbt=s(sz);Upr=r(hbt,"TFElectraForSequenceClassification"),hbt.forEach(t),Jpr=r(Axe," (ELECTRA model)"),Axe.forEach(t),Ypr=i(Q),YF=n(Q,"LI",{});var yxe=s(YF);Z1e=n(yxe,"STRONG",{});var pbt=s(Z1e);Kpr=r(pbt,"flaubert"),pbt.forEach(t),Zpr=r(yxe," \u2014 "),lz=n(yxe,"A",{href:!0});var _bt=s(lz);e_r=r(_bt,"TFFlaubertForSequenceClassification"),_bt.forEach(t),o_r=r(yxe," (FlauBERT model)"),yxe.forEach(t),r_r=i(Q),KF=n(Q,"LI",{});var Lxe=s(KF);e7e=n(Lxe,"STRONG",{});var ubt=s(e7e);t_r=r(ubt,"funnel"),ubt.forEach(t),a_r=r(Lxe," \u2014 "),iz=n(Lxe,"A",{href:!0});var bbt=s(iz);n_r=r(bbt,"TFFunnelForSequenceClassification"),bbt.forEach(t),s_r=r(Lxe," (Funnel Transformer model)"),Lxe.forEach(t),l_r=i(Q),ZF=n(Q,"LI",{});var xxe=s(ZF);o7e=n(xxe,"STRONG",{});var vbt=s(o7e);i_r=r(vbt,"gpt2"),vbt.forEach(t),d_r=r(xxe," \u2014 "),dz=n(xxe,"A",{href:!0});var Fbt=s(dz);c_r=r(Fbt,"TFGPT2ForSequenceClassification"),Fbt.forEach(t),f_r=r(xxe," (OpenAI GPT-2 model)"),xxe.forEach(t),m_r=i(Q),eT=n(Q,"LI",{});var kxe=s(eT);r7e=n(kxe,"STRONG",{});var Tbt=s(r7e);g_r=r(Tbt,"gptj"),Tbt.forEach(t),h_r=r(kxe," \u2014 "),cz=n(kxe,"A",{href:!0});var Mbt=s(cz);p_r=r(Mbt,"TFGPTJForSequenceClassification"),Mbt.forEach(t),__r=r(kxe," (GPT-J model)"),kxe.forEach(t),u_r=i(Q),oT=n(Q,"LI",{});var Sxe=s(oT);t7e=n(Sxe,"STRONG",{});var Ebt=s(t7e);b_r=r(Ebt,"layoutlm"),Ebt.forEach(t),v_r=r(Sxe," \u2014 "),fz=n(Sxe,"A",{href:!0});var Cbt=s(fz);F_r=r(Cbt,"TFLayoutLMForSequenceClassification"),Cbt.forEach(t),T_r=r(Sxe," (LayoutLM model)"),Sxe.forEach(t),M_r=i(Q),rT=n(Q,"LI",{});var Rxe=s(rT);a7e=n(Rxe,"STRONG",{});var wbt=s(a7e);E_r=r(wbt,"longformer"),wbt.forEach(t),C_r=r(Rxe," \u2014 "),mz=n(Rxe,"A",{href:!0});var Abt=s(mz);w_r=r(Abt,"TFLongformerForSequenceClassification"),Abt.forEach(t),A_r=r(Rxe," (Longformer model)"),Rxe.forEach(t),y_r=i(Q),tT=n(Q,"LI",{});var Bxe=s(tT);n7e=n(Bxe,"STRONG",{});var ybt=s(n7e);L_r=r(ybt,"mobilebert"),ybt.forEach(t),x_r=r(Bxe," \u2014 "),gz=n(Bxe,"A",{href:!0});var Lbt=s(gz);k_r=r(Lbt,"TFMobileBertForSequenceClassification"),Lbt.forEach(t),S_r=r(Bxe," (MobileBERT model)"),Bxe.forEach(t),R_r=i(Q),aT=n(Q,"LI",{});var Pxe=s(aT);s7e=n(Pxe,"STRONG",{});var xbt=s(s7e);B_r=r(xbt,"mpnet"),xbt.forEach(t),P_r=r(Pxe," \u2014 "),hz=n(Pxe,"A",{href:!0});var kbt=s(hz);$_r=r(kbt,"TFMPNetForSequenceClassification"),kbt.forEach(t),I_r=r(Pxe," (MPNet model)"),Pxe.forEach(t),q_r=i(Q),nT=n(Q,"LI",{});var $xe=s(nT);l7e=n($xe,"STRONG",{});var Sbt=s(l7e);N_r=r(Sbt,"openai-gpt"),Sbt.forEach(t),j_r=r($xe," \u2014 "),pz=n($xe,"A",{href:!0});var Rbt=s(pz);D_r=r(Rbt,"TFOpenAIGPTForSequenceClassification"),Rbt.forEach(t),G_r=r($xe," (OpenAI GPT model)"),$xe.forEach(t),O_r=i(Q),sT=n(Q,"LI",{});var Ixe=s(sT);i7e=n(Ixe,"STRONG",{});var Bbt=s(i7e);V_r=r(Bbt,"rembert"),Bbt.forEach(t),X_r=r(Ixe," \u2014 "),_z=n(Ixe,"A",{href:!0});var Pbt=s(_z);z_r=r(Pbt,"TFRemBertForSequenceClassification"),Pbt.forEach(t),Q_r=r(Ixe," (RemBERT model)"),Ixe.forEach(t),W_r=i(Q),lT=n(Q,"LI",{});var qxe=s(lT);d7e=n(qxe,"STRONG",{});var $bt=s(d7e);H_r=r($bt,"roberta"),$bt.forEach(t),U_r=r(qxe," \u2014 "),uz=n(qxe,"A",{href:!0});var Ibt=s(uz);J_r=r(Ibt,"TFRobertaForSequenceClassification"),Ibt.forEach(t),Y_r=r(qxe," (RoBERTa model)"),qxe.forEach(t),K_r=i(Q),iT=n(Q,"LI",{});var Nxe=s(iT);c7e=n(Nxe,"STRONG",{});var qbt=s(c7e);Z_r=r(qbt,"roformer"),qbt.forEach(t),eur=r(Nxe," \u2014 "),bz=n(Nxe,"A",{href:!0});var Nbt=s(bz);our=r(Nbt,"TFRoFormerForSequenceClassification"),Nbt.forEach(t),rur=r(Nxe," (RoFormer model)"),Nxe.forEach(t),tur=i(Q),dT=n(Q,"LI",{});var jxe=s(dT);f7e=n(jxe,"STRONG",{});var jbt=s(f7e);aur=r(jbt,"tapas"),jbt.forEach(t),nur=r(jxe," \u2014 "),vz=n(jxe,"A",{href:!0});var Dbt=s(vz);sur=r(Dbt,"TFTapasForSequenceClassification"),Dbt.forEach(t),lur=r(jxe," (TAPAS model)"),jxe.forEach(t),iur=i(Q),cT=n(Q,"LI",{});var Dxe=s(cT);m7e=n(Dxe,"STRONG",{});var Gbt=s(m7e);dur=r(Gbt,"transfo-xl"),Gbt.forEach(t),cur=r(Dxe," \u2014 "),Fz=n(Dxe,"A",{href:!0});var Obt=s(Fz);fur=r(Obt,"TFTransfoXLForSequenceClassification"),Obt.forEach(t),mur=r(Dxe," (Transformer-XL model)"),Dxe.forEach(t),gur=i(Q),fT=n(Q,"LI",{});var Gxe=s(fT);g7e=n(Gxe,"STRONG",{});var Vbt=s(g7e);hur=r(Vbt,"xlm"),Vbt.forEach(t),pur=r(Gxe," \u2014 "),Tz=n(Gxe,"A",{href:!0});var Xbt=s(Tz);_ur=r(Xbt,"TFXLMForSequenceClassification"),Xbt.forEach(t),uur=r(Gxe," (XLM model)"),Gxe.forEach(t),bur=i(Q),mT=n(Q,"LI",{});var Oxe=s(mT);h7e=n(Oxe,"STRONG",{});var zbt=s(h7e);vur=r(zbt,"xlm-roberta"),zbt.forEach(t),Fur=r(Oxe," \u2014 "),Mz=n(Oxe,"A",{href:!0});var Qbt=s(Mz);Tur=r(Qbt,"TFXLMRobertaForSequenceClassification"),Qbt.forEach(t),Mur=r(Oxe," (XLM-RoBERTa model)"),Oxe.forEach(t),Eur=i(Q),gT=n(Q,"LI",{});var Vxe=s(gT);p7e=n(Vxe,"STRONG",{});var Wbt=s(p7e);Cur=r(Wbt,"xlnet"),Wbt.forEach(t),wur=r(Vxe," \u2014 "),Ez=n(Vxe,"A",{href:!0});var Hbt=s(Ez);Aur=r(Hbt,"TFXLNetForSequenceClassification"),Hbt.forEach(t),yur=r(Vxe," (XLNet model)"),Vxe.forEach(t),Q.forEach(t),Lur=i(Ta),_7e=n(Ta,"P",{});var Ubt=s(_7e);xur=r(Ubt,"Examples:"),Ubt.forEach(t),kur=i(Ta),m(sy.$$.fragment,Ta),Ta.forEach(t),Kl.forEach(t),iPe=i(c),Pc=n(c,"H2",{class:!0});var vIe=s(Pc);hT=n(vIe,"A",{id:!0,class:!0,href:!0});var Jbt=s(hT);u7e=n(Jbt,"SPAN",{});var Ybt=s(u7e);m(ly.$$.fragment,Ybt),Ybt.forEach(t),Jbt.forEach(t),Sur=i(vIe),b7e=n(vIe,"SPAN",{});var Kbt=s(b7e);Rur=r(Kbt,"TFAutoModelForMultipleChoice"),Kbt.forEach(t),vIe.forEach(t),dPe=i(c),Ar=n(c,"DIV",{class:!0});var ei=s(Ar);m(iy.$$.fragment,ei),Bur=i(ei),$c=n(ei,"P",{});var BJ=s($c);Pur=r(BJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),Cz=n(BJ,"A",{href:!0});var Zbt=s(Cz);$ur=r(Zbt,"from_pretrained()"),Zbt.forEach(t),Iur=r(BJ," class method or the "),wz=n(BJ,"A",{href:!0});var e2t=s(wz);qur=r(e2t,"from_config()"),e2t.forEach(t),Nur=r(BJ,` class
method.`),BJ.forEach(t),jur=i(ei),dy=n(ei,"P",{});var FIe=s(dy);Dur=r(FIe,"This class cannot be instantiated directly using "),v7e=n(FIe,"CODE",{});var o2t=s(v7e);Gur=r(o2t,"__init__()"),o2t.forEach(t),Our=r(FIe," (throws an error)."),FIe.forEach(t),Vur=i(ei),Ft=n(ei,"DIV",{class:!0});var oi=s(Ft);m(cy.$$.fragment,oi),Xur=i(oi),F7e=n(oi,"P",{});var r2t=s(F7e);zur=r(r2t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),r2t.forEach(t),Qur=i(oi),Ic=n(oi,"P",{});var PJ=s(Ic);Wur=r(PJ,`Note:
Loading a model from its configuration file does `),T7e=n(PJ,"STRONG",{});var t2t=s(T7e);Hur=r(t2t,"not"),t2t.forEach(t),Uur=r(PJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Az=n(PJ,"A",{href:!0});var a2t=s(Az);Jur=r(a2t,"from_pretrained()"),a2t.forEach(t),Yur=r(PJ," to load the model weights."),PJ.forEach(t),Kur=i(oi),M7e=n(oi,"P",{});var n2t=s(M7e);Zur=r(n2t,"Examples:"),n2t.forEach(t),e1r=i(oi),m(fy.$$.fragment,oi),oi.forEach(t),o1r=i(ei),To=n(ei,"DIV",{class:!0});var Ma=s(To);m(my.$$.fragment,Ma),r1r=i(Ma),E7e=n(Ma,"P",{});var s2t=s(E7e);t1r=r(s2t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),s2t.forEach(t),a1r=i(Ma),Cn=n(Ma,"P",{});var gC=s(Cn);n1r=r(gC,"The model class to instantiate is selected based on the "),C7e=n(gC,"CODE",{});var l2t=s(C7e);s1r=r(l2t,"model_type"),l2t.forEach(t),l1r=r(gC,` property of the config object (either
passed as an argument or loaded from `),w7e=n(gC,"CODE",{});var i2t=s(w7e);i1r=r(i2t,"pretrained_model_name_or_path"),i2t.forEach(t),d1r=r(gC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A7e=n(gC,"CODE",{});var d2t=s(A7e);c1r=r(d2t,"pretrained_model_name_or_path"),d2t.forEach(t),f1r=r(gC,":"),gC.forEach(t),m1r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);pT=n(ie,"LI",{});var Xxe=s(pT);y7e=n(Xxe,"STRONG",{});var c2t=s(y7e);g1r=r(c2t,"albert"),c2t.forEach(t),h1r=r(Xxe," \u2014 "),yz=n(Xxe,"A",{href:!0});var f2t=s(yz);p1r=r(f2t,"TFAlbertForMultipleChoice"),f2t.forEach(t),_1r=r(Xxe," (ALBERT model)"),Xxe.forEach(t),u1r=i(ie),_T=n(ie,"LI",{});var zxe=s(_T);L7e=n(zxe,"STRONG",{});var m2t=s(L7e);b1r=r(m2t,"bert"),m2t.forEach(t),v1r=r(zxe," \u2014 "),Lz=n(zxe,"A",{href:!0});var g2t=s(Lz);F1r=r(g2t,"TFBertForMultipleChoice"),g2t.forEach(t),T1r=r(zxe," (BERT model)"),zxe.forEach(t),M1r=i(ie),uT=n(ie,"LI",{});var Qxe=s(uT);x7e=n(Qxe,"STRONG",{});var h2t=s(x7e);E1r=r(h2t,"camembert"),h2t.forEach(t),C1r=r(Qxe," \u2014 "),xz=n(Qxe,"A",{href:!0});var p2t=s(xz);w1r=r(p2t,"TFCamembertForMultipleChoice"),p2t.forEach(t),A1r=r(Qxe," (CamemBERT model)"),Qxe.forEach(t),y1r=i(ie),bT=n(ie,"LI",{});var Wxe=s(bT);k7e=n(Wxe,"STRONG",{});var _2t=s(k7e);L1r=r(_2t,"convbert"),_2t.forEach(t),x1r=r(Wxe," \u2014 "),kz=n(Wxe,"A",{href:!0});var u2t=s(kz);k1r=r(u2t,"TFConvBertForMultipleChoice"),u2t.forEach(t),S1r=r(Wxe," (ConvBERT model)"),Wxe.forEach(t),R1r=i(ie),vT=n(ie,"LI",{});var Hxe=s(vT);S7e=n(Hxe,"STRONG",{});var b2t=s(S7e);B1r=r(b2t,"distilbert"),b2t.forEach(t),P1r=r(Hxe," \u2014 "),Sz=n(Hxe,"A",{href:!0});var v2t=s(Sz);$1r=r(v2t,"TFDistilBertForMultipleChoice"),v2t.forEach(t),I1r=r(Hxe," (DistilBERT model)"),Hxe.forEach(t),q1r=i(ie),FT=n(ie,"LI",{});var Uxe=s(FT);R7e=n(Uxe,"STRONG",{});var F2t=s(R7e);N1r=r(F2t,"electra"),F2t.forEach(t),j1r=r(Uxe," \u2014 "),Rz=n(Uxe,"A",{href:!0});var T2t=s(Rz);D1r=r(T2t,"TFElectraForMultipleChoice"),T2t.forEach(t),G1r=r(Uxe," (ELECTRA model)"),Uxe.forEach(t),O1r=i(ie),TT=n(ie,"LI",{});var Jxe=s(TT);B7e=n(Jxe,"STRONG",{});var M2t=s(B7e);V1r=r(M2t,"flaubert"),M2t.forEach(t),X1r=r(Jxe," \u2014 "),Bz=n(Jxe,"A",{href:!0});var E2t=s(Bz);z1r=r(E2t,"TFFlaubertForMultipleChoice"),E2t.forEach(t),Q1r=r(Jxe," (FlauBERT model)"),Jxe.forEach(t),W1r=i(ie),MT=n(ie,"LI",{});var Yxe=s(MT);P7e=n(Yxe,"STRONG",{});var C2t=s(P7e);H1r=r(C2t,"funnel"),C2t.forEach(t),U1r=r(Yxe," \u2014 "),Pz=n(Yxe,"A",{href:!0});var w2t=s(Pz);J1r=r(w2t,"TFFunnelForMultipleChoice"),w2t.forEach(t),Y1r=r(Yxe," (Funnel Transformer model)"),Yxe.forEach(t),K1r=i(ie),ET=n(ie,"LI",{});var Kxe=s(ET);$7e=n(Kxe,"STRONG",{});var A2t=s($7e);Z1r=r(A2t,"longformer"),A2t.forEach(t),e7r=r(Kxe," \u2014 "),$z=n(Kxe,"A",{href:!0});var y2t=s($z);o7r=r(y2t,"TFLongformerForMultipleChoice"),y2t.forEach(t),r7r=r(Kxe," (Longformer model)"),Kxe.forEach(t),t7r=i(ie),CT=n(ie,"LI",{});var Zxe=s(CT);I7e=n(Zxe,"STRONG",{});var L2t=s(I7e);a7r=r(L2t,"mobilebert"),L2t.forEach(t),n7r=r(Zxe," \u2014 "),Iz=n(Zxe,"A",{href:!0});var x2t=s(Iz);s7r=r(x2t,"TFMobileBertForMultipleChoice"),x2t.forEach(t),l7r=r(Zxe," (MobileBERT model)"),Zxe.forEach(t),i7r=i(ie),wT=n(ie,"LI",{});var eke=s(wT);q7e=n(eke,"STRONG",{});var k2t=s(q7e);d7r=r(k2t,"mpnet"),k2t.forEach(t),c7r=r(eke," \u2014 "),qz=n(eke,"A",{href:!0});var S2t=s(qz);f7r=r(S2t,"TFMPNetForMultipleChoice"),S2t.forEach(t),m7r=r(eke," (MPNet model)"),eke.forEach(t),g7r=i(ie),AT=n(ie,"LI",{});var oke=s(AT);N7e=n(oke,"STRONG",{});var R2t=s(N7e);h7r=r(R2t,"rembert"),R2t.forEach(t),p7r=r(oke," \u2014 "),Nz=n(oke,"A",{href:!0});var B2t=s(Nz);_7r=r(B2t,"TFRemBertForMultipleChoice"),B2t.forEach(t),u7r=r(oke," (RemBERT model)"),oke.forEach(t),b7r=i(ie),yT=n(ie,"LI",{});var rke=s(yT);j7e=n(rke,"STRONG",{});var P2t=s(j7e);v7r=r(P2t,"roberta"),P2t.forEach(t),F7r=r(rke," \u2014 "),jz=n(rke,"A",{href:!0});var $2t=s(jz);T7r=r($2t,"TFRobertaForMultipleChoice"),$2t.forEach(t),M7r=r(rke," (RoBERTa model)"),rke.forEach(t),E7r=i(ie),LT=n(ie,"LI",{});var tke=s(LT);D7e=n(tke,"STRONG",{});var I2t=s(D7e);C7r=r(I2t,"roformer"),I2t.forEach(t),w7r=r(tke," \u2014 "),Dz=n(tke,"A",{href:!0});var q2t=s(Dz);A7r=r(q2t,"TFRoFormerForMultipleChoice"),q2t.forEach(t),y7r=r(tke," (RoFormer model)"),tke.forEach(t),L7r=i(ie),xT=n(ie,"LI",{});var ake=s(xT);G7e=n(ake,"STRONG",{});var N2t=s(G7e);x7r=r(N2t,"xlm"),N2t.forEach(t),k7r=r(ake," \u2014 "),Gz=n(ake,"A",{href:!0});var j2t=s(Gz);S7r=r(j2t,"TFXLMForMultipleChoice"),j2t.forEach(t),R7r=r(ake," (XLM model)"),ake.forEach(t),B7r=i(ie),kT=n(ie,"LI",{});var nke=s(kT);O7e=n(nke,"STRONG",{});var D2t=s(O7e);P7r=r(D2t,"xlm-roberta"),D2t.forEach(t),$7r=r(nke," \u2014 "),Oz=n(nke,"A",{href:!0});var G2t=s(Oz);I7r=r(G2t,"TFXLMRobertaForMultipleChoice"),G2t.forEach(t),q7r=r(nke," (XLM-RoBERTa model)"),nke.forEach(t),N7r=i(ie),ST=n(ie,"LI",{});var ske=s(ST);V7e=n(ske,"STRONG",{});var O2t=s(V7e);j7r=r(O2t,"xlnet"),O2t.forEach(t),D7r=r(ske," \u2014 "),Vz=n(ske,"A",{href:!0});var V2t=s(Vz);G7r=r(V2t,"TFXLNetForMultipleChoice"),V2t.forEach(t),O7r=r(ske," (XLNet model)"),ske.forEach(t),ie.forEach(t),V7r=i(Ma),X7e=n(Ma,"P",{});var X2t=s(X7e);X7r=r(X2t,"Examples:"),X2t.forEach(t),z7r=i(Ma),m(gy.$$.fragment,Ma),Ma.forEach(t),ei.forEach(t),cPe=i(c),qc=n(c,"H2",{class:!0});var TIe=s(qc);RT=n(TIe,"A",{id:!0,class:!0,href:!0});var z2t=s(RT);z7e=n(z2t,"SPAN",{});var Q2t=s(z7e);m(hy.$$.fragment,Q2t),Q2t.forEach(t),z2t.forEach(t),Q7r=i(TIe),Q7e=n(TIe,"SPAN",{});var W2t=s(Q7e);W7r=r(W2t,"TFAutoModelForTableQuestionAnswering"),W2t.forEach(t),TIe.forEach(t),fPe=i(c),yr=n(c,"DIV",{class:!0});var ri=s(yr);m(py.$$.fragment,ri),H7r=i(ri),Nc=n(ri,"P",{});var $J=s(Nc);U7r=r($J,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),Xz=n($J,"A",{href:!0});var H2t=s(Xz);J7r=r(H2t,"from_pretrained()"),H2t.forEach(t),Y7r=r($J," class method or the "),zz=n($J,"A",{href:!0});var U2t=s(zz);K7r=r(U2t,"from_config()"),U2t.forEach(t),Z7r=r($J,` class
method.`),$J.forEach(t),ebr=i(ri),_y=n(ri,"P",{});var MIe=s(_y);obr=r(MIe,"This class cannot be instantiated directly using "),W7e=n(MIe,"CODE",{});var J2t=s(W7e);rbr=r(J2t,"__init__()"),J2t.forEach(t),tbr=r(MIe," (throws an error)."),MIe.forEach(t),abr=i(ri),Tt=n(ri,"DIV",{class:!0});var ti=s(Tt);m(uy.$$.fragment,ti),nbr=i(ti),H7e=n(ti,"P",{});var Y2t=s(H7e);sbr=r(Y2t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Y2t.forEach(t),lbr=i(ti),jc=n(ti,"P",{});var IJ=s(jc);ibr=r(IJ,`Note:
Loading a model from its configuration file does `),U7e=n(IJ,"STRONG",{});var K2t=s(U7e);dbr=r(K2t,"not"),K2t.forEach(t),cbr=r(IJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Qz=n(IJ,"A",{href:!0});var Z2t=s(Qz);fbr=r(Z2t,"from_pretrained()"),Z2t.forEach(t),mbr=r(IJ," to load the model weights."),IJ.forEach(t),gbr=i(ti),J7e=n(ti,"P",{});var e5t=s(J7e);hbr=r(e5t,"Examples:"),e5t.forEach(t),pbr=i(ti),m(by.$$.fragment,ti),ti.forEach(t),_br=i(ri),Mo=n(ri,"DIV",{class:!0});var Ea=s(Mo);m(vy.$$.fragment,Ea),ubr=i(Ea),Y7e=n(Ea,"P",{});var o5t=s(Y7e);bbr=r(o5t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),o5t.forEach(t),vbr=i(Ea),wn=n(Ea,"P",{});var hC=s(wn);Fbr=r(hC,"The model class to instantiate is selected based on the "),K7e=n(hC,"CODE",{});var r5t=s(K7e);Tbr=r(r5t,"model_type"),r5t.forEach(t),Mbr=r(hC,` property of the config object (either
passed as an argument or loaded from `),Z7e=n(hC,"CODE",{});var t5t=s(Z7e);Ebr=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),Cbr=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ebe=n(hC,"CODE",{});var a5t=s(ebe);wbr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),Abr=r(hC,":"),hC.forEach(t),ybr=i(Ea),obe=n(Ea,"UL",{});var n5t=s(obe);BT=n(n5t,"LI",{});var lke=s(BT);rbe=n(lke,"STRONG",{});var s5t=s(rbe);Lbr=r(s5t,"tapas"),s5t.forEach(t),xbr=r(lke," \u2014 "),Wz=n(lke,"A",{href:!0});var l5t=s(Wz);kbr=r(l5t,"TFTapasForQuestionAnswering"),l5t.forEach(t),Sbr=r(lke," (TAPAS model)"),lke.forEach(t),n5t.forEach(t),Rbr=i(Ea),tbe=n(Ea,"P",{});var i5t=s(tbe);Bbr=r(i5t,"Examples:"),i5t.forEach(t),Pbr=i(Ea),m(Fy.$$.fragment,Ea),Ea.forEach(t),ri.forEach(t),mPe=i(c),Dc=n(c,"H2",{class:!0});var EIe=s(Dc);PT=n(EIe,"A",{id:!0,class:!0,href:!0});var d5t=s(PT);abe=n(d5t,"SPAN",{});var c5t=s(abe);m(Ty.$$.fragment,c5t),c5t.forEach(t),d5t.forEach(t),$br=i(EIe),nbe=n(EIe,"SPAN",{});var f5t=s(nbe);Ibr=r(f5t,"TFAutoModelForTokenClassification"),f5t.forEach(t),EIe.forEach(t),gPe=i(c),Lr=n(c,"DIV",{class:!0});var ai=s(Lr);m(My.$$.fragment,ai),qbr=i(ai),Gc=n(ai,"P",{});var qJ=s(Gc);Nbr=r(qJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Hz=n(qJ,"A",{href:!0});var m5t=s(Hz);jbr=r(m5t,"from_pretrained()"),m5t.forEach(t),Dbr=r(qJ," class method or the "),Uz=n(qJ,"A",{href:!0});var g5t=s(Uz);Gbr=r(g5t,"from_config()"),g5t.forEach(t),Obr=r(qJ,` class
method.`),qJ.forEach(t),Vbr=i(ai),Ey=n(ai,"P",{});var CIe=s(Ey);Xbr=r(CIe,"This class cannot be instantiated directly using "),sbe=n(CIe,"CODE",{});var h5t=s(sbe);zbr=r(h5t,"__init__()"),h5t.forEach(t),Qbr=r(CIe," (throws an error)."),CIe.forEach(t),Wbr=i(ai),Mt=n(ai,"DIV",{class:!0});var ni=s(Mt);m(Cy.$$.fragment,ni),Hbr=i(ni),lbe=n(ni,"P",{});var p5t=s(lbe);Ubr=r(p5t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),p5t.forEach(t),Jbr=i(ni),Oc=n(ni,"P",{});var NJ=s(Oc);Ybr=r(NJ,`Note:
Loading a model from its configuration file does `),ibe=n(NJ,"STRONG",{});var _5t=s(ibe);Kbr=r(_5t,"not"),_5t.forEach(t),Zbr=r(NJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jz=n(NJ,"A",{href:!0});var u5t=s(Jz);e2r=r(u5t,"from_pretrained()"),u5t.forEach(t),o2r=r(NJ," to load the model weights."),NJ.forEach(t),r2r=i(ni),dbe=n(ni,"P",{});var b5t=s(dbe);t2r=r(b5t,"Examples:"),b5t.forEach(t),a2r=i(ni),m(wy.$$.fragment,ni),ni.forEach(t),n2r=i(ai),Eo=n(ai,"DIV",{class:!0});var Ca=s(Eo);m(Ay.$$.fragment,Ca),s2r=i(Ca),cbe=n(Ca,"P",{});var v5t=s(cbe);l2r=r(v5t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),v5t.forEach(t),i2r=i(Ca),An=n(Ca,"P",{});var pC=s(An);d2r=r(pC,"The model class to instantiate is selected based on the "),fbe=n(pC,"CODE",{});var F5t=s(fbe);c2r=r(F5t,"model_type"),F5t.forEach(t),f2r=r(pC,` property of the config object (either
passed as an argument or loaded from `),mbe=n(pC,"CODE",{});var T5t=s(mbe);m2r=r(T5t,"pretrained_model_name_or_path"),T5t.forEach(t),g2r=r(pC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gbe=n(pC,"CODE",{});var M5t=s(gbe);h2r=r(M5t,"pretrained_model_name_or_path"),M5t.forEach(t),p2r=r(pC,":"),pC.forEach(t),_2r=i(Ca),Y=n(Ca,"UL",{});var re=s(Y);$T=n(re,"LI",{});var ike=s($T);hbe=n(ike,"STRONG",{});var E5t=s(hbe);u2r=r(E5t,"albert"),E5t.forEach(t),b2r=r(ike," \u2014 "),Yz=n(ike,"A",{href:!0});var C5t=s(Yz);v2r=r(C5t,"TFAlbertForTokenClassification"),C5t.forEach(t),F2r=r(ike," (ALBERT model)"),ike.forEach(t),T2r=i(re),IT=n(re,"LI",{});var dke=s(IT);pbe=n(dke,"STRONG",{});var w5t=s(pbe);M2r=r(w5t,"bert"),w5t.forEach(t),E2r=r(dke," \u2014 "),Kz=n(dke,"A",{href:!0});var A5t=s(Kz);C2r=r(A5t,"TFBertForTokenClassification"),A5t.forEach(t),w2r=r(dke," (BERT model)"),dke.forEach(t),A2r=i(re),qT=n(re,"LI",{});var cke=s(qT);_be=n(cke,"STRONG",{});var y5t=s(_be);y2r=r(y5t,"camembert"),y5t.forEach(t),L2r=r(cke," \u2014 "),Zz=n(cke,"A",{href:!0});var L5t=s(Zz);x2r=r(L5t,"TFCamembertForTokenClassification"),L5t.forEach(t),k2r=r(cke," (CamemBERT model)"),cke.forEach(t),S2r=i(re),NT=n(re,"LI",{});var fke=s(NT);ube=n(fke,"STRONG",{});var x5t=s(ube);R2r=r(x5t,"convbert"),x5t.forEach(t),B2r=r(fke," \u2014 "),eQ=n(fke,"A",{href:!0});var k5t=s(eQ);P2r=r(k5t,"TFConvBertForTokenClassification"),k5t.forEach(t),$2r=r(fke," (ConvBERT model)"),fke.forEach(t),I2r=i(re),jT=n(re,"LI",{});var mke=s(jT);bbe=n(mke,"STRONG",{});var S5t=s(bbe);q2r=r(S5t,"deberta"),S5t.forEach(t),N2r=r(mke," \u2014 "),oQ=n(mke,"A",{href:!0});var R5t=s(oQ);j2r=r(R5t,"TFDebertaForTokenClassification"),R5t.forEach(t),D2r=r(mke," (DeBERTa model)"),mke.forEach(t),G2r=i(re),DT=n(re,"LI",{});var gke=s(DT);vbe=n(gke,"STRONG",{});var B5t=s(vbe);O2r=r(B5t,"deberta-v2"),B5t.forEach(t),V2r=r(gke," \u2014 "),rQ=n(gke,"A",{href:!0});var P5t=s(rQ);X2r=r(P5t,"TFDebertaV2ForTokenClassification"),P5t.forEach(t),z2r=r(gke," (DeBERTa-v2 model)"),gke.forEach(t),Q2r=i(re),GT=n(re,"LI",{});var hke=s(GT);Fbe=n(hke,"STRONG",{});var $5t=s(Fbe);W2r=r($5t,"distilbert"),$5t.forEach(t),H2r=r(hke," \u2014 "),tQ=n(hke,"A",{href:!0});var I5t=s(tQ);U2r=r(I5t,"TFDistilBertForTokenClassification"),I5t.forEach(t),J2r=r(hke," (DistilBERT model)"),hke.forEach(t),Y2r=i(re),OT=n(re,"LI",{});var pke=s(OT);Tbe=n(pke,"STRONG",{});var q5t=s(Tbe);K2r=r(q5t,"electra"),q5t.forEach(t),Z2r=r(pke," \u2014 "),aQ=n(pke,"A",{href:!0});var N5t=s(aQ);e5r=r(N5t,"TFElectraForTokenClassification"),N5t.forEach(t),o5r=r(pke," (ELECTRA model)"),pke.forEach(t),r5r=i(re),VT=n(re,"LI",{});var _ke=s(VT);Mbe=n(_ke,"STRONG",{});var j5t=s(Mbe);t5r=r(j5t,"flaubert"),j5t.forEach(t),a5r=r(_ke," \u2014 "),nQ=n(_ke,"A",{href:!0});var D5t=s(nQ);n5r=r(D5t,"TFFlaubertForTokenClassification"),D5t.forEach(t),s5r=r(_ke," (FlauBERT model)"),_ke.forEach(t),l5r=i(re),XT=n(re,"LI",{});var uke=s(XT);Ebe=n(uke,"STRONG",{});var G5t=s(Ebe);i5r=r(G5t,"funnel"),G5t.forEach(t),d5r=r(uke," \u2014 "),sQ=n(uke,"A",{href:!0});var O5t=s(sQ);c5r=r(O5t,"TFFunnelForTokenClassification"),O5t.forEach(t),f5r=r(uke," (Funnel Transformer model)"),uke.forEach(t),m5r=i(re),zT=n(re,"LI",{});var bke=s(zT);Cbe=n(bke,"STRONG",{});var V5t=s(Cbe);g5r=r(V5t,"layoutlm"),V5t.forEach(t),h5r=r(bke," \u2014 "),lQ=n(bke,"A",{href:!0});var X5t=s(lQ);p5r=r(X5t,"TFLayoutLMForTokenClassification"),X5t.forEach(t),_5r=r(bke," (LayoutLM model)"),bke.forEach(t),u5r=i(re),QT=n(re,"LI",{});var vke=s(QT);wbe=n(vke,"STRONG",{});var z5t=s(wbe);b5r=r(z5t,"longformer"),z5t.forEach(t),v5r=r(vke," \u2014 "),iQ=n(vke,"A",{href:!0});var Q5t=s(iQ);F5r=r(Q5t,"TFLongformerForTokenClassification"),Q5t.forEach(t),T5r=r(vke," (Longformer model)"),vke.forEach(t),M5r=i(re),WT=n(re,"LI",{});var Fke=s(WT);Abe=n(Fke,"STRONG",{});var W5t=s(Abe);E5r=r(W5t,"mobilebert"),W5t.forEach(t),C5r=r(Fke," \u2014 "),dQ=n(Fke,"A",{href:!0});var H5t=s(dQ);w5r=r(H5t,"TFMobileBertForTokenClassification"),H5t.forEach(t),A5r=r(Fke," (MobileBERT model)"),Fke.forEach(t),y5r=i(re),HT=n(re,"LI",{});var Tke=s(HT);ybe=n(Tke,"STRONG",{});var U5t=s(ybe);L5r=r(U5t,"mpnet"),U5t.forEach(t),x5r=r(Tke," \u2014 "),cQ=n(Tke,"A",{href:!0});var J5t=s(cQ);k5r=r(J5t,"TFMPNetForTokenClassification"),J5t.forEach(t),S5r=r(Tke," (MPNet model)"),Tke.forEach(t),R5r=i(re),UT=n(re,"LI",{});var Mke=s(UT);Lbe=n(Mke,"STRONG",{});var Y5t=s(Lbe);B5r=r(Y5t,"rembert"),Y5t.forEach(t),P5r=r(Mke," \u2014 "),fQ=n(Mke,"A",{href:!0});var K5t=s(fQ);$5r=r(K5t,"TFRemBertForTokenClassification"),K5t.forEach(t),I5r=r(Mke," (RemBERT model)"),Mke.forEach(t),q5r=i(re),JT=n(re,"LI",{});var Eke=s(JT);xbe=n(Eke,"STRONG",{});var Z5t=s(xbe);N5r=r(Z5t,"roberta"),Z5t.forEach(t),j5r=r(Eke," \u2014 "),mQ=n(Eke,"A",{href:!0});var e3t=s(mQ);D5r=r(e3t,"TFRobertaForTokenClassification"),e3t.forEach(t),G5r=r(Eke," (RoBERTa model)"),Eke.forEach(t),O5r=i(re),YT=n(re,"LI",{});var Cke=s(YT);kbe=n(Cke,"STRONG",{});var o3t=s(kbe);V5r=r(o3t,"roformer"),o3t.forEach(t),X5r=r(Cke," \u2014 "),gQ=n(Cke,"A",{href:!0});var r3t=s(gQ);z5r=r(r3t,"TFRoFormerForTokenClassification"),r3t.forEach(t),Q5r=r(Cke," (RoFormer model)"),Cke.forEach(t),W5r=i(re),KT=n(re,"LI",{});var wke=s(KT);Sbe=n(wke,"STRONG",{});var t3t=s(Sbe);H5r=r(t3t,"xlm"),t3t.forEach(t),U5r=r(wke," \u2014 "),hQ=n(wke,"A",{href:!0});var a3t=s(hQ);J5r=r(a3t,"TFXLMForTokenClassification"),a3t.forEach(t),Y5r=r(wke," (XLM model)"),wke.forEach(t),K5r=i(re),ZT=n(re,"LI",{});var Ake=s(ZT);Rbe=n(Ake,"STRONG",{});var n3t=s(Rbe);Z5r=r(n3t,"xlm-roberta"),n3t.forEach(t),e3r=r(Ake," \u2014 "),pQ=n(Ake,"A",{href:!0});var s3t=s(pQ);o3r=r(s3t,"TFXLMRobertaForTokenClassification"),s3t.forEach(t),r3r=r(Ake," (XLM-RoBERTa model)"),Ake.forEach(t),t3r=i(re),eM=n(re,"LI",{});var yke=s(eM);Bbe=n(yke,"STRONG",{});var l3t=s(Bbe);a3r=r(l3t,"xlnet"),l3t.forEach(t),n3r=r(yke," \u2014 "),_Q=n(yke,"A",{href:!0});var i3t=s(_Q);s3r=r(i3t,"TFXLNetForTokenClassification"),i3t.forEach(t),l3r=r(yke," (XLNet model)"),yke.forEach(t),re.forEach(t),i3r=i(Ca),Pbe=n(Ca,"P",{});var d3t=s(Pbe);d3r=r(d3t,"Examples:"),d3t.forEach(t),c3r=i(Ca),m(yy.$$.fragment,Ca),Ca.forEach(t),ai.forEach(t),hPe=i(c),Vc=n(c,"H2",{class:!0});var wIe=s(Vc);oM=n(wIe,"A",{id:!0,class:!0,href:!0});var c3t=s(oM);$be=n(c3t,"SPAN",{});var f3t=s($be);m(Ly.$$.fragment,f3t),f3t.forEach(t),c3t.forEach(t),f3r=i(wIe),Ibe=n(wIe,"SPAN",{});var m3t=s(Ibe);m3r=r(m3t,"TFAutoModelForQuestionAnswering"),m3t.forEach(t),wIe.forEach(t),pPe=i(c),xr=n(c,"DIV",{class:!0});var si=s(xr);m(xy.$$.fragment,si),g3r=i(si),Xc=n(si,"P",{});var jJ=s(Xc);h3r=r(jJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),uQ=n(jJ,"A",{href:!0});var g3t=s(uQ);p3r=r(g3t,"from_pretrained()"),g3t.forEach(t),_3r=r(jJ," class method or the "),bQ=n(jJ,"A",{href:!0});var h3t=s(bQ);u3r=r(h3t,"from_config()"),h3t.forEach(t),b3r=r(jJ,` class
method.`),jJ.forEach(t),v3r=i(si),ky=n(si,"P",{});var AIe=s(ky);F3r=r(AIe,"This class cannot be instantiated directly using "),qbe=n(AIe,"CODE",{});var p3t=s(qbe);T3r=r(p3t,"__init__()"),p3t.forEach(t),M3r=r(AIe," (throws an error)."),AIe.forEach(t),E3r=i(si),Et=n(si,"DIV",{class:!0});var li=s(Et);m(Sy.$$.fragment,li),C3r=i(li),Nbe=n(li,"P",{});var _3t=s(Nbe);w3r=r(_3t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_3t.forEach(t),A3r=i(li),zc=n(li,"P",{});var DJ=s(zc);y3r=r(DJ,`Note:
Loading a model from its configuration file does `),jbe=n(DJ,"STRONG",{});var u3t=s(jbe);L3r=r(u3t,"not"),u3t.forEach(t),x3r=r(DJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),vQ=n(DJ,"A",{href:!0});var b3t=s(vQ);k3r=r(b3t,"from_pretrained()"),b3t.forEach(t),S3r=r(DJ," to load the model weights."),DJ.forEach(t),R3r=i(li),Dbe=n(li,"P",{});var v3t=s(Dbe);B3r=r(v3t,"Examples:"),v3t.forEach(t),P3r=i(li),m(Ry.$$.fragment,li),li.forEach(t),$3r=i(si),Co=n(si,"DIV",{class:!0});var wa=s(Co);m(By.$$.fragment,wa),I3r=i(wa),Gbe=n(wa,"P",{});var F3t=s(Gbe);q3r=r(F3t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),F3t.forEach(t),N3r=i(wa),yn=n(wa,"P",{});var _C=s(yn);j3r=r(_C,"The model class to instantiate is selected based on the "),Obe=n(_C,"CODE",{});var T3t=s(Obe);D3r=r(T3t,"model_type"),T3t.forEach(t),G3r=r(_C,` property of the config object (either
passed as an argument or loaded from `),Vbe=n(_C,"CODE",{});var M3t=s(Vbe);O3r=r(M3t,"pretrained_model_name_or_path"),M3t.forEach(t),V3r=r(_C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xbe=n(_C,"CODE",{});var E3t=s(Xbe);X3r=r(E3t,"pretrained_model_name_or_path"),E3t.forEach(t),z3r=r(_C,":"),_C.forEach(t),Q3r=i(wa),K=n(wa,"UL",{});var te=s(K);rM=n(te,"LI",{});var Lke=s(rM);zbe=n(Lke,"STRONG",{});var C3t=s(zbe);W3r=r(C3t,"albert"),C3t.forEach(t),H3r=r(Lke," \u2014 "),FQ=n(Lke,"A",{href:!0});var w3t=s(FQ);U3r=r(w3t,"TFAlbertForQuestionAnswering"),w3t.forEach(t),J3r=r(Lke," (ALBERT model)"),Lke.forEach(t),Y3r=i(te),tM=n(te,"LI",{});var xke=s(tM);Qbe=n(xke,"STRONG",{});var A3t=s(Qbe);K3r=r(A3t,"bert"),A3t.forEach(t),Z3r=r(xke," \u2014 "),TQ=n(xke,"A",{href:!0});var y3t=s(TQ);evr=r(y3t,"TFBertForQuestionAnswering"),y3t.forEach(t),ovr=r(xke," (BERT model)"),xke.forEach(t),rvr=i(te),aM=n(te,"LI",{});var kke=s(aM);Wbe=n(kke,"STRONG",{});var L3t=s(Wbe);tvr=r(L3t,"camembert"),L3t.forEach(t),avr=r(kke," \u2014 "),MQ=n(kke,"A",{href:!0});var x3t=s(MQ);nvr=r(x3t,"TFCamembertForQuestionAnswering"),x3t.forEach(t),svr=r(kke," (CamemBERT model)"),kke.forEach(t),lvr=i(te),nM=n(te,"LI",{});var Ske=s(nM);Hbe=n(Ske,"STRONG",{});var k3t=s(Hbe);ivr=r(k3t,"convbert"),k3t.forEach(t),dvr=r(Ske," \u2014 "),EQ=n(Ske,"A",{href:!0});var S3t=s(EQ);cvr=r(S3t,"TFConvBertForQuestionAnswering"),S3t.forEach(t),fvr=r(Ske," (ConvBERT model)"),Ske.forEach(t),mvr=i(te),sM=n(te,"LI",{});var Rke=s(sM);Ube=n(Rke,"STRONG",{});var R3t=s(Ube);gvr=r(R3t,"deberta"),R3t.forEach(t),hvr=r(Rke," \u2014 "),CQ=n(Rke,"A",{href:!0});var B3t=s(CQ);pvr=r(B3t,"TFDebertaForQuestionAnswering"),B3t.forEach(t),_vr=r(Rke," (DeBERTa model)"),Rke.forEach(t),uvr=i(te),lM=n(te,"LI",{});var Bke=s(lM);Jbe=n(Bke,"STRONG",{});var P3t=s(Jbe);bvr=r(P3t,"deberta-v2"),P3t.forEach(t),vvr=r(Bke," \u2014 "),wQ=n(Bke,"A",{href:!0});var $3t=s(wQ);Fvr=r($3t,"TFDebertaV2ForQuestionAnswering"),$3t.forEach(t),Tvr=r(Bke," (DeBERTa-v2 model)"),Bke.forEach(t),Mvr=i(te),iM=n(te,"LI",{});var Pke=s(iM);Ybe=n(Pke,"STRONG",{});var I3t=s(Ybe);Evr=r(I3t,"distilbert"),I3t.forEach(t),Cvr=r(Pke," \u2014 "),AQ=n(Pke,"A",{href:!0});var q3t=s(AQ);wvr=r(q3t,"TFDistilBertForQuestionAnswering"),q3t.forEach(t),Avr=r(Pke," (DistilBERT model)"),Pke.forEach(t),yvr=i(te),dM=n(te,"LI",{});var $ke=s(dM);Kbe=n($ke,"STRONG",{});var N3t=s(Kbe);Lvr=r(N3t,"electra"),N3t.forEach(t),xvr=r($ke," \u2014 "),yQ=n($ke,"A",{href:!0});var j3t=s(yQ);kvr=r(j3t,"TFElectraForQuestionAnswering"),j3t.forEach(t),Svr=r($ke," (ELECTRA model)"),$ke.forEach(t),Rvr=i(te),cM=n(te,"LI",{});var Ike=s(cM);Zbe=n(Ike,"STRONG",{});var D3t=s(Zbe);Bvr=r(D3t,"flaubert"),D3t.forEach(t),Pvr=r(Ike," \u2014 "),LQ=n(Ike,"A",{href:!0});var G3t=s(LQ);$vr=r(G3t,"TFFlaubertForQuestionAnsweringSimple"),G3t.forEach(t),Ivr=r(Ike," (FlauBERT model)"),Ike.forEach(t),qvr=i(te),fM=n(te,"LI",{});var qke=s(fM);e2e=n(qke,"STRONG",{});var O3t=s(e2e);Nvr=r(O3t,"funnel"),O3t.forEach(t),jvr=r(qke," \u2014 "),xQ=n(qke,"A",{href:!0});var V3t=s(xQ);Dvr=r(V3t,"TFFunnelForQuestionAnswering"),V3t.forEach(t),Gvr=r(qke," (Funnel Transformer model)"),qke.forEach(t),Ovr=i(te),mM=n(te,"LI",{});var Nke=s(mM);o2e=n(Nke,"STRONG",{});var X3t=s(o2e);Vvr=r(X3t,"gptj"),X3t.forEach(t),Xvr=r(Nke," \u2014 "),kQ=n(Nke,"A",{href:!0});var z3t=s(kQ);zvr=r(z3t,"TFGPTJForQuestionAnswering"),z3t.forEach(t),Qvr=r(Nke," (GPT-J model)"),Nke.forEach(t),Wvr=i(te),gM=n(te,"LI",{});var jke=s(gM);r2e=n(jke,"STRONG",{});var Q3t=s(r2e);Hvr=r(Q3t,"longformer"),Q3t.forEach(t),Uvr=r(jke," \u2014 "),SQ=n(jke,"A",{href:!0});var W3t=s(SQ);Jvr=r(W3t,"TFLongformerForQuestionAnswering"),W3t.forEach(t),Yvr=r(jke," (Longformer model)"),jke.forEach(t),Kvr=i(te),hM=n(te,"LI",{});var Dke=s(hM);t2e=n(Dke,"STRONG",{});var H3t=s(t2e);Zvr=r(H3t,"mobilebert"),H3t.forEach(t),eFr=r(Dke," \u2014 "),RQ=n(Dke,"A",{href:!0});var U3t=s(RQ);oFr=r(U3t,"TFMobileBertForQuestionAnswering"),U3t.forEach(t),rFr=r(Dke," (MobileBERT model)"),Dke.forEach(t),tFr=i(te),pM=n(te,"LI",{});var Gke=s(pM);a2e=n(Gke,"STRONG",{});var J3t=s(a2e);aFr=r(J3t,"mpnet"),J3t.forEach(t),nFr=r(Gke," \u2014 "),BQ=n(Gke,"A",{href:!0});var Y3t=s(BQ);sFr=r(Y3t,"TFMPNetForQuestionAnswering"),Y3t.forEach(t),lFr=r(Gke," (MPNet model)"),Gke.forEach(t),iFr=i(te),_M=n(te,"LI",{});var Oke=s(_M);n2e=n(Oke,"STRONG",{});var K3t=s(n2e);dFr=r(K3t,"rembert"),K3t.forEach(t),cFr=r(Oke," \u2014 "),PQ=n(Oke,"A",{href:!0});var Z3t=s(PQ);fFr=r(Z3t,"TFRemBertForQuestionAnswering"),Z3t.forEach(t),mFr=r(Oke," (RemBERT model)"),Oke.forEach(t),gFr=i(te),uM=n(te,"LI",{});var Vke=s(uM);s2e=n(Vke,"STRONG",{});var evt=s(s2e);hFr=r(evt,"roberta"),evt.forEach(t),pFr=r(Vke," \u2014 "),$Q=n(Vke,"A",{href:!0});var ovt=s($Q);_Fr=r(ovt,"TFRobertaForQuestionAnswering"),ovt.forEach(t),uFr=r(Vke," (RoBERTa model)"),Vke.forEach(t),bFr=i(te),bM=n(te,"LI",{});var Xke=s(bM);l2e=n(Xke,"STRONG",{});var rvt=s(l2e);vFr=r(rvt,"roformer"),rvt.forEach(t),FFr=r(Xke," \u2014 "),IQ=n(Xke,"A",{href:!0});var tvt=s(IQ);TFr=r(tvt,"TFRoFormerForQuestionAnswering"),tvt.forEach(t),MFr=r(Xke," (RoFormer model)"),Xke.forEach(t),EFr=i(te),vM=n(te,"LI",{});var zke=s(vM);i2e=n(zke,"STRONG",{});var avt=s(i2e);CFr=r(avt,"xlm"),avt.forEach(t),wFr=r(zke," \u2014 "),qQ=n(zke,"A",{href:!0});var nvt=s(qQ);AFr=r(nvt,"TFXLMForQuestionAnsweringSimple"),nvt.forEach(t),yFr=r(zke," (XLM model)"),zke.forEach(t),LFr=i(te),FM=n(te,"LI",{});var Qke=s(FM);d2e=n(Qke,"STRONG",{});var svt=s(d2e);xFr=r(svt,"xlm-roberta"),svt.forEach(t),kFr=r(Qke," \u2014 "),NQ=n(Qke,"A",{href:!0});var lvt=s(NQ);SFr=r(lvt,"TFXLMRobertaForQuestionAnswering"),lvt.forEach(t),RFr=r(Qke," (XLM-RoBERTa model)"),Qke.forEach(t),BFr=i(te),TM=n(te,"LI",{});var Wke=s(TM);c2e=n(Wke,"STRONG",{});var ivt=s(c2e);PFr=r(ivt,"xlnet"),ivt.forEach(t),$Fr=r(Wke," \u2014 "),jQ=n(Wke,"A",{href:!0});var dvt=s(jQ);IFr=r(dvt,"TFXLNetForQuestionAnsweringSimple"),dvt.forEach(t),qFr=r(Wke," (XLNet model)"),Wke.forEach(t),te.forEach(t),NFr=i(wa),f2e=n(wa,"P",{});var cvt=s(f2e);jFr=r(cvt,"Examples:"),cvt.forEach(t),DFr=i(wa),m(Py.$$.fragment,wa),wa.forEach(t),si.forEach(t),_Pe=i(c),Qc=n(c,"H2",{class:!0});var yIe=s(Qc);MM=n(yIe,"A",{id:!0,class:!0,href:!0});var fvt=s(MM);m2e=n(fvt,"SPAN",{});var mvt=s(m2e);m($y.$$.fragment,mvt),mvt.forEach(t),fvt.forEach(t),GFr=i(yIe),g2e=n(yIe,"SPAN",{});var gvt=s(g2e);OFr=r(gvt,"TFAutoModelForVision2Seq"),gvt.forEach(t),yIe.forEach(t),uPe=i(c),kr=n(c,"DIV",{class:!0});var ii=s(kr);m(Iy.$$.fragment,ii),VFr=i(ii),Wc=n(ii,"P",{});var GJ=s(Wc);XFr=r(GJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DQ=n(GJ,"A",{href:!0});var hvt=s(DQ);zFr=r(hvt,"from_pretrained()"),hvt.forEach(t),QFr=r(GJ," class method or the "),GQ=n(GJ,"A",{href:!0});var pvt=s(GQ);WFr=r(pvt,"from_config()"),pvt.forEach(t),HFr=r(GJ,` class
method.`),GJ.forEach(t),UFr=i(ii),qy=n(ii,"P",{});var LIe=s(qy);JFr=r(LIe,"This class cannot be instantiated directly using "),h2e=n(LIe,"CODE",{});var _vt=s(h2e);YFr=r(_vt,"__init__()"),_vt.forEach(t),KFr=r(LIe," (throws an error)."),LIe.forEach(t),ZFr=i(ii),Ct=n(ii,"DIV",{class:!0});var di=s(Ct);m(Ny.$$.fragment,di),eTr=i(di),p2e=n(di,"P",{});var uvt=s(p2e);oTr=r(uvt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),uvt.forEach(t),rTr=i(di),Hc=n(di,"P",{});var OJ=s(Hc);tTr=r(OJ,`Note:
Loading a model from its configuration file does `),_2e=n(OJ,"STRONG",{});var bvt=s(_2e);aTr=r(bvt,"not"),bvt.forEach(t),nTr=r(OJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(OJ,"A",{href:!0});var vvt=s(OQ);sTr=r(vvt,"from_pretrained()"),vvt.forEach(t),lTr=r(OJ," to load the model weights."),OJ.forEach(t),iTr=i(di),u2e=n(di,"P",{});var Fvt=s(u2e);dTr=r(Fvt,"Examples:"),Fvt.forEach(t),cTr=i(di),m(jy.$$.fragment,di),di.forEach(t),fTr=i(ii),wo=n(ii,"DIV",{class:!0});var Aa=s(wo);m(Dy.$$.fragment,Aa),mTr=i(Aa),b2e=n(Aa,"P",{});var Tvt=s(b2e);gTr=r(Tvt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tvt.forEach(t),hTr=i(Aa),Ln=n(Aa,"P",{});var uC=s(Ln);pTr=r(uC,"The model class to instantiate is selected based on the "),v2e=n(uC,"CODE",{});var Mvt=s(v2e);_Tr=r(Mvt,"model_type"),Mvt.forEach(t),uTr=r(uC,` property of the config object (either
passed as an argument or loaded from `),F2e=n(uC,"CODE",{});var Evt=s(F2e);bTr=r(Evt,"pretrained_model_name_or_path"),Evt.forEach(t),vTr=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(uC,"CODE",{});var Cvt=s(T2e);FTr=r(Cvt,"pretrained_model_name_or_path"),Cvt.forEach(t),TTr=r(uC,":"),uC.forEach(t),MTr=i(Aa),M2e=n(Aa,"UL",{});var wvt=s(M2e);EM=n(wvt,"LI",{});var Hke=s(EM);E2e=n(Hke,"STRONG",{});var Avt=s(E2e);ETr=r(Avt,"vision-encoder-decoder"),Avt.forEach(t),CTr=r(Hke," \u2014 "),VQ=n(Hke,"A",{href:!0});var yvt=s(VQ);wTr=r(yvt,"TFVisionEncoderDecoderModel"),yvt.forEach(t),ATr=r(Hke," (Vision Encoder decoder model)"),Hke.forEach(t),wvt.forEach(t),yTr=i(Aa),C2e=n(Aa,"P",{});var Lvt=s(C2e);LTr=r(Lvt,"Examples:"),Lvt.forEach(t),xTr=i(Aa),m(Gy.$$.fragment,Aa),Aa.forEach(t),ii.forEach(t),bPe=i(c),Uc=n(c,"H2",{class:!0});var xIe=s(Uc);CM=n(xIe,"A",{id:!0,class:!0,href:!0});var xvt=s(CM);w2e=n(xvt,"SPAN",{});var kvt=s(w2e);m(Oy.$$.fragment,kvt),kvt.forEach(t),xvt.forEach(t),kTr=i(xIe),A2e=n(xIe,"SPAN",{});var Svt=s(A2e);STr=r(Svt,"TFAutoModelForSpeechSeq2Seq"),Svt.forEach(t),xIe.forEach(t),vPe=i(c),Sr=n(c,"DIV",{class:!0});var ci=s(Sr);m(Vy.$$.fragment,ci),RTr=i(ci),Jc=n(ci,"P",{});var VJ=s(Jc);BTr=r(VJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),XQ=n(VJ,"A",{href:!0});var Rvt=s(XQ);PTr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),$Tr=r(VJ," class method or the "),zQ=n(VJ,"A",{href:!0});var Bvt=s(zQ);ITr=r(Bvt,"from_config()"),Bvt.forEach(t),qTr=r(VJ,` class
method.`),VJ.forEach(t),NTr=i(ci),Xy=n(ci,"P",{});var kIe=s(Xy);jTr=r(kIe,"This class cannot be instantiated directly using "),y2e=n(kIe,"CODE",{});var Pvt=s(y2e);DTr=r(Pvt,"__init__()"),Pvt.forEach(t),GTr=r(kIe," (throws an error)."),kIe.forEach(t),OTr=i(ci),wt=n(ci,"DIV",{class:!0});var fi=s(wt);m(zy.$$.fragment,fi),VTr=i(fi),L2e=n(fi,"P",{});var $vt=s(L2e);XTr=r($vt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),$vt.forEach(t),zTr=i(fi),Yc=n(fi,"P",{});var XJ=s(Yc);QTr=r(XJ,`Note:
Loading a model from its configuration file does `),x2e=n(XJ,"STRONG",{});var Ivt=s(x2e);WTr=r(Ivt,"not"),Ivt.forEach(t),HTr=r(XJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),QQ=n(XJ,"A",{href:!0});var qvt=s(QQ);UTr=r(qvt,"from_pretrained()"),qvt.forEach(t),JTr=r(XJ," to load the model weights."),XJ.forEach(t),YTr=i(fi),k2e=n(fi,"P",{});var Nvt=s(k2e);KTr=r(Nvt,"Examples:"),Nvt.forEach(t),ZTr=i(fi),m(Qy.$$.fragment,fi),fi.forEach(t),eMr=i(ci),Ao=n(ci,"DIV",{class:!0});var ya=s(Ao);m(Wy.$$.fragment,ya),oMr=i(ya),S2e=n(ya,"P",{});var jvt=s(S2e);rMr=r(jvt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),jvt.forEach(t),tMr=i(ya),xn=n(ya,"P",{});var bC=s(xn);aMr=r(bC,"The model class to instantiate is selected based on the "),R2e=n(bC,"CODE",{});var Dvt=s(R2e);nMr=r(Dvt,"model_type"),Dvt.forEach(t),sMr=r(bC,` property of the config object (either
passed as an argument or loaded from `),B2e=n(bC,"CODE",{});var Gvt=s(B2e);lMr=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),iMr=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P2e=n(bC,"CODE",{});var Ovt=s(P2e);dMr=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),cMr=r(bC,":"),bC.forEach(t),fMr=i(ya),$2e=n(ya,"UL",{});var Vvt=s($2e);wM=n(Vvt,"LI",{});var Uke=s(wM);I2e=n(Uke,"STRONG",{});var Xvt=s(I2e);mMr=r(Xvt,"speech_to_text"),Xvt.forEach(t),gMr=r(Uke," \u2014 "),WQ=n(Uke,"A",{href:!0});var zvt=s(WQ);hMr=r(zvt,"TFSpeech2TextForConditionalGeneration"),zvt.forEach(t),pMr=r(Uke," (Speech2Text model)"),Uke.forEach(t),Vvt.forEach(t),_Mr=i(ya),q2e=n(ya,"P",{});var Qvt=s(q2e);uMr=r(Qvt,"Examples:"),Qvt.forEach(t),bMr=i(ya),m(Hy.$$.fragment,ya),ya.forEach(t),ci.forEach(t),FPe=i(c),Kc=n(c,"H2",{class:!0});var SIe=s(Kc);AM=n(SIe,"A",{id:!0,class:!0,href:!0});var Wvt=s(AM);N2e=n(Wvt,"SPAN",{});var Hvt=s(N2e);m(Uy.$$.fragment,Hvt),Hvt.forEach(t),Wvt.forEach(t),vMr=i(SIe),j2e=n(SIe,"SPAN",{});var Uvt=s(j2e);FMr=r(Uvt,"FlaxAutoModel"),Uvt.forEach(t),SIe.forEach(t),TPe=i(c),Rr=n(c,"DIV",{class:!0});var mi=s(Rr);m(Jy.$$.fragment,mi),TMr=i(mi),Zc=n(mi,"P",{});var zJ=s(Zc);MMr=r(zJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),HQ=n(zJ,"A",{href:!0});var Jvt=s(HQ);EMr=r(Jvt,"from_pretrained()"),Jvt.forEach(t),CMr=r(zJ," class method or the "),UQ=n(zJ,"A",{href:!0});var Yvt=s(UQ);wMr=r(Yvt,"from_config()"),Yvt.forEach(t),AMr=r(zJ,` class
method.`),zJ.forEach(t),yMr=i(mi),Yy=n(mi,"P",{});var RIe=s(Yy);LMr=r(RIe,"This class cannot be instantiated directly using "),D2e=n(RIe,"CODE",{});var Kvt=s(D2e);xMr=r(Kvt,"__init__()"),Kvt.forEach(t),kMr=r(RIe," (throws an error)."),RIe.forEach(t),SMr=i(mi),At=n(mi,"DIV",{class:!0});var gi=s(At);m(Ky.$$.fragment,gi),RMr=i(gi),G2e=n(gi,"P",{});var Zvt=s(G2e);BMr=r(Zvt,"Instantiates one of the base model classes of the library from a configuration."),Zvt.forEach(t),PMr=i(gi),ef=n(gi,"P",{});var QJ=s(ef);$Mr=r(QJ,`Note:
Loading a model from its configuration file does `),O2e=n(QJ,"STRONG",{});var eFt=s(O2e);IMr=r(eFt,"not"),eFt.forEach(t),qMr=r(QJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(QJ,"A",{href:!0});var oFt=s(JQ);NMr=r(oFt,"from_pretrained()"),oFt.forEach(t),jMr=r(QJ," to load the model weights."),QJ.forEach(t),DMr=i(gi),V2e=n(gi,"P",{});var rFt=s(V2e);GMr=r(rFt,"Examples:"),rFt.forEach(t),OMr=i(gi),m(Zy.$$.fragment,gi),gi.forEach(t),VMr=i(mi),yo=n(mi,"DIV",{class:!0});var La=s(yo);m(e8.$$.fragment,La),XMr=i(La),X2e=n(La,"P",{});var tFt=s(X2e);zMr=r(tFt,"Instantiate one of the base model classes of the library from a pretrained model."),tFt.forEach(t),QMr=i(La),kn=n(La,"P",{});var vC=s(kn);WMr=r(vC,"The model class to instantiate is selected based on the "),z2e=n(vC,"CODE",{});var aFt=s(z2e);HMr=r(aFt,"model_type"),aFt.forEach(t),UMr=r(vC,` property of the config object (either
passed as an argument or loaded from `),Q2e=n(vC,"CODE",{});var nFt=s(Q2e);JMr=r(nFt,"pretrained_model_name_or_path"),nFt.forEach(t),YMr=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W2e=n(vC,"CODE",{});var sFt=s(W2e);KMr=r(sFt,"pretrained_model_name_or_path"),sFt.forEach(t),ZMr=r(vC,":"),vC.forEach(t),e4r=i(La),z=n(La,"UL",{});var W=s(z);yM=n(W,"LI",{});var Jke=s(yM);H2e=n(Jke,"STRONG",{});var lFt=s(H2e);o4r=r(lFt,"albert"),lFt.forEach(t),r4r=r(Jke," \u2014 "),YQ=n(Jke,"A",{href:!0});var iFt=s(YQ);t4r=r(iFt,"FlaxAlbertModel"),iFt.forEach(t),a4r=r(Jke," (ALBERT model)"),Jke.forEach(t),n4r=i(W),LM=n(W,"LI",{});var Yke=s(LM);U2e=n(Yke,"STRONG",{});var dFt=s(U2e);s4r=r(dFt,"bart"),dFt.forEach(t),l4r=r(Yke," \u2014 "),KQ=n(Yke,"A",{href:!0});var cFt=s(KQ);i4r=r(cFt,"FlaxBartModel"),cFt.forEach(t),d4r=r(Yke," (BART model)"),Yke.forEach(t),c4r=i(W),xM=n(W,"LI",{});var Kke=s(xM);J2e=n(Kke,"STRONG",{});var fFt=s(J2e);f4r=r(fFt,"beit"),fFt.forEach(t),m4r=r(Kke," \u2014 "),ZQ=n(Kke,"A",{href:!0});var mFt=s(ZQ);g4r=r(mFt,"FlaxBeitModel"),mFt.forEach(t),h4r=r(Kke," (BEiT model)"),Kke.forEach(t),p4r=i(W),kM=n(W,"LI",{});var Zke=s(kM);Y2e=n(Zke,"STRONG",{});var gFt=s(Y2e);_4r=r(gFt,"bert"),gFt.forEach(t),u4r=r(Zke," \u2014 "),eW=n(Zke,"A",{href:!0});var hFt=s(eW);b4r=r(hFt,"FlaxBertModel"),hFt.forEach(t),v4r=r(Zke," (BERT model)"),Zke.forEach(t),F4r=i(W),SM=n(W,"LI",{});var eSe=s(SM);K2e=n(eSe,"STRONG",{});var pFt=s(K2e);T4r=r(pFt,"big_bird"),pFt.forEach(t),M4r=r(eSe," \u2014 "),oW=n(eSe,"A",{href:!0});var _Ft=s(oW);E4r=r(_Ft,"FlaxBigBirdModel"),_Ft.forEach(t),C4r=r(eSe," (BigBird model)"),eSe.forEach(t),w4r=i(W),RM=n(W,"LI",{});var oSe=s(RM);Z2e=n(oSe,"STRONG",{});var uFt=s(Z2e);A4r=r(uFt,"blenderbot"),uFt.forEach(t),y4r=r(oSe," \u2014 "),rW=n(oSe,"A",{href:!0});var bFt=s(rW);L4r=r(bFt,"FlaxBlenderbotModel"),bFt.forEach(t),x4r=r(oSe," (Blenderbot model)"),oSe.forEach(t),k4r=i(W),BM=n(W,"LI",{});var rSe=s(BM);e5e=n(rSe,"STRONG",{});var vFt=s(e5e);S4r=r(vFt,"blenderbot-small"),vFt.forEach(t),R4r=r(rSe," \u2014 "),tW=n(rSe,"A",{href:!0});var FFt=s(tW);B4r=r(FFt,"FlaxBlenderbotSmallModel"),FFt.forEach(t),P4r=r(rSe," (BlenderbotSmall model)"),rSe.forEach(t),$4r=i(W),PM=n(W,"LI",{});var tSe=s(PM);o5e=n(tSe,"STRONG",{});var TFt=s(o5e);I4r=r(TFt,"clip"),TFt.forEach(t),q4r=r(tSe," \u2014 "),aW=n(tSe,"A",{href:!0});var MFt=s(aW);N4r=r(MFt,"FlaxCLIPModel"),MFt.forEach(t),j4r=r(tSe," (CLIP model)"),tSe.forEach(t),D4r=i(W),$M=n(W,"LI",{});var aSe=s($M);r5e=n(aSe,"STRONG",{});var EFt=s(r5e);G4r=r(EFt,"distilbert"),EFt.forEach(t),O4r=r(aSe," \u2014 "),nW=n(aSe,"A",{href:!0});var CFt=s(nW);V4r=r(CFt,"FlaxDistilBertModel"),CFt.forEach(t),X4r=r(aSe," (DistilBERT model)"),aSe.forEach(t),z4r=i(W),IM=n(W,"LI",{});var nSe=s(IM);t5e=n(nSe,"STRONG",{});var wFt=s(t5e);Q4r=r(wFt,"electra"),wFt.forEach(t),W4r=r(nSe," \u2014 "),sW=n(nSe,"A",{href:!0});var AFt=s(sW);H4r=r(AFt,"FlaxElectraModel"),AFt.forEach(t),U4r=r(nSe," (ELECTRA model)"),nSe.forEach(t),J4r=i(W),qM=n(W,"LI",{});var sSe=s(qM);a5e=n(sSe,"STRONG",{});var yFt=s(a5e);Y4r=r(yFt,"gpt2"),yFt.forEach(t),K4r=r(sSe," \u2014 "),lW=n(sSe,"A",{href:!0});var LFt=s(lW);Z4r=r(LFt,"FlaxGPT2Model"),LFt.forEach(t),eEr=r(sSe," (OpenAI GPT-2 model)"),sSe.forEach(t),oEr=i(W),NM=n(W,"LI",{});var lSe=s(NM);n5e=n(lSe,"STRONG",{});var xFt=s(n5e);rEr=r(xFt,"gpt_neo"),xFt.forEach(t),tEr=r(lSe," \u2014 "),iW=n(lSe,"A",{href:!0});var kFt=s(iW);aEr=r(kFt,"FlaxGPTNeoModel"),kFt.forEach(t),nEr=r(lSe," (GPT Neo model)"),lSe.forEach(t),sEr=i(W),jM=n(W,"LI",{});var iSe=s(jM);s5e=n(iSe,"STRONG",{});var SFt=s(s5e);lEr=r(SFt,"gptj"),SFt.forEach(t),iEr=r(iSe," \u2014 "),dW=n(iSe,"A",{href:!0});var RFt=s(dW);dEr=r(RFt,"FlaxGPTJModel"),RFt.forEach(t),cEr=r(iSe," (GPT-J model)"),iSe.forEach(t),fEr=i(W),DM=n(W,"LI",{});var dSe=s(DM);l5e=n(dSe,"STRONG",{});var BFt=s(l5e);mEr=r(BFt,"marian"),BFt.forEach(t),gEr=r(dSe," \u2014 "),cW=n(dSe,"A",{href:!0});var PFt=s(cW);hEr=r(PFt,"FlaxMarianModel"),PFt.forEach(t),pEr=r(dSe," (Marian model)"),dSe.forEach(t),_Er=i(W),GM=n(W,"LI",{});var cSe=s(GM);i5e=n(cSe,"STRONG",{});var $Ft=s(i5e);uEr=r($Ft,"mbart"),$Ft.forEach(t),bEr=r(cSe," \u2014 "),fW=n(cSe,"A",{href:!0});var IFt=s(fW);vEr=r(IFt,"FlaxMBartModel"),IFt.forEach(t),FEr=r(cSe," (mBART model)"),cSe.forEach(t),TEr=i(W),OM=n(W,"LI",{});var fSe=s(OM);d5e=n(fSe,"STRONG",{});var qFt=s(d5e);MEr=r(qFt,"mt5"),qFt.forEach(t),EEr=r(fSe," \u2014 "),mW=n(fSe,"A",{href:!0});var NFt=s(mW);CEr=r(NFt,"FlaxMT5Model"),NFt.forEach(t),wEr=r(fSe," (mT5 model)"),fSe.forEach(t),AEr=i(W),VM=n(W,"LI",{});var mSe=s(VM);c5e=n(mSe,"STRONG",{});var jFt=s(c5e);yEr=r(jFt,"pegasus"),jFt.forEach(t),LEr=r(mSe," \u2014 "),gW=n(mSe,"A",{href:!0});var DFt=s(gW);xEr=r(DFt,"FlaxPegasusModel"),DFt.forEach(t),kEr=r(mSe," (Pegasus model)"),mSe.forEach(t),SEr=i(W),XM=n(W,"LI",{});var gSe=s(XM);f5e=n(gSe,"STRONG",{});var GFt=s(f5e);REr=r(GFt,"roberta"),GFt.forEach(t),BEr=r(gSe," \u2014 "),hW=n(gSe,"A",{href:!0});var OFt=s(hW);PEr=r(OFt,"FlaxRobertaModel"),OFt.forEach(t),$Er=r(gSe," (RoBERTa model)"),gSe.forEach(t),IEr=i(W),zM=n(W,"LI",{});var hSe=s(zM);m5e=n(hSe,"STRONG",{});var VFt=s(m5e);qEr=r(VFt,"roformer"),VFt.forEach(t),NEr=r(hSe," \u2014 "),pW=n(hSe,"A",{href:!0});var XFt=s(pW);jEr=r(XFt,"FlaxRoFormerModel"),XFt.forEach(t),DEr=r(hSe," (RoFormer model)"),hSe.forEach(t),GEr=i(W),QM=n(W,"LI",{});var pSe=s(QM);g5e=n(pSe,"STRONG",{});var zFt=s(g5e);OEr=r(zFt,"t5"),zFt.forEach(t),VEr=r(pSe," \u2014 "),_W=n(pSe,"A",{href:!0});var QFt=s(_W);XEr=r(QFt,"FlaxT5Model"),QFt.forEach(t),zEr=r(pSe," (T5 model)"),pSe.forEach(t),QEr=i(W),WM=n(W,"LI",{});var _Se=s(WM);h5e=n(_Se,"STRONG",{});var WFt=s(h5e);WEr=r(WFt,"vision-text-dual-encoder"),WFt.forEach(t),HEr=r(_Se," \u2014 "),uW=n(_Se,"A",{href:!0});var HFt=s(uW);UEr=r(HFt,"FlaxVisionTextDualEncoderModel"),HFt.forEach(t),JEr=r(_Se," (VisionTextDualEncoder model)"),_Se.forEach(t),YEr=i(W),HM=n(W,"LI",{});var uSe=s(HM);p5e=n(uSe,"STRONG",{});var UFt=s(p5e);KEr=r(UFt,"vit"),UFt.forEach(t),ZEr=r(uSe," \u2014 "),bW=n(uSe,"A",{href:!0});var JFt=s(bW);eCr=r(JFt,"FlaxViTModel"),JFt.forEach(t),oCr=r(uSe," (ViT model)"),uSe.forEach(t),rCr=i(W),UM=n(W,"LI",{});var bSe=s(UM);_5e=n(bSe,"STRONG",{});var YFt=s(_5e);tCr=r(YFt,"wav2vec2"),YFt.forEach(t),aCr=r(bSe," \u2014 "),vW=n(bSe,"A",{href:!0});var KFt=s(vW);nCr=r(KFt,"FlaxWav2Vec2Model"),KFt.forEach(t),sCr=r(bSe," (Wav2Vec2 model)"),bSe.forEach(t),lCr=i(W),JM=n(W,"LI",{});var vSe=s(JM);u5e=n(vSe,"STRONG",{});var ZFt=s(u5e);iCr=r(ZFt,"xglm"),ZFt.forEach(t),dCr=r(vSe," \u2014 "),FW=n(vSe,"A",{href:!0});var eTt=s(FW);cCr=r(eTt,"FlaxXGLMModel"),eTt.forEach(t),fCr=r(vSe," (XGLM model)"),vSe.forEach(t),mCr=i(W),YM=n(W,"LI",{});var FSe=s(YM);b5e=n(FSe,"STRONG",{});var oTt=s(b5e);gCr=r(oTt,"xlm-roberta"),oTt.forEach(t),hCr=r(FSe," \u2014 "),TW=n(FSe,"A",{href:!0});var rTt=s(TW);pCr=r(rTt,"FlaxXLMRobertaModel"),rTt.forEach(t),_Cr=r(FSe," (XLM-RoBERTa model)"),FSe.forEach(t),W.forEach(t),uCr=i(La),v5e=n(La,"P",{});var tTt=s(v5e);bCr=r(tTt,"Examples:"),tTt.forEach(t),vCr=i(La),m(o8.$$.fragment,La),La.forEach(t),mi.forEach(t),MPe=i(c),of=n(c,"H2",{class:!0});var BIe=s(of);KM=n(BIe,"A",{id:!0,class:!0,href:!0});var aTt=s(KM);F5e=n(aTt,"SPAN",{});var nTt=s(F5e);m(r8.$$.fragment,nTt),nTt.forEach(t),aTt.forEach(t),FCr=i(BIe),T5e=n(BIe,"SPAN",{});var sTt=s(T5e);TCr=r(sTt,"FlaxAutoModelForCausalLM"),sTt.forEach(t),BIe.forEach(t),EPe=i(c),Br=n(c,"DIV",{class:!0});var hi=s(Br);m(t8.$$.fragment,hi),MCr=i(hi),rf=n(hi,"P",{});var WJ=s(rf);ECr=r(WJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),MW=n(WJ,"A",{href:!0});var lTt=s(MW);CCr=r(lTt,"from_pretrained()"),lTt.forEach(t),wCr=r(WJ," class method or the "),EW=n(WJ,"A",{href:!0});var iTt=s(EW);ACr=r(iTt,"from_config()"),iTt.forEach(t),yCr=r(WJ,` class
method.`),WJ.forEach(t),LCr=i(hi),a8=n(hi,"P",{});var PIe=s(a8);xCr=r(PIe,"This class cannot be instantiated directly using "),M5e=n(PIe,"CODE",{});var dTt=s(M5e);kCr=r(dTt,"__init__()"),dTt.forEach(t),SCr=r(PIe," (throws an error)."),PIe.forEach(t),RCr=i(hi),yt=n(hi,"DIV",{class:!0});var pi=s(yt);m(n8.$$.fragment,pi),BCr=i(pi),E5e=n(pi,"P",{});var cTt=s(E5e);PCr=r(cTt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),cTt.forEach(t),$Cr=i(pi),tf=n(pi,"P",{});var HJ=s(tf);ICr=r(HJ,`Note:
Loading a model from its configuration file does `),C5e=n(HJ,"STRONG",{});var fTt=s(C5e);qCr=r(fTt,"not"),fTt.forEach(t),NCr=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),CW=n(HJ,"A",{href:!0});var mTt=s(CW);jCr=r(mTt,"from_pretrained()"),mTt.forEach(t),DCr=r(HJ," to load the model weights."),HJ.forEach(t),GCr=i(pi),w5e=n(pi,"P",{});var gTt=s(w5e);OCr=r(gTt,"Examples:"),gTt.forEach(t),VCr=i(pi),m(s8.$$.fragment,pi),pi.forEach(t),XCr=i(hi),Lo=n(hi,"DIV",{class:!0});var xa=s(Lo);m(l8.$$.fragment,xa),zCr=i(xa),A5e=n(xa,"P",{});var hTt=s(A5e);QCr=r(hTt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),hTt.forEach(t),WCr=i(xa),Sn=n(xa,"P",{});var FC=s(Sn);HCr=r(FC,"The model class to instantiate is selected based on the "),y5e=n(FC,"CODE",{});var pTt=s(y5e);UCr=r(pTt,"model_type"),pTt.forEach(t),JCr=r(FC,` property of the config object (either
passed as an argument or loaded from `),L5e=n(FC,"CODE",{});var _Tt=s(L5e);YCr=r(_Tt,"pretrained_model_name_or_path"),_Tt.forEach(t),KCr=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),x5e=n(FC,"CODE",{});var uTt=s(x5e);ZCr=r(uTt,"pretrained_model_name_or_path"),uTt.forEach(t),ewr=r(FC,":"),FC.forEach(t),owr=i(xa),ca=n(xa,"UL",{});var _i=s(ca);ZM=n(_i,"LI",{});var TSe=s(ZM);k5e=n(TSe,"STRONG",{});var bTt=s(k5e);rwr=r(bTt,"bart"),bTt.forEach(t),twr=r(TSe," \u2014 "),wW=n(TSe,"A",{href:!0});var vTt=s(wW);awr=r(vTt,"FlaxBartForCausalLM"),vTt.forEach(t),nwr=r(TSe," (BART model)"),TSe.forEach(t),swr=i(_i),e4=n(_i,"LI",{});var MSe=s(e4);S5e=n(MSe,"STRONG",{});var FTt=s(S5e);lwr=r(FTt,"gpt2"),FTt.forEach(t),iwr=r(MSe," \u2014 "),AW=n(MSe,"A",{href:!0});var TTt=s(AW);dwr=r(TTt,"FlaxGPT2LMHeadModel"),TTt.forEach(t),cwr=r(MSe," (OpenAI GPT-2 model)"),MSe.forEach(t),fwr=i(_i),o4=n(_i,"LI",{});var ESe=s(o4);R5e=n(ESe,"STRONG",{});var MTt=s(R5e);mwr=r(MTt,"gpt_neo"),MTt.forEach(t),gwr=r(ESe," \u2014 "),yW=n(ESe,"A",{href:!0});var ETt=s(yW);hwr=r(ETt,"FlaxGPTNeoForCausalLM"),ETt.forEach(t),pwr=r(ESe," (GPT Neo model)"),ESe.forEach(t),_wr=i(_i),r4=n(_i,"LI",{});var CSe=s(r4);B5e=n(CSe,"STRONG",{});var CTt=s(B5e);uwr=r(CTt,"gptj"),CTt.forEach(t),bwr=r(CSe," \u2014 "),LW=n(CSe,"A",{href:!0});var wTt=s(LW);vwr=r(wTt,"FlaxGPTJForCausalLM"),wTt.forEach(t),Fwr=r(CSe," (GPT-J model)"),CSe.forEach(t),Twr=i(_i),t4=n(_i,"LI",{});var wSe=s(t4);P5e=n(wSe,"STRONG",{});var ATt=s(P5e);Mwr=r(ATt,"xglm"),ATt.forEach(t),Ewr=r(wSe," \u2014 "),xW=n(wSe,"A",{href:!0});var yTt=s(xW);Cwr=r(yTt,"FlaxXGLMForCausalLM"),yTt.forEach(t),wwr=r(wSe," (XGLM model)"),wSe.forEach(t),_i.forEach(t),Awr=i(xa),$5e=n(xa,"P",{});var LTt=s($5e);ywr=r(LTt,"Examples:"),LTt.forEach(t),Lwr=i(xa),m(i8.$$.fragment,xa),xa.forEach(t),hi.forEach(t),CPe=i(c),af=n(c,"H2",{class:!0});var $Ie=s(af);a4=n($Ie,"A",{id:!0,class:!0,href:!0});var xTt=s(a4);I5e=n(xTt,"SPAN",{});var kTt=s(I5e);m(d8.$$.fragment,kTt),kTt.forEach(t),xTt.forEach(t),xwr=i($Ie),q5e=n($Ie,"SPAN",{});var STt=s(q5e);kwr=r(STt,"FlaxAutoModelForPreTraining"),STt.forEach(t),$Ie.forEach(t),wPe=i(c),Pr=n(c,"DIV",{class:!0});var ui=s(Pr);m(c8.$$.fragment,ui),Swr=i(ui),nf=n(ui,"P",{});var UJ=s(nf);Rwr=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kW=n(UJ,"A",{href:!0});var RTt=s(kW);Bwr=r(RTt,"from_pretrained()"),RTt.forEach(t),Pwr=r(UJ," class method or the "),SW=n(UJ,"A",{href:!0});var BTt=s(SW);$wr=r(BTt,"from_config()"),BTt.forEach(t),Iwr=r(UJ,` class
method.`),UJ.forEach(t),qwr=i(ui),f8=n(ui,"P",{});var IIe=s(f8);Nwr=r(IIe,"This class cannot be instantiated directly using "),N5e=n(IIe,"CODE",{});var PTt=s(N5e);jwr=r(PTt,"__init__()"),PTt.forEach(t),Dwr=r(IIe," (throws an error)."),IIe.forEach(t),Gwr=i(ui),Lt=n(ui,"DIV",{class:!0});var bi=s(Lt);m(m8.$$.fragment,bi),Owr=i(bi),j5e=n(bi,"P",{});var $Tt=s(j5e);Vwr=r($Tt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),$Tt.forEach(t),Xwr=i(bi),sf=n(bi,"P",{});var JJ=s(sf);zwr=r(JJ,`Note:
Loading a model from its configuration file does `),D5e=n(JJ,"STRONG",{});var ITt=s(D5e);Qwr=r(ITt,"not"),ITt.forEach(t),Wwr=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RW=n(JJ,"A",{href:!0});var qTt=s(RW);Hwr=r(qTt,"from_pretrained()"),qTt.forEach(t),Uwr=r(JJ," to load the model weights."),JJ.forEach(t),Jwr=i(bi),G5e=n(bi,"P",{});var NTt=s(G5e);Ywr=r(NTt,"Examples:"),NTt.forEach(t),Kwr=i(bi),m(g8.$$.fragment,bi),bi.forEach(t),Zwr=i(ui),xo=n(ui,"DIV",{class:!0});var ka=s(xo);m(h8.$$.fragment,ka),e6r=i(ka),O5e=n(ka,"P",{});var jTt=s(O5e);o6r=r(jTt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jTt.forEach(t),r6r=i(ka),Rn=n(ka,"P",{});var TC=s(Rn);t6r=r(TC,"The model class to instantiate is selected based on the "),V5e=n(TC,"CODE",{});var DTt=s(V5e);a6r=r(DTt,"model_type"),DTt.forEach(t),n6r=r(TC,` property of the config object (either
passed as an argument or loaded from `),X5e=n(TC,"CODE",{});var GTt=s(X5e);s6r=r(GTt,"pretrained_model_name_or_path"),GTt.forEach(t),l6r=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),z5e=n(TC,"CODE",{});var OTt=s(z5e);i6r=r(OTt,"pretrained_model_name_or_path"),OTt.forEach(t),d6r=r(TC,":"),TC.forEach(t),c6r=i(ka),me=n(ka,"UL",{});var _e=s(me);n4=n(_e,"LI",{});var ASe=s(n4);Q5e=n(ASe,"STRONG",{});var VTt=s(Q5e);f6r=r(VTt,"albert"),VTt.forEach(t),m6r=r(ASe," \u2014 "),BW=n(ASe,"A",{href:!0});var XTt=s(BW);g6r=r(XTt,"FlaxAlbertForPreTraining"),XTt.forEach(t),h6r=r(ASe," (ALBERT model)"),ASe.forEach(t),p6r=i(_e),s4=n(_e,"LI",{});var ySe=s(s4);W5e=n(ySe,"STRONG",{});var zTt=s(W5e);_6r=r(zTt,"bart"),zTt.forEach(t),u6r=r(ySe," \u2014 "),PW=n(ySe,"A",{href:!0});var QTt=s(PW);b6r=r(QTt,"FlaxBartForConditionalGeneration"),QTt.forEach(t),v6r=r(ySe," (BART model)"),ySe.forEach(t),F6r=i(_e),l4=n(_e,"LI",{});var LSe=s(l4);H5e=n(LSe,"STRONG",{});var WTt=s(H5e);T6r=r(WTt,"bert"),WTt.forEach(t),M6r=r(LSe," \u2014 "),$W=n(LSe,"A",{href:!0});var HTt=s($W);E6r=r(HTt,"FlaxBertForPreTraining"),HTt.forEach(t),C6r=r(LSe," (BERT model)"),LSe.forEach(t),w6r=i(_e),i4=n(_e,"LI",{});var xSe=s(i4);U5e=n(xSe,"STRONG",{});var UTt=s(U5e);A6r=r(UTt,"big_bird"),UTt.forEach(t),y6r=r(xSe," \u2014 "),IW=n(xSe,"A",{href:!0});var JTt=s(IW);L6r=r(JTt,"FlaxBigBirdForPreTraining"),JTt.forEach(t),x6r=r(xSe," (BigBird model)"),xSe.forEach(t),k6r=i(_e),d4=n(_e,"LI",{});var kSe=s(d4);J5e=n(kSe,"STRONG",{});var YTt=s(J5e);S6r=r(YTt,"electra"),YTt.forEach(t),R6r=r(kSe," \u2014 "),qW=n(kSe,"A",{href:!0});var KTt=s(qW);B6r=r(KTt,"FlaxElectraForPreTraining"),KTt.forEach(t),P6r=r(kSe," (ELECTRA model)"),kSe.forEach(t),$6r=i(_e),c4=n(_e,"LI",{});var SSe=s(c4);Y5e=n(SSe,"STRONG",{});var ZTt=s(Y5e);I6r=r(ZTt,"mbart"),ZTt.forEach(t),q6r=r(SSe," \u2014 "),NW=n(SSe,"A",{href:!0});var eMt=s(NW);N6r=r(eMt,"FlaxMBartForConditionalGeneration"),eMt.forEach(t),j6r=r(SSe," (mBART model)"),SSe.forEach(t),D6r=i(_e),f4=n(_e,"LI",{});var RSe=s(f4);K5e=n(RSe,"STRONG",{});var oMt=s(K5e);G6r=r(oMt,"mt5"),oMt.forEach(t),O6r=r(RSe," \u2014 "),jW=n(RSe,"A",{href:!0});var rMt=s(jW);V6r=r(rMt,"FlaxMT5ForConditionalGeneration"),rMt.forEach(t),X6r=r(RSe," (mT5 model)"),RSe.forEach(t),z6r=i(_e),m4=n(_e,"LI",{});var BSe=s(m4);Z5e=n(BSe,"STRONG",{});var tMt=s(Z5e);Q6r=r(tMt,"roberta"),tMt.forEach(t),W6r=r(BSe," \u2014 "),DW=n(BSe,"A",{href:!0});var aMt=s(DW);H6r=r(aMt,"FlaxRobertaForMaskedLM"),aMt.forEach(t),U6r=r(BSe," (RoBERTa model)"),BSe.forEach(t),J6r=i(_e),g4=n(_e,"LI",{});var PSe=s(g4);e3e=n(PSe,"STRONG",{});var nMt=s(e3e);Y6r=r(nMt,"roformer"),nMt.forEach(t),K6r=r(PSe," \u2014 "),GW=n(PSe,"A",{href:!0});var sMt=s(GW);Z6r=r(sMt,"FlaxRoFormerForMaskedLM"),sMt.forEach(t),eAr=r(PSe," (RoFormer model)"),PSe.forEach(t),oAr=i(_e),h4=n(_e,"LI",{});var $Se=s(h4);o3e=n($Se,"STRONG",{});var lMt=s(o3e);rAr=r(lMt,"t5"),lMt.forEach(t),tAr=r($Se," \u2014 "),OW=n($Se,"A",{href:!0});var iMt=s(OW);aAr=r(iMt,"FlaxT5ForConditionalGeneration"),iMt.forEach(t),nAr=r($Se," (T5 model)"),$Se.forEach(t),sAr=i(_e),p4=n(_e,"LI",{});var ISe=s(p4);r3e=n(ISe,"STRONG",{});var dMt=s(r3e);lAr=r(dMt,"wav2vec2"),dMt.forEach(t),iAr=r(ISe," \u2014 "),VW=n(ISe,"A",{href:!0});var cMt=s(VW);dAr=r(cMt,"FlaxWav2Vec2ForPreTraining"),cMt.forEach(t),cAr=r(ISe," (Wav2Vec2 model)"),ISe.forEach(t),fAr=i(_e),_4=n(_e,"LI",{});var qSe=s(_4);t3e=n(qSe,"STRONG",{});var fMt=s(t3e);mAr=r(fMt,"xlm-roberta"),fMt.forEach(t),gAr=r(qSe," \u2014 "),XW=n(qSe,"A",{href:!0});var mMt=s(XW);hAr=r(mMt,"FlaxXLMRobertaForMaskedLM"),mMt.forEach(t),pAr=r(qSe," (XLM-RoBERTa model)"),qSe.forEach(t),_e.forEach(t),_Ar=i(ka),a3e=n(ka,"P",{});var gMt=s(a3e);uAr=r(gMt,"Examples:"),gMt.forEach(t),bAr=i(ka),m(p8.$$.fragment,ka),ka.forEach(t),ui.forEach(t),APe=i(c),lf=n(c,"H2",{class:!0});var qIe=s(lf);u4=n(qIe,"A",{id:!0,class:!0,href:!0});var hMt=s(u4);n3e=n(hMt,"SPAN",{});var pMt=s(n3e);m(_8.$$.fragment,pMt),pMt.forEach(t),hMt.forEach(t),vAr=i(qIe),s3e=n(qIe,"SPAN",{});var _Mt=s(s3e);FAr=r(_Mt,"FlaxAutoModelForMaskedLM"),_Mt.forEach(t),qIe.forEach(t),yPe=i(c),$r=n(c,"DIV",{class:!0});var vi=s($r);m(u8.$$.fragment,vi),TAr=i(vi),df=n(vi,"P",{});var YJ=s(df);MAr=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),zW=n(YJ,"A",{href:!0});var uMt=s(zW);EAr=r(uMt,"from_pretrained()"),uMt.forEach(t),CAr=r(YJ," class method or the "),QW=n(YJ,"A",{href:!0});var bMt=s(QW);wAr=r(bMt,"from_config()"),bMt.forEach(t),AAr=r(YJ,` class
method.`),YJ.forEach(t),yAr=i(vi),b8=n(vi,"P",{});var NIe=s(b8);LAr=r(NIe,"This class cannot be instantiated directly using "),l3e=n(NIe,"CODE",{});var vMt=s(l3e);xAr=r(vMt,"__init__()"),vMt.forEach(t),kAr=r(NIe," (throws an error)."),NIe.forEach(t),SAr=i(vi),xt=n(vi,"DIV",{class:!0});var Fi=s(xt);m(v8.$$.fragment,Fi),RAr=i(Fi),i3e=n(Fi,"P",{});var FMt=s(i3e);BAr=r(FMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),FMt.forEach(t),PAr=i(Fi),cf=n(Fi,"P",{});var KJ=s(cf);$Ar=r(KJ,`Note:
Loading a model from its configuration file does `),d3e=n(KJ,"STRONG",{});var TMt=s(d3e);IAr=r(TMt,"not"),TMt.forEach(t),qAr=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),WW=n(KJ,"A",{href:!0});var MMt=s(WW);NAr=r(MMt,"from_pretrained()"),MMt.forEach(t),jAr=r(KJ," to load the model weights."),KJ.forEach(t),DAr=i(Fi),c3e=n(Fi,"P",{});var EMt=s(c3e);GAr=r(EMt,"Examples:"),EMt.forEach(t),OAr=i(Fi),m(F8.$$.fragment,Fi),Fi.forEach(t),VAr=i(vi),ko=n(vi,"DIV",{class:!0});var Sa=s(ko);m(T8.$$.fragment,Sa),XAr=i(Sa),f3e=n(Sa,"P",{});var CMt=s(f3e);zAr=r(CMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),CMt.forEach(t),QAr=i(Sa),Bn=n(Sa,"P",{});var MC=s(Bn);WAr=r(MC,"The model class to instantiate is selected based on the "),m3e=n(MC,"CODE",{});var wMt=s(m3e);HAr=r(wMt,"model_type"),wMt.forEach(t),UAr=r(MC,` property of the config object (either
passed as an argument or loaded from `),g3e=n(MC,"CODE",{});var AMt=s(g3e);JAr=r(AMt,"pretrained_model_name_or_path"),AMt.forEach(t),YAr=r(MC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),h3e=n(MC,"CODE",{});var yMt=s(h3e);KAr=r(yMt,"pretrained_model_name_or_path"),yMt.forEach(t),ZAr=r(MC,":"),MC.forEach(t),e0r=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);b4=n(Ae,"LI",{});var NSe=s(b4);p3e=n(NSe,"STRONG",{});var LMt=s(p3e);o0r=r(LMt,"albert"),LMt.forEach(t),r0r=r(NSe," \u2014 "),HW=n(NSe,"A",{href:!0});var xMt=s(HW);t0r=r(xMt,"FlaxAlbertForMaskedLM"),xMt.forEach(t),a0r=r(NSe," (ALBERT model)"),NSe.forEach(t),n0r=i(Ae),v4=n(Ae,"LI",{});var jSe=s(v4);_3e=n(jSe,"STRONG",{});var kMt=s(_3e);s0r=r(kMt,"bart"),kMt.forEach(t),l0r=r(jSe," \u2014 "),UW=n(jSe,"A",{href:!0});var SMt=s(UW);i0r=r(SMt,"FlaxBartForConditionalGeneration"),SMt.forEach(t),d0r=r(jSe," (BART model)"),jSe.forEach(t),c0r=i(Ae),F4=n(Ae,"LI",{});var DSe=s(F4);u3e=n(DSe,"STRONG",{});var RMt=s(u3e);f0r=r(RMt,"bert"),RMt.forEach(t),m0r=r(DSe," \u2014 "),JW=n(DSe,"A",{href:!0});var BMt=s(JW);g0r=r(BMt,"FlaxBertForMaskedLM"),BMt.forEach(t),h0r=r(DSe," (BERT model)"),DSe.forEach(t),p0r=i(Ae),T4=n(Ae,"LI",{});var GSe=s(T4);b3e=n(GSe,"STRONG",{});var PMt=s(b3e);_0r=r(PMt,"big_bird"),PMt.forEach(t),u0r=r(GSe," \u2014 "),YW=n(GSe,"A",{href:!0});var $Mt=s(YW);b0r=r($Mt,"FlaxBigBirdForMaskedLM"),$Mt.forEach(t),v0r=r(GSe," (BigBird model)"),GSe.forEach(t),F0r=i(Ae),M4=n(Ae,"LI",{});var OSe=s(M4);v3e=n(OSe,"STRONG",{});var IMt=s(v3e);T0r=r(IMt,"distilbert"),IMt.forEach(t),M0r=r(OSe," \u2014 "),KW=n(OSe,"A",{href:!0});var qMt=s(KW);E0r=r(qMt,"FlaxDistilBertForMaskedLM"),qMt.forEach(t),C0r=r(OSe," (DistilBERT model)"),OSe.forEach(t),w0r=i(Ae),E4=n(Ae,"LI",{});var VSe=s(E4);F3e=n(VSe,"STRONG",{});var NMt=s(F3e);A0r=r(NMt,"electra"),NMt.forEach(t),y0r=r(VSe," \u2014 "),ZW=n(VSe,"A",{href:!0});var jMt=s(ZW);L0r=r(jMt,"FlaxElectraForMaskedLM"),jMt.forEach(t),x0r=r(VSe," (ELECTRA model)"),VSe.forEach(t),k0r=i(Ae),C4=n(Ae,"LI",{});var XSe=s(C4);T3e=n(XSe,"STRONG",{});var DMt=s(T3e);S0r=r(DMt,"mbart"),DMt.forEach(t),R0r=r(XSe," \u2014 "),eH=n(XSe,"A",{href:!0});var GMt=s(eH);B0r=r(GMt,"FlaxMBartForConditionalGeneration"),GMt.forEach(t),P0r=r(XSe," (mBART model)"),XSe.forEach(t),$0r=i(Ae),w4=n(Ae,"LI",{});var zSe=s(w4);M3e=n(zSe,"STRONG",{});var OMt=s(M3e);I0r=r(OMt,"roberta"),OMt.forEach(t),q0r=r(zSe," \u2014 "),oH=n(zSe,"A",{href:!0});var VMt=s(oH);N0r=r(VMt,"FlaxRobertaForMaskedLM"),VMt.forEach(t),j0r=r(zSe," (RoBERTa model)"),zSe.forEach(t),D0r=i(Ae),A4=n(Ae,"LI",{});var QSe=s(A4);E3e=n(QSe,"STRONG",{});var XMt=s(E3e);G0r=r(XMt,"roformer"),XMt.forEach(t),O0r=r(QSe," \u2014 "),rH=n(QSe,"A",{href:!0});var zMt=s(rH);V0r=r(zMt,"FlaxRoFormerForMaskedLM"),zMt.forEach(t),X0r=r(QSe," (RoFormer model)"),QSe.forEach(t),z0r=i(Ae),y4=n(Ae,"LI",{});var WSe=s(y4);C3e=n(WSe,"STRONG",{});var QMt=s(C3e);Q0r=r(QMt,"xlm-roberta"),QMt.forEach(t),W0r=r(WSe," \u2014 "),tH=n(WSe,"A",{href:!0});var WMt=s(tH);H0r=r(WMt,"FlaxXLMRobertaForMaskedLM"),WMt.forEach(t),U0r=r(WSe," (XLM-RoBERTa model)"),WSe.forEach(t),Ae.forEach(t),J0r=i(Sa),w3e=n(Sa,"P",{});var HMt=s(w3e);Y0r=r(HMt,"Examples:"),HMt.forEach(t),K0r=i(Sa),m(M8.$$.fragment,Sa),Sa.forEach(t),vi.forEach(t),LPe=i(c),ff=n(c,"H2",{class:!0});var jIe=s(ff);L4=n(jIe,"A",{id:!0,class:!0,href:!0});var UMt=s(L4);A3e=n(UMt,"SPAN",{});var JMt=s(A3e);m(E8.$$.fragment,JMt),JMt.forEach(t),UMt.forEach(t),Z0r=i(jIe),y3e=n(jIe,"SPAN",{});var YMt=s(y3e);eyr=r(YMt,"FlaxAutoModelForSeq2SeqLM"),YMt.forEach(t),jIe.forEach(t),xPe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(C8.$$.fragment,Ti),oyr=i(Ti),mf=n(Ti,"P",{});var ZJ=s(mf);ryr=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),aH=n(ZJ,"A",{href:!0});var KMt=s(aH);tyr=r(KMt,"from_pretrained()"),KMt.forEach(t),ayr=r(ZJ," class method or the "),nH=n(ZJ,"A",{href:!0});var ZMt=s(nH);nyr=r(ZMt,"from_config()"),ZMt.forEach(t),syr=r(ZJ,` class
method.`),ZJ.forEach(t),lyr=i(Ti),w8=n(Ti,"P",{});var DIe=s(w8);iyr=r(DIe,"This class cannot be instantiated directly using "),L3e=n(DIe,"CODE",{});var e4t=s(L3e);dyr=r(e4t,"__init__()"),e4t.forEach(t),cyr=r(DIe," (throws an error)."),DIe.forEach(t),fyr=i(Ti),kt=n(Ti,"DIV",{class:!0});var Mi=s(kt);m(A8.$$.fragment,Mi),myr=i(Mi),x3e=n(Mi,"P",{});var o4t=s(x3e);gyr=r(o4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),o4t.forEach(t),hyr=i(Mi),gf=n(Mi,"P",{});var eY=s(gf);pyr=r(eY,`Note:
Loading a model from its configuration file does `),k3e=n(eY,"STRONG",{});var r4t=s(k3e);_yr=r(r4t,"not"),r4t.forEach(t),uyr=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sH=n(eY,"A",{href:!0});var t4t=s(sH);byr=r(t4t,"from_pretrained()"),t4t.forEach(t),vyr=r(eY," to load the model weights."),eY.forEach(t),Fyr=i(Mi),S3e=n(Mi,"P",{});var a4t=s(S3e);Tyr=r(a4t,"Examples:"),a4t.forEach(t),Myr=i(Mi),m(y8.$$.fragment,Mi),Mi.forEach(t),Eyr=i(Ti),So=n(Ti,"DIV",{class:!0});var Ra=s(So);m(L8.$$.fragment,Ra),Cyr=i(Ra),R3e=n(Ra,"P",{});var n4t=s(R3e);wyr=r(n4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),n4t.forEach(t),Ayr=i(Ra),Pn=n(Ra,"P",{});var EC=s(Pn);yyr=r(EC,"The model class to instantiate is selected based on the "),B3e=n(EC,"CODE",{});var s4t=s(B3e);Lyr=r(s4t,"model_type"),s4t.forEach(t),xyr=r(EC,` property of the config object (either
passed as an argument or loaded from `),P3e=n(EC,"CODE",{});var l4t=s(P3e);kyr=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),Syr=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$3e=n(EC,"CODE",{});var i4t=s($3e);Ryr=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),Byr=r(EC,":"),EC.forEach(t),Pyr=i(Ra),Ee=n(Ra,"UL",{});var so=s(Ee);x4=n(so,"LI",{});var HSe=s(x4);I3e=n(HSe,"STRONG",{});var d4t=s(I3e);$yr=r(d4t,"bart"),d4t.forEach(t),Iyr=r(HSe," \u2014 "),lH=n(HSe,"A",{href:!0});var c4t=s(lH);qyr=r(c4t,"FlaxBartForConditionalGeneration"),c4t.forEach(t),Nyr=r(HSe," (BART model)"),HSe.forEach(t),jyr=i(so),k4=n(so,"LI",{});var USe=s(k4);q3e=n(USe,"STRONG",{});var f4t=s(q3e);Dyr=r(f4t,"blenderbot"),f4t.forEach(t),Gyr=r(USe," \u2014 "),iH=n(USe,"A",{href:!0});var m4t=s(iH);Oyr=r(m4t,"FlaxBlenderbotForConditionalGeneration"),m4t.forEach(t),Vyr=r(USe," (Blenderbot model)"),USe.forEach(t),Xyr=i(so),S4=n(so,"LI",{});var JSe=s(S4);N3e=n(JSe,"STRONG",{});var g4t=s(N3e);zyr=r(g4t,"blenderbot-small"),g4t.forEach(t),Qyr=r(JSe," \u2014 "),dH=n(JSe,"A",{href:!0});var h4t=s(dH);Wyr=r(h4t,"FlaxBlenderbotSmallForConditionalGeneration"),h4t.forEach(t),Hyr=r(JSe," (BlenderbotSmall model)"),JSe.forEach(t),Uyr=i(so),R4=n(so,"LI",{});var YSe=s(R4);j3e=n(YSe,"STRONG",{});var p4t=s(j3e);Jyr=r(p4t,"encoder-decoder"),p4t.forEach(t),Yyr=r(YSe," \u2014 "),cH=n(YSe,"A",{href:!0});var _4t=s(cH);Kyr=r(_4t,"FlaxEncoderDecoderModel"),_4t.forEach(t),Zyr=r(YSe," (Encoder decoder model)"),YSe.forEach(t),e8r=i(so),B4=n(so,"LI",{});var KSe=s(B4);D3e=n(KSe,"STRONG",{});var u4t=s(D3e);o8r=r(u4t,"marian"),u4t.forEach(t),r8r=r(KSe," \u2014 "),fH=n(KSe,"A",{href:!0});var b4t=s(fH);t8r=r(b4t,"FlaxMarianMTModel"),b4t.forEach(t),a8r=r(KSe," (Marian model)"),KSe.forEach(t),n8r=i(so),P4=n(so,"LI",{});var ZSe=s(P4);G3e=n(ZSe,"STRONG",{});var v4t=s(G3e);s8r=r(v4t,"mbart"),v4t.forEach(t),l8r=r(ZSe," \u2014 "),mH=n(ZSe,"A",{href:!0});var F4t=s(mH);i8r=r(F4t,"FlaxMBartForConditionalGeneration"),F4t.forEach(t),d8r=r(ZSe," (mBART model)"),ZSe.forEach(t),c8r=i(so),$4=n(so,"LI",{});var eRe=s($4);O3e=n(eRe,"STRONG",{});var T4t=s(O3e);f8r=r(T4t,"mt5"),T4t.forEach(t),m8r=r(eRe," \u2014 "),gH=n(eRe,"A",{href:!0});var M4t=s(gH);g8r=r(M4t,"FlaxMT5ForConditionalGeneration"),M4t.forEach(t),h8r=r(eRe," (mT5 model)"),eRe.forEach(t),p8r=i(so),I4=n(so,"LI",{});var oRe=s(I4);V3e=n(oRe,"STRONG",{});var E4t=s(V3e);_8r=r(E4t,"pegasus"),E4t.forEach(t),u8r=r(oRe," \u2014 "),hH=n(oRe,"A",{href:!0});var C4t=s(hH);b8r=r(C4t,"FlaxPegasusForConditionalGeneration"),C4t.forEach(t),v8r=r(oRe," (Pegasus model)"),oRe.forEach(t),F8r=i(so),q4=n(so,"LI",{});var rRe=s(q4);X3e=n(rRe,"STRONG",{});var w4t=s(X3e);T8r=r(w4t,"t5"),w4t.forEach(t),M8r=r(rRe," \u2014 "),pH=n(rRe,"A",{href:!0});var A4t=s(pH);E8r=r(A4t,"FlaxT5ForConditionalGeneration"),A4t.forEach(t),C8r=r(rRe," (T5 model)"),rRe.forEach(t),so.forEach(t),w8r=i(Ra),z3e=n(Ra,"P",{});var y4t=s(z3e);A8r=r(y4t,"Examples:"),y4t.forEach(t),y8r=i(Ra),m(x8.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),kPe=i(c),hf=n(c,"H2",{class:!0});var GIe=s(hf);N4=n(GIe,"A",{id:!0,class:!0,href:!0});var L4t=s(N4);Q3e=n(L4t,"SPAN",{});var x4t=s(Q3e);m(k8.$$.fragment,x4t),x4t.forEach(t),L4t.forEach(t),L8r=i(GIe),W3e=n(GIe,"SPAN",{});var k4t=s(W3e);x8r=r(k4t,"FlaxAutoModelForSequenceClassification"),k4t.forEach(t),GIe.forEach(t),SPe=i(c),qr=n(c,"DIV",{class:!0});var Ei=s(qr);m(S8.$$.fragment,Ei),k8r=i(Ei),pf=n(Ei,"P",{});var oY=s(pf);S8r=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),_H=n(oY,"A",{href:!0});var S4t=s(_H);R8r=r(S4t,"from_pretrained()"),S4t.forEach(t),B8r=r(oY," class method or the "),uH=n(oY,"A",{href:!0});var R4t=s(uH);P8r=r(R4t,"from_config()"),R4t.forEach(t),$8r=r(oY,` class
method.`),oY.forEach(t),I8r=i(Ei),R8=n(Ei,"P",{});var OIe=s(R8);q8r=r(OIe,"This class cannot be instantiated directly using "),H3e=n(OIe,"CODE",{});var B4t=s(H3e);N8r=r(B4t,"__init__()"),B4t.forEach(t),j8r=r(OIe," (throws an error)."),OIe.forEach(t),D8r=i(Ei),St=n(Ei,"DIV",{class:!0});var Ci=s(St);m(B8.$$.fragment,Ci),G8r=i(Ci),U3e=n(Ci,"P",{});var P4t=s(U3e);O8r=r(P4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),P4t.forEach(t),V8r=i(Ci),_f=n(Ci,"P",{});var rY=s(_f);X8r=r(rY,`Note:
Loading a model from its configuration file does `),J3e=n(rY,"STRONG",{});var $4t=s(J3e);z8r=r($4t,"not"),$4t.forEach(t),Q8r=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bH=n(rY,"A",{href:!0});var I4t=s(bH);W8r=r(I4t,"from_pretrained()"),I4t.forEach(t),H8r=r(rY," to load the model weights."),rY.forEach(t),U8r=i(Ci),Y3e=n(Ci,"P",{});var q4t=s(Y3e);J8r=r(q4t,"Examples:"),q4t.forEach(t),Y8r=i(Ci),m(P8.$$.fragment,Ci),Ci.forEach(t),K8r=i(Ei),Ro=n(Ei,"DIV",{class:!0});var Ba=s(Ro);m($8.$$.fragment,Ba),Z8r=i(Ba),K3e=n(Ba,"P",{});var N4t=s(K3e);eLr=r(N4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),N4t.forEach(t),oLr=i(Ba),$n=n(Ba,"P",{});var CC=s($n);rLr=r(CC,"The model class to instantiate is selected based on the "),Z3e=n(CC,"CODE",{});var j4t=s(Z3e);tLr=r(j4t,"model_type"),j4t.forEach(t),aLr=r(CC,` property of the config object (either
passed as an argument or loaded from `),eve=n(CC,"CODE",{});var D4t=s(eve);nLr=r(D4t,"pretrained_model_name_or_path"),D4t.forEach(t),sLr=r(CC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ove=n(CC,"CODE",{});var G4t=s(ove);lLr=r(G4t,"pretrained_model_name_or_path"),G4t.forEach(t),iLr=r(CC,":"),CC.forEach(t),dLr=i(Ba),Fe=n(Ba,"UL",{});var ye=s(Fe);j4=n(ye,"LI",{});var tRe=s(j4);rve=n(tRe,"STRONG",{});var O4t=s(rve);cLr=r(O4t,"albert"),O4t.forEach(t),fLr=r(tRe," \u2014 "),vH=n(tRe,"A",{href:!0});var V4t=s(vH);mLr=r(V4t,"FlaxAlbertForSequenceClassification"),V4t.forEach(t),gLr=r(tRe," (ALBERT model)"),tRe.forEach(t),hLr=i(ye),D4=n(ye,"LI",{});var aRe=s(D4);tve=n(aRe,"STRONG",{});var X4t=s(tve);pLr=r(X4t,"bart"),X4t.forEach(t),_Lr=r(aRe," \u2014 "),FH=n(aRe,"A",{href:!0});var z4t=s(FH);uLr=r(z4t,"FlaxBartForSequenceClassification"),z4t.forEach(t),bLr=r(aRe," (BART model)"),aRe.forEach(t),vLr=i(ye),G4=n(ye,"LI",{});var nRe=s(G4);ave=n(nRe,"STRONG",{});var Q4t=s(ave);FLr=r(Q4t,"bert"),Q4t.forEach(t),TLr=r(nRe," \u2014 "),TH=n(nRe,"A",{href:!0});var W4t=s(TH);MLr=r(W4t,"FlaxBertForSequenceClassification"),W4t.forEach(t),ELr=r(nRe," (BERT model)"),nRe.forEach(t),CLr=i(ye),O4=n(ye,"LI",{});var sRe=s(O4);nve=n(sRe,"STRONG",{});var H4t=s(nve);wLr=r(H4t,"big_bird"),H4t.forEach(t),ALr=r(sRe," \u2014 "),MH=n(sRe,"A",{href:!0});var U4t=s(MH);yLr=r(U4t,"FlaxBigBirdForSequenceClassification"),U4t.forEach(t),LLr=r(sRe," (BigBird model)"),sRe.forEach(t),xLr=i(ye),V4=n(ye,"LI",{});var lRe=s(V4);sve=n(lRe,"STRONG",{});var J4t=s(sve);kLr=r(J4t,"distilbert"),J4t.forEach(t),SLr=r(lRe," \u2014 "),EH=n(lRe,"A",{href:!0});var Y4t=s(EH);RLr=r(Y4t,"FlaxDistilBertForSequenceClassification"),Y4t.forEach(t),BLr=r(lRe," (DistilBERT model)"),lRe.forEach(t),PLr=i(ye),X4=n(ye,"LI",{});var iRe=s(X4);lve=n(iRe,"STRONG",{});var K4t=s(lve);$Lr=r(K4t,"electra"),K4t.forEach(t),ILr=r(iRe," \u2014 "),CH=n(iRe,"A",{href:!0});var Z4t=s(CH);qLr=r(Z4t,"FlaxElectraForSequenceClassification"),Z4t.forEach(t),NLr=r(iRe," (ELECTRA model)"),iRe.forEach(t),jLr=i(ye),z4=n(ye,"LI",{});var dRe=s(z4);ive=n(dRe,"STRONG",{});var eEt=s(ive);DLr=r(eEt,"mbart"),eEt.forEach(t),GLr=r(dRe," \u2014 "),wH=n(dRe,"A",{href:!0});var oEt=s(wH);OLr=r(oEt,"FlaxMBartForSequenceClassification"),oEt.forEach(t),VLr=r(dRe," (mBART model)"),dRe.forEach(t),XLr=i(ye),Q4=n(ye,"LI",{});var cRe=s(Q4);dve=n(cRe,"STRONG",{});var rEt=s(dve);zLr=r(rEt,"roberta"),rEt.forEach(t),QLr=r(cRe," \u2014 "),AH=n(cRe,"A",{href:!0});var tEt=s(AH);WLr=r(tEt,"FlaxRobertaForSequenceClassification"),tEt.forEach(t),HLr=r(cRe," (RoBERTa model)"),cRe.forEach(t),ULr=i(ye),W4=n(ye,"LI",{});var fRe=s(W4);cve=n(fRe,"STRONG",{});var aEt=s(cve);JLr=r(aEt,"roformer"),aEt.forEach(t),YLr=r(fRe," \u2014 "),yH=n(fRe,"A",{href:!0});var nEt=s(yH);KLr=r(nEt,"FlaxRoFormerForSequenceClassification"),nEt.forEach(t),ZLr=r(fRe," (RoFormer model)"),fRe.forEach(t),e9r=i(ye),H4=n(ye,"LI",{});var mRe=s(H4);fve=n(mRe,"STRONG",{});var sEt=s(fve);o9r=r(sEt,"xlm-roberta"),sEt.forEach(t),r9r=r(mRe," \u2014 "),LH=n(mRe,"A",{href:!0});var lEt=s(LH);t9r=r(lEt,"FlaxXLMRobertaForSequenceClassification"),lEt.forEach(t),a9r=r(mRe," (XLM-RoBERTa model)"),mRe.forEach(t),ye.forEach(t),n9r=i(Ba),mve=n(Ba,"P",{});var iEt=s(mve);s9r=r(iEt,"Examples:"),iEt.forEach(t),l9r=i(Ba),m(I8.$$.fragment,Ba),Ba.forEach(t),Ei.forEach(t),RPe=i(c),uf=n(c,"H2",{class:!0});var VIe=s(uf);U4=n(VIe,"A",{id:!0,class:!0,href:!0});var dEt=s(U4);gve=n(dEt,"SPAN",{});var cEt=s(gve);m(q8.$$.fragment,cEt),cEt.forEach(t),dEt.forEach(t),i9r=i(VIe),hve=n(VIe,"SPAN",{});var fEt=s(hve);d9r=r(fEt,"FlaxAutoModelForQuestionAnswering"),fEt.forEach(t),VIe.forEach(t),BPe=i(c),Nr=n(c,"DIV",{class:!0});var wi=s(Nr);m(N8.$$.fragment,wi),c9r=i(wi),bf=n(wi,"P",{});var tY=s(bf);f9r=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),xH=n(tY,"A",{href:!0});var mEt=s(xH);m9r=r(mEt,"from_pretrained()"),mEt.forEach(t),g9r=r(tY," class method or the "),kH=n(tY,"A",{href:!0});var gEt=s(kH);h9r=r(gEt,"from_config()"),gEt.forEach(t),p9r=r(tY,` class
method.`),tY.forEach(t),_9r=i(wi),j8=n(wi,"P",{});var XIe=s(j8);u9r=r(XIe,"This class cannot be instantiated directly using "),pve=n(XIe,"CODE",{});var hEt=s(pve);b9r=r(hEt,"__init__()"),hEt.forEach(t),v9r=r(XIe," (throws an error)."),XIe.forEach(t),F9r=i(wi),Rt=n(wi,"DIV",{class:!0});var Ai=s(Rt);m(D8.$$.fragment,Ai),T9r=i(Ai),_ve=n(Ai,"P",{});var pEt=s(_ve);M9r=r(pEt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),pEt.forEach(t),E9r=i(Ai),vf=n(Ai,"P",{});var aY=s(vf);C9r=r(aY,`Note:
Loading a model from its configuration file does `),uve=n(aY,"STRONG",{});var _Et=s(uve);w9r=r(_Et,"not"),_Et.forEach(t),A9r=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),SH=n(aY,"A",{href:!0});var uEt=s(SH);y9r=r(uEt,"from_pretrained()"),uEt.forEach(t),L9r=r(aY," to load the model weights."),aY.forEach(t),x9r=i(Ai),bve=n(Ai,"P",{});var bEt=s(bve);k9r=r(bEt,"Examples:"),bEt.forEach(t),S9r=i(Ai),m(G8.$$.fragment,Ai),Ai.forEach(t),R9r=i(wi),Bo=n(wi,"DIV",{class:!0});var Pa=s(Bo);m(O8.$$.fragment,Pa),B9r=i(Pa),vve=n(Pa,"P",{});var vEt=s(vve);P9r=r(vEt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),vEt.forEach(t),$9r=i(Pa),In=n(Pa,"P",{});var wC=s(In);I9r=r(wC,"The model class to instantiate is selected based on the "),Fve=n(wC,"CODE",{});var FEt=s(Fve);q9r=r(FEt,"model_type"),FEt.forEach(t),N9r=r(wC,` property of the config object (either
passed as an argument or loaded from `),Tve=n(wC,"CODE",{});var TEt=s(Tve);j9r=r(TEt,"pretrained_model_name_or_path"),TEt.forEach(t),D9r=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Mve=n(wC,"CODE",{});var MEt=s(Mve);G9r=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),O9r=r(wC,":"),wC.forEach(t),V9r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);J4=n(Le,"LI",{});var gRe=s(J4);Eve=n(gRe,"STRONG",{});var EEt=s(Eve);X9r=r(EEt,"albert"),EEt.forEach(t),z9r=r(gRe," \u2014 "),RH=n(gRe,"A",{href:!0});var CEt=s(RH);Q9r=r(CEt,"FlaxAlbertForQuestionAnswering"),CEt.forEach(t),W9r=r(gRe," (ALBERT model)"),gRe.forEach(t),H9r=i(Le),Y4=n(Le,"LI",{});var hRe=s(Y4);Cve=n(hRe,"STRONG",{});var wEt=s(Cve);U9r=r(wEt,"bart"),wEt.forEach(t),J9r=r(hRe," \u2014 "),BH=n(hRe,"A",{href:!0});var AEt=s(BH);Y9r=r(AEt,"FlaxBartForQuestionAnswering"),AEt.forEach(t),K9r=r(hRe," (BART model)"),hRe.forEach(t),Z9r=i(Le),K4=n(Le,"LI",{});var pRe=s(K4);wve=n(pRe,"STRONG",{});var yEt=s(wve);exr=r(yEt,"bert"),yEt.forEach(t),oxr=r(pRe," \u2014 "),PH=n(pRe,"A",{href:!0});var LEt=s(PH);rxr=r(LEt,"FlaxBertForQuestionAnswering"),LEt.forEach(t),txr=r(pRe," (BERT model)"),pRe.forEach(t),axr=i(Le),Z4=n(Le,"LI",{});var _Re=s(Z4);Ave=n(_Re,"STRONG",{});var xEt=s(Ave);nxr=r(xEt,"big_bird"),xEt.forEach(t),sxr=r(_Re," \u2014 "),$H=n(_Re,"A",{href:!0});var kEt=s($H);lxr=r(kEt,"FlaxBigBirdForQuestionAnswering"),kEt.forEach(t),ixr=r(_Re," (BigBird model)"),_Re.forEach(t),dxr=i(Le),eE=n(Le,"LI",{});var uRe=s(eE);yve=n(uRe,"STRONG",{});var SEt=s(yve);cxr=r(SEt,"distilbert"),SEt.forEach(t),fxr=r(uRe," \u2014 "),IH=n(uRe,"A",{href:!0});var REt=s(IH);mxr=r(REt,"FlaxDistilBertForQuestionAnswering"),REt.forEach(t),gxr=r(uRe," (DistilBERT model)"),uRe.forEach(t),hxr=i(Le),oE=n(Le,"LI",{});var bRe=s(oE);Lve=n(bRe,"STRONG",{});var BEt=s(Lve);pxr=r(BEt,"electra"),BEt.forEach(t),_xr=r(bRe," \u2014 "),qH=n(bRe,"A",{href:!0});var PEt=s(qH);uxr=r(PEt,"FlaxElectraForQuestionAnswering"),PEt.forEach(t),bxr=r(bRe," (ELECTRA model)"),bRe.forEach(t),vxr=i(Le),rE=n(Le,"LI",{});var vRe=s(rE);xve=n(vRe,"STRONG",{});var $Et=s(xve);Fxr=r($Et,"mbart"),$Et.forEach(t),Txr=r(vRe," \u2014 "),NH=n(vRe,"A",{href:!0});var IEt=s(NH);Mxr=r(IEt,"FlaxMBartForQuestionAnswering"),IEt.forEach(t),Exr=r(vRe," (mBART model)"),vRe.forEach(t),Cxr=i(Le),tE=n(Le,"LI",{});var FRe=s(tE);kve=n(FRe,"STRONG",{});var qEt=s(kve);wxr=r(qEt,"roberta"),qEt.forEach(t),Axr=r(FRe," \u2014 "),jH=n(FRe,"A",{href:!0});var NEt=s(jH);yxr=r(NEt,"FlaxRobertaForQuestionAnswering"),NEt.forEach(t),Lxr=r(FRe," (RoBERTa model)"),FRe.forEach(t),xxr=i(Le),aE=n(Le,"LI",{});var TRe=s(aE);Sve=n(TRe,"STRONG",{});var jEt=s(Sve);kxr=r(jEt,"roformer"),jEt.forEach(t),Sxr=r(TRe," \u2014 "),DH=n(TRe,"A",{href:!0});var DEt=s(DH);Rxr=r(DEt,"FlaxRoFormerForQuestionAnswering"),DEt.forEach(t),Bxr=r(TRe," (RoFormer model)"),TRe.forEach(t),Pxr=i(Le),nE=n(Le,"LI",{});var MRe=s(nE);Rve=n(MRe,"STRONG",{});var GEt=s(Rve);$xr=r(GEt,"xlm-roberta"),GEt.forEach(t),Ixr=r(MRe," \u2014 "),GH=n(MRe,"A",{href:!0});var OEt=s(GH);qxr=r(OEt,"FlaxXLMRobertaForQuestionAnswering"),OEt.forEach(t),Nxr=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),Le.forEach(t),jxr=i(Pa),Bve=n(Pa,"P",{});var VEt=s(Bve);Dxr=r(VEt,"Examples:"),VEt.forEach(t),Gxr=i(Pa),m(V8.$$.fragment,Pa),Pa.forEach(t),wi.forEach(t),PPe=i(c),Ff=n(c,"H2",{class:!0});var zIe=s(Ff);sE=n(zIe,"A",{id:!0,class:!0,href:!0});var XEt=s(sE);Pve=n(XEt,"SPAN",{});var zEt=s(Pve);m(X8.$$.fragment,zEt),zEt.forEach(t),XEt.forEach(t),Oxr=i(zIe),$ve=n(zIe,"SPAN",{});var QEt=s($ve);Vxr=r(QEt,"FlaxAutoModelForTokenClassification"),QEt.forEach(t),zIe.forEach(t),$Pe=i(c),jr=n(c,"DIV",{class:!0});var yi=s(jr);m(z8.$$.fragment,yi),Xxr=i(yi),Tf=n(yi,"P",{});var nY=s(Tf);zxr=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),OH=n(nY,"A",{href:!0});var WEt=s(OH);Qxr=r(WEt,"from_pretrained()"),WEt.forEach(t),Wxr=r(nY," class method or the "),VH=n(nY,"A",{href:!0});var HEt=s(VH);Hxr=r(HEt,"from_config()"),HEt.forEach(t),Uxr=r(nY,` class
method.`),nY.forEach(t),Jxr=i(yi),Q8=n(yi,"P",{});var QIe=s(Q8);Yxr=r(QIe,"This class cannot be instantiated directly using "),Ive=n(QIe,"CODE",{});var UEt=s(Ive);Kxr=r(UEt,"__init__()"),UEt.forEach(t),Zxr=r(QIe," (throws an error)."),QIe.forEach(t),ekr=i(yi),Bt=n(yi,"DIV",{class:!0});var Li=s(Bt);m(W8.$$.fragment,Li),okr=i(Li),qve=n(Li,"P",{});var JEt=s(qve);rkr=r(JEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JEt.forEach(t),tkr=i(Li),Mf=n(Li,"P",{});var sY=s(Mf);akr=r(sY,`Note:
Loading a model from its configuration file does `),Nve=n(sY,"STRONG",{});var YEt=s(Nve);nkr=r(YEt,"not"),YEt.forEach(t),skr=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XH=n(sY,"A",{href:!0});var KEt=s(XH);lkr=r(KEt,"from_pretrained()"),KEt.forEach(t),ikr=r(sY," to load the model weights."),sY.forEach(t),dkr=i(Li),jve=n(Li,"P",{});var ZEt=s(jve);ckr=r(ZEt,"Examples:"),ZEt.forEach(t),fkr=i(Li),m(H8.$$.fragment,Li),Li.forEach(t),mkr=i(yi),Po=n(yi,"DIV",{class:!0});var $a=s(Po);m(U8.$$.fragment,$a),gkr=i($a),Dve=n($a,"P",{});var eCt=s(Dve);hkr=r(eCt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),eCt.forEach(t),pkr=i($a),qn=n($a,"P",{});var AC=s(qn);_kr=r(AC,"The model class to instantiate is selected based on the "),Gve=n(AC,"CODE",{});var oCt=s(Gve);ukr=r(oCt,"model_type"),oCt.forEach(t),bkr=r(AC,` property of the config object (either
passed as an argument or loaded from `),Ove=n(AC,"CODE",{});var rCt=s(Ove);vkr=r(rCt,"pretrained_model_name_or_path"),rCt.forEach(t),Fkr=r(AC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vve=n(AC,"CODE",{});var tCt=s(Vve);Tkr=r(tCt,"pretrained_model_name_or_path"),tCt.forEach(t),Mkr=r(AC,":"),AC.forEach(t),Ekr=i($a),Be=n($a,"UL",{});var Oo=s(Be);lE=n(Oo,"LI",{});var ERe=s(lE);Xve=n(ERe,"STRONG",{});var aCt=s(Xve);Ckr=r(aCt,"albert"),aCt.forEach(t),wkr=r(ERe," \u2014 "),zH=n(ERe,"A",{href:!0});var nCt=s(zH);Akr=r(nCt,"FlaxAlbertForTokenClassification"),nCt.forEach(t),ykr=r(ERe," (ALBERT model)"),ERe.forEach(t),Lkr=i(Oo),iE=n(Oo,"LI",{});var CRe=s(iE);zve=n(CRe,"STRONG",{});var sCt=s(zve);xkr=r(sCt,"bert"),sCt.forEach(t),kkr=r(CRe," \u2014 "),QH=n(CRe,"A",{href:!0});var lCt=s(QH);Skr=r(lCt,"FlaxBertForTokenClassification"),lCt.forEach(t),Rkr=r(CRe," (BERT model)"),CRe.forEach(t),Bkr=i(Oo),dE=n(Oo,"LI",{});var wRe=s(dE);Qve=n(wRe,"STRONG",{});var iCt=s(Qve);Pkr=r(iCt,"big_bird"),iCt.forEach(t),$kr=r(wRe," \u2014 "),WH=n(wRe,"A",{href:!0});var dCt=s(WH);Ikr=r(dCt,"FlaxBigBirdForTokenClassification"),dCt.forEach(t),qkr=r(wRe," (BigBird model)"),wRe.forEach(t),Nkr=i(Oo),cE=n(Oo,"LI",{});var ARe=s(cE);Wve=n(ARe,"STRONG",{});var cCt=s(Wve);jkr=r(cCt,"distilbert"),cCt.forEach(t),Dkr=r(ARe," \u2014 "),HH=n(ARe,"A",{href:!0});var fCt=s(HH);Gkr=r(fCt,"FlaxDistilBertForTokenClassification"),fCt.forEach(t),Okr=r(ARe," (DistilBERT model)"),ARe.forEach(t),Vkr=i(Oo),fE=n(Oo,"LI",{});var yRe=s(fE);Hve=n(yRe,"STRONG",{});var mCt=s(Hve);Xkr=r(mCt,"electra"),mCt.forEach(t),zkr=r(yRe," \u2014 "),UH=n(yRe,"A",{href:!0});var gCt=s(UH);Qkr=r(gCt,"FlaxElectraForTokenClassification"),gCt.forEach(t),Wkr=r(yRe," (ELECTRA model)"),yRe.forEach(t),Hkr=i(Oo),mE=n(Oo,"LI",{});var LRe=s(mE);Uve=n(LRe,"STRONG",{});var hCt=s(Uve);Ukr=r(hCt,"roberta"),hCt.forEach(t),Jkr=r(LRe," \u2014 "),JH=n(LRe,"A",{href:!0});var pCt=s(JH);Ykr=r(pCt,"FlaxRobertaForTokenClassification"),pCt.forEach(t),Kkr=r(LRe," (RoBERTa model)"),LRe.forEach(t),Zkr=i(Oo),gE=n(Oo,"LI",{});var xRe=s(gE);Jve=n(xRe,"STRONG",{});var _Ct=s(Jve);eSr=r(_Ct,"roformer"),_Ct.forEach(t),oSr=r(xRe," \u2014 "),YH=n(xRe,"A",{href:!0});var uCt=s(YH);rSr=r(uCt,"FlaxRoFormerForTokenClassification"),uCt.forEach(t),tSr=r(xRe," (RoFormer model)"),xRe.forEach(t),aSr=i(Oo),hE=n(Oo,"LI",{});var kRe=s(hE);Yve=n(kRe,"STRONG",{});var bCt=s(Yve);nSr=r(bCt,"xlm-roberta"),bCt.forEach(t),sSr=r(kRe," \u2014 "),KH=n(kRe,"A",{href:!0});var vCt=s(KH);lSr=r(vCt,"FlaxXLMRobertaForTokenClassification"),vCt.forEach(t),iSr=r(kRe," (XLM-RoBERTa model)"),kRe.forEach(t),Oo.forEach(t),dSr=i($a),Kve=n($a,"P",{});var FCt=s(Kve);cSr=r(FCt,"Examples:"),FCt.forEach(t),fSr=i($a),m(J8.$$.fragment,$a),$a.forEach(t),yi.forEach(t),IPe=i(c),Ef=n(c,"H2",{class:!0});var WIe=s(Ef);pE=n(WIe,"A",{id:!0,class:!0,href:!0});var TCt=s(pE);Zve=n(TCt,"SPAN",{});var MCt=s(Zve);m(Y8.$$.fragment,MCt),MCt.forEach(t),TCt.forEach(t),mSr=i(WIe),eFe=n(WIe,"SPAN",{});var ECt=s(eFe);gSr=r(ECt,"FlaxAutoModelForMultipleChoice"),ECt.forEach(t),WIe.forEach(t),qPe=i(c),Dr=n(c,"DIV",{class:!0});var xi=s(Dr);m(K8.$$.fragment,xi),hSr=i(xi),Cf=n(xi,"P",{});var lY=s(Cf);pSr=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),ZH=n(lY,"A",{href:!0});var CCt=s(ZH);_Sr=r(CCt,"from_pretrained()"),CCt.forEach(t),uSr=r(lY," class method or the "),eU=n(lY,"A",{href:!0});var wCt=s(eU);bSr=r(wCt,"from_config()"),wCt.forEach(t),vSr=r(lY,` class
method.`),lY.forEach(t),FSr=i(xi),Z8=n(xi,"P",{});var HIe=s(Z8);TSr=r(HIe,"This class cannot be instantiated directly using "),oFe=n(HIe,"CODE",{});var ACt=s(oFe);MSr=r(ACt,"__init__()"),ACt.forEach(t),ESr=r(HIe," (throws an error)."),HIe.forEach(t),CSr=i(xi),Pt=n(xi,"DIV",{class:!0});var ki=s(Pt);m(eL.$$.fragment,ki),wSr=i(ki),rFe=n(ki,"P",{});var yCt=s(rFe);ASr=r(yCt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),yCt.forEach(t),ySr=i(ki),wf=n(ki,"P",{});var iY=s(wf);LSr=r(iY,`Note:
Loading a model from its configuration file does `),tFe=n(iY,"STRONG",{});var LCt=s(tFe);xSr=r(LCt,"not"),LCt.forEach(t),kSr=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(iY,"A",{href:!0});var xCt=s(oU);SSr=r(xCt,"from_pretrained()"),xCt.forEach(t),RSr=r(iY," to load the model weights."),iY.forEach(t),BSr=i(ki),aFe=n(ki,"P",{});var kCt=s(aFe);PSr=r(kCt,"Examples:"),kCt.forEach(t),$Sr=i(ki),m(oL.$$.fragment,ki),ki.forEach(t),ISr=i(xi),$o=n(xi,"DIV",{class:!0});var Ia=s($o);m(rL.$$.fragment,Ia),qSr=i(Ia),nFe=n(Ia,"P",{});var SCt=s(nFe);NSr=r(SCt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),SCt.forEach(t),jSr=i(Ia),Nn=n(Ia,"P",{});var yC=s(Nn);DSr=r(yC,"The model class to instantiate is selected based on the "),sFe=n(yC,"CODE",{});var RCt=s(sFe);GSr=r(RCt,"model_type"),RCt.forEach(t),OSr=r(yC,` property of the config object (either
passed as an argument or loaded from `),lFe=n(yC,"CODE",{});var BCt=s(lFe);VSr=r(BCt,"pretrained_model_name_or_path"),BCt.forEach(t),XSr=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iFe=n(yC,"CODE",{});var PCt=s(iFe);zSr=r(PCt,"pretrained_model_name_or_path"),PCt.forEach(t),QSr=r(yC,":"),yC.forEach(t),WSr=i(Ia),Pe=n(Ia,"UL",{});var Vo=s(Pe);_E=n(Vo,"LI",{});var SRe=s(_E);dFe=n(SRe,"STRONG",{});var $Ct=s(dFe);HSr=r($Ct,"albert"),$Ct.forEach(t),USr=r(SRe," \u2014 "),rU=n(SRe,"A",{href:!0});var ICt=s(rU);JSr=r(ICt,"FlaxAlbertForMultipleChoice"),ICt.forEach(t),YSr=r(SRe," (ALBERT model)"),SRe.forEach(t),KSr=i(Vo),uE=n(Vo,"LI",{});var RRe=s(uE);cFe=n(RRe,"STRONG",{});var qCt=s(cFe);ZSr=r(qCt,"bert"),qCt.forEach(t),eRr=r(RRe," \u2014 "),tU=n(RRe,"A",{href:!0});var NCt=s(tU);oRr=r(NCt,"FlaxBertForMultipleChoice"),NCt.forEach(t),rRr=r(RRe," (BERT model)"),RRe.forEach(t),tRr=i(Vo),bE=n(Vo,"LI",{});var BRe=s(bE);fFe=n(BRe,"STRONG",{});var jCt=s(fFe);aRr=r(jCt,"big_bird"),jCt.forEach(t),nRr=r(BRe," \u2014 "),aU=n(BRe,"A",{href:!0});var DCt=s(aU);sRr=r(DCt,"FlaxBigBirdForMultipleChoice"),DCt.forEach(t),lRr=r(BRe," (BigBird model)"),BRe.forEach(t),iRr=i(Vo),vE=n(Vo,"LI",{});var PRe=s(vE);mFe=n(PRe,"STRONG",{});var GCt=s(mFe);dRr=r(GCt,"distilbert"),GCt.forEach(t),cRr=r(PRe," \u2014 "),nU=n(PRe,"A",{href:!0});var OCt=s(nU);fRr=r(OCt,"FlaxDistilBertForMultipleChoice"),OCt.forEach(t),mRr=r(PRe," (DistilBERT model)"),PRe.forEach(t),gRr=i(Vo),FE=n(Vo,"LI",{});var $Re=s(FE);gFe=n($Re,"STRONG",{});var VCt=s(gFe);hRr=r(VCt,"electra"),VCt.forEach(t),pRr=r($Re," \u2014 "),sU=n($Re,"A",{href:!0});var XCt=s(sU);_Rr=r(XCt,"FlaxElectraForMultipleChoice"),XCt.forEach(t),uRr=r($Re," (ELECTRA model)"),$Re.forEach(t),bRr=i(Vo),TE=n(Vo,"LI",{});var IRe=s(TE);hFe=n(IRe,"STRONG",{});var zCt=s(hFe);vRr=r(zCt,"roberta"),zCt.forEach(t),FRr=r(IRe," \u2014 "),lU=n(IRe,"A",{href:!0});var QCt=s(lU);TRr=r(QCt,"FlaxRobertaForMultipleChoice"),QCt.forEach(t),MRr=r(IRe," (RoBERTa model)"),IRe.forEach(t),ERr=i(Vo),ME=n(Vo,"LI",{});var qRe=s(ME);pFe=n(qRe,"STRONG",{});var WCt=s(pFe);CRr=r(WCt,"roformer"),WCt.forEach(t),wRr=r(qRe," \u2014 "),iU=n(qRe,"A",{href:!0});var HCt=s(iU);ARr=r(HCt,"FlaxRoFormerForMultipleChoice"),HCt.forEach(t),yRr=r(qRe," (RoFormer model)"),qRe.forEach(t),LRr=i(Vo),EE=n(Vo,"LI",{});var NRe=s(EE);_Fe=n(NRe,"STRONG",{});var UCt=s(_Fe);xRr=r(UCt,"xlm-roberta"),UCt.forEach(t),kRr=r(NRe," \u2014 "),dU=n(NRe,"A",{href:!0});var JCt=s(dU);SRr=r(JCt,"FlaxXLMRobertaForMultipleChoice"),JCt.forEach(t),RRr=r(NRe," (XLM-RoBERTa model)"),NRe.forEach(t),Vo.forEach(t),BRr=i(Ia),uFe=n(Ia,"P",{});var YCt=s(uFe);PRr=r(YCt,"Examples:"),YCt.forEach(t),$Rr=i(Ia),m(tL.$$.fragment,Ia),Ia.forEach(t),xi.forEach(t),NPe=i(c),Af=n(c,"H2",{class:!0});var UIe=s(Af);CE=n(UIe,"A",{id:!0,class:!0,href:!0});var KCt=s(CE);bFe=n(KCt,"SPAN",{});var ZCt=s(bFe);m(aL.$$.fragment,ZCt),ZCt.forEach(t),KCt.forEach(t),IRr=i(UIe),vFe=n(UIe,"SPAN",{});var ewt=s(vFe);qRr=r(ewt,"FlaxAutoModelForNextSentencePrediction"),ewt.forEach(t),UIe.forEach(t),jPe=i(c),Gr=n(c,"DIV",{class:!0});var Si=s(Gr);m(nL.$$.fragment,Si),NRr=i(Si),yf=n(Si,"P",{});var dY=s(yf);jRr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),cU=n(dY,"A",{href:!0});var owt=s(cU);DRr=r(owt,"from_pretrained()"),owt.forEach(t),GRr=r(dY," class method or the "),fU=n(dY,"A",{href:!0});var rwt=s(fU);ORr=r(rwt,"from_config()"),rwt.forEach(t),VRr=r(dY,` class
method.`),dY.forEach(t),XRr=i(Si),sL=n(Si,"P",{});var JIe=s(sL);zRr=r(JIe,"This class cannot be instantiated directly using "),FFe=n(JIe,"CODE",{});var twt=s(FFe);QRr=r(twt,"__init__()"),twt.forEach(t),WRr=r(JIe," (throws an error)."),JIe.forEach(t),HRr=i(Si),$t=n(Si,"DIV",{class:!0});var Ri=s($t);m(lL.$$.fragment,Ri),URr=i(Ri),TFe=n(Ri,"P",{});var awt=s(TFe);JRr=r(awt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),awt.forEach(t),YRr=i(Ri),Lf=n(Ri,"P",{});var cY=s(Lf);KRr=r(cY,`Note:
Loading a model from its configuration file does `),MFe=n(cY,"STRONG",{});var nwt=s(MFe);ZRr=r(nwt,"not"),nwt.forEach(t),eBr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),mU=n(cY,"A",{href:!0});var swt=s(mU);oBr=r(swt,"from_pretrained()"),swt.forEach(t),rBr=r(cY," to load the model weights."),cY.forEach(t),tBr=i(Ri),EFe=n(Ri,"P",{});var lwt=s(EFe);aBr=r(lwt,"Examples:"),lwt.forEach(t),nBr=i(Ri),m(iL.$$.fragment,Ri),Ri.forEach(t),sBr=i(Si),Io=n(Si,"DIV",{class:!0});var qa=s(Io);m(dL.$$.fragment,qa),lBr=i(qa),CFe=n(qa,"P",{});var iwt=s(CFe);iBr=r(iwt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iwt.forEach(t),dBr=i(qa),jn=n(qa,"P",{});var LC=s(jn);cBr=r(LC,"The model class to instantiate is selected based on the "),wFe=n(LC,"CODE",{});var dwt=s(wFe);fBr=r(dwt,"model_type"),dwt.forEach(t),mBr=r(LC,` property of the config object (either
passed as an argument or loaded from `),AFe=n(LC,"CODE",{});var cwt=s(AFe);gBr=r(cwt,"pretrained_model_name_or_path"),cwt.forEach(t),hBr=r(LC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yFe=n(LC,"CODE",{});var fwt=s(yFe);pBr=r(fwt,"pretrained_model_name_or_path"),fwt.forEach(t),_Br=r(LC,":"),LC.forEach(t),uBr=i(qa),LFe=n(qa,"UL",{});var mwt=s(LFe);wE=n(mwt,"LI",{});var jRe=s(wE);xFe=n(jRe,"STRONG",{});var gwt=s(xFe);bBr=r(gwt,"bert"),gwt.forEach(t),vBr=r(jRe," \u2014 "),gU=n(jRe,"A",{href:!0});var hwt=s(gU);FBr=r(hwt,"FlaxBertForNextSentencePrediction"),hwt.forEach(t),TBr=r(jRe," (BERT model)"),jRe.forEach(t),mwt.forEach(t),MBr=i(qa),kFe=n(qa,"P",{});var pwt=s(kFe);EBr=r(pwt,"Examples:"),pwt.forEach(t),CBr=i(qa),m(cL.$$.fragment,qa),qa.forEach(t),Si.forEach(t),DPe=i(c),xf=n(c,"H2",{class:!0});var YIe=s(xf);AE=n(YIe,"A",{id:!0,class:!0,href:!0});var _wt=s(AE);SFe=n(_wt,"SPAN",{});var uwt=s(SFe);m(fL.$$.fragment,uwt),uwt.forEach(t),_wt.forEach(t),wBr=i(YIe),RFe=n(YIe,"SPAN",{});var bwt=s(RFe);ABr=r(bwt,"FlaxAutoModelForImageClassification"),bwt.forEach(t),YIe.forEach(t),GPe=i(c),Or=n(c,"DIV",{class:!0});var Bi=s(Or);m(mL.$$.fragment,Bi),yBr=i(Bi),kf=n(Bi,"P",{});var fY=s(kf);LBr=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),hU=n(fY,"A",{href:!0});var vwt=s(hU);xBr=r(vwt,"from_pretrained()"),vwt.forEach(t),kBr=r(fY," class method or the "),pU=n(fY,"A",{href:!0});var Fwt=s(pU);SBr=r(Fwt,"from_config()"),Fwt.forEach(t),RBr=r(fY,` class
method.`),fY.forEach(t),BBr=i(Bi),gL=n(Bi,"P",{});var KIe=s(gL);PBr=r(KIe,"This class cannot be instantiated directly using "),BFe=n(KIe,"CODE",{});var Twt=s(BFe);$Br=r(Twt,"__init__()"),Twt.forEach(t),IBr=r(KIe," (throws an error)."),KIe.forEach(t),qBr=i(Bi),It=n(Bi,"DIV",{class:!0});var Pi=s(It);m(hL.$$.fragment,Pi),NBr=i(Pi),PFe=n(Pi,"P",{});var Mwt=s(PFe);jBr=r(Mwt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Mwt.forEach(t),DBr=i(Pi),Sf=n(Pi,"P",{});var mY=s(Sf);GBr=r(mY,`Note:
Loading a model from its configuration file does `),$Fe=n(mY,"STRONG",{});var Ewt=s($Fe);OBr=r(Ewt,"not"),Ewt.forEach(t),VBr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_U=n(mY,"A",{href:!0});var Cwt=s(_U);XBr=r(Cwt,"from_pretrained()"),Cwt.forEach(t),zBr=r(mY," to load the model weights."),mY.forEach(t),QBr=i(Pi),IFe=n(Pi,"P",{});var wwt=s(IFe);WBr=r(wwt,"Examples:"),wwt.forEach(t),HBr=i(Pi),m(pL.$$.fragment,Pi),Pi.forEach(t),UBr=i(Bi),qo=n(Bi,"DIV",{class:!0});var Na=s(qo);m(_L.$$.fragment,Na),JBr=i(Na),qFe=n(Na,"P",{});var Awt=s(qFe);YBr=r(Awt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Awt.forEach(t),KBr=i(Na),Dn=n(Na,"P",{});var xC=s(Dn);ZBr=r(xC,"The model class to instantiate is selected based on the "),NFe=n(xC,"CODE",{});var ywt=s(NFe);ePr=r(ywt,"model_type"),ywt.forEach(t),oPr=r(xC,` property of the config object (either
passed as an argument or loaded from `),jFe=n(xC,"CODE",{});var Lwt=s(jFe);rPr=r(Lwt,"pretrained_model_name_or_path"),Lwt.forEach(t),tPr=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),DFe=n(xC,"CODE",{});var xwt=s(DFe);aPr=r(xwt,"pretrained_model_name_or_path"),xwt.forEach(t),nPr=r(xC,":"),xC.forEach(t),sPr=i(Na),uL=n(Na,"UL",{});var ZIe=s(uL);yE=n(ZIe,"LI",{});var DRe=s(yE);GFe=n(DRe,"STRONG",{});var kwt=s(GFe);lPr=r(kwt,"beit"),kwt.forEach(t),iPr=r(DRe," \u2014 "),uU=n(DRe,"A",{href:!0});var Swt=s(uU);dPr=r(Swt,"FlaxBeitForImageClassification"),Swt.forEach(t),cPr=r(DRe," (BEiT model)"),DRe.forEach(t),fPr=i(ZIe),LE=n(ZIe,"LI",{});var GRe=s(LE);OFe=n(GRe,"STRONG",{});var Rwt=s(OFe);mPr=r(Rwt,"vit"),Rwt.forEach(t),gPr=r(GRe," \u2014 "),bU=n(GRe,"A",{href:!0});var Bwt=s(bU);hPr=r(Bwt,"FlaxViTForImageClassification"),Bwt.forEach(t),pPr=r(GRe," (ViT model)"),GRe.forEach(t),ZIe.forEach(t),_Pr=i(Na),VFe=n(Na,"P",{});var Pwt=s(VFe);uPr=r(Pwt,"Examples:"),Pwt.forEach(t),bPr=i(Na),m(bL.$$.fragment,Na),Na.forEach(t),Bi.forEach(t),OPe=i(c),Rf=n(c,"H2",{class:!0});var eqe=s(Rf);xE=n(eqe,"A",{id:!0,class:!0,href:!0});var $wt=s(xE);XFe=n($wt,"SPAN",{});var Iwt=s(XFe);m(vL.$$.fragment,Iwt),Iwt.forEach(t),$wt.forEach(t),vPr=i(eqe),zFe=n(eqe,"SPAN",{});var qwt=s(zFe);FPr=r(qwt,"FlaxAutoModelForVision2Seq"),qwt.forEach(t),eqe.forEach(t),VPe=i(c),Vr=n(c,"DIV",{class:!0});var $i=s(Vr);m(FL.$$.fragment,$i),TPr=i($i),Bf=n($i,"P",{});var gY=s(Bf);MPr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),vU=n(gY,"A",{href:!0});var Nwt=s(vU);EPr=r(Nwt,"from_pretrained()"),Nwt.forEach(t),CPr=r(gY," class method or the "),FU=n(gY,"A",{href:!0});var jwt=s(FU);wPr=r(jwt,"from_config()"),jwt.forEach(t),APr=r(gY,` class
method.`),gY.forEach(t),yPr=i($i),TL=n($i,"P",{});var oqe=s(TL);LPr=r(oqe,"This class cannot be instantiated directly using "),QFe=n(oqe,"CODE",{});var Dwt=s(QFe);xPr=r(Dwt,"__init__()"),Dwt.forEach(t),kPr=r(oqe," (throws an error)."),oqe.forEach(t),SPr=i($i),qt=n($i,"DIV",{class:!0});var Ii=s(qt);m(ML.$$.fragment,Ii),RPr=i(Ii),WFe=n(Ii,"P",{});var Gwt=s(WFe);BPr=r(Gwt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Gwt.forEach(t),PPr=i(Ii),Pf=n(Ii,"P",{});var hY=s(Pf);$Pr=r(hY,`Note:
Loading a model from its configuration file does `),HFe=n(hY,"STRONG",{});var Owt=s(HFe);IPr=r(Owt,"not"),Owt.forEach(t),qPr=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TU=n(hY,"A",{href:!0});var Vwt=s(TU);NPr=r(Vwt,"from_pretrained()"),Vwt.forEach(t),jPr=r(hY," to load the model weights."),hY.forEach(t),DPr=i(Ii),UFe=n(Ii,"P",{});var Xwt=s(UFe);GPr=r(Xwt,"Examples:"),Xwt.forEach(t),OPr=i(Ii),m(EL.$$.fragment,Ii),Ii.forEach(t),VPr=i($i),No=n($i,"DIV",{class:!0});var ja=s(No);m(CL.$$.fragment,ja),XPr=i(ja),JFe=n(ja,"P",{});var zwt=s(JFe);zPr=r(zwt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),zwt.forEach(t),QPr=i(ja),Gn=n(ja,"P",{});var kC=s(Gn);WPr=r(kC,"The model class to instantiate is selected based on the "),YFe=n(kC,"CODE",{});var Qwt=s(YFe);HPr=r(Qwt,"model_type"),Qwt.forEach(t),UPr=r(kC,` property of the config object (either
passed as an argument or loaded from `),KFe=n(kC,"CODE",{});var Wwt=s(KFe);JPr=r(Wwt,"pretrained_model_name_or_path"),Wwt.forEach(t),YPr=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ZFe=n(kC,"CODE",{});var Hwt=s(ZFe);KPr=r(Hwt,"pretrained_model_name_or_path"),Hwt.forEach(t),ZPr=r(kC,":"),kC.forEach(t),e$r=i(ja),eTe=n(ja,"UL",{});var Uwt=s(eTe);kE=n(Uwt,"LI",{});var ORe=s(kE);oTe=n(ORe,"STRONG",{});var Jwt=s(oTe);o$r=r(Jwt,"vision-encoder-decoder"),Jwt.forEach(t),r$r=r(ORe," \u2014 "),MU=n(ORe,"A",{href:!0});var Ywt=s(MU);t$r=r(Ywt,"FlaxVisionEncoderDecoderModel"),Ywt.forEach(t),a$r=r(ORe," (Vision Encoder decoder model)"),ORe.forEach(t),Uwt.forEach(t),n$r=i(ja),rTe=n(ja,"P",{});var Kwt=s(rTe);s$r=r(Kwt,"Examples:"),Kwt.forEach(t),l$r=i(ja),m(wL.$$.fragment,ja),ja.forEach(t),$i.forEach(t),this.h()},h(){d(Z,"name","hf:doc:metadata"),d(Z,"content",JSON.stringify(i6t)),d(Ce,"id","auto-classes"),d(Ce,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ce,"href","#auto-classes"),d(ce,"class","relative group"),d(On,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoTokenizer"),d(Vi,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertModel"),d(Gf,"id","extending-the-auto-classes"),d(Gf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gf,"href","#extending-the-auto-classes"),d(Xi,"class","relative group"),d(Vf,"id","transformers.AutoConfig"),d(Vf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Vf,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(x9,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(k9,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertConfig"),d(S9,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig"),d(R9,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitConfig"),d(B9,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertConfig"),d(P9,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d($9,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdConfig"),d(I9,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(q9,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(N9,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(j9,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertConfig"),d(D9,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineConfig"),d(G9,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPConfig"),d(O9,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertConfig"),d(V9,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextConfig"),d(X9,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLConfig"),d(z9,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(Q9,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(W9,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(H9,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaConfig"),d(U9,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(J9,"href","/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Y9,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTConfig"),d(K9,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrConfig"),d(Z9,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertConfig"),d(ex,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRConfig"),d(ox,"href","/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTConfig"),d(rx,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraConfig"),d(tx,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(ax,"href","/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Config"),d(nx,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertConfig"),d(sx,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetConfig"),d(lx,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTConfig"),d(ix,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelConfig"),d(dx,"href","/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNConfig"),d(cx,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Config"),d(fx,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(mx,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJConfig"),d(gx,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertConfig"),d(hx,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertConfig"),d(px,"href","/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(_x,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(ux,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(bx,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDConfig"),d(vx,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerConfig"),d(Fx,"href","/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeConfig"),d(Tx,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertConfig"),d(Mx,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Config"),d(Ex,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianConfig"),d(Cx,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(wx,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartConfig"),d(Ax,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(yx,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Lx,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetConfig"),d(xx,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Config"),d(kx,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Sx,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(Rx,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusConfig"),d(Bx,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverConfig"),d(Px,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartConfig"),d($x,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(Ix,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(qx,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(Nx,"href","/docs/transformers/pr_15773/en/model_doc/rag#transformers.RagConfig"),d(jx,"href","/docs/transformers/pr_15773/en/model_doc/realm#transformers.RealmConfig"),d(Dx,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerConfig"),d(Gx,"href","/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetConfig"),d(Ox,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertConfig"),d(Vx,"href","/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetConfig"),d(Xx,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertConfig"),d(zx,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaConfig"),d(Qx,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerConfig"),d(Wx,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerConfig"),d(Hx,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWConfig"),d(Ux,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDConfig"),d(Jx,"href","/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(Yx,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Kx,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Zx,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterConfig"),d(ek,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(ok,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinConfig"),d(rk,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Config"),d(tk,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasConfig"),d(ak,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartConfig"),d(nk,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(sk,"href","/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRConfig"),d(lk,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(ik,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(dk,"href","/docs/transformers/pr_15773/en/model_doc/van#transformers.VanConfig"),d(ck,"href","/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltConfig"),d(fk,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(mk,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(gk,"href","/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(hk,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTConfig"),d(pk,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(_k,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(uk,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMConfig"),d(bk,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMConfig"),d(vk,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMConfig"),d(Fk,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Tk,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Mk,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(Ek,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetConfig"),d(Ck,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dg,"id","transformers.AutoTokenizer"),d(Dg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Dg,"href","#transformers.AutoTokenizer"),d(Wi,"class","relative group"),d(wk,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Ak,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertTokenizer"),d(yk,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Lk,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartTokenizer"),d(xk,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartTokenizerFast"),d(kk,"href","/docs/transformers/pr_15773/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Sk,"href","/docs/transformers/pr_15773/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(Rk,"href","/docs/transformers/pr_15773/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(Bk,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizer"),d(Pk,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizerFast"),d($k,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(Ik,"href","/docs/transformers/pr_15773/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(qk,"href","/docs/transformers/pr_15773/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(Nk,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(jk,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(Dk,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Gk,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ok,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(Vk,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(Xk,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(zk,"href","/docs/transformers/pr_15773/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(Qk,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertTokenizer"),d(Wk,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(Hk,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineTokenizer"),d(Uk,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPTokenizer"),d(Jk,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(Yk,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(Kk,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Zk,"href","/docs/transformers/pr_15773/en/model_doc/cpm#transformers.CpmTokenizer"),d(eS,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(oS,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaTokenizer"),d(rS,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(tS,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(aS,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(nS,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(sS,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(lS,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(iS,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraTokenizer"),d(dS,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(cS,"href","/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Tokenizer"),d(fS,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(mS,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetTokenizer"),d(gS,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(hS,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(pS,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelTokenizer"),d(_S,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(uS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(bS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(vS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(FS,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(TS,"href","/docs/transformers/pr_15773/en/model_doc/herbert#transformers.HerbertTokenizer"),d(MS,"href","/docs/transformers/pr_15773/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(ES,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(CS,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizer"),d(wS,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(AS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(yS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(LS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(xS,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(kS,"href","/docs/transformers/pr_15773/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(SS,"href","/docs/transformers/pr_15773/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(RS,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDTokenizer"),d(BS,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDTokenizerFast"),d(PS,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerTokenizer"),d($S,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(IS,"href","/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeTokenizer"),d(qS,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(NS,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(jS,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(DS,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianTokenizer"),d(GS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartTokenizer"),d(OS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(VS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(XS,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(zS,"href","/docs/transformers/pr_15773/en/model_doc/mluke#transformers.MLukeTokenizer"),d(QS,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(WS,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(HS,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(US,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(JS,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.T5Tokenizer"),d(YS,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.T5TokenizerFast"),d(KS,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(ZS,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(eR,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(oR,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(rR,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(tR,"href","/docs/transformers/pr_15773/en/model_doc/phobert#transformers.PhobertTokenizer"),d(aR,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartTokenizer"),d(nR,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(sR,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizer"),d(lR,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertTokenizerFast"),d(iR,"href","/docs/transformers/pr_15773/en/model_doc/rag#transformers.RagTokenizer"),d(dR,"href","/docs/transformers/pr_15773/en/model_doc/realm#transformers.RealmTokenizer"),d(cR,"href","/docs/transformers/pr_15773/en/model_doc/realm#transformers.RealmTokenizerFast"),d(fR,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerTokenizer"),d(mR,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(gR,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertTokenizer"),d(hR,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(pR,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(_R,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(uR,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizer"),d(bR,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(vR,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(FR,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(TR,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(MR,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(ER,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterTokenizer"),d(CR,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(wR,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(AR,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(yR,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.T5Tokenizer"),d(LR,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.T5TokenizerFast"),d(xR,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasTokenizer"),d(kR,"href","/docs/transformers/pr_15773/en/model_doc/tapex#transformers.TapexTokenizer"),d(SR,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(RR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(BR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(PR,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMTokenizer"),d($R,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(IR,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMTokenizer"),d(qR,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(NR,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(jR,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(DR,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(GR,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vh,"id","transformers.AutoFeatureExtractor"),d(vh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vh,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(OR,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(VR,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(XR,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(zR,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(QR,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(WR,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(HR,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(UR,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(JR,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(YR,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(KR,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(ZR,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(eB,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(oB,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(rB,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(tB,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(aB,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(nB,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(sB,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(lB,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($e,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gh,"id","transformers.AutoProcessor"),d(Gh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Gh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(iB,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(dB,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPProcessor"),d(cB,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(fB,"href","/docs/transformers/pr_15773/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(mB,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(gB,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(hB,"href","/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRProcessor"),d(pB,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(_B,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Kh,"id","transformers.AutoModel"),d(Kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Kh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(uB,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bB,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vB,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FB,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertModel"),d(TB,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartModel"),d(MB,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitModel"),d(EB,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertModel"),d(CB,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(wB,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdModel"),d(AB,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(yB,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(LB,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(xB,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertModel"),d(kB,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineModel"),d(SB,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.CLIPModel"),d(RB,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertModel"),d(BB,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextModel"),d(PB,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLModel"),d($B,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(IB,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(qB,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(NB,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaModel"),d(jB,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(DB,"href","/docs/transformers/pr_15773/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(GB,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTModel"),d(OB,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrModel"),d(VB,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertModel"),d(XB,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(zB,"href","/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTModel"),d(QB,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraModel"),d(WB,"href","/docs/transformers/pr_15773/en/model_doc/fastspeech2#transformers.FastSpeech2Model"),d(HB,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertModel"),d(UB,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetModel"),d(JB,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTModel"),d(YB,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelModel"),d(KB,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelBaseModel"),d(ZB,"href","/docs/transformers/pr_15773/en/model_doc/glpn#transformers.GLPNModel"),d(eP,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2Model"),d(oP,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(rP,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJModel"),d(tP,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertModel"),d(aP,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertModel"),d(nP,"href","/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(sP,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(lP,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(iP,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDModel"),d(dP,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerModel"),d(cP,"href","/docs/transformers/pr_15773/en/model_doc/luke#transformers.LukeModel"),d(fP,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertModel"),d(mP,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100Model"),d(gP,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianModel"),d(hP,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerModel"),d(pP,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartModel"),d(_P,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(uP,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertModel"),d(bP,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetModel"),d(vP,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5Model"),d(FP,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerModel"),d(TP,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(MP,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusModel"),d(EP,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverModel"),d(CP,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartModel"),d(wP,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerModel"),d(AP,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(yP,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertModel"),d(LP,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModel"),d(xP,"href","/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetModel"),d(kP,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertModel"),d(SP,"href","/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetModel"),d(RP,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel"),d(BP,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaModel"),d(PP,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerModel"),d($P,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerModel"),d(IP,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWModel"),d(qP,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDModel"),d(NP,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(jP,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterModel"),d(DP,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(GP,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinModel"),d(OP,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5Model"),d(VP,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasModel"),d(XP,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(zP,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechModel"),d(QP,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(WP,"href","/docs/transformers/pr_15773/en/model_doc/van#transformers.VanModel"),d(HP,"href","/docs/transformers/pr_15773/en/model_doc/vilt#transformers.ViltModel"),d(UP,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(JP,"href","/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertModel"),d(YP,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTModel"),d(KP,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(ZP,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(e$,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMModel"),d(o$,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMModel"),d(r$,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMModel"),d(t$,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(a$,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(n$,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(s$,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetModel"),d(l$,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoModel"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D_,"id","transformers.AutoModelForPreTraining"),d(D_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(i$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(d$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(c$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(f$,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForPreTraining"),d(m$,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(g$,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForPreTraining"),d(h$,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(p$,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(_$,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(u$,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(b$,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(v$,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(F$,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(T$,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForPreTraining"),d(M$,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(E$,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForPreTraining"),d(C$,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(w$,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(A$,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(y$,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(L$,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(x$,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(k$,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(S$,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(R$,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(B$,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(P$,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d($$,"href","/docs/transformers/pr_15773/en/model_doc/retribert#transformers.RetriBertModel"),d(I$,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(q$,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(N$,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(j$,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(D$,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(G$,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(O$,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(V$,"href","/docs/transformers/pr_15773/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(X$,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(z$,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(Q$,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(W$,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(H$,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(U$,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yu,"id","transformers.AutoModelForCausalLM"),d(yu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(J$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Y$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(K$,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Z$,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForCausalLM"),d(eI,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertLMHeadModel"),d(oI,"href","/docs/transformers/pr_15773/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(rI,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(tI,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(aI,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(nI,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(sI,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(lI,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(iI,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(dI,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForCausalLM"),d(cI,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(fI,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(mI,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(gI,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianForCausalLM"),d(hI,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForCausalLM"),d(pI,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(_I,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(uI,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(bI,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(vI,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(FI,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(TI,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(MI,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(EI,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(CI,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(wI,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(AI,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(yI,"href","/docs/transformers/pr_15773/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(LI,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(xI,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(kI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(SI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(RI,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(BI,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c1,"id","transformers.AutoModelForMaskedLM"),d(c1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c1,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(PI,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($I,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(II,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qI,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(NI,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(jI,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMaskedLM"),d(DI,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(GI,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(OI,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(VI,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(XI,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(zI,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(QI,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(WI,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(HI,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(UI,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(JI,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(YI,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(KI,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(ZI,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(eq,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(oq,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(rq,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(tq,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(aq,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(nq,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(sq,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(lq,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(iq,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(dq,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(cq,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(fq,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(mq,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(gq,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(hq,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(pq,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(_q,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W1,"id","transformers.AutoModelForSeq2SeqLM"),d(W1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W1,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(uq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fq,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Tq,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(Mq,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(Eq,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(Cq,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(wq,"href","/docs/transformers/pr_15773/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(Aq,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(yq,"href","/docs/transformers/pr_15773/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(Lq,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.MarianMTModel"),d(xq,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(kq,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(Rq,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(Bq,"href","/docs/transformers/pr_15773/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(Pq,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d($q,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Iq,"href","/docs/transformers/pr_15773/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m7,"id","transformers.AutoModelForSequenceClassification"),d(m7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m7,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(qq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Nq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jq,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dq,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(Gq,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForSequenceClassification"),d(Oq,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForSequenceClassification"),d(Vq,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(Xq,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(zq,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(Qq,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(Wq,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(Hq,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(Uq,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(Jq,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(Yq,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(Kq,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(Zq,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(eN,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(rN,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(tN,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(aN,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(nN,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(sN,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(lN,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(iN,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(dN,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForSequenceClassification"),d(cN,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(fN,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(mN,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(gN,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(hN,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(pN,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(_N,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(uN,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(bN,"href","/docs/transformers/pr_15773/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(vN,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(FN,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(TN,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(MN,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(EN,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(CN,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(wN,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(AN,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForSequenceClassification"),d(yN,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(LN,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(xN,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(kN,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(SN,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(RN,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lb,"id","transformers.AutoModelForMultipleChoice"),d(lb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(lb,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(BN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PN,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($N,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IN,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(qN,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForMultipleChoice"),d(NN,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(jN,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(GN,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(VN,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(XN,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(zN,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(QN,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(WN,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(HN,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(JN,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(YN,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(KN,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(ej,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(oj,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(rj,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(tj,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(aj,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(nj,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(sj,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(lj,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(ij,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(dj,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qb,"id","transformers.AutoModelForNextSentencePrediction"),d(qb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(cj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gj,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(hj,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(pj,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(_j,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(uj,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xb,"id","transformers.AutoModelForTokenClassification"),d(Xb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Xb,"href","#transformers.AutoModelForTokenClassification"),d(Td,"class","relative group"),d(bj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Fj,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tj,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(Mj,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForTokenClassification"),d(Ej,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(Cj,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(wj,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForTokenClassification"),d(Aj,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(yj,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(Lj,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(xj,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(kj,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(Rj,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(Pj,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d($j,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Ij,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(qj,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Nj,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(jj,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Dj,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(Gj,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(Oj,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Vj,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Xj,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(zj,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(Qj,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(Wj,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Hj,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Uj,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Jj,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(Yj,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Kj,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Zj,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w2,"id","transformers.AutoModelForQuestionAnswering"),d(w2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w2,"href","#transformers.AutoModelForQuestionAnswering"),d(Cd,"class","relative group"),d(eD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tD,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_15773/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_15773/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(uD,"href","/docs/transformers/pr_15773/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(vD,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_15773/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_15773/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(MD,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(ED,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(CD,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(wD,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(AD,"href","/docs/transformers/pr_15773/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(yD,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(LD,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(xD,"href","/docs/transformers/pr_15773/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(kD,"href","/docs/transformers/pr_15773/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(SD,"href","/docs/transformers/pr_15773/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(RD,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(BD,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(PD,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d($D,"href","/docs/transformers/pr_15773/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(ID,"href","/docs/transformers/pr_15773/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(qD,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(ND,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(jD,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(DD,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(GD,"href","/docs/transformers/pr_15773/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(m5,"id","transformers.AutoModelForTableQuestionAnswering"),d(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m5,"href","#transformers.AutoModelForTableQuestionAnswering"),d(yd,"class","relative group"),d(OD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zD,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(p5,"id","transformers.AutoModelForImageClassification"),d(p5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(p5,"href","#transformers.AutoModelForImageClassification"),d(kd,"class","relative group"),d(QD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HD,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UD,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForImageClassification"),d(JD,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(YD,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(KD,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassification"),d(ZD,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(eG,"href","/docs/transformers/pr_15773/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(oG,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(rG,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(tG,"href","/docs/transformers/pr_15773/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(aG,"href","/docs/transformers/pr_15773/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(nG,"href","/docs/transformers/pr_15773/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(sG,"href","/docs/transformers/pr_15773/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(lG,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(iG,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForImageClassification"),d(dG,"href","/docs/transformers/pr_15773/en/model_doc/van#transformers.VanForImageClassification"),d(cG,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForImageClassification"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L5,"id","transformers.AutoModelForVision2Seq"),d(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L5,"href","#transformers.AutoModelForVision2Seq"),d(Bd,"class","relative group"),d(fG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hG,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(S5,"id","transformers.AutoModelForAudioClassification"),d(S5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(S5,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(pG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_G,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(vG,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(FG,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(TG,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(MG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(EG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(CG,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(wG,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G5,"id","transformers.AutoModelForAudioFrameClassification"),d(G5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G5,"href","#transformers.AutoModelForAudioFrameClassification"),d(jd,"class","relative group"),d(AG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(LG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(kG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(SG,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(RG,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W5,"id","transformers.AutoModelForCTC"),d(W5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W5,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(BG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(PG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d($G,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(IG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(qG,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.HubertForCTC"),d(NG,"href","/docs/transformers/pr_15773/en/model_doc/sew#transformers.SEWForCTC"),d(jG,"href","/docs/transformers/pr_15773/en/model_doc/sew-d#transformers.SEWDForCTC"),d(DG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(GG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(OG,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(VG,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(t3,"id","transformers.AutoModelForSpeechSeq2Seq"),d(t3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(t3,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(XG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WG,"href","/docs/transformers/pr_15773/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(HG,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(l3,"id","transformers.AutoModelForAudioXVector"),d(l3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(l3,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(UG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YG,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KG,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(ZG,"href","/docs/transformers/pr_15773/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(eO,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(oO,"href","/docs/transformers/pr_15773/en/model_doc/wavlm#transformers.WavLMForXVector"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(g3,"id","transformers.AutoModelForMaskedImageModeling"),d(g3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(g3,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(rO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nO,"href","/docs/transformers/pr_15773/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(sO,"href","/docs/transformers/pr_15773/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(lO,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(b3,"id","transformers.AutoModelForObjectDetection"),d(b3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(b3,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(iO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fO,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForObjectDetection"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T3,"id","transformers.AutoModelForImageSegmentation"),d(T3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T3,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(mO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(hO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pO,"href","/docs/transformers/pr_15773/en/model_doc/detr#transformers.DetrForSegmentation"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(C3,"id","transformers.AutoModelForSemanticSegmentation"),d(C3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C3,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(_O,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vO,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(FO,"href","/docs/transformers/pr_15773/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(TO,"href","/docs/transformers/pr_15773/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(MO,"href","/docs/transformers/pr_15773/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k3,"id","transformers.AutoModelForInstanceSegmentation"),d(k3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k3,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(EO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(CO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(wO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AO,"href","/docs/transformers/pr_15773/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(B3,"id","transformers.TFAutoModel"),d(B3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(B3,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(yO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(LO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(xO,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kO,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertModel"),d(SO,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartModel"),d(RO,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertModel"),d(BO,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(PO,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d($O,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertModel"),d(IO,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.TFCLIPModel"),d(qO,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertModel"),d(NO,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextModel"),d(jO,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLModel"),d(DO,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaModel"),d(GO,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(OO,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(VO,"href","/docs/transformers/pr_15773/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(XO,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraModel"),d(zO,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(QO,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelModel"),d(WO,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(HO,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2Model"),d(UO,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJModel"),d(JO,"href","/docs/transformers/pr_15773/en/model_doc/hubert#transformers.TFHubertModel"),d(YO,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(KO,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDModel"),d(ZO,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerModel"),d(eV,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertModel"),d(oV,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianModel"),d(rV,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartModel"),d(tV,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(aV,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetModel"),d(nV,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5Model"),d(sV,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(lV,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusModel"),d(iV,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertModel"),d(dV,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaModel"),d(cV,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerModel"),d(fV,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(mV,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5Model"),d(gV,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasModel"),d(hV,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(pV,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTModel"),d(_V,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(uV,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(bV,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMModel"),d(vV,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(FV,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ev,"id","transformers.TFAutoModelForPreTraining"),d(Ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ev,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(TV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CV,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(wV,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForPreTraining"),d(yV,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(LV,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(xV,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(kV,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(SV,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(RV,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(BV,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(PV,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d($V,"href","/docs/transformers/pr_15773/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(IV,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(qV,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(NV,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(jV,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(DV,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(GV,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(OV,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(VV,"href","/docs/transformers/pr_15773/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(XV,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(zV,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(QV,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wv,"id","transformers.TFAutoModelForCausalLM"),d(Wv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wv,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(WV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(HV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(UV,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(JV,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(YV,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(KV,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(ZV,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(eX,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(oX,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(rX,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(tX,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(aX,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(nX,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(sX,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(lX,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sF,"id","transformers.TFAutoModelForImageClassification"),d(sF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sF,"href","#transformers.TFAutoModelForImageClassification"),d(Mc,"class","relative group"),d(iX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fX,"href","/docs/transformers/pr_15773/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(mX,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dF,"id","transformers.TFAutoModelForMaskedLM"),d(dF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(dF,"href","#transformers.TFAutoModelForMaskedLM"),d(wc,"class","relative group"),d(gX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_X,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(uX,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(bX,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(vX,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(FX,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(TX,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(MX,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(EX,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(CX,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(wX,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(AX,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(yX,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(LX,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(xX,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(kX,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(SX,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(RX,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(BX,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(PX,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d($X,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kF,"id","transformers.TFAutoModelForSeq2SeqLM"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(IX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jX,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(DX,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(GX,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(OX,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(VX,"href","/docs/transformers/pr_15773/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(XX,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.TFMarianMTModel"),d(zX,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(QX,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(WX,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(HX,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GF,"id","transformers.TFAutoModelForSequenceClassification"),d(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(GF,"href","#transformers.TFAutoModelForSequenceClassification"),d(Sc,"class","relative group"),d(UX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(JX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(YX,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KX,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(ZX,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(ez,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(oz,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(rz,"href","/docs/transformers/pr_15773/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(tz,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(az,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(nz,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(sz,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(lz,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(iz,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(dz,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(cz,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(fz,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(mz,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(gz,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(hz,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(pz,"href","/docs/transformers/pr_15773/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(_z,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(uz,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(bz,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(vz,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(Fz,"href","/docs/transformers/pr_15773/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(Tz,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(Mz,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(Ez,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hT,"id","transformers.TFAutoModelForMultipleChoice"),d(hT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hT,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Cz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Az,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yz,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(Lz,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(xz,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(Bz,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d($z,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(qz,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(jz,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(Dz,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(Gz,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(Oz,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(Vz,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(qc,"class","relative group"),d(Xz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Qz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wz,"href","/docs/transformers/pr_15773/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(PT,"id","transformers.TFAutoModelForTokenClassification"),d(PT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(PT,"href","#transformers.TFAutoModelForTokenClassification"),d(Dc,"class","relative group"),d(Hz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Uz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Jz,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yz,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(Kz,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(Zz,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(eQ,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(oQ,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(rQ,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(tQ,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(aQ,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(nQ,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(sQ,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(lQ,"href","/docs/transformers/pr_15773/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(iQ,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(dQ,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(cQ,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(fQ,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(mQ,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(gQ,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(hQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(pQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(_Q,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(oM,"id","transformers.TFAutoModelForQuestionAnswering"),d(oM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oM,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Vc,"class","relative group"),d(uQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(vQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(FQ,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(TQ,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(MQ,"href","/docs/transformers/pr_15773/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(EQ,"href","/docs/transformers/pr_15773/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(CQ,"href","/docs/transformers/pr_15773/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(wQ,"href","/docs/transformers/pr_15773/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(AQ,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(yQ,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(LQ,"href","/docs/transformers/pr_15773/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(xQ,"href","/docs/transformers/pr_15773/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(kQ,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(SQ,"href","/docs/transformers/pr_15773/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(RQ,"href","/docs/transformers/pr_15773/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(BQ,"href","/docs/transformers/pr_15773/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(PQ,"href","/docs/transformers/pr_15773/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d($Q,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(IQ,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(qQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(NQ,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(jQ,"href","/docs/transformers/pr_15773/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MM,"id","transformers.TFAutoModelForVision2Seq"),d(MM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(MM,"href","#transformers.TFAutoModelForVision2Seq"),d(Qc,"class","relative group"),d(DQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VQ,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(CM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(XQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(QQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(WQ,"href","/docs/transformers/pr_15773/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AM,"id","transformers.FlaxAutoModel"),d(AM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AM,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(HQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JQ,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YQ,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertModel"),d(KQ,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartModel"),d(ZQ,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitModel"),d(eW,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertModel"),d(oW,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(rW,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(tW,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(aW,"href","/docs/transformers/pr_15773/en/model_doc/clip#transformers.FlaxCLIPModel"),d(nW,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(sW,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraModel"),d(lW,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(iW,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(dW,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(cW,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianModel"),d(fW,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartModel"),d(mW,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5Model"),d(gW,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(hW,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(pW,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(_W,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5Model"),d(uW,"href","/docs/transformers/pr_15773/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(bW,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTModel"),d(vW,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(FW,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(TW,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(KM,"id","transformers.FlaxAutoModelForCausalLM"),d(KM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(KM,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(MW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(AW,"href","/docs/transformers/pr_15773/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(yW,"href","/docs/transformers/pr_15773/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(LW,"href","/docs/transformers/pr_15773/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(xW,"href","/docs/transformers/pr_15773/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(a4,"id","transformers.FlaxAutoModelForPreTraining"),d(a4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(a4,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(kW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(SW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(RW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(BW,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(PW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d($W,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(IW,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(qW,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(NW,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(jW,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(DW,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(GW,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(OW,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(VW,"href","/docs/transformers/pr_15773/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(XW,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(u4,"id","transformers.FlaxAutoModelForMaskedLM"),d(u4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(u4,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(zW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WW,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HW,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(UW,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(JW,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(YW,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(KW,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(ZW,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(eH,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(oH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(rH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(tH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(L4,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(L4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L4,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(aH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lH,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(iH,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(dH,"href","/docs/transformers/pr_15773/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(cH,"href","/docs/transformers/pr_15773/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(fH,"href","/docs/transformers/pr_15773/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(mH,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(gH,"href","/docs/transformers/pr_15773/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(hH,"href","/docs/transformers/pr_15773/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(pH,"href","/docs/transformers/pr_15773/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(N4,"id","transformers.FlaxAutoModelForSequenceClassification"),d(N4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(N4,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(_H,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(FH,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(TH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(MH,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(EH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(CH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(wH,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(AH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(yH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(LH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(U4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(xH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(BH,"href","/docs/transformers/pr_15773/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(PH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d($H,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(IH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(qH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(NH,"href","/docs/transformers/pr_15773/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(jH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(DH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(GH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sE,"id","transformers.FlaxAutoModelForTokenClassification"),d(sE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sE,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Ff,"class","relative group"),d(OH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zH,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(QH,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(WH,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(HH,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(UH,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(JH,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(YH,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(KH,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pE,"id","transformers.FlaxAutoModelForMultipleChoice"),d(pE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pE,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Ef,"class","relative group"),d(ZH,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(eU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(oU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rU,"href","/docs/transformers/pr_15773/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(tU,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(aU,"href","/docs/transformers/pr_15773/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(nU,"href","/docs/transformers/pr_15773/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(sU,"href","/docs/transformers/pr_15773/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(lU,"href","/docs/transformers/pr_15773/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(iU,"href","/docs/transformers/pr_15773/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(dU,"href","/docs/transformers/pr_15773/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CE,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(CE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CE,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Af,"class","relative group"),d(cU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gU,"href","/docs/transformers/pr_15773/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(AE,"id","transformers.FlaxAutoModelForImageClassification"),d(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(AE,"href","#transformers.FlaxAutoModelForImageClassification"),d(xf,"class","relative group"),d(hU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_U,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uU,"href","/docs/transformers/pr_15773/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(bU,"href","/docs/transformers/pr_15773/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xE,"id","transformers.FlaxAutoModelForVision2Seq"),d(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(xE,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(vU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TU,"href","/docs/transformers/pr_15773/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MU,"href","/docs/transformers/pr_15773/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,Z),b(c,io,u),b(c,ce,u),e(ce,Ce),e(Ce,lo),g(he,lo,null),e(ce,Me),e(ce,Xo),e(Xo,qi),b(c,qf,u),b(c,fa,u),e(fa,Ni),e(fa,ji),e(ji,SC),e(fa,Nf),b(c,xe,u),b(c,co,u),e(co,Di),e(co,On),e(On,RC),e(co,Vn),e(co,Xn),e(Xn,BC),e(co,Gi),e(co,zn),e(zn,PC),e(co,Oi),b(c,jf,u),g(Da,c,u),b(c,fo,u),b(c,ue,u),e(ue,E9),e(ue,Vi),e(Vi,C9),e(ue,w9),b(c,zo,u),b(c,Ga,u),e(Ga,A9),e(Ga,Df),e(Df,y9),e(Ga,rqe),b(c,VRe,u),b(c,Xi,u),e(Xi,Gf),e(Gf,pY),g($C,pY,null),e(Xi,tqe),e(Xi,_Y),e(_Y,aqe),b(c,XRe,u),b(c,Qn,u),e(Qn,nqe),e(Qn,uY),e(uY,sqe),e(Qn,lqe),e(Qn,bY),e(bY,iqe),e(Qn,dqe),b(c,zRe,u),g(IC,c,u),b(c,QRe,u),b(c,L9,u),e(L9,cqe),b(c,WRe,u),g(Of,c,u),b(c,HRe,u),b(c,zi,u),e(zi,Vf),e(Vf,vY),g(qC,vY,null),e(zi,fqe),e(zi,FY),e(FY,mqe),b(c,URe,u),b(c,Qo,u),g(NC,Qo,null),e(Qo,gqe),e(Qo,jC),e(jC,hqe),e(jC,x9),e(x9,pqe),e(jC,_qe),e(Qo,uqe),e(Qo,DC),e(DC,bqe),e(DC,TY),e(TY,vqe),e(DC,Fqe),e(Qo,Tqe),e(Qo,mo),g(GC,mo,null),e(mo,Mqe),e(mo,MY),e(MY,Eqe),e(mo,Cqe),e(mo,Qi),e(Qi,wqe),e(Qi,EY),e(EY,Aqe),e(Qi,yqe),e(Qi,CY),e(CY,Lqe),e(Qi,xqe),e(mo,kqe),e(mo,v),e(v,Xf),e(Xf,wY),e(wY,Sqe),e(Xf,Rqe),e(Xf,k9),e(k9,Bqe),e(Xf,Pqe),e(v,$qe),e(v,zf),e(zf,AY),e(AY,Iqe),e(zf,qqe),e(zf,S9),e(S9,Nqe),e(zf,jqe),e(v,Dqe),e(v,Qf),e(Qf,yY),e(yY,Gqe),e(Qf,Oqe),e(Qf,R9),e(R9,Vqe),e(Qf,Xqe),e(v,zqe),e(v,Wf),e(Wf,LY),e(LY,Qqe),e(Wf,Wqe),e(Wf,B9),e(B9,Hqe),e(Wf,Uqe),e(v,Jqe),e(v,Hf),e(Hf,xY),e(xY,Yqe),e(Hf,Kqe),e(Hf,P9),e(P9,Zqe),e(Hf,eNe),e(v,oNe),e(v,Uf),e(Uf,kY),e(kY,rNe),e(Uf,tNe),e(Uf,$9),e($9,aNe),e(Uf,nNe),e(v,sNe),e(v,Jf),e(Jf,SY),e(SY,lNe),e(Jf,iNe),e(Jf,I9),e(I9,dNe),e(Jf,cNe),e(v,fNe),e(v,Yf),e(Yf,RY),e(RY,mNe),e(Yf,gNe),e(Yf,q9),e(q9,hNe),e(Yf,pNe),e(v,_Ne),e(v,Kf),e(Kf,BY),e(BY,uNe),e(Kf,bNe),e(Kf,N9),e(N9,vNe),e(Kf,FNe),e(v,TNe),e(v,Zf),e(Zf,PY),e(PY,MNe),e(Zf,ENe),e(Zf,j9),e(j9,CNe),e(Zf,wNe),e(v,ANe),e(v,em),e(em,$Y),e($Y,yNe),e(em,LNe),e(em,D9),e(D9,xNe),e(em,kNe),e(v,SNe),e(v,om),e(om,IY),e(IY,RNe),e(om,BNe),e(om,G9),e(G9,PNe),e(om,$Ne),e(v,INe),e(v,rm),e(rm,qY),e(qY,qNe),e(rm,NNe),e(rm,O9),e(O9,jNe),e(rm,DNe),e(v,GNe),e(v,tm),e(tm,NY),e(NY,ONe),e(tm,VNe),e(tm,V9),e(V9,XNe),e(tm,zNe),e(v,QNe),e(v,am),e(am,jY),e(jY,WNe),e(am,HNe),e(am,X9),e(X9,UNe),e(am,JNe),e(v,YNe),e(v,nm),e(nm,DY),e(DY,KNe),e(nm,ZNe),e(nm,z9),e(z9,eje),e(nm,oje),e(v,rje),e(v,sm),e(sm,GY),e(GY,tje),e(sm,aje),e(sm,Q9),e(Q9,nje),e(sm,sje),e(v,lje),e(v,lm),e(lm,OY),e(OY,ije),e(lm,dje),e(lm,W9),e(W9,cje),e(lm,fje),e(v,mje),e(v,im),e(im,VY),e(VY,gje),e(im,hje),e(im,H9),e(H9,pje),e(im,_je),e(v,uje),e(v,dm),e(dm,XY),e(XY,bje),e(dm,vje),e(dm,U9),e(U9,Fje),e(dm,Tje),e(v,Mje),e(v,cm),e(cm,zY),e(zY,Eje),e(cm,Cje),e(cm,J9),e(J9,wje),e(cm,Aje),e(v,yje),e(v,fm),e(fm,QY),e(QY,Lje),e(fm,xje),e(fm,Y9),e(Y9,kje),e(fm,Sje),e(v,Rje),e(v,mm),e(mm,WY),e(WY,Bje),e(mm,Pje),e(mm,K9),e(K9,$je),e(mm,Ije),e(v,qje),e(v,gm),e(gm,HY),e(HY,Nje),e(gm,jje),e(gm,Z9),e(Z9,Dje),e(gm,Gje),e(v,Oje),e(v,hm),e(hm,UY),e(UY,Vje),e(hm,Xje),e(hm,ex),e(ex,zje),e(hm,Qje),e(v,Wje),e(v,pm),e(pm,JY),e(JY,Hje),e(pm,Uje),e(pm,ox),e(ox,Jje),e(pm,Yje),e(v,Kje),e(v,_m),e(_m,YY),e(YY,Zje),e(_m,eDe),e(_m,rx),e(rx,oDe),e(_m,rDe),e(v,tDe),e(v,um),e(um,KY),e(KY,aDe),e(um,nDe),e(um,tx),e(tx,sDe),e(um,lDe),e(v,iDe),e(v,bm),e(bm,ZY),e(ZY,dDe),e(bm,cDe),e(bm,ax),e(ax,fDe),e(bm,mDe),e(v,gDe),e(v,vm),e(vm,eK),e(eK,hDe),e(vm,pDe),e(vm,nx),e(nx,_De),e(vm,uDe),e(v,bDe),e(v,Fm),e(Fm,oK),e(oK,vDe),e(Fm,FDe),e(Fm,sx),e(sx,TDe),e(Fm,MDe),e(v,EDe),e(v,Tm),e(Tm,rK),e(rK,CDe),e(Tm,wDe),e(Tm,lx),e(lx,ADe),e(Tm,yDe),e(v,LDe),e(v,Mm),e(Mm,tK),e(tK,xDe),e(Mm,kDe),e(Mm,ix),e(ix,SDe),e(Mm,RDe),e(v,BDe),e(v,Em),e(Em,aK),e(aK,PDe),e(Em,$De),e(Em,dx),e(dx,IDe),e(Em,qDe),e(v,NDe),e(v,Cm),e(Cm,nK),e(nK,jDe),e(Cm,DDe),e(Cm,cx),e(cx,GDe),e(Cm,ODe),e(v,VDe),e(v,wm),e(wm,sK),e(sK,XDe),e(wm,zDe),e(wm,fx),e(fx,QDe),e(wm,WDe),e(v,HDe),e(v,Am),e(Am,lK),e(lK,UDe),e(Am,JDe),e(Am,mx),e(mx,YDe),e(Am,KDe),e(v,ZDe),e(v,ym),e(ym,iK),e(iK,eGe),e(ym,oGe),e(ym,gx),e(gx,rGe),e(ym,tGe),e(v,aGe),e(v,Lm),e(Lm,dK),e(dK,nGe),e(Lm,sGe),e(Lm,hx),e(hx,lGe),e(Lm,iGe),e(v,dGe),e(v,xm),e(xm,cK),e(cK,cGe),e(xm,fGe),e(xm,px),e(px,mGe),e(xm,gGe),e(v,hGe),e(v,km),e(km,fK),e(fK,pGe),e(km,_Ge),e(km,_x),e(_x,uGe),e(km,bGe),e(v,vGe),e(v,Sm),e(Sm,mK),e(mK,FGe),e(Sm,TGe),e(Sm,ux),e(ux,MGe),e(Sm,EGe),e(v,CGe),e(v,Rm),e(Rm,gK),e(gK,wGe),e(Rm,AGe),e(Rm,bx),e(bx,yGe),e(Rm,LGe),e(v,xGe),e(v,Bm),e(Bm,hK),e(hK,kGe),e(Bm,SGe),e(Bm,vx),e(vx,RGe),e(Bm,BGe),e(v,PGe),e(v,Pm),e(Pm,pK),e(pK,$Ge),e(Pm,IGe),e(Pm,Fx),e(Fx,qGe),e(Pm,NGe),e(v,jGe),e(v,$m),e($m,_K),e(_K,DGe),e($m,GGe),e($m,Tx),e(Tx,OGe),e($m,VGe),e(v,XGe),e(v,Im),e(Im,uK),e(uK,zGe),e(Im,QGe),e(Im,Mx),e(Mx,WGe),e(Im,HGe),e(v,UGe),e(v,qm),e(qm,bK),e(bK,JGe),e(qm,YGe),e(qm,Ex),e(Ex,KGe),e(qm,ZGe),e(v,eOe),e(v,Nm),e(Nm,vK),e(vK,oOe),e(Nm,rOe),e(Nm,Cx),e(Cx,tOe),e(Nm,aOe),e(v,nOe),e(v,jm),e(jm,FK),e(FK,sOe),e(jm,lOe),e(jm,wx),e(wx,iOe),e(jm,dOe),e(v,cOe),e(v,Dm),e(Dm,TK),e(TK,fOe),e(Dm,mOe),e(Dm,Ax),e(Ax,gOe),e(Dm,hOe),e(v,pOe),e(v,Gm),e(Gm,MK),e(MK,_Oe),e(Gm,uOe),e(Gm,yx),e(yx,bOe),e(Gm,vOe),e(v,FOe),e(v,Om),e(Om,EK),e(EK,TOe),e(Om,MOe),e(Om,Lx),e(Lx,EOe),e(Om,COe),e(v,wOe),e(v,Vm),e(Vm,CK),e(CK,AOe),e(Vm,yOe),e(Vm,xx),e(xx,LOe),e(Vm,xOe),e(v,kOe),e(v,Xm),e(Xm,wK),e(wK,SOe),e(Xm,ROe),e(Xm,kx),e(kx,BOe),e(Xm,POe),e(v,$Oe),e(v,zm),e(zm,AK),e(AK,IOe),e(zm,qOe),e(zm,Sx),e(Sx,NOe),e(zm,jOe),e(v,DOe),e(v,Qm),e(Qm,yK),e(yK,GOe),e(Qm,OOe),e(Qm,Rx),e(Rx,VOe),e(Qm,XOe),e(v,zOe),e(v,Wm),e(Wm,LK),e(LK,QOe),e(Wm,WOe),e(Wm,Bx),e(Bx,HOe),e(Wm,UOe),e(v,JOe),e(v,Hm),e(Hm,xK),e(xK,YOe),e(Hm,KOe),e(Hm,Px),e(Px,ZOe),e(Hm,eVe),e(v,oVe),e(v,Um),e(Um,kK),e(kK,rVe),e(Um,tVe),e(Um,$x),e($x,aVe),e(Um,nVe),e(v,sVe),e(v,Jm),e(Jm,SK),e(SK,lVe),e(Jm,iVe),e(Jm,Ix),e(Ix,dVe),e(Jm,cVe),e(v,fVe),e(v,Ym),e(Ym,RK),e(RK,mVe),e(Ym,gVe),e(Ym,qx),e(qx,hVe),e(Ym,pVe),e(v,_Ve),e(v,Km),e(Km,BK),e(BK,uVe),e(Km,bVe),e(Km,Nx),e(Nx,vVe),e(Km,FVe),e(v,TVe),e(v,Zm),e(Zm,PK),e(PK,MVe),e(Zm,EVe),e(Zm,jx),e(jx,CVe),e(Zm,wVe),e(v,AVe),e(v,eg),e(eg,$K),e($K,yVe),e(eg,LVe),e(eg,Dx),e(Dx,xVe),e(eg,kVe),e(v,SVe),e(v,og),e(og,IK),e(IK,RVe),e(og,BVe),e(og,Gx),e(Gx,PVe),e(og,$Ve),e(v,IVe),e(v,rg),e(rg,qK),e(qK,qVe),e(rg,NVe),e(rg,Ox),e(Ox,jVe),e(rg,DVe),e(v,GVe),e(v,tg),e(tg,NK),e(NK,OVe),e(tg,VVe),e(tg,Vx),e(Vx,XVe),e(tg,zVe),e(v,QVe),e(v,ag),e(ag,jK),e(jK,WVe),e(ag,HVe),e(ag,Xx),e(Xx,UVe),e(ag,JVe),e(v,YVe),e(v,ng),e(ng,DK),e(DK,KVe),e(ng,ZVe),e(ng,zx),e(zx,eXe),e(ng,oXe),e(v,rXe),e(v,sg),e(sg,GK),e(GK,tXe),e(sg,aXe),e(sg,Qx),e(Qx,nXe),e(sg,sXe),e(v,lXe),e(v,lg),e(lg,OK),e(OK,iXe),e(lg,dXe),e(lg,Wx),e(Wx,cXe),e(lg,fXe),e(v,mXe),e(v,ig),e(ig,VK),e(VK,gXe),e(ig,hXe),e(ig,Hx),e(Hx,pXe),e(ig,_Xe),e(v,uXe),e(v,dg),e(dg,XK),e(XK,bXe),e(dg,vXe),e(dg,Ux),e(Ux,FXe),e(dg,TXe),e(v,MXe),e(v,cg),e(cg,zK),e(zK,EXe),e(cg,CXe),e(cg,Jx),e(Jx,wXe),e(cg,AXe),e(v,yXe),e(v,fg),e(fg,QK),e(QK,LXe),e(fg,xXe),e(fg,Yx),e(Yx,kXe),e(fg,SXe),e(v,RXe),e(v,mg),e(mg,WK),e(WK,BXe),e(mg,PXe),e(mg,Kx),e(Kx,$Xe),e(mg,IXe),e(v,qXe),e(v,gg),e(gg,HK),e(HK,NXe),e(gg,jXe),e(gg,Zx),e(Zx,DXe),e(gg,GXe),e(v,OXe),e(v,hg),e(hg,UK),e(UK,VXe),e(hg,XXe),e(hg,ek),e(ek,zXe),e(hg,QXe),e(v,WXe),e(v,pg),e(pg,JK),e(JK,HXe),e(pg,UXe),e(pg,ok),e(ok,JXe),e(pg,YXe),e(v,KXe),e(v,_g),e(_g,YK),e(YK,ZXe),e(_g,eze),e(_g,rk),e(rk,oze),e(_g,rze),e(v,tze),e(v,ug),e(ug,KK),e(KK,aze),e(ug,nze),e(ug,tk),e(tk,sze),e(ug,lze),e(v,ize),e(v,bg),e(bg,ZK),e(ZK,dze),e(bg,cze),e(bg,ak),e(ak,fze),e(bg,mze),e(v,gze),e(v,vg),e(vg,eZ),e(eZ,hze),e(vg,pze),e(vg,nk),e(nk,_ze),e(vg,uze),e(v,bze),e(v,Fg),e(Fg,oZ),e(oZ,vze),e(Fg,Fze),e(Fg,sk),e(sk,Tze),e(Fg,Mze),e(v,Eze),e(v,Tg),e(Tg,rZ),e(rZ,Cze),e(Tg,wze),e(Tg,lk),e(lk,Aze),e(Tg,yze),e(v,Lze),e(v,Mg),e(Mg,tZ),e(tZ,xze),e(Mg,kze),e(Mg,ik),e(ik,Sze),e(Mg,Rze),e(v,Bze),e(v,Eg),e(Eg,aZ),e(aZ,Pze),e(Eg,$ze),e(Eg,dk),e(dk,Ize),e(Eg,qze),e(v,Nze),e(v,Cg),e(Cg,nZ),e(nZ,jze),e(Cg,Dze),e(Cg,ck),e(ck,Gze),e(Cg,Oze),e(v,Vze),e(v,wg),e(wg,sZ),e(sZ,Xze),e(wg,zze),e(wg,fk),e(fk,Qze),e(wg,Wze),e(v,Hze),e(v,Ag),e(Ag,lZ),e(lZ,Uze),e(Ag,Jze),e(Ag,mk),e(mk,Yze),e(Ag,Kze),e(v,Zze),e(v,yg),e(yg,iZ),e(iZ,eQe),e(yg,oQe),e(yg,gk),e(gk,rQe),e(yg,tQe),e(v,aQe),e(v,Lg),e(Lg,dZ),e(dZ,nQe),e(Lg,sQe),e(Lg,hk),e(hk,lQe),e(Lg,iQe),e(v,dQe),e(v,xg),e(xg,cZ),e(cZ,cQe),e(xg,fQe),e(xg,pk),e(pk,mQe),e(xg,gQe),e(v,hQe),e(v,kg),e(kg,fZ),e(fZ,pQe),e(kg,_Qe),e(kg,_k),e(_k,uQe),e(kg,bQe),e(v,vQe),e(v,Sg),e(Sg,mZ),e(mZ,FQe),e(Sg,TQe),e(Sg,uk),e(uk,MQe),e(Sg,EQe),e(v,CQe),e(v,Rg),e(Rg,gZ),e(gZ,wQe),e(Rg,AQe),e(Rg,bk),e(bk,yQe),e(Rg,LQe),e(v,xQe),e(v,Bg),e(Bg,hZ),e(hZ,kQe),e(Bg,SQe),e(Bg,vk),e(vk,RQe),e(Bg,BQe),e(v,PQe),e(v,Pg),e(Pg,pZ),e(pZ,$Qe),e(Pg,IQe),e(Pg,Fk),e(Fk,qQe),e(Pg,NQe),e(v,jQe),e(v,$g),e($g,_Z),e(_Z,DQe),e($g,GQe),e($g,Tk),e(Tk,OQe),e($g,VQe),e(v,XQe),e(v,Ig),e(Ig,uZ),e(uZ,zQe),e(Ig,QQe),e(Ig,Mk),e(Mk,WQe),e(Ig,HQe),e(v,UQe),e(v,qg),e(qg,bZ),e(bZ,JQe),e(qg,YQe),e(qg,Ek),e(Ek,KQe),e(qg,ZQe),e(v,eWe),e(v,Ng),e(Ng,vZ),e(vZ,oWe),e(Ng,rWe),e(Ng,Ck),e(Ck,tWe),e(Ng,aWe),e(mo,nWe),e(mo,FZ),e(FZ,sWe),e(mo,lWe),g(OC,mo,null),e(Qo,iWe),e(Qo,jg),g(VC,jg,null),e(jg,dWe),e(jg,TZ),e(TZ,cWe),b(c,JRe,u),b(c,Wi,u),e(Wi,Dg),e(Dg,MZ),g(XC,MZ,null),e(Wi,fWe),e(Wi,EZ),e(EZ,mWe),b(c,YRe,u),b(c,Wo,u),g(zC,Wo,null),e(Wo,gWe),e(Wo,QC),e(QC,hWe),e(QC,wk),e(wk,pWe),e(QC,_We),e(Wo,uWe),e(Wo,WC),e(WC,bWe),e(WC,CZ),e(CZ,vWe),e(WC,FWe),e(Wo,TWe),e(Wo,go),g(HC,go,null),e(go,MWe),e(go,wZ),e(wZ,EWe),e(go,CWe),e(go,Oa),e(Oa,wWe),e(Oa,AZ),e(AZ,AWe),e(Oa,yWe),e(Oa,yZ),e(yZ,LWe),e(Oa,xWe),e(Oa,LZ),e(LZ,kWe),e(Oa,SWe),e(go,RWe),e(go,E),e(E,Wn),e(Wn,xZ),e(xZ,BWe),e(Wn,PWe),e(Wn,Ak),e(Ak,$We),e(Wn,IWe),e(Wn,yk),e(yk,qWe),e(Wn,NWe),e(E,jWe),e(E,Hn),e(Hn,kZ),e(kZ,DWe),e(Hn,GWe),e(Hn,Lk),e(Lk,OWe),e(Hn,VWe),e(Hn,xk),e(xk,XWe),e(Hn,zWe),e(E,QWe),e(E,Un),e(Un,SZ),e(SZ,WWe),e(Un,HWe),e(Un,kk),e(kk,UWe),e(Un,JWe),e(Un,Sk),e(Sk,YWe),e(Un,KWe),e(E,ZWe),e(E,Gg),e(Gg,RZ),e(RZ,eHe),e(Gg,oHe),e(Gg,Rk),e(Rk,rHe),e(Gg,tHe),e(E,aHe),e(E,Jn),e(Jn,BZ),e(BZ,nHe),e(Jn,sHe),e(Jn,Bk),e(Bk,lHe),e(Jn,iHe),e(Jn,Pk),e(Pk,dHe),e(Jn,cHe),e(E,fHe),e(E,Og),e(Og,PZ),e(PZ,mHe),e(Og,gHe),e(Og,$k),e($k,hHe),e(Og,pHe),e(E,_He),e(E,Vg),e(Vg,$Z),e($Z,uHe),e(Vg,bHe),e(Vg,Ik),e(Ik,vHe),e(Vg,FHe),e(E,THe),e(E,Xg),e(Xg,IZ),e(IZ,MHe),e(Xg,EHe),e(Xg,qk),e(qk,CHe),e(Xg,wHe),e(E,AHe),e(E,Yn),e(Yn,qZ),e(qZ,yHe),e(Yn,LHe),e(Yn,Nk),e(Nk,xHe),e(Yn,kHe),e(Yn,jk),e(jk,SHe),e(Yn,RHe),e(E,BHe),e(E,Kn),e(Kn,NZ),e(NZ,PHe),e(Kn,$He),e(Kn,Dk),e(Dk,IHe),e(Kn,qHe),e(Kn,Gk),e(Gk,NHe),e(Kn,jHe),e(E,DHe),e(E,Zn),e(Zn,jZ),e(jZ,GHe),e(Zn,OHe),e(Zn,Ok),e(Ok,VHe),e(Zn,XHe),e(Zn,Vk),e(Vk,zHe),e(Zn,QHe),e(E,WHe),e(E,zg),e(zg,DZ),e(DZ,HHe),e(zg,UHe),e(zg,Xk),e(Xk,JHe),e(zg,YHe),e(E,KHe),e(E,Qg),e(Qg,GZ),e(GZ,ZHe),e(Qg,eUe),e(Qg,zk),e(zk,oUe),e(Qg,rUe),e(E,tUe),e(E,es),e(es,OZ),e(OZ,aUe),e(es,nUe),e(es,Qk),e(Qk,sUe),e(es,lUe),e(es,Wk),e(Wk,iUe),e(es,dUe),e(E,cUe),e(E,Wg),e(Wg,VZ),e(VZ,fUe),e(Wg,mUe),e(Wg,Hk),e(Hk,gUe),e(Wg,hUe),e(E,pUe),e(E,os),e(os,XZ),e(XZ,_Ue),e(os,uUe),e(os,Uk),e(Uk,bUe),e(os,vUe),e(os,Jk),e(Jk,FUe),e(os,TUe),e(E,MUe),e(E,rs),e(rs,zZ),e(zZ,EUe),e(rs,CUe),e(rs,Yk),e(Yk,wUe),e(rs,AUe),e(rs,Kk),e(Kk,yUe),e(rs,LUe),e(E,xUe),e(E,ts),e(ts,QZ),e(QZ,kUe),e(ts,SUe),e(ts,Zk),e(Zk,RUe),e(ts,BUe),e(ts,WZ),e(WZ,PUe),e(ts,$Ue),e(E,IUe),e(E,Hg),e(Hg,HZ),e(HZ,qUe),e(Hg,NUe),e(Hg,eS),e(eS,jUe),e(Hg,DUe),e(E,GUe),e(E,as),e(as,UZ),e(UZ,OUe),e(as,VUe),e(as,oS),e(oS,XUe),e(as,zUe),e(as,rS),e(rS,QUe),e(as,WUe),e(E,HUe),e(E,Ug),e(Ug,JZ),e(JZ,UUe),e(Ug,JUe),e(Ug,tS),e(tS,YUe),e(Ug,KUe),e(E,ZUe),e(E,ns),e(ns,YZ),e(YZ,eJe),e(ns,oJe),e(ns,aS),e(aS,rJe),e(ns,tJe),e(ns,nS),e(nS,aJe),e(ns,nJe),e(E,sJe),e(E,ss),e(ss,KZ),e(KZ,lJe),e(ss,iJe),e(ss,sS),e(sS,dJe),e(ss,cJe),e(ss,lS),e(lS,fJe),e(ss,mJe),e(E,gJe),e(E,ls),e(ls,ZZ),e(ZZ,hJe),e(ls,pJe),e(ls,iS),e(iS,_Je),e(ls,uJe),e(ls,dS),e(dS,bJe),e(ls,vJe),e(E,FJe),e(E,Jg),e(Jg,eee),e(eee,TJe),e(Jg,MJe),e(Jg,cS),e(cS,EJe),e(Jg,CJe),e(E,wJe),e(E,Yg),e(Yg,oee),e(oee,AJe),e(Yg,yJe),e(Yg,fS),e(fS,LJe),e(Yg,xJe),e(E,kJe),e(E,is),e(is,ree),e(ree,SJe),e(is,RJe),e(is,mS),e(mS,BJe),e(is,PJe),e(is,gS),e(gS,$Je),e(is,IJe),e(E,qJe),e(E,Kg),e(Kg,tee),e(tee,NJe),e(Kg,jJe),e(Kg,hS),e(hS,DJe),e(Kg,GJe),e(E,OJe),e(E,ds),e(ds,aee),e(aee,VJe),e(ds,XJe),e(ds,pS),e(pS,zJe),e(ds,QJe),e(ds,_S),e(_S,WJe),e(ds,HJe),e(E,UJe),e(E,cs),e(cs,nee),e(nee,JJe),e(cs,YJe),e(cs,uS),e(uS,KJe),e(cs,ZJe),e(cs,bS),e(bS,eYe),e(cs,oYe),e(E,rYe),e(E,fs),e(fs,see),e(see,tYe),e(fs,aYe),e(fs,vS),e(vS,nYe),e(fs,sYe),e(fs,FS),e(FS,lYe),e(fs,iYe),e(E,dYe),e(E,ms),e(ms,lee),e(lee,cYe),e(ms,fYe),e(ms,TS),e(TS,mYe),e(ms,gYe),e(ms,MS),e(MS,hYe),e(ms,pYe),e(E,_Ye),e(E,Zg),e(Zg,iee),e(iee,uYe),e(Zg,bYe),e(Zg,ES),e(ES,vYe),e(Zg,FYe),e(E,TYe),e(E,gs),e(gs,dee),e(dee,MYe),e(gs,EYe),e(gs,CS),e(CS,CYe),e(gs,wYe),e(gs,wS),e(wS,AYe),e(gs,yYe),e(E,LYe),e(E,hs),e(hs,cee),e(cee,xYe),e(hs,kYe),e(hs,AS),e(AS,SYe),e(hs,RYe),e(hs,yS),e(yS,BYe),e(hs,PYe),e(E,$Ye),e(E,ps),e(ps,fee),e(fee,IYe),e(ps,qYe),e(ps,LS),e(LS,NYe),e(ps,jYe),e(ps,xS),e(xS,DYe),e(ps,GYe),e(E,OYe),e(E,_s),e(_s,mee),e(mee,VYe),e(_s,XYe),e(_s,kS),e(kS,zYe),e(_s,QYe),e(_s,SS),e(SS,WYe),e(_s,HYe),e(E,UYe),e(E,us),e(us,gee),e(gee,JYe),e(us,YYe),e(us,RS),e(RS,KYe),e(us,ZYe),e(us,BS),e(BS,eKe),e(us,oKe),e(E,rKe),e(E,bs),e(bs,hee),e(hee,tKe),e(bs,aKe),e(bs,PS),e(PS,nKe),e(bs,sKe),e(bs,$S),e($S,lKe),e(bs,iKe),e(E,dKe),e(E,eh),e(eh,pee),e(pee,cKe),e(eh,fKe),e(eh,IS),e(IS,mKe),e(eh,gKe),e(E,hKe),e(E,vs),e(vs,_ee),e(_ee,pKe),e(vs,_Ke),e(vs,qS),e(qS,uKe),e(vs,bKe),e(vs,NS),e(NS,vKe),e(vs,FKe),e(E,TKe),e(E,oh),e(oh,uee),e(uee,MKe),e(oh,EKe),e(oh,jS),e(jS,CKe),e(oh,wKe),e(E,AKe),e(E,rh),e(rh,bee),e(bee,yKe),e(rh,LKe),e(rh,DS),e(DS,xKe),e(rh,kKe),e(E,SKe),e(E,Fs),e(Fs,vee),e(vee,RKe),e(Fs,BKe),e(Fs,GS),e(GS,PKe),e(Fs,$Ke),e(Fs,OS),e(OS,IKe),e(Fs,qKe),e(E,NKe),e(E,Ts),e(Ts,Fee),e(Fee,jKe),e(Ts,DKe),e(Ts,VS),e(VS,GKe),e(Ts,OKe),e(Ts,XS),e(XS,VKe),e(Ts,XKe),e(E,zKe),e(E,th),e(th,Tee),e(Tee,QKe),e(th,WKe),e(th,zS),e(zS,HKe),e(th,UKe),e(E,JKe),e(E,Ms),e(Ms,Mee),e(Mee,YKe),e(Ms,KKe),e(Ms,QS),e(QS,ZKe),e(Ms,eZe),e(Ms,WS),e(WS,oZe),e(Ms,rZe),e(E,tZe),e(E,Es),e(Es,Eee),e(Eee,aZe),e(Es,nZe),e(Es,HS),e(HS,sZe),e(Es,lZe),e(Es,US),e(US,iZe),e(Es,dZe),e(E,cZe),e(E,Cs),e(Cs,Cee),e(Cee,fZe),e(Cs,mZe),e(Cs,JS),e(JS,gZe),e(Cs,hZe),e(Cs,YS),e(YS,pZe),e(Cs,_Ze),e(E,uZe),e(E,ws),e(ws,wee),e(wee,bZe),e(ws,vZe),e(ws,KS),e(KS,FZe),e(ws,TZe),e(ws,ZS),e(ZS,MZe),e(ws,EZe),e(E,CZe),e(E,As),e(As,Aee),e(Aee,wZe),e(As,AZe),e(As,eR),e(eR,yZe),e(As,LZe),e(As,oR),e(oR,xZe),e(As,kZe),e(E,SZe),e(E,ah),e(ah,yee),e(yee,RZe),e(ah,BZe),e(ah,rR),e(rR,PZe),e(ah,$Ze),e(E,IZe),e(E,nh),e(nh,Lee),e(Lee,qZe),e(nh,NZe),e(nh,tR),e(tR,jZe),e(nh,DZe),e(E,GZe),e(E,sh),e(sh,xee),e(xee,OZe),e(sh,VZe),e(sh,aR),e(aR,XZe),e(sh,zZe),e(E,QZe),e(E,lh),e(lh,kee),e(kee,WZe),e(lh,HZe),e(lh,nR),e(nR,UZe),e(lh,JZe),e(E,YZe),e(E,ys),e(ys,See),e(See,KZe),e(ys,ZZe),e(ys,sR),e(sR,eeo),e(ys,oeo),e(ys,lR),e(lR,reo),e(ys,teo),e(E,aeo),e(E,ih),e(ih,Ree),e(Ree,neo),e(ih,seo),e(ih,iR),e(iR,leo),e(ih,ieo),e(E,deo),e(E,Ls),e(Ls,Bee),e(Bee,ceo),e(Ls,feo),e(Ls,dR),e(dR,meo),e(Ls,geo),e(Ls,cR),e(cR,heo),e(Ls,peo),e(E,_eo),e(E,xs),e(xs,Pee),e(Pee,ueo),e(xs,beo),e(xs,fR),e(fR,veo),e(xs,Feo),e(xs,mR),e(mR,Teo),e(xs,Meo),e(E,Eeo),e(E,ks),e(ks,$ee),e($ee,Ceo),e(ks,weo),e(ks,gR),e(gR,Aeo),e(ks,yeo),e(ks,hR),e(hR,Leo),e(ks,xeo),e(E,keo),e(E,Ss),e(Ss,Iee),e(Iee,Seo),e(Ss,Reo),e(Ss,pR),e(pR,Beo),e(Ss,Peo),e(Ss,_R),e(_R,$eo),e(Ss,Ieo),e(E,qeo),e(E,Rs),e(Rs,qee),e(qee,Neo),e(Rs,jeo),e(Rs,uR),e(uR,Deo),e(Rs,Geo),e(Rs,bR),e(bR,Oeo),e(Rs,Veo),e(E,Xeo),e(E,Bs),e(Bs,Nee),e(Nee,zeo),e(Bs,Qeo),e(Bs,vR),e(vR,Weo),e(Bs,Heo),e(Bs,FR),e(FR,Ueo),e(Bs,Jeo),e(E,Yeo),e(E,dh),e(dh,jee),e(jee,Keo),e(dh,Zeo),e(dh,TR),e(TR,eoo),e(dh,ooo),e(E,roo),e(E,ch),e(ch,Dee),e(Dee,too),e(ch,aoo),e(ch,MR),e(MR,noo),e(ch,soo),e(E,loo),e(E,Ps),e(Ps,Gee),e(Gee,ioo),e(Ps,doo),e(Ps,ER),e(ER,coo),e(Ps,foo),e(Ps,CR),e(CR,moo),e(Ps,goo),e(E,hoo),e(E,$s),e($s,Oee),e(Oee,poo),e($s,_oo),e($s,wR),e(wR,uoo),e($s,boo),e($s,AR),e(AR,voo),e($s,Foo),e(E,Too),e(E,Is),e(Is,Vee),e(Vee,Moo),e(Is,Eoo),e(Is,yR),e(yR,Coo),e(Is,woo),e(Is,LR),e(LR,Aoo),e(Is,yoo),e(E,Loo),e(E,fh),e(fh,Xee),e(Xee,xoo),e(fh,koo),e(fh,xR),e(xR,Soo),e(fh,Roo),e(E,Boo),e(E,mh),e(mh,zee),e(zee,Poo),e(mh,$oo),e(mh,kR),e(kR,Ioo),e(mh,qoo),e(E,Noo),e(E,gh),e(gh,Qee),e(Qee,joo),e(gh,Doo),e(gh,SR),e(SR,Goo),e(gh,Ooo),e(E,Voo),e(E,hh),e(hh,Wee),e(Wee,Xoo),e(hh,zoo),e(hh,RR),e(RR,Qoo),e(hh,Woo),e(E,Hoo),e(E,ph),e(ph,Hee),e(Hee,Uoo),e(ph,Joo),e(ph,BR),e(BR,Yoo),e(ph,Koo),e(E,Zoo),e(E,qs),e(qs,Uee),e(Uee,ero),e(qs,oro),e(qs,PR),e(PR,rro),e(qs,tro),e(qs,$R),e($R,aro),e(qs,nro),e(E,sro),e(E,_h),e(_h,Jee),e(Jee,lro),e(_h,iro),e(_h,IR),e(IR,dro),e(_h,cro),e(E,fro),e(E,uh),e(uh,Yee),e(Yee,mro),e(uh,gro),e(uh,qR),e(qR,hro),e(uh,pro),e(E,_ro),e(E,Ns),e(Ns,Kee),e(Kee,uro),e(Ns,bro),e(Ns,NR),e(NR,vro),e(Ns,Fro),e(Ns,jR),e(jR,Tro),e(Ns,Mro),e(E,Ero),e(E,js),e(js,Zee),e(Zee,Cro),e(js,wro),e(js,DR),e(DR,Aro),e(js,yro),e(js,GR),e(GR,Lro),e(js,xro),e(go,kro),e(go,eoe),e(eoe,Sro),e(go,Rro),g(UC,go,null),e(Wo,Bro),e(Wo,bh),g(JC,bh,null),e(bh,Pro),e(bh,ooe),e(ooe,$ro),b(c,KRe,u),b(c,Hi,u),e(Hi,vh),e(vh,roe),g(YC,roe,null),e(Hi,Iro),e(Hi,toe),e(toe,qro),b(c,ZRe,u),b(c,Ho,u),g(KC,Ho,null),e(Ho,Nro),e(Ho,ZC),e(ZC,jro),e(ZC,OR),e(OR,Dro),e(ZC,Gro),e(Ho,Oro),e(Ho,ew),e(ew,Vro),e(ew,aoe),e(aoe,Xro),e(ew,zro),e(Ho,Qro),e(Ho,$e),g(ow,$e,null),e($e,Wro),e($e,noe),e(noe,Hro),e($e,Uro),e($e,Va),e(Va,Jro),e(Va,soe),e(soe,Yro),e(Va,Kro),e(Va,loe),e(loe,Zro),e(Va,eto),e(Va,ioe),e(ioe,oto),e(Va,rto),e($e,tto),e($e,ee),e(ee,Fh),e(Fh,doe),e(doe,ato),e(Fh,nto),e(Fh,VR),e(VR,sto),e(Fh,lto),e(ee,ito),e(ee,Th),e(Th,coe),e(coe,dto),e(Th,cto),e(Th,XR),e(XR,fto),e(Th,mto),e(ee,gto),e(ee,Mh),e(Mh,foe),e(foe,hto),e(Mh,pto),e(Mh,zR),e(zR,_to),e(Mh,uto),e(ee,bto),e(ee,Eh),e(Eh,moe),e(moe,vto),e(Eh,Fto),e(Eh,QR),e(QR,Tto),e(Eh,Mto),e(ee,Eto),e(ee,Ch),e(Ch,goe),e(goe,Cto),e(Ch,wto),e(Ch,WR),e(WR,Ato),e(Ch,yto),e(ee,Lto),e(ee,wh),e(wh,hoe),e(hoe,xto),e(wh,kto),e(wh,HR),e(HR,Sto),e(wh,Rto),e(ee,Bto),e(ee,Ah),e(Ah,poe),e(poe,Pto),e(Ah,$to),e(Ah,UR),e(UR,Ito),e(Ah,qto),e(ee,Nto),e(ee,yh),e(yh,_oe),e(_oe,jto),e(yh,Dto),e(yh,JR),e(JR,Gto),e(yh,Oto),e(ee,Vto),e(ee,Lh),e(Lh,uoe),e(uoe,Xto),e(Lh,zto),e(Lh,YR),e(YR,Qto),e(Lh,Wto),e(ee,Hto),e(ee,xh),e(xh,boe),e(boe,Uto),e(xh,Jto),e(xh,KR),e(KR,Yto),e(xh,Kto),e(ee,Zto),e(ee,kh),e(kh,voe),e(voe,eao),e(kh,oao),e(kh,ZR),e(ZR,rao),e(kh,tao),e(ee,aao),e(ee,Sh),e(Sh,Foe),e(Foe,nao),e(Sh,sao),e(Sh,eB),e(eB,lao),e(Sh,iao),e(ee,dao),e(ee,Rh),e(Rh,Toe),e(Toe,cao),e(Rh,fao),e(Rh,oB),e(oB,mao),e(Rh,gao),e(ee,hao),e(ee,Bh),e(Bh,Moe),e(Moe,pao),e(Bh,_ao),e(Bh,rB),e(rB,uao),e(Bh,bao),e(ee,vao),e(ee,Ph),e(Ph,Eoe),e(Eoe,Fao),e(Ph,Tao),e(Ph,tB),e(tB,Mao),e(Ph,Eao),e(ee,Cao),e(ee,$h),e($h,Coe),e(Coe,wao),e($h,Aao),e($h,aB),e(aB,yao),e($h,Lao),e(ee,xao),e(ee,Ih),e(Ih,woe),e(woe,kao),e(Ih,Sao),e(Ih,nB),e(nB,Rao),e(Ih,Bao),e(ee,Pao),e(ee,qh),e(qh,Aoe),e(Aoe,$ao),e(qh,Iao),e(qh,sB),e(sB,qao),e(qh,Nao),e(ee,jao),e(ee,Nh),e(Nh,yoe),e(yoe,Dao),e(Nh,Gao),e(Nh,lB),e(lB,Oao),e(Nh,Vao),e($e,Xao),g(jh,$e,null),e($e,zao),e($e,Loe),e(Loe,Qao),e($e,Wao),g(rw,$e,null),e(Ho,Hao),e(Ho,Dh),g(tw,Dh,null),e(Dh,Uao),e(Dh,xoe),e(xoe,Jao),b(c,eBe,u),b(c,Ui,u),e(Ui,Gh),e(Gh,koe),g(aw,koe,null),e(Ui,Yao),e(Ui,Soe),e(Soe,Kao),b(c,oBe,u),b(c,Uo,u),g(nw,Uo,null),e(Uo,Zao),e(Uo,sw),e(sw,eno),e(sw,iB),e(iB,ono),e(sw,rno),e(Uo,tno),e(Uo,lw),e(lw,ano),e(lw,Roe),e(Roe,nno),e(lw,sno),e(Uo,lno),e(Uo,Ie),g(iw,Ie,null),e(Ie,ino),e(Ie,Boe),e(Boe,dno),e(Ie,cno),e(Ie,Ji),e(Ji,fno),e(Ji,Poe),e(Poe,mno),e(Ji,gno),e(Ji,$oe),e($oe,hno),e(Ji,pno),e(Ie,_no),e(Ie,ke),e(ke,Oh),e(Oh,Ioe),e(Ioe,uno),e(Oh,bno),e(Oh,dB),e(dB,vno),e(Oh,Fno),e(ke,Tno),e(ke,Vh),e(Vh,qoe),e(qoe,Mno),e(Vh,Eno),e(Vh,cB),e(cB,Cno),e(Vh,wno),e(ke,Ano),e(ke,Xh),e(Xh,Noe),e(Noe,yno),e(Xh,Lno),e(Xh,fB),e(fB,xno),e(Xh,kno),e(ke,Sno),e(ke,zh),e(zh,joe),e(joe,Rno),e(zh,Bno),e(zh,mB),e(mB,Pno),e(zh,$no),e(ke,Ino),e(ke,Qh),e(Qh,Doe),e(Doe,qno),e(Qh,Nno),e(Qh,gB),e(gB,jno),e(Qh,Dno),e(ke,Gno),e(ke,Wh),e(Wh,Goe),e(Goe,Ono),e(Wh,Vno),e(Wh,hB),e(hB,Xno),e(Wh,zno),e(ke,Qno),e(ke,Hh),e(Hh,Ooe),e(Ooe,Wno),e(Hh,Hno),e(Hh,pB),e(pB,Uno),e(Hh,Jno),e(ke,Yno),e(ke,Uh),e(Uh,Voe),e(Voe,Kno),e(Uh,Zno),e(Uh,_B),e(_B,eso),e(Uh,oso),e(Ie,rso),g(Jh,Ie,null),e(Ie,tso),e(Ie,Xoe),e(Xoe,aso),e(Ie,nso),g(dw,Ie,null),e(Uo,sso),e(Uo,Yh),g(cw,Yh,null),e(Yh,lso),e(Yh,zoe),e(zoe,iso),b(c,rBe,u),b(c,Yi,u),e(Yi,Kh),e(Kh,Qoe),g(fw,Qoe,null),e(Yi,dso),e(Yi,Woe),e(Woe,cso),b(c,tBe,u),b(c,Jo,u),g(mw,Jo,null),e(Jo,fso),e(Jo,Ki),e(Ki,mso),e(Ki,uB),e(uB,gso),e(Ki,hso),e(Ki,bB),e(bB,pso),e(Ki,_so),e(Jo,uso),e(Jo,gw),e(gw,bso),e(gw,Hoe),e(Hoe,vso),e(gw,Fso),e(Jo,Tso),e(Jo,Xr),g(hw,Xr,null),e(Xr,Mso),e(Xr,Uoe),e(Uoe,Eso),e(Xr,Cso),e(Xr,Zi),e(Zi,wso),e(Zi,Joe),e(Joe,Aso),e(Zi,yso),e(Zi,vB),e(vB,Lso),e(Zi,xso),e(Xr,kso),e(Xr,Yoe),e(Yoe,Sso),e(Xr,Rso),g(pw,Xr,null),e(Jo,Bso),e(Jo,qe),g(_w,qe,null),e(qe,Pso),e(qe,Koe),e(Koe,$so),e(qe,Iso),e(qe,Xa),e(Xa,qso),e(Xa,Zoe),e(Zoe,Nso),e(Xa,jso),e(Xa,ere),e(ere,Dso),e(Xa,Gso),e(Xa,ore),e(ore,Oso),e(Xa,Vso),e(qe,Xso),e(qe,T),e(T,Zh),e(Zh,rre),e(rre,zso),e(Zh,Qso),e(Zh,FB),e(FB,Wso),e(Zh,Hso),e(T,Uso),e(T,ep),e(ep,tre),e(tre,Jso),e(ep,Yso),e(ep,TB),e(TB,Kso),e(ep,Zso),e(T,elo),e(T,op),e(op,are),e(are,olo),e(op,rlo),e(op,MB),e(MB,tlo),e(op,alo),e(T,nlo),e(T,rp),e(rp,nre),e(nre,slo),e(rp,llo),e(rp,EB),e(EB,ilo),e(rp,dlo),e(T,clo),e(T,tp),e(tp,sre),e(sre,flo),e(tp,mlo),e(tp,CB),e(CB,glo),e(tp,hlo),e(T,plo),e(T,ap),e(ap,lre),e(lre,_lo),e(ap,ulo),e(ap,wB),e(wB,blo),e(ap,vlo),e(T,Flo),e(T,np),e(np,ire),e(ire,Tlo),e(np,Mlo),e(np,AB),e(AB,Elo),e(np,Clo),e(T,wlo),e(T,sp),e(sp,dre),e(dre,Alo),e(sp,ylo),e(sp,yB),e(yB,Llo),e(sp,xlo),e(T,klo),e(T,lp),e(lp,cre),e(cre,Slo),e(lp,Rlo),e(lp,LB),e(LB,Blo),e(lp,Plo),e(T,$lo),e(T,ip),e(ip,fre),e(fre,Ilo),e(ip,qlo),e(ip,xB),e(xB,Nlo),e(ip,jlo),e(T,Dlo),e(T,dp),e(dp,mre),e(mre,Glo),e(dp,Olo),e(dp,kB),e(kB,Vlo),e(dp,Xlo),e(T,zlo),e(T,cp),e(cp,gre),e(gre,Qlo),e(cp,Wlo),e(cp,SB),e(SB,Hlo),e(cp,Ulo),e(T,Jlo),e(T,fp),e(fp,hre),e(hre,Ylo),e(fp,Klo),e(fp,RB),e(RB,Zlo),e(fp,eio),e(T,oio),e(T,mp),e(mp,pre),e(pre,rio),e(mp,tio),e(mp,BB),e(BB,aio),e(mp,nio),e(T,sio),e(T,gp),e(gp,_re),e(_re,lio),e(gp,iio),e(gp,PB),e(PB,dio),e(gp,cio),e(T,fio),e(T,hp),e(hp,ure),e(ure,mio),e(hp,gio),e(hp,$B),e($B,hio),e(hp,pio),e(T,_io),e(T,pp),e(pp,bre),e(bre,uio),e(pp,bio),e(pp,IB),e(IB,vio),e(pp,Fio),e(T,Tio),e(T,_p),e(_p,vre),e(vre,Mio),e(_p,Eio),e(_p,qB),e(qB,Cio),e(_p,wio),e(T,Aio),e(T,up),e(up,Fre),e(Fre,yio),e(up,Lio),e(up,NB),e(NB,xio),e(up,kio),e(T,Sio),e(T,bp),e(bp,Tre),e(Tre,Rio),e(bp,Bio),e(bp,jB),e(jB,Pio),e(bp,$io),e(T,Iio),e(T,vp),e(vp,Mre),e(Mre,qio),e(vp,Nio),e(vp,DB),e(DB,jio),e(vp,Dio),e(T,Gio),e(T,Fp),e(Fp,Ere),e(Ere,Oio),e(Fp,Vio),e(Fp,GB),e(GB,Xio),e(Fp,zio),e(T,Qio),e(T,Tp),e(Tp,Cre),e(Cre,Wio),e(Tp,Hio),e(Tp,OB),e(OB,Uio),e(Tp,Jio),e(T,Yio),e(T,Mp),e(Mp,wre),e(wre,Kio),e(Mp,Zio),e(Mp,VB),e(VB,edo),e(Mp,odo),e(T,rdo),e(T,Ep),e(Ep,Are),e(Are,tdo),e(Ep,ado),e(Ep,XB),e(XB,ndo),e(Ep,sdo),e(T,ldo),e(T,Cp),e(Cp,yre),e(yre,ido),e(Cp,ddo),e(Cp,zB),e(zB,cdo),e(Cp,fdo),e(T,mdo),e(T,wp),e(wp,Lre),e(Lre,gdo),e(wp,hdo),e(wp,QB),e(QB,pdo),e(wp,_do),e(T,udo),e(T,Ap),e(Ap,xre),e(xre,bdo),e(Ap,vdo),e(Ap,WB),e(WB,Fdo),e(Ap,Tdo),e(T,Mdo),e(T,yp),e(yp,kre),e(kre,Edo),e(yp,Cdo),e(yp,HB),e(HB,wdo),e(yp,Ado),e(T,ydo),e(T,Lp),e(Lp,Sre),e(Sre,Ldo),e(Lp,xdo),e(Lp,UB),e(UB,kdo),e(Lp,Sdo),e(T,Rdo),e(T,xp),e(xp,Rre),e(Rre,Bdo),e(xp,Pdo),e(xp,JB),e(JB,$do),e(xp,Ido),e(T,qdo),e(T,Ds),e(Ds,Bre),e(Bre,Ndo),e(Ds,jdo),e(Ds,YB),e(YB,Ddo),e(Ds,Gdo),e(Ds,KB),e(KB,Odo),e(Ds,Vdo),e(T,Xdo),e(T,kp),e(kp,Pre),e(Pre,zdo),e(kp,Qdo),e(kp,ZB),e(ZB,Wdo),e(kp,Hdo),e(T,Udo),e(T,Sp),e(Sp,$re),e($re,Jdo),e(Sp,Ydo),e(Sp,eP),e(eP,Kdo),e(Sp,Zdo),e(T,eco),e(T,Rp),e(Rp,Ire),e(Ire,oco),e(Rp,rco),e(Rp,oP),e(oP,tco),e(Rp,aco),e(T,nco),e(T,Bp),e(Bp,qre),e(qre,sco),e(Bp,lco),e(Bp,rP),e(rP,ico),e(Bp,dco),e(T,cco),e(T,Pp),e(Pp,Nre),e(Nre,fco),e(Pp,mco),e(Pp,tP),e(tP,gco),e(Pp,hco),e(T,pco),e(T,$p),e($p,jre),e(jre,_co),e($p,uco),e($p,aP),e(aP,bco),e($p,vco),e(T,Fco),e(T,Ip),e(Ip,Dre),e(Dre,Tco),e(Ip,Mco),e(Ip,nP),e(nP,Eco),e(Ip,Cco),e(T,wco),e(T,qp),e(qp,Gre),e(Gre,Aco),e(qp,yco),e(qp,sP),e(sP,Lco),e(qp,xco),e(T,kco),e(T,Np),e(Np,Ore),e(Ore,Sco),e(Np,Rco),e(Np,lP),e(lP,Bco),e(Np,Pco),e(T,$co),e(T,jp),e(jp,Vre),e(Vre,Ico),e(jp,qco),e(jp,iP),e(iP,Nco),e(jp,jco),e(T,Dco),e(T,Dp),e(Dp,Xre),e(Xre,Gco),e(Dp,Oco),e(Dp,dP),e(dP,Vco),e(Dp,Xco),e(T,zco),e(T,Gp),e(Gp,zre),e(zre,Qco),e(Gp,Wco),e(Gp,cP),e(cP,Hco),e(Gp,Uco),e(T,Jco),e(T,Op),e(Op,Qre),e(Qre,Yco),e(Op,Kco),e(Op,fP),e(fP,Zco),e(Op,efo),e(T,ofo),e(T,Vp),e(Vp,Wre),e(Wre,rfo),e(Vp,tfo),e(Vp,mP),e(mP,afo),e(Vp,nfo),e(T,sfo),e(T,Xp),e(Xp,Hre),e(Hre,lfo),e(Xp,ifo),e(Xp,gP),e(gP,dfo),e(Xp,cfo),e(T,ffo),e(T,zp),e(zp,Ure),e(Ure,mfo),e(zp,gfo),e(zp,hP),e(hP,hfo),e(zp,pfo),e(T,_fo),e(T,Qp),e(Qp,Jre),e(Jre,ufo),e(Qp,bfo),e(Qp,pP),e(pP,vfo),e(Qp,Ffo),e(T,Tfo),e(T,Wp),e(Wp,Yre),e(Yre,Mfo),e(Wp,Efo),e(Wp,_P),e(_P,Cfo),e(Wp,wfo),e(T,Afo),e(T,Hp),e(Hp,Kre),e(Kre,yfo),e(Hp,Lfo),e(Hp,uP),e(uP,xfo),e(Hp,kfo),e(T,Sfo),e(T,Up),e(Up,Zre),e(Zre,Rfo),e(Up,Bfo),e(Up,bP),e(bP,Pfo),e(Up,$fo),e(T,Ifo),e(T,Jp),e(Jp,ete),e(ete,qfo),e(Jp,Nfo),e(Jp,vP),e(vP,jfo),e(Jp,Dfo),e(T,Gfo),e(T,Yp),e(Yp,ote),e(ote,Ofo),e(Yp,Vfo),e(Yp,FP),e(FP,Xfo),e(Yp,zfo),e(T,Qfo),e(T,Kp),e(Kp,rte),e(rte,Wfo),e(Kp,Hfo),e(Kp,TP),e(TP,Ufo),e(Kp,Jfo),e(T,Yfo),e(T,Zp),e(Zp,tte),e(tte,Kfo),e(Zp,Zfo),e(Zp,MP),e(MP,emo),e(Zp,omo),e(T,rmo),e(T,e_),e(e_,ate),e(ate,tmo),e(e_,amo),e(e_,EP),e(EP,nmo),e(e_,smo),e(T,lmo),e(T,o_),e(o_,nte),e(nte,imo),e(o_,dmo),e(o_,CP),e(CP,cmo),e(o_,fmo),e(T,mmo),e(T,r_),e(r_,ste),e(ste,gmo),e(r_,hmo),e(r_,wP),e(wP,pmo),e(r_,_mo),e(T,umo),e(T,t_),e(t_,lte),e(lte,bmo),e(t_,vmo),e(t_,AP),e(AP,Fmo),e(t_,Tmo),e(T,Mmo),e(T,a_),e(a_,ite),e(ite,Emo),e(a_,Cmo),e(a_,yP),e(yP,wmo),e(a_,Amo),e(T,ymo),e(T,n_),e(n_,dte),e(dte,Lmo),e(n_,xmo),e(n_,LP),e(LP,kmo),e(n_,Smo),e(T,Rmo),e(T,s_),e(s_,cte),e(cte,Bmo),e(s_,Pmo),e(s_,xP),e(xP,$mo),e(s_,Imo),e(T,qmo),e(T,l_),e(l_,fte),e(fte,Nmo),e(l_,jmo),e(l_,kP),e(kP,Dmo),e(l_,Gmo),e(T,Omo),e(T,i_),e(i_,mte),e(mte,Vmo),e(i_,Xmo),e(i_,SP),e(SP,zmo),e(i_,Qmo),e(T,Wmo),e(T,d_),e(d_,gte),e(gte,Hmo),e(d_,Umo),e(d_,RP),e(RP,Jmo),e(d_,Ymo),e(T,Kmo),e(T,c_),e(c_,hte),e(hte,Zmo),e(c_,ego),e(c_,BP),e(BP,ogo),e(c_,rgo),e(T,tgo),e(T,f_),e(f_,pte),e(pte,ago),e(f_,ngo),e(f_,PP),e(PP,sgo),e(f_,lgo),e(T,igo),e(T,m_),e(m_,_te),e(_te,dgo),e(m_,cgo),e(m_,$P),e($P,fgo),e(m_,mgo),e(T,ggo),e(T,g_),e(g_,ute),e(ute,hgo),e(g_,pgo),e(g_,IP),e(IP,_go),e(g_,ugo),e(T,bgo),e(T,h_),e(h_,bte),e(bte,vgo),e(h_,Fgo),e(h_,qP),e(qP,Tgo),e(h_,Mgo),e(T,Ego),e(T,p_),e(p_,vte),e(vte,Cgo),e(p_,wgo),e(p_,NP),e(NP,Ago),e(p_,ygo),e(T,Lgo),e(T,__),e(__,Fte),e(Fte,xgo),e(__,kgo),e(__,jP),e(jP,Sgo),e(__,Rgo),e(T,Bgo),e(T,u_),e(u_,Tte),e(Tte,Pgo),e(u_,$go),e(u_,DP),e(DP,Igo),e(u_,qgo),e(T,Ngo),e(T,b_),e(b_,Mte),e(Mte,jgo),e(b_,Dgo),e(b_,GP),e(GP,Ggo),e(b_,Ogo),e(T,Vgo),e(T,v_),e(v_,Ete),e(Ete,Xgo),e(v_,zgo),e(v_,OP),e(OP,Qgo),e(v_,Wgo),e(T,Hgo),e(T,F_),e(F_,Cte),e(Cte,Ugo),e(F_,Jgo),e(F_,VP),e(VP,Ygo),e(F_,Kgo),e(T,Zgo),e(T,T_),e(T_,wte),e(wte,eho),e(T_,oho),e(T_,XP),e(XP,rho),e(T_,tho),e(T,aho),e(T,M_),e(M_,Ate),e(Ate,nho),e(M_,sho),e(M_,zP),e(zP,lho),e(M_,iho),e(T,dho),e(T,E_),e(E_,yte),e(yte,cho),e(E_,fho),e(E_,QP),e(QP,mho),e(E_,gho),e(T,hho),e(T,C_),e(C_,Lte),e(Lte,pho),e(C_,_ho),e(C_,WP),e(WP,uho),e(C_,bho),e(T,vho),e(T,w_),e(w_,xte),e(xte,Fho),e(w_,Tho),e(w_,HP),e(HP,Mho),e(w_,Eho),e(T,Cho),e(T,A_),e(A_,kte),e(kte,who),e(A_,Aho),e(A_,UP),e(UP,yho),e(A_,Lho),e(T,xho),e(T,y_),e(y_,Ste),e(Ste,kho),e(y_,Sho),e(y_,JP),e(JP,Rho),e(y_,Bho),e(T,Pho),e(T,L_),e(L_,Rte),e(Rte,$ho),e(L_,Iho),e(L_,YP),e(YP,qho),e(L_,Nho),e(T,jho),e(T,x_),e(x_,Bte),e(Bte,Dho),e(x_,Gho),e(x_,KP),e(KP,Oho),e(x_,Vho),e(T,Xho),e(T,k_),e(k_,Pte),e(Pte,zho),e(k_,Qho),e(k_,ZP),e(ZP,Who),e(k_,Hho),e(T,Uho),e(T,S_),e(S_,$te),e($te,Jho),e(S_,Yho),e(S_,e$),e(e$,Kho),e(S_,Zho),e(T,epo),e(T,R_),e(R_,Ite),e(Ite,opo),e(R_,rpo),e(R_,o$),e(o$,tpo),e(R_,apo),e(T,npo),e(T,B_),e(B_,qte),e(qte,spo),e(B_,lpo),e(B_,r$),e(r$,ipo),e(B_,dpo),e(T,cpo),e(T,P_),e(P_,Nte),e(Nte,fpo),e(P_,mpo),e(P_,t$),e(t$,gpo),e(P_,hpo),e(T,ppo),e(T,$_),e($_,jte),e(jte,_po),e($_,upo),e($_,a$),e(a$,bpo),e($_,vpo),e(T,Fpo),e(T,I_),e(I_,Dte),e(Dte,Tpo),e(I_,Mpo),e(I_,n$),e(n$,Epo),e(I_,Cpo),e(T,wpo),e(T,q_),e(q_,Gte),e(Gte,Apo),e(q_,ypo),e(q_,s$),e(s$,Lpo),e(q_,xpo),e(T,kpo),e(T,N_),e(N_,Ote),e(Ote,Spo),e(N_,Rpo),e(N_,l$),e(l$,Bpo),e(N_,Ppo),e(qe,$po),e(qe,j_),e(j_,Ipo),e(j_,Vte),e(Vte,qpo),e(j_,Npo),e(j_,Xte),e(Xte,jpo),e(qe,Dpo),e(qe,zte),e(zte,Gpo),e(qe,Opo),g(uw,qe,null),b(c,aBe,u),b(c,ed,u),e(ed,D_),e(D_,Qte),g(bw,Qte,null),e(ed,Vpo),e(ed,Wte),e(Wte,Xpo),b(c,nBe,u),b(c,Yo,u),g(vw,Yo,null),e(Yo,zpo),e(Yo,od),e(od,Qpo),e(od,i$),e(i$,Wpo),e(od,Hpo),e(od,d$),e(d$,Upo),e(od,Jpo),e(Yo,Ypo),e(Yo,Fw),e(Fw,Kpo),e(Fw,Hte),e(Hte,Zpo),e(Fw,e_o),e(Yo,o_o),e(Yo,zr),g(Tw,zr,null),e(zr,r_o),e(zr,Ute),e(Ute,t_o),e(zr,a_o),e(zr,rd),e(rd,n_o),e(rd,Jte),e(Jte,s_o),e(rd,l_o),e(rd,c$),e(c$,i_o),e(rd,d_o),e(zr,c_o),e(zr,Yte),e(Yte,f_o),e(zr,m_o),g(Mw,zr,null),e(Yo,g_o),e(Yo,Ne),g(Ew,Ne,null),e(Ne,h_o),e(Ne,Kte),e(Kte,p_o),e(Ne,__o),e(Ne,za),e(za,u_o),e(za,Zte),e(Zte,b_o),e(za,v_o),e(za,eae),e(eae,F_o),e(za,T_o),e(za,oae),e(oae,M_o),e(za,E_o),e(Ne,C_o),e(Ne,S),e(S,G_),e(G_,rae),e(rae,w_o),e(G_,A_o),e(G_,f$),e(f$,y_o),e(G_,L_o),e(S,x_o),e(S,O_),e(O_,tae),e(tae,k_o),e(O_,S_o),e(O_,m$),e(m$,R_o),e(O_,B_o),e(S,P_o),e(S,V_),e(V_,aae),e(aae,$_o),e(V_,I_o),e(V_,g$),e(g$,q_o),e(V_,N_o),e(S,j_o),e(S,X_),e(X_,nae),e(nae,D_o),e(X_,G_o),e(X_,h$),e(h$,O_o),e(X_,V_o),e(S,X_o),e(S,z_),e(z_,sae),e(sae,z_o),e(z_,Q_o),e(z_,p$),e(p$,W_o),e(z_,H_o),e(S,U_o),e(S,Q_),e(Q_,lae),e(lae,J_o),e(Q_,Y_o),e(Q_,_$),e(_$,K_o),e(Q_,Z_o),e(S,euo),e(S,W_),e(W_,iae),e(iae,ouo),e(W_,ruo),e(W_,u$),e(u$,tuo),e(W_,auo),e(S,nuo),e(S,H_),e(H_,dae),e(dae,suo),e(H_,luo),e(H_,b$),e(b$,iuo),e(H_,duo),e(S,cuo),e(S,U_),e(U_,cae),e(cae,fuo),e(U_,muo),e(U_,v$),e(v$,guo),e(U_,huo),e(S,puo),e(S,J_),e(J_,fae),e(fae,_uo),e(J_,uuo),e(J_,F$),e(F$,buo),e(J_,vuo),e(S,Fuo),e(S,Y_),e(Y_,mae),e(mae,Tuo),e(Y_,Muo),e(Y_,T$),e(T$,Euo),e(Y_,Cuo),e(S,wuo),e(S,K_),e(K_,gae),e(gae,Auo),e(K_,yuo),e(K_,M$),e(M$,Luo),e(K_,xuo),e(S,kuo),e(S,Z_),e(Z_,hae),e(hae,Suo),e(Z_,Ruo),e(Z_,E$),e(E$,Buo),e(Z_,Puo),e(S,$uo),e(S,eu),e(eu,pae),e(pae,Iuo),e(eu,quo),e(eu,C$),e(C$,Nuo),e(eu,juo),e(S,Duo),e(S,ou),e(ou,_ae),e(_ae,Guo),e(ou,Ouo),e(ou,w$),e(w$,Vuo),e(ou,Xuo),e(S,zuo),e(S,ru),e(ru,uae),e(uae,Quo),e(ru,Wuo),e(ru,A$),e(A$,Huo),e(ru,Uuo),e(S,Juo),e(S,tu),e(tu,bae),e(bae,Yuo),e(tu,Kuo),e(tu,y$),e(y$,Zuo),e(tu,e1o),e(S,o1o),e(S,au),e(au,vae),e(vae,r1o),e(au,t1o),e(au,L$),e(L$,a1o),e(au,n1o),e(S,s1o),e(S,nu),e(nu,Fae),e(Fae,l1o),e(nu,i1o),e(nu,x$),e(x$,d1o),e(nu,c1o),e(S,f1o),e(S,su),e(su,Tae),e(Tae,m1o),e(su,g1o),e(su,k$),e(k$,h1o),e(su,p1o),e(S,_1o),e(S,lu),e(lu,Mae),e(Mae,u1o),e(lu,b1o),e(lu,S$),e(S$,v1o),e(lu,F1o),e(S,T1o),e(S,iu),e(iu,Eae),e(Eae,M1o),e(iu,E1o),e(iu,R$),e(R$,C1o),e(iu,w1o),e(S,A1o),e(S,du),e(du,Cae),e(Cae,y1o),e(du,L1o),e(du,B$),e(B$,x1o),e(du,k1o),e(S,S1o),e(S,cu),e(cu,wae),e(wae,R1o),e(cu,B1o),e(cu,P$),e(P$,P1o),e(cu,$1o),e(S,I1o),e(S,fu),e(fu,Aae),e(Aae,q1o),e(fu,N1o),e(fu,$$),e($$,j1o),e(fu,D1o),e(S,G1o),e(S,mu),e(mu,yae),e(yae,O1o),e(mu,V1o),e(mu,I$),e(I$,X1o),e(mu,z1o),e(S,Q1o),e(S,gu),e(gu,Lae),e(Lae,W1o),e(gu,H1o),e(gu,q$),e(q$,U1o),e(gu,J1o),e(S,Y1o),e(S,hu),e(hu,xae),e(xae,K1o),e(hu,Z1o),e(hu,N$),e(N$,e7o),e(hu,o7o),e(S,r7o),e(S,pu),e(pu,kae),e(kae,t7o),e(pu,a7o),e(pu,j$),e(j$,n7o),e(pu,s7o),e(S,l7o),e(S,_u),e(_u,Sae),e(Sae,i7o),e(_u,d7o),e(_u,D$),e(D$,c7o),e(_u,f7o),e(S,m7o),e(S,uu),e(uu,Rae),e(Rae,g7o),e(uu,h7o),e(uu,G$),e(G$,p7o),e(uu,_7o),e(S,u7o),e(S,bu),e(bu,Bae),e(Bae,b7o),e(bu,v7o),e(bu,O$),e(O$,F7o),e(bu,T7o),e(S,M7o),e(S,vu),e(vu,Pae),e(Pae,E7o),e(vu,C7o),e(vu,V$),e(V$,w7o),e(vu,A7o),e(S,y7o),e(S,Fu),e(Fu,$ae),e($ae,L7o),e(Fu,x7o),e(Fu,X$),e(X$,k7o),e(Fu,S7o),e(S,R7o),e(S,Tu),e(Tu,Iae),e(Iae,B7o),e(Tu,P7o),e(Tu,z$),e(z$,$7o),e(Tu,I7o),e(S,q7o),e(S,Mu),e(Mu,qae),e(qae,N7o),e(Mu,j7o),e(Mu,Q$),e(Q$,D7o),e(Mu,G7o),e(S,O7o),e(S,Eu),e(Eu,Nae),e(Nae,V7o),e(Eu,X7o),e(Eu,W$),e(W$,z7o),e(Eu,Q7o),e(S,W7o),e(S,Cu),e(Cu,jae),e(jae,H7o),e(Cu,U7o),e(Cu,H$),e(H$,J7o),e(Cu,Y7o),e(S,K7o),e(S,wu),e(wu,Dae),e(Dae,Z7o),e(wu,ebo),e(wu,U$),e(U$,obo),e(wu,rbo),e(Ne,tbo),e(Ne,Au),e(Au,abo),e(Au,Gae),e(Gae,nbo),e(Au,sbo),e(Au,Oae),e(Oae,lbo),e(Ne,ibo),e(Ne,Vae),e(Vae,dbo),e(Ne,cbo),g(Cw,Ne,null),b(c,sBe,u),b(c,td,u),e(td,yu),e(yu,Xae),g(ww,Xae,null),e(td,fbo),e(td,zae),e(zae,mbo),b(c,lBe,u),b(c,Ko,u),g(Aw,Ko,null),e(Ko,gbo),e(Ko,ad),e(ad,hbo),e(ad,J$),e(J$,pbo),e(ad,_bo),e(ad,Y$),e(Y$,ubo),e(ad,bbo),e(Ko,vbo),e(Ko,yw),e(yw,Fbo),e(yw,Qae),e(Qae,Tbo),e(yw,Mbo),e(Ko,Ebo),e(Ko,Qr),g(Lw,Qr,null),e(Qr,Cbo),e(Qr,Wae),e(Wae,wbo),e(Qr,Abo),e(Qr,nd),e(nd,ybo),e(nd,Hae),e(Hae,Lbo),e(nd,xbo),e(nd,K$),e(K$,kbo),e(nd,Sbo),e(Qr,Rbo),e(Qr,Uae),e(Uae,Bbo),e(Qr,Pbo),g(xw,Qr,null),e(Ko,$bo),e(Ko,je),g(kw,je,null),e(je,Ibo),e(je,Jae),e(Jae,qbo),e(je,Nbo),e(je,Qa),e(Qa,jbo),e(Qa,Yae),e(Yae,Dbo),e(Qa,Gbo),e(Qa,Kae),e(Kae,Obo),e(Qa,Vbo),e(Qa,Zae),e(Zae,Xbo),e(Qa,zbo),e(je,Qbo),e(je,$),e($,Lu),e(Lu,ene),e(ene,Wbo),e(Lu,Hbo),e(Lu,Z$),e(Z$,Ubo),e(Lu,Jbo),e($,Ybo),e($,xu),e(xu,one),e(one,Kbo),e(xu,Zbo),e(xu,eI),e(eI,e2o),e(xu,o2o),e($,r2o),e($,ku),e(ku,rne),e(rne,t2o),e(ku,a2o),e(ku,oI),e(oI,n2o),e(ku,s2o),e($,l2o),e($,Su),e(Su,tne),e(tne,i2o),e(Su,d2o),e(Su,rI),e(rI,c2o),e(Su,f2o),e($,m2o),e($,Ru),e(Ru,ane),e(ane,g2o),e(Ru,h2o),e(Ru,tI),e(tI,p2o),e(Ru,_2o),e($,u2o),e($,Bu),e(Bu,nne),e(nne,b2o),e(Bu,v2o),e(Bu,aI),e(aI,F2o),e(Bu,T2o),e($,M2o),e($,Pu),e(Pu,sne),e(sne,E2o),e(Pu,C2o),e(Pu,nI),e(nI,w2o),e(Pu,A2o),e($,y2o),e($,$u),e($u,lne),e(lne,L2o),e($u,x2o),e($u,sI),e(sI,k2o),e($u,S2o),e($,R2o),e($,Iu),e(Iu,ine),e(ine,B2o),e(Iu,P2o),e(Iu,lI),e(lI,$2o),e(Iu,I2o),e($,q2o),e($,qu),e(qu,dne),e(dne,N2o),e(qu,j2o),e(qu,iI),e(iI,D2o),e(qu,G2o),e($,O2o),e($,Nu),e(Nu,cne),e(cne,V2o),e(Nu,X2o),e(Nu,dI),e(dI,z2o),e(Nu,Q2o),e($,W2o),e($,ju),e(ju,fne),e(fne,H2o),e(ju,U2o),e(ju,cI),e(cI,J2o),e(ju,Y2o),e($,K2o),e($,Du),e(Du,mne),e(mne,Z2o),e(Du,e5o),e(Du,fI),e(fI,o5o),e(Du,r5o),e($,t5o),e($,Gu),e(Gu,gne),e(gne,a5o),e(Gu,n5o),e(Gu,mI),e(mI,s5o),e(Gu,l5o),e($,i5o),e($,Ou),e(Ou,hne),e(hne,d5o),e(Ou,c5o),e(Ou,gI),e(gI,f5o),e(Ou,m5o),e($,g5o),e($,Vu),e(Vu,pne),e(pne,h5o),e(Vu,p5o),e(Vu,hI),e(hI,_5o),e(Vu,u5o),e($,b5o),e($,Xu),e(Xu,_ne),e(_ne,v5o),e(Xu,F5o),e(Xu,pI),e(pI,T5o),e(Xu,M5o),e($,E5o),e($,zu),e(zu,une),e(une,C5o),e(zu,w5o),e(zu,_I),e(_I,A5o),e(zu,y5o),e($,L5o),e($,Qu),e(Qu,bne),e(bne,x5o),e(Qu,k5o),e(Qu,uI),e(uI,S5o),e(Qu,R5o),e($,B5o),e($,Wu),e(Wu,vne),e(vne,P5o),e(Wu,$5o),e(Wu,bI),e(bI,I5o),e(Wu,q5o),e($,N5o),e($,Hu),e(Hu,Fne),e(Fne,j5o),e(Hu,D5o),e(Hu,vI),e(vI,G5o),e(Hu,O5o),e($,V5o),e($,Uu),e(Uu,Tne),e(Tne,X5o),e(Uu,z5o),e(Uu,FI),e(FI,Q5o),e(Uu,W5o),e($,H5o),e($,Ju),e(Ju,Mne),e(Mne,U5o),e(Ju,J5o),e(Ju,TI),e(TI,Y5o),e(Ju,K5o),e($,Z5o),e($,Yu),e(Yu,Ene),e(Ene,e3o),e(Yu,o3o),e(Yu,MI),e(MI,r3o),e(Yu,t3o),e($,a3o),e($,Ku),e(Ku,Cne),e(Cne,n3o),e(Ku,s3o),e(Ku,EI),e(EI,l3o),e(Ku,i3o),e($,d3o),e($,Zu),e(Zu,wne),e(wne,c3o),e(Zu,f3o),e(Zu,CI),e(CI,m3o),e(Zu,g3o),e($,h3o),e($,e1),e(e1,Ane),e(Ane,p3o),e(e1,_3o),e(e1,wI),e(wI,u3o),e(e1,b3o),e($,v3o),e($,o1),e(o1,yne),e(yne,F3o),e(o1,T3o),e(o1,AI),e(AI,M3o),e(o1,E3o),e($,C3o),e($,r1),e(r1,Lne),e(Lne,w3o),e(r1,A3o),e(r1,yI),e(yI,y3o),e(r1,L3o),e($,x3o),e($,t1),e(t1,xne),e(xne,k3o),e(t1,S3o),e(t1,LI),e(LI,R3o),e(t1,B3o),e($,P3o),e($,a1),e(a1,kne),e(kne,$3o),e(a1,I3o),e(a1,xI),e(xI,q3o),e(a1,N3o),e($,j3o),e($,n1),e(n1,Sne),e(Sne,D3o),e(n1,G3o),e(n1,kI),e(kI,O3o),e(n1,V3o),e($,X3o),e($,s1),e(s1,Rne),e(Rne,z3o),e(s1,Q3o),e(s1,SI),e(SI,W3o),e(s1,H3o),e($,U3o),e($,l1),e(l1,Bne),e(Bne,J3o),e(l1,Y3o),e(l1,RI),e(RI,K3o),e(l1,Z3o),e($,evo),e($,i1),e(i1,Pne),e(Pne,ovo),e(i1,rvo),e(i1,BI),e(BI,tvo),e(i1,avo),e(je,nvo),e(je,d1),e(d1,svo),e(d1,$ne),e($ne,lvo),e(d1,ivo),e(d1,Ine),e(Ine,dvo),e(je,cvo),e(je,qne),e(qne,fvo),e(je,mvo),g(Sw,je,null),b(c,iBe,u),b(c,sd,u),e(sd,c1),e(c1,Nne),g(Rw,Nne,null),e(sd,gvo),e(sd,jne),e(jne,hvo),b(c,dBe,u),b(c,Zo,u),g(Bw,Zo,null),e(Zo,pvo),e(Zo,ld),e(ld,_vo),e(ld,PI),e(PI,uvo),e(ld,bvo),e(ld,$I),e($I,vvo),e(ld,Fvo),e(Zo,Tvo),e(Zo,Pw),e(Pw,Mvo),e(Pw,Dne),e(Dne,Evo),e(Pw,Cvo),e(Zo,wvo),e(Zo,Wr),g($w,Wr,null),e(Wr,Avo),e(Wr,Gne),e(Gne,yvo),e(Wr,Lvo),e(Wr,id),e(id,xvo),e(id,One),e(One,kvo),e(id,Svo),e(id,II),e(II,Rvo),e(id,Bvo),e(Wr,Pvo),e(Wr,Vne),e(Vne,$vo),e(Wr,Ivo),g(Iw,Wr,null),e(Zo,qvo),e(Zo,De),g(qw,De,null),e(De,Nvo),e(De,Xne),e(Xne,jvo),e(De,Dvo),e(De,Wa),e(Wa,Gvo),e(Wa,zne),e(zne,Ovo),e(Wa,Vvo),e(Wa,Qne),e(Qne,Xvo),e(Wa,zvo),e(Wa,Wne),e(Wne,Qvo),e(Wa,Wvo),e(De,Hvo),e(De,I),e(I,f1),e(f1,Hne),e(Hne,Uvo),e(f1,Jvo),e(f1,qI),e(qI,Yvo),e(f1,Kvo),e(I,Zvo),e(I,m1),e(m1,Une),e(Une,eFo),e(m1,oFo),e(m1,NI),e(NI,rFo),e(m1,tFo),e(I,aFo),e(I,g1),e(g1,Jne),e(Jne,nFo),e(g1,sFo),e(g1,jI),e(jI,lFo),e(g1,iFo),e(I,dFo),e(I,h1),e(h1,Yne),e(Yne,cFo),e(h1,fFo),e(h1,DI),e(DI,mFo),e(h1,gFo),e(I,hFo),e(I,p1),e(p1,Kne),e(Kne,pFo),e(p1,_Fo),e(p1,GI),e(GI,uFo),e(p1,bFo),e(I,vFo),e(I,_1),e(_1,Zne),e(Zne,FFo),e(_1,TFo),e(_1,OI),e(OI,MFo),e(_1,EFo),e(I,CFo),e(I,u1),e(u1,ese),e(ese,wFo),e(u1,AFo),e(u1,VI),e(VI,yFo),e(u1,LFo),e(I,xFo),e(I,b1),e(b1,ose),e(ose,kFo),e(b1,SFo),e(b1,XI),e(XI,RFo),e(b1,BFo),e(I,PFo),e(I,v1),e(v1,rse),e(rse,$Fo),e(v1,IFo),e(v1,zI),e(zI,qFo),e(v1,NFo),e(I,jFo),e(I,F1),e(F1,tse),e(tse,DFo),e(F1,GFo),e(F1,QI),e(QI,OFo),e(F1,VFo),e(I,XFo),e(I,T1),e(T1,ase),e(ase,zFo),e(T1,QFo),e(T1,WI),e(WI,WFo),e(T1,HFo),e(I,UFo),e(I,M1),e(M1,nse),e(nse,JFo),e(M1,YFo),e(M1,HI),e(HI,KFo),e(M1,ZFo),e(I,eTo),e(I,E1),e(E1,sse),e(sse,oTo),e(E1,rTo),e(E1,UI),e(UI,tTo),e(E1,aTo),e(I,nTo),e(I,C1),e(C1,lse),e(lse,sTo),e(C1,lTo),e(C1,JI),e(JI,iTo),e(C1,dTo),e(I,cTo),e(I,w1),e(w1,ise),e(ise,fTo),e(w1,mTo),e(w1,YI),e(YI,gTo),e(w1,hTo),e(I,pTo),e(I,A1),e(A1,dse),e(dse,_To),e(A1,uTo),e(A1,KI),e(KI,bTo),e(A1,vTo),e(I,FTo),e(I,y1),e(y1,cse),e(cse,TTo),e(y1,MTo),e(y1,ZI),e(ZI,ETo),e(y1,CTo),e(I,wTo),e(I,L1),e(L1,fse),e(fse,ATo),e(L1,yTo),e(L1,eq),e(eq,LTo),e(L1,xTo),e(I,kTo),e(I,x1),e(x1,mse),e(mse,STo),e(x1,RTo),e(x1,oq),e(oq,BTo),e(x1,PTo),e(I,$To),e(I,k1),e(k1,gse),e(gse,ITo),e(k1,qTo),e(k1,rq),e(rq,NTo),e(k1,jTo),e(I,DTo),e(I,S1),e(S1,hse),e(hse,GTo),e(S1,OTo),e(S1,tq),e(tq,VTo),e(S1,XTo),e(I,zTo),e(I,R1),e(R1,pse),e(pse,QTo),e(R1,WTo),e(R1,aq),e(aq,HTo),e(R1,UTo),e(I,JTo),e(I,B1),e(B1,_se),e(_se,YTo),e(B1,KTo),e(B1,nq),e(nq,ZTo),e(B1,eMo),e(I,oMo),e(I,P1),e(P1,use),e(use,rMo),e(P1,tMo),e(P1,sq),e(sq,aMo),e(P1,nMo),e(I,sMo),e(I,$1),e($1,bse),e(bse,lMo),e($1,iMo),e($1,lq),e(lq,dMo),e($1,cMo),e(I,fMo),e(I,I1),e(I1,vse),e(vse,mMo),e(I1,gMo),e(I1,iq),e(iq,hMo),e(I1,pMo),e(I,_Mo),e(I,q1),e(q1,Fse),e(Fse,uMo),e(q1,bMo),e(q1,dq),e(dq,vMo),e(q1,FMo),e(I,TMo),e(I,N1),e(N1,Tse),e(Tse,MMo),e(N1,EMo),e(N1,cq),e(cq,CMo),e(N1,wMo),e(I,AMo),e(I,j1),e(j1,Mse),e(Mse,yMo),e(j1,LMo),e(j1,fq),e(fq,xMo),e(j1,kMo),e(I,SMo),e(I,D1),e(D1,Ese),e(Ese,RMo),e(D1,BMo),e(D1,mq),e(mq,PMo),e(D1,$Mo),e(I,IMo),e(I,G1),e(G1,Cse),e(Cse,qMo),e(G1,NMo),e(G1,wse),e(wse,jMo),e(G1,DMo),e(I,GMo),e(I,O1),e(O1,Ase),e(Ase,OMo),e(O1,VMo),e(O1,gq),e(gq,XMo),e(O1,zMo),e(I,QMo),e(I,V1),e(V1,yse),e(yse,WMo),e(V1,HMo),e(V1,hq),e(hq,UMo),e(V1,JMo),e(I,YMo),e(I,X1),e(X1,Lse),e(Lse,KMo),e(X1,ZMo),e(X1,pq),e(pq,e4o),e(X1,o4o),e(I,r4o),e(I,z1),e(z1,xse),e(xse,t4o),e(z1,a4o),e(z1,_q),e(_q,n4o),e(z1,s4o),e(De,l4o),e(De,Q1),e(Q1,i4o),e(Q1,kse),e(kse,d4o),e(Q1,c4o),e(Q1,Sse),e(Sse,f4o),e(De,m4o),e(De,Rse),e(Rse,g4o),e(De,h4o),g(Nw,De,null),b(c,cBe,u),b(c,dd,u),e(dd,W1),e(W1,Bse),g(jw,Bse,null),e(dd,p4o),e(dd,Pse),e(Pse,_4o),b(c,fBe,u),b(c,er,u),g(Dw,er,null),e(er,u4o),e(er,cd),e(cd,b4o),e(cd,uq),e(uq,v4o),e(cd,F4o),e(cd,bq),e(bq,T4o),e(cd,M4o),e(er,E4o),e(er,Gw),e(Gw,C4o),e(Gw,$se),e($se,w4o),e(Gw,A4o),e(er,y4o),e(er,Hr),g(Ow,Hr,null),e(Hr,L4o),e(Hr,Ise),e(Ise,x4o),e(Hr,k4o),e(Hr,fd),e(fd,S4o),e(fd,qse),e(qse,R4o),e(fd,B4o),e(fd,vq),e(vq,P4o),e(fd,$4o),e(Hr,I4o),e(Hr,Nse),e(Nse,q4o),e(Hr,N4o),g(Vw,Hr,null),e(er,j4o),e(er,Ge),g(Xw,Ge,null),e(Ge,D4o),e(Ge,jse),e(jse,G4o),e(Ge,O4o),e(Ge,Ha),e(Ha,V4o),e(Ha,Dse),e(Dse,X4o),e(Ha,z4o),e(Ha,Gse),e(Gse,Q4o),e(Ha,W4o),e(Ha,Ose),e(Ose,H4o),e(Ha,U4o),e(Ge,J4o),e(Ge,ne),e(ne,H1),e(H1,Vse),e(Vse,Y4o),e(H1,K4o),e(H1,Fq),e(Fq,Z4o),e(H1,eEo),e(ne,oEo),e(ne,U1),e(U1,Xse),e(Xse,rEo),e(U1,tEo),e(U1,Tq),e(Tq,aEo),e(U1,nEo),e(ne,sEo),e(ne,J1),e(J1,zse),e(zse,lEo),e(J1,iEo),e(J1,Mq),e(Mq,dEo),e(J1,cEo),e(ne,fEo),e(ne,Y1),e(Y1,Qse),e(Qse,mEo),e(Y1,gEo),e(Y1,Eq),e(Eq,hEo),e(Y1,pEo),e(ne,_Eo),e(ne,K1),e(K1,Wse),e(Wse,uEo),e(K1,bEo),e(K1,Cq),e(Cq,vEo),e(K1,FEo),e(ne,TEo),e(ne,Z1),e(Z1,Hse),e(Hse,MEo),e(Z1,EEo),e(Z1,wq),e(wq,CEo),e(Z1,wEo),e(ne,AEo),e(ne,e7),e(e7,Use),e(Use,yEo),e(e7,LEo),e(e7,Aq),e(Aq,xEo),e(e7,kEo),e(ne,SEo),e(ne,o7),e(o7,Jse),e(Jse,REo),e(o7,BEo),e(o7,yq),e(yq,PEo),e(o7,$Eo),e(ne,IEo),e(ne,r7),e(r7,Yse),e(Yse,qEo),e(r7,NEo),e(r7,Lq),e(Lq,jEo),e(r7,DEo),e(ne,GEo),e(ne,t7),e(t7,Kse),e(Kse,OEo),e(t7,VEo),e(t7,xq),e(xq,XEo),e(t7,zEo),e(ne,QEo),e(ne,a7),e(a7,Zse),e(Zse,WEo),e(a7,HEo),e(a7,kq),e(kq,UEo),e(a7,JEo),e(ne,YEo),e(ne,n7),e(n7,ele),e(ele,KEo),e(n7,ZEo),e(n7,Sq),e(Sq,eCo),e(n7,oCo),e(ne,rCo),e(ne,s7),e(s7,ole),e(ole,tCo),e(s7,aCo),e(s7,Rq),e(Rq,nCo),e(s7,sCo),e(ne,lCo),e(ne,l7),e(l7,rle),e(rle,iCo),e(l7,dCo),e(l7,Bq),e(Bq,cCo),e(l7,fCo),e(ne,mCo),e(ne,i7),e(i7,tle),e(tle,gCo),e(i7,hCo),e(i7,Pq),e(Pq,pCo),e(i7,_Co),e(ne,uCo),e(ne,d7),e(d7,ale),e(ale,bCo),e(d7,vCo),e(d7,$q),e($q,FCo),e(d7,TCo),e(ne,MCo),e(ne,c7),e(c7,nle),e(nle,ECo),e(c7,CCo),e(c7,Iq),e(Iq,wCo),e(c7,ACo),e(Ge,yCo),e(Ge,f7),e(f7,LCo),e(f7,sle),e(sle,xCo),e(f7,kCo),e(f7,lle),e(lle,SCo),e(Ge,RCo),e(Ge,ile),e(ile,BCo),e(Ge,PCo),g(zw,Ge,null),b(c,mBe,u),b(c,md,u),e(md,m7),e(m7,dle),g(Qw,dle,null),e(md,$Co),e(md,cle),e(cle,ICo),b(c,gBe,u),b(c,or,u),g(Ww,or,null),e(or,qCo),e(or,gd),e(gd,NCo),e(gd,qq),e(qq,jCo),e(gd,DCo),e(gd,Nq),e(Nq,GCo),e(gd,OCo),e(or,VCo),e(or,Hw),e(Hw,XCo),e(Hw,fle),e(fle,zCo),e(Hw,QCo),e(or,WCo),e(or,Ur),g(Uw,Ur,null),e(Ur,HCo),e(Ur,mle),e(mle,UCo),e(Ur,JCo),e(Ur,hd),e(hd,YCo),e(hd,gle),e(gle,KCo),e(hd,ZCo),e(hd,jq),e(jq,ewo),e(hd,owo),e(Ur,rwo),e(Ur,hle),e(hle,two),e(Ur,awo),g(Jw,Ur,null),e(or,nwo),e(or,Oe),g(Yw,Oe,null),e(Oe,swo),e(Oe,ple),e(ple,lwo),e(Oe,iwo),e(Oe,Ua),e(Ua,dwo),e(Ua,_le),e(_le,cwo),e(Ua,fwo),e(Ua,ule),e(ule,mwo),e(Ua,gwo),e(Ua,ble),e(ble,hwo),e(Ua,pwo),e(Oe,_wo),e(Oe,y),e(y,g7),e(g7,vle),e(vle,uwo),e(g7,bwo),e(g7,Dq),e(Dq,vwo),e(g7,Fwo),e(y,Two),e(y,h7),e(h7,Fle),e(Fle,Mwo),e(h7,Ewo),e(h7,Gq),e(Gq,Cwo),e(h7,wwo),e(y,Awo),e(y,p7),e(p7,Tle),e(Tle,ywo),e(p7,Lwo),e(p7,Oq),e(Oq,xwo),e(p7,kwo),e(y,Swo),e(y,_7),e(_7,Mle),e(Mle,Rwo),e(_7,Bwo),e(_7,Vq),e(Vq,Pwo),e(_7,$wo),e(y,Iwo),e(y,u7),e(u7,Ele),e(Ele,qwo),e(u7,Nwo),e(u7,Xq),e(Xq,jwo),e(u7,Dwo),e(y,Gwo),e(y,b7),e(b7,Cle),e(Cle,Owo),e(b7,Vwo),e(b7,zq),e(zq,Xwo),e(b7,zwo),e(y,Qwo),e(y,v7),e(v7,wle),e(wle,Wwo),e(v7,Hwo),e(v7,Qq),e(Qq,Uwo),e(v7,Jwo),e(y,Ywo),e(y,F7),e(F7,Ale),e(Ale,Kwo),e(F7,Zwo),e(F7,Wq),e(Wq,e6o),e(F7,o6o),e(y,r6o),e(y,T7),e(T7,yle),e(yle,t6o),e(T7,a6o),e(T7,Hq),e(Hq,n6o),e(T7,s6o),e(y,l6o),e(y,M7),e(M7,Lle),e(Lle,i6o),e(M7,d6o),e(M7,Uq),e(Uq,c6o),e(M7,f6o),e(y,m6o),e(y,E7),e(E7,xle),e(xle,g6o),e(E7,h6o),e(E7,Jq),e(Jq,p6o),e(E7,_6o),e(y,u6o),e(y,C7),e(C7,kle),e(kle,b6o),e(C7,v6o),e(C7,Yq),e(Yq,F6o),e(C7,T6o),e(y,M6o),e(y,w7),e(w7,Sle),e(Sle,E6o),e(w7,C6o),e(w7,Kq),e(Kq,w6o),e(w7,A6o),e(y,y6o),e(y,A7),e(A7,Rle),e(Rle,L6o),e(A7,x6o),e(A7,Zq),e(Zq,k6o),e(A7,S6o),e(y,R6o),e(y,y7),e(y7,Ble),e(Ble,B6o),e(y7,P6o),e(y7,eN),e(eN,$6o),e(y7,I6o),e(y,q6o),e(y,L7),e(L7,Ple),e(Ple,N6o),e(L7,j6o),e(L7,oN),e(oN,D6o),e(L7,G6o),e(y,O6o),e(y,x7),e(x7,$le),e($le,V6o),e(x7,X6o),e(x7,rN),e(rN,z6o),e(x7,Q6o),e(y,W6o),e(y,k7),e(k7,Ile),e(Ile,H6o),e(k7,U6o),e(k7,tN),e(tN,J6o),e(k7,Y6o),e(y,K6o),e(y,S7),e(S7,qle),e(qle,Z6o),e(S7,eAo),e(S7,aN),e(aN,oAo),e(S7,rAo),e(y,tAo),e(y,R7),e(R7,Nle),e(Nle,aAo),e(R7,nAo),e(R7,nN),e(nN,sAo),e(R7,lAo),e(y,iAo),e(y,B7),e(B7,jle),e(jle,dAo),e(B7,cAo),e(B7,sN),e(sN,fAo),e(B7,mAo),e(y,gAo),e(y,P7),e(P7,Dle),e(Dle,hAo),e(P7,pAo),e(P7,lN),e(lN,_Ao),e(P7,uAo),e(y,bAo),e(y,$7),e($7,Gle),e(Gle,vAo),e($7,FAo),e($7,iN),e(iN,TAo),e($7,MAo),e(y,EAo),e(y,I7),e(I7,Ole),e(Ole,CAo),e(I7,wAo),e(I7,dN),e(dN,AAo),e(I7,yAo),e(y,LAo),e(y,q7),e(q7,Vle),e(Vle,xAo),e(q7,kAo),e(q7,cN),e(cN,SAo),e(q7,RAo),e(y,BAo),e(y,N7),e(N7,Xle),e(Xle,PAo),e(N7,$Ao),e(N7,fN),e(fN,IAo),e(N7,qAo),e(y,NAo),e(y,j7),e(j7,zle),e(zle,jAo),e(j7,DAo),e(j7,mN),e(mN,GAo),e(j7,OAo),e(y,VAo),e(y,D7),e(D7,Qle),e(Qle,XAo),e(D7,zAo),e(D7,gN),e(gN,QAo),e(D7,WAo),e(y,HAo),e(y,G7),e(G7,Wle),e(Wle,UAo),e(G7,JAo),e(G7,hN),e(hN,YAo),e(G7,KAo),e(y,ZAo),e(y,O7),e(O7,Hle),e(Hle,e0o),e(O7,o0o),e(O7,pN),e(pN,r0o),e(O7,t0o),e(y,a0o),e(y,V7),e(V7,Ule),e(Ule,n0o),e(V7,s0o),e(V7,_N),e(_N,l0o),e(V7,i0o),e(y,d0o),e(y,X7),e(X7,Jle),e(Jle,c0o),e(X7,f0o),e(X7,uN),e(uN,m0o),e(X7,g0o),e(y,h0o),e(y,z7),e(z7,Yle),e(Yle,p0o),e(z7,_0o),e(z7,bN),e(bN,u0o),e(z7,b0o),e(y,v0o),e(y,Q7),e(Q7,Kle),e(Kle,F0o),e(Q7,T0o),e(Q7,vN),e(vN,M0o),e(Q7,E0o),e(y,C0o),e(y,W7),e(W7,Zle),e(Zle,w0o),e(W7,A0o),e(W7,FN),e(FN,y0o),e(W7,L0o),e(y,x0o),e(y,H7),e(H7,eie),e(eie,k0o),e(H7,S0o),e(H7,TN),e(TN,R0o),e(H7,B0o),e(y,P0o),e(y,U7),e(U7,oie),e(oie,$0o),e(U7,I0o),e(U7,MN),e(MN,q0o),e(U7,N0o),e(y,j0o),e(y,J7),e(J7,rie),e(rie,D0o),e(J7,G0o),e(J7,EN),e(EN,O0o),e(J7,V0o),e(y,X0o),e(y,Y7),e(Y7,tie),e(tie,z0o),e(Y7,Q0o),e(Y7,CN),e(CN,W0o),e(Y7,H0o),e(y,U0o),e(y,K7),e(K7,aie),e(aie,J0o),e(K7,Y0o),e(K7,wN),e(wN,K0o),e(K7,Z0o),e(y,eyo),e(y,Z7),e(Z7,nie),e(nie,oyo),e(Z7,ryo),e(Z7,AN),e(AN,tyo),e(Z7,ayo),e(y,nyo),e(y,eb),e(eb,sie),e(sie,syo),e(eb,lyo),e(eb,yN),e(yN,iyo),e(eb,dyo),e(y,cyo),e(y,ob),e(ob,lie),e(lie,fyo),e(ob,myo),e(ob,LN),e(LN,gyo),e(ob,hyo),e(y,pyo),e(y,rb),e(rb,iie),e(iie,_yo),e(rb,uyo),e(rb,xN),e(xN,byo),e(rb,vyo),e(y,Fyo),e(y,tb),e(tb,die),e(die,Tyo),e(tb,Myo),e(tb,kN),e(kN,Eyo),e(tb,Cyo),e(y,wyo),e(y,ab),e(ab,cie),e(cie,Ayo),e(ab,yyo),e(ab,SN),e(SN,Lyo),e(ab,xyo),e(y,kyo),e(y,nb),e(nb,fie),e(fie,Syo),e(nb,Ryo),e(nb,RN),e(RN,Byo),e(nb,Pyo),e(Oe,$yo),e(Oe,sb),e(sb,Iyo),e(sb,mie),e(mie,qyo),e(sb,Nyo),e(sb,gie),e(gie,jyo),e(Oe,Dyo),e(Oe,hie),e(hie,Gyo),e(Oe,Oyo),g(Kw,Oe,null),b(c,hBe,u),b(c,pd,u),e(pd,lb),e(lb,pie),g(Zw,pie,null),e(pd,Vyo),e(pd,_ie),e(_ie,Xyo),b(c,pBe,u),b(c,rr,u),g(e6,rr,null),e(rr,zyo),e(rr,_d),e(_d,Qyo),e(_d,BN),e(BN,Wyo),e(_d,Hyo),e(_d,PN),e(PN,Uyo),e(_d,Jyo),e(rr,Yyo),e(rr,o6),e(o6,Kyo),e(o6,uie),e(uie,Zyo),e(o6,e8o),e(rr,o8o),e(rr,Jr),g(r6,Jr,null),e(Jr,r8o),e(Jr,bie),e(bie,t8o),e(Jr,a8o),e(Jr,ud),e(ud,n8o),e(ud,vie),e(vie,s8o),e(ud,l8o),e(ud,$N),e($N,i8o),e(ud,d8o),e(Jr,c8o),e(Jr,Fie),e(Fie,f8o),e(Jr,m8o),g(t6,Jr,null),e(rr,g8o),e(rr,Ve),g(a6,Ve,null),e(Ve,h8o),e(Ve,Tie),e(Tie,p8o),e(Ve,_8o),e(Ve,Ja),e(Ja,u8o),e(Ja,Mie),e(Mie,b8o),e(Ja,v8o),e(Ja,Eie),e(Eie,F8o),e(Ja,T8o),e(Ja,Cie),e(Cie,M8o),e(Ja,E8o),e(Ve,C8o),e(Ve,G),e(G,ib),e(ib,wie),e(wie,w8o),e(ib,A8o),e(ib,IN),e(IN,y8o),e(ib,L8o),e(G,x8o),e(G,db),e(db,Aie),e(Aie,k8o),e(db,S8o),e(db,qN),e(qN,R8o),e(db,B8o),e(G,P8o),e(G,cb),e(cb,yie),e(yie,$8o),e(cb,I8o),e(cb,NN),e(NN,q8o),e(cb,N8o),e(G,j8o),e(G,fb),e(fb,Lie),e(Lie,D8o),e(fb,G8o),e(fb,jN),e(jN,O8o),e(fb,V8o),e(G,X8o),e(G,mb),e(mb,xie),e(xie,z8o),e(mb,Q8o),e(mb,DN),e(DN,W8o),e(mb,H8o),e(G,U8o),e(G,gb),e(gb,kie),e(kie,J8o),e(gb,Y8o),e(gb,GN),e(GN,K8o),e(gb,Z8o),e(G,eLo),e(G,hb),e(hb,Sie),e(Sie,oLo),e(hb,rLo),e(hb,ON),e(ON,tLo),e(hb,aLo),e(G,nLo),e(G,pb),e(pb,Rie),e(Rie,sLo),e(pb,lLo),e(pb,VN),e(VN,iLo),e(pb,dLo),e(G,cLo),e(G,_b),e(_b,Bie),e(Bie,fLo),e(_b,mLo),e(_b,XN),e(XN,gLo),e(_b,hLo),e(G,pLo),e(G,ub),e(ub,Pie),e(Pie,_Lo),e(ub,uLo),e(ub,zN),e(zN,bLo),e(ub,vLo),e(G,FLo),e(G,bb),e(bb,$ie),e($ie,TLo),e(bb,MLo),e(bb,QN),e(QN,ELo),e(bb,CLo),e(G,wLo),e(G,vb),e(vb,Iie),e(Iie,ALo),e(vb,yLo),e(vb,WN),e(WN,LLo),e(vb,xLo),e(G,kLo),e(G,Fb),e(Fb,qie),e(qie,SLo),e(Fb,RLo),e(Fb,HN),e(HN,BLo),e(Fb,PLo),e(G,$Lo),e(G,Tb),e(Tb,Nie),e(Nie,ILo),e(Tb,qLo),e(Tb,UN),e(UN,NLo),e(Tb,jLo),e(G,DLo),e(G,Mb),e(Mb,jie),e(jie,GLo),e(Mb,OLo),e(Mb,JN),e(JN,VLo),e(Mb,XLo),e(G,zLo),e(G,Eb),e(Eb,Die),e(Die,QLo),e(Eb,WLo),e(Eb,YN),e(YN,HLo),e(Eb,ULo),e(G,JLo),e(G,Cb),e(Cb,Gie),e(Gie,YLo),e(Cb,KLo),e(Cb,KN),e(KN,ZLo),e(Cb,e9o),e(G,o9o),e(G,wb),e(wb,Oie),e(Oie,r9o),e(wb,t9o),e(wb,ZN),e(ZN,a9o),e(wb,n9o),e(G,s9o),e(G,Ab),e(Ab,Vie),e(Vie,l9o),e(Ab,i9o),e(Ab,ej),e(ej,d9o),e(Ab,c9o),e(G,f9o),e(G,yb),e(yb,Xie),e(Xie,m9o),e(yb,g9o),e(yb,oj),e(oj,h9o),e(yb,p9o),e(G,_9o),e(G,Lb),e(Lb,zie),e(zie,u9o),e(Lb,b9o),e(Lb,rj),e(rj,v9o),e(Lb,F9o),e(G,T9o),e(G,xb),e(xb,Qie),e(Qie,M9o),e(xb,E9o),e(xb,tj),e(tj,C9o),e(xb,w9o),e(G,A9o),e(G,kb),e(kb,Wie),e(Wie,y9o),e(kb,L9o),e(kb,aj),e(aj,x9o),e(kb,k9o),e(G,S9o),e(G,Sb),e(Sb,Hie),e(Hie,R9o),e(Sb,B9o),e(Sb,nj),e(nj,P9o),e(Sb,$9o),e(G,I9o),e(G,Rb),e(Rb,Uie),e(Uie,q9o),e(Rb,N9o),e(Rb,sj),e(sj,j9o),e(Rb,D9o),e(G,G9o),e(G,Bb),e(Bb,Jie),e(Jie,O9o),e(Bb,V9o),e(Bb,lj),e(lj,X9o),e(Bb,z9o),e(G,Q9o),e(G,Pb),e(Pb,Yie),e(Yie,W9o),e(Pb,H9o),e(Pb,ij),e(ij,U9o),e(Pb,J9o),e(G,Y9o),e(G,$b),e($b,Kie),e(Kie,K9o),e($b,Z9o),e($b,dj),e(dj,exo),e($b,oxo),e(Ve,rxo),e(Ve,Ib),e(Ib,txo),e(Ib,Zie),e(Zie,axo),e(Ib,nxo),e(Ib,ede),e(ede,sxo),e(Ve,lxo),e(Ve,ode),e(ode,ixo),e(Ve,dxo),g(n6,Ve,null),b(c,_Be,u),b(c,bd,u),e(bd,qb),e(qb,rde),g(s6,rde,null),e(bd,cxo),e(bd,tde),e(tde,fxo),b(c,uBe,u),b(c,tr,u),g(l6,tr,null),e(tr,mxo),e(tr,vd),e(vd,gxo),e(vd,cj),e(cj,hxo),e(vd,pxo),e(vd,fj),e(fj,_xo),e(vd,uxo),e(tr,bxo),e(tr,i6),e(i6,vxo),e(i6,ade),e(ade,Fxo),e(i6,Txo),e(tr,Mxo),e(tr,Yr),g(d6,Yr,null),e(Yr,Exo),e(Yr,nde),e(nde,Cxo),e(Yr,wxo),e(Yr,Fd),e(Fd,Axo),e(Fd,sde),e(sde,yxo),e(Fd,Lxo),e(Fd,mj),e(mj,xxo),e(Fd,kxo),e(Yr,Sxo),e(Yr,lde),e(lde,Rxo),e(Yr,Bxo),g(c6,Yr,null),e(tr,Pxo),e(tr,Xe),g(f6,Xe,null),e(Xe,$xo),e(Xe,ide),e(ide,Ixo),e(Xe,qxo),e(Xe,Ya),e(Ya,Nxo),e(Ya,dde),e(dde,jxo),e(Ya,Dxo),e(Ya,cde),e(cde,Gxo),e(Ya,Oxo),e(Ya,fde),e(fde,Vxo),e(Ya,Xxo),e(Xe,zxo),e(Xe,da),e(da,Nb),e(Nb,mde),e(mde,Qxo),e(Nb,Wxo),e(Nb,gj),e(gj,Hxo),e(Nb,Uxo),e(da,Jxo),e(da,jb),e(jb,gde),e(gde,Yxo),e(jb,Kxo),e(jb,hj),e(hj,Zxo),e(jb,eko),e(da,oko),e(da,Db),e(Db,hde),e(hde,rko),e(Db,tko),e(Db,pj),e(pj,ako),e(Db,nko),e(da,sko),e(da,Gb),e(Gb,pde),e(pde,lko),e(Gb,iko),e(Gb,_j),e(_j,dko),e(Gb,cko),e(da,fko),e(da,Ob),e(Ob,_de),e(_de,mko),e(Ob,gko),e(Ob,uj),e(uj,hko),e(Ob,pko),e(Xe,_ko),e(Xe,Vb),e(Vb,uko),e(Vb,ude),e(ude,bko),e(Vb,vko),e(Vb,bde),e(bde,Fko),e(Xe,Tko),e(Xe,vde),e(vde,Mko),e(Xe,Eko),g(m6,Xe,null),b(c,bBe,u),b(c,Td,u),e(Td,Xb),e(Xb,Fde),g(g6,Fde,null),e(Td,Cko),e(Td,Tde),e(Tde,wko),b(c,vBe,u),b(c,ar,u),g(h6,ar,null),e(ar,Ako),e(ar,Md),e(Md,yko),e(Md,bj),e(bj,Lko),e(Md,xko),e(Md,vj),e(vj,kko),e(Md,Sko),e(ar,Rko),e(ar,p6),e(p6,Bko),e(p6,Mde),e(Mde,Pko),e(p6,$ko),e(ar,Iko),e(ar,Kr),g(_6,Kr,null),e(Kr,qko),e(Kr,Ede),e(Ede,Nko),e(Kr,jko),e(Kr,Ed),e(Ed,Dko),e(Ed,Cde),e(Cde,Gko),e(Ed,Oko),e(Ed,Fj),e(Fj,Vko),e(Ed,Xko),e(Kr,zko),e(Kr,wde),e(wde,Qko),e(Kr,Wko),g(u6,Kr,null),e(ar,Hko),e(ar,ze),g(b6,ze,null),e(ze,Uko),e(ze,Ade),e(Ade,Jko),e(ze,Yko),e(ze,Ka),e(Ka,Kko),e(Ka,yde),e(yde,Zko),e(Ka,eSo),e(Ka,Lde),e(Lde,oSo),e(Ka,rSo),e(Ka,xde),e(xde,tSo),e(Ka,aSo),e(ze,nSo),e(ze,j),e(j,zb),e(zb,kde),e(kde,sSo),e(zb,lSo),e(zb,Tj),e(Tj,iSo),e(zb,dSo),e(j,cSo),e(j,Qb),e(Qb,Sde),e(Sde,fSo),e(Qb,mSo),e(Qb,Mj),e(Mj,gSo),e(Qb,hSo),e(j,pSo),e(j,Wb),e(Wb,Rde),e(Rde,_So),e(Wb,uSo),e(Wb,Ej),e(Ej,bSo),e(Wb,vSo),e(j,FSo),e(j,Hb),e(Hb,Bde),e(Bde,TSo),e(Hb,MSo),e(Hb,Cj),e(Cj,ESo),e(Hb,CSo),e(j,wSo),e(j,Ub),e(Ub,Pde),e(Pde,ASo),e(Ub,ySo),e(Ub,wj),e(wj,LSo),e(Ub,xSo),e(j,kSo),e(j,Jb),e(Jb,$de),e($de,SSo),e(Jb,RSo),e(Jb,Aj),e(Aj,BSo),e(Jb,PSo),e(j,$So),e(j,Yb),e(Yb,Ide),e(Ide,ISo),e(Yb,qSo),e(Yb,yj),e(yj,NSo),e(Yb,jSo),e(j,DSo),e(j,Kb),e(Kb,qde),e(qde,GSo),e(Kb,OSo),e(Kb,Lj),e(Lj,VSo),e(Kb,XSo),e(j,zSo),e(j,Zb),e(Zb,Nde),e(Nde,QSo),e(Zb,WSo),e(Zb,xj),e(xj,HSo),e(Zb,USo),e(j,JSo),e(j,e2),e(e2,jde),e(jde,YSo),e(e2,KSo),e(e2,kj),e(kj,ZSo),e(e2,eRo),e(j,oRo),e(j,o2),e(o2,Dde),e(Dde,rRo),e(o2,tRo),e(o2,Sj),e(Sj,aRo),e(o2,nRo),e(j,sRo),e(j,r2),e(r2,Gde),e(Gde,lRo),e(r2,iRo),e(r2,Rj),e(Rj,dRo),e(r2,cRo),e(j,fRo),e(j,t2),e(t2,Ode),e(Ode,mRo),e(t2,gRo),e(t2,Bj),e(Bj,hRo),e(t2,pRo),e(j,_Ro),e(j,a2),e(a2,Vde),e(Vde,uRo),e(a2,bRo),e(a2,Pj),e(Pj,vRo),e(a2,FRo),e(j,TRo),e(j,n2),e(n2,Xde),e(Xde,MRo),e(n2,ERo),e(n2,$j),e($j,CRo),e(n2,wRo),e(j,ARo),e(j,s2),e(s2,zde),e(zde,yRo),e(s2,LRo),e(s2,Ij),e(Ij,xRo),e(s2,kRo),e(j,SRo),e(j,l2),e(l2,Qde),e(Qde,RRo),e(l2,BRo),e(l2,qj),e(qj,PRo),e(l2,$Ro),e(j,IRo),e(j,i2),e(i2,Wde),e(Wde,qRo),e(i2,NRo),e(i2,Nj),e(Nj,jRo),e(i2,DRo),e(j,GRo),e(j,d2),e(d2,Hde),e(Hde,ORo),e(d2,VRo),e(d2,jj),e(jj,XRo),e(d2,zRo),e(j,QRo),e(j,c2),e(c2,Ude),e(Ude,WRo),e(c2,HRo),e(c2,Dj),e(Dj,URo),e(c2,JRo),e(j,YRo),e(j,f2),e(f2,Jde),e(Jde,KRo),e(f2,ZRo),e(f2,Gj),e(Gj,eBo),e(f2,oBo),e(j,rBo),e(j,m2),e(m2,Yde),e(Yde,tBo),e(m2,aBo),e(m2,Oj),e(Oj,nBo),e(m2,sBo),e(j,lBo),e(j,g2),e(g2,Kde),e(Kde,iBo),e(g2,dBo),e(g2,Vj),e(Vj,cBo),e(g2,fBo),e(j,mBo),e(j,h2),e(h2,Zde),e(Zde,gBo),e(h2,hBo),e(h2,Xj),e(Xj,pBo),e(h2,_Bo),e(j,uBo),e(j,p2),e(p2,ece),e(ece,bBo),e(p2,vBo),e(p2,zj),e(zj,FBo),e(p2,TBo),e(j,MBo),e(j,_2),e(_2,oce),e(oce,EBo),e(_2,CBo),e(_2,Qj),e(Qj,wBo),e(_2,ABo),e(j,yBo),e(j,u2),e(u2,rce),e(rce,LBo),e(u2,xBo),e(u2,Wj),e(Wj,kBo),e(u2,SBo),e(j,RBo),e(j,b2),e(b2,tce),e(tce,BBo),e(b2,PBo),e(b2,Hj),e(Hj,$Bo),e(b2,IBo),e(j,qBo),e(j,v2),e(v2,ace),e(ace,NBo),e(v2,jBo),e(v2,Uj),e(Uj,DBo),e(v2,GBo),e(j,OBo),e(j,F2),e(F2,nce),e(nce,VBo),e(F2,XBo),e(F2,Jj),e(Jj,zBo),e(F2,QBo),e(j,WBo),e(j,T2),e(T2,sce),e(sce,HBo),e(T2,UBo),e(T2,Yj),e(Yj,JBo),e(T2,YBo),e(j,KBo),e(j,M2),e(M2,lce),e(lce,ZBo),e(M2,ePo),e(M2,Kj),e(Kj,oPo),e(M2,rPo),e(j,tPo),e(j,E2),e(E2,ice),e(ice,aPo),e(E2,nPo),e(E2,Zj),e(Zj,sPo),e(E2,lPo),e(ze,iPo),e(ze,C2),e(C2,dPo),e(C2,dce),e(dce,cPo),e(C2,fPo),e(C2,cce),e(cce,mPo),e(ze,gPo),e(ze,fce),e(fce,hPo),e(ze,pPo),g(v6,ze,null),b(c,FBe,u),b(c,Cd,u),e(Cd,w2),e(w2,mce),g(F6,mce,null),e(Cd,_Po),e(Cd,gce),e(gce,uPo),b(c,TBe,u),b(c,nr,u),g(T6,nr,null),e(nr,bPo),e(nr,wd),e(wd,vPo),e(wd,eD),e(eD,FPo),e(wd,TPo),e(wd,oD),e(oD,MPo),e(wd,EPo),e(nr,CPo),e(nr,M6),e(M6,wPo),e(M6,hce),e(hce,APo),e(M6,yPo),e(nr,LPo),e(nr,Zr),g(E6,Zr,null),e(Zr,xPo),e(Zr,pce),e(pce,kPo),e(Zr,SPo),e(Zr,Ad),e(Ad,RPo),e(Ad,_ce),e(_ce,BPo),e(Ad,PPo),e(Ad,rD),e(rD,$Po),e(Ad,IPo),e(Zr,qPo),e(Zr,uce),e(uce,NPo),e(Zr,jPo),g(C6,Zr,null),e(nr,DPo),e(nr,Qe),g(w6,Qe,null),e(Qe,GPo),e(Qe,bce),e(bce,OPo),e(Qe,VPo),e(Qe,Za),e(Za,XPo),e(Za,vce),e(vce,zPo),e(Za,QPo),e(Za,Fce),e(Fce,WPo),e(Za,HPo),e(Za,Tce),e(Tce,UPo),e(Za,JPo),e(Qe,YPo),e(Qe,R),e(R,A2),e(A2,Mce),e(Mce,KPo),e(A2,ZPo),e(A2,tD),e(tD,e$o),e(A2,o$o),e(R,r$o),e(R,y2),e(y2,Ece),e(Ece,t$o),e(y2,a$o),e(y2,aD),e(aD,n$o),e(y2,s$o),e(R,l$o),e(R,L2),e(L2,Cce),e(Cce,i$o),e(L2,d$o),e(L2,nD),e(nD,c$o),e(L2,f$o),e(R,m$o),e(R,x2),e(x2,wce),e(wce,g$o),e(x2,h$o),e(x2,sD),e(sD,p$o),e(x2,_$o),e(R,u$o),e(R,k2),e(k2,Ace),e(Ace,b$o),e(k2,v$o),e(k2,lD),e(lD,F$o),e(k2,T$o),e(R,M$o),e(R,S2),e(S2,yce),e(yce,E$o),e(S2,C$o),e(S2,iD),e(iD,w$o),e(S2,A$o),e(R,y$o),e(R,R2),e(R2,Lce),e(Lce,L$o),e(R2,x$o),e(R2,dD),e(dD,k$o),e(R2,S$o),e(R,R$o),e(R,B2),e(B2,xce),e(xce,B$o),e(B2,P$o),e(B2,cD),e(cD,$$o),e(B2,I$o),e(R,q$o),e(R,P2),e(P2,kce),e(kce,N$o),e(P2,j$o),e(P2,fD),e(fD,D$o),e(P2,G$o),e(R,O$o),e(R,$2),e($2,Sce),e(Sce,V$o),e($2,X$o),e($2,mD),e(mD,z$o),e($2,Q$o),e(R,W$o),e(R,I2),e(I2,Rce),e(Rce,H$o),e(I2,U$o),e(I2,gD),e(gD,J$o),e(I2,Y$o),e(R,K$o),e(R,q2),e(q2,Bce),e(Bce,Z$o),e(q2,eIo),e(q2,hD),e(hD,oIo),e(q2,rIo),e(R,tIo),e(R,N2),e(N2,Pce),e(Pce,aIo),e(N2,nIo),e(N2,pD),e(pD,sIo),e(N2,lIo),e(R,iIo),e(R,j2),e(j2,$ce),e($ce,dIo),e(j2,cIo),e(j2,_D),e(_D,fIo),e(j2,mIo),e(R,gIo),e(R,D2),e(D2,Ice),e(Ice,hIo),e(D2,pIo),e(D2,uD),e(uD,_Io),e(D2,uIo),e(R,bIo),e(R,G2),e(G2,qce),e(qce,vIo),e(G2,FIo),e(G2,bD),e(bD,TIo),e(G2,MIo),e(R,EIo),e(R,O2),e(O2,Nce),e(Nce,CIo),e(O2,wIo),e(O2,vD),e(vD,AIo),e(O2,yIo),e(R,LIo),e(R,V2),e(V2,jce),e(jce,xIo),e(V2,kIo),e(V2,FD),e(FD,SIo),e(V2,RIo),e(R,BIo),e(R,X2),e(X2,Dce),e(Dce,PIo),e(X2,$Io),e(X2,TD),e(TD,IIo),e(X2,qIo),e(R,NIo),e(R,z2),e(z2,Gce),e(Gce,jIo),e(z2,DIo),e(z2,MD),e(MD,GIo),e(z2,OIo),e(R,VIo),e(R,Q2),e(Q2,Oce),e(Oce,XIo),e(Q2,zIo),e(Q2,ED),e(ED,QIo),e(Q2,WIo),e(R,HIo),e(R,W2),e(W2,Vce),e(Vce,UIo),e(W2,JIo),e(W2,CD),e(CD,YIo),e(W2,KIo),e(R,ZIo),e(R,H2),e(H2,Xce),e(Xce,eqo),e(H2,oqo),e(H2,wD),e(wD,rqo),e(H2,tqo),e(R,aqo),e(R,U2),e(U2,zce),e(zce,nqo),e(U2,sqo),e(U2,AD),e(AD,lqo),e(U2,iqo),e(R,dqo),e(R,J2),e(J2,Qce),e(Qce,cqo),e(J2,fqo),e(J2,yD),e(yD,mqo),e(J2,gqo),e(R,hqo),e(R,Y2),e(Y2,Wce),e(Wce,pqo),e(Y2,_qo),e(Y2,LD),e(LD,uqo),e(Y2,bqo),e(R,vqo),e(R,K2),e(K2,Hce),e(Hce,Fqo),e(K2,Tqo),e(K2,xD),e(xD,Mqo),e(K2,Eqo),e(R,Cqo),e(R,Z2),e(Z2,Uce),e(Uce,wqo),e(Z2,Aqo),e(Z2,kD),e(kD,yqo),e(Z2,Lqo),e(R,xqo),e(R,e5),e(e5,Jce),e(Jce,kqo),e(e5,Sqo),e(e5,SD),e(SD,Rqo),e(e5,Bqo),e(R,Pqo),e(R,o5),e(o5,Yce),e(Yce,$qo),e(o5,Iqo),e(o5,RD),e(RD,qqo),e(o5,Nqo),e(R,jqo),e(R,r5),e(r5,Kce),e(Kce,Dqo),e(r5,Gqo),e(r5,BD),e(BD,Oqo),e(r5,Vqo),e(R,Xqo),e(R,t5),e(t5,Zce),e(Zce,zqo),e(t5,Qqo),e(t5,PD),e(PD,Wqo),e(t5,Hqo),e(R,Uqo),e(R,a5),e(a5,efe),e(efe,Jqo),e(a5,Yqo),e(a5,$D),e($D,Kqo),e(a5,Zqo),e(R,eNo),e(R,n5),e(n5,ofe),e(ofe,oNo),e(n5,rNo),e(n5,ID),e(ID,tNo),e(n5,aNo),e(R,nNo),e(R,s5),e(s5,rfe),e(rfe,sNo),e(s5,lNo),e(s5,qD),e(qD,iNo),e(s5,dNo),e(R,cNo),e(R,l5),e(l5,tfe),e(tfe,fNo),e(l5,mNo),e(l5,ND),e(ND,gNo),e(l5,hNo),e(R,pNo),e(R,i5),e(i5,afe),e(afe,_No),e(i5,uNo),e(i5,jD),e(jD,bNo),e(i5,vNo),e(R,FNo),e(R,d5),e(d5,nfe),e(nfe,TNo),e(d5,MNo),e(d5,DD),e(DD,ENo),e(d5,CNo),e(R,wNo),e(R,c5),e(c5,sfe),e(sfe,ANo),e(c5,yNo),e(c5,GD),e(GD,LNo),e(c5,xNo),e(Qe,kNo),e(Qe,f5),e(f5,SNo),e(f5,lfe),e(lfe,RNo),e(f5,BNo),e(f5,ife),e(ife,PNo),e(Qe,$No),e(Qe,dfe),e(dfe,INo),e(Qe,qNo),g(A6,Qe,null),b(c,MBe,u),b(c,yd,u),e(yd,m5),e(m5,cfe),g(y6,cfe,null),e(yd,NNo),e(yd,ffe),e(ffe,jNo),b(c,EBe,u),b(c,sr,u),g(L6,sr,null),e(sr,DNo),e(sr,Ld),e(Ld,GNo),e(Ld,OD),e(OD,ONo),e(Ld,VNo),e(Ld,VD),e(VD,XNo),e(Ld,zNo),e(sr,QNo),e(sr,x6),e(x6,WNo),e(x6,mfe),e(mfe,HNo),e(x6,UNo),e(sr,JNo),e(sr,et),g(k6,et,null),e(et,YNo),e(et,gfe),e(gfe,KNo),e(et,ZNo),e(et,xd),e(xd,ejo),e(xd,hfe),e(hfe,ojo),e(xd,rjo),e(xd,XD),e(XD,tjo),e(xd,ajo),e(et,njo),e(et,pfe),e(pfe,sjo),e(et,ljo),g(S6,et,null),e(sr,ijo),e(sr,We),g(R6,We,null),e(We,djo),e(We,_fe),e(_fe,cjo),e(We,fjo),e(We,en),e(en,mjo),e(en,ufe),e(ufe,gjo),e(en,hjo),e(en,bfe),e(bfe,pjo),e(en,_jo),e(en,vfe),e(vfe,ujo),e(en,bjo),e(We,vjo),e(We,Ffe),e(Ffe,g5),e(g5,Tfe),e(Tfe,Fjo),e(g5,Tjo),e(g5,zD),e(zD,Mjo),e(g5,Ejo),e(We,Cjo),e(We,h5),e(h5,wjo),e(h5,Mfe),e(Mfe,Ajo),e(h5,yjo),e(h5,Efe),e(Efe,Ljo),e(We,xjo),e(We,Cfe),e(Cfe,kjo),e(We,Sjo),g(B6,We,null),b(c,CBe,u),b(c,kd,u),e(kd,p5),e(p5,wfe),g(P6,wfe,null),e(kd,Rjo),e(kd,Afe),e(Afe,Bjo),b(c,wBe,u),b(c,lr,u),g($6,lr,null),e(lr,Pjo),e(lr,Sd),e(Sd,$jo),e(Sd,QD),e(QD,Ijo),e(Sd,qjo),e(Sd,WD),e(WD,Njo),e(Sd,jjo),e(lr,Djo),e(lr,I6),e(I6,Gjo),e(I6,yfe),e(yfe,Ojo),e(I6,Vjo),e(lr,Xjo),e(lr,ot),g(q6,ot,null),e(ot,zjo),e(ot,Lfe),e(Lfe,Qjo),e(ot,Wjo),e(ot,Rd),e(Rd,Hjo),e(Rd,xfe),e(xfe,Ujo),e(Rd,Jjo),e(Rd,HD),e(HD,Yjo),e(Rd,Kjo),e(ot,Zjo),e(ot,kfe),e(kfe,eDo),e(ot,oDo),g(N6,ot,null),e(lr,rDo),e(lr,He),g(j6,He,null),e(He,tDo),e(He,Sfe),e(Sfe,aDo),e(He,nDo),e(He,on),e(on,sDo),e(on,Rfe),e(Rfe,lDo),e(on,iDo),e(on,Bfe),e(Bfe,dDo),e(on,cDo),e(on,Pfe),e(Pfe,fDo),e(on,mDo),e(He,gDo),e(He,de),e(de,_5),e(_5,$fe),e($fe,hDo),e(_5,pDo),e(_5,UD),e(UD,_Do),e(_5,uDo),e(de,bDo),e(de,u5),e(u5,Ife),e(Ife,vDo),e(u5,FDo),e(u5,JD),e(JD,TDo),e(u5,MDo),e(de,EDo),e(de,b5),e(b5,qfe),e(qfe,CDo),e(b5,wDo),e(b5,YD),e(YD,ADo),e(b5,yDo),e(de,LDo),e(de,Gs),e(Gs,Nfe),e(Nfe,xDo),e(Gs,kDo),e(Gs,KD),e(KD,SDo),e(Gs,RDo),e(Gs,ZD),e(ZD,BDo),e(Gs,PDo),e(de,$Do),e(de,v5),e(v5,jfe),e(jfe,IDo),e(v5,qDo),e(v5,eG),e(eG,NDo),e(v5,jDo),e(de,DDo),e(de,ma),e(ma,Dfe),e(Dfe,GDo),e(ma,ODo),e(ma,oG),e(oG,VDo),e(ma,XDo),e(ma,rG),e(rG,zDo),e(ma,QDo),e(ma,tG),e(tG,WDo),e(ma,HDo),e(de,UDo),e(de,F5),e(F5,Gfe),e(Gfe,JDo),e(F5,YDo),e(F5,aG),e(aG,KDo),e(F5,ZDo),e(de,eGo),e(de,T5),e(T5,Ofe),e(Ofe,oGo),e(T5,rGo),e(T5,nG),e(nG,tGo),e(T5,aGo),e(de,nGo),e(de,M5),e(M5,Vfe),e(Vfe,sGo),e(M5,lGo),e(M5,sG),e(sG,iGo),e(M5,dGo),e(de,cGo),e(de,E5),e(E5,Xfe),e(Xfe,fGo),e(E5,mGo),e(E5,lG),e(lG,gGo),e(E5,hGo),e(de,pGo),e(de,C5),e(C5,zfe),e(zfe,_Go),e(C5,uGo),e(C5,iG),e(iG,bGo),e(C5,vGo),e(de,FGo),e(de,w5),e(w5,Qfe),e(Qfe,TGo),e(w5,MGo),e(w5,dG),e(dG,EGo),e(w5,CGo),e(de,wGo),e(de,A5),e(A5,Wfe),e(Wfe,AGo),e(A5,yGo),e(A5,cG),e(cG,LGo),e(A5,xGo),e(He,kGo),e(He,y5),e(y5,SGo),e(y5,Hfe),e(Hfe,RGo),e(y5,BGo),e(y5,Ufe),e(Ufe,PGo),e(He,$Go),e(He,Jfe),e(Jfe,IGo),e(He,qGo),g(D6,He,null),b(c,ABe,u),b(c,Bd,u),e(Bd,L5),e(L5,Yfe),g(G6,Yfe,null),e(Bd,NGo),e(Bd,Kfe),e(Kfe,jGo),b(c,yBe,u),b(c,ir,u),g(O6,ir,null),e(ir,DGo),e(ir,Pd),e(Pd,GGo),e(Pd,fG),e(fG,OGo),e(Pd,VGo),e(Pd,mG),e(mG,XGo),e(Pd,zGo),e(ir,QGo),e(ir,V6),e(V6,WGo),e(V6,Zfe),e(Zfe,HGo),e(V6,UGo),e(ir,JGo),e(ir,rt),g(X6,rt,null),e(rt,YGo),e(rt,eme),e(eme,KGo),e(rt,ZGo),e(rt,$d),e($d,eOo),e($d,ome),e(ome,oOo),e($d,rOo),e($d,gG),e(gG,tOo),e($d,aOo),e(rt,nOo),e(rt,rme),e(rme,sOo),e(rt,lOo),g(z6,rt,null),e(ir,iOo),e(ir,Ue),g(Q6,Ue,null),e(Ue,dOo),e(Ue,tme),e(tme,cOo),e(Ue,fOo),e(Ue,rn),e(rn,mOo),e(rn,ame),e(ame,gOo),e(rn,hOo),e(rn,nme),e(nme,pOo),e(rn,_Oo),e(rn,sme),e(sme,uOo),e(rn,bOo),e(Ue,vOo),e(Ue,lme),e(lme,x5),e(x5,ime),e(ime,FOo),e(x5,TOo),e(x5,hG),e(hG,MOo),e(x5,EOo),e(Ue,COo),e(Ue,k5),e(k5,wOo),e(k5,dme),e(dme,AOo),e(k5,yOo),e(k5,cme),e(cme,LOo),e(Ue,xOo),e(Ue,fme),e(fme,kOo),e(Ue,SOo),g(W6,Ue,null),b(c,LBe,u),b(c,Id,u),e(Id,S5),e(S5,mme),g(H6,mme,null),e(Id,ROo),e(Id,gme),e(gme,BOo),b(c,xBe,u),b(c,dr,u),g(U6,dr,null),e(dr,POo),e(dr,qd),e(qd,$Oo),e(qd,pG),e(pG,IOo),e(qd,qOo),e(qd,_G),e(_G,NOo),e(qd,jOo),e(dr,DOo),e(dr,J6),e(J6,GOo),e(J6,hme),e(hme,OOo),e(J6,VOo),e(dr,XOo),e(dr,tt),g(Y6,tt,null),e(tt,zOo),e(tt,pme),e(pme,QOo),e(tt,WOo),e(tt,Nd),e(Nd,HOo),e(Nd,_me),e(_me,UOo),e(Nd,JOo),e(Nd,uG),e(uG,YOo),e(Nd,KOo),e(tt,ZOo),e(tt,ume),e(ume,eVo),e(tt,oVo),g(K6,tt,null),e(dr,rVo),e(dr,Je),g(Z6,Je,null),e(Je,tVo),e(Je,bme),e(bme,aVo),e(Je,nVo),e(Je,tn),e(tn,sVo),e(tn,vme),e(vme,lVo),e(tn,iVo),e(tn,Fme),e(Fme,dVo),e(tn,cVo),e(tn,Tme),e(Tme,fVo),e(tn,mVo),e(Je,gVo),e(Je,Se),e(Se,R5),e(R5,Mme),e(Mme,hVo),e(R5,pVo),e(R5,bG),e(bG,_Vo),e(R5,uVo),e(Se,bVo),e(Se,B5),e(B5,Eme),e(Eme,vVo),e(B5,FVo),e(B5,vG),e(vG,TVo),e(B5,MVo),e(Se,EVo),e(Se,P5),e(P5,Cme),e(Cme,CVo),e(P5,wVo),e(P5,FG),e(FG,AVo),e(P5,yVo),e(Se,LVo),e(Se,$5),e($5,wme),e(wme,xVo),e($5,kVo),e($5,TG),e(TG,SVo),e($5,RVo),e(Se,BVo),e(Se,I5),e(I5,Ame),e(Ame,PVo),e(I5,$Vo),e(I5,MG),e(MG,IVo),e(I5,qVo),e(Se,NVo),e(Se,q5),e(q5,yme),e(yme,jVo),e(q5,DVo),e(q5,EG),e(EG,GVo),e(q5,OVo),e(Se,VVo),e(Se,N5),e(N5,Lme),e(Lme,XVo),e(N5,zVo),e(N5,CG),e(CG,QVo),e(N5,WVo),e(Se,HVo),e(Se,j5),e(j5,xme),e(xme,UVo),e(j5,JVo),e(j5,wG),e(wG,YVo),e(j5,KVo),e(Je,ZVo),e(Je,D5),e(D5,eXo),e(D5,kme),e(kme,oXo),e(D5,rXo),e(D5,Sme),e(Sme,tXo),e(Je,aXo),e(Je,Rme),e(Rme,nXo),e(Je,sXo),g(eA,Je,null),b(c,kBe,u),b(c,jd,u),e(jd,G5),e(G5,Bme),g(oA,Bme,null),e(jd,lXo),e(jd,Pme),e(Pme,iXo),b(c,SBe,u),b(c,cr,u),g(rA,cr,null),e(cr,dXo),e(cr,Dd),e(Dd,cXo),e(Dd,AG),e(AG,fXo),e(Dd,mXo),e(Dd,yG),e(yG,gXo),e(Dd,hXo),e(cr,pXo),e(cr,tA),e(tA,_Xo),e(tA,$me),e($me,uXo),e(tA,bXo),e(cr,vXo),e(cr,at),g(aA,at,null),e(at,FXo),e(at,Ime),e(Ime,TXo),e(at,MXo),e(at,Gd),e(Gd,EXo),e(Gd,qme),e(qme,CXo),e(Gd,wXo),e(Gd,LG),e(LG,AXo),e(Gd,yXo),e(at,LXo),e(at,Nme),e(Nme,xXo),e(at,kXo),g(nA,at,null),e(cr,SXo),e(cr,Ye),g(sA,Ye,null),e(Ye,RXo),e(Ye,jme),e(jme,BXo),e(Ye,PXo),e(Ye,an),e(an,$Xo),e(an,Dme),e(Dme,IXo),e(an,qXo),e(an,Gme),e(Gme,NXo),e(an,jXo),e(an,Ome),e(Ome,DXo),e(an,GXo),e(Ye,OXo),e(Ye,nn),e(nn,O5),e(O5,Vme),e(Vme,VXo),e(O5,XXo),e(O5,xG),e(xG,zXo),e(O5,QXo),e(nn,WXo),e(nn,V5),e(V5,Xme),e(Xme,HXo),e(V5,UXo),e(V5,kG),e(kG,JXo),e(V5,YXo),e(nn,KXo),e(nn,X5),e(X5,zme),e(zme,ZXo),e(X5,ezo),e(X5,SG),e(SG,ozo),e(X5,rzo),e(nn,tzo),e(nn,z5),e(z5,Qme),e(Qme,azo),e(z5,nzo),e(z5,RG),e(RG,szo),e(z5,lzo),e(Ye,izo),e(Ye,Q5),e(Q5,dzo),e(Q5,Wme),e(Wme,czo),e(Q5,fzo),e(Q5,Hme),e(Hme,mzo),e(Ye,gzo),e(Ye,Ume),e(Ume,hzo),e(Ye,pzo),g(lA,Ye,null),b(c,RBe,u),b(c,Od,u),e(Od,W5),e(W5,Jme),g(iA,Jme,null),e(Od,_zo),e(Od,Yme),e(Yme,uzo),b(c,BBe,u),b(c,fr,u),g(dA,fr,null),e(fr,bzo),e(fr,Vd),e(Vd,vzo),e(Vd,BG),e(BG,Fzo),e(Vd,Tzo),e(Vd,PG),e(PG,Mzo),e(Vd,Ezo),e(fr,Czo),e(fr,cA),e(cA,wzo),e(cA,Kme),e(Kme,Azo),e(cA,yzo),e(fr,Lzo),e(fr,nt),g(fA,nt,null),e(nt,xzo),e(nt,Zme),e(Zme,kzo),e(nt,Szo),e(nt,Xd),e(Xd,Rzo),e(Xd,ege),e(ege,Bzo),e(Xd,Pzo),e(Xd,$G),e($G,$zo),e(Xd,Izo),e(nt,qzo),e(nt,oge),e(oge,Nzo),e(nt,jzo),g(mA,nt,null),e(fr,Dzo),e(fr,Ke),g(gA,Ke,null),e(Ke,Gzo),e(Ke,rge),e(rge,Ozo),e(Ke,Vzo),e(Ke,sn),e(sn,Xzo),e(sn,tge),e(tge,zzo),e(sn,Qzo),e(sn,age),e(age,Wzo),e(sn,Hzo),e(sn,nge),e(nge,Uzo),e(sn,Jzo),e(Ke,Yzo),e(Ke,Re),e(Re,H5),e(H5,sge),e(sge,Kzo),e(H5,Zzo),e(H5,IG),e(IG,eQo),e(H5,oQo),e(Re,rQo),e(Re,U5),e(U5,lge),e(lge,tQo),e(U5,aQo),e(U5,qG),e(qG,nQo),e(U5,sQo),e(Re,lQo),e(Re,J5),e(J5,ige),e(ige,iQo),e(J5,dQo),e(J5,NG),e(NG,cQo),e(J5,fQo),e(Re,mQo),e(Re,Y5),e(Y5,dge),e(dge,gQo),e(Y5,hQo),e(Y5,jG),e(jG,pQo),e(Y5,_Qo),e(Re,uQo),e(Re,K5),e(K5,cge),e(cge,bQo),e(K5,vQo),e(K5,DG),e(DG,FQo),e(K5,TQo),e(Re,MQo),e(Re,Z5),e(Z5,fge),e(fge,EQo),e(Z5,CQo),e(Z5,GG),e(GG,wQo),e(Z5,AQo),e(Re,yQo),e(Re,e3),e(e3,mge),e(mge,LQo),e(e3,xQo),e(e3,OG),e(OG,kQo),e(e3,SQo),e(Re,RQo),e(Re,o3),e(o3,gge),e(gge,BQo),e(o3,PQo),e(o3,VG),e(VG,$Qo),e(o3,IQo),e(Ke,qQo),e(Ke,r3),e(r3,NQo),e(r3,hge),e(hge,jQo),e(r3,DQo),e(r3,pge),e(pge,GQo),e(Ke,OQo),e(Ke,_ge),e(_ge,VQo),e(Ke,XQo),g(hA,Ke,null),b(c,PBe,u),b(c,zd,u),e(zd,t3),e(t3,uge),g(pA,uge,null),e(zd,zQo),e(zd,bge),e(bge,QQo),b(c,$Be,u),b(c,mr,u),g(_A,mr,null),e(mr,WQo),e(mr,Qd),e(Qd,HQo),e(Qd,XG),e(XG,UQo),e(Qd,JQo),e(Qd,zG),e(zG,YQo),e(Qd,KQo),e(mr,ZQo),e(mr,uA),e(uA,eWo),e(uA,vge),e(vge,oWo),e(uA,rWo),e(mr,tWo),e(mr,st),g(bA,st,null),e(st,aWo),e(st,Fge),e(Fge,nWo),e(st,sWo),e(st,Wd),e(Wd,lWo),e(Wd,Tge),e(Tge,iWo),e(Wd,dWo),e(Wd,QG),e(QG,cWo),e(Wd,fWo),e(st,mWo),e(st,Mge),e(Mge,gWo),e(st,hWo),g(vA,st,null),e(mr,pWo),e(mr,Ze),g(FA,Ze,null),e(Ze,_Wo),e(Ze,Ege),e(Ege,uWo),e(Ze,bWo),e(Ze,ln),e(ln,vWo),e(ln,Cge),e(Cge,FWo),e(ln,TWo),e(ln,wge),e(wge,MWo),e(ln,EWo),e(ln,Age),e(Age,CWo),e(ln,wWo),e(Ze,AWo),e(Ze,TA),e(TA,a3),e(a3,yge),e(yge,yWo),e(a3,LWo),e(a3,WG),e(WG,xWo),e(a3,kWo),e(TA,SWo),e(TA,n3),e(n3,Lge),e(Lge,RWo),e(n3,BWo),e(n3,HG),e(HG,PWo),e(n3,$Wo),e(Ze,IWo),e(Ze,s3),e(s3,qWo),e(s3,xge),e(xge,NWo),e(s3,jWo),e(s3,kge),e(kge,DWo),e(Ze,GWo),e(Ze,Sge),e(Sge,OWo),e(Ze,VWo),g(MA,Ze,null),b(c,IBe,u),b(c,Hd,u),e(Hd,l3),e(l3,Rge),g(EA,Rge,null),e(Hd,XWo),e(Hd,Bge),e(Bge,zWo),b(c,qBe,u),b(c,gr,u),g(CA,gr,null),e(gr,QWo),e(gr,Ud),e(Ud,WWo),e(Ud,UG),e(UG,HWo),e(Ud,UWo),e(Ud,JG),e(JG,JWo),e(Ud,YWo),e(gr,KWo),e(gr,wA),e(wA,ZWo),e(wA,Pge),e(Pge,eHo),e(wA,oHo),e(gr,rHo),e(gr,lt),g(AA,lt,null),e(lt,tHo),e(lt,$ge),e($ge,aHo),e(lt,nHo),e(lt,Jd),e(Jd,sHo),e(Jd,Ige),e(Ige,lHo),e(Jd,iHo),e(Jd,YG),e(YG,dHo),e(Jd,cHo),e(lt,fHo),e(lt,qge),e(qge,mHo),e(lt,gHo),g(yA,lt,null),e(gr,hHo),e(gr,eo),g(LA,eo,null),e(eo,pHo),e(eo,Nge),e(Nge,_Ho),e(eo,uHo),e(eo,dn),e(dn,bHo),e(dn,jge),e(jge,vHo),e(dn,FHo),e(dn,Dge),e(Dge,THo),e(dn,MHo),e(dn,Gge),e(Gge,EHo),e(dn,CHo),e(eo,wHo),e(eo,cn),e(cn,i3),e(i3,Oge),e(Oge,AHo),e(i3,yHo),e(i3,KG),e(KG,LHo),e(i3,xHo),e(cn,kHo),e(cn,d3),e(d3,Vge),e(Vge,SHo),e(d3,RHo),e(d3,ZG),e(ZG,BHo),e(d3,PHo),e(cn,$Ho),e(cn,c3),e(c3,Xge),e(Xge,IHo),e(c3,qHo),e(c3,eO),e(eO,NHo),e(c3,jHo),e(cn,DHo),e(cn,f3),e(f3,zge),e(zge,GHo),e(f3,OHo),e(f3,oO),e(oO,VHo),e(f3,XHo),e(eo,zHo),e(eo,m3),e(m3,QHo),e(m3,Qge),e(Qge,WHo),e(m3,HHo),e(m3,Wge),e(Wge,UHo),e(eo,JHo),e(eo,Hge),e(Hge,YHo),e(eo,KHo),g(xA,eo,null),b(c,NBe,u),b(c,Yd,u),e(Yd,g3),e(g3,Uge),g(kA,Uge,null),e(Yd,ZHo),e(Yd,Jge),e(Jge,eUo),b(c,jBe,u),b(c,hr,u),g(SA,hr,null),e(hr,oUo),e(hr,Kd),e(Kd,rUo),e(Kd,rO),e(rO,tUo),e(Kd,aUo),e(Kd,tO),e(tO,nUo),e(Kd,sUo),e(hr,lUo),e(hr,RA),e(RA,iUo),e(RA,Yge),e(Yge,dUo),e(RA,cUo),e(hr,fUo),e(hr,it),g(BA,it,null),e(it,mUo),e(it,Kge),e(Kge,gUo),e(it,hUo),e(it,Zd),e(Zd,pUo),e(Zd,Zge),e(Zge,_Uo),e(Zd,uUo),e(Zd,aO),e(aO,bUo),e(Zd,vUo),e(it,FUo),e(it,ehe),e(ehe,TUo),e(it,MUo),g(PA,it,null),e(hr,EUo),e(hr,oo),g($A,oo,null),e(oo,CUo),e(oo,ohe),e(ohe,wUo),e(oo,AUo),e(oo,fn),e(fn,yUo),e(fn,rhe),e(rhe,LUo),e(fn,xUo),e(fn,the),e(the,kUo),e(fn,SUo),e(fn,ahe),e(ahe,RUo),e(fn,BUo),e(oo,PUo),e(oo,ec),e(ec,h3),e(h3,nhe),e(nhe,$Uo),e(h3,IUo),e(h3,nO),e(nO,qUo),e(h3,NUo),e(ec,jUo),e(ec,p3),e(p3,she),e(she,DUo),e(p3,GUo),e(p3,sO),e(sO,OUo),e(p3,VUo),e(ec,XUo),e(ec,_3),e(_3,lhe),e(lhe,zUo),e(_3,QUo),e(_3,lO),e(lO,WUo),e(_3,HUo),e(oo,UUo),e(oo,u3),e(u3,JUo),e(u3,ihe),e(ihe,YUo),e(u3,KUo),e(u3,dhe),e(dhe,ZUo),e(oo,eJo),e(oo,che),e(che,oJo),e(oo,rJo),g(IA,oo,null),b(c,DBe,u),b(c,oc,u),e(oc,b3),e(b3,fhe),g(qA,fhe,null),e(oc,tJo),e(oc,mhe),e(mhe,aJo),b(c,GBe,u),b(c,pr,u),g(NA,pr,null),e(pr,nJo),e(pr,rc),e(rc,sJo),e(rc,iO),e(iO,lJo),e(rc,iJo),e(rc,dO),e(dO,dJo),e(rc,cJo),e(pr,fJo),e(pr,jA),e(jA,mJo),e(jA,ghe),e(ghe,gJo),e(jA,hJo),e(pr,pJo),e(pr,dt),g(DA,dt,null),e(dt,_Jo),e(dt,hhe),e(hhe,uJo),e(dt,bJo),e(dt,tc),e(tc,vJo),e(tc,phe),e(phe,FJo),e(tc,TJo),e(tc,cO),e(cO,MJo),e(tc,EJo),e(dt,CJo),e(dt,_he),e(_he,wJo),e(dt,AJo),g(GA,dt,null),e(pr,yJo),e(pr,ro),g(OA,ro,null),e(ro,LJo),e(ro,uhe),e(uhe,xJo),e(ro,kJo),e(ro,mn),e(mn,SJo),e(mn,bhe),e(bhe,RJo),e(mn,BJo),e(mn,vhe),e(vhe,PJo),e(mn,$Jo),e(mn,Fhe),e(Fhe,IJo),e(mn,qJo),e(ro,NJo),e(ro,The),e(The,v3),e(v3,Mhe),e(Mhe,jJo),e(v3,DJo),e(v3,fO),e(fO,GJo),e(v3,OJo),e(ro,VJo),e(ro,F3),e(F3,XJo),e(F3,Ehe),e(Ehe,zJo),e(F3,QJo),e(F3,Che),e(Che,WJo),e(ro,HJo),e(ro,whe),e(whe,UJo),e(ro,JJo),g(VA,ro,null),b(c,OBe,u),b(c,ac,u),e(ac,T3),e(T3,Ahe),g(XA,Ahe,null),e(ac,YJo),e(ac,yhe),e(yhe,KJo),b(c,VBe,u),b(c,_r,u),g(zA,_r,null),e(_r,ZJo),e(_r,nc),e(nc,eYo),e(nc,mO),e(mO,oYo),e(nc,rYo),e(nc,gO),e(gO,tYo),e(nc,aYo),e(_r,nYo),e(_r,QA),e(QA,sYo),e(QA,Lhe),e(Lhe,lYo),e(QA,iYo),e(_r,dYo),e(_r,ct),g(WA,ct,null),e(ct,cYo),e(ct,xhe),e(xhe,fYo),e(ct,mYo),e(ct,sc),e(sc,gYo),e(sc,khe),e(khe,hYo),e(sc,pYo),e(sc,hO),e(hO,_Yo),e(sc,uYo),e(ct,bYo),e(ct,She),e(She,vYo),e(ct,FYo),g(HA,ct,null),e(_r,TYo),e(_r,to),g(UA,to,null),e(to,MYo),e(to,Rhe),e(Rhe,EYo),e(to,CYo),e(to,gn),e(gn,wYo),e(gn,Bhe),e(Bhe,AYo),e(gn,yYo),e(gn,Phe),e(Phe,LYo),e(gn,xYo),e(gn,$he),e($he,kYo),e(gn,SYo),e(to,RYo),e(to,Ihe),e(Ihe,M3),e(M3,qhe),e(qhe,BYo),e(M3,PYo),e(M3,pO),e(pO,$Yo),e(M3,IYo),e(to,qYo),e(to,E3),e(E3,NYo),e(E3,Nhe),e(Nhe,jYo),e(E3,DYo),e(E3,jhe),e(jhe,GYo),e(to,OYo),e(to,Dhe),e(Dhe,VYo),e(to,XYo),g(JA,to,null),b(c,XBe,u),b(c,lc,u),e(lc,C3),e(C3,Ghe),g(YA,Ghe,null),e(lc,zYo),e(lc,Ohe),e(Ohe,QYo),b(c,zBe,u),b(c,ur,u),g(KA,ur,null),e(ur,WYo),e(ur,ic),e(ic,HYo),e(ic,_O),e(_O,UYo),e(ic,JYo),e(ic,uO),e(uO,YYo),e(ic,KYo),e(ur,ZYo),e(ur,ZA),e(ZA,eKo),e(ZA,Vhe),e(Vhe,oKo),e(ZA,rKo),e(ur,tKo),e(ur,ft),g(e0,ft,null),e(ft,aKo),e(ft,Xhe),e(Xhe,nKo),e(ft,sKo),e(ft,dc),e(dc,lKo),e(dc,zhe),e(zhe,iKo),e(dc,dKo),e(dc,bO),e(bO,cKo),e(dc,fKo),e(ft,mKo),e(ft,Qhe),e(Qhe,gKo),e(ft,hKo),g(o0,ft,null),e(ur,pKo),e(ur,ao),g(r0,ao,null),e(ao,_Ko),e(ao,Whe),e(Whe,uKo),e(ao,bKo),e(ao,hn),e(hn,vKo),e(hn,Hhe),e(Hhe,FKo),e(hn,TKo),e(hn,Uhe),e(Uhe,MKo),e(hn,EKo),e(hn,Jhe),e(Jhe,CKo),e(hn,wKo),e(ao,AKo),e(ao,pn),e(pn,w3),e(w3,Yhe),e(Yhe,yKo),e(w3,LKo),e(w3,vO),e(vO,xKo),e(w3,kKo),e(pn,SKo),e(pn,A3),e(A3,Khe),e(Khe,RKo),e(A3,BKo),e(A3,FO),e(FO,PKo),e(A3,$Ko),e(pn,IKo),e(pn,y3),e(y3,Zhe),e(Zhe,qKo),e(y3,NKo),e(y3,TO),e(TO,jKo),e(y3,DKo),e(pn,GKo),e(pn,L3),e(L3,epe),e(epe,OKo),e(L3,VKo),e(L3,MO),e(MO,XKo),e(L3,zKo),e(ao,QKo),e(ao,x3),e(x3,WKo),e(x3,ope),e(ope,HKo),e(x3,UKo),e(x3,rpe),e(rpe,JKo),e(ao,YKo),e(ao,tpe),e(tpe,KKo),e(ao,ZKo),g(t0,ao,null),b(c,QBe,u),b(c,cc,u),e(cc,k3),e(k3,ape),g(a0,ape,null),e(cc,eZo),e(cc,npe),e(npe,oZo),b(c,WBe,u),b(c,br,u),g(n0,br,null),e(br,rZo),e(br,fc),e(fc,tZo),e(fc,EO),e(EO,aZo),e(fc,nZo),e(fc,CO),e(CO,sZo),e(fc,lZo),e(br,iZo),e(br,s0),e(s0,dZo),e(s0,spe),e(spe,cZo),e(s0,fZo),e(br,mZo),e(br,mt),g(l0,mt,null),e(mt,gZo),e(mt,lpe),e(lpe,hZo),e(mt,pZo),e(mt,mc),e(mc,_Zo),e(mc,ipe),e(ipe,uZo),e(mc,bZo),e(mc,wO),e(wO,vZo),e(mc,FZo),e(mt,TZo),e(mt,dpe),e(dpe,MZo),e(mt,EZo),g(i0,mt,null),e(br,CZo),e(br,no),g(d0,no,null),e(no,wZo),e(no,cpe),e(cpe,AZo),e(no,yZo),e(no,_n),e(_n,LZo),e(_n,fpe),e(fpe,xZo),e(_n,kZo),e(_n,mpe),e(mpe,SZo),e(_n,RZo),e(_n,gpe),e(gpe,BZo),e(_n,PZo),e(no,$Zo),e(no,hpe),e(hpe,S3),e(S3,ppe),e(ppe,IZo),e(S3,qZo),e(S3,AO),e(AO,NZo),e(S3,jZo),e(no,DZo),e(no,R3),e(R3,GZo),e(R3,_pe),e(_pe,OZo),e(R3,VZo),e(R3,upe),e(upe,XZo),e(no,zZo),e(no,bpe),e(bpe,QZo),e(no,WZo),g(c0,no,null),b(c,HBe,u),b(c,gc,u),e(gc,B3),e(B3,vpe),g(f0,vpe,null),e(gc,HZo),e(gc,Fpe),e(Fpe,UZo),b(c,UBe,u),b(c,vr,u),g(m0,vr,null),e(vr,JZo),e(vr,hc),e(hc,YZo),e(hc,yO),e(yO,KZo),e(hc,ZZo),e(hc,LO),e(LO,eer),e(hc,oer),e(vr,rer),e(vr,g0),e(g0,ter),e(g0,Tpe),e(Tpe,aer),e(g0,ner),e(vr,ser),e(vr,gt),g(h0,gt,null),e(gt,ler),e(gt,Mpe),e(Mpe,ier),e(gt,der),e(gt,pc),e(pc,cer),e(pc,Epe),e(Epe,fer),e(pc,mer),e(pc,xO),e(xO,ger),e(pc,her),e(gt,per),e(gt,Cpe),e(Cpe,_er),e(gt,uer),g(p0,gt,null),e(vr,ber),e(vr,ho),g(_0,ho,null),e(ho,ver),e(ho,wpe),e(wpe,Fer),e(ho,Ter),e(ho,un),e(un,Mer),e(un,Ape),e(Ape,Eer),e(un,Cer),e(un,ype),e(ype,wer),e(un,Aer),e(un,Lpe),e(Lpe,yer),e(un,Ler),e(ho,xer),e(ho,x),e(x,P3),e(P3,xpe),e(xpe,ker),e(P3,Ser),e(P3,kO),e(kO,Rer),e(P3,Ber),e(x,Per),e(x,$3),e($3,kpe),e(kpe,$er),e($3,Ier),e($3,SO),e(SO,qer),e($3,Ner),e(x,jer),e(x,I3),e(I3,Spe),e(Spe,Der),e(I3,Ger),e(I3,RO),e(RO,Oer),e(I3,Ver),e(x,Xer),e(x,q3),e(q3,Rpe),e(Rpe,zer),e(q3,Qer),e(q3,BO),e(BO,Wer),e(q3,Her),e(x,Uer),e(x,N3),e(N3,Bpe),e(Bpe,Jer),e(N3,Yer),e(N3,PO),e(PO,Ker),e(N3,Zer),e(x,eor),e(x,j3),e(j3,Ppe),e(Ppe,oor),e(j3,ror),e(j3,$O),e($O,tor),e(j3,aor),e(x,nor),e(x,D3),e(D3,$pe),e($pe,sor),e(D3,lor),e(D3,IO),e(IO,ior),e(D3,dor),e(x,cor),e(x,G3),e(G3,Ipe),e(Ipe,mor),e(G3,gor),e(G3,qO),e(qO,hor),e(G3,por),e(x,_or),e(x,O3),e(O3,qpe),e(qpe,uor),e(O3,bor),e(O3,NO),e(NO,vor),e(O3,For),e(x,Tor),e(x,V3),e(V3,Npe),e(Npe,Mor),e(V3,Eor),e(V3,jO),e(jO,Cor),e(V3,wor),e(x,Aor),e(x,X3),e(X3,jpe),e(jpe,yor),e(X3,Lor),e(X3,DO),e(DO,xor),e(X3,kor),e(x,Sor),e(x,z3),e(z3,Dpe),e(Dpe,Ror),e(z3,Bor),e(z3,GO),e(GO,Por),e(z3,$or),e(x,Ior),e(x,Q3),e(Q3,Gpe),e(Gpe,qor),e(Q3,Nor),e(Q3,OO),e(OO,jor),e(Q3,Dor),e(x,Gor),e(x,W3),e(W3,Ope),e(Ope,Oor),e(W3,Vor),e(W3,VO),e(VO,Xor),e(W3,zor),e(x,Qor),e(x,H3),e(H3,Vpe),e(Vpe,Wor),e(H3,Hor),e(H3,XO),e(XO,Uor),e(H3,Jor),e(x,Yor),e(x,U3),e(U3,Xpe),e(Xpe,Kor),e(U3,Zor),e(U3,zO),e(zO,err),e(U3,orr),e(x,rrr),e(x,Os),e(Os,zpe),e(zpe,trr),e(Os,arr),e(Os,QO),e(QO,nrr),e(Os,srr),e(Os,WO),e(WO,lrr),e(Os,irr),e(x,drr),e(x,J3),e(J3,Qpe),e(Qpe,crr),e(J3,frr),e(J3,HO),e(HO,mrr),e(J3,grr),e(x,hrr),e(x,Y3),e(Y3,Wpe),e(Wpe,prr),e(Y3,_rr),e(Y3,UO),e(UO,urr),e(Y3,brr),e(x,vrr),e(x,K3),e(K3,Hpe),e(Hpe,Frr),e(K3,Trr),e(K3,JO),e(JO,Mrr),e(K3,Err),e(x,Crr),e(x,Z3),e(Z3,Upe),e(Upe,wrr),e(Z3,Arr),e(Z3,YO),e(YO,yrr),e(Z3,Lrr),e(x,xrr),e(x,ev),e(ev,Jpe),e(Jpe,krr),e(ev,Srr),e(ev,KO),e(KO,Rrr),e(ev,Brr),e(x,Prr),e(x,ov),e(ov,Ype),e(Ype,$rr),e(ov,Irr),e(ov,ZO),e(ZO,qrr),e(ov,Nrr),e(x,jrr),e(x,rv),e(rv,Kpe),e(Kpe,Drr),e(rv,Grr),e(rv,eV),e(eV,Orr),e(rv,Vrr),e(x,Xrr),e(x,tv),e(tv,Zpe),e(Zpe,zrr),e(tv,Qrr),e(tv,oV),e(oV,Wrr),e(tv,Hrr),e(x,Urr),e(x,av),e(av,e_e),e(e_e,Jrr),e(av,Yrr),e(av,rV),e(rV,Krr),e(av,Zrr),e(x,etr),e(x,nv),e(nv,o_e),e(o_e,otr),e(nv,rtr),e(nv,tV),e(tV,ttr),e(nv,atr),e(x,ntr),e(x,sv),e(sv,r_e),e(r_e,str),e(sv,ltr),e(sv,aV),e(aV,itr),e(sv,dtr),e(x,ctr),e(x,lv),e(lv,t_e),e(t_e,ftr),e(lv,mtr),e(lv,nV),e(nV,gtr),e(lv,htr),e(x,ptr),e(x,iv),e(iv,a_e),e(a_e,_tr),e(iv,utr),e(iv,sV),e(sV,btr),e(iv,vtr),e(x,Ftr),e(x,dv),e(dv,n_e),e(n_e,Ttr),e(dv,Mtr),e(dv,lV),e(lV,Etr),e(dv,Ctr),e(x,wtr),e(x,cv),e(cv,s_e),e(s_e,Atr),e(cv,ytr),e(cv,iV),e(iV,Ltr),e(cv,xtr),e(x,ktr),e(x,fv),e(fv,l_e),e(l_e,Str),e(fv,Rtr),e(fv,dV),e(dV,Btr),e(fv,Ptr),e(x,$tr),e(x,mv),e(mv,i_e),e(i_e,Itr),e(mv,qtr),e(mv,cV),e(cV,Ntr),e(mv,jtr),e(x,Dtr),e(x,gv),e(gv,d_e),e(d_e,Gtr),e(gv,Otr),e(gv,fV),e(fV,Vtr),e(gv,Xtr),e(x,ztr),e(x,hv),e(hv,c_e),e(c_e,Qtr),e(hv,Wtr),e(hv,mV),e(mV,Htr),e(hv,Utr),e(x,Jtr),e(x,pv),e(pv,f_e),e(f_e,Ytr),e(pv,Ktr),e(pv,gV),e(gV,Ztr),e(pv,ear),e(x,oar),e(x,_v),e(_v,m_e),e(m_e,rar),e(_v,tar),e(_v,hV),e(hV,aar),e(_v,nar),e(x,sar),e(x,uv),e(uv,g_e),e(g_e,lar),e(uv,iar),e(uv,pV),e(pV,dar),e(uv,car),e(x,far),e(x,bv),e(bv,h_e),e(h_e,mar),e(bv,gar),e(bv,_V),e(_V,har),e(bv,par),e(x,_ar),e(x,vv),e(vv,p_e),e(p_e,uar),e(vv,bar),e(vv,uV),e(uV,Far),e(vv,Tar),e(x,Mar),e(x,Fv),e(Fv,__e),e(__e,Ear),e(Fv,Car),e(Fv,bV),e(bV,war),e(Fv,Aar),e(x,yar),e(x,Tv),e(Tv,u_e),e(u_e,Lar),e(Tv,xar),e(Tv,vV),e(vV,kar),e(Tv,Sar),e(x,Rar),e(x,Mv),e(Mv,b_e),e(b_e,Bar),e(Mv,Par),e(Mv,FV),e(FV,$ar),e(Mv,Iar),e(ho,qar),e(ho,v_e),e(v_e,Nar),e(ho,jar),g(u0,ho,null),b(c,JBe,u),b(c,_c,u),e(_c,Ev),e(Ev,F_e),g(b0,F_e,null),e(_c,Dar),e(_c,T_e),e(T_e,Gar),b(c,YBe,u),b(c,Fr,u),g(v0,Fr,null),e(Fr,Oar),e(Fr,uc),e(uc,Var),e(uc,TV),e(TV,Xar),e(uc,zar),e(uc,MV),e(MV,Qar),e(uc,War),e(Fr,Har),e(Fr,F0),e(F0,Uar),e(F0,M_e),e(M_e,Jar),e(F0,Yar),e(Fr,Kar),e(Fr,ht),g(T0,ht,null),e(ht,Zar),e(ht,E_e),e(E_e,enr),e(ht,onr),e(ht,bc),e(bc,rnr),e(bc,C_e),e(C_e,tnr),e(bc,anr),e(bc,EV),e(EV,nnr),e(bc,snr),e(ht,lnr),e(ht,w_e),e(w_e,inr),e(ht,dnr),g(M0,ht,null),e(Fr,cnr),e(Fr,po),g(E0,po,null),e(po,fnr),e(po,A_e),e(A_e,mnr),e(po,gnr),e(po,bn),e(bn,hnr),e(bn,y_e),e(y_e,pnr),e(bn,_nr),e(bn,L_e),e(L_e,unr),e(bn,bnr),e(bn,x_e),e(x_e,vnr),e(bn,Fnr),e(po,Tnr),e(po,H),e(H,Cv),e(Cv,k_e),e(k_e,Mnr),e(Cv,Enr),e(Cv,CV),e(CV,Cnr),e(Cv,wnr),e(H,Anr),e(H,wv),e(wv,S_e),e(S_e,ynr),e(wv,Lnr),e(wv,wV),e(wV,xnr),e(wv,knr),e(H,Snr),e(H,Av),e(Av,R_e),e(R_e,Rnr),e(Av,Bnr),e(Av,AV),e(AV,Pnr),e(Av,$nr),e(H,Inr),e(H,yv),e(yv,B_e),e(B_e,qnr),e(yv,Nnr),e(yv,yV),e(yV,jnr),e(yv,Dnr),e(H,Gnr),e(H,Lv),e(Lv,P_e),e(P_e,Onr),e(Lv,Vnr),e(Lv,LV),e(LV,Xnr),e(Lv,znr),e(H,Qnr),e(H,xv),e(xv,$_e),e($_e,Wnr),e(xv,Hnr),e(xv,xV),e(xV,Unr),e(xv,Jnr),e(H,Ynr),e(H,kv),e(kv,I_e),e(I_e,Knr),e(kv,Znr),e(kv,kV),e(kV,esr),e(kv,osr),e(H,rsr),e(H,Sv),e(Sv,q_e),e(q_e,tsr),e(Sv,asr),e(Sv,SV),e(SV,nsr),e(Sv,ssr),e(H,lsr),e(H,Rv),e(Rv,N_e),e(N_e,isr),e(Rv,dsr),e(Rv,RV),e(RV,csr),e(Rv,fsr),e(H,msr),e(H,Bv),e(Bv,j_e),e(j_e,gsr),e(Bv,hsr),e(Bv,BV),e(BV,psr),e(Bv,_sr),e(H,usr),e(H,Pv),e(Pv,D_e),e(D_e,bsr),e(Pv,vsr),e(Pv,PV),e(PV,Fsr),e(Pv,Tsr),e(H,Msr),e(H,$v),e($v,G_e),e(G_e,Esr),e($v,Csr),e($v,$V),e($V,wsr),e($v,Asr),e(H,ysr),e(H,Iv),e(Iv,O_e),e(O_e,Lsr),e(Iv,xsr),e(Iv,IV),e(IV,ksr),e(Iv,Ssr),e(H,Rsr),e(H,qv),e(qv,V_e),e(V_e,Bsr),e(qv,Psr),e(qv,qV),e(qV,$sr),e(qv,Isr),e(H,qsr),e(H,Nv),e(Nv,X_e),e(X_e,Nsr),e(Nv,jsr),e(Nv,NV),e(NV,Dsr),e(Nv,Gsr),e(H,Osr),e(H,jv),e(jv,z_e),e(z_e,Vsr),e(jv,Xsr),e(jv,jV),e(jV,zsr),e(jv,Qsr),e(H,Wsr),e(H,Dv),e(Dv,Q_e),e(Q_e,Hsr),e(Dv,Usr),e(Dv,DV),e(DV,Jsr),e(Dv,Ysr),e(H,Ksr),e(H,Gv),e(Gv,W_e),e(W_e,Zsr),e(Gv,elr),e(Gv,GV),e(GV,olr),e(Gv,rlr),e(H,tlr),e(H,Ov),e(Ov,H_e),e(H_e,alr),e(Ov,nlr),e(Ov,OV),e(OV,slr),e(Ov,llr),e(H,ilr),e(H,Vv),e(Vv,U_e),e(U_e,dlr),e(Vv,clr),e(Vv,VV),e(VV,flr),e(Vv,mlr),e(H,glr),e(H,Xv),e(Xv,J_e),e(J_e,hlr),e(Xv,plr),e(Xv,XV),e(XV,_lr),e(Xv,ulr),e(H,blr),e(H,zv),e(zv,Y_e),e(Y_e,vlr),e(zv,Flr),e(zv,zV),e(zV,Tlr),e(zv,Mlr),e(H,Elr),e(H,Qv),e(Qv,K_e),e(K_e,Clr),e(Qv,wlr),e(Qv,QV),e(QV,Alr),e(Qv,ylr),e(po,Llr),e(po,Z_e),e(Z_e,xlr),e(po,klr),g(C0,po,null),b(c,KBe,u),b(c,vc,u),e(vc,Wv),e(Wv,eue),g(w0,eue,null),e(vc,Slr),e(vc,oue),e(oue,Rlr),b(c,ZBe,u),b(c,Tr,u),g(A0,Tr,null),e(Tr,Blr),e(Tr,Fc),e(Fc,Plr),e(Fc,WV),e(WV,$lr),e(Fc,Ilr),e(Fc,HV),e(HV,qlr),e(Fc,Nlr),e(Tr,jlr),e(Tr,y0),e(y0,Dlr),e(y0,rue),e(rue,Glr),e(y0,Olr),e(Tr,Vlr),e(Tr,pt),g(L0,pt,null),e(pt,Xlr),e(pt,tue),e(tue,zlr),e(pt,Qlr),e(pt,Tc),e(Tc,Wlr),e(Tc,aue),e(aue,Hlr),e(Tc,Ulr),e(Tc,UV),e(UV,Jlr),e(Tc,Ylr),e(pt,Klr),e(pt,nue),e(nue,Zlr),e(pt,eir),g(x0,pt,null),e(Tr,oir),e(Tr,_o),g(k0,_o,null),e(_o,rir),e(_o,sue),e(sue,tir),e(_o,air),e(_o,vn),e(vn,nir),e(vn,lue),e(lue,sir),e(vn,lir),e(vn,iue),e(iue,iir),e(vn,dir),e(vn,due),e(due,cir),e(vn,fir),e(_o,mir),e(_o,fe),e(fe,Hv),e(Hv,cue),e(cue,gir),e(Hv,hir),e(Hv,JV),e(JV,pir),e(Hv,_ir),e(fe,uir),e(fe,Uv),e(Uv,fue),e(fue,bir),e(Uv,vir),e(Uv,YV),e(YV,Fir),e(Uv,Tir),e(fe,Mir),e(fe,Jv),e(Jv,mue),e(mue,Eir),e(Jv,Cir),e(Jv,KV),e(KV,wir),e(Jv,Air),e(fe,yir),e(fe,Yv),e(Yv,gue),e(gue,Lir),e(Yv,xir),e(Yv,ZV),e(ZV,kir),e(Yv,Sir),e(fe,Rir),e(fe,Kv),e(Kv,hue),e(hue,Bir),e(Kv,Pir),e(Kv,eX),e(eX,$ir),e(Kv,Iir),e(fe,qir),e(fe,Zv),e(Zv,pue),e(pue,Nir),e(Zv,jir),e(Zv,oX),e(oX,Dir),e(Zv,Gir),e(fe,Oir),e(fe,eF),e(eF,_ue),e(_ue,Vir),e(eF,Xir),e(eF,rX),e(rX,zir),e(eF,Qir),e(fe,Wir),e(fe,oF),e(oF,uue),e(uue,Hir),e(oF,Uir),e(oF,tX),e(tX,Jir),e(oF,Yir),e(fe,Kir),e(fe,rF),e(rF,bue),e(bue,Zir),e(rF,edr),e(rF,aX),e(aX,odr),e(rF,rdr),e(fe,tdr),e(fe,tF),e(tF,vue),e(vue,adr),e(tF,ndr),e(tF,nX),e(nX,sdr),e(tF,ldr),e(fe,idr),e(fe,aF),e(aF,Fue),e(Fue,ddr),e(aF,cdr),e(aF,sX),e(sX,fdr),e(aF,mdr),e(fe,gdr),e(fe,nF),e(nF,Tue),e(Tue,hdr),e(nF,pdr),e(nF,lX),e(lX,_dr),e(nF,udr),e(_o,bdr),e(_o,Mue),e(Mue,vdr),e(_o,Fdr),g(S0,_o,null),b(c,ePe,u),b(c,Mc,u),e(Mc,sF),e(sF,Eue),g(R0,Eue,null),e(Mc,Tdr),e(Mc,Cue),e(Cue,Mdr),b(c,oPe,u),b(c,Mr,u),g(B0,Mr,null),e(Mr,Edr),e(Mr,Ec),e(Ec,Cdr),e(Ec,iX),e(iX,wdr),e(Ec,Adr),e(Ec,dX),e(dX,ydr),e(Ec,Ldr),e(Mr,xdr),e(Mr,P0),e(P0,kdr),e(P0,wue),e(wue,Sdr),e(P0,Rdr),e(Mr,Bdr),e(Mr,_t),g($0,_t,null),e(_t,Pdr),e(_t,Aue),e(Aue,$dr),e(_t,Idr),e(_t,Cc),e(Cc,qdr),e(Cc,yue),e(yue,Ndr),e(Cc,jdr),e(Cc,cX),e(cX,Ddr),e(Cc,Gdr),e(_t,Odr),e(_t,Lue),e(Lue,Vdr),e(_t,Xdr),g(I0,_t,null),e(Mr,zdr),e(Mr,uo),g(q0,uo,null),e(uo,Qdr),e(uo,xue),e(xue,Wdr),e(uo,Hdr),e(uo,Fn),e(Fn,Udr),e(Fn,kue),e(kue,Jdr),e(Fn,Ydr),e(Fn,Sue),e(Sue,Kdr),e(Fn,Zdr),e(Fn,Rue),e(Rue,ecr),e(Fn,ocr),e(uo,rcr),e(uo,N0),e(N0,lF),e(lF,Bue),e(Bue,tcr),e(lF,acr),e(lF,fX),e(fX,ncr),e(lF,scr),e(N0,lcr),e(N0,iF),e(iF,Pue),e(Pue,icr),e(iF,dcr),e(iF,mX),e(mX,ccr),e(iF,fcr),e(uo,mcr),e(uo,$ue),e($ue,gcr),e(uo,hcr),g(j0,uo,null),b(c,rPe,u),b(c,wc,u),e(wc,dF),e(dF,Iue),g(D0,Iue,null),e(wc,pcr),e(wc,que),e(que,_cr),b(c,tPe,u),b(c,Er,u),g(G0,Er,null),e(Er,ucr),e(Er,Ac),e(Ac,bcr),e(Ac,gX),e(gX,vcr),e(Ac,Fcr),e(Ac,hX),e(hX,Tcr),e(Ac,Mcr),e(Er,Ecr),e(Er,O0),e(O0,Ccr),e(O0,Nue),e(Nue,wcr),e(O0,Acr),e(Er,ycr),e(Er,ut),g(V0,ut,null),e(ut,Lcr),e(ut,jue),e(jue,xcr),e(ut,kcr),e(ut,yc),e(yc,Scr),e(yc,Due),e(Due,Rcr),e(yc,Bcr),e(yc,pX),e(pX,Pcr),e(yc,$cr),e(ut,Icr),e(ut,Gue),e(Gue,qcr),e(ut,Ncr),g(X0,ut,null),e(Er,jcr),e(Er,bo),g(z0,bo,null),e(bo,Dcr),e(bo,Oue),e(Oue,Gcr),e(bo,Ocr),e(bo,Tn),e(Tn,Vcr),e(Tn,Vue),e(Vue,Xcr),e(Tn,zcr),e(Tn,Xue),e(Xue,Qcr),e(Tn,Wcr),e(Tn,zue),e(zue,Hcr),e(Tn,Ucr),e(bo,Jcr),e(bo,J),e(J,cF),e(cF,Que),e(Que,Ycr),e(cF,Kcr),e(cF,_X),e(_X,Zcr),e(cF,efr),e(J,ofr),e(J,fF),e(fF,Wue),e(Wue,rfr),e(fF,tfr),e(fF,uX),e(uX,afr),e(fF,nfr),e(J,sfr),e(J,mF),e(mF,Hue),e(Hue,lfr),e(mF,ifr),e(mF,bX),e(bX,dfr),e(mF,cfr),e(J,ffr),e(J,gF),e(gF,Uue),e(Uue,mfr),e(gF,gfr),e(gF,vX),e(vX,hfr),e(gF,pfr),e(J,_fr),e(J,hF),e(hF,Jue),e(Jue,ufr),e(hF,bfr),e(hF,FX),e(FX,vfr),e(hF,Ffr),e(J,Tfr),e(J,pF),e(pF,Yue),e(Yue,Mfr),e(pF,Efr),e(pF,TX),e(TX,Cfr),e(pF,wfr),e(J,Afr),e(J,_F),e(_F,Kue),e(Kue,yfr),e(_F,Lfr),e(_F,MX),e(MX,xfr),e(_F,kfr),e(J,Sfr),e(J,uF),e(uF,Zue),e(Zue,Rfr),e(uF,Bfr),e(uF,EX),e(EX,Pfr),e(uF,$fr),e(J,Ifr),e(J,bF),e(bF,e1e),e(e1e,qfr),e(bF,Nfr),e(bF,CX),e(CX,jfr),e(bF,Dfr),e(J,Gfr),e(J,vF),e(vF,o1e),e(o1e,Ofr),e(vF,Vfr),e(vF,wX),e(wX,Xfr),e(vF,zfr),e(J,Qfr),e(J,FF),e(FF,r1e),e(r1e,Wfr),e(FF,Hfr),e(FF,AX),e(AX,Ufr),e(FF,Jfr),e(J,Yfr),e(J,TF),e(TF,t1e),e(t1e,Kfr),e(TF,Zfr),e(TF,yX),e(yX,emr),e(TF,omr),e(J,rmr),e(J,MF),e(MF,a1e),e(a1e,tmr),e(MF,amr),e(MF,LX),e(LX,nmr),e(MF,smr),e(J,lmr),e(J,EF),e(EF,n1e),e(n1e,imr),e(EF,dmr),e(EF,xX),e(xX,cmr),e(EF,fmr),e(J,mmr),e(J,CF),e(CF,s1e),e(s1e,gmr),e(CF,hmr),e(CF,kX),e(kX,pmr),e(CF,_mr),e(J,umr),e(J,wF),e(wF,l1e),e(l1e,bmr),e(wF,vmr),e(wF,SX),e(SX,Fmr),e(wF,Tmr),e(J,Mmr),e(J,AF),e(AF,i1e),e(i1e,Emr),e(AF,Cmr),e(AF,RX),e(RX,wmr),e(AF,Amr),e(J,ymr),e(J,yF),e(yF,d1e),e(d1e,Lmr),e(yF,xmr),e(yF,BX),e(BX,kmr),e(yF,Smr),e(J,Rmr),e(J,LF),e(LF,c1e),e(c1e,Bmr),e(LF,Pmr),e(LF,PX),e(PX,$mr),e(LF,Imr),e(J,qmr),e(J,xF),e(xF,f1e),e(f1e,Nmr),e(xF,jmr),e(xF,$X),e($X,Dmr),e(xF,Gmr),e(bo,Omr),e(bo,m1e),e(m1e,Vmr),e(bo,Xmr),g(Q0,bo,null),b(c,aPe,u),b(c,Lc,u),e(Lc,kF),e(kF,g1e),g(W0,g1e,null),e(Lc,zmr),e(Lc,h1e),e(h1e,Qmr),b(c,nPe,u),b(c,Cr,u),g(H0,Cr,null),e(Cr,Wmr),e(Cr,xc),e(xc,Hmr),e(xc,IX),e(IX,Umr),e(xc,Jmr),e(xc,qX),e(qX,Ymr),e(xc,Kmr),e(Cr,Zmr),e(Cr,U0),e(U0,egr),e(U0,p1e),e(p1e,ogr),e(U0,rgr),e(Cr,tgr),e(Cr,bt),g(J0,bt,null),e(bt,agr),e(bt,_1e),e(_1e,ngr),e(bt,sgr),e(bt,kc),e(kc,lgr),e(kc,u1e),e(u1e,igr),e(kc,dgr),e(kc,NX),e(NX,cgr),e(kc,fgr),e(bt,mgr),e(bt,b1e),e(b1e,ggr),e(bt,hgr),g(Y0,bt,null),e(Cr,pgr),e(Cr,vo),g(K0,vo,null),e(vo,_gr),e(vo,v1e),e(v1e,ugr),e(vo,bgr),e(vo,Mn),e(Mn,vgr),e(Mn,F1e),e(F1e,Fgr),e(Mn,Tgr),e(Mn,T1e),e(T1e,Mgr),e(Mn,Egr),e(Mn,M1e),e(M1e,Cgr),e(Mn,wgr),e(vo,Agr),e(vo,be),e(be,SF),e(SF,E1e),e(E1e,ygr),e(SF,Lgr),e(SF,jX),e(jX,xgr),e(SF,kgr),e(be,Sgr),e(be,RF),e(RF,C1e),e(C1e,Rgr),e(RF,Bgr),e(RF,DX),e(DX,Pgr),e(RF,$gr),e(be,Igr),e(be,BF),e(BF,w1e),e(w1e,qgr),e(BF,Ngr),e(BF,GX),e(GX,jgr),e(BF,Dgr),e(be,Ggr),e(be,PF),e(PF,A1e),e(A1e,Ogr),e(PF,Vgr),e(PF,OX),e(OX,Xgr),e(PF,zgr),e(be,Qgr),e(be,$F),e($F,y1e),e(y1e,Wgr),e($F,Hgr),e($F,VX),e(VX,Ugr),e($F,Jgr),e(be,Ygr),e(be,IF),e(IF,L1e),e(L1e,Kgr),e(IF,Zgr),e(IF,XX),e(XX,ehr),e(IF,ohr),e(be,rhr),e(be,qF),e(qF,x1e),e(x1e,thr),e(qF,ahr),e(qF,zX),e(zX,nhr),e(qF,shr),e(be,lhr),e(be,NF),e(NF,k1e),e(k1e,ihr),e(NF,dhr),e(NF,QX),e(QX,chr),e(NF,fhr),e(be,mhr),e(be,jF),e(jF,S1e),e(S1e,ghr),e(jF,hhr),e(jF,WX),e(WX,phr),e(jF,_hr),e(be,uhr),e(be,DF),e(DF,R1e),e(R1e,bhr),e(DF,vhr),e(DF,HX),e(HX,Fhr),e(DF,Thr),e(vo,Mhr),e(vo,B1e),e(B1e,Ehr),e(vo,Chr),g(Z0,vo,null),b(c,sPe,u),b(c,Sc,u),e(Sc,GF),e(GF,P1e),g(ey,P1e,null),e(Sc,whr),e(Sc,$1e),e($1e,Ahr),b(c,lPe,u),b(c,wr,u),g(oy,wr,null),e(wr,yhr),e(wr,Rc),e(Rc,Lhr),e(Rc,UX),e(UX,xhr),e(Rc,khr),e(Rc,JX),e(JX,Shr),e(Rc,Rhr),e(wr,Bhr),e(wr,ry),e(ry,Phr),e(ry,I1e),e(I1e,$hr),e(ry,Ihr),e(wr,qhr),e(wr,vt),g(ty,vt,null),e(vt,Nhr),e(vt,q1e),e(q1e,jhr),e(vt,Dhr),e(vt,Bc),e(Bc,Ghr),e(Bc,N1e),e(N1e,Ohr),e(Bc,Vhr),e(Bc,YX),e(YX,Xhr),e(Bc,zhr),e(vt,Qhr),e(vt,j1e),e(j1e,Whr),e(vt,Hhr),g(ay,vt,null),e(wr,Uhr),e(wr,Fo),g(ny,Fo,null),e(Fo,Jhr),e(Fo,D1e),e(D1e,Yhr),e(Fo,Khr),e(Fo,En),e(En,Zhr),e(En,G1e),e(G1e,epr),e(En,opr),e(En,O1e),e(O1e,rpr),e(En,tpr),e(En,V1e),e(V1e,apr),e(En,npr),e(Fo,spr),e(Fo,V),e(V,OF),e(OF,X1e),e(X1e,lpr),e(OF,ipr),e(OF,KX),e(KX,dpr),e(OF,cpr),e(V,fpr),e(V,VF),e(VF,z1e),e(z1e,mpr),e(VF,gpr),e(VF,ZX),e(ZX,hpr),e(VF,ppr),e(V,_pr),e(V,XF),e(XF,Q1e),e(Q1e,upr),e(XF,bpr),e(XF,ez),e(ez,vpr),e(XF,Fpr),e(V,Tpr),e(V,zF),e(zF,W1e),e(W1e,Mpr),e(zF,Epr),e(zF,oz),e(oz,Cpr),e(zF,wpr),e(V,Apr),e(V,QF),e(QF,H1e),e(H1e,ypr),e(QF,Lpr),e(QF,rz),e(rz,xpr),e(QF,kpr),e(V,Spr),e(V,WF),e(WF,U1e),e(U1e,Rpr),e(WF,Bpr),e(WF,tz),e(tz,Ppr),e(WF,$pr),e(V,Ipr),e(V,HF),e(HF,J1e),e(J1e,qpr),e(HF,Npr),e(HF,az),e(az,jpr),e(HF,Dpr),e(V,Gpr),e(V,UF),e(UF,Y1e),e(Y1e,Opr),e(UF,Vpr),e(UF,nz),e(nz,Xpr),e(UF,zpr),e(V,Qpr),e(V,JF),e(JF,K1e),e(K1e,Wpr),e(JF,Hpr),e(JF,sz),e(sz,Upr),e(JF,Jpr),e(V,Ypr),e(V,YF),e(YF,Z1e),e(Z1e,Kpr),e(YF,Zpr),e(YF,lz),e(lz,e_r),e(YF,o_r),e(V,r_r),e(V,KF),e(KF,e7e),e(e7e,t_r),e(KF,a_r),e(KF,iz),e(iz,n_r),e(KF,s_r),e(V,l_r),e(V,ZF),e(ZF,o7e),e(o7e,i_r),e(ZF,d_r),e(ZF,dz),e(dz,c_r),e(ZF,f_r),e(V,m_r),e(V,eT),e(eT,r7e),e(r7e,g_r),e(eT,h_r),e(eT,cz),e(cz,p_r),e(eT,__r),e(V,u_r),e(V,oT),e(oT,t7e),e(t7e,b_r),e(oT,v_r),e(oT,fz),e(fz,F_r),e(oT,T_r),e(V,M_r),e(V,rT),e(rT,a7e),e(a7e,E_r),e(rT,C_r),e(rT,mz),e(mz,w_r),e(rT,A_r),e(V,y_r),e(V,tT),e(tT,n7e),e(n7e,L_r),e(tT,x_r),e(tT,gz),e(gz,k_r),e(tT,S_r),e(V,R_r),e(V,aT),e(aT,s7e),e(s7e,B_r),e(aT,P_r),e(aT,hz),e(hz,$_r),e(aT,I_r),e(V,q_r),e(V,nT),e(nT,l7e),e(l7e,N_r),e(nT,j_r),e(nT,pz),e(pz,D_r),e(nT,G_r),e(V,O_r),e(V,sT),e(sT,i7e),e(i7e,V_r),e(sT,X_r),e(sT,_z),e(_z,z_r),e(sT,Q_r),e(V,W_r),e(V,lT),e(lT,d7e),e(d7e,H_r),e(lT,U_r),e(lT,uz),e(uz,J_r),e(lT,Y_r),e(V,K_r),e(V,iT),e(iT,c7e),e(c7e,Z_r),e(iT,eur),e(iT,bz),e(bz,our),e(iT,rur),e(V,tur),e(V,dT),e(dT,f7e),e(f7e,aur),e(dT,nur),e(dT,vz),e(vz,sur),e(dT,lur),e(V,iur),e(V,cT),e(cT,m7e),e(m7e,dur),e(cT,cur),e(cT,Fz),e(Fz,fur),e(cT,mur),e(V,gur),e(V,fT),e(fT,g7e),e(g7e,hur),e(fT,pur),e(fT,Tz),e(Tz,_ur),e(fT,uur),e(V,bur),e(V,mT),e(mT,h7e),e(h7e,vur),e(mT,Fur),e(mT,Mz),e(Mz,Tur),e(mT,Mur),e(V,Eur),e(V,gT),e(gT,p7e),e(p7e,Cur),e(gT,wur),e(gT,Ez),e(Ez,Aur),e(gT,yur),e(Fo,Lur),e(Fo,_7e),e(_7e,xur),e(Fo,kur),g(sy,Fo,null),b(c,iPe,u),b(c,Pc,u),e(Pc,hT),e(hT,u7e),g(ly,u7e,null),e(Pc,Sur),e(Pc,b7e),e(b7e,Rur),b(c,dPe,u),b(c,Ar,u),g(iy,Ar,null),e(Ar,Bur),e(Ar,$c),e($c,Pur),e($c,Cz),e(Cz,$ur),e($c,Iur),e($c,wz),e(wz,qur),e($c,Nur),e(Ar,jur),e(Ar,dy),e(dy,Dur),e(dy,v7e),e(v7e,Gur),e(dy,Our),e(Ar,Vur),e(Ar,Ft),g(cy,Ft,null),e(Ft,Xur),e(Ft,F7e),e(F7e,zur),e(Ft,Qur),e(Ft,Ic),e(Ic,Wur),e(Ic,T7e),e(T7e,Hur),e(Ic,Uur),e(Ic,Az),e(Az,Jur),e(Ic,Yur),e(Ft,Kur),e(Ft,M7e),e(M7e,Zur),e(Ft,e1r),g(fy,Ft,null),e(Ar,o1r),e(Ar,To),g(my,To,null),e(To,r1r),e(To,E7e),e(E7e,t1r),e(To,a1r),e(To,Cn),e(Cn,n1r),e(Cn,C7e),e(C7e,s1r),e(Cn,l1r),e(Cn,w7e),e(w7e,i1r),e(Cn,d1r),e(Cn,A7e),e(A7e,c1r),e(Cn,f1r),e(To,m1r),e(To,se),e(se,pT),e(pT,y7e),e(y7e,g1r),e(pT,h1r),e(pT,yz),e(yz,p1r),e(pT,_1r),e(se,u1r),e(se,_T),e(_T,L7e),e(L7e,b1r),e(_T,v1r),e(_T,Lz),e(Lz,F1r),e(_T,T1r),e(se,M1r),e(se,uT),e(uT,x7e),e(x7e,E1r),e(uT,C1r),e(uT,xz),e(xz,w1r),e(uT,A1r),e(se,y1r),e(se,bT),e(bT,k7e),e(k7e,L1r),e(bT,x1r),e(bT,kz),e(kz,k1r),e(bT,S1r),e(se,R1r),e(se,vT),e(vT,S7e),e(S7e,B1r),e(vT,P1r),e(vT,Sz),e(Sz,$1r),e(vT,I1r),e(se,q1r),e(se,FT),e(FT,R7e),e(R7e,N1r),e(FT,j1r),e(FT,Rz),e(Rz,D1r),e(FT,G1r),e(se,O1r),e(se,TT),e(TT,B7e),e(B7e,V1r),e(TT,X1r),e(TT,Bz),e(Bz,z1r),e(TT,Q1r),e(se,W1r),e(se,MT),e(MT,P7e),e(P7e,H1r),e(MT,U1r),e(MT,Pz),e(Pz,J1r),e(MT,Y1r),e(se,K1r),e(se,ET),e(ET,$7e),e($7e,Z1r),e(ET,e7r),e(ET,$z),e($z,o7r),e(ET,r7r),e(se,t7r),e(se,CT),e(CT,I7e),e(I7e,a7r),e(CT,n7r),e(CT,Iz),e(Iz,s7r),e(CT,l7r),e(se,i7r),e(se,wT),e(wT,q7e),e(q7e,d7r),e(wT,c7r),e(wT,qz),e(qz,f7r),e(wT,m7r),e(se,g7r),e(se,AT),e(AT,N7e),e(N7e,h7r),e(AT,p7r),e(AT,Nz),e(Nz,_7r),e(AT,u7r),e(se,b7r),e(se,yT),e(yT,j7e),e(j7e,v7r),e(yT,F7r),e(yT,jz),e(jz,T7r),e(yT,M7r),e(se,E7r),e(se,LT),e(LT,D7e),e(D7e,C7r),e(LT,w7r),e(LT,Dz),e(Dz,A7r),e(LT,y7r),e(se,L7r),e(se,xT),e(xT,G7e),e(G7e,x7r),e(xT,k7r),e(xT,Gz),e(Gz,S7r),e(xT,R7r),e(se,B7r),e(se,kT),e(kT,O7e),e(O7e,P7r),e(kT,$7r),e(kT,Oz),e(Oz,I7r),e(kT,q7r),e(se,N7r),e(se,ST),e(ST,V7e),e(V7e,j7r),e(ST,D7r),e(ST,Vz),e(Vz,G7r),e(ST,O7r),e(To,V7r),e(To,X7e),e(X7e,X7r),e(To,z7r),g(gy,To,null),b(c,cPe,u),b(c,qc,u),e(qc,RT),e(RT,z7e),g(hy,z7e,null),e(qc,Q7r),e(qc,Q7e),e(Q7e,W7r),b(c,fPe,u),b(c,yr,u),g(py,yr,null),e(yr,H7r),e(yr,Nc),e(Nc,U7r),e(Nc,Xz),e(Xz,J7r),e(Nc,Y7r),e(Nc,zz),e(zz,K7r),e(Nc,Z7r),e(yr,ebr),e(yr,_y),e(_y,obr),e(_y,W7e),e(W7e,rbr),e(_y,tbr),e(yr,abr),e(yr,Tt),g(uy,Tt,null),e(Tt,nbr),e(Tt,H7e),e(H7e,sbr),e(Tt,lbr),e(Tt,jc),e(jc,ibr),e(jc,U7e),e(U7e,dbr),e(jc,cbr),e(jc,Qz),e(Qz,fbr),e(jc,mbr),e(Tt,gbr),e(Tt,J7e),e(J7e,hbr),e(Tt,pbr),g(by,Tt,null),e(yr,_br),e(yr,Mo),g(vy,Mo,null),e(Mo,ubr),e(Mo,Y7e),e(Y7e,bbr),e(Mo,vbr),e(Mo,wn),e(wn,Fbr),e(wn,K7e),e(K7e,Tbr),e(wn,Mbr),e(wn,Z7e),e(Z7e,Ebr),e(wn,Cbr),e(wn,ebe),e(ebe,wbr),e(wn,Abr),e(Mo,ybr),e(Mo,obe),e(obe,BT),e(BT,rbe),e(rbe,Lbr),e(BT,xbr),e(BT,Wz),e(Wz,kbr),e(BT,Sbr),e(Mo,Rbr),e(Mo,tbe),e(tbe,Bbr),e(Mo,Pbr),g(Fy,Mo,null),b(c,mPe,u),b(c,Dc,u),e(Dc,PT),e(PT,abe),g(Ty,abe,null),e(Dc,$br),e(Dc,nbe),e(nbe,Ibr),b(c,gPe,u),b(c,Lr,u),g(My,Lr,null),e(Lr,qbr),e(Lr,Gc),e(Gc,Nbr),e(Gc,Hz),e(Hz,jbr),e(Gc,Dbr),e(Gc,Uz),e(Uz,Gbr),e(Gc,Obr),e(Lr,Vbr),e(Lr,Ey),e(Ey,Xbr),e(Ey,sbe),e(sbe,zbr),e(Ey,Qbr),e(Lr,Wbr),e(Lr,Mt),g(Cy,Mt,null),e(Mt,Hbr),e(Mt,lbe),e(lbe,Ubr),e(Mt,Jbr),e(Mt,Oc),e(Oc,Ybr),e(Oc,ibe),e(ibe,Kbr),e(Oc,Zbr),e(Oc,Jz),e(Jz,e2r),e(Oc,o2r),e(Mt,r2r),e(Mt,dbe),e(dbe,t2r),e(Mt,a2r),g(wy,Mt,null),e(Lr,n2r),e(Lr,Eo),g(Ay,Eo,null),e(Eo,s2r),e(Eo,cbe),e(cbe,l2r),e(Eo,i2r),e(Eo,An),e(An,d2r),e(An,fbe),e(fbe,c2r),e(An,f2r),e(An,mbe),e(mbe,m2r),e(An,g2r),e(An,gbe),e(gbe,h2r),e(An,p2r),e(Eo,_2r),e(Eo,Y),e(Y,$T),e($T,hbe),e(hbe,u2r),e($T,b2r),e($T,Yz),e(Yz,v2r),e($T,F2r),e(Y,T2r),e(Y,IT),e(IT,pbe),e(pbe,M2r),e(IT,E2r),e(IT,Kz),e(Kz,C2r),e(IT,w2r),e(Y,A2r),e(Y,qT),e(qT,_be),e(_be,y2r),e(qT,L2r),e(qT,Zz),e(Zz,x2r),e(qT,k2r),e(Y,S2r),e(Y,NT),e(NT,ube),e(ube,R2r),e(NT,B2r),e(NT,eQ),e(eQ,P2r),e(NT,$2r),e(Y,I2r),e(Y,jT),e(jT,bbe),e(bbe,q2r),e(jT,N2r),e(jT,oQ),e(oQ,j2r),e(jT,D2r),e(Y,G2r),e(Y,DT),e(DT,vbe),e(vbe,O2r),e(DT,V2r),e(DT,rQ),e(rQ,X2r),e(DT,z2r),e(Y,Q2r),e(Y,GT),e(GT,Fbe),e(Fbe,W2r),e(GT,H2r),e(GT,tQ),e(tQ,U2r),e(GT,J2r),e(Y,Y2r),e(Y,OT),e(OT,Tbe),e(Tbe,K2r),e(OT,Z2r),e(OT,aQ),e(aQ,e5r),e(OT,o5r),e(Y,r5r),e(Y,VT),e(VT,Mbe),e(Mbe,t5r),e(VT,a5r),e(VT,nQ),e(nQ,n5r),e(VT,s5r),e(Y,l5r),e(Y,XT),e(XT,Ebe),e(Ebe,i5r),e(XT,d5r),e(XT,sQ),e(sQ,c5r),e(XT,f5r),e(Y,m5r),e(Y,zT),e(zT,Cbe),e(Cbe,g5r),e(zT,h5r),e(zT,lQ),e(lQ,p5r),e(zT,_5r),e(Y,u5r),e(Y,QT),e(QT,wbe),e(wbe,b5r),e(QT,v5r),e(QT,iQ),e(iQ,F5r),e(QT,T5r),e(Y,M5r),e(Y,WT),e(WT,Abe),e(Abe,E5r),e(WT,C5r),e(WT,dQ),e(dQ,w5r),e(WT,A5r),e(Y,y5r),e(Y,HT),e(HT,ybe),e(ybe,L5r),e(HT,x5r),e(HT,cQ),e(cQ,k5r),e(HT,S5r),e(Y,R5r),e(Y,UT),e(UT,Lbe),e(Lbe,B5r),e(UT,P5r),e(UT,fQ),e(fQ,$5r),e(UT,I5r),e(Y,q5r),e(Y,JT),e(JT,xbe),e(xbe,N5r),e(JT,j5r),e(JT,mQ),e(mQ,D5r),e(JT,G5r),e(Y,O5r),e(Y,YT),e(YT,kbe),e(kbe,V5r),e(YT,X5r),e(YT,gQ),e(gQ,z5r),e(YT,Q5r),e(Y,W5r),e(Y,KT),e(KT,Sbe),e(Sbe,H5r),e(KT,U5r),e(KT,hQ),e(hQ,J5r),e(KT,Y5r),e(Y,K5r),e(Y,ZT),e(ZT,Rbe),e(Rbe,Z5r),e(ZT,e3r),e(ZT,pQ),e(pQ,o3r),e(ZT,r3r),e(Y,t3r),e(Y,eM),e(eM,Bbe),e(Bbe,a3r),e(eM,n3r),e(eM,_Q),e(_Q,s3r),e(eM,l3r),e(Eo,i3r),e(Eo,Pbe),e(Pbe,d3r),e(Eo,c3r),g(yy,Eo,null),b(c,hPe,u),b(c,Vc,u),e(Vc,oM),e(oM,$be),g(Ly,$be,null),e(Vc,f3r),e(Vc,Ibe),e(Ibe,m3r),b(c,pPe,u),b(c,xr,u),g(xy,xr,null),e(xr,g3r),e(xr,Xc),e(Xc,h3r),e(Xc,uQ),e(uQ,p3r),e(Xc,_3r),e(Xc,bQ),e(bQ,u3r),e(Xc,b3r),e(xr,v3r),e(xr,ky),e(ky,F3r),e(ky,qbe),e(qbe,T3r),e(ky,M3r),e(xr,E3r),e(xr,Et),g(Sy,Et,null),e(Et,C3r),e(Et,Nbe),e(Nbe,w3r),e(Et,A3r),e(Et,zc),e(zc,y3r),e(zc,jbe),e(jbe,L3r),e(zc,x3r),e(zc,vQ),e(vQ,k3r),e(zc,S3r),e(Et,R3r),e(Et,Dbe),e(Dbe,B3r),e(Et,P3r),g(Ry,Et,null),e(xr,$3r),e(xr,Co),g(By,Co,null),e(Co,I3r),e(Co,Gbe),e(Gbe,q3r),e(Co,N3r),e(Co,yn),e(yn,j3r),e(yn,Obe),e(Obe,D3r),e(yn,G3r),e(yn,Vbe),e(Vbe,O3r),e(yn,V3r),e(yn,Xbe),e(Xbe,X3r),e(yn,z3r),e(Co,Q3r),e(Co,K),e(K,rM),e(rM,zbe),e(zbe,W3r),e(rM,H3r),e(rM,FQ),e(FQ,U3r),e(rM,J3r),e(K,Y3r),e(K,tM),e(tM,Qbe),e(Qbe,K3r),e(tM,Z3r),e(tM,TQ),e(TQ,evr),e(tM,ovr),e(K,rvr),e(K,aM),e(aM,Wbe),e(Wbe,tvr),e(aM,avr),e(aM,MQ),e(MQ,nvr),e(aM,svr),e(K,lvr),e(K,nM),e(nM,Hbe),e(Hbe,ivr),e(nM,dvr),e(nM,EQ),e(EQ,cvr),e(nM,fvr),e(K,mvr),e(K,sM),e(sM,Ube),e(Ube,gvr),e(sM,hvr),e(sM,CQ),e(CQ,pvr),e(sM,_vr),e(K,uvr),e(K,lM),e(lM,Jbe),e(Jbe,bvr),e(lM,vvr),e(lM,wQ),e(wQ,Fvr),e(lM,Tvr),e(K,Mvr),e(K,iM),e(iM,Ybe),e(Ybe,Evr),e(iM,Cvr),e(iM,AQ),e(AQ,wvr),e(iM,Avr),e(K,yvr),e(K,dM),e(dM,Kbe),e(Kbe,Lvr),e(dM,xvr),e(dM,yQ),e(yQ,kvr),e(dM,Svr),e(K,Rvr),e(K,cM),e(cM,Zbe),e(Zbe,Bvr),e(cM,Pvr),e(cM,LQ),e(LQ,$vr),e(cM,Ivr),e(K,qvr),e(K,fM),e(fM,e2e),e(e2e,Nvr),e(fM,jvr),e(fM,xQ),e(xQ,Dvr),e(fM,Gvr),e(K,Ovr),e(K,mM),e(mM,o2e),e(o2e,Vvr),e(mM,Xvr),e(mM,kQ),e(kQ,zvr),e(mM,Qvr),e(K,Wvr),e(K,gM),e(gM,r2e),e(r2e,Hvr),e(gM,Uvr),e(gM,SQ),e(SQ,Jvr),e(gM,Yvr),e(K,Kvr),e(K,hM),e(hM,t2e),e(t2e,Zvr),e(hM,eFr),e(hM,RQ),e(RQ,oFr),e(hM,rFr),e(K,tFr),e(K,pM),e(pM,a2e),e(a2e,aFr),e(pM,nFr),e(pM,BQ),e(BQ,sFr),e(pM,lFr),e(K,iFr),e(K,_M),e(_M,n2e),e(n2e,dFr),e(_M,cFr),e(_M,PQ),e(PQ,fFr),e(_M,mFr),e(K,gFr),e(K,uM),e(uM,s2e),e(s2e,hFr),e(uM,pFr),e(uM,$Q),e($Q,_Fr),e(uM,uFr),e(K,bFr),e(K,bM),e(bM,l2e),e(l2e,vFr),e(bM,FFr),e(bM,IQ),e(IQ,TFr),e(bM,MFr),e(K,EFr),e(K,vM),e(vM,i2e),e(i2e,CFr),e(vM,wFr),e(vM,qQ),e(qQ,AFr),e(vM,yFr),e(K,LFr),e(K,FM),e(FM,d2e),e(d2e,xFr),e(FM,kFr),e(FM,NQ),e(NQ,SFr),e(FM,RFr),e(K,BFr),e(K,TM),e(TM,c2e),e(c2e,PFr),e(TM,$Fr),e(TM,jQ),e(jQ,IFr),e(TM,qFr),e(Co,NFr),e(Co,f2e),e(f2e,jFr),e(Co,DFr),g(Py,Co,null),b(c,_Pe,u),b(c,Qc,u),e(Qc,MM),e(MM,m2e),g($y,m2e,null),e(Qc,GFr),e(Qc,g2e),e(g2e,OFr),b(c,uPe,u),b(c,kr,u),g(Iy,kr,null),e(kr,VFr),e(kr,Wc),e(Wc,XFr),e(Wc,DQ),e(DQ,zFr),e(Wc,QFr),e(Wc,GQ),e(GQ,WFr),e(Wc,HFr),e(kr,UFr),e(kr,qy),e(qy,JFr),e(qy,h2e),e(h2e,YFr),e(qy,KFr),e(kr,ZFr),e(kr,Ct),g(Ny,Ct,null),e(Ct,eTr),e(Ct,p2e),e(p2e,oTr),e(Ct,rTr),e(Ct,Hc),e(Hc,tTr),e(Hc,_2e),e(_2e,aTr),e(Hc,nTr),e(Hc,OQ),e(OQ,sTr),e(Hc,lTr),e(Ct,iTr),e(Ct,u2e),e(u2e,dTr),e(Ct,cTr),g(jy,Ct,null),e(kr,fTr),e(kr,wo),g(Dy,wo,null),e(wo,mTr),e(wo,b2e),e(b2e,gTr),e(wo,hTr),e(wo,Ln),e(Ln,pTr),e(Ln,v2e),e(v2e,_Tr),e(Ln,uTr),e(Ln,F2e),e(F2e,bTr),e(Ln,vTr),e(Ln,T2e),e(T2e,FTr),e(Ln,TTr),e(wo,MTr),e(wo,M2e),e(M2e,EM),e(EM,E2e),e(E2e,ETr),e(EM,CTr),e(EM,VQ),e(VQ,wTr),e(EM,ATr),e(wo,yTr),e(wo,C2e),e(C2e,LTr),e(wo,xTr),g(Gy,wo,null),b(c,bPe,u),b(c,Uc,u),e(Uc,CM),e(CM,w2e),g(Oy,w2e,null),e(Uc,kTr),e(Uc,A2e),e(A2e,STr),b(c,vPe,u),b(c,Sr,u),g(Vy,Sr,null),e(Sr,RTr),e(Sr,Jc),e(Jc,BTr),e(Jc,XQ),e(XQ,PTr),e(Jc,$Tr),e(Jc,zQ),e(zQ,ITr),e(Jc,qTr),e(Sr,NTr),e(Sr,Xy),e(Xy,jTr),e(Xy,y2e),e(y2e,DTr),e(Xy,GTr),e(Sr,OTr),e(Sr,wt),g(zy,wt,null),e(wt,VTr),e(wt,L2e),e(L2e,XTr),e(wt,zTr),e(wt,Yc),e(Yc,QTr),e(Yc,x2e),e(x2e,WTr),e(Yc,HTr),e(Yc,QQ),e(QQ,UTr),e(Yc,JTr),e(wt,YTr),e(wt,k2e),e(k2e,KTr),e(wt,ZTr),g(Qy,wt,null),e(Sr,eMr),e(Sr,Ao),g(Wy,Ao,null),e(Ao,oMr),e(Ao,S2e),e(S2e,rMr),e(Ao,tMr),e(Ao,xn),e(xn,aMr),e(xn,R2e),e(R2e,nMr),e(xn,sMr),e(xn,B2e),e(B2e,lMr),e(xn,iMr),e(xn,P2e),e(P2e,dMr),e(xn,cMr),e(Ao,fMr),e(Ao,$2e),e($2e,wM),e(wM,I2e),e(I2e,mMr),e(wM,gMr),e(wM,WQ),e(WQ,hMr),e(wM,pMr),e(Ao,_Mr),e(Ao,q2e),e(q2e,uMr),e(Ao,bMr),g(Hy,Ao,null),b(c,FPe,u),b(c,Kc,u),e(Kc,AM),e(AM,N2e),g(Uy,N2e,null),e(Kc,vMr),e(Kc,j2e),e(j2e,FMr),b(c,TPe,u),b(c,Rr,u),g(Jy,Rr,null),e(Rr,TMr),e(Rr,Zc),e(Zc,MMr),e(Zc,HQ),e(HQ,EMr),e(Zc,CMr),e(Zc,UQ),e(UQ,wMr),e(Zc,AMr),e(Rr,yMr),e(Rr,Yy),e(Yy,LMr),e(Yy,D2e),e(D2e,xMr),e(Yy,kMr),e(Rr,SMr),e(Rr,At),g(Ky,At,null),e(At,RMr),e(At,G2e),e(G2e,BMr),e(At,PMr),e(At,ef),e(ef,$Mr),e(ef,O2e),e(O2e,IMr),e(ef,qMr),e(ef,JQ),e(JQ,NMr),e(ef,jMr),e(At,DMr),e(At,V2e),e(V2e,GMr),e(At,OMr),g(Zy,At,null),e(Rr,VMr),e(Rr,yo),g(e8,yo,null),e(yo,XMr),e(yo,X2e),e(X2e,zMr),e(yo,QMr),e(yo,kn),e(kn,WMr),e(kn,z2e),e(z2e,HMr),e(kn,UMr),e(kn,Q2e),e(Q2e,JMr),e(kn,YMr),e(kn,W2e),e(W2e,KMr),e(kn,ZMr),e(yo,e4r),e(yo,z),e(z,yM),e(yM,H2e),e(H2e,o4r),e(yM,r4r),e(yM,YQ),e(YQ,t4r),e(yM,a4r),e(z,n4r),e(z,LM),e(LM,U2e),e(U2e,s4r),e(LM,l4r),e(LM,KQ),e(KQ,i4r),e(LM,d4r),e(z,c4r),e(z,xM),e(xM,J2e),e(J2e,f4r),e(xM,m4r),e(xM,ZQ),e(ZQ,g4r),e(xM,h4r),e(z,p4r),e(z,kM),e(kM,Y2e),e(Y2e,_4r),e(kM,u4r),e(kM,eW),e(eW,b4r),e(kM,v4r),e(z,F4r),e(z,SM),e(SM,K2e),e(K2e,T4r),e(SM,M4r),e(SM,oW),e(oW,E4r),e(SM,C4r),e(z,w4r),e(z,RM),e(RM,Z2e),e(Z2e,A4r),e(RM,y4r),e(RM,rW),e(rW,L4r),e(RM,x4r),e(z,k4r),e(z,BM),e(BM,e5e),e(e5e,S4r),e(BM,R4r),e(BM,tW),e(tW,B4r),e(BM,P4r),e(z,$4r),e(z,PM),e(PM,o5e),e(o5e,I4r),e(PM,q4r),e(PM,aW),e(aW,N4r),e(PM,j4r),e(z,D4r),e(z,$M),e($M,r5e),e(r5e,G4r),e($M,O4r),e($M,nW),e(nW,V4r),e($M,X4r),e(z,z4r),e(z,IM),e(IM,t5e),e(t5e,Q4r),e(IM,W4r),e(IM,sW),e(sW,H4r),e(IM,U4r),e(z,J4r),e(z,qM),e(qM,a5e),e(a5e,Y4r),e(qM,K4r),e(qM,lW),e(lW,Z4r),e(qM,eEr),e(z,oEr),e(z,NM),e(NM,n5e),e(n5e,rEr),e(NM,tEr),e(NM,iW),e(iW,aEr),e(NM,nEr),e(z,sEr),e(z,jM),e(jM,s5e),e(s5e,lEr),e(jM,iEr),e(jM,dW),e(dW,dEr),e(jM,cEr),e(z,fEr),e(z,DM),e(DM,l5e),e(l5e,mEr),e(DM,gEr),e(DM,cW),e(cW,hEr),e(DM,pEr),e(z,_Er),e(z,GM),e(GM,i5e),e(i5e,uEr),e(GM,bEr),e(GM,fW),e(fW,vEr),e(GM,FEr),e(z,TEr),e(z,OM),e(OM,d5e),e(d5e,MEr),e(OM,EEr),e(OM,mW),e(mW,CEr),e(OM,wEr),e(z,AEr),e(z,VM),e(VM,c5e),e(c5e,yEr),e(VM,LEr),e(VM,gW),e(gW,xEr),e(VM,kEr),e(z,SEr),e(z,XM),e(XM,f5e),e(f5e,REr),e(XM,BEr),e(XM,hW),e(hW,PEr),e(XM,$Er),e(z,IEr),e(z,zM),e(zM,m5e),e(m5e,qEr),e(zM,NEr),e(zM,pW),e(pW,jEr),e(zM,DEr),e(z,GEr),e(z,QM),e(QM,g5e),e(g5e,OEr),e(QM,VEr),e(QM,_W),e(_W,XEr),e(QM,zEr),e(z,QEr),e(z,WM),e(WM,h5e),e(h5e,WEr),e(WM,HEr),e(WM,uW),e(uW,UEr),e(WM,JEr),e(z,YEr),e(z,HM),e(HM,p5e),e(p5e,KEr),e(HM,ZEr),e(HM,bW),e(bW,eCr),e(HM,oCr),e(z,rCr),e(z,UM),e(UM,_5e),e(_5e,tCr),e(UM,aCr),e(UM,vW),e(vW,nCr),e(UM,sCr),e(z,lCr),e(z,JM),e(JM,u5e),e(u5e,iCr),e(JM,dCr),e(JM,FW),e(FW,cCr),e(JM,fCr),e(z,mCr),e(z,YM),e(YM,b5e),e(b5e,gCr),e(YM,hCr),e(YM,TW),e(TW,pCr),e(YM,_Cr),e(yo,uCr),e(yo,v5e),e(v5e,bCr),e(yo,vCr),g(o8,yo,null),b(c,MPe,u),b(c,of,u),e(of,KM),e(KM,F5e),g(r8,F5e,null),e(of,FCr),e(of,T5e),e(T5e,TCr),b(c,EPe,u),b(c,Br,u),g(t8,Br,null),e(Br,MCr),e(Br,rf),e(rf,ECr),e(rf,MW),e(MW,CCr),e(rf,wCr),e(rf,EW),e(EW,ACr),e(rf,yCr),e(Br,LCr),e(Br,a8),e(a8,xCr),e(a8,M5e),e(M5e,kCr),e(a8,SCr),e(Br,RCr),e(Br,yt),g(n8,yt,null),e(yt,BCr),e(yt,E5e),e(E5e,PCr),e(yt,$Cr),e(yt,tf),e(tf,ICr),e(tf,C5e),e(C5e,qCr),e(tf,NCr),e(tf,CW),e(CW,jCr),e(tf,DCr),e(yt,GCr),e(yt,w5e),e(w5e,OCr),e(yt,VCr),g(s8,yt,null),e(Br,XCr),e(Br,Lo),g(l8,Lo,null),e(Lo,zCr),e(Lo,A5e),e(A5e,QCr),e(Lo,WCr),e(Lo,Sn),e(Sn,HCr),e(Sn,y5e),e(y5e,UCr),e(Sn,JCr),e(Sn,L5e),e(L5e,YCr),e(Sn,KCr),e(Sn,x5e),e(x5e,ZCr),e(Sn,ewr),e(Lo,owr),e(Lo,ca),e(ca,ZM),e(ZM,k5e),e(k5e,rwr),e(ZM,twr),e(ZM,wW),e(wW,awr),e(ZM,nwr),e(ca,swr),e(ca,e4),e(e4,S5e),e(S5e,lwr),e(e4,iwr),e(e4,AW),e(AW,dwr),e(e4,cwr),e(ca,fwr),e(ca,o4),e(o4,R5e),e(R5e,mwr),e(o4,gwr),e(o4,yW),e(yW,hwr),e(o4,pwr),e(ca,_wr),e(ca,r4),e(r4,B5e),e(B5e,uwr),e(r4,bwr),e(r4,LW),e(LW,vwr),e(r4,Fwr),e(ca,Twr),e(ca,t4),e(t4,P5e),e(P5e,Mwr),e(t4,Ewr),e(t4,xW),e(xW,Cwr),e(t4,wwr),e(Lo,Awr),e(Lo,$5e),e($5e,ywr),e(Lo,Lwr),g(i8,Lo,null),b(c,CPe,u),b(c,af,u),e(af,a4),e(a4,I5e),g(d8,I5e,null),e(af,xwr),e(af,q5e),e(q5e,kwr),b(c,wPe,u),b(c,Pr,u),g(c8,Pr,null),e(Pr,Swr),e(Pr,nf),e(nf,Rwr),e(nf,kW),e(kW,Bwr),e(nf,Pwr),e(nf,SW),e(SW,$wr),e(nf,Iwr),e(Pr,qwr),e(Pr,f8),e(f8,Nwr),e(f8,N5e),e(N5e,jwr),e(f8,Dwr),e(Pr,Gwr),e(Pr,Lt),g(m8,Lt,null),e(Lt,Owr),e(Lt,j5e),e(j5e,Vwr),e(Lt,Xwr),e(Lt,sf),e(sf,zwr),e(sf,D5e),e(D5e,Qwr),e(sf,Wwr),e(sf,RW),e(RW,Hwr),e(sf,Uwr),e(Lt,Jwr),e(Lt,G5e),e(G5e,Ywr),e(Lt,Kwr),g(g8,Lt,null),e(Pr,Zwr),e(Pr,xo),g(h8,xo,null),e(xo,e6r),e(xo,O5e),e(O5e,o6r),e(xo,r6r),e(xo,Rn),e(Rn,t6r),e(Rn,V5e),e(V5e,a6r),e(Rn,n6r),e(Rn,X5e),e(X5e,s6r),e(Rn,l6r),e(Rn,z5e),e(z5e,i6r),e(Rn,d6r),e(xo,c6r),e(xo,me),e(me,n4),e(n4,Q5e),e(Q5e,f6r),e(n4,m6r),e(n4,BW),e(BW,g6r),e(n4,h6r),e(me,p6r),e(me,s4),e(s4,W5e),e(W5e,_6r),e(s4,u6r),e(s4,PW),e(PW,b6r),e(s4,v6r),e(me,F6r),e(me,l4),e(l4,H5e),e(H5e,T6r),e(l4,M6r),e(l4,$W),e($W,E6r),e(l4,C6r),e(me,w6r),e(me,i4),e(i4,U5e),e(U5e,A6r),e(i4,y6r),e(i4,IW),e(IW,L6r),e(i4,x6r),e(me,k6r),e(me,d4),e(d4,J5e),e(J5e,S6r),e(d4,R6r),e(d4,qW),e(qW,B6r),e(d4,P6r),e(me,$6r),e(me,c4),e(c4,Y5e),e(Y5e,I6r),e(c4,q6r),e(c4,NW),e(NW,N6r),e(c4,j6r),e(me,D6r),e(me,f4),e(f4,K5e),e(K5e,G6r),e(f4,O6r),e(f4,jW),e(jW,V6r),e(f4,X6r),e(me,z6r),e(me,m4),e(m4,Z5e),e(Z5e,Q6r),e(m4,W6r),e(m4,DW),e(DW,H6r),e(m4,U6r),e(me,J6r),e(me,g4),e(g4,e3e),e(e3e,Y6r),e(g4,K6r),e(g4,GW),e(GW,Z6r),e(g4,eAr),e(me,oAr),e(me,h4),e(h4,o3e),e(o3e,rAr),e(h4,tAr),e(h4,OW),e(OW,aAr),e(h4,nAr),e(me,sAr),e(me,p4),e(p4,r3e),e(r3e,lAr),e(p4,iAr),e(p4,VW),e(VW,dAr),e(p4,cAr),e(me,fAr),e(me,_4),e(_4,t3e),e(t3e,mAr),e(_4,gAr),e(_4,XW),e(XW,hAr),e(_4,pAr),e(xo,_Ar),e(xo,a3e),e(a3e,uAr),e(xo,bAr),g(p8,xo,null),b(c,APe,u),b(c,lf,u),e(lf,u4),e(u4,n3e),g(_8,n3e,null),e(lf,vAr),e(lf,s3e),e(s3e,FAr),b(c,yPe,u),b(c,$r,u),g(u8,$r,null),e($r,TAr),e($r,df),e(df,MAr),e(df,zW),e(zW,EAr),e(df,CAr),e(df,QW),e(QW,wAr),e(df,AAr),e($r,yAr),e($r,b8),e(b8,LAr),e(b8,l3e),e(l3e,xAr),e(b8,kAr),e($r,SAr),e($r,xt),g(v8,xt,null),e(xt,RAr),e(xt,i3e),e(i3e,BAr),e(xt,PAr),e(xt,cf),e(cf,$Ar),e(cf,d3e),e(d3e,IAr),e(cf,qAr),e(cf,WW),e(WW,NAr),e(cf,jAr),e(xt,DAr),e(xt,c3e),e(c3e,GAr),e(xt,OAr),g(F8,xt,null),e($r,VAr),e($r,ko),g(T8,ko,null),e(ko,XAr),e(ko,f3e),e(f3e,zAr),e(ko,QAr),e(ko,Bn),e(Bn,WAr),e(Bn,m3e),e(m3e,HAr),e(Bn,UAr),e(Bn,g3e),e(g3e,JAr),e(Bn,YAr),e(Bn,h3e),e(h3e,KAr),e(Bn,ZAr),e(ko,e0r),e(ko,ve),e(ve,b4),e(b4,p3e),e(p3e,o0r),e(b4,r0r),e(b4,HW),e(HW,t0r),e(b4,a0r),e(ve,n0r),e(ve,v4),e(v4,_3e),e(_3e,s0r),e(v4,l0r),e(v4,UW),e(UW,i0r),e(v4,d0r),e(ve,c0r),e(ve,F4),e(F4,u3e),e(u3e,f0r),e(F4,m0r),e(F4,JW),e(JW,g0r),e(F4,h0r),e(ve,p0r),e(ve,T4),e(T4,b3e),e(b3e,_0r),e(T4,u0r),e(T4,YW),e(YW,b0r),e(T4,v0r),e(ve,F0r),e(ve,M4),e(M4,v3e),e(v3e,T0r),e(M4,M0r),e(M4,KW),e(KW,E0r),e(M4,C0r),e(ve,w0r),e(ve,E4),e(E4,F3e),e(F3e,A0r),e(E4,y0r),e(E4,ZW),e(ZW,L0r),e(E4,x0r),e(ve,k0r),e(ve,C4),e(C4,T3e),e(T3e,S0r),e(C4,R0r),e(C4,eH),e(eH,B0r),e(C4,P0r),e(ve,$0r),e(ve,w4),e(w4,M3e),e(M3e,I0r),e(w4,q0r),e(w4,oH),e(oH,N0r),e(w4,j0r),e(ve,D0r),e(ve,A4),e(A4,E3e),e(E3e,G0r),e(A4,O0r),e(A4,rH),e(rH,V0r),e(A4,X0r),e(ve,z0r),e(ve,y4),e(y4,C3e),e(C3e,Q0r),e(y4,W0r),e(y4,tH),e(tH,H0r),e(y4,U0r),e(ko,J0r),e(ko,w3e),e(w3e,Y0r),e(ko,K0r),g(M8,ko,null),b(c,LPe,u),b(c,ff,u),e(ff,L4),e(L4,A3e),g(E8,A3e,null),e(ff,Z0r),e(ff,y3e),e(y3e,eyr),b(c,xPe,u),b(c,Ir,u),g(C8,Ir,null),e(Ir,oyr),e(Ir,mf),e(mf,ryr),e(mf,aH),e(aH,tyr),e(mf,ayr),e(mf,nH),e(nH,nyr),e(mf,syr),e(Ir,lyr),e(Ir,w8),e(w8,iyr),e(w8,L3e),e(L3e,dyr),e(w8,cyr),e(Ir,fyr),e(Ir,kt),g(A8,kt,null),e(kt,myr),e(kt,x3e),e(x3e,gyr),e(kt,hyr),e(kt,gf),e(gf,pyr),e(gf,k3e),e(k3e,_yr),e(gf,uyr),e(gf,sH),e(sH,byr),e(gf,vyr),e(kt,Fyr),e(kt,S3e),e(S3e,Tyr),e(kt,Myr),g(y8,kt,null),e(Ir,Eyr),e(Ir,So),g(L8,So,null),e(So,Cyr),e(So,R3e),e(R3e,wyr),e(So,Ayr),e(So,Pn),e(Pn,yyr),e(Pn,B3e),e(B3e,Lyr),e(Pn,xyr),e(Pn,P3e),e(P3e,kyr),e(Pn,Syr),e(Pn,$3e),e($3e,Ryr),e(Pn,Byr),e(So,Pyr),e(So,Ee),e(Ee,x4),e(x4,I3e),e(I3e,$yr),e(x4,Iyr),e(x4,lH),e(lH,qyr),e(x4,Nyr),e(Ee,jyr),e(Ee,k4),e(k4,q3e),e(q3e,Dyr),e(k4,Gyr),e(k4,iH),e(iH,Oyr),e(k4,Vyr),e(Ee,Xyr),e(Ee,S4),e(S4,N3e),e(N3e,zyr),e(S4,Qyr),e(S4,dH),e(dH,Wyr),e(S4,Hyr),e(Ee,Uyr),e(Ee,R4),e(R4,j3e),e(j3e,Jyr),e(R4,Yyr),e(R4,cH),e(cH,Kyr),e(R4,Zyr),e(Ee,e8r),e(Ee,B4),e(B4,D3e),e(D3e,o8r),e(B4,r8r),e(B4,fH),e(fH,t8r),e(B4,a8r),e(Ee,n8r),e(Ee,P4),e(P4,G3e),e(G3e,s8r),e(P4,l8r),e(P4,mH),e(mH,i8r),e(P4,d8r),e(Ee,c8r),e(Ee,$4),e($4,O3e),e(O3e,f8r),e($4,m8r),e($4,gH),e(gH,g8r),e($4,h8r),e(Ee,p8r),e(Ee,I4),e(I4,V3e),e(V3e,_8r),e(I4,u8r),e(I4,hH),e(hH,b8r),e(I4,v8r),e(Ee,F8r),e(Ee,q4),e(q4,X3e),e(X3e,T8r),e(q4,M8r),e(q4,pH),e(pH,E8r),e(q4,C8r),e(So,w8r),e(So,z3e),e(z3e,A8r),e(So,y8r),g(x8,So,null),b(c,kPe,u),b(c,hf,u),e(hf,N4),e(N4,Q3e),g(k8,Q3e,null),e(hf,L8r),e(hf,W3e),e(W3e,x8r),b(c,SPe,u),b(c,qr,u),g(S8,qr,null),e(qr,k8r),e(qr,pf),e(pf,S8r),e(pf,_H),e(_H,R8r),e(pf,B8r),e(pf,uH),e(uH,P8r),e(pf,$8r),e(qr,I8r),e(qr,R8),e(R8,q8r),e(R8,H3e),e(H3e,N8r),e(R8,j8r),e(qr,D8r),e(qr,St),g(B8,St,null),e(St,G8r),e(St,U3e),e(U3e,O8r),e(St,V8r),e(St,_f),e(_f,X8r),e(_f,J3e),e(J3e,z8r),e(_f,Q8r),e(_f,bH),e(bH,W8r),e(_f,H8r),e(St,U8r),e(St,Y3e),e(Y3e,J8r),e(St,Y8r),g(P8,St,null),e(qr,K8r),e(qr,Ro),g($8,Ro,null),e(Ro,Z8r),e(Ro,K3e),e(K3e,eLr),e(Ro,oLr),e(Ro,$n),e($n,rLr),e($n,Z3e),e(Z3e,tLr),e($n,aLr),e($n,eve),e(eve,nLr),e($n,sLr),e($n,ove),e(ove,lLr),e($n,iLr),e(Ro,dLr),e(Ro,Fe),e(Fe,j4),e(j4,rve),e(rve,cLr),e(j4,fLr),e(j4,vH),e(vH,mLr),e(j4,gLr),e(Fe,hLr),e(Fe,D4),e(D4,tve),e(tve,pLr),e(D4,_Lr),e(D4,FH),e(FH,uLr),e(D4,bLr),e(Fe,vLr),e(Fe,G4),e(G4,ave),e(ave,FLr),e(G4,TLr),e(G4,TH),e(TH,MLr),e(G4,ELr),e(Fe,CLr),e(Fe,O4),e(O4,nve),e(nve,wLr),e(O4,ALr),e(O4,MH),e(MH,yLr),e(O4,LLr),e(Fe,xLr),e(Fe,V4),e(V4,sve),e(sve,kLr),e(V4,SLr),e(V4,EH),e(EH,RLr),e(V4,BLr),e(Fe,PLr),e(Fe,X4),e(X4,lve),e(lve,$Lr),e(X4,ILr),e(X4,CH),e(CH,qLr),e(X4,NLr),e(Fe,jLr),e(Fe,z4),e(z4,ive),e(ive,DLr),e(z4,GLr),e(z4,wH),e(wH,OLr),e(z4,VLr),e(Fe,XLr),e(Fe,Q4),e(Q4,dve),e(dve,zLr),e(Q4,QLr),e(Q4,AH),e(AH,WLr),e(Q4,HLr),e(Fe,ULr),e(Fe,W4),e(W4,cve),e(cve,JLr),e(W4,YLr),e(W4,yH),e(yH,KLr),e(W4,ZLr),e(Fe,e9r),e(Fe,H4),e(H4,fve),e(fve,o9r),e(H4,r9r),e(H4,LH),e(LH,t9r),e(H4,a9r),e(Ro,n9r),e(Ro,mve),e(mve,s9r),e(Ro,l9r),g(I8,Ro,null),b(c,RPe,u),b(c,uf,u),e(uf,U4),e(U4,gve),g(q8,gve,null),e(uf,i9r),e(uf,hve),e(hve,d9r),b(c,BPe,u),b(c,Nr,u),g(N8,Nr,null),e(Nr,c9r),e(Nr,bf),e(bf,f9r),e(bf,xH),e(xH,m9r),e(bf,g9r),e(bf,kH),e(kH,h9r),e(bf,p9r),e(Nr,_9r),e(Nr,j8),e(j8,u9r),e(j8,pve),e(pve,b9r),e(j8,v9r),e(Nr,F9r),e(Nr,Rt),g(D8,Rt,null),e(Rt,T9r),e(Rt,_ve),e(_ve,M9r),e(Rt,E9r),e(Rt,vf),e(vf,C9r),e(vf,uve),e(uve,w9r),e(vf,A9r),e(vf,SH),e(SH,y9r),e(vf,L9r),e(Rt,x9r),e(Rt,bve),e(bve,k9r),e(Rt,S9r),g(G8,Rt,null),e(Nr,R9r),e(Nr,Bo),g(O8,Bo,null),e(Bo,B9r),e(Bo,vve),e(vve,P9r),e(Bo,$9r),e(Bo,In),e(In,I9r),e(In,Fve),e(Fve,q9r),e(In,N9r),e(In,Tve),e(Tve,j9r),e(In,D9r),e(In,Mve),e(Mve,G9r),e(In,O9r),e(Bo,V9r),e(Bo,Te),e(Te,J4),e(J4,Eve),e(Eve,X9r),e(J4,z9r),e(J4,RH),e(RH,Q9r),e(J4,W9r),e(Te,H9r),e(Te,Y4),e(Y4,Cve),e(Cve,U9r),e(Y4,J9r),e(Y4,BH),e(BH,Y9r),e(Y4,K9r),e(Te,Z9r),e(Te,K4),e(K4,wve),e(wve,exr),e(K4,oxr),e(K4,PH),e(PH,rxr),e(K4,txr),e(Te,axr),e(Te,Z4),e(Z4,Ave),e(Ave,nxr),e(Z4,sxr),e(Z4,$H),e($H,lxr),e(Z4,ixr),e(Te,dxr),e(Te,eE),e(eE,yve),e(yve,cxr),e(eE,fxr),e(eE,IH),e(IH,mxr),e(eE,gxr),e(Te,hxr),e(Te,oE),e(oE,Lve),e(Lve,pxr),e(oE,_xr),e(oE,qH),e(qH,uxr),e(oE,bxr),e(Te,vxr),e(Te,rE),e(rE,xve),e(xve,Fxr),e(rE,Txr),e(rE,NH),e(NH,Mxr),e(rE,Exr),e(Te,Cxr),e(Te,tE),e(tE,kve),e(kve,wxr),e(tE,Axr),e(tE,jH),e(jH,yxr),e(tE,Lxr),e(Te,xxr),e(Te,aE),e(aE,Sve),e(Sve,kxr),e(aE,Sxr),e(aE,DH),e(DH,Rxr),e(aE,Bxr),e(Te,Pxr),e(Te,nE),e(nE,Rve),e(Rve,$xr),e(nE,Ixr),e(nE,GH),e(GH,qxr),e(nE,Nxr),e(Bo,jxr),e(Bo,Bve),e(Bve,Dxr),e(Bo,Gxr),g(V8,Bo,null),b(c,PPe,u),b(c,Ff,u),e(Ff,sE),e(sE,Pve),g(X8,Pve,null),e(Ff,Oxr),e(Ff,$ve),e($ve,Vxr),b(c,$Pe,u),b(c,jr,u),g(z8,jr,null),e(jr,Xxr),e(jr,Tf),e(Tf,zxr),e(Tf,OH),e(OH,Qxr),e(Tf,Wxr),e(Tf,VH),e(VH,Hxr),e(Tf,Uxr),e(jr,Jxr),e(jr,Q8),e(Q8,Yxr),e(Q8,Ive),e(Ive,Kxr),e(Q8,Zxr),e(jr,ekr),e(jr,Bt),g(W8,Bt,null),e(Bt,okr),e(Bt,qve),e(qve,rkr),e(Bt,tkr),e(Bt,Mf),e(Mf,akr),e(Mf,Nve),e(Nve,nkr),e(Mf,skr),e(Mf,XH),e(XH,lkr),e(Mf,ikr),e(Bt,dkr),e(Bt,jve),e(jve,ckr),e(Bt,fkr),g(H8,Bt,null),e(jr,mkr),e(jr,Po),g(U8,Po,null),e(Po,gkr),e(Po,Dve),e(Dve,hkr),e(Po,pkr),e(Po,qn),e(qn,_kr),e(qn,Gve),e(Gve,ukr),e(qn,bkr),e(qn,Ove),e(Ove,vkr),e(qn,Fkr),e(qn,Vve),e(Vve,Tkr),e(qn,Mkr),e(Po,Ekr),e(Po,Be),e(Be,lE),e(lE,Xve),e(Xve,Ckr),e(lE,wkr),e(lE,zH),e(zH,Akr),e(lE,ykr),e(Be,Lkr),e(Be,iE),e(iE,zve),e(zve,xkr),e(iE,kkr),e(iE,QH),e(QH,Skr),e(iE,Rkr),e(Be,Bkr),e(Be,dE),e(dE,Qve),e(Qve,Pkr),e(dE,$kr),e(dE,WH),e(WH,Ikr),e(dE,qkr),e(Be,Nkr),e(Be,cE),e(cE,Wve),e(Wve,jkr),e(cE,Dkr),e(cE,HH),e(HH,Gkr),e(cE,Okr),e(Be,Vkr),e(Be,fE),e(fE,Hve),e(Hve,Xkr),e(fE,zkr),e(fE,UH),e(UH,Qkr),e(fE,Wkr),e(Be,Hkr),e(Be,mE),e(mE,Uve),e(Uve,Ukr),e(mE,Jkr),e(mE,JH),e(JH,Ykr),e(mE,Kkr),e(Be,Zkr),e(Be,gE),e(gE,Jve),e(Jve,eSr),e(gE,oSr),e(gE,YH),e(YH,rSr),e(gE,tSr),e(Be,aSr),e(Be,hE),e(hE,Yve),e(Yve,nSr),e(hE,sSr),e(hE,KH),e(KH,lSr),e(hE,iSr),e(Po,dSr),e(Po,Kve),e(Kve,cSr),e(Po,fSr),g(J8,Po,null),b(c,IPe,u),b(c,Ef,u),e(Ef,pE),e(pE,Zve),g(Y8,Zve,null),e(Ef,mSr),e(Ef,eFe),e(eFe,gSr),b(c,qPe,u),b(c,Dr,u),g(K8,Dr,null),e(Dr,hSr),e(Dr,Cf),e(Cf,pSr),e(Cf,ZH),e(ZH,_Sr),e(Cf,uSr),e(Cf,eU),e(eU,bSr),e(Cf,vSr),e(Dr,FSr),e(Dr,Z8),e(Z8,TSr),e(Z8,oFe),e(oFe,MSr),e(Z8,ESr),e(Dr,CSr),e(Dr,Pt),g(eL,Pt,null),e(Pt,wSr),e(Pt,rFe),e(rFe,ASr),e(Pt,ySr),e(Pt,wf),e(wf,LSr),e(wf,tFe),e(tFe,xSr),e(wf,kSr),e(wf,oU),e(oU,SSr),e(wf,RSr),e(Pt,BSr),e(Pt,aFe),e(aFe,PSr),e(Pt,$Sr),g(oL,Pt,null),e(Dr,ISr),e(Dr,$o),g(rL,$o,null),e($o,qSr),e($o,nFe),e(nFe,NSr),e($o,jSr),e($o,Nn),e(Nn,DSr),e(Nn,sFe),e(sFe,GSr),e(Nn,OSr),e(Nn,lFe),e(lFe,VSr),e(Nn,XSr),e(Nn,iFe),e(iFe,zSr),e(Nn,QSr),e($o,WSr),e($o,Pe),e(Pe,_E),e(_E,dFe),e(dFe,HSr),e(_E,USr),e(_E,rU),e(rU,JSr),e(_E,YSr),e(Pe,KSr),e(Pe,uE),e(uE,cFe),e(cFe,ZSr),e(uE,eRr),e(uE,tU),e(tU,oRr),e(uE,rRr),e(Pe,tRr),e(Pe,bE),e(bE,fFe),e(fFe,aRr),e(bE,nRr),e(bE,aU),e(aU,sRr),e(bE,lRr),e(Pe,iRr),e(Pe,vE),e(vE,mFe),e(mFe,dRr),e(vE,cRr),e(vE,nU),e(nU,fRr),e(vE,mRr),e(Pe,gRr),e(Pe,FE),e(FE,gFe),e(gFe,hRr),e(FE,pRr),e(FE,sU),e(sU,_Rr),e(FE,uRr),e(Pe,bRr),e(Pe,TE),e(TE,hFe),e(hFe,vRr),e(TE,FRr),e(TE,lU),e(lU,TRr),e(TE,MRr),e(Pe,ERr),e(Pe,ME),e(ME,pFe),e(pFe,CRr),e(ME,wRr),e(ME,iU),e(iU,ARr),e(ME,yRr),e(Pe,LRr),e(Pe,EE),e(EE,_Fe),e(_Fe,xRr),e(EE,kRr),e(EE,dU),e(dU,SRr),e(EE,RRr),e($o,BRr),e($o,uFe),e(uFe,PRr),e($o,$Rr),g(tL,$o,null),b(c,NPe,u),b(c,Af,u),e(Af,CE),e(CE,bFe),g(aL,bFe,null),e(Af,IRr),e(Af,vFe),e(vFe,qRr),b(c,jPe,u),b(c,Gr,u),g(nL,Gr,null),e(Gr,NRr),e(Gr,yf),e(yf,jRr),e(yf,cU),e(cU,DRr),e(yf,GRr),e(yf,fU),e(fU,ORr),e(yf,VRr),e(Gr,XRr),e(Gr,sL),e(sL,zRr),e(sL,FFe),e(FFe,QRr),e(sL,WRr),e(Gr,HRr),e(Gr,$t),g(lL,$t,null),e($t,URr),e($t,TFe),e(TFe,JRr),e($t,YRr),e($t,Lf),e(Lf,KRr),e(Lf,MFe),e(MFe,ZRr),e(Lf,eBr),e(Lf,mU),e(mU,oBr),e(Lf,rBr),e($t,tBr),e($t,EFe),e(EFe,aBr),e($t,nBr),g(iL,$t,null),e(Gr,sBr),e(Gr,Io),g(dL,Io,null),e(Io,lBr),e(Io,CFe),e(CFe,iBr),e(Io,dBr),e(Io,jn),e(jn,cBr),e(jn,wFe),e(wFe,fBr),e(jn,mBr),e(jn,AFe),e(AFe,gBr),e(jn,hBr),e(jn,yFe),e(yFe,pBr),e(jn,_Br),e(Io,uBr),e(Io,LFe),e(LFe,wE),e(wE,xFe),e(xFe,bBr),e(wE,vBr),e(wE,gU),e(gU,FBr),e(wE,TBr),e(Io,MBr),e(Io,kFe),e(kFe,EBr),e(Io,CBr),g(cL,Io,null),b(c,DPe,u),b(c,xf,u),e(xf,AE),e(AE,SFe),g(fL,SFe,null),e(xf,wBr),e(xf,RFe),e(RFe,ABr),b(c,GPe,u),b(c,Or,u),g(mL,Or,null),e(Or,yBr),e(Or,kf),e(kf,LBr),e(kf,hU),e(hU,xBr),e(kf,kBr),e(kf,pU),e(pU,SBr),e(kf,RBr),e(Or,BBr),e(Or,gL),e(gL,PBr),e(gL,BFe),e(BFe,$Br),e(gL,IBr),e(Or,qBr),e(Or,It),g(hL,It,null),e(It,NBr),e(It,PFe),e(PFe,jBr),e(It,DBr),e(It,Sf),e(Sf,GBr),e(Sf,$Fe),e($Fe,OBr),e(Sf,VBr),e(Sf,_U),e(_U,XBr),e(Sf,zBr),e(It,QBr),e(It,IFe),e(IFe,WBr),e(It,HBr),g(pL,It,null),e(Or,UBr),e(Or,qo),g(_L,qo,null),e(qo,JBr),e(qo,qFe),e(qFe,YBr),e(qo,KBr),e(qo,Dn),e(Dn,ZBr),e(Dn,NFe),e(NFe,ePr),e(Dn,oPr),e(Dn,jFe),e(jFe,rPr),e(Dn,tPr),e(Dn,DFe),e(DFe,aPr),e(Dn,nPr),e(qo,sPr),e(qo,uL),e(uL,yE),e(yE,GFe),e(GFe,lPr),e(yE,iPr),e(yE,uU),e(uU,dPr),e(yE,cPr),e(uL,fPr),e(uL,LE),e(LE,OFe),e(OFe,mPr),e(LE,gPr),e(LE,bU),e(bU,hPr),e(LE,pPr),e(qo,_Pr),e(qo,VFe),e(VFe,uPr),e(qo,bPr),g(bL,qo,null),b(c,OPe,u),b(c,Rf,u),e(Rf,xE),e(xE,XFe),g(vL,XFe,null),e(Rf,vPr),e(Rf,zFe),e(zFe,FPr),b(c,VPe,u),b(c,Vr,u),g(FL,Vr,null),e(Vr,TPr),e(Vr,Bf),e(Bf,MPr),e(Bf,vU),e(vU,EPr),e(Bf,CPr),e(Bf,FU),e(FU,wPr),e(Bf,APr),e(Vr,yPr),e(Vr,TL),e(TL,LPr),e(TL,QFe),e(QFe,xPr),e(TL,kPr),e(Vr,SPr),e(Vr,qt),g(ML,qt,null),e(qt,RPr),e(qt,WFe),e(WFe,BPr),e(qt,PPr),e(qt,Pf),e(Pf,$Pr),e(Pf,HFe),e(HFe,IPr),e(Pf,qPr),e(Pf,TU),e(TU,NPr),e(Pf,jPr),e(qt,DPr),e(qt,UFe),e(UFe,GPr),e(qt,OPr),g(EL,qt,null),e(Vr,VPr),e(Vr,No),g(CL,No,null),e(No,XPr),e(No,JFe),e(JFe,zPr),e(No,QPr),e(No,Gn),e(Gn,WPr),e(Gn,YFe),e(YFe,HPr),e(Gn,UPr),e(Gn,KFe),e(KFe,JPr),e(Gn,YPr),e(Gn,ZFe),e(ZFe,KPr),e(Gn,ZPr),e(No,e$r),e(No,eTe),e(eTe,kE),e(kE,oTe),e(oTe,o$r),e(kE,r$r),e(kE,MU),e(MU,t$r),e(kE,a$r),e(No,n$r),e(No,rTe),e(rTe,s$r),e(No,l$r),g(wL,No,null),XPe=!0},p(c,[u]){const AL={};u&2&&(AL.$$scope={dirty:u,ctx:c}),Of.$set(AL);const tTe={};u&2&&(tTe.$$scope={dirty:u,ctx:c}),jh.$set(tTe);const aTe={};u&2&&(aTe.$$scope={dirty:u,ctx:c}),Jh.$set(aTe)},i(c){XPe||(h(he.$$.fragment,c),h(Da.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(Of.$$.fragment,c),h(qC.$$.fragment,c),h(NC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(XC.$$.fragment,c),h(zC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(YC.$$.fragment,c),h(KC.$$.fragment,c),h(ow.$$.fragment,c),h(jh.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(iw.$$.fragment,c),h(Jh.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Rw.$$.fragment,c),h(Bw.$$.fragment,c),h($w.$$.fragment,c),h(Iw.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Ww.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(e6.$$.fragment,c),h(r6.$$.fragment,c),h(t6.$$.fragment,c),h(a6.$$.fragment,c),h(n6.$$.fragment,c),h(s6.$$.fragment,c),h(l6.$$.fragment,c),h(d6.$$.fragment,c),h(c6.$$.fragment,c),h(f6.$$.fragment,c),h(m6.$$.fragment,c),h(g6.$$.fragment,c),h(h6.$$.fragment,c),h(_6.$$.fragment,c),h(u6.$$.fragment,c),h(b6.$$.fragment,c),h(v6.$$.fragment,c),h(F6.$$.fragment,c),h(T6.$$.fragment,c),h(E6.$$.fragment,c),h(C6.$$.fragment,c),h(w6.$$.fragment,c),h(A6.$$.fragment,c),h(y6.$$.fragment,c),h(L6.$$.fragment,c),h(k6.$$.fragment,c),h(S6.$$.fragment,c),h(R6.$$.fragment,c),h(B6.$$.fragment,c),h(P6.$$.fragment,c),h($6.$$.fragment,c),h(q6.$$.fragment,c),h(N6.$$.fragment,c),h(j6.$$.fragment,c),h(D6.$$.fragment,c),h(G6.$$.fragment,c),h(O6.$$.fragment,c),h(X6.$$.fragment,c),h(z6.$$.fragment,c),h(Q6.$$.fragment,c),h(W6.$$.fragment,c),h(H6.$$.fragment,c),h(U6.$$.fragment,c),h(Y6.$$.fragment,c),h(K6.$$.fragment,c),h(Z6.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(C0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(S0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(z0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(Ay.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(By.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Wy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(e8.$$.fragment,c),h(o8.$$.fragment,c),h(r8.$$.fragment,c),h(t8.$$.fragment,c),h(n8.$$.fragment,c),h(s8.$$.fragment,c),h(l8.$$.fragment,c),h(i8.$$.fragment,c),h(d8.$$.fragment,c),h(c8.$$.fragment,c),h(m8.$$.fragment,c),h(g8.$$.fragment,c),h(h8.$$.fragment,c),h(p8.$$.fragment,c),h(_8.$$.fragment,c),h(u8.$$.fragment,c),h(v8.$$.fragment,c),h(F8.$$.fragment,c),h(T8.$$.fragment,c),h(M8.$$.fragment,c),h(E8.$$.fragment,c),h(C8.$$.fragment,c),h(A8.$$.fragment,c),h(y8.$$.fragment,c),h(L8.$$.fragment,c),h(x8.$$.fragment,c),h(k8.$$.fragment,c),h(S8.$$.fragment,c),h(B8.$$.fragment,c),h(P8.$$.fragment,c),h($8.$$.fragment,c),h(I8.$$.fragment,c),h(q8.$$.fragment,c),h(N8.$$.fragment,c),h(D8.$$.fragment,c),h(G8.$$.fragment,c),h(O8.$$.fragment,c),h(V8.$$.fragment,c),h(X8.$$.fragment,c),h(z8.$$.fragment,c),h(W8.$$.fragment,c),h(H8.$$.fragment,c),h(U8.$$.fragment,c),h(J8.$$.fragment,c),h(Y8.$$.fragment,c),h(K8.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),XPe=!0)},o(c){p(he.$$.fragment,c),p(Da.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(Of.$$.fragment,c),p(qC.$$.fragment,c),p(NC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(XC.$$.fragment,c),p(zC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(YC.$$.fragment,c),p(KC.$$.fragment,c),p(ow.$$.fragment,c),p(jh.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(iw.$$.fragment,c),p(Jh.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Rw.$$.fragment,c),p(Bw.$$.fragment,c),p($w.$$.fragment,c),p(Iw.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Ww.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(e6.$$.fragment,c),p(r6.$$.fragment,c),p(t6.$$.fragment,c),p(a6.$$.fragment,c),p(n6.$$.fragment,c),p(s6.$$.fragment,c),p(l6.$$.fragment,c),p(d6.$$.fragment,c),p(c6.$$.fragment,c),p(f6.$$.fragment,c),p(m6.$$.fragment,c),p(g6.$$.fragment,c),p(h6.$$.fragment,c),p(_6.$$.fragment,c),p(u6.$$.fragment,c),p(b6.$$.fragment,c),p(v6.$$.fragment,c),p(F6.$$.fragment,c),p(T6.$$.fragment,c),p(E6.$$.fragment,c),p(C6.$$.fragment,c),p(w6.$$.fragment,c),p(A6.$$.fragment,c),p(y6.$$.fragment,c),p(L6.$$.fragment,c),p(k6.$$.fragment,c),p(S6.$$.fragment,c),p(R6.$$.fragment,c),p(B6.$$.fragment,c),p(P6.$$.fragment,c),p($6.$$.fragment,c),p(q6.$$.fragment,c),p(N6.$$.fragment,c),p(j6.$$.fragment,c),p(D6.$$.fragment,c),p(G6.$$.fragment,c),p(O6.$$.fragment,c),p(X6.$$.fragment,c),p(z6.$$.fragment,c),p(Q6.$$.fragment,c),p(W6.$$.fragment,c),p(H6.$$.fragment,c),p(U6.$$.fragment,c),p(Y6.$$.fragment,c),p(K6.$$.fragment,c),p(Z6.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(C0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(S0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(z0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(Ay.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(By.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Wy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(e8.$$.fragment,c),p(o8.$$.fragment,c),p(r8.$$.fragment,c),p(t8.$$.fragment,c),p(n8.$$.fragment,c),p(s8.$$.fragment,c),p(l8.$$.fragment,c),p(i8.$$.fragment,c),p(d8.$$.fragment,c),p(c8.$$.fragment,c),p(m8.$$.fragment,c),p(g8.$$.fragment,c),p(h8.$$.fragment,c),p(p8.$$.fragment,c),p(_8.$$.fragment,c),p(u8.$$.fragment,c),p(v8.$$.fragment,c),p(F8.$$.fragment,c),p(T8.$$.fragment,c),p(M8.$$.fragment,c),p(E8.$$.fragment,c),p(C8.$$.fragment,c),p(A8.$$.fragment,c),p(y8.$$.fragment,c),p(L8.$$.fragment,c),p(x8.$$.fragment,c),p(k8.$$.fragment,c),p(S8.$$.fragment,c),p(B8.$$.fragment,c),p(P8.$$.fragment,c),p($8.$$.fragment,c),p(I8.$$.fragment,c),p(q8.$$.fragment,c),p(N8.$$.fragment,c),p(D8.$$.fragment,c),p(G8.$$.fragment,c),p(O8.$$.fragment,c),p(V8.$$.fragment,c),p(X8.$$.fragment,c),p(z8.$$.fragment,c),p(W8.$$.fragment,c),p(H8.$$.fragment,c),p(U8.$$.fragment,c),p(J8.$$.fragment,c),p(Y8.$$.fragment,c),p(K8.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(FL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),XPe=!1},d(c){t(Z),c&&t(io),c&&t(ce),_(he),c&&t(qf),c&&t(fa),c&&t(xe),c&&t(co),c&&t(jf),_(Da,c),c&&t(fo),c&&t(ue),c&&t(zo),c&&t(Ga),c&&t(VRe),c&&t(Xi),_($C),c&&t(XRe),c&&t(Qn),c&&t(zRe),_(IC,c),c&&t(QRe),c&&t(L9),c&&t(WRe),_(Of,c),c&&t(HRe),c&&t(zi),_(qC),c&&t(URe),c&&t(Qo),_(NC),_(GC),_(OC),_(VC),c&&t(JRe),c&&t(Wi),_(XC),c&&t(YRe),c&&t(Wo),_(zC),_(HC),_(UC),_(JC),c&&t(KRe),c&&t(Hi),_(YC),c&&t(ZRe),c&&t(Ho),_(KC),_(ow),_(jh),_(rw),_(tw),c&&t(eBe),c&&t(Ui),_(aw),c&&t(oBe),c&&t(Uo),_(nw),_(iw),_(Jh),_(dw),_(cw),c&&t(rBe),c&&t(Yi),_(fw),c&&t(tBe),c&&t(Jo),_(mw),_(hw),_(pw),_(_w),_(uw),c&&t(aBe),c&&t(ed),_(bw),c&&t(nBe),c&&t(Yo),_(vw),_(Tw),_(Mw),_(Ew),_(Cw),c&&t(sBe),c&&t(td),_(ww),c&&t(lBe),c&&t(Ko),_(Aw),_(Lw),_(xw),_(kw),_(Sw),c&&t(iBe),c&&t(sd),_(Rw),c&&t(dBe),c&&t(Zo),_(Bw),_($w),_(Iw),_(qw),_(Nw),c&&t(cBe),c&&t(dd),_(jw),c&&t(fBe),c&&t(er),_(Dw),_(Ow),_(Vw),_(Xw),_(zw),c&&t(mBe),c&&t(md),_(Qw),c&&t(gBe),c&&t(or),_(Ww),_(Uw),_(Jw),_(Yw),_(Kw),c&&t(hBe),c&&t(pd),_(Zw),c&&t(pBe),c&&t(rr),_(e6),_(r6),_(t6),_(a6),_(n6),c&&t(_Be),c&&t(bd),_(s6),c&&t(uBe),c&&t(tr),_(l6),_(d6),_(c6),_(f6),_(m6),c&&t(bBe),c&&t(Td),_(g6),c&&t(vBe),c&&t(ar),_(h6),_(_6),_(u6),_(b6),_(v6),c&&t(FBe),c&&t(Cd),_(F6),c&&t(TBe),c&&t(nr),_(T6),_(E6),_(C6),_(w6),_(A6),c&&t(MBe),c&&t(yd),_(y6),c&&t(EBe),c&&t(sr),_(L6),_(k6),_(S6),_(R6),_(B6),c&&t(CBe),c&&t(kd),_(P6),c&&t(wBe),c&&t(lr),_($6),_(q6),_(N6),_(j6),_(D6),c&&t(ABe),c&&t(Bd),_(G6),c&&t(yBe),c&&t(ir),_(O6),_(X6),_(z6),_(Q6),_(W6),c&&t(LBe),c&&t(Id),_(H6),c&&t(xBe),c&&t(dr),_(U6),_(Y6),_(K6),_(Z6),_(eA),c&&t(kBe),c&&t(jd),_(oA),c&&t(SBe),c&&t(cr),_(rA),_(aA),_(nA),_(sA),_(lA),c&&t(RBe),c&&t(Od),_(iA),c&&t(BBe),c&&t(fr),_(dA),_(fA),_(mA),_(gA),_(hA),c&&t(PBe),c&&t(zd),_(pA),c&&t($Be),c&&t(mr),_(_A),_(bA),_(vA),_(FA),_(MA),c&&t(IBe),c&&t(Hd),_(EA),c&&t(qBe),c&&t(gr),_(CA),_(AA),_(yA),_(LA),_(xA),c&&t(NBe),c&&t(Yd),_(kA),c&&t(jBe),c&&t(hr),_(SA),_(BA),_(PA),_($A),_(IA),c&&t(DBe),c&&t(oc),_(qA),c&&t(GBe),c&&t(pr),_(NA),_(DA),_(GA),_(OA),_(VA),c&&t(OBe),c&&t(ac),_(XA),c&&t(VBe),c&&t(_r),_(zA),_(WA),_(HA),_(UA),_(JA),c&&t(XBe),c&&t(lc),_(YA),c&&t(zBe),c&&t(ur),_(KA),_(e0),_(o0),_(r0),_(t0),c&&t(QBe),c&&t(cc),_(a0),c&&t(WBe),c&&t(br),_(n0),_(l0),_(i0),_(d0),_(c0),c&&t(HBe),c&&t(gc),_(f0),c&&t(UBe),c&&t(vr),_(m0),_(h0),_(p0),_(_0),_(u0),c&&t(JBe),c&&t(_c),_(b0),c&&t(YBe),c&&t(Fr),_(v0),_(T0),_(M0),_(E0),_(C0),c&&t(KBe),c&&t(vc),_(w0),c&&t(ZBe),c&&t(Tr),_(A0),_(L0),_(x0),_(k0),_(S0),c&&t(ePe),c&&t(Mc),_(R0),c&&t(oPe),c&&t(Mr),_(B0),_($0),_(I0),_(q0),_(j0),c&&t(rPe),c&&t(wc),_(D0),c&&t(tPe),c&&t(Er),_(G0),_(V0),_(X0),_(z0),_(Q0),c&&t(aPe),c&&t(Lc),_(W0),c&&t(nPe),c&&t(Cr),_(H0),_(J0),_(Y0),_(K0),_(Z0),c&&t(sPe),c&&t(Sc),_(ey),c&&t(lPe),c&&t(wr),_(oy),_(ty),_(ay),_(ny),_(sy),c&&t(iPe),c&&t(Pc),_(ly),c&&t(dPe),c&&t(Ar),_(iy),_(cy),_(fy),_(my),_(gy),c&&t(cPe),c&&t(qc),_(hy),c&&t(fPe),c&&t(yr),_(py),_(uy),_(by),_(vy),_(Fy),c&&t(mPe),c&&t(Dc),_(Ty),c&&t(gPe),c&&t(Lr),_(My),_(Cy),_(wy),_(Ay),_(yy),c&&t(hPe),c&&t(Vc),_(Ly),c&&t(pPe),c&&t(xr),_(xy),_(Sy),_(Ry),_(By),_(Py),c&&t(_Pe),c&&t(Qc),_($y),c&&t(uPe),c&&t(kr),_(Iy),_(Ny),_(jy),_(Dy),_(Gy),c&&t(bPe),c&&t(Uc),_(Oy),c&&t(vPe),c&&t(Sr),_(Vy),_(zy),_(Qy),_(Wy),_(Hy),c&&t(FPe),c&&t(Kc),_(Uy),c&&t(TPe),c&&t(Rr),_(Jy),_(Ky),_(Zy),_(e8),_(o8),c&&t(MPe),c&&t(of),_(r8),c&&t(EPe),c&&t(Br),_(t8),_(n8),_(s8),_(l8),_(i8),c&&t(CPe),c&&t(af),_(d8),c&&t(wPe),c&&t(Pr),_(c8),_(m8),_(g8),_(h8),_(p8),c&&t(APe),c&&t(lf),_(_8),c&&t(yPe),c&&t($r),_(u8),_(v8),_(F8),_(T8),_(M8),c&&t(LPe),c&&t(ff),_(E8),c&&t(xPe),c&&t(Ir),_(C8),_(A8),_(y8),_(L8),_(x8),c&&t(kPe),c&&t(hf),_(k8),c&&t(SPe),c&&t(qr),_(S8),_(B8),_(P8),_($8),_(I8),c&&t(RPe),c&&t(uf),_(q8),c&&t(BPe),c&&t(Nr),_(N8),_(D8),_(G8),_(O8),_(V8),c&&t(PPe),c&&t(Ff),_(X8),c&&t($Pe),c&&t(jr),_(z8),_(W8),_(H8),_(U8),_(J8),c&&t(IPe),c&&t(Ef),_(Y8),c&&t(qPe),c&&t(Dr),_(K8),_(eL),_(oL),_(rL),_(tL),c&&t(NPe),c&&t(Af),_(aL),c&&t(jPe),c&&t(Gr),_(nL),_(lL),_(iL),_(dL),_(cL),c&&t(DPe),c&&t(xf),_(fL),c&&t(GPe),c&&t(Or),_(mL),_(hL),_(pL),_(_L),_(bL),c&&t(OPe),c&&t(Rf),_(vL),c&&t(VPe),c&&t(Vr),_(FL),_(ML),_(EL),_(CL),_(wL)}}}const i6t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function d6t(If){return t6t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class p6t extends Zwt{constructor(Z){super();e6t(this,Z,d6t,l6t,o6t,{})}}export{p6t as default,i6t as metadata};
