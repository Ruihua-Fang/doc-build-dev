import{S as P0t,i as $0t,s as I0t,e as a,k as l,w as f,t as o,M as q0t,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _,v as N0t}from"../../chunks/vendor-6b77c823.js";import{T as nNr}from"../../chunks/Tip-39098574.js";import{D as w}from"../../chunks/Docstring-1088f2fb.js";import{C as A}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function j0t(Xf){let oe,co,me,Ae,io,_e,Ce,Xo,zi,zf,fa,Qi,Wi,QE,Qf,Se,fo,Hi,On,WE,Vn,Xn,HE,Ui,zn,UE,Ji,Wf,Da;return{c(){oe=a("p"),co=o("If your "),me=a("code"),Ae=o("NewModelConfig"),io=o(" is a subclass of "),_e=a("code"),Ce=o("PretrainedConfig"),Xo=o(`, make sure its
`),zi=a("code"),zf=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),Qi=a("code"),Wi=o('"new-model"'),QE=o(")."),Qf=l(),Se=a("p"),fo=o("Likewise, if your "),Hi=a("code"),On=o("NewModel"),WE=o(" is a subclass of "),Vn=a("a"),Xn=o("PreTrainedModel"),HE=o(`, make sure its
`),Ui=a("code"),zn=o("config_class"),UE=o(` attribute is set to the same class you use when registering the model (here
`),Ji=a("code"),Wf=o("NewModelConfig"),Da=o(")."),this.h()},l(mo){oe=n(mo,"P",{});var ve=s(oe);co=r(ve,"If your "),me=n(ve,"CODE",{});var Q9=s(me);Ae=r(Q9,"NewModelConfig"),Q9.forEach(t),io=r(ve," is a subclass of "),_e=n(ve,"CODE",{});var Yi=s(_e);Ce=r(Yi,"PretrainedConfig"),Yi.forEach(t),Xo=r(ve,`, make sure its
`),zi=n(ve,"CODE",{});var W9=s(zi);zf=r(W9,"model_type"),W9.forEach(t),fa=r(ve," attribute is set to the same key you use when registering the config (here "),Qi=n(ve,"CODE",{});var H9=s(Qi);Wi=r(H9,'"new-model"'),H9.forEach(t),QE=r(ve,")."),ve.forEach(t),Qf=i(mo),Se=n(mo,"P",{});var zo=s(Se);fo=r(zo,"Likewise, if your "),Hi=n(zo,"CODE",{});var Ga=s(Hi);On=r(Ga,"NewModel"),Ga.forEach(t),WE=r(zo," is a subclass of "),Vn=n(zo,"A",{href:!0});var U9=s(Vn);Xn=r(U9,"PreTrainedModel"),U9.forEach(t),HE=r(zo,`, make sure its
`),Ui=n(zo,"CODE",{});var Hf=s(Ui);zn=r(Hf,"config_class"),Hf.forEach(t),UE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Ji=n(zo,"CODE",{});var J9=s(Ji);Wf=r(J9,"NewModelConfig"),J9.forEach(t),Da=r(zo,")."),zo.forEach(t),this.h()},h(){d(Vn,"href","/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel")},m(mo,ve){b(mo,oe,ve),e(oe,co),e(oe,me),e(me,Ae),e(oe,io),e(oe,_e),e(_e,Ce),e(oe,Xo),e(oe,zi),e(zi,zf),e(oe,fa),e(oe,Qi),e(Qi,Wi),e(oe,QE),b(mo,Qf,ve),b(mo,Se,ve),e(Se,fo),e(Se,Hi),e(Hi,On),e(Se,WE),e(Se,Vn),e(Vn,Xn),e(Se,HE),e(Se,Ui),e(Ui,zn),e(Se,UE),e(Se,Ji),e(Ji,Wf),e(Se,Da)},d(mo){mo&&t(oe),mo&&t(Qf),mo&&t(Se)}}}function D0t(Xf){let oe,co,me,Ae,io;return{c(){oe=a("p"),co=o("Passing "),me=a("code"),Ae=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(_e){oe=n(_e,"P",{});var Ce=s(oe);co=r(Ce,"Passing "),me=n(Ce,"CODE",{});var Xo=s(me);Ae=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(_e,Ce){b(_e,oe,Ce),e(oe,co),e(oe,me),e(me,Ae),e(oe,io)},d(_e){_e&&t(oe)}}}function G0t(Xf){let oe,co,me,Ae,io;return{c(){oe=a("p"),co=o("Passing "),me=a("code"),Ae=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(_e){oe=n(_e,"P",{});var Ce=s(oe);co=r(Ce,"Passing "),me=n(Ce,"CODE",{});var Xo=s(me);Ae=r(Xo,"use_auth_token=True"),Xo.forEach(t),io=r(Ce," is required when you want to use a private model."),Ce.forEach(t)},m(_e,Ce){b(_e,oe,Ce),e(oe,co),e(oe,me),e(me,Ae),e(oe,io)},d(_e){_e&&t(oe)}}}function O0t(Xf){let oe,co,me,Ae,io,_e,Ce,Xo,zi,zf,fa,Qi,Wi,QE,Qf,Se,fo,Hi,On,WE,Vn,Xn,HE,Ui,zn,UE,Ji,Wf,Da,mo,ve,Q9,Yi,W9,H9,zo,Ga,U9,Hf,J9,_Ne,tPe,Ki,Uf,lK,JE,uNe,iK,bNe,aPe,Qn,vNe,dK,FNe,TNe,cK,MNe,ENe,nPe,YE,sPe,Y9,CNe,lPe,Jf,iPe,Zi,Yf,fK,KE,wNe,mK,ANe,dPe,Qo,ZE,yNe,e3,LNe,K9,xNe,kNe,SNe,o3,RNe,gK,BNe,PNe,$Ne,go,r3,INe,hK,qNe,NNe,ed,jNe,pK,DNe,GNe,_K,ONe,VNe,XNe,v,Kf,uK,zNe,QNe,Z9,WNe,HNe,UNe,Zf,bK,JNe,YNe,ex,KNe,ZNe,eje,em,vK,oje,rje,ox,tje,aje,nje,om,FK,sje,lje,rx,ije,dje,cje,rm,TK,fje,mje,tx,gje,hje,pje,tm,MK,_je,uje,ax,bje,vje,Fje,am,EK,Tje,Mje,nx,Eje,Cje,wje,nm,CK,Aje,yje,sx,Lje,xje,kje,sm,wK,Sje,Rje,lx,Bje,Pje,$je,lm,AK,Ije,qje,ix,Nje,jje,Dje,im,yK,Gje,Oje,dx,Vje,Xje,zje,dm,LK,Qje,Wje,cx,Hje,Uje,Jje,cm,xK,Yje,Kje,fx,Zje,eDe,oDe,fm,kK,rDe,tDe,mx,aDe,nDe,sDe,mm,SK,lDe,iDe,gx,dDe,cDe,fDe,gm,RK,mDe,gDe,hx,hDe,pDe,_De,hm,BK,uDe,bDe,px,vDe,FDe,TDe,pm,PK,MDe,EDe,_x,CDe,wDe,ADe,_m,$K,yDe,LDe,ux,xDe,kDe,SDe,um,IK,RDe,BDe,bx,PDe,$De,IDe,bm,qK,qDe,NDe,vx,jDe,DDe,GDe,vm,NK,ODe,VDe,Fx,XDe,zDe,QDe,Fm,jK,WDe,HDe,Tx,UDe,JDe,YDe,Tm,DK,KDe,ZDe,Mx,eGe,oGe,rGe,Mm,GK,tGe,aGe,Ex,nGe,sGe,lGe,Em,OK,iGe,dGe,Cx,cGe,fGe,mGe,Cm,VK,gGe,hGe,wx,pGe,_Ge,uGe,wm,XK,bGe,vGe,Ax,FGe,TGe,MGe,Am,zK,EGe,CGe,yx,wGe,AGe,yGe,ym,QK,LGe,xGe,Lx,kGe,SGe,RGe,Lm,WK,BGe,PGe,xx,$Ge,IGe,qGe,xm,HK,NGe,jGe,kx,DGe,GGe,OGe,km,UK,VGe,XGe,Sx,zGe,QGe,WGe,Sm,JK,HGe,UGe,Rx,JGe,YGe,KGe,Rm,YK,ZGe,eOe,Bx,oOe,rOe,tOe,Bm,KK,aOe,nOe,Px,sOe,lOe,iOe,Pm,ZK,dOe,cOe,$x,fOe,mOe,gOe,$m,eZ,hOe,pOe,Ix,_Oe,uOe,bOe,Im,oZ,vOe,FOe,qx,TOe,MOe,EOe,qm,rZ,COe,wOe,Nx,AOe,yOe,LOe,Nm,tZ,xOe,kOe,jx,SOe,ROe,BOe,jm,aZ,POe,$Oe,Dx,IOe,qOe,NOe,Dm,nZ,jOe,DOe,Gx,GOe,OOe,VOe,Gm,sZ,XOe,zOe,Ox,QOe,WOe,HOe,Om,lZ,UOe,JOe,Vx,YOe,KOe,ZOe,Vm,iZ,eVe,oVe,Xx,rVe,tVe,aVe,Xm,dZ,nVe,sVe,zx,lVe,iVe,dVe,zm,cZ,cVe,fVe,Qx,mVe,gVe,hVe,Qm,fZ,pVe,_Ve,Wx,uVe,bVe,vVe,Wm,mZ,FVe,TVe,Hx,MVe,EVe,CVe,Hm,gZ,wVe,AVe,Ux,yVe,LVe,xVe,Um,hZ,kVe,SVe,Jx,RVe,BVe,PVe,Jm,pZ,$Ve,IVe,Yx,qVe,NVe,jVe,Ym,_Z,DVe,GVe,Kx,OVe,VVe,XVe,Km,uZ,zVe,QVe,Zx,WVe,HVe,UVe,Zm,bZ,JVe,YVe,ek,KVe,ZVe,eXe,eg,vZ,oXe,rXe,ok,tXe,aXe,nXe,og,FZ,sXe,lXe,rk,iXe,dXe,cXe,rg,TZ,fXe,mXe,tk,gXe,hXe,pXe,tg,MZ,_Xe,uXe,ak,bXe,vXe,FXe,ag,EZ,TXe,MXe,nk,EXe,CXe,wXe,ng,CZ,AXe,yXe,sk,LXe,xXe,kXe,sg,wZ,SXe,RXe,lk,BXe,PXe,$Xe,lg,AZ,IXe,qXe,ik,NXe,jXe,DXe,ig,yZ,GXe,OXe,dk,VXe,XXe,zXe,dg,LZ,QXe,WXe,ck,HXe,UXe,JXe,cg,xZ,YXe,KXe,fk,ZXe,eze,oze,fg,kZ,rze,tze,mk,aze,nze,sze,mg,SZ,lze,ize,gk,dze,cze,fze,gg,RZ,mze,gze,hk,hze,pze,_ze,hg,BZ,uze,bze,pk,vze,Fze,Tze,pg,PZ,Mze,Eze,_k,Cze,wze,Aze,_g,$Z,yze,Lze,uk,xze,kze,Sze,ug,IZ,Rze,Bze,bk,Pze,$ze,Ize,bg,qZ,qze,Nze,vk,jze,Dze,Gze,vg,NZ,Oze,Vze,Fk,Xze,zze,Qze,Fg,jZ,Wze,Hze,Tk,Uze,Jze,Yze,Tg,DZ,Kze,Zze,Mk,eQe,oQe,rQe,Mg,GZ,tQe,aQe,Ek,nQe,sQe,lQe,Eg,OZ,iQe,dQe,Ck,cQe,fQe,mQe,Cg,VZ,gQe,hQe,wk,pQe,_Qe,uQe,wg,XZ,bQe,vQe,Ak,FQe,TQe,MQe,Ag,zZ,EQe,CQe,yk,wQe,AQe,yQe,yg,QZ,LQe,xQe,Lk,kQe,SQe,RQe,Lg,WZ,BQe,PQe,xk,$Qe,IQe,qQe,xg,HZ,NQe,jQe,kk,DQe,GQe,OQe,kg,UZ,VQe,XQe,Sk,zQe,QQe,WQe,Sg,JZ,HQe,UQe,Rk,JQe,YQe,KQe,Rg,YZ,ZQe,eWe,Bk,oWe,rWe,tWe,Bg,KZ,aWe,nWe,Pk,sWe,lWe,iWe,Pg,ZZ,dWe,cWe,$k,fWe,mWe,gWe,$g,eee,hWe,pWe,Ik,_We,uWe,bWe,Ig,oee,vWe,FWe,qk,TWe,MWe,EWe,qg,ree,CWe,wWe,Nk,AWe,yWe,LWe,Ng,tee,xWe,kWe,jk,SWe,RWe,BWe,jg,aee,PWe,$We,Dk,IWe,qWe,NWe,Dg,nee,jWe,DWe,Gk,GWe,OWe,VWe,Gg,see,XWe,zWe,Ok,QWe,WWe,HWe,Og,lee,UWe,JWe,Vk,YWe,KWe,ZWe,Vg,iee,eHe,oHe,Xk,rHe,tHe,aHe,Xg,dee,nHe,sHe,zk,lHe,iHe,dHe,zg,cee,cHe,fHe,Qk,mHe,gHe,hHe,fee,pHe,_He,t3,uHe,Qg,a3,bHe,mee,vHe,cPe,od,Wg,gee,n3,FHe,hee,THe,fPe,Wo,s3,MHe,l3,EHe,Wk,CHe,wHe,AHe,i3,yHe,pee,LHe,xHe,kHe,ho,d3,SHe,_ee,RHe,BHe,Oa,PHe,uee,$He,IHe,bee,qHe,NHe,vee,jHe,DHe,GHe,E,Wn,Fee,OHe,VHe,Hk,XHe,zHe,Uk,QHe,WHe,HHe,Hn,Tee,UHe,JHe,Jk,YHe,KHe,Yk,ZHe,eUe,oUe,Un,Mee,rUe,tUe,Kk,aUe,nUe,Zk,sUe,lUe,iUe,Hg,Eee,dUe,cUe,eS,fUe,mUe,gUe,Jn,Cee,hUe,pUe,oS,_Ue,uUe,rS,bUe,vUe,FUe,Ug,wee,TUe,MUe,tS,EUe,CUe,wUe,Jg,Aee,AUe,yUe,aS,LUe,xUe,kUe,Yg,yee,SUe,RUe,nS,BUe,PUe,$Ue,Yn,Lee,IUe,qUe,sS,NUe,jUe,lS,DUe,GUe,OUe,Kn,xee,VUe,XUe,iS,zUe,QUe,dS,WUe,HUe,UUe,Zn,kee,JUe,YUe,cS,KUe,ZUe,fS,eJe,oJe,rJe,Kg,See,tJe,aJe,mS,nJe,sJe,lJe,Zg,Ree,iJe,dJe,gS,cJe,fJe,mJe,es,Bee,gJe,hJe,hS,pJe,_Je,pS,uJe,bJe,vJe,eh,Pee,FJe,TJe,_S,MJe,EJe,CJe,os,$ee,wJe,AJe,uS,yJe,LJe,bS,xJe,kJe,SJe,rs,Iee,RJe,BJe,vS,PJe,$Je,FS,IJe,qJe,NJe,ts,qee,jJe,DJe,TS,GJe,OJe,Nee,VJe,XJe,zJe,oh,jee,QJe,WJe,MS,HJe,UJe,JJe,as,Dee,YJe,KJe,ES,ZJe,eYe,CS,oYe,rYe,tYe,ns,Gee,aYe,nYe,wS,sYe,lYe,AS,iYe,dYe,cYe,ss,Oee,fYe,mYe,yS,gYe,hYe,LS,pYe,_Ye,uYe,ls,Vee,bYe,vYe,xS,FYe,TYe,kS,MYe,EYe,CYe,is,Xee,wYe,AYe,SS,yYe,LYe,RS,xYe,kYe,SYe,ds,zee,RYe,BYe,BS,PYe,$Ye,PS,IYe,qYe,NYe,rh,Qee,jYe,DYe,$S,GYe,OYe,VYe,cs,Wee,XYe,zYe,IS,QYe,WYe,qS,HYe,UYe,JYe,th,Hee,YYe,KYe,NS,ZYe,eKe,oKe,fs,Uee,rKe,tKe,jS,aKe,nKe,DS,sKe,lKe,iKe,ms,Jee,dKe,cKe,GS,fKe,mKe,OS,gKe,hKe,pKe,gs,Yee,_Ke,uKe,VS,bKe,vKe,XS,FKe,TKe,MKe,hs,Kee,EKe,CKe,zS,wKe,AKe,QS,yKe,LKe,xKe,ps,Zee,kKe,SKe,WS,RKe,BKe,HS,PKe,$Ke,IKe,ah,eoe,qKe,NKe,US,jKe,DKe,GKe,_s,ooe,OKe,VKe,JS,XKe,zKe,YS,QKe,WKe,HKe,us,roe,UKe,JKe,KS,YKe,KKe,ZS,ZKe,eZe,oZe,bs,toe,rZe,tZe,eR,aZe,nZe,oR,sZe,lZe,iZe,vs,aoe,dZe,cZe,rR,fZe,mZe,tR,gZe,hZe,pZe,Fs,noe,_Ze,uZe,aR,bZe,vZe,nR,FZe,TZe,MZe,Ts,soe,EZe,CZe,sR,wZe,AZe,lR,yZe,LZe,xZe,nh,loe,kZe,SZe,iR,RZe,BZe,PZe,Ms,ioe,$Ze,IZe,dR,qZe,NZe,cR,jZe,DZe,GZe,sh,doe,OZe,VZe,fR,XZe,zZe,QZe,lh,coe,WZe,HZe,mR,UZe,JZe,YZe,Es,foe,KZe,ZZe,gR,eeo,oeo,hR,reo,teo,aeo,Cs,moe,neo,seo,pR,leo,ieo,_R,deo,ceo,feo,ws,goe,meo,geo,uR,heo,peo,bR,_eo,ueo,beo,ih,hoe,veo,Feo,vR,Teo,Meo,Eeo,As,poe,Ceo,weo,FR,Aeo,yeo,TR,Leo,xeo,keo,ys,_oe,Seo,Reo,MR,Beo,Peo,ER,$eo,Ieo,qeo,Ls,uoe,Neo,jeo,CR,Deo,Geo,wR,Oeo,Veo,Xeo,xs,boe,zeo,Qeo,AR,Weo,Heo,yR,Ueo,Jeo,Yeo,ks,voe,Keo,Zeo,LR,eoo,ooo,xR,roo,too,aoo,Ss,Foe,noo,soo,kR,loo,ioo,SR,doo,coo,foo,dh,Toe,moo,goo,RR,hoo,poo,_oo,ch,Moe,uoo,boo,BR,voo,Foo,Too,fh,Eoe,Moo,Eoo,PR,Coo,woo,Aoo,mh,Coe,yoo,Loo,$R,xoo,koo,Soo,Rs,woe,Roo,Boo,IR,Poo,$oo,qR,Ioo,qoo,Noo,gh,Aoe,joo,Doo,NR,Goo,Ooo,Voo,Bs,yoe,Xoo,zoo,jR,Qoo,Woo,DR,Hoo,Uoo,Joo,Ps,Loe,Yoo,Koo,GR,Zoo,ero,OR,oro,rro,tro,$s,xoe,aro,nro,VR,sro,lro,XR,iro,dro,cro,Is,koe,fro,mro,zR,gro,hro,QR,pro,_ro,uro,qs,Soe,bro,vro,WR,Fro,Tro,HR,Mro,Ero,Cro,Ns,Roe,wro,Aro,UR,yro,Lro,JR,xro,kro,Sro,hh,Boe,Rro,Bro,YR,Pro,$ro,Iro,ph,Poe,qro,Nro,KR,jro,Dro,Gro,js,$oe,Oro,Vro,ZR,Xro,zro,eB,Qro,Wro,Hro,Ds,Ioe,Uro,Jro,oB,Yro,Kro,rB,Zro,eto,oto,Gs,qoe,rto,tto,tB,ato,nto,aB,sto,lto,ito,_h,Noe,dto,cto,nB,fto,mto,gto,uh,joe,hto,pto,sB,_to,uto,bto,bh,Doe,vto,Fto,lB,Tto,Mto,Eto,Os,Goe,Cto,wto,iB,Ato,yto,dB,Lto,xto,kto,vh,Ooe,Sto,Rto,cB,Bto,Pto,$to,Fh,Voe,Ito,qto,fB,Nto,jto,Dto,Vs,Xoe,Gto,Oto,mB,Vto,Xto,gB,zto,Qto,Wto,Th,zoe,Hto,Uto,hB,Jto,Yto,Kto,Mh,Qoe,Zto,eao,pB,oao,rao,tao,Xs,Woe,aao,nao,_B,sao,lao,uB,iao,dao,cao,zs,Hoe,fao,mao,bB,gao,hao,vB,pao,_ao,uao,Qs,Uoe,bao,vao,FB,Fao,Tao,TB,Mao,Eao,Cao,Ws,Joe,wao,Aao,MB,yao,Lao,EB,xao,kao,Sao,Yoe,Rao,Bao,c3,Pao,Eh,f3,$ao,Koe,Iao,mPe,rd,Ch,Zoe,m3,qao,ere,Nao,gPe,Ho,g3,jao,h3,Dao,CB,Gao,Oao,Vao,p3,Xao,ore,zao,Qao,Wao,Ie,_3,Hao,rre,Uao,Jao,Va,Yao,tre,Kao,Zao,are,eno,ono,nre,rno,tno,ano,W,wh,sre,nno,sno,wB,lno,ino,dno,Ah,lre,cno,fno,AB,mno,gno,hno,yh,ire,pno,_no,yB,uno,bno,vno,Lh,dre,Fno,Tno,LB,Mno,Eno,Cno,xh,cre,wno,Ano,xB,yno,Lno,xno,kh,fre,kno,Sno,kB,Rno,Bno,Pno,Sh,mre,$no,Ino,SB,qno,Nno,jno,Rh,gre,Dno,Gno,RB,Ono,Vno,Xno,Bh,hre,zno,Qno,BB,Wno,Hno,Uno,Ph,pre,Jno,Yno,PB,Kno,Zno,eso,$h,_re,oso,rso,$B,tso,aso,nso,Ih,ure,sso,lso,IB,iso,dso,cso,qh,bre,fso,mso,qB,gso,hso,pso,Nh,vre,_so,uso,NB,bso,vso,Fso,jh,Fre,Tso,Mso,jB,Eso,Cso,wso,Dh,Tre,Aso,yso,DB,Lso,xso,kso,Gh,Mre,Sso,Rso,GB,Bso,Pso,$so,Oh,Ere,Iso,qso,OB,Nso,jso,Dso,Vh,Cre,Gso,Oso,VB,Vso,Xso,zso,Xh,wre,Qso,Wso,XB,Hso,Uso,Jso,zh,Are,Yso,Kso,zB,Zso,elo,olo,Qh,yre,rlo,tlo,QB,alo,nlo,slo,Wh,Lre,llo,ilo,WB,dlo,clo,flo,Hh,xre,mlo,glo,HB,hlo,plo,_lo,Uh,ulo,kre,blo,vlo,u3,Flo,Jh,b3,Tlo,Sre,Mlo,hPe,td,Yh,Rre,v3,Elo,Bre,Clo,pPe,Uo,F3,wlo,T3,Alo,UB,ylo,Llo,xlo,M3,klo,Pre,Slo,Rlo,Blo,qe,E3,Plo,$re,$lo,Ilo,ad,qlo,Ire,Nlo,jlo,qre,Dlo,Glo,Olo,de,Kh,Nre,Vlo,Xlo,JB,zlo,Qlo,Wlo,Zh,jre,Hlo,Ulo,YB,Jlo,Ylo,Klo,ep,Dre,Zlo,eio,KB,oio,rio,tio,op,Gre,aio,nio,ZB,sio,lio,iio,rp,Ore,dio,cio,eP,fio,mio,gio,tp,Vre,hio,pio,oP,_io,uio,bio,ap,Xre,vio,Fio,rP,Tio,Mio,Eio,np,zre,Cio,wio,tP,Aio,yio,Lio,sp,Qre,xio,kio,aP,Sio,Rio,Bio,lp,Wre,Pio,$io,nP,Iio,qio,Nio,ip,Hre,jio,Dio,sP,Gio,Oio,Vio,dp,Ure,Xio,zio,lP,Qio,Wio,Hio,cp,Jre,Uio,Jio,iP,Yio,Kio,Zio,fp,Yre,edo,odo,dP,rdo,tdo,ado,mp,ndo,Kre,sdo,ldo,C3,ido,gp,w3,ddo,Zre,cdo,_Pe,nd,hp,ete,A3,fdo,ote,mdo,uPe,Jo,y3,gdo,sd,hdo,cP,pdo,_do,fP,udo,bdo,vdo,L3,Fdo,rte,Tdo,Mdo,Edo,Xr,x3,Cdo,tte,wdo,Ado,ld,ydo,ate,Ldo,xdo,mP,kdo,Sdo,Rdo,nte,Bdo,Pdo,k3,$do,Ne,S3,Ido,ste,qdo,Ndo,Xa,jdo,lte,Ddo,Gdo,ite,Odo,Vdo,dte,Xdo,zdo,Qdo,T,pp,cte,Wdo,Hdo,gP,Udo,Jdo,Ydo,_p,fte,Kdo,Zdo,hP,eco,oco,rco,up,mte,tco,aco,pP,nco,sco,lco,bp,gte,ico,dco,_P,cco,fco,mco,vp,hte,gco,hco,uP,pco,_co,uco,Fp,pte,bco,vco,bP,Fco,Tco,Mco,Tp,_te,Eco,Cco,vP,wco,Aco,yco,Mp,ute,Lco,xco,FP,kco,Sco,Rco,Ep,bte,Bco,Pco,TP,$co,Ico,qco,Cp,vte,Nco,jco,MP,Dco,Gco,Oco,wp,Fte,Vco,Xco,EP,zco,Qco,Wco,Ap,Tte,Hco,Uco,CP,Jco,Yco,Kco,yp,Mte,Zco,efo,wP,ofo,rfo,tfo,Lp,Ete,afo,nfo,AP,sfo,lfo,ifo,xp,Cte,dfo,cfo,yP,ffo,mfo,gfo,kp,wte,hfo,pfo,LP,_fo,ufo,bfo,Sp,Ate,vfo,Ffo,xP,Tfo,Mfo,Efo,Rp,yte,Cfo,wfo,kP,Afo,yfo,Lfo,Bp,Lte,xfo,kfo,SP,Sfo,Rfo,Bfo,Pp,xte,Pfo,$fo,RP,Ifo,qfo,Nfo,$p,kte,jfo,Dfo,BP,Gfo,Ofo,Vfo,Ip,Ste,Xfo,zfo,PP,Qfo,Wfo,Hfo,qp,Rte,Ufo,Jfo,$P,Yfo,Kfo,Zfo,Np,Bte,emo,omo,IP,rmo,tmo,amo,jp,Pte,nmo,smo,qP,lmo,imo,dmo,Dp,$te,cmo,fmo,NP,mmo,gmo,hmo,Gp,Ite,pmo,_mo,jP,umo,bmo,vmo,Op,qte,Fmo,Tmo,DP,Mmo,Emo,Cmo,Vp,Nte,wmo,Amo,GP,ymo,Lmo,xmo,Xp,jte,kmo,Smo,OP,Rmo,Bmo,Pmo,Hs,Dte,$mo,Imo,VP,qmo,Nmo,XP,jmo,Dmo,Gmo,zp,Gte,Omo,Vmo,zP,Xmo,zmo,Qmo,Qp,Ote,Wmo,Hmo,QP,Umo,Jmo,Ymo,Wp,Vte,Kmo,Zmo,WP,ego,ogo,rgo,Hp,Xte,tgo,ago,HP,ngo,sgo,lgo,Up,zte,igo,dgo,UP,cgo,fgo,mgo,Jp,Qte,ggo,hgo,JP,pgo,_go,ugo,Yp,Wte,bgo,vgo,YP,Fgo,Tgo,Mgo,Kp,Hte,Ego,Cgo,KP,wgo,Ago,ygo,Zp,Ute,Lgo,xgo,ZP,kgo,Sgo,Rgo,e_,Jte,Bgo,Pgo,e$,$go,Igo,qgo,o_,Yte,Ngo,jgo,o$,Dgo,Ggo,Ogo,r_,Kte,Vgo,Xgo,r$,zgo,Qgo,Wgo,t_,Zte,Hgo,Ugo,t$,Jgo,Ygo,Kgo,a_,eae,Zgo,eho,a$,oho,rho,tho,n_,oae,aho,nho,n$,sho,lho,iho,s_,rae,dho,cho,s$,fho,mho,gho,l_,tae,hho,pho,l$,_ho,uho,bho,i_,aae,vho,Fho,i$,Tho,Mho,Eho,d_,nae,Cho,who,d$,Aho,yho,Lho,c_,sae,xho,kho,c$,Sho,Rho,Bho,f_,lae,Pho,$ho,f$,Iho,qho,Nho,m_,iae,jho,Dho,m$,Gho,Oho,Vho,g_,dae,Xho,zho,g$,Qho,Who,Hho,h_,cae,Uho,Jho,h$,Yho,Kho,Zho,p_,fae,epo,opo,p$,rpo,tpo,apo,__,mae,npo,spo,_$,lpo,ipo,dpo,u_,gae,cpo,fpo,u$,mpo,gpo,hpo,b_,hae,ppo,_po,b$,upo,bpo,vpo,v_,pae,Fpo,Tpo,v$,Mpo,Epo,Cpo,F_,_ae,wpo,Apo,F$,ypo,Lpo,xpo,T_,uae,kpo,Spo,T$,Rpo,Bpo,Ppo,M_,bae,$po,Ipo,M$,qpo,Npo,jpo,E_,vae,Dpo,Gpo,E$,Opo,Vpo,Xpo,C_,Fae,zpo,Qpo,C$,Wpo,Hpo,Upo,w_,Tae,Jpo,Ypo,w$,Kpo,Zpo,e_o,A_,Mae,o_o,r_o,A$,t_o,a_o,n_o,y_,Eae,s_o,l_o,y$,i_o,d_o,c_o,L_,Cae,f_o,m_o,L$,g_o,h_o,p_o,x_,wae,__o,u_o,x$,b_o,v_o,F_o,k_,Aae,T_o,M_o,k$,E_o,C_o,w_o,S_,yae,A_o,y_o,S$,L_o,x_o,k_o,R_,Lae,S_o,R_o,R$,B_o,P_o,$_o,B_,xae,I_o,q_o,B$,N_o,j_o,D_o,P_,kae,G_o,O_o,P$,V_o,X_o,z_o,$_,Sae,Q_o,W_o,$$,H_o,U_o,J_o,I_,Rae,Y_o,K_o,I$,Z_o,euo,ouo,q_,Bae,ruo,tuo,q$,auo,nuo,suo,N_,Pae,luo,iuo,N$,duo,cuo,fuo,j_,$ae,muo,guo,j$,huo,puo,_uo,D_,Iae,uuo,buo,D$,vuo,Fuo,Tuo,G_,qae,Muo,Euo,G$,Cuo,wuo,Auo,O_,Nae,yuo,Luo,O$,xuo,kuo,Suo,V_,jae,Ruo,Buo,V$,Puo,$uo,Iuo,X_,Dae,quo,Nuo,X$,juo,Duo,Guo,z_,Gae,Ouo,Vuo,z$,Xuo,zuo,Quo,Q_,Oae,Wuo,Huo,Q$,Uuo,Juo,Yuo,W_,Vae,Kuo,Zuo,W$,e1o,o1o,r1o,H_,Xae,t1o,a1o,H$,n1o,s1o,l1o,U_,zae,i1o,d1o,U$,c1o,f1o,m1o,J_,Qae,g1o,h1o,J$,p1o,_1o,u1o,Y_,Wae,b1o,v1o,Y$,F1o,T1o,M1o,K_,Hae,E1o,C1o,K$,w1o,A1o,y1o,Z_,Uae,L1o,x1o,Z$,k1o,S1o,R1o,eu,B1o,Jae,P1o,$1o,Yae,I1o,q1o,Kae,N1o,j1o,R3,bPe,id,ou,Zae,B3,D1o,ene,G1o,vPe,Yo,P3,O1o,dd,V1o,eI,X1o,z1o,oI,Q1o,W1o,H1o,$3,U1o,one,J1o,Y1o,K1o,zr,I3,Z1o,rne,ebo,obo,cd,rbo,tne,tbo,abo,rI,nbo,sbo,lbo,ane,ibo,dbo,q3,cbo,je,N3,fbo,nne,mbo,gbo,za,hbo,sne,pbo,_bo,lne,ubo,bbo,ine,vbo,Fbo,Tbo,S,ru,dne,Mbo,Ebo,tI,Cbo,wbo,Abo,tu,cne,ybo,Lbo,aI,xbo,kbo,Sbo,au,fne,Rbo,Bbo,nI,Pbo,$bo,Ibo,nu,mne,qbo,Nbo,sI,jbo,Dbo,Gbo,su,gne,Obo,Vbo,lI,Xbo,zbo,Qbo,lu,hne,Wbo,Hbo,iI,Ubo,Jbo,Ybo,iu,pne,Kbo,Zbo,dI,e2o,o2o,r2o,du,_ne,t2o,a2o,cI,n2o,s2o,l2o,cu,une,i2o,d2o,fI,c2o,f2o,m2o,fu,bne,g2o,h2o,mI,p2o,_2o,u2o,mu,vne,b2o,v2o,gI,F2o,T2o,M2o,gu,Fne,E2o,C2o,hI,w2o,A2o,y2o,hu,Tne,L2o,x2o,pI,k2o,S2o,R2o,pu,Mne,B2o,P2o,_I,$2o,I2o,q2o,_u,Ene,N2o,j2o,uI,D2o,G2o,O2o,uu,Cne,V2o,X2o,bI,z2o,Q2o,W2o,bu,wne,H2o,U2o,vI,J2o,Y2o,K2o,vu,Ane,Z2o,e5o,FI,o5o,r5o,t5o,Fu,yne,a5o,n5o,TI,s5o,l5o,i5o,Tu,Lne,d5o,c5o,MI,f5o,m5o,g5o,Mu,xne,h5o,p5o,EI,_5o,u5o,b5o,Eu,kne,v5o,F5o,CI,T5o,M5o,E5o,Cu,Sne,C5o,w5o,wI,A5o,y5o,L5o,wu,Rne,x5o,k5o,AI,S5o,R5o,B5o,Au,Bne,P5o,$5o,yI,I5o,q5o,N5o,yu,Pne,j5o,D5o,LI,G5o,O5o,V5o,Lu,$ne,X5o,z5o,xI,Q5o,W5o,H5o,xu,Ine,U5o,J5o,kI,Y5o,K5o,Z5o,ku,qne,e6o,o6o,SI,r6o,t6o,a6o,Su,Nne,n6o,s6o,RI,l6o,i6o,d6o,Ru,jne,c6o,f6o,BI,m6o,g6o,h6o,Bu,Dne,p6o,_6o,PI,u6o,b6o,v6o,Pu,Gne,F6o,T6o,$I,M6o,E6o,C6o,$u,One,w6o,A6o,II,y6o,L6o,x6o,Iu,Vne,k6o,S6o,qI,R6o,B6o,P6o,qu,Xne,$6o,I6o,NI,q6o,N6o,j6o,Nu,zne,D6o,G6o,jI,O6o,V6o,X6o,ju,Qne,z6o,Q6o,DI,W6o,H6o,U6o,Du,Wne,J6o,Y6o,GI,K6o,Z6o,evo,Gu,ovo,Hne,rvo,tvo,Une,avo,nvo,Jne,svo,lvo,j3,FPe,fd,Ou,Yne,D3,ivo,Kne,dvo,TPe,Ko,G3,cvo,md,fvo,OI,mvo,gvo,VI,hvo,pvo,_vo,O3,uvo,Zne,bvo,vvo,Fvo,Qr,V3,Tvo,ese,Mvo,Evo,gd,Cvo,ose,wvo,Avo,XI,yvo,Lvo,xvo,rse,kvo,Svo,X3,Rvo,De,z3,Bvo,tse,Pvo,$vo,Qa,Ivo,ase,qvo,Nvo,nse,jvo,Dvo,sse,Gvo,Ovo,Vvo,$,Vu,lse,Xvo,zvo,zI,Qvo,Wvo,Hvo,Xu,ise,Uvo,Jvo,QI,Yvo,Kvo,Zvo,zu,dse,eFo,oFo,WI,rFo,tFo,aFo,Qu,cse,nFo,sFo,HI,lFo,iFo,dFo,Wu,fse,cFo,fFo,UI,mFo,gFo,hFo,Hu,mse,pFo,_Fo,JI,uFo,bFo,vFo,Uu,gse,FFo,TFo,YI,MFo,EFo,CFo,Ju,hse,wFo,AFo,KI,yFo,LFo,xFo,Yu,pse,kFo,SFo,ZI,RFo,BFo,PFo,Ku,_se,$Fo,IFo,eq,qFo,NFo,jFo,Zu,use,DFo,GFo,oq,OFo,VFo,XFo,e1,bse,zFo,QFo,rq,WFo,HFo,UFo,o1,vse,JFo,YFo,tq,KFo,ZFo,eTo,r1,Fse,oTo,rTo,aq,tTo,aTo,nTo,t1,Tse,sTo,lTo,nq,iTo,dTo,cTo,a1,Mse,fTo,mTo,sq,gTo,hTo,pTo,n1,Ese,_To,uTo,lq,bTo,vTo,FTo,s1,Cse,TTo,MTo,iq,ETo,CTo,wTo,l1,wse,ATo,yTo,dq,LTo,xTo,kTo,i1,Ase,STo,RTo,cq,BTo,PTo,$To,d1,yse,ITo,qTo,fq,NTo,jTo,DTo,c1,Lse,GTo,OTo,mq,VTo,XTo,zTo,f1,xse,QTo,WTo,gq,HTo,UTo,JTo,m1,kse,YTo,KTo,hq,ZTo,e8o,o8o,g1,Sse,r8o,t8o,pq,a8o,n8o,s8o,h1,Rse,l8o,i8o,_q,d8o,c8o,f8o,p1,Bse,m8o,g8o,uq,h8o,p8o,_8o,_1,Pse,u8o,b8o,bq,v8o,F8o,T8o,u1,$se,M8o,E8o,vq,C8o,w8o,A8o,b1,Ise,y8o,L8o,Fq,x8o,k8o,S8o,v1,qse,R8o,B8o,Tq,P8o,$8o,I8o,F1,Nse,q8o,N8o,Mq,j8o,D8o,G8o,T1,jse,O8o,V8o,Eq,X8o,z8o,Q8o,M1,Dse,W8o,H8o,Cq,U8o,J8o,Y8o,E1,Gse,K8o,Z8o,wq,e7o,o7o,r7o,C1,t7o,Ose,a7o,n7o,Vse,s7o,l7o,Xse,i7o,d7o,Q3,MPe,hd,w1,zse,W3,c7o,Qse,f7o,EPe,Zo,H3,m7o,pd,g7o,Aq,h7o,p7o,yq,_7o,u7o,b7o,U3,v7o,Wse,F7o,T7o,M7o,Wr,J3,E7o,Hse,C7o,w7o,_d,A7o,Use,y7o,L7o,Lq,x7o,k7o,S7o,Jse,R7o,B7o,Y3,P7o,Ge,K3,$7o,Yse,I7o,q7o,Wa,N7o,Kse,j7o,D7o,Zse,G7o,O7o,ele,V7o,X7o,z7o,I,A1,ole,Q7o,W7o,xq,H7o,U7o,J7o,y1,rle,Y7o,K7o,kq,Z7o,eMo,oMo,L1,tle,rMo,tMo,Sq,aMo,nMo,sMo,x1,ale,lMo,iMo,Rq,dMo,cMo,fMo,k1,nle,mMo,gMo,Bq,hMo,pMo,_Mo,S1,sle,uMo,bMo,Pq,vMo,FMo,TMo,R1,lle,MMo,EMo,$q,CMo,wMo,AMo,B1,ile,yMo,LMo,Iq,xMo,kMo,SMo,P1,dle,RMo,BMo,qq,PMo,$Mo,IMo,$1,cle,qMo,NMo,Nq,jMo,DMo,GMo,I1,fle,OMo,VMo,jq,XMo,zMo,QMo,q1,mle,WMo,HMo,Dq,UMo,JMo,YMo,N1,gle,KMo,ZMo,Gq,e4o,o4o,r4o,j1,hle,t4o,a4o,Oq,n4o,s4o,l4o,D1,ple,i4o,d4o,Vq,c4o,f4o,m4o,G1,_le,g4o,h4o,Xq,p4o,_4o,u4o,O1,ule,b4o,v4o,zq,F4o,T4o,M4o,V1,ble,E4o,C4o,Qq,w4o,A4o,y4o,X1,vle,L4o,x4o,Wq,k4o,S4o,R4o,z1,Fle,B4o,P4o,Hq,$4o,I4o,q4o,Q1,Tle,N4o,j4o,Uq,D4o,G4o,O4o,W1,Mle,V4o,X4o,Jq,z4o,Q4o,W4o,H1,Ele,H4o,U4o,Yq,J4o,Y4o,K4o,U1,Cle,Z4o,eEo,Kq,oEo,rEo,tEo,J1,wle,aEo,nEo,Zq,sEo,lEo,iEo,Y1,Ale,dEo,cEo,eN,fEo,mEo,gEo,K1,yle,hEo,pEo,oN,_Eo,uEo,bEo,Z1,Lle,vEo,FEo,rN,TEo,MEo,EEo,eb,xle,CEo,wEo,tN,AEo,yEo,LEo,ob,kle,xEo,kEo,aN,SEo,REo,BEo,rb,Sle,PEo,$Eo,Rle,IEo,qEo,NEo,tb,Ble,jEo,DEo,nN,GEo,OEo,VEo,ab,Ple,XEo,zEo,sN,QEo,WEo,HEo,nb,$le,UEo,JEo,lN,YEo,KEo,ZEo,sb,Ile,e3o,o3o,iN,r3o,t3o,a3o,lb,n3o,qle,s3o,l3o,Nle,i3o,d3o,jle,c3o,f3o,Z3,CPe,ud,ib,Dle,eC,m3o,Gle,g3o,wPe,er,oC,h3o,bd,p3o,dN,_3o,u3o,cN,b3o,v3o,F3o,rC,T3o,Ole,M3o,E3o,C3o,Hr,tC,w3o,Vle,A3o,y3o,vd,L3o,Xle,x3o,k3o,fN,S3o,R3o,B3o,zle,P3o,$3o,aC,I3o,Oe,nC,q3o,Qle,N3o,j3o,Ha,D3o,Wle,G3o,O3o,Hle,V3o,X3o,Ule,z3o,Q3o,W3o,ne,db,Jle,H3o,U3o,mN,J3o,Y3o,K3o,cb,Yle,Z3o,eCo,gN,oCo,rCo,tCo,fb,Kle,aCo,nCo,hN,sCo,lCo,iCo,mb,Zle,dCo,cCo,pN,fCo,mCo,gCo,gb,eie,hCo,pCo,_N,_Co,uCo,bCo,hb,oie,vCo,FCo,uN,TCo,MCo,ECo,pb,rie,CCo,wCo,bN,ACo,yCo,LCo,_b,tie,xCo,kCo,vN,SCo,RCo,BCo,ub,aie,PCo,$Co,FN,ICo,qCo,NCo,bb,nie,jCo,DCo,TN,GCo,OCo,VCo,vb,sie,XCo,zCo,MN,QCo,WCo,HCo,Fb,lie,UCo,JCo,EN,YCo,KCo,ZCo,Tb,iie,ewo,owo,CN,rwo,two,awo,Mb,die,nwo,swo,wN,lwo,iwo,dwo,Eb,cie,cwo,fwo,AN,mwo,gwo,hwo,Cb,fie,pwo,_wo,yN,uwo,bwo,vwo,wb,mie,Fwo,Two,LN,Mwo,Ewo,Cwo,Ab,wwo,gie,Awo,ywo,hie,Lwo,xwo,pie,kwo,Swo,sC,APe,Fd,yb,_ie,lC,Rwo,uie,Bwo,yPe,or,iC,Pwo,Td,$wo,xN,Iwo,qwo,kN,Nwo,jwo,Dwo,dC,Gwo,bie,Owo,Vwo,Xwo,Ur,cC,zwo,vie,Qwo,Wwo,Md,Hwo,Fie,Uwo,Jwo,SN,Ywo,Kwo,Zwo,Tie,eAo,oAo,fC,rAo,Ve,mC,tAo,Mie,aAo,nAo,Ua,sAo,Eie,lAo,iAo,Cie,dAo,cAo,wie,fAo,mAo,gAo,y,Lb,Aie,hAo,pAo,RN,_Ao,uAo,bAo,xb,yie,vAo,FAo,BN,TAo,MAo,EAo,kb,Lie,CAo,wAo,PN,AAo,yAo,LAo,Sb,xie,xAo,kAo,$N,SAo,RAo,BAo,Rb,kie,PAo,$Ao,IN,IAo,qAo,NAo,Bb,Sie,jAo,DAo,qN,GAo,OAo,VAo,Pb,Rie,XAo,zAo,NN,QAo,WAo,HAo,$b,Bie,UAo,JAo,jN,YAo,KAo,ZAo,Ib,Pie,e0o,o0o,DN,r0o,t0o,a0o,qb,$ie,n0o,s0o,GN,l0o,i0o,d0o,Nb,Iie,c0o,f0o,ON,m0o,g0o,h0o,jb,qie,p0o,_0o,VN,u0o,b0o,v0o,Db,Nie,F0o,T0o,XN,M0o,E0o,C0o,Gb,jie,w0o,A0o,zN,y0o,L0o,x0o,Ob,Die,k0o,S0o,QN,R0o,B0o,P0o,Vb,Gie,$0o,I0o,WN,q0o,N0o,j0o,Xb,Oie,D0o,G0o,HN,O0o,V0o,X0o,zb,Vie,z0o,Q0o,UN,W0o,H0o,U0o,Qb,Xie,J0o,Y0o,JN,K0o,Z0o,eyo,Wb,zie,oyo,ryo,YN,tyo,ayo,nyo,Hb,Qie,syo,lyo,KN,iyo,dyo,cyo,Ub,Wie,fyo,myo,ZN,gyo,hyo,pyo,Jb,Hie,_yo,uyo,ej,byo,vyo,Fyo,Yb,Uie,Tyo,Myo,oj,Eyo,Cyo,wyo,Kb,Jie,Ayo,yyo,rj,Lyo,xyo,kyo,Zb,Yie,Syo,Ryo,tj,Byo,Pyo,$yo,e2,Kie,Iyo,qyo,aj,Nyo,jyo,Dyo,o2,Zie,Gyo,Oyo,nj,Vyo,Xyo,zyo,r2,ede,Qyo,Wyo,sj,Hyo,Uyo,Jyo,t2,ode,Yyo,Kyo,lj,Zyo,eLo,oLo,a2,rde,rLo,tLo,ij,aLo,nLo,sLo,n2,tde,lLo,iLo,dj,dLo,cLo,fLo,s2,ade,mLo,gLo,cj,hLo,pLo,_Lo,l2,nde,uLo,bLo,fj,vLo,FLo,TLo,i2,sde,MLo,ELo,mj,CLo,wLo,ALo,d2,lde,yLo,LLo,gj,xLo,kLo,SLo,c2,ide,RLo,BLo,hj,PLo,$Lo,ILo,f2,dde,qLo,NLo,pj,jLo,DLo,GLo,m2,cde,OLo,VLo,_j,XLo,zLo,QLo,g2,fde,WLo,HLo,uj,ULo,JLo,YLo,h2,mde,KLo,ZLo,bj,e9o,o9o,r9o,p2,gde,t9o,a9o,vj,n9o,s9o,l9o,_2,hde,i9o,d9o,Fj,c9o,f9o,m9o,u2,pde,g9o,h9o,Tj,p9o,_9o,u9o,b2,_de,b9o,v9o,Mj,F9o,T9o,M9o,v2,ude,E9o,C9o,Ej,w9o,A9o,y9o,F2,bde,L9o,x9o,Cj,k9o,S9o,R9o,T2,B9o,vde,P9o,$9o,Fde,I9o,q9o,Tde,N9o,j9o,gC,LPe,Ed,M2,Mde,hC,D9o,Ede,G9o,xPe,rr,pC,O9o,Cd,V9o,wj,X9o,z9o,Aj,Q9o,W9o,H9o,_C,U9o,Cde,J9o,Y9o,K9o,Jr,uC,Z9o,wde,exo,oxo,wd,rxo,Ade,txo,axo,yj,nxo,sxo,lxo,yde,ixo,dxo,bC,cxo,Xe,vC,fxo,Lde,mxo,gxo,Ja,hxo,xde,pxo,_xo,kde,uxo,bxo,Sde,vxo,Fxo,Txo,G,E2,Rde,Mxo,Exo,Lj,Cxo,wxo,Axo,C2,Bde,yxo,Lxo,xj,xxo,kxo,Sxo,w2,Pde,Rxo,Bxo,kj,Pxo,$xo,Ixo,A2,$de,qxo,Nxo,Sj,jxo,Dxo,Gxo,y2,Ide,Oxo,Vxo,Rj,Xxo,zxo,Qxo,L2,qde,Wxo,Hxo,Bj,Uxo,Jxo,Yxo,x2,Nde,Kxo,Zxo,Pj,eko,oko,rko,k2,jde,tko,ako,$j,nko,sko,lko,S2,Dde,iko,dko,Ij,cko,fko,mko,R2,Gde,gko,hko,qj,pko,_ko,uko,B2,Ode,bko,vko,Nj,Fko,Tko,Mko,P2,Vde,Eko,Cko,jj,wko,Ako,yko,$2,Xde,Lko,xko,Dj,kko,Sko,Rko,I2,zde,Bko,Pko,Gj,$ko,Iko,qko,q2,Qde,Nko,jko,Oj,Dko,Gko,Oko,N2,Wde,Vko,Xko,Vj,zko,Qko,Wko,j2,Hde,Hko,Uko,Xj,Jko,Yko,Kko,D2,Ude,Zko,eSo,zj,oSo,rSo,tSo,G2,Jde,aSo,nSo,Qj,sSo,lSo,iSo,O2,Yde,dSo,cSo,Wj,fSo,mSo,gSo,V2,Kde,hSo,pSo,Hj,_So,uSo,bSo,X2,Zde,vSo,FSo,Uj,TSo,MSo,ESo,z2,ece,CSo,wSo,Jj,ASo,ySo,LSo,Q2,oce,xSo,kSo,Yj,SSo,RSo,BSo,W2,rce,PSo,$So,Kj,ISo,qSo,NSo,H2,tce,jSo,DSo,Zj,GSo,OSo,VSo,U2,ace,XSo,zSo,eD,QSo,WSo,HSo,J2,nce,USo,JSo,oD,YSo,KSo,ZSo,Y2,eRo,sce,oRo,rRo,lce,tRo,aRo,ice,nRo,sRo,FC,kPe,Ad,K2,dce,TC,lRo,cce,iRo,SPe,tr,MC,dRo,yd,cRo,rD,fRo,mRo,tD,gRo,hRo,pRo,EC,_Ro,fce,uRo,bRo,vRo,Yr,CC,FRo,mce,TRo,MRo,Ld,ERo,gce,CRo,wRo,aD,ARo,yRo,LRo,hce,xRo,kRo,wC,SRo,ze,AC,RRo,pce,BRo,PRo,Ya,$Ro,_ce,IRo,qRo,uce,NRo,jRo,bce,DRo,GRo,ORo,da,Z2,vce,VRo,XRo,nD,zRo,QRo,WRo,e5,Fce,HRo,URo,sD,JRo,YRo,KRo,o5,Tce,ZRo,eBo,lD,oBo,rBo,tBo,r5,Mce,aBo,nBo,iD,sBo,lBo,iBo,t5,Ece,dBo,cBo,dD,fBo,mBo,gBo,a5,hBo,Cce,pBo,_Bo,wce,uBo,bBo,Ace,vBo,FBo,yC,RPe,xd,n5,yce,LC,TBo,Lce,MBo,BPe,ar,xC,EBo,kd,CBo,cD,wBo,ABo,fD,yBo,LBo,xBo,kC,kBo,xce,SBo,RBo,BBo,Kr,SC,PBo,kce,$Bo,IBo,Sd,qBo,Sce,NBo,jBo,mD,DBo,GBo,OBo,Rce,VBo,XBo,RC,zBo,Qe,BC,QBo,Bce,WBo,HBo,Ka,UBo,Pce,JBo,YBo,$ce,KBo,ZBo,Ice,ePo,oPo,rPo,j,s5,qce,tPo,aPo,gD,nPo,sPo,lPo,l5,Nce,iPo,dPo,hD,cPo,fPo,mPo,i5,jce,gPo,hPo,pD,pPo,_Po,uPo,d5,Dce,bPo,vPo,_D,FPo,TPo,MPo,c5,Gce,EPo,CPo,uD,wPo,APo,yPo,f5,Oce,LPo,xPo,bD,kPo,SPo,RPo,m5,Vce,BPo,PPo,vD,$Po,IPo,qPo,g5,Xce,NPo,jPo,FD,DPo,GPo,OPo,h5,zce,VPo,XPo,TD,zPo,QPo,WPo,p5,Qce,HPo,UPo,MD,JPo,YPo,KPo,_5,Wce,ZPo,e$o,ED,o$o,r$o,t$o,u5,Hce,a$o,n$o,CD,s$o,l$o,i$o,b5,Uce,d$o,c$o,wD,f$o,m$o,g$o,v5,Jce,h$o,p$o,AD,_$o,u$o,b$o,F5,Yce,v$o,F$o,yD,T$o,M$o,E$o,T5,Kce,C$o,w$o,LD,A$o,y$o,L$o,M5,Zce,x$o,k$o,xD,S$o,R$o,B$o,E5,efe,P$o,$$o,kD,I$o,q$o,N$o,C5,ofe,j$o,D$o,SD,G$o,O$o,V$o,w5,rfe,X$o,z$o,RD,Q$o,W$o,H$o,A5,tfe,U$o,J$o,BD,Y$o,K$o,Z$o,y5,afe,eIo,oIo,PD,rIo,tIo,aIo,L5,nfe,nIo,sIo,$D,lIo,iIo,dIo,x5,sfe,cIo,fIo,ID,mIo,gIo,hIo,k5,lfe,pIo,_Io,qD,uIo,bIo,vIo,S5,ife,FIo,TIo,ND,MIo,EIo,CIo,R5,dfe,wIo,AIo,jD,yIo,LIo,xIo,B5,cfe,kIo,SIo,DD,RIo,BIo,PIo,P5,ffe,$Io,IIo,GD,qIo,NIo,jIo,$5,mfe,DIo,GIo,OD,OIo,VIo,XIo,I5,gfe,zIo,QIo,VD,WIo,HIo,UIo,q5,hfe,JIo,YIo,XD,KIo,ZIo,eqo,N5,pfe,oqo,rqo,zD,tqo,aqo,nqo,j5,sqo,_fe,lqo,iqo,ufe,dqo,cqo,bfe,fqo,mqo,PC,PPe,Rd,D5,vfe,$C,gqo,Ffe,hqo,$Pe,nr,IC,pqo,Bd,_qo,QD,uqo,bqo,WD,vqo,Fqo,Tqo,qC,Mqo,Tfe,Eqo,Cqo,wqo,Zr,NC,Aqo,Mfe,yqo,Lqo,Pd,xqo,Efe,kqo,Sqo,HD,Rqo,Bqo,Pqo,Cfe,$qo,Iqo,jC,qqo,We,DC,Nqo,wfe,jqo,Dqo,Za,Gqo,Afe,Oqo,Vqo,yfe,Xqo,zqo,Lfe,Qqo,Wqo,Hqo,R,G5,xfe,Uqo,Jqo,UD,Yqo,Kqo,Zqo,O5,kfe,eNo,oNo,JD,rNo,tNo,aNo,V5,Sfe,nNo,sNo,YD,lNo,iNo,dNo,X5,Rfe,cNo,fNo,KD,mNo,gNo,hNo,z5,Bfe,pNo,_No,ZD,uNo,bNo,vNo,Q5,Pfe,FNo,TNo,eG,MNo,ENo,CNo,W5,$fe,wNo,ANo,oG,yNo,LNo,xNo,H5,Ife,kNo,SNo,rG,RNo,BNo,PNo,U5,qfe,$No,INo,tG,qNo,NNo,jNo,J5,Nfe,DNo,GNo,aG,ONo,VNo,XNo,Y5,jfe,zNo,QNo,nG,WNo,HNo,UNo,K5,Dfe,JNo,YNo,sG,KNo,ZNo,ejo,Z5,Gfe,ojo,rjo,lG,tjo,ajo,njo,e6,Ofe,sjo,ljo,iG,ijo,djo,cjo,o6,Vfe,fjo,mjo,dG,gjo,hjo,pjo,r6,Xfe,_jo,ujo,cG,bjo,vjo,Fjo,t6,zfe,Tjo,Mjo,fG,Ejo,Cjo,wjo,a6,Qfe,Ajo,yjo,mG,Ljo,xjo,kjo,n6,Wfe,Sjo,Rjo,gG,Bjo,Pjo,$jo,s6,Hfe,Ijo,qjo,hG,Njo,jjo,Djo,l6,Ufe,Gjo,Ojo,pG,Vjo,Xjo,zjo,i6,Jfe,Qjo,Wjo,_G,Hjo,Ujo,Jjo,d6,Yfe,Yjo,Kjo,uG,Zjo,eDo,oDo,c6,Kfe,rDo,tDo,bG,aDo,nDo,sDo,f6,Zfe,lDo,iDo,vG,dDo,cDo,fDo,m6,eme,mDo,gDo,FG,hDo,pDo,_Do,g6,ome,uDo,bDo,TG,vDo,FDo,TDo,h6,rme,MDo,EDo,MG,CDo,wDo,ADo,p6,tme,yDo,LDo,EG,xDo,kDo,SDo,_6,ame,RDo,BDo,CG,PDo,$Do,IDo,u6,nme,qDo,NDo,wG,jDo,DDo,GDo,b6,sme,ODo,VDo,AG,XDo,zDo,QDo,v6,lme,WDo,HDo,yG,UDo,JDo,YDo,F6,ime,KDo,ZDo,LG,eGo,oGo,rGo,T6,dme,tGo,aGo,xG,nGo,sGo,lGo,M6,cme,iGo,dGo,kG,cGo,fGo,mGo,E6,fme,gGo,hGo,SG,pGo,_Go,uGo,C6,mme,bGo,vGo,RG,FGo,TGo,MGo,w6,gme,EGo,CGo,BG,wGo,AGo,yGo,A6,LGo,hme,xGo,kGo,pme,SGo,RGo,_me,BGo,PGo,GC,IPe,$d,y6,ume,OC,$Go,bme,IGo,qPe,sr,VC,qGo,Id,NGo,PG,jGo,DGo,$G,GGo,OGo,VGo,XC,XGo,vme,zGo,QGo,WGo,et,zC,HGo,Fme,UGo,JGo,qd,YGo,Tme,KGo,ZGo,IG,eOo,oOo,rOo,Mme,tOo,aOo,QC,nOo,He,WC,sOo,Eme,lOo,iOo,en,dOo,Cme,cOo,fOo,wme,mOo,gOo,Ame,hOo,pOo,_Oo,yme,L6,Lme,uOo,bOo,qG,vOo,FOo,TOo,x6,MOo,xme,EOo,COo,kme,wOo,AOo,Sme,yOo,LOo,HC,NPe,Nd,k6,Rme,UC,xOo,Bme,kOo,jPe,lr,JC,SOo,jd,ROo,NG,BOo,POo,jG,$Oo,IOo,qOo,YC,NOo,Pme,jOo,DOo,GOo,ot,KC,OOo,$me,VOo,XOo,Dd,zOo,Ime,QOo,WOo,DG,HOo,UOo,JOo,qme,YOo,KOo,ZC,ZOo,Ue,ew,eVo,Nme,oVo,rVo,on,tVo,jme,aVo,nVo,Dme,sVo,lVo,Gme,iVo,dVo,cVo,ce,S6,Ome,fVo,mVo,GG,gVo,hVo,pVo,R6,Vme,_Vo,uVo,OG,bVo,vVo,FVo,B6,Xme,TVo,MVo,VG,EVo,CVo,wVo,Us,zme,AVo,yVo,XG,LVo,xVo,zG,kVo,SVo,RVo,P6,Qme,BVo,PVo,QG,$Vo,IVo,qVo,ma,Wme,NVo,jVo,WG,DVo,GVo,HG,OVo,VVo,UG,XVo,zVo,QVo,$6,Hme,WVo,HVo,JG,UVo,JVo,YVo,I6,Ume,KVo,ZVo,YG,eXo,oXo,rXo,q6,Jme,tXo,aXo,KG,nXo,sXo,lXo,N6,Yme,iXo,dXo,ZG,cXo,fXo,mXo,j6,Kme,gXo,hXo,eO,pXo,_Xo,uXo,D6,Zme,bXo,vXo,oO,FXo,TXo,MXo,G6,ege,EXo,CXo,rO,wXo,AXo,yXo,O6,LXo,oge,xXo,kXo,rge,SXo,RXo,tge,BXo,PXo,ow,DPe,Gd,V6,age,rw,$Xo,nge,IXo,GPe,ir,tw,qXo,Od,NXo,tO,jXo,DXo,aO,GXo,OXo,VXo,aw,XXo,sge,zXo,QXo,WXo,rt,nw,HXo,lge,UXo,JXo,Vd,YXo,ige,KXo,ZXo,nO,ezo,ozo,rzo,dge,tzo,azo,sw,nzo,Je,lw,szo,cge,lzo,izo,rn,dzo,fge,czo,fzo,mge,mzo,gzo,gge,hzo,pzo,_zo,hge,X6,pge,uzo,bzo,sO,vzo,Fzo,Tzo,z6,Mzo,_ge,Ezo,Czo,uge,wzo,Azo,bge,yzo,Lzo,iw,OPe,Xd,Q6,vge,dw,xzo,Fge,kzo,VPe,dr,cw,Szo,zd,Rzo,lO,Bzo,Pzo,iO,$zo,Izo,qzo,fw,Nzo,Tge,jzo,Dzo,Gzo,tt,mw,Ozo,Mge,Vzo,Xzo,Qd,zzo,Ege,Qzo,Wzo,dO,Hzo,Uzo,Jzo,Cge,Yzo,Kzo,gw,Zzo,Ye,hw,eQo,wge,oQo,rQo,tn,tQo,Age,aQo,nQo,yge,sQo,lQo,Lge,iQo,dQo,cQo,Re,W6,xge,fQo,mQo,cO,gQo,hQo,pQo,H6,kge,_Qo,uQo,fO,bQo,vQo,FQo,U6,Sge,TQo,MQo,mO,EQo,CQo,wQo,J6,Rge,AQo,yQo,gO,LQo,xQo,kQo,Y6,Bge,SQo,RQo,hO,BQo,PQo,$Qo,K6,Pge,IQo,qQo,pO,NQo,jQo,DQo,Z6,$ge,GQo,OQo,_O,VQo,XQo,zQo,ev,Ige,QQo,WQo,uO,HQo,UQo,JQo,ov,YQo,qge,KQo,ZQo,Nge,eWo,oWo,jge,rWo,tWo,pw,XPe,Wd,rv,Dge,_w,aWo,Gge,nWo,zPe,cr,uw,sWo,Hd,lWo,bO,iWo,dWo,vO,cWo,fWo,mWo,bw,gWo,Oge,hWo,pWo,_Wo,at,vw,uWo,Vge,bWo,vWo,Ud,FWo,Xge,TWo,MWo,FO,EWo,CWo,wWo,zge,AWo,yWo,Fw,LWo,Ke,Tw,xWo,Qge,kWo,SWo,an,RWo,Wge,BWo,PWo,Hge,$Wo,IWo,Uge,qWo,NWo,jWo,nn,tv,Jge,DWo,GWo,TO,OWo,VWo,XWo,av,Yge,zWo,QWo,MO,WWo,HWo,UWo,nv,Kge,JWo,YWo,EO,KWo,ZWo,eHo,sv,Zge,oHo,rHo,CO,tHo,aHo,nHo,lv,sHo,ehe,lHo,iHo,ohe,dHo,cHo,rhe,fHo,mHo,Mw,QPe,Jd,iv,the,Ew,gHo,ahe,hHo,WPe,fr,Cw,pHo,Yd,_Ho,wO,uHo,bHo,AO,vHo,FHo,THo,ww,MHo,nhe,EHo,CHo,wHo,nt,Aw,AHo,she,yHo,LHo,Kd,xHo,lhe,kHo,SHo,yO,RHo,BHo,PHo,ihe,$Ho,IHo,yw,qHo,Ze,Lw,NHo,dhe,jHo,DHo,sn,GHo,che,OHo,VHo,fhe,XHo,zHo,mhe,QHo,WHo,HHo,Be,dv,ghe,UHo,JHo,LO,YHo,KHo,ZHo,cv,hhe,eUo,oUo,xO,rUo,tUo,aUo,fv,phe,nUo,sUo,kO,lUo,iUo,dUo,mv,_he,cUo,fUo,SO,mUo,gUo,hUo,gv,uhe,pUo,_Uo,RO,uUo,bUo,vUo,hv,bhe,FUo,TUo,BO,MUo,EUo,CUo,pv,vhe,wUo,AUo,PO,yUo,LUo,xUo,_v,Fhe,kUo,SUo,$O,RUo,BUo,PUo,uv,$Uo,The,IUo,qUo,Mhe,NUo,jUo,Ehe,DUo,GUo,xw,HPe,Zd,bv,Che,kw,OUo,whe,VUo,UPe,mr,Sw,XUo,ec,zUo,IO,QUo,WUo,qO,HUo,UUo,JUo,Rw,YUo,Ahe,KUo,ZUo,eJo,st,Bw,oJo,yhe,rJo,tJo,oc,aJo,Lhe,nJo,sJo,NO,lJo,iJo,dJo,xhe,cJo,fJo,Pw,mJo,eo,$w,gJo,khe,hJo,pJo,ln,_Jo,She,uJo,bJo,Rhe,vJo,FJo,Bhe,TJo,MJo,EJo,Iw,vv,Phe,CJo,wJo,jO,AJo,yJo,LJo,Fv,$he,xJo,kJo,DO,SJo,RJo,BJo,Tv,PJo,Ihe,$Jo,IJo,qhe,qJo,NJo,Nhe,jJo,DJo,qw,JPe,rc,Mv,jhe,Nw,GJo,Dhe,OJo,YPe,gr,jw,VJo,tc,XJo,GO,zJo,QJo,OO,WJo,HJo,UJo,Dw,JJo,Ghe,YJo,KJo,ZJo,lt,Gw,eYo,Ohe,oYo,rYo,ac,tYo,Vhe,aYo,nYo,VO,sYo,lYo,iYo,Xhe,dYo,cYo,Ow,fYo,oo,Vw,mYo,zhe,gYo,hYo,dn,pYo,Qhe,_Yo,uYo,Whe,bYo,vYo,Hhe,FYo,TYo,MYo,cn,Ev,Uhe,EYo,CYo,XO,wYo,AYo,yYo,Cv,Jhe,LYo,xYo,zO,kYo,SYo,RYo,wv,Yhe,BYo,PYo,QO,$Yo,IYo,qYo,Av,Khe,NYo,jYo,WO,DYo,GYo,OYo,yv,VYo,Zhe,XYo,zYo,epe,QYo,WYo,ope,HYo,UYo,Xw,KPe,nc,Lv,rpe,zw,JYo,tpe,YYo,ZPe,hr,Qw,KYo,sc,ZYo,HO,eKo,oKo,UO,rKo,tKo,aKo,Ww,nKo,ape,sKo,lKo,iKo,it,Hw,dKo,npe,cKo,fKo,lc,mKo,spe,gKo,hKo,JO,pKo,_Ko,uKo,lpe,bKo,vKo,Uw,FKo,ro,Jw,TKo,ipe,MKo,EKo,fn,CKo,dpe,wKo,AKo,cpe,yKo,LKo,fpe,xKo,kKo,SKo,ic,xv,mpe,RKo,BKo,YO,PKo,$Ko,IKo,kv,gpe,qKo,NKo,KO,jKo,DKo,GKo,Sv,hpe,OKo,VKo,ZO,XKo,zKo,QKo,Rv,WKo,ppe,HKo,UKo,_pe,JKo,YKo,upe,KKo,ZKo,Yw,e$e,dc,Bv,bpe,Kw,eZo,vpe,oZo,o$e,pr,Zw,rZo,cc,tZo,eV,aZo,nZo,oV,sZo,lZo,iZo,eA,dZo,Fpe,cZo,fZo,mZo,dt,oA,gZo,Tpe,hZo,pZo,fc,_Zo,Mpe,uZo,bZo,rV,vZo,FZo,TZo,Epe,MZo,EZo,rA,CZo,to,tA,wZo,Cpe,AZo,yZo,mn,LZo,wpe,xZo,kZo,Ape,SZo,RZo,ype,BZo,PZo,$Zo,Lpe,Pv,xpe,IZo,qZo,tV,NZo,jZo,DZo,$v,GZo,kpe,OZo,VZo,Spe,XZo,zZo,Rpe,QZo,WZo,aA,r$e,mc,Iv,Bpe,nA,HZo,Ppe,UZo,t$e,_r,sA,JZo,gc,YZo,aV,KZo,ZZo,nV,eer,oer,rer,lA,ter,$pe,aer,ner,ser,ct,iA,ler,Ipe,ier,der,hc,cer,qpe,fer,mer,sV,ger,her,per,Npe,_er,uer,dA,ber,ao,cA,ver,jpe,Fer,Ter,gn,Mer,Dpe,Eer,Cer,Gpe,wer,Aer,Ope,yer,Ler,xer,Vpe,qv,Xpe,ker,Ser,lV,Rer,Ber,Per,Nv,$er,zpe,Ier,qer,Qpe,Ner,jer,Wpe,Der,Ger,fA,a$e,pc,jv,Hpe,mA,Oer,Upe,Ver,n$e,ur,gA,Xer,_c,zer,iV,Qer,Wer,dV,Her,Uer,Jer,hA,Yer,Jpe,Ker,Zer,eor,ft,pA,oor,Ype,ror,tor,uc,aor,Kpe,nor,sor,cV,lor,ior,dor,Zpe,cor,mor,_A,gor,no,uA,hor,e_e,por,_or,hn,uor,o_e,bor,vor,r_e,For,Tor,t_e,Mor,Eor,Cor,pn,Dv,a_e,wor,Aor,fV,yor,Lor,xor,Gv,n_e,kor,Sor,mV,Ror,Bor,Por,Ov,s_e,$or,Ior,gV,qor,Nor,jor,Vv,l_e,Dor,Gor,hV,Oor,Vor,Xor,Xv,zor,i_e,Qor,Wor,d_e,Hor,Uor,c_e,Jor,Yor,bA,s$e,bc,zv,f_e,vA,Kor,m_e,Zor,l$e,br,FA,err,vc,orr,pV,rrr,trr,_V,arr,nrr,srr,TA,lrr,g_e,irr,drr,crr,mt,MA,frr,h_e,mrr,grr,Fc,hrr,p_e,prr,_rr,uV,urr,brr,vrr,__e,Frr,Trr,EA,Mrr,so,CA,Err,u_e,Crr,wrr,_n,Arr,b_e,yrr,Lrr,v_e,xrr,krr,F_e,Srr,Rrr,Brr,T_e,Qv,M_e,Prr,$rr,bV,Irr,qrr,Nrr,Wv,jrr,E_e,Drr,Grr,C_e,Orr,Vrr,w_e,Xrr,zrr,wA,i$e,Tc,Hv,A_e,AA,Qrr,y_e,Wrr,d$e,vr,yA,Hrr,Mc,Urr,vV,Jrr,Yrr,FV,Krr,Zrr,etr,LA,otr,L_e,rtr,ttr,atr,gt,xA,ntr,x_e,str,ltr,Ec,itr,k_e,dtr,ctr,TV,ftr,mtr,gtr,S_e,htr,ptr,kA,_tr,po,SA,utr,R_e,btr,vtr,un,Ftr,B_e,Ttr,Mtr,P_e,Etr,Ctr,$_e,wtr,Atr,ytr,x,Uv,I_e,Ltr,xtr,MV,ktr,Str,Rtr,Jv,q_e,Btr,Ptr,EV,$tr,Itr,qtr,Yv,N_e,Ntr,jtr,CV,Dtr,Gtr,Otr,Kv,j_e,Vtr,Xtr,wV,ztr,Qtr,Wtr,Zv,D_e,Htr,Utr,AV,Jtr,Ytr,Ktr,eF,G_e,Ztr,ear,yV,oar,rar,tar,oF,O_e,aar,nar,LV,sar,lar,iar,rF,V_e,dar,car,xV,far,mar,gar,tF,X_e,har,par,kV,_ar,uar,bar,aF,z_e,Far,Tar,SV,Mar,Ear,Car,nF,Q_e,war,Aar,RV,yar,Lar,xar,sF,W_e,kar,Sar,BV,Rar,Bar,Par,lF,H_e,$ar,Iar,PV,qar,Nar,jar,iF,U_e,Dar,Gar,$V,Oar,Var,Xar,dF,J_e,zar,Qar,IV,War,Har,Uar,cF,Y_e,Jar,Yar,qV,Kar,Zar,enr,Js,K_e,onr,rnr,NV,tnr,anr,jV,nnr,snr,lnr,fF,Z_e,inr,dnr,DV,cnr,fnr,mnr,mF,eue,gnr,hnr,GV,pnr,_nr,unr,gF,oue,bnr,vnr,OV,Fnr,Tnr,Mnr,hF,rue,Enr,Cnr,VV,wnr,Anr,ynr,pF,tue,Lnr,xnr,XV,knr,Snr,Rnr,_F,aue,Bnr,Pnr,zV,$nr,Inr,qnr,uF,nue,Nnr,jnr,QV,Dnr,Gnr,Onr,bF,sue,Vnr,Xnr,WV,znr,Qnr,Wnr,vF,lue,Hnr,Unr,HV,Jnr,Ynr,Knr,FF,iue,Znr,esr,UV,osr,rsr,tsr,TF,due,asr,nsr,JV,ssr,lsr,isr,MF,cue,dsr,csr,YV,fsr,msr,gsr,EF,fue,hsr,psr,KV,_sr,usr,bsr,CF,mue,vsr,Fsr,ZV,Tsr,Msr,Esr,wF,gue,Csr,wsr,eX,Asr,ysr,Lsr,AF,hue,xsr,ksr,oX,Ssr,Rsr,Bsr,yF,pue,Psr,$sr,rX,Isr,qsr,Nsr,LF,_ue,jsr,Dsr,tX,Gsr,Osr,Vsr,xF,uue,Xsr,zsr,aX,Qsr,Wsr,Hsr,kF,bue,Usr,Jsr,nX,Ysr,Ksr,Zsr,SF,vue,elr,olr,sX,rlr,tlr,alr,RF,Fue,nlr,slr,lX,llr,ilr,dlr,BF,Tue,clr,flr,iX,mlr,glr,hlr,PF,Mue,plr,_lr,dX,ulr,blr,vlr,$F,Eue,Flr,Tlr,cX,Mlr,Elr,Clr,IF,Cue,wlr,Alr,fX,ylr,Llr,xlr,qF,wue,klr,Slr,mX,Rlr,Blr,Plr,Aue,$lr,Ilr,RA,c$e,Cc,NF,yue,BA,qlr,Lue,Nlr,f$e,Fr,PA,jlr,wc,Dlr,gX,Glr,Olr,hX,Vlr,Xlr,zlr,$A,Qlr,xue,Wlr,Hlr,Ulr,ht,IA,Jlr,kue,Ylr,Klr,Ac,Zlr,Sue,eir,oir,pX,rir,tir,air,Rue,nir,sir,qA,lir,_o,NA,iir,Bue,dir,cir,bn,fir,Pue,mir,gir,$ue,hir,pir,Iue,_ir,uir,bir,U,jF,que,vir,Fir,_X,Tir,Mir,Eir,DF,Nue,Cir,wir,uX,Air,yir,Lir,GF,jue,xir,kir,bX,Sir,Rir,Bir,OF,Due,Pir,$ir,vX,Iir,qir,Nir,VF,Gue,jir,Dir,FX,Gir,Oir,Vir,XF,Oue,Xir,zir,TX,Qir,Wir,Hir,zF,Vue,Uir,Jir,MX,Yir,Kir,Zir,QF,Xue,edr,odr,EX,rdr,tdr,adr,WF,zue,ndr,sdr,CX,ldr,idr,ddr,HF,Que,cdr,fdr,wX,mdr,gdr,hdr,UF,Wue,pdr,_dr,AX,udr,bdr,vdr,JF,Hue,Fdr,Tdr,yX,Mdr,Edr,Cdr,YF,Uue,wdr,Adr,LX,ydr,Ldr,xdr,KF,Jue,kdr,Sdr,xX,Rdr,Bdr,Pdr,ZF,Yue,$dr,Idr,kX,qdr,Ndr,jdr,eT,Kue,Ddr,Gdr,SX,Odr,Vdr,Xdr,oT,Zue,zdr,Qdr,RX,Wdr,Hdr,Udr,rT,e1e,Jdr,Ydr,BX,Kdr,Zdr,ecr,tT,o1e,ocr,rcr,PX,tcr,acr,ncr,aT,r1e,scr,lcr,$X,icr,dcr,ccr,nT,t1e,fcr,mcr,IX,gcr,hcr,pcr,sT,a1e,_cr,ucr,qX,bcr,vcr,Fcr,lT,n1e,Tcr,Mcr,NX,Ecr,Ccr,wcr,s1e,Acr,ycr,jA,m$e,yc,iT,l1e,DA,Lcr,i1e,xcr,g$e,Tr,GA,kcr,Lc,Scr,jX,Rcr,Bcr,DX,Pcr,$cr,Icr,OA,qcr,d1e,Ncr,jcr,Dcr,pt,VA,Gcr,c1e,Ocr,Vcr,xc,Xcr,f1e,zcr,Qcr,GX,Wcr,Hcr,Ucr,m1e,Jcr,Ycr,XA,Kcr,uo,zA,Zcr,g1e,efr,ofr,vn,rfr,h1e,tfr,afr,p1e,nfr,sfr,_1e,lfr,ifr,dfr,ge,dT,u1e,cfr,ffr,OX,mfr,gfr,hfr,cT,b1e,pfr,_fr,VX,ufr,bfr,vfr,fT,v1e,Ffr,Tfr,XX,Mfr,Efr,Cfr,mT,F1e,wfr,Afr,zX,yfr,Lfr,xfr,gT,T1e,kfr,Sfr,QX,Rfr,Bfr,Pfr,hT,M1e,$fr,Ifr,WX,qfr,Nfr,jfr,pT,E1e,Dfr,Gfr,HX,Ofr,Vfr,Xfr,_T,C1e,zfr,Qfr,UX,Wfr,Hfr,Ufr,uT,w1e,Jfr,Yfr,JX,Kfr,Zfr,emr,bT,A1e,omr,rmr,YX,tmr,amr,nmr,vT,y1e,smr,lmr,KX,imr,dmr,cmr,FT,L1e,fmr,mmr,ZX,gmr,hmr,pmr,x1e,_mr,umr,QA,h$e,kc,TT,k1e,WA,bmr,S1e,vmr,p$e,Mr,HA,Fmr,Sc,Tmr,ez,Mmr,Emr,oz,Cmr,wmr,Amr,UA,ymr,R1e,Lmr,xmr,kmr,_t,JA,Smr,B1e,Rmr,Bmr,Rc,Pmr,P1e,$mr,Imr,rz,qmr,Nmr,jmr,$1e,Dmr,Gmr,YA,Omr,bo,KA,Vmr,I1e,Xmr,zmr,Fn,Qmr,q1e,Wmr,Hmr,N1e,Umr,Jmr,j1e,Ymr,Kmr,Zmr,ZA,MT,D1e,egr,ogr,tz,rgr,tgr,agr,ET,G1e,ngr,sgr,az,lgr,igr,dgr,O1e,cgr,fgr,e0,_$e,Bc,CT,V1e,o0,mgr,X1e,ggr,u$e,Er,r0,hgr,Pc,pgr,nz,_gr,ugr,sz,bgr,vgr,Fgr,t0,Tgr,z1e,Mgr,Egr,Cgr,ut,a0,wgr,Q1e,Agr,ygr,$c,Lgr,W1e,xgr,kgr,lz,Sgr,Rgr,Bgr,H1e,Pgr,$gr,n0,Igr,vo,s0,qgr,U1e,Ngr,jgr,Tn,Dgr,J1e,Ggr,Ogr,Y1e,Vgr,Xgr,K1e,zgr,Qgr,Wgr,K,wT,Z1e,Hgr,Ugr,iz,Jgr,Ygr,Kgr,AT,ebe,Zgr,ehr,dz,ohr,rhr,thr,yT,obe,ahr,nhr,cz,shr,lhr,ihr,LT,rbe,dhr,chr,fz,fhr,mhr,ghr,xT,tbe,hhr,phr,mz,_hr,uhr,bhr,kT,abe,vhr,Fhr,gz,Thr,Mhr,Ehr,ST,nbe,Chr,whr,hz,Ahr,yhr,Lhr,RT,sbe,xhr,khr,pz,Shr,Rhr,Bhr,BT,lbe,Phr,$hr,_z,Ihr,qhr,Nhr,PT,ibe,jhr,Dhr,uz,Ghr,Ohr,Vhr,$T,dbe,Xhr,zhr,bz,Qhr,Whr,Hhr,IT,cbe,Uhr,Jhr,vz,Yhr,Khr,Zhr,qT,fbe,epr,opr,Fz,rpr,tpr,apr,NT,mbe,npr,spr,Tz,lpr,ipr,dpr,jT,gbe,cpr,fpr,Mz,mpr,gpr,hpr,DT,hbe,ppr,_pr,Ez,upr,bpr,vpr,GT,pbe,Fpr,Tpr,Cz,Mpr,Epr,Cpr,OT,_be,wpr,Apr,wz,ypr,Lpr,xpr,VT,ube,kpr,Spr,Az,Rpr,Bpr,Ppr,XT,bbe,$pr,Ipr,yz,qpr,Npr,jpr,vbe,Dpr,Gpr,l0,b$e,Ic,zT,Fbe,i0,Opr,Tbe,Vpr,v$e,Cr,d0,Xpr,qc,zpr,Lz,Qpr,Wpr,xz,Hpr,Upr,Jpr,c0,Ypr,Mbe,Kpr,Zpr,e_r,bt,f0,o_r,Ebe,r_r,t_r,Nc,a_r,Cbe,n_r,s_r,kz,l_r,i_r,d_r,wbe,c_r,f_r,m0,m_r,Fo,g0,g_r,Abe,h_r,p_r,Mn,__r,ybe,u_r,b_r,Lbe,v_r,F_r,xbe,T_r,M_r,E_r,Fe,QT,kbe,C_r,w_r,Sz,A_r,y_r,L_r,WT,Sbe,x_r,k_r,Rz,S_r,R_r,B_r,HT,Rbe,P_r,$_r,Bz,I_r,q_r,N_r,UT,Bbe,j_r,D_r,Pz,G_r,O_r,V_r,JT,Pbe,X_r,z_r,$z,Q_r,W_r,H_r,YT,$be,U_r,J_r,Iz,Y_r,K_r,Z_r,KT,Ibe,eur,our,qz,rur,tur,aur,ZT,qbe,nur,sur,Nz,lur,iur,dur,e8,Nbe,cur,fur,jz,mur,gur,hur,o8,jbe,pur,_ur,Dz,uur,bur,vur,Dbe,Fur,Tur,h0,F$e,jc,r8,Gbe,p0,Mur,Obe,Eur,T$e,wr,_0,Cur,Dc,wur,Gz,Aur,yur,Oz,Lur,xur,kur,u0,Sur,Vbe,Rur,Bur,Pur,vt,b0,$ur,Xbe,Iur,qur,Gc,Nur,zbe,jur,Dur,Vz,Gur,Our,Vur,Qbe,Xur,zur,v0,Qur,To,F0,Wur,Wbe,Hur,Uur,En,Jur,Hbe,Yur,Kur,Ube,Zur,e1r,Jbe,o1r,r1r,t1r,V,t8,Ybe,a1r,n1r,Xz,s1r,l1r,i1r,a8,Kbe,d1r,c1r,zz,f1r,m1r,g1r,n8,Zbe,h1r,p1r,Qz,_1r,u1r,b1r,s8,e2e,v1r,F1r,Wz,T1r,M1r,E1r,l8,o2e,C1r,w1r,Hz,A1r,y1r,L1r,i8,r2e,x1r,k1r,Uz,S1r,R1r,B1r,d8,t2e,P1r,$1r,Jz,I1r,q1r,N1r,c8,a2e,j1r,D1r,Yz,G1r,O1r,V1r,f8,n2e,X1r,z1r,Kz,Q1r,W1r,H1r,m8,s2e,U1r,J1r,Zz,Y1r,K1r,Z1r,g8,l2e,ebr,obr,eQ,rbr,tbr,abr,h8,i2e,nbr,sbr,oQ,lbr,ibr,dbr,p8,d2e,cbr,fbr,rQ,mbr,gbr,hbr,_8,c2e,pbr,_br,tQ,ubr,bbr,vbr,u8,f2e,Fbr,Tbr,aQ,Mbr,Ebr,Cbr,b8,m2e,wbr,Abr,nQ,ybr,Lbr,xbr,v8,g2e,kbr,Sbr,sQ,Rbr,Bbr,Pbr,F8,h2e,$br,Ibr,lQ,qbr,Nbr,jbr,T8,p2e,Dbr,Gbr,iQ,Obr,Vbr,Xbr,M8,_2e,zbr,Qbr,dQ,Wbr,Hbr,Ubr,E8,u2e,Jbr,Ybr,cQ,Kbr,Zbr,e2r,C8,b2e,o2r,r2r,fQ,t2r,a2r,n2r,w8,v2e,s2r,l2r,mQ,i2r,d2r,c2r,A8,F2e,f2r,m2r,gQ,g2r,h2r,p2r,y8,T2e,_2r,u2r,hQ,b2r,v2r,F2r,L8,M2e,T2r,M2r,pQ,E2r,C2r,w2r,E2e,A2r,y2r,T0,M$e,Oc,x8,C2e,M0,L2r,w2e,x2r,E$e,Ar,E0,k2r,Vc,S2r,_Q,R2r,B2r,uQ,P2r,$2r,I2r,C0,q2r,A2e,N2r,j2r,D2r,Ft,w0,G2r,y2e,O2r,V2r,Xc,X2r,L2e,z2r,Q2r,bQ,W2r,H2r,U2r,x2e,J2r,Y2r,A0,K2r,Mo,y0,Z2r,k2e,e5r,o5r,Cn,r5r,S2e,t5r,a5r,R2e,n5r,s5r,B2e,l5r,i5r,d5r,se,k8,P2e,c5r,f5r,vQ,m5r,g5r,h5r,S8,$2e,p5r,_5r,FQ,u5r,b5r,v5r,R8,I2e,F5r,T5r,TQ,M5r,E5r,C5r,B8,q2e,w5r,A5r,MQ,y5r,L5r,x5r,P8,N2e,k5r,S5r,EQ,R5r,B5r,P5r,$8,j2e,$5r,I5r,CQ,q5r,N5r,j5r,I8,D2e,D5r,G5r,wQ,O5r,V5r,X5r,q8,G2e,z5r,Q5r,AQ,W5r,H5r,U5r,N8,O2e,J5r,Y5r,yQ,K5r,Z5r,e6r,j8,V2e,o6r,r6r,LQ,t6r,a6r,n6r,D8,X2e,s6r,l6r,xQ,i6r,d6r,c6r,G8,z2e,f6r,m6r,kQ,g6r,h6r,p6r,O8,Q2e,_6r,u6r,SQ,b6r,v6r,F6r,V8,W2e,T6r,M6r,RQ,E6r,C6r,w6r,X8,H2e,A6r,y6r,BQ,L6r,x6r,k6r,z8,U2e,S6r,R6r,PQ,B6r,P6r,$6r,Q8,J2e,I6r,q6r,$Q,N6r,j6r,D6r,Y2e,G6r,O6r,L0,C$e,zc,W8,K2e,x0,V6r,Z2e,X6r,w$e,yr,k0,z6r,Qc,Q6r,IQ,W6r,H6r,qQ,U6r,J6r,Y6r,S0,K6r,e5e,Z6r,evr,ovr,Tt,R0,rvr,o5e,tvr,avr,Wc,nvr,r5e,svr,lvr,NQ,ivr,dvr,cvr,t5e,fvr,mvr,B0,gvr,Eo,P0,hvr,a5e,pvr,_vr,wn,uvr,n5e,bvr,vvr,s5e,Fvr,Tvr,l5e,Mvr,Evr,Cvr,i5e,H8,d5e,wvr,Avr,jQ,yvr,Lvr,xvr,c5e,kvr,Svr,$0,A$e,Hc,U8,f5e,I0,Rvr,m5e,Bvr,y$e,Lr,q0,Pvr,Uc,$vr,DQ,Ivr,qvr,GQ,Nvr,jvr,Dvr,N0,Gvr,g5e,Ovr,Vvr,Xvr,Mt,j0,zvr,h5e,Qvr,Wvr,Jc,Hvr,p5e,Uvr,Jvr,OQ,Yvr,Kvr,Zvr,_5e,eFr,oFr,D0,rFr,Co,G0,tFr,u5e,aFr,nFr,An,sFr,b5e,lFr,iFr,v5e,dFr,cFr,F5e,fFr,mFr,gFr,Z,J8,T5e,hFr,pFr,VQ,_Fr,uFr,bFr,Y8,M5e,vFr,FFr,XQ,TFr,MFr,EFr,K8,E5e,CFr,wFr,zQ,AFr,yFr,LFr,Z8,C5e,xFr,kFr,QQ,SFr,RFr,BFr,e7,w5e,PFr,$Fr,WQ,IFr,qFr,NFr,o7,A5e,jFr,DFr,HQ,GFr,OFr,VFr,r7,y5e,XFr,zFr,UQ,QFr,WFr,HFr,t7,L5e,UFr,JFr,JQ,YFr,KFr,ZFr,a7,x5e,eTr,oTr,YQ,rTr,tTr,aTr,n7,k5e,nTr,sTr,KQ,lTr,iTr,dTr,s7,S5e,cTr,fTr,ZQ,mTr,gTr,hTr,l7,R5e,pTr,_Tr,eW,uTr,bTr,vTr,i7,B5e,FTr,TTr,oW,MTr,ETr,CTr,d7,P5e,wTr,ATr,rW,yTr,LTr,xTr,c7,$5e,kTr,STr,tW,RTr,BTr,PTr,f7,I5e,$Tr,ITr,aW,qTr,NTr,jTr,m7,q5e,DTr,GTr,nW,OTr,VTr,XTr,g7,N5e,zTr,QTr,sW,WTr,HTr,UTr,h7,j5e,JTr,YTr,lW,KTr,ZTr,e8r,p7,D5e,o8r,r8r,iW,t8r,a8r,n8r,G5e,s8r,l8r,O0,L$e,Yc,_7,O5e,V0,i8r,V5e,d8r,x$e,xr,X0,c8r,Kc,f8r,dW,m8r,g8r,cW,h8r,p8r,_8r,z0,u8r,X5e,b8r,v8r,F8r,Et,Q0,T8r,z5e,M8r,E8r,Zc,C8r,Q5e,w8r,A8r,fW,y8r,L8r,x8r,W5e,k8r,S8r,W0,R8r,wo,H0,B8r,H5e,P8r,$8r,yn,I8r,U5e,q8r,N8r,J5e,j8r,D8r,Y5e,G8r,O8r,V8r,ee,u7,K5e,X8r,z8r,mW,Q8r,W8r,H8r,b7,Z5e,U8r,J8r,gW,Y8r,K8r,Z8r,v7,e6e,e7r,o7r,hW,r7r,t7r,a7r,F7,o6e,n7r,s7r,pW,l7r,i7r,d7r,T7,r6e,c7r,f7r,_W,m7r,g7r,h7r,M7,t6e,p7r,_7r,uW,u7r,b7r,v7r,E7,a6e,F7r,T7r,bW,M7r,E7r,C7r,C7,n6e,w7r,A7r,vW,y7r,L7r,x7r,w7,s6e,k7r,S7r,FW,R7r,B7r,P7r,A7,l6e,$7r,I7r,TW,q7r,N7r,j7r,y7,i6e,D7r,G7r,MW,O7r,V7r,X7r,L7,d6e,z7r,Q7r,EW,W7r,H7r,U7r,x7,c6e,J7r,Y7r,CW,K7r,Z7r,eMr,k7,f6e,oMr,rMr,wW,tMr,aMr,nMr,S7,m6e,sMr,lMr,AW,iMr,dMr,cMr,R7,g6e,fMr,mMr,yW,gMr,hMr,pMr,B7,h6e,_Mr,uMr,LW,bMr,vMr,FMr,P7,p6e,TMr,MMr,xW,EMr,CMr,wMr,$7,_6e,AMr,yMr,kW,LMr,xMr,kMr,I7,u6e,SMr,RMr,SW,BMr,PMr,$Mr,b6e,IMr,qMr,U0,k$e,ef,q7,v6e,J0,NMr,F6e,jMr,S$e,kr,Y0,DMr,of,GMr,RW,OMr,VMr,BW,XMr,zMr,QMr,K0,WMr,T6e,HMr,UMr,JMr,Ct,Z0,YMr,M6e,KMr,ZMr,rf,e4r,E6e,o4r,r4r,PW,t4r,a4r,n4r,C6e,s4r,l4r,ey,i4r,Ao,oy,d4r,w6e,c4r,f4r,Ln,m4r,A6e,g4r,h4r,y6e,p4r,_4r,L6e,u4r,b4r,v4r,x6e,N7,k6e,F4r,T4r,$W,M4r,E4r,C4r,S6e,w4r,A4r,ry,R$e,tf,j7,R6e,ty,y4r,B6e,L4r,B$e,Sr,ay,x4r,af,k4r,IW,S4r,R4r,qW,B4r,P4r,$4r,ny,I4r,P6e,q4r,N4r,j4r,wt,sy,D4r,$6e,G4r,O4r,nf,V4r,I6e,X4r,z4r,NW,Q4r,W4r,H4r,q6e,U4r,J4r,ly,Y4r,yo,iy,K4r,N6e,Z4r,eEr,xn,oEr,j6e,rEr,tEr,D6e,aEr,nEr,G6e,sEr,lEr,iEr,O6e,D7,V6e,dEr,cEr,jW,fEr,mEr,gEr,X6e,hEr,pEr,dy,P$e,sf,G7,z6e,cy,_Er,Q6e,uEr,$$e,Rr,fy,bEr,lf,vEr,DW,FEr,TEr,GW,MEr,EEr,CEr,my,wEr,W6e,AEr,yEr,LEr,At,gy,xEr,H6e,kEr,SEr,df,REr,U6e,BEr,PEr,OW,$Er,IEr,qEr,J6e,NEr,jEr,hy,DEr,Lo,py,GEr,Y6e,OEr,VEr,kn,XEr,K6e,zEr,QEr,Z6e,WEr,HEr,eve,UEr,JEr,YEr,z,O7,ove,KEr,ZEr,VW,e3r,o3r,r3r,V7,rve,t3r,a3r,XW,n3r,s3r,l3r,X7,tve,i3r,d3r,zW,c3r,f3r,m3r,z7,ave,g3r,h3r,QW,p3r,_3r,u3r,Q7,nve,b3r,v3r,WW,F3r,T3r,M3r,W7,sve,E3r,C3r,HW,w3r,A3r,y3r,H7,lve,L3r,x3r,UW,k3r,S3r,R3r,U7,ive,B3r,P3r,JW,$3r,I3r,q3r,J7,dve,N3r,j3r,YW,D3r,G3r,O3r,Y7,cve,V3r,X3r,KW,z3r,Q3r,W3r,K7,fve,H3r,U3r,ZW,J3r,Y3r,K3r,Z7,mve,Z3r,eCr,eH,oCr,rCr,tCr,eM,gve,aCr,nCr,oH,sCr,lCr,iCr,oM,hve,dCr,cCr,rH,fCr,mCr,gCr,rM,pve,hCr,pCr,tH,_Cr,uCr,bCr,tM,_ve,vCr,FCr,aH,TCr,MCr,ECr,aM,uve,CCr,wCr,nH,ACr,yCr,LCr,nM,bve,xCr,kCr,sH,SCr,RCr,BCr,sM,vve,PCr,$Cr,lH,ICr,qCr,NCr,lM,Fve,jCr,DCr,iH,GCr,OCr,VCr,iM,Tve,XCr,zCr,dH,QCr,WCr,HCr,dM,Mve,UCr,JCr,cH,YCr,KCr,ZCr,cM,Eve,ewr,owr,fH,rwr,twr,awr,fM,Cve,nwr,swr,mH,lwr,iwr,dwr,mM,wve,cwr,fwr,gH,mwr,gwr,hwr,Ave,pwr,_wr,_y,I$e,cf,gM,yve,uy,uwr,Lve,bwr,q$e,Br,by,vwr,ff,Fwr,hH,Twr,Mwr,pH,Ewr,Cwr,wwr,vy,Awr,xve,ywr,Lwr,xwr,yt,Fy,kwr,kve,Swr,Rwr,mf,Bwr,Sve,Pwr,$wr,_H,Iwr,qwr,Nwr,Rve,jwr,Dwr,Ty,Gwr,xo,My,Owr,Bve,Vwr,Xwr,Sn,zwr,Pve,Qwr,Wwr,$ve,Hwr,Uwr,Ive,Jwr,Ywr,Kwr,ca,hM,qve,Zwr,eAr,uH,oAr,rAr,tAr,pM,Nve,aAr,nAr,bH,sAr,lAr,iAr,_M,jve,dAr,cAr,vH,fAr,mAr,gAr,uM,Dve,hAr,pAr,FH,_Ar,uAr,bAr,bM,Gve,vAr,FAr,TH,TAr,MAr,EAr,Ove,CAr,wAr,Ey,N$e,gf,vM,Vve,Cy,AAr,Xve,yAr,j$e,Pr,wy,LAr,hf,xAr,MH,kAr,SAr,EH,RAr,BAr,PAr,Ay,$Ar,zve,IAr,qAr,NAr,Lt,yy,jAr,Qve,DAr,GAr,pf,OAr,Wve,VAr,XAr,CH,zAr,QAr,WAr,Hve,HAr,UAr,Ly,JAr,ko,xy,YAr,Uve,KAr,ZAr,Rn,e0r,Jve,o0r,r0r,Yve,t0r,a0r,Kve,n0r,s0r,l0r,he,FM,Zve,i0r,d0r,wH,c0r,f0r,m0r,TM,eFe,g0r,h0r,AH,p0r,_0r,u0r,MM,oFe,b0r,v0r,yH,F0r,T0r,M0r,EM,rFe,E0r,C0r,LH,w0r,A0r,y0r,CM,tFe,L0r,x0r,xH,k0r,S0r,R0r,wM,aFe,B0r,P0r,kH,$0r,I0r,q0r,AM,nFe,N0r,j0r,SH,D0r,G0r,O0r,yM,sFe,V0r,X0r,RH,z0r,Q0r,W0r,LM,lFe,H0r,U0r,BH,J0r,Y0r,K0r,xM,iFe,Z0r,eyr,PH,oyr,ryr,tyr,kM,dFe,ayr,nyr,$H,syr,lyr,iyr,SM,cFe,dyr,cyr,IH,fyr,myr,gyr,fFe,hyr,pyr,ky,D$e,_f,RM,mFe,Sy,_yr,gFe,uyr,G$e,$r,Ry,byr,uf,vyr,qH,Fyr,Tyr,NH,Myr,Eyr,Cyr,By,wyr,hFe,Ayr,yyr,Lyr,xt,Py,xyr,pFe,kyr,Syr,bf,Ryr,_Fe,Byr,Pyr,jH,$yr,Iyr,qyr,uFe,Nyr,jyr,$y,Dyr,So,Iy,Gyr,bFe,Oyr,Vyr,Bn,Xyr,vFe,zyr,Qyr,FFe,Wyr,Hyr,TFe,Uyr,Jyr,Yyr,Te,BM,MFe,Kyr,Zyr,DH,eLr,oLr,rLr,PM,EFe,tLr,aLr,GH,nLr,sLr,lLr,$M,CFe,iLr,dLr,OH,cLr,fLr,mLr,IM,wFe,gLr,hLr,VH,pLr,_Lr,uLr,qM,AFe,bLr,vLr,XH,FLr,TLr,MLr,NM,yFe,ELr,CLr,zH,wLr,ALr,yLr,jM,LFe,LLr,xLr,QH,kLr,SLr,RLr,DM,xFe,BLr,PLr,WH,$Lr,ILr,qLr,GM,kFe,NLr,jLr,HH,DLr,GLr,OLr,OM,SFe,VLr,XLr,UH,zLr,QLr,WLr,RFe,HLr,ULr,qy,O$e,vf,VM,BFe,Ny,JLr,PFe,YLr,V$e,Ir,jy,KLr,Ff,ZLr,JH,e9r,o9r,YH,r9r,t9r,a9r,Dy,n9r,$Fe,s9r,l9r,i9r,kt,Gy,d9r,IFe,c9r,f9r,Tf,m9r,qFe,g9r,h9r,KH,p9r,_9r,u9r,NFe,b9r,v9r,Oy,F9r,Ro,Vy,T9r,jFe,M9r,E9r,Pn,C9r,DFe,w9r,A9r,GFe,y9r,L9r,OFe,x9r,k9r,S9r,we,XM,VFe,R9r,B9r,ZH,P9r,$9r,I9r,zM,XFe,q9r,N9r,eU,j9r,D9r,G9r,QM,zFe,O9r,V9r,oU,X9r,z9r,Q9r,WM,QFe,W9r,H9r,rU,U9r,J9r,Y9r,HM,WFe,K9r,Z9r,tU,exr,oxr,rxr,UM,HFe,txr,axr,aU,nxr,sxr,lxr,JM,UFe,ixr,dxr,nU,cxr,fxr,mxr,YM,JFe,gxr,hxr,sU,pxr,_xr,uxr,KM,YFe,bxr,vxr,lU,Fxr,Txr,Mxr,KFe,Exr,Cxr,Xy,X$e,Mf,ZM,ZFe,zy,wxr,eTe,Axr,z$e,qr,Qy,yxr,Ef,Lxr,iU,xxr,kxr,dU,Sxr,Rxr,Bxr,Wy,Pxr,oTe,$xr,Ixr,qxr,St,Hy,Nxr,rTe,jxr,Dxr,Cf,Gxr,tTe,Oxr,Vxr,cU,Xxr,zxr,Qxr,aTe,Wxr,Hxr,Uy,Uxr,Bo,Jy,Jxr,nTe,Yxr,Kxr,$n,Zxr,sTe,ekr,okr,lTe,rkr,tkr,iTe,akr,nkr,skr,Me,e4,dTe,lkr,ikr,fU,dkr,ckr,fkr,o4,cTe,mkr,gkr,mU,hkr,pkr,_kr,r4,fTe,ukr,bkr,gU,vkr,Fkr,Tkr,t4,mTe,Mkr,Ekr,hU,Ckr,wkr,Akr,a4,gTe,ykr,Lkr,pU,xkr,kkr,Skr,n4,hTe,Rkr,Bkr,_U,Pkr,$kr,Ikr,s4,pTe,qkr,Nkr,uU,jkr,Dkr,Gkr,l4,_Te,Okr,Vkr,bU,Xkr,zkr,Qkr,i4,uTe,Wkr,Hkr,vU,Ukr,Jkr,Ykr,d4,bTe,Kkr,Zkr,FU,eSr,oSr,rSr,vTe,tSr,aSr,Yy,Q$e,wf,c4,FTe,Ky,nSr,TTe,sSr,W$e,Nr,Zy,lSr,Af,iSr,TU,dSr,cSr,MU,fSr,mSr,gSr,eL,hSr,MTe,pSr,_Sr,uSr,Rt,oL,bSr,ETe,vSr,FSr,yf,TSr,CTe,MSr,ESr,EU,CSr,wSr,ASr,wTe,ySr,LSr,rL,xSr,Po,tL,kSr,ATe,SSr,RSr,In,BSr,yTe,PSr,$Sr,LTe,ISr,qSr,xTe,NSr,jSr,DSr,Ee,f4,kTe,GSr,OSr,CU,VSr,XSr,zSr,m4,STe,QSr,WSr,wU,HSr,USr,JSr,g4,RTe,YSr,KSr,AU,ZSr,eRr,oRr,h4,BTe,rRr,tRr,yU,aRr,nRr,sRr,p4,PTe,lRr,iRr,LU,dRr,cRr,fRr,_4,$Te,mRr,gRr,xU,hRr,pRr,_Rr,u4,ITe,uRr,bRr,kU,vRr,FRr,TRr,b4,qTe,MRr,ERr,SU,CRr,wRr,ARr,v4,NTe,yRr,LRr,RU,xRr,kRr,SRr,F4,jTe,RRr,BRr,BU,PRr,$Rr,IRr,DTe,qRr,NRr,aL,H$e,Lf,T4,GTe,nL,jRr,OTe,DRr,U$e,jr,sL,GRr,xf,ORr,PU,VRr,XRr,$U,zRr,QRr,WRr,lL,HRr,VTe,URr,JRr,YRr,Bt,iL,KRr,XTe,ZRr,eBr,kf,oBr,zTe,rBr,tBr,IU,aBr,nBr,sBr,QTe,lBr,iBr,dL,dBr,$o,cL,cBr,WTe,fBr,mBr,qn,gBr,HTe,hBr,pBr,UTe,_Br,uBr,JTe,bBr,vBr,FBr,Pe,M4,YTe,TBr,MBr,qU,EBr,CBr,wBr,E4,KTe,ABr,yBr,NU,LBr,xBr,kBr,C4,ZTe,SBr,RBr,jU,BBr,PBr,$Br,w4,e8e,IBr,qBr,DU,NBr,jBr,DBr,A4,o8e,GBr,OBr,GU,VBr,XBr,zBr,y4,r8e,QBr,WBr,OU,HBr,UBr,JBr,L4,t8e,YBr,KBr,VU,ZBr,ePr,oPr,x4,a8e,rPr,tPr,XU,aPr,nPr,sPr,n8e,lPr,iPr,fL,J$e,Sf,k4,s8e,mL,dPr,l8e,cPr,Y$e,Dr,gL,fPr,Rf,mPr,zU,gPr,hPr,QU,pPr,_Pr,uPr,hL,bPr,i8e,vPr,FPr,TPr,Pt,pL,MPr,d8e,EPr,CPr,Bf,wPr,c8e,APr,yPr,WU,LPr,xPr,kPr,f8e,SPr,RPr,_L,BPr,Io,uL,PPr,m8e,$Pr,IPr,Nn,qPr,g8e,NPr,jPr,h8e,DPr,GPr,p8e,OPr,VPr,XPr,$e,S4,_8e,zPr,QPr,HU,WPr,HPr,UPr,R4,u8e,JPr,YPr,UU,KPr,ZPr,e$r,B4,b8e,o$r,r$r,JU,t$r,a$r,n$r,P4,v8e,s$r,l$r,YU,i$r,d$r,c$r,$4,F8e,f$r,m$r,KU,g$r,h$r,p$r,I4,T8e,_$r,u$r,ZU,b$r,v$r,F$r,q4,M8e,T$r,M$r,eJ,E$r,C$r,w$r,N4,E8e,A$r,y$r,oJ,L$r,x$r,k$r,C8e,S$r,R$r,bL,K$e,Pf,j4,w8e,vL,B$r,A8e,P$r,Z$e,Gr,FL,$$r,$f,I$r,rJ,q$r,N$r,tJ,j$r,D$r,G$r,TL,O$r,y8e,V$r,X$r,z$r,$t,ML,Q$r,L8e,W$r,H$r,If,U$r,x8e,J$r,Y$r,aJ,K$r,Z$r,eIr,k8e,oIr,rIr,EL,tIr,qo,CL,aIr,S8e,nIr,sIr,jn,lIr,R8e,iIr,dIr,B8e,cIr,fIr,P8e,mIr,gIr,hIr,$8e,D4,I8e,pIr,_Ir,nJ,uIr,bIr,vIr,q8e,FIr,TIr,wL,eIe,qf,G4,N8e,AL,MIr,j8e,EIr,oIe,Or,yL,CIr,Nf,wIr,sJ,AIr,yIr,lJ,LIr,xIr,kIr,LL,SIr,D8e,RIr,BIr,PIr,It,xL,$Ir,G8e,IIr,qIr,jf,NIr,O8e,jIr,DIr,iJ,GIr,OIr,VIr,V8e,XIr,zIr,kL,QIr,No,SL,WIr,X8e,HIr,UIr,Dn,JIr,z8e,YIr,KIr,Q8e,ZIr,eqr,W8e,oqr,rqr,tqr,RL,O4,H8e,aqr,nqr,dJ,sqr,lqr,iqr,V4,U8e,dqr,cqr,cJ,fqr,mqr,gqr,J8e,hqr,pqr,BL,rIe,Df,X4,Y8e,PL,_qr,K8e,uqr,tIe,Vr,$L,bqr,Gf,vqr,fJ,Fqr,Tqr,mJ,Mqr,Eqr,Cqr,IL,wqr,Z8e,Aqr,yqr,Lqr,qt,qL,xqr,e7e,kqr,Sqr,Of,Rqr,o7e,Bqr,Pqr,gJ,$qr,Iqr,qqr,r7e,Nqr,jqr,NL,Dqr,jo,jL,Gqr,t7e,Oqr,Vqr,Gn,Xqr,a7e,zqr,Qqr,n7e,Wqr,Hqr,s7e,Uqr,Jqr,Yqr,l7e,z4,i7e,Kqr,Zqr,hJ,eNr,oNr,rNr,d7e,tNr,aNr,DL,aIe;return _e=new X({}),Da=new A({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),JE=new X({}),YE=new A({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Jf=new nNr({props:{warning:!0,$$slots:{default:[j0t]},$$scope:{ctx:Xf}}}),KE=new X({}),ZE=new w({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/configuration_auto.py#L560"}}),r3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/configuration_auto.py#L583"}}),t3=new A({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),a3=new w({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/configuration_auto.py#L705"}}),n3=new X({}),s3=new w({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/tokenization_auto.py#L377"}}),d3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16857/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/tokenization_auto.py#L391"}}),c3=new A({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),f3=new w({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/tokenization_auto.py#L587"}}),m3=new X({}),g3=new w({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),_3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16857/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),Uh=new nNr({props:{$$slots:{default:[D0t]},$$scope:{ctx:Xf}}}),u3=new A({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),b3=new w({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),v3=new X({}),F3=new w({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/processing_auto.py#L76"}}),E3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/processing_auto.py#L90"}}),mp=new nNr({props:{$$slots:{default:[G0t]},$$scope:{ctx:Xf}}}),C3=new A({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),w3=new w({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/processing_auto.py#L243"}}),A3=new X({}),y3=new w({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L714"}}),x3=new w({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),k3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),S3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),R3=new A({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),B3=new X({}),P3=new w({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L721"}}),I3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),q3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),N3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),j3=new A({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),D3=new X({}),G3=new w({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L736"}}),V3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),X3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),z3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),Q3=new A({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W3=new X({}),H3=new w({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L743"}}),J3=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),Y3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),K3=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),Z3=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),eC=new X({}),oC=new w({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L750"}}),tC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),aC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),nC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),sC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),lC=new X({}),iC=new w({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L759"}}),cC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),fC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),mC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),gC=new A({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),hC=new X({}),pC=new w({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L793"}}),uC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),bC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),vC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),FC=new A({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),TC=new X({}),MC=new w({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L800"}}),CC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),wC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),AC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),yC=new A({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),LC=new X({}),xC=new w({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L786"}}),SC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),RC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),BC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),PC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),$C=new X({}),IC=new w({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L768"}}),NC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),jC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),DC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),GC=new A({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),OC=new X({}),VC=new w({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L775"}}),zC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),QC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),WC=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),HC=new A({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),UC=new X({}),JC=new w({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L809"}}),KC=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),ZC=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),ew=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rw=new X({}),tw=new w({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L848"}}),nw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),sw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),lw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),iw=new A({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dw=new X({}),cw=new w({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L855"}}),mw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),gw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),hw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_w=new X({}),uw=new w({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L878"}}),vw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),Fw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Tw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),Mw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ew=new X({}),Cw=new w({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L862"}}),Aw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Lw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kw=new X({}),Sw=new w({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L869"}}),Bw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),Pw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),$w=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),qw=new A({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Nw=new X({}),jw=new w({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L887"}}),Gw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),Ow=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),Vw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),Xw=new A({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zw=new X({}),Qw=new w({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L894"}}),Hw=new w({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),Uw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),Jw=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),Yw=new A({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Kw=new X({}),Zw=new w({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L841"}}),oA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),rA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),tA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),aA=new A({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nA=new X({}),sA=new w({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L816"}}),iA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),dA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),cA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),fA=new A({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mA=new X({}),gA=new w({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L823"}}),pA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),_A=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),uA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),bA=new A({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vA=new X({}),FA=new w({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_auto.py#L832"}}),MA=new w({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),EA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),CA=new w({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),wA=new A({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AA=new X({}),yA=new w({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),xA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),kA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),SA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),RA=new A({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BA=new X({}),PA=new w({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),IA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),qA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),NA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),jA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),DA=new X({}),GA=new w({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),VA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),XA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),zA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),QA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),WA=new X({}),HA=new w({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),JA=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),YA=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),KA=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),e0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),o0=new X({}),r0=new w({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),a0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),s0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),l0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),i0=new X({}),d0=new w({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L431"}}),f0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),m0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),g0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),h0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),p0=new X({}),_0=new w({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L440"}}),b0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),v0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),F0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),T0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),M0=new X({}),E0=new w({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L476"}}),w0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),A0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),y0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),L0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),x0=new X({}),k0=new w({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L456"}}),R0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),B0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),P0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),$0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),I0=new X({}),q0=new w({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L467"}}),j0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),D0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),G0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),O0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),V0=new X({}),X0=new w({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),Q0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),W0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),H0=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),U0=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),J0=new X({}),Y0=new w({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),Z0=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),ey=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),oy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),ry=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ty=new X({}),ay=new w({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_tf_auto.py#L492"}}),sy=new w({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),ly=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),iy=new w({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),dy=new A({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),cy=new X({}),fy=new w({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),gy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),hy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),py=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),_y=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),uy=new X({}),by=new w({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),Fy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),Ty=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),My=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),Ey=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Cy=new X({}),wy=new w({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),yy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),Ly=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),xy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),ky=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Sy=new X({}),Ry=new w({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),Py=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),$y=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),Iy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),qy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ny=new X({}),jy=new w({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),Gy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),Oy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),Vy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),Xy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zy=new X({}),Qy=new w({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),Hy=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),Uy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),Jy=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),Yy=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ky=new X({}),Zy=new w({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),oL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),rL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),tL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),aL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),nL=new X({}),sL=new w({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),iL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),dL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),cL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),fL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),mL=new X({}),gL=new w({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),pL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),_L=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),uL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),bL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),vL=new X({}),FL=new w({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),ML=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),EL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),CL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),wL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),AL=new X({}),yL=new w({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),xL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),kL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),SL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),BL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),PL=new X({}),$L=new w({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),qL=new w({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L389"}}),NL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),jL=new w({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16857/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16857/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/pr_16857/src/transformers/models/auto/auto_factory.py#L417"}}),DL=new A({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){oe=a("meta"),co=l(),me=a("h1"),Ae=a("a"),io=a("span"),f(_e.$$.fragment),Ce=l(),Xo=a("span"),zi=o("Auto Classes"),zf=l(),fa=a("p"),Qi=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=a("code"),QE=o("from_pretrained()"),Qf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Se=l(),fo=a("p"),Hi=o("Instantiating one of "),On=a("a"),WE=o("AutoConfig"),Vn=o(", "),Xn=a("a"),HE=o("AutoModel"),Ui=o(`, and
`),zn=a("a"),UE=o("AutoTokenizer"),Ji=o(" will directly create a class of the relevant architecture. For instance"),Wf=l(),f(Da.$$.fragment),mo=l(),ve=a("p"),Q9=o("will create a model that is an instance of "),Yi=a("a"),W9=o("BertModel"),H9=o("."),zo=l(),Ga=a("p"),U9=o("There is one class of "),Hf=a("code"),J9=o("AutoModel"),_Ne=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),tPe=l(),Ki=a("h2"),Uf=a("a"),lK=a("span"),f(JE.$$.fragment),uNe=l(),iK=a("span"),bNe=o("Extending the Auto Classes"),aPe=l(),Qn=a("p"),vNe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dK=a("code"),FNe=o("NewModel"),TNe=o(", make sure you have a "),cK=a("code"),MNe=o("NewModelConfig"),ENe=o(` then you can add those to the auto
classes like this:`),nPe=l(),f(YE.$$.fragment),sPe=l(),Y9=a("p"),CNe=o("You will then be able to use the auto classes like you would usually do!"),lPe=l(),f(Jf.$$.fragment),iPe=l(),Zi=a("h2"),Yf=a("a"),fK=a("span"),f(KE.$$.fragment),wNe=l(),mK=a("span"),ANe=o("AutoConfig"),dPe=l(),Qo=a("div"),f(ZE.$$.fragment),yNe=l(),e3=a("p"),LNe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),K9=a("a"),xNe=o("from_pretrained()"),kNe=o(" class method."),SNe=l(),o3=a("p"),RNe=o("This class cannot be instantiated directly using "),gK=a("code"),BNe=o("__init__()"),PNe=o(" (throws an error)."),$Ne=l(),go=a("div"),f(r3.$$.fragment),INe=l(),hK=a("p"),qNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),NNe=l(),ed=a("p"),jNe=o("The configuration class to instantiate is selected based on the "),pK=a("code"),DNe=o("model_type"),GNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_K=a("code"),ONe=o("pretrained_model_name_or_path"),VNe=o(":"),XNe=l(),v=a("ul"),Kf=a("li"),uK=a("strong"),zNe=o("albert"),QNe=o(" \u2014 "),Z9=a("a"),WNe=o("AlbertConfig"),HNe=o(" (ALBERT model)"),UNe=l(),Zf=a("li"),bK=a("strong"),JNe=o("bart"),YNe=o(" \u2014 "),ex=a("a"),KNe=o("BartConfig"),ZNe=o(" (BART model)"),eje=l(),em=a("li"),vK=a("strong"),oje=o("beit"),rje=o(" \u2014 "),ox=a("a"),tje=o("BeitConfig"),aje=o(" (BEiT model)"),nje=l(),om=a("li"),FK=a("strong"),sje=o("bert"),lje=o(" \u2014 "),rx=a("a"),ije=o("BertConfig"),dje=o(" (BERT model)"),cje=l(),rm=a("li"),TK=a("strong"),fje=o("bert-generation"),mje=o(" \u2014 "),tx=a("a"),gje=o("BertGenerationConfig"),hje=o(" (Bert Generation model)"),pje=l(),tm=a("li"),MK=a("strong"),_je=o("big_bird"),uje=o(" \u2014 "),ax=a("a"),bje=o("BigBirdConfig"),vje=o(" (BigBird model)"),Fje=l(),am=a("li"),EK=a("strong"),Tje=o("bigbird_pegasus"),Mje=o(" \u2014 "),nx=a("a"),Eje=o("BigBirdPegasusConfig"),Cje=o(" (BigBirdPegasus model)"),wje=l(),nm=a("li"),CK=a("strong"),Aje=o("blenderbot"),yje=o(" \u2014 "),sx=a("a"),Lje=o("BlenderbotConfig"),xje=o(" (Blenderbot model)"),kje=l(),sm=a("li"),wK=a("strong"),Sje=o("blenderbot-small"),Rje=o(" \u2014 "),lx=a("a"),Bje=o("BlenderbotSmallConfig"),Pje=o(" (BlenderbotSmall model)"),$je=l(),lm=a("li"),AK=a("strong"),Ije=o("camembert"),qje=o(" \u2014 "),ix=a("a"),Nje=o("CamembertConfig"),jje=o(" (CamemBERT model)"),Dje=l(),im=a("li"),yK=a("strong"),Gje=o("canine"),Oje=o(" \u2014 "),dx=a("a"),Vje=o("CanineConfig"),Xje=o(" (Canine model)"),zje=l(),dm=a("li"),LK=a("strong"),Qje=o("clip"),Wje=o(" \u2014 "),cx=a("a"),Hje=o("CLIPConfig"),Uje=o(" (CLIP model)"),Jje=l(),cm=a("li"),xK=a("strong"),Yje=o("convbert"),Kje=o(" \u2014 "),fx=a("a"),Zje=o("ConvBertConfig"),eDe=o(" (ConvBERT model)"),oDe=l(),fm=a("li"),kK=a("strong"),rDe=o("convnext"),tDe=o(" \u2014 "),mx=a("a"),aDe=o("ConvNextConfig"),nDe=o(" (ConvNext model)"),sDe=l(),mm=a("li"),SK=a("strong"),lDe=o("ctrl"),iDe=o(" \u2014 "),gx=a("a"),dDe=o("CTRLConfig"),cDe=o(" (CTRL model)"),fDe=l(),gm=a("li"),RK=a("strong"),mDe=o("data2vec-audio"),gDe=o(" \u2014 "),hx=a("a"),hDe=o("Data2VecAudioConfig"),pDe=o(" (Data2VecAudio model)"),_De=l(),hm=a("li"),BK=a("strong"),uDe=o("data2vec-text"),bDe=o(" \u2014 "),px=a("a"),vDe=o("Data2VecTextConfig"),FDe=o(" (Data2VecText model)"),TDe=l(),pm=a("li"),PK=a("strong"),MDe=o("data2vec-vision"),EDe=o(" \u2014 "),_x=a("a"),CDe=o("Data2VecVisionConfig"),wDe=o(" (Data2VecVision model)"),ADe=l(),_m=a("li"),$K=a("strong"),yDe=o("deberta"),LDe=o(" \u2014 "),ux=a("a"),xDe=o("DebertaConfig"),kDe=o(" (DeBERTa model)"),SDe=l(),um=a("li"),IK=a("strong"),RDe=o("deberta-v2"),BDe=o(" \u2014 "),bx=a("a"),PDe=o("DebertaV2Config"),$De=o(" (DeBERTa-v2 model)"),IDe=l(),bm=a("li"),qK=a("strong"),qDe=o("decision_transformer"),NDe=o(" \u2014 "),vx=a("a"),jDe=o("DecisionTransformerConfig"),DDe=o(" (Decision Transformer model)"),GDe=l(),vm=a("li"),NK=a("strong"),ODe=o("deit"),VDe=o(" \u2014 "),Fx=a("a"),XDe=o("DeiTConfig"),zDe=o(" (DeiT model)"),QDe=l(),Fm=a("li"),jK=a("strong"),WDe=o("detr"),HDe=o(" \u2014 "),Tx=a("a"),UDe=o("DetrConfig"),JDe=o(" (DETR model)"),YDe=l(),Tm=a("li"),DK=a("strong"),KDe=o("distilbert"),ZDe=o(" \u2014 "),Mx=a("a"),eGe=o("DistilBertConfig"),oGe=o(" (DistilBERT model)"),rGe=l(),Mm=a("li"),GK=a("strong"),tGe=o("dpr"),aGe=o(" \u2014 "),Ex=a("a"),nGe=o("DPRConfig"),sGe=o(" (DPR model)"),lGe=l(),Em=a("li"),OK=a("strong"),iGe=o("dpt"),dGe=o(" \u2014 "),Cx=a("a"),cGe=o("DPTConfig"),fGe=o(" (DPT model)"),mGe=l(),Cm=a("li"),VK=a("strong"),gGe=o("electra"),hGe=o(" \u2014 "),wx=a("a"),pGe=o("ElectraConfig"),_Ge=o(" (ELECTRA model)"),uGe=l(),wm=a("li"),XK=a("strong"),bGe=o("encoder-decoder"),vGe=o(" \u2014 "),Ax=a("a"),FGe=o("EncoderDecoderConfig"),TGe=o(" (Encoder decoder model)"),MGe=l(),Am=a("li"),zK=a("strong"),EGe=o("flaubert"),CGe=o(" \u2014 "),yx=a("a"),wGe=o("FlaubertConfig"),AGe=o(" (FlauBERT model)"),yGe=l(),ym=a("li"),QK=a("strong"),LGe=o("fnet"),xGe=o(" \u2014 "),Lx=a("a"),kGe=o("FNetConfig"),SGe=o(" (FNet model)"),RGe=l(),Lm=a("li"),WK=a("strong"),BGe=o("fsmt"),PGe=o(" \u2014 "),xx=a("a"),$Ge=o("FSMTConfig"),IGe=o(" (FairSeq Machine-Translation model)"),qGe=l(),xm=a("li"),HK=a("strong"),NGe=o("funnel"),jGe=o(" \u2014 "),kx=a("a"),DGe=o("FunnelConfig"),GGe=o(" (Funnel Transformer model)"),OGe=l(),km=a("li"),UK=a("strong"),VGe=o("glpn"),XGe=o(" \u2014 "),Sx=a("a"),zGe=o("GLPNConfig"),QGe=o(" (GLPN model)"),WGe=l(),Sm=a("li"),JK=a("strong"),HGe=o("gpt2"),UGe=o(" \u2014 "),Rx=a("a"),JGe=o("GPT2Config"),YGe=o(" (OpenAI GPT-2 model)"),KGe=l(),Rm=a("li"),YK=a("strong"),ZGe=o("gpt_neo"),eOe=o(" \u2014 "),Bx=a("a"),oOe=o("GPTNeoConfig"),rOe=o(" (GPT Neo model)"),tOe=l(),Bm=a("li"),KK=a("strong"),aOe=o("gptj"),nOe=o(" \u2014 "),Px=a("a"),sOe=o("GPTJConfig"),lOe=o(" (GPT-J model)"),iOe=l(),Pm=a("li"),ZK=a("strong"),dOe=o("hubert"),cOe=o(" \u2014 "),$x=a("a"),fOe=o("HubertConfig"),mOe=o(" (Hubert model)"),gOe=l(),$m=a("li"),eZ=a("strong"),hOe=o("ibert"),pOe=o(" \u2014 "),Ix=a("a"),_Oe=o("IBertConfig"),uOe=o(" (I-BERT model)"),bOe=l(),Im=a("li"),oZ=a("strong"),vOe=o("imagegpt"),FOe=o(" \u2014 "),qx=a("a"),TOe=o("ImageGPTConfig"),MOe=o(" (ImageGPT model)"),EOe=l(),qm=a("li"),rZ=a("strong"),COe=o("layoutlm"),wOe=o(" \u2014 "),Nx=a("a"),AOe=o("LayoutLMConfig"),yOe=o(" (LayoutLM model)"),LOe=l(),Nm=a("li"),tZ=a("strong"),xOe=o("layoutlmv2"),kOe=o(" \u2014 "),jx=a("a"),SOe=o("LayoutLMv2Config"),ROe=o(" (LayoutLMv2 model)"),BOe=l(),jm=a("li"),aZ=a("strong"),POe=o("led"),$Oe=o(" \u2014 "),Dx=a("a"),IOe=o("LEDConfig"),qOe=o(" (LED model)"),NOe=l(),Dm=a("li"),nZ=a("strong"),jOe=o("longformer"),DOe=o(" \u2014 "),Gx=a("a"),GOe=o("LongformerConfig"),OOe=o(" (Longformer model)"),VOe=l(),Gm=a("li"),sZ=a("strong"),XOe=o("luke"),zOe=o(" \u2014 "),Ox=a("a"),QOe=o("LukeConfig"),WOe=o(" (LUKE model)"),HOe=l(),Om=a("li"),lZ=a("strong"),UOe=o("lxmert"),JOe=o(" \u2014 "),Vx=a("a"),YOe=o("LxmertConfig"),KOe=o(" (LXMERT model)"),ZOe=l(),Vm=a("li"),iZ=a("strong"),eVe=o("m2m_100"),oVe=o(" \u2014 "),Xx=a("a"),rVe=o("M2M100Config"),tVe=o(" (M2M100 model)"),aVe=l(),Xm=a("li"),dZ=a("strong"),nVe=o("marian"),sVe=o(" \u2014 "),zx=a("a"),lVe=o("MarianConfig"),iVe=o(" (Marian model)"),dVe=l(),zm=a("li"),cZ=a("strong"),cVe=o("maskformer"),fVe=o(" \u2014 "),Qx=a("a"),mVe=o("MaskFormerConfig"),gVe=o(" (MaskFormer model)"),hVe=l(),Qm=a("li"),fZ=a("strong"),pVe=o("mbart"),_Ve=o(" \u2014 "),Wx=a("a"),uVe=o("MBartConfig"),bVe=o(" (mBART model)"),vVe=l(),Wm=a("li"),mZ=a("strong"),FVe=o("megatron-bert"),TVe=o(" \u2014 "),Hx=a("a"),MVe=o("MegatronBertConfig"),EVe=o(" (MegatronBert model)"),CVe=l(),Hm=a("li"),gZ=a("strong"),wVe=o("mobilebert"),AVe=o(" \u2014 "),Ux=a("a"),yVe=o("MobileBertConfig"),LVe=o(" (MobileBERT model)"),xVe=l(),Um=a("li"),hZ=a("strong"),kVe=o("mpnet"),SVe=o(" \u2014 "),Jx=a("a"),RVe=o("MPNetConfig"),BVe=o(" (MPNet model)"),PVe=l(),Jm=a("li"),pZ=a("strong"),$Ve=o("mt5"),IVe=o(" \u2014 "),Yx=a("a"),qVe=o("MT5Config"),NVe=o(" (mT5 model)"),jVe=l(),Ym=a("li"),_Z=a("strong"),DVe=o("nystromformer"),GVe=o(" \u2014 "),Kx=a("a"),OVe=o("NystromformerConfig"),VVe=o(" (Nystromformer model)"),XVe=l(),Km=a("li"),uZ=a("strong"),zVe=o("openai-gpt"),QVe=o(" \u2014 "),Zx=a("a"),WVe=o("OpenAIGPTConfig"),HVe=o(" (OpenAI GPT model)"),UVe=l(),Zm=a("li"),bZ=a("strong"),JVe=o("pegasus"),YVe=o(" \u2014 "),ek=a("a"),KVe=o("PegasusConfig"),ZVe=o(" (Pegasus model)"),eXe=l(),eg=a("li"),vZ=a("strong"),oXe=o("perceiver"),rXe=o(" \u2014 "),ok=a("a"),tXe=o("PerceiverConfig"),aXe=o(" (Perceiver model)"),nXe=l(),og=a("li"),FZ=a("strong"),sXe=o("plbart"),lXe=o(" \u2014 "),rk=a("a"),iXe=o("PLBartConfig"),dXe=o(" (PLBart model)"),cXe=l(),rg=a("li"),TZ=a("strong"),fXe=o("poolformer"),mXe=o(" \u2014 "),tk=a("a"),gXe=o("PoolFormerConfig"),hXe=o(" (PoolFormer model)"),pXe=l(),tg=a("li"),MZ=a("strong"),_Xe=o("prophetnet"),uXe=o(" \u2014 "),ak=a("a"),bXe=o("ProphetNetConfig"),vXe=o(" (ProphetNet model)"),FXe=l(),ag=a("li"),EZ=a("strong"),TXe=o("qdqbert"),MXe=o(" \u2014 "),nk=a("a"),EXe=o("QDQBertConfig"),CXe=o(" (QDQBert model)"),wXe=l(),ng=a("li"),CZ=a("strong"),AXe=o("rag"),yXe=o(" \u2014 "),sk=a("a"),LXe=o("RagConfig"),xXe=o(" (RAG model)"),kXe=l(),sg=a("li"),wZ=a("strong"),SXe=o("realm"),RXe=o(" \u2014 "),lk=a("a"),BXe=o("RealmConfig"),PXe=o(" (Realm model)"),$Xe=l(),lg=a("li"),AZ=a("strong"),IXe=o("reformer"),qXe=o(" \u2014 "),ik=a("a"),NXe=o("ReformerConfig"),jXe=o(" (Reformer model)"),DXe=l(),ig=a("li"),yZ=a("strong"),GXe=o("regnet"),OXe=o(" \u2014 "),dk=a("a"),VXe=o("RegNetConfig"),XXe=o(" (RegNet model)"),zXe=l(),dg=a("li"),LZ=a("strong"),QXe=o("rembert"),WXe=o(" \u2014 "),ck=a("a"),HXe=o("RemBertConfig"),UXe=o(" (RemBERT model)"),JXe=l(),cg=a("li"),xZ=a("strong"),YXe=o("resnet"),KXe=o(" \u2014 "),fk=a("a"),ZXe=o("ResNetConfig"),eze=o(" (ResNet model)"),oze=l(),fg=a("li"),kZ=a("strong"),rze=o("retribert"),tze=o(" \u2014 "),mk=a("a"),aze=o("RetriBertConfig"),nze=o(" (RetriBERT model)"),sze=l(),mg=a("li"),SZ=a("strong"),lze=o("roberta"),ize=o(" \u2014 "),gk=a("a"),dze=o("RobertaConfig"),cze=o(" (RoBERTa model)"),fze=l(),gg=a("li"),RZ=a("strong"),mze=o("roformer"),gze=o(" \u2014 "),hk=a("a"),hze=o("RoFormerConfig"),pze=o(" (RoFormer model)"),_ze=l(),hg=a("li"),BZ=a("strong"),uze=o("segformer"),bze=o(" \u2014 "),pk=a("a"),vze=o("SegformerConfig"),Fze=o(" (SegFormer model)"),Tze=l(),pg=a("li"),PZ=a("strong"),Mze=o("sew"),Eze=o(" \u2014 "),_k=a("a"),Cze=o("SEWConfig"),wze=o(" (SEW model)"),Aze=l(),_g=a("li"),$Z=a("strong"),yze=o("sew-d"),Lze=o(" \u2014 "),uk=a("a"),xze=o("SEWDConfig"),kze=o(" (SEW-D model)"),Sze=l(),ug=a("li"),IZ=a("strong"),Rze=o("speech-encoder-decoder"),Bze=o(" \u2014 "),bk=a("a"),Pze=o("SpeechEncoderDecoderConfig"),$ze=o(" (Speech Encoder decoder model)"),Ize=l(),bg=a("li"),qZ=a("strong"),qze=o("speech_to_text"),Nze=o(" \u2014 "),vk=a("a"),jze=o("Speech2TextConfig"),Dze=o(" (Speech2Text model)"),Gze=l(),vg=a("li"),NZ=a("strong"),Oze=o("speech_to_text_2"),Vze=o(" \u2014 "),Fk=a("a"),Xze=o("Speech2Text2Config"),zze=o(" (Speech2Text2 model)"),Qze=l(),Fg=a("li"),jZ=a("strong"),Wze=o("splinter"),Hze=o(" \u2014 "),Tk=a("a"),Uze=o("SplinterConfig"),Jze=o(" (Splinter model)"),Yze=l(),Tg=a("li"),DZ=a("strong"),Kze=o("squeezebert"),Zze=o(" \u2014 "),Mk=a("a"),eQe=o("SqueezeBertConfig"),oQe=o(" (SqueezeBERT model)"),rQe=l(),Mg=a("li"),GZ=a("strong"),tQe=o("swin"),aQe=o(" \u2014 "),Ek=a("a"),nQe=o("SwinConfig"),sQe=o(" (Swin model)"),lQe=l(),Eg=a("li"),OZ=a("strong"),iQe=o("t5"),dQe=o(" \u2014 "),Ck=a("a"),cQe=o("T5Config"),fQe=o(" (T5 model)"),mQe=l(),Cg=a("li"),VZ=a("strong"),gQe=o("tapas"),hQe=o(" \u2014 "),wk=a("a"),pQe=o("TapasConfig"),_Qe=o(" (TAPAS model)"),uQe=l(),wg=a("li"),XZ=a("strong"),bQe=o("tapex"),vQe=o(" \u2014 "),Ak=a("a"),FQe=o("BartConfig"),TQe=o(" (TAPEX model)"),MQe=l(),Ag=a("li"),zZ=a("strong"),EQe=o("transfo-xl"),CQe=o(" \u2014 "),yk=a("a"),wQe=o("TransfoXLConfig"),AQe=o(" (Transformer-XL model)"),yQe=l(),yg=a("li"),QZ=a("strong"),LQe=o("trocr"),xQe=o(" \u2014 "),Lk=a("a"),kQe=o("TrOCRConfig"),SQe=o(" (TrOCR model)"),RQe=l(),Lg=a("li"),WZ=a("strong"),BQe=o("unispeech"),PQe=o(" \u2014 "),xk=a("a"),$Qe=o("UniSpeechConfig"),IQe=o(" (UniSpeech model)"),qQe=l(),xg=a("li"),HZ=a("strong"),NQe=o("unispeech-sat"),jQe=o(" \u2014 "),kk=a("a"),DQe=o("UniSpeechSatConfig"),GQe=o(" (UniSpeechSat model)"),OQe=l(),kg=a("li"),UZ=a("strong"),VQe=o("van"),XQe=o(" \u2014 "),Sk=a("a"),zQe=o("VanConfig"),QQe=o(" (VAN model)"),WQe=l(),Sg=a("li"),JZ=a("strong"),HQe=o("vilt"),UQe=o(" \u2014 "),Rk=a("a"),JQe=o("ViltConfig"),YQe=o(" (ViLT model)"),KQe=l(),Rg=a("li"),YZ=a("strong"),ZQe=o("vision-encoder-decoder"),eWe=o(" \u2014 "),Bk=a("a"),oWe=o("VisionEncoderDecoderConfig"),rWe=o(" (Vision Encoder decoder model)"),tWe=l(),Bg=a("li"),KZ=a("strong"),aWe=o("vision-text-dual-encoder"),nWe=o(" \u2014 "),Pk=a("a"),sWe=o("VisionTextDualEncoderConfig"),lWe=o(" (VisionTextDualEncoder model)"),iWe=l(),Pg=a("li"),ZZ=a("strong"),dWe=o("visual_bert"),cWe=o(" \u2014 "),$k=a("a"),fWe=o("VisualBertConfig"),mWe=o(" (VisualBert model)"),gWe=l(),$g=a("li"),eee=a("strong"),hWe=o("vit"),pWe=o(" \u2014 "),Ik=a("a"),_We=o("ViTConfig"),uWe=o(" (ViT model)"),bWe=l(),Ig=a("li"),oee=a("strong"),vWe=o("vit_mae"),FWe=o(" \u2014 "),qk=a("a"),TWe=o("ViTMAEConfig"),MWe=o(" (ViTMAE model)"),EWe=l(),qg=a("li"),ree=a("strong"),CWe=o("wav2vec2"),wWe=o(" \u2014 "),Nk=a("a"),AWe=o("Wav2Vec2Config"),yWe=o(" (Wav2Vec2 model)"),LWe=l(),Ng=a("li"),tee=a("strong"),xWe=o("wavlm"),kWe=o(" \u2014 "),jk=a("a"),SWe=o("WavLMConfig"),RWe=o(" (WavLM model)"),BWe=l(),jg=a("li"),aee=a("strong"),PWe=o("xglm"),$We=o(" \u2014 "),Dk=a("a"),IWe=o("XGLMConfig"),qWe=o(" (XGLM model)"),NWe=l(),Dg=a("li"),nee=a("strong"),jWe=o("xlm"),DWe=o(" \u2014 "),Gk=a("a"),GWe=o("XLMConfig"),OWe=o(" (XLM model)"),VWe=l(),Gg=a("li"),see=a("strong"),XWe=o("xlm-prophetnet"),zWe=o(" \u2014 "),Ok=a("a"),QWe=o("XLMProphetNetConfig"),WWe=o(" (XLMProphetNet model)"),HWe=l(),Og=a("li"),lee=a("strong"),UWe=o("xlm-roberta"),JWe=o(" \u2014 "),Vk=a("a"),YWe=o("XLMRobertaConfig"),KWe=o(" (XLM-RoBERTa model)"),ZWe=l(),Vg=a("li"),iee=a("strong"),eHe=o("xlm-roberta-xl"),oHe=o(" \u2014 "),Xk=a("a"),rHe=o("XLMRobertaXLConfig"),tHe=o(" (XLM-RoBERTa-XL model)"),aHe=l(),Xg=a("li"),dee=a("strong"),nHe=o("xlnet"),sHe=o(" \u2014 "),zk=a("a"),lHe=o("XLNetConfig"),iHe=o(" (XLNet model)"),dHe=l(),zg=a("li"),cee=a("strong"),cHe=o("yoso"),fHe=o(" \u2014 "),Qk=a("a"),mHe=o("YosoConfig"),gHe=o(" (YOSO model)"),hHe=l(),fee=a("p"),pHe=o("Examples:"),_He=l(),f(t3.$$.fragment),uHe=l(),Qg=a("div"),f(a3.$$.fragment),bHe=l(),mee=a("p"),vHe=o("Register a new configuration for this class."),cPe=l(),od=a("h2"),Wg=a("a"),gee=a("span"),f(n3.$$.fragment),FHe=l(),hee=a("span"),THe=o("AutoTokenizer"),fPe=l(),Wo=a("div"),f(s3.$$.fragment),MHe=l(),l3=a("p"),EHe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Wk=a("a"),CHe=o("AutoTokenizer.from_pretrained()"),wHe=o(" class method."),AHe=l(),i3=a("p"),yHe=o("This class cannot be instantiated directly using "),pee=a("code"),LHe=o("__init__()"),xHe=o(" (throws an error)."),kHe=l(),ho=a("div"),f(d3.$$.fragment),SHe=l(),_ee=a("p"),RHe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),BHe=l(),Oa=a("p"),PHe=o("The tokenizer class to instantiate is selected based on the "),uee=a("code"),$He=o("model_type"),IHe=o(` property of the config object (either
passed as an argument or loaded from `),bee=a("code"),qHe=o("pretrained_model_name_or_path"),NHe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vee=a("code"),jHe=o("pretrained_model_name_or_path"),DHe=o(":"),GHe=l(),E=a("ul"),Wn=a("li"),Fee=a("strong"),OHe=o("albert"),VHe=o(" \u2014 "),Hk=a("a"),XHe=o("AlbertTokenizer"),zHe=o(" or "),Uk=a("a"),QHe=o("AlbertTokenizerFast"),WHe=o(" (ALBERT model)"),HHe=l(),Hn=a("li"),Tee=a("strong"),UHe=o("bart"),JHe=o(" \u2014 "),Jk=a("a"),YHe=o("BartTokenizer"),KHe=o(" or "),Yk=a("a"),ZHe=o("BartTokenizerFast"),eUe=o(" (BART model)"),oUe=l(),Un=a("li"),Mee=a("strong"),rUe=o("barthez"),tUe=o(" \u2014 "),Kk=a("a"),aUe=o("BarthezTokenizer"),nUe=o(" or "),Zk=a("a"),sUe=o("BarthezTokenizerFast"),lUe=o(" (BARThez model)"),iUe=l(),Hg=a("li"),Eee=a("strong"),dUe=o("bartpho"),cUe=o(" \u2014 "),eS=a("a"),fUe=o("BartphoTokenizer"),mUe=o(" (BARTpho model)"),gUe=l(),Jn=a("li"),Cee=a("strong"),hUe=o("bert"),pUe=o(" \u2014 "),oS=a("a"),_Ue=o("BertTokenizer"),uUe=o(" or "),rS=a("a"),bUe=o("BertTokenizerFast"),vUe=o(" (BERT model)"),FUe=l(),Ug=a("li"),wee=a("strong"),TUe=o("bert-generation"),MUe=o(" \u2014 "),tS=a("a"),EUe=o("BertGenerationTokenizer"),CUe=o(" (Bert Generation model)"),wUe=l(),Jg=a("li"),Aee=a("strong"),AUe=o("bert-japanese"),yUe=o(" \u2014 "),aS=a("a"),LUe=o("BertJapaneseTokenizer"),xUe=o(" (BertJapanese model)"),kUe=l(),Yg=a("li"),yee=a("strong"),SUe=o("bertweet"),RUe=o(" \u2014 "),nS=a("a"),BUe=o("BertweetTokenizer"),PUe=o(" (Bertweet model)"),$Ue=l(),Yn=a("li"),Lee=a("strong"),IUe=o("big_bird"),qUe=o(" \u2014 "),sS=a("a"),NUe=o("BigBirdTokenizer"),jUe=o(" or "),lS=a("a"),DUe=o("BigBirdTokenizerFast"),GUe=o(" (BigBird model)"),OUe=l(),Kn=a("li"),xee=a("strong"),VUe=o("bigbird_pegasus"),XUe=o(" \u2014 "),iS=a("a"),zUe=o("PegasusTokenizer"),QUe=o(" or "),dS=a("a"),WUe=o("PegasusTokenizerFast"),HUe=o(" (BigBirdPegasus model)"),UUe=l(),Zn=a("li"),kee=a("strong"),JUe=o("blenderbot"),YUe=o(" \u2014 "),cS=a("a"),KUe=o("BlenderbotTokenizer"),ZUe=o(" or "),fS=a("a"),eJe=o("BlenderbotTokenizerFast"),oJe=o(" (Blenderbot model)"),rJe=l(),Kg=a("li"),See=a("strong"),tJe=o("blenderbot-small"),aJe=o(" \u2014 "),mS=a("a"),nJe=o("BlenderbotSmallTokenizer"),sJe=o(" (BlenderbotSmall model)"),lJe=l(),Zg=a("li"),Ree=a("strong"),iJe=o("byt5"),dJe=o(" \u2014 "),gS=a("a"),cJe=o("ByT5Tokenizer"),fJe=o(" (ByT5 model)"),mJe=l(),es=a("li"),Bee=a("strong"),gJe=o("camembert"),hJe=o(" \u2014 "),hS=a("a"),pJe=o("CamembertTokenizer"),_Je=o(" or "),pS=a("a"),uJe=o("CamembertTokenizerFast"),bJe=o(" (CamemBERT model)"),vJe=l(),eh=a("li"),Pee=a("strong"),FJe=o("canine"),TJe=o(" \u2014 "),_S=a("a"),MJe=o("CanineTokenizer"),EJe=o(" (Canine model)"),CJe=l(),os=a("li"),$ee=a("strong"),wJe=o("clip"),AJe=o(" \u2014 "),uS=a("a"),yJe=o("CLIPTokenizer"),LJe=o(" or "),bS=a("a"),xJe=o("CLIPTokenizerFast"),kJe=o(" (CLIP model)"),SJe=l(),rs=a("li"),Iee=a("strong"),RJe=o("convbert"),BJe=o(" \u2014 "),vS=a("a"),PJe=o("ConvBertTokenizer"),$Je=o(" or "),FS=a("a"),IJe=o("ConvBertTokenizerFast"),qJe=o(" (ConvBERT model)"),NJe=l(),ts=a("li"),qee=a("strong"),jJe=o("cpm"),DJe=o(" \u2014 "),TS=a("a"),GJe=o("CpmTokenizer"),OJe=o(" or "),Nee=a("code"),VJe=o("CpmTokenizerFast"),XJe=o(" (CPM model)"),zJe=l(),oh=a("li"),jee=a("strong"),QJe=o("ctrl"),WJe=o(" \u2014 "),MS=a("a"),HJe=o("CTRLTokenizer"),UJe=o(" (CTRL model)"),JJe=l(),as=a("li"),Dee=a("strong"),YJe=o("data2vec-text"),KJe=o(" \u2014 "),ES=a("a"),ZJe=o("RobertaTokenizer"),eYe=o(" or "),CS=a("a"),oYe=o("RobertaTokenizerFast"),rYe=o(" (Data2VecText model)"),tYe=l(),ns=a("li"),Gee=a("strong"),aYe=o("deberta"),nYe=o(" \u2014 "),wS=a("a"),sYe=o("DebertaTokenizer"),lYe=o(" or "),AS=a("a"),iYe=o("DebertaTokenizerFast"),dYe=o(" (DeBERTa model)"),cYe=l(),ss=a("li"),Oee=a("strong"),fYe=o("deberta-v2"),mYe=o(" \u2014 "),yS=a("a"),gYe=o("DebertaV2Tokenizer"),hYe=o(" or "),LS=a("a"),pYe=o("DebertaV2TokenizerFast"),_Ye=o(" (DeBERTa-v2 model)"),uYe=l(),ls=a("li"),Vee=a("strong"),bYe=o("distilbert"),vYe=o(" \u2014 "),xS=a("a"),FYe=o("DistilBertTokenizer"),TYe=o(" or "),kS=a("a"),MYe=o("DistilBertTokenizerFast"),EYe=o(" (DistilBERT model)"),CYe=l(),is=a("li"),Xee=a("strong"),wYe=o("dpr"),AYe=o(" \u2014 "),SS=a("a"),yYe=o("DPRQuestionEncoderTokenizer"),LYe=o(" or "),RS=a("a"),xYe=o("DPRQuestionEncoderTokenizerFast"),kYe=o(" (DPR model)"),SYe=l(),ds=a("li"),zee=a("strong"),RYe=o("electra"),BYe=o(" \u2014 "),BS=a("a"),PYe=o("ElectraTokenizer"),$Ye=o(" or "),PS=a("a"),IYe=o("ElectraTokenizerFast"),qYe=o(" (ELECTRA model)"),NYe=l(),rh=a("li"),Qee=a("strong"),jYe=o("flaubert"),DYe=o(" \u2014 "),$S=a("a"),GYe=o("FlaubertTokenizer"),OYe=o(" (FlauBERT model)"),VYe=l(),cs=a("li"),Wee=a("strong"),XYe=o("fnet"),zYe=o(" \u2014 "),IS=a("a"),QYe=o("FNetTokenizer"),WYe=o(" or "),qS=a("a"),HYe=o("FNetTokenizerFast"),UYe=o(" (FNet model)"),JYe=l(),th=a("li"),Hee=a("strong"),YYe=o("fsmt"),KYe=o(" \u2014 "),NS=a("a"),ZYe=o("FSMTTokenizer"),eKe=o(" (FairSeq Machine-Translation model)"),oKe=l(),fs=a("li"),Uee=a("strong"),rKe=o("funnel"),tKe=o(" \u2014 "),jS=a("a"),aKe=o("FunnelTokenizer"),nKe=o(" or "),DS=a("a"),sKe=o("FunnelTokenizerFast"),lKe=o(" (Funnel Transformer model)"),iKe=l(),ms=a("li"),Jee=a("strong"),dKe=o("gpt2"),cKe=o(" \u2014 "),GS=a("a"),fKe=o("GPT2Tokenizer"),mKe=o(" or "),OS=a("a"),gKe=o("GPT2TokenizerFast"),hKe=o(" (OpenAI GPT-2 model)"),pKe=l(),gs=a("li"),Yee=a("strong"),_Ke=o("gpt_neo"),uKe=o(" \u2014 "),VS=a("a"),bKe=o("GPT2Tokenizer"),vKe=o(" or "),XS=a("a"),FKe=o("GPT2TokenizerFast"),TKe=o(" (GPT Neo model)"),MKe=l(),hs=a("li"),Kee=a("strong"),EKe=o("gptj"),CKe=o(" \u2014 "),zS=a("a"),wKe=o("GPT2Tokenizer"),AKe=o(" or "),QS=a("a"),yKe=o("GPT2TokenizerFast"),LKe=o(" (GPT-J model)"),xKe=l(),ps=a("li"),Zee=a("strong"),kKe=o("herbert"),SKe=o(" \u2014 "),WS=a("a"),RKe=o("HerbertTokenizer"),BKe=o(" or "),HS=a("a"),PKe=o("HerbertTokenizerFast"),$Ke=o(" (HerBERT model)"),IKe=l(),ah=a("li"),eoe=a("strong"),qKe=o("hubert"),NKe=o(" \u2014 "),US=a("a"),jKe=o("Wav2Vec2CTCTokenizer"),DKe=o(" (Hubert model)"),GKe=l(),_s=a("li"),ooe=a("strong"),OKe=o("ibert"),VKe=o(" \u2014 "),JS=a("a"),XKe=o("RobertaTokenizer"),zKe=o(" or "),YS=a("a"),QKe=o("RobertaTokenizerFast"),WKe=o(" (I-BERT model)"),HKe=l(),us=a("li"),roe=a("strong"),UKe=o("layoutlm"),JKe=o(" \u2014 "),KS=a("a"),YKe=o("LayoutLMTokenizer"),KKe=o(" or "),ZS=a("a"),ZKe=o("LayoutLMTokenizerFast"),eZe=o(" (LayoutLM model)"),oZe=l(),bs=a("li"),toe=a("strong"),rZe=o("layoutlmv2"),tZe=o(" \u2014 "),eR=a("a"),aZe=o("LayoutLMv2Tokenizer"),nZe=o(" or "),oR=a("a"),sZe=o("LayoutLMv2TokenizerFast"),lZe=o(" (LayoutLMv2 model)"),iZe=l(),vs=a("li"),aoe=a("strong"),dZe=o("layoutxlm"),cZe=o(" \u2014 "),rR=a("a"),fZe=o("LayoutXLMTokenizer"),mZe=o(" or "),tR=a("a"),gZe=o("LayoutXLMTokenizerFast"),hZe=o(" (LayoutXLM model)"),pZe=l(),Fs=a("li"),noe=a("strong"),_Ze=o("led"),uZe=o(" \u2014 "),aR=a("a"),bZe=o("LEDTokenizer"),vZe=o(" or "),nR=a("a"),FZe=o("LEDTokenizerFast"),TZe=o(" (LED model)"),MZe=l(),Ts=a("li"),soe=a("strong"),EZe=o("longformer"),CZe=o(" \u2014 "),sR=a("a"),wZe=o("LongformerTokenizer"),AZe=o(" or "),lR=a("a"),yZe=o("LongformerTokenizerFast"),LZe=o(" (Longformer model)"),xZe=l(),nh=a("li"),loe=a("strong"),kZe=o("luke"),SZe=o(" \u2014 "),iR=a("a"),RZe=o("LukeTokenizer"),BZe=o(" (LUKE model)"),PZe=l(),Ms=a("li"),ioe=a("strong"),$Ze=o("lxmert"),IZe=o(" \u2014 "),dR=a("a"),qZe=o("LxmertTokenizer"),NZe=o(" or "),cR=a("a"),jZe=o("LxmertTokenizerFast"),DZe=o(" (LXMERT model)"),GZe=l(),sh=a("li"),doe=a("strong"),OZe=o("m2m_100"),VZe=o(" \u2014 "),fR=a("a"),XZe=o("M2M100Tokenizer"),zZe=o(" (M2M100 model)"),QZe=l(),lh=a("li"),coe=a("strong"),WZe=o("marian"),HZe=o(" \u2014 "),mR=a("a"),UZe=o("MarianTokenizer"),JZe=o(" (Marian model)"),YZe=l(),Es=a("li"),foe=a("strong"),KZe=o("mbart"),ZZe=o(" \u2014 "),gR=a("a"),eeo=o("MBartTokenizer"),oeo=o(" or "),hR=a("a"),reo=o("MBartTokenizerFast"),teo=o(" (mBART model)"),aeo=l(),Cs=a("li"),moe=a("strong"),neo=o("mbart50"),seo=o(" \u2014 "),pR=a("a"),leo=o("MBart50Tokenizer"),ieo=o(" or "),_R=a("a"),deo=o("MBart50TokenizerFast"),ceo=o(" (mBART-50 model)"),feo=l(),ws=a("li"),goe=a("strong"),meo=o("megatron-bert"),geo=o(" \u2014 "),uR=a("a"),heo=o("BertTokenizer"),peo=o(" or "),bR=a("a"),_eo=o("BertTokenizerFast"),ueo=o(" (MegatronBert model)"),beo=l(),ih=a("li"),hoe=a("strong"),veo=o("mluke"),Feo=o(" \u2014 "),vR=a("a"),Teo=o("MLukeTokenizer"),Meo=o(" (mLUKE model)"),Eeo=l(),As=a("li"),poe=a("strong"),Ceo=o("mobilebert"),weo=o(" \u2014 "),FR=a("a"),Aeo=o("MobileBertTokenizer"),yeo=o(" or "),TR=a("a"),Leo=o("MobileBertTokenizerFast"),xeo=o(" (MobileBERT model)"),keo=l(),ys=a("li"),_oe=a("strong"),Seo=o("mpnet"),Reo=o(" \u2014 "),MR=a("a"),Beo=o("MPNetTokenizer"),Peo=o(" or "),ER=a("a"),$eo=o("MPNetTokenizerFast"),Ieo=o(" (MPNet model)"),qeo=l(),Ls=a("li"),uoe=a("strong"),Neo=o("mt5"),jeo=o(" \u2014 "),CR=a("a"),Deo=o("MT5Tokenizer"),Geo=o(" or "),wR=a("a"),Oeo=o("MT5TokenizerFast"),Veo=o(" (mT5 model)"),Xeo=l(),xs=a("li"),boe=a("strong"),zeo=o("nystromformer"),Qeo=o(" \u2014 "),AR=a("a"),Weo=o("AlbertTokenizer"),Heo=o(" or "),yR=a("a"),Ueo=o("AlbertTokenizerFast"),Jeo=o(" (Nystromformer model)"),Yeo=l(),ks=a("li"),voe=a("strong"),Keo=o("openai-gpt"),Zeo=o(" \u2014 "),LR=a("a"),eoo=o("OpenAIGPTTokenizer"),ooo=o(" or "),xR=a("a"),roo=o("OpenAIGPTTokenizerFast"),too=o(" (OpenAI GPT model)"),aoo=l(),Ss=a("li"),Foe=a("strong"),noo=o("pegasus"),soo=o(" \u2014 "),kR=a("a"),loo=o("PegasusTokenizer"),ioo=o(" or "),SR=a("a"),doo=o("PegasusTokenizerFast"),coo=o(" (Pegasus model)"),foo=l(),dh=a("li"),Toe=a("strong"),moo=o("perceiver"),goo=o(" \u2014 "),RR=a("a"),hoo=o("PerceiverTokenizer"),poo=o(" (Perceiver model)"),_oo=l(),ch=a("li"),Moe=a("strong"),uoo=o("phobert"),boo=o(" \u2014 "),BR=a("a"),voo=o("PhobertTokenizer"),Foo=o(" (PhoBERT model)"),Too=l(),fh=a("li"),Eoe=a("strong"),Moo=o("plbart"),Eoo=o(" \u2014 "),PR=a("a"),Coo=o("PLBartTokenizer"),woo=o(" (PLBart model)"),Aoo=l(),mh=a("li"),Coe=a("strong"),yoo=o("prophetnet"),Loo=o(" \u2014 "),$R=a("a"),xoo=o("ProphetNetTokenizer"),koo=o(" (ProphetNet model)"),Soo=l(),Rs=a("li"),woe=a("strong"),Roo=o("qdqbert"),Boo=o(" \u2014 "),IR=a("a"),Poo=o("BertTokenizer"),$oo=o(" or "),qR=a("a"),Ioo=o("BertTokenizerFast"),qoo=o(" (QDQBert model)"),Noo=l(),gh=a("li"),Aoe=a("strong"),joo=o("rag"),Doo=o(" \u2014 "),NR=a("a"),Goo=o("RagTokenizer"),Ooo=o(" (RAG model)"),Voo=l(),Bs=a("li"),yoe=a("strong"),Xoo=o("realm"),zoo=o(" \u2014 "),jR=a("a"),Qoo=o("RealmTokenizer"),Woo=o(" or "),DR=a("a"),Hoo=o("RealmTokenizerFast"),Uoo=o(" (Realm model)"),Joo=l(),Ps=a("li"),Loe=a("strong"),Yoo=o("reformer"),Koo=o(" \u2014 "),GR=a("a"),Zoo=o("ReformerTokenizer"),ero=o(" or "),OR=a("a"),oro=o("ReformerTokenizerFast"),rro=o(" (Reformer model)"),tro=l(),$s=a("li"),xoe=a("strong"),aro=o("rembert"),nro=o(" \u2014 "),VR=a("a"),sro=o("RemBertTokenizer"),lro=o(" or "),XR=a("a"),iro=o("RemBertTokenizerFast"),dro=o(" (RemBERT model)"),cro=l(),Is=a("li"),koe=a("strong"),fro=o("retribert"),mro=o(" \u2014 "),zR=a("a"),gro=o("RetriBertTokenizer"),hro=o(" or "),QR=a("a"),pro=o("RetriBertTokenizerFast"),_ro=o(" (RetriBERT model)"),uro=l(),qs=a("li"),Soe=a("strong"),bro=o("roberta"),vro=o(" \u2014 "),WR=a("a"),Fro=o("RobertaTokenizer"),Tro=o(" or "),HR=a("a"),Mro=o("RobertaTokenizerFast"),Ero=o(" (RoBERTa model)"),Cro=l(),Ns=a("li"),Roe=a("strong"),wro=o("roformer"),Aro=o(" \u2014 "),UR=a("a"),yro=o("RoFormerTokenizer"),Lro=o(" or "),JR=a("a"),xro=o("RoFormerTokenizerFast"),kro=o(" (RoFormer model)"),Sro=l(),hh=a("li"),Boe=a("strong"),Rro=o("speech_to_text"),Bro=o(" \u2014 "),YR=a("a"),Pro=o("Speech2TextTokenizer"),$ro=o(" (Speech2Text model)"),Iro=l(),ph=a("li"),Poe=a("strong"),qro=o("speech_to_text_2"),Nro=o(" \u2014 "),KR=a("a"),jro=o("Speech2Text2Tokenizer"),Dro=o(" (Speech2Text2 model)"),Gro=l(),js=a("li"),$oe=a("strong"),Oro=o("splinter"),Vro=o(" \u2014 "),ZR=a("a"),Xro=o("SplinterTokenizer"),zro=o(" or "),eB=a("a"),Qro=o("SplinterTokenizerFast"),Wro=o(" (Splinter model)"),Hro=l(),Ds=a("li"),Ioe=a("strong"),Uro=o("squeezebert"),Jro=o(" \u2014 "),oB=a("a"),Yro=o("SqueezeBertTokenizer"),Kro=o(" or "),rB=a("a"),Zro=o("SqueezeBertTokenizerFast"),eto=o(" (SqueezeBERT model)"),oto=l(),Gs=a("li"),qoe=a("strong"),rto=o("t5"),tto=o(" \u2014 "),tB=a("a"),ato=o("T5Tokenizer"),nto=o(" or "),aB=a("a"),sto=o("T5TokenizerFast"),lto=o(" (T5 model)"),ito=l(),_h=a("li"),Noe=a("strong"),dto=o("tapas"),cto=o(" \u2014 "),nB=a("a"),fto=o("TapasTokenizer"),mto=o(" (TAPAS model)"),gto=l(),uh=a("li"),joe=a("strong"),hto=o("tapex"),pto=o(" \u2014 "),sB=a("a"),_to=o("TapexTokenizer"),uto=o(" (TAPEX model)"),bto=l(),bh=a("li"),Doe=a("strong"),vto=o("transfo-xl"),Fto=o(" \u2014 "),lB=a("a"),Tto=o("TransfoXLTokenizer"),Mto=o(" (Transformer-XL model)"),Eto=l(),Os=a("li"),Goe=a("strong"),Cto=o("visual_bert"),wto=o(" \u2014 "),iB=a("a"),Ato=o("BertTokenizer"),yto=o(" or "),dB=a("a"),Lto=o("BertTokenizerFast"),xto=o(" (VisualBert model)"),kto=l(),vh=a("li"),Ooe=a("strong"),Sto=o("wav2vec2"),Rto=o(" \u2014 "),cB=a("a"),Bto=o("Wav2Vec2CTCTokenizer"),Pto=o(" (Wav2Vec2 model)"),$to=l(),Fh=a("li"),Voe=a("strong"),Ito=o("wav2vec2_phoneme"),qto=o(" \u2014 "),fB=a("a"),Nto=o("Wav2Vec2PhonemeCTCTokenizer"),jto=o(" (Wav2Vec2Phoneme model)"),Dto=l(),Vs=a("li"),Xoe=a("strong"),Gto=o("xglm"),Oto=o(" \u2014 "),mB=a("a"),Vto=o("XGLMTokenizer"),Xto=o(" or "),gB=a("a"),zto=o("XGLMTokenizerFast"),Qto=o(" (XGLM model)"),Wto=l(),Th=a("li"),zoe=a("strong"),Hto=o("xlm"),Uto=o(" \u2014 "),hB=a("a"),Jto=o("XLMTokenizer"),Yto=o(" (XLM model)"),Kto=l(),Mh=a("li"),Qoe=a("strong"),Zto=o("xlm-prophetnet"),eao=o(" \u2014 "),pB=a("a"),oao=o("XLMProphetNetTokenizer"),rao=o(" (XLMProphetNet model)"),tao=l(),Xs=a("li"),Woe=a("strong"),aao=o("xlm-roberta"),nao=o(" \u2014 "),_B=a("a"),sao=o("XLMRobertaTokenizer"),lao=o(" or "),uB=a("a"),iao=o("XLMRobertaTokenizerFast"),dao=o(" (XLM-RoBERTa model)"),cao=l(),zs=a("li"),Hoe=a("strong"),fao=o("xlm-roberta-xl"),mao=o(" \u2014 "),bB=a("a"),gao=o("RobertaTokenizer"),hao=o(" or "),vB=a("a"),pao=o("RobertaTokenizerFast"),_ao=o(" (XLM-RoBERTa-XL model)"),uao=l(),Qs=a("li"),Uoe=a("strong"),bao=o("xlnet"),vao=o(" \u2014 "),FB=a("a"),Fao=o("XLNetTokenizer"),Tao=o(" or "),TB=a("a"),Mao=o("XLNetTokenizerFast"),Eao=o(" (XLNet model)"),Cao=l(),Ws=a("li"),Joe=a("strong"),wao=o("yoso"),Aao=o(" \u2014 "),MB=a("a"),yao=o("AlbertTokenizer"),Lao=o(" or "),EB=a("a"),xao=o("AlbertTokenizerFast"),kao=o(" (YOSO model)"),Sao=l(),Yoe=a("p"),Rao=o("Examples:"),Bao=l(),f(c3.$$.fragment),Pao=l(),Eh=a("div"),f(f3.$$.fragment),$ao=l(),Koe=a("p"),Iao=o("Register a new tokenizer in this mapping."),mPe=l(),rd=a("h2"),Ch=a("a"),Zoe=a("span"),f(m3.$$.fragment),qao=l(),ere=a("span"),Nao=o("AutoFeatureExtractor"),gPe=l(),Ho=a("div"),f(g3.$$.fragment),jao=l(),h3=a("p"),Dao=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CB=a("a"),Gao=o("AutoFeatureExtractor.from_pretrained()"),Oao=o(" class method."),Vao=l(),p3=a("p"),Xao=o("This class cannot be instantiated directly using "),ore=a("code"),zao=o("__init__()"),Qao=o(" (throws an error)."),Wao=l(),Ie=a("div"),f(_3.$$.fragment),Hao=l(),rre=a("p"),Uao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Jao=l(),Va=a("p"),Yao=o("The feature extractor class to instantiate is selected based on the "),tre=a("code"),Kao=o("model_type"),Zao=o(` property of the config object
(either passed as an argument or loaded from `),are=a("code"),eno=o("pretrained_model_name_or_path"),ono=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nre=a("code"),rno=o("pretrained_model_name_or_path"),tno=o(":"),ano=l(),W=a("ul"),wh=a("li"),sre=a("strong"),nno=o("beit"),sno=o(" \u2014 "),wB=a("a"),lno=o("BeitFeatureExtractor"),ino=o(" (BEiT model)"),dno=l(),Ah=a("li"),lre=a("strong"),cno=o("clip"),fno=o(" \u2014 "),AB=a("a"),mno=o("CLIPFeatureExtractor"),gno=o(" (CLIP model)"),hno=l(),yh=a("li"),ire=a("strong"),pno=o("convnext"),_no=o(" \u2014 "),yB=a("a"),uno=o("ConvNextFeatureExtractor"),bno=o(" (ConvNext model)"),vno=l(),Lh=a("li"),dre=a("strong"),Fno=o("data2vec-audio"),Tno=o(" \u2014 "),LB=a("a"),Mno=o("Wav2Vec2FeatureExtractor"),Eno=o(" (Data2VecAudio model)"),Cno=l(),xh=a("li"),cre=a("strong"),wno=o("data2vec-vision"),Ano=o(" \u2014 "),xB=a("a"),yno=o("BeitFeatureExtractor"),Lno=o(" (Data2VecVision model)"),xno=l(),kh=a("li"),fre=a("strong"),kno=o("deit"),Sno=o(" \u2014 "),kB=a("a"),Rno=o("DeiTFeatureExtractor"),Bno=o(" (DeiT model)"),Pno=l(),Sh=a("li"),mre=a("strong"),$no=o("detr"),Ino=o(" \u2014 "),SB=a("a"),qno=o("DetrFeatureExtractor"),Nno=o(" (DETR model)"),jno=l(),Rh=a("li"),gre=a("strong"),Dno=o("dpt"),Gno=o(" \u2014 "),RB=a("a"),Ono=o("DPTFeatureExtractor"),Vno=o(" (DPT model)"),Xno=l(),Bh=a("li"),hre=a("strong"),zno=o("glpn"),Qno=o(" \u2014 "),BB=a("a"),Wno=o("GLPNFeatureExtractor"),Hno=o(" (GLPN model)"),Uno=l(),Ph=a("li"),pre=a("strong"),Jno=o("hubert"),Yno=o(" \u2014 "),PB=a("a"),Kno=o("Wav2Vec2FeatureExtractor"),Zno=o(" (Hubert model)"),eso=l(),$h=a("li"),_re=a("strong"),oso=o("imagegpt"),rso=o(" \u2014 "),$B=a("a"),tso=o("ImageGPTFeatureExtractor"),aso=o(" (ImageGPT model)"),nso=l(),Ih=a("li"),ure=a("strong"),sso=o("layoutlmv2"),lso=o(" \u2014 "),IB=a("a"),iso=o("LayoutLMv2FeatureExtractor"),dso=o(" (LayoutLMv2 model)"),cso=l(),qh=a("li"),bre=a("strong"),fso=o("maskformer"),mso=o(" \u2014 "),qB=a("a"),gso=o("MaskFormerFeatureExtractor"),hso=o(" (MaskFormer model)"),pso=l(),Nh=a("li"),vre=a("strong"),_so=o("perceiver"),uso=o(" \u2014 "),NB=a("a"),bso=o("PerceiverFeatureExtractor"),vso=o(" (Perceiver model)"),Fso=l(),jh=a("li"),Fre=a("strong"),Tso=o("poolformer"),Mso=o(" \u2014 "),jB=a("a"),Eso=o("PoolFormerFeatureExtractor"),Cso=o(" (PoolFormer model)"),wso=l(),Dh=a("li"),Tre=a("strong"),Aso=o("regnet"),yso=o(" \u2014 "),DB=a("a"),Lso=o("ConvNextFeatureExtractor"),xso=o(" (RegNet model)"),kso=l(),Gh=a("li"),Mre=a("strong"),Sso=o("resnet"),Rso=o(" \u2014 "),GB=a("a"),Bso=o("ConvNextFeatureExtractor"),Pso=o(" (ResNet model)"),$so=l(),Oh=a("li"),Ere=a("strong"),Iso=o("segformer"),qso=o(" \u2014 "),OB=a("a"),Nso=o("SegformerFeatureExtractor"),jso=o(" (SegFormer model)"),Dso=l(),Vh=a("li"),Cre=a("strong"),Gso=o("speech_to_text"),Oso=o(" \u2014 "),VB=a("a"),Vso=o("Speech2TextFeatureExtractor"),Xso=o(" (Speech2Text model)"),zso=l(),Xh=a("li"),wre=a("strong"),Qso=o("swin"),Wso=o(" \u2014 "),XB=a("a"),Hso=o("ViTFeatureExtractor"),Uso=o(" (Swin model)"),Jso=l(),zh=a("li"),Are=a("strong"),Yso=o("van"),Kso=o(" \u2014 "),zB=a("a"),Zso=o("ConvNextFeatureExtractor"),elo=o(" (VAN model)"),olo=l(),Qh=a("li"),yre=a("strong"),rlo=o("vit"),tlo=o(" \u2014 "),QB=a("a"),alo=o("ViTFeatureExtractor"),nlo=o(" (ViT model)"),slo=l(),Wh=a("li"),Lre=a("strong"),llo=o("vit_mae"),ilo=o(" \u2014 "),WB=a("a"),dlo=o("ViTFeatureExtractor"),clo=o(" (ViTMAE model)"),flo=l(),Hh=a("li"),xre=a("strong"),mlo=o("wav2vec2"),glo=o(" \u2014 "),HB=a("a"),hlo=o("Wav2Vec2FeatureExtractor"),plo=o(" (Wav2Vec2 model)"),_lo=l(),f(Uh.$$.fragment),ulo=l(),kre=a("p"),blo=o("Examples:"),vlo=l(),f(u3.$$.fragment),Flo=l(),Jh=a("div"),f(b3.$$.fragment),Tlo=l(),Sre=a("p"),Mlo=o("Register a new feature extractor for this class."),hPe=l(),td=a("h2"),Yh=a("a"),Rre=a("span"),f(v3.$$.fragment),Elo=l(),Bre=a("span"),Clo=o("AutoProcessor"),pPe=l(),Uo=a("div"),f(F3.$$.fragment),wlo=l(),T3=a("p"),Alo=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UB=a("a"),ylo=o("AutoProcessor.from_pretrained()"),Llo=o(" class method."),xlo=l(),M3=a("p"),klo=o("This class cannot be instantiated directly using "),Pre=a("code"),Slo=o("__init__()"),Rlo=o(" (throws an error)."),Blo=l(),qe=a("div"),f(E3.$$.fragment),Plo=l(),$re=a("p"),$lo=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Ilo=l(),ad=a("p"),qlo=o("The processor class to instantiate is selected based on the "),Ire=a("code"),Nlo=o("model_type"),jlo=o(` property of the config object (either
passed as an argument or loaded from `),qre=a("code"),Dlo=o("pretrained_model_name_or_path"),Glo=o(" if possible):"),Olo=l(),de=a("ul"),Kh=a("li"),Nre=a("strong"),Vlo=o("clip"),Xlo=o(" \u2014 "),JB=a("a"),zlo=o("CLIPProcessor"),Qlo=o(" (CLIP model)"),Wlo=l(),Zh=a("li"),jre=a("strong"),Hlo=o("layoutlmv2"),Ulo=o(" \u2014 "),YB=a("a"),Jlo=o("LayoutLMv2Processor"),Ylo=o(" (LayoutLMv2 model)"),Klo=l(),ep=a("li"),Dre=a("strong"),Zlo=o("layoutxlm"),eio=o(" \u2014 "),KB=a("a"),oio=o("LayoutXLMProcessor"),rio=o(" (LayoutXLM model)"),tio=l(),op=a("li"),Gre=a("strong"),aio=o("sew"),nio=o(" \u2014 "),ZB=a("a"),sio=o("Wav2Vec2Processor"),lio=o(" (SEW model)"),iio=l(),rp=a("li"),Ore=a("strong"),dio=o("sew-d"),cio=o(" \u2014 "),eP=a("a"),fio=o("Wav2Vec2Processor"),mio=o(" (SEW-D model)"),gio=l(),tp=a("li"),Vre=a("strong"),hio=o("speech_to_text"),pio=o(" \u2014 "),oP=a("a"),_io=o("Speech2TextProcessor"),uio=o(" (Speech2Text model)"),bio=l(),ap=a("li"),Xre=a("strong"),vio=o("speech_to_text_2"),Fio=o(" \u2014 "),rP=a("a"),Tio=o("Speech2Text2Processor"),Mio=o(" (Speech2Text2 model)"),Eio=l(),np=a("li"),zre=a("strong"),Cio=o("trocr"),wio=o(" \u2014 "),tP=a("a"),Aio=o("TrOCRProcessor"),yio=o(" (TrOCR model)"),Lio=l(),sp=a("li"),Qre=a("strong"),xio=o("unispeech"),kio=o(" \u2014 "),aP=a("a"),Sio=o("Wav2Vec2Processor"),Rio=o(" (UniSpeech model)"),Bio=l(),lp=a("li"),Wre=a("strong"),Pio=o("unispeech-sat"),$io=o(" \u2014 "),nP=a("a"),Iio=o("Wav2Vec2Processor"),qio=o(" (UniSpeechSat model)"),Nio=l(),ip=a("li"),Hre=a("strong"),jio=o("vilt"),Dio=o(" \u2014 "),sP=a("a"),Gio=o("ViltProcessor"),Oio=o(" (ViLT model)"),Vio=l(),dp=a("li"),Ure=a("strong"),Xio=o("vision-text-dual-encoder"),zio=o(" \u2014 "),lP=a("a"),Qio=o("VisionTextDualEncoderProcessor"),Wio=o(" (VisionTextDualEncoder model)"),Hio=l(),cp=a("li"),Jre=a("strong"),Uio=o("wav2vec2"),Jio=o(" \u2014 "),iP=a("a"),Yio=o("Wav2Vec2Processor"),Kio=o(" (Wav2Vec2 model)"),Zio=l(),fp=a("li"),Yre=a("strong"),edo=o("wavlm"),odo=o(" \u2014 "),dP=a("a"),rdo=o("Wav2Vec2Processor"),tdo=o(" (WavLM model)"),ado=l(),f(mp.$$.fragment),ndo=l(),Kre=a("p"),sdo=o("Examples:"),ldo=l(),f(C3.$$.fragment),ido=l(),gp=a("div"),f(w3.$$.fragment),ddo=l(),Zre=a("p"),cdo=o("Register a new processor for this class."),_Pe=l(),nd=a("h2"),hp=a("a"),ete=a("span"),f(A3.$$.fragment),fdo=l(),ote=a("span"),mdo=o("AutoModel"),uPe=l(),Jo=a("div"),f(y3.$$.fragment),gdo=l(),sd=a("p"),hdo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cP=a("a"),pdo=o("from_pretrained()"),_do=o(" class method or the "),fP=a("a"),udo=o("from_config()"),bdo=o(` class
method.`),vdo=l(),L3=a("p"),Fdo=o("This class cannot be instantiated directly using "),rte=a("code"),Tdo=o("__init__()"),Mdo=o(" (throws an error)."),Edo=l(),Xr=a("div"),f(x3.$$.fragment),Cdo=l(),tte=a("p"),wdo=o("Instantiates one of the base model classes of the library from a configuration."),Ado=l(),ld=a("p"),ydo=o(`Note:
Loading a model from its configuration file does `),ate=a("strong"),Ldo=o("not"),xdo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mP=a("a"),kdo=o("from_pretrained()"),Sdo=o(" to load the model weights."),Rdo=l(),nte=a("p"),Bdo=o("Examples:"),Pdo=l(),f(k3.$$.fragment),$do=l(),Ne=a("div"),f(S3.$$.fragment),Ido=l(),ste=a("p"),qdo=o("Instantiate one of the base model classes of the library from a pretrained model."),Ndo=l(),Xa=a("p"),jdo=o("The model class to instantiate is selected based on the "),lte=a("code"),Ddo=o("model_type"),Gdo=o(` property of the config object (either
passed as an argument or loaded from `),ite=a("code"),Odo=o("pretrained_model_name_or_path"),Vdo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dte=a("code"),Xdo=o("pretrained_model_name_or_path"),zdo=o(":"),Qdo=l(),T=a("ul"),pp=a("li"),cte=a("strong"),Wdo=o("albert"),Hdo=o(" \u2014 "),gP=a("a"),Udo=o("AlbertModel"),Jdo=o(" (ALBERT model)"),Ydo=l(),_p=a("li"),fte=a("strong"),Kdo=o("bart"),Zdo=o(" \u2014 "),hP=a("a"),eco=o("BartModel"),oco=o(" (BART model)"),rco=l(),up=a("li"),mte=a("strong"),tco=o("beit"),aco=o(" \u2014 "),pP=a("a"),nco=o("BeitModel"),sco=o(" (BEiT model)"),lco=l(),bp=a("li"),gte=a("strong"),ico=o("bert"),dco=o(" \u2014 "),_P=a("a"),cco=o("BertModel"),fco=o(" (BERT model)"),mco=l(),vp=a("li"),hte=a("strong"),gco=o("bert-generation"),hco=o(" \u2014 "),uP=a("a"),pco=o("BertGenerationEncoder"),_co=o(" (Bert Generation model)"),uco=l(),Fp=a("li"),pte=a("strong"),bco=o("big_bird"),vco=o(" \u2014 "),bP=a("a"),Fco=o("BigBirdModel"),Tco=o(" (BigBird model)"),Mco=l(),Tp=a("li"),_te=a("strong"),Eco=o("bigbird_pegasus"),Cco=o(" \u2014 "),vP=a("a"),wco=o("BigBirdPegasusModel"),Aco=o(" (BigBirdPegasus model)"),yco=l(),Mp=a("li"),ute=a("strong"),Lco=o("blenderbot"),xco=o(" \u2014 "),FP=a("a"),kco=o("BlenderbotModel"),Sco=o(" (Blenderbot model)"),Rco=l(),Ep=a("li"),bte=a("strong"),Bco=o("blenderbot-small"),Pco=o(" \u2014 "),TP=a("a"),$co=o("BlenderbotSmallModel"),Ico=o(" (BlenderbotSmall model)"),qco=l(),Cp=a("li"),vte=a("strong"),Nco=o("camembert"),jco=o(" \u2014 "),MP=a("a"),Dco=o("CamembertModel"),Gco=o(" (CamemBERT model)"),Oco=l(),wp=a("li"),Fte=a("strong"),Vco=o("canine"),Xco=o(" \u2014 "),EP=a("a"),zco=o("CanineModel"),Qco=o(" (Canine model)"),Wco=l(),Ap=a("li"),Tte=a("strong"),Hco=o("clip"),Uco=o(" \u2014 "),CP=a("a"),Jco=o("CLIPModel"),Yco=o(" (CLIP model)"),Kco=l(),yp=a("li"),Mte=a("strong"),Zco=o("convbert"),efo=o(" \u2014 "),wP=a("a"),ofo=o("ConvBertModel"),rfo=o(" (ConvBERT model)"),tfo=l(),Lp=a("li"),Ete=a("strong"),afo=o("convnext"),nfo=o(" \u2014 "),AP=a("a"),sfo=o("ConvNextModel"),lfo=o(" (ConvNext model)"),ifo=l(),xp=a("li"),Cte=a("strong"),dfo=o("ctrl"),cfo=o(" \u2014 "),yP=a("a"),ffo=o("CTRLModel"),mfo=o(" (CTRL model)"),gfo=l(),kp=a("li"),wte=a("strong"),hfo=o("data2vec-audio"),pfo=o(" \u2014 "),LP=a("a"),_fo=o("Data2VecAudioModel"),ufo=o(" (Data2VecAudio model)"),bfo=l(),Sp=a("li"),Ate=a("strong"),vfo=o("data2vec-text"),Ffo=o(" \u2014 "),xP=a("a"),Tfo=o("Data2VecTextModel"),Mfo=o(" (Data2VecText model)"),Efo=l(),Rp=a("li"),yte=a("strong"),Cfo=o("data2vec-vision"),wfo=o(" \u2014 "),kP=a("a"),Afo=o("Data2VecVisionModel"),yfo=o(" (Data2VecVision model)"),Lfo=l(),Bp=a("li"),Lte=a("strong"),xfo=o("deberta"),kfo=o(" \u2014 "),SP=a("a"),Sfo=o("DebertaModel"),Rfo=o(" (DeBERTa model)"),Bfo=l(),Pp=a("li"),xte=a("strong"),Pfo=o("deberta-v2"),$fo=o(" \u2014 "),RP=a("a"),Ifo=o("DebertaV2Model"),qfo=o(" (DeBERTa-v2 model)"),Nfo=l(),$p=a("li"),kte=a("strong"),jfo=o("decision_transformer"),Dfo=o(" \u2014 "),BP=a("a"),Gfo=o("DecisionTransformerModel"),Ofo=o(" (Decision Transformer model)"),Vfo=l(),Ip=a("li"),Ste=a("strong"),Xfo=o("deit"),zfo=o(" \u2014 "),PP=a("a"),Qfo=o("DeiTModel"),Wfo=o(" (DeiT model)"),Hfo=l(),qp=a("li"),Rte=a("strong"),Ufo=o("detr"),Jfo=o(" \u2014 "),$P=a("a"),Yfo=o("DetrModel"),Kfo=o(" (DETR model)"),Zfo=l(),Np=a("li"),Bte=a("strong"),emo=o("distilbert"),omo=o(" \u2014 "),IP=a("a"),rmo=o("DistilBertModel"),tmo=o(" (DistilBERT model)"),amo=l(),jp=a("li"),Pte=a("strong"),nmo=o("dpr"),smo=o(" \u2014 "),qP=a("a"),lmo=o("DPRQuestionEncoder"),imo=o(" (DPR model)"),dmo=l(),Dp=a("li"),$te=a("strong"),cmo=o("dpt"),fmo=o(" \u2014 "),NP=a("a"),mmo=o("DPTModel"),gmo=o(" (DPT model)"),hmo=l(),Gp=a("li"),Ite=a("strong"),pmo=o("electra"),_mo=o(" \u2014 "),jP=a("a"),umo=o("ElectraModel"),bmo=o(" (ELECTRA model)"),vmo=l(),Op=a("li"),qte=a("strong"),Fmo=o("flaubert"),Tmo=o(" \u2014 "),DP=a("a"),Mmo=o("FlaubertModel"),Emo=o(" (FlauBERT model)"),Cmo=l(),Vp=a("li"),Nte=a("strong"),wmo=o("fnet"),Amo=o(" \u2014 "),GP=a("a"),ymo=o("FNetModel"),Lmo=o(" (FNet model)"),xmo=l(),Xp=a("li"),jte=a("strong"),kmo=o("fsmt"),Smo=o(" \u2014 "),OP=a("a"),Rmo=o("FSMTModel"),Bmo=o(" (FairSeq Machine-Translation model)"),Pmo=l(),Hs=a("li"),Dte=a("strong"),$mo=o("funnel"),Imo=o(" \u2014 "),VP=a("a"),qmo=o("FunnelModel"),Nmo=o(" or "),XP=a("a"),jmo=o("FunnelBaseModel"),Dmo=o(" (Funnel Transformer model)"),Gmo=l(),zp=a("li"),Gte=a("strong"),Omo=o("glpn"),Vmo=o(" \u2014 "),zP=a("a"),Xmo=o("GLPNModel"),zmo=o(" (GLPN model)"),Qmo=l(),Qp=a("li"),Ote=a("strong"),Wmo=o("gpt2"),Hmo=o(" \u2014 "),QP=a("a"),Umo=o("GPT2Model"),Jmo=o(" (OpenAI GPT-2 model)"),Ymo=l(),Wp=a("li"),Vte=a("strong"),Kmo=o("gpt_neo"),Zmo=o(" \u2014 "),WP=a("a"),ego=o("GPTNeoModel"),ogo=o(" (GPT Neo model)"),rgo=l(),Hp=a("li"),Xte=a("strong"),tgo=o("gptj"),ago=o(" \u2014 "),HP=a("a"),ngo=o("GPTJModel"),sgo=o(" (GPT-J model)"),lgo=l(),Up=a("li"),zte=a("strong"),igo=o("hubert"),dgo=o(" \u2014 "),UP=a("a"),cgo=o("HubertModel"),fgo=o(" (Hubert model)"),mgo=l(),Jp=a("li"),Qte=a("strong"),ggo=o("ibert"),hgo=o(" \u2014 "),JP=a("a"),pgo=o("IBertModel"),_go=o(" (I-BERT model)"),ugo=l(),Yp=a("li"),Wte=a("strong"),bgo=o("imagegpt"),vgo=o(" \u2014 "),YP=a("a"),Fgo=o("ImageGPTModel"),Tgo=o(" (ImageGPT model)"),Mgo=l(),Kp=a("li"),Hte=a("strong"),Ego=o("layoutlm"),Cgo=o(" \u2014 "),KP=a("a"),wgo=o("LayoutLMModel"),Ago=o(" (LayoutLM model)"),ygo=l(),Zp=a("li"),Ute=a("strong"),Lgo=o("layoutlmv2"),xgo=o(" \u2014 "),ZP=a("a"),kgo=o("LayoutLMv2Model"),Sgo=o(" (LayoutLMv2 model)"),Rgo=l(),e_=a("li"),Jte=a("strong"),Bgo=o("led"),Pgo=o(" \u2014 "),e$=a("a"),$go=o("LEDModel"),Igo=o(" (LED model)"),qgo=l(),o_=a("li"),Yte=a("strong"),Ngo=o("longformer"),jgo=o(" \u2014 "),o$=a("a"),Dgo=o("LongformerModel"),Ggo=o(" (Longformer model)"),Ogo=l(),r_=a("li"),Kte=a("strong"),Vgo=o("luke"),Xgo=o(" \u2014 "),r$=a("a"),zgo=o("LukeModel"),Qgo=o(" (LUKE model)"),Wgo=l(),t_=a("li"),Zte=a("strong"),Hgo=o("lxmert"),Ugo=o(" \u2014 "),t$=a("a"),Jgo=o("LxmertModel"),Ygo=o(" (LXMERT model)"),Kgo=l(),a_=a("li"),eae=a("strong"),Zgo=o("m2m_100"),eho=o(" \u2014 "),a$=a("a"),oho=o("M2M100Model"),rho=o(" (M2M100 model)"),tho=l(),n_=a("li"),oae=a("strong"),aho=o("marian"),nho=o(" \u2014 "),n$=a("a"),sho=o("MarianModel"),lho=o(" (Marian model)"),iho=l(),s_=a("li"),rae=a("strong"),dho=o("maskformer"),cho=o(" \u2014 "),s$=a("a"),fho=o("MaskFormerModel"),mho=o(" (MaskFormer model)"),gho=l(),l_=a("li"),tae=a("strong"),hho=o("mbart"),pho=o(" \u2014 "),l$=a("a"),_ho=o("MBartModel"),uho=o(" (mBART model)"),bho=l(),i_=a("li"),aae=a("strong"),vho=o("megatron-bert"),Fho=o(" \u2014 "),i$=a("a"),Tho=o("MegatronBertModel"),Mho=o(" (MegatronBert model)"),Eho=l(),d_=a("li"),nae=a("strong"),Cho=o("mobilebert"),who=o(" \u2014 "),d$=a("a"),Aho=o("MobileBertModel"),yho=o(" (MobileBERT model)"),Lho=l(),c_=a("li"),sae=a("strong"),xho=o("mpnet"),kho=o(" \u2014 "),c$=a("a"),Sho=o("MPNetModel"),Rho=o(" (MPNet model)"),Bho=l(),f_=a("li"),lae=a("strong"),Pho=o("mt5"),$ho=o(" \u2014 "),f$=a("a"),Iho=o("MT5Model"),qho=o(" (mT5 model)"),Nho=l(),m_=a("li"),iae=a("strong"),jho=o("nystromformer"),Dho=o(" \u2014 "),m$=a("a"),Gho=o("NystromformerModel"),Oho=o(" (Nystromformer model)"),Vho=l(),g_=a("li"),dae=a("strong"),Xho=o("openai-gpt"),zho=o(" \u2014 "),g$=a("a"),Qho=o("OpenAIGPTModel"),Who=o(" (OpenAI GPT model)"),Hho=l(),h_=a("li"),cae=a("strong"),Uho=o("pegasus"),Jho=o(" \u2014 "),h$=a("a"),Yho=o("PegasusModel"),Kho=o(" (Pegasus model)"),Zho=l(),p_=a("li"),fae=a("strong"),epo=o("perceiver"),opo=o(" \u2014 "),p$=a("a"),rpo=o("PerceiverModel"),tpo=o(" (Perceiver model)"),apo=l(),__=a("li"),mae=a("strong"),npo=o("plbart"),spo=o(" \u2014 "),_$=a("a"),lpo=o("PLBartModel"),ipo=o(" (PLBart model)"),dpo=l(),u_=a("li"),gae=a("strong"),cpo=o("poolformer"),fpo=o(" \u2014 "),u$=a("a"),mpo=o("PoolFormerModel"),gpo=o(" (PoolFormer model)"),hpo=l(),b_=a("li"),hae=a("strong"),ppo=o("prophetnet"),_po=o(" \u2014 "),b$=a("a"),upo=o("ProphetNetModel"),bpo=o(" (ProphetNet model)"),vpo=l(),v_=a("li"),pae=a("strong"),Fpo=o("qdqbert"),Tpo=o(" \u2014 "),v$=a("a"),Mpo=o("QDQBertModel"),Epo=o(" (QDQBert model)"),Cpo=l(),F_=a("li"),_ae=a("strong"),wpo=o("reformer"),Apo=o(" \u2014 "),F$=a("a"),ypo=o("ReformerModel"),Lpo=o(" (Reformer model)"),xpo=l(),T_=a("li"),uae=a("strong"),kpo=o("regnet"),Spo=o(" \u2014 "),T$=a("a"),Rpo=o("RegNetModel"),Bpo=o(" (RegNet model)"),Ppo=l(),M_=a("li"),bae=a("strong"),$po=o("rembert"),Ipo=o(" \u2014 "),M$=a("a"),qpo=o("RemBertModel"),Npo=o(" (RemBERT model)"),jpo=l(),E_=a("li"),vae=a("strong"),Dpo=o("resnet"),Gpo=o(" \u2014 "),E$=a("a"),Opo=o("ResNetModel"),Vpo=o(" (ResNet model)"),Xpo=l(),C_=a("li"),Fae=a("strong"),zpo=o("retribert"),Qpo=o(" \u2014 "),C$=a("a"),Wpo=o("RetriBertModel"),Hpo=o(" (RetriBERT model)"),Upo=l(),w_=a("li"),Tae=a("strong"),Jpo=o("roberta"),Ypo=o(" \u2014 "),w$=a("a"),Kpo=o("RobertaModel"),Zpo=o(" (RoBERTa model)"),e_o=l(),A_=a("li"),Mae=a("strong"),o_o=o("roformer"),r_o=o(" \u2014 "),A$=a("a"),t_o=o("RoFormerModel"),a_o=o(" (RoFormer model)"),n_o=l(),y_=a("li"),Eae=a("strong"),s_o=o("segformer"),l_o=o(" \u2014 "),y$=a("a"),i_o=o("SegformerModel"),d_o=o(" (SegFormer model)"),c_o=l(),L_=a("li"),Cae=a("strong"),f_o=o("sew"),m_o=o(" \u2014 "),L$=a("a"),g_o=o("SEWModel"),h_o=o(" (SEW model)"),p_o=l(),x_=a("li"),wae=a("strong"),__o=o("sew-d"),u_o=o(" \u2014 "),x$=a("a"),b_o=o("SEWDModel"),v_o=o(" (SEW-D model)"),F_o=l(),k_=a("li"),Aae=a("strong"),T_o=o("speech_to_text"),M_o=o(" \u2014 "),k$=a("a"),E_o=o("Speech2TextModel"),C_o=o(" (Speech2Text model)"),w_o=l(),S_=a("li"),yae=a("strong"),A_o=o("splinter"),y_o=o(" \u2014 "),S$=a("a"),L_o=o("SplinterModel"),x_o=o(" (Splinter model)"),k_o=l(),R_=a("li"),Lae=a("strong"),S_o=o("squeezebert"),R_o=o(" \u2014 "),R$=a("a"),B_o=o("SqueezeBertModel"),P_o=o(" (SqueezeBERT model)"),$_o=l(),B_=a("li"),xae=a("strong"),I_o=o("swin"),q_o=o(" \u2014 "),B$=a("a"),N_o=o("SwinModel"),j_o=o(" (Swin model)"),D_o=l(),P_=a("li"),kae=a("strong"),G_o=o("t5"),O_o=o(" \u2014 "),P$=a("a"),V_o=o("T5Model"),X_o=o(" (T5 model)"),z_o=l(),$_=a("li"),Sae=a("strong"),Q_o=o("tapas"),W_o=o(" \u2014 "),$$=a("a"),H_o=o("TapasModel"),U_o=o(" (TAPAS model)"),J_o=l(),I_=a("li"),Rae=a("strong"),Y_o=o("transfo-xl"),K_o=o(" \u2014 "),I$=a("a"),Z_o=o("TransfoXLModel"),euo=o(" (Transformer-XL model)"),ouo=l(),q_=a("li"),Bae=a("strong"),ruo=o("unispeech"),tuo=o(" \u2014 "),q$=a("a"),auo=o("UniSpeechModel"),nuo=o(" (UniSpeech model)"),suo=l(),N_=a("li"),Pae=a("strong"),luo=o("unispeech-sat"),iuo=o(" \u2014 "),N$=a("a"),duo=o("UniSpeechSatModel"),cuo=o(" (UniSpeechSat model)"),fuo=l(),j_=a("li"),$ae=a("strong"),muo=o("van"),guo=o(" \u2014 "),j$=a("a"),huo=o("VanModel"),puo=o(" (VAN model)"),_uo=l(),D_=a("li"),Iae=a("strong"),uuo=o("vilt"),buo=o(" \u2014 "),D$=a("a"),vuo=o("ViltModel"),Fuo=o(" (ViLT model)"),Tuo=l(),G_=a("li"),qae=a("strong"),Muo=o("vision-text-dual-encoder"),Euo=o(" \u2014 "),G$=a("a"),Cuo=o("VisionTextDualEncoderModel"),wuo=o(" (VisionTextDualEncoder model)"),Auo=l(),O_=a("li"),Nae=a("strong"),yuo=o("visual_bert"),Luo=o(" \u2014 "),O$=a("a"),xuo=o("VisualBertModel"),kuo=o(" (VisualBert model)"),Suo=l(),V_=a("li"),jae=a("strong"),Ruo=o("vit"),Buo=o(" \u2014 "),V$=a("a"),Puo=o("ViTModel"),$uo=o(" (ViT model)"),Iuo=l(),X_=a("li"),Dae=a("strong"),quo=o("vit_mae"),Nuo=o(" \u2014 "),X$=a("a"),juo=o("ViTMAEModel"),Duo=o(" (ViTMAE model)"),Guo=l(),z_=a("li"),Gae=a("strong"),Ouo=o("wav2vec2"),Vuo=o(" \u2014 "),z$=a("a"),Xuo=o("Wav2Vec2Model"),zuo=o(" (Wav2Vec2 model)"),Quo=l(),Q_=a("li"),Oae=a("strong"),Wuo=o("wavlm"),Huo=o(" \u2014 "),Q$=a("a"),Uuo=o("WavLMModel"),Juo=o(" (WavLM model)"),Yuo=l(),W_=a("li"),Vae=a("strong"),Kuo=o("xglm"),Zuo=o(" \u2014 "),W$=a("a"),e1o=o("XGLMModel"),o1o=o(" (XGLM model)"),r1o=l(),H_=a("li"),Xae=a("strong"),t1o=o("xlm"),a1o=o(" \u2014 "),H$=a("a"),n1o=o("XLMModel"),s1o=o(" (XLM model)"),l1o=l(),U_=a("li"),zae=a("strong"),i1o=o("xlm-prophetnet"),d1o=o(" \u2014 "),U$=a("a"),c1o=o("XLMProphetNetModel"),f1o=o(" (XLMProphetNet model)"),m1o=l(),J_=a("li"),Qae=a("strong"),g1o=o("xlm-roberta"),h1o=o(" \u2014 "),J$=a("a"),p1o=o("XLMRobertaModel"),_1o=o(" (XLM-RoBERTa model)"),u1o=l(),Y_=a("li"),Wae=a("strong"),b1o=o("xlm-roberta-xl"),v1o=o(" \u2014 "),Y$=a("a"),F1o=o("XLMRobertaXLModel"),T1o=o(" (XLM-RoBERTa-XL model)"),M1o=l(),K_=a("li"),Hae=a("strong"),E1o=o("xlnet"),C1o=o(" \u2014 "),K$=a("a"),w1o=o("XLNetModel"),A1o=o(" (XLNet model)"),y1o=l(),Z_=a("li"),Uae=a("strong"),L1o=o("yoso"),x1o=o(" \u2014 "),Z$=a("a"),k1o=o("YosoModel"),S1o=o(" (YOSO model)"),R1o=l(),eu=a("p"),B1o=o("The model is set in evaluation mode by default using "),Jae=a("code"),P1o=o("model.eval()"),$1o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yae=a("code"),I1o=o("model.train()"),q1o=l(),Kae=a("p"),N1o=o("Examples:"),j1o=l(),f(R3.$$.fragment),bPe=l(),id=a("h2"),ou=a("a"),Zae=a("span"),f(B3.$$.fragment),D1o=l(),ene=a("span"),G1o=o("AutoModelForPreTraining"),vPe=l(),Yo=a("div"),f(P3.$$.fragment),O1o=l(),dd=a("p"),V1o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eI=a("a"),X1o=o("from_pretrained()"),z1o=o(" class method or the "),oI=a("a"),Q1o=o("from_config()"),W1o=o(` class
method.`),H1o=l(),$3=a("p"),U1o=o("This class cannot be instantiated directly using "),one=a("code"),J1o=o("__init__()"),Y1o=o(" (throws an error)."),K1o=l(),zr=a("div"),f(I3.$$.fragment),Z1o=l(),rne=a("p"),ebo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),obo=l(),cd=a("p"),rbo=o(`Note:
Loading a model from its configuration file does `),tne=a("strong"),tbo=o("not"),abo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rI=a("a"),nbo=o("from_pretrained()"),sbo=o(" to load the model weights."),lbo=l(),ane=a("p"),ibo=o("Examples:"),dbo=l(),f(q3.$$.fragment),cbo=l(),je=a("div"),f(N3.$$.fragment),fbo=l(),nne=a("p"),mbo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gbo=l(),za=a("p"),hbo=o("The model class to instantiate is selected based on the "),sne=a("code"),pbo=o("model_type"),_bo=o(` property of the config object (either
passed as an argument or loaded from `),lne=a("code"),ubo=o("pretrained_model_name_or_path"),bbo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=a("code"),vbo=o("pretrained_model_name_or_path"),Fbo=o(":"),Tbo=l(),S=a("ul"),ru=a("li"),dne=a("strong"),Mbo=o("albert"),Ebo=o(" \u2014 "),tI=a("a"),Cbo=o("AlbertForPreTraining"),wbo=o(" (ALBERT model)"),Abo=l(),tu=a("li"),cne=a("strong"),ybo=o("bart"),Lbo=o(" \u2014 "),aI=a("a"),xbo=o("BartForConditionalGeneration"),kbo=o(" (BART model)"),Sbo=l(),au=a("li"),fne=a("strong"),Rbo=o("bert"),Bbo=o(" \u2014 "),nI=a("a"),Pbo=o("BertForPreTraining"),$bo=o(" (BERT model)"),Ibo=l(),nu=a("li"),mne=a("strong"),qbo=o("big_bird"),Nbo=o(" \u2014 "),sI=a("a"),jbo=o("BigBirdForPreTraining"),Dbo=o(" (BigBird model)"),Gbo=l(),su=a("li"),gne=a("strong"),Obo=o("camembert"),Vbo=o(" \u2014 "),lI=a("a"),Xbo=o("CamembertForMaskedLM"),zbo=o(" (CamemBERT model)"),Qbo=l(),lu=a("li"),hne=a("strong"),Wbo=o("ctrl"),Hbo=o(" \u2014 "),iI=a("a"),Ubo=o("CTRLLMHeadModel"),Jbo=o(" (CTRL model)"),Ybo=l(),iu=a("li"),pne=a("strong"),Kbo=o("data2vec-text"),Zbo=o(" \u2014 "),dI=a("a"),e2o=o("Data2VecTextForMaskedLM"),o2o=o(" (Data2VecText model)"),r2o=l(),du=a("li"),_ne=a("strong"),t2o=o("deberta"),a2o=o(" \u2014 "),cI=a("a"),n2o=o("DebertaForMaskedLM"),s2o=o(" (DeBERTa model)"),l2o=l(),cu=a("li"),une=a("strong"),i2o=o("deberta-v2"),d2o=o(" \u2014 "),fI=a("a"),c2o=o("DebertaV2ForMaskedLM"),f2o=o(" (DeBERTa-v2 model)"),m2o=l(),fu=a("li"),bne=a("strong"),g2o=o("distilbert"),h2o=o(" \u2014 "),mI=a("a"),p2o=o("DistilBertForMaskedLM"),_2o=o(" (DistilBERT model)"),u2o=l(),mu=a("li"),vne=a("strong"),b2o=o("electra"),v2o=o(" \u2014 "),gI=a("a"),F2o=o("ElectraForPreTraining"),T2o=o(" (ELECTRA model)"),M2o=l(),gu=a("li"),Fne=a("strong"),E2o=o("flaubert"),C2o=o(" \u2014 "),hI=a("a"),w2o=o("FlaubertWithLMHeadModel"),A2o=o(" (FlauBERT model)"),y2o=l(),hu=a("li"),Tne=a("strong"),L2o=o("fnet"),x2o=o(" \u2014 "),pI=a("a"),k2o=o("FNetForPreTraining"),S2o=o(" (FNet model)"),R2o=l(),pu=a("li"),Mne=a("strong"),B2o=o("fsmt"),P2o=o(" \u2014 "),_I=a("a"),$2o=o("FSMTForConditionalGeneration"),I2o=o(" (FairSeq Machine-Translation model)"),q2o=l(),_u=a("li"),Ene=a("strong"),N2o=o("funnel"),j2o=o(" \u2014 "),uI=a("a"),D2o=o("FunnelForPreTraining"),G2o=o(" (Funnel Transformer model)"),O2o=l(),uu=a("li"),Cne=a("strong"),V2o=o("gpt2"),X2o=o(" \u2014 "),bI=a("a"),z2o=o("GPT2LMHeadModel"),Q2o=o(" (OpenAI GPT-2 model)"),W2o=l(),bu=a("li"),wne=a("strong"),H2o=o("ibert"),U2o=o(" \u2014 "),vI=a("a"),J2o=o("IBertForMaskedLM"),Y2o=o(" (I-BERT model)"),K2o=l(),vu=a("li"),Ane=a("strong"),Z2o=o("layoutlm"),e5o=o(" \u2014 "),FI=a("a"),o5o=o("LayoutLMForMaskedLM"),r5o=o(" (LayoutLM model)"),t5o=l(),Fu=a("li"),yne=a("strong"),a5o=o("longformer"),n5o=o(" \u2014 "),TI=a("a"),s5o=o("LongformerForMaskedLM"),l5o=o(" (Longformer model)"),i5o=l(),Tu=a("li"),Lne=a("strong"),d5o=o("lxmert"),c5o=o(" \u2014 "),MI=a("a"),f5o=o("LxmertForPreTraining"),m5o=o(" (LXMERT model)"),g5o=l(),Mu=a("li"),xne=a("strong"),h5o=o("megatron-bert"),p5o=o(" \u2014 "),EI=a("a"),_5o=o("MegatronBertForPreTraining"),u5o=o(" (MegatronBert model)"),b5o=l(),Eu=a("li"),kne=a("strong"),v5o=o("mobilebert"),F5o=o(" \u2014 "),CI=a("a"),T5o=o("MobileBertForPreTraining"),M5o=o(" (MobileBERT model)"),E5o=l(),Cu=a("li"),Sne=a("strong"),C5o=o("mpnet"),w5o=o(" \u2014 "),wI=a("a"),A5o=o("MPNetForMaskedLM"),y5o=o(" (MPNet model)"),L5o=l(),wu=a("li"),Rne=a("strong"),x5o=o("openai-gpt"),k5o=o(" \u2014 "),AI=a("a"),S5o=o("OpenAIGPTLMHeadModel"),R5o=o(" (OpenAI GPT model)"),B5o=l(),Au=a("li"),Bne=a("strong"),P5o=o("retribert"),$5o=o(" \u2014 "),yI=a("a"),I5o=o("RetriBertModel"),q5o=o(" (RetriBERT model)"),N5o=l(),yu=a("li"),Pne=a("strong"),j5o=o("roberta"),D5o=o(" \u2014 "),LI=a("a"),G5o=o("RobertaForMaskedLM"),O5o=o(" (RoBERTa model)"),V5o=l(),Lu=a("li"),$ne=a("strong"),X5o=o("squeezebert"),z5o=o(" \u2014 "),xI=a("a"),Q5o=o("SqueezeBertForMaskedLM"),W5o=o(" (SqueezeBERT model)"),H5o=l(),xu=a("li"),Ine=a("strong"),U5o=o("t5"),J5o=o(" \u2014 "),kI=a("a"),Y5o=o("T5ForConditionalGeneration"),K5o=o(" (T5 model)"),Z5o=l(),ku=a("li"),qne=a("strong"),e6o=o("tapas"),o6o=o(" \u2014 "),SI=a("a"),r6o=o("TapasForMaskedLM"),t6o=o(" (TAPAS model)"),a6o=l(),Su=a("li"),Nne=a("strong"),n6o=o("transfo-xl"),s6o=o(" \u2014 "),RI=a("a"),l6o=o("TransfoXLLMHeadModel"),i6o=o(" (Transformer-XL model)"),d6o=l(),Ru=a("li"),jne=a("strong"),c6o=o("unispeech"),f6o=o(" \u2014 "),BI=a("a"),m6o=o("UniSpeechForPreTraining"),g6o=o(" (UniSpeech model)"),h6o=l(),Bu=a("li"),Dne=a("strong"),p6o=o("unispeech-sat"),_6o=o(" \u2014 "),PI=a("a"),u6o=o("UniSpeechSatForPreTraining"),b6o=o(" (UniSpeechSat model)"),v6o=l(),Pu=a("li"),Gne=a("strong"),F6o=o("visual_bert"),T6o=o(" \u2014 "),$I=a("a"),M6o=o("VisualBertForPreTraining"),E6o=o(" (VisualBert model)"),C6o=l(),$u=a("li"),One=a("strong"),w6o=o("vit_mae"),A6o=o(" \u2014 "),II=a("a"),y6o=o("ViTMAEForPreTraining"),L6o=o(" (ViTMAE model)"),x6o=l(),Iu=a("li"),Vne=a("strong"),k6o=o("wav2vec2"),S6o=o(" \u2014 "),qI=a("a"),R6o=o("Wav2Vec2ForPreTraining"),B6o=o(" (Wav2Vec2 model)"),P6o=l(),qu=a("li"),Xne=a("strong"),$6o=o("xlm"),I6o=o(" \u2014 "),NI=a("a"),q6o=o("XLMWithLMHeadModel"),N6o=o(" (XLM model)"),j6o=l(),Nu=a("li"),zne=a("strong"),D6o=o("xlm-roberta"),G6o=o(" \u2014 "),jI=a("a"),O6o=o("XLMRobertaForMaskedLM"),V6o=o(" (XLM-RoBERTa model)"),X6o=l(),ju=a("li"),Qne=a("strong"),z6o=o("xlm-roberta-xl"),Q6o=o(" \u2014 "),DI=a("a"),W6o=o("XLMRobertaXLForMaskedLM"),H6o=o(" (XLM-RoBERTa-XL model)"),U6o=l(),Du=a("li"),Wne=a("strong"),J6o=o("xlnet"),Y6o=o(" \u2014 "),GI=a("a"),K6o=o("XLNetLMHeadModel"),Z6o=o(" (XLNet model)"),evo=l(),Gu=a("p"),ovo=o("The model is set in evaluation mode by default using "),Hne=a("code"),rvo=o("model.eval()"),tvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=a("code"),avo=o("model.train()"),nvo=l(),Jne=a("p"),svo=o("Examples:"),lvo=l(),f(j3.$$.fragment),FPe=l(),fd=a("h2"),Ou=a("a"),Yne=a("span"),f(D3.$$.fragment),ivo=l(),Kne=a("span"),dvo=o("AutoModelForCausalLM"),TPe=l(),Ko=a("div"),f(G3.$$.fragment),cvo=l(),md=a("p"),fvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OI=a("a"),mvo=o("from_pretrained()"),gvo=o(" class method or the "),VI=a("a"),hvo=o("from_config()"),pvo=o(` class
method.`),_vo=l(),O3=a("p"),uvo=o("This class cannot be instantiated directly using "),Zne=a("code"),bvo=o("__init__()"),vvo=o(" (throws an error)."),Fvo=l(),Qr=a("div"),f(V3.$$.fragment),Tvo=l(),ese=a("p"),Mvo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Evo=l(),gd=a("p"),Cvo=o(`Note:
Loading a model from its configuration file does `),ose=a("strong"),wvo=o("not"),Avo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XI=a("a"),yvo=o("from_pretrained()"),Lvo=o(" to load the model weights."),xvo=l(),rse=a("p"),kvo=o("Examples:"),Svo=l(),f(X3.$$.fragment),Rvo=l(),De=a("div"),f(z3.$$.fragment),Bvo=l(),tse=a("p"),Pvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),$vo=l(),Qa=a("p"),Ivo=o("The model class to instantiate is selected based on the "),ase=a("code"),qvo=o("model_type"),Nvo=o(` property of the config object (either
passed as an argument or loaded from `),nse=a("code"),jvo=o("pretrained_model_name_or_path"),Dvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sse=a("code"),Gvo=o("pretrained_model_name_or_path"),Ovo=o(":"),Vvo=l(),$=a("ul"),Vu=a("li"),lse=a("strong"),Xvo=o("bart"),zvo=o(" \u2014 "),zI=a("a"),Qvo=o("BartForCausalLM"),Wvo=o(" (BART model)"),Hvo=l(),Xu=a("li"),ise=a("strong"),Uvo=o("bert"),Jvo=o(" \u2014 "),QI=a("a"),Yvo=o("BertLMHeadModel"),Kvo=o(" (BERT model)"),Zvo=l(),zu=a("li"),dse=a("strong"),eFo=o("bert-generation"),oFo=o(" \u2014 "),WI=a("a"),rFo=o("BertGenerationDecoder"),tFo=o(" (Bert Generation model)"),aFo=l(),Qu=a("li"),cse=a("strong"),nFo=o("big_bird"),sFo=o(" \u2014 "),HI=a("a"),lFo=o("BigBirdForCausalLM"),iFo=o(" (BigBird model)"),dFo=l(),Wu=a("li"),fse=a("strong"),cFo=o("bigbird_pegasus"),fFo=o(" \u2014 "),UI=a("a"),mFo=o("BigBirdPegasusForCausalLM"),gFo=o(" (BigBirdPegasus model)"),hFo=l(),Hu=a("li"),mse=a("strong"),pFo=o("blenderbot"),_Fo=o(" \u2014 "),JI=a("a"),uFo=o("BlenderbotForCausalLM"),bFo=o(" (Blenderbot model)"),vFo=l(),Uu=a("li"),gse=a("strong"),FFo=o("blenderbot-small"),TFo=o(" \u2014 "),YI=a("a"),MFo=o("BlenderbotSmallForCausalLM"),EFo=o(" (BlenderbotSmall model)"),CFo=l(),Ju=a("li"),hse=a("strong"),wFo=o("camembert"),AFo=o(" \u2014 "),KI=a("a"),yFo=o("CamembertForCausalLM"),LFo=o(" (CamemBERT model)"),xFo=l(),Yu=a("li"),pse=a("strong"),kFo=o("ctrl"),SFo=o(" \u2014 "),ZI=a("a"),RFo=o("CTRLLMHeadModel"),BFo=o(" (CTRL model)"),PFo=l(),Ku=a("li"),_se=a("strong"),$Fo=o("data2vec-text"),IFo=o(" \u2014 "),eq=a("a"),qFo=o("Data2VecTextForCausalLM"),NFo=o(" (Data2VecText model)"),jFo=l(),Zu=a("li"),use=a("strong"),DFo=o("electra"),GFo=o(" \u2014 "),oq=a("a"),OFo=o("ElectraForCausalLM"),VFo=o(" (ELECTRA model)"),XFo=l(),e1=a("li"),bse=a("strong"),zFo=o("gpt2"),QFo=o(" \u2014 "),rq=a("a"),WFo=o("GPT2LMHeadModel"),HFo=o(" (OpenAI GPT-2 model)"),UFo=l(),o1=a("li"),vse=a("strong"),JFo=o("gpt_neo"),YFo=o(" \u2014 "),tq=a("a"),KFo=o("GPTNeoForCausalLM"),ZFo=o(" (GPT Neo model)"),eTo=l(),r1=a("li"),Fse=a("strong"),oTo=o("gptj"),rTo=o(" \u2014 "),aq=a("a"),tTo=o("GPTJForCausalLM"),aTo=o(" (GPT-J model)"),nTo=l(),t1=a("li"),Tse=a("strong"),sTo=o("marian"),lTo=o(" \u2014 "),nq=a("a"),iTo=o("MarianForCausalLM"),dTo=o(" (Marian model)"),cTo=l(),a1=a("li"),Mse=a("strong"),fTo=o("mbart"),mTo=o(" \u2014 "),sq=a("a"),gTo=o("MBartForCausalLM"),hTo=o(" (mBART model)"),pTo=l(),n1=a("li"),Ese=a("strong"),_To=o("megatron-bert"),uTo=o(" \u2014 "),lq=a("a"),bTo=o("MegatronBertForCausalLM"),vTo=o(" (MegatronBert model)"),FTo=l(),s1=a("li"),Cse=a("strong"),TTo=o("openai-gpt"),MTo=o(" \u2014 "),iq=a("a"),ETo=o("OpenAIGPTLMHeadModel"),CTo=o(" (OpenAI GPT model)"),wTo=l(),l1=a("li"),wse=a("strong"),ATo=o("pegasus"),yTo=o(" \u2014 "),dq=a("a"),LTo=o("PegasusForCausalLM"),xTo=o(" (Pegasus model)"),kTo=l(),i1=a("li"),Ase=a("strong"),STo=o("plbart"),RTo=o(" \u2014 "),cq=a("a"),BTo=o("PLBartForCausalLM"),PTo=o(" (PLBart model)"),$To=l(),d1=a("li"),yse=a("strong"),ITo=o("prophetnet"),qTo=o(" \u2014 "),fq=a("a"),NTo=o("ProphetNetForCausalLM"),jTo=o(" (ProphetNet model)"),DTo=l(),c1=a("li"),Lse=a("strong"),GTo=o("qdqbert"),OTo=o(" \u2014 "),mq=a("a"),VTo=o("QDQBertLMHeadModel"),XTo=o(" (QDQBert model)"),zTo=l(),f1=a("li"),xse=a("strong"),QTo=o("reformer"),WTo=o(" \u2014 "),gq=a("a"),HTo=o("ReformerModelWithLMHead"),UTo=o(" (Reformer model)"),JTo=l(),m1=a("li"),kse=a("strong"),YTo=o("rembert"),KTo=o(" \u2014 "),hq=a("a"),ZTo=o("RemBertForCausalLM"),e8o=o(" (RemBERT model)"),o8o=l(),g1=a("li"),Sse=a("strong"),r8o=o("roberta"),t8o=o(" \u2014 "),pq=a("a"),a8o=o("RobertaForCausalLM"),n8o=o(" (RoBERTa model)"),s8o=l(),h1=a("li"),Rse=a("strong"),l8o=o("roformer"),i8o=o(" \u2014 "),_q=a("a"),d8o=o("RoFormerForCausalLM"),c8o=o(" (RoFormer model)"),f8o=l(),p1=a("li"),Bse=a("strong"),m8o=o("speech_to_text_2"),g8o=o(" \u2014 "),uq=a("a"),h8o=o("Speech2Text2ForCausalLM"),p8o=o(" (Speech2Text2 model)"),_8o=l(),_1=a("li"),Pse=a("strong"),u8o=o("transfo-xl"),b8o=o(" \u2014 "),bq=a("a"),v8o=o("TransfoXLLMHeadModel"),F8o=o(" (Transformer-XL model)"),T8o=l(),u1=a("li"),$se=a("strong"),M8o=o("trocr"),E8o=o(" \u2014 "),vq=a("a"),C8o=o("TrOCRForCausalLM"),w8o=o(" (TrOCR model)"),A8o=l(),b1=a("li"),Ise=a("strong"),y8o=o("xglm"),L8o=o(" \u2014 "),Fq=a("a"),x8o=o("XGLMForCausalLM"),k8o=o(" (XGLM model)"),S8o=l(),v1=a("li"),qse=a("strong"),R8o=o("xlm"),B8o=o(" \u2014 "),Tq=a("a"),P8o=o("XLMWithLMHeadModel"),$8o=o(" (XLM model)"),I8o=l(),F1=a("li"),Nse=a("strong"),q8o=o("xlm-prophetnet"),N8o=o(" \u2014 "),Mq=a("a"),j8o=o("XLMProphetNetForCausalLM"),D8o=o(" (XLMProphetNet model)"),G8o=l(),T1=a("li"),jse=a("strong"),O8o=o("xlm-roberta"),V8o=o(" \u2014 "),Eq=a("a"),X8o=o("XLMRobertaForCausalLM"),z8o=o(" (XLM-RoBERTa model)"),Q8o=l(),M1=a("li"),Dse=a("strong"),W8o=o("xlm-roberta-xl"),H8o=o(" \u2014 "),Cq=a("a"),U8o=o("XLMRobertaXLForCausalLM"),J8o=o(" (XLM-RoBERTa-XL model)"),Y8o=l(),E1=a("li"),Gse=a("strong"),K8o=o("xlnet"),Z8o=o(" \u2014 "),wq=a("a"),e7o=o("XLNetLMHeadModel"),o7o=o(" (XLNet model)"),r7o=l(),C1=a("p"),t7o=o("The model is set in evaluation mode by default using "),Ose=a("code"),a7o=o("model.eval()"),n7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=a("code"),s7o=o("model.train()"),l7o=l(),Xse=a("p"),i7o=o("Examples:"),d7o=l(),f(Q3.$$.fragment),MPe=l(),hd=a("h2"),w1=a("a"),zse=a("span"),f(W3.$$.fragment),c7o=l(),Qse=a("span"),f7o=o("AutoModelForMaskedLM"),EPe=l(),Zo=a("div"),f(H3.$$.fragment),m7o=l(),pd=a("p"),g7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Aq=a("a"),h7o=o("from_pretrained()"),p7o=o(" class method or the "),yq=a("a"),_7o=o("from_config()"),u7o=o(` class
method.`),b7o=l(),U3=a("p"),v7o=o("This class cannot be instantiated directly using "),Wse=a("code"),F7o=o("__init__()"),T7o=o(" (throws an error)."),M7o=l(),Wr=a("div"),f(J3.$$.fragment),E7o=l(),Hse=a("p"),C7o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),w7o=l(),_d=a("p"),A7o=o(`Note:
Loading a model from its configuration file does `),Use=a("strong"),y7o=o("not"),L7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=a("a"),x7o=o("from_pretrained()"),k7o=o(" to load the model weights."),S7o=l(),Jse=a("p"),R7o=o("Examples:"),B7o=l(),f(Y3.$$.fragment),P7o=l(),Ge=a("div"),f(K3.$$.fragment),$7o=l(),Yse=a("p"),I7o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),q7o=l(),Wa=a("p"),N7o=o("The model class to instantiate is selected based on the "),Kse=a("code"),j7o=o("model_type"),D7o=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),G7o=o("pretrained_model_name_or_path"),O7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),V7o=o("pretrained_model_name_or_path"),X7o=o(":"),z7o=l(),I=a("ul"),A1=a("li"),ole=a("strong"),Q7o=o("albert"),W7o=o(" \u2014 "),xq=a("a"),H7o=o("AlbertForMaskedLM"),U7o=o(" (ALBERT model)"),J7o=l(),y1=a("li"),rle=a("strong"),Y7o=o("bart"),K7o=o(" \u2014 "),kq=a("a"),Z7o=o("BartForConditionalGeneration"),eMo=o(" (BART model)"),oMo=l(),L1=a("li"),tle=a("strong"),rMo=o("bert"),tMo=o(" \u2014 "),Sq=a("a"),aMo=o("BertForMaskedLM"),nMo=o(" (BERT model)"),sMo=l(),x1=a("li"),ale=a("strong"),lMo=o("big_bird"),iMo=o(" \u2014 "),Rq=a("a"),dMo=o("BigBirdForMaskedLM"),cMo=o(" (BigBird model)"),fMo=l(),k1=a("li"),nle=a("strong"),mMo=o("camembert"),gMo=o(" \u2014 "),Bq=a("a"),hMo=o("CamembertForMaskedLM"),pMo=o(" (CamemBERT model)"),_Mo=l(),S1=a("li"),sle=a("strong"),uMo=o("convbert"),bMo=o(" \u2014 "),Pq=a("a"),vMo=o("ConvBertForMaskedLM"),FMo=o(" (ConvBERT model)"),TMo=l(),R1=a("li"),lle=a("strong"),MMo=o("data2vec-text"),EMo=o(" \u2014 "),$q=a("a"),CMo=o("Data2VecTextForMaskedLM"),wMo=o(" (Data2VecText model)"),AMo=l(),B1=a("li"),ile=a("strong"),yMo=o("deberta"),LMo=o(" \u2014 "),Iq=a("a"),xMo=o("DebertaForMaskedLM"),kMo=o(" (DeBERTa model)"),SMo=l(),P1=a("li"),dle=a("strong"),RMo=o("deberta-v2"),BMo=o(" \u2014 "),qq=a("a"),PMo=o("DebertaV2ForMaskedLM"),$Mo=o(" (DeBERTa-v2 model)"),IMo=l(),$1=a("li"),cle=a("strong"),qMo=o("distilbert"),NMo=o(" \u2014 "),Nq=a("a"),jMo=o("DistilBertForMaskedLM"),DMo=o(" (DistilBERT model)"),GMo=l(),I1=a("li"),fle=a("strong"),OMo=o("electra"),VMo=o(" \u2014 "),jq=a("a"),XMo=o("ElectraForMaskedLM"),zMo=o(" (ELECTRA model)"),QMo=l(),q1=a("li"),mle=a("strong"),WMo=o("flaubert"),HMo=o(" \u2014 "),Dq=a("a"),UMo=o("FlaubertWithLMHeadModel"),JMo=o(" (FlauBERT model)"),YMo=l(),N1=a("li"),gle=a("strong"),KMo=o("fnet"),ZMo=o(" \u2014 "),Gq=a("a"),e4o=o("FNetForMaskedLM"),o4o=o(" (FNet model)"),r4o=l(),j1=a("li"),hle=a("strong"),t4o=o("funnel"),a4o=o(" \u2014 "),Oq=a("a"),n4o=o("FunnelForMaskedLM"),s4o=o(" (Funnel Transformer model)"),l4o=l(),D1=a("li"),ple=a("strong"),i4o=o("ibert"),d4o=o(" \u2014 "),Vq=a("a"),c4o=o("IBertForMaskedLM"),f4o=o(" (I-BERT model)"),m4o=l(),G1=a("li"),_le=a("strong"),g4o=o("layoutlm"),h4o=o(" \u2014 "),Xq=a("a"),p4o=o("LayoutLMForMaskedLM"),_4o=o(" (LayoutLM model)"),u4o=l(),O1=a("li"),ule=a("strong"),b4o=o("longformer"),v4o=o(" \u2014 "),zq=a("a"),F4o=o("LongformerForMaskedLM"),T4o=o(" (Longformer model)"),M4o=l(),V1=a("li"),ble=a("strong"),E4o=o("mbart"),C4o=o(" \u2014 "),Qq=a("a"),w4o=o("MBartForConditionalGeneration"),A4o=o(" (mBART model)"),y4o=l(),X1=a("li"),vle=a("strong"),L4o=o("megatron-bert"),x4o=o(" \u2014 "),Wq=a("a"),k4o=o("MegatronBertForMaskedLM"),S4o=o(" (MegatronBert model)"),R4o=l(),z1=a("li"),Fle=a("strong"),B4o=o("mobilebert"),P4o=o(" \u2014 "),Hq=a("a"),$4o=o("MobileBertForMaskedLM"),I4o=o(" (MobileBERT model)"),q4o=l(),Q1=a("li"),Tle=a("strong"),N4o=o("mpnet"),j4o=o(" \u2014 "),Uq=a("a"),D4o=o("MPNetForMaskedLM"),G4o=o(" (MPNet model)"),O4o=l(),W1=a("li"),Mle=a("strong"),V4o=o("nystromformer"),X4o=o(" \u2014 "),Jq=a("a"),z4o=o("NystromformerForMaskedLM"),Q4o=o(" (Nystromformer model)"),W4o=l(),H1=a("li"),Ele=a("strong"),H4o=o("perceiver"),U4o=o(" \u2014 "),Yq=a("a"),J4o=o("PerceiverForMaskedLM"),Y4o=o(" (Perceiver model)"),K4o=l(),U1=a("li"),Cle=a("strong"),Z4o=o("qdqbert"),eEo=o(" \u2014 "),Kq=a("a"),oEo=o("QDQBertForMaskedLM"),rEo=o(" (QDQBert model)"),tEo=l(),J1=a("li"),wle=a("strong"),aEo=o("reformer"),nEo=o(" \u2014 "),Zq=a("a"),sEo=o("ReformerForMaskedLM"),lEo=o(" (Reformer model)"),iEo=l(),Y1=a("li"),Ale=a("strong"),dEo=o("rembert"),cEo=o(" \u2014 "),eN=a("a"),fEo=o("RemBertForMaskedLM"),mEo=o(" (RemBERT model)"),gEo=l(),K1=a("li"),yle=a("strong"),hEo=o("roberta"),pEo=o(" \u2014 "),oN=a("a"),_Eo=o("RobertaForMaskedLM"),uEo=o(" (RoBERTa model)"),bEo=l(),Z1=a("li"),Lle=a("strong"),vEo=o("roformer"),FEo=o(" \u2014 "),rN=a("a"),TEo=o("RoFormerForMaskedLM"),MEo=o(" (RoFormer model)"),EEo=l(),eb=a("li"),xle=a("strong"),CEo=o("squeezebert"),wEo=o(" \u2014 "),tN=a("a"),AEo=o("SqueezeBertForMaskedLM"),yEo=o(" (SqueezeBERT model)"),LEo=l(),ob=a("li"),kle=a("strong"),xEo=o("tapas"),kEo=o(" \u2014 "),aN=a("a"),SEo=o("TapasForMaskedLM"),REo=o(" (TAPAS model)"),BEo=l(),rb=a("li"),Sle=a("strong"),PEo=o("wav2vec2"),$Eo=o(" \u2014 "),Rle=a("code"),IEo=o("Wav2Vec2ForMaskedLM"),qEo=o(" (Wav2Vec2 model)"),NEo=l(),tb=a("li"),Ble=a("strong"),jEo=o("xlm"),DEo=o(" \u2014 "),nN=a("a"),GEo=o("XLMWithLMHeadModel"),OEo=o(" (XLM model)"),VEo=l(),ab=a("li"),Ple=a("strong"),XEo=o("xlm-roberta"),zEo=o(" \u2014 "),sN=a("a"),QEo=o("XLMRobertaForMaskedLM"),WEo=o(" (XLM-RoBERTa model)"),HEo=l(),nb=a("li"),$le=a("strong"),UEo=o("xlm-roberta-xl"),JEo=o(" \u2014 "),lN=a("a"),YEo=o("XLMRobertaXLForMaskedLM"),KEo=o(" (XLM-RoBERTa-XL model)"),ZEo=l(),sb=a("li"),Ile=a("strong"),e3o=o("yoso"),o3o=o(" \u2014 "),iN=a("a"),r3o=o("YosoForMaskedLM"),t3o=o(" (YOSO model)"),a3o=l(),lb=a("p"),n3o=o("The model is set in evaluation mode by default using "),qle=a("code"),s3o=o("model.eval()"),l3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=a("code"),i3o=o("model.train()"),d3o=l(),jle=a("p"),c3o=o("Examples:"),f3o=l(),f(Z3.$$.fragment),CPe=l(),ud=a("h2"),ib=a("a"),Dle=a("span"),f(eC.$$.fragment),m3o=l(),Gle=a("span"),g3o=o("AutoModelForSeq2SeqLM"),wPe=l(),er=a("div"),f(oC.$$.fragment),h3o=l(),bd=a("p"),p3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dN=a("a"),_3o=o("from_pretrained()"),u3o=o(" class method or the "),cN=a("a"),b3o=o("from_config()"),v3o=o(` class
method.`),F3o=l(),rC=a("p"),T3o=o("This class cannot be instantiated directly using "),Ole=a("code"),M3o=o("__init__()"),E3o=o(" (throws an error)."),C3o=l(),Hr=a("div"),f(tC.$$.fragment),w3o=l(),Vle=a("p"),A3o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),y3o=l(),vd=a("p"),L3o=o(`Note:
Loading a model from its configuration file does `),Xle=a("strong"),x3o=o("not"),k3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fN=a("a"),S3o=o("from_pretrained()"),R3o=o(" to load the model weights."),B3o=l(),zle=a("p"),P3o=o("Examples:"),$3o=l(),f(aC.$$.fragment),I3o=l(),Oe=a("div"),f(nC.$$.fragment),q3o=l(),Qle=a("p"),N3o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),j3o=l(),Ha=a("p"),D3o=o("The model class to instantiate is selected based on the "),Wle=a("code"),G3o=o("model_type"),O3o=o(` property of the config object (either
passed as an argument or loaded from `),Hle=a("code"),V3o=o("pretrained_model_name_or_path"),X3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ule=a("code"),z3o=o("pretrained_model_name_or_path"),Q3o=o(":"),W3o=l(),ne=a("ul"),db=a("li"),Jle=a("strong"),H3o=o("bart"),U3o=o(" \u2014 "),mN=a("a"),J3o=o("BartForConditionalGeneration"),Y3o=o(" (BART model)"),K3o=l(),cb=a("li"),Yle=a("strong"),Z3o=o("bigbird_pegasus"),eCo=o(" \u2014 "),gN=a("a"),oCo=o("BigBirdPegasusForConditionalGeneration"),rCo=o(" (BigBirdPegasus model)"),tCo=l(),fb=a("li"),Kle=a("strong"),aCo=o("blenderbot"),nCo=o(" \u2014 "),hN=a("a"),sCo=o("BlenderbotForConditionalGeneration"),lCo=o(" (Blenderbot model)"),iCo=l(),mb=a("li"),Zle=a("strong"),dCo=o("blenderbot-small"),cCo=o(" \u2014 "),pN=a("a"),fCo=o("BlenderbotSmallForConditionalGeneration"),mCo=o(" (BlenderbotSmall model)"),gCo=l(),gb=a("li"),eie=a("strong"),hCo=o("encoder-decoder"),pCo=o(" \u2014 "),_N=a("a"),_Co=o("EncoderDecoderModel"),uCo=o(" (Encoder decoder model)"),bCo=l(),hb=a("li"),oie=a("strong"),vCo=o("fsmt"),FCo=o(" \u2014 "),uN=a("a"),TCo=o("FSMTForConditionalGeneration"),MCo=o(" (FairSeq Machine-Translation model)"),ECo=l(),pb=a("li"),rie=a("strong"),CCo=o("led"),wCo=o(" \u2014 "),bN=a("a"),ACo=o("LEDForConditionalGeneration"),yCo=o(" (LED model)"),LCo=l(),_b=a("li"),tie=a("strong"),xCo=o("m2m_100"),kCo=o(" \u2014 "),vN=a("a"),SCo=o("M2M100ForConditionalGeneration"),RCo=o(" (M2M100 model)"),BCo=l(),ub=a("li"),aie=a("strong"),PCo=o("marian"),$Co=o(" \u2014 "),FN=a("a"),ICo=o("MarianMTModel"),qCo=o(" (Marian model)"),NCo=l(),bb=a("li"),nie=a("strong"),jCo=o("mbart"),DCo=o(" \u2014 "),TN=a("a"),GCo=o("MBartForConditionalGeneration"),OCo=o(" (mBART model)"),VCo=l(),vb=a("li"),sie=a("strong"),XCo=o("mt5"),zCo=o(" \u2014 "),MN=a("a"),QCo=o("MT5ForConditionalGeneration"),WCo=o(" (mT5 model)"),HCo=l(),Fb=a("li"),lie=a("strong"),UCo=o("pegasus"),JCo=o(" \u2014 "),EN=a("a"),YCo=o("PegasusForConditionalGeneration"),KCo=o(" (Pegasus model)"),ZCo=l(),Tb=a("li"),iie=a("strong"),ewo=o("plbart"),owo=o(" \u2014 "),CN=a("a"),rwo=o("PLBartForConditionalGeneration"),two=o(" (PLBart model)"),awo=l(),Mb=a("li"),die=a("strong"),nwo=o("prophetnet"),swo=o(" \u2014 "),wN=a("a"),lwo=o("ProphetNetForConditionalGeneration"),iwo=o(" (ProphetNet model)"),dwo=l(),Eb=a("li"),cie=a("strong"),cwo=o("t5"),fwo=o(" \u2014 "),AN=a("a"),mwo=o("T5ForConditionalGeneration"),gwo=o(" (T5 model)"),hwo=l(),Cb=a("li"),fie=a("strong"),pwo=o("tapex"),_wo=o(" \u2014 "),yN=a("a"),uwo=o("BartForConditionalGeneration"),bwo=o(" (TAPEX model)"),vwo=l(),wb=a("li"),mie=a("strong"),Fwo=o("xlm-prophetnet"),Two=o(" \u2014 "),LN=a("a"),Mwo=o("XLMProphetNetForConditionalGeneration"),Ewo=o(" (XLMProphetNet model)"),Cwo=l(),Ab=a("p"),wwo=o("The model is set in evaluation mode by default using "),gie=a("code"),Awo=o("model.eval()"),ywo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=a("code"),Lwo=o("model.train()"),xwo=l(),pie=a("p"),kwo=o("Examples:"),Swo=l(),f(sC.$$.fragment),APe=l(),Fd=a("h2"),yb=a("a"),_ie=a("span"),f(lC.$$.fragment),Rwo=l(),uie=a("span"),Bwo=o("AutoModelForSequenceClassification"),yPe=l(),or=a("div"),f(iC.$$.fragment),Pwo=l(),Td=a("p"),$wo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xN=a("a"),Iwo=o("from_pretrained()"),qwo=o(" class method or the "),kN=a("a"),Nwo=o("from_config()"),jwo=o(` class
method.`),Dwo=l(),dC=a("p"),Gwo=o("This class cannot be instantiated directly using "),bie=a("code"),Owo=o("__init__()"),Vwo=o(" (throws an error)."),Xwo=l(),Ur=a("div"),f(cC.$$.fragment),zwo=l(),vie=a("p"),Qwo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Wwo=l(),Md=a("p"),Hwo=o(`Note:
Loading a model from its configuration file does `),Fie=a("strong"),Uwo=o("not"),Jwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),SN=a("a"),Ywo=o("from_pretrained()"),Kwo=o(" to load the model weights."),Zwo=l(),Tie=a("p"),eAo=o("Examples:"),oAo=l(),f(fC.$$.fragment),rAo=l(),Ve=a("div"),f(mC.$$.fragment),tAo=l(),Mie=a("p"),aAo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),nAo=l(),Ua=a("p"),sAo=o("The model class to instantiate is selected based on the "),Eie=a("code"),lAo=o("model_type"),iAo=o(` property of the config object (either
passed as an argument or loaded from `),Cie=a("code"),dAo=o("pretrained_model_name_or_path"),cAo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=a("code"),fAo=o("pretrained_model_name_or_path"),mAo=o(":"),gAo=l(),y=a("ul"),Lb=a("li"),Aie=a("strong"),hAo=o("albert"),pAo=o(" \u2014 "),RN=a("a"),_Ao=o("AlbertForSequenceClassification"),uAo=o(" (ALBERT model)"),bAo=l(),xb=a("li"),yie=a("strong"),vAo=o("bart"),FAo=o(" \u2014 "),BN=a("a"),TAo=o("BartForSequenceClassification"),MAo=o(" (BART model)"),EAo=l(),kb=a("li"),Lie=a("strong"),CAo=o("bert"),wAo=o(" \u2014 "),PN=a("a"),AAo=o("BertForSequenceClassification"),yAo=o(" (BERT model)"),LAo=l(),Sb=a("li"),xie=a("strong"),xAo=o("big_bird"),kAo=o(" \u2014 "),$N=a("a"),SAo=o("BigBirdForSequenceClassification"),RAo=o(" (BigBird model)"),BAo=l(),Rb=a("li"),kie=a("strong"),PAo=o("bigbird_pegasus"),$Ao=o(" \u2014 "),IN=a("a"),IAo=o("BigBirdPegasusForSequenceClassification"),qAo=o(" (BigBirdPegasus model)"),NAo=l(),Bb=a("li"),Sie=a("strong"),jAo=o("camembert"),DAo=o(" \u2014 "),qN=a("a"),GAo=o("CamembertForSequenceClassification"),OAo=o(" (CamemBERT model)"),VAo=l(),Pb=a("li"),Rie=a("strong"),XAo=o("canine"),zAo=o(" \u2014 "),NN=a("a"),QAo=o("CanineForSequenceClassification"),WAo=o(" (Canine model)"),HAo=l(),$b=a("li"),Bie=a("strong"),UAo=o("convbert"),JAo=o(" \u2014 "),jN=a("a"),YAo=o("ConvBertForSequenceClassification"),KAo=o(" (ConvBERT model)"),ZAo=l(),Ib=a("li"),Pie=a("strong"),e0o=o("ctrl"),o0o=o(" \u2014 "),DN=a("a"),r0o=o("CTRLForSequenceClassification"),t0o=o(" (CTRL model)"),a0o=l(),qb=a("li"),$ie=a("strong"),n0o=o("data2vec-text"),s0o=o(" \u2014 "),GN=a("a"),l0o=o("Data2VecTextForSequenceClassification"),i0o=o(" (Data2VecText model)"),d0o=l(),Nb=a("li"),Iie=a("strong"),c0o=o("deberta"),f0o=o(" \u2014 "),ON=a("a"),m0o=o("DebertaForSequenceClassification"),g0o=o(" (DeBERTa model)"),h0o=l(),jb=a("li"),qie=a("strong"),p0o=o("deberta-v2"),_0o=o(" \u2014 "),VN=a("a"),u0o=o("DebertaV2ForSequenceClassification"),b0o=o(" (DeBERTa-v2 model)"),v0o=l(),Db=a("li"),Nie=a("strong"),F0o=o("distilbert"),T0o=o(" \u2014 "),XN=a("a"),M0o=o("DistilBertForSequenceClassification"),E0o=o(" (DistilBERT model)"),C0o=l(),Gb=a("li"),jie=a("strong"),w0o=o("electra"),A0o=o(" \u2014 "),zN=a("a"),y0o=o("ElectraForSequenceClassification"),L0o=o(" (ELECTRA model)"),x0o=l(),Ob=a("li"),Die=a("strong"),k0o=o("flaubert"),S0o=o(" \u2014 "),QN=a("a"),R0o=o("FlaubertForSequenceClassification"),B0o=o(" (FlauBERT model)"),P0o=l(),Vb=a("li"),Gie=a("strong"),$0o=o("fnet"),I0o=o(" \u2014 "),WN=a("a"),q0o=o("FNetForSequenceClassification"),N0o=o(" (FNet model)"),j0o=l(),Xb=a("li"),Oie=a("strong"),D0o=o("funnel"),G0o=o(" \u2014 "),HN=a("a"),O0o=o("FunnelForSequenceClassification"),V0o=o(" (Funnel Transformer model)"),X0o=l(),zb=a("li"),Vie=a("strong"),z0o=o("gpt2"),Q0o=o(" \u2014 "),UN=a("a"),W0o=o("GPT2ForSequenceClassification"),H0o=o(" (OpenAI GPT-2 model)"),U0o=l(),Qb=a("li"),Xie=a("strong"),J0o=o("gpt_neo"),Y0o=o(" \u2014 "),JN=a("a"),K0o=o("GPTNeoForSequenceClassification"),Z0o=o(" (GPT Neo model)"),eyo=l(),Wb=a("li"),zie=a("strong"),oyo=o("gptj"),ryo=o(" \u2014 "),YN=a("a"),tyo=o("GPTJForSequenceClassification"),ayo=o(" (GPT-J model)"),nyo=l(),Hb=a("li"),Qie=a("strong"),syo=o("ibert"),lyo=o(" \u2014 "),KN=a("a"),iyo=o("IBertForSequenceClassification"),dyo=o(" (I-BERT model)"),cyo=l(),Ub=a("li"),Wie=a("strong"),fyo=o("layoutlm"),myo=o(" \u2014 "),ZN=a("a"),gyo=o("LayoutLMForSequenceClassification"),hyo=o(" (LayoutLM model)"),pyo=l(),Jb=a("li"),Hie=a("strong"),_yo=o("layoutlmv2"),uyo=o(" \u2014 "),ej=a("a"),byo=o("LayoutLMv2ForSequenceClassification"),vyo=o(" (LayoutLMv2 model)"),Fyo=l(),Yb=a("li"),Uie=a("strong"),Tyo=o("led"),Myo=o(" \u2014 "),oj=a("a"),Eyo=o("LEDForSequenceClassification"),Cyo=o(" (LED model)"),wyo=l(),Kb=a("li"),Jie=a("strong"),Ayo=o("longformer"),yyo=o(" \u2014 "),rj=a("a"),Lyo=o("LongformerForSequenceClassification"),xyo=o(" (Longformer model)"),kyo=l(),Zb=a("li"),Yie=a("strong"),Syo=o("mbart"),Ryo=o(" \u2014 "),tj=a("a"),Byo=o("MBartForSequenceClassification"),Pyo=o(" (mBART model)"),$yo=l(),e2=a("li"),Kie=a("strong"),Iyo=o("megatron-bert"),qyo=o(" \u2014 "),aj=a("a"),Nyo=o("MegatronBertForSequenceClassification"),jyo=o(" (MegatronBert model)"),Dyo=l(),o2=a("li"),Zie=a("strong"),Gyo=o("mobilebert"),Oyo=o(" \u2014 "),nj=a("a"),Vyo=o("MobileBertForSequenceClassification"),Xyo=o(" (MobileBERT model)"),zyo=l(),r2=a("li"),ede=a("strong"),Qyo=o("mpnet"),Wyo=o(" \u2014 "),sj=a("a"),Hyo=o("MPNetForSequenceClassification"),Uyo=o(" (MPNet model)"),Jyo=l(),t2=a("li"),ode=a("strong"),Yyo=o("nystromformer"),Kyo=o(" \u2014 "),lj=a("a"),Zyo=o("NystromformerForSequenceClassification"),eLo=o(" (Nystromformer model)"),oLo=l(),a2=a("li"),rde=a("strong"),rLo=o("openai-gpt"),tLo=o(" \u2014 "),ij=a("a"),aLo=o("OpenAIGPTForSequenceClassification"),nLo=o(" (OpenAI GPT model)"),sLo=l(),n2=a("li"),tde=a("strong"),lLo=o("perceiver"),iLo=o(" \u2014 "),dj=a("a"),dLo=o("PerceiverForSequenceClassification"),cLo=o(" (Perceiver model)"),fLo=l(),s2=a("li"),ade=a("strong"),mLo=o("plbart"),gLo=o(" \u2014 "),cj=a("a"),hLo=o("PLBartForSequenceClassification"),pLo=o(" (PLBart model)"),_Lo=l(),l2=a("li"),nde=a("strong"),uLo=o("qdqbert"),bLo=o(" \u2014 "),fj=a("a"),vLo=o("QDQBertForSequenceClassification"),FLo=o(" (QDQBert model)"),TLo=l(),i2=a("li"),sde=a("strong"),MLo=o("reformer"),ELo=o(" \u2014 "),mj=a("a"),CLo=o("ReformerForSequenceClassification"),wLo=o(" (Reformer model)"),ALo=l(),d2=a("li"),lde=a("strong"),yLo=o("rembert"),LLo=o(" \u2014 "),gj=a("a"),xLo=o("RemBertForSequenceClassification"),kLo=o(" (RemBERT model)"),SLo=l(),c2=a("li"),ide=a("strong"),RLo=o("roberta"),BLo=o(" \u2014 "),hj=a("a"),PLo=o("RobertaForSequenceClassification"),$Lo=o(" (RoBERTa model)"),ILo=l(),f2=a("li"),dde=a("strong"),qLo=o("roformer"),NLo=o(" \u2014 "),pj=a("a"),jLo=o("RoFormerForSequenceClassification"),DLo=o(" (RoFormer model)"),GLo=l(),m2=a("li"),cde=a("strong"),OLo=o("squeezebert"),VLo=o(" \u2014 "),_j=a("a"),XLo=o("SqueezeBertForSequenceClassification"),zLo=o(" (SqueezeBERT model)"),QLo=l(),g2=a("li"),fde=a("strong"),WLo=o("tapas"),HLo=o(" \u2014 "),uj=a("a"),ULo=o("TapasForSequenceClassification"),JLo=o(" (TAPAS model)"),YLo=l(),h2=a("li"),mde=a("strong"),KLo=o("tapex"),ZLo=o(" \u2014 "),bj=a("a"),e9o=o("BartForSequenceClassification"),o9o=o(" (TAPEX model)"),r9o=l(),p2=a("li"),gde=a("strong"),t9o=o("transfo-xl"),a9o=o(" \u2014 "),vj=a("a"),n9o=o("TransfoXLForSequenceClassification"),s9o=o(" (Transformer-XL model)"),l9o=l(),_2=a("li"),hde=a("strong"),i9o=o("xlm"),d9o=o(" \u2014 "),Fj=a("a"),c9o=o("XLMForSequenceClassification"),f9o=o(" (XLM model)"),m9o=l(),u2=a("li"),pde=a("strong"),g9o=o("xlm-roberta"),h9o=o(" \u2014 "),Tj=a("a"),p9o=o("XLMRobertaForSequenceClassification"),_9o=o(" (XLM-RoBERTa model)"),u9o=l(),b2=a("li"),_de=a("strong"),b9o=o("xlm-roberta-xl"),v9o=o(" \u2014 "),Mj=a("a"),F9o=o("XLMRobertaXLForSequenceClassification"),T9o=o(" (XLM-RoBERTa-XL model)"),M9o=l(),v2=a("li"),ude=a("strong"),E9o=o("xlnet"),C9o=o(" \u2014 "),Ej=a("a"),w9o=o("XLNetForSequenceClassification"),A9o=o(" (XLNet model)"),y9o=l(),F2=a("li"),bde=a("strong"),L9o=o("yoso"),x9o=o(" \u2014 "),Cj=a("a"),k9o=o("YosoForSequenceClassification"),S9o=o(" (YOSO model)"),R9o=l(),T2=a("p"),B9o=o("The model is set in evaluation mode by default using "),vde=a("code"),P9o=o("model.eval()"),$9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=a("code"),I9o=o("model.train()"),q9o=l(),Tde=a("p"),N9o=o("Examples:"),j9o=l(),f(gC.$$.fragment),LPe=l(),Ed=a("h2"),M2=a("a"),Mde=a("span"),f(hC.$$.fragment),D9o=l(),Ede=a("span"),G9o=o("AutoModelForMultipleChoice"),xPe=l(),rr=a("div"),f(pC.$$.fragment),O9o=l(),Cd=a("p"),V9o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wj=a("a"),X9o=o("from_pretrained()"),z9o=o(" class method or the "),Aj=a("a"),Q9o=o("from_config()"),W9o=o(` class
method.`),H9o=l(),_C=a("p"),U9o=o("This class cannot be instantiated directly using "),Cde=a("code"),J9o=o("__init__()"),Y9o=o(" (throws an error)."),K9o=l(),Jr=a("div"),f(uC.$$.fragment),Z9o=l(),wde=a("p"),exo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),oxo=l(),wd=a("p"),rxo=o(`Note:
Loading a model from its configuration file does `),Ade=a("strong"),txo=o("not"),axo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=a("a"),nxo=o("from_pretrained()"),sxo=o(" to load the model weights."),lxo=l(),yde=a("p"),ixo=o("Examples:"),dxo=l(),f(bC.$$.fragment),cxo=l(),Xe=a("div"),f(vC.$$.fragment),fxo=l(),Lde=a("p"),mxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),gxo=l(),Ja=a("p"),hxo=o("The model class to instantiate is selected based on the "),xde=a("code"),pxo=o("model_type"),_xo=o(` property of the config object (either
passed as an argument or loaded from `),kde=a("code"),uxo=o("pretrained_model_name_or_path"),bxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=a("code"),vxo=o("pretrained_model_name_or_path"),Fxo=o(":"),Txo=l(),G=a("ul"),E2=a("li"),Rde=a("strong"),Mxo=o("albert"),Exo=o(" \u2014 "),Lj=a("a"),Cxo=o("AlbertForMultipleChoice"),wxo=o(" (ALBERT model)"),Axo=l(),C2=a("li"),Bde=a("strong"),yxo=o("bert"),Lxo=o(" \u2014 "),xj=a("a"),xxo=o("BertForMultipleChoice"),kxo=o(" (BERT model)"),Sxo=l(),w2=a("li"),Pde=a("strong"),Rxo=o("big_bird"),Bxo=o(" \u2014 "),kj=a("a"),Pxo=o("BigBirdForMultipleChoice"),$xo=o(" (BigBird model)"),Ixo=l(),A2=a("li"),$de=a("strong"),qxo=o("camembert"),Nxo=o(" \u2014 "),Sj=a("a"),jxo=o("CamembertForMultipleChoice"),Dxo=o(" (CamemBERT model)"),Gxo=l(),y2=a("li"),Ide=a("strong"),Oxo=o("canine"),Vxo=o(" \u2014 "),Rj=a("a"),Xxo=o("CanineForMultipleChoice"),zxo=o(" (Canine model)"),Qxo=l(),L2=a("li"),qde=a("strong"),Wxo=o("convbert"),Hxo=o(" \u2014 "),Bj=a("a"),Uxo=o("ConvBertForMultipleChoice"),Jxo=o(" (ConvBERT model)"),Yxo=l(),x2=a("li"),Nde=a("strong"),Kxo=o("data2vec-text"),Zxo=o(" \u2014 "),Pj=a("a"),eko=o("Data2VecTextForMultipleChoice"),oko=o(" (Data2VecText model)"),rko=l(),k2=a("li"),jde=a("strong"),tko=o("distilbert"),ako=o(" \u2014 "),$j=a("a"),nko=o("DistilBertForMultipleChoice"),sko=o(" (DistilBERT model)"),lko=l(),S2=a("li"),Dde=a("strong"),iko=o("electra"),dko=o(" \u2014 "),Ij=a("a"),cko=o("ElectraForMultipleChoice"),fko=o(" (ELECTRA model)"),mko=l(),R2=a("li"),Gde=a("strong"),gko=o("flaubert"),hko=o(" \u2014 "),qj=a("a"),pko=o("FlaubertForMultipleChoice"),_ko=o(" (FlauBERT model)"),uko=l(),B2=a("li"),Ode=a("strong"),bko=o("fnet"),vko=o(" \u2014 "),Nj=a("a"),Fko=o("FNetForMultipleChoice"),Tko=o(" (FNet model)"),Mko=l(),P2=a("li"),Vde=a("strong"),Eko=o("funnel"),Cko=o(" \u2014 "),jj=a("a"),wko=o("FunnelForMultipleChoice"),Ako=o(" (Funnel Transformer model)"),yko=l(),$2=a("li"),Xde=a("strong"),Lko=o("ibert"),xko=o(" \u2014 "),Dj=a("a"),kko=o("IBertForMultipleChoice"),Sko=o(" (I-BERT model)"),Rko=l(),I2=a("li"),zde=a("strong"),Bko=o("longformer"),Pko=o(" \u2014 "),Gj=a("a"),$ko=o("LongformerForMultipleChoice"),Iko=o(" (Longformer model)"),qko=l(),q2=a("li"),Qde=a("strong"),Nko=o("megatron-bert"),jko=o(" \u2014 "),Oj=a("a"),Dko=o("MegatronBertForMultipleChoice"),Gko=o(" (MegatronBert model)"),Oko=l(),N2=a("li"),Wde=a("strong"),Vko=o("mobilebert"),Xko=o(" \u2014 "),Vj=a("a"),zko=o("MobileBertForMultipleChoice"),Qko=o(" (MobileBERT model)"),Wko=l(),j2=a("li"),Hde=a("strong"),Hko=o("mpnet"),Uko=o(" \u2014 "),Xj=a("a"),Jko=o("MPNetForMultipleChoice"),Yko=o(" (MPNet model)"),Kko=l(),D2=a("li"),Ude=a("strong"),Zko=o("nystromformer"),eSo=o(" \u2014 "),zj=a("a"),oSo=o("NystromformerForMultipleChoice"),rSo=o(" (Nystromformer model)"),tSo=l(),G2=a("li"),Jde=a("strong"),aSo=o("qdqbert"),nSo=o(" \u2014 "),Qj=a("a"),sSo=o("QDQBertForMultipleChoice"),lSo=o(" (QDQBert model)"),iSo=l(),O2=a("li"),Yde=a("strong"),dSo=o("rembert"),cSo=o(" \u2014 "),Wj=a("a"),fSo=o("RemBertForMultipleChoice"),mSo=o(" (RemBERT model)"),gSo=l(),V2=a("li"),Kde=a("strong"),hSo=o("roberta"),pSo=o(" \u2014 "),Hj=a("a"),_So=o("RobertaForMultipleChoice"),uSo=o(" (RoBERTa model)"),bSo=l(),X2=a("li"),Zde=a("strong"),vSo=o("roformer"),FSo=o(" \u2014 "),Uj=a("a"),TSo=o("RoFormerForMultipleChoice"),MSo=o(" (RoFormer model)"),ESo=l(),z2=a("li"),ece=a("strong"),CSo=o("squeezebert"),wSo=o(" \u2014 "),Jj=a("a"),ASo=o("SqueezeBertForMultipleChoice"),ySo=o(" (SqueezeBERT model)"),LSo=l(),Q2=a("li"),oce=a("strong"),xSo=o("xlm"),kSo=o(" \u2014 "),Yj=a("a"),SSo=o("XLMForMultipleChoice"),RSo=o(" (XLM model)"),BSo=l(),W2=a("li"),rce=a("strong"),PSo=o("xlm-roberta"),$So=o(" \u2014 "),Kj=a("a"),ISo=o("XLMRobertaForMultipleChoice"),qSo=o(" (XLM-RoBERTa model)"),NSo=l(),H2=a("li"),tce=a("strong"),jSo=o("xlm-roberta-xl"),DSo=o(" \u2014 "),Zj=a("a"),GSo=o("XLMRobertaXLForMultipleChoice"),OSo=o(" (XLM-RoBERTa-XL model)"),VSo=l(),U2=a("li"),ace=a("strong"),XSo=o("xlnet"),zSo=o(" \u2014 "),eD=a("a"),QSo=o("XLNetForMultipleChoice"),WSo=o(" (XLNet model)"),HSo=l(),J2=a("li"),nce=a("strong"),USo=o("yoso"),JSo=o(" \u2014 "),oD=a("a"),YSo=o("YosoForMultipleChoice"),KSo=o(" (YOSO model)"),ZSo=l(),Y2=a("p"),eRo=o("The model is set in evaluation mode by default using "),sce=a("code"),oRo=o("model.eval()"),rRo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lce=a("code"),tRo=o("model.train()"),aRo=l(),ice=a("p"),nRo=o("Examples:"),sRo=l(),f(FC.$$.fragment),kPe=l(),Ad=a("h2"),K2=a("a"),dce=a("span"),f(TC.$$.fragment),lRo=l(),cce=a("span"),iRo=o("AutoModelForNextSentencePrediction"),SPe=l(),tr=a("div"),f(MC.$$.fragment),dRo=l(),yd=a("p"),cRo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rD=a("a"),fRo=o("from_pretrained()"),mRo=o(" class method or the "),tD=a("a"),gRo=o("from_config()"),hRo=o(` class
method.`),pRo=l(),EC=a("p"),_Ro=o("This class cannot be instantiated directly using "),fce=a("code"),uRo=o("__init__()"),bRo=o(" (throws an error)."),vRo=l(),Yr=a("div"),f(CC.$$.fragment),FRo=l(),mce=a("p"),TRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),MRo=l(),Ld=a("p"),ERo=o(`Note:
Loading a model from its configuration file does `),gce=a("strong"),CRo=o("not"),wRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=a("a"),ARo=o("from_pretrained()"),yRo=o(" to load the model weights."),LRo=l(),hce=a("p"),xRo=o("Examples:"),kRo=l(),f(wC.$$.fragment),SRo=l(),ze=a("div"),f(AC.$$.fragment),RRo=l(),pce=a("p"),BRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),PRo=l(),Ya=a("p"),$Ro=o("The model class to instantiate is selected based on the "),_ce=a("code"),IRo=o("model_type"),qRo=o(` property of the config object (either
passed as an argument or loaded from `),uce=a("code"),NRo=o("pretrained_model_name_or_path"),jRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=a("code"),DRo=o("pretrained_model_name_or_path"),GRo=o(":"),ORo=l(),da=a("ul"),Z2=a("li"),vce=a("strong"),VRo=o("bert"),XRo=o(" \u2014 "),nD=a("a"),zRo=o("BertForNextSentencePrediction"),QRo=o(" (BERT model)"),WRo=l(),e5=a("li"),Fce=a("strong"),HRo=o("fnet"),URo=o(" \u2014 "),sD=a("a"),JRo=o("FNetForNextSentencePrediction"),YRo=o(" (FNet model)"),KRo=l(),o5=a("li"),Tce=a("strong"),ZRo=o("megatron-bert"),eBo=o(" \u2014 "),lD=a("a"),oBo=o("MegatronBertForNextSentencePrediction"),rBo=o(" (MegatronBert model)"),tBo=l(),r5=a("li"),Mce=a("strong"),aBo=o("mobilebert"),nBo=o(" \u2014 "),iD=a("a"),sBo=o("MobileBertForNextSentencePrediction"),lBo=o(" (MobileBERT model)"),iBo=l(),t5=a("li"),Ece=a("strong"),dBo=o("qdqbert"),cBo=o(" \u2014 "),dD=a("a"),fBo=o("QDQBertForNextSentencePrediction"),mBo=o(" (QDQBert model)"),gBo=l(),a5=a("p"),hBo=o("The model is set in evaluation mode by default using "),Cce=a("code"),pBo=o("model.eval()"),_Bo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wce=a("code"),uBo=o("model.train()"),bBo=l(),Ace=a("p"),vBo=o("Examples:"),FBo=l(),f(yC.$$.fragment),RPe=l(),xd=a("h2"),n5=a("a"),yce=a("span"),f(LC.$$.fragment),TBo=l(),Lce=a("span"),MBo=o("AutoModelForTokenClassification"),BPe=l(),ar=a("div"),f(xC.$$.fragment),EBo=l(),kd=a("p"),CBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cD=a("a"),wBo=o("from_pretrained()"),ABo=o(" class method or the "),fD=a("a"),yBo=o("from_config()"),LBo=o(` class
method.`),xBo=l(),kC=a("p"),kBo=o("This class cannot be instantiated directly using "),xce=a("code"),SBo=o("__init__()"),RBo=o(" (throws an error)."),BBo=l(),Kr=a("div"),f(SC.$$.fragment),PBo=l(),kce=a("p"),$Bo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),IBo=l(),Sd=a("p"),qBo=o(`Note:
Loading a model from its configuration file does `),Sce=a("strong"),NBo=o("not"),jBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=a("a"),DBo=o("from_pretrained()"),GBo=o(" to load the model weights."),OBo=l(),Rce=a("p"),VBo=o("Examples:"),XBo=l(),f(RC.$$.fragment),zBo=l(),Qe=a("div"),f(BC.$$.fragment),QBo=l(),Bce=a("p"),WBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),HBo=l(),Ka=a("p"),UBo=o("The model class to instantiate is selected based on the "),Pce=a("code"),JBo=o("model_type"),YBo=o(` property of the config object (either
passed as an argument or loaded from `),$ce=a("code"),KBo=o("pretrained_model_name_or_path"),ZBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=a("code"),ePo=o("pretrained_model_name_or_path"),oPo=o(":"),rPo=l(),j=a("ul"),s5=a("li"),qce=a("strong"),tPo=o("albert"),aPo=o(" \u2014 "),gD=a("a"),nPo=o("AlbertForTokenClassification"),sPo=o(" (ALBERT model)"),lPo=l(),l5=a("li"),Nce=a("strong"),iPo=o("bert"),dPo=o(" \u2014 "),hD=a("a"),cPo=o("BertForTokenClassification"),fPo=o(" (BERT model)"),mPo=l(),i5=a("li"),jce=a("strong"),gPo=o("big_bird"),hPo=o(" \u2014 "),pD=a("a"),pPo=o("BigBirdForTokenClassification"),_Po=o(" (BigBird model)"),uPo=l(),d5=a("li"),Dce=a("strong"),bPo=o("camembert"),vPo=o(" \u2014 "),_D=a("a"),FPo=o("CamembertForTokenClassification"),TPo=o(" (CamemBERT model)"),MPo=l(),c5=a("li"),Gce=a("strong"),EPo=o("canine"),CPo=o(" \u2014 "),uD=a("a"),wPo=o("CanineForTokenClassification"),APo=o(" (Canine model)"),yPo=l(),f5=a("li"),Oce=a("strong"),LPo=o("convbert"),xPo=o(" \u2014 "),bD=a("a"),kPo=o("ConvBertForTokenClassification"),SPo=o(" (ConvBERT model)"),RPo=l(),m5=a("li"),Vce=a("strong"),BPo=o("data2vec-text"),PPo=o(" \u2014 "),vD=a("a"),$Po=o("Data2VecTextForTokenClassification"),IPo=o(" (Data2VecText model)"),qPo=l(),g5=a("li"),Xce=a("strong"),NPo=o("deberta"),jPo=o(" \u2014 "),FD=a("a"),DPo=o("DebertaForTokenClassification"),GPo=o(" (DeBERTa model)"),OPo=l(),h5=a("li"),zce=a("strong"),VPo=o("deberta-v2"),XPo=o(" \u2014 "),TD=a("a"),zPo=o("DebertaV2ForTokenClassification"),QPo=o(" (DeBERTa-v2 model)"),WPo=l(),p5=a("li"),Qce=a("strong"),HPo=o("distilbert"),UPo=o(" \u2014 "),MD=a("a"),JPo=o("DistilBertForTokenClassification"),YPo=o(" (DistilBERT model)"),KPo=l(),_5=a("li"),Wce=a("strong"),ZPo=o("electra"),e$o=o(" \u2014 "),ED=a("a"),o$o=o("ElectraForTokenClassification"),r$o=o(" (ELECTRA model)"),t$o=l(),u5=a("li"),Hce=a("strong"),a$o=o("flaubert"),n$o=o(" \u2014 "),CD=a("a"),s$o=o("FlaubertForTokenClassification"),l$o=o(" (FlauBERT model)"),i$o=l(),b5=a("li"),Uce=a("strong"),d$o=o("fnet"),c$o=o(" \u2014 "),wD=a("a"),f$o=o("FNetForTokenClassification"),m$o=o(" (FNet model)"),g$o=l(),v5=a("li"),Jce=a("strong"),h$o=o("funnel"),p$o=o(" \u2014 "),AD=a("a"),_$o=o("FunnelForTokenClassification"),u$o=o(" (Funnel Transformer model)"),b$o=l(),F5=a("li"),Yce=a("strong"),v$o=o("gpt2"),F$o=o(" \u2014 "),yD=a("a"),T$o=o("GPT2ForTokenClassification"),M$o=o(" (OpenAI GPT-2 model)"),E$o=l(),T5=a("li"),Kce=a("strong"),C$o=o("ibert"),w$o=o(" \u2014 "),LD=a("a"),A$o=o("IBertForTokenClassification"),y$o=o(" (I-BERT model)"),L$o=l(),M5=a("li"),Zce=a("strong"),x$o=o("layoutlm"),k$o=o(" \u2014 "),xD=a("a"),S$o=o("LayoutLMForTokenClassification"),R$o=o(" (LayoutLM model)"),B$o=l(),E5=a("li"),efe=a("strong"),P$o=o("layoutlmv2"),$$o=o(" \u2014 "),kD=a("a"),I$o=o("LayoutLMv2ForTokenClassification"),q$o=o(" (LayoutLMv2 model)"),N$o=l(),C5=a("li"),ofe=a("strong"),j$o=o("longformer"),D$o=o(" \u2014 "),SD=a("a"),G$o=o("LongformerForTokenClassification"),O$o=o(" (Longformer model)"),V$o=l(),w5=a("li"),rfe=a("strong"),X$o=o("megatron-bert"),z$o=o(" \u2014 "),RD=a("a"),Q$o=o("MegatronBertForTokenClassification"),W$o=o(" (MegatronBert model)"),H$o=l(),A5=a("li"),tfe=a("strong"),U$o=o("mobilebert"),J$o=o(" \u2014 "),BD=a("a"),Y$o=o("MobileBertForTokenClassification"),K$o=o(" (MobileBERT model)"),Z$o=l(),y5=a("li"),afe=a("strong"),eIo=o("mpnet"),oIo=o(" \u2014 "),PD=a("a"),rIo=o("MPNetForTokenClassification"),tIo=o(" (MPNet model)"),aIo=l(),L5=a("li"),nfe=a("strong"),nIo=o("nystromformer"),sIo=o(" \u2014 "),$D=a("a"),lIo=o("NystromformerForTokenClassification"),iIo=o(" (Nystromformer model)"),dIo=l(),x5=a("li"),sfe=a("strong"),cIo=o("qdqbert"),fIo=o(" \u2014 "),ID=a("a"),mIo=o("QDQBertForTokenClassification"),gIo=o(" (QDQBert model)"),hIo=l(),k5=a("li"),lfe=a("strong"),pIo=o("rembert"),_Io=o(" \u2014 "),qD=a("a"),uIo=o("RemBertForTokenClassification"),bIo=o(" (RemBERT model)"),vIo=l(),S5=a("li"),ife=a("strong"),FIo=o("roberta"),TIo=o(" \u2014 "),ND=a("a"),MIo=o("RobertaForTokenClassification"),EIo=o(" (RoBERTa model)"),CIo=l(),R5=a("li"),dfe=a("strong"),wIo=o("roformer"),AIo=o(" \u2014 "),jD=a("a"),yIo=o("RoFormerForTokenClassification"),LIo=o(" (RoFormer model)"),xIo=l(),B5=a("li"),cfe=a("strong"),kIo=o("squeezebert"),SIo=o(" \u2014 "),DD=a("a"),RIo=o("SqueezeBertForTokenClassification"),BIo=o(" (SqueezeBERT model)"),PIo=l(),P5=a("li"),ffe=a("strong"),$Io=o("xlm"),IIo=o(" \u2014 "),GD=a("a"),qIo=o("XLMForTokenClassification"),NIo=o(" (XLM model)"),jIo=l(),$5=a("li"),mfe=a("strong"),DIo=o("xlm-roberta"),GIo=o(" \u2014 "),OD=a("a"),OIo=o("XLMRobertaForTokenClassification"),VIo=o(" (XLM-RoBERTa model)"),XIo=l(),I5=a("li"),gfe=a("strong"),zIo=o("xlm-roberta-xl"),QIo=o(" \u2014 "),VD=a("a"),WIo=o("XLMRobertaXLForTokenClassification"),HIo=o(" (XLM-RoBERTa-XL model)"),UIo=l(),q5=a("li"),hfe=a("strong"),JIo=o("xlnet"),YIo=o(" \u2014 "),XD=a("a"),KIo=o("XLNetForTokenClassification"),ZIo=o(" (XLNet model)"),eqo=l(),N5=a("li"),pfe=a("strong"),oqo=o("yoso"),rqo=o(" \u2014 "),zD=a("a"),tqo=o("YosoForTokenClassification"),aqo=o(" (YOSO model)"),nqo=l(),j5=a("p"),sqo=o("The model is set in evaluation mode by default using "),_fe=a("code"),lqo=o("model.eval()"),iqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=a("code"),dqo=o("model.train()"),cqo=l(),bfe=a("p"),fqo=o("Examples:"),mqo=l(),f(PC.$$.fragment),PPe=l(),Rd=a("h2"),D5=a("a"),vfe=a("span"),f($C.$$.fragment),gqo=l(),Ffe=a("span"),hqo=o("AutoModelForQuestionAnswering"),$Pe=l(),nr=a("div"),f(IC.$$.fragment),pqo=l(),Bd=a("p"),_qo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QD=a("a"),uqo=o("from_pretrained()"),bqo=o(" class method or the "),WD=a("a"),vqo=o("from_config()"),Fqo=o(` class
method.`),Tqo=l(),qC=a("p"),Mqo=o("This class cannot be instantiated directly using "),Tfe=a("code"),Eqo=o("__init__()"),Cqo=o(" (throws an error)."),wqo=l(),Zr=a("div"),f(NC.$$.fragment),Aqo=l(),Mfe=a("p"),yqo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Lqo=l(),Pd=a("p"),xqo=o(`Note:
Loading a model from its configuration file does `),Efe=a("strong"),kqo=o("not"),Sqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=a("a"),Rqo=o("from_pretrained()"),Bqo=o(" to load the model weights."),Pqo=l(),Cfe=a("p"),$qo=o("Examples:"),Iqo=l(),f(jC.$$.fragment),qqo=l(),We=a("div"),f(DC.$$.fragment),Nqo=l(),wfe=a("p"),jqo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Dqo=l(),Za=a("p"),Gqo=o("The model class to instantiate is selected based on the "),Afe=a("code"),Oqo=o("model_type"),Vqo=o(` property of the config object (either
passed as an argument or loaded from `),yfe=a("code"),Xqo=o("pretrained_model_name_or_path"),zqo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=a("code"),Qqo=o("pretrained_model_name_or_path"),Wqo=o(":"),Hqo=l(),R=a("ul"),G5=a("li"),xfe=a("strong"),Uqo=o("albert"),Jqo=o(" \u2014 "),UD=a("a"),Yqo=o("AlbertForQuestionAnswering"),Kqo=o(" (ALBERT model)"),Zqo=l(),O5=a("li"),kfe=a("strong"),eNo=o("bart"),oNo=o(" \u2014 "),JD=a("a"),rNo=o("BartForQuestionAnswering"),tNo=o(" (BART model)"),aNo=l(),V5=a("li"),Sfe=a("strong"),nNo=o("bert"),sNo=o(" \u2014 "),YD=a("a"),lNo=o("BertForQuestionAnswering"),iNo=o(" (BERT model)"),dNo=l(),X5=a("li"),Rfe=a("strong"),cNo=o("big_bird"),fNo=o(" \u2014 "),KD=a("a"),mNo=o("BigBirdForQuestionAnswering"),gNo=o(" (BigBird model)"),hNo=l(),z5=a("li"),Bfe=a("strong"),pNo=o("bigbird_pegasus"),_No=o(" \u2014 "),ZD=a("a"),uNo=o("BigBirdPegasusForQuestionAnswering"),bNo=o(" (BigBirdPegasus model)"),vNo=l(),Q5=a("li"),Pfe=a("strong"),FNo=o("camembert"),TNo=o(" \u2014 "),eG=a("a"),MNo=o("CamembertForQuestionAnswering"),ENo=o(" (CamemBERT model)"),CNo=l(),W5=a("li"),$fe=a("strong"),wNo=o("canine"),ANo=o(" \u2014 "),oG=a("a"),yNo=o("CanineForQuestionAnswering"),LNo=o(" (Canine model)"),xNo=l(),H5=a("li"),Ife=a("strong"),kNo=o("convbert"),SNo=o(" \u2014 "),rG=a("a"),RNo=o("ConvBertForQuestionAnswering"),BNo=o(" (ConvBERT model)"),PNo=l(),U5=a("li"),qfe=a("strong"),$No=o("data2vec-text"),INo=o(" \u2014 "),tG=a("a"),qNo=o("Data2VecTextForQuestionAnswering"),NNo=o(" (Data2VecText model)"),jNo=l(),J5=a("li"),Nfe=a("strong"),DNo=o("deberta"),GNo=o(" \u2014 "),aG=a("a"),ONo=o("DebertaForQuestionAnswering"),VNo=o(" (DeBERTa model)"),XNo=l(),Y5=a("li"),jfe=a("strong"),zNo=o("deberta-v2"),QNo=o(" \u2014 "),nG=a("a"),WNo=o("DebertaV2ForQuestionAnswering"),HNo=o(" (DeBERTa-v2 model)"),UNo=l(),K5=a("li"),Dfe=a("strong"),JNo=o("distilbert"),YNo=o(" \u2014 "),sG=a("a"),KNo=o("DistilBertForQuestionAnswering"),ZNo=o(" (DistilBERT model)"),ejo=l(),Z5=a("li"),Gfe=a("strong"),ojo=o("electra"),rjo=o(" \u2014 "),lG=a("a"),tjo=o("ElectraForQuestionAnswering"),ajo=o(" (ELECTRA model)"),njo=l(),e6=a("li"),Ofe=a("strong"),sjo=o("flaubert"),ljo=o(" \u2014 "),iG=a("a"),ijo=o("FlaubertForQuestionAnsweringSimple"),djo=o(" (FlauBERT model)"),cjo=l(),o6=a("li"),Vfe=a("strong"),fjo=o("fnet"),mjo=o(" \u2014 "),dG=a("a"),gjo=o("FNetForQuestionAnswering"),hjo=o(" (FNet model)"),pjo=l(),r6=a("li"),Xfe=a("strong"),_jo=o("funnel"),ujo=o(" \u2014 "),cG=a("a"),bjo=o("FunnelForQuestionAnswering"),vjo=o(" (Funnel Transformer model)"),Fjo=l(),t6=a("li"),zfe=a("strong"),Tjo=o("gptj"),Mjo=o(" \u2014 "),fG=a("a"),Ejo=o("GPTJForQuestionAnswering"),Cjo=o(" (GPT-J model)"),wjo=l(),a6=a("li"),Qfe=a("strong"),Ajo=o("ibert"),yjo=o(" \u2014 "),mG=a("a"),Ljo=o("IBertForQuestionAnswering"),xjo=o(" (I-BERT model)"),kjo=l(),n6=a("li"),Wfe=a("strong"),Sjo=o("layoutlmv2"),Rjo=o(" \u2014 "),gG=a("a"),Bjo=o("LayoutLMv2ForQuestionAnswering"),Pjo=o(" (LayoutLMv2 model)"),$jo=l(),s6=a("li"),Hfe=a("strong"),Ijo=o("led"),qjo=o(" \u2014 "),hG=a("a"),Njo=o("LEDForQuestionAnswering"),jjo=o(" (LED model)"),Djo=l(),l6=a("li"),Ufe=a("strong"),Gjo=o("longformer"),Ojo=o(" \u2014 "),pG=a("a"),Vjo=o("LongformerForQuestionAnswering"),Xjo=o(" (Longformer model)"),zjo=l(),i6=a("li"),Jfe=a("strong"),Qjo=o("lxmert"),Wjo=o(" \u2014 "),_G=a("a"),Hjo=o("LxmertForQuestionAnswering"),Ujo=o(" (LXMERT model)"),Jjo=l(),d6=a("li"),Yfe=a("strong"),Yjo=o("mbart"),Kjo=o(" \u2014 "),uG=a("a"),Zjo=o("MBartForQuestionAnswering"),eDo=o(" (mBART model)"),oDo=l(),c6=a("li"),Kfe=a("strong"),rDo=o("megatron-bert"),tDo=o(" \u2014 "),bG=a("a"),aDo=o("MegatronBertForQuestionAnswering"),nDo=o(" (MegatronBert model)"),sDo=l(),f6=a("li"),Zfe=a("strong"),lDo=o("mobilebert"),iDo=o(" \u2014 "),vG=a("a"),dDo=o("MobileBertForQuestionAnswering"),cDo=o(" (MobileBERT model)"),fDo=l(),m6=a("li"),eme=a("strong"),mDo=o("mpnet"),gDo=o(" \u2014 "),FG=a("a"),hDo=o("MPNetForQuestionAnswering"),pDo=o(" (MPNet model)"),_Do=l(),g6=a("li"),ome=a("strong"),uDo=o("nystromformer"),bDo=o(" \u2014 "),TG=a("a"),vDo=o("NystromformerForQuestionAnswering"),FDo=o(" (Nystromformer model)"),TDo=l(),h6=a("li"),rme=a("strong"),MDo=o("qdqbert"),EDo=o(" \u2014 "),MG=a("a"),CDo=o("QDQBertForQuestionAnswering"),wDo=o(" (QDQBert model)"),ADo=l(),p6=a("li"),tme=a("strong"),yDo=o("reformer"),LDo=o(" \u2014 "),EG=a("a"),xDo=o("ReformerForQuestionAnswering"),kDo=o(" (Reformer model)"),SDo=l(),_6=a("li"),ame=a("strong"),RDo=o("rembert"),BDo=o(" \u2014 "),CG=a("a"),PDo=o("RemBertForQuestionAnswering"),$Do=o(" (RemBERT model)"),IDo=l(),u6=a("li"),nme=a("strong"),qDo=o("roberta"),NDo=o(" \u2014 "),wG=a("a"),jDo=o("RobertaForQuestionAnswering"),DDo=o(" (RoBERTa model)"),GDo=l(),b6=a("li"),sme=a("strong"),ODo=o("roformer"),VDo=o(" \u2014 "),AG=a("a"),XDo=o("RoFormerForQuestionAnswering"),zDo=o(" (RoFormer model)"),QDo=l(),v6=a("li"),lme=a("strong"),WDo=o("splinter"),HDo=o(" \u2014 "),yG=a("a"),UDo=o("SplinterForQuestionAnswering"),JDo=o(" (Splinter model)"),YDo=l(),F6=a("li"),ime=a("strong"),KDo=o("squeezebert"),ZDo=o(" \u2014 "),LG=a("a"),eGo=o("SqueezeBertForQuestionAnswering"),oGo=o(" (SqueezeBERT model)"),rGo=l(),T6=a("li"),dme=a("strong"),tGo=o("xlm"),aGo=o(" \u2014 "),xG=a("a"),nGo=o("XLMForQuestionAnsweringSimple"),sGo=o(" (XLM model)"),lGo=l(),M6=a("li"),cme=a("strong"),iGo=o("xlm-roberta"),dGo=o(" \u2014 "),kG=a("a"),cGo=o("XLMRobertaForQuestionAnswering"),fGo=o(" (XLM-RoBERTa model)"),mGo=l(),E6=a("li"),fme=a("strong"),gGo=o("xlm-roberta-xl"),hGo=o(" \u2014 "),SG=a("a"),pGo=o("XLMRobertaXLForQuestionAnswering"),_Go=o(" (XLM-RoBERTa-XL model)"),uGo=l(),C6=a("li"),mme=a("strong"),bGo=o("xlnet"),vGo=o(" \u2014 "),RG=a("a"),FGo=o("XLNetForQuestionAnsweringSimple"),TGo=o(" (XLNet model)"),MGo=l(),w6=a("li"),gme=a("strong"),EGo=o("yoso"),CGo=o(" \u2014 "),BG=a("a"),wGo=o("YosoForQuestionAnswering"),AGo=o(" (YOSO model)"),yGo=l(),A6=a("p"),LGo=o("The model is set in evaluation mode by default using "),hme=a("code"),xGo=o("model.eval()"),kGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=a("code"),SGo=o("model.train()"),RGo=l(),_me=a("p"),BGo=o("Examples:"),PGo=l(),f(GC.$$.fragment),IPe=l(),$d=a("h2"),y6=a("a"),ume=a("span"),f(OC.$$.fragment),$Go=l(),bme=a("span"),IGo=o("AutoModelForTableQuestionAnswering"),qPe=l(),sr=a("div"),f(VC.$$.fragment),qGo=l(),Id=a("p"),NGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PG=a("a"),jGo=o("from_pretrained()"),DGo=o(" class method or the "),$G=a("a"),GGo=o("from_config()"),OGo=o(` class
method.`),VGo=l(),XC=a("p"),XGo=o("This class cannot be instantiated directly using "),vme=a("code"),zGo=o("__init__()"),QGo=o(" (throws an error)."),WGo=l(),et=a("div"),f(zC.$$.fragment),HGo=l(),Fme=a("p"),UGo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),JGo=l(),qd=a("p"),YGo=o(`Note:
Loading a model from its configuration file does `),Tme=a("strong"),KGo=o("not"),ZGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=a("a"),eOo=o("from_pretrained()"),oOo=o(" to load the model weights."),rOo=l(),Mme=a("p"),tOo=o("Examples:"),aOo=l(),f(QC.$$.fragment),nOo=l(),He=a("div"),f(WC.$$.fragment),sOo=l(),Eme=a("p"),lOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),iOo=l(),en=a("p"),dOo=o("The model class to instantiate is selected based on the "),Cme=a("code"),cOo=o("model_type"),fOo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),mOo=o("pretrained_model_name_or_path"),gOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),hOo=o("pretrained_model_name_or_path"),pOo=o(":"),_Oo=l(),yme=a("ul"),L6=a("li"),Lme=a("strong"),uOo=o("tapas"),bOo=o(" \u2014 "),qG=a("a"),vOo=o("TapasForQuestionAnswering"),FOo=o(" (TAPAS model)"),TOo=l(),x6=a("p"),MOo=o("The model is set in evaluation mode by default using "),xme=a("code"),EOo=o("model.eval()"),COo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),wOo=o("model.train()"),AOo=l(),Sme=a("p"),yOo=o("Examples:"),LOo=l(),f(HC.$$.fragment),NPe=l(),Nd=a("h2"),k6=a("a"),Rme=a("span"),f(UC.$$.fragment),xOo=l(),Bme=a("span"),kOo=o("AutoModelForImageClassification"),jPe=l(),lr=a("div"),f(JC.$$.fragment),SOo=l(),jd=a("p"),ROo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NG=a("a"),BOo=o("from_pretrained()"),POo=o(" class method or the "),jG=a("a"),$Oo=o("from_config()"),IOo=o(` class
method.`),qOo=l(),YC=a("p"),NOo=o("This class cannot be instantiated directly using "),Pme=a("code"),jOo=o("__init__()"),DOo=o(" (throws an error)."),GOo=l(),ot=a("div"),f(KC.$$.fragment),OOo=l(),$me=a("p"),VOo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),XOo=l(),Dd=a("p"),zOo=o(`Note:
Loading a model from its configuration file does `),Ime=a("strong"),QOo=o("not"),WOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=a("a"),HOo=o("from_pretrained()"),UOo=o(" to load the model weights."),JOo=l(),qme=a("p"),YOo=o("Examples:"),KOo=l(),f(ZC.$$.fragment),ZOo=l(),Ue=a("div"),f(ew.$$.fragment),eVo=l(),Nme=a("p"),oVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),rVo=l(),on=a("p"),tVo=o("The model class to instantiate is selected based on the "),jme=a("code"),aVo=o("model_type"),nVo=o(` property of the config object (either
passed as an argument or loaded from `),Dme=a("code"),sVo=o("pretrained_model_name_or_path"),lVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=a("code"),iVo=o("pretrained_model_name_or_path"),dVo=o(":"),cVo=l(),ce=a("ul"),S6=a("li"),Ome=a("strong"),fVo=o("beit"),mVo=o(" \u2014 "),GG=a("a"),gVo=o("BeitForImageClassification"),hVo=o(" (BEiT model)"),pVo=l(),R6=a("li"),Vme=a("strong"),_Vo=o("convnext"),uVo=o(" \u2014 "),OG=a("a"),bVo=o("ConvNextForImageClassification"),vVo=o(" (ConvNext model)"),FVo=l(),B6=a("li"),Xme=a("strong"),TVo=o("data2vec-vision"),MVo=o(" \u2014 "),VG=a("a"),EVo=o("Data2VecVisionForImageClassification"),CVo=o(" (Data2VecVision model)"),wVo=l(),Us=a("li"),zme=a("strong"),AVo=o("deit"),yVo=o(" \u2014 "),XG=a("a"),LVo=o("DeiTForImageClassification"),xVo=o(" or "),zG=a("a"),kVo=o("DeiTForImageClassificationWithTeacher"),SVo=o(" (DeiT model)"),RVo=l(),P6=a("li"),Qme=a("strong"),BVo=o("imagegpt"),PVo=o(" \u2014 "),QG=a("a"),$Vo=o("ImageGPTForImageClassification"),IVo=o(" (ImageGPT model)"),qVo=l(),ma=a("li"),Wme=a("strong"),NVo=o("perceiver"),jVo=o(" \u2014 "),WG=a("a"),DVo=o("PerceiverForImageClassificationLearned"),GVo=o(" or "),HG=a("a"),OVo=o("PerceiverForImageClassificationFourier"),VVo=o(" or "),UG=a("a"),XVo=o("PerceiverForImageClassificationConvProcessing"),zVo=o(" (Perceiver model)"),QVo=l(),$6=a("li"),Hme=a("strong"),WVo=o("poolformer"),HVo=o(" \u2014 "),JG=a("a"),UVo=o("PoolFormerForImageClassification"),JVo=o(" (PoolFormer model)"),YVo=l(),I6=a("li"),Ume=a("strong"),KVo=o("regnet"),ZVo=o(" \u2014 "),YG=a("a"),eXo=o("RegNetForImageClassification"),oXo=o(" (RegNet model)"),rXo=l(),q6=a("li"),Jme=a("strong"),tXo=o("resnet"),aXo=o(" \u2014 "),KG=a("a"),nXo=o("ResNetForImageClassification"),sXo=o(" (ResNet model)"),lXo=l(),N6=a("li"),Yme=a("strong"),iXo=o("segformer"),dXo=o(" \u2014 "),ZG=a("a"),cXo=o("SegformerForImageClassification"),fXo=o(" (SegFormer model)"),mXo=l(),j6=a("li"),Kme=a("strong"),gXo=o("swin"),hXo=o(" \u2014 "),eO=a("a"),pXo=o("SwinForImageClassification"),_Xo=o(" (Swin model)"),uXo=l(),D6=a("li"),Zme=a("strong"),bXo=o("van"),vXo=o(" \u2014 "),oO=a("a"),FXo=o("VanForImageClassification"),TXo=o(" (VAN model)"),MXo=l(),G6=a("li"),ege=a("strong"),EXo=o("vit"),CXo=o(" \u2014 "),rO=a("a"),wXo=o("ViTForImageClassification"),AXo=o(" (ViT model)"),yXo=l(),O6=a("p"),LXo=o("The model is set in evaluation mode by default using "),oge=a("code"),xXo=o("model.eval()"),kXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=a("code"),SXo=o("model.train()"),RXo=l(),tge=a("p"),BXo=o("Examples:"),PXo=l(),f(ow.$$.fragment),DPe=l(),Gd=a("h2"),V6=a("a"),age=a("span"),f(rw.$$.fragment),$Xo=l(),nge=a("span"),IXo=o("AutoModelForVision2Seq"),GPe=l(),ir=a("div"),f(tw.$$.fragment),qXo=l(),Od=a("p"),NXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tO=a("a"),jXo=o("from_pretrained()"),DXo=o(" class method or the "),aO=a("a"),GXo=o("from_config()"),OXo=o(` class
method.`),VXo=l(),aw=a("p"),XXo=o("This class cannot be instantiated directly using "),sge=a("code"),zXo=o("__init__()"),QXo=o(" (throws an error)."),WXo=l(),rt=a("div"),f(nw.$$.fragment),HXo=l(),lge=a("p"),UXo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),JXo=l(),Vd=a("p"),YXo=o(`Note:
Loading a model from its configuration file does `),ige=a("strong"),KXo=o("not"),ZXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=a("a"),ezo=o("from_pretrained()"),ozo=o(" to load the model weights."),rzo=l(),dge=a("p"),tzo=o("Examples:"),azo=l(),f(sw.$$.fragment),nzo=l(),Je=a("div"),f(lw.$$.fragment),szo=l(),cge=a("p"),lzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),izo=l(),rn=a("p"),dzo=o("The model class to instantiate is selected based on the "),fge=a("code"),czo=o("model_type"),fzo=o(` property of the config object (either
passed as an argument or loaded from `),mge=a("code"),mzo=o("pretrained_model_name_or_path"),gzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=a("code"),hzo=o("pretrained_model_name_or_path"),pzo=o(":"),_zo=l(),hge=a("ul"),X6=a("li"),pge=a("strong"),uzo=o("vision-encoder-decoder"),bzo=o(" \u2014 "),sO=a("a"),vzo=o("VisionEncoderDecoderModel"),Fzo=o(" (Vision Encoder decoder model)"),Tzo=l(),z6=a("p"),Mzo=o("The model is set in evaluation mode by default using "),_ge=a("code"),Ezo=o("model.eval()"),Czo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),wzo=o("model.train()"),Azo=l(),bge=a("p"),yzo=o("Examples:"),Lzo=l(),f(iw.$$.fragment),OPe=l(),Xd=a("h2"),Q6=a("a"),vge=a("span"),f(dw.$$.fragment),xzo=l(),Fge=a("span"),kzo=o("AutoModelForAudioClassification"),VPe=l(),dr=a("div"),f(cw.$$.fragment),Szo=l(),zd=a("p"),Rzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lO=a("a"),Bzo=o("from_pretrained()"),Pzo=o(" class method or the "),iO=a("a"),$zo=o("from_config()"),Izo=o(` class
method.`),qzo=l(),fw=a("p"),Nzo=o("This class cannot be instantiated directly using "),Tge=a("code"),jzo=o("__init__()"),Dzo=o(" (throws an error)."),Gzo=l(),tt=a("div"),f(mw.$$.fragment),Ozo=l(),Mge=a("p"),Vzo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Xzo=l(),Qd=a("p"),zzo=o(`Note:
Loading a model from its configuration file does `),Ege=a("strong"),Qzo=o("not"),Wzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=a("a"),Hzo=o("from_pretrained()"),Uzo=o(" to load the model weights."),Jzo=l(),Cge=a("p"),Yzo=o("Examples:"),Kzo=l(),f(gw.$$.fragment),Zzo=l(),Ye=a("div"),f(hw.$$.fragment),eQo=l(),wge=a("p"),oQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),rQo=l(),tn=a("p"),tQo=o("The model class to instantiate is selected based on the "),Age=a("code"),aQo=o("model_type"),nQo=o(` property of the config object (either
passed as an argument or loaded from `),yge=a("code"),sQo=o("pretrained_model_name_or_path"),lQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=a("code"),iQo=o("pretrained_model_name_or_path"),dQo=o(":"),cQo=l(),Re=a("ul"),W6=a("li"),xge=a("strong"),fQo=o("data2vec-audio"),mQo=o(" \u2014 "),cO=a("a"),gQo=o("Data2VecAudioForSequenceClassification"),hQo=o(" (Data2VecAudio model)"),pQo=l(),H6=a("li"),kge=a("strong"),_Qo=o("hubert"),uQo=o(" \u2014 "),fO=a("a"),bQo=o("HubertForSequenceClassification"),vQo=o(" (Hubert model)"),FQo=l(),U6=a("li"),Sge=a("strong"),TQo=o("sew"),MQo=o(" \u2014 "),mO=a("a"),EQo=o("SEWForSequenceClassification"),CQo=o(" (SEW model)"),wQo=l(),J6=a("li"),Rge=a("strong"),AQo=o("sew-d"),yQo=o(" \u2014 "),gO=a("a"),LQo=o("SEWDForSequenceClassification"),xQo=o(" (SEW-D model)"),kQo=l(),Y6=a("li"),Bge=a("strong"),SQo=o("unispeech"),RQo=o(" \u2014 "),hO=a("a"),BQo=o("UniSpeechForSequenceClassification"),PQo=o(" (UniSpeech model)"),$Qo=l(),K6=a("li"),Pge=a("strong"),IQo=o("unispeech-sat"),qQo=o(" \u2014 "),pO=a("a"),NQo=o("UniSpeechSatForSequenceClassification"),jQo=o(" (UniSpeechSat model)"),DQo=l(),Z6=a("li"),$ge=a("strong"),GQo=o("wav2vec2"),OQo=o(" \u2014 "),_O=a("a"),VQo=o("Wav2Vec2ForSequenceClassification"),XQo=o(" (Wav2Vec2 model)"),zQo=l(),ev=a("li"),Ige=a("strong"),QQo=o("wavlm"),WQo=o(" \u2014 "),uO=a("a"),HQo=o("WavLMForSequenceClassification"),UQo=o(" (WavLM model)"),JQo=l(),ov=a("p"),YQo=o("The model is set in evaluation mode by default using "),qge=a("code"),KQo=o("model.eval()"),ZQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=a("code"),eWo=o("model.train()"),oWo=l(),jge=a("p"),rWo=o("Examples:"),tWo=l(),f(pw.$$.fragment),XPe=l(),Wd=a("h2"),rv=a("a"),Dge=a("span"),f(_w.$$.fragment),aWo=l(),Gge=a("span"),nWo=o("AutoModelForAudioFrameClassification"),zPe=l(),cr=a("div"),f(uw.$$.fragment),sWo=l(),Hd=a("p"),lWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bO=a("a"),iWo=o("from_pretrained()"),dWo=o(" class method or the "),vO=a("a"),cWo=o("from_config()"),fWo=o(` class
method.`),mWo=l(),bw=a("p"),gWo=o("This class cannot be instantiated directly using "),Oge=a("code"),hWo=o("__init__()"),pWo=o(" (throws an error)."),_Wo=l(),at=a("div"),f(vw.$$.fragment),uWo=l(),Vge=a("p"),bWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),vWo=l(),Ud=a("p"),FWo=o(`Note:
Loading a model from its configuration file does `),Xge=a("strong"),TWo=o("not"),MWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=a("a"),EWo=o("from_pretrained()"),CWo=o(" to load the model weights."),wWo=l(),zge=a("p"),AWo=o("Examples:"),yWo=l(),f(Fw.$$.fragment),LWo=l(),Ke=a("div"),f(Tw.$$.fragment),xWo=l(),Qge=a("p"),kWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),SWo=l(),an=a("p"),RWo=o("The model class to instantiate is selected based on the "),Wge=a("code"),BWo=o("model_type"),PWo=o(` property of the config object (either
passed as an argument or loaded from `),Hge=a("code"),$Wo=o("pretrained_model_name_or_path"),IWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=a("code"),qWo=o("pretrained_model_name_or_path"),NWo=o(":"),jWo=l(),nn=a("ul"),tv=a("li"),Jge=a("strong"),DWo=o("data2vec-audio"),GWo=o(" \u2014 "),TO=a("a"),OWo=o("Data2VecAudioForAudioFrameClassification"),VWo=o(" (Data2VecAudio model)"),XWo=l(),av=a("li"),Yge=a("strong"),zWo=o("unispeech-sat"),QWo=o(" \u2014 "),MO=a("a"),WWo=o("UniSpeechSatForAudioFrameClassification"),HWo=o(" (UniSpeechSat model)"),UWo=l(),nv=a("li"),Kge=a("strong"),JWo=o("wav2vec2"),YWo=o(" \u2014 "),EO=a("a"),KWo=o("Wav2Vec2ForAudioFrameClassification"),ZWo=o(" (Wav2Vec2 model)"),eHo=l(),sv=a("li"),Zge=a("strong"),oHo=o("wavlm"),rHo=o(" \u2014 "),CO=a("a"),tHo=o("WavLMForAudioFrameClassification"),aHo=o(" (WavLM model)"),nHo=l(),lv=a("p"),sHo=o("The model is set in evaluation mode by default using "),ehe=a("code"),lHo=o("model.eval()"),iHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=a("code"),dHo=o("model.train()"),cHo=l(),rhe=a("p"),fHo=o("Examples:"),mHo=l(),f(Mw.$$.fragment),QPe=l(),Jd=a("h2"),iv=a("a"),the=a("span"),f(Ew.$$.fragment),gHo=l(),ahe=a("span"),hHo=o("AutoModelForCTC"),WPe=l(),fr=a("div"),f(Cw.$$.fragment),pHo=l(),Yd=a("p"),_Ho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wO=a("a"),uHo=o("from_pretrained()"),bHo=o(" class method or the "),AO=a("a"),vHo=o("from_config()"),FHo=o(` class
method.`),THo=l(),ww=a("p"),MHo=o("This class cannot be instantiated directly using "),nhe=a("code"),EHo=o("__init__()"),CHo=o(" (throws an error)."),wHo=l(),nt=a("div"),f(Aw.$$.fragment),AHo=l(),she=a("p"),yHo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),LHo=l(),Kd=a("p"),xHo=o(`Note:
Loading a model from its configuration file does `),lhe=a("strong"),kHo=o("not"),SHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=a("a"),RHo=o("from_pretrained()"),BHo=o(" to load the model weights."),PHo=l(),ihe=a("p"),$Ho=o("Examples:"),IHo=l(),f(yw.$$.fragment),qHo=l(),Ze=a("div"),f(Lw.$$.fragment),NHo=l(),dhe=a("p"),jHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),DHo=l(),sn=a("p"),GHo=o("The model class to instantiate is selected based on the "),che=a("code"),OHo=o("model_type"),VHo=o(` property of the config object (either
passed as an argument or loaded from `),fhe=a("code"),XHo=o("pretrained_model_name_or_path"),zHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=a("code"),QHo=o("pretrained_model_name_or_path"),WHo=o(":"),HHo=l(),Be=a("ul"),dv=a("li"),ghe=a("strong"),UHo=o("data2vec-audio"),JHo=o(" \u2014 "),LO=a("a"),YHo=o("Data2VecAudioForCTC"),KHo=o(" (Data2VecAudio model)"),ZHo=l(),cv=a("li"),hhe=a("strong"),eUo=o("hubert"),oUo=o(" \u2014 "),xO=a("a"),rUo=o("HubertForCTC"),tUo=o(" (Hubert model)"),aUo=l(),fv=a("li"),phe=a("strong"),nUo=o("sew"),sUo=o(" \u2014 "),kO=a("a"),lUo=o("SEWForCTC"),iUo=o(" (SEW model)"),dUo=l(),mv=a("li"),_he=a("strong"),cUo=o("sew-d"),fUo=o(" \u2014 "),SO=a("a"),mUo=o("SEWDForCTC"),gUo=o(" (SEW-D model)"),hUo=l(),gv=a("li"),uhe=a("strong"),pUo=o("unispeech"),_Uo=o(" \u2014 "),RO=a("a"),uUo=o("UniSpeechForCTC"),bUo=o(" (UniSpeech model)"),vUo=l(),hv=a("li"),bhe=a("strong"),FUo=o("unispeech-sat"),TUo=o(" \u2014 "),BO=a("a"),MUo=o("UniSpeechSatForCTC"),EUo=o(" (UniSpeechSat model)"),CUo=l(),pv=a("li"),vhe=a("strong"),wUo=o("wav2vec2"),AUo=o(" \u2014 "),PO=a("a"),yUo=o("Wav2Vec2ForCTC"),LUo=o(" (Wav2Vec2 model)"),xUo=l(),_v=a("li"),Fhe=a("strong"),kUo=o("wavlm"),SUo=o(" \u2014 "),$O=a("a"),RUo=o("WavLMForCTC"),BUo=o(" (WavLM model)"),PUo=l(),uv=a("p"),$Uo=o("The model is set in evaluation mode by default using "),The=a("code"),IUo=o("model.eval()"),qUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=a("code"),NUo=o("model.train()"),jUo=l(),Ehe=a("p"),DUo=o("Examples:"),GUo=l(),f(xw.$$.fragment),HPe=l(),Zd=a("h2"),bv=a("a"),Che=a("span"),f(kw.$$.fragment),OUo=l(),whe=a("span"),VUo=o("AutoModelForSpeechSeq2Seq"),UPe=l(),mr=a("div"),f(Sw.$$.fragment),XUo=l(),ec=a("p"),zUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IO=a("a"),QUo=o("from_pretrained()"),WUo=o(" class method or the "),qO=a("a"),HUo=o("from_config()"),UUo=o(` class
method.`),JUo=l(),Rw=a("p"),YUo=o("This class cannot be instantiated directly using "),Ahe=a("code"),KUo=o("__init__()"),ZUo=o(" (throws an error)."),eJo=l(),st=a("div"),f(Bw.$$.fragment),oJo=l(),yhe=a("p"),rJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),tJo=l(),oc=a("p"),aJo=o(`Note:
Loading a model from its configuration file does `),Lhe=a("strong"),nJo=o("not"),sJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=a("a"),lJo=o("from_pretrained()"),iJo=o(" to load the model weights."),dJo=l(),xhe=a("p"),cJo=o("Examples:"),fJo=l(),f(Pw.$$.fragment),mJo=l(),eo=a("div"),f($w.$$.fragment),gJo=l(),khe=a("p"),hJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),pJo=l(),ln=a("p"),_Jo=o("The model class to instantiate is selected based on the "),She=a("code"),uJo=o("model_type"),bJo=o(` property of the config object (either
passed as an argument or loaded from `),Rhe=a("code"),vJo=o("pretrained_model_name_or_path"),FJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),TJo=o("pretrained_model_name_or_path"),MJo=o(":"),EJo=l(),Iw=a("ul"),vv=a("li"),Phe=a("strong"),CJo=o("speech-encoder-decoder"),wJo=o(" \u2014 "),jO=a("a"),AJo=o("SpeechEncoderDecoderModel"),yJo=o(" (Speech Encoder decoder model)"),LJo=l(),Fv=a("li"),$he=a("strong"),xJo=o("speech_to_text"),kJo=o(" \u2014 "),DO=a("a"),SJo=o("Speech2TextForConditionalGeneration"),RJo=o(" (Speech2Text model)"),BJo=l(),Tv=a("p"),PJo=o("The model is set in evaluation mode by default using "),Ihe=a("code"),$Jo=o("model.eval()"),IJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=a("code"),qJo=o("model.train()"),NJo=l(),Nhe=a("p"),jJo=o("Examples:"),DJo=l(),f(qw.$$.fragment),JPe=l(),rc=a("h2"),Mv=a("a"),jhe=a("span"),f(Nw.$$.fragment),GJo=l(),Dhe=a("span"),OJo=o("AutoModelForAudioXVector"),YPe=l(),gr=a("div"),f(jw.$$.fragment),VJo=l(),tc=a("p"),XJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GO=a("a"),zJo=o("from_pretrained()"),QJo=o(" class method or the "),OO=a("a"),WJo=o("from_config()"),HJo=o(` class
method.`),UJo=l(),Dw=a("p"),JJo=o("This class cannot be instantiated directly using "),Ghe=a("code"),YJo=o("__init__()"),KJo=o(" (throws an error)."),ZJo=l(),lt=a("div"),f(Gw.$$.fragment),eYo=l(),Ohe=a("p"),oYo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),rYo=l(),ac=a("p"),tYo=o(`Note:
Loading a model from its configuration file does `),Vhe=a("strong"),aYo=o("not"),nYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=a("a"),sYo=o("from_pretrained()"),lYo=o(" to load the model weights."),iYo=l(),Xhe=a("p"),dYo=o("Examples:"),cYo=l(),f(Ow.$$.fragment),fYo=l(),oo=a("div"),f(Vw.$$.fragment),mYo=l(),zhe=a("p"),gYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hYo=l(),dn=a("p"),pYo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),_Yo=o("model_type"),uYo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),bYo=o("pretrained_model_name_or_path"),vYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),FYo=o("pretrained_model_name_or_path"),TYo=o(":"),MYo=l(),cn=a("ul"),Ev=a("li"),Uhe=a("strong"),EYo=o("data2vec-audio"),CYo=o(" \u2014 "),XO=a("a"),wYo=o("Data2VecAudioForXVector"),AYo=o(" (Data2VecAudio model)"),yYo=l(),Cv=a("li"),Jhe=a("strong"),LYo=o("unispeech-sat"),xYo=o(" \u2014 "),zO=a("a"),kYo=o("UniSpeechSatForXVector"),SYo=o(" (UniSpeechSat model)"),RYo=l(),wv=a("li"),Yhe=a("strong"),BYo=o("wav2vec2"),PYo=o(" \u2014 "),QO=a("a"),$Yo=o("Wav2Vec2ForXVector"),IYo=o(" (Wav2Vec2 model)"),qYo=l(),Av=a("li"),Khe=a("strong"),NYo=o("wavlm"),jYo=o(" \u2014 "),WO=a("a"),DYo=o("WavLMForXVector"),GYo=o(" (WavLM model)"),OYo=l(),yv=a("p"),VYo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),XYo=o("model.eval()"),zYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),QYo=o("model.train()"),WYo=l(),ope=a("p"),HYo=o("Examples:"),UYo=l(),f(Xw.$$.fragment),KPe=l(),nc=a("h2"),Lv=a("a"),rpe=a("span"),f(zw.$$.fragment),JYo=l(),tpe=a("span"),YYo=o("AutoModelForMaskedImageModeling"),ZPe=l(),hr=a("div"),f(Qw.$$.fragment),KYo=l(),sc=a("p"),ZYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HO=a("a"),eKo=o("from_pretrained()"),oKo=o(" class method or the "),UO=a("a"),rKo=o("from_config()"),tKo=o(` class
method.`),aKo=l(),Ww=a("p"),nKo=o("This class cannot be instantiated directly using "),ape=a("code"),sKo=o("__init__()"),lKo=o(" (throws an error)."),iKo=l(),it=a("div"),f(Hw.$$.fragment),dKo=l(),npe=a("p"),cKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),fKo=l(),lc=a("p"),mKo=o(`Note:
Loading a model from its configuration file does `),spe=a("strong"),gKo=o("not"),hKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=a("a"),pKo=o("from_pretrained()"),_Ko=o(" to load the model weights."),uKo=l(),lpe=a("p"),bKo=o("Examples:"),vKo=l(),f(Uw.$$.fragment),FKo=l(),ro=a("div"),f(Jw.$$.fragment),TKo=l(),ipe=a("p"),MKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),EKo=l(),fn=a("p"),CKo=o("The model class to instantiate is selected based on the "),dpe=a("code"),wKo=o("model_type"),AKo=o(` property of the config object (either
passed as an argument or loaded from `),cpe=a("code"),yKo=o("pretrained_model_name_or_path"),LKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=a("code"),xKo=o("pretrained_model_name_or_path"),kKo=o(":"),SKo=l(),ic=a("ul"),xv=a("li"),mpe=a("strong"),RKo=o("deit"),BKo=o(" \u2014 "),YO=a("a"),PKo=o("DeiTForMaskedImageModeling"),$Ko=o(" (DeiT model)"),IKo=l(),kv=a("li"),gpe=a("strong"),qKo=o("swin"),NKo=o(" \u2014 "),KO=a("a"),jKo=o("SwinForMaskedImageModeling"),DKo=o(" (Swin model)"),GKo=l(),Sv=a("li"),hpe=a("strong"),OKo=o("vit"),VKo=o(" \u2014 "),ZO=a("a"),XKo=o("ViTForMaskedImageModeling"),zKo=o(" (ViT model)"),QKo=l(),Rv=a("p"),WKo=o("The model is set in evaluation mode by default using "),ppe=a("code"),HKo=o("model.eval()"),UKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=a("code"),JKo=o("model.train()"),YKo=l(),upe=a("p"),KKo=o("Examples:"),ZKo=l(),f(Yw.$$.fragment),e$e=l(),dc=a("h2"),Bv=a("a"),bpe=a("span"),f(Kw.$$.fragment),eZo=l(),vpe=a("span"),oZo=o("AutoModelForObjectDetection"),o$e=l(),pr=a("div"),f(Zw.$$.fragment),rZo=l(),cc=a("p"),tZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eV=a("a"),aZo=o("from_pretrained()"),nZo=o(" class method or the "),oV=a("a"),sZo=o("from_config()"),lZo=o(` class
method.`),iZo=l(),eA=a("p"),dZo=o("This class cannot be instantiated directly using "),Fpe=a("code"),cZo=o("__init__()"),fZo=o(" (throws an error)."),mZo=l(),dt=a("div"),f(oA.$$.fragment),gZo=l(),Tpe=a("p"),hZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),pZo=l(),fc=a("p"),_Zo=o(`Note:
Loading a model from its configuration file does `),Mpe=a("strong"),uZo=o("not"),bZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=a("a"),vZo=o("from_pretrained()"),FZo=o(" to load the model weights."),TZo=l(),Epe=a("p"),MZo=o("Examples:"),EZo=l(),f(rA.$$.fragment),CZo=l(),to=a("div"),f(tA.$$.fragment),wZo=l(),Cpe=a("p"),AZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),yZo=l(),mn=a("p"),LZo=o("The model class to instantiate is selected based on the "),wpe=a("code"),xZo=o("model_type"),kZo=o(` property of the config object (either
passed as an argument or loaded from `),Ape=a("code"),SZo=o("pretrained_model_name_or_path"),RZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=a("code"),BZo=o("pretrained_model_name_or_path"),PZo=o(":"),$Zo=l(),Lpe=a("ul"),Pv=a("li"),xpe=a("strong"),IZo=o("detr"),qZo=o(" \u2014 "),tV=a("a"),NZo=o("DetrForObjectDetection"),jZo=o(" (DETR model)"),DZo=l(),$v=a("p"),GZo=o("The model is set in evaluation mode by default using "),kpe=a("code"),OZo=o("model.eval()"),VZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=a("code"),XZo=o("model.train()"),zZo=l(),Rpe=a("p"),QZo=o("Examples:"),WZo=l(),f(aA.$$.fragment),r$e=l(),mc=a("h2"),Iv=a("a"),Bpe=a("span"),f(nA.$$.fragment),HZo=l(),Ppe=a("span"),UZo=o("AutoModelForImageSegmentation"),t$e=l(),_r=a("div"),f(sA.$$.fragment),JZo=l(),gc=a("p"),YZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aV=a("a"),KZo=o("from_pretrained()"),ZZo=o(" class method or the "),nV=a("a"),eer=o("from_config()"),oer=o(` class
method.`),rer=l(),lA=a("p"),ter=o("This class cannot be instantiated directly using "),$pe=a("code"),aer=o("__init__()"),ner=o(" (throws an error)."),ser=l(),ct=a("div"),f(iA.$$.fragment),ler=l(),Ipe=a("p"),ier=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),der=l(),hc=a("p"),cer=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),fer=o("not"),mer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=a("a"),ger=o("from_pretrained()"),her=o(" to load the model weights."),per=l(),Npe=a("p"),_er=o("Examples:"),uer=l(),f(dA.$$.fragment),ber=l(),ao=a("div"),f(cA.$$.fragment),ver=l(),jpe=a("p"),Fer=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Ter=l(),gn=a("p"),Mer=o("The model class to instantiate is selected based on the "),Dpe=a("code"),Eer=o("model_type"),Cer=o(` property of the config object (either
passed as an argument or loaded from `),Gpe=a("code"),wer=o("pretrained_model_name_or_path"),Aer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=a("code"),yer=o("pretrained_model_name_or_path"),Ler=o(":"),xer=l(),Vpe=a("ul"),qv=a("li"),Xpe=a("strong"),ker=o("detr"),Ser=o(" \u2014 "),lV=a("a"),Rer=o("DetrForSegmentation"),Ber=o(" (DETR model)"),Per=l(),Nv=a("p"),$er=o("The model is set in evaluation mode by default using "),zpe=a("code"),Ier=o("model.eval()"),qer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=a("code"),Ner=o("model.train()"),jer=l(),Wpe=a("p"),Der=o("Examples:"),Ger=l(),f(fA.$$.fragment),a$e=l(),pc=a("h2"),jv=a("a"),Hpe=a("span"),f(mA.$$.fragment),Oer=l(),Upe=a("span"),Ver=o("AutoModelForSemanticSegmentation"),n$e=l(),ur=a("div"),f(gA.$$.fragment),Xer=l(),_c=a("p"),zer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iV=a("a"),Qer=o("from_pretrained()"),Wer=o(" class method or the "),dV=a("a"),Her=o("from_config()"),Uer=o(` class
method.`),Jer=l(),hA=a("p"),Yer=o("This class cannot be instantiated directly using "),Jpe=a("code"),Ker=o("__init__()"),Zer=o(" (throws an error)."),eor=l(),ft=a("div"),f(pA.$$.fragment),oor=l(),Ype=a("p"),ror=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),tor=l(),uc=a("p"),aor=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),nor=o("not"),sor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=a("a"),lor=o("from_pretrained()"),ior=o(" to load the model weights."),dor=l(),Zpe=a("p"),cor=o("Examples:"),mor=l(),f(_A.$$.fragment),gor=l(),no=a("div"),f(uA.$$.fragment),hor=l(),e_e=a("p"),por=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),_or=l(),hn=a("p"),uor=o("The model class to instantiate is selected based on the "),o_e=a("code"),bor=o("model_type"),vor=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),For=o("pretrained_model_name_or_path"),Tor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),Mor=o("pretrained_model_name_or_path"),Eor=o(":"),Cor=l(),pn=a("ul"),Dv=a("li"),a_e=a("strong"),wor=o("beit"),Aor=o(" \u2014 "),fV=a("a"),yor=o("BeitForSemanticSegmentation"),Lor=o(" (BEiT model)"),xor=l(),Gv=a("li"),n_e=a("strong"),kor=o("data2vec-vision"),Sor=o(" \u2014 "),mV=a("a"),Ror=o("Data2VecVisionForSemanticSegmentation"),Bor=o(" (Data2VecVision model)"),Por=l(),Ov=a("li"),s_e=a("strong"),$or=o("dpt"),Ior=o(" \u2014 "),gV=a("a"),qor=o("DPTForSemanticSegmentation"),Nor=o(" (DPT model)"),jor=l(),Vv=a("li"),l_e=a("strong"),Dor=o("segformer"),Gor=o(" \u2014 "),hV=a("a"),Oor=o("SegformerForSemanticSegmentation"),Vor=o(" (SegFormer model)"),Xor=l(),Xv=a("p"),zor=o("The model is set in evaluation mode by default using "),i_e=a("code"),Qor=o("model.eval()"),Wor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=a("code"),Hor=o("model.train()"),Uor=l(),c_e=a("p"),Jor=o("Examples:"),Yor=l(),f(bA.$$.fragment),s$e=l(),bc=a("h2"),zv=a("a"),f_e=a("span"),f(vA.$$.fragment),Kor=l(),m_e=a("span"),Zor=o("AutoModelForInstanceSegmentation"),l$e=l(),br=a("div"),f(FA.$$.fragment),err=l(),vc=a("p"),orr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pV=a("a"),rrr=o("from_pretrained()"),trr=o(" class method or the "),_V=a("a"),arr=o("from_config()"),nrr=o(` class
method.`),srr=l(),TA=a("p"),lrr=o("This class cannot be instantiated directly using "),g_e=a("code"),irr=o("__init__()"),drr=o(" (throws an error)."),crr=l(),mt=a("div"),f(MA.$$.fragment),frr=l(),h_e=a("p"),mrr=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),grr=l(),Fc=a("p"),hrr=o(`Note:
Loading a model from its configuration file does `),p_e=a("strong"),prr=o("not"),_rr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=a("a"),urr=o("from_pretrained()"),brr=o(" to load the model weights."),vrr=l(),__e=a("p"),Frr=o("Examples:"),Trr=l(),f(EA.$$.fragment),Mrr=l(),so=a("div"),f(CA.$$.fragment),Err=l(),u_e=a("p"),Crr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),wrr=l(),_n=a("p"),Arr=o("The model class to instantiate is selected based on the "),b_e=a("code"),yrr=o("model_type"),Lrr=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),xrr=o("pretrained_model_name_or_path"),krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=a("code"),Srr=o("pretrained_model_name_or_path"),Rrr=o(":"),Brr=l(),T_e=a("ul"),Qv=a("li"),M_e=a("strong"),Prr=o("maskformer"),$rr=o(" \u2014 "),bV=a("a"),Irr=o("MaskFormerForInstanceSegmentation"),qrr=o(" (MaskFormer model)"),Nrr=l(),Wv=a("p"),jrr=o("The model is set in evaluation mode by default using "),E_e=a("code"),Drr=o("model.eval()"),Grr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=a("code"),Orr=o("model.train()"),Vrr=l(),w_e=a("p"),Xrr=o("Examples:"),zrr=l(),f(wA.$$.fragment),i$e=l(),Tc=a("h2"),Hv=a("a"),A_e=a("span"),f(AA.$$.fragment),Qrr=l(),y_e=a("span"),Wrr=o("TFAutoModel"),d$e=l(),vr=a("div"),f(yA.$$.fragment),Hrr=l(),Mc=a("p"),Urr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vV=a("a"),Jrr=o("from_pretrained()"),Yrr=o(" class method or the "),FV=a("a"),Krr=o("from_config()"),Zrr=o(` class
method.`),etr=l(),LA=a("p"),otr=o("This class cannot be instantiated directly using "),L_e=a("code"),rtr=o("__init__()"),ttr=o(" (throws an error)."),atr=l(),gt=a("div"),f(xA.$$.fragment),ntr=l(),x_e=a("p"),str=o("Instantiates one of the base model classes of the library from a configuration."),ltr=l(),Ec=a("p"),itr=o(`Note:
Loading a model from its configuration file does `),k_e=a("strong"),dtr=o("not"),ctr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=a("a"),ftr=o("from_pretrained()"),mtr=o(" to load the model weights."),gtr=l(),S_e=a("p"),htr=o("Examples:"),ptr=l(),f(kA.$$.fragment),_tr=l(),po=a("div"),f(SA.$$.fragment),utr=l(),R_e=a("p"),btr=o("Instantiate one of the base model classes of the library from a pretrained model."),vtr=l(),un=a("p"),Ftr=o("The model class to instantiate is selected based on the "),B_e=a("code"),Ttr=o("model_type"),Mtr=o(` property of the config object (either
passed as an argument or loaded from `),P_e=a("code"),Etr=o("pretrained_model_name_or_path"),Ctr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=a("code"),wtr=o("pretrained_model_name_or_path"),Atr=o(":"),ytr=l(),x=a("ul"),Uv=a("li"),I_e=a("strong"),Ltr=o("albert"),xtr=o(" \u2014 "),MV=a("a"),ktr=o("TFAlbertModel"),Str=o(" (ALBERT model)"),Rtr=l(),Jv=a("li"),q_e=a("strong"),Btr=o("bart"),Ptr=o(" \u2014 "),EV=a("a"),$tr=o("TFBartModel"),Itr=o(" (BART model)"),qtr=l(),Yv=a("li"),N_e=a("strong"),Ntr=o("bert"),jtr=o(" \u2014 "),CV=a("a"),Dtr=o("TFBertModel"),Gtr=o(" (BERT model)"),Otr=l(),Kv=a("li"),j_e=a("strong"),Vtr=o("blenderbot"),Xtr=o(" \u2014 "),wV=a("a"),ztr=o("TFBlenderbotModel"),Qtr=o(" (Blenderbot model)"),Wtr=l(),Zv=a("li"),D_e=a("strong"),Htr=o("blenderbot-small"),Utr=o(" \u2014 "),AV=a("a"),Jtr=o("TFBlenderbotSmallModel"),Ytr=o(" (BlenderbotSmall model)"),Ktr=l(),eF=a("li"),G_e=a("strong"),Ztr=o("camembert"),ear=o(" \u2014 "),yV=a("a"),oar=o("TFCamembertModel"),rar=o(" (CamemBERT model)"),tar=l(),oF=a("li"),O_e=a("strong"),aar=o("clip"),nar=o(" \u2014 "),LV=a("a"),sar=o("TFCLIPModel"),lar=o(" (CLIP model)"),iar=l(),rF=a("li"),V_e=a("strong"),dar=o("convbert"),car=o(" \u2014 "),xV=a("a"),far=o("TFConvBertModel"),mar=o(" (ConvBERT model)"),gar=l(),tF=a("li"),X_e=a("strong"),har=o("convnext"),par=o(" \u2014 "),kV=a("a"),_ar=o("TFConvNextModel"),uar=o(" (ConvNext model)"),bar=l(),aF=a("li"),z_e=a("strong"),Far=o("ctrl"),Tar=o(" \u2014 "),SV=a("a"),Mar=o("TFCTRLModel"),Ear=o(" (CTRL model)"),Car=l(),nF=a("li"),Q_e=a("strong"),war=o("deberta"),Aar=o(" \u2014 "),RV=a("a"),yar=o("TFDebertaModel"),Lar=o(" (DeBERTa model)"),xar=l(),sF=a("li"),W_e=a("strong"),kar=o("deberta-v2"),Sar=o(" \u2014 "),BV=a("a"),Rar=o("TFDebertaV2Model"),Bar=o(" (DeBERTa-v2 model)"),Par=l(),lF=a("li"),H_e=a("strong"),$ar=o("distilbert"),Iar=o(" \u2014 "),PV=a("a"),qar=o("TFDistilBertModel"),Nar=o(" (DistilBERT model)"),jar=l(),iF=a("li"),U_e=a("strong"),Dar=o("dpr"),Gar=o(" \u2014 "),$V=a("a"),Oar=o("TFDPRQuestionEncoder"),Var=o(" (DPR model)"),Xar=l(),dF=a("li"),J_e=a("strong"),zar=o("electra"),Qar=o(" \u2014 "),IV=a("a"),War=o("TFElectraModel"),Har=o(" (ELECTRA model)"),Uar=l(),cF=a("li"),Y_e=a("strong"),Jar=o("flaubert"),Yar=o(" \u2014 "),qV=a("a"),Kar=o("TFFlaubertModel"),Zar=o(" (FlauBERT model)"),enr=l(),Js=a("li"),K_e=a("strong"),onr=o("funnel"),rnr=o(" \u2014 "),NV=a("a"),tnr=o("TFFunnelModel"),anr=o(" or "),jV=a("a"),nnr=o("TFFunnelBaseModel"),snr=o(" (Funnel Transformer model)"),lnr=l(),fF=a("li"),Z_e=a("strong"),inr=o("gpt2"),dnr=o(" \u2014 "),DV=a("a"),cnr=o("TFGPT2Model"),fnr=o(" (OpenAI GPT-2 model)"),mnr=l(),mF=a("li"),eue=a("strong"),gnr=o("gptj"),hnr=o(" \u2014 "),GV=a("a"),pnr=o("TFGPTJModel"),_nr=o(" (GPT-J model)"),unr=l(),gF=a("li"),oue=a("strong"),bnr=o("hubert"),vnr=o(" \u2014 "),OV=a("a"),Fnr=o("TFHubertModel"),Tnr=o(" (Hubert model)"),Mnr=l(),hF=a("li"),rue=a("strong"),Enr=o("layoutlm"),Cnr=o(" \u2014 "),VV=a("a"),wnr=o("TFLayoutLMModel"),Anr=o(" (LayoutLM model)"),ynr=l(),pF=a("li"),tue=a("strong"),Lnr=o("led"),xnr=o(" \u2014 "),XV=a("a"),knr=o("TFLEDModel"),Snr=o(" (LED model)"),Rnr=l(),_F=a("li"),aue=a("strong"),Bnr=o("longformer"),Pnr=o(" \u2014 "),zV=a("a"),$nr=o("TFLongformerModel"),Inr=o(" (Longformer model)"),qnr=l(),uF=a("li"),nue=a("strong"),Nnr=o("lxmert"),jnr=o(" \u2014 "),QV=a("a"),Dnr=o("TFLxmertModel"),Gnr=o(" (LXMERT model)"),Onr=l(),bF=a("li"),sue=a("strong"),Vnr=o("marian"),Xnr=o(" \u2014 "),WV=a("a"),znr=o("TFMarianModel"),Qnr=o(" (Marian model)"),Wnr=l(),vF=a("li"),lue=a("strong"),Hnr=o("mbart"),Unr=o(" \u2014 "),HV=a("a"),Jnr=o("TFMBartModel"),Ynr=o(" (mBART model)"),Knr=l(),FF=a("li"),iue=a("strong"),Znr=o("mobilebert"),esr=o(" \u2014 "),UV=a("a"),osr=o("TFMobileBertModel"),rsr=o(" (MobileBERT model)"),tsr=l(),TF=a("li"),due=a("strong"),asr=o("mpnet"),nsr=o(" \u2014 "),JV=a("a"),ssr=o("TFMPNetModel"),lsr=o(" (MPNet model)"),isr=l(),MF=a("li"),cue=a("strong"),dsr=o("mt5"),csr=o(" \u2014 "),YV=a("a"),fsr=o("TFMT5Model"),msr=o(" (mT5 model)"),gsr=l(),EF=a("li"),fue=a("strong"),hsr=o("openai-gpt"),psr=o(" \u2014 "),KV=a("a"),_sr=o("TFOpenAIGPTModel"),usr=o(" (OpenAI GPT model)"),bsr=l(),CF=a("li"),mue=a("strong"),vsr=o("pegasus"),Fsr=o(" \u2014 "),ZV=a("a"),Tsr=o("TFPegasusModel"),Msr=o(" (Pegasus model)"),Esr=l(),wF=a("li"),gue=a("strong"),Csr=o("rembert"),wsr=o(" \u2014 "),eX=a("a"),Asr=o("TFRemBertModel"),ysr=o(" (RemBERT model)"),Lsr=l(),AF=a("li"),hue=a("strong"),xsr=o("roberta"),ksr=o(" \u2014 "),oX=a("a"),Ssr=o("TFRobertaModel"),Rsr=o(" (RoBERTa model)"),Bsr=l(),yF=a("li"),pue=a("strong"),Psr=o("roformer"),$sr=o(" \u2014 "),rX=a("a"),Isr=o("TFRoFormerModel"),qsr=o(" (RoFormer model)"),Nsr=l(),LF=a("li"),_ue=a("strong"),jsr=o("speech_to_text"),Dsr=o(" \u2014 "),tX=a("a"),Gsr=o("TFSpeech2TextModel"),Osr=o(" (Speech2Text model)"),Vsr=l(),xF=a("li"),uue=a("strong"),Xsr=o("t5"),zsr=o(" \u2014 "),aX=a("a"),Qsr=o("TFT5Model"),Wsr=o(" (T5 model)"),Hsr=l(),kF=a("li"),bue=a("strong"),Usr=o("tapas"),Jsr=o(" \u2014 "),nX=a("a"),Ysr=o("TFTapasModel"),Ksr=o(" (TAPAS model)"),Zsr=l(),SF=a("li"),vue=a("strong"),elr=o("transfo-xl"),olr=o(" \u2014 "),sX=a("a"),rlr=o("TFTransfoXLModel"),tlr=o(" (Transformer-XL model)"),alr=l(),RF=a("li"),Fue=a("strong"),nlr=o("vit"),slr=o(" \u2014 "),lX=a("a"),llr=o("TFViTModel"),ilr=o(" (ViT model)"),dlr=l(),BF=a("li"),Tue=a("strong"),clr=o("vit_mae"),flr=o(" \u2014 "),iX=a("a"),mlr=o("TFViTMAEModel"),glr=o(" (ViTMAE model)"),hlr=l(),PF=a("li"),Mue=a("strong"),plr=o("wav2vec2"),_lr=o(" \u2014 "),dX=a("a"),ulr=o("TFWav2Vec2Model"),blr=o(" (Wav2Vec2 model)"),vlr=l(),$F=a("li"),Eue=a("strong"),Flr=o("xlm"),Tlr=o(" \u2014 "),cX=a("a"),Mlr=o("TFXLMModel"),Elr=o(" (XLM model)"),Clr=l(),IF=a("li"),Cue=a("strong"),wlr=o("xlm-roberta"),Alr=o(" \u2014 "),fX=a("a"),ylr=o("TFXLMRobertaModel"),Llr=o(" (XLM-RoBERTa model)"),xlr=l(),qF=a("li"),wue=a("strong"),klr=o("xlnet"),Slr=o(" \u2014 "),mX=a("a"),Rlr=o("TFXLNetModel"),Blr=o(" (XLNet model)"),Plr=l(),Aue=a("p"),$lr=o("Examples:"),Ilr=l(),f(RA.$$.fragment),c$e=l(),Cc=a("h2"),NF=a("a"),yue=a("span"),f(BA.$$.fragment),qlr=l(),Lue=a("span"),Nlr=o("TFAutoModelForPreTraining"),f$e=l(),Fr=a("div"),f(PA.$$.fragment),jlr=l(),wc=a("p"),Dlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gX=a("a"),Glr=o("from_pretrained()"),Olr=o(" class method or the "),hX=a("a"),Vlr=o("from_config()"),Xlr=o(` class
method.`),zlr=l(),$A=a("p"),Qlr=o("This class cannot be instantiated directly using "),xue=a("code"),Wlr=o("__init__()"),Hlr=o(" (throws an error)."),Ulr=l(),ht=a("div"),f(IA.$$.fragment),Jlr=l(),kue=a("p"),Ylr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Klr=l(),Ac=a("p"),Zlr=o(`Note:
Loading a model from its configuration file does `),Sue=a("strong"),eir=o("not"),oir=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=a("a"),rir=o("from_pretrained()"),tir=o(" to load the model weights."),air=l(),Rue=a("p"),nir=o("Examples:"),sir=l(),f(qA.$$.fragment),lir=l(),_o=a("div"),f(NA.$$.fragment),iir=l(),Bue=a("p"),dir=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),cir=l(),bn=a("p"),fir=o("The model class to instantiate is selected based on the "),Pue=a("code"),mir=o("model_type"),gir=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),hir=o("pretrained_model_name_or_path"),pir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),_ir=o("pretrained_model_name_or_path"),uir=o(":"),bir=l(),U=a("ul"),jF=a("li"),que=a("strong"),vir=o("albert"),Fir=o(" \u2014 "),_X=a("a"),Tir=o("TFAlbertForPreTraining"),Mir=o(" (ALBERT model)"),Eir=l(),DF=a("li"),Nue=a("strong"),Cir=o("bart"),wir=o(" \u2014 "),uX=a("a"),Air=o("TFBartForConditionalGeneration"),yir=o(" (BART model)"),Lir=l(),GF=a("li"),jue=a("strong"),xir=o("bert"),kir=o(" \u2014 "),bX=a("a"),Sir=o("TFBertForPreTraining"),Rir=o(" (BERT model)"),Bir=l(),OF=a("li"),Due=a("strong"),Pir=o("camembert"),$ir=o(" \u2014 "),vX=a("a"),Iir=o("TFCamembertForMaskedLM"),qir=o(" (CamemBERT model)"),Nir=l(),VF=a("li"),Gue=a("strong"),jir=o("ctrl"),Dir=o(" \u2014 "),FX=a("a"),Gir=o("TFCTRLLMHeadModel"),Oir=o(" (CTRL model)"),Vir=l(),XF=a("li"),Oue=a("strong"),Xir=o("distilbert"),zir=o(" \u2014 "),TX=a("a"),Qir=o("TFDistilBertForMaskedLM"),Wir=o(" (DistilBERT model)"),Hir=l(),zF=a("li"),Vue=a("strong"),Uir=o("electra"),Jir=o(" \u2014 "),MX=a("a"),Yir=o("TFElectraForPreTraining"),Kir=o(" (ELECTRA model)"),Zir=l(),QF=a("li"),Xue=a("strong"),edr=o("flaubert"),odr=o(" \u2014 "),EX=a("a"),rdr=o("TFFlaubertWithLMHeadModel"),tdr=o(" (FlauBERT model)"),adr=l(),WF=a("li"),zue=a("strong"),ndr=o("funnel"),sdr=o(" \u2014 "),CX=a("a"),ldr=o("TFFunnelForPreTraining"),idr=o(" (Funnel Transformer model)"),ddr=l(),HF=a("li"),Que=a("strong"),cdr=o("gpt2"),fdr=o(" \u2014 "),wX=a("a"),mdr=o("TFGPT2LMHeadModel"),gdr=o(" (OpenAI GPT-2 model)"),hdr=l(),UF=a("li"),Wue=a("strong"),pdr=o("layoutlm"),_dr=o(" \u2014 "),AX=a("a"),udr=o("TFLayoutLMForMaskedLM"),bdr=o(" (LayoutLM model)"),vdr=l(),JF=a("li"),Hue=a("strong"),Fdr=o("lxmert"),Tdr=o(" \u2014 "),yX=a("a"),Mdr=o("TFLxmertForPreTraining"),Edr=o(" (LXMERT model)"),Cdr=l(),YF=a("li"),Uue=a("strong"),wdr=o("mobilebert"),Adr=o(" \u2014 "),LX=a("a"),ydr=o("TFMobileBertForPreTraining"),Ldr=o(" (MobileBERT model)"),xdr=l(),KF=a("li"),Jue=a("strong"),kdr=o("mpnet"),Sdr=o(" \u2014 "),xX=a("a"),Rdr=o("TFMPNetForMaskedLM"),Bdr=o(" (MPNet model)"),Pdr=l(),ZF=a("li"),Yue=a("strong"),$dr=o("openai-gpt"),Idr=o(" \u2014 "),kX=a("a"),qdr=o("TFOpenAIGPTLMHeadModel"),Ndr=o(" (OpenAI GPT model)"),jdr=l(),eT=a("li"),Kue=a("strong"),Ddr=o("roberta"),Gdr=o(" \u2014 "),SX=a("a"),Odr=o("TFRobertaForMaskedLM"),Vdr=o(" (RoBERTa model)"),Xdr=l(),oT=a("li"),Zue=a("strong"),zdr=o("t5"),Qdr=o(" \u2014 "),RX=a("a"),Wdr=o("TFT5ForConditionalGeneration"),Hdr=o(" (T5 model)"),Udr=l(),rT=a("li"),e1e=a("strong"),Jdr=o("tapas"),Ydr=o(" \u2014 "),BX=a("a"),Kdr=o("TFTapasForMaskedLM"),Zdr=o(" (TAPAS model)"),ecr=l(),tT=a("li"),o1e=a("strong"),ocr=o("transfo-xl"),rcr=o(" \u2014 "),PX=a("a"),tcr=o("TFTransfoXLLMHeadModel"),acr=o(" (Transformer-XL model)"),ncr=l(),aT=a("li"),r1e=a("strong"),scr=o("vit_mae"),lcr=o(" \u2014 "),$X=a("a"),icr=o("TFViTMAEForPreTraining"),dcr=o(" (ViTMAE model)"),ccr=l(),nT=a("li"),t1e=a("strong"),fcr=o("xlm"),mcr=o(" \u2014 "),IX=a("a"),gcr=o("TFXLMWithLMHeadModel"),hcr=o(" (XLM model)"),pcr=l(),sT=a("li"),a1e=a("strong"),_cr=o("xlm-roberta"),ucr=o(" \u2014 "),qX=a("a"),bcr=o("TFXLMRobertaForMaskedLM"),vcr=o(" (XLM-RoBERTa model)"),Fcr=l(),lT=a("li"),n1e=a("strong"),Tcr=o("xlnet"),Mcr=o(" \u2014 "),NX=a("a"),Ecr=o("TFXLNetLMHeadModel"),Ccr=o(" (XLNet model)"),wcr=l(),s1e=a("p"),Acr=o("Examples:"),ycr=l(),f(jA.$$.fragment),m$e=l(),yc=a("h2"),iT=a("a"),l1e=a("span"),f(DA.$$.fragment),Lcr=l(),i1e=a("span"),xcr=o("TFAutoModelForCausalLM"),g$e=l(),Tr=a("div"),f(GA.$$.fragment),kcr=l(),Lc=a("p"),Scr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jX=a("a"),Rcr=o("from_pretrained()"),Bcr=o(" class method or the "),DX=a("a"),Pcr=o("from_config()"),$cr=o(` class
method.`),Icr=l(),OA=a("p"),qcr=o("This class cannot be instantiated directly using "),d1e=a("code"),Ncr=o("__init__()"),jcr=o(" (throws an error)."),Dcr=l(),pt=a("div"),f(VA.$$.fragment),Gcr=l(),c1e=a("p"),Ocr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Vcr=l(),xc=a("p"),Xcr=o(`Note:
Loading a model from its configuration file does `),f1e=a("strong"),zcr=o("not"),Qcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=a("a"),Wcr=o("from_pretrained()"),Hcr=o(" to load the model weights."),Ucr=l(),m1e=a("p"),Jcr=o("Examples:"),Ycr=l(),f(XA.$$.fragment),Kcr=l(),uo=a("div"),f(zA.$$.fragment),Zcr=l(),g1e=a("p"),efr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ofr=l(),vn=a("p"),rfr=o("The model class to instantiate is selected based on the "),h1e=a("code"),tfr=o("model_type"),afr=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),nfr=o("pretrained_model_name_or_path"),sfr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=a("code"),lfr=o("pretrained_model_name_or_path"),ifr=o(":"),dfr=l(),ge=a("ul"),dT=a("li"),u1e=a("strong"),cfr=o("bert"),ffr=o(" \u2014 "),OX=a("a"),mfr=o("TFBertLMHeadModel"),gfr=o(" (BERT model)"),hfr=l(),cT=a("li"),b1e=a("strong"),pfr=o("camembert"),_fr=o(" \u2014 "),VX=a("a"),ufr=o("TFCamembertForCausalLM"),bfr=o(" (CamemBERT model)"),vfr=l(),fT=a("li"),v1e=a("strong"),Ffr=o("ctrl"),Tfr=o(" \u2014 "),XX=a("a"),Mfr=o("TFCTRLLMHeadModel"),Efr=o(" (CTRL model)"),Cfr=l(),mT=a("li"),F1e=a("strong"),wfr=o("gpt2"),Afr=o(" \u2014 "),zX=a("a"),yfr=o("TFGPT2LMHeadModel"),Lfr=o(" (OpenAI GPT-2 model)"),xfr=l(),gT=a("li"),T1e=a("strong"),kfr=o("gptj"),Sfr=o(" \u2014 "),QX=a("a"),Rfr=o("TFGPTJForCausalLM"),Bfr=o(" (GPT-J model)"),Pfr=l(),hT=a("li"),M1e=a("strong"),$fr=o("openai-gpt"),Ifr=o(" \u2014 "),WX=a("a"),qfr=o("TFOpenAIGPTLMHeadModel"),Nfr=o(" (OpenAI GPT model)"),jfr=l(),pT=a("li"),E1e=a("strong"),Dfr=o("rembert"),Gfr=o(" \u2014 "),HX=a("a"),Ofr=o("TFRemBertForCausalLM"),Vfr=o(" (RemBERT model)"),Xfr=l(),_T=a("li"),C1e=a("strong"),zfr=o("roberta"),Qfr=o(" \u2014 "),UX=a("a"),Wfr=o("TFRobertaForCausalLM"),Hfr=o(" (RoBERTa model)"),Ufr=l(),uT=a("li"),w1e=a("strong"),Jfr=o("roformer"),Yfr=o(" \u2014 "),JX=a("a"),Kfr=o("TFRoFormerForCausalLM"),Zfr=o(" (RoFormer model)"),emr=l(),bT=a("li"),A1e=a("strong"),omr=o("transfo-xl"),rmr=o(" \u2014 "),YX=a("a"),tmr=o("TFTransfoXLLMHeadModel"),amr=o(" (Transformer-XL model)"),nmr=l(),vT=a("li"),y1e=a("strong"),smr=o("xlm"),lmr=o(" \u2014 "),KX=a("a"),imr=o("TFXLMWithLMHeadModel"),dmr=o(" (XLM model)"),cmr=l(),FT=a("li"),L1e=a("strong"),fmr=o("xlnet"),mmr=o(" \u2014 "),ZX=a("a"),gmr=o("TFXLNetLMHeadModel"),hmr=o(" (XLNet model)"),pmr=l(),x1e=a("p"),_mr=o("Examples:"),umr=l(),f(QA.$$.fragment),h$e=l(),kc=a("h2"),TT=a("a"),k1e=a("span"),f(WA.$$.fragment),bmr=l(),S1e=a("span"),vmr=o("TFAutoModelForImageClassification"),p$e=l(),Mr=a("div"),f(HA.$$.fragment),Fmr=l(),Sc=a("p"),Tmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ez=a("a"),Mmr=o("from_pretrained()"),Emr=o(" class method or the "),oz=a("a"),Cmr=o("from_config()"),wmr=o(` class
method.`),Amr=l(),UA=a("p"),ymr=o("This class cannot be instantiated directly using "),R1e=a("code"),Lmr=o("__init__()"),xmr=o(" (throws an error)."),kmr=l(),_t=a("div"),f(JA.$$.fragment),Smr=l(),B1e=a("p"),Rmr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Bmr=l(),Rc=a("p"),Pmr=o(`Note:
Loading a model from its configuration file does `),P1e=a("strong"),$mr=o("not"),Imr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=a("a"),qmr=o("from_pretrained()"),Nmr=o(" to load the model weights."),jmr=l(),$1e=a("p"),Dmr=o("Examples:"),Gmr=l(),f(YA.$$.fragment),Omr=l(),bo=a("div"),f(KA.$$.fragment),Vmr=l(),I1e=a("p"),Xmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),zmr=l(),Fn=a("p"),Qmr=o("The model class to instantiate is selected based on the "),q1e=a("code"),Wmr=o("model_type"),Hmr=o(` property of the config object (either
passed as an argument or loaded from `),N1e=a("code"),Umr=o("pretrained_model_name_or_path"),Jmr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=a("code"),Ymr=o("pretrained_model_name_or_path"),Kmr=o(":"),Zmr=l(),ZA=a("ul"),MT=a("li"),D1e=a("strong"),egr=o("convnext"),ogr=o(" \u2014 "),tz=a("a"),rgr=o("TFConvNextForImageClassification"),tgr=o(" (ConvNext model)"),agr=l(),ET=a("li"),G1e=a("strong"),ngr=o("vit"),sgr=o(" \u2014 "),az=a("a"),lgr=o("TFViTForImageClassification"),igr=o(" (ViT model)"),dgr=l(),O1e=a("p"),cgr=o("Examples:"),fgr=l(),f(e0.$$.fragment),_$e=l(),Bc=a("h2"),CT=a("a"),V1e=a("span"),f(o0.$$.fragment),mgr=l(),X1e=a("span"),ggr=o("TFAutoModelForMaskedLM"),u$e=l(),Er=a("div"),f(r0.$$.fragment),hgr=l(),Pc=a("p"),pgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nz=a("a"),_gr=o("from_pretrained()"),ugr=o(" class method or the "),sz=a("a"),bgr=o("from_config()"),vgr=o(` class
method.`),Fgr=l(),t0=a("p"),Tgr=o("This class cannot be instantiated directly using "),z1e=a("code"),Mgr=o("__init__()"),Egr=o(" (throws an error)."),Cgr=l(),ut=a("div"),f(a0.$$.fragment),wgr=l(),Q1e=a("p"),Agr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),ygr=l(),$c=a("p"),Lgr=o(`Note:
Loading a model from its configuration file does `),W1e=a("strong"),xgr=o("not"),kgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=a("a"),Sgr=o("from_pretrained()"),Rgr=o(" to load the model weights."),Bgr=l(),H1e=a("p"),Pgr=o("Examples:"),$gr=l(),f(n0.$$.fragment),Igr=l(),vo=a("div"),f(s0.$$.fragment),qgr=l(),U1e=a("p"),Ngr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),jgr=l(),Tn=a("p"),Dgr=o("The model class to instantiate is selected based on the "),J1e=a("code"),Ggr=o("model_type"),Ogr=o(` property of the config object (either
passed as an argument or loaded from `),Y1e=a("code"),Vgr=o("pretrained_model_name_or_path"),Xgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=a("code"),zgr=o("pretrained_model_name_or_path"),Qgr=o(":"),Wgr=l(),K=a("ul"),wT=a("li"),Z1e=a("strong"),Hgr=o("albert"),Ugr=o(" \u2014 "),iz=a("a"),Jgr=o("TFAlbertForMaskedLM"),Ygr=o(" (ALBERT model)"),Kgr=l(),AT=a("li"),ebe=a("strong"),Zgr=o("bert"),ehr=o(" \u2014 "),dz=a("a"),ohr=o("TFBertForMaskedLM"),rhr=o(" (BERT model)"),thr=l(),yT=a("li"),obe=a("strong"),ahr=o("camembert"),nhr=o(" \u2014 "),cz=a("a"),shr=o("TFCamembertForMaskedLM"),lhr=o(" (CamemBERT model)"),ihr=l(),LT=a("li"),rbe=a("strong"),dhr=o("convbert"),chr=o(" \u2014 "),fz=a("a"),fhr=o("TFConvBertForMaskedLM"),mhr=o(" (ConvBERT model)"),ghr=l(),xT=a("li"),tbe=a("strong"),hhr=o("deberta"),phr=o(" \u2014 "),mz=a("a"),_hr=o("TFDebertaForMaskedLM"),uhr=o(" (DeBERTa model)"),bhr=l(),kT=a("li"),abe=a("strong"),vhr=o("deberta-v2"),Fhr=o(" \u2014 "),gz=a("a"),Thr=o("TFDebertaV2ForMaskedLM"),Mhr=o(" (DeBERTa-v2 model)"),Ehr=l(),ST=a("li"),nbe=a("strong"),Chr=o("distilbert"),whr=o(" \u2014 "),hz=a("a"),Ahr=o("TFDistilBertForMaskedLM"),yhr=o(" (DistilBERT model)"),Lhr=l(),RT=a("li"),sbe=a("strong"),xhr=o("electra"),khr=o(" \u2014 "),pz=a("a"),Shr=o("TFElectraForMaskedLM"),Rhr=o(" (ELECTRA model)"),Bhr=l(),BT=a("li"),lbe=a("strong"),Phr=o("flaubert"),$hr=o(" \u2014 "),_z=a("a"),Ihr=o("TFFlaubertWithLMHeadModel"),qhr=o(" (FlauBERT model)"),Nhr=l(),PT=a("li"),ibe=a("strong"),jhr=o("funnel"),Dhr=o(" \u2014 "),uz=a("a"),Ghr=o("TFFunnelForMaskedLM"),Ohr=o(" (Funnel Transformer model)"),Vhr=l(),$T=a("li"),dbe=a("strong"),Xhr=o("layoutlm"),zhr=o(" \u2014 "),bz=a("a"),Qhr=o("TFLayoutLMForMaskedLM"),Whr=o(" (LayoutLM model)"),Hhr=l(),IT=a("li"),cbe=a("strong"),Uhr=o("longformer"),Jhr=o(" \u2014 "),vz=a("a"),Yhr=o("TFLongformerForMaskedLM"),Khr=o(" (Longformer model)"),Zhr=l(),qT=a("li"),fbe=a("strong"),epr=o("mobilebert"),opr=o(" \u2014 "),Fz=a("a"),rpr=o("TFMobileBertForMaskedLM"),tpr=o(" (MobileBERT model)"),apr=l(),NT=a("li"),mbe=a("strong"),npr=o("mpnet"),spr=o(" \u2014 "),Tz=a("a"),lpr=o("TFMPNetForMaskedLM"),ipr=o(" (MPNet model)"),dpr=l(),jT=a("li"),gbe=a("strong"),cpr=o("rembert"),fpr=o(" \u2014 "),Mz=a("a"),mpr=o("TFRemBertForMaskedLM"),gpr=o(" (RemBERT model)"),hpr=l(),DT=a("li"),hbe=a("strong"),ppr=o("roberta"),_pr=o(" \u2014 "),Ez=a("a"),upr=o("TFRobertaForMaskedLM"),bpr=o(" (RoBERTa model)"),vpr=l(),GT=a("li"),pbe=a("strong"),Fpr=o("roformer"),Tpr=o(" \u2014 "),Cz=a("a"),Mpr=o("TFRoFormerForMaskedLM"),Epr=o(" (RoFormer model)"),Cpr=l(),OT=a("li"),_be=a("strong"),wpr=o("tapas"),Apr=o(" \u2014 "),wz=a("a"),ypr=o("TFTapasForMaskedLM"),Lpr=o(" (TAPAS model)"),xpr=l(),VT=a("li"),ube=a("strong"),kpr=o("xlm"),Spr=o(" \u2014 "),Az=a("a"),Rpr=o("TFXLMWithLMHeadModel"),Bpr=o(" (XLM model)"),Ppr=l(),XT=a("li"),bbe=a("strong"),$pr=o("xlm-roberta"),Ipr=o(" \u2014 "),yz=a("a"),qpr=o("TFXLMRobertaForMaskedLM"),Npr=o(" (XLM-RoBERTa model)"),jpr=l(),vbe=a("p"),Dpr=o("Examples:"),Gpr=l(),f(l0.$$.fragment),b$e=l(),Ic=a("h2"),zT=a("a"),Fbe=a("span"),f(i0.$$.fragment),Opr=l(),Tbe=a("span"),Vpr=o("TFAutoModelForSeq2SeqLM"),v$e=l(),Cr=a("div"),f(d0.$$.fragment),Xpr=l(),qc=a("p"),zpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lz=a("a"),Qpr=o("from_pretrained()"),Wpr=o(" class method or the "),xz=a("a"),Hpr=o("from_config()"),Upr=o(` class
method.`),Jpr=l(),c0=a("p"),Ypr=o("This class cannot be instantiated directly using "),Mbe=a("code"),Kpr=o("__init__()"),Zpr=o(" (throws an error)."),e_r=l(),bt=a("div"),f(f0.$$.fragment),o_r=l(),Ebe=a("p"),r_r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),t_r=l(),Nc=a("p"),a_r=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),n_r=o("not"),s_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=a("a"),l_r=o("from_pretrained()"),i_r=o(" to load the model weights."),d_r=l(),wbe=a("p"),c_r=o("Examples:"),f_r=l(),f(m0.$$.fragment),m_r=l(),Fo=a("div"),f(g0.$$.fragment),g_r=l(),Abe=a("p"),h_r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),p_r=l(),Mn=a("p"),__r=o("The model class to instantiate is selected based on the "),ybe=a("code"),u_r=o("model_type"),b_r=o(` property of the config object (either
passed as an argument or loaded from `),Lbe=a("code"),v_r=o("pretrained_model_name_or_path"),F_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=a("code"),T_r=o("pretrained_model_name_or_path"),M_r=o(":"),E_r=l(),Fe=a("ul"),QT=a("li"),kbe=a("strong"),C_r=o("bart"),w_r=o(" \u2014 "),Sz=a("a"),A_r=o("TFBartForConditionalGeneration"),y_r=o(" (BART model)"),L_r=l(),WT=a("li"),Sbe=a("strong"),x_r=o("blenderbot"),k_r=o(" \u2014 "),Rz=a("a"),S_r=o("TFBlenderbotForConditionalGeneration"),R_r=o(" (Blenderbot model)"),B_r=l(),HT=a("li"),Rbe=a("strong"),P_r=o("blenderbot-small"),$_r=o(" \u2014 "),Bz=a("a"),I_r=o("TFBlenderbotSmallForConditionalGeneration"),q_r=o(" (BlenderbotSmall model)"),N_r=l(),UT=a("li"),Bbe=a("strong"),j_r=o("encoder-decoder"),D_r=o(" \u2014 "),Pz=a("a"),G_r=o("TFEncoderDecoderModel"),O_r=o(" (Encoder decoder model)"),V_r=l(),JT=a("li"),Pbe=a("strong"),X_r=o("led"),z_r=o(" \u2014 "),$z=a("a"),Q_r=o("TFLEDForConditionalGeneration"),W_r=o(" (LED model)"),H_r=l(),YT=a("li"),$be=a("strong"),U_r=o("marian"),J_r=o(" \u2014 "),Iz=a("a"),Y_r=o("TFMarianMTModel"),K_r=o(" (Marian model)"),Z_r=l(),KT=a("li"),Ibe=a("strong"),eur=o("mbart"),our=o(" \u2014 "),qz=a("a"),rur=o("TFMBartForConditionalGeneration"),tur=o(" (mBART model)"),aur=l(),ZT=a("li"),qbe=a("strong"),nur=o("mt5"),sur=o(" \u2014 "),Nz=a("a"),lur=o("TFMT5ForConditionalGeneration"),iur=o(" (mT5 model)"),dur=l(),e8=a("li"),Nbe=a("strong"),cur=o("pegasus"),fur=o(" \u2014 "),jz=a("a"),mur=o("TFPegasusForConditionalGeneration"),gur=o(" (Pegasus model)"),hur=l(),o8=a("li"),jbe=a("strong"),pur=o("t5"),_ur=o(" \u2014 "),Dz=a("a"),uur=o("TFT5ForConditionalGeneration"),bur=o(" (T5 model)"),vur=l(),Dbe=a("p"),Fur=o("Examples:"),Tur=l(),f(h0.$$.fragment),F$e=l(),jc=a("h2"),r8=a("a"),Gbe=a("span"),f(p0.$$.fragment),Mur=l(),Obe=a("span"),Eur=o("TFAutoModelForSequenceClassification"),T$e=l(),wr=a("div"),f(_0.$$.fragment),Cur=l(),Dc=a("p"),wur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gz=a("a"),Aur=o("from_pretrained()"),yur=o(" class method or the "),Oz=a("a"),Lur=o("from_config()"),xur=o(` class
method.`),kur=l(),u0=a("p"),Sur=o("This class cannot be instantiated directly using "),Vbe=a("code"),Rur=o("__init__()"),Bur=o(" (throws an error)."),Pur=l(),vt=a("div"),f(b0.$$.fragment),$ur=l(),Xbe=a("p"),Iur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),qur=l(),Gc=a("p"),Nur=o(`Note:
Loading a model from its configuration file does `),zbe=a("strong"),jur=o("not"),Dur=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=a("a"),Gur=o("from_pretrained()"),Our=o(" to load the model weights."),Vur=l(),Qbe=a("p"),Xur=o("Examples:"),zur=l(),f(v0.$$.fragment),Qur=l(),To=a("div"),f(F0.$$.fragment),Wur=l(),Wbe=a("p"),Hur=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Uur=l(),En=a("p"),Jur=o("The model class to instantiate is selected based on the "),Hbe=a("code"),Yur=o("model_type"),Kur=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),Zur=o("pretrained_model_name_or_path"),e1r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),o1r=o("pretrained_model_name_or_path"),r1r=o(":"),t1r=l(),V=a("ul"),t8=a("li"),Ybe=a("strong"),a1r=o("albert"),n1r=o(" \u2014 "),Xz=a("a"),s1r=o("TFAlbertForSequenceClassification"),l1r=o(" (ALBERT model)"),i1r=l(),a8=a("li"),Kbe=a("strong"),d1r=o("bert"),c1r=o(" \u2014 "),zz=a("a"),f1r=o("TFBertForSequenceClassification"),m1r=o(" (BERT model)"),g1r=l(),n8=a("li"),Zbe=a("strong"),h1r=o("camembert"),p1r=o(" \u2014 "),Qz=a("a"),_1r=o("TFCamembertForSequenceClassification"),u1r=o(" (CamemBERT model)"),b1r=l(),s8=a("li"),e2e=a("strong"),v1r=o("convbert"),F1r=o(" \u2014 "),Wz=a("a"),T1r=o("TFConvBertForSequenceClassification"),M1r=o(" (ConvBERT model)"),E1r=l(),l8=a("li"),o2e=a("strong"),C1r=o("ctrl"),w1r=o(" \u2014 "),Hz=a("a"),A1r=o("TFCTRLForSequenceClassification"),y1r=o(" (CTRL model)"),L1r=l(),i8=a("li"),r2e=a("strong"),x1r=o("deberta"),k1r=o(" \u2014 "),Uz=a("a"),S1r=o("TFDebertaForSequenceClassification"),R1r=o(" (DeBERTa model)"),B1r=l(),d8=a("li"),t2e=a("strong"),P1r=o("deberta-v2"),$1r=o(" \u2014 "),Jz=a("a"),I1r=o("TFDebertaV2ForSequenceClassification"),q1r=o(" (DeBERTa-v2 model)"),N1r=l(),c8=a("li"),a2e=a("strong"),j1r=o("distilbert"),D1r=o(" \u2014 "),Yz=a("a"),G1r=o("TFDistilBertForSequenceClassification"),O1r=o(" (DistilBERT model)"),V1r=l(),f8=a("li"),n2e=a("strong"),X1r=o("electra"),z1r=o(" \u2014 "),Kz=a("a"),Q1r=o("TFElectraForSequenceClassification"),W1r=o(" (ELECTRA model)"),H1r=l(),m8=a("li"),s2e=a("strong"),U1r=o("flaubert"),J1r=o(" \u2014 "),Zz=a("a"),Y1r=o("TFFlaubertForSequenceClassification"),K1r=o(" (FlauBERT model)"),Z1r=l(),g8=a("li"),l2e=a("strong"),ebr=o("funnel"),obr=o(" \u2014 "),eQ=a("a"),rbr=o("TFFunnelForSequenceClassification"),tbr=o(" (Funnel Transformer model)"),abr=l(),h8=a("li"),i2e=a("strong"),nbr=o("gpt2"),sbr=o(" \u2014 "),oQ=a("a"),lbr=o("TFGPT2ForSequenceClassification"),ibr=o(" (OpenAI GPT-2 model)"),dbr=l(),p8=a("li"),d2e=a("strong"),cbr=o("gptj"),fbr=o(" \u2014 "),rQ=a("a"),mbr=o("TFGPTJForSequenceClassification"),gbr=o(" (GPT-J model)"),hbr=l(),_8=a("li"),c2e=a("strong"),pbr=o("layoutlm"),_br=o(" \u2014 "),tQ=a("a"),ubr=o("TFLayoutLMForSequenceClassification"),bbr=o(" (LayoutLM model)"),vbr=l(),u8=a("li"),f2e=a("strong"),Fbr=o("longformer"),Tbr=o(" \u2014 "),aQ=a("a"),Mbr=o("TFLongformerForSequenceClassification"),Ebr=o(" (Longformer model)"),Cbr=l(),b8=a("li"),m2e=a("strong"),wbr=o("mobilebert"),Abr=o(" \u2014 "),nQ=a("a"),ybr=o("TFMobileBertForSequenceClassification"),Lbr=o(" (MobileBERT model)"),xbr=l(),v8=a("li"),g2e=a("strong"),kbr=o("mpnet"),Sbr=o(" \u2014 "),sQ=a("a"),Rbr=o("TFMPNetForSequenceClassification"),Bbr=o(" (MPNet model)"),Pbr=l(),F8=a("li"),h2e=a("strong"),$br=o("openai-gpt"),Ibr=o(" \u2014 "),lQ=a("a"),qbr=o("TFOpenAIGPTForSequenceClassification"),Nbr=o(" (OpenAI GPT model)"),jbr=l(),T8=a("li"),p2e=a("strong"),Dbr=o("rembert"),Gbr=o(" \u2014 "),iQ=a("a"),Obr=o("TFRemBertForSequenceClassification"),Vbr=o(" (RemBERT model)"),Xbr=l(),M8=a("li"),_2e=a("strong"),zbr=o("roberta"),Qbr=o(" \u2014 "),dQ=a("a"),Wbr=o("TFRobertaForSequenceClassification"),Hbr=o(" (RoBERTa model)"),Ubr=l(),E8=a("li"),u2e=a("strong"),Jbr=o("roformer"),Ybr=o(" \u2014 "),cQ=a("a"),Kbr=o("TFRoFormerForSequenceClassification"),Zbr=o(" (RoFormer model)"),e2r=l(),C8=a("li"),b2e=a("strong"),o2r=o("tapas"),r2r=o(" \u2014 "),fQ=a("a"),t2r=o("TFTapasForSequenceClassification"),a2r=o(" (TAPAS model)"),n2r=l(),w8=a("li"),v2e=a("strong"),s2r=o("transfo-xl"),l2r=o(" \u2014 "),mQ=a("a"),i2r=o("TFTransfoXLForSequenceClassification"),d2r=o(" (Transformer-XL model)"),c2r=l(),A8=a("li"),F2e=a("strong"),f2r=o("xlm"),m2r=o(" \u2014 "),gQ=a("a"),g2r=o("TFXLMForSequenceClassification"),h2r=o(" (XLM model)"),p2r=l(),y8=a("li"),T2e=a("strong"),_2r=o("xlm-roberta"),u2r=o(" \u2014 "),hQ=a("a"),b2r=o("TFXLMRobertaForSequenceClassification"),v2r=o(" (XLM-RoBERTa model)"),F2r=l(),L8=a("li"),M2e=a("strong"),T2r=o("xlnet"),M2r=o(" \u2014 "),pQ=a("a"),E2r=o("TFXLNetForSequenceClassification"),C2r=o(" (XLNet model)"),w2r=l(),E2e=a("p"),A2r=o("Examples:"),y2r=l(),f(T0.$$.fragment),M$e=l(),Oc=a("h2"),x8=a("a"),C2e=a("span"),f(M0.$$.fragment),L2r=l(),w2e=a("span"),x2r=o("TFAutoModelForMultipleChoice"),E$e=l(),Ar=a("div"),f(E0.$$.fragment),k2r=l(),Vc=a("p"),S2r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_Q=a("a"),R2r=o("from_pretrained()"),B2r=o(" class method or the "),uQ=a("a"),P2r=o("from_config()"),$2r=o(` class
method.`),I2r=l(),C0=a("p"),q2r=o("This class cannot be instantiated directly using "),A2e=a("code"),N2r=o("__init__()"),j2r=o(" (throws an error)."),D2r=l(),Ft=a("div"),f(w0.$$.fragment),G2r=l(),y2e=a("p"),O2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),V2r=l(),Xc=a("p"),X2r=o(`Note:
Loading a model from its configuration file does `),L2e=a("strong"),z2r=o("not"),Q2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=a("a"),W2r=o("from_pretrained()"),H2r=o(" to load the model weights."),U2r=l(),x2e=a("p"),J2r=o("Examples:"),Y2r=l(),f(A0.$$.fragment),K2r=l(),Mo=a("div"),f(y0.$$.fragment),Z2r=l(),k2e=a("p"),e5r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o5r=l(),Cn=a("p"),r5r=o("The model class to instantiate is selected based on the "),S2e=a("code"),t5r=o("model_type"),a5r=o(` property of the config object (either
passed as an argument or loaded from `),R2e=a("code"),n5r=o("pretrained_model_name_or_path"),s5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=a("code"),l5r=o("pretrained_model_name_or_path"),i5r=o(":"),d5r=l(),se=a("ul"),k8=a("li"),P2e=a("strong"),c5r=o("albert"),f5r=o(" \u2014 "),vQ=a("a"),m5r=o("TFAlbertForMultipleChoice"),g5r=o(" (ALBERT model)"),h5r=l(),S8=a("li"),$2e=a("strong"),p5r=o("bert"),_5r=o(" \u2014 "),FQ=a("a"),u5r=o("TFBertForMultipleChoice"),b5r=o(" (BERT model)"),v5r=l(),R8=a("li"),I2e=a("strong"),F5r=o("camembert"),T5r=o(" \u2014 "),TQ=a("a"),M5r=o("TFCamembertForMultipleChoice"),E5r=o(" (CamemBERT model)"),C5r=l(),B8=a("li"),q2e=a("strong"),w5r=o("convbert"),A5r=o(" \u2014 "),MQ=a("a"),y5r=o("TFConvBertForMultipleChoice"),L5r=o(" (ConvBERT model)"),x5r=l(),P8=a("li"),N2e=a("strong"),k5r=o("distilbert"),S5r=o(" \u2014 "),EQ=a("a"),R5r=o("TFDistilBertForMultipleChoice"),B5r=o(" (DistilBERT model)"),P5r=l(),$8=a("li"),j2e=a("strong"),$5r=o("electra"),I5r=o(" \u2014 "),CQ=a("a"),q5r=o("TFElectraForMultipleChoice"),N5r=o(" (ELECTRA model)"),j5r=l(),I8=a("li"),D2e=a("strong"),D5r=o("flaubert"),G5r=o(" \u2014 "),wQ=a("a"),O5r=o("TFFlaubertForMultipleChoice"),V5r=o(" (FlauBERT model)"),X5r=l(),q8=a("li"),G2e=a("strong"),z5r=o("funnel"),Q5r=o(" \u2014 "),AQ=a("a"),W5r=o("TFFunnelForMultipleChoice"),H5r=o(" (Funnel Transformer model)"),U5r=l(),N8=a("li"),O2e=a("strong"),J5r=o("longformer"),Y5r=o(" \u2014 "),yQ=a("a"),K5r=o("TFLongformerForMultipleChoice"),Z5r=o(" (Longformer model)"),e6r=l(),j8=a("li"),V2e=a("strong"),o6r=o("mobilebert"),r6r=o(" \u2014 "),LQ=a("a"),t6r=o("TFMobileBertForMultipleChoice"),a6r=o(" (MobileBERT model)"),n6r=l(),D8=a("li"),X2e=a("strong"),s6r=o("mpnet"),l6r=o(" \u2014 "),xQ=a("a"),i6r=o("TFMPNetForMultipleChoice"),d6r=o(" (MPNet model)"),c6r=l(),G8=a("li"),z2e=a("strong"),f6r=o("rembert"),m6r=o(" \u2014 "),kQ=a("a"),g6r=o("TFRemBertForMultipleChoice"),h6r=o(" (RemBERT model)"),p6r=l(),O8=a("li"),Q2e=a("strong"),_6r=o("roberta"),u6r=o(" \u2014 "),SQ=a("a"),b6r=o("TFRobertaForMultipleChoice"),v6r=o(" (RoBERTa model)"),F6r=l(),V8=a("li"),W2e=a("strong"),T6r=o("roformer"),M6r=o(" \u2014 "),RQ=a("a"),E6r=o("TFRoFormerForMultipleChoice"),C6r=o(" (RoFormer model)"),w6r=l(),X8=a("li"),H2e=a("strong"),A6r=o("xlm"),y6r=o(" \u2014 "),BQ=a("a"),L6r=o("TFXLMForMultipleChoice"),x6r=o(" (XLM model)"),k6r=l(),z8=a("li"),U2e=a("strong"),S6r=o("xlm-roberta"),R6r=o(" \u2014 "),PQ=a("a"),B6r=o("TFXLMRobertaForMultipleChoice"),P6r=o(" (XLM-RoBERTa model)"),$6r=l(),Q8=a("li"),J2e=a("strong"),I6r=o("xlnet"),q6r=o(" \u2014 "),$Q=a("a"),N6r=o("TFXLNetForMultipleChoice"),j6r=o(" (XLNet model)"),D6r=l(),Y2e=a("p"),G6r=o("Examples:"),O6r=l(),f(L0.$$.fragment),C$e=l(),zc=a("h2"),W8=a("a"),K2e=a("span"),f(x0.$$.fragment),V6r=l(),Z2e=a("span"),X6r=o("TFAutoModelForTableQuestionAnswering"),w$e=l(),yr=a("div"),f(k0.$$.fragment),z6r=l(),Qc=a("p"),Q6r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IQ=a("a"),W6r=o("from_pretrained()"),H6r=o(" class method or the "),qQ=a("a"),U6r=o("from_config()"),J6r=o(` class
method.`),Y6r=l(),S0=a("p"),K6r=o("This class cannot be instantiated directly using "),e5e=a("code"),Z6r=o("__init__()"),evr=o(" (throws an error)."),ovr=l(),Tt=a("div"),f(R0.$$.fragment),rvr=l(),o5e=a("p"),tvr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),avr=l(),Wc=a("p"),nvr=o(`Note:
Loading a model from its configuration file does `),r5e=a("strong"),svr=o("not"),lvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=a("a"),ivr=o("from_pretrained()"),dvr=o(" to load the model weights."),cvr=l(),t5e=a("p"),fvr=o("Examples:"),mvr=l(),f(B0.$$.fragment),gvr=l(),Eo=a("div"),f(P0.$$.fragment),hvr=l(),a5e=a("p"),pvr=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),_vr=l(),wn=a("p"),uvr=o("The model class to instantiate is selected based on the "),n5e=a("code"),bvr=o("model_type"),vvr=o(` property of the config object (either
passed as an argument or loaded from `),s5e=a("code"),Fvr=o("pretrained_model_name_or_path"),Tvr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=a("code"),Mvr=o("pretrained_model_name_or_path"),Evr=o(":"),Cvr=l(),i5e=a("ul"),H8=a("li"),d5e=a("strong"),wvr=o("tapas"),Avr=o(" \u2014 "),jQ=a("a"),yvr=o("TFTapasForQuestionAnswering"),Lvr=o(" (TAPAS model)"),xvr=l(),c5e=a("p"),kvr=o("Examples:"),Svr=l(),f($0.$$.fragment),A$e=l(),Hc=a("h2"),U8=a("a"),f5e=a("span"),f(I0.$$.fragment),Rvr=l(),m5e=a("span"),Bvr=o("TFAutoModelForTokenClassification"),y$e=l(),Lr=a("div"),f(q0.$$.fragment),Pvr=l(),Uc=a("p"),$vr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DQ=a("a"),Ivr=o("from_pretrained()"),qvr=o(" class method or the "),GQ=a("a"),Nvr=o("from_config()"),jvr=o(` class
method.`),Dvr=l(),N0=a("p"),Gvr=o("This class cannot be instantiated directly using "),g5e=a("code"),Ovr=o("__init__()"),Vvr=o(" (throws an error)."),Xvr=l(),Mt=a("div"),f(j0.$$.fragment),zvr=l(),h5e=a("p"),Qvr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Wvr=l(),Jc=a("p"),Hvr=o(`Note:
Loading a model from its configuration file does `),p5e=a("strong"),Uvr=o("not"),Jvr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=a("a"),Yvr=o("from_pretrained()"),Kvr=o(" to load the model weights."),Zvr=l(),_5e=a("p"),eFr=o("Examples:"),oFr=l(),f(D0.$$.fragment),rFr=l(),Co=a("div"),f(G0.$$.fragment),tFr=l(),u5e=a("p"),aFr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nFr=l(),An=a("p"),sFr=o("The model class to instantiate is selected based on the "),b5e=a("code"),lFr=o("model_type"),iFr=o(` property of the config object (either
passed as an argument or loaded from `),v5e=a("code"),dFr=o("pretrained_model_name_or_path"),cFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=a("code"),fFr=o("pretrained_model_name_or_path"),mFr=o(":"),gFr=l(),Z=a("ul"),J8=a("li"),T5e=a("strong"),hFr=o("albert"),pFr=o(" \u2014 "),VQ=a("a"),_Fr=o("TFAlbertForTokenClassification"),uFr=o(" (ALBERT model)"),bFr=l(),Y8=a("li"),M5e=a("strong"),vFr=o("bert"),FFr=o(" \u2014 "),XQ=a("a"),TFr=o("TFBertForTokenClassification"),MFr=o(" (BERT model)"),EFr=l(),K8=a("li"),E5e=a("strong"),CFr=o("camembert"),wFr=o(" \u2014 "),zQ=a("a"),AFr=o("TFCamembertForTokenClassification"),yFr=o(" (CamemBERT model)"),LFr=l(),Z8=a("li"),C5e=a("strong"),xFr=o("convbert"),kFr=o(" \u2014 "),QQ=a("a"),SFr=o("TFConvBertForTokenClassification"),RFr=o(" (ConvBERT model)"),BFr=l(),e7=a("li"),w5e=a("strong"),PFr=o("deberta"),$Fr=o(" \u2014 "),WQ=a("a"),IFr=o("TFDebertaForTokenClassification"),qFr=o(" (DeBERTa model)"),NFr=l(),o7=a("li"),A5e=a("strong"),jFr=o("deberta-v2"),DFr=o(" \u2014 "),HQ=a("a"),GFr=o("TFDebertaV2ForTokenClassification"),OFr=o(" (DeBERTa-v2 model)"),VFr=l(),r7=a("li"),y5e=a("strong"),XFr=o("distilbert"),zFr=o(" \u2014 "),UQ=a("a"),QFr=o("TFDistilBertForTokenClassification"),WFr=o(" (DistilBERT model)"),HFr=l(),t7=a("li"),L5e=a("strong"),UFr=o("electra"),JFr=o(" \u2014 "),JQ=a("a"),YFr=o("TFElectraForTokenClassification"),KFr=o(" (ELECTRA model)"),ZFr=l(),a7=a("li"),x5e=a("strong"),eTr=o("flaubert"),oTr=o(" \u2014 "),YQ=a("a"),rTr=o("TFFlaubertForTokenClassification"),tTr=o(" (FlauBERT model)"),aTr=l(),n7=a("li"),k5e=a("strong"),nTr=o("funnel"),sTr=o(" \u2014 "),KQ=a("a"),lTr=o("TFFunnelForTokenClassification"),iTr=o(" (Funnel Transformer model)"),dTr=l(),s7=a("li"),S5e=a("strong"),cTr=o("layoutlm"),fTr=o(" \u2014 "),ZQ=a("a"),mTr=o("TFLayoutLMForTokenClassification"),gTr=o(" (LayoutLM model)"),hTr=l(),l7=a("li"),R5e=a("strong"),pTr=o("longformer"),_Tr=o(" \u2014 "),eW=a("a"),uTr=o("TFLongformerForTokenClassification"),bTr=o(" (Longformer model)"),vTr=l(),i7=a("li"),B5e=a("strong"),FTr=o("mobilebert"),TTr=o(" \u2014 "),oW=a("a"),MTr=o("TFMobileBertForTokenClassification"),ETr=o(" (MobileBERT model)"),CTr=l(),d7=a("li"),P5e=a("strong"),wTr=o("mpnet"),ATr=o(" \u2014 "),rW=a("a"),yTr=o("TFMPNetForTokenClassification"),LTr=o(" (MPNet model)"),xTr=l(),c7=a("li"),$5e=a("strong"),kTr=o("rembert"),STr=o(" \u2014 "),tW=a("a"),RTr=o("TFRemBertForTokenClassification"),BTr=o(" (RemBERT model)"),PTr=l(),f7=a("li"),I5e=a("strong"),$Tr=o("roberta"),ITr=o(" \u2014 "),aW=a("a"),qTr=o("TFRobertaForTokenClassification"),NTr=o(" (RoBERTa model)"),jTr=l(),m7=a("li"),q5e=a("strong"),DTr=o("roformer"),GTr=o(" \u2014 "),nW=a("a"),OTr=o("TFRoFormerForTokenClassification"),VTr=o(" (RoFormer model)"),XTr=l(),g7=a("li"),N5e=a("strong"),zTr=o("xlm"),QTr=o(" \u2014 "),sW=a("a"),WTr=o("TFXLMForTokenClassification"),HTr=o(" (XLM model)"),UTr=l(),h7=a("li"),j5e=a("strong"),JTr=o("xlm-roberta"),YTr=o(" \u2014 "),lW=a("a"),KTr=o("TFXLMRobertaForTokenClassification"),ZTr=o(" (XLM-RoBERTa model)"),e8r=l(),p7=a("li"),D5e=a("strong"),o8r=o("xlnet"),r8r=o(" \u2014 "),iW=a("a"),t8r=o("TFXLNetForTokenClassification"),a8r=o(" (XLNet model)"),n8r=l(),G5e=a("p"),s8r=o("Examples:"),l8r=l(),f(O0.$$.fragment),L$e=l(),Yc=a("h2"),_7=a("a"),O5e=a("span"),f(V0.$$.fragment),i8r=l(),V5e=a("span"),d8r=o("TFAutoModelForQuestionAnswering"),x$e=l(),xr=a("div"),f(X0.$$.fragment),c8r=l(),Kc=a("p"),f8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dW=a("a"),m8r=o("from_pretrained()"),g8r=o(" class method or the "),cW=a("a"),h8r=o("from_config()"),p8r=o(` class
method.`),_8r=l(),z0=a("p"),u8r=o("This class cannot be instantiated directly using "),X5e=a("code"),b8r=o("__init__()"),v8r=o(" (throws an error)."),F8r=l(),Et=a("div"),f(Q0.$$.fragment),T8r=l(),z5e=a("p"),M8r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),E8r=l(),Zc=a("p"),C8r=o(`Note:
Loading a model from its configuration file does `),Q5e=a("strong"),w8r=o("not"),A8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=a("a"),y8r=o("from_pretrained()"),L8r=o(" to load the model weights."),x8r=l(),W5e=a("p"),k8r=o("Examples:"),S8r=l(),f(W0.$$.fragment),R8r=l(),wo=a("div"),f(H0.$$.fragment),B8r=l(),H5e=a("p"),P8r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),$8r=l(),yn=a("p"),I8r=o("The model class to instantiate is selected based on the "),U5e=a("code"),q8r=o("model_type"),N8r=o(` property of the config object (either
passed as an argument or loaded from `),J5e=a("code"),j8r=o("pretrained_model_name_or_path"),D8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=a("code"),G8r=o("pretrained_model_name_or_path"),O8r=o(":"),V8r=l(),ee=a("ul"),u7=a("li"),K5e=a("strong"),X8r=o("albert"),z8r=o(" \u2014 "),mW=a("a"),Q8r=o("TFAlbertForQuestionAnswering"),W8r=o(" (ALBERT model)"),H8r=l(),b7=a("li"),Z5e=a("strong"),U8r=o("bert"),J8r=o(" \u2014 "),gW=a("a"),Y8r=o("TFBertForQuestionAnswering"),K8r=o(" (BERT model)"),Z8r=l(),v7=a("li"),e6e=a("strong"),e7r=o("camembert"),o7r=o(" \u2014 "),hW=a("a"),r7r=o("TFCamembertForQuestionAnswering"),t7r=o(" (CamemBERT model)"),a7r=l(),F7=a("li"),o6e=a("strong"),n7r=o("convbert"),s7r=o(" \u2014 "),pW=a("a"),l7r=o("TFConvBertForQuestionAnswering"),i7r=o(" (ConvBERT model)"),d7r=l(),T7=a("li"),r6e=a("strong"),c7r=o("deberta"),f7r=o(" \u2014 "),_W=a("a"),m7r=o("TFDebertaForQuestionAnswering"),g7r=o(" (DeBERTa model)"),h7r=l(),M7=a("li"),t6e=a("strong"),p7r=o("deberta-v2"),_7r=o(" \u2014 "),uW=a("a"),u7r=o("TFDebertaV2ForQuestionAnswering"),b7r=o(" (DeBERTa-v2 model)"),v7r=l(),E7=a("li"),a6e=a("strong"),F7r=o("distilbert"),T7r=o(" \u2014 "),bW=a("a"),M7r=o("TFDistilBertForQuestionAnswering"),E7r=o(" (DistilBERT model)"),C7r=l(),C7=a("li"),n6e=a("strong"),w7r=o("electra"),A7r=o(" \u2014 "),vW=a("a"),y7r=o("TFElectraForQuestionAnswering"),L7r=o(" (ELECTRA model)"),x7r=l(),w7=a("li"),s6e=a("strong"),k7r=o("flaubert"),S7r=o(" \u2014 "),FW=a("a"),R7r=o("TFFlaubertForQuestionAnsweringSimple"),B7r=o(" (FlauBERT model)"),P7r=l(),A7=a("li"),l6e=a("strong"),$7r=o("funnel"),I7r=o(" \u2014 "),TW=a("a"),q7r=o("TFFunnelForQuestionAnswering"),N7r=o(" (Funnel Transformer model)"),j7r=l(),y7=a("li"),i6e=a("strong"),D7r=o("gptj"),G7r=o(" \u2014 "),MW=a("a"),O7r=o("TFGPTJForQuestionAnswering"),V7r=o(" (GPT-J model)"),X7r=l(),L7=a("li"),d6e=a("strong"),z7r=o("longformer"),Q7r=o(" \u2014 "),EW=a("a"),W7r=o("TFLongformerForQuestionAnswering"),H7r=o(" (Longformer model)"),U7r=l(),x7=a("li"),c6e=a("strong"),J7r=o("mobilebert"),Y7r=o(" \u2014 "),CW=a("a"),K7r=o("TFMobileBertForQuestionAnswering"),Z7r=o(" (MobileBERT model)"),eMr=l(),k7=a("li"),f6e=a("strong"),oMr=o("mpnet"),rMr=o(" \u2014 "),wW=a("a"),tMr=o("TFMPNetForQuestionAnswering"),aMr=o(" (MPNet model)"),nMr=l(),S7=a("li"),m6e=a("strong"),sMr=o("rembert"),lMr=o(" \u2014 "),AW=a("a"),iMr=o("TFRemBertForQuestionAnswering"),dMr=o(" (RemBERT model)"),cMr=l(),R7=a("li"),g6e=a("strong"),fMr=o("roberta"),mMr=o(" \u2014 "),yW=a("a"),gMr=o("TFRobertaForQuestionAnswering"),hMr=o(" (RoBERTa model)"),pMr=l(),B7=a("li"),h6e=a("strong"),_Mr=o("roformer"),uMr=o(" \u2014 "),LW=a("a"),bMr=o("TFRoFormerForQuestionAnswering"),vMr=o(" (RoFormer model)"),FMr=l(),P7=a("li"),p6e=a("strong"),TMr=o("xlm"),MMr=o(" \u2014 "),xW=a("a"),EMr=o("TFXLMForQuestionAnsweringSimple"),CMr=o(" (XLM model)"),wMr=l(),$7=a("li"),_6e=a("strong"),AMr=o("xlm-roberta"),yMr=o(" \u2014 "),kW=a("a"),LMr=o("TFXLMRobertaForQuestionAnswering"),xMr=o(" (XLM-RoBERTa model)"),kMr=l(),I7=a("li"),u6e=a("strong"),SMr=o("xlnet"),RMr=o(" \u2014 "),SW=a("a"),BMr=o("TFXLNetForQuestionAnsweringSimple"),PMr=o(" (XLNet model)"),$Mr=l(),b6e=a("p"),IMr=o("Examples:"),qMr=l(),f(U0.$$.fragment),k$e=l(),ef=a("h2"),q7=a("a"),v6e=a("span"),f(J0.$$.fragment),NMr=l(),F6e=a("span"),jMr=o("TFAutoModelForVision2Seq"),S$e=l(),kr=a("div"),f(Y0.$$.fragment),DMr=l(),of=a("p"),GMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=a("a"),OMr=o("from_pretrained()"),VMr=o(" class method or the "),BW=a("a"),XMr=o("from_config()"),zMr=o(` class
method.`),QMr=l(),K0=a("p"),WMr=o("This class cannot be instantiated directly using "),T6e=a("code"),HMr=o("__init__()"),UMr=o(" (throws an error)."),JMr=l(),Ct=a("div"),f(Z0.$$.fragment),YMr=l(),M6e=a("p"),KMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),ZMr=l(),rf=a("p"),e4r=o(`Note:
Loading a model from its configuration file does `),E6e=a("strong"),o4r=o("not"),r4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=a("a"),t4r=o("from_pretrained()"),a4r=o(" to load the model weights."),n4r=l(),C6e=a("p"),s4r=o("Examples:"),l4r=l(),f(ey.$$.fragment),i4r=l(),Ao=a("div"),f(oy.$$.fragment),d4r=l(),w6e=a("p"),c4r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),f4r=l(),Ln=a("p"),m4r=o("The model class to instantiate is selected based on the "),A6e=a("code"),g4r=o("model_type"),h4r=o(` property of the config object (either
passed as an argument or loaded from `),y6e=a("code"),p4r=o("pretrained_model_name_or_path"),_4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=a("code"),u4r=o("pretrained_model_name_or_path"),b4r=o(":"),v4r=l(),x6e=a("ul"),N7=a("li"),k6e=a("strong"),F4r=o("vision-encoder-decoder"),T4r=o(" \u2014 "),$W=a("a"),M4r=o("TFVisionEncoderDecoderModel"),E4r=o(" (Vision Encoder decoder model)"),C4r=l(),S6e=a("p"),w4r=o("Examples:"),A4r=l(),f(ry.$$.fragment),R$e=l(),tf=a("h2"),j7=a("a"),R6e=a("span"),f(ty.$$.fragment),y4r=l(),B6e=a("span"),L4r=o("TFAutoModelForSpeechSeq2Seq"),B$e=l(),Sr=a("div"),f(ay.$$.fragment),x4r=l(),af=a("p"),k4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IW=a("a"),S4r=o("from_pretrained()"),R4r=o(" class method or the "),qW=a("a"),B4r=o("from_config()"),P4r=o(` class
method.`),$4r=l(),ny=a("p"),I4r=o("This class cannot be instantiated directly using "),P6e=a("code"),q4r=o("__init__()"),N4r=o(" (throws an error)."),j4r=l(),wt=a("div"),f(sy.$$.fragment),D4r=l(),$6e=a("p"),G4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),O4r=l(),nf=a("p"),V4r=o(`Note:
Loading a model from its configuration file does `),I6e=a("strong"),X4r=o("not"),z4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),Q4r=o("from_pretrained()"),W4r=o(" to load the model weights."),H4r=l(),q6e=a("p"),U4r=o("Examples:"),J4r=l(),f(ly.$$.fragment),Y4r=l(),yo=a("div"),f(iy.$$.fragment),K4r=l(),N6e=a("p"),Z4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),eEr=l(),xn=a("p"),oEr=o("The model class to instantiate is selected based on the "),j6e=a("code"),rEr=o("model_type"),tEr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),aEr=o("pretrained_model_name_or_path"),nEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),sEr=o("pretrained_model_name_or_path"),lEr=o(":"),iEr=l(),O6e=a("ul"),D7=a("li"),V6e=a("strong"),dEr=o("speech_to_text"),cEr=o(" \u2014 "),jW=a("a"),fEr=o("TFSpeech2TextForConditionalGeneration"),mEr=o(" (Speech2Text model)"),gEr=l(),X6e=a("p"),hEr=o("Examples:"),pEr=l(),f(dy.$$.fragment),P$e=l(),sf=a("h2"),G7=a("a"),z6e=a("span"),f(cy.$$.fragment),_Er=l(),Q6e=a("span"),uEr=o("FlaxAutoModel"),$$e=l(),Rr=a("div"),f(fy.$$.fragment),bEr=l(),lf=a("p"),vEr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DW=a("a"),FEr=o("from_pretrained()"),TEr=o(" class method or the "),GW=a("a"),MEr=o("from_config()"),EEr=o(` class
method.`),CEr=l(),my=a("p"),wEr=o("This class cannot be instantiated directly using "),W6e=a("code"),AEr=o("__init__()"),yEr=o(" (throws an error)."),LEr=l(),At=a("div"),f(gy.$$.fragment),xEr=l(),H6e=a("p"),kEr=o("Instantiates one of the base model classes of the library from a configuration."),SEr=l(),df=a("p"),REr=o(`Note:
Loading a model from its configuration file does `),U6e=a("strong"),BEr=o("not"),PEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),$Er=o("from_pretrained()"),IEr=o(" to load the model weights."),qEr=l(),J6e=a("p"),NEr=o("Examples:"),jEr=l(),f(hy.$$.fragment),DEr=l(),Lo=a("div"),f(py.$$.fragment),GEr=l(),Y6e=a("p"),OEr=o("Instantiate one of the base model classes of the library from a pretrained model."),VEr=l(),kn=a("p"),XEr=o("The model class to instantiate is selected based on the "),K6e=a("code"),zEr=o("model_type"),QEr=o(` property of the config object (either
passed as an argument or loaded from `),Z6e=a("code"),WEr=o("pretrained_model_name_or_path"),HEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=a("code"),UEr=o("pretrained_model_name_or_path"),JEr=o(":"),YEr=l(),z=a("ul"),O7=a("li"),ove=a("strong"),KEr=o("albert"),ZEr=o(" \u2014 "),VW=a("a"),e3r=o("FlaxAlbertModel"),o3r=o(" (ALBERT model)"),r3r=l(),V7=a("li"),rve=a("strong"),t3r=o("bart"),a3r=o(" \u2014 "),XW=a("a"),n3r=o("FlaxBartModel"),s3r=o(" (BART model)"),l3r=l(),X7=a("li"),tve=a("strong"),i3r=o("beit"),d3r=o(" \u2014 "),zW=a("a"),c3r=o("FlaxBeitModel"),f3r=o(" (BEiT model)"),m3r=l(),z7=a("li"),ave=a("strong"),g3r=o("bert"),h3r=o(" \u2014 "),QW=a("a"),p3r=o("FlaxBertModel"),_3r=o(" (BERT model)"),u3r=l(),Q7=a("li"),nve=a("strong"),b3r=o("big_bird"),v3r=o(" \u2014 "),WW=a("a"),F3r=o("FlaxBigBirdModel"),T3r=o(" (BigBird model)"),M3r=l(),W7=a("li"),sve=a("strong"),E3r=o("blenderbot"),C3r=o(" \u2014 "),HW=a("a"),w3r=o("FlaxBlenderbotModel"),A3r=o(" (Blenderbot model)"),y3r=l(),H7=a("li"),lve=a("strong"),L3r=o("blenderbot-small"),x3r=o(" \u2014 "),UW=a("a"),k3r=o("FlaxBlenderbotSmallModel"),S3r=o(" (BlenderbotSmall model)"),R3r=l(),U7=a("li"),ive=a("strong"),B3r=o("clip"),P3r=o(" \u2014 "),JW=a("a"),$3r=o("FlaxCLIPModel"),I3r=o(" (CLIP model)"),q3r=l(),J7=a("li"),dve=a("strong"),N3r=o("distilbert"),j3r=o(" \u2014 "),YW=a("a"),D3r=o("FlaxDistilBertModel"),G3r=o(" (DistilBERT model)"),O3r=l(),Y7=a("li"),cve=a("strong"),V3r=o("electra"),X3r=o(" \u2014 "),KW=a("a"),z3r=o("FlaxElectraModel"),Q3r=o(" (ELECTRA model)"),W3r=l(),K7=a("li"),fve=a("strong"),H3r=o("gpt2"),U3r=o(" \u2014 "),ZW=a("a"),J3r=o("FlaxGPT2Model"),Y3r=o(" (OpenAI GPT-2 model)"),K3r=l(),Z7=a("li"),mve=a("strong"),Z3r=o("gpt_neo"),eCr=o(" \u2014 "),eH=a("a"),oCr=o("FlaxGPTNeoModel"),rCr=o(" (GPT Neo model)"),tCr=l(),eM=a("li"),gve=a("strong"),aCr=o("gptj"),nCr=o(" \u2014 "),oH=a("a"),sCr=o("FlaxGPTJModel"),lCr=o(" (GPT-J model)"),iCr=l(),oM=a("li"),hve=a("strong"),dCr=o("marian"),cCr=o(" \u2014 "),rH=a("a"),fCr=o("FlaxMarianModel"),mCr=o(" (Marian model)"),gCr=l(),rM=a("li"),pve=a("strong"),hCr=o("mbart"),pCr=o(" \u2014 "),tH=a("a"),_Cr=o("FlaxMBartModel"),uCr=o(" (mBART model)"),bCr=l(),tM=a("li"),_ve=a("strong"),vCr=o("mt5"),FCr=o(" \u2014 "),aH=a("a"),TCr=o("FlaxMT5Model"),MCr=o(" (mT5 model)"),ECr=l(),aM=a("li"),uve=a("strong"),CCr=o("pegasus"),wCr=o(" \u2014 "),nH=a("a"),ACr=o("FlaxPegasusModel"),yCr=o(" (Pegasus model)"),LCr=l(),nM=a("li"),bve=a("strong"),xCr=o("roberta"),kCr=o(" \u2014 "),sH=a("a"),SCr=o("FlaxRobertaModel"),RCr=o(" (RoBERTa model)"),BCr=l(),sM=a("li"),vve=a("strong"),PCr=o("roformer"),$Cr=o(" \u2014 "),lH=a("a"),ICr=o("FlaxRoFormerModel"),qCr=o(" (RoFormer model)"),NCr=l(),lM=a("li"),Fve=a("strong"),jCr=o("t5"),DCr=o(" \u2014 "),iH=a("a"),GCr=o("FlaxT5Model"),OCr=o(" (T5 model)"),VCr=l(),iM=a("li"),Tve=a("strong"),XCr=o("vision-text-dual-encoder"),zCr=o(" \u2014 "),dH=a("a"),QCr=o("FlaxVisionTextDualEncoderModel"),WCr=o(" (VisionTextDualEncoder model)"),HCr=l(),dM=a("li"),Mve=a("strong"),UCr=o("vit"),JCr=o(" \u2014 "),cH=a("a"),YCr=o("FlaxViTModel"),KCr=o(" (ViT model)"),ZCr=l(),cM=a("li"),Eve=a("strong"),ewr=o("wav2vec2"),owr=o(" \u2014 "),fH=a("a"),rwr=o("FlaxWav2Vec2Model"),twr=o(" (Wav2Vec2 model)"),awr=l(),fM=a("li"),Cve=a("strong"),nwr=o("xglm"),swr=o(" \u2014 "),mH=a("a"),lwr=o("FlaxXGLMModel"),iwr=o(" (XGLM model)"),dwr=l(),mM=a("li"),wve=a("strong"),cwr=o("xlm-roberta"),fwr=o(" \u2014 "),gH=a("a"),mwr=o("FlaxXLMRobertaModel"),gwr=o(" (XLM-RoBERTa model)"),hwr=l(),Ave=a("p"),pwr=o("Examples:"),_wr=l(),f(_y.$$.fragment),I$e=l(),cf=a("h2"),gM=a("a"),yve=a("span"),f(uy.$$.fragment),uwr=l(),Lve=a("span"),bwr=o("FlaxAutoModelForCausalLM"),q$e=l(),Br=a("div"),f(by.$$.fragment),vwr=l(),ff=a("p"),Fwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hH=a("a"),Twr=o("from_pretrained()"),Mwr=o(" class method or the "),pH=a("a"),Ewr=o("from_config()"),Cwr=o(` class
method.`),wwr=l(),vy=a("p"),Awr=o("This class cannot be instantiated directly using "),xve=a("code"),ywr=o("__init__()"),Lwr=o(" (throws an error)."),xwr=l(),yt=a("div"),f(Fy.$$.fragment),kwr=l(),kve=a("p"),Swr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Rwr=l(),mf=a("p"),Bwr=o(`Note:
Loading a model from its configuration file does `),Sve=a("strong"),Pwr=o("not"),$wr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=a("a"),Iwr=o("from_pretrained()"),qwr=o(" to load the model weights."),Nwr=l(),Rve=a("p"),jwr=o("Examples:"),Dwr=l(),f(Ty.$$.fragment),Gwr=l(),xo=a("div"),f(My.$$.fragment),Owr=l(),Bve=a("p"),Vwr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Xwr=l(),Sn=a("p"),zwr=o("The model class to instantiate is selected based on the "),Pve=a("code"),Qwr=o("model_type"),Wwr=o(` property of the config object (either
passed as an argument or loaded from `),$ve=a("code"),Hwr=o("pretrained_model_name_or_path"),Uwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=a("code"),Jwr=o("pretrained_model_name_or_path"),Ywr=o(":"),Kwr=l(),ca=a("ul"),hM=a("li"),qve=a("strong"),Zwr=o("bart"),eAr=o(" \u2014 "),uH=a("a"),oAr=o("FlaxBartForCausalLM"),rAr=o(" (BART model)"),tAr=l(),pM=a("li"),Nve=a("strong"),aAr=o("gpt2"),nAr=o(" \u2014 "),bH=a("a"),sAr=o("FlaxGPT2LMHeadModel"),lAr=o(" (OpenAI GPT-2 model)"),iAr=l(),_M=a("li"),jve=a("strong"),dAr=o("gpt_neo"),cAr=o(" \u2014 "),vH=a("a"),fAr=o("FlaxGPTNeoForCausalLM"),mAr=o(" (GPT Neo model)"),gAr=l(),uM=a("li"),Dve=a("strong"),hAr=o("gptj"),pAr=o(" \u2014 "),FH=a("a"),_Ar=o("FlaxGPTJForCausalLM"),uAr=o(" (GPT-J model)"),bAr=l(),bM=a("li"),Gve=a("strong"),vAr=o("xglm"),FAr=o(" \u2014 "),TH=a("a"),TAr=o("FlaxXGLMForCausalLM"),MAr=o(" (XGLM model)"),EAr=l(),Ove=a("p"),CAr=o("Examples:"),wAr=l(),f(Ey.$$.fragment),N$e=l(),gf=a("h2"),vM=a("a"),Vve=a("span"),f(Cy.$$.fragment),AAr=l(),Xve=a("span"),yAr=o("FlaxAutoModelForPreTraining"),j$e=l(),Pr=a("div"),f(wy.$$.fragment),LAr=l(),hf=a("p"),xAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MH=a("a"),kAr=o("from_pretrained()"),SAr=o(" class method or the "),EH=a("a"),RAr=o("from_config()"),BAr=o(` class
method.`),PAr=l(),Ay=a("p"),$Ar=o("This class cannot be instantiated directly using "),zve=a("code"),IAr=o("__init__()"),qAr=o(" (throws an error)."),NAr=l(),Lt=a("div"),f(yy.$$.fragment),jAr=l(),Qve=a("p"),DAr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),GAr=l(),pf=a("p"),OAr=o(`Note:
Loading a model from its configuration file does `),Wve=a("strong"),VAr=o("not"),XAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=a("a"),zAr=o("from_pretrained()"),QAr=o(" to load the model weights."),WAr=l(),Hve=a("p"),HAr=o("Examples:"),UAr=l(),f(Ly.$$.fragment),JAr=l(),ko=a("div"),f(xy.$$.fragment),YAr=l(),Uve=a("p"),KAr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ZAr=l(),Rn=a("p"),e0r=o("The model class to instantiate is selected based on the "),Jve=a("code"),o0r=o("model_type"),r0r=o(` property of the config object (either
passed as an argument or loaded from `),Yve=a("code"),t0r=o("pretrained_model_name_or_path"),a0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=a("code"),n0r=o("pretrained_model_name_or_path"),s0r=o(":"),l0r=l(),he=a("ul"),FM=a("li"),Zve=a("strong"),i0r=o("albert"),d0r=o(" \u2014 "),wH=a("a"),c0r=o("FlaxAlbertForPreTraining"),f0r=o(" (ALBERT model)"),m0r=l(),TM=a("li"),eFe=a("strong"),g0r=o("bart"),h0r=o(" \u2014 "),AH=a("a"),p0r=o("FlaxBartForConditionalGeneration"),_0r=o(" (BART model)"),u0r=l(),MM=a("li"),oFe=a("strong"),b0r=o("bert"),v0r=o(" \u2014 "),yH=a("a"),F0r=o("FlaxBertForPreTraining"),T0r=o(" (BERT model)"),M0r=l(),EM=a("li"),rFe=a("strong"),E0r=o("big_bird"),C0r=o(" \u2014 "),LH=a("a"),w0r=o("FlaxBigBirdForPreTraining"),A0r=o(" (BigBird model)"),y0r=l(),CM=a("li"),tFe=a("strong"),L0r=o("electra"),x0r=o(" \u2014 "),xH=a("a"),k0r=o("FlaxElectraForPreTraining"),S0r=o(" (ELECTRA model)"),R0r=l(),wM=a("li"),aFe=a("strong"),B0r=o("mbart"),P0r=o(" \u2014 "),kH=a("a"),$0r=o("FlaxMBartForConditionalGeneration"),I0r=o(" (mBART model)"),q0r=l(),AM=a("li"),nFe=a("strong"),N0r=o("mt5"),j0r=o(" \u2014 "),SH=a("a"),D0r=o("FlaxMT5ForConditionalGeneration"),G0r=o(" (mT5 model)"),O0r=l(),yM=a("li"),sFe=a("strong"),V0r=o("roberta"),X0r=o(" \u2014 "),RH=a("a"),z0r=o("FlaxRobertaForMaskedLM"),Q0r=o(" (RoBERTa model)"),W0r=l(),LM=a("li"),lFe=a("strong"),H0r=o("roformer"),U0r=o(" \u2014 "),BH=a("a"),J0r=o("FlaxRoFormerForMaskedLM"),Y0r=o(" (RoFormer model)"),K0r=l(),xM=a("li"),iFe=a("strong"),Z0r=o("t5"),eyr=o(" \u2014 "),PH=a("a"),oyr=o("FlaxT5ForConditionalGeneration"),ryr=o(" (T5 model)"),tyr=l(),kM=a("li"),dFe=a("strong"),ayr=o("wav2vec2"),nyr=o(" \u2014 "),$H=a("a"),syr=o("FlaxWav2Vec2ForPreTraining"),lyr=o(" (Wav2Vec2 model)"),iyr=l(),SM=a("li"),cFe=a("strong"),dyr=o("xlm-roberta"),cyr=o(" \u2014 "),IH=a("a"),fyr=o("FlaxXLMRobertaForMaskedLM"),myr=o(" (XLM-RoBERTa model)"),gyr=l(),fFe=a("p"),hyr=o("Examples:"),pyr=l(),f(ky.$$.fragment),D$e=l(),_f=a("h2"),RM=a("a"),mFe=a("span"),f(Sy.$$.fragment),_yr=l(),gFe=a("span"),uyr=o("FlaxAutoModelForMaskedLM"),G$e=l(),$r=a("div"),f(Ry.$$.fragment),byr=l(),uf=a("p"),vyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qH=a("a"),Fyr=o("from_pretrained()"),Tyr=o(" class method or the "),NH=a("a"),Myr=o("from_config()"),Eyr=o(` class
method.`),Cyr=l(),By=a("p"),wyr=o("This class cannot be instantiated directly using "),hFe=a("code"),Ayr=o("__init__()"),yyr=o(" (throws an error)."),Lyr=l(),xt=a("div"),f(Py.$$.fragment),xyr=l(),pFe=a("p"),kyr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Syr=l(),bf=a("p"),Ryr=o(`Note:
Loading a model from its configuration file does `),_Fe=a("strong"),Byr=o("not"),Pyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=a("a"),$yr=o("from_pretrained()"),Iyr=o(" to load the model weights."),qyr=l(),uFe=a("p"),Nyr=o("Examples:"),jyr=l(),f($y.$$.fragment),Dyr=l(),So=a("div"),f(Iy.$$.fragment),Gyr=l(),bFe=a("p"),Oyr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Vyr=l(),Bn=a("p"),Xyr=o("The model class to instantiate is selected based on the "),vFe=a("code"),zyr=o("model_type"),Qyr=o(` property of the config object (either
passed as an argument or loaded from `),FFe=a("code"),Wyr=o("pretrained_model_name_or_path"),Hyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=a("code"),Uyr=o("pretrained_model_name_or_path"),Jyr=o(":"),Yyr=l(),Te=a("ul"),BM=a("li"),MFe=a("strong"),Kyr=o("albert"),Zyr=o(" \u2014 "),DH=a("a"),eLr=o("FlaxAlbertForMaskedLM"),oLr=o(" (ALBERT model)"),rLr=l(),PM=a("li"),EFe=a("strong"),tLr=o("bart"),aLr=o(" \u2014 "),GH=a("a"),nLr=o("FlaxBartForConditionalGeneration"),sLr=o(" (BART model)"),lLr=l(),$M=a("li"),CFe=a("strong"),iLr=o("bert"),dLr=o(" \u2014 "),OH=a("a"),cLr=o("FlaxBertForMaskedLM"),fLr=o(" (BERT model)"),mLr=l(),IM=a("li"),wFe=a("strong"),gLr=o("big_bird"),hLr=o(" \u2014 "),VH=a("a"),pLr=o("FlaxBigBirdForMaskedLM"),_Lr=o(" (BigBird model)"),uLr=l(),qM=a("li"),AFe=a("strong"),bLr=o("distilbert"),vLr=o(" \u2014 "),XH=a("a"),FLr=o("FlaxDistilBertForMaskedLM"),TLr=o(" (DistilBERT model)"),MLr=l(),NM=a("li"),yFe=a("strong"),ELr=o("electra"),CLr=o(" \u2014 "),zH=a("a"),wLr=o("FlaxElectraForMaskedLM"),ALr=o(" (ELECTRA model)"),yLr=l(),jM=a("li"),LFe=a("strong"),LLr=o("mbart"),xLr=o(" \u2014 "),QH=a("a"),kLr=o("FlaxMBartForConditionalGeneration"),SLr=o(" (mBART model)"),RLr=l(),DM=a("li"),xFe=a("strong"),BLr=o("roberta"),PLr=o(" \u2014 "),WH=a("a"),$Lr=o("FlaxRobertaForMaskedLM"),ILr=o(" (RoBERTa model)"),qLr=l(),GM=a("li"),kFe=a("strong"),NLr=o("roformer"),jLr=o(" \u2014 "),HH=a("a"),DLr=o("FlaxRoFormerForMaskedLM"),GLr=o(" (RoFormer model)"),OLr=l(),OM=a("li"),SFe=a("strong"),VLr=o("xlm-roberta"),XLr=o(" \u2014 "),UH=a("a"),zLr=o("FlaxXLMRobertaForMaskedLM"),QLr=o(" (XLM-RoBERTa model)"),WLr=l(),RFe=a("p"),HLr=o("Examples:"),ULr=l(),f(qy.$$.fragment),O$e=l(),vf=a("h2"),VM=a("a"),BFe=a("span"),f(Ny.$$.fragment),JLr=l(),PFe=a("span"),YLr=o("FlaxAutoModelForSeq2SeqLM"),V$e=l(),Ir=a("div"),f(jy.$$.fragment),KLr=l(),Ff=a("p"),ZLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JH=a("a"),e9r=o("from_pretrained()"),o9r=o(" class method or the "),YH=a("a"),r9r=o("from_config()"),t9r=o(` class
method.`),a9r=l(),Dy=a("p"),n9r=o("This class cannot be instantiated directly using "),$Fe=a("code"),s9r=o("__init__()"),l9r=o(" (throws an error)."),i9r=l(),kt=a("div"),f(Gy.$$.fragment),d9r=l(),IFe=a("p"),c9r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),f9r=l(),Tf=a("p"),m9r=o(`Note:
Loading a model from its configuration file does `),qFe=a("strong"),g9r=o("not"),h9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=a("a"),p9r=o("from_pretrained()"),_9r=o(" to load the model weights."),u9r=l(),NFe=a("p"),b9r=o("Examples:"),v9r=l(),f(Oy.$$.fragment),F9r=l(),Ro=a("div"),f(Vy.$$.fragment),T9r=l(),jFe=a("p"),M9r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),E9r=l(),Pn=a("p"),C9r=o("The model class to instantiate is selected based on the "),DFe=a("code"),w9r=o("model_type"),A9r=o(` property of the config object (either
passed as an argument or loaded from `),GFe=a("code"),y9r=o("pretrained_model_name_or_path"),L9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=a("code"),x9r=o("pretrained_model_name_or_path"),k9r=o(":"),S9r=l(),we=a("ul"),XM=a("li"),VFe=a("strong"),R9r=o("bart"),B9r=o(" \u2014 "),ZH=a("a"),P9r=o("FlaxBartForConditionalGeneration"),$9r=o(" (BART model)"),I9r=l(),zM=a("li"),XFe=a("strong"),q9r=o("blenderbot"),N9r=o(" \u2014 "),eU=a("a"),j9r=o("FlaxBlenderbotForConditionalGeneration"),D9r=o(" (Blenderbot model)"),G9r=l(),QM=a("li"),zFe=a("strong"),O9r=o("blenderbot-small"),V9r=o(" \u2014 "),oU=a("a"),X9r=o("FlaxBlenderbotSmallForConditionalGeneration"),z9r=o(" (BlenderbotSmall model)"),Q9r=l(),WM=a("li"),QFe=a("strong"),W9r=o("encoder-decoder"),H9r=o(" \u2014 "),rU=a("a"),U9r=o("FlaxEncoderDecoderModel"),J9r=o(" (Encoder decoder model)"),Y9r=l(),HM=a("li"),WFe=a("strong"),K9r=o("marian"),Z9r=o(" \u2014 "),tU=a("a"),exr=o("FlaxMarianMTModel"),oxr=o(" (Marian model)"),rxr=l(),UM=a("li"),HFe=a("strong"),txr=o("mbart"),axr=o(" \u2014 "),aU=a("a"),nxr=o("FlaxMBartForConditionalGeneration"),sxr=o(" (mBART model)"),lxr=l(),JM=a("li"),UFe=a("strong"),ixr=o("mt5"),dxr=o(" \u2014 "),nU=a("a"),cxr=o("FlaxMT5ForConditionalGeneration"),fxr=o(" (mT5 model)"),mxr=l(),YM=a("li"),JFe=a("strong"),gxr=o("pegasus"),hxr=o(" \u2014 "),sU=a("a"),pxr=o("FlaxPegasusForConditionalGeneration"),_xr=o(" (Pegasus model)"),uxr=l(),KM=a("li"),YFe=a("strong"),bxr=o("t5"),vxr=o(" \u2014 "),lU=a("a"),Fxr=o("FlaxT5ForConditionalGeneration"),Txr=o(" (T5 model)"),Mxr=l(),KFe=a("p"),Exr=o("Examples:"),Cxr=l(),f(Xy.$$.fragment),X$e=l(),Mf=a("h2"),ZM=a("a"),ZFe=a("span"),f(zy.$$.fragment),wxr=l(),eTe=a("span"),Axr=o("FlaxAutoModelForSequenceClassification"),z$e=l(),qr=a("div"),f(Qy.$$.fragment),yxr=l(),Ef=a("p"),Lxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iU=a("a"),xxr=o("from_pretrained()"),kxr=o(" class method or the "),dU=a("a"),Sxr=o("from_config()"),Rxr=o(` class
method.`),Bxr=l(),Wy=a("p"),Pxr=o("This class cannot be instantiated directly using "),oTe=a("code"),$xr=o("__init__()"),Ixr=o(" (throws an error)."),qxr=l(),St=a("div"),f(Hy.$$.fragment),Nxr=l(),rTe=a("p"),jxr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Dxr=l(),Cf=a("p"),Gxr=o(`Note:
Loading a model from its configuration file does `),tTe=a("strong"),Oxr=o("not"),Vxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=a("a"),Xxr=o("from_pretrained()"),zxr=o(" to load the model weights."),Qxr=l(),aTe=a("p"),Wxr=o("Examples:"),Hxr=l(),f(Uy.$$.fragment),Uxr=l(),Bo=a("div"),f(Jy.$$.fragment),Jxr=l(),nTe=a("p"),Yxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Kxr=l(),$n=a("p"),Zxr=o("The model class to instantiate is selected based on the "),sTe=a("code"),ekr=o("model_type"),okr=o(` property of the config object (either
passed as an argument or loaded from `),lTe=a("code"),rkr=o("pretrained_model_name_or_path"),tkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=a("code"),akr=o("pretrained_model_name_or_path"),nkr=o(":"),skr=l(),Me=a("ul"),e4=a("li"),dTe=a("strong"),lkr=o("albert"),ikr=o(" \u2014 "),fU=a("a"),dkr=o("FlaxAlbertForSequenceClassification"),ckr=o(" (ALBERT model)"),fkr=l(),o4=a("li"),cTe=a("strong"),mkr=o("bart"),gkr=o(" \u2014 "),mU=a("a"),hkr=o("FlaxBartForSequenceClassification"),pkr=o(" (BART model)"),_kr=l(),r4=a("li"),fTe=a("strong"),ukr=o("bert"),bkr=o(" \u2014 "),gU=a("a"),vkr=o("FlaxBertForSequenceClassification"),Fkr=o(" (BERT model)"),Tkr=l(),t4=a("li"),mTe=a("strong"),Mkr=o("big_bird"),Ekr=o(" \u2014 "),hU=a("a"),Ckr=o("FlaxBigBirdForSequenceClassification"),wkr=o(" (BigBird model)"),Akr=l(),a4=a("li"),gTe=a("strong"),ykr=o("distilbert"),Lkr=o(" \u2014 "),pU=a("a"),xkr=o("FlaxDistilBertForSequenceClassification"),kkr=o(" (DistilBERT model)"),Skr=l(),n4=a("li"),hTe=a("strong"),Rkr=o("electra"),Bkr=o(" \u2014 "),_U=a("a"),Pkr=o("FlaxElectraForSequenceClassification"),$kr=o(" (ELECTRA model)"),Ikr=l(),s4=a("li"),pTe=a("strong"),qkr=o("mbart"),Nkr=o(" \u2014 "),uU=a("a"),jkr=o("FlaxMBartForSequenceClassification"),Dkr=o(" (mBART model)"),Gkr=l(),l4=a("li"),_Te=a("strong"),Okr=o("roberta"),Vkr=o(" \u2014 "),bU=a("a"),Xkr=o("FlaxRobertaForSequenceClassification"),zkr=o(" (RoBERTa model)"),Qkr=l(),i4=a("li"),uTe=a("strong"),Wkr=o("roformer"),Hkr=o(" \u2014 "),vU=a("a"),Ukr=o("FlaxRoFormerForSequenceClassification"),Jkr=o(" (RoFormer model)"),Ykr=l(),d4=a("li"),bTe=a("strong"),Kkr=o("xlm-roberta"),Zkr=o(" \u2014 "),FU=a("a"),eSr=o("FlaxXLMRobertaForSequenceClassification"),oSr=o(" (XLM-RoBERTa model)"),rSr=l(),vTe=a("p"),tSr=o("Examples:"),aSr=l(),f(Yy.$$.fragment),Q$e=l(),wf=a("h2"),c4=a("a"),FTe=a("span"),f(Ky.$$.fragment),nSr=l(),TTe=a("span"),sSr=o("FlaxAutoModelForQuestionAnswering"),W$e=l(),Nr=a("div"),f(Zy.$$.fragment),lSr=l(),Af=a("p"),iSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TU=a("a"),dSr=o("from_pretrained()"),cSr=o(" class method or the "),MU=a("a"),fSr=o("from_config()"),mSr=o(` class
method.`),gSr=l(),eL=a("p"),hSr=o("This class cannot be instantiated directly using "),MTe=a("code"),pSr=o("__init__()"),_Sr=o(" (throws an error)."),uSr=l(),Rt=a("div"),f(oL.$$.fragment),bSr=l(),ETe=a("p"),vSr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),FSr=l(),yf=a("p"),TSr=o(`Note:
Loading a model from its configuration file does `),CTe=a("strong"),MSr=o("not"),ESr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=a("a"),CSr=o("from_pretrained()"),wSr=o(" to load the model weights."),ASr=l(),wTe=a("p"),ySr=o("Examples:"),LSr=l(),f(rL.$$.fragment),xSr=l(),Po=a("div"),f(tL.$$.fragment),kSr=l(),ATe=a("p"),SSr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),RSr=l(),In=a("p"),BSr=o("The model class to instantiate is selected based on the "),yTe=a("code"),PSr=o("model_type"),$Sr=o(` property of the config object (either
passed as an argument or loaded from `),LTe=a("code"),ISr=o("pretrained_model_name_or_path"),qSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=a("code"),NSr=o("pretrained_model_name_or_path"),jSr=o(":"),DSr=l(),Ee=a("ul"),f4=a("li"),kTe=a("strong"),GSr=o("albert"),OSr=o(" \u2014 "),CU=a("a"),VSr=o("FlaxAlbertForQuestionAnswering"),XSr=o(" (ALBERT model)"),zSr=l(),m4=a("li"),STe=a("strong"),QSr=o("bart"),WSr=o(" \u2014 "),wU=a("a"),HSr=o("FlaxBartForQuestionAnswering"),USr=o(" (BART model)"),JSr=l(),g4=a("li"),RTe=a("strong"),YSr=o("bert"),KSr=o(" \u2014 "),AU=a("a"),ZSr=o("FlaxBertForQuestionAnswering"),eRr=o(" (BERT model)"),oRr=l(),h4=a("li"),BTe=a("strong"),rRr=o("big_bird"),tRr=o(" \u2014 "),yU=a("a"),aRr=o("FlaxBigBirdForQuestionAnswering"),nRr=o(" (BigBird model)"),sRr=l(),p4=a("li"),PTe=a("strong"),lRr=o("distilbert"),iRr=o(" \u2014 "),LU=a("a"),dRr=o("FlaxDistilBertForQuestionAnswering"),cRr=o(" (DistilBERT model)"),fRr=l(),_4=a("li"),$Te=a("strong"),mRr=o("electra"),gRr=o(" \u2014 "),xU=a("a"),hRr=o("FlaxElectraForQuestionAnswering"),pRr=o(" (ELECTRA model)"),_Rr=l(),u4=a("li"),ITe=a("strong"),uRr=o("mbart"),bRr=o(" \u2014 "),kU=a("a"),vRr=o("FlaxMBartForQuestionAnswering"),FRr=o(" (mBART model)"),TRr=l(),b4=a("li"),qTe=a("strong"),MRr=o("roberta"),ERr=o(" \u2014 "),SU=a("a"),CRr=o("FlaxRobertaForQuestionAnswering"),wRr=o(" (RoBERTa model)"),ARr=l(),v4=a("li"),NTe=a("strong"),yRr=o("roformer"),LRr=o(" \u2014 "),RU=a("a"),xRr=o("FlaxRoFormerForQuestionAnswering"),kRr=o(" (RoFormer model)"),SRr=l(),F4=a("li"),jTe=a("strong"),RRr=o("xlm-roberta"),BRr=o(" \u2014 "),BU=a("a"),PRr=o("FlaxXLMRobertaForQuestionAnswering"),$Rr=o(" (XLM-RoBERTa model)"),IRr=l(),DTe=a("p"),qRr=o("Examples:"),NRr=l(),f(aL.$$.fragment),H$e=l(),Lf=a("h2"),T4=a("a"),GTe=a("span"),f(nL.$$.fragment),jRr=l(),OTe=a("span"),DRr=o("FlaxAutoModelForTokenClassification"),U$e=l(),jr=a("div"),f(sL.$$.fragment),GRr=l(),xf=a("p"),ORr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PU=a("a"),VRr=o("from_pretrained()"),XRr=o(" class method or the "),$U=a("a"),zRr=o("from_config()"),QRr=o(` class
method.`),WRr=l(),lL=a("p"),HRr=o("This class cannot be instantiated directly using "),VTe=a("code"),URr=o("__init__()"),JRr=o(" (throws an error)."),YRr=l(),Bt=a("div"),f(iL.$$.fragment),KRr=l(),XTe=a("p"),ZRr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),eBr=l(),kf=a("p"),oBr=o(`Note:
Loading a model from its configuration file does `),zTe=a("strong"),rBr=o("not"),tBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=a("a"),aBr=o("from_pretrained()"),nBr=o(" to load the model weights."),sBr=l(),QTe=a("p"),lBr=o("Examples:"),iBr=l(),f(dL.$$.fragment),dBr=l(),$o=a("div"),f(cL.$$.fragment),cBr=l(),WTe=a("p"),fBr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),mBr=l(),qn=a("p"),gBr=o("The model class to instantiate is selected based on the "),HTe=a("code"),hBr=o("model_type"),pBr=o(` property of the config object (either
passed as an argument or loaded from `),UTe=a("code"),_Br=o("pretrained_model_name_or_path"),uBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=a("code"),bBr=o("pretrained_model_name_or_path"),vBr=o(":"),FBr=l(),Pe=a("ul"),M4=a("li"),YTe=a("strong"),TBr=o("albert"),MBr=o(" \u2014 "),qU=a("a"),EBr=o("FlaxAlbertForTokenClassification"),CBr=o(" (ALBERT model)"),wBr=l(),E4=a("li"),KTe=a("strong"),ABr=o("bert"),yBr=o(" \u2014 "),NU=a("a"),LBr=o("FlaxBertForTokenClassification"),xBr=o(" (BERT model)"),kBr=l(),C4=a("li"),ZTe=a("strong"),SBr=o("big_bird"),RBr=o(" \u2014 "),jU=a("a"),BBr=o("FlaxBigBirdForTokenClassification"),PBr=o(" (BigBird model)"),$Br=l(),w4=a("li"),e8e=a("strong"),IBr=o("distilbert"),qBr=o(" \u2014 "),DU=a("a"),NBr=o("FlaxDistilBertForTokenClassification"),jBr=o(" (DistilBERT model)"),DBr=l(),A4=a("li"),o8e=a("strong"),GBr=o("electra"),OBr=o(" \u2014 "),GU=a("a"),VBr=o("FlaxElectraForTokenClassification"),XBr=o(" (ELECTRA model)"),zBr=l(),y4=a("li"),r8e=a("strong"),QBr=o("roberta"),WBr=o(" \u2014 "),OU=a("a"),HBr=o("FlaxRobertaForTokenClassification"),UBr=o(" (RoBERTa model)"),JBr=l(),L4=a("li"),t8e=a("strong"),YBr=o("roformer"),KBr=o(" \u2014 "),VU=a("a"),ZBr=o("FlaxRoFormerForTokenClassification"),ePr=o(" (RoFormer model)"),oPr=l(),x4=a("li"),a8e=a("strong"),rPr=o("xlm-roberta"),tPr=o(" \u2014 "),XU=a("a"),aPr=o("FlaxXLMRobertaForTokenClassification"),nPr=o(" (XLM-RoBERTa model)"),sPr=l(),n8e=a("p"),lPr=o("Examples:"),iPr=l(),f(fL.$$.fragment),J$e=l(),Sf=a("h2"),k4=a("a"),s8e=a("span"),f(mL.$$.fragment),dPr=l(),l8e=a("span"),cPr=o("FlaxAutoModelForMultipleChoice"),Y$e=l(),Dr=a("div"),f(gL.$$.fragment),fPr=l(),Rf=a("p"),mPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zU=a("a"),gPr=o("from_pretrained()"),hPr=o(" class method or the "),QU=a("a"),pPr=o("from_config()"),_Pr=o(` class
method.`),uPr=l(),hL=a("p"),bPr=o("This class cannot be instantiated directly using "),i8e=a("code"),vPr=o("__init__()"),FPr=o(" (throws an error)."),TPr=l(),Pt=a("div"),f(pL.$$.fragment),MPr=l(),d8e=a("p"),EPr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),CPr=l(),Bf=a("p"),wPr=o(`Note:
Loading a model from its configuration file does `),c8e=a("strong"),APr=o("not"),yPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=a("a"),LPr=o("from_pretrained()"),xPr=o(" to load the model weights."),kPr=l(),f8e=a("p"),SPr=o("Examples:"),RPr=l(),f(_L.$$.fragment),BPr=l(),Io=a("div"),f(uL.$$.fragment),PPr=l(),m8e=a("p"),$Pr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),IPr=l(),Nn=a("p"),qPr=o("The model class to instantiate is selected based on the "),g8e=a("code"),NPr=o("model_type"),jPr=o(` property of the config object (either
passed as an argument or loaded from `),h8e=a("code"),DPr=o("pretrained_model_name_or_path"),GPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=a("code"),OPr=o("pretrained_model_name_or_path"),VPr=o(":"),XPr=l(),$e=a("ul"),S4=a("li"),_8e=a("strong"),zPr=o("albert"),QPr=o(" \u2014 "),HU=a("a"),WPr=o("FlaxAlbertForMultipleChoice"),HPr=o(" (ALBERT model)"),UPr=l(),R4=a("li"),u8e=a("strong"),JPr=o("bert"),YPr=o(" \u2014 "),UU=a("a"),KPr=o("FlaxBertForMultipleChoice"),ZPr=o(" (BERT model)"),e$r=l(),B4=a("li"),b8e=a("strong"),o$r=o("big_bird"),r$r=o(" \u2014 "),JU=a("a"),t$r=o("FlaxBigBirdForMultipleChoice"),a$r=o(" (BigBird model)"),n$r=l(),P4=a("li"),v8e=a("strong"),s$r=o("distilbert"),l$r=o(" \u2014 "),YU=a("a"),i$r=o("FlaxDistilBertForMultipleChoice"),d$r=o(" (DistilBERT model)"),c$r=l(),$4=a("li"),F8e=a("strong"),f$r=o("electra"),m$r=o(" \u2014 "),KU=a("a"),g$r=o("FlaxElectraForMultipleChoice"),h$r=o(" (ELECTRA model)"),p$r=l(),I4=a("li"),T8e=a("strong"),_$r=o("roberta"),u$r=o(" \u2014 "),ZU=a("a"),b$r=o("FlaxRobertaForMultipleChoice"),v$r=o(" (RoBERTa model)"),F$r=l(),q4=a("li"),M8e=a("strong"),T$r=o("roformer"),M$r=o(" \u2014 "),eJ=a("a"),E$r=o("FlaxRoFormerForMultipleChoice"),C$r=o(" (RoFormer model)"),w$r=l(),N4=a("li"),E8e=a("strong"),A$r=o("xlm-roberta"),y$r=o(" \u2014 "),oJ=a("a"),L$r=o("FlaxXLMRobertaForMultipleChoice"),x$r=o(" (XLM-RoBERTa model)"),k$r=l(),C8e=a("p"),S$r=o("Examples:"),R$r=l(),f(bL.$$.fragment),K$e=l(),Pf=a("h2"),j4=a("a"),w8e=a("span"),f(vL.$$.fragment),B$r=l(),A8e=a("span"),P$r=o("FlaxAutoModelForNextSentencePrediction"),Z$e=l(),Gr=a("div"),f(FL.$$.fragment),$$r=l(),$f=a("p"),I$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rJ=a("a"),q$r=o("from_pretrained()"),N$r=o(" class method or the "),tJ=a("a"),j$r=o("from_config()"),D$r=o(` class
method.`),G$r=l(),TL=a("p"),O$r=o("This class cannot be instantiated directly using "),y8e=a("code"),V$r=o("__init__()"),X$r=o(" (throws an error)."),z$r=l(),$t=a("div"),f(ML.$$.fragment),Q$r=l(),L8e=a("p"),W$r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),H$r=l(),If=a("p"),U$r=o(`Note:
Loading a model from its configuration file does `),x8e=a("strong"),J$r=o("not"),Y$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=a("a"),K$r=o("from_pretrained()"),Z$r=o(" to load the model weights."),eIr=l(),k8e=a("p"),oIr=o("Examples:"),rIr=l(),f(EL.$$.fragment),tIr=l(),qo=a("div"),f(CL.$$.fragment),aIr=l(),S8e=a("p"),nIr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),sIr=l(),jn=a("p"),lIr=o("The model class to instantiate is selected based on the "),R8e=a("code"),iIr=o("model_type"),dIr=o(` property of the config object (either
passed as an argument or loaded from `),B8e=a("code"),cIr=o("pretrained_model_name_or_path"),fIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=a("code"),mIr=o("pretrained_model_name_or_path"),gIr=o(":"),hIr=l(),$8e=a("ul"),D4=a("li"),I8e=a("strong"),pIr=o("bert"),_Ir=o(" \u2014 "),nJ=a("a"),uIr=o("FlaxBertForNextSentencePrediction"),bIr=o(" (BERT model)"),vIr=l(),q8e=a("p"),FIr=o("Examples:"),TIr=l(),f(wL.$$.fragment),eIe=l(),qf=a("h2"),G4=a("a"),N8e=a("span"),f(AL.$$.fragment),MIr=l(),j8e=a("span"),EIr=o("FlaxAutoModelForImageClassification"),oIe=l(),Or=a("div"),f(yL.$$.fragment),CIr=l(),Nf=a("p"),wIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sJ=a("a"),AIr=o("from_pretrained()"),yIr=o(" class method or the "),lJ=a("a"),LIr=o("from_config()"),xIr=o(` class
method.`),kIr=l(),LL=a("p"),SIr=o("This class cannot be instantiated directly using "),D8e=a("code"),RIr=o("__init__()"),BIr=o(" (throws an error)."),PIr=l(),It=a("div"),f(xL.$$.fragment),$Ir=l(),G8e=a("p"),IIr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qIr=l(),jf=a("p"),NIr=o(`Note:
Loading a model from its configuration file does `),O8e=a("strong"),jIr=o("not"),DIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=a("a"),GIr=o("from_pretrained()"),OIr=o(" to load the model weights."),VIr=l(),V8e=a("p"),XIr=o("Examples:"),zIr=l(),f(kL.$$.fragment),QIr=l(),No=a("div"),f(SL.$$.fragment),WIr=l(),X8e=a("p"),HIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),UIr=l(),Dn=a("p"),JIr=o("The model class to instantiate is selected based on the "),z8e=a("code"),YIr=o("model_type"),KIr=o(` property of the config object (either
passed as an argument or loaded from `),Q8e=a("code"),ZIr=o("pretrained_model_name_or_path"),eqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W8e=a("code"),oqr=o("pretrained_model_name_or_path"),rqr=o(":"),tqr=l(),RL=a("ul"),O4=a("li"),H8e=a("strong"),aqr=o("beit"),nqr=o(" \u2014 "),dJ=a("a"),sqr=o("FlaxBeitForImageClassification"),lqr=o(" (BEiT model)"),iqr=l(),V4=a("li"),U8e=a("strong"),dqr=o("vit"),cqr=o(" \u2014 "),cJ=a("a"),fqr=o("FlaxViTForImageClassification"),mqr=o(" (ViT model)"),gqr=l(),J8e=a("p"),hqr=o("Examples:"),pqr=l(),f(BL.$$.fragment),rIe=l(),Df=a("h2"),X4=a("a"),Y8e=a("span"),f(PL.$$.fragment),_qr=l(),K8e=a("span"),uqr=o("FlaxAutoModelForVision2Seq"),tIe=l(),Vr=a("div"),f($L.$$.fragment),bqr=l(),Gf=a("p"),vqr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fJ=a("a"),Fqr=o("from_pretrained()"),Tqr=o(" class method or the "),mJ=a("a"),Mqr=o("from_config()"),Eqr=o(` class
method.`),Cqr=l(),IL=a("p"),wqr=o("This class cannot be instantiated directly using "),Z8e=a("code"),Aqr=o("__init__()"),yqr=o(" (throws an error)."),Lqr=l(),qt=a("div"),f(qL.$$.fragment),xqr=l(),e7e=a("p"),kqr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Sqr=l(),Of=a("p"),Rqr=o(`Note:
Loading a model from its configuration file does `),o7e=a("strong"),Bqr=o("not"),Pqr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),$qr=o("from_pretrained()"),Iqr=o(" to load the model weights."),qqr=l(),r7e=a("p"),Nqr=o("Examples:"),jqr=l(),f(NL.$$.fragment),Dqr=l(),jo=a("div"),f(jL.$$.fragment),Gqr=l(),t7e=a("p"),Oqr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Vqr=l(),Gn=a("p"),Xqr=o("The model class to instantiate is selected based on the "),a7e=a("code"),zqr=o("model_type"),Qqr=o(` property of the config object (either
passed as an argument or loaded from `),n7e=a("code"),Wqr=o("pretrained_model_name_or_path"),Hqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=a("code"),Uqr=o("pretrained_model_name_or_path"),Jqr=o(":"),Yqr=l(),l7e=a("ul"),z4=a("li"),i7e=a("strong"),Kqr=o("vision-encoder-decoder"),Zqr=o(" \u2014 "),hJ=a("a"),eNr=o("FlaxVisionEncoderDecoderModel"),oNr=o(" (Vision Encoder decoder model)"),rNr=l(),d7e=a("p"),tNr=o("Examples:"),aNr=l(),f(DL.$$.fragment),this.h()},l(c){const u=q0t('[data-svelte="svelte-1phssyn"]',document.head);oe=n(u,"META",{name:!0,content:!0}),u.forEach(t),co=i(c),me=n(c,"H1",{class:!0});var GL=s(me);Ae=n(GL,"A",{id:!0,class:!0,href:!0});var c7e=s(Ae);io=n(c7e,"SPAN",{});var f7e=s(io);m(_e.$$.fragment,f7e),f7e.forEach(t),c7e.forEach(t),Ce=i(GL),Xo=n(GL,"SPAN",{});var sNr=s(Xo);zi=r(sNr,"Auto Classes"),sNr.forEach(t),GL.forEach(t),zf=i(c),fa=n(c,"P",{});var nIe=s(fa);Qi=r(nIe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Wi=n(nIe,"CODE",{});var lNr=s(Wi);QE=r(lNr,"from_pretrained()"),lNr.forEach(t),Qf=r(nIe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),nIe.forEach(t),Se=i(c),fo=n(c,"P",{});var Q4=s(fo);Hi=r(Q4,"Instantiating one of "),On=n(Q4,"A",{href:!0});var iNr=s(On);WE=r(iNr,"AutoConfig"),iNr.forEach(t),Vn=r(Q4,", "),Xn=n(Q4,"A",{href:!0});var dNr=s(Xn);HE=r(dNr,"AutoModel"),dNr.forEach(t),Ui=r(Q4,`, and
`),zn=n(Q4,"A",{href:!0});var cNr=s(zn);UE=r(cNr,"AutoTokenizer"),cNr.forEach(t),Ji=r(Q4," will directly create a class of the relevant architecture. For instance"),Q4.forEach(t),Wf=i(c),m(Da.$$.fragment,c),mo=i(c),ve=n(c,"P",{});var sIe=s(ve);Q9=r(sIe,"will create a model that is an instance of "),Yi=n(sIe,"A",{href:!0});var fNr=s(Yi);W9=r(fNr,"BertModel"),fNr.forEach(t),H9=r(sIe,"."),sIe.forEach(t),zo=i(c),Ga=n(c,"P",{});var lIe=s(Ga);U9=r(lIe,"There is one class of "),Hf=n(lIe,"CODE",{});var mNr=s(Hf);J9=r(mNr,"AutoModel"),mNr.forEach(t),_Ne=r(lIe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),lIe.forEach(t),tPe=i(c),Ki=n(c,"H2",{class:!0});var iIe=s(Ki);Uf=n(iIe,"A",{id:!0,class:!0,href:!0});var gNr=s(Uf);lK=n(gNr,"SPAN",{});var hNr=s(lK);m(JE.$$.fragment,hNr),hNr.forEach(t),gNr.forEach(t),uNe=i(iIe),iK=n(iIe,"SPAN",{});var pNr=s(iK);bNe=r(pNr,"Extending the Auto Classes"),pNr.forEach(t),iIe.forEach(t),aPe=i(c),Qn=n(c,"P",{});var pJ=s(Qn);vNe=r(pJ,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),dK=n(pJ,"CODE",{});var _Nr=s(dK);FNe=r(_Nr,"NewModel"),_Nr.forEach(t),TNe=r(pJ,", make sure you have a "),cK=n(pJ,"CODE",{});var uNr=s(cK);MNe=r(uNr,"NewModelConfig"),uNr.forEach(t),ENe=r(pJ,` then you can add those to the auto
classes like this:`),pJ.forEach(t),nPe=i(c),m(YE.$$.fragment,c),sPe=i(c),Y9=n(c,"P",{});var bNr=s(Y9);CNe=r(bNr,"You will then be able to use the auto classes like you would usually do!"),bNr.forEach(t),lPe=i(c),m(Jf.$$.fragment,c),iPe=i(c),Zi=n(c,"H2",{class:!0});var dIe=s(Zi);Yf=n(dIe,"A",{id:!0,class:!0,href:!0});var vNr=s(Yf);fK=n(vNr,"SPAN",{});var FNr=s(fK);m(KE.$$.fragment,FNr),FNr.forEach(t),vNr.forEach(t),wNe=i(dIe),mK=n(dIe,"SPAN",{});var TNr=s(mK);ANe=r(TNr,"AutoConfig"),TNr.forEach(t),dIe.forEach(t),dPe=i(c),Qo=n(c,"DIV",{class:!0});var Ys=s(Qo);m(ZE.$$.fragment,Ys),yNe=i(Ys),e3=n(Ys,"P",{});var cIe=s(e3);LNe=r(cIe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),K9=n(cIe,"A",{href:!0});var MNr=s(K9);xNe=r(MNr,"from_pretrained()"),MNr.forEach(t),kNe=r(cIe," class method."),cIe.forEach(t),SNe=i(Ys),o3=n(Ys,"P",{});var fIe=s(o3);RNe=r(fIe,"This class cannot be instantiated directly using "),gK=n(fIe,"CODE",{});var ENr=s(gK);BNe=r(ENr,"__init__()"),ENr.forEach(t),PNe=r(fIe," (throws an error)."),fIe.forEach(t),$Ne=i(Ys),go=n(Ys,"DIV",{class:!0});var ga=s(go);m(r3.$$.fragment,ga),INe=i(ga),hK=n(ga,"P",{});var CNr=s(hK);qNe=r(CNr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),CNr.forEach(t),NNe=i(ga),ed=n(ga,"P",{});var _J=s(ed);jNe=r(_J,"The configuration class to instantiate is selected based on the "),pK=n(_J,"CODE",{});var wNr=s(pK);DNe=r(wNr,"model_type"),wNr.forEach(t),GNe=r(_J,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),_K=n(_J,"CODE",{});var ANr=s(_K);ONe=r(ANr,"pretrained_model_name_or_path"),ANr.forEach(t),VNe=r(_J,":"),_J.forEach(t),XNe=i(ga),v=n(ga,"UL",{});var F=s(v);Kf=n(F,"LI",{});var m7e=s(Kf);uK=n(m7e,"STRONG",{});var yNr=s(uK);zNe=r(yNr,"albert"),yNr.forEach(t),QNe=r(m7e," \u2014 "),Z9=n(m7e,"A",{href:!0});var LNr=s(Z9);WNe=r(LNr,"AlbertConfig"),LNr.forEach(t),HNe=r(m7e," (ALBERT model)"),m7e.forEach(t),UNe=i(F),Zf=n(F,"LI",{});var g7e=s(Zf);bK=n(g7e,"STRONG",{});var xNr=s(bK);JNe=r(xNr,"bart"),xNr.forEach(t),YNe=r(g7e," \u2014 "),ex=n(g7e,"A",{href:!0});var kNr=s(ex);KNe=r(kNr,"BartConfig"),kNr.forEach(t),ZNe=r(g7e," (BART model)"),g7e.forEach(t),eje=i(F),em=n(F,"LI",{});var h7e=s(em);vK=n(h7e,"STRONG",{});var SNr=s(vK);oje=r(SNr,"beit"),SNr.forEach(t),rje=r(h7e," \u2014 "),ox=n(h7e,"A",{href:!0});var RNr=s(ox);tje=r(RNr,"BeitConfig"),RNr.forEach(t),aje=r(h7e," (BEiT model)"),h7e.forEach(t),nje=i(F),om=n(F,"LI",{});var p7e=s(om);FK=n(p7e,"STRONG",{});var BNr=s(FK);sje=r(BNr,"bert"),BNr.forEach(t),lje=r(p7e," \u2014 "),rx=n(p7e,"A",{href:!0});var PNr=s(rx);ije=r(PNr,"BertConfig"),PNr.forEach(t),dje=r(p7e," (BERT model)"),p7e.forEach(t),cje=i(F),rm=n(F,"LI",{});var _7e=s(rm);TK=n(_7e,"STRONG",{});var $Nr=s(TK);fje=r($Nr,"bert-generation"),$Nr.forEach(t),mje=r(_7e," \u2014 "),tx=n(_7e,"A",{href:!0});var INr=s(tx);gje=r(INr,"BertGenerationConfig"),INr.forEach(t),hje=r(_7e," (Bert Generation model)"),_7e.forEach(t),pje=i(F),tm=n(F,"LI",{});var u7e=s(tm);MK=n(u7e,"STRONG",{});var qNr=s(MK);_je=r(qNr,"big_bird"),qNr.forEach(t),uje=r(u7e," \u2014 "),ax=n(u7e,"A",{href:!0});var NNr=s(ax);bje=r(NNr,"BigBirdConfig"),NNr.forEach(t),vje=r(u7e," (BigBird model)"),u7e.forEach(t),Fje=i(F),am=n(F,"LI",{});var b7e=s(am);EK=n(b7e,"STRONG",{});var jNr=s(EK);Tje=r(jNr,"bigbird_pegasus"),jNr.forEach(t),Mje=r(b7e," \u2014 "),nx=n(b7e,"A",{href:!0});var DNr=s(nx);Eje=r(DNr,"BigBirdPegasusConfig"),DNr.forEach(t),Cje=r(b7e," (BigBirdPegasus model)"),b7e.forEach(t),wje=i(F),nm=n(F,"LI",{});var v7e=s(nm);CK=n(v7e,"STRONG",{});var GNr=s(CK);Aje=r(GNr,"blenderbot"),GNr.forEach(t),yje=r(v7e," \u2014 "),sx=n(v7e,"A",{href:!0});var ONr=s(sx);Lje=r(ONr,"BlenderbotConfig"),ONr.forEach(t),xje=r(v7e," (Blenderbot model)"),v7e.forEach(t),kje=i(F),sm=n(F,"LI",{});var F7e=s(sm);wK=n(F7e,"STRONG",{});var VNr=s(wK);Sje=r(VNr,"blenderbot-small"),VNr.forEach(t),Rje=r(F7e," \u2014 "),lx=n(F7e,"A",{href:!0});var XNr=s(lx);Bje=r(XNr,"BlenderbotSmallConfig"),XNr.forEach(t),Pje=r(F7e," (BlenderbotSmall model)"),F7e.forEach(t),$je=i(F),lm=n(F,"LI",{});var T7e=s(lm);AK=n(T7e,"STRONG",{});var zNr=s(AK);Ije=r(zNr,"camembert"),zNr.forEach(t),qje=r(T7e," \u2014 "),ix=n(T7e,"A",{href:!0});var QNr=s(ix);Nje=r(QNr,"CamembertConfig"),QNr.forEach(t),jje=r(T7e," (CamemBERT model)"),T7e.forEach(t),Dje=i(F),im=n(F,"LI",{});var M7e=s(im);yK=n(M7e,"STRONG",{});var WNr=s(yK);Gje=r(WNr,"canine"),WNr.forEach(t),Oje=r(M7e," \u2014 "),dx=n(M7e,"A",{href:!0});var HNr=s(dx);Vje=r(HNr,"CanineConfig"),HNr.forEach(t),Xje=r(M7e," (Canine model)"),M7e.forEach(t),zje=i(F),dm=n(F,"LI",{});var E7e=s(dm);LK=n(E7e,"STRONG",{});var UNr=s(LK);Qje=r(UNr,"clip"),UNr.forEach(t),Wje=r(E7e," \u2014 "),cx=n(E7e,"A",{href:!0});var JNr=s(cx);Hje=r(JNr,"CLIPConfig"),JNr.forEach(t),Uje=r(E7e," (CLIP model)"),E7e.forEach(t),Jje=i(F),cm=n(F,"LI",{});var C7e=s(cm);xK=n(C7e,"STRONG",{});var YNr=s(xK);Yje=r(YNr,"convbert"),YNr.forEach(t),Kje=r(C7e," \u2014 "),fx=n(C7e,"A",{href:!0});var KNr=s(fx);Zje=r(KNr,"ConvBertConfig"),KNr.forEach(t),eDe=r(C7e," (ConvBERT model)"),C7e.forEach(t),oDe=i(F),fm=n(F,"LI",{});var w7e=s(fm);kK=n(w7e,"STRONG",{});var ZNr=s(kK);rDe=r(ZNr,"convnext"),ZNr.forEach(t),tDe=r(w7e," \u2014 "),mx=n(w7e,"A",{href:!0});var ejr=s(mx);aDe=r(ejr,"ConvNextConfig"),ejr.forEach(t),nDe=r(w7e," (ConvNext model)"),w7e.forEach(t),sDe=i(F),mm=n(F,"LI",{});var A7e=s(mm);SK=n(A7e,"STRONG",{});var ojr=s(SK);lDe=r(ojr,"ctrl"),ojr.forEach(t),iDe=r(A7e," \u2014 "),gx=n(A7e,"A",{href:!0});var rjr=s(gx);dDe=r(rjr,"CTRLConfig"),rjr.forEach(t),cDe=r(A7e," (CTRL model)"),A7e.forEach(t),fDe=i(F),gm=n(F,"LI",{});var y7e=s(gm);RK=n(y7e,"STRONG",{});var tjr=s(RK);mDe=r(tjr,"data2vec-audio"),tjr.forEach(t),gDe=r(y7e," \u2014 "),hx=n(y7e,"A",{href:!0});var ajr=s(hx);hDe=r(ajr,"Data2VecAudioConfig"),ajr.forEach(t),pDe=r(y7e," (Data2VecAudio model)"),y7e.forEach(t),_De=i(F),hm=n(F,"LI",{});var L7e=s(hm);BK=n(L7e,"STRONG",{});var njr=s(BK);uDe=r(njr,"data2vec-text"),njr.forEach(t),bDe=r(L7e," \u2014 "),px=n(L7e,"A",{href:!0});var sjr=s(px);vDe=r(sjr,"Data2VecTextConfig"),sjr.forEach(t),FDe=r(L7e," (Data2VecText model)"),L7e.forEach(t),TDe=i(F),pm=n(F,"LI",{});var x7e=s(pm);PK=n(x7e,"STRONG",{});var ljr=s(PK);MDe=r(ljr,"data2vec-vision"),ljr.forEach(t),EDe=r(x7e," \u2014 "),_x=n(x7e,"A",{href:!0});var ijr=s(_x);CDe=r(ijr,"Data2VecVisionConfig"),ijr.forEach(t),wDe=r(x7e," (Data2VecVision model)"),x7e.forEach(t),ADe=i(F),_m=n(F,"LI",{});var k7e=s(_m);$K=n(k7e,"STRONG",{});var djr=s($K);yDe=r(djr,"deberta"),djr.forEach(t),LDe=r(k7e," \u2014 "),ux=n(k7e,"A",{href:!0});var cjr=s(ux);xDe=r(cjr,"DebertaConfig"),cjr.forEach(t),kDe=r(k7e," (DeBERTa model)"),k7e.forEach(t),SDe=i(F),um=n(F,"LI",{});var S7e=s(um);IK=n(S7e,"STRONG",{});var fjr=s(IK);RDe=r(fjr,"deberta-v2"),fjr.forEach(t),BDe=r(S7e," \u2014 "),bx=n(S7e,"A",{href:!0});var mjr=s(bx);PDe=r(mjr,"DebertaV2Config"),mjr.forEach(t),$De=r(S7e," (DeBERTa-v2 model)"),S7e.forEach(t),IDe=i(F),bm=n(F,"LI",{});var R7e=s(bm);qK=n(R7e,"STRONG",{});var gjr=s(qK);qDe=r(gjr,"decision_transformer"),gjr.forEach(t),NDe=r(R7e," \u2014 "),vx=n(R7e,"A",{href:!0});var hjr=s(vx);jDe=r(hjr,"DecisionTransformerConfig"),hjr.forEach(t),DDe=r(R7e," (Decision Transformer model)"),R7e.forEach(t),GDe=i(F),vm=n(F,"LI",{});var B7e=s(vm);NK=n(B7e,"STRONG",{});var pjr=s(NK);ODe=r(pjr,"deit"),pjr.forEach(t),VDe=r(B7e," \u2014 "),Fx=n(B7e,"A",{href:!0});var _jr=s(Fx);XDe=r(_jr,"DeiTConfig"),_jr.forEach(t),zDe=r(B7e," (DeiT model)"),B7e.forEach(t),QDe=i(F),Fm=n(F,"LI",{});var P7e=s(Fm);jK=n(P7e,"STRONG",{});var ujr=s(jK);WDe=r(ujr,"detr"),ujr.forEach(t),HDe=r(P7e," \u2014 "),Tx=n(P7e,"A",{href:!0});var bjr=s(Tx);UDe=r(bjr,"DetrConfig"),bjr.forEach(t),JDe=r(P7e," (DETR model)"),P7e.forEach(t),YDe=i(F),Tm=n(F,"LI",{});var $7e=s(Tm);DK=n($7e,"STRONG",{});var vjr=s(DK);KDe=r(vjr,"distilbert"),vjr.forEach(t),ZDe=r($7e," \u2014 "),Mx=n($7e,"A",{href:!0});var Fjr=s(Mx);eGe=r(Fjr,"DistilBertConfig"),Fjr.forEach(t),oGe=r($7e," (DistilBERT model)"),$7e.forEach(t),rGe=i(F),Mm=n(F,"LI",{});var I7e=s(Mm);GK=n(I7e,"STRONG",{});var Tjr=s(GK);tGe=r(Tjr,"dpr"),Tjr.forEach(t),aGe=r(I7e," \u2014 "),Ex=n(I7e,"A",{href:!0});var Mjr=s(Ex);nGe=r(Mjr,"DPRConfig"),Mjr.forEach(t),sGe=r(I7e," (DPR model)"),I7e.forEach(t),lGe=i(F),Em=n(F,"LI",{});var q7e=s(Em);OK=n(q7e,"STRONG",{});var Ejr=s(OK);iGe=r(Ejr,"dpt"),Ejr.forEach(t),dGe=r(q7e," \u2014 "),Cx=n(q7e,"A",{href:!0});var Cjr=s(Cx);cGe=r(Cjr,"DPTConfig"),Cjr.forEach(t),fGe=r(q7e," (DPT model)"),q7e.forEach(t),mGe=i(F),Cm=n(F,"LI",{});var N7e=s(Cm);VK=n(N7e,"STRONG",{});var wjr=s(VK);gGe=r(wjr,"electra"),wjr.forEach(t),hGe=r(N7e," \u2014 "),wx=n(N7e,"A",{href:!0});var Ajr=s(wx);pGe=r(Ajr,"ElectraConfig"),Ajr.forEach(t),_Ge=r(N7e," (ELECTRA model)"),N7e.forEach(t),uGe=i(F),wm=n(F,"LI",{});var j7e=s(wm);XK=n(j7e,"STRONG",{});var yjr=s(XK);bGe=r(yjr,"encoder-decoder"),yjr.forEach(t),vGe=r(j7e," \u2014 "),Ax=n(j7e,"A",{href:!0});var Ljr=s(Ax);FGe=r(Ljr,"EncoderDecoderConfig"),Ljr.forEach(t),TGe=r(j7e," (Encoder decoder model)"),j7e.forEach(t),MGe=i(F),Am=n(F,"LI",{});var D7e=s(Am);zK=n(D7e,"STRONG",{});var xjr=s(zK);EGe=r(xjr,"flaubert"),xjr.forEach(t),CGe=r(D7e," \u2014 "),yx=n(D7e,"A",{href:!0});var kjr=s(yx);wGe=r(kjr,"FlaubertConfig"),kjr.forEach(t),AGe=r(D7e," (FlauBERT model)"),D7e.forEach(t),yGe=i(F),ym=n(F,"LI",{});var G7e=s(ym);QK=n(G7e,"STRONG",{});var Sjr=s(QK);LGe=r(Sjr,"fnet"),Sjr.forEach(t),xGe=r(G7e," \u2014 "),Lx=n(G7e,"A",{href:!0});var Rjr=s(Lx);kGe=r(Rjr,"FNetConfig"),Rjr.forEach(t),SGe=r(G7e," (FNet model)"),G7e.forEach(t),RGe=i(F),Lm=n(F,"LI",{});var O7e=s(Lm);WK=n(O7e,"STRONG",{});var Bjr=s(WK);BGe=r(Bjr,"fsmt"),Bjr.forEach(t),PGe=r(O7e," \u2014 "),xx=n(O7e,"A",{href:!0});var Pjr=s(xx);$Ge=r(Pjr,"FSMTConfig"),Pjr.forEach(t),IGe=r(O7e," (FairSeq Machine-Translation model)"),O7e.forEach(t),qGe=i(F),xm=n(F,"LI",{});var V7e=s(xm);HK=n(V7e,"STRONG",{});var $jr=s(HK);NGe=r($jr,"funnel"),$jr.forEach(t),jGe=r(V7e," \u2014 "),kx=n(V7e,"A",{href:!0});var Ijr=s(kx);DGe=r(Ijr,"FunnelConfig"),Ijr.forEach(t),GGe=r(V7e," (Funnel Transformer model)"),V7e.forEach(t),OGe=i(F),km=n(F,"LI",{});var X7e=s(km);UK=n(X7e,"STRONG",{});var qjr=s(UK);VGe=r(qjr,"glpn"),qjr.forEach(t),XGe=r(X7e," \u2014 "),Sx=n(X7e,"A",{href:!0});var Njr=s(Sx);zGe=r(Njr,"GLPNConfig"),Njr.forEach(t),QGe=r(X7e," (GLPN model)"),X7e.forEach(t),WGe=i(F),Sm=n(F,"LI",{});var z7e=s(Sm);JK=n(z7e,"STRONG",{});var jjr=s(JK);HGe=r(jjr,"gpt2"),jjr.forEach(t),UGe=r(z7e," \u2014 "),Rx=n(z7e,"A",{href:!0});var Djr=s(Rx);JGe=r(Djr,"GPT2Config"),Djr.forEach(t),YGe=r(z7e," (OpenAI GPT-2 model)"),z7e.forEach(t),KGe=i(F),Rm=n(F,"LI",{});var Q7e=s(Rm);YK=n(Q7e,"STRONG",{});var Gjr=s(YK);ZGe=r(Gjr,"gpt_neo"),Gjr.forEach(t),eOe=r(Q7e," \u2014 "),Bx=n(Q7e,"A",{href:!0});var Ojr=s(Bx);oOe=r(Ojr,"GPTNeoConfig"),Ojr.forEach(t),rOe=r(Q7e," (GPT Neo model)"),Q7e.forEach(t),tOe=i(F),Bm=n(F,"LI",{});var W7e=s(Bm);KK=n(W7e,"STRONG",{});var Vjr=s(KK);aOe=r(Vjr,"gptj"),Vjr.forEach(t),nOe=r(W7e," \u2014 "),Px=n(W7e,"A",{href:!0});var Xjr=s(Px);sOe=r(Xjr,"GPTJConfig"),Xjr.forEach(t),lOe=r(W7e," (GPT-J model)"),W7e.forEach(t),iOe=i(F),Pm=n(F,"LI",{});var H7e=s(Pm);ZK=n(H7e,"STRONG",{});var zjr=s(ZK);dOe=r(zjr,"hubert"),zjr.forEach(t),cOe=r(H7e," \u2014 "),$x=n(H7e,"A",{href:!0});var Qjr=s($x);fOe=r(Qjr,"HubertConfig"),Qjr.forEach(t),mOe=r(H7e," (Hubert model)"),H7e.forEach(t),gOe=i(F),$m=n(F,"LI",{});var U7e=s($m);eZ=n(U7e,"STRONG",{});var Wjr=s(eZ);hOe=r(Wjr,"ibert"),Wjr.forEach(t),pOe=r(U7e," \u2014 "),Ix=n(U7e,"A",{href:!0});var Hjr=s(Ix);_Oe=r(Hjr,"IBertConfig"),Hjr.forEach(t),uOe=r(U7e," (I-BERT model)"),U7e.forEach(t),bOe=i(F),Im=n(F,"LI",{});var J7e=s(Im);oZ=n(J7e,"STRONG",{});var Ujr=s(oZ);vOe=r(Ujr,"imagegpt"),Ujr.forEach(t),FOe=r(J7e," \u2014 "),qx=n(J7e,"A",{href:!0});var Jjr=s(qx);TOe=r(Jjr,"ImageGPTConfig"),Jjr.forEach(t),MOe=r(J7e," (ImageGPT model)"),J7e.forEach(t),EOe=i(F),qm=n(F,"LI",{});var Y7e=s(qm);rZ=n(Y7e,"STRONG",{});var Yjr=s(rZ);COe=r(Yjr,"layoutlm"),Yjr.forEach(t),wOe=r(Y7e," \u2014 "),Nx=n(Y7e,"A",{href:!0});var Kjr=s(Nx);AOe=r(Kjr,"LayoutLMConfig"),Kjr.forEach(t),yOe=r(Y7e," (LayoutLM model)"),Y7e.forEach(t),LOe=i(F),Nm=n(F,"LI",{});var K7e=s(Nm);tZ=n(K7e,"STRONG",{});var Zjr=s(tZ);xOe=r(Zjr,"layoutlmv2"),Zjr.forEach(t),kOe=r(K7e," \u2014 "),jx=n(K7e,"A",{href:!0});var eDr=s(jx);SOe=r(eDr,"LayoutLMv2Config"),eDr.forEach(t),ROe=r(K7e," (LayoutLMv2 model)"),K7e.forEach(t),BOe=i(F),jm=n(F,"LI",{});var Z7e=s(jm);aZ=n(Z7e,"STRONG",{});var oDr=s(aZ);POe=r(oDr,"led"),oDr.forEach(t),$Oe=r(Z7e," \u2014 "),Dx=n(Z7e,"A",{href:!0});var rDr=s(Dx);IOe=r(rDr,"LEDConfig"),rDr.forEach(t),qOe=r(Z7e," (LED model)"),Z7e.forEach(t),NOe=i(F),Dm=n(F,"LI",{});var eMe=s(Dm);nZ=n(eMe,"STRONG",{});var tDr=s(nZ);jOe=r(tDr,"longformer"),tDr.forEach(t),DOe=r(eMe," \u2014 "),Gx=n(eMe,"A",{href:!0});var aDr=s(Gx);GOe=r(aDr,"LongformerConfig"),aDr.forEach(t),OOe=r(eMe," (Longformer model)"),eMe.forEach(t),VOe=i(F),Gm=n(F,"LI",{});var oMe=s(Gm);sZ=n(oMe,"STRONG",{});var nDr=s(sZ);XOe=r(nDr,"luke"),nDr.forEach(t),zOe=r(oMe," \u2014 "),Ox=n(oMe,"A",{href:!0});var sDr=s(Ox);QOe=r(sDr,"LukeConfig"),sDr.forEach(t),WOe=r(oMe," (LUKE model)"),oMe.forEach(t),HOe=i(F),Om=n(F,"LI",{});var rMe=s(Om);lZ=n(rMe,"STRONG",{});var lDr=s(lZ);UOe=r(lDr,"lxmert"),lDr.forEach(t),JOe=r(rMe," \u2014 "),Vx=n(rMe,"A",{href:!0});var iDr=s(Vx);YOe=r(iDr,"LxmertConfig"),iDr.forEach(t),KOe=r(rMe," (LXMERT model)"),rMe.forEach(t),ZOe=i(F),Vm=n(F,"LI",{});var tMe=s(Vm);iZ=n(tMe,"STRONG",{});var dDr=s(iZ);eVe=r(dDr,"m2m_100"),dDr.forEach(t),oVe=r(tMe," \u2014 "),Xx=n(tMe,"A",{href:!0});var cDr=s(Xx);rVe=r(cDr,"M2M100Config"),cDr.forEach(t),tVe=r(tMe," (M2M100 model)"),tMe.forEach(t),aVe=i(F),Xm=n(F,"LI",{});var aMe=s(Xm);dZ=n(aMe,"STRONG",{});var fDr=s(dZ);nVe=r(fDr,"marian"),fDr.forEach(t),sVe=r(aMe," \u2014 "),zx=n(aMe,"A",{href:!0});var mDr=s(zx);lVe=r(mDr,"MarianConfig"),mDr.forEach(t),iVe=r(aMe," (Marian model)"),aMe.forEach(t),dVe=i(F),zm=n(F,"LI",{});var nMe=s(zm);cZ=n(nMe,"STRONG",{});var gDr=s(cZ);cVe=r(gDr,"maskformer"),gDr.forEach(t),fVe=r(nMe," \u2014 "),Qx=n(nMe,"A",{href:!0});var hDr=s(Qx);mVe=r(hDr,"MaskFormerConfig"),hDr.forEach(t),gVe=r(nMe," (MaskFormer model)"),nMe.forEach(t),hVe=i(F),Qm=n(F,"LI",{});var sMe=s(Qm);fZ=n(sMe,"STRONG",{});var pDr=s(fZ);pVe=r(pDr,"mbart"),pDr.forEach(t),_Ve=r(sMe," \u2014 "),Wx=n(sMe,"A",{href:!0});var _Dr=s(Wx);uVe=r(_Dr,"MBartConfig"),_Dr.forEach(t),bVe=r(sMe," (mBART model)"),sMe.forEach(t),vVe=i(F),Wm=n(F,"LI",{});var lMe=s(Wm);mZ=n(lMe,"STRONG",{});var uDr=s(mZ);FVe=r(uDr,"megatron-bert"),uDr.forEach(t),TVe=r(lMe," \u2014 "),Hx=n(lMe,"A",{href:!0});var bDr=s(Hx);MVe=r(bDr,"MegatronBertConfig"),bDr.forEach(t),EVe=r(lMe," (MegatronBert model)"),lMe.forEach(t),CVe=i(F),Hm=n(F,"LI",{});var iMe=s(Hm);gZ=n(iMe,"STRONG",{});var vDr=s(gZ);wVe=r(vDr,"mobilebert"),vDr.forEach(t),AVe=r(iMe," \u2014 "),Ux=n(iMe,"A",{href:!0});var FDr=s(Ux);yVe=r(FDr,"MobileBertConfig"),FDr.forEach(t),LVe=r(iMe," (MobileBERT model)"),iMe.forEach(t),xVe=i(F),Um=n(F,"LI",{});var dMe=s(Um);hZ=n(dMe,"STRONG",{});var TDr=s(hZ);kVe=r(TDr,"mpnet"),TDr.forEach(t),SVe=r(dMe," \u2014 "),Jx=n(dMe,"A",{href:!0});var MDr=s(Jx);RVe=r(MDr,"MPNetConfig"),MDr.forEach(t),BVe=r(dMe," (MPNet model)"),dMe.forEach(t),PVe=i(F),Jm=n(F,"LI",{});var cMe=s(Jm);pZ=n(cMe,"STRONG",{});var EDr=s(pZ);$Ve=r(EDr,"mt5"),EDr.forEach(t),IVe=r(cMe," \u2014 "),Yx=n(cMe,"A",{href:!0});var CDr=s(Yx);qVe=r(CDr,"MT5Config"),CDr.forEach(t),NVe=r(cMe," (mT5 model)"),cMe.forEach(t),jVe=i(F),Ym=n(F,"LI",{});var fMe=s(Ym);_Z=n(fMe,"STRONG",{});var wDr=s(_Z);DVe=r(wDr,"nystromformer"),wDr.forEach(t),GVe=r(fMe," \u2014 "),Kx=n(fMe,"A",{href:!0});var ADr=s(Kx);OVe=r(ADr,"NystromformerConfig"),ADr.forEach(t),VVe=r(fMe," (Nystromformer model)"),fMe.forEach(t),XVe=i(F),Km=n(F,"LI",{});var mMe=s(Km);uZ=n(mMe,"STRONG",{});var yDr=s(uZ);zVe=r(yDr,"openai-gpt"),yDr.forEach(t),QVe=r(mMe," \u2014 "),Zx=n(mMe,"A",{href:!0});var LDr=s(Zx);WVe=r(LDr,"OpenAIGPTConfig"),LDr.forEach(t),HVe=r(mMe," (OpenAI GPT model)"),mMe.forEach(t),UVe=i(F),Zm=n(F,"LI",{});var gMe=s(Zm);bZ=n(gMe,"STRONG",{});var xDr=s(bZ);JVe=r(xDr,"pegasus"),xDr.forEach(t),YVe=r(gMe," \u2014 "),ek=n(gMe,"A",{href:!0});var kDr=s(ek);KVe=r(kDr,"PegasusConfig"),kDr.forEach(t),ZVe=r(gMe," (Pegasus model)"),gMe.forEach(t),eXe=i(F),eg=n(F,"LI",{});var hMe=s(eg);vZ=n(hMe,"STRONG",{});var SDr=s(vZ);oXe=r(SDr,"perceiver"),SDr.forEach(t),rXe=r(hMe," \u2014 "),ok=n(hMe,"A",{href:!0});var RDr=s(ok);tXe=r(RDr,"PerceiverConfig"),RDr.forEach(t),aXe=r(hMe," (Perceiver model)"),hMe.forEach(t),nXe=i(F),og=n(F,"LI",{});var pMe=s(og);FZ=n(pMe,"STRONG",{});var BDr=s(FZ);sXe=r(BDr,"plbart"),BDr.forEach(t),lXe=r(pMe," \u2014 "),rk=n(pMe,"A",{href:!0});var PDr=s(rk);iXe=r(PDr,"PLBartConfig"),PDr.forEach(t),dXe=r(pMe," (PLBart model)"),pMe.forEach(t),cXe=i(F),rg=n(F,"LI",{});var _Me=s(rg);TZ=n(_Me,"STRONG",{});var $Dr=s(TZ);fXe=r($Dr,"poolformer"),$Dr.forEach(t),mXe=r(_Me," \u2014 "),tk=n(_Me,"A",{href:!0});var IDr=s(tk);gXe=r(IDr,"PoolFormerConfig"),IDr.forEach(t),hXe=r(_Me," (PoolFormer model)"),_Me.forEach(t),pXe=i(F),tg=n(F,"LI",{});var uMe=s(tg);MZ=n(uMe,"STRONG",{});var qDr=s(MZ);_Xe=r(qDr,"prophetnet"),qDr.forEach(t),uXe=r(uMe," \u2014 "),ak=n(uMe,"A",{href:!0});var NDr=s(ak);bXe=r(NDr,"ProphetNetConfig"),NDr.forEach(t),vXe=r(uMe," (ProphetNet model)"),uMe.forEach(t),FXe=i(F),ag=n(F,"LI",{});var bMe=s(ag);EZ=n(bMe,"STRONG",{});var jDr=s(EZ);TXe=r(jDr,"qdqbert"),jDr.forEach(t),MXe=r(bMe," \u2014 "),nk=n(bMe,"A",{href:!0});var DDr=s(nk);EXe=r(DDr,"QDQBertConfig"),DDr.forEach(t),CXe=r(bMe," (QDQBert model)"),bMe.forEach(t),wXe=i(F),ng=n(F,"LI",{});var vMe=s(ng);CZ=n(vMe,"STRONG",{});var GDr=s(CZ);AXe=r(GDr,"rag"),GDr.forEach(t),yXe=r(vMe," \u2014 "),sk=n(vMe,"A",{href:!0});var ODr=s(sk);LXe=r(ODr,"RagConfig"),ODr.forEach(t),xXe=r(vMe," (RAG model)"),vMe.forEach(t),kXe=i(F),sg=n(F,"LI",{});var FMe=s(sg);wZ=n(FMe,"STRONG",{});var VDr=s(wZ);SXe=r(VDr,"realm"),VDr.forEach(t),RXe=r(FMe," \u2014 "),lk=n(FMe,"A",{href:!0});var XDr=s(lk);BXe=r(XDr,"RealmConfig"),XDr.forEach(t),PXe=r(FMe," (Realm model)"),FMe.forEach(t),$Xe=i(F),lg=n(F,"LI",{});var TMe=s(lg);AZ=n(TMe,"STRONG",{});var zDr=s(AZ);IXe=r(zDr,"reformer"),zDr.forEach(t),qXe=r(TMe," \u2014 "),ik=n(TMe,"A",{href:!0});var QDr=s(ik);NXe=r(QDr,"ReformerConfig"),QDr.forEach(t),jXe=r(TMe," (Reformer model)"),TMe.forEach(t),DXe=i(F),ig=n(F,"LI",{});var MMe=s(ig);yZ=n(MMe,"STRONG",{});var WDr=s(yZ);GXe=r(WDr,"regnet"),WDr.forEach(t),OXe=r(MMe," \u2014 "),dk=n(MMe,"A",{href:!0});var HDr=s(dk);VXe=r(HDr,"RegNetConfig"),HDr.forEach(t),XXe=r(MMe," (RegNet model)"),MMe.forEach(t),zXe=i(F),dg=n(F,"LI",{});var EMe=s(dg);LZ=n(EMe,"STRONG",{});var UDr=s(LZ);QXe=r(UDr,"rembert"),UDr.forEach(t),WXe=r(EMe," \u2014 "),ck=n(EMe,"A",{href:!0});var JDr=s(ck);HXe=r(JDr,"RemBertConfig"),JDr.forEach(t),UXe=r(EMe," (RemBERT model)"),EMe.forEach(t),JXe=i(F),cg=n(F,"LI",{});var CMe=s(cg);xZ=n(CMe,"STRONG",{});var YDr=s(xZ);YXe=r(YDr,"resnet"),YDr.forEach(t),KXe=r(CMe," \u2014 "),fk=n(CMe,"A",{href:!0});var KDr=s(fk);ZXe=r(KDr,"ResNetConfig"),KDr.forEach(t),eze=r(CMe," (ResNet model)"),CMe.forEach(t),oze=i(F),fg=n(F,"LI",{});var wMe=s(fg);kZ=n(wMe,"STRONG",{});var ZDr=s(kZ);rze=r(ZDr,"retribert"),ZDr.forEach(t),tze=r(wMe," \u2014 "),mk=n(wMe,"A",{href:!0});var eGr=s(mk);aze=r(eGr,"RetriBertConfig"),eGr.forEach(t),nze=r(wMe," (RetriBERT model)"),wMe.forEach(t),sze=i(F),mg=n(F,"LI",{});var AMe=s(mg);SZ=n(AMe,"STRONG",{});var oGr=s(SZ);lze=r(oGr,"roberta"),oGr.forEach(t),ize=r(AMe," \u2014 "),gk=n(AMe,"A",{href:!0});var rGr=s(gk);dze=r(rGr,"RobertaConfig"),rGr.forEach(t),cze=r(AMe," (RoBERTa model)"),AMe.forEach(t),fze=i(F),gg=n(F,"LI",{});var yMe=s(gg);RZ=n(yMe,"STRONG",{});var tGr=s(RZ);mze=r(tGr,"roformer"),tGr.forEach(t),gze=r(yMe," \u2014 "),hk=n(yMe,"A",{href:!0});var aGr=s(hk);hze=r(aGr,"RoFormerConfig"),aGr.forEach(t),pze=r(yMe," (RoFormer model)"),yMe.forEach(t),_ze=i(F),hg=n(F,"LI",{});var LMe=s(hg);BZ=n(LMe,"STRONG",{});var nGr=s(BZ);uze=r(nGr,"segformer"),nGr.forEach(t),bze=r(LMe," \u2014 "),pk=n(LMe,"A",{href:!0});var sGr=s(pk);vze=r(sGr,"SegformerConfig"),sGr.forEach(t),Fze=r(LMe," (SegFormer model)"),LMe.forEach(t),Tze=i(F),pg=n(F,"LI",{});var xMe=s(pg);PZ=n(xMe,"STRONG",{});var lGr=s(PZ);Mze=r(lGr,"sew"),lGr.forEach(t),Eze=r(xMe," \u2014 "),_k=n(xMe,"A",{href:!0});var iGr=s(_k);Cze=r(iGr,"SEWConfig"),iGr.forEach(t),wze=r(xMe," (SEW model)"),xMe.forEach(t),Aze=i(F),_g=n(F,"LI",{});var kMe=s(_g);$Z=n(kMe,"STRONG",{});var dGr=s($Z);yze=r(dGr,"sew-d"),dGr.forEach(t),Lze=r(kMe," \u2014 "),uk=n(kMe,"A",{href:!0});var cGr=s(uk);xze=r(cGr,"SEWDConfig"),cGr.forEach(t),kze=r(kMe," (SEW-D model)"),kMe.forEach(t),Sze=i(F),ug=n(F,"LI",{});var SMe=s(ug);IZ=n(SMe,"STRONG",{});var fGr=s(IZ);Rze=r(fGr,"speech-encoder-decoder"),fGr.forEach(t),Bze=r(SMe," \u2014 "),bk=n(SMe,"A",{href:!0});var mGr=s(bk);Pze=r(mGr,"SpeechEncoderDecoderConfig"),mGr.forEach(t),$ze=r(SMe," (Speech Encoder decoder model)"),SMe.forEach(t),Ize=i(F),bg=n(F,"LI",{});var RMe=s(bg);qZ=n(RMe,"STRONG",{});var gGr=s(qZ);qze=r(gGr,"speech_to_text"),gGr.forEach(t),Nze=r(RMe," \u2014 "),vk=n(RMe,"A",{href:!0});var hGr=s(vk);jze=r(hGr,"Speech2TextConfig"),hGr.forEach(t),Dze=r(RMe," (Speech2Text model)"),RMe.forEach(t),Gze=i(F),vg=n(F,"LI",{});var BMe=s(vg);NZ=n(BMe,"STRONG",{});var pGr=s(NZ);Oze=r(pGr,"speech_to_text_2"),pGr.forEach(t),Vze=r(BMe," \u2014 "),Fk=n(BMe,"A",{href:!0});var _Gr=s(Fk);Xze=r(_Gr,"Speech2Text2Config"),_Gr.forEach(t),zze=r(BMe," (Speech2Text2 model)"),BMe.forEach(t),Qze=i(F),Fg=n(F,"LI",{});var PMe=s(Fg);jZ=n(PMe,"STRONG",{});var uGr=s(jZ);Wze=r(uGr,"splinter"),uGr.forEach(t),Hze=r(PMe," \u2014 "),Tk=n(PMe,"A",{href:!0});var bGr=s(Tk);Uze=r(bGr,"SplinterConfig"),bGr.forEach(t),Jze=r(PMe," (Splinter model)"),PMe.forEach(t),Yze=i(F),Tg=n(F,"LI",{});var $Me=s(Tg);DZ=n($Me,"STRONG",{});var vGr=s(DZ);Kze=r(vGr,"squeezebert"),vGr.forEach(t),Zze=r($Me," \u2014 "),Mk=n($Me,"A",{href:!0});var FGr=s(Mk);eQe=r(FGr,"SqueezeBertConfig"),FGr.forEach(t),oQe=r($Me," (SqueezeBERT model)"),$Me.forEach(t),rQe=i(F),Mg=n(F,"LI",{});var IMe=s(Mg);GZ=n(IMe,"STRONG",{});var TGr=s(GZ);tQe=r(TGr,"swin"),TGr.forEach(t),aQe=r(IMe," \u2014 "),Ek=n(IMe,"A",{href:!0});var MGr=s(Ek);nQe=r(MGr,"SwinConfig"),MGr.forEach(t),sQe=r(IMe," (Swin model)"),IMe.forEach(t),lQe=i(F),Eg=n(F,"LI",{});var qMe=s(Eg);OZ=n(qMe,"STRONG",{});var EGr=s(OZ);iQe=r(EGr,"t5"),EGr.forEach(t),dQe=r(qMe," \u2014 "),Ck=n(qMe,"A",{href:!0});var CGr=s(Ck);cQe=r(CGr,"T5Config"),CGr.forEach(t),fQe=r(qMe," (T5 model)"),qMe.forEach(t),mQe=i(F),Cg=n(F,"LI",{});var NMe=s(Cg);VZ=n(NMe,"STRONG",{});var wGr=s(VZ);gQe=r(wGr,"tapas"),wGr.forEach(t),hQe=r(NMe," \u2014 "),wk=n(NMe,"A",{href:!0});var AGr=s(wk);pQe=r(AGr,"TapasConfig"),AGr.forEach(t),_Qe=r(NMe," (TAPAS model)"),NMe.forEach(t),uQe=i(F),wg=n(F,"LI",{});var jMe=s(wg);XZ=n(jMe,"STRONG",{});var yGr=s(XZ);bQe=r(yGr,"tapex"),yGr.forEach(t),vQe=r(jMe," \u2014 "),Ak=n(jMe,"A",{href:!0});var LGr=s(Ak);FQe=r(LGr,"BartConfig"),LGr.forEach(t),TQe=r(jMe," (TAPEX model)"),jMe.forEach(t),MQe=i(F),Ag=n(F,"LI",{});var DMe=s(Ag);zZ=n(DMe,"STRONG",{});var xGr=s(zZ);EQe=r(xGr,"transfo-xl"),xGr.forEach(t),CQe=r(DMe," \u2014 "),yk=n(DMe,"A",{href:!0});var kGr=s(yk);wQe=r(kGr,"TransfoXLConfig"),kGr.forEach(t),AQe=r(DMe," (Transformer-XL model)"),DMe.forEach(t),yQe=i(F),yg=n(F,"LI",{});var GMe=s(yg);QZ=n(GMe,"STRONG",{});var SGr=s(QZ);LQe=r(SGr,"trocr"),SGr.forEach(t),xQe=r(GMe," \u2014 "),Lk=n(GMe,"A",{href:!0});var RGr=s(Lk);kQe=r(RGr,"TrOCRConfig"),RGr.forEach(t),SQe=r(GMe," (TrOCR model)"),GMe.forEach(t),RQe=i(F),Lg=n(F,"LI",{});var OMe=s(Lg);WZ=n(OMe,"STRONG",{});var BGr=s(WZ);BQe=r(BGr,"unispeech"),BGr.forEach(t),PQe=r(OMe," \u2014 "),xk=n(OMe,"A",{href:!0});var PGr=s(xk);$Qe=r(PGr,"UniSpeechConfig"),PGr.forEach(t),IQe=r(OMe," (UniSpeech model)"),OMe.forEach(t),qQe=i(F),xg=n(F,"LI",{});var VMe=s(xg);HZ=n(VMe,"STRONG",{});var $Gr=s(HZ);NQe=r($Gr,"unispeech-sat"),$Gr.forEach(t),jQe=r(VMe," \u2014 "),kk=n(VMe,"A",{href:!0});var IGr=s(kk);DQe=r(IGr,"UniSpeechSatConfig"),IGr.forEach(t),GQe=r(VMe," (UniSpeechSat model)"),VMe.forEach(t),OQe=i(F),kg=n(F,"LI",{});var XMe=s(kg);UZ=n(XMe,"STRONG",{});var qGr=s(UZ);VQe=r(qGr,"van"),qGr.forEach(t),XQe=r(XMe," \u2014 "),Sk=n(XMe,"A",{href:!0});var NGr=s(Sk);zQe=r(NGr,"VanConfig"),NGr.forEach(t),QQe=r(XMe," (VAN model)"),XMe.forEach(t),WQe=i(F),Sg=n(F,"LI",{});var zMe=s(Sg);JZ=n(zMe,"STRONG",{});var jGr=s(JZ);HQe=r(jGr,"vilt"),jGr.forEach(t),UQe=r(zMe," \u2014 "),Rk=n(zMe,"A",{href:!0});var DGr=s(Rk);JQe=r(DGr,"ViltConfig"),DGr.forEach(t),YQe=r(zMe," (ViLT model)"),zMe.forEach(t),KQe=i(F),Rg=n(F,"LI",{});var QMe=s(Rg);YZ=n(QMe,"STRONG",{});var GGr=s(YZ);ZQe=r(GGr,"vision-encoder-decoder"),GGr.forEach(t),eWe=r(QMe," \u2014 "),Bk=n(QMe,"A",{href:!0});var OGr=s(Bk);oWe=r(OGr,"VisionEncoderDecoderConfig"),OGr.forEach(t),rWe=r(QMe," (Vision Encoder decoder model)"),QMe.forEach(t),tWe=i(F),Bg=n(F,"LI",{});var WMe=s(Bg);KZ=n(WMe,"STRONG",{});var VGr=s(KZ);aWe=r(VGr,"vision-text-dual-encoder"),VGr.forEach(t),nWe=r(WMe," \u2014 "),Pk=n(WMe,"A",{href:!0});var XGr=s(Pk);sWe=r(XGr,"VisionTextDualEncoderConfig"),XGr.forEach(t),lWe=r(WMe," (VisionTextDualEncoder model)"),WMe.forEach(t),iWe=i(F),Pg=n(F,"LI",{});var HMe=s(Pg);ZZ=n(HMe,"STRONG",{});var zGr=s(ZZ);dWe=r(zGr,"visual_bert"),zGr.forEach(t),cWe=r(HMe," \u2014 "),$k=n(HMe,"A",{href:!0});var QGr=s($k);fWe=r(QGr,"VisualBertConfig"),QGr.forEach(t),mWe=r(HMe," (VisualBert model)"),HMe.forEach(t),gWe=i(F),$g=n(F,"LI",{});var UMe=s($g);eee=n(UMe,"STRONG",{});var WGr=s(eee);hWe=r(WGr,"vit"),WGr.forEach(t),pWe=r(UMe," \u2014 "),Ik=n(UMe,"A",{href:!0});var HGr=s(Ik);_We=r(HGr,"ViTConfig"),HGr.forEach(t),uWe=r(UMe," (ViT model)"),UMe.forEach(t),bWe=i(F),Ig=n(F,"LI",{});var JMe=s(Ig);oee=n(JMe,"STRONG",{});var UGr=s(oee);vWe=r(UGr,"vit_mae"),UGr.forEach(t),FWe=r(JMe," \u2014 "),qk=n(JMe,"A",{href:!0});var JGr=s(qk);TWe=r(JGr,"ViTMAEConfig"),JGr.forEach(t),MWe=r(JMe," (ViTMAE model)"),JMe.forEach(t),EWe=i(F),qg=n(F,"LI",{});var YMe=s(qg);ree=n(YMe,"STRONG",{});var YGr=s(ree);CWe=r(YGr,"wav2vec2"),YGr.forEach(t),wWe=r(YMe," \u2014 "),Nk=n(YMe,"A",{href:!0});var KGr=s(Nk);AWe=r(KGr,"Wav2Vec2Config"),KGr.forEach(t),yWe=r(YMe," (Wav2Vec2 model)"),YMe.forEach(t),LWe=i(F),Ng=n(F,"LI",{});var KMe=s(Ng);tee=n(KMe,"STRONG",{});var ZGr=s(tee);xWe=r(ZGr,"wavlm"),ZGr.forEach(t),kWe=r(KMe," \u2014 "),jk=n(KMe,"A",{href:!0});var eOr=s(jk);SWe=r(eOr,"WavLMConfig"),eOr.forEach(t),RWe=r(KMe," (WavLM model)"),KMe.forEach(t),BWe=i(F),jg=n(F,"LI",{});var ZMe=s(jg);aee=n(ZMe,"STRONG",{});var oOr=s(aee);PWe=r(oOr,"xglm"),oOr.forEach(t),$We=r(ZMe," \u2014 "),Dk=n(ZMe,"A",{href:!0});var rOr=s(Dk);IWe=r(rOr,"XGLMConfig"),rOr.forEach(t),qWe=r(ZMe," (XGLM model)"),ZMe.forEach(t),NWe=i(F),Dg=n(F,"LI",{});var e4e=s(Dg);nee=n(e4e,"STRONG",{});var tOr=s(nee);jWe=r(tOr,"xlm"),tOr.forEach(t),DWe=r(e4e," \u2014 "),Gk=n(e4e,"A",{href:!0});var aOr=s(Gk);GWe=r(aOr,"XLMConfig"),aOr.forEach(t),OWe=r(e4e," (XLM model)"),e4e.forEach(t),VWe=i(F),Gg=n(F,"LI",{});var o4e=s(Gg);see=n(o4e,"STRONG",{});var nOr=s(see);XWe=r(nOr,"xlm-prophetnet"),nOr.forEach(t),zWe=r(o4e," \u2014 "),Ok=n(o4e,"A",{href:!0});var sOr=s(Ok);QWe=r(sOr,"XLMProphetNetConfig"),sOr.forEach(t),WWe=r(o4e," (XLMProphetNet model)"),o4e.forEach(t),HWe=i(F),Og=n(F,"LI",{});var r4e=s(Og);lee=n(r4e,"STRONG",{});var lOr=s(lee);UWe=r(lOr,"xlm-roberta"),lOr.forEach(t),JWe=r(r4e," \u2014 "),Vk=n(r4e,"A",{href:!0});var iOr=s(Vk);YWe=r(iOr,"XLMRobertaConfig"),iOr.forEach(t),KWe=r(r4e," (XLM-RoBERTa model)"),r4e.forEach(t),ZWe=i(F),Vg=n(F,"LI",{});var t4e=s(Vg);iee=n(t4e,"STRONG",{});var dOr=s(iee);eHe=r(dOr,"xlm-roberta-xl"),dOr.forEach(t),oHe=r(t4e," \u2014 "),Xk=n(t4e,"A",{href:!0});var cOr=s(Xk);rHe=r(cOr,"XLMRobertaXLConfig"),cOr.forEach(t),tHe=r(t4e," (XLM-RoBERTa-XL model)"),t4e.forEach(t),aHe=i(F),Xg=n(F,"LI",{});var a4e=s(Xg);dee=n(a4e,"STRONG",{});var fOr=s(dee);nHe=r(fOr,"xlnet"),fOr.forEach(t),sHe=r(a4e," \u2014 "),zk=n(a4e,"A",{href:!0});var mOr=s(zk);lHe=r(mOr,"XLNetConfig"),mOr.forEach(t),iHe=r(a4e," (XLNet model)"),a4e.forEach(t),dHe=i(F),zg=n(F,"LI",{});var n4e=s(zg);cee=n(n4e,"STRONG",{});var gOr=s(cee);cHe=r(gOr,"yoso"),gOr.forEach(t),fHe=r(n4e," \u2014 "),Qk=n(n4e,"A",{href:!0});var hOr=s(Qk);mHe=r(hOr,"YosoConfig"),hOr.forEach(t),gHe=r(n4e," (YOSO model)"),n4e.forEach(t),F.forEach(t),hHe=i(ga),fee=n(ga,"P",{});var pOr=s(fee);pHe=r(pOr,"Examples:"),pOr.forEach(t),_He=i(ga),m(t3.$$.fragment,ga),ga.forEach(t),uHe=i(Ys),Qg=n(Ys,"DIV",{class:!0});var mIe=s(Qg);m(a3.$$.fragment,mIe),bHe=i(mIe),mee=n(mIe,"P",{});var _Or=s(mee);vHe=r(_Or,"Register a new configuration for this class."),_Or.forEach(t),mIe.forEach(t),Ys.forEach(t),cPe=i(c),od=n(c,"H2",{class:!0});var gIe=s(od);Wg=n(gIe,"A",{id:!0,class:!0,href:!0});var uOr=s(Wg);gee=n(uOr,"SPAN",{});var bOr=s(gee);m(n3.$$.fragment,bOr),bOr.forEach(t),uOr.forEach(t),FHe=i(gIe),hee=n(gIe,"SPAN",{});var vOr=s(hee);THe=r(vOr,"AutoTokenizer"),vOr.forEach(t),gIe.forEach(t),fPe=i(c),Wo=n(c,"DIV",{class:!0});var Ks=s(Wo);m(s3.$$.fragment,Ks),MHe=i(Ks),l3=n(Ks,"P",{});var hIe=s(l3);EHe=r(hIe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),Wk=n(hIe,"A",{href:!0});var FOr=s(Wk);CHe=r(FOr,"AutoTokenizer.from_pretrained()"),FOr.forEach(t),wHe=r(hIe," class method."),hIe.forEach(t),AHe=i(Ks),i3=n(Ks,"P",{});var pIe=s(i3);yHe=r(pIe,"This class cannot be instantiated directly using "),pee=n(pIe,"CODE",{});var TOr=s(pee);LHe=r(TOr,"__init__()"),TOr.forEach(t),xHe=r(pIe," (throws an error)."),pIe.forEach(t),kHe=i(Ks),ho=n(Ks,"DIV",{class:!0});var ha=s(ho);m(d3.$$.fragment,ha),SHe=i(ha),_ee=n(ha,"P",{});var MOr=s(_ee);RHe=r(MOr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),MOr.forEach(t),BHe=i(ha),Oa=n(ha,"P",{});var W4=s(Oa);PHe=r(W4,"The tokenizer class to instantiate is selected based on the "),uee=n(W4,"CODE",{});var EOr=s(uee);$He=r(EOr,"model_type"),EOr.forEach(t),IHe=r(W4,` property of the config object (either
passed as an argument or loaded from `),bee=n(W4,"CODE",{});var COr=s(bee);qHe=r(COr,"pretrained_model_name_or_path"),COr.forEach(t),NHe=r(W4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vee=n(W4,"CODE",{});var wOr=s(vee);jHe=r(wOr,"pretrained_model_name_or_path"),wOr.forEach(t),DHe=r(W4,":"),W4.forEach(t),GHe=i(ha),E=n(ha,"UL",{});var C=s(E);Wn=n(C,"LI",{});var OL=s(Wn);Fee=n(OL,"STRONG",{});var AOr=s(Fee);OHe=r(AOr,"albert"),AOr.forEach(t),VHe=r(OL," \u2014 "),Hk=n(OL,"A",{href:!0});var yOr=s(Hk);XHe=r(yOr,"AlbertTokenizer"),yOr.forEach(t),zHe=r(OL," or "),Uk=n(OL,"A",{href:!0});var LOr=s(Uk);QHe=r(LOr,"AlbertTokenizerFast"),LOr.forEach(t),WHe=r(OL," (ALBERT model)"),OL.forEach(t),HHe=i(C),Hn=n(C,"LI",{});var VL=s(Hn);Tee=n(VL,"STRONG",{});var xOr=s(Tee);UHe=r(xOr,"bart"),xOr.forEach(t),JHe=r(VL," \u2014 "),Jk=n(VL,"A",{href:!0});var kOr=s(Jk);YHe=r(kOr,"BartTokenizer"),kOr.forEach(t),KHe=r(VL," or "),Yk=n(VL,"A",{href:!0});var SOr=s(Yk);ZHe=r(SOr,"BartTokenizerFast"),SOr.forEach(t),eUe=r(VL," (BART model)"),VL.forEach(t),oUe=i(C),Un=n(C,"LI",{});var XL=s(Un);Mee=n(XL,"STRONG",{});var ROr=s(Mee);rUe=r(ROr,"barthez"),ROr.forEach(t),tUe=r(XL," \u2014 "),Kk=n(XL,"A",{href:!0});var BOr=s(Kk);aUe=r(BOr,"BarthezTokenizer"),BOr.forEach(t),nUe=r(XL," or "),Zk=n(XL,"A",{href:!0});var POr=s(Zk);sUe=r(POr,"BarthezTokenizerFast"),POr.forEach(t),lUe=r(XL," (BARThez model)"),XL.forEach(t),iUe=i(C),Hg=n(C,"LI",{});var s4e=s(Hg);Eee=n(s4e,"STRONG",{});var $Or=s(Eee);dUe=r($Or,"bartpho"),$Or.forEach(t),cUe=r(s4e," \u2014 "),eS=n(s4e,"A",{href:!0});var IOr=s(eS);fUe=r(IOr,"BartphoTokenizer"),IOr.forEach(t),mUe=r(s4e," (BARTpho model)"),s4e.forEach(t),gUe=i(C),Jn=n(C,"LI",{});var zL=s(Jn);Cee=n(zL,"STRONG",{});var qOr=s(Cee);hUe=r(qOr,"bert"),qOr.forEach(t),pUe=r(zL," \u2014 "),oS=n(zL,"A",{href:!0});var NOr=s(oS);_Ue=r(NOr,"BertTokenizer"),NOr.forEach(t),uUe=r(zL," or "),rS=n(zL,"A",{href:!0});var jOr=s(rS);bUe=r(jOr,"BertTokenizerFast"),jOr.forEach(t),vUe=r(zL," (BERT model)"),zL.forEach(t),FUe=i(C),Ug=n(C,"LI",{});var l4e=s(Ug);wee=n(l4e,"STRONG",{});var DOr=s(wee);TUe=r(DOr,"bert-generation"),DOr.forEach(t),MUe=r(l4e," \u2014 "),tS=n(l4e,"A",{href:!0});var GOr=s(tS);EUe=r(GOr,"BertGenerationTokenizer"),GOr.forEach(t),CUe=r(l4e," (Bert Generation model)"),l4e.forEach(t),wUe=i(C),Jg=n(C,"LI",{});var i4e=s(Jg);Aee=n(i4e,"STRONG",{});var OOr=s(Aee);AUe=r(OOr,"bert-japanese"),OOr.forEach(t),yUe=r(i4e," \u2014 "),aS=n(i4e,"A",{href:!0});var VOr=s(aS);LUe=r(VOr,"BertJapaneseTokenizer"),VOr.forEach(t),xUe=r(i4e," (BertJapanese model)"),i4e.forEach(t),kUe=i(C),Yg=n(C,"LI",{});var d4e=s(Yg);yee=n(d4e,"STRONG",{});var XOr=s(yee);SUe=r(XOr,"bertweet"),XOr.forEach(t),RUe=r(d4e," \u2014 "),nS=n(d4e,"A",{href:!0});var zOr=s(nS);BUe=r(zOr,"BertweetTokenizer"),zOr.forEach(t),PUe=r(d4e," (Bertweet model)"),d4e.forEach(t),$Ue=i(C),Yn=n(C,"LI",{});var QL=s(Yn);Lee=n(QL,"STRONG",{});var QOr=s(Lee);IUe=r(QOr,"big_bird"),QOr.forEach(t),qUe=r(QL," \u2014 "),sS=n(QL,"A",{href:!0});var WOr=s(sS);NUe=r(WOr,"BigBirdTokenizer"),WOr.forEach(t),jUe=r(QL," or "),lS=n(QL,"A",{href:!0});var HOr=s(lS);DUe=r(HOr,"BigBirdTokenizerFast"),HOr.forEach(t),GUe=r(QL," (BigBird model)"),QL.forEach(t),OUe=i(C),Kn=n(C,"LI",{});var WL=s(Kn);xee=n(WL,"STRONG",{});var UOr=s(xee);VUe=r(UOr,"bigbird_pegasus"),UOr.forEach(t),XUe=r(WL," \u2014 "),iS=n(WL,"A",{href:!0});var JOr=s(iS);zUe=r(JOr,"PegasusTokenizer"),JOr.forEach(t),QUe=r(WL," or "),dS=n(WL,"A",{href:!0});var YOr=s(dS);WUe=r(YOr,"PegasusTokenizerFast"),YOr.forEach(t),HUe=r(WL," (BigBirdPegasus model)"),WL.forEach(t),UUe=i(C),Zn=n(C,"LI",{});var HL=s(Zn);kee=n(HL,"STRONG",{});var KOr=s(kee);JUe=r(KOr,"blenderbot"),KOr.forEach(t),YUe=r(HL," \u2014 "),cS=n(HL,"A",{href:!0});var ZOr=s(cS);KUe=r(ZOr,"BlenderbotTokenizer"),ZOr.forEach(t),ZUe=r(HL," or "),fS=n(HL,"A",{href:!0});var eVr=s(fS);eJe=r(eVr,"BlenderbotTokenizerFast"),eVr.forEach(t),oJe=r(HL," (Blenderbot model)"),HL.forEach(t),rJe=i(C),Kg=n(C,"LI",{});var c4e=s(Kg);See=n(c4e,"STRONG",{});var oVr=s(See);tJe=r(oVr,"blenderbot-small"),oVr.forEach(t),aJe=r(c4e," \u2014 "),mS=n(c4e,"A",{href:!0});var rVr=s(mS);nJe=r(rVr,"BlenderbotSmallTokenizer"),rVr.forEach(t),sJe=r(c4e," (BlenderbotSmall model)"),c4e.forEach(t),lJe=i(C),Zg=n(C,"LI",{});var f4e=s(Zg);Ree=n(f4e,"STRONG",{});var tVr=s(Ree);iJe=r(tVr,"byt5"),tVr.forEach(t),dJe=r(f4e," \u2014 "),gS=n(f4e,"A",{href:!0});var aVr=s(gS);cJe=r(aVr,"ByT5Tokenizer"),aVr.forEach(t),fJe=r(f4e," (ByT5 model)"),f4e.forEach(t),mJe=i(C),es=n(C,"LI",{});var UL=s(es);Bee=n(UL,"STRONG",{});var nVr=s(Bee);gJe=r(nVr,"camembert"),nVr.forEach(t),hJe=r(UL," \u2014 "),hS=n(UL,"A",{href:!0});var sVr=s(hS);pJe=r(sVr,"CamembertTokenizer"),sVr.forEach(t),_Je=r(UL," or "),pS=n(UL,"A",{href:!0});var lVr=s(pS);uJe=r(lVr,"CamembertTokenizerFast"),lVr.forEach(t),bJe=r(UL," (CamemBERT model)"),UL.forEach(t),vJe=i(C),eh=n(C,"LI",{});var m4e=s(eh);Pee=n(m4e,"STRONG",{});var iVr=s(Pee);FJe=r(iVr,"canine"),iVr.forEach(t),TJe=r(m4e," \u2014 "),_S=n(m4e,"A",{href:!0});var dVr=s(_S);MJe=r(dVr,"CanineTokenizer"),dVr.forEach(t),EJe=r(m4e," (Canine model)"),m4e.forEach(t),CJe=i(C),os=n(C,"LI",{});var JL=s(os);$ee=n(JL,"STRONG",{});var cVr=s($ee);wJe=r(cVr,"clip"),cVr.forEach(t),AJe=r(JL," \u2014 "),uS=n(JL,"A",{href:!0});var fVr=s(uS);yJe=r(fVr,"CLIPTokenizer"),fVr.forEach(t),LJe=r(JL," or "),bS=n(JL,"A",{href:!0});var mVr=s(bS);xJe=r(mVr,"CLIPTokenizerFast"),mVr.forEach(t),kJe=r(JL," (CLIP model)"),JL.forEach(t),SJe=i(C),rs=n(C,"LI",{});var YL=s(rs);Iee=n(YL,"STRONG",{});var gVr=s(Iee);RJe=r(gVr,"convbert"),gVr.forEach(t),BJe=r(YL," \u2014 "),vS=n(YL,"A",{href:!0});var hVr=s(vS);PJe=r(hVr,"ConvBertTokenizer"),hVr.forEach(t),$Je=r(YL," or "),FS=n(YL,"A",{href:!0});var pVr=s(FS);IJe=r(pVr,"ConvBertTokenizerFast"),pVr.forEach(t),qJe=r(YL," (ConvBERT model)"),YL.forEach(t),NJe=i(C),ts=n(C,"LI",{});var KL=s(ts);qee=n(KL,"STRONG",{});var _Vr=s(qee);jJe=r(_Vr,"cpm"),_Vr.forEach(t),DJe=r(KL," \u2014 "),TS=n(KL,"A",{href:!0});var uVr=s(TS);GJe=r(uVr,"CpmTokenizer"),uVr.forEach(t),OJe=r(KL," or "),Nee=n(KL,"CODE",{});var bVr=s(Nee);VJe=r(bVr,"CpmTokenizerFast"),bVr.forEach(t),XJe=r(KL," (CPM model)"),KL.forEach(t),zJe=i(C),oh=n(C,"LI",{});var g4e=s(oh);jee=n(g4e,"STRONG",{});var vVr=s(jee);QJe=r(vVr,"ctrl"),vVr.forEach(t),WJe=r(g4e," \u2014 "),MS=n(g4e,"A",{href:!0});var FVr=s(MS);HJe=r(FVr,"CTRLTokenizer"),FVr.forEach(t),UJe=r(g4e," (CTRL model)"),g4e.forEach(t),JJe=i(C),as=n(C,"LI",{});var ZL=s(as);Dee=n(ZL,"STRONG",{});var TVr=s(Dee);YJe=r(TVr,"data2vec-text"),TVr.forEach(t),KJe=r(ZL," \u2014 "),ES=n(ZL,"A",{href:!0});var MVr=s(ES);ZJe=r(MVr,"RobertaTokenizer"),MVr.forEach(t),eYe=r(ZL," or "),CS=n(ZL,"A",{href:!0});var EVr=s(CS);oYe=r(EVr,"RobertaTokenizerFast"),EVr.forEach(t),rYe=r(ZL," (Data2VecText model)"),ZL.forEach(t),tYe=i(C),ns=n(C,"LI",{});var e9=s(ns);Gee=n(e9,"STRONG",{});var CVr=s(Gee);aYe=r(CVr,"deberta"),CVr.forEach(t),nYe=r(e9," \u2014 "),wS=n(e9,"A",{href:!0});var wVr=s(wS);sYe=r(wVr,"DebertaTokenizer"),wVr.forEach(t),lYe=r(e9," or "),AS=n(e9,"A",{href:!0});var AVr=s(AS);iYe=r(AVr,"DebertaTokenizerFast"),AVr.forEach(t),dYe=r(e9," (DeBERTa model)"),e9.forEach(t),cYe=i(C),ss=n(C,"LI",{});var o9=s(ss);Oee=n(o9,"STRONG",{});var yVr=s(Oee);fYe=r(yVr,"deberta-v2"),yVr.forEach(t),mYe=r(o9," \u2014 "),yS=n(o9,"A",{href:!0});var LVr=s(yS);gYe=r(LVr,"DebertaV2Tokenizer"),LVr.forEach(t),hYe=r(o9," or "),LS=n(o9,"A",{href:!0});var xVr=s(LS);pYe=r(xVr,"DebertaV2TokenizerFast"),xVr.forEach(t),_Ye=r(o9," (DeBERTa-v2 model)"),o9.forEach(t),uYe=i(C),ls=n(C,"LI",{});var r9=s(ls);Vee=n(r9,"STRONG",{});var kVr=s(Vee);bYe=r(kVr,"distilbert"),kVr.forEach(t),vYe=r(r9," \u2014 "),xS=n(r9,"A",{href:!0});var SVr=s(xS);FYe=r(SVr,"DistilBertTokenizer"),SVr.forEach(t),TYe=r(r9," or "),kS=n(r9,"A",{href:!0});var RVr=s(kS);MYe=r(RVr,"DistilBertTokenizerFast"),RVr.forEach(t),EYe=r(r9," (DistilBERT model)"),r9.forEach(t),CYe=i(C),is=n(C,"LI",{});var t9=s(is);Xee=n(t9,"STRONG",{});var BVr=s(Xee);wYe=r(BVr,"dpr"),BVr.forEach(t),AYe=r(t9," \u2014 "),SS=n(t9,"A",{href:!0});var PVr=s(SS);yYe=r(PVr,"DPRQuestionEncoderTokenizer"),PVr.forEach(t),LYe=r(t9," or "),RS=n(t9,"A",{href:!0});var $Vr=s(RS);xYe=r($Vr,"DPRQuestionEncoderTokenizerFast"),$Vr.forEach(t),kYe=r(t9," (DPR model)"),t9.forEach(t),SYe=i(C),ds=n(C,"LI",{});var a9=s(ds);zee=n(a9,"STRONG",{});var IVr=s(zee);RYe=r(IVr,"electra"),IVr.forEach(t),BYe=r(a9," \u2014 "),BS=n(a9,"A",{href:!0});var qVr=s(BS);PYe=r(qVr,"ElectraTokenizer"),qVr.forEach(t),$Ye=r(a9," or "),PS=n(a9,"A",{href:!0});var NVr=s(PS);IYe=r(NVr,"ElectraTokenizerFast"),NVr.forEach(t),qYe=r(a9," (ELECTRA model)"),a9.forEach(t),NYe=i(C),rh=n(C,"LI",{});var h4e=s(rh);Qee=n(h4e,"STRONG",{});var jVr=s(Qee);jYe=r(jVr,"flaubert"),jVr.forEach(t),DYe=r(h4e," \u2014 "),$S=n(h4e,"A",{href:!0});var DVr=s($S);GYe=r(DVr,"FlaubertTokenizer"),DVr.forEach(t),OYe=r(h4e," (FlauBERT model)"),h4e.forEach(t),VYe=i(C),cs=n(C,"LI",{});var n9=s(cs);Wee=n(n9,"STRONG",{});var GVr=s(Wee);XYe=r(GVr,"fnet"),GVr.forEach(t),zYe=r(n9," \u2014 "),IS=n(n9,"A",{href:!0});var OVr=s(IS);QYe=r(OVr,"FNetTokenizer"),OVr.forEach(t),WYe=r(n9," or "),qS=n(n9,"A",{href:!0});var VVr=s(qS);HYe=r(VVr,"FNetTokenizerFast"),VVr.forEach(t),UYe=r(n9," (FNet model)"),n9.forEach(t),JYe=i(C),th=n(C,"LI",{});var p4e=s(th);Hee=n(p4e,"STRONG",{});var XVr=s(Hee);YYe=r(XVr,"fsmt"),XVr.forEach(t),KYe=r(p4e," \u2014 "),NS=n(p4e,"A",{href:!0});var zVr=s(NS);ZYe=r(zVr,"FSMTTokenizer"),zVr.forEach(t),eKe=r(p4e," (FairSeq Machine-Translation model)"),p4e.forEach(t),oKe=i(C),fs=n(C,"LI",{});var s9=s(fs);Uee=n(s9,"STRONG",{});var QVr=s(Uee);rKe=r(QVr,"funnel"),QVr.forEach(t),tKe=r(s9," \u2014 "),jS=n(s9,"A",{href:!0});var WVr=s(jS);aKe=r(WVr,"FunnelTokenizer"),WVr.forEach(t),nKe=r(s9," or "),DS=n(s9,"A",{href:!0});var HVr=s(DS);sKe=r(HVr,"FunnelTokenizerFast"),HVr.forEach(t),lKe=r(s9," (Funnel Transformer model)"),s9.forEach(t),iKe=i(C),ms=n(C,"LI",{});var l9=s(ms);Jee=n(l9,"STRONG",{});var UVr=s(Jee);dKe=r(UVr,"gpt2"),UVr.forEach(t),cKe=r(l9," \u2014 "),GS=n(l9,"A",{href:!0});var JVr=s(GS);fKe=r(JVr,"GPT2Tokenizer"),JVr.forEach(t),mKe=r(l9," or "),OS=n(l9,"A",{href:!0});var YVr=s(OS);gKe=r(YVr,"GPT2TokenizerFast"),YVr.forEach(t),hKe=r(l9," (OpenAI GPT-2 model)"),l9.forEach(t),pKe=i(C),gs=n(C,"LI",{});var i9=s(gs);Yee=n(i9,"STRONG",{});var KVr=s(Yee);_Ke=r(KVr,"gpt_neo"),KVr.forEach(t),uKe=r(i9," \u2014 "),VS=n(i9,"A",{href:!0});var ZVr=s(VS);bKe=r(ZVr,"GPT2Tokenizer"),ZVr.forEach(t),vKe=r(i9," or "),XS=n(i9,"A",{href:!0});var eXr=s(XS);FKe=r(eXr,"GPT2TokenizerFast"),eXr.forEach(t),TKe=r(i9," (GPT Neo model)"),i9.forEach(t),MKe=i(C),hs=n(C,"LI",{});var d9=s(hs);Kee=n(d9,"STRONG",{});var oXr=s(Kee);EKe=r(oXr,"gptj"),oXr.forEach(t),CKe=r(d9," \u2014 "),zS=n(d9,"A",{href:!0});var rXr=s(zS);wKe=r(rXr,"GPT2Tokenizer"),rXr.forEach(t),AKe=r(d9," or "),QS=n(d9,"A",{href:!0});var tXr=s(QS);yKe=r(tXr,"GPT2TokenizerFast"),tXr.forEach(t),LKe=r(d9," (GPT-J model)"),d9.forEach(t),xKe=i(C),ps=n(C,"LI",{});var c9=s(ps);Zee=n(c9,"STRONG",{});var aXr=s(Zee);kKe=r(aXr,"herbert"),aXr.forEach(t),SKe=r(c9," \u2014 "),WS=n(c9,"A",{href:!0});var nXr=s(WS);RKe=r(nXr,"HerbertTokenizer"),nXr.forEach(t),BKe=r(c9," or "),HS=n(c9,"A",{href:!0});var sXr=s(HS);PKe=r(sXr,"HerbertTokenizerFast"),sXr.forEach(t),$Ke=r(c9," (HerBERT model)"),c9.forEach(t),IKe=i(C),ah=n(C,"LI",{});var _4e=s(ah);eoe=n(_4e,"STRONG",{});var lXr=s(eoe);qKe=r(lXr,"hubert"),lXr.forEach(t),NKe=r(_4e," \u2014 "),US=n(_4e,"A",{href:!0});var iXr=s(US);jKe=r(iXr,"Wav2Vec2CTCTokenizer"),iXr.forEach(t),DKe=r(_4e," (Hubert model)"),_4e.forEach(t),GKe=i(C),_s=n(C,"LI",{});var f9=s(_s);ooe=n(f9,"STRONG",{});var dXr=s(ooe);OKe=r(dXr,"ibert"),dXr.forEach(t),VKe=r(f9," \u2014 "),JS=n(f9,"A",{href:!0});var cXr=s(JS);XKe=r(cXr,"RobertaTokenizer"),cXr.forEach(t),zKe=r(f9," or "),YS=n(f9,"A",{href:!0});var fXr=s(YS);QKe=r(fXr,"RobertaTokenizerFast"),fXr.forEach(t),WKe=r(f9," (I-BERT model)"),f9.forEach(t),HKe=i(C),us=n(C,"LI",{});var m9=s(us);roe=n(m9,"STRONG",{});var mXr=s(roe);UKe=r(mXr,"layoutlm"),mXr.forEach(t),JKe=r(m9," \u2014 "),KS=n(m9,"A",{href:!0});var gXr=s(KS);YKe=r(gXr,"LayoutLMTokenizer"),gXr.forEach(t),KKe=r(m9," or "),ZS=n(m9,"A",{href:!0});var hXr=s(ZS);ZKe=r(hXr,"LayoutLMTokenizerFast"),hXr.forEach(t),eZe=r(m9," (LayoutLM model)"),m9.forEach(t),oZe=i(C),bs=n(C,"LI",{});var g9=s(bs);toe=n(g9,"STRONG",{});var pXr=s(toe);rZe=r(pXr,"layoutlmv2"),pXr.forEach(t),tZe=r(g9," \u2014 "),eR=n(g9,"A",{href:!0});var _Xr=s(eR);aZe=r(_Xr,"LayoutLMv2Tokenizer"),_Xr.forEach(t),nZe=r(g9," or "),oR=n(g9,"A",{href:!0});var uXr=s(oR);sZe=r(uXr,"LayoutLMv2TokenizerFast"),uXr.forEach(t),lZe=r(g9," (LayoutLMv2 model)"),g9.forEach(t),iZe=i(C),vs=n(C,"LI",{});var h9=s(vs);aoe=n(h9,"STRONG",{});var bXr=s(aoe);dZe=r(bXr,"layoutxlm"),bXr.forEach(t),cZe=r(h9," \u2014 "),rR=n(h9,"A",{href:!0});var vXr=s(rR);fZe=r(vXr,"LayoutXLMTokenizer"),vXr.forEach(t),mZe=r(h9," or "),tR=n(h9,"A",{href:!0});var FXr=s(tR);gZe=r(FXr,"LayoutXLMTokenizerFast"),FXr.forEach(t),hZe=r(h9," (LayoutXLM model)"),h9.forEach(t),pZe=i(C),Fs=n(C,"LI",{});var p9=s(Fs);noe=n(p9,"STRONG",{});var TXr=s(noe);_Ze=r(TXr,"led"),TXr.forEach(t),uZe=r(p9," \u2014 "),aR=n(p9,"A",{href:!0});var MXr=s(aR);bZe=r(MXr,"LEDTokenizer"),MXr.forEach(t),vZe=r(p9," or "),nR=n(p9,"A",{href:!0});var EXr=s(nR);FZe=r(EXr,"LEDTokenizerFast"),EXr.forEach(t),TZe=r(p9," (LED model)"),p9.forEach(t),MZe=i(C),Ts=n(C,"LI",{});var _9=s(Ts);soe=n(_9,"STRONG",{});var CXr=s(soe);EZe=r(CXr,"longformer"),CXr.forEach(t),CZe=r(_9," \u2014 "),sR=n(_9,"A",{href:!0});var wXr=s(sR);wZe=r(wXr,"LongformerTokenizer"),wXr.forEach(t),AZe=r(_9," or "),lR=n(_9,"A",{href:!0});var AXr=s(lR);yZe=r(AXr,"LongformerTokenizerFast"),AXr.forEach(t),LZe=r(_9," (Longformer model)"),_9.forEach(t),xZe=i(C),nh=n(C,"LI",{});var u4e=s(nh);loe=n(u4e,"STRONG",{});var yXr=s(loe);kZe=r(yXr,"luke"),yXr.forEach(t),SZe=r(u4e," \u2014 "),iR=n(u4e,"A",{href:!0});var LXr=s(iR);RZe=r(LXr,"LukeTokenizer"),LXr.forEach(t),BZe=r(u4e," (LUKE model)"),u4e.forEach(t),PZe=i(C),Ms=n(C,"LI",{});var u9=s(Ms);ioe=n(u9,"STRONG",{});var xXr=s(ioe);$Ze=r(xXr,"lxmert"),xXr.forEach(t),IZe=r(u9," \u2014 "),dR=n(u9,"A",{href:!0});var kXr=s(dR);qZe=r(kXr,"LxmertTokenizer"),kXr.forEach(t),NZe=r(u9," or "),cR=n(u9,"A",{href:!0});var SXr=s(cR);jZe=r(SXr,"LxmertTokenizerFast"),SXr.forEach(t),DZe=r(u9," (LXMERT model)"),u9.forEach(t),GZe=i(C),sh=n(C,"LI",{});var b4e=s(sh);doe=n(b4e,"STRONG",{});var RXr=s(doe);OZe=r(RXr,"m2m_100"),RXr.forEach(t),VZe=r(b4e," \u2014 "),fR=n(b4e,"A",{href:!0});var BXr=s(fR);XZe=r(BXr,"M2M100Tokenizer"),BXr.forEach(t),zZe=r(b4e," (M2M100 model)"),b4e.forEach(t),QZe=i(C),lh=n(C,"LI",{});var v4e=s(lh);coe=n(v4e,"STRONG",{});var PXr=s(coe);WZe=r(PXr,"marian"),PXr.forEach(t),HZe=r(v4e," \u2014 "),mR=n(v4e,"A",{href:!0});var $Xr=s(mR);UZe=r($Xr,"MarianTokenizer"),$Xr.forEach(t),JZe=r(v4e," (Marian model)"),v4e.forEach(t),YZe=i(C),Es=n(C,"LI",{});var b9=s(Es);foe=n(b9,"STRONG",{});var IXr=s(foe);KZe=r(IXr,"mbart"),IXr.forEach(t),ZZe=r(b9," \u2014 "),gR=n(b9,"A",{href:!0});var qXr=s(gR);eeo=r(qXr,"MBartTokenizer"),qXr.forEach(t),oeo=r(b9," or "),hR=n(b9,"A",{href:!0});var NXr=s(hR);reo=r(NXr,"MBartTokenizerFast"),NXr.forEach(t),teo=r(b9," (mBART model)"),b9.forEach(t),aeo=i(C),Cs=n(C,"LI",{});var v9=s(Cs);moe=n(v9,"STRONG",{});var jXr=s(moe);neo=r(jXr,"mbart50"),jXr.forEach(t),seo=r(v9," \u2014 "),pR=n(v9,"A",{href:!0});var DXr=s(pR);leo=r(DXr,"MBart50Tokenizer"),DXr.forEach(t),ieo=r(v9," or "),_R=n(v9,"A",{href:!0});var GXr=s(_R);deo=r(GXr,"MBart50TokenizerFast"),GXr.forEach(t),ceo=r(v9," (mBART-50 model)"),v9.forEach(t),feo=i(C),ws=n(C,"LI",{});var F9=s(ws);goe=n(F9,"STRONG",{});var OXr=s(goe);meo=r(OXr,"megatron-bert"),OXr.forEach(t),geo=r(F9," \u2014 "),uR=n(F9,"A",{href:!0});var VXr=s(uR);heo=r(VXr,"BertTokenizer"),VXr.forEach(t),peo=r(F9," or "),bR=n(F9,"A",{href:!0});var XXr=s(bR);_eo=r(XXr,"BertTokenizerFast"),XXr.forEach(t),ueo=r(F9," (MegatronBert model)"),F9.forEach(t),beo=i(C),ih=n(C,"LI",{});var F4e=s(ih);hoe=n(F4e,"STRONG",{});var zXr=s(hoe);veo=r(zXr,"mluke"),zXr.forEach(t),Feo=r(F4e," \u2014 "),vR=n(F4e,"A",{href:!0});var QXr=s(vR);Teo=r(QXr,"MLukeTokenizer"),QXr.forEach(t),Meo=r(F4e," (mLUKE model)"),F4e.forEach(t),Eeo=i(C),As=n(C,"LI",{});var T9=s(As);poe=n(T9,"STRONG",{});var WXr=s(poe);Ceo=r(WXr,"mobilebert"),WXr.forEach(t),weo=r(T9," \u2014 "),FR=n(T9,"A",{href:!0});var HXr=s(FR);Aeo=r(HXr,"MobileBertTokenizer"),HXr.forEach(t),yeo=r(T9," or "),TR=n(T9,"A",{href:!0});var UXr=s(TR);Leo=r(UXr,"MobileBertTokenizerFast"),UXr.forEach(t),xeo=r(T9," (MobileBERT model)"),T9.forEach(t),keo=i(C),ys=n(C,"LI",{});var M9=s(ys);_oe=n(M9,"STRONG",{});var JXr=s(_oe);Seo=r(JXr,"mpnet"),JXr.forEach(t),Reo=r(M9," \u2014 "),MR=n(M9,"A",{href:!0});var YXr=s(MR);Beo=r(YXr,"MPNetTokenizer"),YXr.forEach(t),Peo=r(M9," or "),ER=n(M9,"A",{href:!0});var KXr=s(ER);$eo=r(KXr,"MPNetTokenizerFast"),KXr.forEach(t),Ieo=r(M9," (MPNet model)"),M9.forEach(t),qeo=i(C),Ls=n(C,"LI",{});var E9=s(Ls);uoe=n(E9,"STRONG",{});var ZXr=s(uoe);Neo=r(ZXr,"mt5"),ZXr.forEach(t),jeo=r(E9," \u2014 "),CR=n(E9,"A",{href:!0});var ezr=s(CR);Deo=r(ezr,"MT5Tokenizer"),ezr.forEach(t),Geo=r(E9," or "),wR=n(E9,"A",{href:!0});var ozr=s(wR);Oeo=r(ozr,"MT5TokenizerFast"),ozr.forEach(t),Veo=r(E9," (mT5 model)"),E9.forEach(t),Xeo=i(C),xs=n(C,"LI",{});var C9=s(xs);boe=n(C9,"STRONG",{});var rzr=s(boe);zeo=r(rzr,"nystromformer"),rzr.forEach(t),Qeo=r(C9," \u2014 "),AR=n(C9,"A",{href:!0});var tzr=s(AR);Weo=r(tzr,"AlbertTokenizer"),tzr.forEach(t),Heo=r(C9," or "),yR=n(C9,"A",{href:!0});var azr=s(yR);Ueo=r(azr,"AlbertTokenizerFast"),azr.forEach(t),Jeo=r(C9," (Nystromformer model)"),C9.forEach(t),Yeo=i(C),ks=n(C,"LI",{});var w9=s(ks);voe=n(w9,"STRONG",{});var nzr=s(voe);Keo=r(nzr,"openai-gpt"),nzr.forEach(t),Zeo=r(w9," \u2014 "),LR=n(w9,"A",{href:!0});var szr=s(LR);eoo=r(szr,"OpenAIGPTTokenizer"),szr.forEach(t),ooo=r(w9," or "),xR=n(w9,"A",{href:!0});var lzr=s(xR);roo=r(lzr,"OpenAIGPTTokenizerFast"),lzr.forEach(t),too=r(w9," (OpenAI GPT model)"),w9.forEach(t),aoo=i(C),Ss=n(C,"LI",{});var A9=s(Ss);Foe=n(A9,"STRONG",{});var izr=s(Foe);noo=r(izr,"pegasus"),izr.forEach(t),soo=r(A9," \u2014 "),kR=n(A9,"A",{href:!0});var dzr=s(kR);loo=r(dzr,"PegasusTokenizer"),dzr.forEach(t),ioo=r(A9," or "),SR=n(A9,"A",{href:!0});var czr=s(SR);doo=r(czr,"PegasusTokenizerFast"),czr.forEach(t),coo=r(A9," (Pegasus model)"),A9.forEach(t),foo=i(C),dh=n(C,"LI",{});var T4e=s(dh);Toe=n(T4e,"STRONG",{});var fzr=s(Toe);moo=r(fzr,"perceiver"),fzr.forEach(t),goo=r(T4e," \u2014 "),RR=n(T4e,"A",{href:!0});var mzr=s(RR);hoo=r(mzr,"PerceiverTokenizer"),mzr.forEach(t),poo=r(T4e," (Perceiver model)"),T4e.forEach(t),_oo=i(C),ch=n(C,"LI",{});var M4e=s(ch);Moe=n(M4e,"STRONG",{});var gzr=s(Moe);uoo=r(gzr,"phobert"),gzr.forEach(t),boo=r(M4e," \u2014 "),BR=n(M4e,"A",{href:!0});var hzr=s(BR);voo=r(hzr,"PhobertTokenizer"),hzr.forEach(t),Foo=r(M4e," (PhoBERT model)"),M4e.forEach(t),Too=i(C),fh=n(C,"LI",{});var E4e=s(fh);Eoe=n(E4e,"STRONG",{});var pzr=s(Eoe);Moo=r(pzr,"plbart"),pzr.forEach(t),Eoo=r(E4e," \u2014 "),PR=n(E4e,"A",{href:!0});var _zr=s(PR);Coo=r(_zr,"PLBartTokenizer"),_zr.forEach(t),woo=r(E4e," (PLBart model)"),E4e.forEach(t),Aoo=i(C),mh=n(C,"LI",{});var C4e=s(mh);Coe=n(C4e,"STRONG",{});var uzr=s(Coe);yoo=r(uzr,"prophetnet"),uzr.forEach(t),Loo=r(C4e," \u2014 "),$R=n(C4e,"A",{href:!0});var bzr=s($R);xoo=r(bzr,"ProphetNetTokenizer"),bzr.forEach(t),koo=r(C4e," (ProphetNet model)"),C4e.forEach(t),Soo=i(C),Rs=n(C,"LI",{});var y9=s(Rs);woe=n(y9,"STRONG",{});var vzr=s(woe);Roo=r(vzr,"qdqbert"),vzr.forEach(t),Boo=r(y9," \u2014 "),IR=n(y9,"A",{href:!0});var Fzr=s(IR);Poo=r(Fzr,"BertTokenizer"),Fzr.forEach(t),$oo=r(y9," or "),qR=n(y9,"A",{href:!0});var Tzr=s(qR);Ioo=r(Tzr,"BertTokenizerFast"),Tzr.forEach(t),qoo=r(y9," (QDQBert model)"),y9.forEach(t),Noo=i(C),gh=n(C,"LI",{});var w4e=s(gh);Aoe=n(w4e,"STRONG",{});var Mzr=s(Aoe);joo=r(Mzr,"rag"),Mzr.forEach(t),Doo=r(w4e," \u2014 "),NR=n(w4e,"A",{href:!0});var Ezr=s(NR);Goo=r(Ezr,"RagTokenizer"),Ezr.forEach(t),Ooo=r(w4e," (RAG model)"),w4e.forEach(t),Voo=i(C),Bs=n(C,"LI",{});var L9=s(Bs);yoe=n(L9,"STRONG",{});var Czr=s(yoe);Xoo=r(Czr,"realm"),Czr.forEach(t),zoo=r(L9," \u2014 "),jR=n(L9,"A",{href:!0});var wzr=s(jR);Qoo=r(wzr,"RealmTokenizer"),wzr.forEach(t),Woo=r(L9," or "),DR=n(L9,"A",{href:!0});var Azr=s(DR);Hoo=r(Azr,"RealmTokenizerFast"),Azr.forEach(t),Uoo=r(L9," (Realm model)"),L9.forEach(t),Joo=i(C),Ps=n(C,"LI",{});var x9=s(Ps);Loe=n(x9,"STRONG",{});var yzr=s(Loe);Yoo=r(yzr,"reformer"),yzr.forEach(t),Koo=r(x9," \u2014 "),GR=n(x9,"A",{href:!0});var Lzr=s(GR);Zoo=r(Lzr,"ReformerTokenizer"),Lzr.forEach(t),ero=r(x9," or "),OR=n(x9,"A",{href:!0});var xzr=s(OR);oro=r(xzr,"ReformerTokenizerFast"),xzr.forEach(t),rro=r(x9," (Reformer model)"),x9.forEach(t),tro=i(C),$s=n(C,"LI",{});var k9=s($s);xoe=n(k9,"STRONG",{});var kzr=s(xoe);aro=r(kzr,"rembert"),kzr.forEach(t),nro=r(k9," \u2014 "),VR=n(k9,"A",{href:!0});var Szr=s(VR);sro=r(Szr,"RemBertTokenizer"),Szr.forEach(t),lro=r(k9," or "),XR=n(k9,"A",{href:!0});var Rzr=s(XR);iro=r(Rzr,"RemBertTokenizerFast"),Rzr.forEach(t),dro=r(k9," (RemBERT model)"),k9.forEach(t),cro=i(C),Is=n(C,"LI",{});var S9=s(Is);koe=n(S9,"STRONG",{});var Bzr=s(koe);fro=r(Bzr,"retribert"),Bzr.forEach(t),mro=r(S9," \u2014 "),zR=n(S9,"A",{href:!0});var Pzr=s(zR);gro=r(Pzr,"RetriBertTokenizer"),Pzr.forEach(t),hro=r(S9," or "),QR=n(S9,"A",{href:!0});var $zr=s(QR);pro=r($zr,"RetriBertTokenizerFast"),$zr.forEach(t),_ro=r(S9," (RetriBERT model)"),S9.forEach(t),uro=i(C),qs=n(C,"LI",{});var R9=s(qs);Soe=n(R9,"STRONG",{});var Izr=s(Soe);bro=r(Izr,"roberta"),Izr.forEach(t),vro=r(R9," \u2014 "),WR=n(R9,"A",{href:!0});var qzr=s(WR);Fro=r(qzr,"RobertaTokenizer"),qzr.forEach(t),Tro=r(R9," or "),HR=n(R9,"A",{href:!0});var Nzr=s(HR);Mro=r(Nzr,"RobertaTokenizerFast"),Nzr.forEach(t),Ero=r(R9," (RoBERTa model)"),R9.forEach(t),Cro=i(C),Ns=n(C,"LI",{});var B9=s(Ns);Roe=n(B9,"STRONG",{});var jzr=s(Roe);wro=r(jzr,"roformer"),jzr.forEach(t),Aro=r(B9," \u2014 "),UR=n(B9,"A",{href:!0});var Dzr=s(UR);yro=r(Dzr,"RoFormerTokenizer"),Dzr.forEach(t),Lro=r(B9," or "),JR=n(B9,"A",{href:!0});var Gzr=s(JR);xro=r(Gzr,"RoFormerTokenizerFast"),Gzr.forEach(t),kro=r(B9," (RoFormer model)"),B9.forEach(t),Sro=i(C),hh=n(C,"LI",{});var A4e=s(hh);Boe=n(A4e,"STRONG",{});var Ozr=s(Boe);Rro=r(Ozr,"speech_to_text"),Ozr.forEach(t),Bro=r(A4e," \u2014 "),YR=n(A4e,"A",{href:!0});var Vzr=s(YR);Pro=r(Vzr,"Speech2TextTokenizer"),Vzr.forEach(t),$ro=r(A4e," (Speech2Text model)"),A4e.forEach(t),Iro=i(C),ph=n(C,"LI",{});var y4e=s(ph);Poe=n(y4e,"STRONG",{});var Xzr=s(Poe);qro=r(Xzr,"speech_to_text_2"),Xzr.forEach(t),Nro=r(y4e," \u2014 "),KR=n(y4e,"A",{href:!0});var zzr=s(KR);jro=r(zzr,"Speech2Text2Tokenizer"),zzr.forEach(t),Dro=r(y4e," (Speech2Text2 model)"),y4e.forEach(t),Gro=i(C),js=n(C,"LI",{});var P9=s(js);$oe=n(P9,"STRONG",{});var Qzr=s($oe);Oro=r(Qzr,"splinter"),Qzr.forEach(t),Vro=r(P9," \u2014 "),ZR=n(P9,"A",{href:!0});var Wzr=s(ZR);Xro=r(Wzr,"SplinterTokenizer"),Wzr.forEach(t),zro=r(P9," or "),eB=n(P9,"A",{href:!0});var Hzr=s(eB);Qro=r(Hzr,"SplinterTokenizerFast"),Hzr.forEach(t),Wro=r(P9," (Splinter model)"),P9.forEach(t),Hro=i(C),Ds=n(C,"LI",{});var $9=s(Ds);Ioe=n($9,"STRONG",{});var Uzr=s(Ioe);Uro=r(Uzr,"squeezebert"),Uzr.forEach(t),Jro=r($9," \u2014 "),oB=n($9,"A",{href:!0});var Jzr=s(oB);Yro=r(Jzr,"SqueezeBertTokenizer"),Jzr.forEach(t),Kro=r($9," or "),rB=n($9,"A",{href:!0});var Yzr=s(rB);Zro=r(Yzr,"SqueezeBertTokenizerFast"),Yzr.forEach(t),eto=r($9," (SqueezeBERT model)"),$9.forEach(t),oto=i(C),Gs=n(C,"LI",{});var I9=s(Gs);qoe=n(I9,"STRONG",{});var Kzr=s(qoe);rto=r(Kzr,"t5"),Kzr.forEach(t),tto=r(I9," \u2014 "),tB=n(I9,"A",{href:!0});var Zzr=s(tB);ato=r(Zzr,"T5Tokenizer"),Zzr.forEach(t),nto=r(I9," or "),aB=n(I9,"A",{href:!0});var eQr=s(aB);sto=r(eQr,"T5TokenizerFast"),eQr.forEach(t),lto=r(I9," (T5 model)"),I9.forEach(t),ito=i(C),_h=n(C,"LI",{});var L4e=s(_h);Noe=n(L4e,"STRONG",{});var oQr=s(Noe);dto=r(oQr,"tapas"),oQr.forEach(t),cto=r(L4e," \u2014 "),nB=n(L4e,"A",{href:!0});var rQr=s(nB);fto=r(rQr,"TapasTokenizer"),rQr.forEach(t),mto=r(L4e," (TAPAS model)"),L4e.forEach(t),gto=i(C),uh=n(C,"LI",{});var x4e=s(uh);joe=n(x4e,"STRONG",{});var tQr=s(joe);hto=r(tQr,"tapex"),tQr.forEach(t),pto=r(x4e," \u2014 "),sB=n(x4e,"A",{href:!0});var aQr=s(sB);_to=r(aQr,"TapexTokenizer"),aQr.forEach(t),uto=r(x4e," (TAPEX model)"),x4e.forEach(t),bto=i(C),bh=n(C,"LI",{});var k4e=s(bh);Doe=n(k4e,"STRONG",{});var nQr=s(Doe);vto=r(nQr,"transfo-xl"),nQr.forEach(t),Fto=r(k4e," \u2014 "),lB=n(k4e,"A",{href:!0});var sQr=s(lB);Tto=r(sQr,"TransfoXLTokenizer"),sQr.forEach(t),Mto=r(k4e," (Transformer-XL model)"),k4e.forEach(t),Eto=i(C),Os=n(C,"LI",{});var q9=s(Os);Goe=n(q9,"STRONG",{});var lQr=s(Goe);Cto=r(lQr,"visual_bert"),lQr.forEach(t),wto=r(q9," \u2014 "),iB=n(q9,"A",{href:!0});var iQr=s(iB);Ato=r(iQr,"BertTokenizer"),iQr.forEach(t),yto=r(q9," or "),dB=n(q9,"A",{href:!0});var dQr=s(dB);Lto=r(dQr,"BertTokenizerFast"),dQr.forEach(t),xto=r(q9," (VisualBert model)"),q9.forEach(t),kto=i(C),vh=n(C,"LI",{});var S4e=s(vh);Ooe=n(S4e,"STRONG",{});var cQr=s(Ooe);Sto=r(cQr,"wav2vec2"),cQr.forEach(t),Rto=r(S4e," \u2014 "),cB=n(S4e,"A",{href:!0});var fQr=s(cB);Bto=r(fQr,"Wav2Vec2CTCTokenizer"),fQr.forEach(t),Pto=r(S4e," (Wav2Vec2 model)"),S4e.forEach(t),$to=i(C),Fh=n(C,"LI",{});var R4e=s(Fh);Voe=n(R4e,"STRONG",{});var mQr=s(Voe);Ito=r(mQr,"wav2vec2_phoneme"),mQr.forEach(t),qto=r(R4e," \u2014 "),fB=n(R4e,"A",{href:!0});var gQr=s(fB);Nto=r(gQr,"Wav2Vec2PhonemeCTCTokenizer"),gQr.forEach(t),jto=r(R4e," (Wav2Vec2Phoneme model)"),R4e.forEach(t),Dto=i(C),Vs=n(C,"LI",{});var N9=s(Vs);Xoe=n(N9,"STRONG",{});var hQr=s(Xoe);Gto=r(hQr,"xglm"),hQr.forEach(t),Oto=r(N9," \u2014 "),mB=n(N9,"A",{href:!0});var pQr=s(mB);Vto=r(pQr,"XGLMTokenizer"),pQr.forEach(t),Xto=r(N9," or "),gB=n(N9,"A",{href:!0});var _Qr=s(gB);zto=r(_Qr,"XGLMTokenizerFast"),_Qr.forEach(t),Qto=r(N9," (XGLM model)"),N9.forEach(t),Wto=i(C),Th=n(C,"LI",{});var B4e=s(Th);zoe=n(B4e,"STRONG",{});var uQr=s(zoe);Hto=r(uQr,"xlm"),uQr.forEach(t),Uto=r(B4e," \u2014 "),hB=n(B4e,"A",{href:!0});var bQr=s(hB);Jto=r(bQr,"XLMTokenizer"),bQr.forEach(t),Yto=r(B4e," (XLM model)"),B4e.forEach(t),Kto=i(C),Mh=n(C,"LI",{});var P4e=s(Mh);Qoe=n(P4e,"STRONG",{});var vQr=s(Qoe);Zto=r(vQr,"xlm-prophetnet"),vQr.forEach(t),eao=r(P4e," \u2014 "),pB=n(P4e,"A",{href:!0});var FQr=s(pB);oao=r(FQr,"XLMProphetNetTokenizer"),FQr.forEach(t),rao=r(P4e," (XLMProphetNet model)"),P4e.forEach(t),tao=i(C),Xs=n(C,"LI",{});var j9=s(Xs);Woe=n(j9,"STRONG",{});var TQr=s(Woe);aao=r(TQr,"xlm-roberta"),TQr.forEach(t),nao=r(j9," \u2014 "),_B=n(j9,"A",{href:!0});var MQr=s(_B);sao=r(MQr,"XLMRobertaTokenizer"),MQr.forEach(t),lao=r(j9," or "),uB=n(j9,"A",{href:!0});var EQr=s(uB);iao=r(EQr,"XLMRobertaTokenizerFast"),EQr.forEach(t),dao=r(j9," (XLM-RoBERTa model)"),j9.forEach(t),cao=i(C),zs=n(C,"LI",{});var D9=s(zs);Hoe=n(D9,"STRONG",{});var CQr=s(Hoe);fao=r(CQr,"xlm-roberta-xl"),CQr.forEach(t),mao=r(D9," \u2014 "),bB=n(D9,"A",{href:!0});var wQr=s(bB);gao=r(wQr,"RobertaTokenizer"),wQr.forEach(t),hao=r(D9," or "),vB=n(D9,"A",{href:!0});var AQr=s(vB);pao=r(AQr,"RobertaTokenizerFast"),AQr.forEach(t),_ao=r(D9," (XLM-RoBERTa-XL model)"),D9.forEach(t),uao=i(C),Qs=n(C,"LI",{});var G9=s(Qs);Uoe=n(G9,"STRONG",{});var yQr=s(Uoe);bao=r(yQr,"xlnet"),yQr.forEach(t),vao=r(G9," \u2014 "),FB=n(G9,"A",{href:!0});var LQr=s(FB);Fao=r(LQr,"XLNetTokenizer"),LQr.forEach(t),Tao=r(G9," or "),TB=n(G9,"A",{href:!0});var xQr=s(TB);Mao=r(xQr,"XLNetTokenizerFast"),xQr.forEach(t),Eao=r(G9," (XLNet model)"),G9.forEach(t),Cao=i(C),Ws=n(C,"LI",{});var O9=s(Ws);Joe=n(O9,"STRONG",{});var kQr=s(Joe);wao=r(kQr,"yoso"),kQr.forEach(t),Aao=r(O9," \u2014 "),MB=n(O9,"A",{href:!0});var SQr=s(MB);yao=r(SQr,"AlbertTokenizer"),SQr.forEach(t),Lao=r(O9," or "),EB=n(O9,"A",{href:!0});var RQr=s(EB);xao=r(RQr,"AlbertTokenizerFast"),RQr.forEach(t),kao=r(O9," (YOSO model)"),O9.forEach(t),C.forEach(t),Sao=i(ha),Yoe=n(ha,"P",{});var BQr=s(Yoe);Rao=r(BQr,"Examples:"),BQr.forEach(t),Bao=i(ha),m(c3.$$.fragment,ha),ha.forEach(t),Pao=i(Ks),Eh=n(Ks,"DIV",{class:!0});var _Ie=s(Eh);m(f3.$$.fragment,_Ie),$ao=i(_Ie),Koe=n(_Ie,"P",{});var PQr=s(Koe);Iao=r(PQr,"Register a new tokenizer in this mapping."),PQr.forEach(t),_Ie.forEach(t),Ks.forEach(t),mPe=i(c),rd=n(c,"H2",{class:!0});var uIe=s(rd);Ch=n(uIe,"A",{id:!0,class:!0,href:!0});var $Qr=s(Ch);Zoe=n($Qr,"SPAN",{});var IQr=s(Zoe);m(m3.$$.fragment,IQr),IQr.forEach(t),$Qr.forEach(t),qao=i(uIe),ere=n(uIe,"SPAN",{});var qQr=s(ere);Nao=r(qQr,"AutoFeatureExtractor"),qQr.forEach(t),uIe.forEach(t),gPe=i(c),Ho=n(c,"DIV",{class:!0});var Zs=s(Ho);m(g3.$$.fragment,Zs),jao=i(Zs),h3=n(Zs,"P",{});var bIe=s(h3);Dao=r(bIe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),CB=n(bIe,"A",{href:!0});var NQr=s(CB);Gao=r(NQr,"AutoFeatureExtractor.from_pretrained()"),NQr.forEach(t),Oao=r(bIe," class method."),bIe.forEach(t),Vao=i(Zs),p3=n(Zs,"P",{});var vIe=s(p3);Xao=r(vIe,"This class cannot be instantiated directly using "),ore=n(vIe,"CODE",{});var jQr=s(ore);zao=r(jQr,"__init__()"),jQr.forEach(t),Qao=r(vIe," (throws an error)."),vIe.forEach(t),Wao=i(Zs),Ie=n(Zs,"DIV",{class:!0});var Nt=s(Ie);m(_3.$$.fragment,Nt),Hao=i(Nt),rre=n(Nt,"P",{});var DQr=s(rre);Uao=r(DQr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),DQr.forEach(t),Jao=i(Nt),Va=n(Nt,"P",{});var H4=s(Va);Yao=r(H4,"The feature extractor class to instantiate is selected based on the "),tre=n(H4,"CODE",{});var GQr=s(tre);Kao=r(GQr,"model_type"),GQr.forEach(t),Zao=r(H4,` property of the config object
(either passed as an argument or loaded from `),are=n(H4,"CODE",{});var OQr=s(are);eno=r(OQr,"pretrained_model_name_or_path"),OQr.forEach(t),ono=r(H4,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),nre=n(H4,"CODE",{});var VQr=s(nre);rno=r(VQr,"pretrained_model_name_or_path"),VQr.forEach(t),tno=r(H4,":"),H4.forEach(t),ano=i(Nt),W=n(Nt,"UL",{});var J=s(W);wh=n(J,"LI",{});var $4e=s(wh);sre=n($4e,"STRONG",{});var XQr=s(sre);nno=r(XQr,"beit"),XQr.forEach(t),sno=r($4e," \u2014 "),wB=n($4e,"A",{href:!0});var zQr=s(wB);lno=r(zQr,"BeitFeatureExtractor"),zQr.forEach(t),ino=r($4e," (BEiT model)"),$4e.forEach(t),dno=i(J),Ah=n(J,"LI",{});var I4e=s(Ah);lre=n(I4e,"STRONG",{});var QQr=s(lre);cno=r(QQr,"clip"),QQr.forEach(t),fno=r(I4e," \u2014 "),AB=n(I4e,"A",{href:!0});var WQr=s(AB);mno=r(WQr,"CLIPFeatureExtractor"),WQr.forEach(t),gno=r(I4e," (CLIP model)"),I4e.forEach(t),hno=i(J),yh=n(J,"LI",{});var q4e=s(yh);ire=n(q4e,"STRONG",{});var HQr=s(ire);pno=r(HQr,"convnext"),HQr.forEach(t),_no=r(q4e," \u2014 "),yB=n(q4e,"A",{href:!0});var UQr=s(yB);uno=r(UQr,"ConvNextFeatureExtractor"),UQr.forEach(t),bno=r(q4e," (ConvNext model)"),q4e.forEach(t),vno=i(J),Lh=n(J,"LI",{});var N4e=s(Lh);dre=n(N4e,"STRONG",{});var JQr=s(dre);Fno=r(JQr,"data2vec-audio"),JQr.forEach(t),Tno=r(N4e," \u2014 "),LB=n(N4e,"A",{href:!0});var YQr=s(LB);Mno=r(YQr,"Wav2Vec2FeatureExtractor"),YQr.forEach(t),Eno=r(N4e," (Data2VecAudio model)"),N4e.forEach(t),Cno=i(J),xh=n(J,"LI",{});var j4e=s(xh);cre=n(j4e,"STRONG",{});var KQr=s(cre);wno=r(KQr,"data2vec-vision"),KQr.forEach(t),Ano=r(j4e," \u2014 "),xB=n(j4e,"A",{href:!0});var ZQr=s(xB);yno=r(ZQr,"BeitFeatureExtractor"),ZQr.forEach(t),Lno=r(j4e," (Data2VecVision model)"),j4e.forEach(t),xno=i(J),kh=n(J,"LI",{});var D4e=s(kh);fre=n(D4e,"STRONG",{});var eWr=s(fre);kno=r(eWr,"deit"),eWr.forEach(t),Sno=r(D4e," \u2014 "),kB=n(D4e,"A",{href:!0});var oWr=s(kB);Rno=r(oWr,"DeiTFeatureExtractor"),oWr.forEach(t),Bno=r(D4e," (DeiT model)"),D4e.forEach(t),Pno=i(J),Sh=n(J,"LI",{});var G4e=s(Sh);mre=n(G4e,"STRONG",{});var rWr=s(mre);$no=r(rWr,"detr"),rWr.forEach(t),Ino=r(G4e," \u2014 "),SB=n(G4e,"A",{href:!0});var tWr=s(SB);qno=r(tWr,"DetrFeatureExtractor"),tWr.forEach(t),Nno=r(G4e," (DETR model)"),G4e.forEach(t),jno=i(J),Rh=n(J,"LI",{});var O4e=s(Rh);gre=n(O4e,"STRONG",{});var aWr=s(gre);Dno=r(aWr,"dpt"),aWr.forEach(t),Gno=r(O4e," \u2014 "),RB=n(O4e,"A",{href:!0});var nWr=s(RB);Ono=r(nWr,"DPTFeatureExtractor"),nWr.forEach(t),Vno=r(O4e," (DPT model)"),O4e.forEach(t),Xno=i(J),Bh=n(J,"LI",{});var V4e=s(Bh);hre=n(V4e,"STRONG",{});var sWr=s(hre);zno=r(sWr,"glpn"),sWr.forEach(t),Qno=r(V4e," \u2014 "),BB=n(V4e,"A",{href:!0});var lWr=s(BB);Wno=r(lWr,"GLPNFeatureExtractor"),lWr.forEach(t),Hno=r(V4e," (GLPN model)"),V4e.forEach(t),Uno=i(J),Ph=n(J,"LI",{});var X4e=s(Ph);pre=n(X4e,"STRONG",{});var iWr=s(pre);Jno=r(iWr,"hubert"),iWr.forEach(t),Yno=r(X4e," \u2014 "),PB=n(X4e,"A",{href:!0});var dWr=s(PB);Kno=r(dWr,"Wav2Vec2FeatureExtractor"),dWr.forEach(t),Zno=r(X4e," (Hubert model)"),X4e.forEach(t),eso=i(J),$h=n(J,"LI",{});var z4e=s($h);_re=n(z4e,"STRONG",{});var cWr=s(_re);oso=r(cWr,"imagegpt"),cWr.forEach(t),rso=r(z4e," \u2014 "),$B=n(z4e,"A",{href:!0});var fWr=s($B);tso=r(fWr,"ImageGPTFeatureExtractor"),fWr.forEach(t),aso=r(z4e," (ImageGPT model)"),z4e.forEach(t),nso=i(J),Ih=n(J,"LI",{});var Q4e=s(Ih);ure=n(Q4e,"STRONG",{});var mWr=s(ure);sso=r(mWr,"layoutlmv2"),mWr.forEach(t),lso=r(Q4e," \u2014 "),IB=n(Q4e,"A",{href:!0});var gWr=s(IB);iso=r(gWr,"LayoutLMv2FeatureExtractor"),gWr.forEach(t),dso=r(Q4e," (LayoutLMv2 model)"),Q4e.forEach(t),cso=i(J),qh=n(J,"LI",{});var W4e=s(qh);bre=n(W4e,"STRONG",{});var hWr=s(bre);fso=r(hWr,"maskformer"),hWr.forEach(t),mso=r(W4e," \u2014 "),qB=n(W4e,"A",{href:!0});var pWr=s(qB);gso=r(pWr,"MaskFormerFeatureExtractor"),pWr.forEach(t),hso=r(W4e," (MaskFormer model)"),W4e.forEach(t),pso=i(J),Nh=n(J,"LI",{});var H4e=s(Nh);vre=n(H4e,"STRONG",{});var _Wr=s(vre);_so=r(_Wr,"perceiver"),_Wr.forEach(t),uso=r(H4e," \u2014 "),NB=n(H4e,"A",{href:!0});var uWr=s(NB);bso=r(uWr,"PerceiverFeatureExtractor"),uWr.forEach(t),vso=r(H4e," (Perceiver model)"),H4e.forEach(t),Fso=i(J),jh=n(J,"LI",{});var U4e=s(jh);Fre=n(U4e,"STRONG",{});var bWr=s(Fre);Tso=r(bWr,"poolformer"),bWr.forEach(t),Mso=r(U4e," \u2014 "),jB=n(U4e,"A",{href:!0});var vWr=s(jB);Eso=r(vWr,"PoolFormerFeatureExtractor"),vWr.forEach(t),Cso=r(U4e," (PoolFormer model)"),U4e.forEach(t),wso=i(J),Dh=n(J,"LI",{});var J4e=s(Dh);Tre=n(J4e,"STRONG",{});var FWr=s(Tre);Aso=r(FWr,"regnet"),FWr.forEach(t),yso=r(J4e," \u2014 "),DB=n(J4e,"A",{href:!0});var TWr=s(DB);Lso=r(TWr,"ConvNextFeatureExtractor"),TWr.forEach(t),xso=r(J4e," (RegNet model)"),J4e.forEach(t),kso=i(J),Gh=n(J,"LI",{});var Y4e=s(Gh);Mre=n(Y4e,"STRONG",{});var MWr=s(Mre);Sso=r(MWr,"resnet"),MWr.forEach(t),Rso=r(Y4e," \u2014 "),GB=n(Y4e,"A",{href:!0});var EWr=s(GB);Bso=r(EWr,"ConvNextFeatureExtractor"),EWr.forEach(t),Pso=r(Y4e," (ResNet model)"),Y4e.forEach(t),$so=i(J),Oh=n(J,"LI",{});var K4e=s(Oh);Ere=n(K4e,"STRONG",{});var CWr=s(Ere);Iso=r(CWr,"segformer"),CWr.forEach(t),qso=r(K4e," \u2014 "),OB=n(K4e,"A",{href:!0});var wWr=s(OB);Nso=r(wWr,"SegformerFeatureExtractor"),wWr.forEach(t),jso=r(K4e," (SegFormer model)"),K4e.forEach(t),Dso=i(J),Vh=n(J,"LI",{});var Z4e=s(Vh);Cre=n(Z4e,"STRONG",{});var AWr=s(Cre);Gso=r(AWr,"speech_to_text"),AWr.forEach(t),Oso=r(Z4e," \u2014 "),VB=n(Z4e,"A",{href:!0});var yWr=s(VB);Vso=r(yWr,"Speech2TextFeatureExtractor"),yWr.forEach(t),Xso=r(Z4e," (Speech2Text model)"),Z4e.forEach(t),zso=i(J),Xh=n(J,"LI",{});var eEe=s(Xh);wre=n(eEe,"STRONG",{});var LWr=s(wre);Qso=r(LWr,"swin"),LWr.forEach(t),Wso=r(eEe," \u2014 "),XB=n(eEe,"A",{href:!0});var xWr=s(XB);Hso=r(xWr,"ViTFeatureExtractor"),xWr.forEach(t),Uso=r(eEe," (Swin model)"),eEe.forEach(t),Jso=i(J),zh=n(J,"LI",{});var oEe=s(zh);Are=n(oEe,"STRONG",{});var kWr=s(Are);Yso=r(kWr,"van"),kWr.forEach(t),Kso=r(oEe," \u2014 "),zB=n(oEe,"A",{href:!0});var SWr=s(zB);Zso=r(SWr,"ConvNextFeatureExtractor"),SWr.forEach(t),elo=r(oEe," (VAN model)"),oEe.forEach(t),olo=i(J),Qh=n(J,"LI",{});var rEe=s(Qh);yre=n(rEe,"STRONG",{});var RWr=s(yre);rlo=r(RWr,"vit"),RWr.forEach(t),tlo=r(rEe," \u2014 "),QB=n(rEe,"A",{href:!0});var BWr=s(QB);alo=r(BWr,"ViTFeatureExtractor"),BWr.forEach(t),nlo=r(rEe," (ViT model)"),rEe.forEach(t),slo=i(J),Wh=n(J,"LI",{});var tEe=s(Wh);Lre=n(tEe,"STRONG",{});var PWr=s(Lre);llo=r(PWr,"vit_mae"),PWr.forEach(t),ilo=r(tEe," \u2014 "),WB=n(tEe,"A",{href:!0});var $Wr=s(WB);dlo=r($Wr,"ViTFeatureExtractor"),$Wr.forEach(t),clo=r(tEe," (ViTMAE model)"),tEe.forEach(t),flo=i(J),Hh=n(J,"LI",{});var aEe=s(Hh);xre=n(aEe,"STRONG",{});var IWr=s(xre);mlo=r(IWr,"wav2vec2"),IWr.forEach(t),glo=r(aEe," \u2014 "),HB=n(aEe,"A",{href:!0});var qWr=s(HB);hlo=r(qWr,"Wav2Vec2FeatureExtractor"),qWr.forEach(t),plo=r(aEe," (Wav2Vec2 model)"),aEe.forEach(t),J.forEach(t),_lo=i(Nt),m(Uh.$$.fragment,Nt),ulo=i(Nt),kre=n(Nt,"P",{});var NWr=s(kre);blo=r(NWr,"Examples:"),NWr.forEach(t),vlo=i(Nt),m(u3.$$.fragment,Nt),Nt.forEach(t),Flo=i(Zs),Jh=n(Zs,"DIV",{class:!0});var FIe=s(Jh);m(b3.$$.fragment,FIe),Tlo=i(FIe),Sre=n(FIe,"P",{});var jWr=s(Sre);Mlo=r(jWr,"Register a new feature extractor for this class."),jWr.forEach(t),FIe.forEach(t),Zs.forEach(t),hPe=i(c),td=n(c,"H2",{class:!0});var TIe=s(td);Yh=n(TIe,"A",{id:!0,class:!0,href:!0});var DWr=s(Yh);Rre=n(DWr,"SPAN",{});var GWr=s(Rre);m(v3.$$.fragment,GWr),GWr.forEach(t),DWr.forEach(t),Elo=i(TIe),Bre=n(TIe,"SPAN",{});var OWr=s(Bre);Clo=r(OWr,"AutoProcessor"),OWr.forEach(t),TIe.forEach(t),pPe=i(c),Uo=n(c,"DIV",{class:!0});var el=s(Uo);m(F3.$$.fragment,el),wlo=i(el),T3=n(el,"P",{});var MIe=s(T3);Alo=r(MIe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),UB=n(MIe,"A",{href:!0});var VWr=s(UB);ylo=r(VWr,"AutoProcessor.from_pretrained()"),VWr.forEach(t),Llo=r(MIe," class method."),MIe.forEach(t),xlo=i(el),M3=n(el,"P",{});var EIe=s(M3);klo=r(EIe,"This class cannot be instantiated directly using "),Pre=n(EIe,"CODE",{});var XWr=s(Pre);Slo=r(XWr,"__init__()"),XWr.forEach(t),Rlo=r(EIe," (throws an error)."),EIe.forEach(t),Blo=i(el),qe=n(el,"DIV",{class:!0});var jt=s(qe);m(E3.$$.fragment,jt),Plo=i(jt),$re=n(jt,"P",{});var zWr=s($re);$lo=r(zWr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),zWr.forEach(t),Ilo=i(jt),ad=n(jt,"P",{});var uJ=s(ad);qlo=r(uJ,"The processor class to instantiate is selected based on the "),Ire=n(uJ,"CODE",{});var QWr=s(Ire);Nlo=r(QWr,"model_type"),QWr.forEach(t),jlo=r(uJ,` property of the config object (either
passed as an argument or loaded from `),qre=n(uJ,"CODE",{});var WWr=s(qre);Dlo=r(WWr,"pretrained_model_name_or_path"),WWr.forEach(t),Glo=r(uJ," if possible):"),uJ.forEach(t),Olo=i(jt),de=n(jt,"UL",{});var fe=s(de);Kh=n(fe,"LI",{});var nEe=s(Kh);Nre=n(nEe,"STRONG",{});var HWr=s(Nre);Vlo=r(HWr,"clip"),HWr.forEach(t),Xlo=r(nEe," \u2014 "),JB=n(nEe,"A",{href:!0});var UWr=s(JB);zlo=r(UWr,"CLIPProcessor"),UWr.forEach(t),Qlo=r(nEe," (CLIP model)"),nEe.forEach(t),Wlo=i(fe),Zh=n(fe,"LI",{});var sEe=s(Zh);jre=n(sEe,"STRONG",{});var JWr=s(jre);Hlo=r(JWr,"layoutlmv2"),JWr.forEach(t),Ulo=r(sEe," \u2014 "),YB=n(sEe,"A",{href:!0});var YWr=s(YB);Jlo=r(YWr,"LayoutLMv2Processor"),YWr.forEach(t),Ylo=r(sEe," (LayoutLMv2 model)"),sEe.forEach(t),Klo=i(fe),ep=n(fe,"LI",{});var lEe=s(ep);Dre=n(lEe,"STRONG",{});var KWr=s(Dre);Zlo=r(KWr,"layoutxlm"),KWr.forEach(t),eio=r(lEe," \u2014 "),KB=n(lEe,"A",{href:!0});var ZWr=s(KB);oio=r(ZWr,"LayoutXLMProcessor"),ZWr.forEach(t),rio=r(lEe," (LayoutXLM model)"),lEe.forEach(t),tio=i(fe),op=n(fe,"LI",{});var iEe=s(op);Gre=n(iEe,"STRONG",{});var eHr=s(Gre);aio=r(eHr,"sew"),eHr.forEach(t),nio=r(iEe," \u2014 "),ZB=n(iEe,"A",{href:!0});var oHr=s(ZB);sio=r(oHr,"Wav2Vec2Processor"),oHr.forEach(t),lio=r(iEe," (SEW model)"),iEe.forEach(t),iio=i(fe),rp=n(fe,"LI",{});var dEe=s(rp);Ore=n(dEe,"STRONG",{});var rHr=s(Ore);dio=r(rHr,"sew-d"),rHr.forEach(t),cio=r(dEe," \u2014 "),eP=n(dEe,"A",{href:!0});var tHr=s(eP);fio=r(tHr,"Wav2Vec2Processor"),tHr.forEach(t),mio=r(dEe," (SEW-D model)"),dEe.forEach(t),gio=i(fe),tp=n(fe,"LI",{});var cEe=s(tp);Vre=n(cEe,"STRONG",{});var aHr=s(Vre);hio=r(aHr,"speech_to_text"),aHr.forEach(t),pio=r(cEe," \u2014 "),oP=n(cEe,"A",{href:!0});var nHr=s(oP);_io=r(nHr,"Speech2TextProcessor"),nHr.forEach(t),uio=r(cEe," (Speech2Text model)"),cEe.forEach(t),bio=i(fe),ap=n(fe,"LI",{});var fEe=s(ap);Xre=n(fEe,"STRONG",{});var sHr=s(Xre);vio=r(sHr,"speech_to_text_2"),sHr.forEach(t),Fio=r(fEe," \u2014 "),rP=n(fEe,"A",{href:!0});var lHr=s(rP);Tio=r(lHr,"Speech2Text2Processor"),lHr.forEach(t),Mio=r(fEe," (Speech2Text2 model)"),fEe.forEach(t),Eio=i(fe),np=n(fe,"LI",{});var mEe=s(np);zre=n(mEe,"STRONG",{});var iHr=s(zre);Cio=r(iHr,"trocr"),iHr.forEach(t),wio=r(mEe," \u2014 "),tP=n(mEe,"A",{href:!0});var dHr=s(tP);Aio=r(dHr,"TrOCRProcessor"),dHr.forEach(t),yio=r(mEe," (TrOCR model)"),mEe.forEach(t),Lio=i(fe),sp=n(fe,"LI",{});var gEe=s(sp);Qre=n(gEe,"STRONG",{});var cHr=s(Qre);xio=r(cHr,"unispeech"),cHr.forEach(t),kio=r(gEe," \u2014 "),aP=n(gEe,"A",{href:!0});var fHr=s(aP);Sio=r(fHr,"Wav2Vec2Processor"),fHr.forEach(t),Rio=r(gEe," (UniSpeech model)"),gEe.forEach(t),Bio=i(fe),lp=n(fe,"LI",{});var hEe=s(lp);Wre=n(hEe,"STRONG",{});var mHr=s(Wre);Pio=r(mHr,"unispeech-sat"),mHr.forEach(t),$io=r(hEe," \u2014 "),nP=n(hEe,"A",{href:!0});var gHr=s(nP);Iio=r(gHr,"Wav2Vec2Processor"),gHr.forEach(t),qio=r(hEe," (UniSpeechSat model)"),hEe.forEach(t),Nio=i(fe),ip=n(fe,"LI",{});var pEe=s(ip);Hre=n(pEe,"STRONG",{});var hHr=s(Hre);jio=r(hHr,"vilt"),hHr.forEach(t),Dio=r(pEe," \u2014 "),sP=n(pEe,"A",{href:!0});var pHr=s(sP);Gio=r(pHr,"ViltProcessor"),pHr.forEach(t),Oio=r(pEe," (ViLT model)"),pEe.forEach(t),Vio=i(fe),dp=n(fe,"LI",{});var _Ee=s(dp);Ure=n(_Ee,"STRONG",{});var _Hr=s(Ure);Xio=r(_Hr,"vision-text-dual-encoder"),_Hr.forEach(t),zio=r(_Ee," \u2014 "),lP=n(_Ee,"A",{href:!0});var uHr=s(lP);Qio=r(uHr,"VisionTextDualEncoderProcessor"),uHr.forEach(t),Wio=r(_Ee," (VisionTextDualEncoder model)"),_Ee.forEach(t),Hio=i(fe),cp=n(fe,"LI",{});var uEe=s(cp);Jre=n(uEe,"STRONG",{});var bHr=s(Jre);Uio=r(bHr,"wav2vec2"),bHr.forEach(t),Jio=r(uEe," \u2014 "),iP=n(uEe,"A",{href:!0});var vHr=s(iP);Yio=r(vHr,"Wav2Vec2Processor"),vHr.forEach(t),Kio=r(uEe," (Wav2Vec2 model)"),uEe.forEach(t),Zio=i(fe),fp=n(fe,"LI",{});var bEe=s(fp);Yre=n(bEe,"STRONG",{});var FHr=s(Yre);edo=r(FHr,"wavlm"),FHr.forEach(t),odo=r(bEe," \u2014 "),dP=n(bEe,"A",{href:!0});var THr=s(dP);rdo=r(THr,"Wav2Vec2Processor"),THr.forEach(t),tdo=r(bEe," (WavLM model)"),bEe.forEach(t),fe.forEach(t),ado=i(jt),m(mp.$$.fragment,jt),ndo=i(jt),Kre=n(jt,"P",{});var MHr=s(Kre);sdo=r(MHr,"Examples:"),MHr.forEach(t),ldo=i(jt),m(C3.$$.fragment,jt),jt.forEach(t),ido=i(el),gp=n(el,"DIV",{class:!0});var CIe=s(gp);m(w3.$$.fragment,CIe),ddo=i(CIe),Zre=n(CIe,"P",{});var EHr=s(Zre);cdo=r(EHr,"Register a new processor for this class."),EHr.forEach(t),CIe.forEach(t),el.forEach(t),_Pe=i(c),nd=n(c,"H2",{class:!0});var wIe=s(nd);hp=n(wIe,"A",{id:!0,class:!0,href:!0});var CHr=s(hp);ete=n(CHr,"SPAN",{});var wHr=s(ete);m(A3.$$.fragment,wHr),wHr.forEach(t),CHr.forEach(t),fdo=i(wIe),ote=n(wIe,"SPAN",{});var AHr=s(ote);mdo=r(AHr,"AutoModel"),AHr.forEach(t),wIe.forEach(t),uPe=i(c),Jo=n(c,"DIV",{class:!0});var ol=s(Jo);m(y3.$$.fragment,ol),gdo=i(ol),sd=n(ol,"P",{});var bJ=s(sd);hdo=r(bJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),cP=n(bJ,"A",{href:!0});var yHr=s(cP);pdo=r(yHr,"from_pretrained()"),yHr.forEach(t),_do=r(bJ," class method or the "),fP=n(bJ,"A",{href:!0});var LHr=s(fP);udo=r(LHr,"from_config()"),LHr.forEach(t),bdo=r(bJ,` class
method.`),bJ.forEach(t),vdo=i(ol),L3=n(ol,"P",{});var AIe=s(L3);Fdo=r(AIe,"This class cannot be instantiated directly using "),rte=n(AIe,"CODE",{});var xHr=s(rte);Tdo=r(xHr,"__init__()"),xHr.forEach(t),Mdo=r(AIe," (throws an error)."),AIe.forEach(t),Edo=i(ol),Xr=n(ol,"DIV",{class:!0});var rl=s(Xr);m(x3.$$.fragment,rl),Cdo=i(rl),tte=n(rl,"P",{});var kHr=s(tte);wdo=r(kHr,"Instantiates one of the base model classes of the library from a configuration."),kHr.forEach(t),Ado=i(rl),ld=n(rl,"P",{});var vJ=s(ld);ydo=r(vJ,`Note:
Loading a model from its configuration file does `),ate=n(vJ,"STRONG",{});var SHr=s(ate);Ldo=r(SHr,"not"),SHr.forEach(t),xdo=r(vJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),mP=n(vJ,"A",{href:!0});var RHr=s(mP);kdo=r(RHr,"from_pretrained()"),RHr.forEach(t),Sdo=r(vJ," to load the model weights."),vJ.forEach(t),Rdo=i(rl),nte=n(rl,"P",{});var BHr=s(nte);Bdo=r(BHr,"Examples:"),BHr.forEach(t),Pdo=i(rl),m(k3.$$.fragment,rl),rl.forEach(t),$do=i(ol),Ne=n(ol,"DIV",{class:!0});var Dt=s(Ne);m(S3.$$.fragment,Dt),Ido=i(Dt),ste=n(Dt,"P",{});var PHr=s(ste);qdo=r(PHr,"Instantiate one of the base model classes of the library from a pretrained model."),PHr.forEach(t),Ndo=i(Dt),Xa=n(Dt,"P",{});var U4=s(Xa);jdo=r(U4,"The model class to instantiate is selected based on the "),lte=n(U4,"CODE",{});var $Hr=s(lte);Ddo=r($Hr,"model_type"),$Hr.forEach(t),Gdo=r(U4,` property of the config object (either
passed as an argument or loaded from `),ite=n(U4,"CODE",{});var IHr=s(ite);Odo=r(IHr,"pretrained_model_name_or_path"),IHr.forEach(t),Vdo=r(U4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dte=n(U4,"CODE",{});var qHr=s(dte);Xdo=r(qHr,"pretrained_model_name_or_path"),qHr.forEach(t),zdo=r(U4,":"),U4.forEach(t),Qdo=i(Dt),T=n(Dt,"UL",{});var M=s(T);pp=n(M,"LI",{});var vEe=s(pp);cte=n(vEe,"STRONG",{});var NHr=s(cte);Wdo=r(NHr,"albert"),NHr.forEach(t),Hdo=r(vEe," \u2014 "),gP=n(vEe,"A",{href:!0});var jHr=s(gP);Udo=r(jHr,"AlbertModel"),jHr.forEach(t),Jdo=r(vEe," (ALBERT model)"),vEe.forEach(t),Ydo=i(M),_p=n(M,"LI",{});var FEe=s(_p);fte=n(FEe,"STRONG",{});var DHr=s(fte);Kdo=r(DHr,"bart"),DHr.forEach(t),Zdo=r(FEe," \u2014 "),hP=n(FEe,"A",{href:!0});var GHr=s(hP);eco=r(GHr,"BartModel"),GHr.forEach(t),oco=r(FEe," (BART model)"),FEe.forEach(t),rco=i(M),up=n(M,"LI",{});var TEe=s(up);mte=n(TEe,"STRONG",{});var OHr=s(mte);tco=r(OHr,"beit"),OHr.forEach(t),aco=r(TEe," \u2014 "),pP=n(TEe,"A",{href:!0});var VHr=s(pP);nco=r(VHr,"BeitModel"),VHr.forEach(t),sco=r(TEe," (BEiT model)"),TEe.forEach(t),lco=i(M),bp=n(M,"LI",{});var MEe=s(bp);gte=n(MEe,"STRONG",{});var XHr=s(gte);ico=r(XHr,"bert"),XHr.forEach(t),dco=r(MEe," \u2014 "),_P=n(MEe,"A",{href:!0});var zHr=s(_P);cco=r(zHr,"BertModel"),zHr.forEach(t),fco=r(MEe," (BERT model)"),MEe.forEach(t),mco=i(M),vp=n(M,"LI",{});var EEe=s(vp);hte=n(EEe,"STRONG",{});var QHr=s(hte);gco=r(QHr,"bert-generation"),QHr.forEach(t),hco=r(EEe," \u2014 "),uP=n(EEe,"A",{href:!0});var WHr=s(uP);pco=r(WHr,"BertGenerationEncoder"),WHr.forEach(t),_co=r(EEe," (Bert Generation model)"),EEe.forEach(t),uco=i(M),Fp=n(M,"LI",{});var CEe=s(Fp);pte=n(CEe,"STRONG",{});var HHr=s(pte);bco=r(HHr,"big_bird"),HHr.forEach(t),vco=r(CEe," \u2014 "),bP=n(CEe,"A",{href:!0});var UHr=s(bP);Fco=r(UHr,"BigBirdModel"),UHr.forEach(t),Tco=r(CEe," (BigBird model)"),CEe.forEach(t),Mco=i(M),Tp=n(M,"LI",{});var wEe=s(Tp);_te=n(wEe,"STRONG",{});var JHr=s(_te);Eco=r(JHr,"bigbird_pegasus"),JHr.forEach(t),Cco=r(wEe," \u2014 "),vP=n(wEe,"A",{href:!0});var YHr=s(vP);wco=r(YHr,"BigBirdPegasusModel"),YHr.forEach(t),Aco=r(wEe," (BigBirdPegasus model)"),wEe.forEach(t),yco=i(M),Mp=n(M,"LI",{});var AEe=s(Mp);ute=n(AEe,"STRONG",{});var KHr=s(ute);Lco=r(KHr,"blenderbot"),KHr.forEach(t),xco=r(AEe," \u2014 "),FP=n(AEe,"A",{href:!0});var ZHr=s(FP);kco=r(ZHr,"BlenderbotModel"),ZHr.forEach(t),Sco=r(AEe," (Blenderbot model)"),AEe.forEach(t),Rco=i(M),Ep=n(M,"LI",{});var yEe=s(Ep);bte=n(yEe,"STRONG",{});var eUr=s(bte);Bco=r(eUr,"blenderbot-small"),eUr.forEach(t),Pco=r(yEe," \u2014 "),TP=n(yEe,"A",{href:!0});var oUr=s(TP);$co=r(oUr,"BlenderbotSmallModel"),oUr.forEach(t),Ico=r(yEe," (BlenderbotSmall model)"),yEe.forEach(t),qco=i(M),Cp=n(M,"LI",{});var LEe=s(Cp);vte=n(LEe,"STRONG",{});var rUr=s(vte);Nco=r(rUr,"camembert"),rUr.forEach(t),jco=r(LEe," \u2014 "),MP=n(LEe,"A",{href:!0});var tUr=s(MP);Dco=r(tUr,"CamembertModel"),tUr.forEach(t),Gco=r(LEe," (CamemBERT model)"),LEe.forEach(t),Oco=i(M),wp=n(M,"LI",{});var xEe=s(wp);Fte=n(xEe,"STRONG",{});var aUr=s(Fte);Vco=r(aUr,"canine"),aUr.forEach(t),Xco=r(xEe," \u2014 "),EP=n(xEe,"A",{href:!0});var nUr=s(EP);zco=r(nUr,"CanineModel"),nUr.forEach(t),Qco=r(xEe," (Canine model)"),xEe.forEach(t),Wco=i(M),Ap=n(M,"LI",{});var kEe=s(Ap);Tte=n(kEe,"STRONG",{});var sUr=s(Tte);Hco=r(sUr,"clip"),sUr.forEach(t),Uco=r(kEe," \u2014 "),CP=n(kEe,"A",{href:!0});var lUr=s(CP);Jco=r(lUr,"CLIPModel"),lUr.forEach(t),Yco=r(kEe," (CLIP model)"),kEe.forEach(t),Kco=i(M),yp=n(M,"LI",{});var SEe=s(yp);Mte=n(SEe,"STRONG",{});var iUr=s(Mte);Zco=r(iUr,"convbert"),iUr.forEach(t),efo=r(SEe," \u2014 "),wP=n(SEe,"A",{href:!0});var dUr=s(wP);ofo=r(dUr,"ConvBertModel"),dUr.forEach(t),rfo=r(SEe," (ConvBERT model)"),SEe.forEach(t),tfo=i(M),Lp=n(M,"LI",{});var REe=s(Lp);Ete=n(REe,"STRONG",{});var cUr=s(Ete);afo=r(cUr,"convnext"),cUr.forEach(t),nfo=r(REe," \u2014 "),AP=n(REe,"A",{href:!0});var fUr=s(AP);sfo=r(fUr,"ConvNextModel"),fUr.forEach(t),lfo=r(REe," (ConvNext model)"),REe.forEach(t),ifo=i(M),xp=n(M,"LI",{});var BEe=s(xp);Cte=n(BEe,"STRONG",{});var mUr=s(Cte);dfo=r(mUr,"ctrl"),mUr.forEach(t),cfo=r(BEe," \u2014 "),yP=n(BEe,"A",{href:!0});var gUr=s(yP);ffo=r(gUr,"CTRLModel"),gUr.forEach(t),mfo=r(BEe," (CTRL model)"),BEe.forEach(t),gfo=i(M),kp=n(M,"LI",{});var PEe=s(kp);wte=n(PEe,"STRONG",{});var hUr=s(wte);hfo=r(hUr,"data2vec-audio"),hUr.forEach(t),pfo=r(PEe," \u2014 "),LP=n(PEe,"A",{href:!0});var pUr=s(LP);_fo=r(pUr,"Data2VecAudioModel"),pUr.forEach(t),ufo=r(PEe," (Data2VecAudio model)"),PEe.forEach(t),bfo=i(M),Sp=n(M,"LI",{});var $Ee=s(Sp);Ate=n($Ee,"STRONG",{});var _Ur=s(Ate);vfo=r(_Ur,"data2vec-text"),_Ur.forEach(t),Ffo=r($Ee," \u2014 "),xP=n($Ee,"A",{href:!0});var uUr=s(xP);Tfo=r(uUr,"Data2VecTextModel"),uUr.forEach(t),Mfo=r($Ee," (Data2VecText model)"),$Ee.forEach(t),Efo=i(M),Rp=n(M,"LI",{});var IEe=s(Rp);yte=n(IEe,"STRONG",{});var bUr=s(yte);Cfo=r(bUr,"data2vec-vision"),bUr.forEach(t),wfo=r(IEe," \u2014 "),kP=n(IEe,"A",{href:!0});var vUr=s(kP);Afo=r(vUr,"Data2VecVisionModel"),vUr.forEach(t),yfo=r(IEe," (Data2VecVision model)"),IEe.forEach(t),Lfo=i(M),Bp=n(M,"LI",{});var qEe=s(Bp);Lte=n(qEe,"STRONG",{});var FUr=s(Lte);xfo=r(FUr,"deberta"),FUr.forEach(t),kfo=r(qEe," \u2014 "),SP=n(qEe,"A",{href:!0});var TUr=s(SP);Sfo=r(TUr,"DebertaModel"),TUr.forEach(t),Rfo=r(qEe," (DeBERTa model)"),qEe.forEach(t),Bfo=i(M),Pp=n(M,"LI",{});var NEe=s(Pp);xte=n(NEe,"STRONG",{});var MUr=s(xte);Pfo=r(MUr,"deberta-v2"),MUr.forEach(t),$fo=r(NEe," \u2014 "),RP=n(NEe,"A",{href:!0});var EUr=s(RP);Ifo=r(EUr,"DebertaV2Model"),EUr.forEach(t),qfo=r(NEe," (DeBERTa-v2 model)"),NEe.forEach(t),Nfo=i(M),$p=n(M,"LI",{});var jEe=s($p);kte=n(jEe,"STRONG",{});var CUr=s(kte);jfo=r(CUr,"decision_transformer"),CUr.forEach(t),Dfo=r(jEe," \u2014 "),BP=n(jEe,"A",{href:!0});var wUr=s(BP);Gfo=r(wUr,"DecisionTransformerModel"),wUr.forEach(t),Ofo=r(jEe," (Decision Transformer model)"),jEe.forEach(t),Vfo=i(M),Ip=n(M,"LI",{});var DEe=s(Ip);Ste=n(DEe,"STRONG",{});var AUr=s(Ste);Xfo=r(AUr,"deit"),AUr.forEach(t),zfo=r(DEe," \u2014 "),PP=n(DEe,"A",{href:!0});var yUr=s(PP);Qfo=r(yUr,"DeiTModel"),yUr.forEach(t),Wfo=r(DEe," (DeiT model)"),DEe.forEach(t),Hfo=i(M),qp=n(M,"LI",{});var GEe=s(qp);Rte=n(GEe,"STRONG",{});var LUr=s(Rte);Ufo=r(LUr,"detr"),LUr.forEach(t),Jfo=r(GEe," \u2014 "),$P=n(GEe,"A",{href:!0});var xUr=s($P);Yfo=r(xUr,"DetrModel"),xUr.forEach(t),Kfo=r(GEe," (DETR model)"),GEe.forEach(t),Zfo=i(M),Np=n(M,"LI",{});var OEe=s(Np);Bte=n(OEe,"STRONG",{});var kUr=s(Bte);emo=r(kUr,"distilbert"),kUr.forEach(t),omo=r(OEe," \u2014 "),IP=n(OEe,"A",{href:!0});var SUr=s(IP);rmo=r(SUr,"DistilBertModel"),SUr.forEach(t),tmo=r(OEe," (DistilBERT model)"),OEe.forEach(t),amo=i(M),jp=n(M,"LI",{});var VEe=s(jp);Pte=n(VEe,"STRONG",{});var RUr=s(Pte);nmo=r(RUr,"dpr"),RUr.forEach(t),smo=r(VEe," \u2014 "),qP=n(VEe,"A",{href:!0});var BUr=s(qP);lmo=r(BUr,"DPRQuestionEncoder"),BUr.forEach(t),imo=r(VEe," (DPR model)"),VEe.forEach(t),dmo=i(M),Dp=n(M,"LI",{});var XEe=s(Dp);$te=n(XEe,"STRONG",{});var PUr=s($te);cmo=r(PUr,"dpt"),PUr.forEach(t),fmo=r(XEe," \u2014 "),NP=n(XEe,"A",{href:!0});var $Ur=s(NP);mmo=r($Ur,"DPTModel"),$Ur.forEach(t),gmo=r(XEe," (DPT model)"),XEe.forEach(t),hmo=i(M),Gp=n(M,"LI",{});var zEe=s(Gp);Ite=n(zEe,"STRONG",{});var IUr=s(Ite);pmo=r(IUr,"electra"),IUr.forEach(t),_mo=r(zEe," \u2014 "),jP=n(zEe,"A",{href:!0});var qUr=s(jP);umo=r(qUr,"ElectraModel"),qUr.forEach(t),bmo=r(zEe," (ELECTRA model)"),zEe.forEach(t),vmo=i(M),Op=n(M,"LI",{});var QEe=s(Op);qte=n(QEe,"STRONG",{});var NUr=s(qte);Fmo=r(NUr,"flaubert"),NUr.forEach(t),Tmo=r(QEe," \u2014 "),DP=n(QEe,"A",{href:!0});var jUr=s(DP);Mmo=r(jUr,"FlaubertModel"),jUr.forEach(t),Emo=r(QEe," (FlauBERT model)"),QEe.forEach(t),Cmo=i(M),Vp=n(M,"LI",{});var WEe=s(Vp);Nte=n(WEe,"STRONG",{});var DUr=s(Nte);wmo=r(DUr,"fnet"),DUr.forEach(t),Amo=r(WEe," \u2014 "),GP=n(WEe,"A",{href:!0});var GUr=s(GP);ymo=r(GUr,"FNetModel"),GUr.forEach(t),Lmo=r(WEe," (FNet model)"),WEe.forEach(t),xmo=i(M),Xp=n(M,"LI",{});var HEe=s(Xp);jte=n(HEe,"STRONG",{});var OUr=s(jte);kmo=r(OUr,"fsmt"),OUr.forEach(t),Smo=r(HEe," \u2014 "),OP=n(HEe,"A",{href:!0});var VUr=s(OP);Rmo=r(VUr,"FSMTModel"),VUr.forEach(t),Bmo=r(HEe," (FairSeq Machine-Translation model)"),HEe.forEach(t),Pmo=i(M),Hs=n(M,"LI",{});var V9=s(Hs);Dte=n(V9,"STRONG",{});var XUr=s(Dte);$mo=r(XUr,"funnel"),XUr.forEach(t),Imo=r(V9," \u2014 "),VP=n(V9,"A",{href:!0});var zUr=s(VP);qmo=r(zUr,"FunnelModel"),zUr.forEach(t),Nmo=r(V9," or "),XP=n(V9,"A",{href:!0});var QUr=s(XP);jmo=r(QUr,"FunnelBaseModel"),QUr.forEach(t),Dmo=r(V9," (Funnel Transformer model)"),V9.forEach(t),Gmo=i(M),zp=n(M,"LI",{});var UEe=s(zp);Gte=n(UEe,"STRONG",{});var WUr=s(Gte);Omo=r(WUr,"glpn"),WUr.forEach(t),Vmo=r(UEe," \u2014 "),zP=n(UEe,"A",{href:!0});var HUr=s(zP);Xmo=r(HUr,"GLPNModel"),HUr.forEach(t),zmo=r(UEe," (GLPN model)"),UEe.forEach(t),Qmo=i(M),Qp=n(M,"LI",{});var JEe=s(Qp);Ote=n(JEe,"STRONG",{});var UUr=s(Ote);Wmo=r(UUr,"gpt2"),UUr.forEach(t),Hmo=r(JEe," \u2014 "),QP=n(JEe,"A",{href:!0});var JUr=s(QP);Umo=r(JUr,"GPT2Model"),JUr.forEach(t),Jmo=r(JEe," (OpenAI GPT-2 model)"),JEe.forEach(t),Ymo=i(M),Wp=n(M,"LI",{});var YEe=s(Wp);Vte=n(YEe,"STRONG",{});var YUr=s(Vte);Kmo=r(YUr,"gpt_neo"),YUr.forEach(t),Zmo=r(YEe," \u2014 "),WP=n(YEe,"A",{href:!0});var KUr=s(WP);ego=r(KUr,"GPTNeoModel"),KUr.forEach(t),ogo=r(YEe," (GPT Neo model)"),YEe.forEach(t),rgo=i(M),Hp=n(M,"LI",{});var KEe=s(Hp);Xte=n(KEe,"STRONG",{});var ZUr=s(Xte);tgo=r(ZUr,"gptj"),ZUr.forEach(t),ago=r(KEe," \u2014 "),HP=n(KEe,"A",{href:!0});var eJr=s(HP);ngo=r(eJr,"GPTJModel"),eJr.forEach(t),sgo=r(KEe," (GPT-J model)"),KEe.forEach(t),lgo=i(M),Up=n(M,"LI",{});var ZEe=s(Up);zte=n(ZEe,"STRONG",{});var oJr=s(zte);igo=r(oJr,"hubert"),oJr.forEach(t),dgo=r(ZEe," \u2014 "),UP=n(ZEe,"A",{href:!0});var rJr=s(UP);cgo=r(rJr,"HubertModel"),rJr.forEach(t),fgo=r(ZEe," (Hubert model)"),ZEe.forEach(t),mgo=i(M),Jp=n(M,"LI",{});var e3e=s(Jp);Qte=n(e3e,"STRONG",{});var tJr=s(Qte);ggo=r(tJr,"ibert"),tJr.forEach(t),hgo=r(e3e," \u2014 "),JP=n(e3e,"A",{href:!0});var aJr=s(JP);pgo=r(aJr,"IBertModel"),aJr.forEach(t),_go=r(e3e," (I-BERT model)"),e3e.forEach(t),ugo=i(M),Yp=n(M,"LI",{});var o3e=s(Yp);Wte=n(o3e,"STRONG",{});var nJr=s(Wte);bgo=r(nJr,"imagegpt"),nJr.forEach(t),vgo=r(o3e," \u2014 "),YP=n(o3e,"A",{href:!0});var sJr=s(YP);Fgo=r(sJr,"ImageGPTModel"),sJr.forEach(t),Tgo=r(o3e," (ImageGPT model)"),o3e.forEach(t),Mgo=i(M),Kp=n(M,"LI",{});var r3e=s(Kp);Hte=n(r3e,"STRONG",{});var lJr=s(Hte);Ego=r(lJr,"layoutlm"),lJr.forEach(t),Cgo=r(r3e," \u2014 "),KP=n(r3e,"A",{href:!0});var iJr=s(KP);wgo=r(iJr,"LayoutLMModel"),iJr.forEach(t),Ago=r(r3e," (LayoutLM model)"),r3e.forEach(t),ygo=i(M),Zp=n(M,"LI",{});var t3e=s(Zp);Ute=n(t3e,"STRONG",{});var dJr=s(Ute);Lgo=r(dJr,"layoutlmv2"),dJr.forEach(t),xgo=r(t3e," \u2014 "),ZP=n(t3e,"A",{href:!0});var cJr=s(ZP);kgo=r(cJr,"LayoutLMv2Model"),cJr.forEach(t),Sgo=r(t3e," (LayoutLMv2 model)"),t3e.forEach(t),Rgo=i(M),e_=n(M,"LI",{});var a3e=s(e_);Jte=n(a3e,"STRONG",{});var fJr=s(Jte);Bgo=r(fJr,"led"),fJr.forEach(t),Pgo=r(a3e," \u2014 "),e$=n(a3e,"A",{href:!0});var mJr=s(e$);$go=r(mJr,"LEDModel"),mJr.forEach(t),Igo=r(a3e," (LED model)"),a3e.forEach(t),qgo=i(M),o_=n(M,"LI",{});var n3e=s(o_);Yte=n(n3e,"STRONG",{});var gJr=s(Yte);Ngo=r(gJr,"longformer"),gJr.forEach(t),jgo=r(n3e," \u2014 "),o$=n(n3e,"A",{href:!0});var hJr=s(o$);Dgo=r(hJr,"LongformerModel"),hJr.forEach(t),Ggo=r(n3e," (Longformer model)"),n3e.forEach(t),Ogo=i(M),r_=n(M,"LI",{});var s3e=s(r_);Kte=n(s3e,"STRONG",{});var pJr=s(Kte);Vgo=r(pJr,"luke"),pJr.forEach(t),Xgo=r(s3e," \u2014 "),r$=n(s3e,"A",{href:!0});var _Jr=s(r$);zgo=r(_Jr,"LukeModel"),_Jr.forEach(t),Qgo=r(s3e," (LUKE model)"),s3e.forEach(t),Wgo=i(M),t_=n(M,"LI",{});var l3e=s(t_);Zte=n(l3e,"STRONG",{});var uJr=s(Zte);Hgo=r(uJr,"lxmert"),uJr.forEach(t),Ugo=r(l3e," \u2014 "),t$=n(l3e,"A",{href:!0});var bJr=s(t$);Jgo=r(bJr,"LxmertModel"),bJr.forEach(t),Ygo=r(l3e," (LXMERT model)"),l3e.forEach(t),Kgo=i(M),a_=n(M,"LI",{});var i3e=s(a_);eae=n(i3e,"STRONG",{});var vJr=s(eae);Zgo=r(vJr,"m2m_100"),vJr.forEach(t),eho=r(i3e," \u2014 "),a$=n(i3e,"A",{href:!0});var FJr=s(a$);oho=r(FJr,"M2M100Model"),FJr.forEach(t),rho=r(i3e," (M2M100 model)"),i3e.forEach(t),tho=i(M),n_=n(M,"LI",{});var d3e=s(n_);oae=n(d3e,"STRONG",{});var TJr=s(oae);aho=r(TJr,"marian"),TJr.forEach(t),nho=r(d3e," \u2014 "),n$=n(d3e,"A",{href:!0});var MJr=s(n$);sho=r(MJr,"MarianModel"),MJr.forEach(t),lho=r(d3e," (Marian model)"),d3e.forEach(t),iho=i(M),s_=n(M,"LI",{});var c3e=s(s_);rae=n(c3e,"STRONG",{});var EJr=s(rae);dho=r(EJr,"maskformer"),EJr.forEach(t),cho=r(c3e," \u2014 "),s$=n(c3e,"A",{href:!0});var CJr=s(s$);fho=r(CJr,"MaskFormerModel"),CJr.forEach(t),mho=r(c3e," (MaskFormer model)"),c3e.forEach(t),gho=i(M),l_=n(M,"LI",{});var f3e=s(l_);tae=n(f3e,"STRONG",{});var wJr=s(tae);hho=r(wJr,"mbart"),wJr.forEach(t),pho=r(f3e," \u2014 "),l$=n(f3e,"A",{href:!0});var AJr=s(l$);_ho=r(AJr,"MBartModel"),AJr.forEach(t),uho=r(f3e," (mBART model)"),f3e.forEach(t),bho=i(M),i_=n(M,"LI",{});var m3e=s(i_);aae=n(m3e,"STRONG",{});var yJr=s(aae);vho=r(yJr,"megatron-bert"),yJr.forEach(t),Fho=r(m3e," \u2014 "),i$=n(m3e,"A",{href:!0});var LJr=s(i$);Tho=r(LJr,"MegatronBertModel"),LJr.forEach(t),Mho=r(m3e," (MegatronBert model)"),m3e.forEach(t),Eho=i(M),d_=n(M,"LI",{});var g3e=s(d_);nae=n(g3e,"STRONG",{});var xJr=s(nae);Cho=r(xJr,"mobilebert"),xJr.forEach(t),who=r(g3e," \u2014 "),d$=n(g3e,"A",{href:!0});var kJr=s(d$);Aho=r(kJr,"MobileBertModel"),kJr.forEach(t),yho=r(g3e," (MobileBERT model)"),g3e.forEach(t),Lho=i(M),c_=n(M,"LI",{});var h3e=s(c_);sae=n(h3e,"STRONG",{});var SJr=s(sae);xho=r(SJr,"mpnet"),SJr.forEach(t),kho=r(h3e," \u2014 "),c$=n(h3e,"A",{href:!0});var RJr=s(c$);Sho=r(RJr,"MPNetModel"),RJr.forEach(t),Rho=r(h3e," (MPNet model)"),h3e.forEach(t),Bho=i(M),f_=n(M,"LI",{});var p3e=s(f_);lae=n(p3e,"STRONG",{});var BJr=s(lae);Pho=r(BJr,"mt5"),BJr.forEach(t),$ho=r(p3e," \u2014 "),f$=n(p3e,"A",{href:!0});var PJr=s(f$);Iho=r(PJr,"MT5Model"),PJr.forEach(t),qho=r(p3e," (mT5 model)"),p3e.forEach(t),Nho=i(M),m_=n(M,"LI",{});var _3e=s(m_);iae=n(_3e,"STRONG",{});var $Jr=s(iae);jho=r($Jr,"nystromformer"),$Jr.forEach(t),Dho=r(_3e," \u2014 "),m$=n(_3e,"A",{href:!0});var IJr=s(m$);Gho=r(IJr,"NystromformerModel"),IJr.forEach(t),Oho=r(_3e," (Nystromformer model)"),_3e.forEach(t),Vho=i(M),g_=n(M,"LI",{});var u3e=s(g_);dae=n(u3e,"STRONG",{});var qJr=s(dae);Xho=r(qJr,"openai-gpt"),qJr.forEach(t),zho=r(u3e," \u2014 "),g$=n(u3e,"A",{href:!0});var NJr=s(g$);Qho=r(NJr,"OpenAIGPTModel"),NJr.forEach(t),Who=r(u3e," (OpenAI GPT model)"),u3e.forEach(t),Hho=i(M),h_=n(M,"LI",{});var b3e=s(h_);cae=n(b3e,"STRONG",{});var jJr=s(cae);Uho=r(jJr,"pegasus"),jJr.forEach(t),Jho=r(b3e," \u2014 "),h$=n(b3e,"A",{href:!0});var DJr=s(h$);Yho=r(DJr,"PegasusModel"),DJr.forEach(t),Kho=r(b3e," (Pegasus model)"),b3e.forEach(t),Zho=i(M),p_=n(M,"LI",{});var v3e=s(p_);fae=n(v3e,"STRONG",{});var GJr=s(fae);epo=r(GJr,"perceiver"),GJr.forEach(t),opo=r(v3e," \u2014 "),p$=n(v3e,"A",{href:!0});var OJr=s(p$);rpo=r(OJr,"PerceiverModel"),OJr.forEach(t),tpo=r(v3e," (Perceiver model)"),v3e.forEach(t),apo=i(M),__=n(M,"LI",{});var F3e=s(__);mae=n(F3e,"STRONG",{});var VJr=s(mae);npo=r(VJr,"plbart"),VJr.forEach(t),spo=r(F3e," \u2014 "),_$=n(F3e,"A",{href:!0});var XJr=s(_$);lpo=r(XJr,"PLBartModel"),XJr.forEach(t),ipo=r(F3e," (PLBart model)"),F3e.forEach(t),dpo=i(M),u_=n(M,"LI",{});var T3e=s(u_);gae=n(T3e,"STRONG",{});var zJr=s(gae);cpo=r(zJr,"poolformer"),zJr.forEach(t),fpo=r(T3e," \u2014 "),u$=n(T3e,"A",{href:!0});var QJr=s(u$);mpo=r(QJr,"PoolFormerModel"),QJr.forEach(t),gpo=r(T3e," (PoolFormer model)"),T3e.forEach(t),hpo=i(M),b_=n(M,"LI",{});var M3e=s(b_);hae=n(M3e,"STRONG",{});var WJr=s(hae);ppo=r(WJr,"prophetnet"),WJr.forEach(t),_po=r(M3e," \u2014 "),b$=n(M3e,"A",{href:!0});var HJr=s(b$);upo=r(HJr,"ProphetNetModel"),HJr.forEach(t),bpo=r(M3e," (ProphetNet model)"),M3e.forEach(t),vpo=i(M),v_=n(M,"LI",{});var E3e=s(v_);pae=n(E3e,"STRONG",{});var UJr=s(pae);Fpo=r(UJr,"qdqbert"),UJr.forEach(t),Tpo=r(E3e," \u2014 "),v$=n(E3e,"A",{href:!0});var JJr=s(v$);Mpo=r(JJr,"QDQBertModel"),JJr.forEach(t),Epo=r(E3e," (QDQBert model)"),E3e.forEach(t),Cpo=i(M),F_=n(M,"LI",{});var C3e=s(F_);_ae=n(C3e,"STRONG",{});var YJr=s(_ae);wpo=r(YJr,"reformer"),YJr.forEach(t),Apo=r(C3e," \u2014 "),F$=n(C3e,"A",{href:!0});var KJr=s(F$);ypo=r(KJr,"ReformerModel"),KJr.forEach(t),Lpo=r(C3e," (Reformer model)"),C3e.forEach(t),xpo=i(M),T_=n(M,"LI",{});var w3e=s(T_);uae=n(w3e,"STRONG",{});var ZJr=s(uae);kpo=r(ZJr,"regnet"),ZJr.forEach(t),Spo=r(w3e," \u2014 "),T$=n(w3e,"A",{href:!0});var eYr=s(T$);Rpo=r(eYr,"RegNetModel"),eYr.forEach(t),Bpo=r(w3e," (RegNet model)"),w3e.forEach(t),Ppo=i(M),M_=n(M,"LI",{});var A3e=s(M_);bae=n(A3e,"STRONG",{});var oYr=s(bae);$po=r(oYr,"rembert"),oYr.forEach(t),Ipo=r(A3e," \u2014 "),M$=n(A3e,"A",{href:!0});var rYr=s(M$);qpo=r(rYr,"RemBertModel"),rYr.forEach(t),Npo=r(A3e," (RemBERT model)"),A3e.forEach(t),jpo=i(M),E_=n(M,"LI",{});var y3e=s(E_);vae=n(y3e,"STRONG",{});var tYr=s(vae);Dpo=r(tYr,"resnet"),tYr.forEach(t),Gpo=r(y3e," \u2014 "),E$=n(y3e,"A",{href:!0});var aYr=s(E$);Opo=r(aYr,"ResNetModel"),aYr.forEach(t),Vpo=r(y3e," (ResNet model)"),y3e.forEach(t),Xpo=i(M),C_=n(M,"LI",{});var L3e=s(C_);Fae=n(L3e,"STRONG",{});var nYr=s(Fae);zpo=r(nYr,"retribert"),nYr.forEach(t),Qpo=r(L3e," \u2014 "),C$=n(L3e,"A",{href:!0});var sYr=s(C$);Wpo=r(sYr,"RetriBertModel"),sYr.forEach(t),Hpo=r(L3e," (RetriBERT model)"),L3e.forEach(t),Upo=i(M),w_=n(M,"LI",{});var x3e=s(w_);Tae=n(x3e,"STRONG",{});var lYr=s(Tae);Jpo=r(lYr,"roberta"),lYr.forEach(t),Ypo=r(x3e," \u2014 "),w$=n(x3e,"A",{href:!0});var iYr=s(w$);Kpo=r(iYr,"RobertaModel"),iYr.forEach(t),Zpo=r(x3e," (RoBERTa model)"),x3e.forEach(t),e_o=i(M),A_=n(M,"LI",{});var k3e=s(A_);Mae=n(k3e,"STRONG",{});var dYr=s(Mae);o_o=r(dYr,"roformer"),dYr.forEach(t),r_o=r(k3e," \u2014 "),A$=n(k3e,"A",{href:!0});var cYr=s(A$);t_o=r(cYr,"RoFormerModel"),cYr.forEach(t),a_o=r(k3e," (RoFormer model)"),k3e.forEach(t),n_o=i(M),y_=n(M,"LI",{});var S3e=s(y_);Eae=n(S3e,"STRONG",{});var fYr=s(Eae);s_o=r(fYr,"segformer"),fYr.forEach(t),l_o=r(S3e," \u2014 "),y$=n(S3e,"A",{href:!0});var mYr=s(y$);i_o=r(mYr,"SegformerModel"),mYr.forEach(t),d_o=r(S3e," (SegFormer model)"),S3e.forEach(t),c_o=i(M),L_=n(M,"LI",{});var R3e=s(L_);Cae=n(R3e,"STRONG",{});var gYr=s(Cae);f_o=r(gYr,"sew"),gYr.forEach(t),m_o=r(R3e," \u2014 "),L$=n(R3e,"A",{href:!0});var hYr=s(L$);g_o=r(hYr,"SEWModel"),hYr.forEach(t),h_o=r(R3e," (SEW model)"),R3e.forEach(t),p_o=i(M),x_=n(M,"LI",{});var B3e=s(x_);wae=n(B3e,"STRONG",{});var pYr=s(wae);__o=r(pYr,"sew-d"),pYr.forEach(t),u_o=r(B3e," \u2014 "),x$=n(B3e,"A",{href:!0});var _Yr=s(x$);b_o=r(_Yr,"SEWDModel"),_Yr.forEach(t),v_o=r(B3e," (SEW-D model)"),B3e.forEach(t),F_o=i(M),k_=n(M,"LI",{});var P3e=s(k_);Aae=n(P3e,"STRONG",{});var uYr=s(Aae);T_o=r(uYr,"speech_to_text"),uYr.forEach(t),M_o=r(P3e," \u2014 "),k$=n(P3e,"A",{href:!0});var bYr=s(k$);E_o=r(bYr,"Speech2TextModel"),bYr.forEach(t),C_o=r(P3e," (Speech2Text model)"),P3e.forEach(t),w_o=i(M),S_=n(M,"LI",{});var $3e=s(S_);yae=n($3e,"STRONG",{});var vYr=s(yae);A_o=r(vYr,"splinter"),vYr.forEach(t),y_o=r($3e," \u2014 "),S$=n($3e,"A",{href:!0});var FYr=s(S$);L_o=r(FYr,"SplinterModel"),FYr.forEach(t),x_o=r($3e," (Splinter model)"),$3e.forEach(t),k_o=i(M),R_=n(M,"LI",{});var I3e=s(R_);Lae=n(I3e,"STRONG",{});var TYr=s(Lae);S_o=r(TYr,"squeezebert"),TYr.forEach(t),R_o=r(I3e," \u2014 "),R$=n(I3e,"A",{href:!0});var MYr=s(R$);B_o=r(MYr,"SqueezeBertModel"),MYr.forEach(t),P_o=r(I3e," (SqueezeBERT model)"),I3e.forEach(t),$_o=i(M),B_=n(M,"LI",{});var q3e=s(B_);xae=n(q3e,"STRONG",{});var EYr=s(xae);I_o=r(EYr,"swin"),EYr.forEach(t),q_o=r(q3e," \u2014 "),B$=n(q3e,"A",{href:!0});var CYr=s(B$);N_o=r(CYr,"SwinModel"),CYr.forEach(t),j_o=r(q3e," (Swin model)"),q3e.forEach(t),D_o=i(M),P_=n(M,"LI",{});var N3e=s(P_);kae=n(N3e,"STRONG",{});var wYr=s(kae);G_o=r(wYr,"t5"),wYr.forEach(t),O_o=r(N3e," \u2014 "),P$=n(N3e,"A",{href:!0});var AYr=s(P$);V_o=r(AYr,"T5Model"),AYr.forEach(t),X_o=r(N3e," (T5 model)"),N3e.forEach(t),z_o=i(M),$_=n(M,"LI",{});var j3e=s($_);Sae=n(j3e,"STRONG",{});var yYr=s(Sae);Q_o=r(yYr,"tapas"),yYr.forEach(t),W_o=r(j3e," \u2014 "),$$=n(j3e,"A",{href:!0});var LYr=s($$);H_o=r(LYr,"TapasModel"),LYr.forEach(t),U_o=r(j3e," (TAPAS model)"),j3e.forEach(t),J_o=i(M),I_=n(M,"LI",{});var D3e=s(I_);Rae=n(D3e,"STRONG",{});var xYr=s(Rae);Y_o=r(xYr,"transfo-xl"),xYr.forEach(t),K_o=r(D3e," \u2014 "),I$=n(D3e,"A",{href:!0});var kYr=s(I$);Z_o=r(kYr,"TransfoXLModel"),kYr.forEach(t),euo=r(D3e," (Transformer-XL model)"),D3e.forEach(t),ouo=i(M),q_=n(M,"LI",{});var G3e=s(q_);Bae=n(G3e,"STRONG",{});var SYr=s(Bae);ruo=r(SYr,"unispeech"),SYr.forEach(t),tuo=r(G3e," \u2014 "),q$=n(G3e,"A",{href:!0});var RYr=s(q$);auo=r(RYr,"UniSpeechModel"),RYr.forEach(t),nuo=r(G3e," (UniSpeech model)"),G3e.forEach(t),suo=i(M),N_=n(M,"LI",{});var O3e=s(N_);Pae=n(O3e,"STRONG",{});var BYr=s(Pae);luo=r(BYr,"unispeech-sat"),BYr.forEach(t),iuo=r(O3e," \u2014 "),N$=n(O3e,"A",{href:!0});var PYr=s(N$);duo=r(PYr,"UniSpeechSatModel"),PYr.forEach(t),cuo=r(O3e," (UniSpeechSat model)"),O3e.forEach(t),fuo=i(M),j_=n(M,"LI",{});var V3e=s(j_);$ae=n(V3e,"STRONG",{});var $Yr=s($ae);muo=r($Yr,"van"),$Yr.forEach(t),guo=r(V3e," \u2014 "),j$=n(V3e,"A",{href:!0});var IYr=s(j$);huo=r(IYr,"VanModel"),IYr.forEach(t),puo=r(V3e," (VAN model)"),V3e.forEach(t),_uo=i(M),D_=n(M,"LI",{});var X3e=s(D_);Iae=n(X3e,"STRONG",{});var qYr=s(Iae);uuo=r(qYr,"vilt"),qYr.forEach(t),buo=r(X3e," \u2014 "),D$=n(X3e,"A",{href:!0});var NYr=s(D$);vuo=r(NYr,"ViltModel"),NYr.forEach(t),Fuo=r(X3e," (ViLT model)"),X3e.forEach(t),Tuo=i(M),G_=n(M,"LI",{});var z3e=s(G_);qae=n(z3e,"STRONG",{});var jYr=s(qae);Muo=r(jYr,"vision-text-dual-encoder"),jYr.forEach(t),Euo=r(z3e," \u2014 "),G$=n(z3e,"A",{href:!0});var DYr=s(G$);Cuo=r(DYr,"VisionTextDualEncoderModel"),DYr.forEach(t),wuo=r(z3e," (VisionTextDualEncoder model)"),z3e.forEach(t),Auo=i(M),O_=n(M,"LI",{});var Q3e=s(O_);Nae=n(Q3e,"STRONG",{});var GYr=s(Nae);yuo=r(GYr,"visual_bert"),GYr.forEach(t),Luo=r(Q3e," \u2014 "),O$=n(Q3e,"A",{href:!0});var OYr=s(O$);xuo=r(OYr,"VisualBertModel"),OYr.forEach(t),kuo=r(Q3e," (VisualBert model)"),Q3e.forEach(t),Suo=i(M),V_=n(M,"LI",{});var W3e=s(V_);jae=n(W3e,"STRONG",{});var VYr=s(jae);Ruo=r(VYr,"vit"),VYr.forEach(t),Buo=r(W3e," \u2014 "),V$=n(W3e,"A",{href:!0});var XYr=s(V$);Puo=r(XYr,"ViTModel"),XYr.forEach(t),$uo=r(W3e," (ViT model)"),W3e.forEach(t),Iuo=i(M),X_=n(M,"LI",{});var H3e=s(X_);Dae=n(H3e,"STRONG",{});var zYr=s(Dae);quo=r(zYr,"vit_mae"),zYr.forEach(t),Nuo=r(H3e," \u2014 "),X$=n(H3e,"A",{href:!0});var QYr=s(X$);juo=r(QYr,"ViTMAEModel"),QYr.forEach(t),Duo=r(H3e," (ViTMAE model)"),H3e.forEach(t),Guo=i(M),z_=n(M,"LI",{});var U3e=s(z_);Gae=n(U3e,"STRONG",{});var WYr=s(Gae);Ouo=r(WYr,"wav2vec2"),WYr.forEach(t),Vuo=r(U3e," \u2014 "),z$=n(U3e,"A",{href:!0});var HYr=s(z$);Xuo=r(HYr,"Wav2Vec2Model"),HYr.forEach(t),zuo=r(U3e," (Wav2Vec2 model)"),U3e.forEach(t),Quo=i(M),Q_=n(M,"LI",{});var J3e=s(Q_);Oae=n(J3e,"STRONG",{});var UYr=s(Oae);Wuo=r(UYr,"wavlm"),UYr.forEach(t),Huo=r(J3e," \u2014 "),Q$=n(J3e,"A",{href:!0});var JYr=s(Q$);Uuo=r(JYr,"WavLMModel"),JYr.forEach(t),Juo=r(J3e," (WavLM model)"),J3e.forEach(t),Yuo=i(M),W_=n(M,"LI",{});var Y3e=s(W_);Vae=n(Y3e,"STRONG",{});var YYr=s(Vae);Kuo=r(YYr,"xglm"),YYr.forEach(t),Zuo=r(Y3e," \u2014 "),W$=n(Y3e,"A",{href:!0});var KYr=s(W$);e1o=r(KYr,"XGLMModel"),KYr.forEach(t),o1o=r(Y3e," (XGLM model)"),Y3e.forEach(t),r1o=i(M),H_=n(M,"LI",{});var K3e=s(H_);Xae=n(K3e,"STRONG",{});var ZYr=s(Xae);t1o=r(ZYr,"xlm"),ZYr.forEach(t),a1o=r(K3e," \u2014 "),H$=n(K3e,"A",{href:!0});var eKr=s(H$);n1o=r(eKr,"XLMModel"),eKr.forEach(t),s1o=r(K3e," (XLM model)"),K3e.forEach(t),l1o=i(M),U_=n(M,"LI",{});var Z3e=s(U_);zae=n(Z3e,"STRONG",{});var oKr=s(zae);i1o=r(oKr,"xlm-prophetnet"),oKr.forEach(t),d1o=r(Z3e," \u2014 "),U$=n(Z3e,"A",{href:!0});var rKr=s(U$);c1o=r(rKr,"XLMProphetNetModel"),rKr.forEach(t),f1o=r(Z3e," (XLMProphetNet model)"),Z3e.forEach(t),m1o=i(M),J_=n(M,"LI",{});var eCe=s(J_);Qae=n(eCe,"STRONG",{});var tKr=s(Qae);g1o=r(tKr,"xlm-roberta"),tKr.forEach(t),h1o=r(eCe," \u2014 "),J$=n(eCe,"A",{href:!0});var aKr=s(J$);p1o=r(aKr,"XLMRobertaModel"),aKr.forEach(t),_1o=r(eCe," (XLM-RoBERTa model)"),eCe.forEach(t),u1o=i(M),Y_=n(M,"LI",{});var oCe=s(Y_);Wae=n(oCe,"STRONG",{});var nKr=s(Wae);b1o=r(nKr,"xlm-roberta-xl"),nKr.forEach(t),v1o=r(oCe," \u2014 "),Y$=n(oCe,"A",{href:!0});var sKr=s(Y$);F1o=r(sKr,"XLMRobertaXLModel"),sKr.forEach(t),T1o=r(oCe," (XLM-RoBERTa-XL model)"),oCe.forEach(t),M1o=i(M),K_=n(M,"LI",{});var rCe=s(K_);Hae=n(rCe,"STRONG",{});var lKr=s(Hae);E1o=r(lKr,"xlnet"),lKr.forEach(t),C1o=r(rCe," \u2014 "),K$=n(rCe,"A",{href:!0});var iKr=s(K$);w1o=r(iKr,"XLNetModel"),iKr.forEach(t),A1o=r(rCe," (XLNet model)"),rCe.forEach(t),y1o=i(M),Z_=n(M,"LI",{});var tCe=s(Z_);Uae=n(tCe,"STRONG",{});var dKr=s(Uae);L1o=r(dKr,"yoso"),dKr.forEach(t),x1o=r(tCe," \u2014 "),Z$=n(tCe,"A",{href:!0});var cKr=s(Z$);k1o=r(cKr,"YosoModel"),cKr.forEach(t),S1o=r(tCe," (YOSO model)"),tCe.forEach(t),M.forEach(t),R1o=i(Dt),eu=n(Dt,"P",{});var aCe=s(eu);B1o=r(aCe,"The model is set in evaluation mode by default using "),Jae=n(aCe,"CODE",{});var fKr=s(Jae);P1o=r(fKr,"model.eval()"),fKr.forEach(t),$1o=r(aCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Yae=n(aCe,"CODE",{});var mKr=s(Yae);I1o=r(mKr,"model.train()"),mKr.forEach(t),aCe.forEach(t),q1o=i(Dt),Kae=n(Dt,"P",{});var gKr=s(Kae);N1o=r(gKr,"Examples:"),gKr.forEach(t),j1o=i(Dt),m(R3.$$.fragment,Dt),Dt.forEach(t),ol.forEach(t),bPe=i(c),id=n(c,"H2",{class:!0});var yIe=s(id);ou=n(yIe,"A",{id:!0,class:!0,href:!0});var hKr=s(ou);Zae=n(hKr,"SPAN",{});var pKr=s(Zae);m(B3.$$.fragment,pKr),pKr.forEach(t),hKr.forEach(t),D1o=i(yIe),ene=n(yIe,"SPAN",{});var _Kr=s(ene);G1o=r(_Kr,"AutoModelForPreTraining"),_Kr.forEach(t),yIe.forEach(t),vPe=i(c),Yo=n(c,"DIV",{class:!0});var tl=s(Yo);m(P3.$$.fragment,tl),O1o=i(tl),dd=n(tl,"P",{});var FJ=s(dd);V1o=r(FJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),eI=n(FJ,"A",{href:!0});var uKr=s(eI);X1o=r(uKr,"from_pretrained()"),uKr.forEach(t),z1o=r(FJ," class method or the "),oI=n(FJ,"A",{href:!0});var bKr=s(oI);Q1o=r(bKr,"from_config()"),bKr.forEach(t),W1o=r(FJ,` class
method.`),FJ.forEach(t),H1o=i(tl),$3=n(tl,"P",{});var LIe=s($3);U1o=r(LIe,"This class cannot be instantiated directly using "),one=n(LIe,"CODE",{});var vKr=s(one);J1o=r(vKr,"__init__()"),vKr.forEach(t),Y1o=r(LIe," (throws an error)."),LIe.forEach(t),K1o=i(tl),zr=n(tl,"DIV",{class:!0});var al=s(zr);m(I3.$$.fragment,al),Z1o=i(al),rne=n(al,"P",{});var FKr=s(rne);ebo=r(FKr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),FKr.forEach(t),obo=i(al),cd=n(al,"P",{});var TJ=s(cd);rbo=r(TJ,`Note:
Loading a model from its configuration file does `),tne=n(TJ,"STRONG",{});var TKr=s(tne);tbo=r(TKr,"not"),TKr.forEach(t),abo=r(TJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),rI=n(TJ,"A",{href:!0});var MKr=s(rI);nbo=r(MKr,"from_pretrained()"),MKr.forEach(t),sbo=r(TJ," to load the model weights."),TJ.forEach(t),lbo=i(al),ane=n(al,"P",{});var EKr=s(ane);ibo=r(EKr,"Examples:"),EKr.forEach(t),dbo=i(al),m(q3.$$.fragment,al),al.forEach(t),cbo=i(tl),je=n(tl,"DIV",{class:!0});var Gt=s(je);m(N3.$$.fragment,Gt),fbo=i(Gt),nne=n(Gt,"P",{});var CKr=s(nne);mbo=r(CKr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),CKr.forEach(t),gbo=i(Gt),za=n(Gt,"P",{});var J4=s(za);hbo=r(J4,"The model class to instantiate is selected based on the "),sne=n(J4,"CODE",{});var wKr=s(sne);pbo=r(wKr,"model_type"),wKr.forEach(t),_bo=r(J4,` property of the config object (either
passed as an argument or loaded from `),lne=n(J4,"CODE",{});var AKr=s(lne);ubo=r(AKr,"pretrained_model_name_or_path"),AKr.forEach(t),bbo=r(J4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ine=n(J4,"CODE",{});var yKr=s(ine);vbo=r(yKr,"pretrained_model_name_or_path"),yKr.forEach(t),Fbo=r(J4,":"),J4.forEach(t),Tbo=i(Gt),S=n(Gt,"UL",{});var B=s(S);ru=n(B,"LI",{});var nCe=s(ru);dne=n(nCe,"STRONG",{});var LKr=s(dne);Mbo=r(LKr,"albert"),LKr.forEach(t),Ebo=r(nCe," \u2014 "),tI=n(nCe,"A",{href:!0});var xKr=s(tI);Cbo=r(xKr,"AlbertForPreTraining"),xKr.forEach(t),wbo=r(nCe," (ALBERT model)"),nCe.forEach(t),Abo=i(B),tu=n(B,"LI",{});var sCe=s(tu);cne=n(sCe,"STRONG",{});var kKr=s(cne);ybo=r(kKr,"bart"),kKr.forEach(t),Lbo=r(sCe," \u2014 "),aI=n(sCe,"A",{href:!0});var SKr=s(aI);xbo=r(SKr,"BartForConditionalGeneration"),SKr.forEach(t),kbo=r(sCe," (BART model)"),sCe.forEach(t),Sbo=i(B),au=n(B,"LI",{});var lCe=s(au);fne=n(lCe,"STRONG",{});var RKr=s(fne);Rbo=r(RKr,"bert"),RKr.forEach(t),Bbo=r(lCe," \u2014 "),nI=n(lCe,"A",{href:!0});var BKr=s(nI);Pbo=r(BKr,"BertForPreTraining"),BKr.forEach(t),$bo=r(lCe," (BERT model)"),lCe.forEach(t),Ibo=i(B),nu=n(B,"LI",{});var iCe=s(nu);mne=n(iCe,"STRONG",{});var PKr=s(mne);qbo=r(PKr,"big_bird"),PKr.forEach(t),Nbo=r(iCe," \u2014 "),sI=n(iCe,"A",{href:!0});var $Kr=s(sI);jbo=r($Kr,"BigBirdForPreTraining"),$Kr.forEach(t),Dbo=r(iCe," (BigBird model)"),iCe.forEach(t),Gbo=i(B),su=n(B,"LI",{});var dCe=s(su);gne=n(dCe,"STRONG",{});var IKr=s(gne);Obo=r(IKr,"camembert"),IKr.forEach(t),Vbo=r(dCe," \u2014 "),lI=n(dCe,"A",{href:!0});var qKr=s(lI);Xbo=r(qKr,"CamembertForMaskedLM"),qKr.forEach(t),zbo=r(dCe," (CamemBERT model)"),dCe.forEach(t),Qbo=i(B),lu=n(B,"LI",{});var cCe=s(lu);hne=n(cCe,"STRONG",{});var NKr=s(hne);Wbo=r(NKr,"ctrl"),NKr.forEach(t),Hbo=r(cCe," \u2014 "),iI=n(cCe,"A",{href:!0});var jKr=s(iI);Ubo=r(jKr,"CTRLLMHeadModel"),jKr.forEach(t),Jbo=r(cCe," (CTRL model)"),cCe.forEach(t),Ybo=i(B),iu=n(B,"LI",{});var fCe=s(iu);pne=n(fCe,"STRONG",{});var DKr=s(pne);Kbo=r(DKr,"data2vec-text"),DKr.forEach(t),Zbo=r(fCe," \u2014 "),dI=n(fCe,"A",{href:!0});var GKr=s(dI);e2o=r(GKr,"Data2VecTextForMaskedLM"),GKr.forEach(t),o2o=r(fCe," (Data2VecText model)"),fCe.forEach(t),r2o=i(B),du=n(B,"LI",{});var mCe=s(du);_ne=n(mCe,"STRONG",{});var OKr=s(_ne);t2o=r(OKr,"deberta"),OKr.forEach(t),a2o=r(mCe," \u2014 "),cI=n(mCe,"A",{href:!0});var VKr=s(cI);n2o=r(VKr,"DebertaForMaskedLM"),VKr.forEach(t),s2o=r(mCe," (DeBERTa model)"),mCe.forEach(t),l2o=i(B),cu=n(B,"LI",{});var gCe=s(cu);une=n(gCe,"STRONG",{});var XKr=s(une);i2o=r(XKr,"deberta-v2"),XKr.forEach(t),d2o=r(gCe," \u2014 "),fI=n(gCe,"A",{href:!0});var zKr=s(fI);c2o=r(zKr,"DebertaV2ForMaskedLM"),zKr.forEach(t),f2o=r(gCe," (DeBERTa-v2 model)"),gCe.forEach(t),m2o=i(B),fu=n(B,"LI",{});var hCe=s(fu);bne=n(hCe,"STRONG",{});var QKr=s(bne);g2o=r(QKr,"distilbert"),QKr.forEach(t),h2o=r(hCe," \u2014 "),mI=n(hCe,"A",{href:!0});var WKr=s(mI);p2o=r(WKr,"DistilBertForMaskedLM"),WKr.forEach(t),_2o=r(hCe," (DistilBERT model)"),hCe.forEach(t),u2o=i(B),mu=n(B,"LI",{});var pCe=s(mu);vne=n(pCe,"STRONG",{});var HKr=s(vne);b2o=r(HKr,"electra"),HKr.forEach(t),v2o=r(pCe," \u2014 "),gI=n(pCe,"A",{href:!0});var UKr=s(gI);F2o=r(UKr,"ElectraForPreTraining"),UKr.forEach(t),T2o=r(pCe," (ELECTRA model)"),pCe.forEach(t),M2o=i(B),gu=n(B,"LI",{});var _Ce=s(gu);Fne=n(_Ce,"STRONG",{});var JKr=s(Fne);E2o=r(JKr,"flaubert"),JKr.forEach(t),C2o=r(_Ce," \u2014 "),hI=n(_Ce,"A",{href:!0});var YKr=s(hI);w2o=r(YKr,"FlaubertWithLMHeadModel"),YKr.forEach(t),A2o=r(_Ce," (FlauBERT model)"),_Ce.forEach(t),y2o=i(B),hu=n(B,"LI",{});var uCe=s(hu);Tne=n(uCe,"STRONG",{});var KKr=s(Tne);L2o=r(KKr,"fnet"),KKr.forEach(t),x2o=r(uCe," \u2014 "),pI=n(uCe,"A",{href:!0});var ZKr=s(pI);k2o=r(ZKr,"FNetForPreTraining"),ZKr.forEach(t),S2o=r(uCe," (FNet model)"),uCe.forEach(t),R2o=i(B),pu=n(B,"LI",{});var bCe=s(pu);Mne=n(bCe,"STRONG",{});var eZr=s(Mne);B2o=r(eZr,"fsmt"),eZr.forEach(t),P2o=r(bCe," \u2014 "),_I=n(bCe,"A",{href:!0});var oZr=s(_I);$2o=r(oZr,"FSMTForConditionalGeneration"),oZr.forEach(t),I2o=r(bCe," (FairSeq Machine-Translation model)"),bCe.forEach(t),q2o=i(B),_u=n(B,"LI",{});var vCe=s(_u);Ene=n(vCe,"STRONG",{});var rZr=s(Ene);N2o=r(rZr,"funnel"),rZr.forEach(t),j2o=r(vCe," \u2014 "),uI=n(vCe,"A",{href:!0});var tZr=s(uI);D2o=r(tZr,"FunnelForPreTraining"),tZr.forEach(t),G2o=r(vCe," (Funnel Transformer model)"),vCe.forEach(t),O2o=i(B),uu=n(B,"LI",{});var FCe=s(uu);Cne=n(FCe,"STRONG",{});var aZr=s(Cne);V2o=r(aZr,"gpt2"),aZr.forEach(t),X2o=r(FCe," \u2014 "),bI=n(FCe,"A",{href:!0});var nZr=s(bI);z2o=r(nZr,"GPT2LMHeadModel"),nZr.forEach(t),Q2o=r(FCe," (OpenAI GPT-2 model)"),FCe.forEach(t),W2o=i(B),bu=n(B,"LI",{});var TCe=s(bu);wne=n(TCe,"STRONG",{});var sZr=s(wne);H2o=r(sZr,"ibert"),sZr.forEach(t),U2o=r(TCe," \u2014 "),vI=n(TCe,"A",{href:!0});var lZr=s(vI);J2o=r(lZr,"IBertForMaskedLM"),lZr.forEach(t),Y2o=r(TCe," (I-BERT model)"),TCe.forEach(t),K2o=i(B),vu=n(B,"LI",{});var MCe=s(vu);Ane=n(MCe,"STRONG",{});var iZr=s(Ane);Z2o=r(iZr,"layoutlm"),iZr.forEach(t),e5o=r(MCe," \u2014 "),FI=n(MCe,"A",{href:!0});var dZr=s(FI);o5o=r(dZr,"LayoutLMForMaskedLM"),dZr.forEach(t),r5o=r(MCe," (LayoutLM model)"),MCe.forEach(t),t5o=i(B),Fu=n(B,"LI",{});var ECe=s(Fu);yne=n(ECe,"STRONG",{});var cZr=s(yne);a5o=r(cZr,"longformer"),cZr.forEach(t),n5o=r(ECe," \u2014 "),TI=n(ECe,"A",{href:!0});var fZr=s(TI);s5o=r(fZr,"LongformerForMaskedLM"),fZr.forEach(t),l5o=r(ECe," (Longformer model)"),ECe.forEach(t),i5o=i(B),Tu=n(B,"LI",{});var CCe=s(Tu);Lne=n(CCe,"STRONG",{});var mZr=s(Lne);d5o=r(mZr,"lxmert"),mZr.forEach(t),c5o=r(CCe," \u2014 "),MI=n(CCe,"A",{href:!0});var gZr=s(MI);f5o=r(gZr,"LxmertForPreTraining"),gZr.forEach(t),m5o=r(CCe," (LXMERT model)"),CCe.forEach(t),g5o=i(B),Mu=n(B,"LI",{});var wCe=s(Mu);xne=n(wCe,"STRONG",{});var hZr=s(xne);h5o=r(hZr,"megatron-bert"),hZr.forEach(t),p5o=r(wCe," \u2014 "),EI=n(wCe,"A",{href:!0});var pZr=s(EI);_5o=r(pZr,"MegatronBertForPreTraining"),pZr.forEach(t),u5o=r(wCe," (MegatronBert model)"),wCe.forEach(t),b5o=i(B),Eu=n(B,"LI",{});var ACe=s(Eu);kne=n(ACe,"STRONG",{});var _Zr=s(kne);v5o=r(_Zr,"mobilebert"),_Zr.forEach(t),F5o=r(ACe," \u2014 "),CI=n(ACe,"A",{href:!0});var uZr=s(CI);T5o=r(uZr,"MobileBertForPreTraining"),uZr.forEach(t),M5o=r(ACe," (MobileBERT model)"),ACe.forEach(t),E5o=i(B),Cu=n(B,"LI",{});var yCe=s(Cu);Sne=n(yCe,"STRONG",{});var bZr=s(Sne);C5o=r(bZr,"mpnet"),bZr.forEach(t),w5o=r(yCe," \u2014 "),wI=n(yCe,"A",{href:!0});var vZr=s(wI);A5o=r(vZr,"MPNetForMaskedLM"),vZr.forEach(t),y5o=r(yCe," (MPNet model)"),yCe.forEach(t),L5o=i(B),wu=n(B,"LI",{});var LCe=s(wu);Rne=n(LCe,"STRONG",{});var FZr=s(Rne);x5o=r(FZr,"openai-gpt"),FZr.forEach(t),k5o=r(LCe," \u2014 "),AI=n(LCe,"A",{href:!0});var TZr=s(AI);S5o=r(TZr,"OpenAIGPTLMHeadModel"),TZr.forEach(t),R5o=r(LCe," (OpenAI GPT model)"),LCe.forEach(t),B5o=i(B),Au=n(B,"LI",{});var xCe=s(Au);Bne=n(xCe,"STRONG",{});var MZr=s(Bne);P5o=r(MZr,"retribert"),MZr.forEach(t),$5o=r(xCe," \u2014 "),yI=n(xCe,"A",{href:!0});var EZr=s(yI);I5o=r(EZr,"RetriBertModel"),EZr.forEach(t),q5o=r(xCe," (RetriBERT model)"),xCe.forEach(t),N5o=i(B),yu=n(B,"LI",{});var kCe=s(yu);Pne=n(kCe,"STRONG",{});var CZr=s(Pne);j5o=r(CZr,"roberta"),CZr.forEach(t),D5o=r(kCe," \u2014 "),LI=n(kCe,"A",{href:!0});var wZr=s(LI);G5o=r(wZr,"RobertaForMaskedLM"),wZr.forEach(t),O5o=r(kCe," (RoBERTa model)"),kCe.forEach(t),V5o=i(B),Lu=n(B,"LI",{});var SCe=s(Lu);$ne=n(SCe,"STRONG",{});var AZr=s($ne);X5o=r(AZr,"squeezebert"),AZr.forEach(t),z5o=r(SCe," \u2014 "),xI=n(SCe,"A",{href:!0});var yZr=s(xI);Q5o=r(yZr,"SqueezeBertForMaskedLM"),yZr.forEach(t),W5o=r(SCe," (SqueezeBERT model)"),SCe.forEach(t),H5o=i(B),xu=n(B,"LI",{});var RCe=s(xu);Ine=n(RCe,"STRONG",{});var LZr=s(Ine);U5o=r(LZr,"t5"),LZr.forEach(t),J5o=r(RCe," \u2014 "),kI=n(RCe,"A",{href:!0});var xZr=s(kI);Y5o=r(xZr,"T5ForConditionalGeneration"),xZr.forEach(t),K5o=r(RCe," (T5 model)"),RCe.forEach(t),Z5o=i(B),ku=n(B,"LI",{});var BCe=s(ku);qne=n(BCe,"STRONG",{});var kZr=s(qne);e6o=r(kZr,"tapas"),kZr.forEach(t),o6o=r(BCe," \u2014 "),SI=n(BCe,"A",{href:!0});var SZr=s(SI);r6o=r(SZr,"TapasForMaskedLM"),SZr.forEach(t),t6o=r(BCe," (TAPAS model)"),BCe.forEach(t),a6o=i(B),Su=n(B,"LI",{});var PCe=s(Su);Nne=n(PCe,"STRONG",{});var RZr=s(Nne);n6o=r(RZr,"transfo-xl"),RZr.forEach(t),s6o=r(PCe," \u2014 "),RI=n(PCe,"A",{href:!0});var BZr=s(RI);l6o=r(BZr,"TransfoXLLMHeadModel"),BZr.forEach(t),i6o=r(PCe," (Transformer-XL model)"),PCe.forEach(t),d6o=i(B),Ru=n(B,"LI",{});var $Ce=s(Ru);jne=n($Ce,"STRONG",{});var PZr=s(jne);c6o=r(PZr,"unispeech"),PZr.forEach(t),f6o=r($Ce," \u2014 "),BI=n($Ce,"A",{href:!0});var $Zr=s(BI);m6o=r($Zr,"UniSpeechForPreTraining"),$Zr.forEach(t),g6o=r($Ce," (UniSpeech model)"),$Ce.forEach(t),h6o=i(B),Bu=n(B,"LI",{});var ICe=s(Bu);Dne=n(ICe,"STRONG",{});var IZr=s(Dne);p6o=r(IZr,"unispeech-sat"),IZr.forEach(t),_6o=r(ICe," \u2014 "),PI=n(ICe,"A",{href:!0});var qZr=s(PI);u6o=r(qZr,"UniSpeechSatForPreTraining"),qZr.forEach(t),b6o=r(ICe," (UniSpeechSat model)"),ICe.forEach(t),v6o=i(B),Pu=n(B,"LI",{});var qCe=s(Pu);Gne=n(qCe,"STRONG",{});var NZr=s(Gne);F6o=r(NZr,"visual_bert"),NZr.forEach(t),T6o=r(qCe," \u2014 "),$I=n(qCe,"A",{href:!0});var jZr=s($I);M6o=r(jZr,"VisualBertForPreTraining"),jZr.forEach(t),E6o=r(qCe," (VisualBert model)"),qCe.forEach(t),C6o=i(B),$u=n(B,"LI",{});var NCe=s($u);One=n(NCe,"STRONG",{});var DZr=s(One);w6o=r(DZr,"vit_mae"),DZr.forEach(t),A6o=r(NCe," \u2014 "),II=n(NCe,"A",{href:!0});var GZr=s(II);y6o=r(GZr,"ViTMAEForPreTraining"),GZr.forEach(t),L6o=r(NCe," (ViTMAE model)"),NCe.forEach(t),x6o=i(B),Iu=n(B,"LI",{});var jCe=s(Iu);Vne=n(jCe,"STRONG",{});var OZr=s(Vne);k6o=r(OZr,"wav2vec2"),OZr.forEach(t),S6o=r(jCe," \u2014 "),qI=n(jCe,"A",{href:!0});var VZr=s(qI);R6o=r(VZr,"Wav2Vec2ForPreTraining"),VZr.forEach(t),B6o=r(jCe," (Wav2Vec2 model)"),jCe.forEach(t),P6o=i(B),qu=n(B,"LI",{});var DCe=s(qu);Xne=n(DCe,"STRONG",{});var XZr=s(Xne);$6o=r(XZr,"xlm"),XZr.forEach(t),I6o=r(DCe," \u2014 "),NI=n(DCe,"A",{href:!0});var zZr=s(NI);q6o=r(zZr,"XLMWithLMHeadModel"),zZr.forEach(t),N6o=r(DCe," (XLM model)"),DCe.forEach(t),j6o=i(B),Nu=n(B,"LI",{});var GCe=s(Nu);zne=n(GCe,"STRONG",{});var QZr=s(zne);D6o=r(QZr,"xlm-roberta"),QZr.forEach(t),G6o=r(GCe," \u2014 "),jI=n(GCe,"A",{href:!0});var WZr=s(jI);O6o=r(WZr,"XLMRobertaForMaskedLM"),WZr.forEach(t),V6o=r(GCe," (XLM-RoBERTa model)"),GCe.forEach(t),X6o=i(B),ju=n(B,"LI",{});var OCe=s(ju);Qne=n(OCe,"STRONG",{});var HZr=s(Qne);z6o=r(HZr,"xlm-roberta-xl"),HZr.forEach(t),Q6o=r(OCe," \u2014 "),DI=n(OCe,"A",{href:!0});var UZr=s(DI);W6o=r(UZr,"XLMRobertaXLForMaskedLM"),UZr.forEach(t),H6o=r(OCe," (XLM-RoBERTa-XL model)"),OCe.forEach(t),U6o=i(B),Du=n(B,"LI",{});var VCe=s(Du);Wne=n(VCe,"STRONG",{});var JZr=s(Wne);J6o=r(JZr,"xlnet"),JZr.forEach(t),Y6o=r(VCe," \u2014 "),GI=n(VCe,"A",{href:!0});var YZr=s(GI);K6o=r(YZr,"XLNetLMHeadModel"),YZr.forEach(t),Z6o=r(VCe," (XLNet model)"),VCe.forEach(t),B.forEach(t),evo=i(Gt),Gu=n(Gt,"P",{});var XCe=s(Gu);ovo=r(XCe,"The model is set in evaluation mode by default using "),Hne=n(XCe,"CODE",{});var KZr=s(Hne);rvo=r(KZr,"model.eval()"),KZr.forEach(t),tvo=r(XCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Une=n(XCe,"CODE",{});var ZZr=s(Une);avo=r(ZZr,"model.train()"),ZZr.forEach(t),XCe.forEach(t),nvo=i(Gt),Jne=n(Gt,"P",{});var eet=s(Jne);svo=r(eet,"Examples:"),eet.forEach(t),lvo=i(Gt),m(j3.$$.fragment,Gt),Gt.forEach(t),tl.forEach(t),FPe=i(c),fd=n(c,"H2",{class:!0});var xIe=s(fd);Ou=n(xIe,"A",{id:!0,class:!0,href:!0});var oet=s(Ou);Yne=n(oet,"SPAN",{});var ret=s(Yne);m(D3.$$.fragment,ret),ret.forEach(t),oet.forEach(t),ivo=i(xIe),Kne=n(xIe,"SPAN",{});var tet=s(Kne);dvo=r(tet,"AutoModelForCausalLM"),tet.forEach(t),xIe.forEach(t),TPe=i(c),Ko=n(c,"DIV",{class:!0});var nl=s(Ko);m(G3.$$.fragment,nl),cvo=i(nl),md=n(nl,"P",{});var MJ=s(md);fvo=r(MJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),OI=n(MJ,"A",{href:!0});var aet=s(OI);mvo=r(aet,"from_pretrained()"),aet.forEach(t),gvo=r(MJ," class method or the "),VI=n(MJ,"A",{href:!0});var net=s(VI);hvo=r(net,"from_config()"),net.forEach(t),pvo=r(MJ,` class
method.`),MJ.forEach(t),_vo=i(nl),O3=n(nl,"P",{});var kIe=s(O3);uvo=r(kIe,"This class cannot be instantiated directly using "),Zne=n(kIe,"CODE",{});var set=s(Zne);bvo=r(set,"__init__()"),set.forEach(t),vvo=r(kIe," (throws an error)."),kIe.forEach(t),Fvo=i(nl),Qr=n(nl,"DIV",{class:!0});var sl=s(Qr);m(V3.$$.fragment,sl),Tvo=i(sl),ese=n(sl,"P",{});var iet=s(ese);Mvo=r(iet,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),iet.forEach(t),Evo=i(sl),gd=n(sl,"P",{});var EJ=s(gd);Cvo=r(EJ,`Note:
Loading a model from its configuration file does `),ose=n(EJ,"STRONG",{});var det=s(ose);wvo=r(det,"not"),det.forEach(t),Avo=r(EJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),XI=n(EJ,"A",{href:!0});var cet=s(XI);yvo=r(cet,"from_pretrained()"),cet.forEach(t),Lvo=r(EJ," to load the model weights."),EJ.forEach(t),xvo=i(sl),rse=n(sl,"P",{});var fet=s(rse);kvo=r(fet,"Examples:"),fet.forEach(t),Svo=i(sl),m(X3.$$.fragment,sl),sl.forEach(t),Rvo=i(nl),De=n(nl,"DIV",{class:!0});var Ot=s(De);m(z3.$$.fragment,Ot),Bvo=i(Ot),tse=n(Ot,"P",{});var met=s(tse);Pvo=r(met,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),met.forEach(t),$vo=i(Ot),Qa=n(Ot,"P",{});var Y4=s(Qa);Ivo=r(Y4,"The model class to instantiate is selected based on the "),ase=n(Y4,"CODE",{});var get=s(ase);qvo=r(get,"model_type"),get.forEach(t),Nvo=r(Y4,` property of the config object (either
passed as an argument or loaded from `),nse=n(Y4,"CODE",{});var het=s(nse);jvo=r(het,"pretrained_model_name_or_path"),het.forEach(t),Dvo=r(Y4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sse=n(Y4,"CODE",{});var pet=s(sse);Gvo=r(pet,"pretrained_model_name_or_path"),pet.forEach(t),Ovo=r(Y4,":"),Y4.forEach(t),Vvo=i(Ot),$=n(Ot,"UL",{});var q=s($);Vu=n(q,"LI",{});var zCe=s(Vu);lse=n(zCe,"STRONG",{});var _et=s(lse);Xvo=r(_et,"bart"),_et.forEach(t),zvo=r(zCe," \u2014 "),zI=n(zCe,"A",{href:!0});var uet=s(zI);Qvo=r(uet,"BartForCausalLM"),uet.forEach(t),Wvo=r(zCe," (BART model)"),zCe.forEach(t),Hvo=i(q),Xu=n(q,"LI",{});var QCe=s(Xu);ise=n(QCe,"STRONG",{});var bet=s(ise);Uvo=r(bet,"bert"),bet.forEach(t),Jvo=r(QCe," \u2014 "),QI=n(QCe,"A",{href:!0});var vet=s(QI);Yvo=r(vet,"BertLMHeadModel"),vet.forEach(t),Kvo=r(QCe," (BERT model)"),QCe.forEach(t),Zvo=i(q),zu=n(q,"LI",{});var WCe=s(zu);dse=n(WCe,"STRONG",{});var Fet=s(dse);eFo=r(Fet,"bert-generation"),Fet.forEach(t),oFo=r(WCe," \u2014 "),WI=n(WCe,"A",{href:!0});var Tet=s(WI);rFo=r(Tet,"BertGenerationDecoder"),Tet.forEach(t),tFo=r(WCe," (Bert Generation model)"),WCe.forEach(t),aFo=i(q),Qu=n(q,"LI",{});var HCe=s(Qu);cse=n(HCe,"STRONG",{});var Met=s(cse);nFo=r(Met,"big_bird"),Met.forEach(t),sFo=r(HCe," \u2014 "),HI=n(HCe,"A",{href:!0});var Eet=s(HI);lFo=r(Eet,"BigBirdForCausalLM"),Eet.forEach(t),iFo=r(HCe," (BigBird model)"),HCe.forEach(t),dFo=i(q),Wu=n(q,"LI",{});var UCe=s(Wu);fse=n(UCe,"STRONG",{});var Cet=s(fse);cFo=r(Cet,"bigbird_pegasus"),Cet.forEach(t),fFo=r(UCe," \u2014 "),UI=n(UCe,"A",{href:!0});var wet=s(UI);mFo=r(wet,"BigBirdPegasusForCausalLM"),wet.forEach(t),gFo=r(UCe," (BigBirdPegasus model)"),UCe.forEach(t),hFo=i(q),Hu=n(q,"LI",{});var JCe=s(Hu);mse=n(JCe,"STRONG",{});var Aet=s(mse);pFo=r(Aet,"blenderbot"),Aet.forEach(t),_Fo=r(JCe," \u2014 "),JI=n(JCe,"A",{href:!0});var yet=s(JI);uFo=r(yet,"BlenderbotForCausalLM"),yet.forEach(t),bFo=r(JCe," (Blenderbot model)"),JCe.forEach(t),vFo=i(q),Uu=n(q,"LI",{});var YCe=s(Uu);gse=n(YCe,"STRONG",{});var Let=s(gse);FFo=r(Let,"blenderbot-small"),Let.forEach(t),TFo=r(YCe," \u2014 "),YI=n(YCe,"A",{href:!0});var xet=s(YI);MFo=r(xet,"BlenderbotSmallForCausalLM"),xet.forEach(t),EFo=r(YCe," (BlenderbotSmall model)"),YCe.forEach(t),CFo=i(q),Ju=n(q,"LI",{});var KCe=s(Ju);hse=n(KCe,"STRONG",{});var ket=s(hse);wFo=r(ket,"camembert"),ket.forEach(t),AFo=r(KCe," \u2014 "),KI=n(KCe,"A",{href:!0});var Set=s(KI);yFo=r(Set,"CamembertForCausalLM"),Set.forEach(t),LFo=r(KCe," (CamemBERT model)"),KCe.forEach(t),xFo=i(q),Yu=n(q,"LI",{});var ZCe=s(Yu);pse=n(ZCe,"STRONG",{});var Ret=s(pse);kFo=r(Ret,"ctrl"),Ret.forEach(t),SFo=r(ZCe," \u2014 "),ZI=n(ZCe,"A",{href:!0});var Bet=s(ZI);RFo=r(Bet,"CTRLLMHeadModel"),Bet.forEach(t),BFo=r(ZCe," (CTRL model)"),ZCe.forEach(t),PFo=i(q),Ku=n(q,"LI",{});var ewe=s(Ku);_se=n(ewe,"STRONG",{});var Pet=s(_se);$Fo=r(Pet,"data2vec-text"),Pet.forEach(t),IFo=r(ewe," \u2014 "),eq=n(ewe,"A",{href:!0});var $et=s(eq);qFo=r($et,"Data2VecTextForCausalLM"),$et.forEach(t),NFo=r(ewe," (Data2VecText model)"),ewe.forEach(t),jFo=i(q),Zu=n(q,"LI",{});var owe=s(Zu);use=n(owe,"STRONG",{});var Iet=s(use);DFo=r(Iet,"electra"),Iet.forEach(t),GFo=r(owe," \u2014 "),oq=n(owe,"A",{href:!0});var qet=s(oq);OFo=r(qet,"ElectraForCausalLM"),qet.forEach(t),VFo=r(owe," (ELECTRA model)"),owe.forEach(t),XFo=i(q),e1=n(q,"LI",{});var rwe=s(e1);bse=n(rwe,"STRONG",{});var Net=s(bse);zFo=r(Net,"gpt2"),Net.forEach(t),QFo=r(rwe," \u2014 "),rq=n(rwe,"A",{href:!0});var jet=s(rq);WFo=r(jet,"GPT2LMHeadModel"),jet.forEach(t),HFo=r(rwe," (OpenAI GPT-2 model)"),rwe.forEach(t),UFo=i(q),o1=n(q,"LI",{});var twe=s(o1);vse=n(twe,"STRONG",{});var Det=s(vse);JFo=r(Det,"gpt_neo"),Det.forEach(t),YFo=r(twe," \u2014 "),tq=n(twe,"A",{href:!0});var Get=s(tq);KFo=r(Get,"GPTNeoForCausalLM"),Get.forEach(t),ZFo=r(twe," (GPT Neo model)"),twe.forEach(t),eTo=i(q),r1=n(q,"LI",{});var awe=s(r1);Fse=n(awe,"STRONG",{});var Oet=s(Fse);oTo=r(Oet,"gptj"),Oet.forEach(t),rTo=r(awe," \u2014 "),aq=n(awe,"A",{href:!0});var Vet=s(aq);tTo=r(Vet,"GPTJForCausalLM"),Vet.forEach(t),aTo=r(awe," (GPT-J model)"),awe.forEach(t),nTo=i(q),t1=n(q,"LI",{});var nwe=s(t1);Tse=n(nwe,"STRONG",{});var Xet=s(Tse);sTo=r(Xet,"marian"),Xet.forEach(t),lTo=r(nwe," \u2014 "),nq=n(nwe,"A",{href:!0});var zet=s(nq);iTo=r(zet,"MarianForCausalLM"),zet.forEach(t),dTo=r(nwe," (Marian model)"),nwe.forEach(t),cTo=i(q),a1=n(q,"LI",{});var swe=s(a1);Mse=n(swe,"STRONG",{});var Qet=s(Mse);fTo=r(Qet,"mbart"),Qet.forEach(t),mTo=r(swe," \u2014 "),sq=n(swe,"A",{href:!0});var Wet=s(sq);gTo=r(Wet,"MBartForCausalLM"),Wet.forEach(t),hTo=r(swe," (mBART model)"),swe.forEach(t),pTo=i(q),n1=n(q,"LI",{});var lwe=s(n1);Ese=n(lwe,"STRONG",{});var Het=s(Ese);_To=r(Het,"megatron-bert"),Het.forEach(t),uTo=r(lwe," \u2014 "),lq=n(lwe,"A",{href:!0});var Uet=s(lq);bTo=r(Uet,"MegatronBertForCausalLM"),Uet.forEach(t),vTo=r(lwe," (MegatronBert model)"),lwe.forEach(t),FTo=i(q),s1=n(q,"LI",{});var iwe=s(s1);Cse=n(iwe,"STRONG",{});var Jet=s(Cse);TTo=r(Jet,"openai-gpt"),Jet.forEach(t),MTo=r(iwe," \u2014 "),iq=n(iwe,"A",{href:!0});var Yet=s(iq);ETo=r(Yet,"OpenAIGPTLMHeadModel"),Yet.forEach(t),CTo=r(iwe," (OpenAI GPT model)"),iwe.forEach(t),wTo=i(q),l1=n(q,"LI",{});var dwe=s(l1);wse=n(dwe,"STRONG",{});var Ket=s(wse);ATo=r(Ket,"pegasus"),Ket.forEach(t),yTo=r(dwe," \u2014 "),dq=n(dwe,"A",{href:!0});var Zet=s(dq);LTo=r(Zet,"PegasusForCausalLM"),Zet.forEach(t),xTo=r(dwe," (Pegasus model)"),dwe.forEach(t),kTo=i(q),i1=n(q,"LI",{});var cwe=s(i1);Ase=n(cwe,"STRONG",{});var eot=s(Ase);STo=r(eot,"plbart"),eot.forEach(t),RTo=r(cwe," \u2014 "),cq=n(cwe,"A",{href:!0});var oot=s(cq);BTo=r(oot,"PLBartForCausalLM"),oot.forEach(t),PTo=r(cwe," (PLBart model)"),cwe.forEach(t),$To=i(q),d1=n(q,"LI",{});var fwe=s(d1);yse=n(fwe,"STRONG",{});var rot=s(yse);ITo=r(rot,"prophetnet"),rot.forEach(t),qTo=r(fwe," \u2014 "),fq=n(fwe,"A",{href:!0});var tot=s(fq);NTo=r(tot,"ProphetNetForCausalLM"),tot.forEach(t),jTo=r(fwe," (ProphetNet model)"),fwe.forEach(t),DTo=i(q),c1=n(q,"LI",{});var mwe=s(c1);Lse=n(mwe,"STRONG",{});var aot=s(Lse);GTo=r(aot,"qdqbert"),aot.forEach(t),OTo=r(mwe," \u2014 "),mq=n(mwe,"A",{href:!0});var not=s(mq);VTo=r(not,"QDQBertLMHeadModel"),not.forEach(t),XTo=r(mwe," (QDQBert model)"),mwe.forEach(t),zTo=i(q),f1=n(q,"LI",{});var gwe=s(f1);xse=n(gwe,"STRONG",{});var sot=s(xse);QTo=r(sot,"reformer"),sot.forEach(t),WTo=r(gwe," \u2014 "),gq=n(gwe,"A",{href:!0});var lot=s(gq);HTo=r(lot,"ReformerModelWithLMHead"),lot.forEach(t),UTo=r(gwe," (Reformer model)"),gwe.forEach(t),JTo=i(q),m1=n(q,"LI",{});var hwe=s(m1);kse=n(hwe,"STRONG",{});var iot=s(kse);YTo=r(iot,"rembert"),iot.forEach(t),KTo=r(hwe," \u2014 "),hq=n(hwe,"A",{href:!0});var dot=s(hq);ZTo=r(dot,"RemBertForCausalLM"),dot.forEach(t),e8o=r(hwe," (RemBERT model)"),hwe.forEach(t),o8o=i(q),g1=n(q,"LI",{});var pwe=s(g1);Sse=n(pwe,"STRONG",{});var cot=s(Sse);r8o=r(cot,"roberta"),cot.forEach(t),t8o=r(pwe," \u2014 "),pq=n(pwe,"A",{href:!0});var fot=s(pq);a8o=r(fot,"RobertaForCausalLM"),fot.forEach(t),n8o=r(pwe," (RoBERTa model)"),pwe.forEach(t),s8o=i(q),h1=n(q,"LI",{});var _we=s(h1);Rse=n(_we,"STRONG",{});var mot=s(Rse);l8o=r(mot,"roformer"),mot.forEach(t),i8o=r(_we," \u2014 "),_q=n(_we,"A",{href:!0});var got=s(_q);d8o=r(got,"RoFormerForCausalLM"),got.forEach(t),c8o=r(_we," (RoFormer model)"),_we.forEach(t),f8o=i(q),p1=n(q,"LI",{});var uwe=s(p1);Bse=n(uwe,"STRONG",{});var hot=s(Bse);m8o=r(hot,"speech_to_text_2"),hot.forEach(t),g8o=r(uwe," \u2014 "),uq=n(uwe,"A",{href:!0});var pot=s(uq);h8o=r(pot,"Speech2Text2ForCausalLM"),pot.forEach(t),p8o=r(uwe," (Speech2Text2 model)"),uwe.forEach(t),_8o=i(q),_1=n(q,"LI",{});var bwe=s(_1);Pse=n(bwe,"STRONG",{});var _ot=s(Pse);u8o=r(_ot,"transfo-xl"),_ot.forEach(t),b8o=r(bwe," \u2014 "),bq=n(bwe,"A",{href:!0});var uot=s(bq);v8o=r(uot,"TransfoXLLMHeadModel"),uot.forEach(t),F8o=r(bwe," (Transformer-XL model)"),bwe.forEach(t),T8o=i(q),u1=n(q,"LI",{});var vwe=s(u1);$se=n(vwe,"STRONG",{});var bot=s($se);M8o=r(bot,"trocr"),bot.forEach(t),E8o=r(vwe," \u2014 "),vq=n(vwe,"A",{href:!0});var vot=s(vq);C8o=r(vot,"TrOCRForCausalLM"),vot.forEach(t),w8o=r(vwe," (TrOCR model)"),vwe.forEach(t),A8o=i(q),b1=n(q,"LI",{});var Fwe=s(b1);Ise=n(Fwe,"STRONG",{});var Fot=s(Ise);y8o=r(Fot,"xglm"),Fot.forEach(t),L8o=r(Fwe," \u2014 "),Fq=n(Fwe,"A",{href:!0});var Tot=s(Fq);x8o=r(Tot,"XGLMForCausalLM"),Tot.forEach(t),k8o=r(Fwe," (XGLM model)"),Fwe.forEach(t),S8o=i(q),v1=n(q,"LI",{});var Twe=s(v1);qse=n(Twe,"STRONG",{});var Mot=s(qse);R8o=r(Mot,"xlm"),Mot.forEach(t),B8o=r(Twe," \u2014 "),Tq=n(Twe,"A",{href:!0});var Eot=s(Tq);P8o=r(Eot,"XLMWithLMHeadModel"),Eot.forEach(t),$8o=r(Twe," (XLM model)"),Twe.forEach(t),I8o=i(q),F1=n(q,"LI",{});var Mwe=s(F1);Nse=n(Mwe,"STRONG",{});var Cot=s(Nse);q8o=r(Cot,"xlm-prophetnet"),Cot.forEach(t),N8o=r(Mwe," \u2014 "),Mq=n(Mwe,"A",{href:!0});var wot=s(Mq);j8o=r(wot,"XLMProphetNetForCausalLM"),wot.forEach(t),D8o=r(Mwe," (XLMProphetNet model)"),Mwe.forEach(t),G8o=i(q),T1=n(q,"LI",{});var Ewe=s(T1);jse=n(Ewe,"STRONG",{});var Aot=s(jse);O8o=r(Aot,"xlm-roberta"),Aot.forEach(t),V8o=r(Ewe," \u2014 "),Eq=n(Ewe,"A",{href:!0});var yot=s(Eq);X8o=r(yot,"XLMRobertaForCausalLM"),yot.forEach(t),z8o=r(Ewe," (XLM-RoBERTa model)"),Ewe.forEach(t),Q8o=i(q),M1=n(q,"LI",{});var Cwe=s(M1);Dse=n(Cwe,"STRONG",{});var Lot=s(Dse);W8o=r(Lot,"xlm-roberta-xl"),Lot.forEach(t),H8o=r(Cwe," \u2014 "),Cq=n(Cwe,"A",{href:!0});var xot=s(Cq);U8o=r(xot,"XLMRobertaXLForCausalLM"),xot.forEach(t),J8o=r(Cwe," (XLM-RoBERTa-XL model)"),Cwe.forEach(t),Y8o=i(q),E1=n(q,"LI",{});var wwe=s(E1);Gse=n(wwe,"STRONG",{});var kot=s(Gse);K8o=r(kot,"xlnet"),kot.forEach(t),Z8o=r(wwe," \u2014 "),wq=n(wwe,"A",{href:!0});var Sot=s(wq);e7o=r(Sot,"XLNetLMHeadModel"),Sot.forEach(t),o7o=r(wwe," (XLNet model)"),wwe.forEach(t),q.forEach(t),r7o=i(Ot),C1=n(Ot,"P",{});var Awe=s(C1);t7o=r(Awe,"The model is set in evaluation mode by default using "),Ose=n(Awe,"CODE",{});var Rot=s(Ose);a7o=r(Rot,"model.eval()"),Rot.forEach(t),n7o=r(Awe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vse=n(Awe,"CODE",{});var Bot=s(Vse);s7o=r(Bot,"model.train()"),Bot.forEach(t),Awe.forEach(t),l7o=i(Ot),Xse=n(Ot,"P",{});var Pot=s(Xse);i7o=r(Pot,"Examples:"),Pot.forEach(t),d7o=i(Ot),m(Q3.$$.fragment,Ot),Ot.forEach(t),nl.forEach(t),MPe=i(c),hd=n(c,"H2",{class:!0});var SIe=s(hd);w1=n(SIe,"A",{id:!0,class:!0,href:!0});var $ot=s(w1);zse=n($ot,"SPAN",{});var Iot=s(zse);m(W3.$$.fragment,Iot),Iot.forEach(t),$ot.forEach(t),c7o=i(SIe),Qse=n(SIe,"SPAN",{});var qot=s(Qse);f7o=r(qot,"AutoModelForMaskedLM"),qot.forEach(t),SIe.forEach(t),EPe=i(c),Zo=n(c,"DIV",{class:!0});var ll=s(Zo);m(H3.$$.fragment,ll),m7o=i(ll),pd=n(ll,"P",{});var CJ=s(pd);g7o=r(CJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Aq=n(CJ,"A",{href:!0});var Not=s(Aq);h7o=r(Not,"from_pretrained()"),Not.forEach(t),p7o=r(CJ," class method or the "),yq=n(CJ,"A",{href:!0});var jot=s(yq);_7o=r(jot,"from_config()"),jot.forEach(t),u7o=r(CJ,` class
method.`),CJ.forEach(t),b7o=i(ll),U3=n(ll,"P",{});var RIe=s(U3);v7o=r(RIe,"This class cannot be instantiated directly using "),Wse=n(RIe,"CODE",{});var Dot=s(Wse);F7o=r(Dot,"__init__()"),Dot.forEach(t),T7o=r(RIe," (throws an error)."),RIe.forEach(t),M7o=i(ll),Wr=n(ll,"DIV",{class:!0});var il=s(Wr);m(J3.$$.fragment,il),E7o=i(il),Hse=n(il,"P",{});var Got=s(Hse);C7o=r(Got,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Got.forEach(t),w7o=i(il),_d=n(il,"P",{});var wJ=s(_d);A7o=r(wJ,`Note:
Loading a model from its configuration file does `),Use=n(wJ,"STRONG",{});var Oot=s(Use);y7o=r(Oot,"not"),Oot.forEach(t),L7o=r(wJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Lq=n(wJ,"A",{href:!0});var Vot=s(Lq);x7o=r(Vot,"from_pretrained()"),Vot.forEach(t),k7o=r(wJ," to load the model weights."),wJ.forEach(t),S7o=i(il),Jse=n(il,"P",{});var Xot=s(Jse);R7o=r(Xot,"Examples:"),Xot.forEach(t),B7o=i(il),m(Y3.$$.fragment,il),il.forEach(t),P7o=i(ll),Ge=n(ll,"DIV",{class:!0});var Vt=s(Ge);m(K3.$$.fragment,Vt),$7o=i(Vt),Yse=n(Vt,"P",{});var zot=s(Yse);I7o=r(zot,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zot.forEach(t),q7o=i(Vt),Wa=n(Vt,"P",{});var K4=s(Wa);N7o=r(K4,"The model class to instantiate is selected based on the "),Kse=n(K4,"CODE",{});var Qot=s(Kse);j7o=r(Qot,"model_type"),Qot.forEach(t),D7o=r(K4,` property of the config object (either
passed as an argument or loaded from `),Zse=n(K4,"CODE",{});var Wot=s(Zse);G7o=r(Wot,"pretrained_model_name_or_path"),Wot.forEach(t),O7o=r(K4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(K4,"CODE",{});var Hot=s(ele);V7o=r(Hot,"pretrained_model_name_or_path"),Hot.forEach(t),X7o=r(K4,":"),K4.forEach(t),z7o=i(Vt),I=n(Vt,"UL",{});var N=s(I);A1=n(N,"LI",{});var ywe=s(A1);ole=n(ywe,"STRONG",{});var Uot=s(ole);Q7o=r(Uot,"albert"),Uot.forEach(t),W7o=r(ywe," \u2014 "),xq=n(ywe,"A",{href:!0});var Jot=s(xq);H7o=r(Jot,"AlbertForMaskedLM"),Jot.forEach(t),U7o=r(ywe," (ALBERT model)"),ywe.forEach(t),J7o=i(N),y1=n(N,"LI",{});var Lwe=s(y1);rle=n(Lwe,"STRONG",{});var Yot=s(rle);Y7o=r(Yot,"bart"),Yot.forEach(t),K7o=r(Lwe," \u2014 "),kq=n(Lwe,"A",{href:!0});var Kot=s(kq);Z7o=r(Kot,"BartForConditionalGeneration"),Kot.forEach(t),eMo=r(Lwe," (BART model)"),Lwe.forEach(t),oMo=i(N),L1=n(N,"LI",{});var xwe=s(L1);tle=n(xwe,"STRONG",{});var Zot=s(tle);rMo=r(Zot,"bert"),Zot.forEach(t),tMo=r(xwe," \u2014 "),Sq=n(xwe,"A",{href:!0});var ert=s(Sq);aMo=r(ert,"BertForMaskedLM"),ert.forEach(t),nMo=r(xwe," (BERT model)"),xwe.forEach(t),sMo=i(N),x1=n(N,"LI",{});var kwe=s(x1);ale=n(kwe,"STRONG",{});var ort=s(ale);lMo=r(ort,"big_bird"),ort.forEach(t),iMo=r(kwe," \u2014 "),Rq=n(kwe,"A",{href:!0});var rrt=s(Rq);dMo=r(rrt,"BigBirdForMaskedLM"),rrt.forEach(t),cMo=r(kwe," (BigBird model)"),kwe.forEach(t),fMo=i(N),k1=n(N,"LI",{});var Swe=s(k1);nle=n(Swe,"STRONG",{});var trt=s(nle);mMo=r(trt,"camembert"),trt.forEach(t),gMo=r(Swe," \u2014 "),Bq=n(Swe,"A",{href:!0});var art=s(Bq);hMo=r(art,"CamembertForMaskedLM"),art.forEach(t),pMo=r(Swe," (CamemBERT model)"),Swe.forEach(t),_Mo=i(N),S1=n(N,"LI",{});var Rwe=s(S1);sle=n(Rwe,"STRONG",{});var nrt=s(sle);uMo=r(nrt,"convbert"),nrt.forEach(t),bMo=r(Rwe," \u2014 "),Pq=n(Rwe,"A",{href:!0});var srt=s(Pq);vMo=r(srt,"ConvBertForMaskedLM"),srt.forEach(t),FMo=r(Rwe," (ConvBERT model)"),Rwe.forEach(t),TMo=i(N),R1=n(N,"LI",{});var Bwe=s(R1);lle=n(Bwe,"STRONG",{});var lrt=s(lle);MMo=r(lrt,"data2vec-text"),lrt.forEach(t),EMo=r(Bwe," \u2014 "),$q=n(Bwe,"A",{href:!0});var irt=s($q);CMo=r(irt,"Data2VecTextForMaskedLM"),irt.forEach(t),wMo=r(Bwe," (Data2VecText model)"),Bwe.forEach(t),AMo=i(N),B1=n(N,"LI",{});var Pwe=s(B1);ile=n(Pwe,"STRONG",{});var drt=s(ile);yMo=r(drt,"deberta"),drt.forEach(t),LMo=r(Pwe," \u2014 "),Iq=n(Pwe,"A",{href:!0});var crt=s(Iq);xMo=r(crt,"DebertaForMaskedLM"),crt.forEach(t),kMo=r(Pwe," (DeBERTa model)"),Pwe.forEach(t),SMo=i(N),P1=n(N,"LI",{});var $we=s(P1);dle=n($we,"STRONG",{});var frt=s(dle);RMo=r(frt,"deberta-v2"),frt.forEach(t),BMo=r($we," \u2014 "),qq=n($we,"A",{href:!0});var mrt=s(qq);PMo=r(mrt,"DebertaV2ForMaskedLM"),mrt.forEach(t),$Mo=r($we," (DeBERTa-v2 model)"),$we.forEach(t),IMo=i(N),$1=n(N,"LI",{});var Iwe=s($1);cle=n(Iwe,"STRONG",{});var grt=s(cle);qMo=r(grt,"distilbert"),grt.forEach(t),NMo=r(Iwe," \u2014 "),Nq=n(Iwe,"A",{href:!0});var hrt=s(Nq);jMo=r(hrt,"DistilBertForMaskedLM"),hrt.forEach(t),DMo=r(Iwe," (DistilBERT model)"),Iwe.forEach(t),GMo=i(N),I1=n(N,"LI",{});var qwe=s(I1);fle=n(qwe,"STRONG",{});var prt=s(fle);OMo=r(prt,"electra"),prt.forEach(t),VMo=r(qwe," \u2014 "),jq=n(qwe,"A",{href:!0});var _rt=s(jq);XMo=r(_rt,"ElectraForMaskedLM"),_rt.forEach(t),zMo=r(qwe," (ELECTRA model)"),qwe.forEach(t),QMo=i(N),q1=n(N,"LI",{});var Nwe=s(q1);mle=n(Nwe,"STRONG",{});var urt=s(mle);WMo=r(urt,"flaubert"),urt.forEach(t),HMo=r(Nwe," \u2014 "),Dq=n(Nwe,"A",{href:!0});var brt=s(Dq);UMo=r(brt,"FlaubertWithLMHeadModel"),brt.forEach(t),JMo=r(Nwe," (FlauBERT model)"),Nwe.forEach(t),YMo=i(N),N1=n(N,"LI",{});var jwe=s(N1);gle=n(jwe,"STRONG",{});var vrt=s(gle);KMo=r(vrt,"fnet"),vrt.forEach(t),ZMo=r(jwe," \u2014 "),Gq=n(jwe,"A",{href:!0});var Frt=s(Gq);e4o=r(Frt,"FNetForMaskedLM"),Frt.forEach(t),o4o=r(jwe," (FNet model)"),jwe.forEach(t),r4o=i(N),j1=n(N,"LI",{});var Dwe=s(j1);hle=n(Dwe,"STRONG",{});var Trt=s(hle);t4o=r(Trt,"funnel"),Trt.forEach(t),a4o=r(Dwe," \u2014 "),Oq=n(Dwe,"A",{href:!0});var Mrt=s(Oq);n4o=r(Mrt,"FunnelForMaskedLM"),Mrt.forEach(t),s4o=r(Dwe," (Funnel Transformer model)"),Dwe.forEach(t),l4o=i(N),D1=n(N,"LI",{});var Gwe=s(D1);ple=n(Gwe,"STRONG",{});var Ert=s(ple);i4o=r(Ert,"ibert"),Ert.forEach(t),d4o=r(Gwe," \u2014 "),Vq=n(Gwe,"A",{href:!0});var Crt=s(Vq);c4o=r(Crt,"IBertForMaskedLM"),Crt.forEach(t),f4o=r(Gwe," (I-BERT model)"),Gwe.forEach(t),m4o=i(N),G1=n(N,"LI",{});var Owe=s(G1);_le=n(Owe,"STRONG",{});var wrt=s(_le);g4o=r(wrt,"layoutlm"),wrt.forEach(t),h4o=r(Owe," \u2014 "),Xq=n(Owe,"A",{href:!0});var Art=s(Xq);p4o=r(Art,"LayoutLMForMaskedLM"),Art.forEach(t),_4o=r(Owe," (LayoutLM model)"),Owe.forEach(t),u4o=i(N),O1=n(N,"LI",{});var Vwe=s(O1);ule=n(Vwe,"STRONG",{});var yrt=s(ule);b4o=r(yrt,"longformer"),yrt.forEach(t),v4o=r(Vwe," \u2014 "),zq=n(Vwe,"A",{href:!0});var Lrt=s(zq);F4o=r(Lrt,"LongformerForMaskedLM"),Lrt.forEach(t),T4o=r(Vwe," (Longformer model)"),Vwe.forEach(t),M4o=i(N),V1=n(N,"LI",{});var Xwe=s(V1);ble=n(Xwe,"STRONG",{});var xrt=s(ble);E4o=r(xrt,"mbart"),xrt.forEach(t),C4o=r(Xwe," \u2014 "),Qq=n(Xwe,"A",{href:!0});var krt=s(Qq);w4o=r(krt,"MBartForConditionalGeneration"),krt.forEach(t),A4o=r(Xwe," (mBART model)"),Xwe.forEach(t),y4o=i(N),X1=n(N,"LI",{});var zwe=s(X1);vle=n(zwe,"STRONG",{});var Srt=s(vle);L4o=r(Srt,"megatron-bert"),Srt.forEach(t),x4o=r(zwe," \u2014 "),Wq=n(zwe,"A",{href:!0});var Rrt=s(Wq);k4o=r(Rrt,"MegatronBertForMaskedLM"),Rrt.forEach(t),S4o=r(zwe," (MegatronBert model)"),zwe.forEach(t),R4o=i(N),z1=n(N,"LI",{});var Qwe=s(z1);Fle=n(Qwe,"STRONG",{});var Brt=s(Fle);B4o=r(Brt,"mobilebert"),Brt.forEach(t),P4o=r(Qwe," \u2014 "),Hq=n(Qwe,"A",{href:!0});var Prt=s(Hq);$4o=r(Prt,"MobileBertForMaskedLM"),Prt.forEach(t),I4o=r(Qwe," (MobileBERT model)"),Qwe.forEach(t),q4o=i(N),Q1=n(N,"LI",{});var Wwe=s(Q1);Tle=n(Wwe,"STRONG",{});var $rt=s(Tle);N4o=r($rt,"mpnet"),$rt.forEach(t),j4o=r(Wwe," \u2014 "),Uq=n(Wwe,"A",{href:!0});var Irt=s(Uq);D4o=r(Irt,"MPNetForMaskedLM"),Irt.forEach(t),G4o=r(Wwe," (MPNet model)"),Wwe.forEach(t),O4o=i(N),W1=n(N,"LI",{});var Hwe=s(W1);Mle=n(Hwe,"STRONG",{});var qrt=s(Mle);V4o=r(qrt,"nystromformer"),qrt.forEach(t),X4o=r(Hwe," \u2014 "),Jq=n(Hwe,"A",{href:!0});var Nrt=s(Jq);z4o=r(Nrt,"NystromformerForMaskedLM"),Nrt.forEach(t),Q4o=r(Hwe," (Nystromformer model)"),Hwe.forEach(t),W4o=i(N),H1=n(N,"LI",{});var Uwe=s(H1);Ele=n(Uwe,"STRONG",{});var jrt=s(Ele);H4o=r(jrt,"perceiver"),jrt.forEach(t),U4o=r(Uwe," \u2014 "),Yq=n(Uwe,"A",{href:!0});var Drt=s(Yq);J4o=r(Drt,"PerceiverForMaskedLM"),Drt.forEach(t),Y4o=r(Uwe," (Perceiver model)"),Uwe.forEach(t),K4o=i(N),U1=n(N,"LI",{});var Jwe=s(U1);Cle=n(Jwe,"STRONG",{});var Grt=s(Cle);Z4o=r(Grt,"qdqbert"),Grt.forEach(t),eEo=r(Jwe," \u2014 "),Kq=n(Jwe,"A",{href:!0});var Ort=s(Kq);oEo=r(Ort,"QDQBertForMaskedLM"),Ort.forEach(t),rEo=r(Jwe," (QDQBert model)"),Jwe.forEach(t),tEo=i(N),J1=n(N,"LI",{});var Ywe=s(J1);wle=n(Ywe,"STRONG",{});var Vrt=s(wle);aEo=r(Vrt,"reformer"),Vrt.forEach(t),nEo=r(Ywe," \u2014 "),Zq=n(Ywe,"A",{href:!0});var Xrt=s(Zq);sEo=r(Xrt,"ReformerForMaskedLM"),Xrt.forEach(t),lEo=r(Ywe," (Reformer model)"),Ywe.forEach(t),iEo=i(N),Y1=n(N,"LI",{});var Kwe=s(Y1);Ale=n(Kwe,"STRONG",{});var zrt=s(Ale);dEo=r(zrt,"rembert"),zrt.forEach(t),cEo=r(Kwe," \u2014 "),eN=n(Kwe,"A",{href:!0});var Qrt=s(eN);fEo=r(Qrt,"RemBertForMaskedLM"),Qrt.forEach(t),mEo=r(Kwe," (RemBERT model)"),Kwe.forEach(t),gEo=i(N),K1=n(N,"LI",{});var Zwe=s(K1);yle=n(Zwe,"STRONG",{});var Wrt=s(yle);hEo=r(Wrt,"roberta"),Wrt.forEach(t),pEo=r(Zwe," \u2014 "),oN=n(Zwe,"A",{href:!0});var Hrt=s(oN);_Eo=r(Hrt,"RobertaForMaskedLM"),Hrt.forEach(t),uEo=r(Zwe," (RoBERTa model)"),Zwe.forEach(t),bEo=i(N),Z1=n(N,"LI",{});var eAe=s(Z1);Lle=n(eAe,"STRONG",{});var Urt=s(Lle);vEo=r(Urt,"roformer"),Urt.forEach(t),FEo=r(eAe," \u2014 "),rN=n(eAe,"A",{href:!0});var Jrt=s(rN);TEo=r(Jrt,"RoFormerForMaskedLM"),Jrt.forEach(t),MEo=r(eAe," (RoFormer model)"),eAe.forEach(t),EEo=i(N),eb=n(N,"LI",{});var oAe=s(eb);xle=n(oAe,"STRONG",{});var Yrt=s(xle);CEo=r(Yrt,"squeezebert"),Yrt.forEach(t),wEo=r(oAe," \u2014 "),tN=n(oAe,"A",{href:!0});var Krt=s(tN);AEo=r(Krt,"SqueezeBertForMaskedLM"),Krt.forEach(t),yEo=r(oAe," (SqueezeBERT model)"),oAe.forEach(t),LEo=i(N),ob=n(N,"LI",{});var rAe=s(ob);kle=n(rAe,"STRONG",{});var Zrt=s(kle);xEo=r(Zrt,"tapas"),Zrt.forEach(t),kEo=r(rAe," \u2014 "),aN=n(rAe,"A",{href:!0});var ett=s(aN);SEo=r(ett,"TapasForMaskedLM"),ett.forEach(t),REo=r(rAe," (TAPAS model)"),rAe.forEach(t),BEo=i(N),rb=n(N,"LI",{});var tAe=s(rb);Sle=n(tAe,"STRONG",{});var ott=s(Sle);PEo=r(ott,"wav2vec2"),ott.forEach(t),$Eo=r(tAe," \u2014 "),Rle=n(tAe,"CODE",{});var rtt=s(Rle);IEo=r(rtt,"Wav2Vec2ForMaskedLM"),rtt.forEach(t),qEo=r(tAe," (Wav2Vec2 model)"),tAe.forEach(t),NEo=i(N),tb=n(N,"LI",{});var aAe=s(tb);Ble=n(aAe,"STRONG",{});var ttt=s(Ble);jEo=r(ttt,"xlm"),ttt.forEach(t),DEo=r(aAe," \u2014 "),nN=n(aAe,"A",{href:!0});var att=s(nN);GEo=r(att,"XLMWithLMHeadModel"),att.forEach(t),OEo=r(aAe," (XLM model)"),aAe.forEach(t),VEo=i(N),ab=n(N,"LI",{});var nAe=s(ab);Ple=n(nAe,"STRONG",{});var ntt=s(Ple);XEo=r(ntt,"xlm-roberta"),ntt.forEach(t),zEo=r(nAe," \u2014 "),sN=n(nAe,"A",{href:!0});var stt=s(sN);QEo=r(stt,"XLMRobertaForMaskedLM"),stt.forEach(t),WEo=r(nAe," (XLM-RoBERTa model)"),nAe.forEach(t),HEo=i(N),nb=n(N,"LI",{});var sAe=s(nb);$le=n(sAe,"STRONG",{});var ltt=s($le);UEo=r(ltt,"xlm-roberta-xl"),ltt.forEach(t),JEo=r(sAe," \u2014 "),lN=n(sAe,"A",{href:!0});var itt=s(lN);YEo=r(itt,"XLMRobertaXLForMaskedLM"),itt.forEach(t),KEo=r(sAe," (XLM-RoBERTa-XL model)"),sAe.forEach(t),ZEo=i(N),sb=n(N,"LI",{});var lAe=s(sb);Ile=n(lAe,"STRONG",{});var dtt=s(Ile);e3o=r(dtt,"yoso"),dtt.forEach(t),o3o=r(lAe," \u2014 "),iN=n(lAe,"A",{href:!0});var ctt=s(iN);r3o=r(ctt,"YosoForMaskedLM"),ctt.forEach(t),t3o=r(lAe," (YOSO model)"),lAe.forEach(t),N.forEach(t),a3o=i(Vt),lb=n(Vt,"P",{});var iAe=s(lb);n3o=r(iAe,"The model is set in evaluation mode by default using "),qle=n(iAe,"CODE",{});var ftt=s(qle);s3o=r(ftt,"model.eval()"),ftt.forEach(t),l3o=r(iAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nle=n(iAe,"CODE",{});var mtt=s(Nle);i3o=r(mtt,"model.train()"),mtt.forEach(t),iAe.forEach(t),d3o=i(Vt),jle=n(Vt,"P",{});var gtt=s(jle);c3o=r(gtt,"Examples:"),gtt.forEach(t),f3o=i(Vt),m(Z3.$$.fragment,Vt),Vt.forEach(t),ll.forEach(t),CPe=i(c),ud=n(c,"H2",{class:!0});var BIe=s(ud);ib=n(BIe,"A",{id:!0,class:!0,href:!0});var htt=s(ib);Dle=n(htt,"SPAN",{});var ptt=s(Dle);m(eC.$$.fragment,ptt),ptt.forEach(t),htt.forEach(t),m3o=i(BIe),Gle=n(BIe,"SPAN",{});var _tt=s(Gle);g3o=r(_tt,"AutoModelForSeq2SeqLM"),_tt.forEach(t),BIe.forEach(t),wPe=i(c),er=n(c,"DIV",{class:!0});var dl=s(er);m(oC.$$.fragment,dl),h3o=i(dl),bd=n(dl,"P",{});var AJ=s(bd);p3o=r(AJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),dN=n(AJ,"A",{href:!0});var utt=s(dN);_3o=r(utt,"from_pretrained()"),utt.forEach(t),u3o=r(AJ," class method or the "),cN=n(AJ,"A",{href:!0});var btt=s(cN);b3o=r(btt,"from_config()"),btt.forEach(t),v3o=r(AJ,` class
method.`),AJ.forEach(t),F3o=i(dl),rC=n(dl,"P",{});var PIe=s(rC);T3o=r(PIe,"This class cannot be instantiated directly using "),Ole=n(PIe,"CODE",{});var vtt=s(Ole);M3o=r(vtt,"__init__()"),vtt.forEach(t),E3o=r(PIe," (throws an error)."),PIe.forEach(t),C3o=i(dl),Hr=n(dl,"DIV",{class:!0});var cl=s(Hr);m(tC.$$.fragment,cl),w3o=i(cl),Vle=n(cl,"P",{});var Ftt=s(Vle);A3o=r(Ftt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Ftt.forEach(t),y3o=i(cl),vd=n(cl,"P",{});var yJ=s(vd);L3o=r(yJ,`Note:
Loading a model from its configuration file does `),Xle=n(yJ,"STRONG",{});var Ttt=s(Xle);x3o=r(Ttt,"not"),Ttt.forEach(t),k3o=r(yJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fN=n(yJ,"A",{href:!0});var Mtt=s(fN);S3o=r(Mtt,"from_pretrained()"),Mtt.forEach(t),R3o=r(yJ," to load the model weights."),yJ.forEach(t),B3o=i(cl),zle=n(cl,"P",{});var Ett=s(zle);P3o=r(Ett,"Examples:"),Ett.forEach(t),$3o=i(cl),m(aC.$$.fragment,cl),cl.forEach(t),I3o=i(dl),Oe=n(dl,"DIV",{class:!0});var Xt=s(Oe);m(nC.$$.fragment,Xt),q3o=i(Xt),Qle=n(Xt,"P",{});var Ctt=s(Qle);N3o=r(Ctt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Ctt.forEach(t),j3o=i(Xt),Ha=n(Xt,"P",{});var Z4=s(Ha);D3o=r(Z4,"The model class to instantiate is selected based on the "),Wle=n(Z4,"CODE",{});var wtt=s(Wle);G3o=r(wtt,"model_type"),wtt.forEach(t),O3o=r(Z4,` property of the config object (either
passed as an argument or loaded from `),Hle=n(Z4,"CODE",{});var Att=s(Hle);V3o=r(Att,"pretrained_model_name_or_path"),Att.forEach(t),X3o=r(Z4,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ule=n(Z4,"CODE",{});var ytt=s(Ule);z3o=r(ytt,"pretrained_model_name_or_path"),ytt.forEach(t),Q3o=r(Z4,":"),Z4.forEach(t),W3o=i(Xt),ne=n(Xt,"UL",{});var le=s(ne);db=n(le,"LI",{});var dAe=s(db);Jle=n(dAe,"STRONG",{});var Ltt=s(Jle);H3o=r(Ltt,"bart"),Ltt.forEach(t),U3o=r(dAe," \u2014 "),mN=n(dAe,"A",{href:!0});var xtt=s(mN);J3o=r(xtt,"BartForConditionalGeneration"),xtt.forEach(t),Y3o=r(dAe," (BART model)"),dAe.forEach(t),K3o=i(le),cb=n(le,"LI",{});var cAe=s(cb);Yle=n(cAe,"STRONG",{});var ktt=s(Yle);Z3o=r(ktt,"bigbird_pegasus"),ktt.forEach(t),eCo=r(cAe," \u2014 "),gN=n(cAe,"A",{href:!0});var Stt=s(gN);oCo=r(Stt,"BigBirdPegasusForConditionalGeneration"),Stt.forEach(t),rCo=r(cAe," (BigBirdPegasus model)"),cAe.forEach(t),tCo=i(le),fb=n(le,"LI",{});var fAe=s(fb);Kle=n(fAe,"STRONG",{});var Rtt=s(Kle);aCo=r(Rtt,"blenderbot"),Rtt.forEach(t),nCo=r(fAe," \u2014 "),hN=n(fAe,"A",{href:!0});var Btt=s(hN);sCo=r(Btt,"BlenderbotForConditionalGeneration"),Btt.forEach(t),lCo=r(fAe," (Blenderbot model)"),fAe.forEach(t),iCo=i(le),mb=n(le,"LI",{});var mAe=s(mb);Zle=n(mAe,"STRONG",{});var Ptt=s(Zle);dCo=r(Ptt,"blenderbot-small"),Ptt.forEach(t),cCo=r(mAe," \u2014 "),pN=n(mAe,"A",{href:!0});var $tt=s(pN);fCo=r($tt,"BlenderbotSmallForConditionalGeneration"),$tt.forEach(t),mCo=r(mAe," (BlenderbotSmall model)"),mAe.forEach(t),gCo=i(le),gb=n(le,"LI",{});var gAe=s(gb);eie=n(gAe,"STRONG",{});var Itt=s(eie);hCo=r(Itt,"encoder-decoder"),Itt.forEach(t),pCo=r(gAe," \u2014 "),_N=n(gAe,"A",{href:!0});var qtt=s(_N);_Co=r(qtt,"EncoderDecoderModel"),qtt.forEach(t),uCo=r(gAe," (Encoder decoder model)"),gAe.forEach(t),bCo=i(le),hb=n(le,"LI",{});var hAe=s(hb);oie=n(hAe,"STRONG",{});var Ntt=s(oie);vCo=r(Ntt,"fsmt"),Ntt.forEach(t),FCo=r(hAe," \u2014 "),uN=n(hAe,"A",{href:!0});var jtt=s(uN);TCo=r(jtt,"FSMTForConditionalGeneration"),jtt.forEach(t),MCo=r(hAe," (FairSeq Machine-Translation model)"),hAe.forEach(t),ECo=i(le),pb=n(le,"LI",{});var pAe=s(pb);rie=n(pAe,"STRONG",{});var Dtt=s(rie);CCo=r(Dtt,"led"),Dtt.forEach(t),wCo=r(pAe," \u2014 "),bN=n(pAe,"A",{href:!0});var Gtt=s(bN);ACo=r(Gtt,"LEDForConditionalGeneration"),Gtt.forEach(t),yCo=r(pAe," (LED model)"),pAe.forEach(t),LCo=i(le),_b=n(le,"LI",{});var _Ae=s(_b);tie=n(_Ae,"STRONG",{});var Ott=s(tie);xCo=r(Ott,"m2m_100"),Ott.forEach(t),kCo=r(_Ae," \u2014 "),vN=n(_Ae,"A",{href:!0});var Vtt=s(vN);SCo=r(Vtt,"M2M100ForConditionalGeneration"),Vtt.forEach(t),RCo=r(_Ae," (M2M100 model)"),_Ae.forEach(t),BCo=i(le),ub=n(le,"LI",{});var uAe=s(ub);aie=n(uAe,"STRONG",{});var Xtt=s(aie);PCo=r(Xtt,"marian"),Xtt.forEach(t),$Co=r(uAe," \u2014 "),FN=n(uAe,"A",{href:!0});var ztt=s(FN);ICo=r(ztt,"MarianMTModel"),ztt.forEach(t),qCo=r(uAe," (Marian model)"),uAe.forEach(t),NCo=i(le),bb=n(le,"LI",{});var bAe=s(bb);nie=n(bAe,"STRONG",{});var Qtt=s(nie);jCo=r(Qtt,"mbart"),Qtt.forEach(t),DCo=r(bAe," \u2014 "),TN=n(bAe,"A",{href:!0});var Wtt=s(TN);GCo=r(Wtt,"MBartForConditionalGeneration"),Wtt.forEach(t),OCo=r(bAe," (mBART model)"),bAe.forEach(t),VCo=i(le),vb=n(le,"LI",{});var vAe=s(vb);sie=n(vAe,"STRONG",{});var Htt=s(sie);XCo=r(Htt,"mt5"),Htt.forEach(t),zCo=r(vAe," \u2014 "),MN=n(vAe,"A",{href:!0});var Utt=s(MN);QCo=r(Utt,"MT5ForConditionalGeneration"),Utt.forEach(t),WCo=r(vAe," (mT5 model)"),vAe.forEach(t),HCo=i(le),Fb=n(le,"LI",{});var FAe=s(Fb);lie=n(FAe,"STRONG",{});var Jtt=s(lie);UCo=r(Jtt,"pegasus"),Jtt.forEach(t),JCo=r(FAe," \u2014 "),EN=n(FAe,"A",{href:!0});var Ytt=s(EN);YCo=r(Ytt,"PegasusForConditionalGeneration"),Ytt.forEach(t),KCo=r(FAe," (Pegasus model)"),FAe.forEach(t),ZCo=i(le),Tb=n(le,"LI",{});var TAe=s(Tb);iie=n(TAe,"STRONG",{});var Ktt=s(iie);ewo=r(Ktt,"plbart"),Ktt.forEach(t),owo=r(TAe," \u2014 "),CN=n(TAe,"A",{href:!0});var Ztt=s(CN);rwo=r(Ztt,"PLBartForConditionalGeneration"),Ztt.forEach(t),two=r(TAe," (PLBart model)"),TAe.forEach(t),awo=i(le),Mb=n(le,"LI",{});var MAe=s(Mb);die=n(MAe,"STRONG",{});var eat=s(die);nwo=r(eat,"prophetnet"),eat.forEach(t),swo=r(MAe," \u2014 "),wN=n(MAe,"A",{href:!0});var oat=s(wN);lwo=r(oat,"ProphetNetForConditionalGeneration"),oat.forEach(t),iwo=r(MAe," (ProphetNet model)"),MAe.forEach(t),dwo=i(le),Eb=n(le,"LI",{});var EAe=s(Eb);cie=n(EAe,"STRONG",{});var rat=s(cie);cwo=r(rat,"t5"),rat.forEach(t),fwo=r(EAe," \u2014 "),AN=n(EAe,"A",{href:!0});var tat=s(AN);mwo=r(tat,"T5ForConditionalGeneration"),tat.forEach(t),gwo=r(EAe," (T5 model)"),EAe.forEach(t),hwo=i(le),Cb=n(le,"LI",{});var CAe=s(Cb);fie=n(CAe,"STRONG",{});var aat=s(fie);pwo=r(aat,"tapex"),aat.forEach(t),_wo=r(CAe," \u2014 "),yN=n(CAe,"A",{href:!0});var nat=s(yN);uwo=r(nat,"BartForConditionalGeneration"),nat.forEach(t),bwo=r(CAe," (TAPEX model)"),CAe.forEach(t),vwo=i(le),wb=n(le,"LI",{});var wAe=s(wb);mie=n(wAe,"STRONG",{});var sat=s(mie);Fwo=r(sat,"xlm-prophetnet"),sat.forEach(t),Two=r(wAe," \u2014 "),LN=n(wAe,"A",{href:!0});var lat=s(LN);Mwo=r(lat,"XLMProphetNetForConditionalGeneration"),lat.forEach(t),Ewo=r(wAe," (XLMProphetNet model)"),wAe.forEach(t),le.forEach(t),Cwo=i(Xt),Ab=n(Xt,"P",{});var AAe=s(Ab);wwo=r(AAe,"The model is set in evaluation mode by default using "),gie=n(AAe,"CODE",{});var iat=s(gie);Awo=r(iat,"model.eval()"),iat.forEach(t),ywo=r(AAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),hie=n(AAe,"CODE",{});var dat=s(hie);Lwo=r(dat,"model.train()"),dat.forEach(t),AAe.forEach(t),xwo=i(Xt),pie=n(Xt,"P",{});var cat=s(pie);kwo=r(cat,"Examples:"),cat.forEach(t),Swo=i(Xt),m(sC.$$.fragment,Xt),Xt.forEach(t),dl.forEach(t),APe=i(c),Fd=n(c,"H2",{class:!0});var $Ie=s(Fd);yb=n($Ie,"A",{id:!0,class:!0,href:!0});var fat=s(yb);_ie=n(fat,"SPAN",{});var mat=s(_ie);m(lC.$$.fragment,mat),mat.forEach(t),fat.forEach(t),Rwo=i($Ie),uie=n($Ie,"SPAN",{});var gat=s(uie);Bwo=r(gat,"AutoModelForSequenceClassification"),gat.forEach(t),$Ie.forEach(t),yPe=i(c),or=n(c,"DIV",{class:!0});var fl=s(or);m(iC.$$.fragment,fl),Pwo=i(fl),Td=n(fl,"P",{});var LJ=s(Td);$wo=r(LJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xN=n(LJ,"A",{href:!0});var hat=s(xN);Iwo=r(hat,"from_pretrained()"),hat.forEach(t),qwo=r(LJ," class method or the "),kN=n(LJ,"A",{href:!0});var pat=s(kN);Nwo=r(pat,"from_config()"),pat.forEach(t),jwo=r(LJ,` class
method.`),LJ.forEach(t),Dwo=i(fl),dC=n(fl,"P",{});var IIe=s(dC);Gwo=r(IIe,"This class cannot be instantiated directly using "),bie=n(IIe,"CODE",{});var _at=s(bie);Owo=r(_at,"__init__()"),_at.forEach(t),Vwo=r(IIe," (throws an error)."),IIe.forEach(t),Xwo=i(fl),Ur=n(fl,"DIV",{class:!0});var ml=s(Ur);m(cC.$$.fragment,ml),zwo=i(ml),vie=n(ml,"P",{});var uat=s(vie);Qwo=r(uat,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),uat.forEach(t),Wwo=i(ml),Md=n(ml,"P",{});var xJ=s(Md);Hwo=r(xJ,`Note:
Loading a model from its configuration file does `),Fie=n(xJ,"STRONG",{});var bat=s(Fie);Uwo=r(bat,"not"),bat.forEach(t),Jwo=r(xJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),SN=n(xJ,"A",{href:!0});var vat=s(SN);Ywo=r(vat,"from_pretrained()"),vat.forEach(t),Kwo=r(xJ," to load the model weights."),xJ.forEach(t),Zwo=i(ml),Tie=n(ml,"P",{});var Fat=s(Tie);eAo=r(Fat,"Examples:"),Fat.forEach(t),oAo=i(ml),m(fC.$$.fragment,ml),ml.forEach(t),rAo=i(fl),Ve=n(fl,"DIV",{class:!0});var zt=s(Ve);m(mC.$$.fragment,zt),tAo=i(zt),Mie=n(zt,"P",{});var Tat=s(Mie);aAo=r(Tat,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Tat.forEach(t),nAo=i(zt),Ua=n(zt,"P",{});var eE=s(Ua);sAo=r(eE,"The model class to instantiate is selected based on the "),Eie=n(eE,"CODE",{});var Mat=s(Eie);lAo=r(Mat,"model_type"),Mat.forEach(t),iAo=r(eE,` property of the config object (either
passed as an argument or loaded from `),Cie=n(eE,"CODE",{});var Eat=s(Cie);dAo=r(Eat,"pretrained_model_name_or_path"),Eat.forEach(t),cAo=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wie=n(eE,"CODE",{});var Cat=s(wie);fAo=r(Cat,"pretrained_model_name_or_path"),Cat.forEach(t),mAo=r(eE,":"),eE.forEach(t),gAo=i(zt),y=n(zt,"UL",{});var L=s(y);Lb=n(L,"LI",{});var yAe=s(Lb);Aie=n(yAe,"STRONG",{});var wat=s(Aie);hAo=r(wat,"albert"),wat.forEach(t),pAo=r(yAe," \u2014 "),RN=n(yAe,"A",{href:!0});var Aat=s(RN);_Ao=r(Aat,"AlbertForSequenceClassification"),Aat.forEach(t),uAo=r(yAe," (ALBERT model)"),yAe.forEach(t),bAo=i(L),xb=n(L,"LI",{});var LAe=s(xb);yie=n(LAe,"STRONG",{});var yat=s(yie);vAo=r(yat,"bart"),yat.forEach(t),FAo=r(LAe," \u2014 "),BN=n(LAe,"A",{href:!0});var Lat=s(BN);TAo=r(Lat,"BartForSequenceClassification"),Lat.forEach(t),MAo=r(LAe," (BART model)"),LAe.forEach(t),EAo=i(L),kb=n(L,"LI",{});var xAe=s(kb);Lie=n(xAe,"STRONG",{});var xat=s(Lie);CAo=r(xat,"bert"),xat.forEach(t),wAo=r(xAe," \u2014 "),PN=n(xAe,"A",{href:!0});var kat=s(PN);AAo=r(kat,"BertForSequenceClassification"),kat.forEach(t),yAo=r(xAe," (BERT model)"),xAe.forEach(t),LAo=i(L),Sb=n(L,"LI",{});var kAe=s(Sb);xie=n(kAe,"STRONG",{});var Sat=s(xie);xAo=r(Sat,"big_bird"),Sat.forEach(t),kAo=r(kAe," \u2014 "),$N=n(kAe,"A",{href:!0});var Rat=s($N);SAo=r(Rat,"BigBirdForSequenceClassification"),Rat.forEach(t),RAo=r(kAe," (BigBird model)"),kAe.forEach(t),BAo=i(L),Rb=n(L,"LI",{});var SAe=s(Rb);kie=n(SAe,"STRONG",{});var Bat=s(kie);PAo=r(Bat,"bigbird_pegasus"),Bat.forEach(t),$Ao=r(SAe," \u2014 "),IN=n(SAe,"A",{href:!0});var Pat=s(IN);IAo=r(Pat,"BigBirdPegasusForSequenceClassification"),Pat.forEach(t),qAo=r(SAe," (BigBirdPegasus model)"),SAe.forEach(t),NAo=i(L),Bb=n(L,"LI",{});var RAe=s(Bb);Sie=n(RAe,"STRONG",{});var $at=s(Sie);jAo=r($at,"camembert"),$at.forEach(t),DAo=r(RAe," \u2014 "),qN=n(RAe,"A",{href:!0});var Iat=s(qN);GAo=r(Iat,"CamembertForSequenceClassification"),Iat.forEach(t),OAo=r(RAe," (CamemBERT model)"),RAe.forEach(t),VAo=i(L),Pb=n(L,"LI",{});var BAe=s(Pb);Rie=n(BAe,"STRONG",{});var qat=s(Rie);XAo=r(qat,"canine"),qat.forEach(t),zAo=r(BAe," \u2014 "),NN=n(BAe,"A",{href:!0});var Nat=s(NN);QAo=r(Nat,"CanineForSequenceClassification"),Nat.forEach(t),WAo=r(BAe," (Canine model)"),BAe.forEach(t),HAo=i(L),$b=n(L,"LI",{});var PAe=s($b);Bie=n(PAe,"STRONG",{});var jat=s(Bie);UAo=r(jat,"convbert"),jat.forEach(t),JAo=r(PAe," \u2014 "),jN=n(PAe,"A",{href:!0});var Dat=s(jN);YAo=r(Dat,"ConvBertForSequenceClassification"),Dat.forEach(t),KAo=r(PAe," (ConvBERT model)"),PAe.forEach(t),ZAo=i(L),Ib=n(L,"LI",{});var $Ae=s(Ib);Pie=n($Ae,"STRONG",{});var Gat=s(Pie);e0o=r(Gat,"ctrl"),Gat.forEach(t),o0o=r($Ae," \u2014 "),DN=n($Ae,"A",{href:!0});var Oat=s(DN);r0o=r(Oat,"CTRLForSequenceClassification"),Oat.forEach(t),t0o=r($Ae," (CTRL model)"),$Ae.forEach(t),a0o=i(L),qb=n(L,"LI",{});var IAe=s(qb);$ie=n(IAe,"STRONG",{});var Vat=s($ie);n0o=r(Vat,"data2vec-text"),Vat.forEach(t),s0o=r(IAe," \u2014 "),GN=n(IAe,"A",{href:!0});var Xat=s(GN);l0o=r(Xat,"Data2VecTextForSequenceClassification"),Xat.forEach(t),i0o=r(IAe," (Data2VecText model)"),IAe.forEach(t),d0o=i(L),Nb=n(L,"LI",{});var qAe=s(Nb);Iie=n(qAe,"STRONG",{});var zat=s(Iie);c0o=r(zat,"deberta"),zat.forEach(t),f0o=r(qAe," \u2014 "),ON=n(qAe,"A",{href:!0});var Qat=s(ON);m0o=r(Qat,"DebertaForSequenceClassification"),Qat.forEach(t),g0o=r(qAe," (DeBERTa model)"),qAe.forEach(t),h0o=i(L),jb=n(L,"LI",{});var NAe=s(jb);qie=n(NAe,"STRONG",{});var Wat=s(qie);p0o=r(Wat,"deberta-v2"),Wat.forEach(t),_0o=r(NAe," \u2014 "),VN=n(NAe,"A",{href:!0});var Hat=s(VN);u0o=r(Hat,"DebertaV2ForSequenceClassification"),Hat.forEach(t),b0o=r(NAe," (DeBERTa-v2 model)"),NAe.forEach(t),v0o=i(L),Db=n(L,"LI",{});var jAe=s(Db);Nie=n(jAe,"STRONG",{});var Uat=s(Nie);F0o=r(Uat,"distilbert"),Uat.forEach(t),T0o=r(jAe," \u2014 "),XN=n(jAe,"A",{href:!0});var Jat=s(XN);M0o=r(Jat,"DistilBertForSequenceClassification"),Jat.forEach(t),E0o=r(jAe," (DistilBERT model)"),jAe.forEach(t),C0o=i(L),Gb=n(L,"LI",{});var DAe=s(Gb);jie=n(DAe,"STRONG",{});var Yat=s(jie);w0o=r(Yat,"electra"),Yat.forEach(t),A0o=r(DAe," \u2014 "),zN=n(DAe,"A",{href:!0});var Kat=s(zN);y0o=r(Kat,"ElectraForSequenceClassification"),Kat.forEach(t),L0o=r(DAe," (ELECTRA model)"),DAe.forEach(t),x0o=i(L),Ob=n(L,"LI",{});var GAe=s(Ob);Die=n(GAe,"STRONG",{});var Zat=s(Die);k0o=r(Zat,"flaubert"),Zat.forEach(t),S0o=r(GAe," \u2014 "),QN=n(GAe,"A",{href:!0});var ent=s(QN);R0o=r(ent,"FlaubertForSequenceClassification"),ent.forEach(t),B0o=r(GAe," (FlauBERT model)"),GAe.forEach(t),P0o=i(L),Vb=n(L,"LI",{});var OAe=s(Vb);Gie=n(OAe,"STRONG",{});var ont=s(Gie);$0o=r(ont,"fnet"),ont.forEach(t),I0o=r(OAe," \u2014 "),WN=n(OAe,"A",{href:!0});var rnt=s(WN);q0o=r(rnt,"FNetForSequenceClassification"),rnt.forEach(t),N0o=r(OAe," (FNet model)"),OAe.forEach(t),j0o=i(L),Xb=n(L,"LI",{});var VAe=s(Xb);Oie=n(VAe,"STRONG",{});var tnt=s(Oie);D0o=r(tnt,"funnel"),tnt.forEach(t),G0o=r(VAe," \u2014 "),HN=n(VAe,"A",{href:!0});var ant=s(HN);O0o=r(ant,"FunnelForSequenceClassification"),ant.forEach(t),V0o=r(VAe," (Funnel Transformer model)"),VAe.forEach(t),X0o=i(L),zb=n(L,"LI",{});var XAe=s(zb);Vie=n(XAe,"STRONG",{});var nnt=s(Vie);z0o=r(nnt,"gpt2"),nnt.forEach(t),Q0o=r(XAe," \u2014 "),UN=n(XAe,"A",{href:!0});var snt=s(UN);W0o=r(snt,"GPT2ForSequenceClassification"),snt.forEach(t),H0o=r(XAe," (OpenAI GPT-2 model)"),XAe.forEach(t),U0o=i(L),Qb=n(L,"LI",{});var zAe=s(Qb);Xie=n(zAe,"STRONG",{});var lnt=s(Xie);J0o=r(lnt,"gpt_neo"),lnt.forEach(t),Y0o=r(zAe," \u2014 "),JN=n(zAe,"A",{href:!0});var int=s(JN);K0o=r(int,"GPTNeoForSequenceClassification"),int.forEach(t),Z0o=r(zAe," (GPT Neo model)"),zAe.forEach(t),eyo=i(L),Wb=n(L,"LI",{});var QAe=s(Wb);zie=n(QAe,"STRONG",{});var dnt=s(zie);oyo=r(dnt,"gptj"),dnt.forEach(t),ryo=r(QAe," \u2014 "),YN=n(QAe,"A",{href:!0});var cnt=s(YN);tyo=r(cnt,"GPTJForSequenceClassification"),cnt.forEach(t),ayo=r(QAe," (GPT-J model)"),QAe.forEach(t),nyo=i(L),Hb=n(L,"LI",{});var WAe=s(Hb);Qie=n(WAe,"STRONG",{});var fnt=s(Qie);syo=r(fnt,"ibert"),fnt.forEach(t),lyo=r(WAe," \u2014 "),KN=n(WAe,"A",{href:!0});var mnt=s(KN);iyo=r(mnt,"IBertForSequenceClassification"),mnt.forEach(t),dyo=r(WAe," (I-BERT model)"),WAe.forEach(t),cyo=i(L),Ub=n(L,"LI",{});var HAe=s(Ub);Wie=n(HAe,"STRONG",{});var gnt=s(Wie);fyo=r(gnt,"layoutlm"),gnt.forEach(t),myo=r(HAe," \u2014 "),ZN=n(HAe,"A",{href:!0});var hnt=s(ZN);gyo=r(hnt,"LayoutLMForSequenceClassification"),hnt.forEach(t),hyo=r(HAe," (LayoutLM model)"),HAe.forEach(t),pyo=i(L),Jb=n(L,"LI",{});var UAe=s(Jb);Hie=n(UAe,"STRONG",{});var pnt=s(Hie);_yo=r(pnt,"layoutlmv2"),pnt.forEach(t),uyo=r(UAe," \u2014 "),ej=n(UAe,"A",{href:!0});var _nt=s(ej);byo=r(_nt,"LayoutLMv2ForSequenceClassification"),_nt.forEach(t),vyo=r(UAe," (LayoutLMv2 model)"),UAe.forEach(t),Fyo=i(L),Yb=n(L,"LI",{});var JAe=s(Yb);Uie=n(JAe,"STRONG",{});var unt=s(Uie);Tyo=r(unt,"led"),unt.forEach(t),Myo=r(JAe," \u2014 "),oj=n(JAe,"A",{href:!0});var bnt=s(oj);Eyo=r(bnt,"LEDForSequenceClassification"),bnt.forEach(t),Cyo=r(JAe," (LED model)"),JAe.forEach(t),wyo=i(L),Kb=n(L,"LI",{});var YAe=s(Kb);Jie=n(YAe,"STRONG",{});var vnt=s(Jie);Ayo=r(vnt,"longformer"),vnt.forEach(t),yyo=r(YAe," \u2014 "),rj=n(YAe,"A",{href:!0});var Fnt=s(rj);Lyo=r(Fnt,"LongformerForSequenceClassification"),Fnt.forEach(t),xyo=r(YAe," (Longformer model)"),YAe.forEach(t),kyo=i(L),Zb=n(L,"LI",{});var KAe=s(Zb);Yie=n(KAe,"STRONG",{});var Tnt=s(Yie);Syo=r(Tnt,"mbart"),Tnt.forEach(t),Ryo=r(KAe," \u2014 "),tj=n(KAe,"A",{href:!0});var Mnt=s(tj);Byo=r(Mnt,"MBartForSequenceClassification"),Mnt.forEach(t),Pyo=r(KAe," (mBART model)"),KAe.forEach(t),$yo=i(L),e2=n(L,"LI",{});var ZAe=s(e2);Kie=n(ZAe,"STRONG",{});var Ent=s(Kie);Iyo=r(Ent,"megatron-bert"),Ent.forEach(t),qyo=r(ZAe," \u2014 "),aj=n(ZAe,"A",{href:!0});var Cnt=s(aj);Nyo=r(Cnt,"MegatronBertForSequenceClassification"),Cnt.forEach(t),jyo=r(ZAe," (MegatronBert model)"),ZAe.forEach(t),Dyo=i(L),o2=n(L,"LI",{});var e0e=s(o2);Zie=n(e0e,"STRONG",{});var wnt=s(Zie);Gyo=r(wnt,"mobilebert"),wnt.forEach(t),Oyo=r(e0e," \u2014 "),nj=n(e0e,"A",{href:!0});var Ant=s(nj);Vyo=r(Ant,"MobileBertForSequenceClassification"),Ant.forEach(t),Xyo=r(e0e," (MobileBERT model)"),e0e.forEach(t),zyo=i(L),r2=n(L,"LI",{});var o0e=s(r2);ede=n(o0e,"STRONG",{});var ynt=s(ede);Qyo=r(ynt,"mpnet"),ynt.forEach(t),Wyo=r(o0e," \u2014 "),sj=n(o0e,"A",{href:!0});var Lnt=s(sj);Hyo=r(Lnt,"MPNetForSequenceClassification"),Lnt.forEach(t),Uyo=r(o0e," (MPNet model)"),o0e.forEach(t),Jyo=i(L),t2=n(L,"LI",{});var r0e=s(t2);ode=n(r0e,"STRONG",{});var xnt=s(ode);Yyo=r(xnt,"nystromformer"),xnt.forEach(t),Kyo=r(r0e," \u2014 "),lj=n(r0e,"A",{href:!0});var knt=s(lj);Zyo=r(knt,"NystromformerForSequenceClassification"),knt.forEach(t),eLo=r(r0e," (Nystromformer model)"),r0e.forEach(t),oLo=i(L),a2=n(L,"LI",{});var t0e=s(a2);rde=n(t0e,"STRONG",{});var Snt=s(rde);rLo=r(Snt,"openai-gpt"),Snt.forEach(t),tLo=r(t0e," \u2014 "),ij=n(t0e,"A",{href:!0});var Rnt=s(ij);aLo=r(Rnt,"OpenAIGPTForSequenceClassification"),Rnt.forEach(t),nLo=r(t0e," (OpenAI GPT model)"),t0e.forEach(t),sLo=i(L),n2=n(L,"LI",{});var a0e=s(n2);tde=n(a0e,"STRONG",{});var Bnt=s(tde);lLo=r(Bnt,"perceiver"),Bnt.forEach(t),iLo=r(a0e," \u2014 "),dj=n(a0e,"A",{href:!0});var Pnt=s(dj);dLo=r(Pnt,"PerceiverForSequenceClassification"),Pnt.forEach(t),cLo=r(a0e," (Perceiver model)"),a0e.forEach(t),fLo=i(L),s2=n(L,"LI",{});var n0e=s(s2);ade=n(n0e,"STRONG",{});var $nt=s(ade);mLo=r($nt,"plbart"),$nt.forEach(t),gLo=r(n0e," \u2014 "),cj=n(n0e,"A",{href:!0});var Int=s(cj);hLo=r(Int,"PLBartForSequenceClassification"),Int.forEach(t),pLo=r(n0e," (PLBart model)"),n0e.forEach(t),_Lo=i(L),l2=n(L,"LI",{});var s0e=s(l2);nde=n(s0e,"STRONG",{});var qnt=s(nde);uLo=r(qnt,"qdqbert"),qnt.forEach(t),bLo=r(s0e," \u2014 "),fj=n(s0e,"A",{href:!0});var Nnt=s(fj);vLo=r(Nnt,"QDQBertForSequenceClassification"),Nnt.forEach(t),FLo=r(s0e," (QDQBert model)"),s0e.forEach(t),TLo=i(L),i2=n(L,"LI",{});var l0e=s(i2);sde=n(l0e,"STRONG",{});var jnt=s(sde);MLo=r(jnt,"reformer"),jnt.forEach(t),ELo=r(l0e," \u2014 "),mj=n(l0e,"A",{href:!0});var Dnt=s(mj);CLo=r(Dnt,"ReformerForSequenceClassification"),Dnt.forEach(t),wLo=r(l0e," (Reformer model)"),l0e.forEach(t),ALo=i(L),d2=n(L,"LI",{});var i0e=s(d2);lde=n(i0e,"STRONG",{});var Gnt=s(lde);yLo=r(Gnt,"rembert"),Gnt.forEach(t),LLo=r(i0e," \u2014 "),gj=n(i0e,"A",{href:!0});var Ont=s(gj);xLo=r(Ont,"RemBertForSequenceClassification"),Ont.forEach(t),kLo=r(i0e," (RemBERT model)"),i0e.forEach(t),SLo=i(L),c2=n(L,"LI",{});var d0e=s(c2);ide=n(d0e,"STRONG",{});var Vnt=s(ide);RLo=r(Vnt,"roberta"),Vnt.forEach(t),BLo=r(d0e," \u2014 "),hj=n(d0e,"A",{href:!0});var Xnt=s(hj);PLo=r(Xnt,"RobertaForSequenceClassification"),Xnt.forEach(t),$Lo=r(d0e," (RoBERTa model)"),d0e.forEach(t),ILo=i(L),f2=n(L,"LI",{});var c0e=s(f2);dde=n(c0e,"STRONG",{});var znt=s(dde);qLo=r(znt,"roformer"),znt.forEach(t),NLo=r(c0e," \u2014 "),pj=n(c0e,"A",{href:!0});var Qnt=s(pj);jLo=r(Qnt,"RoFormerForSequenceClassification"),Qnt.forEach(t),DLo=r(c0e," (RoFormer model)"),c0e.forEach(t),GLo=i(L),m2=n(L,"LI",{});var f0e=s(m2);cde=n(f0e,"STRONG",{});var Wnt=s(cde);OLo=r(Wnt,"squeezebert"),Wnt.forEach(t),VLo=r(f0e," \u2014 "),_j=n(f0e,"A",{href:!0});var Hnt=s(_j);XLo=r(Hnt,"SqueezeBertForSequenceClassification"),Hnt.forEach(t),zLo=r(f0e," (SqueezeBERT model)"),f0e.forEach(t),QLo=i(L),g2=n(L,"LI",{});var m0e=s(g2);fde=n(m0e,"STRONG",{});var Unt=s(fde);WLo=r(Unt,"tapas"),Unt.forEach(t),HLo=r(m0e," \u2014 "),uj=n(m0e,"A",{href:!0});var Jnt=s(uj);ULo=r(Jnt,"TapasForSequenceClassification"),Jnt.forEach(t),JLo=r(m0e," (TAPAS model)"),m0e.forEach(t),YLo=i(L),h2=n(L,"LI",{});var g0e=s(h2);mde=n(g0e,"STRONG",{});var Ynt=s(mde);KLo=r(Ynt,"tapex"),Ynt.forEach(t),ZLo=r(g0e," \u2014 "),bj=n(g0e,"A",{href:!0});var Knt=s(bj);e9o=r(Knt,"BartForSequenceClassification"),Knt.forEach(t),o9o=r(g0e," (TAPEX model)"),g0e.forEach(t),r9o=i(L),p2=n(L,"LI",{});var h0e=s(p2);gde=n(h0e,"STRONG",{});var Znt=s(gde);t9o=r(Znt,"transfo-xl"),Znt.forEach(t),a9o=r(h0e," \u2014 "),vj=n(h0e,"A",{href:!0});var est=s(vj);n9o=r(est,"TransfoXLForSequenceClassification"),est.forEach(t),s9o=r(h0e," (Transformer-XL model)"),h0e.forEach(t),l9o=i(L),_2=n(L,"LI",{});var p0e=s(_2);hde=n(p0e,"STRONG",{});var ost=s(hde);i9o=r(ost,"xlm"),ost.forEach(t),d9o=r(p0e," \u2014 "),Fj=n(p0e,"A",{href:!0});var rst=s(Fj);c9o=r(rst,"XLMForSequenceClassification"),rst.forEach(t),f9o=r(p0e," (XLM model)"),p0e.forEach(t),m9o=i(L),u2=n(L,"LI",{});var _0e=s(u2);pde=n(_0e,"STRONG",{});var tst=s(pde);g9o=r(tst,"xlm-roberta"),tst.forEach(t),h9o=r(_0e," \u2014 "),Tj=n(_0e,"A",{href:!0});var ast=s(Tj);p9o=r(ast,"XLMRobertaForSequenceClassification"),ast.forEach(t),_9o=r(_0e," (XLM-RoBERTa model)"),_0e.forEach(t),u9o=i(L),b2=n(L,"LI",{});var u0e=s(b2);_de=n(u0e,"STRONG",{});var nst=s(_de);b9o=r(nst,"xlm-roberta-xl"),nst.forEach(t),v9o=r(u0e," \u2014 "),Mj=n(u0e,"A",{href:!0});var sst=s(Mj);F9o=r(sst,"XLMRobertaXLForSequenceClassification"),sst.forEach(t),T9o=r(u0e," (XLM-RoBERTa-XL model)"),u0e.forEach(t),M9o=i(L),v2=n(L,"LI",{});var b0e=s(v2);ude=n(b0e,"STRONG",{});var lst=s(ude);E9o=r(lst,"xlnet"),lst.forEach(t),C9o=r(b0e," \u2014 "),Ej=n(b0e,"A",{href:!0});var ist=s(Ej);w9o=r(ist,"XLNetForSequenceClassification"),ist.forEach(t),A9o=r(b0e," (XLNet model)"),b0e.forEach(t),y9o=i(L),F2=n(L,"LI",{});var v0e=s(F2);bde=n(v0e,"STRONG",{});var dst=s(bde);L9o=r(dst,"yoso"),dst.forEach(t),x9o=r(v0e," \u2014 "),Cj=n(v0e,"A",{href:!0});var cst=s(Cj);k9o=r(cst,"YosoForSequenceClassification"),cst.forEach(t),S9o=r(v0e," (YOSO model)"),v0e.forEach(t),L.forEach(t),R9o=i(zt),T2=n(zt,"P",{});var F0e=s(T2);B9o=r(F0e,"The model is set in evaluation mode by default using "),vde=n(F0e,"CODE",{});var fst=s(vde);P9o=r(fst,"model.eval()"),fst.forEach(t),$9o=r(F0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fde=n(F0e,"CODE",{});var mst=s(Fde);I9o=r(mst,"model.train()"),mst.forEach(t),F0e.forEach(t),q9o=i(zt),Tde=n(zt,"P",{});var gst=s(Tde);N9o=r(gst,"Examples:"),gst.forEach(t),j9o=i(zt),m(gC.$$.fragment,zt),zt.forEach(t),fl.forEach(t),LPe=i(c),Ed=n(c,"H2",{class:!0});var qIe=s(Ed);M2=n(qIe,"A",{id:!0,class:!0,href:!0});var hst=s(M2);Mde=n(hst,"SPAN",{});var pst=s(Mde);m(hC.$$.fragment,pst),pst.forEach(t),hst.forEach(t),D9o=i(qIe),Ede=n(qIe,"SPAN",{});var _st=s(Ede);G9o=r(_st,"AutoModelForMultipleChoice"),_st.forEach(t),qIe.forEach(t),xPe=i(c),rr=n(c,"DIV",{class:!0});var gl=s(rr);m(pC.$$.fragment,gl),O9o=i(gl),Cd=n(gl,"P",{});var kJ=s(Cd);V9o=r(kJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),wj=n(kJ,"A",{href:!0});var ust=s(wj);X9o=r(ust,"from_pretrained()"),ust.forEach(t),z9o=r(kJ," class method or the "),Aj=n(kJ,"A",{href:!0});var bst=s(Aj);Q9o=r(bst,"from_config()"),bst.forEach(t),W9o=r(kJ,` class
method.`),kJ.forEach(t),H9o=i(gl),_C=n(gl,"P",{});var NIe=s(_C);U9o=r(NIe,"This class cannot be instantiated directly using "),Cde=n(NIe,"CODE",{});var vst=s(Cde);J9o=r(vst,"__init__()"),vst.forEach(t),Y9o=r(NIe," (throws an error)."),NIe.forEach(t),K9o=i(gl),Jr=n(gl,"DIV",{class:!0});var hl=s(Jr);m(uC.$$.fragment,hl),Z9o=i(hl),wde=n(hl,"P",{});var Fst=s(wde);exo=r(Fst,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Fst.forEach(t),oxo=i(hl),wd=n(hl,"P",{});var SJ=s(wd);rxo=r(SJ,`Note:
Loading a model from its configuration file does `),Ade=n(SJ,"STRONG",{});var Tst=s(Ade);txo=r(Tst,"not"),Tst.forEach(t),axo=r(SJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=n(SJ,"A",{href:!0});var Mst=s(yj);nxo=r(Mst,"from_pretrained()"),Mst.forEach(t),sxo=r(SJ," to load the model weights."),SJ.forEach(t),lxo=i(hl),yde=n(hl,"P",{});var Est=s(yde);ixo=r(Est,"Examples:"),Est.forEach(t),dxo=i(hl),m(bC.$$.fragment,hl),hl.forEach(t),cxo=i(gl),Xe=n(gl,"DIV",{class:!0});var Qt=s(Xe);m(vC.$$.fragment,Qt),fxo=i(Qt),Lde=n(Qt,"P",{});var Cst=s(Lde);mxo=r(Cst,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Cst.forEach(t),gxo=i(Qt),Ja=n(Qt,"P",{});var oE=s(Ja);hxo=r(oE,"The model class to instantiate is selected based on the "),xde=n(oE,"CODE",{});var wst=s(xde);pxo=r(wst,"model_type"),wst.forEach(t),_xo=r(oE,` property of the config object (either
passed as an argument or loaded from `),kde=n(oE,"CODE",{});var Ast=s(kde);uxo=r(Ast,"pretrained_model_name_or_path"),Ast.forEach(t),bxo=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sde=n(oE,"CODE",{});var yst=s(Sde);vxo=r(yst,"pretrained_model_name_or_path"),yst.forEach(t),Fxo=r(oE,":"),oE.forEach(t),Txo=i(Qt),G=n(Qt,"UL",{});var O=s(G);E2=n(O,"LI",{});var T0e=s(E2);Rde=n(T0e,"STRONG",{});var Lst=s(Rde);Mxo=r(Lst,"albert"),Lst.forEach(t),Exo=r(T0e," \u2014 "),Lj=n(T0e,"A",{href:!0});var xst=s(Lj);Cxo=r(xst,"AlbertForMultipleChoice"),xst.forEach(t),wxo=r(T0e," (ALBERT model)"),T0e.forEach(t),Axo=i(O),C2=n(O,"LI",{});var M0e=s(C2);Bde=n(M0e,"STRONG",{});var kst=s(Bde);yxo=r(kst,"bert"),kst.forEach(t),Lxo=r(M0e," \u2014 "),xj=n(M0e,"A",{href:!0});var Sst=s(xj);xxo=r(Sst,"BertForMultipleChoice"),Sst.forEach(t),kxo=r(M0e," (BERT model)"),M0e.forEach(t),Sxo=i(O),w2=n(O,"LI",{});var E0e=s(w2);Pde=n(E0e,"STRONG",{});var Rst=s(Pde);Rxo=r(Rst,"big_bird"),Rst.forEach(t),Bxo=r(E0e," \u2014 "),kj=n(E0e,"A",{href:!0});var Bst=s(kj);Pxo=r(Bst,"BigBirdForMultipleChoice"),Bst.forEach(t),$xo=r(E0e," (BigBird model)"),E0e.forEach(t),Ixo=i(O),A2=n(O,"LI",{});var C0e=s(A2);$de=n(C0e,"STRONG",{});var Pst=s($de);qxo=r(Pst,"camembert"),Pst.forEach(t),Nxo=r(C0e," \u2014 "),Sj=n(C0e,"A",{href:!0});var $st=s(Sj);jxo=r($st,"CamembertForMultipleChoice"),$st.forEach(t),Dxo=r(C0e," (CamemBERT model)"),C0e.forEach(t),Gxo=i(O),y2=n(O,"LI",{});var w0e=s(y2);Ide=n(w0e,"STRONG",{});var Ist=s(Ide);Oxo=r(Ist,"canine"),Ist.forEach(t),Vxo=r(w0e," \u2014 "),Rj=n(w0e,"A",{href:!0});var qst=s(Rj);Xxo=r(qst,"CanineForMultipleChoice"),qst.forEach(t),zxo=r(w0e," (Canine model)"),w0e.forEach(t),Qxo=i(O),L2=n(O,"LI",{});var A0e=s(L2);qde=n(A0e,"STRONG",{});var Nst=s(qde);Wxo=r(Nst,"convbert"),Nst.forEach(t),Hxo=r(A0e," \u2014 "),Bj=n(A0e,"A",{href:!0});var jst=s(Bj);Uxo=r(jst,"ConvBertForMultipleChoice"),jst.forEach(t),Jxo=r(A0e," (ConvBERT model)"),A0e.forEach(t),Yxo=i(O),x2=n(O,"LI",{});var y0e=s(x2);Nde=n(y0e,"STRONG",{});var Dst=s(Nde);Kxo=r(Dst,"data2vec-text"),Dst.forEach(t),Zxo=r(y0e," \u2014 "),Pj=n(y0e,"A",{href:!0});var Gst=s(Pj);eko=r(Gst,"Data2VecTextForMultipleChoice"),Gst.forEach(t),oko=r(y0e," (Data2VecText model)"),y0e.forEach(t),rko=i(O),k2=n(O,"LI",{});var L0e=s(k2);jde=n(L0e,"STRONG",{});var Ost=s(jde);tko=r(Ost,"distilbert"),Ost.forEach(t),ako=r(L0e," \u2014 "),$j=n(L0e,"A",{href:!0});var Vst=s($j);nko=r(Vst,"DistilBertForMultipleChoice"),Vst.forEach(t),sko=r(L0e," (DistilBERT model)"),L0e.forEach(t),lko=i(O),S2=n(O,"LI",{});var x0e=s(S2);Dde=n(x0e,"STRONG",{});var Xst=s(Dde);iko=r(Xst,"electra"),Xst.forEach(t),dko=r(x0e," \u2014 "),Ij=n(x0e,"A",{href:!0});var zst=s(Ij);cko=r(zst,"ElectraForMultipleChoice"),zst.forEach(t),fko=r(x0e," (ELECTRA model)"),x0e.forEach(t),mko=i(O),R2=n(O,"LI",{});var k0e=s(R2);Gde=n(k0e,"STRONG",{});var Qst=s(Gde);gko=r(Qst,"flaubert"),Qst.forEach(t),hko=r(k0e," \u2014 "),qj=n(k0e,"A",{href:!0});var Wst=s(qj);pko=r(Wst,"FlaubertForMultipleChoice"),Wst.forEach(t),_ko=r(k0e," (FlauBERT model)"),k0e.forEach(t),uko=i(O),B2=n(O,"LI",{});var S0e=s(B2);Ode=n(S0e,"STRONG",{});var Hst=s(Ode);bko=r(Hst,"fnet"),Hst.forEach(t),vko=r(S0e," \u2014 "),Nj=n(S0e,"A",{href:!0});var Ust=s(Nj);Fko=r(Ust,"FNetForMultipleChoice"),Ust.forEach(t),Tko=r(S0e," (FNet model)"),S0e.forEach(t),Mko=i(O),P2=n(O,"LI",{});var R0e=s(P2);Vde=n(R0e,"STRONG",{});var Jst=s(Vde);Eko=r(Jst,"funnel"),Jst.forEach(t),Cko=r(R0e," \u2014 "),jj=n(R0e,"A",{href:!0});var Yst=s(jj);wko=r(Yst,"FunnelForMultipleChoice"),Yst.forEach(t),Ako=r(R0e," (Funnel Transformer model)"),R0e.forEach(t),yko=i(O),$2=n(O,"LI",{});var B0e=s($2);Xde=n(B0e,"STRONG",{});var Kst=s(Xde);Lko=r(Kst,"ibert"),Kst.forEach(t),xko=r(B0e," \u2014 "),Dj=n(B0e,"A",{href:!0});var Zst=s(Dj);kko=r(Zst,"IBertForMultipleChoice"),Zst.forEach(t),Sko=r(B0e," (I-BERT model)"),B0e.forEach(t),Rko=i(O),I2=n(O,"LI",{});var P0e=s(I2);zde=n(P0e,"STRONG",{});var elt=s(zde);Bko=r(elt,"longformer"),elt.forEach(t),Pko=r(P0e," \u2014 "),Gj=n(P0e,"A",{href:!0});var olt=s(Gj);$ko=r(olt,"LongformerForMultipleChoice"),olt.forEach(t),Iko=r(P0e," (Longformer model)"),P0e.forEach(t),qko=i(O),q2=n(O,"LI",{});var $0e=s(q2);Qde=n($0e,"STRONG",{});var rlt=s(Qde);Nko=r(rlt,"megatron-bert"),rlt.forEach(t),jko=r($0e," \u2014 "),Oj=n($0e,"A",{href:!0});var tlt=s(Oj);Dko=r(tlt,"MegatronBertForMultipleChoice"),tlt.forEach(t),Gko=r($0e," (MegatronBert model)"),$0e.forEach(t),Oko=i(O),N2=n(O,"LI",{});var I0e=s(N2);Wde=n(I0e,"STRONG",{});var alt=s(Wde);Vko=r(alt,"mobilebert"),alt.forEach(t),Xko=r(I0e," \u2014 "),Vj=n(I0e,"A",{href:!0});var nlt=s(Vj);zko=r(nlt,"MobileBertForMultipleChoice"),nlt.forEach(t),Qko=r(I0e," (MobileBERT model)"),I0e.forEach(t),Wko=i(O),j2=n(O,"LI",{});var q0e=s(j2);Hde=n(q0e,"STRONG",{});var slt=s(Hde);Hko=r(slt,"mpnet"),slt.forEach(t),Uko=r(q0e," \u2014 "),Xj=n(q0e,"A",{href:!0});var llt=s(Xj);Jko=r(llt,"MPNetForMultipleChoice"),llt.forEach(t),Yko=r(q0e," (MPNet model)"),q0e.forEach(t),Kko=i(O),D2=n(O,"LI",{});var N0e=s(D2);Ude=n(N0e,"STRONG",{});var ilt=s(Ude);Zko=r(ilt,"nystromformer"),ilt.forEach(t),eSo=r(N0e," \u2014 "),zj=n(N0e,"A",{href:!0});var dlt=s(zj);oSo=r(dlt,"NystromformerForMultipleChoice"),dlt.forEach(t),rSo=r(N0e," (Nystromformer model)"),N0e.forEach(t),tSo=i(O),G2=n(O,"LI",{});var j0e=s(G2);Jde=n(j0e,"STRONG",{});var clt=s(Jde);aSo=r(clt,"qdqbert"),clt.forEach(t),nSo=r(j0e," \u2014 "),Qj=n(j0e,"A",{href:!0});var flt=s(Qj);sSo=r(flt,"QDQBertForMultipleChoice"),flt.forEach(t),lSo=r(j0e," (QDQBert model)"),j0e.forEach(t),iSo=i(O),O2=n(O,"LI",{});var D0e=s(O2);Yde=n(D0e,"STRONG",{});var mlt=s(Yde);dSo=r(mlt,"rembert"),mlt.forEach(t),cSo=r(D0e," \u2014 "),Wj=n(D0e,"A",{href:!0});var glt=s(Wj);fSo=r(glt,"RemBertForMultipleChoice"),glt.forEach(t),mSo=r(D0e," (RemBERT model)"),D0e.forEach(t),gSo=i(O),V2=n(O,"LI",{});var G0e=s(V2);Kde=n(G0e,"STRONG",{});var hlt=s(Kde);hSo=r(hlt,"roberta"),hlt.forEach(t),pSo=r(G0e," \u2014 "),Hj=n(G0e,"A",{href:!0});var plt=s(Hj);_So=r(plt,"RobertaForMultipleChoice"),plt.forEach(t),uSo=r(G0e," (RoBERTa model)"),G0e.forEach(t),bSo=i(O),X2=n(O,"LI",{});var O0e=s(X2);Zde=n(O0e,"STRONG",{});var _lt=s(Zde);vSo=r(_lt,"roformer"),_lt.forEach(t),FSo=r(O0e," \u2014 "),Uj=n(O0e,"A",{href:!0});var ult=s(Uj);TSo=r(ult,"RoFormerForMultipleChoice"),ult.forEach(t),MSo=r(O0e," (RoFormer model)"),O0e.forEach(t),ESo=i(O),z2=n(O,"LI",{});var V0e=s(z2);ece=n(V0e,"STRONG",{});var blt=s(ece);CSo=r(blt,"squeezebert"),blt.forEach(t),wSo=r(V0e," \u2014 "),Jj=n(V0e,"A",{href:!0});var vlt=s(Jj);ASo=r(vlt,"SqueezeBertForMultipleChoice"),vlt.forEach(t),ySo=r(V0e," (SqueezeBERT model)"),V0e.forEach(t),LSo=i(O),Q2=n(O,"LI",{});var X0e=s(Q2);oce=n(X0e,"STRONG",{});var Flt=s(oce);xSo=r(Flt,"xlm"),Flt.forEach(t),kSo=r(X0e," \u2014 "),Yj=n(X0e,"A",{href:!0});var Tlt=s(Yj);SSo=r(Tlt,"XLMForMultipleChoice"),Tlt.forEach(t),RSo=r(X0e," (XLM model)"),X0e.forEach(t),BSo=i(O),W2=n(O,"LI",{});var z0e=s(W2);rce=n(z0e,"STRONG",{});var Mlt=s(rce);PSo=r(Mlt,"xlm-roberta"),Mlt.forEach(t),$So=r(z0e," \u2014 "),Kj=n(z0e,"A",{href:!0});var Elt=s(Kj);ISo=r(Elt,"XLMRobertaForMultipleChoice"),Elt.forEach(t),qSo=r(z0e," (XLM-RoBERTa model)"),z0e.forEach(t),NSo=i(O),H2=n(O,"LI",{});var Q0e=s(H2);tce=n(Q0e,"STRONG",{});var Clt=s(tce);jSo=r(Clt,"xlm-roberta-xl"),Clt.forEach(t),DSo=r(Q0e," \u2014 "),Zj=n(Q0e,"A",{href:!0});var wlt=s(Zj);GSo=r(wlt,"XLMRobertaXLForMultipleChoice"),wlt.forEach(t),OSo=r(Q0e," (XLM-RoBERTa-XL model)"),Q0e.forEach(t),VSo=i(O),U2=n(O,"LI",{});var W0e=s(U2);ace=n(W0e,"STRONG",{});var Alt=s(ace);XSo=r(Alt,"xlnet"),Alt.forEach(t),zSo=r(W0e," \u2014 "),eD=n(W0e,"A",{href:!0});var ylt=s(eD);QSo=r(ylt,"XLNetForMultipleChoice"),ylt.forEach(t),WSo=r(W0e," (XLNet model)"),W0e.forEach(t),HSo=i(O),J2=n(O,"LI",{});var H0e=s(J2);nce=n(H0e,"STRONG",{});var Llt=s(nce);USo=r(Llt,"yoso"),Llt.forEach(t),JSo=r(H0e," \u2014 "),oD=n(H0e,"A",{href:!0});var xlt=s(oD);YSo=r(xlt,"YosoForMultipleChoice"),xlt.forEach(t),KSo=r(H0e," (YOSO model)"),H0e.forEach(t),O.forEach(t),ZSo=i(Qt),Y2=n(Qt,"P",{});var U0e=s(Y2);eRo=r(U0e,"The model is set in evaluation mode by default using "),sce=n(U0e,"CODE",{});var klt=s(sce);oRo=r(klt,"model.eval()"),klt.forEach(t),rRo=r(U0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lce=n(U0e,"CODE",{});var Slt=s(lce);tRo=r(Slt,"model.train()"),Slt.forEach(t),U0e.forEach(t),aRo=i(Qt),ice=n(Qt,"P",{});var Rlt=s(ice);nRo=r(Rlt,"Examples:"),Rlt.forEach(t),sRo=i(Qt),m(FC.$$.fragment,Qt),Qt.forEach(t),gl.forEach(t),kPe=i(c),Ad=n(c,"H2",{class:!0});var jIe=s(Ad);K2=n(jIe,"A",{id:!0,class:!0,href:!0});var Blt=s(K2);dce=n(Blt,"SPAN",{});var Plt=s(dce);m(TC.$$.fragment,Plt),Plt.forEach(t),Blt.forEach(t),lRo=i(jIe),cce=n(jIe,"SPAN",{});var $lt=s(cce);iRo=r($lt,"AutoModelForNextSentencePrediction"),$lt.forEach(t),jIe.forEach(t),SPe=i(c),tr=n(c,"DIV",{class:!0});var pl=s(tr);m(MC.$$.fragment,pl),dRo=i(pl),yd=n(pl,"P",{});var RJ=s(yd);cRo=r(RJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rD=n(RJ,"A",{href:!0});var Ilt=s(rD);fRo=r(Ilt,"from_pretrained()"),Ilt.forEach(t),mRo=r(RJ," class method or the "),tD=n(RJ,"A",{href:!0});var qlt=s(tD);gRo=r(qlt,"from_config()"),qlt.forEach(t),hRo=r(RJ,` class
method.`),RJ.forEach(t),pRo=i(pl),EC=n(pl,"P",{});var DIe=s(EC);_Ro=r(DIe,"This class cannot be instantiated directly using "),fce=n(DIe,"CODE",{});var Nlt=s(fce);uRo=r(Nlt,"__init__()"),Nlt.forEach(t),bRo=r(DIe," (throws an error)."),DIe.forEach(t),vRo=i(pl),Yr=n(pl,"DIV",{class:!0});var _l=s(Yr);m(CC.$$.fragment,_l),FRo=i(_l),mce=n(_l,"P",{});var jlt=s(mce);TRo=r(jlt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jlt.forEach(t),MRo=i(_l),Ld=n(_l,"P",{});var BJ=s(Ld);ERo=r(BJ,`Note:
Loading a model from its configuration file does `),gce=n(BJ,"STRONG",{});var Dlt=s(gce);CRo=r(Dlt,"not"),Dlt.forEach(t),wRo=r(BJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=n(BJ,"A",{href:!0});var Glt=s(aD);ARo=r(Glt,"from_pretrained()"),Glt.forEach(t),yRo=r(BJ," to load the model weights."),BJ.forEach(t),LRo=i(_l),hce=n(_l,"P",{});var Olt=s(hce);xRo=r(Olt,"Examples:"),Olt.forEach(t),kRo=i(_l),m(wC.$$.fragment,_l),_l.forEach(t),SRo=i(pl),ze=n(pl,"DIV",{class:!0});var Wt=s(ze);m(AC.$$.fragment,Wt),RRo=i(Wt),pce=n(Wt,"P",{});var Vlt=s(pce);BRo=r(Vlt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Vlt.forEach(t),PRo=i(Wt),Ya=n(Wt,"P",{});var rE=s(Ya);$Ro=r(rE,"The model class to instantiate is selected based on the "),_ce=n(rE,"CODE",{});var Xlt=s(_ce);IRo=r(Xlt,"model_type"),Xlt.forEach(t),qRo=r(rE,` property of the config object (either
passed as an argument or loaded from `),uce=n(rE,"CODE",{});var zlt=s(uce);NRo=r(zlt,"pretrained_model_name_or_path"),zlt.forEach(t),jRo=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),bce=n(rE,"CODE",{});var Qlt=s(bce);DRo=r(Qlt,"pretrained_model_name_or_path"),Qlt.forEach(t),GRo=r(rE,":"),rE.forEach(t),ORo=i(Wt),da=n(Wt,"UL",{});var ul=s(da);Z2=n(ul,"LI",{});var J0e=s(Z2);vce=n(J0e,"STRONG",{});var Wlt=s(vce);VRo=r(Wlt,"bert"),Wlt.forEach(t),XRo=r(J0e," \u2014 "),nD=n(J0e,"A",{href:!0});var Hlt=s(nD);zRo=r(Hlt,"BertForNextSentencePrediction"),Hlt.forEach(t),QRo=r(J0e," (BERT model)"),J0e.forEach(t),WRo=i(ul),e5=n(ul,"LI",{});var Y0e=s(e5);Fce=n(Y0e,"STRONG",{});var Ult=s(Fce);HRo=r(Ult,"fnet"),Ult.forEach(t),URo=r(Y0e," \u2014 "),sD=n(Y0e,"A",{href:!0});var Jlt=s(sD);JRo=r(Jlt,"FNetForNextSentencePrediction"),Jlt.forEach(t),YRo=r(Y0e," (FNet model)"),Y0e.forEach(t),KRo=i(ul),o5=n(ul,"LI",{});var K0e=s(o5);Tce=n(K0e,"STRONG",{});var Ylt=s(Tce);ZRo=r(Ylt,"megatron-bert"),Ylt.forEach(t),eBo=r(K0e," \u2014 "),lD=n(K0e,"A",{href:!0});var Klt=s(lD);oBo=r(Klt,"MegatronBertForNextSentencePrediction"),Klt.forEach(t),rBo=r(K0e," (MegatronBert model)"),K0e.forEach(t),tBo=i(ul),r5=n(ul,"LI",{});var Z0e=s(r5);Mce=n(Z0e,"STRONG",{});var Zlt=s(Mce);aBo=r(Zlt,"mobilebert"),Zlt.forEach(t),nBo=r(Z0e," \u2014 "),iD=n(Z0e,"A",{href:!0});var eit=s(iD);sBo=r(eit,"MobileBertForNextSentencePrediction"),eit.forEach(t),lBo=r(Z0e," (MobileBERT model)"),Z0e.forEach(t),iBo=i(ul),t5=n(ul,"LI",{});var eye=s(t5);Ece=n(eye,"STRONG",{});var oit=s(Ece);dBo=r(oit,"qdqbert"),oit.forEach(t),cBo=r(eye," \u2014 "),dD=n(eye,"A",{href:!0});var rit=s(dD);fBo=r(rit,"QDQBertForNextSentencePrediction"),rit.forEach(t),mBo=r(eye," (QDQBert model)"),eye.forEach(t),ul.forEach(t),gBo=i(Wt),a5=n(Wt,"P",{});var oye=s(a5);hBo=r(oye,"The model is set in evaluation mode by default using "),Cce=n(oye,"CODE",{});var tit=s(Cce);pBo=r(tit,"model.eval()"),tit.forEach(t),_Bo=r(oye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wce=n(oye,"CODE",{});var ait=s(wce);uBo=r(ait,"model.train()"),ait.forEach(t),oye.forEach(t),bBo=i(Wt),Ace=n(Wt,"P",{});var nit=s(Ace);vBo=r(nit,"Examples:"),nit.forEach(t),FBo=i(Wt),m(yC.$$.fragment,Wt),Wt.forEach(t),pl.forEach(t),RPe=i(c),xd=n(c,"H2",{class:!0});var GIe=s(xd);n5=n(GIe,"A",{id:!0,class:!0,href:!0});var sit=s(n5);yce=n(sit,"SPAN",{});var lit=s(yce);m(LC.$$.fragment,lit),lit.forEach(t),sit.forEach(t),TBo=i(GIe),Lce=n(GIe,"SPAN",{});var iit=s(Lce);MBo=r(iit,"AutoModelForTokenClassification"),iit.forEach(t),GIe.forEach(t),BPe=i(c),ar=n(c,"DIV",{class:!0});var bl=s(ar);m(xC.$$.fragment,bl),EBo=i(bl),kd=n(bl,"P",{});var PJ=s(kd);CBo=r(PJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),cD=n(PJ,"A",{href:!0});var dit=s(cD);wBo=r(dit,"from_pretrained()"),dit.forEach(t),ABo=r(PJ," class method or the "),fD=n(PJ,"A",{href:!0});var cit=s(fD);yBo=r(cit,"from_config()"),cit.forEach(t),LBo=r(PJ,` class
method.`),PJ.forEach(t),xBo=i(bl),kC=n(bl,"P",{});var OIe=s(kC);kBo=r(OIe,"This class cannot be instantiated directly using "),xce=n(OIe,"CODE",{});var fit=s(xce);SBo=r(fit,"__init__()"),fit.forEach(t),RBo=r(OIe," (throws an error)."),OIe.forEach(t),BBo=i(bl),Kr=n(bl,"DIV",{class:!0});var vl=s(Kr);m(SC.$$.fragment,vl),PBo=i(vl),kce=n(vl,"P",{});var mit=s(kce);$Bo=r(mit,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),mit.forEach(t),IBo=i(vl),Sd=n(vl,"P",{});var $J=s(Sd);qBo=r($J,`Note:
Loading a model from its configuration file does `),Sce=n($J,"STRONG",{});var git=s(Sce);NBo=r(git,"not"),git.forEach(t),jBo=r($J,` load the model weights. It only affects the
model\u2019s configuration. Use `),mD=n($J,"A",{href:!0});var hit=s(mD);DBo=r(hit,"from_pretrained()"),hit.forEach(t),GBo=r($J," to load the model weights."),$J.forEach(t),OBo=i(vl),Rce=n(vl,"P",{});var pit=s(Rce);VBo=r(pit,"Examples:"),pit.forEach(t),XBo=i(vl),m(RC.$$.fragment,vl),vl.forEach(t),zBo=i(bl),Qe=n(bl,"DIV",{class:!0});var Ht=s(Qe);m(BC.$$.fragment,Ht),QBo=i(Ht),Bce=n(Ht,"P",{});var _it=s(Bce);WBo=r(_it,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),_it.forEach(t),HBo=i(Ht),Ka=n(Ht,"P",{});var tE=s(Ka);UBo=r(tE,"The model class to instantiate is selected based on the "),Pce=n(tE,"CODE",{});var uit=s(Pce);JBo=r(uit,"model_type"),uit.forEach(t),YBo=r(tE,` property of the config object (either
passed as an argument or loaded from `),$ce=n(tE,"CODE",{});var bit=s($ce);KBo=r(bit,"pretrained_model_name_or_path"),bit.forEach(t),ZBo=r(tE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ice=n(tE,"CODE",{});var vit=s(Ice);ePo=r(vit,"pretrained_model_name_or_path"),vit.forEach(t),oPo=r(tE,":"),tE.forEach(t),rPo=i(Ht),j=n(Ht,"UL",{});var D=s(j);s5=n(D,"LI",{});var rye=s(s5);qce=n(rye,"STRONG",{});var Fit=s(qce);tPo=r(Fit,"albert"),Fit.forEach(t),aPo=r(rye," \u2014 "),gD=n(rye,"A",{href:!0});var Tit=s(gD);nPo=r(Tit,"AlbertForTokenClassification"),Tit.forEach(t),sPo=r(rye," (ALBERT model)"),rye.forEach(t),lPo=i(D),l5=n(D,"LI",{});var tye=s(l5);Nce=n(tye,"STRONG",{});var Mit=s(Nce);iPo=r(Mit,"bert"),Mit.forEach(t),dPo=r(tye," \u2014 "),hD=n(tye,"A",{href:!0});var Eit=s(hD);cPo=r(Eit,"BertForTokenClassification"),Eit.forEach(t),fPo=r(tye," (BERT model)"),tye.forEach(t),mPo=i(D),i5=n(D,"LI",{});var aye=s(i5);jce=n(aye,"STRONG",{});var Cit=s(jce);gPo=r(Cit,"big_bird"),Cit.forEach(t),hPo=r(aye," \u2014 "),pD=n(aye,"A",{href:!0});var wit=s(pD);pPo=r(wit,"BigBirdForTokenClassification"),wit.forEach(t),_Po=r(aye," (BigBird model)"),aye.forEach(t),uPo=i(D),d5=n(D,"LI",{});var nye=s(d5);Dce=n(nye,"STRONG",{});var Ait=s(Dce);bPo=r(Ait,"camembert"),Ait.forEach(t),vPo=r(nye," \u2014 "),_D=n(nye,"A",{href:!0});var yit=s(_D);FPo=r(yit,"CamembertForTokenClassification"),yit.forEach(t),TPo=r(nye," (CamemBERT model)"),nye.forEach(t),MPo=i(D),c5=n(D,"LI",{});var sye=s(c5);Gce=n(sye,"STRONG",{});var Lit=s(Gce);EPo=r(Lit,"canine"),Lit.forEach(t),CPo=r(sye," \u2014 "),uD=n(sye,"A",{href:!0});var xit=s(uD);wPo=r(xit,"CanineForTokenClassification"),xit.forEach(t),APo=r(sye," (Canine model)"),sye.forEach(t),yPo=i(D),f5=n(D,"LI",{});var lye=s(f5);Oce=n(lye,"STRONG",{});var kit=s(Oce);LPo=r(kit,"convbert"),kit.forEach(t),xPo=r(lye," \u2014 "),bD=n(lye,"A",{href:!0});var Sit=s(bD);kPo=r(Sit,"ConvBertForTokenClassification"),Sit.forEach(t),SPo=r(lye," (ConvBERT model)"),lye.forEach(t),RPo=i(D),m5=n(D,"LI",{});var iye=s(m5);Vce=n(iye,"STRONG",{});var Rit=s(Vce);BPo=r(Rit,"data2vec-text"),Rit.forEach(t),PPo=r(iye," \u2014 "),vD=n(iye,"A",{href:!0});var Bit=s(vD);$Po=r(Bit,"Data2VecTextForTokenClassification"),Bit.forEach(t),IPo=r(iye," (Data2VecText model)"),iye.forEach(t),qPo=i(D),g5=n(D,"LI",{});var dye=s(g5);Xce=n(dye,"STRONG",{});var Pit=s(Xce);NPo=r(Pit,"deberta"),Pit.forEach(t),jPo=r(dye," \u2014 "),FD=n(dye,"A",{href:!0});var $it=s(FD);DPo=r($it,"DebertaForTokenClassification"),$it.forEach(t),GPo=r(dye," (DeBERTa model)"),dye.forEach(t),OPo=i(D),h5=n(D,"LI",{});var cye=s(h5);zce=n(cye,"STRONG",{});var Iit=s(zce);VPo=r(Iit,"deberta-v2"),Iit.forEach(t),XPo=r(cye," \u2014 "),TD=n(cye,"A",{href:!0});var qit=s(TD);zPo=r(qit,"DebertaV2ForTokenClassification"),qit.forEach(t),QPo=r(cye," (DeBERTa-v2 model)"),cye.forEach(t),WPo=i(D),p5=n(D,"LI",{});var fye=s(p5);Qce=n(fye,"STRONG",{});var Nit=s(Qce);HPo=r(Nit,"distilbert"),Nit.forEach(t),UPo=r(fye," \u2014 "),MD=n(fye,"A",{href:!0});var jit=s(MD);JPo=r(jit,"DistilBertForTokenClassification"),jit.forEach(t),YPo=r(fye," (DistilBERT model)"),fye.forEach(t),KPo=i(D),_5=n(D,"LI",{});var mye=s(_5);Wce=n(mye,"STRONG",{});var Dit=s(Wce);ZPo=r(Dit,"electra"),Dit.forEach(t),e$o=r(mye," \u2014 "),ED=n(mye,"A",{href:!0});var Git=s(ED);o$o=r(Git,"ElectraForTokenClassification"),Git.forEach(t),r$o=r(mye," (ELECTRA model)"),mye.forEach(t),t$o=i(D),u5=n(D,"LI",{});var gye=s(u5);Hce=n(gye,"STRONG",{});var Oit=s(Hce);a$o=r(Oit,"flaubert"),Oit.forEach(t),n$o=r(gye," \u2014 "),CD=n(gye,"A",{href:!0});var Vit=s(CD);s$o=r(Vit,"FlaubertForTokenClassification"),Vit.forEach(t),l$o=r(gye," (FlauBERT model)"),gye.forEach(t),i$o=i(D),b5=n(D,"LI",{});var hye=s(b5);Uce=n(hye,"STRONG",{});var Xit=s(Uce);d$o=r(Xit,"fnet"),Xit.forEach(t),c$o=r(hye," \u2014 "),wD=n(hye,"A",{href:!0});var zit=s(wD);f$o=r(zit,"FNetForTokenClassification"),zit.forEach(t),m$o=r(hye," (FNet model)"),hye.forEach(t),g$o=i(D),v5=n(D,"LI",{});var pye=s(v5);Jce=n(pye,"STRONG",{});var Qit=s(Jce);h$o=r(Qit,"funnel"),Qit.forEach(t),p$o=r(pye," \u2014 "),AD=n(pye,"A",{href:!0});var Wit=s(AD);_$o=r(Wit,"FunnelForTokenClassification"),Wit.forEach(t),u$o=r(pye," (Funnel Transformer model)"),pye.forEach(t),b$o=i(D),F5=n(D,"LI",{});var _ye=s(F5);Yce=n(_ye,"STRONG",{});var Hit=s(Yce);v$o=r(Hit,"gpt2"),Hit.forEach(t),F$o=r(_ye," \u2014 "),yD=n(_ye,"A",{href:!0});var Uit=s(yD);T$o=r(Uit,"GPT2ForTokenClassification"),Uit.forEach(t),M$o=r(_ye," (OpenAI GPT-2 model)"),_ye.forEach(t),E$o=i(D),T5=n(D,"LI",{});var uye=s(T5);Kce=n(uye,"STRONG",{});var Jit=s(Kce);C$o=r(Jit,"ibert"),Jit.forEach(t),w$o=r(uye," \u2014 "),LD=n(uye,"A",{href:!0});var Yit=s(LD);A$o=r(Yit,"IBertForTokenClassification"),Yit.forEach(t),y$o=r(uye," (I-BERT model)"),uye.forEach(t),L$o=i(D),M5=n(D,"LI",{});var bye=s(M5);Zce=n(bye,"STRONG",{});var Kit=s(Zce);x$o=r(Kit,"layoutlm"),Kit.forEach(t),k$o=r(bye," \u2014 "),xD=n(bye,"A",{href:!0});var Zit=s(xD);S$o=r(Zit,"LayoutLMForTokenClassification"),Zit.forEach(t),R$o=r(bye," (LayoutLM model)"),bye.forEach(t),B$o=i(D),E5=n(D,"LI",{});var vye=s(E5);efe=n(vye,"STRONG",{});var edt=s(efe);P$o=r(edt,"layoutlmv2"),edt.forEach(t),$$o=r(vye," \u2014 "),kD=n(vye,"A",{href:!0});var odt=s(kD);I$o=r(odt,"LayoutLMv2ForTokenClassification"),odt.forEach(t),q$o=r(vye," (LayoutLMv2 model)"),vye.forEach(t),N$o=i(D),C5=n(D,"LI",{});var Fye=s(C5);ofe=n(Fye,"STRONG",{});var rdt=s(ofe);j$o=r(rdt,"longformer"),rdt.forEach(t),D$o=r(Fye," \u2014 "),SD=n(Fye,"A",{href:!0});var tdt=s(SD);G$o=r(tdt,"LongformerForTokenClassification"),tdt.forEach(t),O$o=r(Fye," (Longformer model)"),Fye.forEach(t),V$o=i(D),w5=n(D,"LI",{});var Tye=s(w5);rfe=n(Tye,"STRONG",{});var adt=s(rfe);X$o=r(adt,"megatron-bert"),adt.forEach(t),z$o=r(Tye," \u2014 "),RD=n(Tye,"A",{href:!0});var ndt=s(RD);Q$o=r(ndt,"MegatronBertForTokenClassification"),ndt.forEach(t),W$o=r(Tye," (MegatronBert model)"),Tye.forEach(t),H$o=i(D),A5=n(D,"LI",{});var Mye=s(A5);tfe=n(Mye,"STRONG",{});var sdt=s(tfe);U$o=r(sdt,"mobilebert"),sdt.forEach(t),J$o=r(Mye," \u2014 "),BD=n(Mye,"A",{href:!0});var ldt=s(BD);Y$o=r(ldt,"MobileBertForTokenClassification"),ldt.forEach(t),K$o=r(Mye," (MobileBERT model)"),Mye.forEach(t),Z$o=i(D),y5=n(D,"LI",{});var Eye=s(y5);afe=n(Eye,"STRONG",{});var idt=s(afe);eIo=r(idt,"mpnet"),idt.forEach(t),oIo=r(Eye," \u2014 "),PD=n(Eye,"A",{href:!0});var ddt=s(PD);rIo=r(ddt,"MPNetForTokenClassification"),ddt.forEach(t),tIo=r(Eye," (MPNet model)"),Eye.forEach(t),aIo=i(D),L5=n(D,"LI",{});var Cye=s(L5);nfe=n(Cye,"STRONG",{});var cdt=s(nfe);nIo=r(cdt,"nystromformer"),cdt.forEach(t),sIo=r(Cye," \u2014 "),$D=n(Cye,"A",{href:!0});var fdt=s($D);lIo=r(fdt,"NystromformerForTokenClassification"),fdt.forEach(t),iIo=r(Cye," (Nystromformer model)"),Cye.forEach(t),dIo=i(D),x5=n(D,"LI",{});var wye=s(x5);sfe=n(wye,"STRONG",{});var mdt=s(sfe);cIo=r(mdt,"qdqbert"),mdt.forEach(t),fIo=r(wye," \u2014 "),ID=n(wye,"A",{href:!0});var gdt=s(ID);mIo=r(gdt,"QDQBertForTokenClassification"),gdt.forEach(t),gIo=r(wye," (QDQBert model)"),wye.forEach(t),hIo=i(D),k5=n(D,"LI",{});var Aye=s(k5);lfe=n(Aye,"STRONG",{});var hdt=s(lfe);pIo=r(hdt,"rembert"),hdt.forEach(t),_Io=r(Aye," \u2014 "),qD=n(Aye,"A",{href:!0});var pdt=s(qD);uIo=r(pdt,"RemBertForTokenClassification"),pdt.forEach(t),bIo=r(Aye," (RemBERT model)"),Aye.forEach(t),vIo=i(D),S5=n(D,"LI",{});var yye=s(S5);ife=n(yye,"STRONG",{});var _dt=s(ife);FIo=r(_dt,"roberta"),_dt.forEach(t),TIo=r(yye," \u2014 "),ND=n(yye,"A",{href:!0});var udt=s(ND);MIo=r(udt,"RobertaForTokenClassification"),udt.forEach(t),EIo=r(yye," (RoBERTa model)"),yye.forEach(t),CIo=i(D),R5=n(D,"LI",{});var Lye=s(R5);dfe=n(Lye,"STRONG",{});var bdt=s(dfe);wIo=r(bdt,"roformer"),bdt.forEach(t),AIo=r(Lye," \u2014 "),jD=n(Lye,"A",{href:!0});var vdt=s(jD);yIo=r(vdt,"RoFormerForTokenClassification"),vdt.forEach(t),LIo=r(Lye," (RoFormer model)"),Lye.forEach(t),xIo=i(D),B5=n(D,"LI",{});var xye=s(B5);cfe=n(xye,"STRONG",{});var Fdt=s(cfe);kIo=r(Fdt,"squeezebert"),Fdt.forEach(t),SIo=r(xye," \u2014 "),DD=n(xye,"A",{href:!0});var Tdt=s(DD);RIo=r(Tdt,"SqueezeBertForTokenClassification"),Tdt.forEach(t),BIo=r(xye," (SqueezeBERT model)"),xye.forEach(t),PIo=i(D),P5=n(D,"LI",{});var kye=s(P5);ffe=n(kye,"STRONG",{});var Mdt=s(ffe);$Io=r(Mdt,"xlm"),Mdt.forEach(t),IIo=r(kye," \u2014 "),GD=n(kye,"A",{href:!0});var Edt=s(GD);qIo=r(Edt,"XLMForTokenClassification"),Edt.forEach(t),NIo=r(kye," (XLM model)"),kye.forEach(t),jIo=i(D),$5=n(D,"LI",{});var Sye=s($5);mfe=n(Sye,"STRONG",{});var Cdt=s(mfe);DIo=r(Cdt,"xlm-roberta"),Cdt.forEach(t),GIo=r(Sye," \u2014 "),OD=n(Sye,"A",{href:!0});var wdt=s(OD);OIo=r(wdt,"XLMRobertaForTokenClassification"),wdt.forEach(t),VIo=r(Sye," (XLM-RoBERTa model)"),Sye.forEach(t),XIo=i(D),I5=n(D,"LI",{});var Rye=s(I5);gfe=n(Rye,"STRONG",{});var Adt=s(gfe);zIo=r(Adt,"xlm-roberta-xl"),Adt.forEach(t),QIo=r(Rye," \u2014 "),VD=n(Rye,"A",{href:!0});var ydt=s(VD);WIo=r(ydt,"XLMRobertaXLForTokenClassification"),ydt.forEach(t),HIo=r(Rye," (XLM-RoBERTa-XL model)"),Rye.forEach(t),UIo=i(D),q5=n(D,"LI",{});var Bye=s(q5);hfe=n(Bye,"STRONG",{});var Ldt=s(hfe);JIo=r(Ldt,"xlnet"),Ldt.forEach(t),YIo=r(Bye," \u2014 "),XD=n(Bye,"A",{href:!0});var xdt=s(XD);KIo=r(xdt,"XLNetForTokenClassification"),xdt.forEach(t),ZIo=r(Bye," (XLNet model)"),Bye.forEach(t),eqo=i(D),N5=n(D,"LI",{});var Pye=s(N5);pfe=n(Pye,"STRONG",{});var kdt=s(pfe);oqo=r(kdt,"yoso"),kdt.forEach(t),rqo=r(Pye," \u2014 "),zD=n(Pye,"A",{href:!0});var Sdt=s(zD);tqo=r(Sdt,"YosoForTokenClassification"),Sdt.forEach(t),aqo=r(Pye," (YOSO model)"),Pye.forEach(t),D.forEach(t),nqo=i(Ht),j5=n(Ht,"P",{});var $ye=s(j5);sqo=r($ye,"The model is set in evaluation mode by default using "),_fe=n($ye,"CODE",{});var Rdt=s(_fe);lqo=r(Rdt,"model.eval()"),Rdt.forEach(t),iqo=r($ye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ufe=n($ye,"CODE",{});var Bdt=s(ufe);dqo=r(Bdt,"model.train()"),Bdt.forEach(t),$ye.forEach(t),cqo=i(Ht),bfe=n(Ht,"P",{});var Pdt=s(bfe);fqo=r(Pdt,"Examples:"),Pdt.forEach(t),mqo=i(Ht),m(PC.$$.fragment,Ht),Ht.forEach(t),bl.forEach(t),PPe=i(c),Rd=n(c,"H2",{class:!0});var VIe=s(Rd);D5=n(VIe,"A",{id:!0,class:!0,href:!0});var $dt=s(D5);vfe=n($dt,"SPAN",{});var Idt=s(vfe);m($C.$$.fragment,Idt),Idt.forEach(t),$dt.forEach(t),gqo=i(VIe),Ffe=n(VIe,"SPAN",{});var qdt=s(Ffe);hqo=r(qdt,"AutoModelForQuestionAnswering"),qdt.forEach(t),VIe.forEach(t),$Pe=i(c),nr=n(c,"DIV",{class:!0});var Fl=s(nr);m(IC.$$.fragment,Fl),pqo=i(Fl),Bd=n(Fl,"P",{});var IJ=s(Bd);_qo=r(IJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),QD=n(IJ,"A",{href:!0});var Ndt=s(QD);uqo=r(Ndt,"from_pretrained()"),Ndt.forEach(t),bqo=r(IJ," class method or the "),WD=n(IJ,"A",{href:!0});var jdt=s(WD);vqo=r(jdt,"from_config()"),jdt.forEach(t),Fqo=r(IJ,` class
method.`),IJ.forEach(t),Tqo=i(Fl),qC=n(Fl,"P",{});var XIe=s(qC);Mqo=r(XIe,"This class cannot be instantiated directly using "),Tfe=n(XIe,"CODE",{});var Ddt=s(Tfe);Eqo=r(Ddt,"__init__()"),Ddt.forEach(t),Cqo=r(XIe," (throws an error)."),XIe.forEach(t),wqo=i(Fl),Zr=n(Fl,"DIV",{class:!0});var Tl=s(Zr);m(NC.$$.fragment,Tl),Aqo=i(Tl),Mfe=n(Tl,"P",{});var Gdt=s(Mfe);yqo=r(Gdt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Gdt.forEach(t),Lqo=i(Tl),Pd=n(Tl,"P",{});var qJ=s(Pd);xqo=r(qJ,`Note:
Loading a model from its configuration file does `),Efe=n(qJ,"STRONG",{});var Odt=s(Efe);kqo=r(Odt,"not"),Odt.forEach(t),Sqo=r(qJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),HD=n(qJ,"A",{href:!0});var Vdt=s(HD);Rqo=r(Vdt,"from_pretrained()"),Vdt.forEach(t),Bqo=r(qJ," to load the model weights."),qJ.forEach(t),Pqo=i(Tl),Cfe=n(Tl,"P",{});var Xdt=s(Cfe);$qo=r(Xdt,"Examples:"),Xdt.forEach(t),Iqo=i(Tl),m(jC.$$.fragment,Tl),Tl.forEach(t),qqo=i(Fl),We=n(Fl,"DIV",{class:!0});var Ut=s(We);m(DC.$$.fragment,Ut),Nqo=i(Ut),wfe=n(Ut,"P",{});var zdt=s(wfe);jqo=r(zdt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),zdt.forEach(t),Dqo=i(Ut),Za=n(Ut,"P",{});var aE=s(Za);Gqo=r(aE,"The model class to instantiate is selected based on the "),Afe=n(aE,"CODE",{});var Qdt=s(Afe);Oqo=r(Qdt,"model_type"),Qdt.forEach(t),Vqo=r(aE,` property of the config object (either
passed as an argument or loaded from `),yfe=n(aE,"CODE",{});var Wdt=s(yfe);Xqo=r(Wdt,"pretrained_model_name_or_path"),Wdt.forEach(t),zqo=r(aE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lfe=n(aE,"CODE",{});var Hdt=s(Lfe);Qqo=r(Hdt,"pretrained_model_name_or_path"),Hdt.forEach(t),Wqo=r(aE,":"),aE.forEach(t),Hqo=i(Ut),R=n(Ut,"UL",{});var P=s(R);G5=n(P,"LI",{});var Iye=s(G5);xfe=n(Iye,"STRONG",{});var Udt=s(xfe);Uqo=r(Udt,"albert"),Udt.forEach(t),Jqo=r(Iye," \u2014 "),UD=n(Iye,"A",{href:!0});var Jdt=s(UD);Yqo=r(Jdt,"AlbertForQuestionAnswering"),Jdt.forEach(t),Kqo=r(Iye," (ALBERT model)"),Iye.forEach(t),Zqo=i(P),O5=n(P,"LI",{});var qye=s(O5);kfe=n(qye,"STRONG",{});var Ydt=s(kfe);eNo=r(Ydt,"bart"),Ydt.forEach(t),oNo=r(qye," \u2014 "),JD=n(qye,"A",{href:!0});var Kdt=s(JD);rNo=r(Kdt,"BartForQuestionAnswering"),Kdt.forEach(t),tNo=r(qye," (BART model)"),qye.forEach(t),aNo=i(P),V5=n(P,"LI",{});var Nye=s(V5);Sfe=n(Nye,"STRONG",{});var Zdt=s(Sfe);nNo=r(Zdt,"bert"),Zdt.forEach(t),sNo=r(Nye," \u2014 "),YD=n(Nye,"A",{href:!0});var ect=s(YD);lNo=r(ect,"BertForQuestionAnswering"),ect.forEach(t),iNo=r(Nye," (BERT model)"),Nye.forEach(t),dNo=i(P),X5=n(P,"LI",{});var jye=s(X5);Rfe=n(jye,"STRONG",{});var oct=s(Rfe);cNo=r(oct,"big_bird"),oct.forEach(t),fNo=r(jye," \u2014 "),KD=n(jye,"A",{href:!0});var rct=s(KD);mNo=r(rct,"BigBirdForQuestionAnswering"),rct.forEach(t),gNo=r(jye," (BigBird model)"),jye.forEach(t),hNo=i(P),z5=n(P,"LI",{});var Dye=s(z5);Bfe=n(Dye,"STRONG",{});var tct=s(Bfe);pNo=r(tct,"bigbird_pegasus"),tct.forEach(t),_No=r(Dye," \u2014 "),ZD=n(Dye,"A",{href:!0});var act=s(ZD);uNo=r(act,"BigBirdPegasusForQuestionAnswering"),act.forEach(t),bNo=r(Dye," (BigBirdPegasus model)"),Dye.forEach(t),vNo=i(P),Q5=n(P,"LI",{});var Gye=s(Q5);Pfe=n(Gye,"STRONG",{});var nct=s(Pfe);FNo=r(nct,"camembert"),nct.forEach(t),TNo=r(Gye," \u2014 "),eG=n(Gye,"A",{href:!0});var sct=s(eG);MNo=r(sct,"CamembertForQuestionAnswering"),sct.forEach(t),ENo=r(Gye," (CamemBERT model)"),Gye.forEach(t),CNo=i(P),W5=n(P,"LI",{});var Oye=s(W5);$fe=n(Oye,"STRONG",{});var lct=s($fe);wNo=r(lct,"canine"),lct.forEach(t),ANo=r(Oye," \u2014 "),oG=n(Oye,"A",{href:!0});var ict=s(oG);yNo=r(ict,"CanineForQuestionAnswering"),ict.forEach(t),LNo=r(Oye," (Canine model)"),Oye.forEach(t),xNo=i(P),H5=n(P,"LI",{});var Vye=s(H5);Ife=n(Vye,"STRONG",{});var dct=s(Ife);kNo=r(dct,"convbert"),dct.forEach(t),SNo=r(Vye," \u2014 "),rG=n(Vye,"A",{href:!0});var cct=s(rG);RNo=r(cct,"ConvBertForQuestionAnswering"),cct.forEach(t),BNo=r(Vye," (ConvBERT model)"),Vye.forEach(t),PNo=i(P),U5=n(P,"LI",{});var Xye=s(U5);qfe=n(Xye,"STRONG",{});var fct=s(qfe);$No=r(fct,"data2vec-text"),fct.forEach(t),INo=r(Xye," \u2014 "),tG=n(Xye,"A",{href:!0});var mct=s(tG);qNo=r(mct,"Data2VecTextForQuestionAnswering"),mct.forEach(t),NNo=r(Xye," (Data2VecText model)"),Xye.forEach(t),jNo=i(P),J5=n(P,"LI",{});var zye=s(J5);Nfe=n(zye,"STRONG",{});var gct=s(Nfe);DNo=r(gct,"deberta"),gct.forEach(t),GNo=r(zye," \u2014 "),aG=n(zye,"A",{href:!0});var hct=s(aG);ONo=r(hct,"DebertaForQuestionAnswering"),hct.forEach(t),VNo=r(zye," (DeBERTa model)"),zye.forEach(t),XNo=i(P),Y5=n(P,"LI",{});var Qye=s(Y5);jfe=n(Qye,"STRONG",{});var pct=s(jfe);zNo=r(pct,"deberta-v2"),pct.forEach(t),QNo=r(Qye," \u2014 "),nG=n(Qye,"A",{href:!0});var _ct=s(nG);WNo=r(_ct,"DebertaV2ForQuestionAnswering"),_ct.forEach(t),HNo=r(Qye," (DeBERTa-v2 model)"),Qye.forEach(t),UNo=i(P),K5=n(P,"LI",{});var Wye=s(K5);Dfe=n(Wye,"STRONG",{});var uct=s(Dfe);JNo=r(uct,"distilbert"),uct.forEach(t),YNo=r(Wye," \u2014 "),sG=n(Wye,"A",{href:!0});var bct=s(sG);KNo=r(bct,"DistilBertForQuestionAnswering"),bct.forEach(t),ZNo=r(Wye," (DistilBERT model)"),Wye.forEach(t),ejo=i(P),Z5=n(P,"LI",{});var Hye=s(Z5);Gfe=n(Hye,"STRONG",{});var vct=s(Gfe);ojo=r(vct,"electra"),vct.forEach(t),rjo=r(Hye," \u2014 "),lG=n(Hye,"A",{href:!0});var Fct=s(lG);tjo=r(Fct,"ElectraForQuestionAnswering"),Fct.forEach(t),ajo=r(Hye," (ELECTRA model)"),Hye.forEach(t),njo=i(P),e6=n(P,"LI",{});var Uye=s(e6);Ofe=n(Uye,"STRONG",{});var Tct=s(Ofe);sjo=r(Tct,"flaubert"),Tct.forEach(t),ljo=r(Uye," \u2014 "),iG=n(Uye,"A",{href:!0});var Mct=s(iG);ijo=r(Mct,"FlaubertForQuestionAnsweringSimple"),Mct.forEach(t),djo=r(Uye," (FlauBERT model)"),Uye.forEach(t),cjo=i(P),o6=n(P,"LI",{});var Jye=s(o6);Vfe=n(Jye,"STRONG",{});var Ect=s(Vfe);fjo=r(Ect,"fnet"),Ect.forEach(t),mjo=r(Jye," \u2014 "),dG=n(Jye,"A",{href:!0});var Cct=s(dG);gjo=r(Cct,"FNetForQuestionAnswering"),Cct.forEach(t),hjo=r(Jye," (FNet model)"),Jye.forEach(t),pjo=i(P),r6=n(P,"LI",{});var Yye=s(r6);Xfe=n(Yye,"STRONG",{});var wct=s(Xfe);_jo=r(wct,"funnel"),wct.forEach(t),ujo=r(Yye," \u2014 "),cG=n(Yye,"A",{href:!0});var Act=s(cG);bjo=r(Act,"FunnelForQuestionAnswering"),Act.forEach(t),vjo=r(Yye," (Funnel Transformer model)"),Yye.forEach(t),Fjo=i(P),t6=n(P,"LI",{});var Kye=s(t6);zfe=n(Kye,"STRONG",{});var yct=s(zfe);Tjo=r(yct,"gptj"),yct.forEach(t),Mjo=r(Kye," \u2014 "),fG=n(Kye,"A",{href:!0});var Lct=s(fG);Ejo=r(Lct,"GPTJForQuestionAnswering"),Lct.forEach(t),Cjo=r(Kye," (GPT-J model)"),Kye.forEach(t),wjo=i(P),a6=n(P,"LI",{});var Zye=s(a6);Qfe=n(Zye,"STRONG",{});var xct=s(Qfe);Ajo=r(xct,"ibert"),xct.forEach(t),yjo=r(Zye," \u2014 "),mG=n(Zye,"A",{href:!0});var kct=s(mG);Ljo=r(kct,"IBertForQuestionAnswering"),kct.forEach(t),xjo=r(Zye," (I-BERT model)"),Zye.forEach(t),kjo=i(P),n6=n(P,"LI",{});var eLe=s(n6);Wfe=n(eLe,"STRONG",{});var Sct=s(Wfe);Sjo=r(Sct,"layoutlmv2"),Sct.forEach(t),Rjo=r(eLe," \u2014 "),gG=n(eLe,"A",{href:!0});var Rct=s(gG);Bjo=r(Rct,"LayoutLMv2ForQuestionAnswering"),Rct.forEach(t),Pjo=r(eLe," (LayoutLMv2 model)"),eLe.forEach(t),$jo=i(P),s6=n(P,"LI",{});var oLe=s(s6);Hfe=n(oLe,"STRONG",{});var Bct=s(Hfe);Ijo=r(Bct,"led"),Bct.forEach(t),qjo=r(oLe," \u2014 "),hG=n(oLe,"A",{href:!0});var Pct=s(hG);Njo=r(Pct,"LEDForQuestionAnswering"),Pct.forEach(t),jjo=r(oLe," (LED model)"),oLe.forEach(t),Djo=i(P),l6=n(P,"LI",{});var rLe=s(l6);Ufe=n(rLe,"STRONG",{});var $ct=s(Ufe);Gjo=r($ct,"longformer"),$ct.forEach(t),Ojo=r(rLe," \u2014 "),pG=n(rLe,"A",{href:!0});var Ict=s(pG);Vjo=r(Ict,"LongformerForQuestionAnswering"),Ict.forEach(t),Xjo=r(rLe," (Longformer model)"),rLe.forEach(t),zjo=i(P),i6=n(P,"LI",{});var tLe=s(i6);Jfe=n(tLe,"STRONG",{});var qct=s(Jfe);Qjo=r(qct,"lxmert"),qct.forEach(t),Wjo=r(tLe," \u2014 "),_G=n(tLe,"A",{href:!0});var Nct=s(_G);Hjo=r(Nct,"LxmertForQuestionAnswering"),Nct.forEach(t),Ujo=r(tLe," (LXMERT model)"),tLe.forEach(t),Jjo=i(P),d6=n(P,"LI",{});var aLe=s(d6);Yfe=n(aLe,"STRONG",{});var jct=s(Yfe);Yjo=r(jct,"mbart"),jct.forEach(t),Kjo=r(aLe," \u2014 "),uG=n(aLe,"A",{href:!0});var Dct=s(uG);Zjo=r(Dct,"MBartForQuestionAnswering"),Dct.forEach(t),eDo=r(aLe," (mBART model)"),aLe.forEach(t),oDo=i(P),c6=n(P,"LI",{});var nLe=s(c6);Kfe=n(nLe,"STRONG",{});var Gct=s(Kfe);rDo=r(Gct,"megatron-bert"),Gct.forEach(t),tDo=r(nLe," \u2014 "),bG=n(nLe,"A",{href:!0});var Oct=s(bG);aDo=r(Oct,"MegatronBertForQuestionAnswering"),Oct.forEach(t),nDo=r(nLe," (MegatronBert model)"),nLe.forEach(t),sDo=i(P),f6=n(P,"LI",{});var sLe=s(f6);Zfe=n(sLe,"STRONG",{});var Vct=s(Zfe);lDo=r(Vct,"mobilebert"),Vct.forEach(t),iDo=r(sLe," \u2014 "),vG=n(sLe,"A",{href:!0});var Xct=s(vG);dDo=r(Xct,"MobileBertForQuestionAnswering"),Xct.forEach(t),cDo=r(sLe," (MobileBERT model)"),sLe.forEach(t),fDo=i(P),m6=n(P,"LI",{});var lLe=s(m6);eme=n(lLe,"STRONG",{});var zct=s(eme);mDo=r(zct,"mpnet"),zct.forEach(t),gDo=r(lLe," \u2014 "),FG=n(lLe,"A",{href:!0});var Qct=s(FG);hDo=r(Qct,"MPNetForQuestionAnswering"),Qct.forEach(t),pDo=r(lLe," (MPNet model)"),lLe.forEach(t),_Do=i(P),g6=n(P,"LI",{});var iLe=s(g6);ome=n(iLe,"STRONG",{});var Wct=s(ome);uDo=r(Wct,"nystromformer"),Wct.forEach(t),bDo=r(iLe," \u2014 "),TG=n(iLe,"A",{href:!0});var Hct=s(TG);vDo=r(Hct,"NystromformerForQuestionAnswering"),Hct.forEach(t),FDo=r(iLe," (Nystromformer model)"),iLe.forEach(t),TDo=i(P),h6=n(P,"LI",{});var dLe=s(h6);rme=n(dLe,"STRONG",{});var Uct=s(rme);MDo=r(Uct,"qdqbert"),Uct.forEach(t),EDo=r(dLe," \u2014 "),MG=n(dLe,"A",{href:!0});var Jct=s(MG);CDo=r(Jct,"QDQBertForQuestionAnswering"),Jct.forEach(t),wDo=r(dLe," (QDQBert model)"),dLe.forEach(t),ADo=i(P),p6=n(P,"LI",{});var cLe=s(p6);tme=n(cLe,"STRONG",{});var Yct=s(tme);yDo=r(Yct,"reformer"),Yct.forEach(t),LDo=r(cLe," \u2014 "),EG=n(cLe,"A",{href:!0});var Kct=s(EG);xDo=r(Kct,"ReformerForQuestionAnswering"),Kct.forEach(t),kDo=r(cLe," (Reformer model)"),cLe.forEach(t),SDo=i(P),_6=n(P,"LI",{});var fLe=s(_6);ame=n(fLe,"STRONG",{});var Zct=s(ame);RDo=r(Zct,"rembert"),Zct.forEach(t),BDo=r(fLe," \u2014 "),CG=n(fLe,"A",{href:!0});var eft=s(CG);PDo=r(eft,"RemBertForQuestionAnswering"),eft.forEach(t),$Do=r(fLe," (RemBERT model)"),fLe.forEach(t),IDo=i(P),u6=n(P,"LI",{});var mLe=s(u6);nme=n(mLe,"STRONG",{});var oft=s(nme);qDo=r(oft,"roberta"),oft.forEach(t),NDo=r(mLe," \u2014 "),wG=n(mLe,"A",{href:!0});var rft=s(wG);jDo=r(rft,"RobertaForQuestionAnswering"),rft.forEach(t),DDo=r(mLe," (RoBERTa model)"),mLe.forEach(t),GDo=i(P),b6=n(P,"LI",{});var gLe=s(b6);sme=n(gLe,"STRONG",{});var tft=s(sme);ODo=r(tft,"roformer"),tft.forEach(t),VDo=r(gLe," \u2014 "),AG=n(gLe,"A",{href:!0});var aft=s(AG);XDo=r(aft,"RoFormerForQuestionAnswering"),aft.forEach(t),zDo=r(gLe," (RoFormer model)"),gLe.forEach(t),QDo=i(P),v6=n(P,"LI",{});var hLe=s(v6);lme=n(hLe,"STRONG",{});var nft=s(lme);WDo=r(nft,"splinter"),nft.forEach(t),HDo=r(hLe," \u2014 "),yG=n(hLe,"A",{href:!0});var sft=s(yG);UDo=r(sft,"SplinterForQuestionAnswering"),sft.forEach(t),JDo=r(hLe," (Splinter model)"),hLe.forEach(t),YDo=i(P),F6=n(P,"LI",{});var pLe=s(F6);ime=n(pLe,"STRONG",{});var lft=s(ime);KDo=r(lft,"squeezebert"),lft.forEach(t),ZDo=r(pLe," \u2014 "),LG=n(pLe,"A",{href:!0});var ift=s(LG);eGo=r(ift,"SqueezeBertForQuestionAnswering"),ift.forEach(t),oGo=r(pLe," (SqueezeBERT model)"),pLe.forEach(t),rGo=i(P),T6=n(P,"LI",{});var _Le=s(T6);dme=n(_Le,"STRONG",{});var dft=s(dme);tGo=r(dft,"xlm"),dft.forEach(t),aGo=r(_Le," \u2014 "),xG=n(_Le,"A",{href:!0});var cft=s(xG);nGo=r(cft,"XLMForQuestionAnsweringSimple"),cft.forEach(t),sGo=r(_Le," (XLM model)"),_Le.forEach(t),lGo=i(P),M6=n(P,"LI",{});var uLe=s(M6);cme=n(uLe,"STRONG",{});var fft=s(cme);iGo=r(fft,"xlm-roberta"),fft.forEach(t),dGo=r(uLe," \u2014 "),kG=n(uLe,"A",{href:!0});var mft=s(kG);cGo=r(mft,"XLMRobertaForQuestionAnswering"),mft.forEach(t),fGo=r(uLe," (XLM-RoBERTa model)"),uLe.forEach(t),mGo=i(P),E6=n(P,"LI",{});var bLe=s(E6);fme=n(bLe,"STRONG",{});var gft=s(fme);gGo=r(gft,"xlm-roberta-xl"),gft.forEach(t),hGo=r(bLe," \u2014 "),SG=n(bLe,"A",{href:!0});var hft=s(SG);pGo=r(hft,"XLMRobertaXLForQuestionAnswering"),hft.forEach(t),_Go=r(bLe," (XLM-RoBERTa-XL model)"),bLe.forEach(t),uGo=i(P),C6=n(P,"LI",{});var vLe=s(C6);mme=n(vLe,"STRONG",{});var pft=s(mme);bGo=r(pft,"xlnet"),pft.forEach(t),vGo=r(vLe," \u2014 "),RG=n(vLe,"A",{href:!0});var _ft=s(RG);FGo=r(_ft,"XLNetForQuestionAnsweringSimple"),_ft.forEach(t),TGo=r(vLe," (XLNet model)"),vLe.forEach(t),MGo=i(P),w6=n(P,"LI",{});var FLe=s(w6);gme=n(FLe,"STRONG",{});var uft=s(gme);EGo=r(uft,"yoso"),uft.forEach(t),CGo=r(FLe," \u2014 "),BG=n(FLe,"A",{href:!0});var bft=s(BG);wGo=r(bft,"YosoForQuestionAnswering"),bft.forEach(t),AGo=r(FLe," (YOSO model)"),FLe.forEach(t),P.forEach(t),yGo=i(Ut),A6=n(Ut,"P",{});var TLe=s(A6);LGo=r(TLe,"The model is set in evaluation mode by default using "),hme=n(TLe,"CODE",{});var vft=s(hme);xGo=r(vft,"model.eval()"),vft.forEach(t),kGo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),pme=n(TLe,"CODE",{});var Fft=s(pme);SGo=r(Fft,"model.train()"),Fft.forEach(t),TLe.forEach(t),RGo=i(Ut),_me=n(Ut,"P",{});var Tft=s(_me);BGo=r(Tft,"Examples:"),Tft.forEach(t),PGo=i(Ut),m(GC.$$.fragment,Ut),Ut.forEach(t),Fl.forEach(t),IPe=i(c),$d=n(c,"H2",{class:!0});var zIe=s($d);y6=n(zIe,"A",{id:!0,class:!0,href:!0});var Mft=s(y6);ume=n(Mft,"SPAN",{});var Eft=s(ume);m(OC.$$.fragment,Eft),Eft.forEach(t),Mft.forEach(t),$Go=i(zIe),bme=n(zIe,"SPAN",{});var Cft=s(bme);IGo=r(Cft,"AutoModelForTableQuestionAnswering"),Cft.forEach(t),zIe.forEach(t),qPe=i(c),sr=n(c,"DIV",{class:!0});var Ml=s(sr);m(VC.$$.fragment,Ml),qGo=i(Ml),Id=n(Ml,"P",{});var NJ=s(Id);NGo=r(NJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),PG=n(NJ,"A",{href:!0});var wft=s(PG);jGo=r(wft,"from_pretrained()"),wft.forEach(t),DGo=r(NJ," class method or the "),$G=n(NJ,"A",{href:!0});var Aft=s($G);GGo=r(Aft,"from_config()"),Aft.forEach(t),OGo=r(NJ,` class
method.`),NJ.forEach(t),VGo=i(Ml),XC=n(Ml,"P",{});var QIe=s(XC);XGo=r(QIe,"This class cannot be instantiated directly using "),vme=n(QIe,"CODE",{});var yft=s(vme);zGo=r(yft,"__init__()"),yft.forEach(t),QGo=r(QIe," (throws an error)."),QIe.forEach(t),WGo=i(Ml),et=n(Ml,"DIV",{class:!0});var El=s(et);m(zC.$$.fragment,El),HGo=i(El),Fme=n(El,"P",{});var Lft=s(Fme);UGo=r(Lft,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Lft.forEach(t),JGo=i(El),qd=n(El,"P",{});var jJ=s(qd);YGo=r(jJ,`Note:
Loading a model from its configuration file does `),Tme=n(jJ,"STRONG",{});var xft=s(Tme);KGo=r(xft,"not"),xft.forEach(t),ZGo=r(jJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IG=n(jJ,"A",{href:!0});var kft=s(IG);eOo=r(kft,"from_pretrained()"),kft.forEach(t),oOo=r(jJ," to load the model weights."),jJ.forEach(t),rOo=i(El),Mme=n(El,"P",{});var Sft=s(Mme);tOo=r(Sft,"Examples:"),Sft.forEach(t),aOo=i(El),m(QC.$$.fragment,El),El.forEach(t),nOo=i(Ml),He=n(Ml,"DIV",{class:!0});var Jt=s(He);m(WC.$$.fragment,Jt),sOo=i(Jt),Eme=n(Jt,"P",{});var Rft=s(Eme);lOo=r(Rft,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Rft.forEach(t),iOo=i(Jt),en=n(Jt,"P",{});var nE=s(en);dOo=r(nE,"The model class to instantiate is selected based on the "),Cme=n(nE,"CODE",{});var Bft=s(Cme);cOo=r(Bft,"model_type"),Bft.forEach(t),fOo=r(nE,` property of the config object (either
passed as an argument or loaded from `),wme=n(nE,"CODE",{});var Pft=s(wme);mOo=r(Pft,"pretrained_model_name_or_path"),Pft.forEach(t),gOo=r(nE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(nE,"CODE",{});var $ft=s(Ame);hOo=r($ft,"pretrained_model_name_or_path"),$ft.forEach(t),pOo=r(nE,":"),nE.forEach(t),_Oo=i(Jt),yme=n(Jt,"UL",{});var Ift=s(yme);L6=n(Ift,"LI",{});var MLe=s(L6);Lme=n(MLe,"STRONG",{});var qft=s(Lme);uOo=r(qft,"tapas"),qft.forEach(t),bOo=r(MLe," \u2014 "),qG=n(MLe,"A",{href:!0});var Nft=s(qG);vOo=r(Nft,"TapasForQuestionAnswering"),Nft.forEach(t),FOo=r(MLe," (TAPAS model)"),MLe.forEach(t),Ift.forEach(t),TOo=i(Jt),x6=n(Jt,"P",{});var ELe=s(x6);MOo=r(ELe,"The model is set in evaluation mode by default using "),xme=n(ELe,"CODE",{});var jft=s(xme);EOo=r(jft,"model.eval()"),jft.forEach(t),COo=r(ELe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(ELe,"CODE",{});var Dft=s(kme);wOo=r(Dft,"model.train()"),Dft.forEach(t),ELe.forEach(t),AOo=i(Jt),Sme=n(Jt,"P",{});var Gft=s(Sme);yOo=r(Gft,"Examples:"),Gft.forEach(t),LOo=i(Jt),m(HC.$$.fragment,Jt),Jt.forEach(t),Ml.forEach(t),NPe=i(c),Nd=n(c,"H2",{class:!0});var WIe=s(Nd);k6=n(WIe,"A",{id:!0,class:!0,href:!0});var Oft=s(k6);Rme=n(Oft,"SPAN",{});var Vft=s(Rme);m(UC.$$.fragment,Vft),Vft.forEach(t),Oft.forEach(t),xOo=i(WIe),Bme=n(WIe,"SPAN",{});var Xft=s(Bme);kOo=r(Xft,"AutoModelForImageClassification"),Xft.forEach(t),WIe.forEach(t),jPe=i(c),lr=n(c,"DIV",{class:!0});var Cl=s(lr);m(JC.$$.fragment,Cl),SOo=i(Cl),jd=n(Cl,"P",{});var DJ=s(jd);ROo=r(DJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),NG=n(DJ,"A",{href:!0});var zft=s(NG);BOo=r(zft,"from_pretrained()"),zft.forEach(t),POo=r(DJ," class method or the "),jG=n(DJ,"A",{href:!0});var Qft=s(jG);$Oo=r(Qft,"from_config()"),Qft.forEach(t),IOo=r(DJ,` class
method.`),DJ.forEach(t),qOo=i(Cl),YC=n(Cl,"P",{});var HIe=s(YC);NOo=r(HIe,"This class cannot be instantiated directly using "),Pme=n(HIe,"CODE",{});var Wft=s(Pme);jOo=r(Wft,"__init__()"),Wft.forEach(t),DOo=r(HIe," (throws an error)."),HIe.forEach(t),GOo=i(Cl),ot=n(Cl,"DIV",{class:!0});var wl=s(ot);m(KC.$$.fragment,wl),OOo=i(wl),$me=n(wl,"P",{});var Hft=s($me);VOo=r(Hft,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Hft.forEach(t),XOo=i(wl),Dd=n(wl,"P",{});var GJ=s(Dd);zOo=r(GJ,`Note:
Loading a model from its configuration file does `),Ime=n(GJ,"STRONG",{});var Uft=s(Ime);QOo=r(Uft,"not"),Uft.forEach(t),WOo=r(GJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),DG=n(GJ,"A",{href:!0});var Jft=s(DG);HOo=r(Jft,"from_pretrained()"),Jft.forEach(t),UOo=r(GJ," to load the model weights."),GJ.forEach(t),JOo=i(wl),qme=n(wl,"P",{});var Yft=s(qme);YOo=r(Yft,"Examples:"),Yft.forEach(t),KOo=i(wl),m(ZC.$$.fragment,wl),wl.forEach(t),ZOo=i(Cl),Ue=n(Cl,"DIV",{class:!0});var Yt=s(Ue);m(ew.$$.fragment,Yt),eVo=i(Yt),Nme=n(Yt,"P",{});var Kft=s(Nme);oVo=r(Kft,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Kft.forEach(t),rVo=i(Yt),on=n(Yt,"P",{});var sE=s(on);tVo=r(sE,"The model class to instantiate is selected based on the "),jme=n(sE,"CODE",{});var Zft=s(jme);aVo=r(Zft,"model_type"),Zft.forEach(t),nVo=r(sE,` property of the config object (either
passed as an argument or loaded from `),Dme=n(sE,"CODE",{});var emt=s(Dme);sVo=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),lVo=r(sE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gme=n(sE,"CODE",{});var omt=s(Gme);iVo=r(omt,"pretrained_model_name_or_path"),omt.forEach(t),dVo=r(sE,":"),sE.forEach(t),cVo=i(Yt),ce=n(Yt,"UL",{});var pe=s(ce);S6=n(pe,"LI",{});var CLe=s(S6);Ome=n(CLe,"STRONG",{});var rmt=s(Ome);fVo=r(rmt,"beit"),rmt.forEach(t),mVo=r(CLe," \u2014 "),GG=n(CLe,"A",{href:!0});var tmt=s(GG);gVo=r(tmt,"BeitForImageClassification"),tmt.forEach(t),hVo=r(CLe," (BEiT model)"),CLe.forEach(t),pVo=i(pe),R6=n(pe,"LI",{});var wLe=s(R6);Vme=n(wLe,"STRONG",{});var amt=s(Vme);_Vo=r(amt,"convnext"),amt.forEach(t),uVo=r(wLe," \u2014 "),OG=n(wLe,"A",{href:!0});var nmt=s(OG);bVo=r(nmt,"ConvNextForImageClassification"),nmt.forEach(t),vVo=r(wLe," (ConvNext model)"),wLe.forEach(t),FVo=i(pe),B6=n(pe,"LI",{});var ALe=s(B6);Xme=n(ALe,"STRONG",{});var smt=s(Xme);TVo=r(smt,"data2vec-vision"),smt.forEach(t),MVo=r(ALe," \u2014 "),VG=n(ALe,"A",{href:!0});var lmt=s(VG);EVo=r(lmt,"Data2VecVisionForImageClassification"),lmt.forEach(t),CVo=r(ALe," (Data2VecVision model)"),ALe.forEach(t),wVo=i(pe),Us=n(pe,"LI",{});var X9=s(Us);zme=n(X9,"STRONG",{});var imt=s(zme);AVo=r(imt,"deit"),imt.forEach(t),yVo=r(X9," \u2014 "),XG=n(X9,"A",{href:!0});var dmt=s(XG);LVo=r(dmt,"DeiTForImageClassification"),dmt.forEach(t),xVo=r(X9," or "),zG=n(X9,"A",{href:!0});var cmt=s(zG);kVo=r(cmt,"DeiTForImageClassificationWithTeacher"),cmt.forEach(t),SVo=r(X9," (DeiT model)"),X9.forEach(t),RVo=i(pe),P6=n(pe,"LI",{});var yLe=s(P6);Qme=n(yLe,"STRONG",{});var fmt=s(Qme);BVo=r(fmt,"imagegpt"),fmt.forEach(t),PVo=r(yLe," \u2014 "),QG=n(yLe,"A",{href:!0});var mmt=s(QG);$Vo=r(mmt,"ImageGPTForImageClassification"),mmt.forEach(t),IVo=r(yLe," (ImageGPT model)"),yLe.forEach(t),qVo=i(pe),ma=n(pe,"LI",{});var Vf=s(ma);Wme=n(Vf,"STRONG",{});var gmt=s(Wme);NVo=r(gmt,"perceiver"),gmt.forEach(t),jVo=r(Vf," \u2014 "),WG=n(Vf,"A",{href:!0});var hmt=s(WG);DVo=r(hmt,"PerceiverForImageClassificationLearned"),hmt.forEach(t),GVo=r(Vf," or "),HG=n(Vf,"A",{href:!0});var pmt=s(HG);OVo=r(pmt,"PerceiverForImageClassificationFourier"),pmt.forEach(t),VVo=r(Vf," or "),UG=n(Vf,"A",{href:!0});var _mt=s(UG);XVo=r(_mt,"PerceiverForImageClassificationConvProcessing"),_mt.forEach(t),zVo=r(Vf," (Perceiver model)"),Vf.forEach(t),QVo=i(pe),$6=n(pe,"LI",{});var LLe=s($6);Hme=n(LLe,"STRONG",{});var umt=s(Hme);WVo=r(umt,"poolformer"),umt.forEach(t),HVo=r(LLe," \u2014 "),JG=n(LLe,"A",{href:!0});var bmt=s(JG);UVo=r(bmt,"PoolFormerForImageClassification"),bmt.forEach(t),JVo=r(LLe," (PoolFormer model)"),LLe.forEach(t),YVo=i(pe),I6=n(pe,"LI",{});var xLe=s(I6);Ume=n(xLe,"STRONG",{});var vmt=s(Ume);KVo=r(vmt,"regnet"),vmt.forEach(t),ZVo=r(xLe," \u2014 "),YG=n(xLe,"A",{href:!0});var Fmt=s(YG);eXo=r(Fmt,"RegNetForImageClassification"),Fmt.forEach(t),oXo=r(xLe," (RegNet model)"),xLe.forEach(t),rXo=i(pe),q6=n(pe,"LI",{});var kLe=s(q6);Jme=n(kLe,"STRONG",{});var Tmt=s(Jme);tXo=r(Tmt,"resnet"),Tmt.forEach(t),aXo=r(kLe," \u2014 "),KG=n(kLe,"A",{href:!0});var Mmt=s(KG);nXo=r(Mmt,"ResNetForImageClassification"),Mmt.forEach(t),sXo=r(kLe," (ResNet model)"),kLe.forEach(t),lXo=i(pe),N6=n(pe,"LI",{});var SLe=s(N6);Yme=n(SLe,"STRONG",{});var Emt=s(Yme);iXo=r(Emt,"segformer"),Emt.forEach(t),dXo=r(SLe," \u2014 "),ZG=n(SLe,"A",{href:!0});var Cmt=s(ZG);cXo=r(Cmt,"SegformerForImageClassification"),Cmt.forEach(t),fXo=r(SLe," (SegFormer model)"),SLe.forEach(t),mXo=i(pe),j6=n(pe,"LI",{});var RLe=s(j6);Kme=n(RLe,"STRONG",{});var wmt=s(Kme);gXo=r(wmt,"swin"),wmt.forEach(t),hXo=r(RLe," \u2014 "),eO=n(RLe,"A",{href:!0});var Amt=s(eO);pXo=r(Amt,"SwinForImageClassification"),Amt.forEach(t),_Xo=r(RLe," (Swin model)"),RLe.forEach(t),uXo=i(pe),D6=n(pe,"LI",{});var BLe=s(D6);Zme=n(BLe,"STRONG",{});var ymt=s(Zme);bXo=r(ymt,"van"),ymt.forEach(t),vXo=r(BLe," \u2014 "),oO=n(BLe,"A",{href:!0});var Lmt=s(oO);FXo=r(Lmt,"VanForImageClassification"),Lmt.forEach(t),TXo=r(BLe," (VAN model)"),BLe.forEach(t),MXo=i(pe),G6=n(pe,"LI",{});var PLe=s(G6);ege=n(PLe,"STRONG",{});var xmt=s(ege);EXo=r(xmt,"vit"),xmt.forEach(t),CXo=r(PLe," \u2014 "),rO=n(PLe,"A",{href:!0});var kmt=s(rO);wXo=r(kmt,"ViTForImageClassification"),kmt.forEach(t),AXo=r(PLe," (ViT model)"),PLe.forEach(t),pe.forEach(t),yXo=i(Yt),O6=n(Yt,"P",{});var $Le=s(O6);LXo=r($Le,"The model is set in evaluation mode by default using "),oge=n($Le,"CODE",{});var Smt=s(oge);xXo=r(Smt,"model.eval()"),Smt.forEach(t),kXo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),rge=n($Le,"CODE",{});var Rmt=s(rge);SXo=r(Rmt,"model.train()"),Rmt.forEach(t),$Le.forEach(t),RXo=i(Yt),tge=n(Yt,"P",{});var Bmt=s(tge);BXo=r(Bmt,"Examples:"),Bmt.forEach(t),PXo=i(Yt),m(ow.$$.fragment,Yt),Yt.forEach(t),Cl.forEach(t),DPe=i(c),Gd=n(c,"H2",{class:!0});var UIe=s(Gd);V6=n(UIe,"A",{id:!0,class:!0,href:!0});var Pmt=s(V6);age=n(Pmt,"SPAN",{});var $mt=s(age);m(rw.$$.fragment,$mt),$mt.forEach(t),Pmt.forEach(t),$Xo=i(UIe),nge=n(UIe,"SPAN",{});var Imt=s(nge);IXo=r(Imt,"AutoModelForVision2Seq"),Imt.forEach(t),UIe.forEach(t),GPe=i(c),ir=n(c,"DIV",{class:!0});var Al=s(ir);m(tw.$$.fragment,Al),qXo=i(Al),Od=n(Al,"P",{});var OJ=s(Od);NXo=r(OJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tO=n(OJ,"A",{href:!0});var qmt=s(tO);jXo=r(qmt,"from_pretrained()"),qmt.forEach(t),DXo=r(OJ," class method or the "),aO=n(OJ,"A",{href:!0});var Nmt=s(aO);GXo=r(Nmt,"from_config()"),Nmt.forEach(t),OXo=r(OJ,` class
method.`),OJ.forEach(t),VXo=i(Al),aw=n(Al,"P",{});var JIe=s(aw);XXo=r(JIe,"This class cannot be instantiated directly using "),sge=n(JIe,"CODE",{});var jmt=s(sge);zXo=r(jmt,"__init__()"),jmt.forEach(t),QXo=r(JIe," (throws an error)."),JIe.forEach(t),WXo=i(Al),rt=n(Al,"DIV",{class:!0});var yl=s(rt);m(nw.$$.fragment,yl),HXo=i(yl),lge=n(yl,"P",{});var Dmt=s(lge);UXo=r(Dmt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Dmt.forEach(t),JXo=i(yl),Vd=n(yl,"P",{});var VJ=s(Vd);YXo=r(VJ,`Note:
Loading a model from its configuration file does `),ige=n(VJ,"STRONG",{});var Gmt=s(ige);KXo=r(Gmt,"not"),Gmt.forEach(t),ZXo=r(VJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nO=n(VJ,"A",{href:!0});var Omt=s(nO);ezo=r(Omt,"from_pretrained()"),Omt.forEach(t),ozo=r(VJ," to load the model weights."),VJ.forEach(t),rzo=i(yl),dge=n(yl,"P",{});var Vmt=s(dge);tzo=r(Vmt,"Examples:"),Vmt.forEach(t),azo=i(yl),m(sw.$$.fragment,yl),yl.forEach(t),nzo=i(Al),Je=n(Al,"DIV",{class:!0});var Kt=s(Je);m(lw.$$.fragment,Kt),szo=i(Kt),cge=n(Kt,"P",{});var Xmt=s(cge);lzo=r(Xmt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Xmt.forEach(t),izo=i(Kt),rn=n(Kt,"P",{});var lE=s(rn);dzo=r(lE,"The model class to instantiate is selected based on the "),fge=n(lE,"CODE",{});var zmt=s(fge);czo=r(zmt,"model_type"),zmt.forEach(t),fzo=r(lE,` property of the config object (either
passed as an argument or loaded from `),mge=n(lE,"CODE",{});var Qmt=s(mge);mzo=r(Qmt,"pretrained_model_name_or_path"),Qmt.forEach(t),gzo=r(lE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gge=n(lE,"CODE",{});var Wmt=s(gge);hzo=r(Wmt,"pretrained_model_name_or_path"),Wmt.forEach(t),pzo=r(lE,":"),lE.forEach(t),_zo=i(Kt),hge=n(Kt,"UL",{});var Hmt=s(hge);X6=n(Hmt,"LI",{});var ILe=s(X6);pge=n(ILe,"STRONG",{});var Umt=s(pge);uzo=r(Umt,"vision-encoder-decoder"),Umt.forEach(t),bzo=r(ILe," \u2014 "),sO=n(ILe,"A",{href:!0});var Jmt=s(sO);vzo=r(Jmt,"VisionEncoderDecoderModel"),Jmt.forEach(t),Fzo=r(ILe," (Vision Encoder decoder model)"),ILe.forEach(t),Hmt.forEach(t),Tzo=i(Kt),z6=n(Kt,"P",{});var qLe=s(z6);Mzo=r(qLe,"The model is set in evaluation mode by default using "),_ge=n(qLe,"CODE",{});var Ymt=s(_ge);Ezo=r(Ymt,"model.eval()"),Ymt.forEach(t),Czo=r(qLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(qLe,"CODE",{});var Kmt=s(uge);wzo=r(Kmt,"model.train()"),Kmt.forEach(t),qLe.forEach(t),Azo=i(Kt),bge=n(Kt,"P",{});var Zmt=s(bge);yzo=r(Zmt,"Examples:"),Zmt.forEach(t),Lzo=i(Kt),m(iw.$$.fragment,Kt),Kt.forEach(t),Al.forEach(t),OPe=i(c),Xd=n(c,"H2",{class:!0});var YIe=s(Xd);Q6=n(YIe,"A",{id:!0,class:!0,href:!0});var egt=s(Q6);vge=n(egt,"SPAN",{});var ogt=s(vge);m(dw.$$.fragment,ogt),ogt.forEach(t),egt.forEach(t),xzo=i(YIe),Fge=n(YIe,"SPAN",{});var rgt=s(Fge);kzo=r(rgt,"AutoModelForAudioClassification"),rgt.forEach(t),YIe.forEach(t),VPe=i(c),dr=n(c,"DIV",{class:!0});var Ll=s(dr);m(cw.$$.fragment,Ll),Szo=i(Ll),zd=n(Ll,"P",{});var XJ=s(zd);Rzo=r(XJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),lO=n(XJ,"A",{href:!0});var tgt=s(lO);Bzo=r(tgt,"from_pretrained()"),tgt.forEach(t),Pzo=r(XJ," class method or the "),iO=n(XJ,"A",{href:!0});var agt=s(iO);$zo=r(agt,"from_config()"),agt.forEach(t),Izo=r(XJ,` class
method.`),XJ.forEach(t),qzo=i(Ll),fw=n(Ll,"P",{});var KIe=s(fw);Nzo=r(KIe,"This class cannot be instantiated directly using "),Tge=n(KIe,"CODE",{});var ngt=s(Tge);jzo=r(ngt,"__init__()"),ngt.forEach(t),Dzo=r(KIe," (throws an error)."),KIe.forEach(t),Gzo=i(Ll),tt=n(Ll,"DIV",{class:!0});var xl=s(tt);m(mw.$$.fragment,xl),Ozo=i(xl),Mge=n(xl,"P",{});var sgt=s(Mge);Vzo=r(sgt,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),sgt.forEach(t),Xzo=i(xl),Qd=n(xl,"P",{});var zJ=s(Qd);zzo=r(zJ,`Note:
Loading a model from its configuration file does `),Ege=n(zJ,"STRONG",{});var lgt=s(Ege);Qzo=r(lgt,"not"),lgt.forEach(t),Wzo=r(zJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dO=n(zJ,"A",{href:!0});var igt=s(dO);Hzo=r(igt,"from_pretrained()"),igt.forEach(t),Uzo=r(zJ," to load the model weights."),zJ.forEach(t),Jzo=i(xl),Cge=n(xl,"P",{});var dgt=s(Cge);Yzo=r(dgt,"Examples:"),dgt.forEach(t),Kzo=i(xl),m(gw.$$.fragment,xl),xl.forEach(t),Zzo=i(Ll),Ye=n(Ll,"DIV",{class:!0});var Zt=s(Ye);m(hw.$$.fragment,Zt),eQo=i(Zt),wge=n(Zt,"P",{});var cgt=s(wge);oQo=r(cgt,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),cgt.forEach(t),rQo=i(Zt),tn=n(Zt,"P",{});var iE=s(tn);tQo=r(iE,"The model class to instantiate is selected based on the "),Age=n(iE,"CODE",{});var fgt=s(Age);aQo=r(fgt,"model_type"),fgt.forEach(t),nQo=r(iE,` property of the config object (either
passed as an argument or loaded from `),yge=n(iE,"CODE",{});var mgt=s(yge);sQo=r(mgt,"pretrained_model_name_or_path"),mgt.forEach(t),lQo=r(iE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lge=n(iE,"CODE",{});var ggt=s(Lge);iQo=r(ggt,"pretrained_model_name_or_path"),ggt.forEach(t),dQo=r(iE,":"),iE.forEach(t),cQo=i(Zt),Re=n(Zt,"UL",{});var Do=s(Re);W6=n(Do,"LI",{});var NLe=s(W6);xge=n(NLe,"STRONG",{});var hgt=s(xge);fQo=r(hgt,"data2vec-audio"),hgt.forEach(t),mQo=r(NLe," \u2014 "),cO=n(NLe,"A",{href:!0});var pgt=s(cO);gQo=r(pgt,"Data2VecAudioForSequenceClassification"),pgt.forEach(t),hQo=r(NLe," (Data2VecAudio model)"),NLe.forEach(t),pQo=i(Do),H6=n(Do,"LI",{});var jLe=s(H6);kge=n(jLe,"STRONG",{});var _gt=s(kge);_Qo=r(_gt,"hubert"),_gt.forEach(t),uQo=r(jLe," \u2014 "),fO=n(jLe,"A",{href:!0});var ugt=s(fO);bQo=r(ugt,"HubertForSequenceClassification"),ugt.forEach(t),vQo=r(jLe," (Hubert model)"),jLe.forEach(t),FQo=i(Do),U6=n(Do,"LI",{});var DLe=s(U6);Sge=n(DLe,"STRONG",{});var bgt=s(Sge);TQo=r(bgt,"sew"),bgt.forEach(t),MQo=r(DLe," \u2014 "),mO=n(DLe,"A",{href:!0});var vgt=s(mO);EQo=r(vgt,"SEWForSequenceClassification"),vgt.forEach(t),CQo=r(DLe," (SEW model)"),DLe.forEach(t),wQo=i(Do),J6=n(Do,"LI",{});var GLe=s(J6);Rge=n(GLe,"STRONG",{});var Fgt=s(Rge);AQo=r(Fgt,"sew-d"),Fgt.forEach(t),yQo=r(GLe," \u2014 "),gO=n(GLe,"A",{href:!0});var Tgt=s(gO);LQo=r(Tgt,"SEWDForSequenceClassification"),Tgt.forEach(t),xQo=r(GLe," (SEW-D model)"),GLe.forEach(t),kQo=i(Do),Y6=n(Do,"LI",{});var OLe=s(Y6);Bge=n(OLe,"STRONG",{});var Mgt=s(Bge);SQo=r(Mgt,"unispeech"),Mgt.forEach(t),RQo=r(OLe," \u2014 "),hO=n(OLe,"A",{href:!0});var Egt=s(hO);BQo=r(Egt,"UniSpeechForSequenceClassification"),Egt.forEach(t),PQo=r(OLe," (UniSpeech model)"),OLe.forEach(t),$Qo=i(Do),K6=n(Do,"LI",{});var VLe=s(K6);Pge=n(VLe,"STRONG",{});var Cgt=s(Pge);IQo=r(Cgt,"unispeech-sat"),Cgt.forEach(t),qQo=r(VLe," \u2014 "),pO=n(VLe,"A",{href:!0});var wgt=s(pO);NQo=r(wgt,"UniSpeechSatForSequenceClassification"),wgt.forEach(t),jQo=r(VLe," (UniSpeechSat model)"),VLe.forEach(t),DQo=i(Do),Z6=n(Do,"LI",{});var XLe=s(Z6);$ge=n(XLe,"STRONG",{});var Agt=s($ge);GQo=r(Agt,"wav2vec2"),Agt.forEach(t),OQo=r(XLe," \u2014 "),_O=n(XLe,"A",{href:!0});var ygt=s(_O);VQo=r(ygt,"Wav2Vec2ForSequenceClassification"),ygt.forEach(t),XQo=r(XLe," (Wav2Vec2 model)"),XLe.forEach(t),zQo=i(Do),ev=n(Do,"LI",{});var zLe=s(ev);Ige=n(zLe,"STRONG",{});var Lgt=s(Ige);QQo=r(Lgt,"wavlm"),Lgt.forEach(t),WQo=r(zLe," \u2014 "),uO=n(zLe,"A",{href:!0});var xgt=s(uO);HQo=r(xgt,"WavLMForSequenceClassification"),xgt.forEach(t),UQo=r(zLe," (WavLM model)"),zLe.forEach(t),Do.forEach(t),JQo=i(Zt),ov=n(Zt,"P",{});var QLe=s(ov);YQo=r(QLe,"The model is set in evaluation mode by default using "),qge=n(QLe,"CODE",{});var kgt=s(qge);KQo=r(kgt,"model.eval()"),kgt.forEach(t),ZQo=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nge=n(QLe,"CODE",{});var Sgt=s(Nge);eWo=r(Sgt,"model.train()"),Sgt.forEach(t),QLe.forEach(t),oWo=i(Zt),jge=n(Zt,"P",{});var Rgt=s(jge);rWo=r(Rgt,"Examples:"),Rgt.forEach(t),tWo=i(Zt),m(pw.$$.fragment,Zt),Zt.forEach(t),Ll.forEach(t),XPe=i(c),Wd=n(c,"H2",{class:!0});var ZIe=s(Wd);rv=n(ZIe,"A",{id:!0,class:!0,href:!0});var Bgt=s(rv);Dge=n(Bgt,"SPAN",{});var Pgt=s(Dge);m(_w.$$.fragment,Pgt),Pgt.forEach(t),Bgt.forEach(t),aWo=i(ZIe),Gge=n(ZIe,"SPAN",{});var $gt=s(Gge);nWo=r($gt,"AutoModelForAudioFrameClassification"),$gt.forEach(t),ZIe.forEach(t),zPe=i(c),cr=n(c,"DIV",{class:!0});var kl=s(cr);m(uw.$$.fragment,kl),sWo=i(kl),Hd=n(kl,"P",{});var QJ=s(Hd);lWo=r(QJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),bO=n(QJ,"A",{href:!0});var Igt=s(bO);iWo=r(Igt,"from_pretrained()"),Igt.forEach(t),dWo=r(QJ," class method or the "),vO=n(QJ,"A",{href:!0});var qgt=s(vO);cWo=r(qgt,"from_config()"),qgt.forEach(t),fWo=r(QJ,` class
method.`),QJ.forEach(t),mWo=i(kl),bw=n(kl,"P",{});var eqe=s(bw);gWo=r(eqe,"This class cannot be instantiated directly using "),Oge=n(eqe,"CODE",{});var Ngt=s(Oge);hWo=r(Ngt,"__init__()"),Ngt.forEach(t),pWo=r(eqe," (throws an error)."),eqe.forEach(t),_Wo=i(kl),at=n(kl,"DIV",{class:!0});var Sl=s(at);m(vw.$$.fragment,Sl),uWo=i(Sl),Vge=n(Sl,"P",{});var jgt=s(Vge);bWo=r(jgt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),jgt.forEach(t),vWo=i(Sl),Ud=n(Sl,"P",{});var WJ=s(Ud);FWo=r(WJ,`Note:
Loading a model from its configuration file does `),Xge=n(WJ,"STRONG",{});var Dgt=s(Xge);TWo=r(Dgt,"not"),Dgt.forEach(t),MWo=r(WJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),FO=n(WJ,"A",{href:!0});var Ggt=s(FO);EWo=r(Ggt,"from_pretrained()"),Ggt.forEach(t),CWo=r(WJ," to load the model weights."),WJ.forEach(t),wWo=i(Sl),zge=n(Sl,"P",{});var Ogt=s(zge);AWo=r(Ogt,"Examples:"),Ogt.forEach(t),yWo=i(Sl),m(Fw.$$.fragment,Sl),Sl.forEach(t),LWo=i(kl),Ke=n(kl,"DIV",{class:!0});var ea=s(Ke);m(Tw.$$.fragment,ea),xWo=i(ea),Qge=n(ea,"P",{});var Vgt=s(Qge);kWo=r(Vgt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),Vgt.forEach(t),SWo=i(ea),an=n(ea,"P",{});var dE=s(an);RWo=r(dE,"The model class to instantiate is selected based on the "),Wge=n(dE,"CODE",{});var Xgt=s(Wge);BWo=r(Xgt,"model_type"),Xgt.forEach(t),PWo=r(dE,` property of the config object (either
passed as an argument or loaded from `),Hge=n(dE,"CODE",{});var zgt=s(Hge);$Wo=r(zgt,"pretrained_model_name_or_path"),zgt.forEach(t),IWo=r(dE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uge=n(dE,"CODE",{});var Qgt=s(Uge);qWo=r(Qgt,"pretrained_model_name_or_path"),Qgt.forEach(t),NWo=r(dE,":"),dE.forEach(t),jWo=i(ea),nn=n(ea,"UL",{});var cE=s(nn);tv=n(cE,"LI",{});var WLe=s(tv);Jge=n(WLe,"STRONG",{});var Wgt=s(Jge);DWo=r(Wgt,"data2vec-audio"),Wgt.forEach(t),GWo=r(WLe," \u2014 "),TO=n(WLe,"A",{href:!0});var Hgt=s(TO);OWo=r(Hgt,"Data2VecAudioForAudioFrameClassification"),Hgt.forEach(t),VWo=r(WLe," (Data2VecAudio model)"),WLe.forEach(t),XWo=i(cE),av=n(cE,"LI",{});var HLe=s(av);Yge=n(HLe,"STRONG",{});var Ugt=s(Yge);zWo=r(Ugt,"unispeech-sat"),Ugt.forEach(t),QWo=r(HLe," \u2014 "),MO=n(HLe,"A",{href:!0});var Jgt=s(MO);WWo=r(Jgt,"UniSpeechSatForAudioFrameClassification"),Jgt.forEach(t),HWo=r(HLe," (UniSpeechSat model)"),HLe.forEach(t),UWo=i(cE),nv=n(cE,"LI",{});var ULe=s(nv);Kge=n(ULe,"STRONG",{});var Ygt=s(Kge);JWo=r(Ygt,"wav2vec2"),Ygt.forEach(t),YWo=r(ULe," \u2014 "),EO=n(ULe,"A",{href:!0});var Kgt=s(EO);KWo=r(Kgt,"Wav2Vec2ForAudioFrameClassification"),Kgt.forEach(t),ZWo=r(ULe," (Wav2Vec2 model)"),ULe.forEach(t),eHo=i(cE),sv=n(cE,"LI",{});var JLe=s(sv);Zge=n(JLe,"STRONG",{});var Zgt=s(Zge);oHo=r(Zgt,"wavlm"),Zgt.forEach(t),rHo=r(JLe," \u2014 "),CO=n(JLe,"A",{href:!0});var eht=s(CO);tHo=r(eht,"WavLMForAudioFrameClassification"),eht.forEach(t),aHo=r(JLe," (WavLM model)"),JLe.forEach(t),cE.forEach(t),nHo=i(ea),lv=n(ea,"P",{});var YLe=s(lv);sHo=r(YLe,"The model is set in evaluation mode by default using "),ehe=n(YLe,"CODE",{});var oht=s(ehe);lHo=r(oht,"model.eval()"),oht.forEach(t),iHo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ohe=n(YLe,"CODE",{});var rht=s(ohe);dHo=r(rht,"model.train()"),rht.forEach(t),YLe.forEach(t),cHo=i(ea),rhe=n(ea,"P",{});var tht=s(rhe);fHo=r(tht,"Examples:"),tht.forEach(t),mHo=i(ea),m(Mw.$$.fragment,ea),ea.forEach(t),kl.forEach(t),QPe=i(c),Jd=n(c,"H2",{class:!0});var oqe=s(Jd);iv=n(oqe,"A",{id:!0,class:!0,href:!0});var aht=s(iv);the=n(aht,"SPAN",{});var nht=s(the);m(Ew.$$.fragment,nht),nht.forEach(t),aht.forEach(t),gHo=i(oqe),ahe=n(oqe,"SPAN",{});var sht=s(ahe);hHo=r(sht,"AutoModelForCTC"),sht.forEach(t),oqe.forEach(t),WPe=i(c),fr=n(c,"DIV",{class:!0});var Rl=s(fr);m(Cw.$$.fragment,Rl),pHo=i(Rl),Yd=n(Rl,"P",{});var HJ=s(Yd);_Ho=r(HJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),wO=n(HJ,"A",{href:!0});var lht=s(wO);uHo=r(lht,"from_pretrained()"),lht.forEach(t),bHo=r(HJ," class method or the "),AO=n(HJ,"A",{href:!0});var iht=s(AO);vHo=r(iht,"from_config()"),iht.forEach(t),FHo=r(HJ,` class
method.`),HJ.forEach(t),THo=i(Rl),ww=n(Rl,"P",{});var rqe=s(ww);MHo=r(rqe,"This class cannot be instantiated directly using "),nhe=n(rqe,"CODE",{});var dht=s(nhe);EHo=r(dht,"__init__()"),dht.forEach(t),CHo=r(rqe," (throws an error)."),rqe.forEach(t),wHo=i(Rl),nt=n(Rl,"DIV",{class:!0});var Bl=s(nt);m(Aw.$$.fragment,Bl),AHo=i(Bl),she=n(Bl,"P",{});var cht=s(she);yHo=r(cht,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),cht.forEach(t),LHo=i(Bl),Kd=n(Bl,"P",{});var UJ=s(Kd);xHo=r(UJ,`Note:
Loading a model from its configuration file does `),lhe=n(UJ,"STRONG",{});var fht=s(lhe);kHo=r(fht,"not"),fht.forEach(t),SHo=r(UJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yO=n(UJ,"A",{href:!0});var mht=s(yO);RHo=r(mht,"from_pretrained()"),mht.forEach(t),BHo=r(UJ," to load the model weights."),UJ.forEach(t),PHo=i(Bl),ihe=n(Bl,"P",{});var ght=s(ihe);$Ho=r(ght,"Examples:"),ght.forEach(t),IHo=i(Bl),m(yw.$$.fragment,Bl),Bl.forEach(t),qHo=i(Rl),Ze=n(Rl,"DIV",{class:!0});var oa=s(Ze);m(Lw.$$.fragment,oa),NHo=i(oa),dhe=n(oa,"P",{});var hht=s(dhe);jHo=r(hht,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),hht.forEach(t),DHo=i(oa),sn=n(oa,"P",{});var fE=s(sn);GHo=r(fE,"The model class to instantiate is selected based on the "),che=n(fE,"CODE",{});var pht=s(che);OHo=r(pht,"model_type"),pht.forEach(t),VHo=r(fE,` property of the config object (either
passed as an argument or loaded from `),fhe=n(fE,"CODE",{});var _ht=s(fhe);XHo=r(_ht,"pretrained_model_name_or_path"),_ht.forEach(t),zHo=r(fE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mhe=n(fE,"CODE",{});var uht=s(mhe);QHo=r(uht,"pretrained_model_name_or_path"),uht.forEach(t),WHo=r(fE,":"),fE.forEach(t),HHo=i(oa),Be=n(oa,"UL",{});var Go=s(Be);dv=n(Go,"LI",{});var KLe=s(dv);ghe=n(KLe,"STRONG",{});var bht=s(ghe);UHo=r(bht,"data2vec-audio"),bht.forEach(t),JHo=r(KLe," \u2014 "),LO=n(KLe,"A",{href:!0});var vht=s(LO);YHo=r(vht,"Data2VecAudioForCTC"),vht.forEach(t),KHo=r(KLe," (Data2VecAudio model)"),KLe.forEach(t),ZHo=i(Go),cv=n(Go,"LI",{});var ZLe=s(cv);hhe=n(ZLe,"STRONG",{});var Fht=s(hhe);eUo=r(Fht,"hubert"),Fht.forEach(t),oUo=r(ZLe," \u2014 "),xO=n(ZLe,"A",{href:!0});var Tht=s(xO);rUo=r(Tht,"HubertForCTC"),Tht.forEach(t),tUo=r(ZLe," (Hubert model)"),ZLe.forEach(t),aUo=i(Go),fv=n(Go,"LI",{});var e9e=s(fv);phe=n(e9e,"STRONG",{});var Mht=s(phe);nUo=r(Mht,"sew"),Mht.forEach(t),sUo=r(e9e," \u2014 "),kO=n(e9e,"A",{href:!0});var Eht=s(kO);lUo=r(Eht,"SEWForCTC"),Eht.forEach(t),iUo=r(e9e," (SEW model)"),e9e.forEach(t),dUo=i(Go),mv=n(Go,"LI",{});var o9e=s(mv);_he=n(o9e,"STRONG",{});var Cht=s(_he);cUo=r(Cht,"sew-d"),Cht.forEach(t),fUo=r(o9e," \u2014 "),SO=n(o9e,"A",{href:!0});var wht=s(SO);mUo=r(wht,"SEWDForCTC"),wht.forEach(t),gUo=r(o9e," (SEW-D model)"),o9e.forEach(t),hUo=i(Go),gv=n(Go,"LI",{});var r9e=s(gv);uhe=n(r9e,"STRONG",{});var Aht=s(uhe);pUo=r(Aht,"unispeech"),Aht.forEach(t),_Uo=r(r9e," \u2014 "),RO=n(r9e,"A",{href:!0});var yht=s(RO);uUo=r(yht,"UniSpeechForCTC"),yht.forEach(t),bUo=r(r9e," (UniSpeech model)"),r9e.forEach(t),vUo=i(Go),hv=n(Go,"LI",{});var t9e=s(hv);bhe=n(t9e,"STRONG",{});var Lht=s(bhe);FUo=r(Lht,"unispeech-sat"),Lht.forEach(t),TUo=r(t9e," \u2014 "),BO=n(t9e,"A",{href:!0});var xht=s(BO);MUo=r(xht,"UniSpeechSatForCTC"),xht.forEach(t),EUo=r(t9e," (UniSpeechSat model)"),t9e.forEach(t),CUo=i(Go),pv=n(Go,"LI",{});var a9e=s(pv);vhe=n(a9e,"STRONG",{});var kht=s(vhe);wUo=r(kht,"wav2vec2"),kht.forEach(t),AUo=r(a9e," \u2014 "),PO=n(a9e,"A",{href:!0});var Sht=s(PO);yUo=r(Sht,"Wav2Vec2ForCTC"),Sht.forEach(t),LUo=r(a9e," (Wav2Vec2 model)"),a9e.forEach(t),xUo=i(Go),_v=n(Go,"LI",{});var n9e=s(_v);Fhe=n(n9e,"STRONG",{});var Rht=s(Fhe);kUo=r(Rht,"wavlm"),Rht.forEach(t),SUo=r(n9e," \u2014 "),$O=n(n9e,"A",{href:!0});var Bht=s($O);RUo=r(Bht,"WavLMForCTC"),Bht.forEach(t),BUo=r(n9e," (WavLM model)"),n9e.forEach(t),Go.forEach(t),PUo=i(oa),uv=n(oa,"P",{});var s9e=s(uv);$Uo=r(s9e,"The model is set in evaluation mode by default using "),The=n(s9e,"CODE",{});var Pht=s(The);IUo=r(Pht,"model.eval()"),Pht.forEach(t),qUo=r(s9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mhe=n(s9e,"CODE",{});var $ht=s(Mhe);NUo=r($ht,"model.train()"),$ht.forEach(t),s9e.forEach(t),jUo=i(oa),Ehe=n(oa,"P",{});var Iht=s(Ehe);DUo=r(Iht,"Examples:"),Iht.forEach(t),GUo=i(oa),m(xw.$$.fragment,oa),oa.forEach(t),Rl.forEach(t),HPe=i(c),Zd=n(c,"H2",{class:!0});var tqe=s(Zd);bv=n(tqe,"A",{id:!0,class:!0,href:!0});var qht=s(bv);Che=n(qht,"SPAN",{});var Nht=s(Che);m(kw.$$.fragment,Nht),Nht.forEach(t),qht.forEach(t),OUo=i(tqe),whe=n(tqe,"SPAN",{});var jht=s(whe);VUo=r(jht,"AutoModelForSpeechSeq2Seq"),jht.forEach(t),tqe.forEach(t),UPe=i(c),mr=n(c,"DIV",{class:!0});var Pl=s(mr);m(Sw.$$.fragment,Pl),XUo=i(Pl),ec=n(Pl,"P",{});var JJ=s(ec);zUo=r(JJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IO=n(JJ,"A",{href:!0});var Dht=s(IO);QUo=r(Dht,"from_pretrained()"),Dht.forEach(t),WUo=r(JJ," class method or the "),qO=n(JJ,"A",{href:!0});var Ght=s(qO);HUo=r(Ght,"from_config()"),Ght.forEach(t),UUo=r(JJ,` class
method.`),JJ.forEach(t),JUo=i(Pl),Rw=n(Pl,"P",{});var aqe=s(Rw);YUo=r(aqe,"This class cannot be instantiated directly using "),Ahe=n(aqe,"CODE",{});var Oht=s(Ahe);KUo=r(Oht,"__init__()"),Oht.forEach(t),ZUo=r(aqe," (throws an error)."),aqe.forEach(t),eJo=i(Pl),st=n(Pl,"DIV",{class:!0});var $l=s(st);m(Bw.$$.fragment,$l),oJo=i($l),yhe=n($l,"P",{});var Vht=s(yhe);rJo=r(Vht,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Vht.forEach(t),tJo=i($l),oc=n($l,"P",{});var YJ=s(oc);aJo=r(YJ,`Note:
Loading a model from its configuration file does `),Lhe=n(YJ,"STRONG",{});var Xht=s(Lhe);nJo=r(Xht,"not"),Xht.forEach(t),sJo=r(YJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NO=n(YJ,"A",{href:!0});var zht=s(NO);lJo=r(zht,"from_pretrained()"),zht.forEach(t),iJo=r(YJ," to load the model weights."),YJ.forEach(t),dJo=i($l),xhe=n($l,"P",{});var Qht=s(xhe);cJo=r(Qht,"Examples:"),Qht.forEach(t),fJo=i($l),m(Pw.$$.fragment,$l),$l.forEach(t),mJo=i(Pl),eo=n(Pl,"DIV",{class:!0});var ra=s(eo);m($w.$$.fragment,ra),gJo=i(ra),khe=n(ra,"P",{});var Wht=s(khe);hJo=r(Wht,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),Wht.forEach(t),pJo=i(ra),ln=n(ra,"P",{});var mE=s(ln);_Jo=r(mE,"The model class to instantiate is selected based on the "),She=n(mE,"CODE",{});var Hht=s(She);uJo=r(Hht,"model_type"),Hht.forEach(t),bJo=r(mE,` property of the config object (either
passed as an argument or loaded from `),Rhe=n(mE,"CODE",{});var Uht=s(Rhe);vJo=r(Uht,"pretrained_model_name_or_path"),Uht.forEach(t),FJo=r(mE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(mE,"CODE",{});var Jht=s(Bhe);TJo=r(Jht,"pretrained_model_name_or_path"),Jht.forEach(t),MJo=r(mE,":"),mE.forEach(t),EJo=i(ra),Iw=n(ra,"UL",{});var nqe=s(Iw);vv=n(nqe,"LI",{});var l9e=s(vv);Phe=n(l9e,"STRONG",{});var Yht=s(Phe);CJo=r(Yht,"speech-encoder-decoder"),Yht.forEach(t),wJo=r(l9e," \u2014 "),jO=n(l9e,"A",{href:!0});var Kht=s(jO);AJo=r(Kht,"SpeechEncoderDecoderModel"),Kht.forEach(t),yJo=r(l9e," (Speech Encoder decoder model)"),l9e.forEach(t),LJo=i(nqe),Fv=n(nqe,"LI",{});var i9e=s(Fv);$he=n(i9e,"STRONG",{});var Zht=s($he);xJo=r(Zht,"speech_to_text"),Zht.forEach(t),kJo=r(i9e," \u2014 "),DO=n(i9e,"A",{href:!0});var ept=s(DO);SJo=r(ept,"Speech2TextForConditionalGeneration"),ept.forEach(t),RJo=r(i9e," (Speech2Text model)"),i9e.forEach(t),nqe.forEach(t),BJo=i(ra),Tv=n(ra,"P",{});var d9e=s(Tv);PJo=r(d9e,"The model is set in evaluation mode by default using "),Ihe=n(d9e,"CODE",{});var opt=s(Ihe);$Jo=r(opt,"model.eval()"),opt.forEach(t),IJo=r(d9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qhe=n(d9e,"CODE",{});var rpt=s(qhe);qJo=r(rpt,"model.train()"),rpt.forEach(t),d9e.forEach(t),NJo=i(ra),Nhe=n(ra,"P",{});var tpt=s(Nhe);jJo=r(tpt,"Examples:"),tpt.forEach(t),DJo=i(ra),m(qw.$$.fragment,ra),ra.forEach(t),Pl.forEach(t),JPe=i(c),rc=n(c,"H2",{class:!0});var sqe=s(rc);Mv=n(sqe,"A",{id:!0,class:!0,href:!0});var apt=s(Mv);jhe=n(apt,"SPAN",{});var npt=s(jhe);m(Nw.$$.fragment,npt),npt.forEach(t),apt.forEach(t),GJo=i(sqe),Dhe=n(sqe,"SPAN",{});var spt=s(Dhe);OJo=r(spt,"AutoModelForAudioXVector"),spt.forEach(t),sqe.forEach(t),YPe=i(c),gr=n(c,"DIV",{class:!0});var Il=s(gr);m(jw.$$.fragment,Il),VJo=i(Il),tc=n(Il,"P",{});var KJ=s(tc);XJo=r(KJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),GO=n(KJ,"A",{href:!0});var lpt=s(GO);zJo=r(lpt,"from_pretrained()"),lpt.forEach(t),QJo=r(KJ," class method or the "),OO=n(KJ,"A",{href:!0});var ipt=s(OO);WJo=r(ipt,"from_config()"),ipt.forEach(t),HJo=r(KJ,` class
method.`),KJ.forEach(t),UJo=i(Il),Dw=n(Il,"P",{});var lqe=s(Dw);JJo=r(lqe,"This class cannot be instantiated directly using "),Ghe=n(lqe,"CODE",{});var dpt=s(Ghe);YJo=r(dpt,"__init__()"),dpt.forEach(t),KJo=r(lqe," (throws an error)."),lqe.forEach(t),ZJo=i(Il),lt=n(Il,"DIV",{class:!0});var ql=s(lt);m(Gw.$$.fragment,ql),eYo=i(ql),Ohe=n(ql,"P",{});var cpt=s(Ohe);oYo=r(cpt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),cpt.forEach(t),rYo=i(ql),ac=n(ql,"P",{});var ZJ=s(ac);tYo=r(ZJ,`Note:
Loading a model from its configuration file does `),Vhe=n(ZJ,"STRONG",{});var fpt=s(Vhe);aYo=r(fpt,"not"),fpt.forEach(t),nYo=r(ZJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VO=n(ZJ,"A",{href:!0});var mpt=s(VO);sYo=r(mpt,"from_pretrained()"),mpt.forEach(t),lYo=r(ZJ," to load the model weights."),ZJ.forEach(t),iYo=i(ql),Xhe=n(ql,"P",{});var gpt=s(Xhe);dYo=r(gpt,"Examples:"),gpt.forEach(t),cYo=i(ql),m(Ow.$$.fragment,ql),ql.forEach(t),fYo=i(Il),oo=n(Il,"DIV",{class:!0});var ta=s(oo);m(Vw.$$.fragment,ta),mYo=i(ta),zhe=n(ta,"P",{});var hpt=s(zhe);gYo=r(hpt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),hpt.forEach(t),hYo=i(ta),dn=n(ta,"P",{});var gE=s(dn);pYo=r(gE,"The model class to instantiate is selected based on the "),Qhe=n(gE,"CODE",{});var ppt=s(Qhe);_Yo=r(ppt,"model_type"),ppt.forEach(t),uYo=r(gE,` property of the config object (either
passed as an argument or loaded from `),Whe=n(gE,"CODE",{});var _pt=s(Whe);bYo=r(_pt,"pretrained_model_name_or_path"),_pt.forEach(t),vYo=r(gE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(gE,"CODE",{});var upt=s(Hhe);FYo=r(upt,"pretrained_model_name_or_path"),upt.forEach(t),TYo=r(gE,":"),gE.forEach(t),MYo=i(ta),cn=n(ta,"UL",{});var hE=s(cn);Ev=n(hE,"LI",{});var c9e=s(Ev);Uhe=n(c9e,"STRONG",{});var bpt=s(Uhe);EYo=r(bpt,"data2vec-audio"),bpt.forEach(t),CYo=r(c9e," \u2014 "),XO=n(c9e,"A",{href:!0});var vpt=s(XO);wYo=r(vpt,"Data2VecAudioForXVector"),vpt.forEach(t),AYo=r(c9e," (Data2VecAudio model)"),c9e.forEach(t),yYo=i(hE),Cv=n(hE,"LI",{});var f9e=s(Cv);Jhe=n(f9e,"STRONG",{});var Fpt=s(Jhe);LYo=r(Fpt,"unispeech-sat"),Fpt.forEach(t),xYo=r(f9e," \u2014 "),zO=n(f9e,"A",{href:!0});var Tpt=s(zO);kYo=r(Tpt,"UniSpeechSatForXVector"),Tpt.forEach(t),SYo=r(f9e," (UniSpeechSat model)"),f9e.forEach(t),RYo=i(hE),wv=n(hE,"LI",{});var m9e=s(wv);Yhe=n(m9e,"STRONG",{});var Mpt=s(Yhe);BYo=r(Mpt,"wav2vec2"),Mpt.forEach(t),PYo=r(m9e," \u2014 "),QO=n(m9e,"A",{href:!0});var Ept=s(QO);$Yo=r(Ept,"Wav2Vec2ForXVector"),Ept.forEach(t),IYo=r(m9e," (Wav2Vec2 model)"),m9e.forEach(t),qYo=i(hE),Av=n(hE,"LI",{});var g9e=s(Av);Khe=n(g9e,"STRONG",{});var Cpt=s(Khe);NYo=r(Cpt,"wavlm"),Cpt.forEach(t),jYo=r(g9e," \u2014 "),WO=n(g9e,"A",{href:!0});var wpt=s(WO);DYo=r(wpt,"WavLMForXVector"),wpt.forEach(t),GYo=r(g9e," (WavLM model)"),g9e.forEach(t),hE.forEach(t),OYo=i(ta),yv=n(ta,"P",{});var h9e=s(yv);VYo=r(h9e,"The model is set in evaluation mode by default using "),Zhe=n(h9e,"CODE",{});var Apt=s(Zhe);XYo=r(Apt,"model.eval()"),Apt.forEach(t),zYo=r(h9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(h9e,"CODE",{});var ypt=s(epe);QYo=r(ypt,"model.train()"),ypt.forEach(t),h9e.forEach(t),WYo=i(ta),ope=n(ta,"P",{});var Lpt=s(ope);HYo=r(Lpt,"Examples:"),Lpt.forEach(t),UYo=i(ta),m(Xw.$$.fragment,ta),ta.forEach(t),Il.forEach(t),KPe=i(c),nc=n(c,"H2",{class:!0});var iqe=s(nc);Lv=n(iqe,"A",{id:!0,class:!0,href:!0});var xpt=s(Lv);rpe=n(xpt,"SPAN",{});var kpt=s(rpe);m(zw.$$.fragment,kpt),kpt.forEach(t),xpt.forEach(t),JYo=i(iqe),tpe=n(iqe,"SPAN",{});var Spt=s(tpe);YYo=r(Spt,"AutoModelForMaskedImageModeling"),Spt.forEach(t),iqe.forEach(t),ZPe=i(c),hr=n(c,"DIV",{class:!0});var Nl=s(hr);m(Qw.$$.fragment,Nl),KYo=i(Nl),sc=n(Nl,"P",{});var eY=s(sc);ZYo=r(eY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),HO=n(eY,"A",{href:!0});var Rpt=s(HO);eKo=r(Rpt,"from_pretrained()"),Rpt.forEach(t),oKo=r(eY," class method or the "),UO=n(eY,"A",{href:!0});var Bpt=s(UO);rKo=r(Bpt,"from_config()"),Bpt.forEach(t),tKo=r(eY,` class
method.`),eY.forEach(t),aKo=i(Nl),Ww=n(Nl,"P",{});var dqe=s(Ww);nKo=r(dqe,"This class cannot be instantiated directly using "),ape=n(dqe,"CODE",{});var Ppt=s(ape);sKo=r(Ppt,"__init__()"),Ppt.forEach(t),lKo=r(dqe," (throws an error)."),dqe.forEach(t),iKo=i(Nl),it=n(Nl,"DIV",{class:!0});var jl=s(it);m(Hw.$$.fragment,jl),dKo=i(jl),npe=n(jl,"P",{});var $pt=s(npe);cKo=r($pt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),$pt.forEach(t),fKo=i(jl),lc=n(jl,"P",{});var oY=s(lc);mKo=r(oY,`Note:
Loading a model from its configuration file does `),spe=n(oY,"STRONG",{});var Ipt=s(spe);gKo=r(Ipt,"not"),Ipt.forEach(t),hKo=r(oY,` load the model weights. It only affects the
model\u2019s configuration. Use `),JO=n(oY,"A",{href:!0});var qpt=s(JO);pKo=r(qpt,"from_pretrained()"),qpt.forEach(t),_Ko=r(oY," to load the model weights."),oY.forEach(t),uKo=i(jl),lpe=n(jl,"P",{});var Npt=s(lpe);bKo=r(Npt,"Examples:"),Npt.forEach(t),vKo=i(jl),m(Uw.$$.fragment,jl),jl.forEach(t),FKo=i(Nl),ro=n(Nl,"DIV",{class:!0});var aa=s(ro);m(Jw.$$.fragment,aa),TKo=i(aa),ipe=n(aa,"P",{});var jpt=s(ipe);MKo=r(jpt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),jpt.forEach(t),EKo=i(aa),fn=n(aa,"P",{});var pE=s(fn);CKo=r(pE,"The model class to instantiate is selected based on the "),dpe=n(pE,"CODE",{});var Dpt=s(dpe);wKo=r(Dpt,"model_type"),Dpt.forEach(t),AKo=r(pE,` property of the config object (either
passed as an argument or loaded from `),cpe=n(pE,"CODE",{});var Gpt=s(cpe);yKo=r(Gpt,"pretrained_model_name_or_path"),Gpt.forEach(t),LKo=r(pE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),fpe=n(pE,"CODE",{});var Opt=s(fpe);xKo=r(Opt,"pretrained_model_name_or_path"),Opt.forEach(t),kKo=r(pE,":"),pE.forEach(t),SKo=i(aa),ic=n(aa,"UL",{});var rY=s(ic);xv=n(rY,"LI",{});var p9e=s(xv);mpe=n(p9e,"STRONG",{});var Vpt=s(mpe);RKo=r(Vpt,"deit"),Vpt.forEach(t),BKo=r(p9e," \u2014 "),YO=n(p9e,"A",{href:!0});var Xpt=s(YO);PKo=r(Xpt,"DeiTForMaskedImageModeling"),Xpt.forEach(t),$Ko=r(p9e," (DeiT model)"),p9e.forEach(t),IKo=i(rY),kv=n(rY,"LI",{});var _9e=s(kv);gpe=n(_9e,"STRONG",{});var zpt=s(gpe);qKo=r(zpt,"swin"),zpt.forEach(t),NKo=r(_9e," \u2014 "),KO=n(_9e,"A",{href:!0});var Qpt=s(KO);jKo=r(Qpt,"SwinForMaskedImageModeling"),Qpt.forEach(t),DKo=r(_9e," (Swin model)"),_9e.forEach(t),GKo=i(rY),Sv=n(rY,"LI",{});var u9e=s(Sv);hpe=n(u9e,"STRONG",{});var Wpt=s(hpe);OKo=r(Wpt,"vit"),Wpt.forEach(t),VKo=r(u9e," \u2014 "),ZO=n(u9e,"A",{href:!0});var Hpt=s(ZO);XKo=r(Hpt,"ViTForMaskedImageModeling"),Hpt.forEach(t),zKo=r(u9e," (ViT model)"),u9e.forEach(t),rY.forEach(t),QKo=i(aa),Rv=n(aa,"P",{});var b9e=s(Rv);WKo=r(b9e,"The model is set in evaluation mode by default using "),ppe=n(b9e,"CODE",{});var Upt=s(ppe);HKo=r(Upt,"model.eval()"),Upt.forEach(t),UKo=r(b9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),_pe=n(b9e,"CODE",{});var Jpt=s(_pe);JKo=r(Jpt,"model.train()"),Jpt.forEach(t),b9e.forEach(t),YKo=i(aa),upe=n(aa,"P",{});var Ypt=s(upe);KKo=r(Ypt,"Examples:"),Ypt.forEach(t),ZKo=i(aa),m(Yw.$$.fragment,aa),aa.forEach(t),Nl.forEach(t),e$e=i(c),dc=n(c,"H2",{class:!0});var cqe=s(dc);Bv=n(cqe,"A",{id:!0,class:!0,href:!0});var Kpt=s(Bv);bpe=n(Kpt,"SPAN",{});var Zpt=s(bpe);m(Kw.$$.fragment,Zpt),Zpt.forEach(t),Kpt.forEach(t),eZo=i(cqe),vpe=n(cqe,"SPAN",{});var e_t=s(vpe);oZo=r(e_t,"AutoModelForObjectDetection"),e_t.forEach(t),cqe.forEach(t),o$e=i(c),pr=n(c,"DIV",{class:!0});var Dl=s(pr);m(Zw.$$.fragment,Dl),rZo=i(Dl),cc=n(Dl,"P",{});var tY=s(cc);tZo=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),eV=n(tY,"A",{href:!0});var o_t=s(eV);aZo=r(o_t,"from_pretrained()"),o_t.forEach(t),nZo=r(tY," class method or the "),oV=n(tY,"A",{href:!0});var r_t=s(oV);sZo=r(r_t,"from_config()"),r_t.forEach(t),lZo=r(tY,` class
method.`),tY.forEach(t),iZo=i(Dl),eA=n(Dl,"P",{});var fqe=s(eA);dZo=r(fqe,"This class cannot be instantiated directly using "),Fpe=n(fqe,"CODE",{});var t_t=s(Fpe);cZo=r(t_t,"__init__()"),t_t.forEach(t),fZo=r(fqe," (throws an error)."),fqe.forEach(t),mZo=i(Dl),dt=n(Dl,"DIV",{class:!0});var Gl=s(dt);m(oA.$$.fragment,Gl),gZo=i(Gl),Tpe=n(Gl,"P",{});var a_t=s(Tpe);hZo=r(a_t,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),a_t.forEach(t),pZo=i(Gl),fc=n(Gl,"P",{});var aY=s(fc);_Zo=r(aY,`Note:
Loading a model from its configuration file does `),Mpe=n(aY,"STRONG",{});var n_t=s(Mpe);uZo=r(n_t,"not"),n_t.forEach(t),bZo=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rV=n(aY,"A",{href:!0});var s_t=s(rV);vZo=r(s_t,"from_pretrained()"),s_t.forEach(t),FZo=r(aY," to load the model weights."),aY.forEach(t),TZo=i(Gl),Epe=n(Gl,"P",{});var l_t=s(Epe);MZo=r(l_t,"Examples:"),l_t.forEach(t),EZo=i(Gl),m(rA.$$.fragment,Gl),Gl.forEach(t),CZo=i(Dl),to=n(Dl,"DIV",{class:!0});var na=s(to);m(tA.$$.fragment,na),wZo=i(na),Cpe=n(na,"P",{});var i_t=s(Cpe);AZo=r(i_t,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),i_t.forEach(t),yZo=i(na),mn=n(na,"P",{});var _E=s(mn);LZo=r(_E,"The model class to instantiate is selected based on the "),wpe=n(_E,"CODE",{});var d_t=s(wpe);xZo=r(d_t,"model_type"),d_t.forEach(t),kZo=r(_E,` property of the config object (either
passed as an argument or loaded from `),Ape=n(_E,"CODE",{});var c_t=s(Ape);SZo=r(c_t,"pretrained_model_name_or_path"),c_t.forEach(t),RZo=r(_E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ype=n(_E,"CODE",{});var f_t=s(ype);BZo=r(f_t,"pretrained_model_name_or_path"),f_t.forEach(t),PZo=r(_E,":"),_E.forEach(t),$Zo=i(na),Lpe=n(na,"UL",{});var m_t=s(Lpe);Pv=n(m_t,"LI",{});var v9e=s(Pv);xpe=n(v9e,"STRONG",{});var g_t=s(xpe);IZo=r(g_t,"detr"),g_t.forEach(t),qZo=r(v9e," \u2014 "),tV=n(v9e,"A",{href:!0});var h_t=s(tV);NZo=r(h_t,"DetrForObjectDetection"),h_t.forEach(t),jZo=r(v9e," (DETR model)"),v9e.forEach(t),m_t.forEach(t),DZo=i(na),$v=n(na,"P",{});var F9e=s($v);GZo=r(F9e,"The model is set in evaluation mode by default using "),kpe=n(F9e,"CODE",{});var p_t=s(kpe);OZo=r(p_t,"model.eval()"),p_t.forEach(t),VZo=r(F9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=n(F9e,"CODE",{});var __t=s(Spe);XZo=r(__t,"model.train()"),__t.forEach(t),F9e.forEach(t),zZo=i(na),Rpe=n(na,"P",{});var u_t=s(Rpe);QZo=r(u_t,"Examples:"),u_t.forEach(t),WZo=i(na),m(aA.$$.fragment,na),na.forEach(t),Dl.forEach(t),r$e=i(c),mc=n(c,"H2",{class:!0});var mqe=s(mc);Iv=n(mqe,"A",{id:!0,class:!0,href:!0});var b_t=s(Iv);Bpe=n(b_t,"SPAN",{});var v_t=s(Bpe);m(nA.$$.fragment,v_t),v_t.forEach(t),b_t.forEach(t),HZo=i(mqe),Ppe=n(mqe,"SPAN",{});var F_t=s(Ppe);UZo=r(F_t,"AutoModelForImageSegmentation"),F_t.forEach(t),mqe.forEach(t),t$e=i(c),_r=n(c,"DIV",{class:!0});var Ol=s(_r);m(sA.$$.fragment,Ol),JZo=i(Ol),gc=n(Ol,"P",{});var nY=s(gc);YZo=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),aV=n(nY,"A",{href:!0});var T_t=s(aV);KZo=r(T_t,"from_pretrained()"),T_t.forEach(t),ZZo=r(nY," class method or the "),nV=n(nY,"A",{href:!0});var M_t=s(nV);eer=r(M_t,"from_config()"),M_t.forEach(t),oer=r(nY,` class
method.`),nY.forEach(t),rer=i(Ol),lA=n(Ol,"P",{});var gqe=s(lA);ter=r(gqe,"This class cannot be instantiated directly using "),$pe=n(gqe,"CODE",{});var E_t=s($pe);aer=r(E_t,"__init__()"),E_t.forEach(t),ner=r(gqe," (throws an error)."),gqe.forEach(t),ser=i(Ol),ct=n(Ol,"DIV",{class:!0});var Vl=s(ct);m(iA.$$.fragment,Vl),ler=i(Vl),Ipe=n(Vl,"P",{});var C_t=s(Ipe);ier=r(C_t,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),C_t.forEach(t),der=i(Vl),hc=n(Vl,"P",{});var sY=s(hc);cer=r(sY,`Note:
Loading a model from its configuration file does `),qpe=n(sY,"STRONG",{});var w_t=s(qpe);fer=r(w_t,"not"),w_t.forEach(t),mer=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sV=n(sY,"A",{href:!0});var A_t=s(sV);ger=r(A_t,"from_pretrained()"),A_t.forEach(t),her=r(sY," to load the model weights."),sY.forEach(t),per=i(Vl),Npe=n(Vl,"P",{});var y_t=s(Npe);_er=r(y_t,"Examples:"),y_t.forEach(t),uer=i(Vl),m(dA.$$.fragment,Vl),Vl.forEach(t),ber=i(Ol),ao=n(Ol,"DIV",{class:!0});var sa=s(ao);m(cA.$$.fragment,sa),ver=i(sa),jpe=n(sa,"P",{});var L_t=s(jpe);Fer=r(L_t,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),L_t.forEach(t),Ter=i(sa),gn=n(sa,"P",{});var uE=s(gn);Mer=r(uE,"The model class to instantiate is selected based on the "),Dpe=n(uE,"CODE",{});var x_t=s(Dpe);Eer=r(x_t,"model_type"),x_t.forEach(t),Cer=r(uE,` property of the config object (either
passed as an argument or loaded from `),Gpe=n(uE,"CODE",{});var k_t=s(Gpe);wer=r(k_t,"pretrained_model_name_or_path"),k_t.forEach(t),Aer=r(uE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ope=n(uE,"CODE",{});var S_t=s(Ope);yer=r(S_t,"pretrained_model_name_or_path"),S_t.forEach(t),Ler=r(uE,":"),uE.forEach(t),xer=i(sa),Vpe=n(sa,"UL",{});var R_t=s(Vpe);qv=n(R_t,"LI",{});var T9e=s(qv);Xpe=n(T9e,"STRONG",{});var B_t=s(Xpe);ker=r(B_t,"detr"),B_t.forEach(t),Ser=r(T9e," \u2014 "),lV=n(T9e,"A",{href:!0});var P_t=s(lV);Rer=r(P_t,"DetrForSegmentation"),P_t.forEach(t),Ber=r(T9e," (DETR model)"),T9e.forEach(t),R_t.forEach(t),Per=i(sa),Nv=n(sa,"P",{});var M9e=s(Nv);$er=r(M9e,"The model is set in evaluation mode by default using "),zpe=n(M9e,"CODE",{});var $_t=s(zpe);Ier=r($_t,"model.eval()"),$_t.forEach(t),qer=r(M9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Qpe=n(M9e,"CODE",{});var I_t=s(Qpe);Ner=r(I_t,"model.train()"),I_t.forEach(t),M9e.forEach(t),jer=i(sa),Wpe=n(sa,"P",{});var q_t=s(Wpe);Der=r(q_t,"Examples:"),q_t.forEach(t),Ger=i(sa),m(fA.$$.fragment,sa),sa.forEach(t),Ol.forEach(t),a$e=i(c),pc=n(c,"H2",{class:!0});var hqe=s(pc);jv=n(hqe,"A",{id:!0,class:!0,href:!0});var N_t=s(jv);Hpe=n(N_t,"SPAN",{});var j_t=s(Hpe);m(mA.$$.fragment,j_t),j_t.forEach(t),N_t.forEach(t),Oer=i(hqe),Upe=n(hqe,"SPAN",{});var D_t=s(Upe);Ver=r(D_t,"AutoModelForSemanticSegmentation"),D_t.forEach(t),hqe.forEach(t),n$e=i(c),ur=n(c,"DIV",{class:!0});var Xl=s(ur);m(gA.$$.fragment,Xl),Xer=i(Xl),_c=n(Xl,"P",{});var lY=s(_c);zer=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),iV=n(lY,"A",{href:!0});var G_t=s(iV);Qer=r(G_t,"from_pretrained()"),G_t.forEach(t),Wer=r(lY," class method or the "),dV=n(lY,"A",{href:!0});var O_t=s(dV);Her=r(O_t,"from_config()"),O_t.forEach(t),Uer=r(lY,` class
method.`),lY.forEach(t),Jer=i(Xl),hA=n(Xl,"P",{});var pqe=s(hA);Yer=r(pqe,"This class cannot be instantiated directly using "),Jpe=n(pqe,"CODE",{});var V_t=s(Jpe);Ker=r(V_t,"__init__()"),V_t.forEach(t),Zer=r(pqe," (throws an error)."),pqe.forEach(t),eor=i(Xl),ft=n(Xl,"DIV",{class:!0});var zl=s(ft);m(pA.$$.fragment,zl),oor=i(zl),Ype=n(zl,"P",{});var X_t=s(Ype);ror=r(X_t,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),X_t.forEach(t),tor=i(zl),uc=n(zl,"P",{});var iY=s(uc);aor=r(iY,`Note:
Loading a model from its configuration file does `),Kpe=n(iY,"STRONG",{});var z_t=s(Kpe);nor=r(z_t,"not"),z_t.forEach(t),sor=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cV=n(iY,"A",{href:!0});var Q_t=s(cV);lor=r(Q_t,"from_pretrained()"),Q_t.forEach(t),ior=r(iY," to load the model weights."),iY.forEach(t),dor=i(zl),Zpe=n(zl,"P",{});var W_t=s(Zpe);cor=r(W_t,"Examples:"),W_t.forEach(t),mor=i(zl),m(_A.$$.fragment,zl),zl.forEach(t),gor=i(Xl),no=n(Xl,"DIV",{class:!0});var la=s(no);m(uA.$$.fragment,la),hor=i(la),e_e=n(la,"P",{});var H_t=s(e_e);por=r(H_t,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),H_t.forEach(t),_or=i(la),hn=n(la,"P",{});var bE=s(hn);uor=r(bE,"The model class to instantiate is selected based on the "),o_e=n(bE,"CODE",{});var U_t=s(o_e);bor=r(U_t,"model_type"),U_t.forEach(t),vor=r(bE,` property of the config object (either
passed as an argument or loaded from `),r_e=n(bE,"CODE",{});var J_t=s(r_e);For=r(J_t,"pretrained_model_name_or_path"),J_t.forEach(t),Tor=r(bE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(bE,"CODE",{});var Y_t=s(t_e);Mor=r(Y_t,"pretrained_model_name_or_path"),Y_t.forEach(t),Eor=r(bE,":"),bE.forEach(t),Cor=i(la),pn=n(la,"UL",{});var vE=s(pn);Dv=n(vE,"LI",{});var E9e=s(Dv);a_e=n(E9e,"STRONG",{});var K_t=s(a_e);wor=r(K_t,"beit"),K_t.forEach(t),Aor=r(E9e," \u2014 "),fV=n(E9e,"A",{href:!0});var Z_t=s(fV);yor=r(Z_t,"BeitForSemanticSegmentation"),Z_t.forEach(t),Lor=r(E9e," (BEiT model)"),E9e.forEach(t),xor=i(vE),Gv=n(vE,"LI",{});var C9e=s(Gv);n_e=n(C9e,"STRONG",{});var eut=s(n_e);kor=r(eut,"data2vec-vision"),eut.forEach(t),Sor=r(C9e," \u2014 "),mV=n(C9e,"A",{href:!0});var out=s(mV);Ror=r(out,"Data2VecVisionForSemanticSegmentation"),out.forEach(t),Bor=r(C9e," (Data2VecVision model)"),C9e.forEach(t),Por=i(vE),Ov=n(vE,"LI",{});var w9e=s(Ov);s_e=n(w9e,"STRONG",{});var rut=s(s_e);$or=r(rut,"dpt"),rut.forEach(t),Ior=r(w9e," \u2014 "),gV=n(w9e,"A",{href:!0});var tut=s(gV);qor=r(tut,"DPTForSemanticSegmentation"),tut.forEach(t),Nor=r(w9e," (DPT model)"),w9e.forEach(t),jor=i(vE),Vv=n(vE,"LI",{});var A9e=s(Vv);l_e=n(A9e,"STRONG",{});var aut=s(l_e);Dor=r(aut,"segformer"),aut.forEach(t),Gor=r(A9e," \u2014 "),hV=n(A9e,"A",{href:!0});var nut=s(hV);Oor=r(nut,"SegformerForSemanticSegmentation"),nut.forEach(t),Vor=r(A9e," (SegFormer model)"),A9e.forEach(t),vE.forEach(t),Xor=i(la),Xv=n(la,"P",{});var y9e=s(Xv);zor=r(y9e,"The model is set in evaluation mode by default using "),i_e=n(y9e,"CODE",{});var sut=s(i_e);Qor=r(sut,"model.eval()"),sut.forEach(t),Wor=r(y9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),d_e=n(y9e,"CODE",{});var lut=s(d_e);Hor=r(lut,"model.train()"),lut.forEach(t),y9e.forEach(t),Uor=i(la),c_e=n(la,"P",{});var iut=s(c_e);Jor=r(iut,"Examples:"),iut.forEach(t),Yor=i(la),m(bA.$$.fragment,la),la.forEach(t),Xl.forEach(t),s$e=i(c),bc=n(c,"H2",{class:!0});var _qe=s(bc);zv=n(_qe,"A",{id:!0,class:!0,href:!0});var dut=s(zv);f_e=n(dut,"SPAN",{});var cut=s(f_e);m(vA.$$.fragment,cut),cut.forEach(t),dut.forEach(t),Kor=i(_qe),m_e=n(_qe,"SPAN",{});var fut=s(m_e);Zor=r(fut,"AutoModelForInstanceSegmentation"),fut.forEach(t),_qe.forEach(t),l$e=i(c),br=n(c,"DIV",{class:!0});var Ql=s(br);m(FA.$$.fragment,Ql),err=i(Ql),vc=n(Ql,"P",{});var dY=s(vc);orr=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),pV=n(dY,"A",{href:!0});var mut=s(pV);rrr=r(mut,"from_pretrained()"),mut.forEach(t),trr=r(dY," class method or the "),_V=n(dY,"A",{href:!0});var gut=s(_V);arr=r(gut,"from_config()"),gut.forEach(t),nrr=r(dY,` class
method.`),dY.forEach(t),srr=i(Ql),TA=n(Ql,"P",{});var uqe=s(TA);lrr=r(uqe,"This class cannot be instantiated directly using "),g_e=n(uqe,"CODE",{});var hut=s(g_e);irr=r(hut,"__init__()"),hut.forEach(t),drr=r(uqe," (throws an error)."),uqe.forEach(t),crr=i(Ql),mt=n(Ql,"DIV",{class:!0});var Wl=s(mt);m(MA.$$.fragment,Wl),frr=i(Wl),h_e=n(Wl,"P",{});var put=s(h_e);mrr=r(put,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),put.forEach(t),grr=i(Wl),Fc=n(Wl,"P",{});var cY=s(Fc);hrr=r(cY,`Note:
Loading a model from its configuration file does `),p_e=n(cY,"STRONG",{});var _ut=s(p_e);prr=r(_ut,"not"),_ut.forEach(t),_rr=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),uV=n(cY,"A",{href:!0});var uut=s(uV);urr=r(uut,"from_pretrained()"),uut.forEach(t),brr=r(cY," to load the model weights."),cY.forEach(t),vrr=i(Wl),__e=n(Wl,"P",{});var but=s(__e);Frr=r(but,"Examples:"),but.forEach(t),Trr=i(Wl),m(EA.$$.fragment,Wl),Wl.forEach(t),Mrr=i(Ql),so=n(Ql,"DIV",{class:!0});var ia=s(so);m(CA.$$.fragment,ia),Err=i(ia),u_e=n(ia,"P",{});var vut=s(u_e);Crr=r(vut,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),vut.forEach(t),wrr=i(ia),_n=n(ia,"P",{});var FE=s(_n);Arr=r(FE,"The model class to instantiate is selected based on the "),b_e=n(FE,"CODE",{});var Fut=s(b_e);yrr=r(Fut,"model_type"),Fut.forEach(t),Lrr=r(FE,` property of the config object (either
passed as an argument or loaded from `),v_e=n(FE,"CODE",{});var Tut=s(v_e);xrr=r(Tut,"pretrained_model_name_or_path"),Tut.forEach(t),krr=r(FE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F_e=n(FE,"CODE",{});var Mut=s(F_e);Srr=r(Mut,"pretrained_model_name_or_path"),Mut.forEach(t),Rrr=r(FE,":"),FE.forEach(t),Brr=i(ia),T_e=n(ia,"UL",{});var Eut=s(T_e);Qv=n(Eut,"LI",{});var L9e=s(Qv);M_e=n(L9e,"STRONG",{});var Cut=s(M_e);Prr=r(Cut,"maskformer"),Cut.forEach(t),$rr=r(L9e," \u2014 "),bV=n(L9e,"A",{href:!0});var wut=s(bV);Irr=r(wut,"MaskFormerForInstanceSegmentation"),wut.forEach(t),qrr=r(L9e," (MaskFormer model)"),L9e.forEach(t),Eut.forEach(t),Nrr=i(ia),Wv=n(ia,"P",{});var x9e=s(Wv);jrr=r(x9e,"The model is set in evaluation mode by default using "),E_e=n(x9e,"CODE",{});var Aut=s(E_e);Drr=r(Aut,"model.eval()"),Aut.forEach(t),Grr=r(x9e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),C_e=n(x9e,"CODE",{});var yut=s(C_e);Orr=r(yut,"model.train()"),yut.forEach(t),x9e.forEach(t),Vrr=i(ia),w_e=n(ia,"P",{});var Lut=s(w_e);Xrr=r(Lut,"Examples:"),Lut.forEach(t),zrr=i(ia),m(wA.$$.fragment,ia),ia.forEach(t),Ql.forEach(t),i$e=i(c),Tc=n(c,"H2",{class:!0});var bqe=s(Tc);Hv=n(bqe,"A",{id:!0,class:!0,href:!0});var xut=s(Hv);A_e=n(xut,"SPAN",{});var kut=s(A_e);m(AA.$$.fragment,kut),kut.forEach(t),xut.forEach(t),Qrr=i(bqe),y_e=n(bqe,"SPAN",{});var Sut=s(y_e);Wrr=r(Sut,"TFAutoModel"),Sut.forEach(t),bqe.forEach(t),d$e=i(c),vr=n(c,"DIV",{class:!0});var Hl=s(vr);m(yA.$$.fragment,Hl),Hrr=i(Hl),Mc=n(Hl,"P",{});var fY=s(Mc);Urr=r(fY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),vV=n(fY,"A",{href:!0});var Rut=s(vV);Jrr=r(Rut,"from_pretrained()"),Rut.forEach(t),Yrr=r(fY," class method or the "),FV=n(fY,"A",{href:!0});var But=s(FV);Krr=r(But,"from_config()"),But.forEach(t),Zrr=r(fY,` class
method.`),fY.forEach(t),etr=i(Hl),LA=n(Hl,"P",{});var vqe=s(LA);otr=r(vqe,"This class cannot be instantiated directly using "),L_e=n(vqe,"CODE",{});var Put=s(L_e);rtr=r(Put,"__init__()"),Put.forEach(t),ttr=r(vqe," (throws an error)."),vqe.forEach(t),atr=i(Hl),gt=n(Hl,"DIV",{class:!0});var Ul=s(gt);m(xA.$$.fragment,Ul),ntr=i(Ul),x_e=n(Ul,"P",{});var $ut=s(x_e);str=r($ut,"Instantiates one of the base model classes of the library from a configuration."),$ut.forEach(t),ltr=i(Ul),Ec=n(Ul,"P",{});var mY=s(Ec);itr=r(mY,`Note:
Loading a model from its configuration file does `),k_e=n(mY,"STRONG",{});var Iut=s(k_e);dtr=r(Iut,"not"),Iut.forEach(t),ctr=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),TV=n(mY,"A",{href:!0});var qut=s(TV);ftr=r(qut,"from_pretrained()"),qut.forEach(t),mtr=r(mY," to load the model weights."),mY.forEach(t),gtr=i(Ul),S_e=n(Ul,"P",{});var Nut=s(S_e);htr=r(Nut,"Examples:"),Nut.forEach(t),ptr=i(Ul),m(kA.$$.fragment,Ul),Ul.forEach(t),_tr=i(Hl),po=n(Hl,"DIV",{class:!0});var pa=s(po);m(SA.$$.fragment,pa),utr=i(pa),R_e=n(pa,"P",{});var jut=s(R_e);btr=r(jut,"Instantiate one of the base model classes of the library from a pretrained model."),jut.forEach(t),vtr=i(pa),un=n(pa,"P",{});var TE=s(un);Ftr=r(TE,"The model class to instantiate is selected based on the "),B_e=n(TE,"CODE",{});var Dut=s(B_e);Ttr=r(Dut,"model_type"),Dut.forEach(t),Mtr=r(TE,` property of the config object (either
passed as an argument or loaded from `),P_e=n(TE,"CODE",{});var Gut=s(P_e);Etr=r(Gut,"pretrained_model_name_or_path"),Gut.forEach(t),Ctr=r(TE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),$_e=n(TE,"CODE",{});var Out=s($_e);wtr=r(Out,"pretrained_model_name_or_path"),Out.forEach(t),Atr=r(TE,":"),TE.forEach(t),ytr=i(pa),x=n(pa,"UL",{});var k=s(x);Uv=n(k,"LI",{});var k9e=s(Uv);I_e=n(k9e,"STRONG",{});var Vut=s(I_e);Ltr=r(Vut,"albert"),Vut.forEach(t),xtr=r(k9e," \u2014 "),MV=n(k9e,"A",{href:!0});var Xut=s(MV);ktr=r(Xut,"TFAlbertModel"),Xut.forEach(t),Str=r(k9e," (ALBERT model)"),k9e.forEach(t),Rtr=i(k),Jv=n(k,"LI",{});var S9e=s(Jv);q_e=n(S9e,"STRONG",{});var zut=s(q_e);Btr=r(zut,"bart"),zut.forEach(t),Ptr=r(S9e," \u2014 "),EV=n(S9e,"A",{href:!0});var Qut=s(EV);$tr=r(Qut,"TFBartModel"),Qut.forEach(t),Itr=r(S9e," (BART model)"),S9e.forEach(t),qtr=i(k),Yv=n(k,"LI",{});var R9e=s(Yv);N_e=n(R9e,"STRONG",{});var Wut=s(N_e);Ntr=r(Wut,"bert"),Wut.forEach(t),jtr=r(R9e," \u2014 "),CV=n(R9e,"A",{href:!0});var Hut=s(CV);Dtr=r(Hut,"TFBertModel"),Hut.forEach(t),Gtr=r(R9e," (BERT model)"),R9e.forEach(t),Otr=i(k),Kv=n(k,"LI",{});var B9e=s(Kv);j_e=n(B9e,"STRONG",{});var Uut=s(j_e);Vtr=r(Uut,"blenderbot"),Uut.forEach(t),Xtr=r(B9e," \u2014 "),wV=n(B9e,"A",{href:!0});var Jut=s(wV);ztr=r(Jut,"TFBlenderbotModel"),Jut.forEach(t),Qtr=r(B9e," (Blenderbot model)"),B9e.forEach(t),Wtr=i(k),Zv=n(k,"LI",{});var P9e=s(Zv);D_e=n(P9e,"STRONG",{});var Yut=s(D_e);Htr=r(Yut,"blenderbot-small"),Yut.forEach(t),Utr=r(P9e," \u2014 "),AV=n(P9e,"A",{href:!0});var Kut=s(AV);Jtr=r(Kut,"TFBlenderbotSmallModel"),Kut.forEach(t),Ytr=r(P9e," (BlenderbotSmall model)"),P9e.forEach(t),Ktr=i(k),eF=n(k,"LI",{});var $9e=s(eF);G_e=n($9e,"STRONG",{});var Zut=s(G_e);Ztr=r(Zut,"camembert"),Zut.forEach(t),ear=r($9e," \u2014 "),yV=n($9e,"A",{href:!0});var e1t=s(yV);oar=r(e1t,"TFCamembertModel"),e1t.forEach(t),rar=r($9e," (CamemBERT model)"),$9e.forEach(t),tar=i(k),oF=n(k,"LI",{});var I9e=s(oF);O_e=n(I9e,"STRONG",{});var o1t=s(O_e);aar=r(o1t,"clip"),o1t.forEach(t),nar=r(I9e," \u2014 "),LV=n(I9e,"A",{href:!0});var r1t=s(LV);sar=r(r1t,"TFCLIPModel"),r1t.forEach(t),lar=r(I9e," (CLIP model)"),I9e.forEach(t),iar=i(k),rF=n(k,"LI",{});var q9e=s(rF);V_e=n(q9e,"STRONG",{});var t1t=s(V_e);dar=r(t1t,"convbert"),t1t.forEach(t),car=r(q9e," \u2014 "),xV=n(q9e,"A",{href:!0});var a1t=s(xV);far=r(a1t,"TFConvBertModel"),a1t.forEach(t),mar=r(q9e," (ConvBERT model)"),q9e.forEach(t),gar=i(k),tF=n(k,"LI",{});var N9e=s(tF);X_e=n(N9e,"STRONG",{});var n1t=s(X_e);har=r(n1t,"convnext"),n1t.forEach(t),par=r(N9e," \u2014 "),kV=n(N9e,"A",{href:!0});var s1t=s(kV);_ar=r(s1t,"TFConvNextModel"),s1t.forEach(t),uar=r(N9e," (ConvNext model)"),N9e.forEach(t),bar=i(k),aF=n(k,"LI",{});var j9e=s(aF);z_e=n(j9e,"STRONG",{});var l1t=s(z_e);Far=r(l1t,"ctrl"),l1t.forEach(t),Tar=r(j9e," \u2014 "),SV=n(j9e,"A",{href:!0});var i1t=s(SV);Mar=r(i1t,"TFCTRLModel"),i1t.forEach(t),Ear=r(j9e," (CTRL model)"),j9e.forEach(t),Car=i(k),nF=n(k,"LI",{});var D9e=s(nF);Q_e=n(D9e,"STRONG",{});var d1t=s(Q_e);war=r(d1t,"deberta"),d1t.forEach(t),Aar=r(D9e," \u2014 "),RV=n(D9e,"A",{href:!0});var c1t=s(RV);yar=r(c1t,"TFDebertaModel"),c1t.forEach(t),Lar=r(D9e," (DeBERTa model)"),D9e.forEach(t),xar=i(k),sF=n(k,"LI",{});var G9e=s(sF);W_e=n(G9e,"STRONG",{});var f1t=s(W_e);kar=r(f1t,"deberta-v2"),f1t.forEach(t),Sar=r(G9e," \u2014 "),BV=n(G9e,"A",{href:!0});var m1t=s(BV);Rar=r(m1t,"TFDebertaV2Model"),m1t.forEach(t),Bar=r(G9e," (DeBERTa-v2 model)"),G9e.forEach(t),Par=i(k),lF=n(k,"LI",{});var O9e=s(lF);H_e=n(O9e,"STRONG",{});var g1t=s(H_e);$ar=r(g1t,"distilbert"),g1t.forEach(t),Iar=r(O9e," \u2014 "),PV=n(O9e,"A",{href:!0});var h1t=s(PV);qar=r(h1t,"TFDistilBertModel"),h1t.forEach(t),Nar=r(O9e," (DistilBERT model)"),O9e.forEach(t),jar=i(k),iF=n(k,"LI",{});var V9e=s(iF);U_e=n(V9e,"STRONG",{});var p1t=s(U_e);Dar=r(p1t,"dpr"),p1t.forEach(t),Gar=r(V9e," \u2014 "),$V=n(V9e,"A",{href:!0});var _1t=s($V);Oar=r(_1t,"TFDPRQuestionEncoder"),_1t.forEach(t),Var=r(V9e," (DPR model)"),V9e.forEach(t),Xar=i(k),dF=n(k,"LI",{});var X9e=s(dF);J_e=n(X9e,"STRONG",{});var u1t=s(J_e);zar=r(u1t,"electra"),u1t.forEach(t),Qar=r(X9e," \u2014 "),IV=n(X9e,"A",{href:!0});var b1t=s(IV);War=r(b1t,"TFElectraModel"),b1t.forEach(t),Har=r(X9e," (ELECTRA model)"),X9e.forEach(t),Uar=i(k),cF=n(k,"LI",{});var z9e=s(cF);Y_e=n(z9e,"STRONG",{});var v1t=s(Y_e);Jar=r(v1t,"flaubert"),v1t.forEach(t),Yar=r(z9e," \u2014 "),qV=n(z9e,"A",{href:!0});var F1t=s(qV);Kar=r(F1t,"TFFlaubertModel"),F1t.forEach(t),Zar=r(z9e," (FlauBERT model)"),z9e.forEach(t),enr=i(k),Js=n(k,"LI",{});var z9=s(Js);K_e=n(z9,"STRONG",{});var T1t=s(K_e);onr=r(T1t,"funnel"),T1t.forEach(t),rnr=r(z9," \u2014 "),NV=n(z9,"A",{href:!0});var M1t=s(NV);tnr=r(M1t,"TFFunnelModel"),M1t.forEach(t),anr=r(z9," or "),jV=n(z9,"A",{href:!0});var E1t=s(jV);nnr=r(E1t,"TFFunnelBaseModel"),E1t.forEach(t),snr=r(z9," (Funnel Transformer model)"),z9.forEach(t),lnr=i(k),fF=n(k,"LI",{});var Q9e=s(fF);Z_e=n(Q9e,"STRONG",{});var C1t=s(Z_e);inr=r(C1t,"gpt2"),C1t.forEach(t),dnr=r(Q9e," \u2014 "),DV=n(Q9e,"A",{href:!0});var w1t=s(DV);cnr=r(w1t,"TFGPT2Model"),w1t.forEach(t),fnr=r(Q9e," (OpenAI GPT-2 model)"),Q9e.forEach(t),mnr=i(k),mF=n(k,"LI",{});var W9e=s(mF);eue=n(W9e,"STRONG",{});var A1t=s(eue);gnr=r(A1t,"gptj"),A1t.forEach(t),hnr=r(W9e," \u2014 "),GV=n(W9e,"A",{href:!0});var y1t=s(GV);pnr=r(y1t,"TFGPTJModel"),y1t.forEach(t),_nr=r(W9e," (GPT-J model)"),W9e.forEach(t),unr=i(k),gF=n(k,"LI",{});var H9e=s(gF);oue=n(H9e,"STRONG",{});var L1t=s(oue);bnr=r(L1t,"hubert"),L1t.forEach(t),vnr=r(H9e," \u2014 "),OV=n(H9e,"A",{href:!0});var x1t=s(OV);Fnr=r(x1t,"TFHubertModel"),x1t.forEach(t),Tnr=r(H9e," (Hubert model)"),H9e.forEach(t),Mnr=i(k),hF=n(k,"LI",{});var U9e=s(hF);rue=n(U9e,"STRONG",{});var k1t=s(rue);Enr=r(k1t,"layoutlm"),k1t.forEach(t),Cnr=r(U9e," \u2014 "),VV=n(U9e,"A",{href:!0});var S1t=s(VV);wnr=r(S1t,"TFLayoutLMModel"),S1t.forEach(t),Anr=r(U9e," (LayoutLM model)"),U9e.forEach(t),ynr=i(k),pF=n(k,"LI",{});var J9e=s(pF);tue=n(J9e,"STRONG",{});var R1t=s(tue);Lnr=r(R1t,"led"),R1t.forEach(t),xnr=r(J9e," \u2014 "),XV=n(J9e,"A",{href:!0});var B1t=s(XV);knr=r(B1t,"TFLEDModel"),B1t.forEach(t),Snr=r(J9e," (LED model)"),J9e.forEach(t),Rnr=i(k),_F=n(k,"LI",{});var Y9e=s(_F);aue=n(Y9e,"STRONG",{});var P1t=s(aue);Bnr=r(P1t,"longformer"),P1t.forEach(t),Pnr=r(Y9e," \u2014 "),zV=n(Y9e,"A",{href:!0});var $1t=s(zV);$nr=r($1t,"TFLongformerModel"),$1t.forEach(t),Inr=r(Y9e," (Longformer model)"),Y9e.forEach(t),qnr=i(k),uF=n(k,"LI",{});var K9e=s(uF);nue=n(K9e,"STRONG",{});var I1t=s(nue);Nnr=r(I1t,"lxmert"),I1t.forEach(t),jnr=r(K9e," \u2014 "),QV=n(K9e,"A",{href:!0});var q1t=s(QV);Dnr=r(q1t,"TFLxmertModel"),q1t.forEach(t),Gnr=r(K9e," (LXMERT model)"),K9e.forEach(t),Onr=i(k),bF=n(k,"LI",{});var Z9e=s(bF);sue=n(Z9e,"STRONG",{});var N1t=s(sue);Vnr=r(N1t,"marian"),N1t.forEach(t),Xnr=r(Z9e," \u2014 "),WV=n(Z9e,"A",{href:!0});var j1t=s(WV);znr=r(j1t,"TFMarianModel"),j1t.forEach(t),Qnr=r(Z9e," (Marian model)"),Z9e.forEach(t),Wnr=i(k),vF=n(k,"LI",{});var exe=s(vF);lue=n(exe,"STRONG",{});var D1t=s(lue);Hnr=r(D1t,"mbart"),D1t.forEach(t),Unr=r(exe," \u2014 "),HV=n(exe,"A",{href:!0});var G1t=s(HV);Jnr=r(G1t,"TFMBartModel"),G1t.forEach(t),Ynr=r(exe," (mBART model)"),exe.forEach(t),Knr=i(k),FF=n(k,"LI",{});var oxe=s(FF);iue=n(oxe,"STRONG",{});var O1t=s(iue);Znr=r(O1t,"mobilebert"),O1t.forEach(t),esr=r(oxe," \u2014 "),UV=n(oxe,"A",{href:!0});var V1t=s(UV);osr=r(V1t,"TFMobileBertModel"),V1t.forEach(t),rsr=r(oxe," (MobileBERT model)"),oxe.forEach(t),tsr=i(k),TF=n(k,"LI",{});var rxe=s(TF);due=n(rxe,"STRONG",{});var X1t=s(due);asr=r(X1t,"mpnet"),X1t.forEach(t),nsr=r(rxe," \u2014 "),JV=n(rxe,"A",{href:!0});var z1t=s(JV);ssr=r(z1t,"TFMPNetModel"),z1t.forEach(t),lsr=r(rxe," (MPNet model)"),rxe.forEach(t),isr=i(k),MF=n(k,"LI",{});var txe=s(MF);cue=n(txe,"STRONG",{});var Q1t=s(cue);dsr=r(Q1t,"mt5"),Q1t.forEach(t),csr=r(txe," \u2014 "),YV=n(txe,"A",{href:!0});var W1t=s(YV);fsr=r(W1t,"TFMT5Model"),W1t.forEach(t),msr=r(txe," (mT5 model)"),txe.forEach(t),gsr=i(k),EF=n(k,"LI",{});var axe=s(EF);fue=n(axe,"STRONG",{});var H1t=s(fue);hsr=r(H1t,"openai-gpt"),H1t.forEach(t),psr=r(axe," \u2014 "),KV=n(axe,"A",{href:!0});var U1t=s(KV);_sr=r(U1t,"TFOpenAIGPTModel"),U1t.forEach(t),usr=r(axe," (OpenAI GPT model)"),axe.forEach(t),bsr=i(k),CF=n(k,"LI",{});var nxe=s(CF);mue=n(nxe,"STRONG",{});var J1t=s(mue);vsr=r(J1t,"pegasus"),J1t.forEach(t),Fsr=r(nxe," \u2014 "),ZV=n(nxe,"A",{href:!0});var Y1t=s(ZV);Tsr=r(Y1t,"TFPegasusModel"),Y1t.forEach(t),Msr=r(nxe," (Pegasus model)"),nxe.forEach(t),Esr=i(k),wF=n(k,"LI",{});var sxe=s(wF);gue=n(sxe,"STRONG",{});var K1t=s(gue);Csr=r(K1t,"rembert"),K1t.forEach(t),wsr=r(sxe," \u2014 "),eX=n(sxe,"A",{href:!0});var Z1t=s(eX);Asr=r(Z1t,"TFRemBertModel"),Z1t.forEach(t),ysr=r(sxe," (RemBERT model)"),sxe.forEach(t),Lsr=i(k),AF=n(k,"LI",{});var lxe=s(AF);hue=n(lxe,"STRONG",{});var ebt=s(hue);xsr=r(ebt,"roberta"),ebt.forEach(t),ksr=r(lxe," \u2014 "),oX=n(lxe,"A",{href:!0});var obt=s(oX);Ssr=r(obt,"TFRobertaModel"),obt.forEach(t),Rsr=r(lxe," (RoBERTa model)"),lxe.forEach(t),Bsr=i(k),yF=n(k,"LI",{});var ixe=s(yF);pue=n(ixe,"STRONG",{});var rbt=s(pue);Psr=r(rbt,"roformer"),rbt.forEach(t),$sr=r(ixe," \u2014 "),rX=n(ixe,"A",{href:!0});var tbt=s(rX);Isr=r(tbt,"TFRoFormerModel"),tbt.forEach(t),qsr=r(ixe," (RoFormer model)"),ixe.forEach(t),Nsr=i(k),LF=n(k,"LI",{});var dxe=s(LF);_ue=n(dxe,"STRONG",{});var abt=s(_ue);jsr=r(abt,"speech_to_text"),abt.forEach(t),Dsr=r(dxe," \u2014 "),tX=n(dxe,"A",{href:!0});var nbt=s(tX);Gsr=r(nbt,"TFSpeech2TextModel"),nbt.forEach(t),Osr=r(dxe," (Speech2Text model)"),dxe.forEach(t),Vsr=i(k),xF=n(k,"LI",{});var cxe=s(xF);uue=n(cxe,"STRONG",{});var sbt=s(uue);Xsr=r(sbt,"t5"),sbt.forEach(t),zsr=r(cxe," \u2014 "),aX=n(cxe,"A",{href:!0});var lbt=s(aX);Qsr=r(lbt,"TFT5Model"),lbt.forEach(t),Wsr=r(cxe," (T5 model)"),cxe.forEach(t),Hsr=i(k),kF=n(k,"LI",{});var fxe=s(kF);bue=n(fxe,"STRONG",{});var ibt=s(bue);Usr=r(ibt,"tapas"),ibt.forEach(t),Jsr=r(fxe," \u2014 "),nX=n(fxe,"A",{href:!0});var dbt=s(nX);Ysr=r(dbt,"TFTapasModel"),dbt.forEach(t),Ksr=r(fxe," (TAPAS model)"),fxe.forEach(t),Zsr=i(k),SF=n(k,"LI",{});var mxe=s(SF);vue=n(mxe,"STRONG",{});var cbt=s(vue);elr=r(cbt,"transfo-xl"),cbt.forEach(t),olr=r(mxe," \u2014 "),sX=n(mxe,"A",{href:!0});var fbt=s(sX);rlr=r(fbt,"TFTransfoXLModel"),fbt.forEach(t),tlr=r(mxe," (Transformer-XL model)"),mxe.forEach(t),alr=i(k),RF=n(k,"LI",{});var gxe=s(RF);Fue=n(gxe,"STRONG",{});var mbt=s(Fue);nlr=r(mbt,"vit"),mbt.forEach(t),slr=r(gxe," \u2014 "),lX=n(gxe,"A",{href:!0});var gbt=s(lX);llr=r(gbt,"TFViTModel"),gbt.forEach(t),ilr=r(gxe," (ViT model)"),gxe.forEach(t),dlr=i(k),BF=n(k,"LI",{});var hxe=s(BF);Tue=n(hxe,"STRONG",{});var hbt=s(Tue);clr=r(hbt,"vit_mae"),hbt.forEach(t),flr=r(hxe," \u2014 "),iX=n(hxe,"A",{href:!0});var pbt=s(iX);mlr=r(pbt,"TFViTMAEModel"),pbt.forEach(t),glr=r(hxe," (ViTMAE model)"),hxe.forEach(t),hlr=i(k),PF=n(k,"LI",{});var pxe=s(PF);Mue=n(pxe,"STRONG",{});var _bt=s(Mue);plr=r(_bt,"wav2vec2"),_bt.forEach(t),_lr=r(pxe," \u2014 "),dX=n(pxe,"A",{href:!0});var ubt=s(dX);ulr=r(ubt,"TFWav2Vec2Model"),ubt.forEach(t),blr=r(pxe," (Wav2Vec2 model)"),pxe.forEach(t),vlr=i(k),$F=n(k,"LI",{});var _xe=s($F);Eue=n(_xe,"STRONG",{});var bbt=s(Eue);Flr=r(bbt,"xlm"),bbt.forEach(t),Tlr=r(_xe," \u2014 "),cX=n(_xe,"A",{href:!0});var vbt=s(cX);Mlr=r(vbt,"TFXLMModel"),vbt.forEach(t),Elr=r(_xe," (XLM model)"),_xe.forEach(t),Clr=i(k),IF=n(k,"LI",{});var uxe=s(IF);Cue=n(uxe,"STRONG",{});var Fbt=s(Cue);wlr=r(Fbt,"xlm-roberta"),Fbt.forEach(t),Alr=r(uxe," \u2014 "),fX=n(uxe,"A",{href:!0});var Tbt=s(fX);ylr=r(Tbt,"TFXLMRobertaModel"),Tbt.forEach(t),Llr=r(uxe," (XLM-RoBERTa model)"),uxe.forEach(t),xlr=i(k),qF=n(k,"LI",{});var bxe=s(qF);wue=n(bxe,"STRONG",{});var Mbt=s(wue);klr=r(Mbt,"xlnet"),Mbt.forEach(t),Slr=r(bxe," \u2014 "),mX=n(bxe,"A",{href:!0});var Ebt=s(mX);Rlr=r(Ebt,"TFXLNetModel"),Ebt.forEach(t),Blr=r(bxe," (XLNet model)"),bxe.forEach(t),k.forEach(t),Plr=i(pa),Aue=n(pa,"P",{});var Cbt=s(Aue);$lr=r(Cbt,"Examples:"),Cbt.forEach(t),Ilr=i(pa),m(RA.$$.fragment,pa),pa.forEach(t),Hl.forEach(t),c$e=i(c),Cc=n(c,"H2",{class:!0});var Fqe=s(Cc);NF=n(Fqe,"A",{id:!0,class:!0,href:!0});var wbt=s(NF);yue=n(wbt,"SPAN",{});var Abt=s(yue);m(BA.$$.fragment,Abt),Abt.forEach(t),wbt.forEach(t),qlr=i(Fqe),Lue=n(Fqe,"SPAN",{});var ybt=s(Lue);Nlr=r(ybt,"TFAutoModelForPreTraining"),ybt.forEach(t),Fqe.forEach(t),f$e=i(c),Fr=n(c,"DIV",{class:!0});var Jl=s(Fr);m(PA.$$.fragment,Jl),jlr=i(Jl),wc=n(Jl,"P",{});var gY=s(wc);Dlr=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),gX=n(gY,"A",{href:!0});var Lbt=s(gX);Glr=r(Lbt,"from_pretrained()"),Lbt.forEach(t),Olr=r(gY," class method or the "),hX=n(gY,"A",{href:!0});var xbt=s(hX);Vlr=r(xbt,"from_config()"),xbt.forEach(t),Xlr=r(gY,` class
method.`),gY.forEach(t),zlr=i(Jl),$A=n(Jl,"P",{});var Tqe=s($A);Qlr=r(Tqe,"This class cannot be instantiated directly using "),xue=n(Tqe,"CODE",{});var kbt=s(xue);Wlr=r(kbt,"__init__()"),kbt.forEach(t),Hlr=r(Tqe," (throws an error)."),Tqe.forEach(t),Ulr=i(Jl),ht=n(Jl,"DIV",{class:!0});var Yl=s(ht);m(IA.$$.fragment,Yl),Jlr=i(Yl),kue=n(Yl,"P",{});var Sbt=s(kue);Ylr=r(Sbt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Sbt.forEach(t),Klr=i(Yl),Ac=n(Yl,"P",{});var hY=s(Ac);Zlr=r(hY,`Note:
Loading a model from its configuration file does `),Sue=n(hY,"STRONG",{});var Rbt=s(Sue);eir=r(Rbt,"not"),Rbt.forEach(t),oir=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pX=n(hY,"A",{href:!0});var Bbt=s(pX);rir=r(Bbt,"from_pretrained()"),Bbt.forEach(t),tir=r(hY," to load the model weights."),hY.forEach(t),air=i(Yl),Rue=n(Yl,"P",{});var Pbt=s(Rue);nir=r(Pbt,"Examples:"),Pbt.forEach(t),sir=i(Yl),m(qA.$$.fragment,Yl),Yl.forEach(t),lir=i(Jl),_o=n(Jl,"DIV",{class:!0});var _a=s(_o);m(NA.$$.fragment,_a),iir=i(_a),Bue=n(_a,"P",{});var $bt=s(Bue);dir=r($bt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),$bt.forEach(t),cir=i(_a),bn=n(_a,"P",{});var ME=s(bn);fir=r(ME,"The model class to instantiate is selected based on the "),Pue=n(ME,"CODE",{});var Ibt=s(Pue);mir=r(Ibt,"model_type"),Ibt.forEach(t),gir=r(ME,` property of the config object (either
passed as an argument or loaded from `),$ue=n(ME,"CODE",{});var qbt=s($ue);hir=r(qbt,"pretrained_model_name_or_path"),qbt.forEach(t),pir=r(ME,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(ME,"CODE",{});var Nbt=s(Iue);_ir=r(Nbt,"pretrained_model_name_or_path"),Nbt.forEach(t),uir=r(ME,":"),ME.forEach(t),bir=i(_a),U=n(_a,"UL",{});var Y=s(U);jF=n(Y,"LI",{});var vxe=s(jF);que=n(vxe,"STRONG",{});var jbt=s(que);vir=r(jbt,"albert"),jbt.forEach(t),Fir=r(vxe," \u2014 "),_X=n(vxe,"A",{href:!0});var Dbt=s(_X);Tir=r(Dbt,"TFAlbertForPreTraining"),Dbt.forEach(t),Mir=r(vxe," (ALBERT model)"),vxe.forEach(t),Eir=i(Y),DF=n(Y,"LI",{});var Fxe=s(DF);Nue=n(Fxe,"STRONG",{});var Gbt=s(Nue);Cir=r(Gbt,"bart"),Gbt.forEach(t),wir=r(Fxe," \u2014 "),uX=n(Fxe,"A",{href:!0});var Obt=s(uX);Air=r(Obt,"TFBartForConditionalGeneration"),Obt.forEach(t),yir=r(Fxe," (BART model)"),Fxe.forEach(t),Lir=i(Y),GF=n(Y,"LI",{});var Txe=s(GF);jue=n(Txe,"STRONG",{});var Vbt=s(jue);xir=r(Vbt,"bert"),Vbt.forEach(t),kir=r(Txe," \u2014 "),bX=n(Txe,"A",{href:!0});var Xbt=s(bX);Sir=r(Xbt,"TFBertForPreTraining"),Xbt.forEach(t),Rir=r(Txe," (BERT model)"),Txe.forEach(t),Bir=i(Y),OF=n(Y,"LI",{});var Mxe=s(OF);Due=n(Mxe,"STRONG",{});var zbt=s(Due);Pir=r(zbt,"camembert"),zbt.forEach(t),$ir=r(Mxe," \u2014 "),vX=n(Mxe,"A",{href:!0});var Qbt=s(vX);Iir=r(Qbt,"TFCamembertForMaskedLM"),Qbt.forEach(t),qir=r(Mxe," (CamemBERT model)"),Mxe.forEach(t),Nir=i(Y),VF=n(Y,"LI",{});var Exe=s(VF);Gue=n(Exe,"STRONG",{});var Wbt=s(Gue);jir=r(Wbt,"ctrl"),Wbt.forEach(t),Dir=r(Exe," \u2014 "),FX=n(Exe,"A",{href:!0});var Hbt=s(FX);Gir=r(Hbt,"TFCTRLLMHeadModel"),Hbt.forEach(t),Oir=r(Exe," (CTRL model)"),Exe.forEach(t),Vir=i(Y),XF=n(Y,"LI",{});var Cxe=s(XF);Oue=n(Cxe,"STRONG",{});var Ubt=s(Oue);Xir=r(Ubt,"distilbert"),Ubt.forEach(t),zir=r(Cxe," \u2014 "),TX=n(Cxe,"A",{href:!0});var Jbt=s(TX);Qir=r(Jbt,"TFDistilBertForMaskedLM"),Jbt.forEach(t),Wir=r(Cxe," (DistilBERT model)"),Cxe.forEach(t),Hir=i(Y),zF=n(Y,"LI",{});var wxe=s(zF);Vue=n(wxe,"STRONG",{});var Ybt=s(Vue);Uir=r(Ybt,"electra"),Ybt.forEach(t),Jir=r(wxe," \u2014 "),MX=n(wxe,"A",{href:!0});var Kbt=s(MX);Yir=r(Kbt,"TFElectraForPreTraining"),Kbt.forEach(t),Kir=r(wxe," (ELECTRA model)"),wxe.forEach(t),Zir=i(Y),QF=n(Y,"LI",{});var Axe=s(QF);Xue=n(Axe,"STRONG",{});var Zbt=s(Xue);edr=r(Zbt,"flaubert"),Zbt.forEach(t),odr=r(Axe," \u2014 "),EX=n(Axe,"A",{href:!0});var e2t=s(EX);rdr=r(e2t,"TFFlaubertWithLMHeadModel"),e2t.forEach(t),tdr=r(Axe," (FlauBERT model)"),Axe.forEach(t),adr=i(Y),WF=n(Y,"LI",{});var yxe=s(WF);zue=n(yxe,"STRONG",{});var o2t=s(zue);ndr=r(o2t,"funnel"),o2t.forEach(t),sdr=r(yxe," \u2014 "),CX=n(yxe,"A",{href:!0});var r2t=s(CX);ldr=r(r2t,"TFFunnelForPreTraining"),r2t.forEach(t),idr=r(yxe," (Funnel Transformer model)"),yxe.forEach(t),ddr=i(Y),HF=n(Y,"LI",{});var Lxe=s(HF);Que=n(Lxe,"STRONG",{});var t2t=s(Que);cdr=r(t2t,"gpt2"),t2t.forEach(t),fdr=r(Lxe," \u2014 "),wX=n(Lxe,"A",{href:!0});var a2t=s(wX);mdr=r(a2t,"TFGPT2LMHeadModel"),a2t.forEach(t),gdr=r(Lxe," (OpenAI GPT-2 model)"),Lxe.forEach(t),hdr=i(Y),UF=n(Y,"LI",{});var xxe=s(UF);Wue=n(xxe,"STRONG",{});var n2t=s(Wue);pdr=r(n2t,"layoutlm"),n2t.forEach(t),_dr=r(xxe," \u2014 "),AX=n(xxe,"A",{href:!0});var s2t=s(AX);udr=r(s2t,"TFLayoutLMForMaskedLM"),s2t.forEach(t),bdr=r(xxe," (LayoutLM model)"),xxe.forEach(t),vdr=i(Y),JF=n(Y,"LI",{});var kxe=s(JF);Hue=n(kxe,"STRONG",{});var l2t=s(Hue);Fdr=r(l2t,"lxmert"),l2t.forEach(t),Tdr=r(kxe," \u2014 "),yX=n(kxe,"A",{href:!0});var i2t=s(yX);Mdr=r(i2t,"TFLxmertForPreTraining"),i2t.forEach(t),Edr=r(kxe," (LXMERT model)"),kxe.forEach(t),Cdr=i(Y),YF=n(Y,"LI",{});var Sxe=s(YF);Uue=n(Sxe,"STRONG",{});var d2t=s(Uue);wdr=r(d2t,"mobilebert"),d2t.forEach(t),Adr=r(Sxe," \u2014 "),LX=n(Sxe,"A",{href:!0});var c2t=s(LX);ydr=r(c2t,"TFMobileBertForPreTraining"),c2t.forEach(t),Ldr=r(Sxe," (MobileBERT model)"),Sxe.forEach(t),xdr=i(Y),KF=n(Y,"LI",{});var Rxe=s(KF);Jue=n(Rxe,"STRONG",{});var f2t=s(Jue);kdr=r(f2t,"mpnet"),f2t.forEach(t),Sdr=r(Rxe," \u2014 "),xX=n(Rxe,"A",{href:!0});var m2t=s(xX);Rdr=r(m2t,"TFMPNetForMaskedLM"),m2t.forEach(t),Bdr=r(Rxe," (MPNet model)"),Rxe.forEach(t),Pdr=i(Y),ZF=n(Y,"LI",{});var Bxe=s(ZF);Yue=n(Bxe,"STRONG",{});var g2t=s(Yue);$dr=r(g2t,"openai-gpt"),g2t.forEach(t),Idr=r(Bxe," \u2014 "),kX=n(Bxe,"A",{href:!0});var h2t=s(kX);qdr=r(h2t,"TFOpenAIGPTLMHeadModel"),h2t.forEach(t),Ndr=r(Bxe," (OpenAI GPT model)"),Bxe.forEach(t),jdr=i(Y),eT=n(Y,"LI",{});var Pxe=s(eT);Kue=n(Pxe,"STRONG",{});var p2t=s(Kue);Ddr=r(p2t,"roberta"),p2t.forEach(t),Gdr=r(Pxe," \u2014 "),SX=n(Pxe,"A",{href:!0});var _2t=s(SX);Odr=r(_2t,"TFRobertaForMaskedLM"),_2t.forEach(t),Vdr=r(Pxe," (RoBERTa model)"),Pxe.forEach(t),Xdr=i(Y),oT=n(Y,"LI",{});var $xe=s(oT);Zue=n($xe,"STRONG",{});var u2t=s(Zue);zdr=r(u2t,"t5"),u2t.forEach(t),Qdr=r($xe," \u2014 "),RX=n($xe,"A",{href:!0});var b2t=s(RX);Wdr=r(b2t,"TFT5ForConditionalGeneration"),b2t.forEach(t),Hdr=r($xe," (T5 model)"),$xe.forEach(t),Udr=i(Y),rT=n(Y,"LI",{});var Ixe=s(rT);e1e=n(Ixe,"STRONG",{});var v2t=s(e1e);Jdr=r(v2t,"tapas"),v2t.forEach(t),Ydr=r(Ixe," \u2014 "),BX=n(Ixe,"A",{href:!0});var F2t=s(BX);Kdr=r(F2t,"TFTapasForMaskedLM"),F2t.forEach(t),Zdr=r(Ixe," (TAPAS model)"),Ixe.forEach(t),ecr=i(Y),tT=n(Y,"LI",{});var qxe=s(tT);o1e=n(qxe,"STRONG",{});var T2t=s(o1e);ocr=r(T2t,"transfo-xl"),T2t.forEach(t),rcr=r(qxe," \u2014 "),PX=n(qxe,"A",{href:!0});var M2t=s(PX);tcr=r(M2t,"TFTransfoXLLMHeadModel"),M2t.forEach(t),acr=r(qxe," (Transformer-XL model)"),qxe.forEach(t),ncr=i(Y),aT=n(Y,"LI",{});var Nxe=s(aT);r1e=n(Nxe,"STRONG",{});var E2t=s(r1e);scr=r(E2t,"vit_mae"),E2t.forEach(t),lcr=r(Nxe," \u2014 "),$X=n(Nxe,"A",{href:!0});var C2t=s($X);icr=r(C2t,"TFViTMAEForPreTraining"),C2t.forEach(t),dcr=r(Nxe," (ViTMAE model)"),Nxe.forEach(t),ccr=i(Y),nT=n(Y,"LI",{});var jxe=s(nT);t1e=n(jxe,"STRONG",{});var w2t=s(t1e);fcr=r(w2t,"xlm"),w2t.forEach(t),mcr=r(jxe," \u2014 "),IX=n(jxe,"A",{href:!0});var A2t=s(IX);gcr=r(A2t,"TFXLMWithLMHeadModel"),A2t.forEach(t),hcr=r(jxe," (XLM model)"),jxe.forEach(t),pcr=i(Y),sT=n(Y,"LI",{});var Dxe=s(sT);a1e=n(Dxe,"STRONG",{});var y2t=s(a1e);_cr=r(y2t,"xlm-roberta"),y2t.forEach(t),ucr=r(Dxe," \u2014 "),qX=n(Dxe,"A",{href:!0});var L2t=s(qX);bcr=r(L2t,"TFXLMRobertaForMaskedLM"),L2t.forEach(t),vcr=r(Dxe," (XLM-RoBERTa model)"),Dxe.forEach(t),Fcr=i(Y),lT=n(Y,"LI",{});var Gxe=s(lT);n1e=n(Gxe,"STRONG",{});var x2t=s(n1e);Tcr=r(x2t,"xlnet"),x2t.forEach(t),Mcr=r(Gxe," \u2014 "),NX=n(Gxe,"A",{href:!0});var k2t=s(NX);Ecr=r(k2t,"TFXLNetLMHeadModel"),k2t.forEach(t),Ccr=r(Gxe," (XLNet model)"),Gxe.forEach(t),Y.forEach(t),wcr=i(_a),s1e=n(_a,"P",{});var S2t=s(s1e);Acr=r(S2t,"Examples:"),S2t.forEach(t),ycr=i(_a),m(jA.$$.fragment,_a),_a.forEach(t),Jl.forEach(t),m$e=i(c),yc=n(c,"H2",{class:!0});var Mqe=s(yc);iT=n(Mqe,"A",{id:!0,class:!0,href:!0});var R2t=s(iT);l1e=n(R2t,"SPAN",{});var B2t=s(l1e);m(DA.$$.fragment,B2t),B2t.forEach(t),R2t.forEach(t),Lcr=i(Mqe),i1e=n(Mqe,"SPAN",{});var P2t=s(i1e);xcr=r(P2t,"TFAutoModelForCausalLM"),P2t.forEach(t),Mqe.forEach(t),g$e=i(c),Tr=n(c,"DIV",{class:!0});var Kl=s(Tr);m(GA.$$.fragment,Kl),kcr=i(Kl),Lc=n(Kl,"P",{});var pY=s(Lc);Scr=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jX=n(pY,"A",{href:!0});var $2t=s(jX);Rcr=r($2t,"from_pretrained()"),$2t.forEach(t),Bcr=r(pY," class method or the "),DX=n(pY,"A",{href:!0});var I2t=s(DX);Pcr=r(I2t,"from_config()"),I2t.forEach(t),$cr=r(pY,` class
method.`),pY.forEach(t),Icr=i(Kl),OA=n(Kl,"P",{});var Eqe=s(OA);qcr=r(Eqe,"This class cannot be instantiated directly using "),d1e=n(Eqe,"CODE",{});var q2t=s(d1e);Ncr=r(q2t,"__init__()"),q2t.forEach(t),jcr=r(Eqe," (throws an error)."),Eqe.forEach(t),Dcr=i(Kl),pt=n(Kl,"DIV",{class:!0});var Zl=s(pt);m(VA.$$.fragment,Zl),Gcr=i(Zl),c1e=n(Zl,"P",{});var N2t=s(c1e);Ocr=r(N2t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),N2t.forEach(t),Vcr=i(Zl),xc=n(Zl,"P",{});var _Y=s(xc);Xcr=r(_Y,`Note:
Loading a model from its configuration file does `),f1e=n(_Y,"STRONG",{});var j2t=s(f1e);zcr=r(j2t,"not"),j2t.forEach(t),Qcr=r(_Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),GX=n(_Y,"A",{href:!0});var D2t=s(GX);Wcr=r(D2t,"from_pretrained()"),D2t.forEach(t),Hcr=r(_Y," to load the model weights."),_Y.forEach(t),Ucr=i(Zl),m1e=n(Zl,"P",{});var G2t=s(m1e);Jcr=r(G2t,"Examples:"),G2t.forEach(t),Ycr=i(Zl),m(XA.$$.fragment,Zl),Zl.forEach(t),Kcr=i(Kl),uo=n(Kl,"DIV",{class:!0});var ua=s(uo);m(zA.$$.fragment,ua),Zcr=i(ua),g1e=n(ua,"P",{});var O2t=s(g1e);efr=r(O2t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O2t.forEach(t),ofr=i(ua),vn=n(ua,"P",{});var EE=s(vn);rfr=r(EE,"The model class to instantiate is selected based on the "),h1e=n(EE,"CODE",{});var V2t=s(h1e);tfr=r(V2t,"model_type"),V2t.forEach(t),afr=r(EE,` property of the config object (either
passed as an argument or loaded from `),p1e=n(EE,"CODE",{});var X2t=s(p1e);nfr=r(X2t,"pretrained_model_name_or_path"),X2t.forEach(t),sfr=r(EE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_1e=n(EE,"CODE",{});var z2t=s(_1e);lfr=r(z2t,"pretrained_model_name_or_path"),z2t.forEach(t),ifr=r(EE,":"),EE.forEach(t),dfr=i(ua),ge=n(ua,"UL",{});var ue=s(ge);dT=n(ue,"LI",{});var Oxe=s(dT);u1e=n(Oxe,"STRONG",{});var Q2t=s(u1e);cfr=r(Q2t,"bert"),Q2t.forEach(t),ffr=r(Oxe," \u2014 "),OX=n(Oxe,"A",{href:!0});var W2t=s(OX);mfr=r(W2t,"TFBertLMHeadModel"),W2t.forEach(t),gfr=r(Oxe," (BERT model)"),Oxe.forEach(t),hfr=i(ue),cT=n(ue,"LI",{});var Vxe=s(cT);b1e=n(Vxe,"STRONG",{});var H2t=s(b1e);pfr=r(H2t,"camembert"),H2t.forEach(t),_fr=r(Vxe," \u2014 "),VX=n(Vxe,"A",{href:!0});var U2t=s(VX);ufr=r(U2t,"TFCamembertForCausalLM"),U2t.forEach(t),bfr=r(Vxe," (CamemBERT model)"),Vxe.forEach(t),vfr=i(ue),fT=n(ue,"LI",{});var Xxe=s(fT);v1e=n(Xxe,"STRONG",{});var J2t=s(v1e);Ffr=r(J2t,"ctrl"),J2t.forEach(t),Tfr=r(Xxe," \u2014 "),XX=n(Xxe,"A",{href:!0});var Y2t=s(XX);Mfr=r(Y2t,"TFCTRLLMHeadModel"),Y2t.forEach(t),Efr=r(Xxe," (CTRL model)"),Xxe.forEach(t),Cfr=i(ue),mT=n(ue,"LI",{});var zxe=s(mT);F1e=n(zxe,"STRONG",{});var K2t=s(F1e);wfr=r(K2t,"gpt2"),K2t.forEach(t),Afr=r(zxe," \u2014 "),zX=n(zxe,"A",{href:!0});var Z2t=s(zX);yfr=r(Z2t,"TFGPT2LMHeadModel"),Z2t.forEach(t),Lfr=r(zxe," (OpenAI GPT-2 model)"),zxe.forEach(t),xfr=i(ue),gT=n(ue,"LI",{});var Qxe=s(gT);T1e=n(Qxe,"STRONG",{});var e5t=s(T1e);kfr=r(e5t,"gptj"),e5t.forEach(t),Sfr=r(Qxe," \u2014 "),QX=n(Qxe,"A",{href:!0});var o5t=s(QX);Rfr=r(o5t,"TFGPTJForCausalLM"),o5t.forEach(t),Bfr=r(Qxe," (GPT-J model)"),Qxe.forEach(t),Pfr=i(ue),hT=n(ue,"LI",{});var Wxe=s(hT);M1e=n(Wxe,"STRONG",{});var r5t=s(M1e);$fr=r(r5t,"openai-gpt"),r5t.forEach(t),Ifr=r(Wxe," \u2014 "),WX=n(Wxe,"A",{href:!0});var t5t=s(WX);qfr=r(t5t,"TFOpenAIGPTLMHeadModel"),t5t.forEach(t),Nfr=r(Wxe," (OpenAI GPT model)"),Wxe.forEach(t),jfr=i(ue),pT=n(ue,"LI",{});var Hxe=s(pT);E1e=n(Hxe,"STRONG",{});var a5t=s(E1e);Dfr=r(a5t,"rembert"),a5t.forEach(t),Gfr=r(Hxe," \u2014 "),HX=n(Hxe,"A",{href:!0});var n5t=s(HX);Ofr=r(n5t,"TFRemBertForCausalLM"),n5t.forEach(t),Vfr=r(Hxe," (RemBERT model)"),Hxe.forEach(t),Xfr=i(ue),_T=n(ue,"LI",{});var Uxe=s(_T);C1e=n(Uxe,"STRONG",{});var s5t=s(C1e);zfr=r(s5t,"roberta"),s5t.forEach(t),Qfr=r(Uxe," \u2014 "),UX=n(Uxe,"A",{href:!0});var l5t=s(UX);Wfr=r(l5t,"TFRobertaForCausalLM"),l5t.forEach(t),Hfr=r(Uxe," (RoBERTa model)"),Uxe.forEach(t),Ufr=i(ue),uT=n(ue,"LI",{});var Jxe=s(uT);w1e=n(Jxe,"STRONG",{});var i5t=s(w1e);Jfr=r(i5t,"roformer"),i5t.forEach(t),Yfr=r(Jxe," \u2014 "),JX=n(Jxe,"A",{href:!0});var d5t=s(JX);Kfr=r(d5t,"TFRoFormerForCausalLM"),d5t.forEach(t),Zfr=r(Jxe," (RoFormer model)"),Jxe.forEach(t),emr=i(ue),bT=n(ue,"LI",{});var Yxe=s(bT);A1e=n(Yxe,"STRONG",{});var c5t=s(A1e);omr=r(c5t,"transfo-xl"),c5t.forEach(t),rmr=r(Yxe," \u2014 "),YX=n(Yxe,"A",{href:!0});var f5t=s(YX);tmr=r(f5t,"TFTransfoXLLMHeadModel"),f5t.forEach(t),amr=r(Yxe," (Transformer-XL model)"),Yxe.forEach(t),nmr=i(ue),vT=n(ue,"LI",{});var Kxe=s(vT);y1e=n(Kxe,"STRONG",{});var m5t=s(y1e);smr=r(m5t,"xlm"),m5t.forEach(t),lmr=r(Kxe," \u2014 "),KX=n(Kxe,"A",{href:!0});var g5t=s(KX);imr=r(g5t,"TFXLMWithLMHeadModel"),g5t.forEach(t),dmr=r(Kxe," (XLM model)"),Kxe.forEach(t),cmr=i(ue),FT=n(ue,"LI",{});var Zxe=s(FT);L1e=n(Zxe,"STRONG",{});var h5t=s(L1e);fmr=r(h5t,"xlnet"),h5t.forEach(t),mmr=r(Zxe," \u2014 "),ZX=n(Zxe,"A",{href:!0});var p5t=s(ZX);gmr=r(p5t,"TFXLNetLMHeadModel"),p5t.forEach(t),hmr=r(Zxe," (XLNet model)"),Zxe.forEach(t),ue.forEach(t),pmr=i(ua),x1e=n(ua,"P",{});var _5t=s(x1e);_mr=r(_5t,"Examples:"),_5t.forEach(t),umr=i(ua),m(QA.$$.fragment,ua),ua.forEach(t),Kl.forEach(t),h$e=i(c),kc=n(c,"H2",{class:!0});var Cqe=s(kc);TT=n(Cqe,"A",{id:!0,class:!0,href:!0});var u5t=s(TT);k1e=n(u5t,"SPAN",{});var b5t=s(k1e);m(WA.$$.fragment,b5t),b5t.forEach(t),u5t.forEach(t),bmr=i(Cqe),S1e=n(Cqe,"SPAN",{});var v5t=s(S1e);vmr=r(v5t,"TFAutoModelForImageClassification"),v5t.forEach(t),Cqe.forEach(t),p$e=i(c),Mr=n(c,"DIV",{class:!0});var ei=s(Mr);m(HA.$$.fragment,ei),Fmr=i(ei),Sc=n(ei,"P",{});var uY=s(Sc);Tmr=r(uY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),ez=n(uY,"A",{href:!0});var F5t=s(ez);Mmr=r(F5t,"from_pretrained()"),F5t.forEach(t),Emr=r(uY," class method or the "),oz=n(uY,"A",{href:!0});var T5t=s(oz);Cmr=r(T5t,"from_config()"),T5t.forEach(t),wmr=r(uY,` class
method.`),uY.forEach(t),Amr=i(ei),UA=n(ei,"P",{});var wqe=s(UA);ymr=r(wqe,"This class cannot be instantiated directly using "),R1e=n(wqe,"CODE",{});var M5t=s(R1e);Lmr=r(M5t,"__init__()"),M5t.forEach(t),xmr=r(wqe," (throws an error)."),wqe.forEach(t),kmr=i(ei),_t=n(ei,"DIV",{class:!0});var oi=s(_t);m(JA.$$.fragment,oi),Smr=i(oi),B1e=n(oi,"P",{});var E5t=s(B1e);Rmr=r(E5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),E5t.forEach(t),Bmr=i(oi),Rc=n(oi,"P",{});var bY=s(Rc);Pmr=r(bY,`Note:
Loading a model from its configuration file does `),P1e=n(bY,"STRONG",{});var C5t=s(P1e);$mr=r(C5t,"not"),C5t.forEach(t),Imr=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),rz=n(bY,"A",{href:!0});var w5t=s(rz);qmr=r(w5t,"from_pretrained()"),w5t.forEach(t),Nmr=r(bY," to load the model weights."),bY.forEach(t),jmr=i(oi),$1e=n(oi,"P",{});var A5t=s($1e);Dmr=r(A5t,"Examples:"),A5t.forEach(t),Gmr=i(oi),m(YA.$$.fragment,oi),oi.forEach(t),Omr=i(ei),bo=n(ei,"DIV",{class:!0});var ba=s(bo);m(KA.$$.fragment,ba),Vmr=i(ba),I1e=n(ba,"P",{});var y5t=s(I1e);Xmr=r(y5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),y5t.forEach(t),zmr=i(ba),Fn=n(ba,"P",{});var CE=s(Fn);Qmr=r(CE,"The model class to instantiate is selected based on the "),q1e=n(CE,"CODE",{});var L5t=s(q1e);Wmr=r(L5t,"model_type"),L5t.forEach(t),Hmr=r(CE,` property of the config object (either
passed as an argument or loaded from `),N1e=n(CE,"CODE",{});var x5t=s(N1e);Umr=r(x5t,"pretrained_model_name_or_path"),x5t.forEach(t),Jmr=r(CE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),j1e=n(CE,"CODE",{});var k5t=s(j1e);Ymr=r(k5t,"pretrained_model_name_or_path"),k5t.forEach(t),Kmr=r(CE,":"),CE.forEach(t),Zmr=i(ba),ZA=n(ba,"UL",{});var Aqe=s(ZA);MT=n(Aqe,"LI",{});var eke=s(MT);D1e=n(eke,"STRONG",{});var S5t=s(D1e);egr=r(S5t,"convnext"),S5t.forEach(t),ogr=r(eke," \u2014 "),tz=n(eke,"A",{href:!0});var R5t=s(tz);rgr=r(R5t,"TFConvNextForImageClassification"),R5t.forEach(t),tgr=r(eke," (ConvNext model)"),eke.forEach(t),agr=i(Aqe),ET=n(Aqe,"LI",{});var oke=s(ET);G1e=n(oke,"STRONG",{});var B5t=s(G1e);ngr=r(B5t,"vit"),B5t.forEach(t),sgr=r(oke," \u2014 "),az=n(oke,"A",{href:!0});var P5t=s(az);lgr=r(P5t,"TFViTForImageClassification"),P5t.forEach(t),igr=r(oke," (ViT model)"),oke.forEach(t),Aqe.forEach(t),dgr=i(ba),O1e=n(ba,"P",{});var $5t=s(O1e);cgr=r($5t,"Examples:"),$5t.forEach(t),fgr=i(ba),m(e0.$$.fragment,ba),ba.forEach(t),ei.forEach(t),_$e=i(c),Bc=n(c,"H2",{class:!0});var yqe=s(Bc);CT=n(yqe,"A",{id:!0,class:!0,href:!0});var I5t=s(CT);V1e=n(I5t,"SPAN",{});var q5t=s(V1e);m(o0.$$.fragment,q5t),q5t.forEach(t),I5t.forEach(t),mgr=i(yqe),X1e=n(yqe,"SPAN",{});var N5t=s(X1e);ggr=r(N5t,"TFAutoModelForMaskedLM"),N5t.forEach(t),yqe.forEach(t),u$e=i(c),Er=n(c,"DIV",{class:!0});var ri=s(Er);m(r0.$$.fragment,ri),hgr=i(ri),Pc=n(ri,"P",{});var vY=s(Pc);pgr=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),nz=n(vY,"A",{href:!0});var j5t=s(nz);_gr=r(j5t,"from_pretrained()"),j5t.forEach(t),ugr=r(vY," class method or the "),sz=n(vY,"A",{href:!0});var D5t=s(sz);bgr=r(D5t,"from_config()"),D5t.forEach(t),vgr=r(vY,` class
method.`),vY.forEach(t),Fgr=i(ri),t0=n(ri,"P",{});var Lqe=s(t0);Tgr=r(Lqe,"This class cannot be instantiated directly using "),z1e=n(Lqe,"CODE",{});var G5t=s(z1e);Mgr=r(G5t,"__init__()"),G5t.forEach(t),Egr=r(Lqe," (throws an error)."),Lqe.forEach(t),Cgr=i(ri),ut=n(ri,"DIV",{class:!0});var ti=s(ut);m(a0.$$.fragment,ti),wgr=i(ti),Q1e=n(ti,"P",{});var O5t=s(Q1e);Agr=r(O5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),O5t.forEach(t),ygr=i(ti),$c=n(ti,"P",{});var FY=s($c);Lgr=r(FY,`Note:
Loading a model from its configuration file does `),W1e=n(FY,"STRONG",{});var V5t=s(W1e);xgr=r(V5t,"not"),V5t.forEach(t),kgr=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lz=n(FY,"A",{href:!0});var X5t=s(lz);Sgr=r(X5t,"from_pretrained()"),X5t.forEach(t),Rgr=r(FY," to load the model weights."),FY.forEach(t),Bgr=i(ti),H1e=n(ti,"P",{});var z5t=s(H1e);Pgr=r(z5t,"Examples:"),z5t.forEach(t),$gr=i(ti),m(n0.$$.fragment,ti),ti.forEach(t),Igr=i(ri),vo=n(ri,"DIV",{class:!0});var va=s(vo);m(s0.$$.fragment,va),qgr=i(va),U1e=n(va,"P",{});var Q5t=s(U1e);Ngr=r(Q5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Q5t.forEach(t),jgr=i(va),Tn=n(va,"P",{});var wE=s(Tn);Dgr=r(wE,"The model class to instantiate is selected based on the "),J1e=n(wE,"CODE",{});var W5t=s(J1e);Ggr=r(W5t,"model_type"),W5t.forEach(t),Ogr=r(wE,` property of the config object (either
passed as an argument or loaded from `),Y1e=n(wE,"CODE",{});var H5t=s(Y1e);Vgr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),Xgr=r(wE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),K1e=n(wE,"CODE",{});var U5t=s(K1e);zgr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),Qgr=r(wE,":"),wE.forEach(t),Wgr=i(va),K=n(va,"UL",{});var re=s(K);wT=n(re,"LI",{});var rke=s(wT);Z1e=n(rke,"STRONG",{});var J5t=s(Z1e);Hgr=r(J5t,"albert"),J5t.forEach(t),Ugr=r(rke," \u2014 "),iz=n(rke,"A",{href:!0});var Y5t=s(iz);Jgr=r(Y5t,"TFAlbertForMaskedLM"),Y5t.forEach(t),Ygr=r(rke," (ALBERT model)"),rke.forEach(t),Kgr=i(re),AT=n(re,"LI",{});var tke=s(AT);ebe=n(tke,"STRONG",{});var K5t=s(ebe);Zgr=r(K5t,"bert"),K5t.forEach(t),ehr=r(tke," \u2014 "),dz=n(tke,"A",{href:!0});var Z5t=s(dz);ohr=r(Z5t,"TFBertForMaskedLM"),Z5t.forEach(t),rhr=r(tke," (BERT model)"),tke.forEach(t),thr=i(re),yT=n(re,"LI",{});var ake=s(yT);obe=n(ake,"STRONG",{});var e6t=s(obe);ahr=r(e6t,"camembert"),e6t.forEach(t),nhr=r(ake," \u2014 "),cz=n(ake,"A",{href:!0});var o6t=s(cz);shr=r(o6t,"TFCamembertForMaskedLM"),o6t.forEach(t),lhr=r(ake," (CamemBERT model)"),ake.forEach(t),ihr=i(re),LT=n(re,"LI",{});var nke=s(LT);rbe=n(nke,"STRONG",{});var r6t=s(rbe);dhr=r(r6t,"convbert"),r6t.forEach(t),chr=r(nke," \u2014 "),fz=n(nke,"A",{href:!0});var t6t=s(fz);fhr=r(t6t,"TFConvBertForMaskedLM"),t6t.forEach(t),mhr=r(nke," (ConvBERT model)"),nke.forEach(t),ghr=i(re),xT=n(re,"LI",{});var ske=s(xT);tbe=n(ske,"STRONG",{});var a6t=s(tbe);hhr=r(a6t,"deberta"),a6t.forEach(t),phr=r(ske," \u2014 "),mz=n(ske,"A",{href:!0});var n6t=s(mz);_hr=r(n6t,"TFDebertaForMaskedLM"),n6t.forEach(t),uhr=r(ske," (DeBERTa model)"),ske.forEach(t),bhr=i(re),kT=n(re,"LI",{});var lke=s(kT);abe=n(lke,"STRONG",{});var s6t=s(abe);vhr=r(s6t,"deberta-v2"),s6t.forEach(t),Fhr=r(lke," \u2014 "),gz=n(lke,"A",{href:!0});var l6t=s(gz);Thr=r(l6t,"TFDebertaV2ForMaskedLM"),l6t.forEach(t),Mhr=r(lke," (DeBERTa-v2 model)"),lke.forEach(t),Ehr=i(re),ST=n(re,"LI",{});var ike=s(ST);nbe=n(ike,"STRONG",{});var i6t=s(nbe);Chr=r(i6t,"distilbert"),i6t.forEach(t),whr=r(ike," \u2014 "),hz=n(ike,"A",{href:!0});var d6t=s(hz);Ahr=r(d6t,"TFDistilBertForMaskedLM"),d6t.forEach(t),yhr=r(ike," (DistilBERT model)"),ike.forEach(t),Lhr=i(re),RT=n(re,"LI",{});var dke=s(RT);sbe=n(dke,"STRONG",{});var c6t=s(sbe);xhr=r(c6t,"electra"),c6t.forEach(t),khr=r(dke," \u2014 "),pz=n(dke,"A",{href:!0});var f6t=s(pz);Shr=r(f6t,"TFElectraForMaskedLM"),f6t.forEach(t),Rhr=r(dke," (ELECTRA model)"),dke.forEach(t),Bhr=i(re),BT=n(re,"LI",{});var cke=s(BT);lbe=n(cke,"STRONG",{});var m6t=s(lbe);Phr=r(m6t,"flaubert"),m6t.forEach(t),$hr=r(cke," \u2014 "),_z=n(cke,"A",{href:!0});var g6t=s(_z);Ihr=r(g6t,"TFFlaubertWithLMHeadModel"),g6t.forEach(t),qhr=r(cke," (FlauBERT model)"),cke.forEach(t),Nhr=i(re),PT=n(re,"LI",{});var fke=s(PT);ibe=n(fke,"STRONG",{});var h6t=s(ibe);jhr=r(h6t,"funnel"),h6t.forEach(t),Dhr=r(fke," \u2014 "),uz=n(fke,"A",{href:!0});var p6t=s(uz);Ghr=r(p6t,"TFFunnelForMaskedLM"),p6t.forEach(t),Ohr=r(fke," (Funnel Transformer model)"),fke.forEach(t),Vhr=i(re),$T=n(re,"LI",{});var mke=s($T);dbe=n(mke,"STRONG",{});var _6t=s(dbe);Xhr=r(_6t,"layoutlm"),_6t.forEach(t),zhr=r(mke," \u2014 "),bz=n(mke,"A",{href:!0});var u6t=s(bz);Qhr=r(u6t,"TFLayoutLMForMaskedLM"),u6t.forEach(t),Whr=r(mke," (LayoutLM model)"),mke.forEach(t),Hhr=i(re),IT=n(re,"LI",{});var gke=s(IT);cbe=n(gke,"STRONG",{});var b6t=s(cbe);Uhr=r(b6t,"longformer"),b6t.forEach(t),Jhr=r(gke," \u2014 "),vz=n(gke,"A",{href:!0});var v6t=s(vz);Yhr=r(v6t,"TFLongformerForMaskedLM"),v6t.forEach(t),Khr=r(gke," (Longformer model)"),gke.forEach(t),Zhr=i(re),qT=n(re,"LI",{});var hke=s(qT);fbe=n(hke,"STRONG",{});var F6t=s(fbe);epr=r(F6t,"mobilebert"),F6t.forEach(t),opr=r(hke," \u2014 "),Fz=n(hke,"A",{href:!0});var T6t=s(Fz);rpr=r(T6t,"TFMobileBertForMaskedLM"),T6t.forEach(t),tpr=r(hke," (MobileBERT model)"),hke.forEach(t),apr=i(re),NT=n(re,"LI",{});var pke=s(NT);mbe=n(pke,"STRONG",{});var M6t=s(mbe);npr=r(M6t,"mpnet"),M6t.forEach(t),spr=r(pke," \u2014 "),Tz=n(pke,"A",{href:!0});var E6t=s(Tz);lpr=r(E6t,"TFMPNetForMaskedLM"),E6t.forEach(t),ipr=r(pke," (MPNet model)"),pke.forEach(t),dpr=i(re),jT=n(re,"LI",{});var _ke=s(jT);gbe=n(_ke,"STRONG",{});var C6t=s(gbe);cpr=r(C6t,"rembert"),C6t.forEach(t),fpr=r(_ke," \u2014 "),Mz=n(_ke,"A",{href:!0});var w6t=s(Mz);mpr=r(w6t,"TFRemBertForMaskedLM"),w6t.forEach(t),gpr=r(_ke," (RemBERT model)"),_ke.forEach(t),hpr=i(re),DT=n(re,"LI",{});var uke=s(DT);hbe=n(uke,"STRONG",{});var A6t=s(hbe);ppr=r(A6t,"roberta"),A6t.forEach(t),_pr=r(uke," \u2014 "),Ez=n(uke,"A",{href:!0});var y6t=s(Ez);upr=r(y6t,"TFRobertaForMaskedLM"),y6t.forEach(t),bpr=r(uke," (RoBERTa model)"),uke.forEach(t),vpr=i(re),GT=n(re,"LI",{});var bke=s(GT);pbe=n(bke,"STRONG",{});var L6t=s(pbe);Fpr=r(L6t,"roformer"),L6t.forEach(t),Tpr=r(bke," \u2014 "),Cz=n(bke,"A",{href:!0});var x6t=s(Cz);Mpr=r(x6t,"TFRoFormerForMaskedLM"),x6t.forEach(t),Epr=r(bke," (RoFormer model)"),bke.forEach(t),Cpr=i(re),OT=n(re,"LI",{});var vke=s(OT);_be=n(vke,"STRONG",{});var k6t=s(_be);wpr=r(k6t,"tapas"),k6t.forEach(t),Apr=r(vke," \u2014 "),wz=n(vke,"A",{href:!0});var S6t=s(wz);ypr=r(S6t,"TFTapasForMaskedLM"),S6t.forEach(t),Lpr=r(vke," (TAPAS model)"),vke.forEach(t),xpr=i(re),VT=n(re,"LI",{});var Fke=s(VT);ube=n(Fke,"STRONG",{});var R6t=s(ube);kpr=r(R6t,"xlm"),R6t.forEach(t),Spr=r(Fke," \u2014 "),Az=n(Fke,"A",{href:!0});var B6t=s(Az);Rpr=r(B6t,"TFXLMWithLMHeadModel"),B6t.forEach(t),Bpr=r(Fke," (XLM model)"),Fke.forEach(t),Ppr=i(re),XT=n(re,"LI",{});var Tke=s(XT);bbe=n(Tke,"STRONG",{});var P6t=s(bbe);$pr=r(P6t,"xlm-roberta"),P6t.forEach(t),Ipr=r(Tke," \u2014 "),yz=n(Tke,"A",{href:!0});var $6t=s(yz);qpr=r($6t,"TFXLMRobertaForMaskedLM"),$6t.forEach(t),Npr=r(Tke," (XLM-RoBERTa model)"),Tke.forEach(t),re.forEach(t),jpr=i(va),vbe=n(va,"P",{});var I6t=s(vbe);Dpr=r(I6t,"Examples:"),I6t.forEach(t),Gpr=i(va),m(l0.$$.fragment,va),va.forEach(t),ri.forEach(t),b$e=i(c),Ic=n(c,"H2",{class:!0});var xqe=s(Ic);zT=n(xqe,"A",{id:!0,class:!0,href:!0});var q6t=s(zT);Fbe=n(q6t,"SPAN",{});var N6t=s(Fbe);m(i0.$$.fragment,N6t),N6t.forEach(t),q6t.forEach(t),Opr=i(xqe),Tbe=n(xqe,"SPAN",{});var j6t=s(Tbe);Vpr=r(j6t,"TFAutoModelForSeq2SeqLM"),j6t.forEach(t),xqe.forEach(t),v$e=i(c),Cr=n(c,"DIV",{class:!0});var ai=s(Cr);m(d0.$$.fragment,ai),Xpr=i(ai),qc=n(ai,"P",{});var TY=s(qc);zpr=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Lz=n(TY,"A",{href:!0});var D6t=s(Lz);Qpr=r(D6t,"from_pretrained()"),D6t.forEach(t),Wpr=r(TY," class method or the "),xz=n(TY,"A",{href:!0});var G6t=s(xz);Hpr=r(G6t,"from_config()"),G6t.forEach(t),Upr=r(TY,` class
method.`),TY.forEach(t),Jpr=i(ai),c0=n(ai,"P",{});var kqe=s(c0);Ypr=r(kqe,"This class cannot be instantiated directly using "),Mbe=n(kqe,"CODE",{});var O6t=s(Mbe);Kpr=r(O6t,"__init__()"),O6t.forEach(t),Zpr=r(kqe," (throws an error)."),kqe.forEach(t),e_r=i(ai),bt=n(ai,"DIV",{class:!0});var ni=s(bt);m(f0.$$.fragment,ni),o_r=i(ni),Ebe=n(ni,"P",{});var V6t=s(Ebe);r_r=r(V6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),V6t.forEach(t),t_r=i(ni),Nc=n(ni,"P",{});var MY=s(Nc);a_r=r(MY,`Note:
Loading a model from its configuration file does `),Cbe=n(MY,"STRONG",{});var X6t=s(Cbe);n_r=r(X6t,"not"),X6t.forEach(t),s_r=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),kz=n(MY,"A",{href:!0});var z6t=s(kz);l_r=r(z6t,"from_pretrained()"),z6t.forEach(t),i_r=r(MY," to load the model weights."),MY.forEach(t),d_r=i(ni),wbe=n(ni,"P",{});var Q6t=s(wbe);c_r=r(Q6t,"Examples:"),Q6t.forEach(t),f_r=i(ni),m(m0.$$.fragment,ni),ni.forEach(t),m_r=i(ai),Fo=n(ai,"DIV",{class:!0});var Fa=s(Fo);m(g0.$$.fragment,Fa),g_r=i(Fa),Abe=n(Fa,"P",{});var W6t=s(Abe);h_r=r(W6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),W6t.forEach(t),p_r=i(Fa),Mn=n(Fa,"P",{});var AE=s(Mn);__r=r(AE,"The model class to instantiate is selected based on the "),ybe=n(AE,"CODE",{});var H6t=s(ybe);u_r=r(H6t,"model_type"),H6t.forEach(t),b_r=r(AE,` property of the config object (either
passed as an argument or loaded from `),Lbe=n(AE,"CODE",{});var U6t=s(Lbe);v_r=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),F_r=r(AE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xbe=n(AE,"CODE",{});var J6t=s(xbe);T_r=r(J6t,"pretrained_model_name_or_path"),J6t.forEach(t),M_r=r(AE,":"),AE.forEach(t),E_r=i(Fa),Fe=n(Fa,"UL",{});var ye=s(Fe);QT=n(ye,"LI",{});var Mke=s(QT);kbe=n(Mke,"STRONG",{});var Y6t=s(kbe);C_r=r(Y6t,"bart"),Y6t.forEach(t),w_r=r(Mke," \u2014 "),Sz=n(Mke,"A",{href:!0});var K6t=s(Sz);A_r=r(K6t,"TFBartForConditionalGeneration"),K6t.forEach(t),y_r=r(Mke," (BART model)"),Mke.forEach(t),L_r=i(ye),WT=n(ye,"LI",{});var Eke=s(WT);Sbe=n(Eke,"STRONG",{});var Z6t=s(Sbe);x_r=r(Z6t,"blenderbot"),Z6t.forEach(t),k_r=r(Eke," \u2014 "),Rz=n(Eke,"A",{href:!0});var evt=s(Rz);S_r=r(evt,"TFBlenderbotForConditionalGeneration"),evt.forEach(t),R_r=r(Eke," (Blenderbot model)"),Eke.forEach(t),B_r=i(ye),HT=n(ye,"LI",{});var Cke=s(HT);Rbe=n(Cke,"STRONG",{});var ovt=s(Rbe);P_r=r(ovt,"blenderbot-small"),ovt.forEach(t),$_r=r(Cke," \u2014 "),Bz=n(Cke,"A",{href:!0});var rvt=s(Bz);I_r=r(rvt,"TFBlenderbotSmallForConditionalGeneration"),rvt.forEach(t),q_r=r(Cke," (BlenderbotSmall model)"),Cke.forEach(t),N_r=i(ye),UT=n(ye,"LI",{});var wke=s(UT);Bbe=n(wke,"STRONG",{});var tvt=s(Bbe);j_r=r(tvt,"encoder-decoder"),tvt.forEach(t),D_r=r(wke," \u2014 "),Pz=n(wke,"A",{href:!0});var avt=s(Pz);G_r=r(avt,"TFEncoderDecoderModel"),avt.forEach(t),O_r=r(wke," (Encoder decoder model)"),wke.forEach(t),V_r=i(ye),JT=n(ye,"LI",{});var Ake=s(JT);Pbe=n(Ake,"STRONG",{});var nvt=s(Pbe);X_r=r(nvt,"led"),nvt.forEach(t),z_r=r(Ake," \u2014 "),$z=n(Ake,"A",{href:!0});var svt=s($z);Q_r=r(svt,"TFLEDForConditionalGeneration"),svt.forEach(t),W_r=r(Ake," (LED model)"),Ake.forEach(t),H_r=i(ye),YT=n(ye,"LI",{});var yke=s(YT);$be=n(yke,"STRONG",{});var lvt=s($be);U_r=r(lvt,"marian"),lvt.forEach(t),J_r=r(yke," \u2014 "),Iz=n(yke,"A",{href:!0});var ivt=s(Iz);Y_r=r(ivt,"TFMarianMTModel"),ivt.forEach(t),K_r=r(yke," (Marian model)"),yke.forEach(t),Z_r=i(ye),KT=n(ye,"LI",{});var Lke=s(KT);Ibe=n(Lke,"STRONG",{});var dvt=s(Ibe);eur=r(dvt,"mbart"),dvt.forEach(t),our=r(Lke," \u2014 "),qz=n(Lke,"A",{href:!0});var cvt=s(qz);rur=r(cvt,"TFMBartForConditionalGeneration"),cvt.forEach(t),tur=r(Lke," (mBART model)"),Lke.forEach(t),aur=i(ye),ZT=n(ye,"LI",{});var xke=s(ZT);qbe=n(xke,"STRONG",{});var fvt=s(qbe);nur=r(fvt,"mt5"),fvt.forEach(t),sur=r(xke," \u2014 "),Nz=n(xke,"A",{href:!0});var mvt=s(Nz);lur=r(mvt,"TFMT5ForConditionalGeneration"),mvt.forEach(t),iur=r(xke," (mT5 model)"),xke.forEach(t),dur=i(ye),e8=n(ye,"LI",{});var kke=s(e8);Nbe=n(kke,"STRONG",{});var gvt=s(Nbe);cur=r(gvt,"pegasus"),gvt.forEach(t),fur=r(kke," \u2014 "),jz=n(kke,"A",{href:!0});var hvt=s(jz);mur=r(hvt,"TFPegasusForConditionalGeneration"),hvt.forEach(t),gur=r(kke," (Pegasus model)"),kke.forEach(t),hur=i(ye),o8=n(ye,"LI",{});var Ske=s(o8);jbe=n(Ske,"STRONG",{});var pvt=s(jbe);pur=r(pvt,"t5"),pvt.forEach(t),_ur=r(Ske," \u2014 "),Dz=n(Ske,"A",{href:!0});var _vt=s(Dz);uur=r(_vt,"TFT5ForConditionalGeneration"),_vt.forEach(t),bur=r(Ske," (T5 model)"),Ske.forEach(t),ye.forEach(t),vur=i(Fa),Dbe=n(Fa,"P",{});var uvt=s(Dbe);Fur=r(uvt,"Examples:"),uvt.forEach(t),Tur=i(Fa),m(h0.$$.fragment,Fa),Fa.forEach(t),ai.forEach(t),F$e=i(c),jc=n(c,"H2",{class:!0});var Sqe=s(jc);r8=n(Sqe,"A",{id:!0,class:!0,href:!0});var bvt=s(r8);Gbe=n(bvt,"SPAN",{});var vvt=s(Gbe);m(p0.$$.fragment,vvt),vvt.forEach(t),bvt.forEach(t),Mur=i(Sqe),Obe=n(Sqe,"SPAN",{});var Fvt=s(Obe);Eur=r(Fvt,"TFAutoModelForSequenceClassification"),Fvt.forEach(t),Sqe.forEach(t),T$e=i(c),wr=n(c,"DIV",{class:!0});var si=s(wr);m(_0.$$.fragment,si),Cur=i(si),Dc=n(si,"P",{});var EY=s(Dc);wur=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),Gz=n(EY,"A",{href:!0});var Tvt=s(Gz);Aur=r(Tvt,"from_pretrained()"),Tvt.forEach(t),yur=r(EY," class method or the "),Oz=n(EY,"A",{href:!0});var Mvt=s(Oz);Lur=r(Mvt,"from_config()"),Mvt.forEach(t),xur=r(EY,` class
method.`),EY.forEach(t),kur=i(si),u0=n(si,"P",{});var Rqe=s(u0);Sur=r(Rqe,"This class cannot be instantiated directly using "),Vbe=n(Rqe,"CODE",{});var Evt=s(Vbe);Rur=r(Evt,"__init__()"),Evt.forEach(t),Bur=r(Rqe," (throws an error)."),Rqe.forEach(t),Pur=i(si),vt=n(si,"DIV",{class:!0});var li=s(vt);m(b0.$$.fragment,li),$ur=i(li),Xbe=n(li,"P",{});var Cvt=s(Xbe);Iur=r(Cvt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Cvt.forEach(t),qur=i(li),Gc=n(li,"P",{});var CY=s(Gc);Nur=r(CY,`Note:
Loading a model from its configuration file does `),zbe=n(CY,"STRONG",{});var wvt=s(zbe);jur=r(wvt,"not"),wvt.forEach(t),Dur=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Vz=n(CY,"A",{href:!0});var Avt=s(Vz);Gur=r(Avt,"from_pretrained()"),Avt.forEach(t),Our=r(CY," to load the model weights."),CY.forEach(t),Vur=i(li),Qbe=n(li,"P",{});var yvt=s(Qbe);Xur=r(yvt,"Examples:"),yvt.forEach(t),zur=i(li),m(v0.$$.fragment,li),li.forEach(t),Qur=i(si),To=n(si,"DIV",{class:!0});var Ta=s(To);m(F0.$$.fragment,Ta),Wur=i(Ta),Wbe=n(Ta,"P",{});var Lvt=s(Wbe);Hur=r(Lvt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lvt.forEach(t),Uur=i(Ta),En=n(Ta,"P",{});var yE=s(En);Jur=r(yE,"The model class to instantiate is selected based on the "),Hbe=n(yE,"CODE",{});var xvt=s(Hbe);Yur=r(xvt,"model_type"),xvt.forEach(t),Kur=r(yE,` property of the config object (either
passed as an argument or loaded from `),Ube=n(yE,"CODE",{});var kvt=s(Ube);Zur=r(kvt,"pretrained_model_name_or_path"),kvt.forEach(t),e1r=r(yE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(yE,"CODE",{});var Svt=s(Jbe);o1r=r(Svt,"pretrained_model_name_or_path"),Svt.forEach(t),r1r=r(yE,":"),yE.forEach(t),t1r=i(Ta),V=n(Ta,"UL",{});var Q=s(V);t8=n(Q,"LI",{});var Rke=s(t8);Ybe=n(Rke,"STRONG",{});var Rvt=s(Ybe);a1r=r(Rvt,"albert"),Rvt.forEach(t),n1r=r(Rke," \u2014 "),Xz=n(Rke,"A",{href:!0});var Bvt=s(Xz);s1r=r(Bvt,"TFAlbertForSequenceClassification"),Bvt.forEach(t),l1r=r(Rke," (ALBERT model)"),Rke.forEach(t),i1r=i(Q),a8=n(Q,"LI",{});var Bke=s(a8);Kbe=n(Bke,"STRONG",{});var Pvt=s(Kbe);d1r=r(Pvt,"bert"),Pvt.forEach(t),c1r=r(Bke," \u2014 "),zz=n(Bke,"A",{href:!0});var $vt=s(zz);f1r=r($vt,"TFBertForSequenceClassification"),$vt.forEach(t),m1r=r(Bke," (BERT model)"),Bke.forEach(t),g1r=i(Q),n8=n(Q,"LI",{});var Pke=s(n8);Zbe=n(Pke,"STRONG",{});var Ivt=s(Zbe);h1r=r(Ivt,"camembert"),Ivt.forEach(t),p1r=r(Pke," \u2014 "),Qz=n(Pke,"A",{href:!0});var qvt=s(Qz);_1r=r(qvt,"TFCamembertForSequenceClassification"),qvt.forEach(t),u1r=r(Pke," (CamemBERT model)"),Pke.forEach(t),b1r=i(Q),s8=n(Q,"LI",{});var $ke=s(s8);e2e=n($ke,"STRONG",{});var Nvt=s(e2e);v1r=r(Nvt,"convbert"),Nvt.forEach(t),F1r=r($ke," \u2014 "),Wz=n($ke,"A",{href:!0});var jvt=s(Wz);T1r=r(jvt,"TFConvBertForSequenceClassification"),jvt.forEach(t),M1r=r($ke," (ConvBERT model)"),$ke.forEach(t),E1r=i(Q),l8=n(Q,"LI",{});var Ike=s(l8);o2e=n(Ike,"STRONG",{});var Dvt=s(o2e);C1r=r(Dvt,"ctrl"),Dvt.forEach(t),w1r=r(Ike," \u2014 "),Hz=n(Ike,"A",{href:!0});var Gvt=s(Hz);A1r=r(Gvt,"TFCTRLForSequenceClassification"),Gvt.forEach(t),y1r=r(Ike," (CTRL model)"),Ike.forEach(t),L1r=i(Q),i8=n(Q,"LI",{});var qke=s(i8);r2e=n(qke,"STRONG",{});var Ovt=s(r2e);x1r=r(Ovt,"deberta"),Ovt.forEach(t),k1r=r(qke," \u2014 "),Uz=n(qke,"A",{href:!0});var Vvt=s(Uz);S1r=r(Vvt,"TFDebertaForSequenceClassification"),Vvt.forEach(t),R1r=r(qke," (DeBERTa model)"),qke.forEach(t),B1r=i(Q),d8=n(Q,"LI",{});var Nke=s(d8);t2e=n(Nke,"STRONG",{});var Xvt=s(t2e);P1r=r(Xvt,"deberta-v2"),Xvt.forEach(t),$1r=r(Nke," \u2014 "),Jz=n(Nke,"A",{href:!0});var zvt=s(Jz);I1r=r(zvt,"TFDebertaV2ForSequenceClassification"),zvt.forEach(t),q1r=r(Nke," (DeBERTa-v2 model)"),Nke.forEach(t),N1r=i(Q),c8=n(Q,"LI",{});var jke=s(c8);a2e=n(jke,"STRONG",{});var Qvt=s(a2e);j1r=r(Qvt,"distilbert"),Qvt.forEach(t),D1r=r(jke," \u2014 "),Yz=n(jke,"A",{href:!0});var Wvt=s(Yz);G1r=r(Wvt,"TFDistilBertForSequenceClassification"),Wvt.forEach(t),O1r=r(jke," (DistilBERT model)"),jke.forEach(t),V1r=i(Q),f8=n(Q,"LI",{});var Dke=s(f8);n2e=n(Dke,"STRONG",{});var Hvt=s(n2e);X1r=r(Hvt,"electra"),Hvt.forEach(t),z1r=r(Dke," \u2014 "),Kz=n(Dke,"A",{href:!0});var Uvt=s(Kz);Q1r=r(Uvt,"TFElectraForSequenceClassification"),Uvt.forEach(t),W1r=r(Dke," (ELECTRA model)"),Dke.forEach(t),H1r=i(Q),m8=n(Q,"LI",{});var Gke=s(m8);s2e=n(Gke,"STRONG",{});var Jvt=s(s2e);U1r=r(Jvt,"flaubert"),Jvt.forEach(t),J1r=r(Gke," \u2014 "),Zz=n(Gke,"A",{href:!0});var Yvt=s(Zz);Y1r=r(Yvt,"TFFlaubertForSequenceClassification"),Yvt.forEach(t),K1r=r(Gke," (FlauBERT model)"),Gke.forEach(t),Z1r=i(Q),g8=n(Q,"LI",{});var Oke=s(g8);l2e=n(Oke,"STRONG",{});var Kvt=s(l2e);ebr=r(Kvt,"funnel"),Kvt.forEach(t),obr=r(Oke," \u2014 "),eQ=n(Oke,"A",{href:!0});var Zvt=s(eQ);rbr=r(Zvt,"TFFunnelForSequenceClassification"),Zvt.forEach(t),tbr=r(Oke," (Funnel Transformer model)"),Oke.forEach(t),abr=i(Q),h8=n(Q,"LI",{});var Vke=s(h8);i2e=n(Vke,"STRONG",{});var eFt=s(i2e);nbr=r(eFt,"gpt2"),eFt.forEach(t),sbr=r(Vke," \u2014 "),oQ=n(Vke,"A",{href:!0});var oFt=s(oQ);lbr=r(oFt,"TFGPT2ForSequenceClassification"),oFt.forEach(t),ibr=r(Vke," (OpenAI GPT-2 model)"),Vke.forEach(t),dbr=i(Q),p8=n(Q,"LI",{});var Xke=s(p8);d2e=n(Xke,"STRONG",{});var rFt=s(d2e);cbr=r(rFt,"gptj"),rFt.forEach(t),fbr=r(Xke," \u2014 "),rQ=n(Xke,"A",{href:!0});var tFt=s(rQ);mbr=r(tFt,"TFGPTJForSequenceClassification"),tFt.forEach(t),gbr=r(Xke," (GPT-J model)"),Xke.forEach(t),hbr=i(Q),_8=n(Q,"LI",{});var zke=s(_8);c2e=n(zke,"STRONG",{});var aFt=s(c2e);pbr=r(aFt,"layoutlm"),aFt.forEach(t),_br=r(zke," \u2014 "),tQ=n(zke,"A",{href:!0});var nFt=s(tQ);ubr=r(nFt,"TFLayoutLMForSequenceClassification"),nFt.forEach(t),bbr=r(zke," (LayoutLM model)"),zke.forEach(t),vbr=i(Q),u8=n(Q,"LI",{});var Qke=s(u8);f2e=n(Qke,"STRONG",{});var sFt=s(f2e);Fbr=r(sFt,"longformer"),sFt.forEach(t),Tbr=r(Qke," \u2014 "),aQ=n(Qke,"A",{href:!0});var lFt=s(aQ);Mbr=r(lFt,"TFLongformerForSequenceClassification"),lFt.forEach(t),Ebr=r(Qke," (Longformer model)"),Qke.forEach(t),Cbr=i(Q),b8=n(Q,"LI",{});var Wke=s(b8);m2e=n(Wke,"STRONG",{});var iFt=s(m2e);wbr=r(iFt,"mobilebert"),iFt.forEach(t),Abr=r(Wke," \u2014 "),nQ=n(Wke,"A",{href:!0});var dFt=s(nQ);ybr=r(dFt,"TFMobileBertForSequenceClassification"),dFt.forEach(t),Lbr=r(Wke," (MobileBERT model)"),Wke.forEach(t),xbr=i(Q),v8=n(Q,"LI",{});var Hke=s(v8);g2e=n(Hke,"STRONG",{});var cFt=s(g2e);kbr=r(cFt,"mpnet"),cFt.forEach(t),Sbr=r(Hke," \u2014 "),sQ=n(Hke,"A",{href:!0});var fFt=s(sQ);Rbr=r(fFt,"TFMPNetForSequenceClassification"),fFt.forEach(t),Bbr=r(Hke," (MPNet model)"),Hke.forEach(t),Pbr=i(Q),F8=n(Q,"LI",{});var Uke=s(F8);h2e=n(Uke,"STRONG",{});var mFt=s(h2e);$br=r(mFt,"openai-gpt"),mFt.forEach(t),Ibr=r(Uke," \u2014 "),lQ=n(Uke,"A",{href:!0});var gFt=s(lQ);qbr=r(gFt,"TFOpenAIGPTForSequenceClassification"),gFt.forEach(t),Nbr=r(Uke," (OpenAI GPT model)"),Uke.forEach(t),jbr=i(Q),T8=n(Q,"LI",{});var Jke=s(T8);p2e=n(Jke,"STRONG",{});var hFt=s(p2e);Dbr=r(hFt,"rembert"),hFt.forEach(t),Gbr=r(Jke," \u2014 "),iQ=n(Jke,"A",{href:!0});var pFt=s(iQ);Obr=r(pFt,"TFRemBertForSequenceClassification"),pFt.forEach(t),Vbr=r(Jke," (RemBERT model)"),Jke.forEach(t),Xbr=i(Q),M8=n(Q,"LI",{});var Yke=s(M8);_2e=n(Yke,"STRONG",{});var _Ft=s(_2e);zbr=r(_Ft,"roberta"),_Ft.forEach(t),Qbr=r(Yke," \u2014 "),dQ=n(Yke,"A",{href:!0});var uFt=s(dQ);Wbr=r(uFt,"TFRobertaForSequenceClassification"),uFt.forEach(t),Hbr=r(Yke," (RoBERTa model)"),Yke.forEach(t),Ubr=i(Q),E8=n(Q,"LI",{});var Kke=s(E8);u2e=n(Kke,"STRONG",{});var bFt=s(u2e);Jbr=r(bFt,"roformer"),bFt.forEach(t),Ybr=r(Kke," \u2014 "),cQ=n(Kke,"A",{href:!0});var vFt=s(cQ);Kbr=r(vFt,"TFRoFormerForSequenceClassification"),vFt.forEach(t),Zbr=r(Kke," (RoFormer model)"),Kke.forEach(t),e2r=i(Q),C8=n(Q,"LI",{});var Zke=s(C8);b2e=n(Zke,"STRONG",{});var FFt=s(b2e);o2r=r(FFt,"tapas"),FFt.forEach(t),r2r=r(Zke," \u2014 "),fQ=n(Zke,"A",{href:!0});var TFt=s(fQ);t2r=r(TFt,"TFTapasForSequenceClassification"),TFt.forEach(t),a2r=r(Zke," (TAPAS model)"),Zke.forEach(t),n2r=i(Q),w8=n(Q,"LI",{});var eSe=s(w8);v2e=n(eSe,"STRONG",{});var MFt=s(v2e);s2r=r(MFt,"transfo-xl"),MFt.forEach(t),l2r=r(eSe," \u2014 "),mQ=n(eSe,"A",{href:!0});var EFt=s(mQ);i2r=r(EFt,"TFTransfoXLForSequenceClassification"),EFt.forEach(t),d2r=r(eSe," (Transformer-XL model)"),eSe.forEach(t),c2r=i(Q),A8=n(Q,"LI",{});var oSe=s(A8);F2e=n(oSe,"STRONG",{});var CFt=s(F2e);f2r=r(CFt,"xlm"),CFt.forEach(t),m2r=r(oSe," \u2014 "),gQ=n(oSe,"A",{href:!0});var wFt=s(gQ);g2r=r(wFt,"TFXLMForSequenceClassification"),wFt.forEach(t),h2r=r(oSe," (XLM model)"),oSe.forEach(t),p2r=i(Q),y8=n(Q,"LI",{});var rSe=s(y8);T2e=n(rSe,"STRONG",{});var AFt=s(T2e);_2r=r(AFt,"xlm-roberta"),AFt.forEach(t),u2r=r(rSe," \u2014 "),hQ=n(rSe,"A",{href:!0});var yFt=s(hQ);b2r=r(yFt,"TFXLMRobertaForSequenceClassification"),yFt.forEach(t),v2r=r(rSe," (XLM-RoBERTa model)"),rSe.forEach(t),F2r=i(Q),L8=n(Q,"LI",{});var tSe=s(L8);M2e=n(tSe,"STRONG",{});var LFt=s(M2e);T2r=r(LFt,"xlnet"),LFt.forEach(t),M2r=r(tSe," \u2014 "),pQ=n(tSe,"A",{href:!0});var xFt=s(pQ);E2r=r(xFt,"TFXLNetForSequenceClassification"),xFt.forEach(t),C2r=r(tSe," (XLNet model)"),tSe.forEach(t),Q.forEach(t),w2r=i(Ta),E2e=n(Ta,"P",{});var kFt=s(E2e);A2r=r(kFt,"Examples:"),kFt.forEach(t),y2r=i(Ta),m(T0.$$.fragment,Ta),Ta.forEach(t),si.forEach(t),M$e=i(c),Oc=n(c,"H2",{class:!0});var Bqe=s(Oc);x8=n(Bqe,"A",{id:!0,class:!0,href:!0});var SFt=s(x8);C2e=n(SFt,"SPAN",{});var RFt=s(C2e);m(M0.$$.fragment,RFt),RFt.forEach(t),SFt.forEach(t),L2r=i(Bqe),w2e=n(Bqe,"SPAN",{});var BFt=s(w2e);x2r=r(BFt,"TFAutoModelForMultipleChoice"),BFt.forEach(t),Bqe.forEach(t),E$e=i(c),Ar=n(c,"DIV",{class:!0});var ii=s(Ar);m(E0.$$.fragment,ii),k2r=i(ii),Vc=n(ii,"P",{});var wY=s(Vc);S2r=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),_Q=n(wY,"A",{href:!0});var PFt=s(_Q);R2r=r(PFt,"from_pretrained()"),PFt.forEach(t),B2r=r(wY," class method or the "),uQ=n(wY,"A",{href:!0});var $Ft=s(uQ);P2r=r($Ft,"from_config()"),$Ft.forEach(t),$2r=r(wY,` class
method.`),wY.forEach(t),I2r=i(ii),C0=n(ii,"P",{});var Pqe=s(C0);q2r=r(Pqe,"This class cannot be instantiated directly using "),A2e=n(Pqe,"CODE",{});var IFt=s(A2e);N2r=r(IFt,"__init__()"),IFt.forEach(t),j2r=r(Pqe," (throws an error)."),Pqe.forEach(t),D2r=i(ii),Ft=n(ii,"DIV",{class:!0});var di=s(Ft);m(w0.$$.fragment,di),G2r=i(di),y2e=n(di,"P",{});var qFt=s(y2e);O2r=r(qFt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),qFt.forEach(t),V2r=i(di),Xc=n(di,"P",{});var AY=s(Xc);X2r=r(AY,`Note:
Loading a model from its configuration file does `),L2e=n(AY,"STRONG",{});var NFt=s(L2e);z2r=r(NFt,"not"),NFt.forEach(t),Q2r=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bQ=n(AY,"A",{href:!0});var jFt=s(bQ);W2r=r(jFt,"from_pretrained()"),jFt.forEach(t),H2r=r(AY," to load the model weights."),AY.forEach(t),U2r=i(di),x2e=n(di,"P",{});var DFt=s(x2e);J2r=r(DFt,"Examples:"),DFt.forEach(t),Y2r=i(di),m(A0.$$.fragment,di),di.forEach(t),K2r=i(ii),Mo=n(ii,"DIV",{class:!0});var Ma=s(Mo);m(y0.$$.fragment,Ma),Z2r=i(Ma),k2e=n(Ma,"P",{});var GFt=s(k2e);e5r=r(GFt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),GFt.forEach(t),o5r=i(Ma),Cn=n(Ma,"P",{});var LE=s(Cn);r5r=r(LE,"The model class to instantiate is selected based on the "),S2e=n(LE,"CODE",{});var OFt=s(S2e);t5r=r(OFt,"model_type"),OFt.forEach(t),a5r=r(LE,` property of the config object (either
passed as an argument or loaded from `),R2e=n(LE,"CODE",{});var VFt=s(R2e);n5r=r(VFt,"pretrained_model_name_or_path"),VFt.forEach(t),s5r=r(LE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),B2e=n(LE,"CODE",{});var XFt=s(B2e);l5r=r(XFt,"pretrained_model_name_or_path"),XFt.forEach(t),i5r=r(LE,":"),LE.forEach(t),d5r=i(Ma),se=n(Ma,"UL",{});var ie=s(se);k8=n(ie,"LI",{});var aSe=s(k8);P2e=n(aSe,"STRONG",{});var zFt=s(P2e);c5r=r(zFt,"albert"),zFt.forEach(t),f5r=r(aSe," \u2014 "),vQ=n(aSe,"A",{href:!0});var QFt=s(vQ);m5r=r(QFt,"TFAlbertForMultipleChoice"),QFt.forEach(t),g5r=r(aSe," (ALBERT model)"),aSe.forEach(t),h5r=i(ie),S8=n(ie,"LI",{});var nSe=s(S8);$2e=n(nSe,"STRONG",{});var WFt=s($2e);p5r=r(WFt,"bert"),WFt.forEach(t),_5r=r(nSe," \u2014 "),FQ=n(nSe,"A",{href:!0});var HFt=s(FQ);u5r=r(HFt,"TFBertForMultipleChoice"),HFt.forEach(t),b5r=r(nSe," (BERT model)"),nSe.forEach(t),v5r=i(ie),R8=n(ie,"LI",{});var sSe=s(R8);I2e=n(sSe,"STRONG",{});var UFt=s(I2e);F5r=r(UFt,"camembert"),UFt.forEach(t),T5r=r(sSe," \u2014 "),TQ=n(sSe,"A",{href:!0});var JFt=s(TQ);M5r=r(JFt,"TFCamembertForMultipleChoice"),JFt.forEach(t),E5r=r(sSe," (CamemBERT model)"),sSe.forEach(t),C5r=i(ie),B8=n(ie,"LI",{});var lSe=s(B8);q2e=n(lSe,"STRONG",{});var YFt=s(q2e);w5r=r(YFt,"convbert"),YFt.forEach(t),A5r=r(lSe," \u2014 "),MQ=n(lSe,"A",{href:!0});var KFt=s(MQ);y5r=r(KFt,"TFConvBertForMultipleChoice"),KFt.forEach(t),L5r=r(lSe," (ConvBERT model)"),lSe.forEach(t),x5r=i(ie),P8=n(ie,"LI",{});var iSe=s(P8);N2e=n(iSe,"STRONG",{});var ZFt=s(N2e);k5r=r(ZFt,"distilbert"),ZFt.forEach(t),S5r=r(iSe," \u2014 "),EQ=n(iSe,"A",{href:!0});var eTt=s(EQ);R5r=r(eTt,"TFDistilBertForMultipleChoice"),eTt.forEach(t),B5r=r(iSe," (DistilBERT model)"),iSe.forEach(t),P5r=i(ie),$8=n(ie,"LI",{});var dSe=s($8);j2e=n(dSe,"STRONG",{});var oTt=s(j2e);$5r=r(oTt,"electra"),oTt.forEach(t),I5r=r(dSe," \u2014 "),CQ=n(dSe,"A",{href:!0});var rTt=s(CQ);q5r=r(rTt,"TFElectraForMultipleChoice"),rTt.forEach(t),N5r=r(dSe," (ELECTRA model)"),dSe.forEach(t),j5r=i(ie),I8=n(ie,"LI",{});var cSe=s(I8);D2e=n(cSe,"STRONG",{});var tTt=s(D2e);D5r=r(tTt,"flaubert"),tTt.forEach(t),G5r=r(cSe," \u2014 "),wQ=n(cSe,"A",{href:!0});var aTt=s(wQ);O5r=r(aTt,"TFFlaubertForMultipleChoice"),aTt.forEach(t),V5r=r(cSe," (FlauBERT model)"),cSe.forEach(t),X5r=i(ie),q8=n(ie,"LI",{});var fSe=s(q8);G2e=n(fSe,"STRONG",{});var nTt=s(G2e);z5r=r(nTt,"funnel"),nTt.forEach(t),Q5r=r(fSe," \u2014 "),AQ=n(fSe,"A",{href:!0});var sTt=s(AQ);W5r=r(sTt,"TFFunnelForMultipleChoice"),sTt.forEach(t),H5r=r(fSe," (Funnel Transformer model)"),fSe.forEach(t),U5r=i(ie),N8=n(ie,"LI",{});var mSe=s(N8);O2e=n(mSe,"STRONG",{});var lTt=s(O2e);J5r=r(lTt,"longformer"),lTt.forEach(t),Y5r=r(mSe," \u2014 "),yQ=n(mSe,"A",{href:!0});var iTt=s(yQ);K5r=r(iTt,"TFLongformerForMultipleChoice"),iTt.forEach(t),Z5r=r(mSe," (Longformer model)"),mSe.forEach(t),e6r=i(ie),j8=n(ie,"LI",{});var gSe=s(j8);V2e=n(gSe,"STRONG",{});var dTt=s(V2e);o6r=r(dTt,"mobilebert"),dTt.forEach(t),r6r=r(gSe," \u2014 "),LQ=n(gSe,"A",{href:!0});var cTt=s(LQ);t6r=r(cTt,"TFMobileBertForMultipleChoice"),cTt.forEach(t),a6r=r(gSe," (MobileBERT model)"),gSe.forEach(t),n6r=i(ie),D8=n(ie,"LI",{});var hSe=s(D8);X2e=n(hSe,"STRONG",{});var fTt=s(X2e);s6r=r(fTt,"mpnet"),fTt.forEach(t),l6r=r(hSe," \u2014 "),xQ=n(hSe,"A",{href:!0});var mTt=s(xQ);i6r=r(mTt,"TFMPNetForMultipleChoice"),mTt.forEach(t),d6r=r(hSe," (MPNet model)"),hSe.forEach(t),c6r=i(ie),G8=n(ie,"LI",{});var pSe=s(G8);z2e=n(pSe,"STRONG",{});var gTt=s(z2e);f6r=r(gTt,"rembert"),gTt.forEach(t),m6r=r(pSe," \u2014 "),kQ=n(pSe,"A",{href:!0});var hTt=s(kQ);g6r=r(hTt,"TFRemBertForMultipleChoice"),hTt.forEach(t),h6r=r(pSe," (RemBERT model)"),pSe.forEach(t),p6r=i(ie),O8=n(ie,"LI",{});var _Se=s(O8);Q2e=n(_Se,"STRONG",{});var pTt=s(Q2e);_6r=r(pTt,"roberta"),pTt.forEach(t),u6r=r(_Se," \u2014 "),SQ=n(_Se,"A",{href:!0});var _Tt=s(SQ);b6r=r(_Tt,"TFRobertaForMultipleChoice"),_Tt.forEach(t),v6r=r(_Se," (RoBERTa model)"),_Se.forEach(t),F6r=i(ie),V8=n(ie,"LI",{});var uSe=s(V8);W2e=n(uSe,"STRONG",{});var uTt=s(W2e);T6r=r(uTt,"roformer"),uTt.forEach(t),M6r=r(uSe," \u2014 "),RQ=n(uSe,"A",{href:!0});var bTt=s(RQ);E6r=r(bTt,"TFRoFormerForMultipleChoice"),bTt.forEach(t),C6r=r(uSe," (RoFormer model)"),uSe.forEach(t),w6r=i(ie),X8=n(ie,"LI",{});var bSe=s(X8);H2e=n(bSe,"STRONG",{});var vTt=s(H2e);A6r=r(vTt,"xlm"),vTt.forEach(t),y6r=r(bSe," \u2014 "),BQ=n(bSe,"A",{href:!0});var FTt=s(BQ);L6r=r(FTt,"TFXLMForMultipleChoice"),FTt.forEach(t),x6r=r(bSe," (XLM model)"),bSe.forEach(t),k6r=i(ie),z8=n(ie,"LI",{});var vSe=s(z8);U2e=n(vSe,"STRONG",{});var TTt=s(U2e);S6r=r(TTt,"xlm-roberta"),TTt.forEach(t),R6r=r(vSe," \u2014 "),PQ=n(vSe,"A",{href:!0});var MTt=s(PQ);B6r=r(MTt,"TFXLMRobertaForMultipleChoice"),MTt.forEach(t),P6r=r(vSe," (XLM-RoBERTa model)"),vSe.forEach(t),$6r=i(ie),Q8=n(ie,"LI",{});var FSe=s(Q8);J2e=n(FSe,"STRONG",{});var ETt=s(J2e);I6r=r(ETt,"xlnet"),ETt.forEach(t),q6r=r(FSe," \u2014 "),$Q=n(FSe,"A",{href:!0});var CTt=s($Q);N6r=r(CTt,"TFXLNetForMultipleChoice"),CTt.forEach(t),j6r=r(FSe," (XLNet model)"),FSe.forEach(t),ie.forEach(t),D6r=i(Ma),Y2e=n(Ma,"P",{});var wTt=s(Y2e);G6r=r(wTt,"Examples:"),wTt.forEach(t),O6r=i(Ma),m(L0.$$.fragment,Ma),Ma.forEach(t),ii.forEach(t),C$e=i(c),zc=n(c,"H2",{class:!0});var $qe=s(zc);W8=n($qe,"A",{id:!0,class:!0,href:!0});var ATt=s(W8);K2e=n(ATt,"SPAN",{});var yTt=s(K2e);m(x0.$$.fragment,yTt),yTt.forEach(t),ATt.forEach(t),V6r=i($qe),Z2e=n($qe,"SPAN",{});var LTt=s(Z2e);X6r=r(LTt,"TFAutoModelForTableQuestionAnswering"),LTt.forEach(t),$qe.forEach(t),w$e=i(c),yr=n(c,"DIV",{class:!0});var ci=s(yr);m(k0.$$.fragment,ci),z6r=i(ci),Qc=n(ci,"P",{});var yY=s(Qc);Q6r=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),IQ=n(yY,"A",{href:!0});var xTt=s(IQ);W6r=r(xTt,"from_pretrained()"),xTt.forEach(t),H6r=r(yY," class method or the "),qQ=n(yY,"A",{href:!0});var kTt=s(qQ);U6r=r(kTt,"from_config()"),kTt.forEach(t),J6r=r(yY,` class
method.`),yY.forEach(t),Y6r=i(ci),S0=n(ci,"P",{});var Iqe=s(S0);K6r=r(Iqe,"This class cannot be instantiated directly using "),e5e=n(Iqe,"CODE",{});var STt=s(e5e);Z6r=r(STt,"__init__()"),STt.forEach(t),evr=r(Iqe," (throws an error)."),Iqe.forEach(t),ovr=i(ci),Tt=n(ci,"DIV",{class:!0});var fi=s(Tt);m(R0.$$.fragment,fi),rvr=i(fi),o5e=n(fi,"P",{});var RTt=s(o5e);tvr=r(RTt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),RTt.forEach(t),avr=i(fi),Wc=n(fi,"P",{});var LY=s(Wc);nvr=r(LY,`Note:
Loading a model from its configuration file does `),r5e=n(LY,"STRONG",{});var BTt=s(r5e);svr=r(BTt,"not"),BTt.forEach(t),lvr=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),NQ=n(LY,"A",{href:!0});var PTt=s(NQ);ivr=r(PTt,"from_pretrained()"),PTt.forEach(t),dvr=r(LY," to load the model weights."),LY.forEach(t),cvr=i(fi),t5e=n(fi,"P",{});var $Tt=s(t5e);fvr=r($Tt,"Examples:"),$Tt.forEach(t),mvr=i(fi),m(B0.$$.fragment,fi),fi.forEach(t),gvr=i(ci),Eo=n(ci,"DIV",{class:!0});var Ea=s(Eo);m(P0.$$.fragment,Ea),hvr=i(Ea),a5e=n(Ea,"P",{});var ITt=s(a5e);pvr=r(ITt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ITt.forEach(t),_vr=i(Ea),wn=n(Ea,"P",{});var xE=s(wn);uvr=r(xE,"The model class to instantiate is selected based on the "),n5e=n(xE,"CODE",{});var qTt=s(n5e);bvr=r(qTt,"model_type"),qTt.forEach(t),vvr=r(xE,` property of the config object (either
passed as an argument or loaded from `),s5e=n(xE,"CODE",{});var NTt=s(s5e);Fvr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),Tvr=r(xE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),l5e=n(xE,"CODE",{});var jTt=s(l5e);Mvr=r(jTt,"pretrained_model_name_or_path"),jTt.forEach(t),Evr=r(xE,":"),xE.forEach(t),Cvr=i(Ea),i5e=n(Ea,"UL",{});var DTt=s(i5e);H8=n(DTt,"LI",{});var TSe=s(H8);d5e=n(TSe,"STRONG",{});var GTt=s(d5e);wvr=r(GTt,"tapas"),GTt.forEach(t),Avr=r(TSe," \u2014 "),jQ=n(TSe,"A",{href:!0});var OTt=s(jQ);yvr=r(OTt,"TFTapasForQuestionAnswering"),OTt.forEach(t),Lvr=r(TSe," (TAPAS model)"),TSe.forEach(t),DTt.forEach(t),xvr=i(Ea),c5e=n(Ea,"P",{});var VTt=s(c5e);kvr=r(VTt,"Examples:"),VTt.forEach(t),Svr=i(Ea),m($0.$$.fragment,Ea),Ea.forEach(t),ci.forEach(t),A$e=i(c),Hc=n(c,"H2",{class:!0});var qqe=s(Hc);U8=n(qqe,"A",{id:!0,class:!0,href:!0});var XTt=s(U8);f5e=n(XTt,"SPAN",{});var zTt=s(f5e);m(I0.$$.fragment,zTt),zTt.forEach(t),XTt.forEach(t),Rvr=i(qqe),m5e=n(qqe,"SPAN",{});var QTt=s(m5e);Bvr=r(QTt,"TFAutoModelForTokenClassification"),QTt.forEach(t),qqe.forEach(t),y$e=i(c),Lr=n(c,"DIV",{class:!0});var mi=s(Lr);m(q0.$$.fragment,mi),Pvr=i(mi),Uc=n(mi,"P",{});var xY=s(Uc);$vr=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),DQ=n(xY,"A",{href:!0});var WTt=s(DQ);Ivr=r(WTt,"from_pretrained()"),WTt.forEach(t),qvr=r(xY," class method or the "),GQ=n(xY,"A",{href:!0});var HTt=s(GQ);Nvr=r(HTt,"from_config()"),HTt.forEach(t),jvr=r(xY,` class
method.`),xY.forEach(t),Dvr=i(mi),N0=n(mi,"P",{});var Nqe=s(N0);Gvr=r(Nqe,"This class cannot be instantiated directly using "),g5e=n(Nqe,"CODE",{});var UTt=s(g5e);Ovr=r(UTt,"__init__()"),UTt.forEach(t),Vvr=r(Nqe," (throws an error)."),Nqe.forEach(t),Xvr=i(mi),Mt=n(mi,"DIV",{class:!0});var gi=s(Mt);m(j0.$$.fragment,gi),zvr=i(gi),h5e=n(gi,"P",{});var JTt=s(h5e);Qvr=r(JTt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),JTt.forEach(t),Wvr=i(gi),Jc=n(gi,"P",{});var kY=s(Jc);Hvr=r(kY,`Note:
Loading a model from its configuration file does `),p5e=n(kY,"STRONG",{});var YTt=s(p5e);Uvr=r(YTt,"not"),YTt.forEach(t),Jvr=r(kY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OQ=n(kY,"A",{href:!0});var KTt=s(OQ);Yvr=r(KTt,"from_pretrained()"),KTt.forEach(t),Kvr=r(kY," to load the model weights."),kY.forEach(t),Zvr=i(gi),_5e=n(gi,"P",{});var ZTt=s(_5e);eFr=r(ZTt,"Examples:"),ZTt.forEach(t),oFr=i(gi),m(D0.$$.fragment,gi),gi.forEach(t),rFr=i(mi),Co=n(mi,"DIV",{class:!0});var Ca=s(Co);m(G0.$$.fragment,Ca),tFr=i(Ca),u5e=n(Ca,"P",{});var e8t=s(u5e);aFr=r(e8t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),e8t.forEach(t),nFr=i(Ca),An=n(Ca,"P",{});var kE=s(An);sFr=r(kE,"The model class to instantiate is selected based on the "),b5e=n(kE,"CODE",{});var o8t=s(b5e);lFr=r(o8t,"model_type"),o8t.forEach(t),iFr=r(kE,` property of the config object (either
passed as an argument or loaded from `),v5e=n(kE,"CODE",{});var r8t=s(v5e);dFr=r(r8t,"pretrained_model_name_or_path"),r8t.forEach(t),cFr=r(kE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F5e=n(kE,"CODE",{});var t8t=s(F5e);fFr=r(t8t,"pretrained_model_name_or_path"),t8t.forEach(t),mFr=r(kE,":"),kE.forEach(t),gFr=i(Ca),Z=n(Ca,"UL",{});var te=s(Z);J8=n(te,"LI",{});var MSe=s(J8);T5e=n(MSe,"STRONG",{});var a8t=s(T5e);hFr=r(a8t,"albert"),a8t.forEach(t),pFr=r(MSe," \u2014 "),VQ=n(MSe,"A",{href:!0});var n8t=s(VQ);_Fr=r(n8t,"TFAlbertForTokenClassification"),n8t.forEach(t),uFr=r(MSe," (ALBERT model)"),MSe.forEach(t),bFr=i(te),Y8=n(te,"LI",{});var ESe=s(Y8);M5e=n(ESe,"STRONG",{});var s8t=s(M5e);vFr=r(s8t,"bert"),s8t.forEach(t),FFr=r(ESe," \u2014 "),XQ=n(ESe,"A",{href:!0});var l8t=s(XQ);TFr=r(l8t,"TFBertForTokenClassification"),l8t.forEach(t),MFr=r(ESe," (BERT model)"),ESe.forEach(t),EFr=i(te),K8=n(te,"LI",{});var CSe=s(K8);E5e=n(CSe,"STRONG",{});var i8t=s(E5e);CFr=r(i8t,"camembert"),i8t.forEach(t),wFr=r(CSe," \u2014 "),zQ=n(CSe,"A",{href:!0});var d8t=s(zQ);AFr=r(d8t,"TFCamembertForTokenClassification"),d8t.forEach(t),yFr=r(CSe," (CamemBERT model)"),CSe.forEach(t),LFr=i(te),Z8=n(te,"LI",{});var wSe=s(Z8);C5e=n(wSe,"STRONG",{});var c8t=s(C5e);xFr=r(c8t,"convbert"),c8t.forEach(t),kFr=r(wSe," \u2014 "),QQ=n(wSe,"A",{href:!0});var f8t=s(QQ);SFr=r(f8t,"TFConvBertForTokenClassification"),f8t.forEach(t),RFr=r(wSe," (ConvBERT model)"),wSe.forEach(t),BFr=i(te),e7=n(te,"LI",{});var ASe=s(e7);w5e=n(ASe,"STRONG",{});var m8t=s(w5e);PFr=r(m8t,"deberta"),m8t.forEach(t),$Fr=r(ASe," \u2014 "),WQ=n(ASe,"A",{href:!0});var g8t=s(WQ);IFr=r(g8t,"TFDebertaForTokenClassification"),g8t.forEach(t),qFr=r(ASe," (DeBERTa model)"),ASe.forEach(t),NFr=i(te),o7=n(te,"LI",{});var ySe=s(o7);A5e=n(ySe,"STRONG",{});var h8t=s(A5e);jFr=r(h8t,"deberta-v2"),h8t.forEach(t),DFr=r(ySe," \u2014 "),HQ=n(ySe,"A",{href:!0});var p8t=s(HQ);GFr=r(p8t,"TFDebertaV2ForTokenClassification"),p8t.forEach(t),OFr=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),VFr=i(te),r7=n(te,"LI",{});var LSe=s(r7);y5e=n(LSe,"STRONG",{});var _8t=s(y5e);XFr=r(_8t,"distilbert"),_8t.forEach(t),zFr=r(LSe," \u2014 "),UQ=n(LSe,"A",{href:!0});var u8t=s(UQ);QFr=r(u8t,"TFDistilBertForTokenClassification"),u8t.forEach(t),WFr=r(LSe," (DistilBERT model)"),LSe.forEach(t),HFr=i(te),t7=n(te,"LI",{});var xSe=s(t7);L5e=n(xSe,"STRONG",{});var b8t=s(L5e);UFr=r(b8t,"electra"),b8t.forEach(t),JFr=r(xSe," \u2014 "),JQ=n(xSe,"A",{href:!0});var v8t=s(JQ);YFr=r(v8t,"TFElectraForTokenClassification"),v8t.forEach(t),KFr=r(xSe," (ELECTRA model)"),xSe.forEach(t),ZFr=i(te),a7=n(te,"LI",{});var kSe=s(a7);x5e=n(kSe,"STRONG",{});var F8t=s(x5e);eTr=r(F8t,"flaubert"),F8t.forEach(t),oTr=r(kSe," \u2014 "),YQ=n(kSe,"A",{href:!0});var T8t=s(YQ);rTr=r(T8t,"TFFlaubertForTokenClassification"),T8t.forEach(t),tTr=r(kSe," (FlauBERT model)"),kSe.forEach(t),aTr=i(te),n7=n(te,"LI",{});var SSe=s(n7);k5e=n(SSe,"STRONG",{});var M8t=s(k5e);nTr=r(M8t,"funnel"),M8t.forEach(t),sTr=r(SSe," \u2014 "),KQ=n(SSe,"A",{href:!0});var E8t=s(KQ);lTr=r(E8t,"TFFunnelForTokenClassification"),E8t.forEach(t),iTr=r(SSe," (Funnel Transformer model)"),SSe.forEach(t),dTr=i(te),s7=n(te,"LI",{});var RSe=s(s7);S5e=n(RSe,"STRONG",{});var C8t=s(S5e);cTr=r(C8t,"layoutlm"),C8t.forEach(t),fTr=r(RSe," \u2014 "),ZQ=n(RSe,"A",{href:!0});var w8t=s(ZQ);mTr=r(w8t,"TFLayoutLMForTokenClassification"),w8t.forEach(t),gTr=r(RSe," (LayoutLM model)"),RSe.forEach(t),hTr=i(te),l7=n(te,"LI",{});var BSe=s(l7);R5e=n(BSe,"STRONG",{});var A8t=s(R5e);pTr=r(A8t,"longformer"),A8t.forEach(t),_Tr=r(BSe," \u2014 "),eW=n(BSe,"A",{href:!0});var y8t=s(eW);uTr=r(y8t,"TFLongformerForTokenClassification"),y8t.forEach(t),bTr=r(BSe," (Longformer model)"),BSe.forEach(t),vTr=i(te),i7=n(te,"LI",{});var PSe=s(i7);B5e=n(PSe,"STRONG",{});var L8t=s(B5e);FTr=r(L8t,"mobilebert"),L8t.forEach(t),TTr=r(PSe," \u2014 "),oW=n(PSe,"A",{href:!0});var x8t=s(oW);MTr=r(x8t,"TFMobileBertForTokenClassification"),x8t.forEach(t),ETr=r(PSe," (MobileBERT model)"),PSe.forEach(t),CTr=i(te),d7=n(te,"LI",{});var $Se=s(d7);P5e=n($Se,"STRONG",{});var k8t=s(P5e);wTr=r(k8t,"mpnet"),k8t.forEach(t),ATr=r($Se," \u2014 "),rW=n($Se,"A",{href:!0});var S8t=s(rW);yTr=r(S8t,"TFMPNetForTokenClassification"),S8t.forEach(t),LTr=r($Se," (MPNet model)"),$Se.forEach(t),xTr=i(te),c7=n(te,"LI",{});var ISe=s(c7);$5e=n(ISe,"STRONG",{});var R8t=s($5e);kTr=r(R8t,"rembert"),R8t.forEach(t),STr=r(ISe," \u2014 "),tW=n(ISe,"A",{href:!0});var B8t=s(tW);RTr=r(B8t,"TFRemBertForTokenClassification"),B8t.forEach(t),BTr=r(ISe," (RemBERT model)"),ISe.forEach(t),PTr=i(te),f7=n(te,"LI",{});var qSe=s(f7);I5e=n(qSe,"STRONG",{});var P8t=s(I5e);$Tr=r(P8t,"roberta"),P8t.forEach(t),ITr=r(qSe," \u2014 "),aW=n(qSe,"A",{href:!0});var $8t=s(aW);qTr=r($8t,"TFRobertaForTokenClassification"),$8t.forEach(t),NTr=r(qSe," (RoBERTa model)"),qSe.forEach(t),jTr=i(te),m7=n(te,"LI",{});var NSe=s(m7);q5e=n(NSe,"STRONG",{});var I8t=s(q5e);DTr=r(I8t,"roformer"),I8t.forEach(t),GTr=r(NSe," \u2014 "),nW=n(NSe,"A",{href:!0});var q8t=s(nW);OTr=r(q8t,"TFRoFormerForTokenClassification"),q8t.forEach(t),VTr=r(NSe," (RoFormer model)"),NSe.forEach(t),XTr=i(te),g7=n(te,"LI",{});var jSe=s(g7);N5e=n(jSe,"STRONG",{});var N8t=s(N5e);zTr=r(N8t,"xlm"),N8t.forEach(t),QTr=r(jSe," \u2014 "),sW=n(jSe,"A",{href:!0});var j8t=s(sW);WTr=r(j8t,"TFXLMForTokenClassification"),j8t.forEach(t),HTr=r(jSe," (XLM model)"),jSe.forEach(t),UTr=i(te),h7=n(te,"LI",{});var DSe=s(h7);j5e=n(DSe,"STRONG",{});var D8t=s(j5e);JTr=r(D8t,"xlm-roberta"),D8t.forEach(t),YTr=r(DSe," \u2014 "),lW=n(DSe,"A",{href:!0});var G8t=s(lW);KTr=r(G8t,"TFXLMRobertaForTokenClassification"),G8t.forEach(t),ZTr=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),e8r=i(te),p7=n(te,"LI",{});var GSe=s(p7);D5e=n(GSe,"STRONG",{});var O8t=s(D5e);o8r=r(O8t,"xlnet"),O8t.forEach(t),r8r=r(GSe," \u2014 "),iW=n(GSe,"A",{href:!0});var V8t=s(iW);t8r=r(V8t,"TFXLNetForTokenClassification"),V8t.forEach(t),a8r=r(GSe," (XLNet model)"),GSe.forEach(t),te.forEach(t),n8r=i(Ca),G5e=n(Ca,"P",{});var X8t=s(G5e);s8r=r(X8t,"Examples:"),X8t.forEach(t),l8r=i(Ca),m(O0.$$.fragment,Ca),Ca.forEach(t),mi.forEach(t),L$e=i(c),Yc=n(c,"H2",{class:!0});var jqe=s(Yc);_7=n(jqe,"A",{id:!0,class:!0,href:!0});var z8t=s(_7);O5e=n(z8t,"SPAN",{});var Q8t=s(O5e);m(V0.$$.fragment,Q8t),Q8t.forEach(t),z8t.forEach(t),i8r=i(jqe),V5e=n(jqe,"SPAN",{});var W8t=s(V5e);d8r=r(W8t,"TFAutoModelForQuestionAnswering"),W8t.forEach(t),jqe.forEach(t),x$e=i(c),xr=n(c,"DIV",{class:!0});var hi=s(xr);m(X0.$$.fragment,hi),c8r=i(hi),Kc=n(hi,"P",{});var SY=s(Kc);f8r=r(SY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dW=n(SY,"A",{href:!0});var H8t=s(dW);m8r=r(H8t,"from_pretrained()"),H8t.forEach(t),g8r=r(SY," class method or the "),cW=n(SY,"A",{href:!0});var U8t=s(cW);h8r=r(U8t,"from_config()"),U8t.forEach(t),p8r=r(SY,` class
method.`),SY.forEach(t),_8r=i(hi),z0=n(hi,"P",{});var Dqe=s(z0);u8r=r(Dqe,"This class cannot be instantiated directly using "),X5e=n(Dqe,"CODE",{});var J8t=s(X5e);b8r=r(J8t,"__init__()"),J8t.forEach(t),v8r=r(Dqe," (throws an error)."),Dqe.forEach(t),F8r=i(hi),Et=n(hi,"DIV",{class:!0});var pi=s(Et);m(Q0.$$.fragment,pi),T8r=i(pi),z5e=n(pi,"P",{});var Y8t=s(z5e);M8r=r(Y8t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Y8t.forEach(t),E8r=i(pi),Zc=n(pi,"P",{});var RY=s(Zc);C8r=r(RY,`Note:
Loading a model from its configuration file does `),Q5e=n(RY,"STRONG",{});var K8t=s(Q5e);w8r=r(K8t,"not"),K8t.forEach(t),A8r=r(RY,` load the model weights. It only affects the
model\u2019s configuration. Use `),fW=n(RY,"A",{href:!0});var Z8t=s(fW);y8r=r(Z8t,"from_pretrained()"),Z8t.forEach(t),L8r=r(RY," to load the model weights."),RY.forEach(t),x8r=i(pi),W5e=n(pi,"P",{});var e7t=s(W5e);k8r=r(e7t,"Examples:"),e7t.forEach(t),S8r=i(pi),m(W0.$$.fragment,pi),pi.forEach(t),R8r=i(hi),wo=n(hi,"DIV",{class:!0});var wa=s(wo);m(H0.$$.fragment,wa),B8r=i(wa),H5e=n(wa,"P",{});var o7t=s(H5e);P8r=r(o7t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),o7t.forEach(t),$8r=i(wa),yn=n(wa,"P",{});var SE=s(yn);I8r=r(SE,"The model class to instantiate is selected based on the "),U5e=n(SE,"CODE",{});var r7t=s(U5e);q8r=r(r7t,"model_type"),r7t.forEach(t),N8r=r(SE,` property of the config object (either
passed as an argument or loaded from `),J5e=n(SE,"CODE",{});var t7t=s(J5e);j8r=r(t7t,"pretrained_model_name_or_path"),t7t.forEach(t),D8r=r(SE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Y5e=n(SE,"CODE",{});var a7t=s(Y5e);G8r=r(a7t,"pretrained_model_name_or_path"),a7t.forEach(t),O8r=r(SE,":"),SE.forEach(t),V8r=i(wa),ee=n(wa,"UL",{});var ae=s(ee);u7=n(ae,"LI",{});var OSe=s(u7);K5e=n(OSe,"STRONG",{});var n7t=s(K5e);X8r=r(n7t,"albert"),n7t.forEach(t),z8r=r(OSe," \u2014 "),mW=n(OSe,"A",{href:!0});var s7t=s(mW);Q8r=r(s7t,"TFAlbertForQuestionAnswering"),s7t.forEach(t),W8r=r(OSe," (ALBERT model)"),OSe.forEach(t),H8r=i(ae),b7=n(ae,"LI",{});var VSe=s(b7);Z5e=n(VSe,"STRONG",{});var l7t=s(Z5e);U8r=r(l7t,"bert"),l7t.forEach(t),J8r=r(VSe," \u2014 "),gW=n(VSe,"A",{href:!0});var i7t=s(gW);Y8r=r(i7t,"TFBertForQuestionAnswering"),i7t.forEach(t),K8r=r(VSe," (BERT model)"),VSe.forEach(t),Z8r=i(ae),v7=n(ae,"LI",{});var XSe=s(v7);e6e=n(XSe,"STRONG",{});var d7t=s(e6e);e7r=r(d7t,"camembert"),d7t.forEach(t),o7r=r(XSe," \u2014 "),hW=n(XSe,"A",{href:!0});var c7t=s(hW);r7r=r(c7t,"TFCamembertForQuestionAnswering"),c7t.forEach(t),t7r=r(XSe," (CamemBERT model)"),XSe.forEach(t),a7r=i(ae),F7=n(ae,"LI",{});var zSe=s(F7);o6e=n(zSe,"STRONG",{});var f7t=s(o6e);n7r=r(f7t,"convbert"),f7t.forEach(t),s7r=r(zSe," \u2014 "),pW=n(zSe,"A",{href:!0});var m7t=s(pW);l7r=r(m7t,"TFConvBertForQuestionAnswering"),m7t.forEach(t),i7r=r(zSe," (ConvBERT model)"),zSe.forEach(t),d7r=i(ae),T7=n(ae,"LI",{});var QSe=s(T7);r6e=n(QSe,"STRONG",{});var g7t=s(r6e);c7r=r(g7t,"deberta"),g7t.forEach(t),f7r=r(QSe," \u2014 "),_W=n(QSe,"A",{href:!0});var h7t=s(_W);m7r=r(h7t,"TFDebertaForQuestionAnswering"),h7t.forEach(t),g7r=r(QSe," (DeBERTa model)"),QSe.forEach(t),h7r=i(ae),M7=n(ae,"LI",{});var WSe=s(M7);t6e=n(WSe,"STRONG",{});var p7t=s(t6e);p7r=r(p7t,"deberta-v2"),p7t.forEach(t),_7r=r(WSe," \u2014 "),uW=n(WSe,"A",{href:!0});var _7t=s(uW);u7r=r(_7t,"TFDebertaV2ForQuestionAnswering"),_7t.forEach(t),b7r=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),v7r=i(ae),E7=n(ae,"LI",{});var HSe=s(E7);a6e=n(HSe,"STRONG",{});var u7t=s(a6e);F7r=r(u7t,"distilbert"),u7t.forEach(t),T7r=r(HSe," \u2014 "),bW=n(HSe,"A",{href:!0});var b7t=s(bW);M7r=r(b7t,"TFDistilBertForQuestionAnswering"),b7t.forEach(t),E7r=r(HSe," (DistilBERT model)"),HSe.forEach(t),C7r=i(ae),C7=n(ae,"LI",{});var USe=s(C7);n6e=n(USe,"STRONG",{});var v7t=s(n6e);w7r=r(v7t,"electra"),v7t.forEach(t),A7r=r(USe," \u2014 "),vW=n(USe,"A",{href:!0});var F7t=s(vW);y7r=r(F7t,"TFElectraForQuestionAnswering"),F7t.forEach(t),L7r=r(USe," (ELECTRA model)"),USe.forEach(t),x7r=i(ae),w7=n(ae,"LI",{});var JSe=s(w7);s6e=n(JSe,"STRONG",{});var T7t=s(s6e);k7r=r(T7t,"flaubert"),T7t.forEach(t),S7r=r(JSe," \u2014 "),FW=n(JSe,"A",{href:!0});var M7t=s(FW);R7r=r(M7t,"TFFlaubertForQuestionAnsweringSimple"),M7t.forEach(t),B7r=r(JSe," (FlauBERT model)"),JSe.forEach(t),P7r=i(ae),A7=n(ae,"LI",{});var YSe=s(A7);l6e=n(YSe,"STRONG",{});var E7t=s(l6e);$7r=r(E7t,"funnel"),E7t.forEach(t),I7r=r(YSe," \u2014 "),TW=n(YSe,"A",{href:!0});var C7t=s(TW);q7r=r(C7t,"TFFunnelForQuestionAnswering"),C7t.forEach(t),N7r=r(YSe," (Funnel Transformer model)"),YSe.forEach(t),j7r=i(ae),y7=n(ae,"LI",{});var KSe=s(y7);i6e=n(KSe,"STRONG",{});var w7t=s(i6e);D7r=r(w7t,"gptj"),w7t.forEach(t),G7r=r(KSe," \u2014 "),MW=n(KSe,"A",{href:!0});var A7t=s(MW);O7r=r(A7t,"TFGPTJForQuestionAnswering"),A7t.forEach(t),V7r=r(KSe," (GPT-J model)"),KSe.forEach(t),X7r=i(ae),L7=n(ae,"LI",{});var ZSe=s(L7);d6e=n(ZSe,"STRONG",{});var y7t=s(d6e);z7r=r(y7t,"longformer"),y7t.forEach(t),Q7r=r(ZSe," \u2014 "),EW=n(ZSe,"A",{href:!0});var L7t=s(EW);W7r=r(L7t,"TFLongformerForQuestionAnswering"),L7t.forEach(t),H7r=r(ZSe," (Longformer model)"),ZSe.forEach(t),U7r=i(ae),x7=n(ae,"LI",{});var eRe=s(x7);c6e=n(eRe,"STRONG",{});var x7t=s(c6e);J7r=r(x7t,"mobilebert"),x7t.forEach(t),Y7r=r(eRe," \u2014 "),CW=n(eRe,"A",{href:!0});var k7t=s(CW);K7r=r(k7t,"TFMobileBertForQuestionAnswering"),k7t.forEach(t),Z7r=r(eRe," (MobileBERT model)"),eRe.forEach(t),eMr=i(ae),k7=n(ae,"LI",{});var oRe=s(k7);f6e=n(oRe,"STRONG",{});var S7t=s(f6e);oMr=r(S7t,"mpnet"),S7t.forEach(t),rMr=r(oRe," \u2014 "),wW=n(oRe,"A",{href:!0});var R7t=s(wW);tMr=r(R7t,"TFMPNetForQuestionAnswering"),R7t.forEach(t),aMr=r(oRe," (MPNet model)"),oRe.forEach(t),nMr=i(ae),S7=n(ae,"LI",{});var rRe=s(S7);m6e=n(rRe,"STRONG",{});var B7t=s(m6e);sMr=r(B7t,"rembert"),B7t.forEach(t),lMr=r(rRe," \u2014 "),AW=n(rRe,"A",{href:!0});var P7t=s(AW);iMr=r(P7t,"TFRemBertForQuestionAnswering"),P7t.forEach(t),dMr=r(rRe," (RemBERT model)"),rRe.forEach(t),cMr=i(ae),R7=n(ae,"LI",{});var tRe=s(R7);g6e=n(tRe,"STRONG",{});var $7t=s(g6e);fMr=r($7t,"roberta"),$7t.forEach(t),mMr=r(tRe," \u2014 "),yW=n(tRe,"A",{href:!0});var I7t=s(yW);gMr=r(I7t,"TFRobertaForQuestionAnswering"),I7t.forEach(t),hMr=r(tRe," (RoBERTa model)"),tRe.forEach(t),pMr=i(ae),B7=n(ae,"LI",{});var aRe=s(B7);h6e=n(aRe,"STRONG",{});var q7t=s(h6e);_Mr=r(q7t,"roformer"),q7t.forEach(t),uMr=r(aRe," \u2014 "),LW=n(aRe,"A",{href:!0});var N7t=s(LW);bMr=r(N7t,"TFRoFormerForQuestionAnswering"),N7t.forEach(t),vMr=r(aRe," (RoFormer model)"),aRe.forEach(t),FMr=i(ae),P7=n(ae,"LI",{});var nRe=s(P7);p6e=n(nRe,"STRONG",{});var j7t=s(p6e);TMr=r(j7t,"xlm"),j7t.forEach(t),MMr=r(nRe," \u2014 "),xW=n(nRe,"A",{href:!0});var D7t=s(xW);EMr=r(D7t,"TFXLMForQuestionAnsweringSimple"),D7t.forEach(t),CMr=r(nRe," (XLM model)"),nRe.forEach(t),wMr=i(ae),$7=n(ae,"LI",{});var sRe=s($7);_6e=n(sRe,"STRONG",{});var G7t=s(_6e);AMr=r(G7t,"xlm-roberta"),G7t.forEach(t),yMr=r(sRe," \u2014 "),kW=n(sRe,"A",{href:!0});var O7t=s(kW);LMr=r(O7t,"TFXLMRobertaForQuestionAnswering"),O7t.forEach(t),xMr=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),kMr=i(ae),I7=n(ae,"LI",{});var lRe=s(I7);u6e=n(lRe,"STRONG",{});var V7t=s(u6e);SMr=r(V7t,"xlnet"),V7t.forEach(t),RMr=r(lRe," \u2014 "),SW=n(lRe,"A",{href:!0});var X7t=s(SW);BMr=r(X7t,"TFXLNetForQuestionAnsweringSimple"),X7t.forEach(t),PMr=r(lRe," (XLNet model)"),lRe.forEach(t),ae.forEach(t),$Mr=i(wa),b6e=n(wa,"P",{});var z7t=s(b6e);IMr=r(z7t,"Examples:"),z7t.forEach(t),qMr=i(wa),m(U0.$$.fragment,wa),wa.forEach(t),hi.forEach(t),k$e=i(c),ef=n(c,"H2",{class:!0});var Gqe=s(ef);q7=n(Gqe,"A",{id:!0,class:!0,href:!0});var Q7t=s(q7);v6e=n(Q7t,"SPAN",{});var W7t=s(v6e);m(J0.$$.fragment,W7t),W7t.forEach(t),Q7t.forEach(t),NMr=i(Gqe),F6e=n(Gqe,"SPAN",{});var H7t=s(F6e);jMr=r(H7t,"TFAutoModelForVision2Seq"),H7t.forEach(t),Gqe.forEach(t),S$e=i(c),kr=n(c,"DIV",{class:!0});var _i=s(kr);m(Y0.$$.fragment,_i),DMr=i(_i),of=n(_i,"P",{});var BY=s(of);GMr=r(BY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),RW=n(BY,"A",{href:!0});var U7t=s(RW);OMr=r(U7t,"from_pretrained()"),U7t.forEach(t),VMr=r(BY," class method or the "),BW=n(BY,"A",{href:!0});var J7t=s(BW);XMr=r(J7t,"from_config()"),J7t.forEach(t),zMr=r(BY,` class
method.`),BY.forEach(t),QMr=i(_i),K0=n(_i,"P",{});var Oqe=s(K0);WMr=r(Oqe,"This class cannot be instantiated directly using "),T6e=n(Oqe,"CODE",{});var Y7t=s(T6e);HMr=r(Y7t,"__init__()"),Y7t.forEach(t),UMr=r(Oqe," (throws an error)."),Oqe.forEach(t),JMr=i(_i),Ct=n(_i,"DIV",{class:!0});var ui=s(Ct);m(Z0.$$.fragment,ui),YMr=i(ui),M6e=n(ui,"P",{});var K7t=s(M6e);KMr=r(K7t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),K7t.forEach(t),ZMr=i(ui),rf=n(ui,"P",{});var PY=s(rf);e4r=r(PY,`Note:
Loading a model from its configuration file does `),E6e=n(PY,"STRONG",{});var Z7t=s(E6e);o4r=r(Z7t,"not"),Z7t.forEach(t),r4r=r(PY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PW=n(PY,"A",{href:!0});var eMt=s(PW);t4r=r(eMt,"from_pretrained()"),eMt.forEach(t),a4r=r(PY," to load the model weights."),PY.forEach(t),n4r=i(ui),C6e=n(ui,"P",{});var oMt=s(C6e);s4r=r(oMt,"Examples:"),oMt.forEach(t),l4r=i(ui),m(ey.$$.fragment,ui),ui.forEach(t),i4r=i(_i),Ao=n(_i,"DIV",{class:!0});var Aa=s(Ao);m(oy.$$.fragment,Aa),d4r=i(Aa),w6e=n(Aa,"P",{});var rMt=s(w6e);c4r=r(rMt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),rMt.forEach(t),f4r=i(Aa),Ln=n(Aa,"P",{});var RE=s(Ln);m4r=r(RE,"The model class to instantiate is selected based on the "),A6e=n(RE,"CODE",{});var tMt=s(A6e);g4r=r(tMt,"model_type"),tMt.forEach(t),h4r=r(RE,` property of the config object (either
passed as an argument or loaded from `),y6e=n(RE,"CODE",{});var aMt=s(y6e);p4r=r(aMt,"pretrained_model_name_or_path"),aMt.forEach(t),_4r=r(RE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L6e=n(RE,"CODE",{});var nMt=s(L6e);u4r=r(nMt,"pretrained_model_name_or_path"),nMt.forEach(t),b4r=r(RE,":"),RE.forEach(t),v4r=i(Aa),x6e=n(Aa,"UL",{});var sMt=s(x6e);N7=n(sMt,"LI",{});var iRe=s(N7);k6e=n(iRe,"STRONG",{});var lMt=s(k6e);F4r=r(lMt,"vision-encoder-decoder"),lMt.forEach(t),T4r=r(iRe," \u2014 "),$W=n(iRe,"A",{href:!0});var iMt=s($W);M4r=r(iMt,"TFVisionEncoderDecoderModel"),iMt.forEach(t),E4r=r(iRe," (Vision Encoder decoder model)"),iRe.forEach(t),sMt.forEach(t),C4r=i(Aa),S6e=n(Aa,"P",{});var dMt=s(S6e);w4r=r(dMt,"Examples:"),dMt.forEach(t),A4r=i(Aa),m(ry.$$.fragment,Aa),Aa.forEach(t),_i.forEach(t),R$e=i(c),tf=n(c,"H2",{class:!0});var Vqe=s(tf);j7=n(Vqe,"A",{id:!0,class:!0,href:!0});var cMt=s(j7);R6e=n(cMt,"SPAN",{});var fMt=s(R6e);m(ty.$$.fragment,fMt),fMt.forEach(t),cMt.forEach(t),y4r=i(Vqe),B6e=n(Vqe,"SPAN",{});var mMt=s(B6e);L4r=r(mMt,"TFAutoModelForSpeechSeq2Seq"),mMt.forEach(t),Vqe.forEach(t),B$e=i(c),Sr=n(c,"DIV",{class:!0});var bi=s(Sr);m(ay.$$.fragment,bi),x4r=i(bi),af=n(bi,"P",{});var $Y=s(af);k4r=r($Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),IW=n($Y,"A",{href:!0});var gMt=s(IW);S4r=r(gMt,"from_pretrained()"),gMt.forEach(t),R4r=r($Y," class method or the "),qW=n($Y,"A",{href:!0});var hMt=s(qW);B4r=r(hMt,"from_config()"),hMt.forEach(t),P4r=r($Y,` class
method.`),$Y.forEach(t),$4r=i(bi),ny=n(bi,"P",{});var Xqe=s(ny);I4r=r(Xqe,"This class cannot be instantiated directly using "),P6e=n(Xqe,"CODE",{});var pMt=s(P6e);q4r=r(pMt,"__init__()"),pMt.forEach(t),N4r=r(Xqe," (throws an error)."),Xqe.forEach(t),j4r=i(bi),wt=n(bi,"DIV",{class:!0});var vi=s(wt);m(sy.$$.fragment,vi),D4r=i(vi),$6e=n(vi,"P",{});var _Mt=s($6e);G4r=r(_Mt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),_Mt.forEach(t),O4r=i(vi),nf=n(vi,"P",{});var IY=s(nf);V4r=r(IY,`Note:
Loading a model from its configuration file does `),I6e=n(IY,"STRONG",{});var uMt=s(I6e);X4r=r(uMt,"not"),uMt.forEach(t),z4r=r(IY,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(IY,"A",{href:!0});var bMt=s(NW);Q4r=r(bMt,"from_pretrained()"),bMt.forEach(t),W4r=r(IY," to load the model weights."),IY.forEach(t),H4r=i(vi),q6e=n(vi,"P",{});var vMt=s(q6e);U4r=r(vMt,"Examples:"),vMt.forEach(t),J4r=i(vi),m(ly.$$.fragment,vi),vi.forEach(t),Y4r=i(bi),yo=n(bi,"DIV",{class:!0});var ya=s(yo);m(iy.$$.fragment,ya),K4r=i(ya),N6e=n(ya,"P",{});var FMt=s(N6e);Z4r=r(FMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),FMt.forEach(t),eEr=i(ya),xn=n(ya,"P",{});var BE=s(xn);oEr=r(BE,"The model class to instantiate is selected based on the "),j6e=n(BE,"CODE",{});var TMt=s(j6e);rEr=r(TMt,"model_type"),TMt.forEach(t),tEr=r(BE,` property of the config object (either
passed as an argument or loaded from `),D6e=n(BE,"CODE",{});var MMt=s(D6e);aEr=r(MMt,"pretrained_model_name_or_path"),MMt.forEach(t),nEr=r(BE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(BE,"CODE",{});var EMt=s(G6e);sEr=r(EMt,"pretrained_model_name_or_path"),EMt.forEach(t),lEr=r(BE,":"),BE.forEach(t),iEr=i(ya),O6e=n(ya,"UL",{});var CMt=s(O6e);D7=n(CMt,"LI",{});var dRe=s(D7);V6e=n(dRe,"STRONG",{});var wMt=s(V6e);dEr=r(wMt,"speech_to_text"),wMt.forEach(t),cEr=r(dRe," \u2014 "),jW=n(dRe,"A",{href:!0});var AMt=s(jW);fEr=r(AMt,"TFSpeech2TextForConditionalGeneration"),AMt.forEach(t),mEr=r(dRe," (Speech2Text model)"),dRe.forEach(t),CMt.forEach(t),gEr=i(ya),X6e=n(ya,"P",{});var yMt=s(X6e);hEr=r(yMt,"Examples:"),yMt.forEach(t),pEr=i(ya),m(dy.$$.fragment,ya),ya.forEach(t),bi.forEach(t),P$e=i(c),sf=n(c,"H2",{class:!0});var zqe=s(sf);G7=n(zqe,"A",{id:!0,class:!0,href:!0});var LMt=s(G7);z6e=n(LMt,"SPAN",{});var xMt=s(z6e);m(cy.$$.fragment,xMt),xMt.forEach(t),LMt.forEach(t),_Er=i(zqe),Q6e=n(zqe,"SPAN",{});var kMt=s(Q6e);uEr=r(kMt,"FlaxAutoModel"),kMt.forEach(t),zqe.forEach(t),$$e=i(c),Rr=n(c,"DIV",{class:!0});var Fi=s(Rr);m(fy.$$.fragment,Fi),bEr=i(Fi),lf=n(Fi,"P",{});var qY=s(lf);vEr=r(qY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),DW=n(qY,"A",{href:!0});var SMt=s(DW);FEr=r(SMt,"from_pretrained()"),SMt.forEach(t),TEr=r(qY," class method or the "),GW=n(qY,"A",{href:!0});var RMt=s(GW);MEr=r(RMt,"from_config()"),RMt.forEach(t),EEr=r(qY,` class
method.`),qY.forEach(t),CEr=i(Fi),my=n(Fi,"P",{});var Qqe=s(my);wEr=r(Qqe,"This class cannot be instantiated directly using "),W6e=n(Qqe,"CODE",{});var BMt=s(W6e);AEr=r(BMt,"__init__()"),BMt.forEach(t),yEr=r(Qqe," (throws an error)."),Qqe.forEach(t),LEr=i(Fi),At=n(Fi,"DIV",{class:!0});var Ti=s(At);m(gy.$$.fragment,Ti),xEr=i(Ti),H6e=n(Ti,"P",{});var PMt=s(H6e);kEr=r(PMt,"Instantiates one of the base model classes of the library from a configuration."),PMt.forEach(t),SEr=i(Ti),df=n(Ti,"P",{});var NY=s(df);REr=r(NY,`Note:
Loading a model from its configuration file does `),U6e=n(NY,"STRONG",{});var $Mt=s(U6e);BEr=r($Mt,"not"),$Mt.forEach(t),PEr=r(NY,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(NY,"A",{href:!0});var IMt=s(OW);$Er=r(IMt,"from_pretrained()"),IMt.forEach(t),IEr=r(NY," to load the model weights."),NY.forEach(t),qEr=i(Ti),J6e=n(Ti,"P",{});var qMt=s(J6e);NEr=r(qMt,"Examples:"),qMt.forEach(t),jEr=i(Ti),m(hy.$$.fragment,Ti),Ti.forEach(t),DEr=i(Fi),Lo=n(Fi,"DIV",{class:!0});var La=s(Lo);m(py.$$.fragment,La),GEr=i(La),Y6e=n(La,"P",{});var NMt=s(Y6e);OEr=r(NMt,"Instantiate one of the base model classes of the library from a pretrained model."),NMt.forEach(t),VEr=i(La),kn=n(La,"P",{});var PE=s(kn);XEr=r(PE,"The model class to instantiate is selected based on the "),K6e=n(PE,"CODE",{});var jMt=s(K6e);zEr=r(jMt,"model_type"),jMt.forEach(t),QEr=r(PE,` property of the config object (either
passed as an argument or loaded from `),Z6e=n(PE,"CODE",{});var DMt=s(Z6e);WEr=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),HEr=r(PE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),eve=n(PE,"CODE",{});var GMt=s(eve);UEr=r(GMt,"pretrained_model_name_or_path"),GMt.forEach(t),JEr=r(PE,":"),PE.forEach(t),YEr=i(La),z=n(La,"UL",{});var H=s(z);O7=n(H,"LI",{});var cRe=s(O7);ove=n(cRe,"STRONG",{});var OMt=s(ove);KEr=r(OMt,"albert"),OMt.forEach(t),ZEr=r(cRe," \u2014 "),VW=n(cRe,"A",{href:!0});var VMt=s(VW);e3r=r(VMt,"FlaxAlbertModel"),VMt.forEach(t),o3r=r(cRe," (ALBERT model)"),cRe.forEach(t),r3r=i(H),V7=n(H,"LI",{});var fRe=s(V7);rve=n(fRe,"STRONG",{});var XMt=s(rve);t3r=r(XMt,"bart"),XMt.forEach(t),a3r=r(fRe," \u2014 "),XW=n(fRe,"A",{href:!0});var zMt=s(XW);n3r=r(zMt,"FlaxBartModel"),zMt.forEach(t),s3r=r(fRe," (BART model)"),fRe.forEach(t),l3r=i(H),X7=n(H,"LI",{});var mRe=s(X7);tve=n(mRe,"STRONG",{});var QMt=s(tve);i3r=r(QMt,"beit"),QMt.forEach(t),d3r=r(mRe," \u2014 "),zW=n(mRe,"A",{href:!0});var WMt=s(zW);c3r=r(WMt,"FlaxBeitModel"),WMt.forEach(t),f3r=r(mRe," (BEiT model)"),mRe.forEach(t),m3r=i(H),z7=n(H,"LI",{});var gRe=s(z7);ave=n(gRe,"STRONG",{});var HMt=s(ave);g3r=r(HMt,"bert"),HMt.forEach(t),h3r=r(gRe," \u2014 "),QW=n(gRe,"A",{href:!0});var UMt=s(QW);p3r=r(UMt,"FlaxBertModel"),UMt.forEach(t),_3r=r(gRe," (BERT model)"),gRe.forEach(t),u3r=i(H),Q7=n(H,"LI",{});var hRe=s(Q7);nve=n(hRe,"STRONG",{});var JMt=s(nve);b3r=r(JMt,"big_bird"),JMt.forEach(t),v3r=r(hRe," \u2014 "),WW=n(hRe,"A",{href:!0});var YMt=s(WW);F3r=r(YMt,"FlaxBigBirdModel"),YMt.forEach(t),T3r=r(hRe," (BigBird model)"),hRe.forEach(t),M3r=i(H),W7=n(H,"LI",{});var pRe=s(W7);sve=n(pRe,"STRONG",{});var KMt=s(sve);E3r=r(KMt,"blenderbot"),KMt.forEach(t),C3r=r(pRe," \u2014 "),HW=n(pRe,"A",{href:!0});var ZMt=s(HW);w3r=r(ZMt,"FlaxBlenderbotModel"),ZMt.forEach(t),A3r=r(pRe," (Blenderbot model)"),pRe.forEach(t),y3r=i(H),H7=n(H,"LI",{});var _Re=s(H7);lve=n(_Re,"STRONG",{});var e4t=s(lve);L3r=r(e4t,"blenderbot-small"),e4t.forEach(t),x3r=r(_Re," \u2014 "),UW=n(_Re,"A",{href:!0});var o4t=s(UW);k3r=r(o4t,"FlaxBlenderbotSmallModel"),o4t.forEach(t),S3r=r(_Re," (BlenderbotSmall model)"),_Re.forEach(t),R3r=i(H),U7=n(H,"LI",{});var uRe=s(U7);ive=n(uRe,"STRONG",{});var r4t=s(ive);B3r=r(r4t,"clip"),r4t.forEach(t),P3r=r(uRe," \u2014 "),JW=n(uRe,"A",{href:!0});var t4t=s(JW);$3r=r(t4t,"FlaxCLIPModel"),t4t.forEach(t),I3r=r(uRe," (CLIP model)"),uRe.forEach(t),q3r=i(H),J7=n(H,"LI",{});var bRe=s(J7);dve=n(bRe,"STRONG",{});var a4t=s(dve);N3r=r(a4t,"distilbert"),a4t.forEach(t),j3r=r(bRe," \u2014 "),YW=n(bRe,"A",{href:!0});var n4t=s(YW);D3r=r(n4t,"FlaxDistilBertModel"),n4t.forEach(t),G3r=r(bRe," (DistilBERT model)"),bRe.forEach(t),O3r=i(H),Y7=n(H,"LI",{});var vRe=s(Y7);cve=n(vRe,"STRONG",{});var s4t=s(cve);V3r=r(s4t,"electra"),s4t.forEach(t),X3r=r(vRe," \u2014 "),KW=n(vRe,"A",{href:!0});var l4t=s(KW);z3r=r(l4t,"FlaxElectraModel"),l4t.forEach(t),Q3r=r(vRe," (ELECTRA model)"),vRe.forEach(t),W3r=i(H),K7=n(H,"LI",{});var FRe=s(K7);fve=n(FRe,"STRONG",{});var i4t=s(fve);H3r=r(i4t,"gpt2"),i4t.forEach(t),U3r=r(FRe," \u2014 "),ZW=n(FRe,"A",{href:!0});var d4t=s(ZW);J3r=r(d4t,"FlaxGPT2Model"),d4t.forEach(t),Y3r=r(FRe," (OpenAI GPT-2 model)"),FRe.forEach(t),K3r=i(H),Z7=n(H,"LI",{});var TRe=s(Z7);mve=n(TRe,"STRONG",{});var c4t=s(mve);Z3r=r(c4t,"gpt_neo"),c4t.forEach(t),eCr=r(TRe," \u2014 "),eH=n(TRe,"A",{href:!0});var f4t=s(eH);oCr=r(f4t,"FlaxGPTNeoModel"),f4t.forEach(t),rCr=r(TRe," (GPT Neo model)"),TRe.forEach(t),tCr=i(H),eM=n(H,"LI",{});var MRe=s(eM);gve=n(MRe,"STRONG",{});var m4t=s(gve);aCr=r(m4t,"gptj"),m4t.forEach(t),nCr=r(MRe," \u2014 "),oH=n(MRe,"A",{href:!0});var g4t=s(oH);sCr=r(g4t,"FlaxGPTJModel"),g4t.forEach(t),lCr=r(MRe," (GPT-J model)"),MRe.forEach(t),iCr=i(H),oM=n(H,"LI",{});var ERe=s(oM);hve=n(ERe,"STRONG",{});var h4t=s(hve);dCr=r(h4t,"marian"),h4t.forEach(t),cCr=r(ERe," \u2014 "),rH=n(ERe,"A",{href:!0});var p4t=s(rH);fCr=r(p4t,"FlaxMarianModel"),p4t.forEach(t),mCr=r(ERe," (Marian model)"),ERe.forEach(t),gCr=i(H),rM=n(H,"LI",{});var CRe=s(rM);pve=n(CRe,"STRONG",{});var _4t=s(pve);hCr=r(_4t,"mbart"),_4t.forEach(t),pCr=r(CRe," \u2014 "),tH=n(CRe,"A",{href:!0});var u4t=s(tH);_Cr=r(u4t,"FlaxMBartModel"),u4t.forEach(t),uCr=r(CRe," (mBART model)"),CRe.forEach(t),bCr=i(H),tM=n(H,"LI",{});var wRe=s(tM);_ve=n(wRe,"STRONG",{});var b4t=s(_ve);vCr=r(b4t,"mt5"),b4t.forEach(t),FCr=r(wRe," \u2014 "),aH=n(wRe,"A",{href:!0});var v4t=s(aH);TCr=r(v4t,"FlaxMT5Model"),v4t.forEach(t),MCr=r(wRe," (mT5 model)"),wRe.forEach(t),ECr=i(H),aM=n(H,"LI",{});var ARe=s(aM);uve=n(ARe,"STRONG",{});var F4t=s(uve);CCr=r(F4t,"pegasus"),F4t.forEach(t),wCr=r(ARe," \u2014 "),nH=n(ARe,"A",{href:!0});var T4t=s(nH);ACr=r(T4t,"FlaxPegasusModel"),T4t.forEach(t),yCr=r(ARe," (Pegasus model)"),ARe.forEach(t),LCr=i(H),nM=n(H,"LI",{});var yRe=s(nM);bve=n(yRe,"STRONG",{});var M4t=s(bve);xCr=r(M4t,"roberta"),M4t.forEach(t),kCr=r(yRe," \u2014 "),sH=n(yRe,"A",{href:!0});var E4t=s(sH);SCr=r(E4t,"FlaxRobertaModel"),E4t.forEach(t),RCr=r(yRe," (RoBERTa model)"),yRe.forEach(t),BCr=i(H),sM=n(H,"LI",{});var LRe=s(sM);vve=n(LRe,"STRONG",{});var C4t=s(vve);PCr=r(C4t,"roformer"),C4t.forEach(t),$Cr=r(LRe," \u2014 "),lH=n(LRe,"A",{href:!0});var w4t=s(lH);ICr=r(w4t,"FlaxRoFormerModel"),w4t.forEach(t),qCr=r(LRe," (RoFormer model)"),LRe.forEach(t),NCr=i(H),lM=n(H,"LI",{});var xRe=s(lM);Fve=n(xRe,"STRONG",{});var A4t=s(Fve);jCr=r(A4t,"t5"),A4t.forEach(t),DCr=r(xRe," \u2014 "),iH=n(xRe,"A",{href:!0});var y4t=s(iH);GCr=r(y4t,"FlaxT5Model"),y4t.forEach(t),OCr=r(xRe," (T5 model)"),xRe.forEach(t),VCr=i(H),iM=n(H,"LI",{});var kRe=s(iM);Tve=n(kRe,"STRONG",{});var L4t=s(Tve);XCr=r(L4t,"vision-text-dual-encoder"),L4t.forEach(t),zCr=r(kRe," \u2014 "),dH=n(kRe,"A",{href:!0});var x4t=s(dH);QCr=r(x4t,"FlaxVisionTextDualEncoderModel"),x4t.forEach(t),WCr=r(kRe," (VisionTextDualEncoder model)"),kRe.forEach(t),HCr=i(H),dM=n(H,"LI",{});var SRe=s(dM);Mve=n(SRe,"STRONG",{});var k4t=s(Mve);UCr=r(k4t,"vit"),k4t.forEach(t),JCr=r(SRe," \u2014 "),cH=n(SRe,"A",{href:!0});var S4t=s(cH);YCr=r(S4t,"FlaxViTModel"),S4t.forEach(t),KCr=r(SRe," (ViT model)"),SRe.forEach(t),ZCr=i(H),cM=n(H,"LI",{});var RRe=s(cM);Eve=n(RRe,"STRONG",{});var R4t=s(Eve);ewr=r(R4t,"wav2vec2"),R4t.forEach(t),owr=r(RRe," \u2014 "),fH=n(RRe,"A",{href:!0});var B4t=s(fH);rwr=r(B4t,"FlaxWav2Vec2Model"),B4t.forEach(t),twr=r(RRe," (Wav2Vec2 model)"),RRe.forEach(t),awr=i(H),fM=n(H,"LI",{});var BRe=s(fM);Cve=n(BRe,"STRONG",{});var P4t=s(Cve);nwr=r(P4t,"xglm"),P4t.forEach(t),swr=r(BRe," \u2014 "),mH=n(BRe,"A",{href:!0});var $4t=s(mH);lwr=r($4t,"FlaxXGLMModel"),$4t.forEach(t),iwr=r(BRe," (XGLM model)"),BRe.forEach(t),dwr=i(H),mM=n(H,"LI",{});var PRe=s(mM);wve=n(PRe,"STRONG",{});var I4t=s(wve);cwr=r(I4t,"xlm-roberta"),I4t.forEach(t),fwr=r(PRe," \u2014 "),gH=n(PRe,"A",{href:!0});var q4t=s(gH);mwr=r(q4t,"FlaxXLMRobertaModel"),q4t.forEach(t),gwr=r(PRe," (XLM-RoBERTa model)"),PRe.forEach(t),H.forEach(t),hwr=i(La),Ave=n(La,"P",{});var N4t=s(Ave);pwr=r(N4t,"Examples:"),N4t.forEach(t),_wr=i(La),m(_y.$$.fragment,La),La.forEach(t),Fi.forEach(t),I$e=i(c),cf=n(c,"H2",{class:!0});var Wqe=s(cf);gM=n(Wqe,"A",{id:!0,class:!0,href:!0});var j4t=s(gM);yve=n(j4t,"SPAN",{});var D4t=s(yve);m(uy.$$.fragment,D4t),D4t.forEach(t),j4t.forEach(t),uwr=i(Wqe),Lve=n(Wqe,"SPAN",{});var G4t=s(Lve);bwr=r(G4t,"FlaxAutoModelForCausalLM"),G4t.forEach(t),Wqe.forEach(t),q$e=i(c),Br=n(c,"DIV",{class:!0});var Mi=s(Br);m(by.$$.fragment,Mi),vwr=i(Mi),ff=n(Mi,"P",{});var jY=s(ff);Fwr=r(jY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),hH=n(jY,"A",{href:!0});var O4t=s(hH);Twr=r(O4t,"from_pretrained()"),O4t.forEach(t),Mwr=r(jY," class method or the "),pH=n(jY,"A",{href:!0});var V4t=s(pH);Ewr=r(V4t,"from_config()"),V4t.forEach(t),Cwr=r(jY,` class
method.`),jY.forEach(t),wwr=i(Mi),vy=n(Mi,"P",{});var Hqe=s(vy);Awr=r(Hqe,"This class cannot be instantiated directly using "),xve=n(Hqe,"CODE",{});var X4t=s(xve);ywr=r(X4t,"__init__()"),X4t.forEach(t),Lwr=r(Hqe," (throws an error)."),Hqe.forEach(t),xwr=i(Mi),yt=n(Mi,"DIV",{class:!0});var Ei=s(yt);m(Fy.$$.fragment,Ei),kwr=i(Ei),kve=n(Ei,"P",{});var z4t=s(kve);Swr=r(z4t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),z4t.forEach(t),Rwr=i(Ei),mf=n(Ei,"P",{});var DY=s(mf);Bwr=r(DY,`Note:
Loading a model from its configuration file does `),Sve=n(DY,"STRONG",{});var Q4t=s(Sve);Pwr=r(Q4t,"not"),Q4t.forEach(t),$wr=r(DY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_H=n(DY,"A",{href:!0});var W4t=s(_H);Iwr=r(W4t,"from_pretrained()"),W4t.forEach(t),qwr=r(DY," to load the model weights."),DY.forEach(t),Nwr=i(Ei),Rve=n(Ei,"P",{});var H4t=s(Rve);jwr=r(H4t,"Examples:"),H4t.forEach(t),Dwr=i(Ei),m(Ty.$$.fragment,Ei),Ei.forEach(t),Gwr=i(Mi),xo=n(Mi,"DIV",{class:!0});var xa=s(xo);m(My.$$.fragment,xa),Owr=i(xa),Bve=n(xa,"P",{});var U4t=s(Bve);Vwr=r(U4t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),U4t.forEach(t),Xwr=i(xa),Sn=n(xa,"P",{});var $E=s(Sn);zwr=r($E,"The model class to instantiate is selected based on the "),Pve=n($E,"CODE",{});var J4t=s(Pve);Qwr=r(J4t,"model_type"),J4t.forEach(t),Wwr=r($E,` property of the config object (either
passed as an argument or loaded from `),$ve=n($E,"CODE",{});var Y4t=s($ve);Hwr=r(Y4t,"pretrained_model_name_or_path"),Y4t.forEach(t),Uwr=r($E,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ive=n($E,"CODE",{});var K4t=s(Ive);Jwr=r(K4t,"pretrained_model_name_or_path"),K4t.forEach(t),Ywr=r($E,":"),$E.forEach(t),Kwr=i(xa),ca=n(xa,"UL",{});var Ci=s(ca);hM=n(Ci,"LI",{});var $Re=s(hM);qve=n($Re,"STRONG",{});var Z4t=s(qve);Zwr=r(Z4t,"bart"),Z4t.forEach(t),eAr=r($Re," \u2014 "),uH=n($Re,"A",{href:!0});var eEt=s(uH);oAr=r(eEt,"FlaxBartForCausalLM"),eEt.forEach(t),rAr=r($Re," (BART model)"),$Re.forEach(t),tAr=i(Ci),pM=n(Ci,"LI",{});var IRe=s(pM);Nve=n(IRe,"STRONG",{});var oEt=s(Nve);aAr=r(oEt,"gpt2"),oEt.forEach(t),nAr=r(IRe," \u2014 "),bH=n(IRe,"A",{href:!0});var rEt=s(bH);sAr=r(rEt,"FlaxGPT2LMHeadModel"),rEt.forEach(t),lAr=r(IRe," (OpenAI GPT-2 model)"),IRe.forEach(t),iAr=i(Ci),_M=n(Ci,"LI",{});var qRe=s(_M);jve=n(qRe,"STRONG",{});var tEt=s(jve);dAr=r(tEt,"gpt_neo"),tEt.forEach(t),cAr=r(qRe," \u2014 "),vH=n(qRe,"A",{href:!0});var aEt=s(vH);fAr=r(aEt,"FlaxGPTNeoForCausalLM"),aEt.forEach(t),mAr=r(qRe," (GPT Neo model)"),qRe.forEach(t),gAr=i(Ci),uM=n(Ci,"LI",{});var NRe=s(uM);Dve=n(NRe,"STRONG",{});var nEt=s(Dve);hAr=r(nEt,"gptj"),nEt.forEach(t),pAr=r(NRe," \u2014 "),FH=n(NRe,"A",{href:!0});var sEt=s(FH);_Ar=r(sEt,"FlaxGPTJForCausalLM"),sEt.forEach(t),uAr=r(NRe," (GPT-J model)"),NRe.forEach(t),bAr=i(Ci),bM=n(Ci,"LI",{});var jRe=s(bM);Gve=n(jRe,"STRONG",{});var lEt=s(Gve);vAr=r(lEt,"xglm"),lEt.forEach(t),FAr=r(jRe," \u2014 "),TH=n(jRe,"A",{href:!0});var iEt=s(TH);TAr=r(iEt,"FlaxXGLMForCausalLM"),iEt.forEach(t),MAr=r(jRe," (XGLM model)"),jRe.forEach(t),Ci.forEach(t),EAr=i(xa),Ove=n(xa,"P",{});var dEt=s(Ove);CAr=r(dEt,"Examples:"),dEt.forEach(t),wAr=i(xa),m(Ey.$$.fragment,xa),xa.forEach(t),Mi.forEach(t),N$e=i(c),gf=n(c,"H2",{class:!0});var Uqe=s(gf);vM=n(Uqe,"A",{id:!0,class:!0,href:!0});var cEt=s(vM);Vve=n(cEt,"SPAN",{});var fEt=s(Vve);m(Cy.$$.fragment,fEt),fEt.forEach(t),cEt.forEach(t),AAr=i(Uqe),Xve=n(Uqe,"SPAN",{});var mEt=s(Xve);yAr=r(mEt,"FlaxAutoModelForPreTraining"),mEt.forEach(t),Uqe.forEach(t),j$e=i(c),Pr=n(c,"DIV",{class:!0});var wi=s(Pr);m(wy.$$.fragment,wi),LAr=i(wi),hf=n(wi,"P",{});var GY=s(hf);xAr=r(GY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),MH=n(GY,"A",{href:!0});var gEt=s(MH);kAr=r(gEt,"from_pretrained()"),gEt.forEach(t),SAr=r(GY," class method or the "),EH=n(GY,"A",{href:!0});var hEt=s(EH);RAr=r(hEt,"from_config()"),hEt.forEach(t),BAr=r(GY,` class
method.`),GY.forEach(t),PAr=i(wi),Ay=n(wi,"P",{});var Jqe=s(Ay);$Ar=r(Jqe,"This class cannot be instantiated directly using "),zve=n(Jqe,"CODE",{});var pEt=s(zve);IAr=r(pEt,"__init__()"),pEt.forEach(t),qAr=r(Jqe," (throws an error)."),Jqe.forEach(t),NAr=i(wi),Lt=n(wi,"DIV",{class:!0});var Ai=s(Lt);m(yy.$$.fragment,Ai),jAr=i(Ai),Qve=n(Ai,"P",{});var _Et=s(Qve);DAr=r(_Et,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),_Et.forEach(t),GAr=i(Ai),pf=n(Ai,"P",{});var OY=s(pf);OAr=r(OY,`Note:
Loading a model from its configuration file does `),Wve=n(OY,"STRONG",{});var uEt=s(Wve);VAr=r(uEt,"not"),uEt.forEach(t),XAr=r(OY,` load the model weights. It only affects the
model\u2019s configuration. Use `),CH=n(OY,"A",{href:!0});var bEt=s(CH);zAr=r(bEt,"from_pretrained()"),bEt.forEach(t),QAr=r(OY," to load the model weights."),OY.forEach(t),WAr=i(Ai),Hve=n(Ai,"P",{});var vEt=s(Hve);HAr=r(vEt,"Examples:"),vEt.forEach(t),UAr=i(Ai),m(Ly.$$.fragment,Ai),Ai.forEach(t),JAr=i(wi),ko=n(wi,"DIV",{class:!0});var ka=s(ko);m(xy.$$.fragment,ka),YAr=i(ka),Uve=n(ka,"P",{});var FEt=s(Uve);KAr=r(FEt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),FEt.forEach(t),ZAr=i(ka),Rn=n(ka,"P",{});var IE=s(Rn);e0r=r(IE,"The model class to instantiate is selected based on the "),Jve=n(IE,"CODE",{});var TEt=s(Jve);o0r=r(TEt,"model_type"),TEt.forEach(t),r0r=r(IE,` property of the config object (either
passed as an argument or loaded from `),Yve=n(IE,"CODE",{});var MEt=s(Yve);t0r=r(MEt,"pretrained_model_name_or_path"),MEt.forEach(t),a0r=r(IE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kve=n(IE,"CODE",{});var EEt=s(Kve);n0r=r(EEt,"pretrained_model_name_or_path"),EEt.forEach(t),s0r=r(IE,":"),IE.forEach(t),l0r=i(ka),he=n(ka,"UL",{});var be=s(he);FM=n(be,"LI",{});var DRe=s(FM);Zve=n(DRe,"STRONG",{});var CEt=s(Zve);i0r=r(CEt,"albert"),CEt.forEach(t),d0r=r(DRe," \u2014 "),wH=n(DRe,"A",{href:!0});var wEt=s(wH);c0r=r(wEt,"FlaxAlbertForPreTraining"),wEt.forEach(t),f0r=r(DRe," (ALBERT model)"),DRe.forEach(t),m0r=i(be),TM=n(be,"LI",{});var GRe=s(TM);eFe=n(GRe,"STRONG",{});var AEt=s(eFe);g0r=r(AEt,"bart"),AEt.forEach(t),h0r=r(GRe," \u2014 "),AH=n(GRe,"A",{href:!0});var yEt=s(AH);p0r=r(yEt,"FlaxBartForConditionalGeneration"),yEt.forEach(t),_0r=r(GRe," (BART model)"),GRe.forEach(t),u0r=i(be),MM=n(be,"LI",{});var ORe=s(MM);oFe=n(ORe,"STRONG",{});var LEt=s(oFe);b0r=r(LEt,"bert"),LEt.forEach(t),v0r=r(ORe," \u2014 "),yH=n(ORe,"A",{href:!0});var xEt=s(yH);F0r=r(xEt,"FlaxBertForPreTraining"),xEt.forEach(t),T0r=r(ORe," (BERT model)"),ORe.forEach(t),M0r=i(be),EM=n(be,"LI",{});var VRe=s(EM);rFe=n(VRe,"STRONG",{});var kEt=s(rFe);E0r=r(kEt,"big_bird"),kEt.forEach(t),C0r=r(VRe," \u2014 "),LH=n(VRe,"A",{href:!0});var SEt=s(LH);w0r=r(SEt,"FlaxBigBirdForPreTraining"),SEt.forEach(t),A0r=r(VRe," (BigBird model)"),VRe.forEach(t),y0r=i(be),CM=n(be,"LI",{});var XRe=s(CM);tFe=n(XRe,"STRONG",{});var REt=s(tFe);L0r=r(REt,"electra"),REt.forEach(t),x0r=r(XRe," \u2014 "),xH=n(XRe,"A",{href:!0});var BEt=s(xH);k0r=r(BEt,"FlaxElectraForPreTraining"),BEt.forEach(t),S0r=r(XRe," (ELECTRA model)"),XRe.forEach(t),R0r=i(be),wM=n(be,"LI",{});var zRe=s(wM);aFe=n(zRe,"STRONG",{});var PEt=s(aFe);B0r=r(PEt,"mbart"),PEt.forEach(t),P0r=r(zRe," \u2014 "),kH=n(zRe,"A",{href:!0});var $Et=s(kH);$0r=r($Et,"FlaxMBartForConditionalGeneration"),$Et.forEach(t),I0r=r(zRe," (mBART model)"),zRe.forEach(t),q0r=i(be),AM=n(be,"LI",{});var QRe=s(AM);nFe=n(QRe,"STRONG",{});var IEt=s(nFe);N0r=r(IEt,"mt5"),IEt.forEach(t),j0r=r(QRe," \u2014 "),SH=n(QRe,"A",{href:!0});var qEt=s(SH);D0r=r(qEt,"FlaxMT5ForConditionalGeneration"),qEt.forEach(t),G0r=r(QRe," (mT5 model)"),QRe.forEach(t),O0r=i(be),yM=n(be,"LI",{});var WRe=s(yM);sFe=n(WRe,"STRONG",{});var NEt=s(sFe);V0r=r(NEt,"roberta"),NEt.forEach(t),X0r=r(WRe," \u2014 "),RH=n(WRe,"A",{href:!0});var jEt=s(RH);z0r=r(jEt,"FlaxRobertaForMaskedLM"),jEt.forEach(t),Q0r=r(WRe," (RoBERTa model)"),WRe.forEach(t),W0r=i(be),LM=n(be,"LI",{});var HRe=s(LM);lFe=n(HRe,"STRONG",{});var DEt=s(lFe);H0r=r(DEt,"roformer"),DEt.forEach(t),U0r=r(HRe," \u2014 "),BH=n(HRe,"A",{href:!0});var GEt=s(BH);J0r=r(GEt,"FlaxRoFormerForMaskedLM"),GEt.forEach(t),Y0r=r(HRe," (RoFormer model)"),HRe.forEach(t),K0r=i(be),xM=n(be,"LI",{});var URe=s(xM);iFe=n(URe,"STRONG",{});var OEt=s(iFe);Z0r=r(OEt,"t5"),OEt.forEach(t),eyr=r(URe," \u2014 "),PH=n(URe,"A",{href:!0});var VEt=s(PH);oyr=r(VEt,"FlaxT5ForConditionalGeneration"),VEt.forEach(t),ryr=r(URe," (T5 model)"),URe.forEach(t),tyr=i(be),kM=n(be,"LI",{});var JRe=s(kM);dFe=n(JRe,"STRONG",{});var XEt=s(dFe);ayr=r(XEt,"wav2vec2"),XEt.forEach(t),nyr=r(JRe," \u2014 "),$H=n(JRe,"A",{href:!0});var zEt=s($H);syr=r(zEt,"FlaxWav2Vec2ForPreTraining"),zEt.forEach(t),lyr=r(JRe," (Wav2Vec2 model)"),JRe.forEach(t),iyr=i(be),SM=n(be,"LI",{});var YRe=s(SM);cFe=n(YRe,"STRONG",{});var QEt=s(cFe);dyr=r(QEt,"xlm-roberta"),QEt.forEach(t),cyr=r(YRe," \u2014 "),IH=n(YRe,"A",{href:!0});var WEt=s(IH);fyr=r(WEt,"FlaxXLMRobertaForMaskedLM"),WEt.forEach(t),myr=r(YRe," (XLM-RoBERTa model)"),YRe.forEach(t),be.forEach(t),gyr=i(ka),fFe=n(ka,"P",{});var HEt=s(fFe);hyr=r(HEt,"Examples:"),HEt.forEach(t),pyr=i(ka),m(ky.$$.fragment,ka),ka.forEach(t),wi.forEach(t),D$e=i(c),_f=n(c,"H2",{class:!0});var Yqe=s(_f);RM=n(Yqe,"A",{id:!0,class:!0,href:!0});var UEt=s(RM);mFe=n(UEt,"SPAN",{});var JEt=s(mFe);m(Sy.$$.fragment,JEt),JEt.forEach(t),UEt.forEach(t),_yr=i(Yqe),gFe=n(Yqe,"SPAN",{});var YEt=s(gFe);uyr=r(YEt,"FlaxAutoModelForMaskedLM"),YEt.forEach(t),Yqe.forEach(t),G$e=i(c),$r=n(c,"DIV",{class:!0});var yi=s($r);m(Ry.$$.fragment,yi),byr=i(yi),uf=n(yi,"P",{});var VY=s(uf);vyr=r(VY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),qH=n(VY,"A",{href:!0});var KEt=s(qH);Fyr=r(KEt,"from_pretrained()"),KEt.forEach(t),Tyr=r(VY," class method or the "),NH=n(VY,"A",{href:!0});var ZEt=s(NH);Myr=r(ZEt,"from_config()"),ZEt.forEach(t),Eyr=r(VY,` class
method.`),VY.forEach(t),Cyr=i(yi),By=n(yi,"P",{});var Kqe=s(By);wyr=r(Kqe,"This class cannot be instantiated directly using "),hFe=n(Kqe,"CODE",{});var e3t=s(hFe);Ayr=r(e3t,"__init__()"),e3t.forEach(t),yyr=r(Kqe," (throws an error)."),Kqe.forEach(t),Lyr=i(yi),xt=n(yi,"DIV",{class:!0});var Li=s(xt);m(Py.$$.fragment,Li),xyr=i(Li),pFe=n(Li,"P",{});var o3t=s(pFe);kyr=r(o3t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),o3t.forEach(t),Syr=i(Li),bf=n(Li,"P",{});var XY=s(bf);Ryr=r(XY,`Note:
Loading a model from its configuration file does `),_Fe=n(XY,"STRONG",{});var r3t=s(_Fe);Byr=r(r3t,"not"),r3t.forEach(t),Pyr=r(XY,` load the model weights. It only affects the
model\u2019s configuration. Use `),jH=n(XY,"A",{href:!0});var t3t=s(jH);$yr=r(t3t,"from_pretrained()"),t3t.forEach(t),Iyr=r(XY," to load the model weights."),XY.forEach(t),qyr=i(Li),uFe=n(Li,"P",{});var a3t=s(uFe);Nyr=r(a3t,"Examples:"),a3t.forEach(t),jyr=i(Li),m($y.$$.fragment,Li),Li.forEach(t),Dyr=i(yi),So=n(yi,"DIV",{class:!0});var Sa=s(So);m(Iy.$$.fragment,Sa),Gyr=i(Sa),bFe=n(Sa,"P",{});var n3t=s(bFe);Oyr=r(n3t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),n3t.forEach(t),Vyr=i(Sa),Bn=n(Sa,"P",{});var qE=s(Bn);Xyr=r(qE,"The model class to instantiate is selected based on the "),vFe=n(qE,"CODE",{});var s3t=s(vFe);zyr=r(s3t,"model_type"),s3t.forEach(t),Qyr=r(qE,` property of the config object (either
passed as an argument or loaded from `),FFe=n(qE,"CODE",{});var l3t=s(FFe);Wyr=r(l3t,"pretrained_model_name_or_path"),l3t.forEach(t),Hyr=r(qE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TFe=n(qE,"CODE",{});var i3t=s(TFe);Uyr=r(i3t,"pretrained_model_name_or_path"),i3t.forEach(t),Jyr=r(qE,":"),qE.forEach(t),Yyr=i(Sa),Te=n(Sa,"UL",{});var Le=s(Te);BM=n(Le,"LI",{});var KRe=s(BM);MFe=n(KRe,"STRONG",{});var d3t=s(MFe);Kyr=r(d3t,"albert"),d3t.forEach(t),Zyr=r(KRe," \u2014 "),DH=n(KRe,"A",{href:!0});var c3t=s(DH);eLr=r(c3t,"FlaxAlbertForMaskedLM"),c3t.forEach(t),oLr=r(KRe," (ALBERT model)"),KRe.forEach(t),rLr=i(Le),PM=n(Le,"LI",{});var ZRe=s(PM);EFe=n(ZRe,"STRONG",{});var f3t=s(EFe);tLr=r(f3t,"bart"),f3t.forEach(t),aLr=r(ZRe," \u2014 "),GH=n(ZRe,"A",{href:!0});var m3t=s(GH);nLr=r(m3t,"FlaxBartForConditionalGeneration"),m3t.forEach(t),sLr=r(ZRe," (BART model)"),ZRe.forEach(t),lLr=i(Le),$M=n(Le,"LI",{});var eBe=s($M);CFe=n(eBe,"STRONG",{});var g3t=s(CFe);iLr=r(g3t,"bert"),g3t.forEach(t),dLr=r(eBe," \u2014 "),OH=n(eBe,"A",{href:!0});var h3t=s(OH);cLr=r(h3t,"FlaxBertForMaskedLM"),h3t.forEach(t),fLr=r(eBe," (BERT model)"),eBe.forEach(t),mLr=i(Le),IM=n(Le,"LI",{});var oBe=s(IM);wFe=n(oBe,"STRONG",{});var p3t=s(wFe);gLr=r(p3t,"big_bird"),p3t.forEach(t),hLr=r(oBe," \u2014 "),VH=n(oBe,"A",{href:!0});var _3t=s(VH);pLr=r(_3t,"FlaxBigBirdForMaskedLM"),_3t.forEach(t),_Lr=r(oBe," (BigBird model)"),oBe.forEach(t),uLr=i(Le),qM=n(Le,"LI",{});var rBe=s(qM);AFe=n(rBe,"STRONG",{});var u3t=s(AFe);bLr=r(u3t,"distilbert"),u3t.forEach(t),vLr=r(rBe," \u2014 "),XH=n(rBe,"A",{href:!0});var b3t=s(XH);FLr=r(b3t,"FlaxDistilBertForMaskedLM"),b3t.forEach(t),TLr=r(rBe," (DistilBERT model)"),rBe.forEach(t),MLr=i(Le),NM=n(Le,"LI",{});var tBe=s(NM);yFe=n(tBe,"STRONG",{});var v3t=s(yFe);ELr=r(v3t,"electra"),v3t.forEach(t),CLr=r(tBe," \u2014 "),zH=n(tBe,"A",{href:!0});var F3t=s(zH);wLr=r(F3t,"FlaxElectraForMaskedLM"),F3t.forEach(t),ALr=r(tBe," (ELECTRA model)"),tBe.forEach(t),yLr=i(Le),jM=n(Le,"LI",{});var aBe=s(jM);LFe=n(aBe,"STRONG",{});var T3t=s(LFe);LLr=r(T3t,"mbart"),T3t.forEach(t),xLr=r(aBe," \u2014 "),QH=n(aBe,"A",{href:!0});var M3t=s(QH);kLr=r(M3t,"FlaxMBartForConditionalGeneration"),M3t.forEach(t),SLr=r(aBe," (mBART model)"),aBe.forEach(t),RLr=i(Le),DM=n(Le,"LI",{});var nBe=s(DM);xFe=n(nBe,"STRONG",{});var E3t=s(xFe);BLr=r(E3t,"roberta"),E3t.forEach(t),PLr=r(nBe," \u2014 "),WH=n(nBe,"A",{href:!0});var C3t=s(WH);$Lr=r(C3t,"FlaxRobertaForMaskedLM"),C3t.forEach(t),ILr=r(nBe," (RoBERTa model)"),nBe.forEach(t),qLr=i(Le),GM=n(Le,"LI",{});var sBe=s(GM);kFe=n(sBe,"STRONG",{});var w3t=s(kFe);NLr=r(w3t,"roformer"),w3t.forEach(t),jLr=r(sBe," \u2014 "),HH=n(sBe,"A",{href:!0});var A3t=s(HH);DLr=r(A3t,"FlaxRoFormerForMaskedLM"),A3t.forEach(t),GLr=r(sBe," (RoFormer model)"),sBe.forEach(t),OLr=i(Le),OM=n(Le,"LI",{});var lBe=s(OM);SFe=n(lBe,"STRONG",{});var y3t=s(SFe);VLr=r(y3t,"xlm-roberta"),y3t.forEach(t),XLr=r(lBe," \u2014 "),UH=n(lBe,"A",{href:!0});var L3t=s(UH);zLr=r(L3t,"FlaxXLMRobertaForMaskedLM"),L3t.forEach(t),QLr=r(lBe," (XLM-RoBERTa model)"),lBe.forEach(t),Le.forEach(t),WLr=i(Sa),RFe=n(Sa,"P",{});var x3t=s(RFe);HLr=r(x3t,"Examples:"),x3t.forEach(t),ULr=i(Sa),m(qy.$$.fragment,Sa),Sa.forEach(t),yi.forEach(t),O$e=i(c),vf=n(c,"H2",{class:!0});var Zqe=s(vf);VM=n(Zqe,"A",{id:!0,class:!0,href:!0});var k3t=s(VM);BFe=n(k3t,"SPAN",{});var S3t=s(BFe);m(Ny.$$.fragment,S3t),S3t.forEach(t),k3t.forEach(t),JLr=i(Zqe),PFe=n(Zqe,"SPAN",{});var R3t=s(PFe);YLr=r(R3t,"FlaxAutoModelForSeq2SeqLM"),R3t.forEach(t),Zqe.forEach(t),V$e=i(c),Ir=n(c,"DIV",{class:!0});var xi=s(Ir);m(jy.$$.fragment,xi),KLr=i(xi),Ff=n(xi,"P",{});var zY=s(Ff);ZLr=r(zY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),JH=n(zY,"A",{href:!0});var B3t=s(JH);e9r=r(B3t,"from_pretrained()"),B3t.forEach(t),o9r=r(zY," class method or the "),YH=n(zY,"A",{href:!0});var P3t=s(YH);r9r=r(P3t,"from_config()"),P3t.forEach(t),t9r=r(zY,` class
method.`),zY.forEach(t),a9r=i(xi),Dy=n(xi,"P",{});var eNe=s(Dy);n9r=r(eNe,"This class cannot be instantiated directly using "),$Fe=n(eNe,"CODE",{});var $3t=s($Fe);s9r=r($3t,"__init__()"),$3t.forEach(t),l9r=r(eNe," (throws an error)."),eNe.forEach(t),i9r=i(xi),kt=n(xi,"DIV",{class:!0});var ki=s(kt);m(Gy.$$.fragment,ki),d9r=i(ki),IFe=n(ki,"P",{});var I3t=s(IFe);c9r=r(I3t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),I3t.forEach(t),f9r=i(ki),Tf=n(ki,"P",{});var QY=s(Tf);m9r=r(QY,`Note:
Loading a model from its configuration file does `),qFe=n(QY,"STRONG",{});var q3t=s(qFe);g9r=r(q3t,"not"),q3t.forEach(t),h9r=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),KH=n(QY,"A",{href:!0});var N3t=s(KH);p9r=r(N3t,"from_pretrained()"),N3t.forEach(t),_9r=r(QY," to load the model weights."),QY.forEach(t),u9r=i(ki),NFe=n(ki,"P",{});var j3t=s(NFe);b9r=r(j3t,"Examples:"),j3t.forEach(t),v9r=i(ki),m(Oy.$$.fragment,ki),ki.forEach(t),F9r=i(xi),Ro=n(xi,"DIV",{class:!0});var Ra=s(Ro);m(Vy.$$.fragment,Ra),T9r=i(Ra),jFe=n(Ra,"P",{});var D3t=s(jFe);M9r=r(D3t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),D3t.forEach(t),E9r=i(Ra),Pn=n(Ra,"P",{});var NE=s(Pn);C9r=r(NE,"The model class to instantiate is selected based on the "),DFe=n(NE,"CODE",{});var G3t=s(DFe);w9r=r(G3t,"model_type"),G3t.forEach(t),A9r=r(NE,` property of the config object (either
passed as an argument or loaded from `),GFe=n(NE,"CODE",{});var O3t=s(GFe);y9r=r(O3t,"pretrained_model_name_or_path"),O3t.forEach(t),L9r=r(NE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),OFe=n(NE,"CODE",{});var V3t=s(OFe);x9r=r(V3t,"pretrained_model_name_or_path"),V3t.forEach(t),k9r=r(NE,":"),NE.forEach(t),S9r=i(Ra),we=n(Ra,"UL",{});var lo=s(we);XM=n(lo,"LI",{});var iBe=s(XM);VFe=n(iBe,"STRONG",{});var X3t=s(VFe);R9r=r(X3t,"bart"),X3t.forEach(t),B9r=r(iBe," \u2014 "),ZH=n(iBe,"A",{href:!0});var z3t=s(ZH);P9r=r(z3t,"FlaxBartForConditionalGeneration"),z3t.forEach(t),$9r=r(iBe," (BART model)"),iBe.forEach(t),I9r=i(lo),zM=n(lo,"LI",{});var dBe=s(zM);XFe=n(dBe,"STRONG",{});var Q3t=s(XFe);q9r=r(Q3t,"blenderbot"),Q3t.forEach(t),N9r=r(dBe," \u2014 "),eU=n(dBe,"A",{href:!0});var W3t=s(eU);j9r=r(W3t,"FlaxBlenderbotForConditionalGeneration"),W3t.forEach(t),D9r=r(dBe," (Blenderbot model)"),dBe.forEach(t),G9r=i(lo),QM=n(lo,"LI",{});var cBe=s(QM);zFe=n(cBe,"STRONG",{});var H3t=s(zFe);O9r=r(H3t,"blenderbot-small"),H3t.forEach(t),V9r=r(cBe," \u2014 "),oU=n(cBe,"A",{href:!0});var U3t=s(oU);X9r=r(U3t,"FlaxBlenderbotSmallForConditionalGeneration"),U3t.forEach(t),z9r=r(cBe," (BlenderbotSmall model)"),cBe.forEach(t),Q9r=i(lo),WM=n(lo,"LI",{});var fBe=s(WM);QFe=n(fBe,"STRONG",{});var J3t=s(QFe);W9r=r(J3t,"encoder-decoder"),J3t.forEach(t),H9r=r(fBe," \u2014 "),rU=n(fBe,"A",{href:!0});var Y3t=s(rU);U9r=r(Y3t,"FlaxEncoderDecoderModel"),Y3t.forEach(t),J9r=r(fBe," (Encoder decoder model)"),fBe.forEach(t),Y9r=i(lo),HM=n(lo,"LI",{});var mBe=s(HM);WFe=n(mBe,"STRONG",{});var K3t=s(WFe);K9r=r(K3t,"marian"),K3t.forEach(t),Z9r=r(mBe," \u2014 "),tU=n(mBe,"A",{href:!0});var Z3t=s(tU);exr=r(Z3t,"FlaxMarianMTModel"),Z3t.forEach(t),oxr=r(mBe," (Marian model)"),mBe.forEach(t),rxr=i(lo),UM=n(lo,"LI",{});var gBe=s(UM);HFe=n(gBe,"STRONG",{});var eCt=s(HFe);txr=r(eCt,"mbart"),eCt.forEach(t),axr=r(gBe," \u2014 "),aU=n(gBe,"A",{href:!0});var oCt=s(aU);nxr=r(oCt,"FlaxMBartForConditionalGeneration"),oCt.forEach(t),sxr=r(gBe," (mBART model)"),gBe.forEach(t),lxr=i(lo),JM=n(lo,"LI",{});var hBe=s(JM);UFe=n(hBe,"STRONG",{});var rCt=s(UFe);ixr=r(rCt,"mt5"),rCt.forEach(t),dxr=r(hBe," \u2014 "),nU=n(hBe,"A",{href:!0});var tCt=s(nU);cxr=r(tCt,"FlaxMT5ForConditionalGeneration"),tCt.forEach(t),fxr=r(hBe," (mT5 model)"),hBe.forEach(t),mxr=i(lo),YM=n(lo,"LI",{});var pBe=s(YM);JFe=n(pBe,"STRONG",{});var aCt=s(JFe);gxr=r(aCt,"pegasus"),aCt.forEach(t),hxr=r(pBe," \u2014 "),sU=n(pBe,"A",{href:!0});var nCt=s(sU);pxr=r(nCt,"FlaxPegasusForConditionalGeneration"),nCt.forEach(t),_xr=r(pBe," (Pegasus model)"),pBe.forEach(t),uxr=i(lo),KM=n(lo,"LI",{});var _Be=s(KM);YFe=n(_Be,"STRONG",{});var sCt=s(YFe);bxr=r(sCt,"t5"),sCt.forEach(t),vxr=r(_Be," \u2014 "),lU=n(_Be,"A",{href:!0});var lCt=s(lU);Fxr=r(lCt,"FlaxT5ForConditionalGeneration"),lCt.forEach(t),Txr=r(_Be," (T5 model)"),_Be.forEach(t),lo.forEach(t),Mxr=i(Ra),KFe=n(Ra,"P",{});var iCt=s(KFe);Exr=r(iCt,"Examples:"),iCt.forEach(t),Cxr=i(Ra),m(Xy.$$.fragment,Ra),Ra.forEach(t),xi.forEach(t),X$e=i(c),Mf=n(c,"H2",{class:!0});var oNe=s(Mf);ZM=n(oNe,"A",{id:!0,class:!0,href:!0});var dCt=s(ZM);ZFe=n(dCt,"SPAN",{});var cCt=s(ZFe);m(zy.$$.fragment,cCt),cCt.forEach(t),dCt.forEach(t),wxr=i(oNe),eTe=n(oNe,"SPAN",{});var fCt=s(eTe);Axr=r(fCt,"FlaxAutoModelForSequenceClassification"),fCt.forEach(t),oNe.forEach(t),z$e=i(c),qr=n(c,"DIV",{class:!0});var Si=s(qr);m(Qy.$$.fragment,Si),yxr=i(Si),Ef=n(Si,"P",{});var WY=s(Ef);Lxr=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),iU=n(WY,"A",{href:!0});var mCt=s(iU);xxr=r(mCt,"from_pretrained()"),mCt.forEach(t),kxr=r(WY," class method or the "),dU=n(WY,"A",{href:!0});var gCt=s(dU);Sxr=r(gCt,"from_config()"),gCt.forEach(t),Rxr=r(WY,` class
method.`),WY.forEach(t),Bxr=i(Si),Wy=n(Si,"P",{});var rNe=s(Wy);Pxr=r(rNe,"This class cannot be instantiated directly using "),oTe=n(rNe,"CODE",{});var hCt=s(oTe);$xr=r(hCt,"__init__()"),hCt.forEach(t),Ixr=r(rNe," (throws an error)."),rNe.forEach(t),qxr=i(Si),St=n(Si,"DIV",{class:!0});var Ri=s(St);m(Hy.$$.fragment,Ri),Nxr=i(Ri),rTe=n(Ri,"P",{});var pCt=s(rTe);jxr=r(pCt,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),pCt.forEach(t),Dxr=i(Ri),Cf=n(Ri,"P",{});var HY=s(Cf);Gxr=r(HY,`Note:
Loading a model from its configuration file does `),tTe=n(HY,"STRONG",{});var _Ct=s(tTe);Oxr=r(_Ct,"not"),_Ct.forEach(t),Vxr=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),cU=n(HY,"A",{href:!0});var uCt=s(cU);Xxr=r(uCt,"from_pretrained()"),uCt.forEach(t),zxr=r(HY," to load the model weights."),HY.forEach(t),Qxr=i(Ri),aTe=n(Ri,"P",{});var bCt=s(aTe);Wxr=r(bCt,"Examples:"),bCt.forEach(t),Hxr=i(Ri),m(Uy.$$.fragment,Ri),Ri.forEach(t),Uxr=i(Si),Bo=n(Si,"DIV",{class:!0});var Ba=s(Bo);m(Jy.$$.fragment,Ba),Jxr=i(Ba),nTe=n(Ba,"P",{});var vCt=s(nTe);Yxr=r(vCt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),vCt.forEach(t),Kxr=i(Ba),$n=n(Ba,"P",{});var jE=s($n);Zxr=r(jE,"The model class to instantiate is selected based on the "),sTe=n(jE,"CODE",{});var FCt=s(sTe);ekr=r(FCt,"model_type"),FCt.forEach(t),okr=r(jE,` property of the config object (either
passed as an argument or loaded from `),lTe=n(jE,"CODE",{});var TCt=s(lTe);rkr=r(TCt,"pretrained_model_name_or_path"),TCt.forEach(t),tkr=r(jE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),iTe=n(jE,"CODE",{});var MCt=s(iTe);akr=r(MCt,"pretrained_model_name_or_path"),MCt.forEach(t),nkr=r(jE,":"),jE.forEach(t),skr=i(Ba),Me=n(Ba,"UL",{});var xe=s(Me);e4=n(xe,"LI",{});var uBe=s(e4);dTe=n(uBe,"STRONG",{});var ECt=s(dTe);lkr=r(ECt,"albert"),ECt.forEach(t),ikr=r(uBe," \u2014 "),fU=n(uBe,"A",{href:!0});var CCt=s(fU);dkr=r(CCt,"FlaxAlbertForSequenceClassification"),CCt.forEach(t),ckr=r(uBe," (ALBERT model)"),uBe.forEach(t),fkr=i(xe),o4=n(xe,"LI",{});var bBe=s(o4);cTe=n(bBe,"STRONG",{});var wCt=s(cTe);mkr=r(wCt,"bart"),wCt.forEach(t),gkr=r(bBe," \u2014 "),mU=n(bBe,"A",{href:!0});var ACt=s(mU);hkr=r(ACt,"FlaxBartForSequenceClassification"),ACt.forEach(t),pkr=r(bBe," (BART model)"),bBe.forEach(t),_kr=i(xe),r4=n(xe,"LI",{});var vBe=s(r4);fTe=n(vBe,"STRONG",{});var yCt=s(fTe);ukr=r(yCt,"bert"),yCt.forEach(t),bkr=r(vBe," \u2014 "),gU=n(vBe,"A",{href:!0});var LCt=s(gU);vkr=r(LCt,"FlaxBertForSequenceClassification"),LCt.forEach(t),Fkr=r(vBe," (BERT model)"),vBe.forEach(t),Tkr=i(xe),t4=n(xe,"LI",{});var FBe=s(t4);mTe=n(FBe,"STRONG",{});var xCt=s(mTe);Mkr=r(xCt,"big_bird"),xCt.forEach(t),Ekr=r(FBe," \u2014 "),hU=n(FBe,"A",{href:!0});var kCt=s(hU);Ckr=r(kCt,"FlaxBigBirdForSequenceClassification"),kCt.forEach(t),wkr=r(FBe," (BigBird model)"),FBe.forEach(t),Akr=i(xe),a4=n(xe,"LI",{});var TBe=s(a4);gTe=n(TBe,"STRONG",{});var SCt=s(gTe);ykr=r(SCt,"distilbert"),SCt.forEach(t),Lkr=r(TBe," \u2014 "),pU=n(TBe,"A",{href:!0});var RCt=s(pU);xkr=r(RCt,"FlaxDistilBertForSequenceClassification"),RCt.forEach(t),kkr=r(TBe," (DistilBERT model)"),TBe.forEach(t),Skr=i(xe),n4=n(xe,"LI",{});var MBe=s(n4);hTe=n(MBe,"STRONG",{});var BCt=s(hTe);Rkr=r(BCt,"electra"),BCt.forEach(t),Bkr=r(MBe," \u2014 "),_U=n(MBe,"A",{href:!0});var PCt=s(_U);Pkr=r(PCt,"FlaxElectraForSequenceClassification"),PCt.forEach(t),$kr=r(MBe," (ELECTRA model)"),MBe.forEach(t),Ikr=i(xe),s4=n(xe,"LI",{});var EBe=s(s4);pTe=n(EBe,"STRONG",{});var $Ct=s(pTe);qkr=r($Ct,"mbart"),$Ct.forEach(t),Nkr=r(EBe," \u2014 "),uU=n(EBe,"A",{href:!0});var ICt=s(uU);jkr=r(ICt,"FlaxMBartForSequenceClassification"),ICt.forEach(t),Dkr=r(EBe," (mBART model)"),EBe.forEach(t),Gkr=i(xe),l4=n(xe,"LI",{});var CBe=s(l4);_Te=n(CBe,"STRONG",{});var qCt=s(_Te);Okr=r(qCt,"roberta"),qCt.forEach(t),Vkr=r(CBe," \u2014 "),bU=n(CBe,"A",{href:!0});var NCt=s(bU);Xkr=r(NCt,"FlaxRobertaForSequenceClassification"),NCt.forEach(t),zkr=r(CBe," (RoBERTa model)"),CBe.forEach(t),Qkr=i(xe),i4=n(xe,"LI",{});var wBe=s(i4);uTe=n(wBe,"STRONG",{});var jCt=s(uTe);Wkr=r(jCt,"roformer"),jCt.forEach(t),Hkr=r(wBe," \u2014 "),vU=n(wBe,"A",{href:!0});var DCt=s(vU);Ukr=r(DCt,"FlaxRoFormerForSequenceClassification"),DCt.forEach(t),Jkr=r(wBe," (RoFormer model)"),wBe.forEach(t),Ykr=i(xe),d4=n(xe,"LI",{});var ABe=s(d4);bTe=n(ABe,"STRONG",{});var GCt=s(bTe);Kkr=r(GCt,"xlm-roberta"),GCt.forEach(t),Zkr=r(ABe," \u2014 "),FU=n(ABe,"A",{href:!0});var OCt=s(FU);eSr=r(OCt,"FlaxXLMRobertaForSequenceClassification"),OCt.forEach(t),oSr=r(ABe," (XLM-RoBERTa model)"),ABe.forEach(t),xe.forEach(t),rSr=i(Ba),vTe=n(Ba,"P",{});var VCt=s(vTe);tSr=r(VCt,"Examples:"),VCt.forEach(t),aSr=i(Ba),m(Yy.$$.fragment,Ba),Ba.forEach(t),Si.forEach(t),Q$e=i(c),wf=n(c,"H2",{class:!0});var tNe=s(wf);c4=n(tNe,"A",{id:!0,class:!0,href:!0});var XCt=s(c4);FTe=n(XCt,"SPAN",{});var zCt=s(FTe);m(Ky.$$.fragment,zCt),zCt.forEach(t),XCt.forEach(t),nSr=i(tNe),TTe=n(tNe,"SPAN",{});var QCt=s(TTe);sSr=r(QCt,"FlaxAutoModelForQuestionAnswering"),QCt.forEach(t),tNe.forEach(t),W$e=i(c),Nr=n(c,"DIV",{class:!0});var Bi=s(Nr);m(Zy.$$.fragment,Bi),lSr=i(Bi),Af=n(Bi,"P",{});var UY=s(Af);iSr=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),TU=n(UY,"A",{href:!0});var WCt=s(TU);dSr=r(WCt,"from_pretrained()"),WCt.forEach(t),cSr=r(UY," class method or the "),MU=n(UY,"A",{href:!0});var HCt=s(MU);fSr=r(HCt,"from_config()"),HCt.forEach(t),mSr=r(UY,` class
method.`),UY.forEach(t),gSr=i(Bi),eL=n(Bi,"P",{});var aNe=s(eL);hSr=r(aNe,"This class cannot be instantiated directly using "),MTe=n(aNe,"CODE",{});var UCt=s(MTe);pSr=r(UCt,"__init__()"),UCt.forEach(t),_Sr=r(aNe," (throws an error)."),aNe.forEach(t),uSr=i(Bi),Rt=n(Bi,"DIV",{class:!0});var Pi=s(Rt);m(oL.$$.fragment,Pi),bSr=i(Pi),ETe=n(Pi,"P",{});var JCt=s(ETe);vSr=r(JCt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JCt.forEach(t),FSr=i(Pi),yf=n(Pi,"P",{});var JY=s(yf);TSr=r(JY,`Note:
Loading a model from its configuration file does `),CTe=n(JY,"STRONG",{});var YCt=s(CTe);MSr=r(YCt,"not"),YCt.forEach(t),ESr=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),EU=n(JY,"A",{href:!0});var KCt=s(EU);CSr=r(KCt,"from_pretrained()"),KCt.forEach(t),wSr=r(JY," to load the model weights."),JY.forEach(t),ASr=i(Pi),wTe=n(Pi,"P",{});var ZCt=s(wTe);ySr=r(ZCt,"Examples:"),ZCt.forEach(t),LSr=i(Pi),m(rL.$$.fragment,Pi),Pi.forEach(t),xSr=i(Bi),Po=n(Bi,"DIV",{class:!0});var Pa=s(Po);m(tL.$$.fragment,Pa),kSr=i(Pa),ATe=n(Pa,"P",{});var ewt=s(ATe);SSr=r(ewt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),ewt.forEach(t),RSr=i(Pa),In=n(Pa,"P",{});var DE=s(In);BSr=r(DE,"The model class to instantiate is selected based on the "),yTe=n(DE,"CODE",{});var owt=s(yTe);PSr=r(owt,"model_type"),owt.forEach(t),$Sr=r(DE,` property of the config object (either
passed as an argument or loaded from `),LTe=n(DE,"CODE",{});var rwt=s(LTe);ISr=r(rwt,"pretrained_model_name_or_path"),rwt.forEach(t),qSr=r(DE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xTe=n(DE,"CODE",{});var twt=s(xTe);NSr=r(twt,"pretrained_model_name_or_path"),twt.forEach(t),jSr=r(DE,":"),DE.forEach(t),DSr=i(Pa),Ee=n(Pa,"UL",{});var ke=s(Ee);f4=n(ke,"LI",{});var yBe=s(f4);kTe=n(yBe,"STRONG",{});var awt=s(kTe);GSr=r(awt,"albert"),awt.forEach(t),OSr=r(yBe," \u2014 "),CU=n(yBe,"A",{href:!0});var nwt=s(CU);VSr=r(nwt,"FlaxAlbertForQuestionAnswering"),nwt.forEach(t),XSr=r(yBe," (ALBERT model)"),yBe.forEach(t),zSr=i(ke),m4=n(ke,"LI",{});var LBe=s(m4);STe=n(LBe,"STRONG",{});var swt=s(STe);QSr=r(swt,"bart"),swt.forEach(t),WSr=r(LBe," \u2014 "),wU=n(LBe,"A",{href:!0});var lwt=s(wU);HSr=r(lwt,"FlaxBartForQuestionAnswering"),lwt.forEach(t),USr=r(LBe," (BART model)"),LBe.forEach(t),JSr=i(ke),g4=n(ke,"LI",{});var xBe=s(g4);RTe=n(xBe,"STRONG",{});var iwt=s(RTe);YSr=r(iwt,"bert"),iwt.forEach(t),KSr=r(xBe," \u2014 "),AU=n(xBe,"A",{href:!0});var dwt=s(AU);ZSr=r(dwt,"FlaxBertForQuestionAnswering"),dwt.forEach(t),eRr=r(xBe," (BERT model)"),xBe.forEach(t),oRr=i(ke),h4=n(ke,"LI",{});var kBe=s(h4);BTe=n(kBe,"STRONG",{});var cwt=s(BTe);rRr=r(cwt,"big_bird"),cwt.forEach(t),tRr=r(kBe," \u2014 "),yU=n(kBe,"A",{href:!0});var fwt=s(yU);aRr=r(fwt,"FlaxBigBirdForQuestionAnswering"),fwt.forEach(t),nRr=r(kBe," (BigBird model)"),kBe.forEach(t),sRr=i(ke),p4=n(ke,"LI",{});var SBe=s(p4);PTe=n(SBe,"STRONG",{});var mwt=s(PTe);lRr=r(mwt,"distilbert"),mwt.forEach(t),iRr=r(SBe," \u2014 "),LU=n(SBe,"A",{href:!0});var gwt=s(LU);dRr=r(gwt,"FlaxDistilBertForQuestionAnswering"),gwt.forEach(t),cRr=r(SBe," (DistilBERT model)"),SBe.forEach(t),fRr=i(ke),_4=n(ke,"LI",{});var RBe=s(_4);$Te=n(RBe,"STRONG",{});var hwt=s($Te);mRr=r(hwt,"electra"),hwt.forEach(t),gRr=r(RBe," \u2014 "),xU=n(RBe,"A",{href:!0});var pwt=s(xU);hRr=r(pwt,"FlaxElectraForQuestionAnswering"),pwt.forEach(t),pRr=r(RBe," (ELECTRA model)"),RBe.forEach(t),_Rr=i(ke),u4=n(ke,"LI",{});var BBe=s(u4);ITe=n(BBe,"STRONG",{});var _wt=s(ITe);uRr=r(_wt,"mbart"),_wt.forEach(t),bRr=r(BBe," \u2014 "),kU=n(BBe,"A",{href:!0});var uwt=s(kU);vRr=r(uwt,"FlaxMBartForQuestionAnswering"),uwt.forEach(t),FRr=r(BBe," (mBART model)"),BBe.forEach(t),TRr=i(ke),b4=n(ke,"LI",{});var PBe=s(b4);qTe=n(PBe,"STRONG",{});var bwt=s(qTe);MRr=r(bwt,"roberta"),bwt.forEach(t),ERr=r(PBe," \u2014 "),SU=n(PBe,"A",{href:!0});var vwt=s(SU);CRr=r(vwt,"FlaxRobertaForQuestionAnswering"),vwt.forEach(t),wRr=r(PBe," (RoBERTa model)"),PBe.forEach(t),ARr=i(ke),v4=n(ke,"LI",{});var $Be=s(v4);NTe=n($Be,"STRONG",{});var Fwt=s(NTe);yRr=r(Fwt,"roformer"),Fwt.forEach(t),LRr=r($Be," \u2014 "),RU=n($Be,"A",{href:!0});var Twt=s(RU);xRr=r(Twt,"FlaxRoFormerForQuestionAnswering"),Twt.forEach(t),kRr=r($Be," (RoFormer model)"),$Be.forEach(t),SRr=i(ke),F4=n(ke,"LI",{});var IBe=s(F4);jTe=n(IBe,"STRONG",{});var Mwt=s(jTe);RRr=r(Mwt,"xlm-roberta"),Mwt.forEach(t),BRr=r(IBe," \u2014 "),BU=n(IBe,"A",{href:!0});var Ewt=s(BU);PRr=r(Ewt,"FlaxXLMRobertaForQuestionAnswering"),Ewt.forEach(t),$Rr=r(IBe," (XLM-RoBERTa model)"),IBe.forEach(t),ke.forEach(t),IRr=i(Pa),DTe=n(Pa,"P",{});var Cwt=s(DTe);qRr=r(Cwt,"Examples:"),Cwt.forEach(t),NRr=i(Pa),m(aL.$$.fragment,Pa),Pa.forEach(t),Bi.forEach(t),H$e=i(c),Lf=n(c,"H2",{class:!0});var nNe=s(Lf);T4=n(nNe,"A",{id:!0,class:!0,href:!0});var wwt=s(T4);GTe=n(wwt,"SPAN",{});var Awt=s(GTe);m(nL.$$.fragment,Awt),Awt.forEach(t),wwt.forEach(t),jRr=i(nNe),OTe=n(nNe,"SPAN",{});var ywt=s(OTe);DRr=r(ywt,"FlaxAutoModelForTokenClassification"),ywt.forEach(t),nNe.forEach(t),U$e=i(c),jr=n(c,"DIV",{class:!0});var $i=s(jr);m(sL.$$.fragment,$i),GRr=i($i),xf=n($i,"P",{});var YY=s(xf);ORr=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),PU=n(YY,"A",{href:!0});var Lwt=s(PU);VRr=r(Lwt,"from_pretrained()"),Lwt.forEach(t),XRr=r(YY," class method or the "),$U=n(YY,"A",{href:!0});var xwt=s($U);zRr=r(xwt,"from_config()"),xwt.forEach(t),QRr=r(YY,` class
method.`),YY.forEach(t),WRr=i($i),lL=n($i,"P",{});var sNe=s(lL);HRr=r(sNe,"This class cannot be instantiated directly using "),VTe=n(sNe,"CODE",{});var kwt=s(VTe);URr=r(kwt,"__init__()"),kwt.forEach(t),JRr=r(sNe," (throws an error)."),sNe.forEach(t),YRr=i($i),Bt=n($i,"DIV",{class:!0});var Ii=s(Bt);m(iL.$$.fragment,Ii),KRr=i(Ii),XTe=n(Ii,"P",{});var Swt=s(XTe);ZRr=r(Swt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Swt.forEach(t),eBr=i(Ii),kf=n(Ii,"P",{});var KY=s(kf);oBr=r(KY,`Note:
Loading a model from its configuration file does `),zTe=n(KY,"STRONG",{});var Rwt=s(zTe);rBr=r(Rwt,"not"),Rwt.forEach(t),tBr=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IU=n(KY,"A",{href:!0});var Bwt=s(IU);aBr=r(Bwt,"from_pretrained()"),Bwt.forEach(t),nBr=r(KY," to load the model weights."),KY.forEach(t),sBr=i(Ii),QTe=n(Ii,"P",{});var Pwt=s(QTe);lBr=r(Pwt,"Examples:"),Pwt.forEach(t),iBr=i(Ii),m(dL.$$.fragment,Ii),Ii.forEach(t),dBr=i($i),$o=n($i,"DIV",{class:!0});var $a=s($o);m(cL.$$.fragment,$a),cBr=i($a),WTe=n($a,"P",{});var $wt=s(WTe);fBr=r($wt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),$wt.forEach(t),mBr=i($a),qn=n($a,"P",{});var GE=s(qn);gBr=r(GE,"The model class to instantiate is selected based on the "),HTe=n(GE,"CODE",{});var Iwt=s(HTe);hBr=r(Iwt,"model_type"),Iwt.forEach(t),pBr=r(GE,` property of the config object (either
passed as an argument or loaded from `),UTe=n(GE,"CODE",{});var qwt=s(UTe);_Br=r(qwt,"pretrained_model_name_or_path"),qwt.forEach(t),uBr=r(GE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),JTe=n(GE,"CODE",{});var Nwt=s(JTe);bBr=r(Nwt,"pretrained_model_name_or_path"),Nwt.forEach(t),vBr=r(GE,":"),GE.forEach(t),FBr=i($a),Pe=n($a,"UL",{});var Oo=s(Pe);M4=n(Oo,"LI",{});var qBe=s(M4);YTe=n(qBe,"STRONG",{});var jwt=s(YTe);TBr=r(jwt,"albert"),jwt.forEach(t),MBr=r(qBe," \u2014 "),qU=n(qBe,"A",{href:!0});var Dwt=s(qU);EBr=r(Dwt,"FlaxAlbertForTokenClassification"),Dwt.forEach(t),CBr=r(qBe," (ALBERT model)"),qBe.forEach(t),wBr=i(Oo),E4=n(Oo,"LI",{});var NBe=s(E4);KTe=n(NBe,"STRONG",{});var Gwt=s(KTe);ABr=r(Gwt,"bert"),Gwt.forEach(t),yBr=r(NBe," \u2014 "),NU=n(NBe,"A",{href:!0});var Owt=s(NU);LBr=r(Owt,"FlaxBertForTokenClassification"),Owt.forEach(t),xBr=r(NBe," (BERT model)"),NBe.forEach(t),kBr=i(Oo),C4=n(Oo,"LI",{});var jBe=s(C4);ZTe=n(jBe,"STRONG",{});var Vwt=s(ZTe);SBr=r(Vwt,"big_bird"),Vwt.forEach(t),RBr=r(jBe," \u2014 "),jU=n(jBe,"A",{href:!0});var Xwt=s(jU);BBr=r(Xwt,"FlaxBigBirdForTokenClassification"),Xwt.forEach(t),PBr=r(jBe," (BigBird model)"),jBe.forEach(t),$Br=i(Oo),w4=n(Oo,"LI",{});var DBe=s(w4);e8e=n(DBe,"STRONG",{});var zwt=s(e8e);IBr=r(zwt,"distilbert"),zwt.forEach(t),qBr=r(DBe," \u2014 "),DU=n(DBe,"A",{href:!0});var Qwt=s(DU);NBr=r(Qwt,"FlaxDistilBertForTokenClassification"),Qwt.forEach(t),jBr=r(DBe," (DistilBERT model)"),DBe.forEach(t),DBr=i(Oo),A4=n(Oo,"LI",{});var GBe=s(A4);o8e=n(GBe,"STRONG",{});var Wwt=s(o8e);GBr=r(Wwt,"electra"),Wwt.forEach(t),OBr=r(GBe," \u2014 "),GU=n(GBe,"A",{href:!0});var Hwt=s(GU);VBr=r(Hwt,"FlaxElectraForTokenClassification"),Hwt.forEach(t),XBr=r(GBe," (ELECTRA model)"),GBe.forEach(t),zBr=i(Oo),y4=n(Oo,"LI",{});var OBe=s(y4);r8e=n(OBe,"STRONG",{});var Uwt=s(r8e);QBr=r(Uwt,"roberta"),Uwt.forEach(t),WBr=r(OBe," \u2014 "),OU=n(OBe,"A",{href:!0});var Jwt=s(OU);HBr=r(Jwt,"FlaxRobertaForTokenClassification"),Jwt.forEach(t),UBr=r(OBe," (RoBERTa model)"),OBe.forEach(t),JBr=i(Oo),L4=n(Oo,"LI",{});var VBe=s(L4);t8e=n(VBe,"STRONG",{});var Ywt=s(t8e);YBr=r(Ywt,"roformer"),Ywt.forEach(t),KBr=r(VBe," \u2014 "),VU=n(VBe,"A",{href:!0});var Kwt=s(VU);ZBr=r(Kwt,"FlaxRoFormerForTokenClassification"),Kwt.forEach(t),ePr=r(VBe," (RoFormer model)"),VBe.forEach(t),oPr=i(Oo),x4=n(Oo,"LI",{});var XBe=s(x4);a8e=n(XBe,"STRONG",{});var Zwt=s(a8e);rPr=r(Zwt,"xlm-roberta"),Zwt.forEach(t),tPr=r(XBe," \u2014 "),XU=n(XBe,"A",{href:!0});var eAt=s(XU);aPr=r(eAt,"FlaxXLMRobertaForTokenClassification"),eAt.forEach(t),nPr=r(XBe," (XLM-RoBERTa model)"),XBe.forEach(t),Oo.forEach(t),sPr=i($a),n8e=n($a,"P",{});var oAt=s(n8e);lPr=r(oAt,"Examples:"),oAt.forEach(t),iPr=i($a),m(fL.$$.fragment,$a),$a.forEach(t),$i.forEach(t),J$e=i(c),Sf=n(c,"H2",{class:!0});var lNe=s(Sf);k4=n(lNe,"A",{id:!0,class:!0,href:!0});var rAt=s(k4);s8e=n(rAt,"SPAN",{});var tAt=s(s8e);m(mL.$$.fragment,tAt),tAt.forEach(t),rAt.forEach(t),dPr=i(lNe),l8e=n(lNe,"SPAN",{});var aAt=s(l8e);cPr=r(aAt,"FlaxAutoModelForMultipleChoice"),aAt.forEach(t),lNe.forEach(t),Y$e=i(c),Dr=n(c,"DIV",{class:!0});var qi=s(Dr);m(gL.$$.fragment,qi),fPr=i(qi),Rf=n(qi,"P",{});var ZY=s(Rf);mPr=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),zU=n(ZY,"A",{href:!0});var nAt=s(zU);gPr=r(nAt,"from_pretrained()"),nAt.forEach(t),hPr=r(ZY," class method or the "),QU=n(ZY,"A",{href:!0});var sAt=s(QU);pPr=r(sAt,"from_config()"),sAt.forEach(t),_Pr=r(ZY,` class
method.`),ZY.forEach(t),uPr=i(qi),hL=n(qi,"P",{});var iNe=s(hL);bPr=r(iNe,"This class cannot be instantiated directly using "),i8e=n(iNe,"CODE",{});var lAt=s(i8e);vPr=r(lAt,"__init__()"),lAt.forEach(t),FPr=r(iNe," (throws an error)."),iNe.forEach(t),TPr=i(qi),Pt=n(qi,"DIV",{class:!0});var Ni=s(Pt);m(pL.$$.fragment,Ni),MPr=i(Ni),d8e=n(Ni,"P",{});var iAt=s(d8e);EPr=r(iAt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),iAt.forEach(t),CPr=i(Ni),Bf=n(Ni,"P",{});var eK=s(Bf);wPr=r(eK,`Note:
Loading a model from its configuration file does `),c8e=n(eK,"STRONG",{});var dAt=s(c8e);APr=r(dAt,"not"),dAt.forEach(t),yPr=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WU=n(eK,"A",{href:!0});var cAt=s(WU);LPr=r(cAt,"from_pretrained()"),cAt.forEach(t),xPr=r(eK," to load the model weights."),eK.forEach(t),kPr=i(Ni),f8e=n(Ni,"P",{});var fAt=s(f8e);SPr=r(fAt,"Examples:"),fAt.forEach(t),RPr=i(Ni),m(_L.$$.fragment,Ni),Ni.forEach(t),BPr=i(qi),Io=n(qi,"DIV",{class:!0});var Ia=s(Io);m(uL.$$.fragment,Ia),PPr=i(Ia),m8e=n(Ia,"P",{});var mAt=s(m8e);$Pr=r(mAt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),mAt.forEach(t),IPr=i(Ia),Nn=n(Ia,"P",{});var OE=s(Nn);qPr=r(OE,"The model class to instantiate is selected based on the "),g8e=n(OE,"CODE",{});var gAt=s(g8e);NPr=r(gAt,"model_type"),gAt.forEach(t),jPr=r(OE,` property of the config object (either
passed as an argument or loaded from `),h8e=n(OE,"CODE",{});var hAt=s(h8e);DPr=r(hAt,"pretrained_model_name_or_path"),hAt.forEach(t),GPr=r(OE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),p8e=n(OE,"CODE",{});var pAt=s(p8e);OPr=r(pAt,"pretrained_model_name_or_path"),pAt.forEach(t),VPr=r(OE,":"),OE.forEach(t),XPr=i(Ia),$e=n(Ia,"UL",{});var Vo=s($e);S4=n(Vo,"LI",{});var zBe=s(S4);_8e=n(zBe,"STRONG",{});var _At=s(_8e);zPr=r(_At,"albert"),_At.forEach(t),QPr=r(zBe," \u2014 "),HU=n(zBe,"A",{href:!0});var uAt=s(HU);WPr=r(uAt,"FlaxAlbertForMultipleChoice"),uAt.forEach(t),HPr=r(zBe," (ALBERT model)"),zBe.forEach(t),UPr=i(Vo),R4=n(Vo,"LI",{});var QBe=s(R4);u8e=n(QBe,"STRONG",{});var bAt=s(u8e);JPr=r(bAt,"bert"),bAt.forEach(t),YPr=r(QBe," \u2014 "),UU=n(QBe,"A",{href:!0});var vAt=s(UU);KPr=r(vAt,"FlaxBertForMultipleChoice"),vAt.forEach(t),ZPr=r(QBe," (BERT model)"),QBe.forEach(t),e$r=i(Vo),B4=n(Vo,"LI",{});var WBe=s(B4);b8e=n(WBe,"STRONG",{});var FAt=s(b8e);o$r=r(FAt,"big_bird"),FAt.forEach(t),r$r=r(WBe," \u2014 "),JU=n(WBe,"A",{href:!0});var TAt=s(JU);t$r=r(TAt,"FlaxBigBirdForMultipleChoice"),TAt.forEach(t),a$r=r(WBe," (BigBird model)"),WBe.forEach(t),n$r=i(Vo),P4=n(Vo,"LI",{});var HBe=s(P4);v8e=n(HBe,"STRONG",{});var MAt=s(v8e);s$r=r(MAt,"distilbert"),MAt.forEach(t),l$r=r(HBe," \u2014 "),YU=n(HBe,"A",{href:!0});var EAt=s(YU);i$r=r(EAt,"FlaxDistilBertForMultipleChoice"),EAt.forEach(t),d$r=r(HBe," (DistilBERT model)"),HBe.forEach(t),c$r=i(Vo),$4=n(Vo,"LI",{});var UBe=s($4);F8e=n(UBe,"STRONG",{});var CAt=s(F8e);f$r=r(CAt,"electra"),CAt.forEach(t),m$r=r(UBe," \u2014 "),KU=n(UBe,"A",{href:!0});var wAt=s(KU);g$r=r(wAt,"FlaxElectraForMultipleChoice"),wAt.forEach(t),h$r=r(UBe," (ELECTRA model)"),UBe.forEach(t),p$r=i(Vo),I4=n(Vo,"LI",{});var JBe=s(I4);T8e=n(JBe,"STRONG",{});var AAt=s(T8e);_$r=r(AAt,"roberta"),AAt.forEach(t),u$r=r(JBe," \u2014 "),ZU=n(JBe,"A",{href:!0});var yAt=s(ZU);b$r=r(yAt,"FlaxRobertaForMultipleChoice"),yAt.forEach(t),v$r=r(JBe," (RoBERTa model)"),JBe.forEach(t),F$r=i(Vo),q4=n(Vo,"LI",{});var YBe=s(q4);M8e=n(YBe,"STRONG",{});var LAt=s(M8e);T$r=r(LAt,"roformer"),LAt.forEach(t),M$r=r(YBe," \u2014 "),eJ=n(YBe,"A",{href:!0});var xAt=s(eJ);E$r=r(xAt,"FlaxRoFormerForMultipleChoice"),xAt.forEach(t),C$r=r(YBe," (RoFormer model)"),YBe.forEach(t),w$r=i(Vo),N4=n(Vo,"LI",{});var KBe=s(N4);E8e=n(KBe,"STRONG",{});var kAt=s(E8e);A$r=r(kAt,"xlm-roberta"),kAt.forEach(t),y$r=r(KBe," \u2014 "),oJ=n(KBe,"A",{href:!0});var SAt=s(oJ);L$r=r(SAt,"FlaxXLMRobertaForMultipleChoice"),SAt.forEach(t),x$r=r(KBe," (XLM-RoBERTa model)"),KBe.forEach(t),Vo.forEach(t),k$r=i(Ia),C8e=n(Ia,"P",{});var RAt=s(C8e);S$r=r(RAt,"Examples:"),RAt.forEach(t),R$r=i(Ia),m(bL.$$.fragment,Ia),Ia.forEach(t),qi.forEach(t),K$e=i(c),Pf=n(c,"H2",{class:!0});var dNe=s(Pf);j4=n(dNe,"A",{id:!0,class:!0,href:!0});var BAt=s(j4);w8e=n(BAt,"SPAN",{});var PAt=s(w8e);m(vL.$$.fragment,PAt),PAt.forEach(t),BAt.forEach(t),B$r=i(dNe),A8e=n(dNe,"SPAN",{});var $At=s(A8e);P$r=r($At,"FlaxAutoModelForNextSentencePrediction"),$At.forEach(t),dNe.forEach(t),Z$e=i(c),Gr=n(c,"DIV",{class:!0});var ji=s(Gr);m(FL.$$.fragment,ji),$$r=i(ji),$f=n(ji,"P",{});var oK=s($f);I$r=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rJ=n(oK,"A",{href:!0});var IAt=s(rJ);q$r=r(IAt,"from_pretrained()"),IAt.forEach(t),N$r=r(oK," class method or the "),tJ=n(oK,"A",{href:!0});var qAt=s(tJ);j$r=r(qAt,"from_config()"),qAt.forEach(t),D$r=r(oK,` class
method.`),oK.forEach(t),G$r=i(ji),TL=n(ji,"P",{});var cNe=s(TL);O$r=r(cNe,"This class cannot be instantiated directly using "),y8e=n(cNe,"CODE",{});var NAt=s(y8e);V$r=r(NAt,"__init__()"),NAt.forEach(t),X$r=r(cNe," (throws an error)."),cNe.forEach(t),z$r=i(ji),$t=n(ji,"DIV",{class:!0});var Di=s($t);m(ML.$$.fragment,Di),Q$r=i(Di),L8e=n(Di,"P",{});var jAt=s(L8e);W$r=r(jAt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),jAt.forEach(t),H$r=i(Di),If=n(Di,"P",{});var rK=s(If);U$r=r(rK,`Note:
Loading a model from its configuration file does `),x8e=n(rK,"STRONG",{});var DAt=s(x8e);J$r=r(DAt,"not"),DAt.forEach(t),Y$r=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),aJ=n(rK,"A",{href:!0});var GAt=s(aJ);K$r=r(GAt,"from_pretrained()"),GAt.forEach(t),Z$r=r(rK," to load the model weights."),rK.forEach(t),eIr=i(Di),k8e=n(Di,"P",{});var OAt=s(k8e);oIr=r(OAt,"Examples:"),OAt.forEach(t),rIr=i(Di),m(EL.$$.fragment,Di),Di.forEach(t),tIr=i(ji),qo=n(ji,"DIV",{class:!0});var qa=s(qo);m(CL.$$.fragment,qa),aIr=i(qa),S8e=n(qa,"P",{});var VAt=s(S8e);nIr=r(VAt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),VAt.forEach(t),sIr=i(qa),jn=n(qa,"P",{});var VE=s(jn);lIr=r(VE,"The model class to instantiate is selected based on the "),R8e=n(VE,"CODE",{});var XAt=s(R8e);iIr=r(XAt,"model_type"),XAt.forEach(t),dIr=r(VE,` property of the config object (either
passed as an argument or loaded from `),B8e=n(VE,"CODE",{});var zAt=s(B8e);cIr=r(zAt,"pretrained_model_name_or_path"),zAt.forEach(t),fIr=r(VE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),P8e=n(VE,"CODE",{});var QAt=s(P8e);mIr=r(QAt,"pretrained_model_name_or_path"),QAt.forEach(t),gIr=r(VE,":"),VE.forEach(t),hIr=i(qa),$8e=n(qa,"UL",{});var WAt=s($8e);D4=n(WAt,"LI",{});var ZBe=s(D4);I8e=n(ZBe,"STRONG",{});var HAt=s(I8e);pIr=r(HAt,"bert"),HAt.forEach(t),_Ir=r(ZBe," \u2014 "),nJ=n(ZBe,"A",{href:!0});var UAt=s(nJ);uIr=r(UAt,"FlaxBertForNextSentencePrediction"),UAt.forEach(t),bIr=r(ZBe," (BERT model)"),ZBe.forEach(t),WAt.forEach(t),vIr=i(qa),q8e=n(qa,"P",{});var JAt=s(q8e);FIr=r(JAt,"Examples:"),JAt.forEach(t),TIr=i(qa),m(wL.$$.fragment,qa),qa.forEach(t),ji.forEach(t),eIe=i(c),qf=n(c,"H2",{class:!0});var fNe=s(qf);G4=n(fNe,"A",{id:!0,class:!0,href:!0});var YAt=s(G4);N8e=n(YAt,"SPAN",{});var KAt=s(N8e);m(AL.$$.fragment,KAt),KAt.forEach(t),YAt.forEach(t),MIr=i(fNe),j8e=n(fNe,"SPAN",{});var ZAt=s(j8e);EIr=r(ZAt,"FlaxAutoModelForImageClassification"),ZAt.forEach(t),fNe.forEach(t),oIe=i(c),Or=n(c,"DIV",{class:!0});var Gi=s(Or);m(yL.$$.fragment,Gi),CIr=i(Gi),Nf=n(Gi,"P",{});var tK=s(Nf);wIr=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),sJ=n(tK,"A",{href:!0});var e0t=s(sJ);AIr=r(e0t,"from_pretrained()"),e0t.forEach(t),yIr=r(tK," class method or the "),lJ=n(tK,"A",{href:!0});var o0t=s(lJ);LIr=r(o0t,"from_config()"),o0t.forEach(t),xIr=r(tK,` class
method.`),tK.forEach(t),kIr=i(Gi),LL=n(Gi,"P",{});var mNe=s(LL);SIr=r(mNe,"This class cannot be instantiated directly using "),D8e=n(mNe,"CODE",{});var r0t=s(D8e);RIr=r(r0t,"__init__()"),r0t.forEach(t),BIr=r(mNe," (throws an error)."),mNe.forEach(t),PIr=i(Gi),It=n(Gi,"DIV",{class:!0});var Oi=s(It);m(xL.$$.fragment,Oi),$Ir=i(Oi),G8e=n(Oi,"P",{});var t0t=s(G8e);IIr=r(t0t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),t0t.forEach(t),qIr=i(Oi),jf=n(Oi,"P",{});var aK=s(jf);NIr=r(aK,`Note:
Loading a model from its configuration file does `),O8e=n(aK,"STRONG",{});var a0t=s(O8e);jIr=r(a0t,"not"),a0t.forEach(t),DIr=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),iJ=n(aK,"A",{href:!0});var n0t=s(iJ);GIr=r(n0t,"from_pretrained()"),n0t.forEach(t),OIr=r(aK," to load the model weights."),aK.forEach(t),VIr=i(Oi),V8e=n(Oi,"P",{});var s0t=s(V8e);XIr=r(s0t,"Examples:"),s0t.forEach(t),zIr=i(Oi),m(kL.$$.fragment,Oi),Oi.forEach(t),QIr=i(Gi),No=n(Gi,"DIV",{class:!0});var Na=s(No);m(SL.$$.fragment,Na),WIr=i(Na),X8e=n(Na,"P",{});var l0t=s(X8e);HIr=r(l0t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),l0t.forEach(t),UIr=i(Na),Dn=n(Na,"P",{});var XE=s(Dn);JIr=r(XE,"The model class to instantiate is selected based on the "),z8e=n(XE,"CODE",{});var i0t=s(z8e);YIr=r(i0t,"model_type"),i0t.forEach(t),KIr=r(XE,` property of the config object (either
passed as an argument or loaded from `),Q8e=n(XE,"CODE",{});var d0t=s(Q8e);ZIr=r(d0t,"pretrained_model_name_or_path"),d0t.forEach(t),eqr=r(XE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),W8e=n(XE,"CODE",{});var c0t=s(W8e);oqr=r(c0t,"pretrained_model_name_or_path"),c0t.forEach(t),rqr=r(XE,":"),XE.forEach(t),tqr=i(Na),RL=n(Na,"UL",{});var gNe=s(RL);O4=n(gNe,"LI",{});var ePe=s(O4);H8e=n(ePe,"STRONG",{});var f0t=s(H8e);aqr=r(f0t,"beit"),f0t.forEach(t),nqr=r(ePe," \u2014 "),dJ=n(ePe,"A",{href:!0});var m0t=s(dJ);sqr=r(m0t,"FlaxBeitForImageClassification"),m0t.forEach(t),lqr=r(ePe," (BEiT model)"),ePe.forEach(t),iqr=i(gNe),V4=n(gNe,"LI",{});var oPe=s(V4);U8e=n(oPe,"STRONG",{});var g0t=s(U8e);dqr=r(g0t,"vit"),g0t.forEach(t),cqr=r(oPe," \u2014 "),cJ=n(oPe,"A",{href:!0});var h0t=s(cJ);fqr=r(h0t,"FlaxViTForImageClassification"),h0t.forEach(t),mqr=r(oPe," (ViT model)"),oPe.forEach(t),gNe.forEach(t),gqr=i(Na),J8e=n(Na,"P",{});var p0t=s(J8e);hqr=r(p0t,"Examples:"),p0t.forEach(t),pqr=i(Na),m(BL.$$.fragment,Na),Na.forEach(t),Gi.forEach(t),rIe=i(c),Df=n(c,"H2",{class:!0});var hNe=s(Df);X4=n(hNe,"A",{id:!0,class:!0,href:!0});var _0t=s(X4);Y8e=n(_0t,"SPAN",{});var u0t=s(Y8e);m(PL.$$.fragment,u0t),u0t.forEach(t),_0t.forEach(t),_qr=i(hNe),K8e=n(hNe,"SPAN",{});var b0t=s(K8e);uqr=r(b0t,"FlaxAutoModelForVision2Seq"),b0t.forEach(t),hNe.forEach(t),tIe=i(c),Vr=n(c,"DIV",{class:!0});var Vi=s(Vr);m($L.$$.fragment,Vi),bqr=i(Vi),Gf=n(Vi,"P",{});var nK=s(Gf);vqr=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),fJ=n(nK,"A",{href:!0});var v0t=s(fJ);Fqr=r(v0t,"from_pretrained()"),v0t.forEach(t),Tqr=r(nK," class method or the "),mJ=n(nK,"A",{href:!0});var F0t=s(mJ);Mqr=r(F0t,"from_config()"),F0t.forEach(t),Eqr=r(nK,` class
method.`),nK.forEach(t),Cqr=i(Vi),IL=n(Vi,"P",{});var pNe=s(IL);wqr=r(pNe,"This class cannot be instantiated directly using "),Z8e=n(pNe,"CODE",{});var T0t=s(Z8e);Aqr=r(T0t,"__init__()"),T0t.forEach(t),yqr=r(pNe," (throws an error)."),pNe.forEach(t),Lqr=i(Vi),qt=n(Vi,"DIV",{class:!0});var Xi=s(qt);m(qL.$$.fragment,Xi),xqr=i(Xi),e7e=n(Xi,"P",{});var M0t=s(e7e);kqr=r(M0t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),M0t.forEach(t),Sqr=i(Xi),Of=n(Xi,"P",{});var sK=s(Of);Rqr=r(sK,`Note:
Loading a model from its configuration file does `),o7e=n(sK,"STRONG",{});var E0t=s(o7e);Bqr=r(E0t,"not"),E0t.forEach(t),Pqr=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(sK,"A",{href:!0});var C0t=s(gJ);$qr=r(C0t,"from_pretrained()"),C0t.forEach(t),Iqr=r(sK," to load the model weights."),sK.forEach(t),qqr=i(Xi),r7e=n(Xi,"P",{});var w0t=s(r7e);Nqr=r(w0t,"Examples:"),w0t.forEach(t),jqr=i(Xi),m(NL.$$.fragment,Xi),Xi.forEach(t),Dqr=i(Vi),jo=n(Vi,"DIV",{class:!0});var ja=s(jo);m(jL.$$.fragment,ja),Gqr=i(ja),t7e=n(ja,"P",{});var A0t=s(t7e);Oqr=r(A0t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),A0t.forEach(t),Vqr=i(ja),Gn=n(ja,"P",{});var zE=s(Gn);Xqr=r(zE,"The model class to instantiate is selected based on the "),a7e=n(zE,"CODE",{});var y0t=s(a7e);zqr=r(y0t,"model_type"),y0t.forEach(t),Qqr=r(zE,` property of the config object (either
passed as an argument or loaded from `),n7e=n(zE,"CODE",{});var L0t=s(n7e);Wqr=r(L0t,"pretrained_model_name_or_path"),L0t.forEach(t),Hqr=r(zE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s7e=n(zE,"CODE",{});var x0t=s(s7e);Uqr=r(x0t,"pretrained_model_name_or_path"),x0t.forEach(t),Jqr=r(zE,":"),zE.forEach(t),Yqr=i(ja),l7e=n(ja,"UL",{});var k0t=s(l7e);z4=n(k0t,"LI",{});var rPe=s(z4);i7e=n(rPe,"STRONG",{});var S0t=s(i7e);Kqr=r(S0t,"vision-encoder-decoder"),S0t.forEach(t),Zqr=r(rPe," \u2014 "),hJ=n(rPe,"A",{href:!0});var R0t=s(hJ);eNr=r(R0t,"FlaxVisionEncoderDecoderModel"),R0t.forEach(t),oNr=r(rPe," (Vision Encoder decoder model)"),rPe.forEach(t),k0t.forEach(t),rNr=i(ja),d7e=n(ja,"P",{});var B0t=s(d7e);tNr=r(B0t,"Examples:"),B0t.forEach(t),aNr=i(ja),m(DL.$$.fragment,ja),ja.forEach(t),Vi.forEach(t),this.h()},h(){d(oe,"name","hf:doc:metadata"),d(oe,"content",JSON.stringify(V0t)),d(Ae,"id","auto-classes"),d(Ae,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ae,"href","#auto-classes"),d(me,"class","relative group"),d(On,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.AutoModel"),d(zn,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.AutoTokenizer"),d(Yi,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertModel"),d(Uf,"id","extending-the-auto-classes"),d(Uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uf,"href","#extending-the-auto-classes"),d(Ki,"class","relative group"),d(Yf,"id","transformers.AutoConfig"),d(Yf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yf,"href","#transformers.AutoConfig"),d(Zi,"class","relative group"),d(K9,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(Z9,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertConfig"),d(ex,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig"),d(ox,"href","/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitConfig"),d(rx,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertConfig"),d(tx,"href","/docs/transformers/pr_16857/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(ax,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdConfig"),d(nx,"href","/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(sx,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(lx,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(ix,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertConfig"),d(dx,"href","/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineConfig"),d(cx,"href","/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPConfig"),d(fx,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertConfig"),d(mx,"href","/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextConfig"),d(gx,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLConfig"),d(hx,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(px,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(_x,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),d(ux,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaConfig"),d(bx,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(vx,"href","/docs/transformers/pr_16857/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),d(Fx,"href","/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTConfig"),d(Tx,"href","/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrConfig"),d(Mx,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertConfig"),d(Ex,"href","/docs/transformers/pr_16857/en/model_doc/dpr#transformers.DPRConfig"),d(Cx,"href","/docs/transformers/pr_16857/en/model_doc/dpt#transformers.DPTConfig"),d(wx,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraConfig"),d(Ax,"href","/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(yx,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertConfig"),d(Lx,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetConfig"),d(xx,"href","/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTConfig"),d(kx,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelConfig"),d(Sx,"href","/docs/transformers/pr_16857/en/model_doc/glpn#transformers.GLPNConfig"),d(Rx,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Config"),d(Bx,"href","/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d(Px,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJConfig"),d($x,"href","/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertConfig"),d(Ix,"href","/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertConfig"),d(qx,"href","/docs/transformers/pr_16857/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(Nx,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(jx,"href","/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(Dx,"href","/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDConfig"),d(Gx,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerConfig"),d(Ox,"href","/docs/transformers/pr_16857/en/model_doc/luke#transformers.LukeConfig"),d(Vx,"href","/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertConfig"),d(Xx,"href","/docs/transformers/pr_16857/en/model_doc/m2m_100#transformers.M2M100Config"),d(zx,"href","/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianConfig"),d(Qx,"href","/docs/transformers/pr_16857/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(Wx,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartConfig"),d(Hx,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(Ux,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Jx,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetConfig"),d(Yx,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Config"),d(Kx,"href","/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(Zx,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(ek,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusConfig"),d(ok,"href","/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverConfig"),d(rk,"href","/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartConfig"),d(tk,"href","/docs/transformers/pr_16857/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(ak,"href","/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(nk,"href","/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(sk,"href","/docs/transformers/pr_16857/en/model_doc/rag#transformers.RagConfig"),d(lk,"href","/docs/transformers/pr_16857/en/model_doc/realm#transformers.RealmConfig"),d(ik,"href","/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerConfig"),d(dk,"href","/docs/transformers/pr_16857/en/model_doc/regnet#transformers.RegNetConfig"),d(ck,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertConfig"),d(fk,"href","/docs/transformers/pr_16857/en/model_doc/resnet#transformers.ResNetConfig"),d(mk,"href","/docs/transformers/pr_16857/en/model_doc/retribert#transformers.RetriBertConfig"),d(gk,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaConfig"),d(hk,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerConfig"),d(pk,"href","/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerConfig"),d(_k,"href","/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWConfig"),d(uk,"href","/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDConfig"),d(bk,"href","/docs/transformers/pr_16857/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(vk,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(Fk,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(Tk,"href","/docs/transformers/pr_16857/en/model_doc/splinter#transformers.SplinterConfig"),d(Mk,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(Ek,"href","/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinConfig"),d(Ck,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Config"),d(wk,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasConfig"),d(Ak,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartConfig"),d(yk,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(Lk,"href","/docs/transformers/pr_16857/en/model_doc/trocr#transformers.TrOCRConfig"),d(xk,"href","/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(kk,"href","/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(Sk,"href","/docs/transformers/pr_16857/en/model_doc/van#transformers.VanConfig"),d(Rk,"href","/docs/transformers/pr_16857/en/model_doc/vilt#transformers.ViltConfig"),d(Bk,"href","/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(Pk,"href","/docs/transformers/pr_16857/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d($k,"href","/docs/transformers/pr_16857/en/model_doc/visual_bert#transformers.VisualBertConfig"),d(Ik,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTConfig"),d(qk,"href","/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(Nk,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(jk,"href","/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMConfig"),d(Dk,"href","/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMConfig"),d(Gk,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMConfig"),d(Ok,"href","/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(Vk,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(Xk,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(zk,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetConfig"),d(Qk,"href","/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoConfig"),d(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wg,"id","transformers.AutoTokenizer"),d(Wg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Wg,"href","#transformers.AutoTokenizer"),d(od,"class","relative group"),d(Wk,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(Hk,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertTokenizer"),d(Uk,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(Jk,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartTokenizer"),d(Yk,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartTokenizerFast"),d(Kk,"href","/docs/transformers/pr_16857/en/model_doc/barthez#transformers.BarthezTokenizer"),d(Zk,"href","/docs/transformers/pr_16857/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(eS,"href","/docs/transformers/pr_16857/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(oS,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertTokenizer"),d(rS,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertTokenizerFast"),d(tS,"href","/docs/transformers/pr_16857/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(aS,"href","/docs/transformers/pr_16857/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(nS,"href","/docs/transformers/pr_16857/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(sS,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(lS,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(iS,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(dS,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(cS,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(fS,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(mS,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(gS,"href","/docs/transformers/pr_16857/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(hS,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertTokenizer"),d(pS,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(_S,"href","/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineTokenizer"),d(uS,"href","/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPTokenizer"),d(bS,"href","/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(vS,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(FS,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(TS,"href","/docs/transformers/pr_16857/en/model_doc/cpm#transformers.CpmTokenizer"),d(MS,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(ES,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaTokenizer"),d(CS,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(wS,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaTokenizer"),d(AS,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(yS,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(LS,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),d(xS,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(kS,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(SS,"href","/docs/transformers/pr_16857/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(RS,"href","/docs/transformers/pr_16857/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(BS,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraTokenizer"),d(PS,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraTokenizerFast"),d($S,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(IS,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetTokenizer"),d(qS,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(NS,"href","/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTTokenizer"),d(jS,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelTokenizer"),d(DS,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(GS,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(OS,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(VS,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(XS,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(zS,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(QS,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(WS,"href","/docs/transformers/pr_16857/en/model_doc/herbert#transformers.HerbertTokenizer"),d(HS,"href","/docs/transformers/pr_16857/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(US,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(JS,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaTokenizer"),d(YS,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(KS,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(ZS,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(eR,"href","/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(oR,"href","/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(rR,"href","/docs/transformers/pr_16857/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(tR,"href","/docs/transformers/pr_16857/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(aR,"href","/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDTokenizer"),d(nR,"href","/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDTokenizerFast"),d(sR,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerTokenizer"),d(lR,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(iR,"href","/docs/transformers/pr_16857/en/model_doc/luke#transformers.LukeTokenizer"),d(dR,"href","/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(cR,"href","/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(fR,"href","/docs/transformers/pr_16857/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(mR,"href","/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianTokenizer"),d(gR,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartTokenizer"),d(hR,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(pR,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(_R,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(uR,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertTokenizer"),d(bR,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertTokenizerFast"),d(vR,"href","/docs/transformers/pr_16857/en/model_doc/mluke#transformers.MLukeTokenizer"),d(FR,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(TR,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(MR,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(ER,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(CR,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.T5Tokenizer"),d(wR,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.T5TokenizerFast"),d(AR,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertTokenizer"),d(yR,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(LR,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(xR,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(kR,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(SR,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(RR,"href","/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(BR,"href","/docs/transformers/pr_16857/en/model_doc/phobert#transformers.PhobertTokenizer"),d(PR,"href","/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartTokenizer"),d($R,"href","/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(IR,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertTokenizer"),d(qR,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertTokenizerFast"),d(NR,"href","/docs/transformers/pr_16857/en/model_doc/rag#transformers.RagTokenizer"),d(jR,"href","/docs/transformers/pr_16857/en/model_doc/realm#transformers.RealmTokenizer"),d(DR,"href","/docs/transformers/pr_16857/en/model_doc/realm#transformers.RealmTokenizerFast"),d(GR,"href","/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerTokenizer"),d(OR,"href","/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(VR,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertTokenizer"),d(XR,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d(zR,"href","/docs/transformers/pr_16857/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(QR,"href","/docs/transformers/pr_16857/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(WR,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaTokenizer"),d(HR,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(UR,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(JR,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(YR,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(KR,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(ZR,"href","/docs/transformers/pr_16857/en/model_doc/splinter#transformers.SplinterTokenizer"),d(eB,"href","/docs/transformers/pr_16857/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(oB,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(rB,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(tB,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.T5Tokenizer"),d(aB,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.T5TokenizerFast"),d(nB,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasTokenizer"),d(sB,"href","/docs/transformers/pr_16857/en/model_doc/tapex#transformers.TapexTokenizer"),d(lB,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(iB,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertTokenizer"),d(dB,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertTokenizerFast"),d(cB,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(fB,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(mB,"href","/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMTokenizer"),d(gB,"href","/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(hB,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMTokenizer"),d(pB,"href","/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(_B,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(uB,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(bB,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaTokenizer"),d(vB,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(FB,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(TB,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(MB,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertTokenizer"),d(EB,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Eh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ch,"id","transformers.AutoFeatureExtractor"),d(Ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ch,"href","#transformers.AutoFeatureExtractor"),d(rd,"class","relative group"),d(CB,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(wB,"href","/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(AB,"href","/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(yB,"href","/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(LB,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(xB,"href","/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(kB,"href","/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(SB,"href","/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(RB,"href","/docs/transformers/pr_16857/en/model_doc/dpt#transformers.DPTFeatureExtractor"),d(BB,"href","/docs/transformers/pr_16857/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),d(PB,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d($B,"href","/docs/transformers/pr_16857/en/model_doc/imagegpt#transformers.ImageGPTFeatureExtractor"),d(IB,"href","/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(qB,"href","/docs/transformers/pr_16857/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(NB,"href","/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(jB,"href","/docs/transformers/pr_16857/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(DB,"href","/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(GB,"href","/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(OB,"href","/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(VB,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(XB,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(zB,"href","/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(QB,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(WB,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(HB,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yh,"id","transformers.AutoProcessor"),d(Yh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Yh,"href","#transformers.AutoProcessor"),d(td,"class","relative group"),d(UB,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(JB,"href","/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPProcessor"),d(YB,"href","/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(KB,"href","/docs/transformers/pr_16857/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(ZB,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(eP,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(oP,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(rP,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(tP,"href","/docs/transformers/pr_16857/en/model_doc/trocr#transformers.TrOCRProcessor"),d(aP,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(nP,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(sP,"href","/docs/transformers/pr_16857/en/model_doc/vilt#transformers.ViltProcessor"),d(lP,"href","/docs/transformers/pr_16857/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(iP,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(dP,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gp,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hp,"id","transformers.AutoModel"),d(hp,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(hp,"href","#transformers.AutoModel"),d(nd,"class","relative group"),d(cP,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fP,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mP,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gP,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertModel"),d(hP,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartModel"),d(pP,"href","/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitModel"),d(_P,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertModel"),d(uP,"href","/docs/transformers/pr_16857/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(bP,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdModel"),d(vP,"href","/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(FP,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(TP,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(MP,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertModel"),d(EP,"href","/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineModel"),d(CP,"href","/docs/transformers/pr_16857/en/model_doc/clip#transformers.CLIPModel"),d(wP,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertModel"),d(AP,"href","/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextModel"),d(yP,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLModel"),d(LP,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(xP,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(kP,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionModel"),d(SP,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaModel"),d(RP,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(BP,"href","/docs/transformers/pr_16857/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),d(PP,"href","/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTModel"),d($P,"href","/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrModel"),d(IP,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertModel"),d(qP,"href","/docs/transformers/pr_16857/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(NP,"href","/docs/transformers/pr_16857/en/model_doc/dpt#transformers.DPTModel"),d(jP,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraModel"),d(DP,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertModel"),d(GP,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetModel"),d(OP,"href","/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTModel"),d(VP,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelModel"),d(XP,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelBaseModel"),d(zP,"href","/docs/transformers/pr_16857/en/model_doc/glpn#transformers.GLPNModel"),d(QP,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2Model"),d(WP,"href","/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(HP,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJModel"),d(UP,"href","/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertModel"),d(JP,"href","/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertModel"),d(YP,"href","/docs/transformers/pr_16857/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(KP,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(ZP,"href","/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(e$,"href","/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDModel"),d(o$,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerModel"),d(r$,"href","/docs/transformers/pr_16857/en/model_doc/luke#transformers.LukeModel"),d(t$,"href","/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertModel"),d(a$,"href","/docs/transformers/pr_16857/en/model_doc/m2m_100#transformers.M2M100Model"),d(n$,"href","/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianModel"),d(s$,"href","/docs/transformers/pr_16857/en/model_doc/maskformer#transformers.MaskFormerModel"),d(l$,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartModel"),d(i$,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(d$,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertModel"),d(c$,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetModel"),d(f$,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5Model"),d(m$,"href","/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerModel"),d(g$,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(h$,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusModel"),d(p$,"href","/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverModel"),d(_$,"href","/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartModel"),d(u$,"href","/docs/transformers/pr_16857/en/model_doc/poolformer#transformers.PoolFormerModel"),d(b$,"href","/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(v$,"href","/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertModel"),d(F$,"href","/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerModel"),d(T$,"href","/docs/transformers/pr_16857/en/model_doc/regnet#transformers.RegNetModel"),d(M$,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertModel"),d(E$,"href","/docs/transformers/pr_16857/en/model_doc/resnet#transformers.ResNetModel"),d(C$,"href","/docs/transformers/pr_16857/en/model_doc/retribert#transformers.RetriBertModel"),d(w$,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaModel"),d(A$,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerModel"),d(y$,"href","/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerModel"),d(L$,"href","/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWModel"),d(x$,"href","/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDModel"),d(k$,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(S$,"href","/docs/transformers/pr_16857/en/model_doc/splinter#transformers.SplinterModel"),d(R$,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(B$,"href","/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinModel"),d(P$,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5Model"),d($$,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasModel"),d(I$,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(q$,"href","/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechModel"),d(N$,"href","/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(j$,"href","/docs/transformers/pr_16857/en/model_doc/van#transformers.VanModel"),d(D$,"href","/docs/transformers/pr_16857/en/model_doc/vilt#transformers.ViltModel"),d(G$,"href","/docs/transformers/pr_16857/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(O$,"href","/docs/transformers/pr_16857/en/model_doc/visual_bert#transformers.VisualBertModel"),d(V$,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTModel"),d(X$,"href","/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(z$,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(Q$,"href","/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMModel"),d(W$,"href","/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMModel"),d(H$,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMModel"),d(U$,"href","/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(J$,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(Y$,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(K$,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetModel"),d(Z$,"href","/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoModel"),d(Ne,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ou,"id","transformers.AutoModelForPreTraining"),d(ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ou,"href","#transformers.AutoModelForPreTraining"),d(id,"class","relative group"),d(eI,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oI,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rI,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tI,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForPreTraining"),d(aI,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(nI,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForPreTraining"),d(sI,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(lI,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(iI,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(dI,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(cI,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(fI,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(mI,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(gI,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForPreTraining"),d(hI,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(pI,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForPreTraining"),d(_I,"href","/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(uI,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(bI,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(vI,"href","/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(FI,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(TI,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(MI,"href","/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(EI,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(CI,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(wI,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(AI,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(yI,"href","/docs/transformers/pr_16857/en/model_doc/retribert#transformers.RetriBertModel"),d(LI,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(xI,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(kI,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(RI,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(BI,"href","/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(PI,"href","/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d($I,"href","/docs/transformers/pr_16857/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(II,"href","/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(qI,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(NI,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(jI,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(DI,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(GI,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ou,"id","transformers.AutoModelForCausalLM"),d(Ou,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ou,"href","#transformers.AutoModelForCausalLM"),d(fd,"class","relative group"),d(OI,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(VI,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(XI,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zI,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForCausalLM"),d(QI,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertLMHeadModel"),d(WI,"href","/docs/transformers/pr_16857/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(HI,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(UI,"href","/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(JI,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(YI,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(KI,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(ZI,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(eq,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(oq,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForCausalLM"),d(rq,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(tq,"href","/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(aq,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(nq,"href","/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianForCausalLM"),d(sq,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForCausalLM"),d(lq,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(iq,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(dq,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(cq,"href","/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(fq,"href","/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(mq,"href","/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(gq,"href","/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(hq,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(pq,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(_q,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(uq,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(bq,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(vq,"href","/docs/transformers/pr_16857/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(Fq,"href","/docs/transformers/pr_16857/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(Tq,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(Mq,"href","/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d(Eq,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(Cq,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(wq,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(w1,"id","transformers.AutoModelForMaskedLM"),d(w1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(w1,"href","#transformers.AutoModelForMaskedLM"),d(hd,"class","relative group"),d(Aq,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yq,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Lq,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xq,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(kq,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(Sq,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForMaskedLM"),d(Rq,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(Bq,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(Pq,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d($q,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(Iq,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(qq,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(Nq,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(jq,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(Dq,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(Gq,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Oq,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(Vq,"href","/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(Xq,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(zq,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(Qq,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(Wq,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(Hq,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(Uq,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(Jq,"href","/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(Yq,"href","/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(Kq,"href","/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(Zq,"href","/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(eN,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(oN,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(rN,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(tN,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(aN,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(nN,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(sN,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(lN,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(iN,"href","/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ib,"id","transformers.AutoModelForSeq2SeqLM"),d(ib,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ib,"href","#transformers.AutoModelForSeq2SeqLM"),d(ud,"class","relative group"),d(dN,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cN,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fN,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mN,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(gN,"href","/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(hN,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(pN,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(_N,"href","/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(uN,"href","/docs/transformers/pr_16857/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(bN,"href","/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(vN,"href","/docs/transformers/pr_16857/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(FN,"href","/docs/transformers/pr_16857/en/model_doc/marian#transformers.MarianMTModel"),d(TN,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(MN,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(EN,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(CN,"href","/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(wN,"href","/docs/transformers/pr_16857/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(AN,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(yN,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(LN,"href","/docs/transformers/pr_16857/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yb,"id","transformers.AutoModelForSequenceClassification"),d(yb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yb,"href","#transformers.AutoModelForSequenceClassification"),d(Fd,"class","relative group"),d(xN,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kN,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(SN,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RN,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d(BN,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForSequenceClassification"),d(PN,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForSequenceClassification"),d($N,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(IN,"href","/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(qN,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(NN,"href","/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(jN,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(DN,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(GN,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(ON,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(VN,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(XN,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(zN,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(QN,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(WN,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(HN,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(UN,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(JN,"href","/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(YN,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(KN,"href","/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(ZN,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(ej,"href","/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(oj,"href","/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDForSequenceClassification"),d(rj,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(tj,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(aj,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(nj,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(sj,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(lj,"href","/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(ij,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(dj,"href","/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(cj,"href","/docs/transformers/pr_16857/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(fj,"href","/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(mj,"href","/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(gj,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(hj,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(pj,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(_j,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(uj,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(bj,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForSequenceClassification"),d(vj,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(Fj,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(Tj,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(Mj,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(Ej,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(Cj,"href","/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Ve,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(M2,"id","transformers.AutoModelForMultipleChoice"),d(M2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(M2,"href","#transformers.AutoModelForMultipleChoice"),d(Ed,"class","relative group"),d(wj,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Aj,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yj,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lj,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(xj,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForMultipleChoice"),d(kj,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(Sj,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(Rj,"href","/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(Bj,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(Pj,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d($j,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(Ij,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d(qj,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(Nj,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(jj,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(Dj,"href","/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(Gj,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(Oj,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(Vj,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(Xj,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(zj,"href","/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(Qj,"href","/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(Wj,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(Hj,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(Uj,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(Jj,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(Yj,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(Kj,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(Zj,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(eD,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(oD,"href","/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(K2,"id","transformers.AutoModelForNextSentencePrediction"),d(K2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K2,"href","#transformers.AutoModelForNextSentencePrediction"),d(Ad,"class","relative group"),d(rD,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tD,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aD,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nD,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(sD,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(lD,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(iD,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(dD,"href","/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(n5,"id","transformers.AutoModelForTokenClassification"),d(n5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n5,"href","#transformers.AutoModelForTokenClassification"),d(xd,"class","relative group"),d(cD,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(fD,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(mD,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gD,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(hD,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForTokenClassification"),d(pD,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(_D,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(uD,"href","/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineForTokenClassification"),d(bD,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(vD,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(FD,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(TD,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(MD,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(ED,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(CD,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(wD,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(AD,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(yD,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(LD,"href","/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(xD,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(kD,"href","/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(SD,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(RD,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(BD,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(PD,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d($D,"href","/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(ID,"href","/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(qD,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(ND,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(jD,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(DD,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(GD,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(OD,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d(VD,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(XD,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(zD,"href","/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(D5,"id","transformers.AutoModelForQuestionAnswering"),d(D5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(D5,"href","#transformers.AutoModelForQuestionAnswering"),d(Rd,"class","relative group"),d(QD,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(WD,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(HD,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(UD,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(JD,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(YD,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(KD,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(ZD,"href","/docs/transformers/pr_16857/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(eG,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(oG,"href","/docs/transformers/pr_16857/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(rG,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(tG,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(aG,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(nG,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(sG,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(lG,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(iG,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(dG,"href","/docs/transformers/pr_16857/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(cG,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(fG,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(mG,"href","/docs/transformers/pr_16857/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(gG,"href","/docs/transformers/pr_16857/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(hG,"href","/docs/transformers/pr_16857/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(pG,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(_G,"href","/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(uG,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(bG,"href","/docs/transformers/pr_16857/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(vG,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(FG,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(TG,"href","/docs/transformers/pr_16857/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(MG,"href","/docs/transformers/pr_16857/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(EG,"href","/docs/transformers/pr_16857/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(CG,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(wG,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(AG,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(yG,"href","/docs/transformers/pr_16857/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(LG,"href","/docs/transformers/pr_16857/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(xG,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(kG,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(SG,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(RG,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(BG,"href","/docs/transformers/pr_16857/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(y6,"id","transformers.AutoModelForTableQuestionAnswering"),d(y6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y6,"href","#transformers.AutoModelForTableQuestionAnswering"),d($d,"class","relative group"),d(PG,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($G,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IG,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qG,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k6,"id","transformers.AutoModelForImageClassification"),d(k6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k6,"href","#transformers.AutoModelForImageClassification"),d(Nd,"class","relative group"),d(NG,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(jG,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(DG,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(GG,"href","/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitForImageClassification"),d(OG,"href","/docs/transformers/pr_16857/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(VG,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),d(XG,"href","/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTForImageClassification"),d(zG,"href","/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(QG,"href","/docs/transformers/pr_16857/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(WG,"href","/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(HG,"href","/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(UG,"href","/docs/transformers/pr_16857/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(JG,"href","/docs/transformers/pr_16857/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(YG,"href","/docs/transformers/pr_16857/en/model_doc/regnet#transformers.RegNetForImageClassification"),d(KG,"href","/docs/transformers/pr_16857/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(ZG,"href","/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerForImageClassification"),d(eO,"href","/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinForImageClassification"),d(oO,"href","/docs/transformers/pr_16857/en/model_doc/van#transformers.VanForImageClassification"),d(rO,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(V6,"id","transformers.AutoModelForVision2Seq"),d(V6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V6,"href","#transformers.AutoModelForVision2Seq"),d(Gd,"class","relative group"),d(tO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(aO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(nO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(sO,"href","/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Q6,"id","transformers.AutoModelForAudioClassification"),d(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Q6,"href","#transformers.AutoModelForAudioClassification"),d(Xd,"class","relative group"),d(lO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(iO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(dO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cO,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(fO,"href","/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(mO,"href","/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(gO,"href","/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(hO,"href","/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(pO,"href","/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(_O,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(uO,"href","/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(rv,"id","transformers.AutoModelForAudioFrameClassification"),d(rv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rv,"href","#transformers.AutoModelForAudioFrameClassification"),d(Wd,"class","relative group"),d(bO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(FO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TO,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(MO,"href","/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(EO,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(CO,"href","/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iv,"id","transformers.AutoModelForCTC"),d(iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iv,"href","#transformers.AutoModelForCTC"),d(Jd,"class","relative group"),d(wO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(AO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(yO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(LO,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(xO,"href","/docs/transformers/pr_16857/en/model_doc/hubert#transformers.HubertForCTC"),d(kO,"href","/docs/transformers/pr_16857/en/model_doc/sew#transformers.SEWForCTC"),d(SO,"href","/docs/transformers/pr_16857/en/model_doc/sew-d#transformers.SEWDForCTC"),d(RO,"href","/docs/transformers/pr_16857/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(BO,"href","/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(PO,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d($O,"href","/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bv,"id","transformers.AutoModelForSpeechSeq2Seq"),d(bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bv,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(Zd,"class","relative group"),d(IO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jO,"href","/docs/transformers/pr_16857/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(DO,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mv,"id","transformers.AutoModelForAudioXVector"),d(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mv,"href","#transformers.AutoModelForAudioXVector"),d(rc,"class","relative group"),d(GO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(OO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(VO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(XO,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(zO,"href","/docs/transformers/pr_16857/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(QO,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(WO,"href","/docs/transformers/pr_16857/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lv,"id","transformers.AutoModelForMaskedImageModeling"),d(Lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Lv,"href","#transformers.AutoModelForMaskedImageModeling"),d(nc,"class","relative group"),d(HO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(UO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(JO,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(YO,"href","/docs/transformers/pr_16857/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(KO,"href","/docs/transformers/pr_16857/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(ZO,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Bv,"id","transformers.AutoModelForObjectDetection"),d(Bv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Bv,"href","#transformers.AutoModelForObjectDetection"),d(dc,"class","relative group"),d(eV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tV,"href","/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Iv,"id","transformers.AutoModelForImageSegmentation"),d(Iv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Iv,"href","#transformers.AutoModelForImageSegmentation"),d(mc,"class","relative group"),d(aV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(nV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(sV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(lV,"href","/docs/transformers/pr_16857/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jv,"id","transformers.AutoModelForSemanticSegmentation"),d(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jv,"href","#transformers.AutoModelForSemanticSegmentation"),d(pc,"class","relative group"),d(iV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fV,"href","/docs/transformers/pr_16857/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(mV,"href","/docs/transformers/pr_16857/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),d(gV,"href","/docs/transformers/pr_16857/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),d(hV,"href","/docs/transformers/pr_16857/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zv,"id","transformers.AutoModelForInstanceSegmentation"),d(zv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zv,"href","#transformers.AutoModelForInstanceSegmentation"),d(bc,"class","relative group"),d(pV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_V,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(uV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(bV,"href","/docs/transformers/pr_16857/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Hv,"id","transformers.TFAutoModel"),d(Hv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Hv,"href","#transformers.TFAutoModel"),d(Tc,"class","relative group"),d(vV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(FV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(TV,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(MV,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertModel"),d(EV,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.TFBartModel"),d(CV,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertModel"),d(wV,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(AV,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(yV,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertModel"),d(LV,"href","/docs/transformers/pr_16857/en/model_doc/clip#transformers.TFCLIPModel"),d(xV,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertModel"),d(kV,"href","/docs/transformers/pr_16857/en/model_doc/convnext#transformers.TFConvNextModel"),d(SV,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.TFCTRLModel"),d(RV,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaModel"),d(BV,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(PV,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertModel"),d($V,"href","/docs/transformers/pr_16857/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(IV,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraModel"),d(qV,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertModel"),d(NV,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelModel"),d(jV,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(DV,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.TFGPT2Model"),d(GV,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.TFGPTJModel"),d(OV,"href","/docs/transformers/pr_16857/en/model_doc/hubert#transformers.TFHubertModel"),d(VV,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(XV,"href","/docs/transformers/pr_16857/en/model_doc/led#transformers.TFLEDModel"),d(zV,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerModel"),d(QV,"href","/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.TFLxmertModel"),d(WV,"href","/docs/transformers/pr_16857/en/model_doc/marian#transformers.TFMarianModel"),d(HV,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.TFMBartModel"),d(UV,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(JV,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetModel"),d(YV,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.TFMT5Model"),d(KV,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(ZV,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.TFPegasusModel"),d(eX,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertModel"),d(oX,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaModel"),d(rX,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerModel"),d(tX,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(aX,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.TFT5Model"),d(nX,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasModel"),d(sX,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(lX,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.TFViTModel"),d(iX,"href","/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.TFViTMAEModel"),d(dX,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(cX,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMModel"),d(fX,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(mX,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetModel"),d(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(NF,"id","transformers.TFAutoModelForPreTraining"),d(NF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(NF,"href","#transformers.TFAutoModelForPreTraining"),d(Cc,"class","relative group"),d(gX,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(hX,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(pX,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_X,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(uX,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(bX,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForPreTraining"),d(vX,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(FX,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(TX,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(MX,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(EX,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(CX,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(wX,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(AX,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(yX,"href","/docs/transformers/pr_16857/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(LX,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(xX,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(kX,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(SX,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(RX,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(BX,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(PX,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d($X,"href","/docs/transformers/pr_16857/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),d(IX,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(qX,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(NX,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iT,"id","transformers.TFAutoModelForCausalLM"),d(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iT,"href","#transformers.TFAutoModelForCausalLM"),d(yc,"class","relative group"),d(jX,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(DX,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(GX,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(OX,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(VX,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(XX,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(zX,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(QX,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),d(WX,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(HX,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(UX,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(JX,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(YX,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(KX,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(ZX,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(TT,"id","transformers.TFAutoModelForImageClassification"),d(TT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(TT,"href","#transformers.TFAutoModelForImageClassification"),d(kc,"class","relative group"),d(ez,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(oz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(rz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(tz,"href","/docs/transformers/pr_16857/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(az,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.TFViTForImageClassification"),d(bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CT,"id","transformers.TFAutoModelForMaskedLM"),d(CT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CT,"href","#transformers.TFAutoModelForMaskedLM"),d(Bc,"class","relative group"),d(nz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(sz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(lz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(iz,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(dz,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(cz,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(fz,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(mz,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(gz,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(hz,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(pz,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(_z,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(uz,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(bz,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(vz,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(Fz,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(Tz,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(Mz,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(Ez,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(Cz,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(wz,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(Az,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(yz,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(zT,"id","transformers.TFAutoModelForSeq2SeqLM"),d(zT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(zT,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Ic,"class","relative group"),d(Lz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(kz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sz,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(Rz,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(Bz,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(Pz,"href","/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d($z,"href","/docs/transformers/pr_16857/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(Iz,"href","/docs/transformers/pr_16857/en/model_doc/marian#transformers.TFMarianMTModel"),d(qz,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(Nz,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(jz,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(Dz,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(Fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(r8,"id","transformers.TFAutoModelForSequenceClassification"),d(r8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r8,"href","#transformers.TFAutoModelForSequenceClassification"),d(jc,"class","relative group"),d(Gz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Oz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(Vz,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Xz,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(zz,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(Qz,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(Wz,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(Hz,"href","/docs/transformers/pr_16857/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(Uz,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(Jz,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(Yz,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(Kz,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(Zz,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(eQ,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(oQ,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(rQ,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),d(tQ,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(aQ,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(nQ,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(sQ,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d(lQ,"href","/docs/transformers/pr_16857/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(iQ,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(dQ,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(cQ,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(fQ,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(mQ,"href","/docs/transformers/pr_16857/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(gQ,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(hQ,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(pQ,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(x8,"id","transformers.TFAutoModelForMultipleChoice"),d(x8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(x8,"href","#transformers.TFAutoModelForMultipleChoice"),d(Oc,"class","relative group"),d(_Q,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(uQ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(bQ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vQ,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(FQ,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(TQ,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(MQ,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(EQ,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(CQ,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(wQ,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(AQ,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(yQ,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(LQ,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(xQ,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(kQ,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(SQ,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(RQ,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(BQ,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(PQ,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d($Q,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(W8,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(W8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(W8,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(zc,"class","relative group"),d(IQ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qQ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NQ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jQ,"href","/docs/transformers/pr_16857/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(U8,"id","transformers.TFAutoModelForTokenClassification"),d(U8,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U8,"href","#transformers.TFAutoModelForTokenClassification"),d(Hc,"class","relative group"),d(DQ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GQ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OQ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VQ,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(XQ,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(zQ,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(QQ,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(WQ,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(HQ,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(UQ,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(JQ,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(YQ,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(KQ,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(ZQ,"href","/docs/transformers/pr_16857/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(eW,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(oW,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(rW,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(tW,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(aW,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(nW,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(sW,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(lW,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(iW,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(_7,"id","transformers.TFAutoModelForQuestionAnswering"),d(_7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_7,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Yc,"class","relative group"),d(dW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(cW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(fW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(mW,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(gW,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(hW,"href","/docs/transformers/pr_16857/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(pW,"href","/docs/transformers/pr_16857/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(_W,"href","/docs/transformers/pr_16857/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(uW,"href","/docs/transformers/pr_16857/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(bW,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d(vW,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(FW,"href","/docs/transformers/pr_16857/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(TW,"href","/docs/transformers/pr_16857/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(MW,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),d(EW,"href","/docs/transformers/pr_16857/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(CW,"href","/docs/transformers/pr_16857/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(wW,"href","/docs/transformers/pr_16857/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(AW,"href","/docs/transformers/pr_16857/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(yW,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(LW,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(xW,"href","/docs/transformers/pr_16857/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(kW,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(SW,"href","/docs/transformers/pr_16857/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(q7,"id","transformers.TFAutoModelForVision2Seq"),d(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(q7,"href","#transformers.TFAutoModelForVision2Seq"),d(ef,"class","relative group"),d(RW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(BW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(PW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($W,"href","/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j7,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(j7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j7,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(tf,"class","relative group"),d(IW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(NW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jW,"href","/docs/transformers/pr_16857/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G7,"id","transformers.FlaxAutoModel"),d(G7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G7,"href","#transformers.FlaxAutoModel"),d(sf,"class","relative group"),d(DW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(GW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(OW,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VW,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertModel"),d(XW,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartModel"),d(zW,"href","/docs/transformers/pr_16857/en/model_doc/beit#transformers.FlaxBeitModel"),d(QW,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertModel"),d(WW,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(HW,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(UW,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(JW,"href","/docs/transformers/pr_16857/en/model_doc/clip#transformers.FlaxCLIPModel"),d(YW,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(KW,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraModel"),d(ZW,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(eH,"href","/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(oH,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(rH,"href","/docs/transformers/pr_16857/en/model_doc/marian#transformers.FlaxMarianModel"),d(tH,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartModel"),d(aH,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.FlaxMT5Model"),d(nH,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(sH,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(lH,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(iH,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.FlaxT5Model"),d(dH,"href","/docs/transformers/pr_16857/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(cH,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.FlaxViTModel"),d(fH,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(mH,"href","/docs/transformers/pr_16857/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(gH,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(gM,"id","transformers.FlaxAutoModelForCausalLM"),d(gM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gM,"href","#transformers.FlaxAutoModelForCausalLM"),d(cf,"class","relative group"),d(hH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(pH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(_H,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(uH,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(bH,"href","/docs/transformers/pr_16857/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(vH,"href","/docs/transformers/pr_16857/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(FH,"href","/docs/transformers/pr_16857/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(TH,"href","/docs/transformers/pr_16857/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(vM,"id","transformers.FlaxAutoModelForPreTraining"),d(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(vM,"href","#transformers.FlaxAutoModelForPreTraining"),d(gf,"class","relative group"),d(MH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(EH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(CH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(wH,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(AH,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(yH,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(LH,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(xH,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(kH,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(SH,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(RH,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(BH,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(PH,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d($H,"href","/docs/transformers/pr_16857/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(IH,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(RM,"id","transformers.FlaxAutoModelForMaskedLM"),d(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(RM,"href","#transformers.FlaxAutoModelForMaskedLM"),d(_f,"class","relative group"),d(qH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(NH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(jH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(DH,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(GH,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(OH,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(VH,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(XH,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(zH,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(QH,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(WH,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(HH,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(UH,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(VM,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(VM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VM,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(vf,"class","relative group"),d(JH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(YH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(KH,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZH,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(eU,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(oU,"href","/docs/transformers/pr_16857/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(rU,"href","/docs/transformers/pr_16857/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(tU,"href","/docs/transformers/pr_16857/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(aU,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(nU,"href","/docs/transformers/pr_16857/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(sU,"href","/docs/transformers/pr_16857/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(lU,"href","/docs/transformers/pr_16857/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(ZM,"id","transformers.FlaxAutoModelForSequenceClassification"),d(ZM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZM,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(Mf,"class","relative group"),d(iU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(dU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(cU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(fU,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(mU,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(gU,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(hU,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(pU,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(_U,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(uU,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(bU,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(vU,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(FU,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(c4,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(c4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(c4,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(wf,"class","relative group"),d(TU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(MU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(EU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(CU,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(wU,"href","/docs/transformers/pr_16857/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(AU,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(yU,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(LU,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(xU,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(kU,"href","/docs/transformers/pr_16857/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(SU,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(RU,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(BU,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(T4,"id","transformers.FlaxAutoModelForTokenClassification"),d(T4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(T4,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Lf,"class","relative group"),d(PU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($U,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(IU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(qU,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(NU,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(jU,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(DU,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(GU,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(OU,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(VU,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(XU,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(k4,"id","transformers.FlaxAutoModelForMultipleChoice"),d(k4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(k4,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Sf,"class","relative group"),d(zU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(QU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(WU,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(HU,"href","/docs/transformers/pr_16857/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(UU,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(JU,"href","/docs/transformers/pr_16857/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(YU,"href","/docs/transformers/pr_16857/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(KU,"href","/docs/transformers/pr_16857/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d(ZU,"href","/docs/transformers/pr_16857/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(eJ,"href","/docs/transformers/pr_16857/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(oJ,"href","/docs/transformers/pr_16857/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(j4,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(j4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j4,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(Pf,"class","relative group"),d(rJ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(tJ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(aJ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(nJ,"href","/docs/transformers/pr_16857/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(G4,"id","transformers.FlaxAutoModelForImageClassification"),d(G4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(G4,"href","#transformers.FlaxAutoModelForImageClassification"),d(qf,"class","relative group"),d(sJ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(lJ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(iJ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(dJ,"href","/docs/transformers/pr_16857/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(cJ,"href","/docs/transformers/pr_16857/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(X4,"id","transformers.FlaxAutoModelForVision2Seq"),d(X4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(X4,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Df,"class","relative group"),d(fJ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(mJ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),d(gJ,"href","/docs/transformers/pr_16857/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),d(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(hJ,"href","/docs/transformers/pr_16857/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),d(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(c,u){e(document.head,oe),b(c,co,u),b(c,me,u),e(me,Ae),e(Ae,io),g(_e,io,null),e(me,Ce),e(me,Xo),e(Xo,zi),b(c,zf,u),b(c,fa,u),e(fa,Qi),e(fa,Wi),e(Wi,QE),e(fa,Qf),b(c,Se,u),b(c,fo,u),e(fo,Hi),e(fo,On),e(On,WE),e(fo,Vn),e(fo,Xn),e(Xn,HE),e(fo,Ui),e(fo,zn),e(zn,UE),e(fo,Ji),b(c,Wf,u),g(Da,c,u),b(c,mo,u),b(c,ve,u),e(ve,Q9),e(ve,Yi),e(Yi,W9),e(ve,H9),b(c,zo,u),b(c,Ga,u),e(Ga,U9),e(Ga,Hf),e(Hf,J9),e(Ga,_Ne),b(c,tPe,u),b(c,Ki,u),e(Ki,Uf),e(Uf,lK),g(JE,lK,null),e(Ki,uNe),e(Ki,iK),e(iK,bNe),b(c,aPe,u),b(c,Qn,u),e(Qn,vNe),e(Qn,dK),e(dK,FNe),e(Qn,TNe),e(Qn,cK),e(cK,MNe),e(Qn,ENe),b(c,nPe,u),g(YE,c,u),b(c,sPe,u),b(c,Y9,u),e(Y9,CNe),b(c,lPe,u),g(Jf,c,u),b(c,iPe,u),b(c,Zi,u),e(Zi,Yf),e(Yf,fK),g(KE,fK,null),e(Zi,wNe),e(Zi,mK),e(mK,ANe),b(c,dPe,u),b(c,Qo,u),g(ZE,Qo,null),e(Qo,yNe),e(Qo,e3),e(e3,LNe),e(e3,K9),e(K9,xNe),e(e3,kNe),e(Qo,SNe),e(Qo,o3),e(o3,RNe),e(o3,gK),e(gK,BNe),e(o3,PNe),e(Qo,$Ne),e(Qo,go),g(r3,go,null),e(go,INe),e(go,hK),e(hK,qNe),e(go,NNe),e(go,ed),e(ed,jNe),e(ed,pK),e(pK,DNe),e(ed,GNe),e(ed,_K),e(_K,ONe),e(ed,VNe),e(go,XNe),e(go,v),e(v,Kf),e(Kf,uK),e(uK,zNe),e(Kf,QNe),e(Kf,Z9),e(Z9,WNe),e(Kf,HNe),e(v,UNe),e(v,Zf),e(Zf,bK),e(bK,JNe),e(Zf,YNe),e(Zf,ex),e(ex,KNe),e(Zf,ZNe),e(v,eje),e(v,em),e(em,vK),e(vK,oje),e(em,rje),e(em,ox),e(ox,tje),e(em,aje),e(v,nje),e(v,om),e(om,FK),e(FK,sje),e(om,lje),e(om,rx),e(rx,ije),e(om,dje),e(v,cje),e(v,rm),e(rm,TK),e(TK,fje),e(rm,mje),e(rm,tx),e(tx,gje),e(rm,hje),e(v,pje),e(v,tm),e(tm,MK),e(MK,_je),e(tm,uje),e(tm,ax),e(ax,bje),e(tm,vje),e(v,Fje),e(v,am),e(am,EK),e(EK,Tje),e(am,Mje),e(am,nx),e(nx,Eje),e(am,Cje),e(v,wje),e(v,nm),e(nm,CK),e(CK,Aje),e(nm,yje),e(nm,sx),e(sx,Lje),e(nm,xje),e(v,kje),e(v,sm),e(sm,wK),e(wK,Sje),e(sm,Rje),e(sm,lx),e(lx,Bje),e(sm,Pje),e(v,$je),e(v,lm),e(lm,AK),e(AK,Ije),e(lm,qje),e(lm,ix),e(ix,Nje),e(lm,jje),e(v,Dje),e(v,im),e(im,yK),e(yK,Gje),e(im,Oje),e(im,dx),e(dx,Vje),e(im,Xje),e(v,zje),e(v,dm),e(dm,LK),e(LK,Qje),e(dm,Wje),e(dm,cx),e(cx,Hje),e(dm,Uje),e(v,Jje),e(v,cm),e(cm,xK),e(xK,Yje),e(cm,Kje),e(cm,fx),e(fx,Zje),e(cm,eDe),e(v,oDe),e(v,fm),e(fm,kK),e(kK,rDe),e(fm,tDe),e(fm,mx),e(mx,aDe),e(fm,nDe),e(v,sDe),e(v,mm),e(mm,SK),e(SK,lDe),e(mm,iDe),e(mm,gx),e(gx,dDe),e(mm,cDe),e(v,fDe),e(v,gm),e(gm,RK),e(RK,mDe),e(gm,gDe),e(gm,hx),e(hx,hDe),e(gm,pDe),e(v,_De),e(v,hm),e(hm,BK),e(BK,uDe),e(hm,bDe),e(hm,px),e(px,vDe),e(hm,FDe),e(v,TDe),e(v,pm),e(pm,PK),e(PK,MDe),e(pm,EDe),e(pm,_x),e(_x,CDe),e(pm,wDe),e(v,ADe),e(v,_m),e(_m,$K),e($K,yDe),e(_m,LDe),e(_m,ux),e(ux,xDe),e(_m,kDe),e(v,SDe),e(v,um),e(um,IK),e(IK,RDe),e(um,BDe),e(um,bx),e(bx,PDe),e(um,$De),e(v,IDe),e(v,bm),e(bm,qK),e(qK,qDe),e(bm,NDe),e(bm,vx),e(vx,jDe),e(bm,DDe),e(v,GDe),e(v,vm),e(vm,NK),e(NK,ODe),e(vm,VDe),e(vm,Fx),e(Fx,XDe),e(vm,zDe),e(v,QDe),e(v,Fm),e(Fm,jK),e(jK,WDe),e(Fm,HDe),e(Fm,Tx),e(Tx,UDe),e(Fm,JDe),e(v,YDe),e(v,Tm),e(Tm,DK),e(DK,KDe),e(Tm,ZDe),e(Tm,Mx),e(Mx,eGe),e(Tm,oGe),e(v,rGe),e(v,Mm),e(Mm,GK),e(GK,tGe),e(Mm,aGe),e(Mm,Ex),e(Ex,nGe),e(Mm,sGe),e(v,lGe),e(v,Em),e(Em,OK),e(OK,iGe),e(Em,dGe),e(Em,Cx),e(Cx,cGe),e(Em,fGe),e(v,mGe),e(v,Cm),e(Cm,VK),e(VK,gGe),e(Cm,hGe),e(Cm,wx),e(wx,pGe),e(Cm,_Ge),e(v,uGe),e(v,wm),e(wm,XK),e(XK,bGe),e(wm,vGe),e(wm,Ax),e(Ax,FGe),e(wm,TGe),e(v,MGe),e(v,Am),e(Am,zK),e(zK,EGe),e(Am,CGe),e(Am,yx),e(yx,wGe),e(Am,AGe),e(v,yGe),e(v,ym),e(ym,QK),e(QK,LGe),e(ym,xGe),e(ym,Lx),e(Lx,kGe),e(ym,SGe),e(v,RGe),e(v,Lm),e(Lm,WK),e(WK,BGe),e(Lm,PGe),e(Lm,xx),e(xx,$Ge),e(Lm,IGe),e(v,qGe),e(v,xm),e(xm,HK),e(HK,NGe),e(xm,jGe),e(xm,kx),e(kx,DGe),e(xm,GGe),e(v,OGe),e(v,km),e(km,UK),e(UK,VGe),e(km,XGe),e(km,Sx),e(Sx,zGe),e(km,QGe),e(v,WGe),e(v,Sm),e(Sm,JK),e(JK,HGe),e(Sm,UGe),e(Sm,Rx),e(Rx,JGe),e(Sm,YGe),e(v,KGe),e(v,Rm),e(Rm,YK),e(YK,ZGe),e(Rm,eOe),e(Rm,Bx),e(Bx,oOe),e(Rm,rOe),e(v,tOe),e(v,Bm),e(Bm,KK),e(KK,aOe),e(Bm,nOe),e(Bm,Px),e(Px,sOe),e(Bm,lOe),e(v,iOe),e(v,Pm),e(Pm,ZK),e(ZK,dOe),e(Pm,cOe),e(Pm,$x),e($x,fOe),e(Pm,mOe),e(v,gOe),e(v,$m),e($m,eZ),e(eZ,hOe),e($m,pOe),e($m,Ix),e(Ix,_Oe),e($m,uOe),e(v,bOe),e(v,Im),e(Im,oZ),e(oZ,vOe),e(Im,FOe),e(Im,qx),e(qx,TOe),e(Im,MOe),e(v,EOe),e(v,qm),e(qm,rZ),e(rZ,COe),e(qm,wOe),e(qm,Nx),e(Nx,AOe),e(qm,yOe),e(v,LOe),e(v,Nm),e(Nm,tZ),e(tZ,xOe),e(Nm,kOe),e(Nm,jx),e(jx,SOe),e(Nm,ROe),e(v,BOe),e(v,jm),e(jm,aZ),e(aZ,POe),e(jm,$Oe),e(jm,Dx),e(Dx,IOe),e(jm,qOe),e(v,NOe),e(v,Dm),e(Dm,nZ),e(nZ,jOe),e(Dm,DOe),e(Dm,Gx),e(Gx,GOe),e(Dm,OOe),e(v,VOe),e(v,Gm),e(Gm,sZ),e(sZ,XOe),e(Gm,zOe),e(Gm,Ox),e(Ox,QOe),e(Gm,WOe),e(v,HOe),e(v,Om),e(Om,lZ),e(lZ,UOe),e(Om,JOe),e(Om,Vx),e(Vx,YOe),e(Om,KOe),e(v,ZOe),e(v,Vm),e(Vm,iZ),e(iZ,eVe),e(Vm,oVe),e(Vm,Xx),e(Xx,rVe),e(Vm,tVe),e(v,aVe),e(v,Xm),e(Xm,dZ),e(dZ,nVe),e(Xm,sVe),e(Xm,zx),e(zx,lVe),e(Xm,iVe),e(v,dVe),e(v,zm),e(zm,cZ),e(cZ,cVe),e(zm,fVe),e(zm,Qx),e(Qx,mVe),e(zm,gVe),e(v,hVe),e(v,Qm),e(Qm,fZ),e(fZ,pVe),e(Qm,_Ve),e(Qm,Wx),e(Wx,uVe),e(Qm,bVe),e(v,vVe),e(v,Wm),e(Wm,mZ),e(mZ,FVe),e(Wm,TVe),e(Wm,Hx),e(Hx,MVe),e(Wm,EVe),e(v,CVe),e(v,Hm),e(Hm,gZ),e(gZ,wVe),e(Hm,AVe),e(Hm,Ux),e(Ux,yVe),e(Hm,LVe),e(v,xVe),e(v,Um),e(Um,hZ),e(hZ,kVe),e(Um,SVe),e(Um,Jx),e(Jx,RVe),e(Um,BVe),e(v,PVe),e(v,Jm),e(Jm,pZ),e(pZ,$Ve),e(Jm,IVe),e(Jm,Yx),e(Yx,qVe),e(Jm,NVe),e(v,jVe),e(v,Ym),e(Ym,_Z),e(_Z,DVe),e(Ym,GVe),e(Ym,Kx),e(Kx,OVe),e(Ym,VVe),e(v,XVe),e(v,Km),e(Km,uZ),e(uZ,zVe),e(Km,QVe),e(Km,Zx),e(Zx,WVe),e(Km,HVe),e(v,UVe),e(v,Zm),e(Zm,bZ),e(bZ,JVe),e(Zm,YVe),e(Zm,ek),e(ek,KVe),e(Zm,ZVe),e(v,eXe),e(v,eg),e(eg,vZ),e(vZ,oXe),e(eg,rXe),e(eg,ok),e(ok,tXe),e(eg,aXe),e(v,nXe),e(v,og),e(og,FZ),e(FZ,sXe),e(og,lXe),e(og,rk),e(rk,iXe),e(og,dXe),e(v,cXe),e(v,rg),e(rg,TZ),e(TZ,fXe),e(rg,mXe),e(rg,tk),e(tk,gXe),e(rg,hXe),e(v,pXe),e(v,tg),e(tg,MZ),e(MZ,_Xe),e(tg,uXe),e(tg,ak),e(ak,bXe),e(tg,vXe),e(v,FXe),e(v,ag),e(ag,EZ),e(EZ,TXe),e(ag,MXe),e(ag,nk),e(nk,EXe),e(ag,CXe),e(v,wXe),e(v,ng),e(ng,CZ),e(CZ,AXe),e(ng,yXe),e(ng,sk),e(sk,LXe),e(ng,xXe),e(v,kXe),e(v,sg),e(sg,wZ),e(wZ,SXe),e(sg,RXe),e(sg,lk),e(lk,BXe),e(sg,PXe),e(v,$Xe),e(v,lg),e(lg,AZ),e(AZ,IXe),e(lg,qXe),e(lg,ik),e(ik,NXe),e(lg,jXe),e(v,DXe),e(v,ig),e(ig,yZ),e(yZ,GXe),e(ig,OXe),e(ig,dk),e(dk,VXe),e(ig,XXe),e(v,zXe),e(v,dg),e(dg,LZ),e(LZ,QXe),e(dg,WXe),e(dg,ck),e(ck,HXe),e(dg,UXe),e(v,JXe),e(v,cg),e(cg,xZ),e(xZ,YXe),e(cg,KXe),e(cg,fk),e(fk,ZXe),e(cg,eze),e(v,oze),e(v,fg),e(fg,kZ),e(kZ,rze),e(fg,tze),e(fg,mk),e(mk,aze),e(fg,nze),e(v,sze),e(v,mg),e(mg,SZ),e(SZ,lze),e(mg,ize),e(mg,gk),e(gk,dze),e(mg,cze),e(v,fze),e(v,gg),e(gg,RZ),e(RZ,mze),e(gg,gze),e(gg,hk),e(hk,hze),e(gg,pze),e(v,_ze),e(v,hg),e(hg,BZ),e(BZ,uze),e(hg,bze),e(hg,pk),e(pk,vze),e(hg,Fze),e(v,Tze),e(v,pg),e(pg,PZ),e(PZ,Mze),e(pg,Eze),e(pg,_k),e(_k,Cze),e(pg,wze),e(v,Aze),e(v,_g),e(_g,$Z),e($Z,yze),e(_g,Lze),e(_g,uk),e(uk,xze),e(_g,kze),e(v,Sze),e(v,ug),e(ug,IZ),e(IZ,Rze),e(ug,Bze),e(ug,bk),e(bk,Pze),e(ug,$ze),e(v,Ize),e(v,bg),e(bg,qZ),e(qZ,qze),e(bg,Nze),e(bg,vk),e(vk,jze),e(bg,Dze),e(v,Gze),e(v,vg),e(vg,NZ),e(NZ,Oze),e(vg,Vze),e(vg,Fk),e(Fk,Xze),e(vg,zze),e(v,Qze),e(v,Fg),e(Fg,jZ),e(jZ,Wze),e(Fg,Hze),e(Fg,Tk),e(Tk,Uze),e(Fg,Jze),e(v,Yze),e(v,Tg),e(Tg,DZ),e(DZ,Kze),e(Tg,Zze),e(Tg,Mk),e(Mk,eQe),e(Tg,oQe),e(v,rQe),e(v,Mg),e(Mg,GZ),e(GZ,tQe),e(Mg,aQe),e(Mg,Ek),e(Ek,nQe),e(Mg,sQe),e(v,lQe),e(v,Eg),e(Eg,OZ),e(OZ,iQe),e(Eg,dQe),e(Eg,Ck),e(Ck,cQe),e(Eg,fQe),e(v,mQe),e(v,Cg),e(Cg,VZ),e(VZ,gQe),e(Cg,hQe),e(Cg,wk),e(wk,pQe),e(Cg,_Qe),e(v,uQe),e(v,wg),e(wg,XZ),e(XZ,bQe),e(wg,vQe),e(wg,Ak),e(Ak,FQe),e(wg,TQe),e(v,MQe),e(v,Ag),e(Ag,zZ),e(zZ,EQe),e(Ag,CQe),e(Ag,yk),e(yk,wQe),e(Ag,AQe),e(v,yQe),e(v,yg),e(yg,QZ),e(QZ,LQe),e(yg,xQe),e(yg,Lk),e(Lk,kQe),e(yg,SQe),e(v,RQe),e(v,Lg),e(Lg,WZ),e(WZ,BQe),e(Lg,PQe),e(Lg,xk),e(xk,$Qe),e(Lg,IQe),e(v,qQe),e(v,xg),e(xg,HZ),e(HZ,NQe),e(xg,jQe),e(xg,kk),e(kk,DQe),e(xg,GQe),e(v,OQe),e(v,kg),e(kg,UZ),e(UZ,VQe),e(kg,XQe),e(kg,Sk),e(Sk,zQe),e(kg,QQe),e(v,WQe),e(v,Sg),e(Sg,JZ),e(JZ,HQe),e(Sg,UQe),e(Sg,Rk),e(Rk,JQe),e(Sg,YQe),e(v,KQe),e(v,Rg),e(Rg,YZ),e(YZ,ZQe),e(Rg,eWe),e(Rg,Bk),e(Bk,oWe),e(Rg,rWe),e(v,tWe),e(v,Bg),e(Bg,KZ),e(KZ,aWe),e(Bg,nWe),e(Bg,Pk),e(Pk,sWe),e(Bg,lWe),e(v,iWe),e(v,Pg),e(Pg,ZZ),e(ZZ,dWe),e(Pg,cWe),e(Pg,$k),e($k,fWe),e(Pg,mWe),e(v,gWe),e(v,$g),e($g,eee),e(eee,hWe),e($g,pWe),e($g,Ik),e(Ik,_We),e($g,uWe),e(v,bWe),e(v,Ig),e(Ig,oee),e(oee,vWe),e(Ig,FWe),e(Ig,qk),e(qk,TWe),e(Ig,MWe),e(v,EWe),e(v,qg),e(qg,ree),e(ree,CWe),e(qg,wWe),e(qg,Nk),e(Nk,AWe),e(qg,yWe),e(v,LWe),e(v,Ng),e(Ng,tee),e(tee,xWe),e(Ng,kWe),e(Ng,jk),e(jk,SWe),e(Ng,RWe),e(v,BWe),e(v,jg),e(jg,aee),e(aee,PWe),e(jg,$We),e(jg,Dk),e(Dk,IWe),e(jg,qWe),e(v,NWe),e(v,Dg),e(Dg,nee),e(nee,jWe),e(Dg,DWe),e(Dg,Gk),e(Gk,GWe),e(Dg,OWe),e(v,VWe),e(v,Gg),e(Gg,see),e(see,XWe),e(Gg,zWe),e(Gg,Ok),e(Ok,QWe),e(Gg,WWe),e(v,HWe),e(v,Og),e(Og,lee),e(lee,UWe),e(Og,JWe),e(Og,Vk),e(Vk,YWe),e(Og,KWe),e(v,ZWe),e(v,Vg),e(Vg,iee),e(iee,eHe),e(Vg,oHe),e(Vg,Xk),e(Xk,rHe),e(Vg,tHe),e(v,aHe),e(v,Xg),e(Xg,dee),e(dee,nHe),e(Xg,sHe),e(Xg,zk),e(zk,lHe),e(Xg,iHe),e(v,dHe),e(v,zg),e(zg,cee),e(cee,cHe),e(zg,fHe),e(zg,Qk),e(Qk,mHe),e(zg,gHe),e(go,hHe),e(go,fee),e(fee,pHe),e(go,_He),g(t3,go,null),e(Qo,uHe),e(Qo,Qg),g(a3,Qg,null),e(Qg,bHe),e(Qg,mee),e(mee,vHe),b(c,cPe,u),b(c,od,u),e(od,Wg),e(Wg,gee),g(n3,gee,null),e(od,FHe),e(od,hee),e(hee,THe),b(c,fPe,u),b(c,Wo,u),g(s3,Wo,null),e(Wo,MHe),e(Wo,l3),e(l3,EHe),e(l3,Wk),e(Wk,CHe),e(l3,wHe),e(Wo,AHe),e(Wo,i3),e(i3,yHe),e(i3,pee),e(pee,LHe),e(i3,xHe),e(Wo,kHe),e(Wo,ho),g(d3,ho,null),e(ho,SHe),e(ho,_ee),e(_ee,RHe),e(ho,BHe),e(ho,Oa),e(Oa,PHe),e(Oa,uee),e(uee,$He),e(Oa,IHe),e(Oa,bee),e(bee,qHe),e(Oa,NHe),e(Oa,vee),e(vee,jHe),e(Oa,DHe),e(ho,GHe),e(ho,E),e(E,Wn),e(Wn,Fee),e(Fee,OHe),e(Wn,VHe),e(Wn,Hk),e(Hk,XHe),e(Wn,zHe),e(Wn,Uk),e(Uk,QHe),e(Wn,WHe),e(E,HHe),e(E,Hn),e(Hn,Tee),e(Tee,UHe),e(Hn,JHe),e(Hn,Jk),e(Jk,YHe),e(Hn,KHe),e(Hn,Yk),e(Yk,ZHe),e(Hn,eUe),e(E,oUe),e(E,Un),e(Un,Mee),e(Mee,rUe),e(Un,tUe),e(Un,Kk),e(Kk,aUe),e(Un,nUe),e(Un,Zk),e(Zk,sUe),e(Un,lUe),e(E,iUe),e(E,Hg),e(Hg,Eee),e(Eee,dUe),e(Hg,cUe),e(Hg,eS),e(eS,fUe),e(Hg,mUe),e(E,gUe),e(E,Jn),e(Jn,Cee),e(Cee,hUe),e(Jn,pUe),e(Jn,oS),e(oS,_Ue),e(Jn,uUe),e(Jn,rS),e(rS,bUe),e(Jn,vUe),e(E,FUe),e(E,Ug),e(Ug,wee),e(wee,TUe),e(Ug,MUe),e(Ug,tS),e(tS,EUe),e(Ug,CUe),e(E,wUe),e(E,Jg),e(Jg,Aee),e(Aee,AUe),e(Jg,yUe),e(Jg,aS),e(aS,LUe),e(Jg,xUe),e(E,kUe),e(E,Yg),e(Yg,yee),e(yee,SUe),e(Yg,RUe),e(Yg,nS),e(nS,BUe),e(Yg,PUe),e(E,$Ue),e(E,Yn),e(Yn,Lee),e(Lee,IUe),e(Yn,qUe),e(Yn,sS),e(sS,NUe),e(Yn,jUe),e(Yn,lS),e(lS,DUe),e(Yn,GUe),e(E,OUe),e(E,Kn),e(Kn,xee),e(xee,VUe),e(Kn,XUe),e(Kn,iS),e(iS,zUe),e(Kn,QUe),e(Kn,dS),e(dS,WUe),e(Kn,HUe),e(E,UUe),e(E,Zn),e(Zn,kee),e(kee,JUe),e(Zn,YUe),e(Zn,cS),e(cS,KUe),e(Zn,ZUe),e(Zn,fS),e(fS,eJe),e(Zn,oJe),e(E,rJe),e(E,Kg),e(Kg,See),e(See,tJe),e(Kg,aJe),e(Kg,mS),e(mS,nJe),e(Kg,sJe),e(E,lJe),e(E,Zg),e(Zg,Ree),e(Ree,iJe),e(Zg,dJe),e(Zg,gS),e(gS,cJe),e(Zg,fJe),e(E,mJe),e(E,es),e(es,Bee),e(Bee,gJe),e(es,hJe),e(es,hS),e(hS,pJe),e(es,_Je),e(es,pS),e(pS,uJe),e(es,bJe),e(E,vJe),e(E,eh),e(eh,Pee),e(Pee,FJe),e(eh,TJe),e(eh,_S),e(_S,MJe),e(eh,EJe),e(E,CJe),e(E,os),e(os,$ee),e($ee,wJe),e(os,AJe),e(os,uS),e(uS,yJe),e(os,LJe),e(os,bS),e(bS,xJe),e(os,kJe),e(E,SJe),e(E,rs),e(rs,Iee),e(Iee,RJe),e(rs,BJe),e(rs,vS),e(vS,PJe),e(rs,$Je),e(rs,FS),e(FS,IJe),e(rs,qJe),e(E,NJe),e(E,ts),e(ts,qee),e(qee,jJe),e(ts,DJe),e(ts,TS),e(TS,GJe),e(ts,OJe),e(ts,Nee),e(Nee,VJe),e(ts,XJe),e(E,zJe),e(E,oh),e(oh,jee),e(jee,QJe),e(oh,WJe),e(oh,MS),e(MS,HJe),e(oh,UJe),e(E,JJe),e(E,as),e(as,Dee),e(Dee,YJe),e(as,KJe),e(as,ES),e(ES,ZJe),e(as,eYe),e(as,CS),e(CS,oYe),e(as,rYe),e(E,tYe),e(E,ns),e(ns,Gee),e(Gee,aYe),e(ns,nYe),e(ns,wS),e(wS,sYe),e(ns,lYe),e(ns,AS),e(AS,iYe),e(ns,dYe),e(E,cYe),e(E,ss),e(ss,Oee),e(Oee,fYe),e(ss,mYe),e(ss,yS),e(yS,gYe),e(ss,hYe),e(ss,LS),e(LS,pYe),e(ss,_Ye),e(E,uYe),e(E,ls),e(ls,Vee),e(Vee,bYe),e(ls,vYe),e(ls,xS),e(xS,FYe),e(ls,TYe),e(ls,kS),e(kS,MYe),e(ls,EYe),e(E,CYe),e(E,is),e(is,Xee),e(Xee,wYe),e(is,AYe),e(is,SS),e(SS,yYe),e(is,LYe),e(is,RS),e(RS,xYe),e(is,kYe),e(E,SYe),e(E,ds),e(ds,zee),e(zee,RYe),e(ds,BYe),e(ds,BS),e(BS,PYe),e(ds,$Ye),e(ds,PS),e(PS,IYe),e(ds,qYe),e(E,NYe),e(E,rh),e(rh,Qee),e(Qee,jYe),e(rh,DYe),e(rh,$S),e($S,GYe),e(rh,OYe),e(E,VYe),e(E,cs),e(cs,Wee),e(Wee,XYe),e(cs,zYe),e(cs,IS),e(IS,QYe),e(cs,WYe),e(cs,qS),e(qS,HYe),e(cs,UYe),e(E,JYe),e(E,th),e(th,Hee),e(Hee,YYe),e(th,KYe),e(th,NS),e(NS,ZYe),e(th,eKe),e(E,oKe),e(E,fs),e(fs,Uee),e(Uee,rKe),e(fs,tKe),e(fs,jS),e(jS,aKe),e(fs,nKe),e(fs,DS),e(DS,sKe),e(fs,lKe),e(E,iKe),e(E,ms),e(ms,Jee),e(Jee,dKe),e(ms,cKe),e(ms,GS),e(GS,fKe),e(ms,mKe),e(ms,OS),e(OS,gKe),e(ms,hKe),e(E,pKe),e(E,gs),e(gs,Yee),e(Yee,_Ke),e(gs,uKe),e(gs,VS),e(VS,bKe),e(gs,vKe),e(gs,XS),e(XS,FKe),e(gs,TKe),e(E,MKe),e(E,hs),e(hs,Kee),e(Kee,EKe),e(hs,CKe),e(hs,zS),e(zS,wKe),e(hs,AKe),e(hs,QS),e(QS,yKe),e(hs,LKe),e(E,xKe),e(E,ps),e(ps,Zee),e(Zee,kKe),e(ps,SKe),e(ps,WS),e(WS,RKe),e(ps,BKe),e(ps,HS),e(HS,PKe),e(ps,$Ke),e(E,IKe),e(E,ah),e(ah,eoe),e(eoe,qKe),e(ah,NKe),e(ah,US),e(US,jKe),e(ah,DKe),e(E,GKe),e(E,_s),e(_s,ooe),e(ooe,OKe),e(_s,VKe),e(_s,JS),e(JS,XKe),e(_s,zKe),e(_s,YS),e(YS,QKe),e(_s,WKe),e(E,HKe),e(E,us),e(us,roe),e(roe,UKe),e(us,JKe),e(us,KS),e(KS,YKe),e(us,KKe),e(us,ZS),e(ZS,ZKe),e(us,eZe),e(E,oZe),e(E,bs),e(bs,toe),e(toe,rZe),e(bs,tZe),e(bs,eR),e(eR,aZe),e(bs,nZe),e(bs,oR),e(oR,sZe),e(bs,lZe),e(E,iZe),e(E,vs),e(vs,aoe),e(aoe,dZe),e(vs,cZe),e(vs,rR),e(rR,fZe),e(vs,mZe),e(vs,tR),e(tR,gZe),e(vs,hZe),e(E,pZe),e(E,Fs),e(Fs,noe),e(noe,_Ze),e(Fs,uZe),e(Fs,aR),e(aR,bZe),e(Fs,vZe),e(Fs,nR),e(nR,FZe),e(Fs,TZe),e(E,MZe),e(E,Ts),e(Ts,soe),e(soe,EZe),e(Ts,CZe),e(Ts,sR),e(sR,wZe),e(Ts,AZe),e(Ts,lR),e(lR,yZe),e(Ts,LZe),e(E,xZe),e(E,nh),e(nh,loe),e(loe,kZe),e(nh,SZe),e(nh,iR),e(iR,RZe),e(nh,BZe),e(E,PZe),e(E,Ms),e(Ms,ioe),e(ioe,$Ze),e(Ms,IZe),e(Ms,dR),e(dR,qZe),e(Ms,NZe),e(Ms,cR),e(cR,jZe),e(Ms,DZe),e(E,GZe),e(E,sh),e(sh,doe),e(doe,OZe),e(sh,VZe),e(sh,fR),e(fR,XZe),e(sh,zZe),e(E,QZe),e(E,lh),e(lh,coe),e(coe,WZe),e(lh,HZe),e(lh,mR),e(mR,UZe),e(lh,JZe),e(E,YZe),e(E,Es),e(Es,foe),e(foe,KZe),e(Es,ZZe),e(Es,gR),e(gR,eeo),e(Es,oeo),e(Es,hR),e(hR,reo),e(Es,teo),e(E,aeo),e(E,Cs),e(Cs,moe),e(moe,neo),e(Cs,seo),e(Cs,pR),e(pR,leo),e(Cs,ieo),e(Cs,_R),e(_R,deo),e(Cs,ceo),e(E,feo),e(E,ws),e(ws,goe),e(goe,meo),e(ws,geo),e(ws,uR),e(uR,heo),e(ws,peo),e(ws,bR),e(bR,_eo),e(ws,ueo),e(E,beo),e(E,ih),e(ih,hoe),e(hoe,veo),e(ih,Feo),e(ih,vR),e(vR,Teo),e(ih,Meo),e(E,Eeo),e(E,As),e(As,poe),e(poe,Ceo),e(As,weo),e(As,FR),e(FR,Aeo),e(As,yeo),e(As,TR),e(TR,Leo),e(As,xeo),e(E,keo),e(E,ys),e(ys,_oe),e(_oe,Seo),e(ys,Reo),e(ys,MR),e(MR,Beo),e(ys,Peo),e(ys,ER),e(ER,$eo),e(ys,Ieo),e(E,qeo),e(E,Ls),e(Ls,uoe),e(uoe,Neo),e(Ls,jeo),e(Ls,CR),e(CR,Deo),e(Ls,Geo),e(Ls,wR),e(wR,Oeo),e(Ls,Veo),e(E,Xeo),e(E,xs),e(xs,boe),e(boe,zeo),e(xs,Qeo),e(xs,AR),e(AR,Weo),e(xs,Heo),e(xs,yR),e(yR,Ueo),e(xs,Jeo),e(E,Yeo),e(E,ks),e(ks,voe),e(voe,Keo),e(ks,Zeo),e(ks,LR),e(LR,eoo),e(ks,ooo),e(ks,xR),e(xR,roo),e(ks,too),e(E,aoo),e(E,Ss),e(Ss,Foe),e(Foe,noo),e(Ss,soo),e(Ss,kR),e(kR,loo),e(Ss,ioo),e(Ss,SR),e(SR,doo),e(Ss,coo),e(E,foo),e(E,dh),e(dh,Toe),e(Toe,moo),e(dh,goo),e(dh,RR),e(RR,hoo),e(dh,poo),e(E,_oo),e(E,ch),e(ch,Moe),e(Moe,uoo),e(ch,boo),e(ch,BR),e(BR,voo),e(ch,Foo),e(E,Too),e(E,fh),e(fh,Eoe),e(Eoe,Moo),e(fh,Eoo),e(fh,PR),e(PR,Coo),e(fh,woo),e(E,Aoo),e(E,mh),e(mh,Coe),e(Coe,yoo),e(mh,Loo),e(mh,$R),e($R,xoo),e(mh,koo),e(E,Soo),e(E,Rs),e(Rs,woe),e(woe,Roo),e(Rs,Boo),e(Rs,IR),e(IR,Poo),e(Rs,$oo),e(Rs,qR),e(qR,Ioo),e(Rs,qoo),e(E,Noo),e(E,gh),e(gh,Aoe),e(Aoe,joo),e(gh,Doo),e(gh,NR),e(NR,Goo),e(gh,Ooo),e(E,Voo),e(E,Bs),e(Bs,yoe),e(yoe,Xoo),e(Bs,zoo),e(Bs,jR),e(jR,Qoo),e(Bs,Woo),e(Bs,DR),e(DR,Hoo),e(Bs,Uoo),e(E,Joo),e(E,Ps),e(Ps,Loe),e(Loe,Yoo),e(Ps,Koo),e(Ps,GR),e(GR,Zoo),e(Ps,ero),e(Ps,OR),e(OR,oro),e(Ps,rro),e(E,tro),e(E,$s),e($s,xoe),e(xoe,aro),e($s,nro),e($s,VR),e(VR,sro),e($s,lro),e($s,XR),e(XR,iro),e($s,dro),e(E,cro),e(E,Is),e(Is,koe),e(koe,fro),e(Is,mro),e(Is,zR),e(zR,gro),e(Is,hro),e(Is,QR),e(QR,pro),e(Is,_ro),e(E,uro),e(E,qs),e(qs,Soe),e(Soe,bro),e(qs,vro),e(qs,WR),e(WR,Fro),e(qs,Tro),e(qs,HR),e(HR,Mro),e(qs,Ero),e(E,Cro),e(E,Ns),e(Ns,Roe),e(Roe,wro),e(Ns,Aro),e(Ns,UR),e(UR,yro),e(Ns,Lro),e(Ns,JR),e(JR,xro),e(Ns,kro),e(E,Sro),e(E,hh),e(hh,Boe),e(Boe,Rro),e(hh,Bro),e(hh,YR),e(YR,Pro),e(hh,$ro),e(E,Iro),e(E,ph),e(ph,Poe),e(Poe,qro),e(ph,Nro),e(ph,KR),e(KR,jro),e(ph,Dro),e(E,Gro),e(E,js),e(js,$oe),e($oe,Oro),e(js,Vro),e(js,ZR),e(ZR,Xro),e(js,zro),e(js,eB),e(eB,Qro),e(js,Wro),e(E,Hro),e(E,Ds),e(Ds,Ioe),e(Ioe,Uro),e(Ds,Jro),e(Ds,oB),e(oB,Yro),e(Ds,Kro),e(Ds,rB),e(rB,Zro),e(Ds,eto),e(E,oto),e(E,Gs),e(Gs,qoe),e(qoe,rto),e(Gs,tto),e(Gs,tB),e(tB,ato),e(Gs,nto),e(Gs,aB),e(aB,sto),e(Gs,lto),e(E,ito),e(E,_h),e(_h,Noe),e(Noe,dto),e(_h,cto),e(_h,nB),e(nB,fto),e(_h,mto),e(E,gto),e(E,uh),e(uh,joe),e(joe,hto),e(uh,pto),e(uh,sB),e(sB,_to),e(uh,uto),e(E,bto),e(E,bh),e(bh,Doe),e(Doe,vto),e(bh,Fto),e(bh,lB),e(lB,Tto),e(bh,Mto),e(E,Eto),e(E,Os),e(Os,Goe),e(Goe,Cto),e(Os,wto),e(Os,iB),e(iB,Ato),e(Os,yto),e(Os,dB),e(dB,Lto),e(Os,xto),e(E,kto),e(E,vh),e(vh,Ooe),e(Ooe,Sto),e(vh,Rto),e(vh,cB),e(cB,Bto),e(vh,Pto),e(E,$to),e(E,Fh),e(Fh,Voe),e(Voe,Ito),e(Fh,qto),e(Fh,fB),e(fB,Nto),e(Fh,jto),e(E,Dto),e(E,Vs),e(Vs,Xoe),e(Xoe,Gto),e(Vs,Oto),e(Vs,mB),e(mB,Vto),e(Vs,Xto),e(Vs,gB),e(gB,zto),e(Vs,Qto),e(E,Wto),e(E,Th),e(Th,zoe),e(zoe,Hto),e(Th,Uto),e(Th,hB),e(hB,Jto),e(Th,Yto),e(E,Kto),e(E,Mh),e(Mh,Qoe),e(Qoe,Zto),e(Mh,eao),e(Mh,pB),e(pB,oao),e(Mh,rao),e(E,tao),e(E,Xs),e(Xs,Woe),e(Woe,aao),e(Xs,nao),e(Xs,_B),e(_B,sao),e(Xs,lao),e(Xs,uB),e(uB,iao),e(Xs,dao),e(E,cao),e(E,zs),e(zs,Hoe),e(Hoe,fao),e(zs,mao),e(zs,bB),e(bB,gao),e(zs,hao),e(zs,vB),e(vB,pao),e(zs,_ao),e(E,uao),e(E,Qs),e(Qs,Uoe),e(Uoe,bao),e(Qs,vao),e(Qs,FB),e(FB,Fao),e(Qs,Tao),e(Qs,TB),e(TB,Mao),e(Qs,Eao),e(E,Cao),e(E,Ws),e(Ws,Joe),e(Joe,wao),e(Ws,Aao),e(Ws,MB),e(MB,yao),e(Ws,Lao),e(Ws,EB),e(EB,xao),e(Ws,kao),e(ho,Sao),e(ho,Yoe),e(Yoe,Rao),e(ho,Bao),g(c3,ho,null),e(Wo,Pao),e(Wo,Eh),g(f3,Eh,null),e(Eh,$ao),e(Eh,Koe),e(Koe,Iao),b(c,mPe,u),b(c,rd,u),e(rd,Ch),e(Ch,Zoe),g(m3,Zoe,null),e(rd,qao),e(rd,ere),e(ere,Nao),b(c,gPe,u),b(c,Ho,u),g(g3,Ho,null),e(Ho,jao),e(Ho,h3),e(h3,Dao),e(h3,CB),e(CB,Gao),e(h3,Oao),e(Ho,Vao),e(Ho,p3),e(p3,Xao),e(p3,ore),e(ore,zao),e(p3,Qao),e(Ho,Wao),e(Ho,Ie),g(_3,Ie,null),e(Ie,Hao),e(Ie,rre),e(rre,Uao),e(Ie,Jao),e(Ie,Va),e(Va,Yao),e(Va,tre),e(tre,Kao),e(Va,Zao),e(Va,are),e(are,eno),e(Va,ono),e(Va,nre),e(nre,rno),e(Va,tno),e(Ie,ano),e(Ie,W),e(W,wh),e(wh,sre),e(sre,nno),e(wh,sno),e(wh,wB),e(wB,lno),e(wh,ino),e(W,dno),e(W,Ah),e(Ah,lre),e(lre,cno),e(Ah,fno),e(Ah,AB),e(AB,mno),e(Ah,gno),e(W,hno),e(W,yh),e(yh,ire),e(ire,pno),e(yh,_no),e(yh,yB),e(yB,uno),e(yh,bno),e(W,vno),e(W,Lh),e(Lh,dre),e(dre,Fno),e(Lh,Tno),e(Lh,LB),e(LB,Mno),e(Lh,Eno),e(W,Cno),e(W,xh),e(xh,cre),e(cre,wno),e(xh,Ano),e(xh,xB),e(xB,yno),e(xh,Lno),e(W,xno),e(W,kh),e(kh,fre),e(fre,kno),e(kh,Sno),e(kh,kB),e(kB,Rno),e(kh,Bno),e(W,Pno),e(W,Sh),e(Sh,mre),e(mre,$no),e(Sh,Ino),e(Sh,SB),e(SB,qno),e(Sh,Nno),e(W,jno),e(W,Rh),e(Rh,gre),e(gre,Dno),e(Rh,Gno),e(Rh,RB),e(RB,Ono),e(Rh,Vno),e(W,Xno),e(W,Bh),e(Bh,hre),e(hre,zno),e(Bh,Qno),e(Bh,BB),e(BB,Wno),e(Bh,Hno),e(W,Uno),e(W,Ph),e(Ph,pre),e(pre,Jno),e(Ph,Yno),e(Ph,PB),e(PB,Kno),e(Ph,Zno),e(W,eso),e(W,$h),e($h,_re),e(_re,oso),e($h,rso),e($h,$B),e($B,tso),e($h,aso),e(W,nso),e(W,Ih),e(Ih,ure),e(ure,sso),e(Ih,lso),e(Ih,IB),e(IB,iso),e(Ih,dso),e(W,cso),e(W,qh),e(qh,bre),e(bre,fso),e(qh,mso),e(qh,qB),e(qB,gso),e(qh,hso),e(W,pso),e(W,Nh),e(Nh,vre),e(vre,_so),e(Nh,uso),e(Nh,NB),e(NB,bso),e(Nh,vso),e(W,Fso),e(W,jh),e(jh,Fre),e(Fre,Tso),e(jh,Mso),e(jh,jB),e(jB,Eso),e(jh,Cso),e(W,wso),e(W,Dh),e(Dh,Tre),e(Tre,Aso),e(Dh,yso),e(Dh,DB),e(DB,Lso),e(Dh,xso),e(W,kso),e(W,Gh),e(Gh,Mre),e(Mre,Sso),e(Gh,Rso),e(Gh,GB),e(GB,Bso),e(Gh,Pso),e(W,$so),e(W,Oh),e(Oh,Ere),e(Ere,Iso),e(Oh,qso),e(Oh,OB),e(OB,Nso),e(Oh,jso),e(W,Dso),e(W,Vh),e(Vh,Cre),e(Cre,Gso),e(Vh,Oso),e(Vh,VB),e(VB,Vso),e(Vh,Xso),e(W,zso),e(W,Xh),e(Xh,wre),e(wre,Qso),e(Xh,Wso),e(Xh,XB),e(XB,Hso),e(Xh,Uso),e(W,Jso),e(W,zh),e(zh,Are),e(Are,Yso),e(zh,Kso),e(zh,zB),e(zB,Zso),e(zh,elo),e(W,olo),e(W,Qh),e(Qh,yre),e(yre,rlo),e(Qh,tlo),e(Qh,QB),e(QB,alo),e(Qh,nlo),e(W,slo),e(W,Wh),e(Wh,Lre),e(Lre,llo),e(Wh,ilo),e(Wh,WB),e(WB,dlo),e(Wh,clo),e(W,flo),e(W,Hh),e(Hh,xre),e(xre,mlo),e(Hh,glo),e(Hh,HB),e(HB,hlo),e(Hh,plo),e(Ie,_lo),g(Uh,Ie,null),e(Ie,ulo),e(Ie,kre),e(kre,blo),e(Ie,vlo),g(u3,Ie,null),e(Ho,Flo),e(Ho,Jh),g(b3,Jh,null),e(Jh,Tlo),e(Jh,Sre),e(Sre,Mlo),b(c,hPe,u),b(c,td,u),e(td,Yh),e(Yh,Rre),g(v3,Rre,null),e(td,Elo),e(td,Bre),e(Bre,Clo),b(c,pPe,u),b(c,Uo,u),g(F3,Uo,null),e(Uo,wlo),e(Uo,T3),e(T3,Alo),e(T3,UB),e(UB,ylo),e(T3,Llo),e(Uo,xlo),e(Uo,M3),e(M3,klo),e(M3,Pre),e(Pre,Slo),e(M3,Rlo),e(Uo,Blo),e(Uo,qe),g(E3,qe,null),e(qe,Plo),e(qe,$re),e($re,$lo),e(qe,Ilo),e(qe,ad),e(ad,qlo),e(ad,Ire),e(Ire,Nlo),e(ad,jlo),e(ad,qre),e(qre,Dlo),e(ad,Glo),e(qe,Olo),e(qe,de),e(de,Kh),e(Kh,Nre),e(Nre,Vlo),e(Kh,Xlo),e(Kh,JB),e(JB,zlo),e(Kh,Qlo),e(de,Wlo),e(de,Zh),e(Zh,jre),e(jre,Hlo),e(Zh,Ulo),e(Zh,YB),e(YB,Jlo),e(Zh,Ylo),e(de,Klo),e(de,ep),e(ep,Dre),e(Dre,Zlo),e(ep,eio),e(ep,KB),e(KB,oio),e(ep,rio),e(de,tio),e(de,op),e(op,Gre),e(Gre,aio),e(op,nio),e(op,ZB),e(ZB,sio),e(op,lio),e(de,iio),e(de,rp),e(rp,Ore),e(Ore,dio),e(rp,cio),e(rp,eP),e(eP,fio),e(rp,mio),e(de,gio),e(de,tp),e(tp,Vre),e(Vre,hio),e(tp,pio),e(tp,oP),e(oP,_io),e(tp,uio),e(de,bio),e(de,ap),e(ap,Xre),e(Xre,vio),e(ap,Fio),e(ap,rP),e(rP,Tio),e(ap,Mio),e(de,Eio),e(de,np),e(np,zre),e(zre,Cio),e(np,wio),e(np,tP),e(tP,Aio),e(np,yio),e(de,Lio),e(de,sp),e(sp,Qre),e(Qre,xio),e(sp,kio),e(sp,aP),e(aP,Sio),e(sp,Rio),e(de,Bio),e(de,lp),e(lp,Wre),e(Wre,Pio),e(lp,$io),e(lp,nP),e(nP,Iio),e(lp,qio),e(de,Nio),e(de,ip),e(ip,Hre),e(Hre,jio),e(ip,Dio),e(ip,sP),e(sP,Gio),e(ip,Oio),e(de,Vio),e(de,dp),e(dp,Ure),e(Ure,Xio),e(dp,zio),e(dp,lP),e(lP,Qio),e(dp,Wio),e(de,Hio),e(de,cp),e(cp,Jre),e(Jre,Uio),e(cp,Jio),e(cp,iP),e(iP,Yio),e(cp,Kio),e(de,Zio),e(de,fp),e(fp,Yre),e(Yre,edo),e(fp,odo),e(fp,dP),e(dP,rdo),e(fp,tdo),e(qe,ado),g(mp,qe,null),e(qe,ndo),e(qe,Kre),e(Kre,sdo),e(qe,ldo),g(C3,qe,null),e(Uo,ido),e(Uo,gp),g(w3,gp,null),e(gp,ddo),e(gp,Zre),e(Zre,cdo),b(c,_Pe,u),b(c,nd,u),e(nd,hp),e(hp,ete),g(A3,ete,null),e(nd,fdo),e(nd,ote),e(ote,mdo),b(c,uPe,u),b(c,Jo,u),g(y3,Jo,null),e(Jo,gdo),e(Jo,sd),e(sd,hdo),e(sd,cP),e(cP,pdo),e(sd,_do),e(sd,fP),e(fP,udo),e(sd,bdo),e(Jo,vdo),e(Jo,L3),e(L3,Fdo),e(L3,rte),e(rte,Tdo),e(L3,Mdo),e(Jo,Edo),e(Jo,Xr),g(x3,Xr,null),e(Xr,Cdo),e(Xr,tte),e(tte,wdo),e(Xr,Ado),e(Xr,ld),e(ld,ydo),e(ld,ate),e(ate,Ldo),e(ld,xdo),e(ld,mP),e(mP,kdo),e(ld,Sdo),e(Xr,Rdo),e(Xr,nte),e(nte,Bdo),e(Xr,Pdo),g(k3,Xr,null),e(Jo,$do),e(Jo,Ne),g(S3,Ne,null),e(Ne,Ido),e(Ne,ste),e(ste,qdo),e(Ne,Ndo),e(Ne,Xa),e(Xa,jdo),e(Xa,lte),e(lte,Ddo),e(Xa,Gdo),e(Xa,ite),e(ite,Odo),e(Xa,Vdo),e(Xa,dte),e(dte,Xdo),e(Xa,zdo),e(Ne,Qdo),e(Ne,T),e(T,pp),e(pp,cte),e(cte,Wdo),e(pp,Hdo),e(pp,gP),e(gP,Udo),e(pp,Jdo),e(T,Ydo),e(T,_p),e(_p,fte),e(fte,Kdo),e(_p,Zdo),e(_p,hP),e(hP,eco),e(_p,oco),e(T,rco),e(T,up),e(up,mte),e(mte,tco),e(up,aco),e(up,pP),e(pP,nco),e(up,sco),e(T,lco),e(T,bp),e(bp,gte),e(gte,ico),e(bp,dco),e(bp,_P),e(_P,cco),e(bp,fco),e(T,mco),e(T,vp),e(vp,hte),e(hte,gco),e(vp,hco),e(vp,uP),e(uP,pco),e(vp,_co),e(T,uco),e(T,Fp),e(Fp,pte),e(pte,bco),e(Fp,vco),e(Fp,bP),e(bP,Fco),e(Fp,Tco),e(T,Mco),e(T,Tp),e(Tp,_te),e(_te,Eco),e(Tp,Cco),e(Tp,vP),e(vP,wco),e(Tp,Aco),e(T,yco),e(T,Mp),e(Mp,ute),e(ute,Lco),e(Mp,xco),e(Mp,FP),e(FP,kco),e(Mp,Sco),e(T,Rco),e(T,Ep),e(Ep,bte),e(bte,Bco),e(Ep,Pco),e(Ep,TP),e(TP,$co),e(Ep,Ico),e(T,qco),e(T,Cp),e(Cp,vte),e(vte,Nco),e(Cp,jco),e(Cp,MP),e(MP,Dco),e(Cp,Gco),e(T,Oco),e(T,wp),e(wp,Fte),e(Fte,Vco),e(wp,Xco),e(wp,EP),e(EP,zco),e(wp,Qco),e(T,Wco),e(T,Ap),e(Ap,Tte),e(Tte,Hco),e(Ap,Uco),e(Ap,CP),e(CP,Jco),e(Ap,Yco),e(T,Kco),e(T,yp),e(yp,Mte),e(Mte,Zco),e(yp,efo),e(yp,wP),e(wP,ofo),e(yp,rfo),e(T,tfo),e(T,Lp),e(Lp,Ete),e(Ete,afo),e(Lp,nfo),e(Lp,AP),e(AP,sfo),e(Lp,lfo),e(T,ifo),e(T,xp),e(xp,Cte),e(Cte,dfo),e(xp,cfo),e(xp,yP),e(yP,ffo),e(xp,mfo),e(T,gfo),e(T,kp),e(kp,wte),e(wte,hfo),e(kp,pfo),e(kp,LP),e(LP,_fo),e(kp,ufo),e(T,bfo),e(T,Sp),e(Sp,Ate),e(Ate,vfo),e(Sp,Ffo),e(Sp,xP),e(xP,Tfo),e(Sp,Mfo),e(T,Efo),e(T,Rp),e(Rp,yte),e(yte,Cfo),e(Rp,wfo),e(Rp,kP),e(kP,Afo),e(Rp,yfo),e(T,Lfo),e(T,Bp),e(Bp,Lte),e(Lte,xfo),e(Bp,kfo),e(Bp,SP),e(SP,Sfo),e(Bp,Rfo),e(T,Bfo),e(T,Pp),e(Pp,xte),e(xte,Pfo),e(Pp,$fo),e(Pp,RP),e(RP,Ifo),e(Pp,qfo),e(T,Nfo),e(T,$p),e($p,kte),e(kte,jfo),e($p,Dfo),e($p,BP),e(BP,Gfo),e($p,Ofo),e(T,Vfo),e(T,Ip),e(Ip,Ste),e(Ste,Xfo),e(Ip,zfo),e(Ip,PP),e(PP,Qfo),e(Ip,Wfo),e(T,Hfo),e(T,qp),e(qp,Rte),e(Rte,Ufo),e(qp,Jfo),e(qp,$P),e($P,Yfo),e(qp,Kfo),e(T,Zfo),e(T,Np),e(Np,Bte),e(Bte,emo),e(Np,omo),e(Np,IP),e(IP,rmo),e(Np,tmo),e(T,amo),e(T,jp),e(jp,Pte),e(Pte,nmo),e(jp,smo),e(jp,qP),e(qP,lmo),e(jp,imo),e(T,dmo),e(T,Dp),e(Dp,$te),e($te,cmo),e(Dp,fmo),e(Dp,NP),e(NP,mmo),e(Dp,gmo),e(T,hmo),e(T,Gp),e(Gp,Ite),e(Ite,pmo),e(Gp,_mo),e(Gp,jP),e(jP,umo),e(Gp,bmo),e(T,vmo),e(T,Op),e(Op,qte),e(qte,Fmo),e(Op,Tmo),e(Op,DP),e(DP,Mmo),e(Op,Emo),e(T,Cmo),e(T,Vp),e(Vp,Nte),e(Nte,wmo),e(Vp,Amo),e(Vp,GP),e(GP,ymo),e(Vp,Lmo),e(T,xmo),e(T,Xp),e(Xp,jte),e(jte,kmo),e(Xp,Smo),e(Xp,OP),e(OP,Rmo),e(Xp,Bmo),e(T,Pmo),e(T,Hs),e(Hs,Dte),e(Dte,$mo),e(Hs,Imo),e(Hs,VP),e(VP,qmo),e(Hs,Nmo),e(Hs,XP),e(XP,jmo),e(Hs,Dmo),e(T,Gmo),e(T,zp),e(zp,Gte),e(Gte,Omo),e(zp,Vmo),e(zp,zP),e(zP,Xmo),e(zp,zmo),e(T,Qmo),e(T,Qp),e(Qp,Ote),e(Ote,Wmo),e(Qp,Hmo),e(Qp,QP),e(QP,Umo),e(Qp,Jmo),e(T,Ymo),e(T,Wp),e(Wp,Vte),e(Vte,Kmo),e(Wp,Zmo),e(Wp,WP),e(WP,ego),e(Wp,ogo),e(T,rgo),e(T,Hp),e(Hp,Xte),e(Xte,tgo),e(Hp,ago),e(Hp,HP),e(HP,ngo),e(Hp,sgo),e(T,lgo),e(T,Up),e(Up,zte),e(zte,igo),e(Up,dgo),e(Up,UP),e(UP,cgo),e(Up,fgo),e(T,mgo),e(T,Jp),e(Jp,Qte),e(Qte,ggo),e(Jp,hgo),e(Jp,JP),e(JP,pgo),e(Jp,_go),e(T,ugo),e(T,Yp),e(Yp,Wte),e(Wte,bgo),e(Yp,vgo),e(Yp,YP),e(YP,Fgo),e(Yp,Tgo),e(T,Mgo),e(T,Kp),e(Kp,Hte),e(Hte,Ego),e(Kp,Cgo),e(Kp,KP),e(KP,wgo),e(Kp,Ago),e(T,ygo),e(T,Zp),e(Zp,Ute),e(Ute,Lgo),e(Zp,xgo),e(Zp,ZP),e(ZP,kgo),e(Zp,Sgo),e(T,Rgo),e(T,e_),e(e_,Jte),e(Jte,Bgo),e(e_,Pgo),e(e_,e$),e(e$,$go),e(e_,Igo),e(T,qgo),e(T,o_),e(o_,Yte),e(Yte,Ngo),e(o_,jgo),e(o_,o$),e(o$,Dgo),e(o_,Ggo),e(T,Ogo),e(T,r_),e(r_,Kte),e(Kte,Vgo),e(r_,Xgo),e(r_,r$),e(r$,zgo),e(r_,Qgo),e(T,Wgo),e(T,t_),e(t_,Zte),e(Zte,Hgo),e(t_,Ugo),e(t_,t$),e(t$,Jgo),e(t_,Ygo),e(T,Kgo),e(T,a_),e(a_,eae),e(eae,Zgo),e(a_,eho),e(a_,a$),e(a$,oho),e(a_,rho),e(T,tho),e(T,n_),e(n_,oae),e(oae,aho),e(n_,nho),e(n_,n$),e(n$,sho),e(n_,lho),e(T,iho),e(T,s_),e(s_,rae),e(rae,dho),e(s_,cho),e(s_,s$),e(s$,fho),e(s_,mho),e(T,gho),e(T,l_),e(l_,tae),e(tae,hho),e(l_,pho),e(l_,l$),e(l$,_ho),e(l_,uho),e(T,bho),e(T,i_),e(i_,aae),e(aae,vho),e(i_,Fho),e(i_,i$),e(i$,Tho),e(i_,Mho),e(T,Eho),e(T,d_),e(d_,nae),e(nae,Cho),e(d_,who),e(d_,d$),e(d$,Aho),e(d_,yho),e(T,Lho),e(T,c_),e(c_,sae),e(sae,xho),e(c_,kho),e(c_,c$),e(c$,Sho),e(c_,Rho),e(T,Bho),e(T,f_),e(f_,lae),e(lae,Pho),e(f_,$ho),e(f_,f$),e(f$,Iho),e(f_,qho),e(T,Nho),e(T,m_),e(m_,iae),e(iae,jho),e(m_,Dho),e(m_,m$),e(m$,Gho),e(m_,Oho),e(T,Vho),e(T,g_),e(g_,dae),e(dae,Xho),e(g_,zho),e(g_,g$),e(g$,Qho),e(g_,Who),e(T,Hho),e(T,h_),e(h_,cae),e(cae,Uho),e(h_,Jho),e(h_,h$),e(h$,Yho),e(h_,Kho),e(T,Zho),e(T,p_),e(p_,fae),e(fae,epo),e(p_,opo),e(p_,p$),e(p$,rpo),e(p_,tpo),e(T,apo),e(T,__),e(__,mae),e(mae,npo),e(__,spo),e(__,_$),e(_$,lpo),e(__,ipo),e(T,dpo),e(T,u_),e(u_,gae),e(gae,cpo),e(u_,fpo),e(u_,u$),e(u$,mpo),e(u_,gpo),e(T,hpo),e(T,b_),e(b_,hae),e(hae,ppo),e(b_,_po),e(b_,b$),e(b$,upo),e(b_,bpo),e(T,vpo),e(T,v_),e(v_,pae),e(pae,Fpo),e(v_,Tpo),e(v_,v$),e(v$,Mpo),e(v_,Epo),e(T,Cpo),e(T,F_),e(F_,_ae),e(_ae,wpo),e(F_,Apo),e(F_,F$),e(F$,ypo),e(F_,Lpo),e(T,xpo),e(T,T_),e(T_,uae),e(uae,kpo),e(T_,Spo),e(T_,T$),e(T$,Rpo),e(T_,Bpo),e(T,Ppo),e(T,M_),e(M_,bae),e(bae,$po),e(M_,Ipo),e(M_,M$),e(M$,qpo),e(M_,Npo),e(T,jpo),e(T,E_),e(E_,vae),e(vae,Dpo),e(E_,Gpo),e(E_,E$),e(E$,Opo),e(E_,Vpo),e(T,Xpo),e(T,C_),e(C_,Fae),e(Fae,zpo),e(C_,Qpo),e(C_,C$),e(C$,Wpo),e(C_,Hpo),e(T,Upo),e(T,w_),e(w_,Tae),e(Tae,Jpo),e(w_,Ypo),e(w_,w$),e(w$,Kpo),e(w_,Zpo),e(T,e_o),e(T,A_),e(A_,Mae),e(Mae,o_o),e(A_,r_o),e(A_,A$),e(A$,t_o),e(A_,a_o),e(T,n_o),e(T,y_),e(y_,Eae),e(Eae,s_o),e(y_,l_o),e(y_,y$),e(y$,i_o),e(y_,d_o),e(T,c_o),e(T,L_),e(L_,Cae),e(Cae,f_o),e(L_,m_o),e(L_,L$),e(L$,g_o),e(L_,h_o),e(T,p_o),e(T,x_),e(x_,wae),e(wae,__o),e(x_,u_o),e(x_,x$),e(x$,b_o),e(x_,v_o),e(T,F_o),e(T,k_),e(k_,Aae),e(Aae,T_o),e(k_,M_o),e(k_,k$),e(k$,E_o),e(k_,C_o),e(T,w_o),e(T,S_),e(S_,yae),e(yae,A_o),e(S_,y_o),e(S_,S$),e(S$,L_o),e(S_,x_o),e(T,k_o),e(T,R_),e(R_,Lae),e(Lae,S_o),e(R_,R_o),e(R_,R$),e(R$,B_o),e(R_,P_o),e(T,$_o),e(T,B_),e(B_,xae),e(xae,I_o),e(B_,q_o),e(B_,B$),e(B$,N_o),e(B_,j_o),e(T,D_o),e(T,P_),e(P_,kae),e(kae,G_o),e(P_,O_o),e(P_,P$),e(P$,V_o),e(P_,X_o),e(T,z_o),e(T,$_),e($_,Sae),e(Sae,Q_o),e($_,W_o),e($_,$$),e($$,H_o),e($_,U_o),e(T,J_o),e(T,I_),e(I_,Rae),e(Rae,Y_o),e(I_,K_o),e(I_,I$),e(I$,Z_o),e(I_,euo),e(T,ouo),e(T,q_),e(q_,Bae),e(Bae,ruo),e(q_,tuo),e(q_,q$),e(q$,auo),e(q_,nuo),e(T,suo),e(T,N_),e(N_,Pae),e(Pae,luo),e(N_,iuo),e(N_,N$),e(N$,duo),e(N_,cuo),e(T,fuo),e(T,j_),e(j_,$ae),e($ae,muo),e(j_,guo),e(j_,j$),e(j$,huo),e(j_,puo),e(T,_uo),e(T,D_),e(D_,Iae),e(Iae,uuo),e(D_,buo),e(D_,D$),e(D$,vuo),e(D_,Fuo),e(T,Tuo),e(T,G_),e(G_,qae),e(qae,Muo),e(G_,Euo),e(G_,G$),e(G$,Cuo),e(G_,wuo),e(T,Auo),e(T,O_),e(O_,Nae),e(Nae,yuo),e(O_,Luo),e(O_,O$),e(O$,xuo),e(O_,kuo),e(T,Suo),e(T,V_),e(V_,jae),e(jae,Ruo),e(V_,Buo),e(V_,V$),e(V$,Puo),e(V_,$uo),e(T,Iuo),e(T,X_),e(X_,Dae),e(Dae,quo),e(X_,Nuo),e(X_,X$),e(X$,juo),e(X_,Duo),e(T,Guo),e(T,z_),e(z_,Gae),e(Gae,Ouo),e(z_,Vuo),e(z_,z$),e(z$,Xuo),e(z_,zuo),e(T,Quo),e(T,Q_),e(Q_,Oae),e(Oae,Wuo),e(Q_,Huo),e(Q_,Q$),e(Q$,Uuo),e(Q_,Juo),e(T,Yuo),e(T,W_),e(W_,Vae),e(Vae,Kuo),e(W_,Zuo),e(W_,W$),e(W$,e1o),e(W_,o1o),e(T,r1o),e(T,H_),e(H_,Xae),e(Xae,t1o),e(H_,a1o),e(H_,H$),e(H$,n1o),e(H_,s1o),e(T,l1o),e(T,U_),e(U_,zae),e(zae,i1o),e(U_,d1o),e(U_,U$),e(U$,c1o),e(U_,f1o),e(T,m1o),e(T,J_),e(J_,Qae),e(Qae,g1o),e(J_,h1o),e(J_,J$),e(J$,p1o),e(J_,_1o),e(T,u1o),e(T,Y_),e(Y_,Wae),e(Wae,b1o),e(Y_,v1o),e(Y_,Y$),e(Y$,F1o),e(Y_,T1o),e(T,M1o),e(T,K_),e(K_,Hae),e(Hae,E1o),e(K_,C1o),e(K_,K$),e(K$,w1o),e(K_,A1o),e(T,y1o),e(T,Z_),e(Z_,Uae),e(Uae,L1o),e(Z_,x1o),e(Z_,Z$),e(Z$,k1o),e(Z_,S1o),e(Ne,R1o),e(Ne,eu),e(eu,B1o),e(eu,Jae),e(Jae,P1o),e(eu,$1o),e(eu,Yae),e(Yae,I1o),e(Ne,q1o),e(Ne,Kae),e(Kae,N1o),e(Ne,j1o),g(R3,Ne,null),b(c,bPe,u),b(c,id,u),e(id,ou),e(ou,Zae),g(B3,Zae,null),e(id,D1o),e(id,ene),e(ene,G1o),b(c,vPe,u),b(c,Yo,u),g(P3,Yo,null),e(Yo,O1o),e(Yo,dd),e(dd,V1o),e(dd,eI),e(eI,X1o),e(dd,z1o),e(dd,oI),e(oI,Q1o),e(dd,W1o),e(Yo,H1o),e(Yo,$3),e($3,U1o),e($3,one),e(one,J1o),e($3,Y1o),e(Yo,K1o),e(Yo,zr),g(I3,zr,null),e(zr,Z1o),e(zr,rne),e(rne,ebo),e(zr,obo),e(zr,cd),e(cd,rbo),e(cd,tne),e(tne,tbo),e(cd,abo),e(cd,rI),e(rI,nbo),e(cd,sbo),e(zr,lbo),e(zr,ane),e(ane,ibo),e(zr,dbo),g(q3,zr,null),e(Yo,cbo),e(Yo,je),g(N3,je,null),e(je,fbo),e(je,nne),e(nne,mbo),e(je,gbo),e(je,za),e(za,hbo),e(za,sne),e(sne,pbo),e(za,_bo),e(za,lne),e(lne,ubo),e(za,bbo),e(za,ine),e(ine,vbo),e(za,Fbo),e(je,Tbo),e(je,S),e(S,ru),e(ru,dne),e(dne,Mbo),e(ru,Ebo),e(ru,tI),e(tI,Cbo),e(ru,wbo),e(S,Abo),e(S,tu),e(tu,cne),e(cne,ybo),e(tu,Lbo),e(tu,aI),e(aI,xbo),e(tu,kbo),e(S,Sbo),e(S,au),e(au,fne),e(fne,Rbo),e(au,Bbo),e(au,nI),e(nI,Pbo),e(au,$bo),e(S,Ibo),e(S,nu),e(nu,mne),e(mne,qbo),e(nu,Nbo),e(nu,sI),e(sI,jbo),e(nu,Dbo),e(S,Gbo),e(S,su),e(su,gne),e(gne,Obo),e(su,Vbo),e(su,lI),e(lI,Xbo),e(su,zbo),e(S,Qbo),e(S,lu),e(lu,hne),e(hne,Wbo),e(lu,Hbo),e(lu,iI),e(iI,Ubo),e(lu,Jbo),e(S,Ybo),e(S,iu),e(iu,pne),e(pne,Kbo),e(iu,Zbo),e(iu,dI),e(dI,e2o),e(iu,o2o),e(S,r2o),e(S,du),e(du,_ne),e(_ne,t2o),e(du,a2o),e(du,cI),e(cI,n2o),e(du,s2o),e(S,l2o),e(S,cu),e(cu,une),e(une,i2o),e(cu,d2o),e(cu,fI),e(fI,c2o),e(cu,f2o),e(S,m2o),e(S,fu),e(fu,bne),e(bne,g2o),e(fu,h2o),e(fu,mI),e(mI,p2o),e(fu,_2o),e(S,u2o),e(S,mu),e(mu,vne),e(vne,b2o),e(mu,v2o),e(mu,gI),e(gI,F2o),e(mu,T2o),e(S,M2o),e(S,gu),e(gu,Fne),e(Fne,E2o),e(gu,C2o),e(gu,hI),e(hI,w2o),e(gu,A2o),e(S,y2o),e(S,hu),e(hu,Tne),e(Tne,L2o),e(hu,x2o),e(hu,pI),e(pI,k2o),e(hu,S2o),e(S,R2o),e(S,pu),e(pu,Mne),e(Mne,B2o),e(pu,P2o),e(pu,_I),e(_I,$2o),e(pu,I2o),e(S,q2o),e(S,_u),e(_u,Ene),e(Ene,N2o),e(_u,j2o),e(_u,uI),e(uI,D2o),e(_u,G2o),e(S,O2o),e(S,uu),e(uu,Cne),e(Cne,V2o),e(uu,X2o),e(uu,bI),e(bI,z2o),e(uu,Q2o),e(S,W2o),e(S,bu),e(bu,wne),e(wne,H2o),e(bu,U2o),e(bu,vI),e(vI,J2o),e(bu,Y2o),e(S,K2o),e(S,vu),e(vu,Ane),e(Ane,Z2o),e(vu,e5o),e(vu,FI),e(FI,o5o),e(vu,r5o),e(S,t5o),e(S,Fu),e(Fu,yne),e(yne,a5o),e(Fu,n5o),e(Fu,TI),e(TI,s5o),e(Fu,l5o),e(S,i5o),e(S,Tu),e(Tu,Lne),e(Lne,d5o),e(Tu,c5o),e(Tu,MI),e(MI,f5o),e(Tu,m5o),e(S,g5o),e(S,Mu),e(Mu,xne),e(xne,h5o),e(Mu,p5o),e(Mu,EI),e(EI,_5o),e(Mu,u5o),e(S,b5o),e(S,Eu),e(Eu,kne),e(kne,v5o),e(Eu,F5o),e(Eu,CI),e(CI,T5o),e(Eu,M5o),e(S,E5o),e(S,Cu),e(Cu,Sne),e(Sne,C5o),e(Cu,w5o),e(Cu,wI),e(wI,A5o),e(Cu,y5o),e(S,L5o),e(S,wu),e(wu,Rne),e(Rne,x5o),e(wu,k5o),e(wu,AI),e(AI,S5o),e(wu,R5o),e(S,B5o),e(S,Au),e(Au,Bne),e(Bne,P5o),e(Au,$5o),e(Au,yI),e(yI,I5o),e(Au,q5o),e(S,N5o),e(S,yu),e(yu,Pne),e(Pne,j5o),e(yu,D5o),e(yu,LI),e(LI,G5o),e(yu,O5o),e(S,V5o),e(S,Lu),e(Lu,$ne),e($ne,X5o),e(Lu,z5o),e(Lu,xI),e(xI,Q5o),e(Lu,W5o),e(S,H5o),e(S,xu),e(xu,Ine),e(Ine,U5o),e(xu,J5o),e(xu,kI),e(kI,Y5o),e(xu,K5o),e(S,Z5o),e(S,ku),e(ku,qne),e(qne,e6o),e(ku,o6o),e(ku,SI),e(SI,r6o),e(ku,t6o),e(S,a6o),e(S,Su),e(Su,Nne),e(Nne,n6o),e(Su,s6o),e(Su,RI),e(RI,l6o),e(Su,i6o),e(S,d6o),e(S,Ru),e(Ru,jne),e(jne,c6o),e(Ru,f6o),e(Ru,BI),e(BI,m6o),e(Ru,g6o),e(S,h6o),e(S,Bu),e(Bu,Dne),e(Dne,p6o),e(Bu,_6o),e(Bu,PI),e(PI,u6o),e(Bu,b6o),e(S,v6o),e(S,Pu),e(Pu,Gne),e(Gne,F6o),e(Pu,T6o),e(Pu,$I),e($I,M6o),e(Pu,E6o),e(S,C6o),e(S,$u),e($u,One),e(One,w6o),e($u,A6o),e($u,II),e(II,y6o),e($u,L6o),e(S,x6o),e(S,Iu),e(Iu,Vne),e(Vne,k6o),e(Iu,S6o),e(Iu,qI),e(qI,R6o),e(Iu,B6o),e(S,P6o),e(S,qu),e(qu,Xne),e(Xne,$6o),e(qu,I6o),e(qu,NI),e(NI,q6o),e(qu,N6o),e(S,j6o),e(S,Nu),e(Nu,zne),e(zne,D6o),e(Nu,G6o),e(Nu,jI),e(jI,O6o),e(Nu,V6o),e(S,X6o),e(S,ju),e(ju,Qne),e(Qne,z6o),e(ju,Q6o),e(ju,DI),e(DI,W6o),e(ju,H6o),e(S,U6o),e(S,Du),e(Du,Wne),e(Wne,J6o),e(Du,Y6o),e(Du,GI),e(GI,K6o),e(Du,Z6o),e(je,evo),e(je,Gu),e(Gu,ovo),e(Gu,Hne),e(Hne,rvo),e(Gu,tvo),e(Gu,Une),e(Une,avo),e(je,nvo),e(je,Jne),e(Jne,svo),e(je,lvo),g(j3,je,null),b(c,FPe,u),b(c,fd,u),e(fd,Ou),e(Ou,Yne),g(D3,Yne,null),e(fd,ivo),e(fd,Kne),e(Kne,dvo),b(c,TPe,u),b(c,Ko,u),g(G3,Ko,null),e(Ko,cvo),e(Ko,md),e(md,fvo),e(md,OI),e(OI,mvo),e(md,gvo),e(md,VI),e(VI,hvo),e(md,pvo),e(Ko,_vo),e(Ko,O3),e(O3,uvo),e(O3,Zne),e(Zne,bvo),e(O3,vvo),e(Ko,Fvo),e(Ko,Qr),g(V3,Qr,null),e(Qr,Tvo),e(Qr,ese),e(ese,Mvo),e(Qr,Evo),e(Qr,gd),e(gd,Cvo),e(gd,ose),e(ose,wvo),e(gd,Avo),e(gd,XI),e(XI,yvo),e(gd,Lvo),e(Qr,xvo),e(Qr,rse),e(rse,kvo),e(Qr,Svo),g(X3,Qr,null),e(Ko,Rvo),e(Ko,De),g(z3,De,null),e(De,Bvo),e(De,tse),e(tse,Pvo),e(De,$vo),e(De,Qa),e(Qa,Ivo),e(Qa,ase),e(ase,qvo),e(Qa,Nvo),e(Qa,nse),e(nse,jvo),e(Qa,Dvo),e(Qa,sse),e(sse,Gvo),e(Qa,Ovo),e(De,Vvo),e(De,$),e($,Vu),e(Vu,lse),e(lse,Xvo),e(Vu,zvo),e(Vu,zI),e(zI,Qvo),e(Vu,Wvo),e($,Hvo),e($,Xu),e(Xu,ise),e(ise,Uvo),e(Xu,Jvo),e(Xu,QI),e(QI,Yvo),e(Xu,Kvo),e($,Zvo),e($,zu),e(zu,dse),e(dse,eFo),e(zu,oFo),e(zu,WI),e(WI,rFo),e(zu,tFo),e($,aFo),e($,Qu),e(Qu,cse),e(cse,nFo),e(Qu,sFo),e(Qu,HI),e(HI,lFo),e(Qu,iFo),e($,dFo),e($,Wu),e(Wu,fse),e(fse,cFo),e(Wu,fFo),e(Wu,UI),e(UI,mFo),e(Wu,gFo),e($,hFo),e($,Hu),e(Hu,mse),e(mse,pFo),e(Hu,_Fo),e(Hu,JI),e(JI,uFo),e(Hu,bFo),e($,vFo),e($,Uu),e(Uu,gse),e(gse,FFo),e(Uu,TFo),e(Uu,YI),e(YI,MFo),e(Uu,EFo),e($,CFo),e($,Ju),e(Ju,hse),e(hse,wFo),e(Ju,AFo),e(Ju,KI),e(KI,yFo),e(Ju,LFo),e($,xFo),e($,Yu),e(Yu,pse),e(pse,kFo),e(Yu,SFo),e(Yu,ZI),e(ZI,RFo),e(Yu,BFo),e($,PFo),e($,Ku),e(Ku,_se),e(_se,$Fo),e(Ku,IFo),e(Ku,eq),e(eq,qFo),e(Ku,NFo),e($,jFo),e($,Zu),e(Zu,use),e(use,DFo),e(Zu,GFo),e(Zu,oq),e(oq,OFo),e(Zu,VFo),e($,XFo),e($,e1),e(e1,bse),e(bse,zFo),e(e1,QFo),e(e1,rq),e(rq,WFo),e(e1,HFo),e($,UFo),e($,o1),e(o1,vse),e(vse,JFo),e(o1,YFo),e(o1,tq),e(tq,KFo),e(o1,ZFo),e($,eTo),e($,r1),e(r1,Fse),e(Fse,oTo),e(r1,rTo),e(r1,aq),e(aq,tTo),e(r1,aTo),e($,nTo),e($,t1),e(t1,Tse),e(Tse,sTo),e(t1,lTo),e(t1,nq),e(nq,iTo),e(t1,dTo),e($,cTo),e($,a1),e(a1,Mse),e(Mse,fTo),e(a1,mTo),e(a1,sq),e(sq,gTo),e(a1,hTo),e($,pTo),e($,n1),e(n1,Ese),e(Ese,_To),e(n1,uTo),e(n1,lq),e(lq,bTo),e(n1,vTo),e($,FTo),e($,s1),e(s1,Cse),e(Cse,TTo),e(s1,MTo),e(s1,iq),e(iq,ETo),e(s1,CTo),e($,wTo),e($,l1),e(l1,wse),e(wse,ATo),e(l1,yTo),e(l1,dq),e(dq,LTo),e(l1,xTo),e($,kTo),e($,i1),e(i1,Ase),e(Ase,STo),e(i1,RTo),e(i1,cq),e(cq,BTo),e(i1,PTo),e($,$To),e($,d1),e(d1,yse),e(yse,ITo),e(d1,qTo),e(d1,fq),e(fq,NTo),e(d1,jTo),e($,DTo),e($,c1),e(c1,Lse),e(Lse,GTo),e(c1,OTo),e(c1,mq),e(mq,VTo),e(c1,XTo),e($,zTo),e($,f1),e(f1,xse),e(xse,QTo),e(f1,WTo),e(f1,gq),e(gq,HTo),e(f1,UTo),e($,JTo),e($,m1),e(m1,kse),e(kse,YTo),e(m1,KTo),e(m1,hq),e(hq,ZTo),e(m1,e8o),e($,o8o),e($,g1),e(g1,Sse),e(Sse,r8o),e(g1,t8o),e(g1,pq),e(pq,a8o),e(g1,n8o),e($,s8o),e($,h1),e(h1,Rse),e(Rse,l8o),e(h1,i8o),e(h1,_q),e(_q,d8o),e(h1,c8o),e($,f8o),e($,p1),e(p1,Bse),e(Bse,m8o),e(p1,g8o),e(p1,uq),e(uq,h8o),e(p1,p8o),e($,_8o),e($,_1),e(_1,Pse),e(Pse,u8o),e(_1,b8o),e(_1,bq),e(bq,v8o),e(_1,F8o),e($,T8o),e($,u1),e(u1,$se),e($se,M8o),e(u1,E8o),e(u1,vq),e(vq,C8o),e(u1,w8o),e($,A8o),e($,b1),e(b1,Ise),e(Ise,y8o),e(b1,L8o),e(b1,Fq),e(Fq,x8o),e(b1,k8o),e($,S8o),e($,v1),e(v1,qse),e(qse,R8o),e(v1,B8o),e(v1,Tq),e(Tq,P8o),e(v1,$8o),e($,I8o),e($,F1),e(F1,Nse),e(Nse,q8o),e(F1,N8o),e(F1,Mq),e(Mq,j8o),e(F1,D8o),e($,G8o),e($,T1),e(T1,jse),e(jse,O8o),e(T1,V8o),e(T1,Eq),e(Eq,X8o),e(T1,z8o),e($,Q8o),e($,M1),e(M1,Dse),e(Dse,W8o),e(M1,H8o),e(M1,Cq),e(Cq,U8o),e(M1,J8o),e($,Y8o),e($,E1),e(E1,Gse),e(Gse,K8o),e(E1,Z8o),e(E1,wq),e(wq,e7o),e(E1,o7o),e(De,r7o),e(De,C1),e(C1,t7o),e(C1,Ose),e(Ose,a7o),e(C1,n7o),e(C1,Vse),e(Vse,s7o),e(De,l7o),e(De,Xse),e(Xse,i7o),e(De,d7o),g(Q3,De,null),b(c,MPe,u),b(c,hd,u),e(hd,w1),e(w1,zse),g(W3,zse,null),e(hd,c7o),e(hd,Qse),e(Qse,f7o),b(c,EPe,u),b(c,Zo,u),g(H3,Zo,null),e(Zo,m7o),e(Zo,pd),e(pd,g7o),e(pd,Aq),e(Aq,h7o),e(pd,p7o),e(pd,yq),e(yq,_7o),e(pd,u7o),e(Zo,b7o),e(Zo,U3),e(U3,v7o),e(U3,Wse),e(Wse,F7o),e(U3,T7o),e(Zo,M7o),e(Zo,Wr),g(J3,Wr,null),e(Wr,E7o),e(Wr,Hse),e(Hse,C7o),e(Wr,w7o),e(Wr,_d),e(_d,A7o),e(_d,Use),e(Use,y7o),e(_d,L7o),e(_d,Lq),e(Lq,x7o),e(_d,k7o),e(Wr,S7o),e(Wr,Jse),e(Jse,R7o),e(Wr,B7o),g(Y3,Wr,null),e(Zo,P7o),e(Zo,Ge),g(K3,Ge,null),e(Ge,$7o),e(Ge,Yse),e(Yse,I7o),e(Ge,q7o),e(Ge,Wa),e(Wa,N7o),e(Wa,Kse),e(Kse,j7o),e(Wa,D7o),e(Wa,Zse),e(Zse,G7o),e(Wa,O7o),e(Wa,ele),e(ele,V7o),e(Wa,X7o),e(Ge,z7o),e(Ge,I),e(I,A1),e(A1,ole),e(ole,Q7o),e(A1,W7o),e(A1,xq),e(xq,H7o),e(A1,U7o),e(I,J7o),e(I,y1),e(y1,rle),e(rle,Y7o),e(y1,K7o),e(y1,kq),e(kq,Z7o),e(y1,eMo),e(I,oMo),e(I,L1),e(L1,tle),e(tle,rMo),e(L1,tMo),e(L1,Sq),e(Sq,aMo),e(L1,nMo),e(I,sMo),e(I,x1),e(x1,ale),e(ale,lMo),e(x1,iMo),e(x1,Rq),e(Rq,dMo),e(x1,cMo),e(I,fMo),e(I,k1),e(k1,nle),e(nle,mMo),e(k1,gMo),e(k1,Bq),e(Bq,hMo),e(k1,pMo),e(I,_Mo),e(I,S1),e(S1,sle),e(sle,uMo),e(S1,bMo),e(S1,Pq),e(Pq,vMo),e(S1,FMo),e(I,TMo),e(I,R1),e(R1,lle),e(lle,MMo),e(R1,EMo),e(R1,$q),e($q,CMo),e(R1,wMo),e(I,AMo),e(I,B1),e(B1,ile),e(ile,yMo),e(B1,LMo),e(B1,Iq),e(Iq,xMo),e(B1,kMo),e(I,SMo),e(I,P1),e(P1,dle),e(dle,RMo),e(P1,BMo),e(P1,qq),e(qq,PMo),e(P1,$Mo),e(I,IMo),e(I,$1),e($1,cle),e(cle,qMo),e($1,NMo),e($1,Nq),e(Nq,jMo),e($1,DMo),e(I,GMo),e(I,I1),e(I1,fle),e(fle,OMo),e(I1,VMo),e(I1,jq),e(jq,XMo),e(I1,zMo),e(I,QMo),e(I,q1),e(q1,mle),e(mle,WMo),e(q1,HMo),e(q1,Dq),e(Dq,UMo),e(q1,JMo),e(I,YMo),e(I,N1),e(N1,gle),e(gle,KMo),e(N1,ZMo),e(N1,Gq),e(Gq,e4o),e(N1,o4o),e(I,r4o),e(I,j1),e(j1,hle),e(hle,t4o),e(j1,a4o),e(j1,Oq),e(Oq,n4o),e(j1,s4o),e(I,l4o),e(I,D1),e(D1,ple),e(ple,i4o),e(D1,d4o),e(D1,Vq),e(Vq,c4o),e(D1,f4o),e(I,m4o),e(I,G1),e(G1,_le),e(_le,g4o),e(G1,h4o),e(G1,Xq),e(Xq,p4o),e(G1,_4o),e(I,u4o),e(I,O1),e(O1,ule),e(ule,b4o),e(O1,v4o),e(O1,zq),e(zq,F4o),e(O1,T4o),e(I,M4o),e(I,V1),e(V1,ble),e(ble,E4o),e(V1,C4o),e(V1,Qq),e(Qq,w4o),e(V1,A4o),e(I,y4o),e(I,X1),e(X1,vle),e(vle,L4o),e(X1,x4o),e(X1,Wq),e(Wq,k4o),e(X1,S4o),e(I,R4o),e(I,z1),e(z1,Fle),e(Fle,B4o),e(z1,P4o),e(z1,Hq),e(Hq,$4o),e(z1,I4o),e(I,q4o),e(I,Q1),e(Q1,Tle),e(Tle,N4o),e(Q1,j4o),e(Q1,Uq),e(Uq,D4o),e(Q1,G4o),e(I,O4o),e(I,W1),e(W1,Mle),e(Mle,V4o),e(W1,X4o),e(W1,Jq),e(Jq,z4o),e(W1,Q4o),e(I,W4o),e(I,H1),e(H1,Ele),e(Ele,H4o),e(H1,U4o),e(H1,Yq),e(Yq,J4o),e(H1,Y4o),e(I,K4o),e(I,U1),e(U1,Cle),e(Cle,Z4o),e(U1,eEo),e(U1,Kq),e(Kq,oEo),e(U1,rEo),e(I,tEo),e(I,J1),e(J1,wle),e(wle,aEo),e(J1,nEo),e(J1,Zq),e(Zq,sEo),e(J1,lEo),e(I,iEo),e(I,Y1),e(Y1,Ale),e(Ale,dEo),e(Y1,cEo),e(Y1,eN),e(eN,fEo),e(Y1,mEo),e(I,gEo),e(I,K1),e(K1,yle),e(yle,hEo),e(K1,pEo),e(K1,oN),e(oN,_Eo),e(K1,uEo),e(I,bEo),e(I,Z1),e(Z1,Lle),e(Lle,vEo),e(Z1,FEo),e(Z1,rN),e(rN,TEo),e(Z1,MEo),e(I,EEo),e(I,eb),e(eb,xle),e(xle,CEo),e(eb,wEo),e(eb,tN),e(tN,AEo),e(eb,yEo),e(I,LEo),e(I,ob),e(ob,kle),e(kle,xEo),e(ob,kEo),e(ob,aN),e(aN,SEo),e(ob,REo),e(I,BEo),e(I,rb),e(rb,Sle),e(Sle,PEo),e(rb,$Eo),e(rb,Rle),e(Rle,IEo),e(rb,qEo),e(I,NEo),e(I,tb),e(tb,Ble),e(Ble,jEo),e(tb,DEo),e(tb,nN),e(nN,GEo),e(tb,OEo),e(I,VEo),e(I,ab),e(ab,Ple),e(Ple,XEo),e(ab,zEo),e(ab,sN),e(sN,QEo),e(ab,WEo),e(I,HEo),e(I,nb),e(nb,$le),e($le,UEo),e(nb,JEo),e(nb,lN),e(lN,YEo),e(nb,KEo),e(I,ZEo),e(I,sb),e(sb,Ile),e(Ile,e3o),e(sb,o3o),e(sb,iN),e(iN,r3o),e(sb,t3o),e(Ge,a3o),e(Ge,lb),e(lb,n3o),e(lb,qle),e(qle,s3o),e(lb,l3o),e(lb,Nle),e(Nle,i3o),e(Ge,d3o),e(Ge,jle),e(jle,c3o),e(Ge,f3o),g(Z3,Ge,null),b(c,CPe,u),b(c,ud,u),e(ud,ib),e(ib,Dle),g(eC,Dle,null),e(ud,m3o),e(ud,Gle),e(Gle,g3o),b(c,wPe,u),b(c,er,u),g(oC,er,null),e(er,h3o),e(er,bd),e(bd,p3o),e(bd,dN),e(dN,_3o),e(bd,u3o),e(bd,cN),e(cN,b3o),e(bd,v3o),e(er,F3o),e(er,rC),e(rC,T3o),e(rC,Ole),e(Ole,M3o),e(rC,E3o),e(er,C3o),e(er,Hr),g(tC,Hr,null),e(Hr,w3o),e(Hr,Vle),e(Vle,A3o),e(Hr,y3o),e(Hr,vd),e(vd,L3o),e(vd,Xle),e(Xle,x3o),e(vd,k3o),e(vd,fN),e(fN,S3o),e(vd,R3o),e(Hr,B3o),e(Hr,zle),e(zle,P3o),e(Hr,$3o),g(aC,Hr,null),e(er,I3o),e(er,Oe),g(nC,Oe,null),e(Oe,q3o),e(Oe,Qle),e(Qle,N3o),e(Oe,j3o),e(Oe,Ha),e(Ha,D3o),e(Ha,Wle),e(Wle,G3o),e(Ha,O3o),e(Ha,Hle),e(Hle,V3o),e(Ha,X3o),e(Ha,Ule),e(Ule,z3o),e(Ha,Q3o),e(Oe,W3o),e(Oe,ne),e(ne,db),e(db,Jle),e(Jle,H3o),e(db,U3o),e(db,mN),e(mN,J3o),e(db,Y3o),e(ne,K3o),e(ne,cb),e(cb,Yle),e(Yle,Z3o),e(cb,eCo),e(cb,gN),e(gN,oCo),e(cb,rCo),e(ne,tCo),e(ne,fb),e(fb,Kle),e(Kle,aCo),e(fb,nCo),e(fb,hN),e(hN,sCo),e(fb,lCo),e(ne,iCo),e(ne,mb),e(mb,Zle),e(Zle,dCo),e(mb,cCo),e(mb,pN),e(pN,fCo),e(mb,mCo),e(ne,gCo),e(ne,gb),e(gb,eie),e(eie,hCo),e(gb,pCo),e(gb,_N),e(_N,_Co),e(gb,uCo),e(ne,bCo),e(ne,hb),e(hb,oie),e(oie,vCo),e(hb,FCo),e(hb,uN),e(uN,TCo),e(hb,MCo),e(ne,ECo),e(ne,pb),e(pb,rie),e(rie,CCo),e(pb,wCo),e(pb,bN),e(bN,ACo),e(pb,yCo),e(ne,LCo),e(ne,_b),e(_b,tie),e(tie,xCo),e(_b,kCo),e(_b,vN),e(vN,SCo),e(_b,RCo),e(ne,BCo),e(ne,ub),e(ub,aie),e(aie,PCo),e(ub,$Co),e(ub,FN),e(FN,ICo),e(ub,qCo),e(ne,NCo),e(ne,bb),e(bb,nie),e(nie,jCo),e(bb,DCo),e(bb,TN),e(TN,GCo),e(bb,OCo),e(ne,VCo),e(ne,vb),e(vb,sie),e(sie,XCo),e(vb,zCo),e(vb,MN),e(MN,QCo),e(vb,WCo),e(ne,HCo),e(ne,Fb),e(Fb,lie),e(lie,UCo),e(Fb,JCo),e(Fb,EN),e(EN,YCo),e(Fb,KCo),e(ne,ZCo),e(ne,Tb),e(Tb,iie),e(iie,ewo),e(Tb,owo),e(Tb,CN),e(CN,rwo),e(Tb,two),e(ne,awo),e(ne,Mb),e(Mb,die),e(die,nwo),e(Mb,swo),e(Mb,wN),e(wN,lwo),e(Mb,iwo),e(ne,dwo),e(ne,Eb),e(Eb,cie),e(cie,cwo),e(Eb,fwo),e(Eb,AN),e(AN,mwo),e(Eb,gwo),e(ne,hwo),e(ne,Cb),e(Cb,fie),e(fie,pwo),e(Cb,_wo),e(Cb,yN),e(yN,uwo),e(Cb,bwo),e(ne,vwo),e(ne,wb),e(wb,mie),e(mie,Fwo),e(wb,Two),e(wb,LN),e(LN,Mwo),e(wb,Ewo),e(Oe,Cwo),e(Oe,Ab),e(Ab,wwo),e(Ab,gie),e(gie,Awo),e(Ab,ywo),e(Ab,hie),e(hie,Lwo),e(Oe,xwo),e(Oe,pie),e(pie,kwo),e(Oe,Swo),g(sC,Oe,null),b(c,APe,u),b(c,Fd,u),e(Fd,yb),e(yb,_ie),g(lC,_ie,null),e(Fd,Rwo),e(Fd,uie),e(uie,Bwo),b(c,yPe,u),b(c,or,u),g(iC,or,null),e(or,Pwo),e(or,Td),e(Td,$wo),e(Td,xN),e(xN,Iwo),e(Td,qwo),e(Td,kN),e(kN,Nwo),e(Td,jwo),e(or,Dwo),e(or,dC),e(dC,Gwo),e(dC,bie),e(bie,Owo),e(dC,Vwo),e(or,Xwo),e(or,Ur),g(cC,Ur,null),e(Ur,zwo),e(Ur,vie),e(vie,Qwo),e(Ur,Wwo),e(Ur,Md),e(Md,Hwo),e(Md,Fie),e(Fie,Uwo),e(Md,Jwo),e(Md,SN),e(SN,Ywo),e(Md,Kwo),e(Ur,Zwo),e(Ur,Tie),e(Tie,eAo),e(Ur,oAo),g(fC,Ur,null),e(or,rAo),e(or,Ve),g(mC,Ve,null),e(Ve,tAo),e(Ve,Mie),e(Mie,aAo),e(Ve,nAo),e(Ve,Ua),e(Ua,sAo),e(Ua,Eie),e(Eie,lAo),e(Ua,iAo),e(Ua,Cie),e(Cie,dAo),e(Ua,cAo),e(Ua,wie),e(wie,fAo),e(Ua,mAo),e(Ve,gAo),e(Ve,y),e(y,Lb),e(Lb,Aie),e(Aie,hAo),e(Lb,pAo),e(Lb,RN),e(RN,_Ao),e(Lb,uAo),e(y,bAo),e(y,xb),e(xb,yie),e(yie,vAo),e(xb,FAo),e(xb,BN),e(BN,TAo),e(xb,MAo),e(y,EAo),e(y,kb),e(kb,Lie),e(Lie,CAo),e(kb,wAo),e(kb,PN),e(PN,AAo),e(kb,yAo),e(y,LAo),e(y,Sb),e(Sb,xie),e(xie,xAo),e(Sb,kAo),e(Sb,$N),e($N,SAo),e(Sb,RAo),e(y,BAo),e(y,Rb),e(Rb,kie),e(kie,PAo),e(Rb,$Ao),e(Rb,IN),e(IN,IAo),e(Rb,qAo),e(y,NAo),e(y,Bb),e(Bb,Sie),e(Sie,jAo),e(Bb,DAo),e(Bb,qN),e(qN,GAo),e(Bb,OAo),e(y,VAo),e(y,Pb),e(Pb,Rie),e(Rie,XAo),e(Pb,zAo),e(Pb,NN),e(NN,QAo),e(Pb,WAo),e(y,HAo),e(y,$b),e($b,Bie),e(Bie,UAo),e($b,JAo),e($b,jN),e(jN,YAo),e($b,KAo),e(y,ZAo),e(y,Ib),e(Ib,Pie),e(Pie,e0o),e(Ib,o0o),e(Ib,DN),e(DN,r0o),e(Ib,t0o),e(y,a0o),e(y,qb),e(qb,$ie),e($ie,n0o),e(qb,s0o),e(qb,GN),e(GN,l0o),e(qb,i0o),e(y,d0o),e(y,Nb),e(Nb,Iie),e(Iie,c0o),e(Nb,f0o),e(Nb,ON),e(ON,m0o),e(Nb,g0o),e(y,h0o),e(y,jb),e(jb,qie),e(qie,p0o),e(jb,_0o),e(jb,VN),e(VN,u0o),e(jb,b0o),e(y,v0o),e(y,Db),e(Db,Nie),e(Nie,F0o),e(Db,T0o),e(Db,XN),e(XN,M0o),e(Db,E0o),e(y,C0o),e(y,Gb),e(Gb,jie),e(jie,w0o),e(Gb,A0o),e(Gb,zN),e(zN,y0o),e(Gb,L0o),e(y,x0o),e(y,Ob),e(Ob,Die),e(Die,k0o),e(Ob,S0o),e(Ob,QN),e(QN,R0o),e(Ob,B0o),e(y,P0o),e(y,Vb),e(Vb,Gie),e(Gie,$0o),e(Vb,I0o),e(Vb,WN),e(WN,q0o),e(Vb,N0o),e(y,j0o),e(y,Xb),e(Xb,Oie),e(Oie,D0o),e(Xb,G0o),e(Xb,HN),e(HN,O0o),e(Xb,V0o),e(y,X0o),e(y,zb),e(zb,Vie),e(Vie,z0o),e(zb,Q0o),e(zb,UN),e(UN,W0o),e(zb,H0o),e(y,U0o),e(y,Qb),e(Qb,Xie),e(Xie,J0o),e(Qb,Y0o),e(Qb,JN),e(JN,K0o),e(Qb,Z0o),e(y,eyo),e(y,Wb),e(Wb,zie),e(zie,oyo),e(Wb,ryo),e(Wb,YN),e(YN,tyo),e(Wb,ayo),e(y,nyo),e(y,Hb),e(Hb,Qie),e(Qie,syo),e(Hb,lyo),e(Hb,KN),e(KN,iyo),e(Hb,dyo),e(y,cyo),e(y,Ub),e(Ub,Wie),e(Wie,fyo),e(Ub,myo),e(Ub,ZN),e(ZN,gyo),e(Ub,hyo),e(y,pyo),e(y,Jb),e(Jb,Hie),e(Hie,_yo),e(Jb,uyo),e(Jb,ej),e(ej,byo),e(Jb,vyo),e(y,Fyo),e(y,Yb),e(Yb,Uie),e(Uie,Tyo),e(Yb,Myo),e(Yb,oj),e(oj,Eyo),e(Yb,Cyo),e(y,wyo),e(y,Kb),e(Kb,Jie),e(Jie,Ayo),e(Kb,yyo),e(Kb,rj),e(rj,Lyo),e(Kb,xyo),e(y,kyo),e(y,Zb),e(Zb,Yie),e(Yie,Syo),e(Zb,Ryo),e(Zb,tj),e(tj,Byo),e(Zb,Pyo),e(y,$yo),e(y,e2),e(e2,Kie),e(Kie,Iyo),e(e2,qyo),e(e2,aj),e(aj,Nyo),e(e2,jyo),e(y,Dyo),e(y,o2),e(o2,Zie),e(Zie,Gyo),e(o2,Oyo),e(o2,nj),e(nj,Vyo),e(o2,Xyo),e(y,zyo),e(y,r2),e(r2,ede),e(ede,Qyo),e(r2,Wyo),e(r2,sj),e(sj,Hyo),e(r2,Uyo),e(y,Jyo),e(y,t2),e(t2,ode),e(ode,Yyo),e(t2,Kyo),e(t2,lj),e(lj,Zyo),e(t2,eLo),e(y,oLo),e(y,a2),e(a2,rde),e(rde,rLo),e(a2,tLo),e(a2,ij),e(ij,aLo),e(a2,nLo),e(y,sLo),e(y,n2),e(n2,tde),e(tde,lLo),e(n2,iLo),e(n2,dj),e(dj,dLo),e(n2,cLo),e(y,fLo),e(y,s2),e(s2,ade),e(ade,mLo),e(s2,gLo),e(s2,cj),e(cj,hLo),e(s2,pLo),e(y,_Lo),e(y,l2),e(l2,nde),e(nde,uLo),e(l2,bLo),e(l2,fj),e(fj,vLo),e(l2,FLo),e(y,TLo),e(y,i2),e(i2,sde),e(sde,MLo),e(i2,ELo),e(i2,mj),e(mj,CLo),e(i2,wLo),e(y,ALo),e(y,d2),e(d2,lde),e(lde,yLo),e(d2,LLo),e(d2,gj),e(gj,xLo),e(d2,kLo),e(y,SLo),e(y,c2),e(c2,ide),e(ide,RLo),e(c2,BLo),e(c2,hj),e(hj,PLo),e(c2,$Lo),e(y,ILo),e(y,f2),e(f2,dde),e(dde,qLo),e(f2,NLo),e(f2,pj),e(pj,jLo),e(f2,DLo),e(y,GLo),e(y,m2),e(m2,cde),e(cde,OLo),e(m2,VLo),e(m2,_j),e(_j,XLo),e(m2,zLo),e(y,QLo),e(y,g2),e(g2,fde),e(fde,WLo),e(g2,HLo),e(g2,uj),e(uj,ULo),e(g2,JLo),e(y,YLo),e(y,h2),e(h2,mde),e(mde,KLo),e(h2,ZLo),e(h2,bj),e(bj,e9o),e(h2,o9o),e(y,r9o),e(y,p2),e(p2,gde),e(gde,t9o),e(p2,a9o),e(p2,vj),e(vj,n9o),e(p2,s9o),e(y,l9o),e(y,_2),e(_2,hde),e(hde,i9o),e(_2,d9o),e(_2,Fj),e(Fj,c9o),e(_2,f9o),e(y,m9o),e(y,u2),e(u2,pde),e(pde,g9o),e(u2,h9o),e(u2,Tj),e(Tj,p9o),e(u2,_9o),e(y,u9o),e(y,b2),e(b2,_de),e(_de,b9o),e(b2,v9o),e(b2,Mj),e(Mj,F9o),e(b2,T9o),e(y,M9o),e(y,v2),e(v2,ude),e(ude,E9o),e(v2,C9o),e(v2,Ej),e(Ej,w9o),e(v2,A9o),e(y,y9o),e(y,F2),e(F2,bde),e(bde,L9o),e(F2,x9o),e(F2,Cj),e(Cj,k9o),e(F2,S9o),e(Ve,R9o),e(Ve,T2),e(T2,B9o),e(T2,vde),e(vde,P9o),e(T2,$9o),e(T2,Fde),e(Fde,I9o),e(Ve,q9o),e(Ve,Tde),e(Tde,N9o),e(Ve,j9o),g(gC,Ve,null),b(c,LPe,u),b(c,Ed,u),e(Ed,M2),e(M2,Mde),g(hC,Mde,null),e(Ed,D9o),e(Ed,Ede),e(Ede,G9o),b(c,xPe,u),b(c,rr,u),g(pC,rr,null),e(rr,O9o),e(rr,Cd),e(Cd,V9o),e(Cd,wj),e(wj,X9o),e(Cd,z9o),e(Cd,Aj),e(Aj,Q9o),e(Cd,W9o),e(rr,H9o),e(rr,_C),e(_C,U9o),e(_C,Cde),e(Cde,J9o),e(_C,Y9o),e(rr,K9o),e(rr,Jr),g(uC,Jr,null),e(Jr,Z9o),e(Jr,wde),e(wde,exo),e(Jr,oxo),e(Jr,wd),e(wd,rxo),e(wd,Ade),e(Ade,txo),e(wd,axo),e(wd,yj),e(yj,nxo),e(wd,sxo),e(Jr,lxo),e(Jr,yde),e(yde,ixo),e(Jr,dxo),g(bC,Jr,null),e(rr,cxo),e(rr,Xe),g(vC,Xe,null),e(Xe,fxo),e(Xe,Lde),e(Lde,mxo),e(Xe,gxo),e(Xe,Ja),e(Ja,hxo),e(Ja,xde),e(xde,pxo),e(Ja,_xo),e(Ja,kde),e(kde,uxo),e(Ja,bxo),e(Ja,Sde),e(Sde,vxo),e(Ja,Fxo),e(Xe,Txo),e(Xe,G),e(G,E2),e(E2,Rde),e(Rde,Mxo),e(E2,Exo),e(E2,Lj),e(Lj,Cxo),e(E2,wxo),e(G,Axo),e(G,C2),e(C2,Bde),e(Bde,yxo),e(C2,Lxo),e(C2,xj),e(xj,xxo),e(C2,kxo),e(G,Sxo),e(G,w2),e(w2,Pde),e(Pde,Rxo),e(w2,Bxo),e(w2,kj),e(kj,Pxo),e(w2,$xo),e(G,Ixo),e(G,A2),e(A2,$de),e($de,qxo),e(A2,Nxo),e(A2,Sj),e(Sj,jxo),e(A2,Dxo),e(G,Gxo),e(G,y2),e(y2,Ide),e(Ide,Oxo),e(y2,Vxo),e(y2,Rj),e(Rj,Xxo),e(y2,zxo),e(G,Qxo),e(G,L2),e(L2,qde),e(qde,Wxo),e(L2,Hxo),e(L2,Bj),e(Bj,Uxo),e(L2,Jxo),e(G,Yxo),e(G,x2),e(x2,Nde),e(Nde,Kxo),e(x2,Zxo),e(x2,Pj),e(Pj,eko),e(x2,oko),e(G,rko),e(G,k2),e(k2,jde),e(jde,tko),e(k2,ako),e(k2,$j),e($j,nko),e(k2,sko),e(G,lko),e(G,S2),e(S2,Dde),e(Dde,iko),e(S2,dko),e(S2,Ij),e(Ij,cko),e(S2,fko),e(G,mko),e(G,R2),e(R2,Gde),e(Gde,gko),e(R2,hko),e(R2,qj),e(qj,pko),e(R2,_ko),e(G,uko),e(G,B2),e(B2,Ode),e(Ode,bko),e(B2,vko),e(B2,Nj),e(Nj,Fko),e(B2,Tko),e(G,Mko),e(G,P2),e(P2,Vde),e(Vde,Eko),e(P2,Cko),e(P2,jj),e(jj,wko),e(P2,Ako),e(G,yko),e(G,$2),e($2,Xde),e(Xde,Lko),e($2,xko),e($2,Dj),e(Dj,kko),e($2,Sko),e(G,Rko),e(G,I2),e(I2,zde),e(zde,Bko),e(I2,Pko),e(I2,Gj),e(Gj,$ko),e(I2,Iko),e(G,qko),e(G,q2),e(q2,Qde),e(Qde,Nko),e(q2,jko),e(q2,Oj),e(Oj,Dko),e(q2,Gko),e(G,Oko),e(G,N2),e(N2,Wde),e(Wde,Vko),e(N2,Xko),e(N2,Vj),e(Vj,zko),e(N2,Qko),e(G,Wko),e(G,j2),e(j2,Hde),e(Hde,Hko),e(j2,Uko),e(j2,Xj),e(Xj,Jko),e(j2,Yko),e(G,Kko),e(G,D2),e(D2,Ude),e(Ude,Zko),e(D2,eSo),e(D2,zj),e(zj,oSo),e(D2,rSo),e(G,tSo),e(G,G2),e(G2,Jde),e(Jde,aSo),e(G2,nSo),e(G2,Qj),e(Qj,sSo),e(G2,lSo),e(G,iSo),e(G,O2),e(O2,Yde),e(Yde,dSo),e(O2,cSo),e(O2,Wj),e(Wj,fSo),e(O2,mSo),e(G,gSo),e(G,V2),e(V2,Kde),e(Kde,hSo),e(V2,pSo),e(V2,Hj),e(Hj,_So),e(V2,uSo),e(G,bSo),e(G,X2),e(X2,Zde),e(Zde,vSo),e(X2,FSo),e(X2,Uj),e(Uj,TSo),e(X2,MSo),e(G,ESo),e(G,z2),e(z2,ece),e(ece,CSo),e(z2,wSo),e(z2,Jj),e(Jj,ASo),e(z2,ySo),e(G,LSo),e(G,Q2),e(Q2,oce),e(oce,xSo),e(Q2,kSo),e(Q2,Yj),e(Yj,SSo),e(Q2,RSo),e(G,BSo),e(G,W2),e(W2,rce),e(rce,PSo),e(W2,$So),e(W2,Kj),e(Kj,ISo),e(W2,qSo),e(G,NSo),e(G,H2),e(H2,tce),e(tce,jSo),e(H2,DSo),e(H2,Zj),e(Zj,GSo),e(H2,OSo),e(G,VSo),e(G,U2),e(U2,ace),e(ace,XSo),e(U2,zSo),e(U2,eD),e(eD,QSo),e(U2,WSo),e(G,HSo),e(G,J2),e(J2,nce),e(nce,USo),e(J2,JSo),e(J2,oD),e(oD,YSo),e(J2,KSo),e(Xe,ZSo),e(Xe,Y2),e(Y2,eRo),e(Y2,sce),e(sce,oRo),e(Y2,rRo),e(Y2,lce),e(lce,tRo),e(Xe,aRo),e(Xe,ice),e(ice,nRo),e(Xe,sRo),g(FC,Xe,null),b(c,kPe,u),b(c,Ad,u),e(Ad,K2),e(K2,dce),g(TC,dce,null),e(Ad,lRo),e(Ad,cce),e(cce,iRo),b(c,SPe,u),b(c,tr,u),g(MC,tr,null),e(tr,dRo),e(tr,yd),e(yd,cRo),e(yd,rD),e(rD,fRo),e(yd,mRo),e(yd,tD),e(tD,gRo),e(yd,hRo),e(tr,pRo),e(tr,EC),e(EC,_Ro),e(EC,fce),e(fce,uRo),e(EC,bRo),e(tr,vRo),e(tr,Yr),g(CC,Yr,null),e(Yr,FRo),e(Yr,mce),e(mce,TRo),e(Yr,MRo),e(Yr,Ld),e(Ld,ERo),e(Ld,gce),e(gce,CRo),e(Ld,wRo),e(Ld,aD),e(aD,ARo),e(Ld,yRo),e(Yr,LRo),e(Yr,hce),e(hce,xRo),e(Yr,kRo),g(wC,Yr,null),e(tr,SRo),e(tr,ze),g(AC,ze,null),e(ze,RRo),e(ze,pce),e(pce,BRo),e(ze,PRo),e(ze,Ya),e(Ya,$Ro),e(Ya,_ce),e(_ce,IRo),e(Ya,qRo),e(Ya,uce),e(uce,NRo),e(Ya,jRo),e(Ya,bce),e(bce,DRo),e(Ya,GRo),e(ze,ORo),e(ze,da),e(da,Z2),e(Z2,vce),e(vce,VRo),e(Z2,XRo),e(Z2,nD),e(nD,zRo),e(Z2,QRo),e(da,WRo),e(da,e5),e(e5,Fce),e(Fce,HRo),e(e5,URo),e(e5,sD),e(sD,JRo),e(e5,YRo),e(da,KRo),e(da,o5),e(o5,Tce),e(Tce,ZRo),e(o5,eBo),e(o5,lD),e(lD,oBo),e(o5,rBo),e(da,tBo),e(da,r5),e(r5,Mce),e(Mce,aBo),e(r5,nBo),e(r5,iD),e(iD,sBo),e(r5,lBo),e(da,iBo),e(da,t5),e(t5,Ece),e(Ece,dBo),e(t5,cBo),e(t5,dD),e(dD,fBo),e(t5,mBo),e(ze,gBo),e(ze,a5),e(a5,hBo),e(a5,Cce),e(Cce,pBo),e(a5,_Bo),e(a5,wce),e(wce,uBo),e(ze,bBo),e(ze,Ace),e(Ace,vBo),e(ze,FBo),g(yC,ze,null),b(c,RPe,u),b(c,xd,u),e(xd,n5),e(n5,yce),g(LC,yce,null),e(xd,TBo),e(xd,Lce),e(Lce,MBo),b(c,BPe,u),b(c,ar,u),g(xC,ar,null),e(ar,EBo),e(ar,kd),e(kd,CBo),e(kd,cD),e(cD,wBo),e(kd,ABo),e(kd,fD),e(fD,yBo),e(kd,LBo),e(ar,xBo),e(ar,kC),e(kC,kBo),e(kC,xce),e(xce,SBo),e(kC,RBo),e(ar,BBo),e(ar,Kr),g(SC,Kr,null),e(Kr,PBo),e(Kr,kce),e(kce,$Bo),e(Kr,IBo),e(Kr,Sd),e(Sd,qBo),e(Sd,Sce),e(Sce,NBo),e(Sd,jBo),e(Sd,mD),e(mD,DBo),e(Sd,GBo),e(Kr,OBo),e(Kr,Rce),e(Rce,VBo),e(Kr,XBo),g(RC,Kr,null),e(ar,zBo),e(ar,Qe),g(BC,Qe,null),e(Qe,QBo),e(Qe,Bce),e(Bce,WBo),e(Qe,HBo),e(Qe,Ka),e(Ka,UBo),e(Ka,Pce),e(Pce,JBo),e(Ka,YBo),e(Ka,$ce),e($ce,KBo),e(Ka,ZBo),e(Ka,Ice),e(Ice,ePo),e(Ka,oPo),e(Qe,rPo),e(Qe,j),e(j,s5),e(s5,qce),e(qce,tPo),e(s5,aPo),e(s5,gD),e(gD,nPo),e(s5,sPo),e(j,lPo),e(j,l5),e(l5,Nce),e(Nce,iPo),e(l5,dPo),e(l5,hD),e(hD,cPo),e(l5,fPo),e(j,mPo),e(j,i5),e(i5,jce),e(jce,gPo),e(i5,hPo),e(i5,pD),e(pD,pPo),e(i5,_Po),e(j,uPo),e(j,d5),e(d5,Dce),e(Dce,bPo),e(d5,vPo),e(d5,_D),e(_D,FPo),e(d5,TPo),e(j,MPo),e(j,c5),e(c5,Gce),e(Gce,EPo),e(c5,CPo),e(c5,uD),e(uD,wPo),e(c5,APo),e(j,yPo),e(j,f5),e(f5,Oce),e(Oce,LPo),e(f5,xPo),e(f5,bD),e(bD,kPo),e(f5,SPo),e(j,RPo),e(j,m5),e(m5,Vce),e(Vce,BPo),e(m5,PPo),e(m5,vD),e(vD,$Po),e(m5,IPo),e(j,qPo),e(j,g5),e(g5,Xce),e(Xce,NPo),e(g5,jPo),e(g5,FD),e(FD,DPo),e(g5,GPo),e(j,OPo),e(j,h5),e(h5,zce),e(zce,VPo),e(h5,XPo),e(h5,TD),e(TD,zPo),e(h5,QPo),e(j,WPo),e(j,p5),e(p5,Qce),e(Qce,HPo),e(p5,UPo),e(p5,MD),e(MD,JPo),e(p5,YPo),e(j,KPo),e(j,_5),e(_5,Wce),e(Wce,ZPo),e(_5,e$o),e(_5,ED),e(ED,o$o),e(_5,r$o),e(j,t$o),e(j,u5),e(u5,Hce),e(Hce,a$o),e(u5,n$o),e(u5,CD),e(CD,s$o),e(u5,l$o),e(j,i$o),e(j,b5),e(b5,Uce),e(Uce,d$o),e(b5,c$o),e(b5,wD),e(wD,f$o),e(b5,m$o),e(j,g$o),e(j,v5),e(v5,Jce),e(Jce,h$o),e(v5,p$o),e(v5,AD),e(AD,_$o),e(v5,u$o),e(j,b$o),e(j,F5),e(F5,Yce),e(Yce,v$o),e(F5,F$o),e(F5,yD),e(yD,T$o),e(F5,M$o),e(j,E$o),e(j,T5),e(T5,Kce),e(Kce,C$o),e(T5,w$o),e(T5,LD),e(LD,A$o),e(T5,y$o),e(j,L$o),e(j,M5),e(M5,Zce),e(Zce,x$o),e(M5,k$o),e(M5,xD),e(xD,S$o),e(M5,R$o),e(j,B$o),e(j,E5),e(E5,efe),e(efe,P$o),e(E5,$$o),e(E5,kD),e(kD,I$o),e(E5,q$o),e(j,N$o),e(j,C5),e(C5,ofe),e(ofe,j$o),e(C5,D$o),e(C5,SD),e(SD,G$o),e(C5,O$o),e(j,V$o),e(j,w5),e(w5,rfe),e(rfe,X$o),e(w5,z$o),e(w5,RD),e(RD,Q$o),e(w5,W$o),e(j,H$o),e(j,A5),e(A5,tfe),e(tfe,U$o),e(A5,J$o),e(A5,BD),e(BD,Y$o),e(A5,K$o),e(j,Z$o),e(j,y5),e(y5,afe),e(afe,eIo),e(y5,oIo),e(y5,PD),e(PD,rIo),e(y5,tIo),e(j,aIo),e(j,L5),e(L5,nfe),e(nfe,nIo),e(L5,sIo),e(L5,$D),e($D,lIo),e(L5,iIo),e(j,dIo),e(j,x5),e(x5,sfe),e(sfe,cIo),e(x5,fIo),e(x5,ID),e(ID,mIo),e(x5,gIo),e(j,hIo),e(j,k5),e(k5,lfe),e(lfe,pIo),e(k5,_Io),e(k5,qD),e(qD,uIo),e(k5,bIo),e(j,vIo),e(j,S5),e(S5,ife),e(ife,FIo),e(S5,TIo),e(S5,ND),e(ND,MIo),e(S5,EIo),e(j,CIo),e(j,R5),e(R5,dfe),e(dfe,wIo),e(R5,AIo),e(R5,jD),e(jD,yIo),e(R5,LIo),e(j,xIo),e(j,B5),e(B5,cfe),e(cfe,kIo),e(B5,SIo),e(B5,DD),e(DD,RIo),e(B5,BIo),e(j,PIo),e(j,P5),e(P5,ffe),e(ffe,$Io),e(P5,IIo),e(P5,GD),e(GD,qIo),e(P5,NIo),e(j,jIo),e(j,$5),e($5,mfe),e(mfe,DIo),e($5,GIo),e($5,OD),e(OD,OIo),e($5,VIo),e(j,XIo),e(j,I5),e(I5,gfe),e(gfe,zIo),e(I5,QIo),e(I5,VD),e(VD,WIo),e(I5,HIo),e(j,UIo),e(j,q5),e(q5,hfe),e(hfe,JIo),e(q5,YIo),e(q5,XD),e(XD,KIo),e(q5,ZIo),e(j,eqo),e(j,N5),e(N5,pfe),e(pfe,oqo),e(N5,rqo),e(N5,zD),e(zD,tqo),e(N5,aqo),e(Qe,nqo),e(Qe,j5),e(j5,sqo),e(j5,_fe),e(_fe,lqo),e(j5,iqo),e(j5,ufe),e(ufe,dqo),e(Qe,cqo),e(Qe,bfe),e(bfe,fqo),e(Qe,mqo),g(PC,Qe,null),b(c,PPe,u),b(c,Rd,u),e(Rd,D5),e(D5,vfe),g($C,vfe,null),e(Rd,gqo),e(Rd,Ffe),e(Ffe,hqo),b(c,$Pe,u),b(c,nr,u),g(IC,nr,null),e(nr,pqo),e(nr,Bd),e(Bd,_qo),e(Bd,QD),e(QD,uqo),e(Bd,bqo),e(Bd,WD),e(WD,vqo),e(Bd,Fqo),e(nr,Tqo),e(nr,qC),e(qC,Mqo),e(qC,Tfe),e(Tfe,Eqo),e(qC,Cqo),e(nr,wqo),e(nr,Zr),g(NC,Zr,null),e(Zr,Aqo),e(Zr,Mfe),e(Mfe,yqo),e(Zr,Lqo),e(Zr,Pd),e(Pd,xqo),e(Pd,Efe),e(Efe,kqo),e(Pd,Sqo),e(Pd,HD),e(HD,Rqo),e(Pd,Bqo),e(Zr,Pqo),e(Zr,Cfe),e(Cfe,$qo),e(Zr,Iqo),g(jC,Zr,null),e(nr,qqo),e(nr,We),g(DC,We,null),e(We,Nqo),e(We,wfe),e(wfe,jqo),e(We,Dqo),e(We,Za),e(Za,Gqo),e(Za,Afe),e(Afe,Oqo),e(Za,Vqo),e(Za,yfe),e(yfe,Xqo),e(Za,zqo),e(Za,Lfe),e(Lfe,Qqo),e(Za,Wqo),e(We,Hqo),e(We,R),e(R,G5),e(G5,xfe),e(xfe,Uqo),e(G5,Jqo),e(G5,UD),e(UD,Yqo),e(G5,Kqo),e(R,Zqo),e(R,O5),e(O5,kfe),e(kfe,eNo),e(O5,oNo),e(O5,JD),e(JD,rNo),e(O5,tNo),e(R,aNo),e(R,V5),e(V5,Sfe),e(Sfe,nNo),e(V5,sNo),e(V5,YD),e(YD,lNo),e(V5,iNo),e(R,dNo),e(R,X5),e(X5,Rfe),e(Rfe,cNo),e(X5,fNo),e(X5,KD),e(KD,mNo),e(X5,gNo),e(R,hNo),e(R,z5),e(z5,Bfe),e(Bfe,pNo),e(z5,_No),e(z5,ZD),e(ZD,uNo),e(z5,bNo),e(R,vNo),e(R,Q5),e(Q5,Pfe),e(Pfe,FNo),e(Q5,TNo),e(Q5,eG),e(eG,MNo),e(Q5,ENo),e(R,CNo),e(R,W5),e(W5,$fe),e($fe,wNo),e(W5,ANo),e(W5,oG),e(oG,yNo),e(W5,LNo),e(R,xNo),e(R,H5),e(H5,Ife),e(Ife,kNo),e(H5,SNo),e(H5,rG),e(rG,RNo),e(H5,BNo),e(R,PNo),e(R,U5),e(U5,qfe),e(qfe,$No),e(U5,INo),e(U5,tG),e(tG,qNo),e(U5,NNo),e(R,jNo),e(R,J5),e(J5,Nfe),e(Nfe,DNo),e(J5,GNo),e(J5,aG),e(aG,ONo),e(J5,VNo),e(R,XNo),e(R,Y5),e(Y5,jfe),e(jfe,zNo),e(Y5,QNo),e(Y5,nG),e(nG,WNo),e(Y5,HNo),e(R,UNo),e(R,K5),e(K5,Dfe),e(Dfe,JNo),e(K5,YNo),e(K5,sG),e(sG,KNo),e(K5,ZNo),e(R,ejo),e(R,Z5),e(Z5,Gfe),e(Gfe,ojo),e(Z5,rjo),e(Z5,lG),e(lG,tjo),e(Z5,ajo),e(R,njo),e(R,e6),e(e6,Ofe),e(Ofe,sjo),e(e6,ljo),e(e6,iG),e(iG,ijo),e(e6,djo),e(R,cjo),e(R,o6),e(o6,Vfe),e(Vfe,fjo),e(o6,mjo),e(o6,dG),e(dG,gjo),e(o6,hjo),e(R,pjo),e(R,r6),e(r6,Xfe),e(Xfe,_jo),e(r6,ujo),e(r6,cG),e(cG,bjo),e(r6,vjo),e(R,Fjo),e(R,t6),e(t6,zfe),e(zfe,Tjo),e(t6,Mjo),e(t6,fG),e(fG,Ejo),e(t6,Cjo),e(R,wjo),e(R,a6),e(a6,Qfe),e(Qfe,Ajo),e(a6,yjo),e(a6,mG),e(mG,Ljo),e(a6,xjo),e(R,kjo),e(R,n6),e(n6,Wfe),e(Wfe,Sjo),e(n6,Rjo),e(n6,gG),e(gG,Bjo),e(n6,Pjo),e(R,$jo),e(R,s6),e(s6,Hfe),e(Hfe,Ijo),e(s6,qjo),e(s6,hG),e(hG,Njo),e(s6,jjo),e(R,Djo),e(R,l6),e(l6,Ufe),e(Ufe,Gjo),e(l6,Ojo),e(l6,pG),e(pG,Vjo),e(l6,Xjo),e(R,zjo),e(R,i6),e(i6,Jfe),e(Jfe,Qjo),e(i6,Wjo),e(i6,_G),e(_G,Hjo),e(i6,Ujo),e(R,Jjo),e(R,d6),e(d6,Yfe),e(Yfe,Yjo),e(d6,Kjo),e(d6,uG),e(uG,Zjo),e(d6,eDo),e(R,oDo),e(R,c6),e(c6,Kfe),e(Kfe,rDo),e(c6,tDo),e(c6,bG),e(bG,aDo),e(c6,nDo),e(R,sDo),e(R,f6),e(f6,Zfe),e(Zfe,lDo),e(f6,iDo),e(f6,vG),e(vG,dDo),e(f6,cDo),e(R,fDo),e(R,m6),e(m6,eme),e(eme,mDo),e(m6,gDo),e(m6,FG),e(FG,hDo),e(m6,pDo),e(R,_Do),e(R,g6),e(g6,ome),e(ome,uDo),e(g6,bDo),e(g6,TG),e(TG,vDo),e(g6,FDo),e(R,TDo),e(R,h6),e(h6,rme),e(rme,MDo),e(h6,EDo),e(h6,MG),e(MG,CDo),e(h6,wDo),e(R,ADo),e(R,p6),e(p6,tme),e(tme,yDo),e(p6,LDo),e(p6,EG),e(EG,xDo),e(p6,kDo),e(R,SDo),e(R,_6),e(_6,ame),e(ame,RDo),e(_6,BDo),e(_6,CG),e(CG,PDo),e(_6,$Do),e(R,IDo),e(R,u6),e(u6,nme),e(nme,qDo),e(u6,NDo),e(u6,wG),e(wG,jDo),e(u6,DDo),e(R,GDo),e(R,b6),e(b6,sme),e(sme,ODo),e(b6,VDo),e(b6,AG),e(AG,XDo),e(b6,zDo),e(R,QDo),e(R,v6),e(v6,lme),e(lme,WDo),e(v6,HDo),e(v6,yG),e(yG,UDo),e(v6,JDo),e(R,YDo),e(R,F6),e(F6,ime),e(ime,KDo),e(F6,ZDo),e(F6,LG),e(LG,eGo),e(F6,oGo),e(R,rGo),e(R,T6),e(T6,dme),e(dme,tGo),e(T6,aGo),e(T6,xG),e(xG,nGo),e(T6,sGo),e(R,lGo),e(R,M6),e(M6,cme),e(cme,iGo),e(M6,dGo),e(M6,kG),e(kG,cGo),e(M6,fGo),e(R,mGo),e(R,E6),e(E6,fme),e(fme,gGo),e(E6,hGo),e(E6,SG),e(SG,pGo),e(E6,_Go),e(R,uGo),e(R,C6),e(C6,mme),e(mme,bGo),e(C6,vGo),e(C6,RG),e(RG,FGo),e(C6,TGo),e(R,MGo),e(R,w6),e(w6,gme),e(gme,EGo),e(w6,CGo),e(w6,BG),e(BG,wGo),e(w6,AGo),e(We,yGo),e(We,A6),e(A6,LGo),e(A6,hme),e(hme,xGo),e(A6,kGo),e(A6,pme),e(pme,SGo),e(We,RGo),e(We,_me),e(_me,BGo),e(We,PGo),g(GC,We,null),b(c,IPe,u),b(c,$d,u),e($d,y6),e(y6,ume),g(OC,ume,null),e($d,$Go),e($d,bme),e(bme,IGo),b(c,qPe,u),b(c,sr,u),g(VC,sr,null),e(sr,qGo),e(sr,Id),e(Id,NGo),e(Id,PG),e(PG,jGo),e(Id,DGo),e(Id,$G),e($G,GGo),e(Id,OGo),e(sr,VGo),e(sr,XC),e(XC,XGo),e(XC,vme),e(vme,zGo),e(XC,QGo),e(sr,WGo),e(sr,et),g(zC,et,null),e(et,HGo),e(et,Fme),e(Fme,UGo),e(et,JGo),e(et,qd),e(qd,YGo),e(qd,Tme),e(Tme,KGo),e(qd,ZGo),e(qd,IG),e(IG,eOo),e(qd,oOo),e(et,rOo),e(et,Mme),e(Mme,tOo),e(et,aOo),g(QC,et,null),e(sr,nOo),e(sr,He),g(WC,He,null),e(He,sOo),e(He,Eme),e(Eme,lOo),e(He,iOo),e(He,en),e(en,dOo),e(en,Cme),e(Cme,cOo),e(en,fOo),e(en,wme),e(wme,mOo),e(en,gOo),e(en,Ame),e(Ame,hOo),e(en,pOo),e(He,_Oo),e(He,yme),e(yme,L6),e(L6,Lme),e(Lme,uOo),e(L6,bOo),e(L6,qG),e(qG,vOo),e(L6,FOo),e(He,TOo),e(He,x6),e(x6,MOo),e(x6,xme),e(xme,EOo),e(x6,COo),e(x6,kme),e(kme,wOo),e(He,AOo),e(He,Sme),e(Sme,yOo),e(He,LOo),g(HC,He,null),b(c,NPe,u),b(c,Nd,u),e(Nd,k6),e(k6,Rme),g(UC,Rme,null),e(Nd,xOo),e(Nd,Bme),e(Bme,kOo),b(c,jPe,u),b(c,lr,u),g(JC,lr,null),e(lr,SOo),e(lr,jd),e(jd,ROo),e(jd,NG),e(NG,BOo),e(jd,POo),e(jd,jG),e(jG,$Oo),e(jd,IOo),e(lr,qOo),e(lr,YC),e(YC,NOo),e(YC,Pme),e(Pme,jOo),e(YC,DOo),e(lr,GOo),e(lr,ot),g(KC,ot,null),e(ot,OOo),e(ot,$me),e($me,VOo),e(ot,XOo),e(ot,Dd),e(Dd,zOo),e(Dd,Ime),e(Ime,QOo),e(Dd,WOo),e(Dd,DG),e(DG,HOo),e(Dd,UOo),e(ot,JOo),e(ot,qme),e(qme,YOo),e(ot,KOo),g(ZC,ot,null),e(lr,ZOo),e(lr,Ue),g(ew,Ue,null),e(Ue,eVo),e(Ue,Nme),e(Nme,oVo),e(Ue,rVo),e(Ue,on),e(on,tVo),e(on,jme),e(jme,aVo),e(on,nVo),e(on,Dme),e(Dme,sVo),e(on,lVo),e(on,Gme),e(Gme,iVo),e(on,dVo),e(Ue,cVo),e(Ue,ce),e(ce,S6),e(S6,Ome),e(Ome,fVo),e(S6,mVo),e(S6,GG),e(GG,gVo),e(S6,hVo),e(ce,pVo),e(ce,R6),e(R6,Vme),e(Vme,_Vo),e(R6,uVo),e(R6,OG),e(OG,bVo),e(R6,vVo),e(ce,FVo),e(ce,B6),e(B6,Xme),e(Xme,TVo),e(B6,MVo),e(B6,VG),e(VG,EVo),e(B6,CVo),e(ce,wVo),e(ce,Us),e(Us,zme),e(zme,AVo),e(Us,yVo),e(Us,XG),e(XG,LVo),e(Us,xVo),e(Us,zG),e(zG,kVo),e(Us,SVo),e(ce,RVo),e(ce,P6),e(P6,Qme),e(Qme,BVo),e(P6,PVo),e(P6,QG),e(QG,$Vo),e(P6,IVo),e(ce,qVo),e(ce,ma),e(ma,Wme),e(Wme,NVo),e(ma,jVo),e(ma,WG),e(WG,DVo),e(ma,GVo),e(ma,HG),e(HG,OVo),e(ma,VVo),e(ma,UG),e(UG,XVo),e(ma,zVo),e(ce,QVo),e(ce,$6),e($6,Hme),e(Hme,WVo),e($6,HVo),e($6,JG),e(JG,UVo),e($6,JVo),e(ce,YVo),e(ce,I6),e(I6,Ume),e(Ume,KVo),e(I6,ZVo),e(I6,YG),e(YG,eXo),e(I6,oXo),e(ce,rXo),e(ce,q6),e(q6,Jme),e(Jme,tXo),e(q6,aXo),e(q6,KG),e(KG,nXo),e(q6,sXo),e(ce,lXo),e(ce,N6),e(N6,Yme),e(Yme,iXo),e(N6,dXo),e(N6,ZG),e(ZG,cXo),e(N6,fXo),e(ce,mXo),e(ce,j6),e(j6,Kme),e(Kme,gXo),e(j6,hXo),e(j6,eO),e(eO,pXo),e(j6,_Xo),e(ce,uXo),e(ce,D6),e(D6,Zme),e(Zme,bXo),e(D6,vXo),e(D6,oO),e(oO,FXo),e(D6,TXo),e(ce,MXo),e(ce,G6),e(G6,ege),e(ege,EXo),e(G6,CXo),e(G6,rO),e(rO,wXo),e(G6,AXo),e(Ue,yXo),e(Ue,O6),e(O6,LXo),e(O6,oge),e(oge,xXo),e(O6,kXo),e(O6,rge),e(rge,SXo),e(Ue,RXo),e(Ue,tge),e(tge,BXo),e(Ue,PXo),g(ow,Ue,null),b(c,DPe,u),b(c,Gd,u),e(Gd,V6),e(V6,age),g(rw,age,null),e(Gd,$Xo),e(Gd,nge),e(nge,IXo),b(c,GPe,u),b(c,ir,u),g(tw,ir,null),e(ir,qXo),e(ir,Od),e(Od,NXo),e(Od,tO),e(tO,jXo),e(Od,DXo),e(Od,aO),e(aO,GXo),e(Od,OXo),e(ir,VXo),e(ir,aw),e(aw,XXo),e(aw,sge),e(sge,zXo),e(aw,QXo),e(ir,WXo),e(ir,rt),g(nw,rt,null),e(rt,HXo),e(rt,lge),e(lge,UXo),e(rt,JXo),e(rt,Vd),e(Vd,YXo),e(Vd,ige),e(ige,KXo),e(Vd,ZXo),e(Vd,nO),e(nO,ezo),e(Vd,ozo),e(rt,rzo),e(rt,dge),e(dge,tzo),e(rt,azo),g(sw,rt,null),e(ir,nzo),e(ir,Je),g(lw,Je,null),e(Je,szo),e(Je,cge),e(cge,lzo),e(Je,izo),e(Je,rn),e(rn,dzo),e(rn,fge),e(fge,czo),e(rn,fzo),e(rn,mge),e(mge,mzo),e(rn,gzo),e(rn,gge),e(gge,hzo),e(rn,pzo),e(Je,_zo),e(Je,hge),e(hge,X6),e(X6,pge),e(pge,uzo),e(X6,bzo),e(X6,sO),e(sO,vzo),e(X6,Fzo),e(Je,Tzo),e(Je,z6),e(z6,Mzo),e(z6,_ge),e(_ge,Ezo),e(z6,Czo),e(z6,uge),e(uge,wzo),e(Je,Azo),e(Je,bge),e(bge,yzo),e(Je,Lzo),g(iw,Je,null),b(c,OPe,u),b(c,Xd,u),e(Xd,Q6),e(Q6,vge),g(dw,vge,null),e(Xd,xzo),e(Xd,Fge),e(Fge,kzo),b(c,VPe,u),b(c,dr,u),g(cw,dr,null),e(dr,Szo),e(dr,zd),e(zd,Rzo),e(zd,lO),e(lO,Bzo),e(zd,Pzo),e(zd,iO),e(iO,$zo),e(zd,Izo),e(dr,qzo),e(dr,fw),e(fw,Nzo),e(fw,Tge),e(Tge,jzo),e(fw,Dzo),e(dr,Gzo),e(dr,tt),g(mw,tt,null),e(tt,Ozo),e(tt,Mge),e(Mge,Vzo),e(tt,Xzo),e(tt,Qd),e(Qd,zzo),e(Qd,Ege),e(Ege,Qzo),e(Qd,Wzo),e(Qd,dO),e(dO,Hzo),e(Qd,Uzo),e(tt,Jzo),e(tt,Cge),e(Cge,Yzo),e(tt,Kzo),g(gw,tt,null),e(dr,Zzo),e(dr,Ye),g(hw,Ye,null),e(Ye,eQo),e(Ye,wge),e(wge,oQo),e(Ye,rQo),e(Ye,tn),e(tn,tQo),e(tn,Age),e(Age,aQo),e(tn,nQo),e(tn,yge),e(yge,sQo),e(tn,lQo),e(tn,Lge),e(Lge,iQo),e(tn,dQo),e(Ye,cQo),e(Ye,Re),e(Re,W6),e(W6,xge),e(xge,fQo),e(W6,mQo),e(W6,cO),e(cO,gQo),e(W6,hQo),e(Re,pQo),e(Re,H6),e(H6,kge),e(kge,_Qo),e(H6,uQo),e(H6,fO),e(fO,bQo),e(H6,vQo),e(Re,FQo),e(Re,U6),e(U6,Sge),e(Sge,TQo),e(U6,MQo),e(U6,mO),e(mO,EQo),e(U6,CQo),e(Re,wQo),e(Re,J6),e(J6,Rge),e(Rge,AQo),e(J6,yQo),e(J6,gO),e(gO,LQo),e(J6,xQo),e(Re,kQo),e(Re,Y6),e(Y6,Bge),e(Bge,SQo),e(Y6,RQo),e(Y6,hO),e(hO,BQo),e(Y6,PQo),e(Re,$Qo),e(Re,K6),e(K6,Pge),e(Pge,IQo),e(K6,qQo),e(K6,pO),e(pO,NQo),e(K6,jQo),e(Re,DQo),e(Re,Z6),e(Z6,$ge),e($ge,GQo),e(Z6,OQo),e(Z6,_O),e(_O,VQo),e(Z6,XQo),e(Re,zQo),e(Re,ev),e(ev,Ige),e(Ige,QQo),e(ev,WQo),e(ev,uO),e(uO,HQo),e(ev,UQo),e(Ye,JQo),e(Ye,ov),e(ov,YQo),e(ov,qge),e(qge,KQo),e(ov,ZQo),e(ov,Nge),e(Nge,eWo),e(Ye,oWo),e(Ye,jge),e(jge,rWo),e(Ye,tWo),g(pw,Ye,null),b(c,XPe,u),b(c,Wd,u),e(Wd,rv),e(rv,Dge),g(_w,Dge,null),e(Wd,aWo),e(Wd,Gge),e(Gge,nWo),b(c,zPe,u),b(c,cr,u),g(uw,cr,null),e(cr,sWo),e(cr,Hd),e(Hd,lWo),e(Hd,bO),e(bO,iWo),e(Hd,dWo),e(Hd,vO),e(vO,cWo),e(Hd,fWo),e(cr,mWo),e(cr,bw),e(bw,gWo),e(bw,Oge),e(Oge,hWo),e(bw,pWo),e(cr,_Wo),e(cr,at),g(vw,at,null),e(at,uWo),e(at,Vge),e(Vge,bWo),e(at,vWo),e(at,Ud),e(Ud,FWo),e(Ud,Xge),e(Xge,TWo),e(Ud,MWo),e(Ud,FO),e(FO,EWo),e(Ud,CWo),e(at,wWo),e(at,zge),e(zge,AWo),e(at,yWo),g(Fw,at,null),e(cr,LWo),e(cr,Ke),g(Tw,Ke,null),e(Ke,xWo),e(Ke,Qge),e(Qge,kWo),e(Ke,SWo),e(Ke,an),e(an,RWo),e(an,Wge),e(Wge,BWo),e(an,PWo),e(an,Hge),e(Hge,$Wo),e(an,IWo),e(an,Uge),e(Uge,qWo),e(an,NWo),e(Ke,jWo),e(Ke,nn),e(nn,tv),e(tv,Jge),e(Jge,DWo),e(tv,GWo),e(tv,TO),e(TO,OWo),e(tv,VWo),e(nn,XWo),e(nn,av),e(av,Yge),e(Yge,zWo),e(av,QWo),e(av,MO),e(MO,WWo),e(av,HWo),e(nn,UWo),e(nn,nv),e(nv,Kge),e(Kge,JWo),e(nv,YWo),e(nv,EO),e(EO,KWo),e(nv,ZWo),e(nn,eHo),e(nn,sv),e(sv,Zge),e(Zge,oHo),e(sv,rHo),e(sv,CO),e(CO,tHo),e(sv,aHo),e(Ke,nHo),e(Ke,lv),e(lv,sHo),e(lv,ehe),e(ehe,lHo),e(lv,iHo),e(lv,ohe),e(ohe,dHo),e(Ke,cHo),e(Ke,rhe),e(rhe,fHo),e(Ke,mHo),g(Mw,Ke,null),b(c,QPe,u),b(c,Jd,u),e(Jd,iv),e(iv,the),g(Ew,the,null),e(Jd,gHo),e(Jd,ahe),e(ahe,hHo),b(c,WPe,u),b(c,fr,u),g(Cw,fr,null),e(fr,pHo),e(fr,Yd),e(Yd,_Ho),e(Yd,wO),e(wO,uHo),e(Yd,bHo),e(Yd,AO),e(AO,vHo),e(Yd,FHo),e(fr,THo),e(fr,ww),e(ww,MHo),e(ww,nhe),e(nhe,EHo),e(ww,CHo),e(fr,wHo),e(fr,nt),g(Aw,nt,null),e(nt,AHo),e(nt,she),e(she,yHo),e(nt,LHo),e(nt,Kd),e(Kd,xHo),e(Kd,lhe),e(lhe,kHo),e(Kd,SHo),e(Kd,yO),e(yO,RHo),e(Kd,BHo),e(nt,PHo),e(nt,ihe),e(ihe,$Ho),e(nt,IHo),g(yw,nt,null),e(fr,qHo),e(fr,Ze),g(Lw,Ze,null),e(Ze,NHo),e(Ze,dhe),e(dhe,jHo),e(Ze,DHo),e(Ze,sn),e(sn,GHo),e(sn,che),e(che,OHo),e(sn,VHo),e(sn,fhe),e(fhe,XHo),e(sn,zHo),e(sn,mhe),e(mhe,QHo),e(sn,WHo),e(Ze,HHo),e(Ze,Be),e(Be,dv),e(dv,ghe),e(ghe,UHo),e(dv,JHo),e(dv,LO),e(LO,YHo),e(dv,KHo),e(Be,ZHo),e(Be,cv),e(cv,hhe),e(hhe,eUo),e(cv,oUo),e(cv,xO),e(xO,rUo),e(cv,tUo),e(Be,aUo),e(Be,fv),e(fv,phe),e(phe,nUo),e(fv,sUo),e(fv,kO),e(kO,lUo),e(fv,iUo),e(Be,dUo),e(Be,mv),e(mv,_he),e(_he,cUo),e(mv,fUo),e(mv,SO),e(SO,mUo),e(mv,gUo),e(Be,hUo),e(Be,gv),e(gv,uhe),e(uhe,pUo),e(gv,_Uo),e(gv,RO),e(RO,uUo),e(gv,bUo),e(Be,vUo),e(Be,hv),e(hv,bhe),e(bhe,FUo),e(hv,TUo),e(hv,BO),e(BO,MUo),e(hv,EUo),e(Be,CUo),e(Be,pv),e(pv,vhe),e(vhe,wUo),e(pv,AUo),e(pv,PO),e(PO,yUo),e(pv,LUo),e(Be,xUo),e(Be,_v),e(_v,Fhe),e(Fhe,kUo),e(_v,SUo),e(_v,$O),e($O,RUo),e(_v,BUo),e(Ze,PUo),e(Ze,uv),e(uv,$Uo),e(uv,The),e(The,IUo),e(uv,qUo),e(uv,Mhe),e(Mhe,NUo),e(Ze,jUo),e(Ze,Ehe),e(Ehe,DUo),e(Ze,GUo),g(xw,Ze,null),b(c,HPe,u),b(c,Zd,u),e(Zd,bv),e(bv,Che),g(kw,Che,null),e(Zd,OUo),e(Zd,whe),e(whe,VUo),b(c,UPe,u),b(c,mr,u),g(Sw,mr,null),e(mr,XUo),e(mr,ec),e(ec,zUo),e(ec,IO),e(IO,QUo),e(ec,WUo),e(ec,qO),e(qO,HUo),e(ec,UUo),e(mr,JUo),e(mr,Rw),e(Rw,YUo),e(Rw,Ahe),e(Ahe,KUo),e(Rw,ZUo),e(mr,eJo),e(mr,st),g(Bw,st,null),e(st,oJo),e(st,yhe),e(yhe,rJo),e(st,tJo),e(st,oc),e(oc,aJo),e(oc,Lhe),e(Lhe,nJo),e(oc,sJo),e(oc,NO),e(NO,lJo),e(oc,iJo),e(st,dJo),e(st,xhe),e(xhe,cJo),e(st,fJo),g(Pw,st,null),e(mr,mJo),e(mr,eo),g($w,eo,null),e(eo,gJo),e(eo,khe),e(khe,hJo),e(eo,pJo),e(eo,ln),e(ln,_Jo),e(ln,She),e(She,uJo),e(ln,bJo),e(ln,Rhe),e(Rhe,vJo),e(ln,FJo),e(ln,Bhe),e(Bhe,TJo),e(ln,MJo),e(eo,EJo),e(eo,Iw),e(Iw,vv),e(vv,Phe),e(Phe,CJo),e(vv,wJo),e(vv,jO),e(jO,AJo),e(vv,yJo),e(Iw,LJo),e(Iw,Fv),e(Fv,$he),e($he,xJo),e(Fv,kJo),e(Fv,DO),e(DO,SJo),e(Fv,RJo),e(eo,BJo),e(eo,Tv),e(Tv,PJo),e(Tv,Ihe),e(Ihe,$Jo),e(Tv,IJo),e(Tv,qhe),e(qhe,qJo),e(eo,NJo),e(eo,Nhe),e(Nhe,jJo),e(eo,DJo),g(qw,eo,null),b(c,JPe,u),b(c,rc,u),e(rc,Mv),e(Mv,jhe),g(Nw,jhe,null),e(rc,GJo),e(rc,Dhe),e(Dhe,OJo),b(c,YPe,u),b(c,gr,u),g(jw,gr,null),e(gr,VJo),e(gr,tc),e(tc,XJo),e(tc,GO),e(GO,zJo),e(tc,QJo),e(tc,OO),e(OO,WJo),e(tc,HJo),e(gr,UJo),e(gr,Dw),e(Dw,JJo),e(Dw,Ghe),e(Ghe,YJo),e(Dw,KJo),e(gr,ZJo),e(gr,lt),g(Gw,lt,null),e(lt,eYo),e(lt,Ohe),e(Ohe,oYo),e(lt,rYo),e(lt,ac),e(ac,tYo),e(ac,Vhe),e(Vhe,aYo),e(ac,nYo),e(ac,VO),e(VO,sYo),e(ac,lYo),e(lt,iYo),e(lt,Xhe),e(Xhe,dYo),e(lt,cYo),g(Ow,lt,null),e(gr,fYo),e(gr,oo),g(Vw,oo,null),e(oo,mYo),e(oo,zhe),e(zhe,gYo),e(oo,hYo),e(oo,dn),e(dn,pYo),e(dn,Qhe),e(Qhe,_Yo),e(dn,uYo),e(dn,Whe),e(Whe,bYo),e(dn,vYo),e(dn,Hhe),e(Hhe,FYo),e(dn,TYo),e(oo,MYo),e(oo,cn),e(cn,Ev),e(Ev,Uhe),e(Uhe,EYo),e(Ev,CYo),e(Ev,XO),e(XO,wYo),e(Ev,AYo),e(cn,yYo),e(cn,Cv),e(Cv,Jhe),e(Jhe,LYo),e(Cv,xYo),e(Cv,zO),e(zO,kYo),e(Cv,SYo),e(cn,RYo),e(cn,wv),e(wv,Yhe),e(Yhe,BYo),e(wv,PYo),e(wv,QO),e(QO,$Yo),e(wv,IYo),e(cn,qYo),e(cn,Av),e(Av,Khe),e(Khe,NYo),e(Av,jYo),e(Av,WO),e(WO,DYo),e(Av,GYo),e(oo,OYo),e(oo,yv),e(yv,VYo),e(yv,Zhe),e(Zhe,XYo),e(yv,zYo),e(yv,epe),e(epe,QYo),e(oo,WYo),e(oo,ope),e(ope,HYo),e(oo,UYo),g(Xw,oo,null),b(c,KPe,u),b(c,nc,u),e(nc,Lv),e(Lv,rpe),g(zw,rpe,null),e(nc,JYo),e(nc,tpe),e(tpe,YYo),b(c,ZPe,u),b(c,hr,u),g(Qw,hr,null),e(hr,KYo),e(hr,sc),e(sc,ZYo),e(sc,HO),e(HO,eKo),e(sc,oKo),e(sc,UO),e(UO,rKo),e(sc,tKo),e(hr,aKo),e(hr,Ww),e(Ww,nKo),e(Ww,ape),e(ape,sKo),e(Ww,lKo),e(hr,iKo),e(hr,it),g(Hw,it,null),e(it,dKo),e(it,npe),e(npe,cKo),e(it,fKo),e(it,lc),e(lc,mKo),e(lc,spe),e(spe,gKo),e(lc,hKo),e(lc,JO),e(JO,pKo),e(lc,_Ko),e(it,uKo),e(it,lpe),e(lpe,bKo),e(it,vKo),g(Uw,it,null),e(hr,FKo),e(hr,ro),g(Jw,ro,null),e(ro,TKo),e(ro,ipe),e(ipe,MKo),e(ro,EKo),e(ro,fn),e(fn,CKo),e(fn,dpe),e(dpe,wKo),e(fn,AKo),e(fn,cpe),e(cpe,yKo),e(fn,LKo),e(fn,fpe),e(fpe,xKo),e(fn,kKo),e(ro,SKo),e(ro,ic),e(ic,xv),e(xv,mpe),e(mpe,RKo),e(xv,BKo),e(xv,YO),e(YO,PKo),e(xv,$Ko),e(ic,IKo),e(ic,kv),e(kv,gpe),e(gpe,qKo),e(kv,NKo),e(kv,KO),e(KO,jKo),e(kv,DKo),e(ic,GKo),e(ic,Sv),e(Sv,hpe),e(hpe,OKo),e(Sv,VKo),e(Sv,ZO),e(ZO,XKo),e(Sv,zKo),e(ro,QKo),e(ro,Rv),e(Rv,WKo),e(Rv,ppe),e(ppe,HKo),e(Rv,UKo),e(Rv,_pe),e(_pe,JKo),e(ro,YKo),e(ro,upe),e(upe,KKo),e(ro,ZKo),g(Yw,ro,null),b(c,e$e,u),b(c,dc,u),e(dc,Bv),e(Bv,bpe),g(Kw,bpe,null),e(dc,eZo),e(dc,vpe),e(vpe,oZo),b(c,o$e,u),b(c,pr,u),g(Zw,pr,null),e(pr,rZo),e(pr,cc),e(cc,tZo),e(cc,eV),e(eV,aZo),e(cc,nZo),e(cc,oV),e(oV,sZo),e(cc,lZo),e(pr,iZo),e(pr,eA),e(eA,dZo),e(eA,Fpe),e(Fpe,cZo),e(eA,fZo),e(pr,mZo),e(pr,dt),g(oA,dt,null),e(dt,gZo),e(dt,Tpe),e(Tpe,hZo),e(dt,pZo),e(dt,fc),e(fc,_Zo),e(fc,Mpe),e(Mpe,uZo),e(fc,bZo),e(fc,rV),e(rV,vZo),e(fc,FZo),e(dt,TZo),e(dt,Epe),e(Epe,MZo),e(dt,EZo),g(rA,dt,null),e(pr,CZo),e(pr,to),g(tA,to,null),e(to,wZo),e(to,Cpe),e(Cpe,AZo),e(to,yZo),e(to,mn),e(mn,LZo),e(mn,wpe),e(wpe,xZo),e(mn,kZo),e(mn,Ape),e(Ape,SZo),e(mn,RZo),e(mn,ype),e(ype,BZo),e(mn,PZo),e(to,$Zo),e(to,Lpe),e(Lpe,Pv),e(Pv,xpe),e(xpe,IZo),e(Pv,qZo),e(Pv,tV),e(tV,NZo),e(Pv,jZo),e(to,DZo),e(to,$v),e($v,GZo),e($v,kpe),e(kpe,OZo),e($v,VZo),e($v,Spe),e(Spe,XZo),e(to,zZo),e(to,Rpe),e(Rpe,QZo),e(to,WZo),g(aA,to,null),b(c,r$e,u),b(c,mc,u),e(mc,Iv),e(Iv,Bpe),g(nA,Bpe,null),e(mc,HZo),e(mc,Ppe),e(Ppe,UZo),b(c,t$e,u),b(c,_r,u),g(sA,_r,null),e(_r,JZo),e(_r,gc),e(gc,YZo),e(gc,aV),e(aV,KZo),e(gc,ZZo),e(gc,nV),e(nV,eer),e(gc,oer),e(_r,rer),e(_r,lA),e(lA,ter),e(lA,$pe),e($pe,aer),e(lA,ner),e(_r,ser),e(_r,ct),g(iA,ct,null),e(ct,ler),e(ct,Ipe),e(Ipe,ier),e(ct,der),e(ct,hc),e(hc,cer),e(hc,qpe),e(qpe,fer),e(hc,mer),e(hc,sV),e(sV,ger),e(hc,her),e(ct,per),e(ct,Npe),e(Npe,_er),e(ct,uer),g(dA,ct,null),e(_r,ber),e(_r,ao),g(cA,ao,null),e(ao,ver),e(ao,jpe),e(jpe,Fer),e(ao,Ter),e(ao,gn),e(gn,Mer),e(gn,Dpe),e(Dpe,Eer),e(gn,Cer),e(gn,Gpe),e(Gpe,wer),e(gn,Aer),e(gn,Ope),e(Ope,yer),e(gn,Ler),e(ao,xer),e(ao,Vpe),e(Vpe,qv),e(qv,Xpe),e(Xpe,ker),e(qv,Ser),e(qv,lV),e(lV,Rer),e(qv,Ber),e(ao,Per),e(ao,Nv),e(Nv,$er),e(Nv,zpe),e(zpe,Ier),e(Nv,qer),e(Nv,Qpe),e(Qpe,Ner),e(ao,jer),e(ao,Wpe),e(Wpe,Der),e(ao,Ger),g(fA,ao,null),b(c,a$e,u),b(c,pc,u),e(pc,jv),e(jv,Hpe),g(mA,Hpe,null),e(pc,Oer),e(pc,Upe),e(Upe,Ver),b(c,n$e,u),b(c,ur,u),g(gA,ur,null),e(ur,Xer),e(ur,_c),e(_c,zer),e(_c,iV),e(iV,Qer),e(_c,Wer),e(_c,dV),e(dV,Her),e(_c,Uer),e(ur,Jer),e(ur,hA),e(hA,Yer),e(hA,Jpe),e(Jpe,Ker),e(hA,Zer),e(ur,eor),e(ur,ft),g(pA,ft,null),e(ft,oor),e(ft,Ype),e(Ype,ror),e(ft,tor),e(ft,uc),e(uc,aor),e(uc,Kpe),e(Kpe,nor),e(uc,sor),e(uc,cV),e(cV,lor),e(uc,ior),e(ft,dor),e(ft,Zpe),e(Zpe,cor),e(ft,mor),g(_A,ft,null),e(ur,gor),e(ur,no),g(uA,no,null),e(no,hor),e(no,e_e),e(e_e,por),e(no,_or),e(no,hn),e(hn,uor),e(hn,o_e),e(o_e,bor),e(hn,vor),e(hn,r_e),e(r_e,For),e(hn,Tor),e(hn,t_e),e(t_e,Mor),e(hn,Eor),e(no,Cor),e(no,pn),e(pn,Dv),e(Dv,a_e),e(a_e,wor),e(Dv,Aor),e(Dv,fV),e(fV,yor),e(Dv,Lor),e(pn,xor),e(pn,Gv),e(Gv,n_e),e(n_e,kor),e(Gv,Sor),e(Gv,mV),e(mV,Ror),e(Gv,Bor),e(pn,Por),e(pn,Ov),e(Ov,s_e),e(s_e,$or),e(Ov,Ior),e(Ov,gV),e(gV,qor),e(Ov,Nor),e(pn,jor),e(pn,Vv),e(Vv,l_e),e(l_e,Dor),e(Vv,Gor),e(Vv,hV),e(hV,Oor),e(Vv,Vor),e(no,Xor),e(no,Xv),e(Xv,zor),e(Xv,i_e),e(i_e,Qor),e(Xv,Wor),e(Xv,d_e),e(d_e,Hor),e(no,Uor),e(no,c_e),e(c_e,Jor),e(no,Yor),g(bA,no,null),b(c,s$e,u),b(c,bc,u),e(bc,zv),e(zv,f_e),g(vA,f_e,null),e(bc,Kor),e(bc,m_e),e(m_e,Zor),b(c,l$e,u),b(c,br,u),g(FA,br,null),e(br,err),e(br,vc),e(vc,orr),e(vc,pV),e(pV,rrr),e(vc,trr),e(vc,_V),e(_V,arr),e(vc,nrr),e(br,srr),e(br,TA),e(TA,lrr),e(TA,g_e),e(g_e,irr),e(TA,drr),e(br,crr),e(br,mt),g(MA,mt,null),e(mt,frr),e(mt,h_e),e(h_e,mrr),e(mt,grr),e(mt,Fc),e(Fc,hrr),e(Fc,p_e),e(p_e,prr),e(Fc,_rr),e(Fc,uV),e(uV,urr),e(Fc,brr),e(mt,vrr),e(mt,__e),e(__e,Frr),e(mt,Trr),g(EA,mt,null),e(br,Mrr),e(br,so),g(CA,so,null),e(so,Err),e(so,u_e),e(u_e,Crr),e(so,wrr),e(so,_n),e(_n,Arr),e(_n,b_e),e(b_e,yrr),e(_n,Lrr),e(_n,v_e),e(v_e,xrr),e(_n,krr),e(_n,F_e),e(F_e,Srr),e(_n,Rrr),e(so,Brr),e(so,T_e),e(T_e,Qv),e(Qv,M_e),e(M_e,Prr),e(Qv,$rr),e(Qv,bV),e(bV,Irr),e(Qv,qrr),e(so,Nrr),e(so,Wv),e(Wv,jrr),e(Wv,E_e),e(E_e,Drr),e(Wv,Grr),e(Wv,C_e),e(C_e,Orr),e(so,Vrr),e(so,w_e),e(w_e,Xrr),e(so,zrr),g(wA,so,null),b(c,i$e,u),b(c,Tc,u),e(Tc,Hv),e(Hv,A_e),g(AA,A_e,null),e(Tc,Qrr),e(Tc,y_e),e(y_e,Wrr),b(c,d$e,u),b(c,vr,u),g(yA,vr,null),e(vr,Hrr),e(vr,Mc),e(Mc,Urr),e(Mc,vV),e(vV,Jrr),e(Mc,Yrr),e(Mc,FV),e(FV,Krr),e(Mc,Zrr),e(vr,etr),e(vr,LA),e(LA,otr),e(LA,L_e),e(L_e,rtr),e(LA,ttr),e(vr,atr),e(vr,gt),g(xA,gt,null),e(gt,ntr),e(gt,x_e),e(x_e,str),e(gt,ltr),e(gt,Ec),e(Ec,itr),e(Ec,k_e),e(k_e,dtr),e(Ec,ctr),e(Ec,TV),e(TV,ftr),e(Ec,mtr),e(gt,gtr),e(gt,S_e),e(S_e,htr),e(gt,ptr),g(kA,gt,null),e(vr,_tr),e(vr,po),g(SA,po,null),e(po,utr),e(po,R_e),e(R_e,btr),e(po,vtr),e(po,un),e(un,Ftr),e(un,B_e),e(B_e,Ttr),e(un,Mtr),e(un,P_e),e(P_e,Etr),e(un,Ctr),e(un,$_e),e($_e,wtr),e(un,Atr),e(po,ytr),e(po,x),e(x,Uv),e(Uv,I_e),e(I_e,Ltr),e(Uv,xtr),e(Uv,MV),e(MV,ktr),e(Uv,Str),e(x,Rtr),e(x,Jv),e(Jv,q_e),e(q_e,Btr),e(Jv,Ptr),e(Jv,EV),e(EV,$tr),e(Jv,Itr),e(x,qtr),e(x,Yv),e(Yv,N_e),e(N_e,Ntr),e(Yv,jtr),e(Yv,CV),e(CV,Dtr),e(Yv,Gtr),e(x,Otr),e(x,Kv),e(Kv,j_e),e(j_e,Vtr),e(Kv,Xtr),e(Kv,wV),e(wV,ztr),e(Kv,Qtr),e(x,Wtr),e(x,Zv),e(Zv,D_e),e(D_e,Htr),e(Zv,Utr),e(Zv,AV),e(AV,Jtr),e(Zv,Ytr),e(x,Ktr),e(x,eF),e(eF,G_e),e(G_e,Ztr),e(eF,ear),e(eF,yV),e(yV,oar),e(eF,rar),e(x,tar),e(x,oF),e(oF,O_e),e(O_e,aar),e(oF,nar),e(oF,LV),e(LV,sar),e(oF,lar),e(x,iar),e(x,rF),e(rF,V_e),e(V_e,dar),e(rF,car),e(rF,xV),e(xV,far),e(rF,mar),e(x,gar),e(x,tF),e(tF,X_e),e(X_e,har),e(tF,par),e(tF,kV),e(kV,_ar),e(tF,uar),e(x,bar),e(x,aF),e(aF,z_e),e(z_e,Far),e(aF,Tar),e(aF,SV),e(SV,Mar),e(aF,Ear),e(x,Car),e(x,nF),e(nF,Q_e),e(Q_e,war),e(nF,Aar),e(nF,RV),e(RV,yar),e(nF,Lar),e(x,xar),e(x,sF),e(sF,W_e),e(W_e,kar),e(sF,Sar),e(sF,BV),e(BV,Rar),e(sF,Bar),e(x,Par),e(x,lF),e(lF,H_e),e(H_e,$ar),e(lF,Iar),e(lF,PV),e(PV,qar),e(lF,Nar),e(x,jar),e(x,iF),e(iF,U_e),e(U_e,Dar),e(iF,Gar),e(iF,$V),e($V,Oar),e(iF,Var),e(x,Xar),e(x,dF),e(dF,J_e),e(J_e,zar),e(dF,Qar),e(dF,IV),e(IV,War),e(dF,Har),e(x,Uar),e(x,cF),e(cF,Y_e),e(Y_e,Jar),e(cF,Yar),e(cF,qV),e(qV,Kar),e(cF,Zar),e(x,enr),e(x,Js),e(Js,K_e),e(K_e,onr),e(Js,rnr),e(Js,NV),e(NV,tnr),e(Js,anr),e(Js,jV),e(jV,nnr),e(Js,snr),e(x,lnr),e(x,fF),e(fF,Z_e),e(Z_e,inr),e(fF,dnr),e(fF,DV),e(DV,cnr),e(fF,fnr),e(x,mnr),e(x,mF),e(mF,eue),e(eue,gnr),e(mF,hnr),e(mF,GV),e(GV,pnr),e(mF,_nr),e(x,unr),e(x,gF),e(gF,oue),e(oue,bnr),e(gF,vnr),e(gF,OV),e(OV,Fnr),e(gF,Tnr),e(x,Mnr),e(x,hF),e(hF,rue),e(rue,Enr),e(hF,Cnr),e(hF,VV),e(VV,wnr),e(hF,Anr),e(x,ynr),e(x,pF),e(pF,tue),e(tue,Lnr),e(pF,xnr),e(pF,XV),e(XV,knr),e(pF,Snr),e(x,Rnr),e(x,_F),e(_F,aue),e(aue,Bnr),e(_F,Pnr),e(_F,zV),e(zV,$nr),e(_F,Inr),e(x,qnr),e(x,uF),e(uF,nue),e(nue,Nnr),e(uF,jnr),e(uF,QV),e(QV,Dnr),e(uF,Gnr),e(x,Onr),e(x,bF),e(bF,sue),e(sue,Vnr),e(bF,Xnr),e(bF,WV),e(WV,znr),e(bF,Qnr),e(x,Wnr),e(x,vF),e(vF,lue),e(lue,Hnr),e(vF,Unr),e(vF,HV),e(HV,Jnr),e(vF,Ynr),e(x,Knr),e(x,FF),e(FF,iue),e(iue,Znr),e(FF,esr),e(FF,UV),e(UV,osr),e(FF,rsr),e(x,tsr),e(x,TF),e(TF,due),e(due,asr),e(TF,nsr),e(TF,JV),e(JV,ssr),e(TF,lsr),e(x,isr),e(x,MF),e(MF,cue),e(cue,dsr),e(MF,csr),e(MF,YV),e(YV,fsr),e(MF,msr),e(x,gsr),e(x,EF),e(EF,fue),e(fue,hsr),e(EF,psr),e(EF,KV),e(KV,_sr),e(EF,usr),e(x,bsr),e(x,CF),e(CF,mue),e(mue,vsr),e(CF,Fsr),e(CF,ZV),e(ZV,Tsr),e(CF,Msr),e(x,Esr),e(x,wF),e(wF,gue),e(gue,Csr),e(wF,wsr),e(wF,eX),e(eX,Asr),e(wF,ysr),e(x,Lsr),e(x,AF),e(AF,hue),e(hue,xsr),e(AF,ksr),e(AF,oX),e(oX,Ssr),e(AF,Rsr),e(x,Bsr),e(x,yF),e(yF,pue),e(pue,Psr),e(yF,$sr),e(yF,rX),e(rX,Isr),e(yF,qsr),e(x,Nsr),e(x,LF),e(LF,_ue),e(_ue,jsr),e(LF,Dsr),e(LF,tX),e(tX,Gsr),e(LF,Osr),e(x,Vsr),e(x,xF),e(xF,uue),e(uue,Xsr),e(xF,zsr),e(xF,aX),e(aX,Qsr),e(xF,Wsr),e(x,Hsr),e(x,kF),e(kF,bue),e(bue,Usr),e(kF,Jsr),e(kF,nX),e(nX,Ysr),e(kF,Ksr),e(x,Zsr),e(x,SF),e(SF,vue),e(vue,elr),e(SF,olr),e(SF,sX),e(sX,rlr),e(SF,tlr),e(x,alr),e(x,RF),e(RF,Fue),e(Fue,nlr),e(RF,slr),e(RF,lX),e(lX,llr),e(RF,ilr),e(x,dlr),e(x,BF),e(BF,Tue),e(Tue,clr),e(BF,flr),e(BF,iX),e(iX,mlr),e(BF,glr),e(x,hlr),e(x,PF),e(PF,Mue),e(Mue,plr),e(PF,_lr),e(PF,dX),e(dX,ulr),e(PF,blr),e(x,vlr),e(x,$F),e($F,Eue),e(Eue,Flr),e($F,Tlr),e($F,cX),e(cX,Mlr),e($F,Elr),e(x,Clr),e(x,IF),e(IF,Cue),e(Cue,wlr),e(IF,Alr),e(IF,fX),e(fX,ylr),e(IF,Llr),e(x,xlr),e(x,qF),e(qF,wue),e(wue,klr),e(qF,Slr),e(qF,mX),e(mX,Rlr),e(qF,Blr),e(po,Plr),e(po,Aue),e(Aue,$lr),e(po,Ilr),g(RA,po,null),b(c,c$e,u),b(c,Cc,u),e(Cc,NF),e(NF,yue),g(BA,yue,null),e(Cc,qlr),e(Cc,Lue),e(Lue,Nlr),b(c,f$e,u),b(c,Fr,u),g(PA,Fr,null),e(Fr,jlr),e(Fr,wc),e(wc,Dlr),e(wc,gX),e(gX,Glr),e(wc,Olr),e(wc,hX),e(hX,Vlr),e(wc,Xlr),e(Fr,zlr),e(Fr,$A),e($A,Qlr),e($A,xue),e(xue,Wlr),e($A,Hlr),e(Fr,Ulr),e(Fr,ht),g(IA,ht,null),e(ht,Jlr),e(ht,kue),e(kue,Ylr),e(ht,Klr),e(ht,Ac),e(Ac,Zlr),e(Ac,Sue),e(Sue,eir),e(Ac,oir),e(Ac,pX),e(pX,rir),e(Ac,tir),e(ht,air),e(ht,Rue),e(Rue,nir),e(ht,sir),g(qA,ht,null),e(Fr,lir),e(Fr,_o),g(NA,_o,null),e(_o,iir),e(_o,Bue),e(Bue,dir),e(_o,cir),e(_o,bn),e(bn,fir),e(bn,Pue),e(Pue,mir),e(bn,gir),e(bn,$ue),e($ue,hir),e(bn,pir),e(bn,Iue),e(Iue,_ir),e(bn,uir),e(_o,bir),e(_o,U),e(U,jF),e(jF,que),e(que,vir),e(jF,Fir),e(jF,_X),e(_X,Tir),e(jF,Mir),e(U,Eir),e(U,DF),e(DF,Nue),e(Nue,Cir),e(DF,wir),e(DF,uX),e(uX,Air),e(DF,yir),e(U,Lir),e(U,GF),e(GF,jue),e(jue,xir),e(GF,kir),e(GF,bX),e(bX,Sir),e(GF,Rir),e(U,Bir),e(U,OF),e(OF,Due),e(Due,Pir),e(OF,$ir),e(OF,vX),e(vX,Iir),e(OF,qir),e(U,Nir),e(U,VF),e(VF,Gue),e(Gue,jir),e(VF,Dir),e(VF,FX),e(FX,Gir),e(VF,Oir),e(U,Vir),e(U,XF),e(XF,Oue),e(Oue,Xir),e(XF,zir),e(XF,TX),e(TX,Qir),e(XF,Wir),e(U,Hir),e(U,zF),e(zF,Vue),e(Vue,Uir),e(zF,Jir),e(zF,MX),e(MX,Yir),e(zF,Kir),e(U,Zir),e(U,QF),e(QF,Xue),e(Xue,edr),e(QF,odr),e(QF,EX),e(EX,rdr),e(QF,tdr),e(U,adr),e(U,WF),e(WF,zue),e(zue,ndr),e(WF,sdr),e(WF,CX),e(CX,ldr),e(WF,idr),e(U,ddr),e(U,HF),e(HF,Que),e(Que,cdr),e(HF,fdr),e(HF,wX),e(wX,mdr),e(HF,gdr),e(U,hdr),e(U,UF),e(UF,Wue),e(Wue,pdr),e(UF,_dr),e(UF,AX),e(AX,udr),e(UF,bdr),e(U,vdr),e(U,JF),e(JF,Hue),e(Hue,Fdr),e(JF,Tdr),e(JF,yX),e(yX,Mdr),e(JF,Edr),e(U,Cdr),e(U,YF),e(YF,Uue),e(Uue,wdr),e(YF,Adr),e(YF,LX),e(LX,ydr),e(YF,Ldr),e(U,xdr),e(U,KF),e(KF,Jue),e(Jue,kdr),e(KF,Sdr),e(KF,xX),e(xX,Rdr),e(KF,Bdr),e(U,Pdr),e(U,ZF),e(ZF,Yue),e(Yue,$dr),e(ZF,Idr),e(ZF,kX),e(kX,qdr),e(ZF,Ndr),e(U,jdr),e(U,eT),e(eT,Kue),e(Kue,Ddr),e(eT,Gdr),e(eT,SX),e(SX,Odr),e(eT,Vdr),e(U,Xdr),e(U,oT),e(oT,Zue),e(Zue,zdr),e(oT,Qdr),e(oT,RX),e(RX,Wdr),e(oT,Hdr),e(U,Udr),e(U,rT),e(rT,e1e),e(e1e,Jdr),e(rT,Ydr),e(rT,BX),e(BX,Kdr),e(rT,Zdr),e(U,ecr),e(U,tT),e(tT,o1e),e(o1e,ocr),e(tT,rcr),e(tT,PX),e(PX,tcr),e(tT,acr),e(U,ncr),e(U,aT),e(aT,r1e),e(r1e,scr),e(aT,lcr),e(aT,$X),e($X,icr),e(aT,dcr),e(U,ccr),e(U,nT),e(nT,t1e),e(t1e,fcr),e(nT,mcr),e(nT,IX),e(IX,gcr),e(nT,hcr),e(U,pcr),e(U,sT),e(sT,a1e),e(a1e,_cr),e(sT,ucr),e(sT,qX),e(qX,bcr),e(sT,vcr),e(U,Fcr),e(U,lT),e(lT,n1e),e(n1e,Tcr),e(lT,Mcr),e(lT,NX),e(NX,Ecr),e(lT,Ccr),e(_o,wcr),e(_o,s1e),e(s1e,Acr),e(_o,ycr),g(jA,_o,null),b(c,m$e,u),b(c,yc,u),e(yc,iT),e(iT,l1e),g(DA,l1e,null),e(yc,Lcr),e(yc,i1e),e(i1e,xcr),b(c,g$e,u),b(c,Tr,u),g(GA,Tr,null),e(Tr,kcr),e(Tr,Lc),e(Lc,Scr),e(Lc,jX),e(jX,Rcr),e(Lc,Bcr),e(Lc,DX),e(DX,Pcr),e(Lc,$cr),e(Tr,Icr),e(Tr,OA),e(OA,qcr),e(OA,d1e),e(d1e,Ncr),e(OA,jcr),e(Tr,Dcr),e(Tr,pt),g(VA,pt,null),e(pt,Gcr),e(pt,c1e),e(c1e,Ocr),e(pt,Vcr),e(pt,xc),e(xc,Xcr),e(xc,f1e),e(f1e,zcr),e(xc,Qcr),e(xc,GX),e(GX,Wcr),e(xc,Hcr),e(pt,Ucr),e(pt,m1e),e(m1e,Jcr),e(pt,Ycr),g(XA,pt,null),e(Tr,Kcr),e(Tr,uo),g(zA,uo,null),e(uo,Zcr),e(uo,g1e),e(g1e,efr),e(uo,ofr),e(uo,vn),e(vn,rfr),e(vn,h1e),e(h1e,tfr),e(vn,afr),e(vn,p1e),e(p1e,nfr),e(vn,sfr),e(vn,_1e),e(_1e,lfr),e(vn,ifr),e(uo,dfr),e(uo,ge),e(ge,dT),e(dT,u1e),e(u1e,cfr),e(dT,ffr),e(dT,OX),e(OX,mfr),e(dT,gfr),e(ge,hfr),e(ge,cT),e(cT,b1e),e(b1e,pfr),e(cT,_fr),e(cT,VX),e(VX,ufr),e(cT,bfr),e(ge,vfr),e(ge,fT),e(fT,v1e),e(v1e,Ffr),e(fT,Tfr),e(fT,XX),e(XX,Mfr),e(fT,Efr),e(ge,Cfr),e(ge,mT),e(mT,F1e),e(F1e,wfr),e(mT,Afr),e(mT,zX),e(zX,yfr),e(mT,Lfr),e(ge,xfr),e(ge,gT),e(gT,T1e),e(T1e,kfr),e(gT,Sfr),e(gT,QX),e(QX,Rfr),e(gT,Bfr),e(ge,Pfr),e(ge,hT),e(hT,M1e),e(M1e,$fr),e(hT,Ifr),e(hT,WX),e(WX,qfr),e(hT,Nfr),e(ge,jfr),e(ge,pT),e(pT,E1e),e(E1e,Dfr),e(pT,Gfr),e(pT,HX),e(HX,Ofr),e(pT,Vfr),e(ge,Xfr),e(ge,_T),e(_T,C1e),e(C1e,zfr),e(_T,Qfr),e(_T,UX),e(UX,Wfr),e(_T,Hfr),e(ge,Ufr),e(ge,uT),e(uT,w1e),e(w1e,Jfr),e(uT,Yfr),e(uT,JX),e(JX,Kfr),e(uT,Zfr),e(ge,emr),e(ge,bT),e(bT,A1e),e(A1e,omr),e(bT,rmr),e(bT,YX),e(YX,tmr),e(bT,amr),e(ge,nmr),e(ge,vT),e(vT,y1e),e(y1e,smr),e(vT,lmr),e(vT,KX),e(KX,imr),e(vT,dmr),e(ge,cmr),e(ge,FT),e(FT,L1e),e(L1e,fmr),e(FT,mmr),e(FT,ZX),e(ZX,gmr),e(FT,hmr),e(uo,pmr),e(uo,x1e),e(x1e,_mr),e(uo,umr),g(QA,uo,null),b(c,h$e,u),b(c,kc,u),e(kc,TT),e(TT,k1e),g(WA,k1e,null),e(kc,bmr),e(kc,S1e),e(S1e,vmr),b(c,p$e,u),b(c,Mr,u),g(HA,Mr,null),e(Mr,Fmr),e(Mr,Sc),e(Sc,Tmr),e(Sc,ez),e(ez,Mmr),e(Sc,Emr),e(Sc,oz),e(oz,Cmr),e(Sc,wmr),e(Mr,Amr),e(Mr,UA),e(UA,ymr),e(UA,R1e),e(R1e,Lmr),e(UA,xmr),e(Mr,kmr),e(Mr,_t),g(JA,_t,null),e(_t,Smr),e(_t,B1e),e(B1e,Rmr),e(_t,Bmr),e(_t,Rc),e(Rc,Pmr),e(Rc,P1e),e(P1e,$mr),e(Rc,Imr),e(Rc,rz),e(rz,qmr),e(Rc,Nmr),e(_t,jmr),e(_t,$1e),e($1e,Dmr),e(_t,Gmr),g(YA,_t,null),e(Mr,Omr),e(Mr,bo),g(KA,bo,null),e(bo,Vmr),e(bo,I1e),e(I1e,Xmr),e(bo,zmr),e(bo,Fn),e(Fn,Qmr),e(Fn,q1e),e(q1e,Wmr),e(Fn,Hmr),e(Fn,N1e),e(N1e,Umr),e(Fn,Jmr),e(Fn,j1e),e(j1e,Ymr),e(Fn,Kmr),e(bo,Zmr),e(bo,ZA),e(ZA,MT),e(MT,D1e),e(D1e,egr),e(MT,ogr),e(MT,tz),e(tz,rgr),e(MT,tgr),e(ZA,agr),e(ZA,ET),e(ET,G1e),e(G1e,ngr),e(ET,sgr),e(ET,az),e(az,lgr),e(ET,igr),e(bo,dgr),e(bo,O1e),e(O1e,cgr),e(bo,fgr),g(e0,bo,null),b(c,_$e,u),b(c,Bc,u),e(Bc,CT),e(CT,V1e),g(o0,V1e,null),e(Bc,mgr),e(Bc,X1e),e(X1e,ggr),b(c,u$e,u),b(c,Er,u),g(r0,Er,null),e(Er,hgr),e(Er,Pc),e(Pc,pgr),e(Pc,nz),e(nz,_gr),e(Pc,ugr),e(Pc,sz),e(sz,bgr),e(Pc,vgr),e(Er,Fgr),e(Er,t0),e(t0,Tgr),e(t0,z1e),e(z1e,Mgr),e(t0,Egr),e(Er,Cgr),e(Er,ut),g(a0,ut,null),e(ut,wgr),e(ut,Q1e),e(Q1e,Agr),e(ut,ygr),e(ut,$c),e($c,Lgr),e($c,W1e),e(W1e,xgr),e($c,kgr),e($c,lz),e(lz,Sgr),e($c,Rgr),e(ut,Bgr),e(ut,H1e),e(H1e,Pgr),e(ut,$gr),g(n0,ut,null),e(Er,Igr),e(Er,vo),g(s0,vo,null),e(vo,qgr),e(vo,U1e),e(U1e,Ngr),e(vo,jgr),e(vo,Tn),e(Tn,Dgr),e(Tn,J1e),e(J1e,Ggr),e(Tn,Ogr),e(Tn,Y1e),e(Y1e,Vgr),e(Tn,Xgr),e(Tn,K1e),e(K1e,zgr),e(Tn,Qgr),e(vo,Wgr),e(vo,K),e(K,wT),e(wT,Z1e),e(Z1e,Hgr),e(wT,Ugr),e(wT,iz),e(iz,Jgr),e(wT,Ygr),e(K,Kgr),e(K,AT),e(AT,ebe),e(ebe,Zgr),e(AT,ehr),e(AT,dz),e(dz,ohr),e(AT,rhr),e(K,thr),e(K,yT),e(yT,obe),e(obe,ahr),e(yT,nhr),e(yT,cz),e(cz,shr),e(yT,lhr),e(K,ihr),e(K,LT),e(LT,rbe),e(rbe,dhr),e(LT,chr),e(LT,fz),e(fz,fhr),e(LT,mhr),e(K,ghr),e(K,xT),e(xT,tbe),e(tbe,hhr),e(xT,phr),e(xT,mz),e(mz,_hr),e(xT,uhr),e(K,bhr),e(K,kT),e(kT,abe),e(abe,vhr),e(kT,Fhr),e(kT,gz),e(gz,Thr),e(kT,Mhr),e(K,Ehr),e(K,ST),e(ST,nbe),e(nbe,Chr),e(ST,whr),e(ST,hz),e(hz,Ahr),e(ST,yhr),e(K,Lhr),e(K,RT),e(RT,sbe),e(sbe,xhr),e(RT,khr),e(RT,pz),e(pz,Shr),e(RT,Rhr),e(K,Bhr),e(K,BT),e(BT,lbe),e(lbe,Phr),e(BT,$hr),e(BT,_z),e(_z,Ihr),e(BT,qhr),e(K,Nhr),e(K,PT),e(PT,ibe),e(ibe,jhr),e(PT,Dhr),e(PT,uz),e(uz,Ghr),e(PT,Ohr),e(K,Vhr),e(K,$T),e($T,dbe),e(dbe,Xhr),e($T,zhr),e($T,bz),e(bz,Qhr),e($T,Whr),e(K,Hhr),e(K,IT),e(IT,cbe),e(cbe,Uhr),e(IT,Jhr),e(IT,vz),e(vz,Yhr),e(IT,Khr),e(K,Zhr),e(K,qT),e(qT,fbe),e(fbe,epr),e(qT,opr),e(qT,Fz),e(Fz,rpr),e(qT,tpr),e(K,apr),e(K,NT),e(NT,mbe),e(mbe,npr),e(NT,spr),e(NT,Tz),e(Tz,lpr),e(NT,ipr),e(K,dpr),e(K,jT),e(jT,gbe),e(gbe,cpr),e(jT,fpr),e(jT,Mz),e(Mz,mpr),e(jT,gpr),e(K,hpr),e(K,DT),e(DT,hbe),e(hbe,ppr),e(DT,_pr),e(DT,Ez),e(Ez,upr),e(DT,bpr),e(K,vpr),e(K,GT),e(GT,pbe),e(pbe,Fpr),e(GT,Tpr),e(GT,Cz),e(Cz,Mpr),e(GT,Epr),e(K,Cpr),e(K,OT),e(OT,_be),e(_be,wpr),e(OT,Apr),e(OT,wz),e(wz,ypr),e(OT,Lpr),e(K,xpr),e(K,VT),e(VT,ube),e(ube,kpr),e(VT,Spr),e(VT,Az),e(Az,Rpr),e(VT,Bpr),e(K,Ppr),e(K,XT),e(XT,bbe),e(bbe,$pr),e(XT,Ipr),e(XT,yz),e(yz,qpr),e(XT,Npr),e(vo,jpr),e(vo,vbe),e(vbe,Dpr),e(vo,Gpr),g(l0,vo,null),b(c,b$e,u),b(c,Ic,u),e(Ic,zT),e(zT,Fbe),g(i0,Fbe,null),e(Ic,Opr),e(Ic,Tbe),e(Tbe,Vpr),b(c,v$e,u),b(c,Cr,u),g(d0,Cr,null),e(Cr,Xpr),e(Cr,qc),e(qc,zpr),e(qc,Lz),e(Lz,Qpr),e(qc,Wpr),e(qc,xz),e(xz,Hpr),e(qc,Upr),e(Cr,Jpr),e(Cr,c0),e(c0,Ypr),e(c0,Mbe),e(Mbe,Kpr),e(c0,Zpr),e(Cr,e_r),e(Cr,bt),g(f0,bt,null),e(bt,o_r),e(bt,Ebe),e(Ebe,r_r),e(bt,t_r),e(bt,Nc),e(Nc,a_r),e(Nc,Cbe),e(Cbe,n_r),e(Nc,s_r),e(Nc,kz),e(kz,l_r),e(Nc,i_r),e(bt,d_r),e(bt,wbe),e(wbe,c_r),e(bt,f_r),g(m0,bt,null),e(Cr,m_r),e(Cr,Fo),g(g0,Fo,null),e(Fo,g_r),e(Fo,Abe),e(Abe,h_r),e(Fo,p_r),e(Fo,Mn),e(Mn,__r),e(Mn,ybe),e(ybe,u_r),e(Mn,b_r),e(Mn,Lbe),e(Lbe,v_r),e(Mn,F_r),e(Mn,xbe),e(xbe,T_r),e(Mn,M_r),e(Fo,E_r),e(Fo,Fe),e(Fe,QT),e(QT,kbe),e(kbe,C_r),e(QT,w_r),e(QT,Sz),e(Sz,A_r),e(QT,y_r),e(Fe,L_r),e(Fe,WT),e(WT,Sbe),e(Sbe,x_r),e(WT,k_r),e(WT,Rz),e(Rz,S_r),e(WT,R_r),e(Fe,B_r),e(Fe,HT),e(HT,Rbe),e(Rbe,P_r),e(HT,$_r),e(HT,Bz),e(Bz,I_r),e(HT,q_r),e(Fe,N_r),e(Fe,UT),e(UT,Bbe),e(Bbe,j_r),e(UT,D_r),e(UT,Pz),e(Pz,G_r),e(UT,O_r),e(Fe,V_r),e(Fe,JT),e(JT,Pbe),e(Pbe,X_r),e(JT,z_r),e(JT,$z),e($z,Q_r),e(JT,W_r),e(Fe,H_r),e(Fe,YT),e(YT,$be),e($be,U_r),e(YT,J_r),e(YT,Iz),e(Iz,Y_r),e(YT,K_r),e(Fe,Z_r),e(Fe,KT),e(KT,Ibe),e(Ibe,eur),e(KT,our),e(KT,qz),e(qz,rur),e(KT,tur),e(Fe,aur),e(Fe,ZT),e(ZT,qbe),e(qbe,nur),e(ZT,sur),e(ZT,Nz),e(Nz,lur),e(ZT,iur),e(Fe,dur),e(Fe,e8),e(e8,Nbe),e(Nbe,cur),e(e8,fur),e(e8,jz),e(jz,mur),e(e8,gur),e(Fe,hur),e(Fe,o8),e(o8,jbe),e(jbe,pur),e(o8,_ur),e(o8,Dz),e(Dz,uur),e(o8,bur),e(Fo,vur),e(Fo,Dbe),e(Dbe,Fur),e(Fo,Tur),g(h0,Fo,null),b(c,F$e,u),b(c,jc,u),e(jc,r8),e(r8,Gbe),g(p0,Gbe,null),e(jc,Mur),e(jc,Obe),e(Obe,Eur),b(c,T$e,u),b(c,wr,u),g(_0,wr,null),e(wr,Cur),e(wr,Dc),e(Dc,wur),e(Dc,Gz),e(Gz,Aur),e(Dc,yur),e(Dc,Oz),e(Oz,Lur),e(Dc,xur),e(wr,kur),e(wr,u0),e(u0,Sur),e(u0,Vbe),e(Vbe,Rur),e(u0,Bur),e(wr,Pur),e(wr,vt),g(b0,vt,null),e(vt,$ur),e(vt,Xbe),e(Xbe,Iur),e(vt,qur),e(vt,Gc),e(Gc,Nur),e(Gc,zbe),e(zbe,jur),e(Gc,Dur),e(Gc,Vz),e(Vz,Gur),e(Gc,Our),e(vt,Vur),e(vt,Qbe),e(Qbe,Xur),e(vt,zur),g(v0,vt,null),e(wr,Qur),e(wr,To),g(F0,To,null),e(To,Wur),e(To,Wbe),e(Wbe,Hur),e(To,Uur),e(To,En),e(En,Jur),e(En,Hbe),e(Hbe,Yur),e(En,Kur),e(En,Ube),e(Ube,Zur),e(En,e1r),e(En,Jbe),e(Jbe,o1r),e(En,r1r),e(To,t1r),e(To,V),e(V,t8),e(t8,Ybe),e(Ybe,a1r),e(t8,n1r),e(t8,Xz),e(Xz,s1r),e(t8,l1r),e(V,i1r),e(V,a8),e(a8,Kbe),e(Kbe,d1r),e(a8,c1r),e(a8,zz),e(zz,f1r),e(a8,m1r),e(V,g1r),e(V,n8),e(n8,Zbe),e(Zbe,h1r),e(n8,p1r),e(n8,Qz),e(Qz,_1r),e(n8,u1r),e(V,b1r),e(V,s8),e(s8,e2e),e(e2e,v1r),e(s8,F1r),e(s8,Wz),e(Wz,T1r),e(s8,M1r),e(V,E1r),e(V,l8),e(l8,o2e),e(o2e,C1r),e(l8,w1r),e(l8,Hz),e(Hz,A1r),e(l8,y1r),e(V,L1r),e(V,i8),e(i8,r2e),e(r2e,x1r),e(i8,k1r),e(i8,Uz),e(Uz,S1r),e(i8,R1r),e(V,B1r),e(V,d8),e(d8,t2e),e(t2e,P1r),e(d8,$1r),e(d8,Jz),e(Jz,I1r),e(d8,q1r),e(V,N1r),e(V,c8),e(c8,a2e),e(a2e,j1r),e(c8,D1r),e(c8,Yz),e(Yz,G1r),e(c8,O1r),e(V,V1r),e(V,f8),e(f8,n2e),e(n2e,X1r),e(f8,z1r),e(f8,Kz),e(Kz,Q1r),e(f8,W1r),e(V,H1r),e(V,m8),e(m8,s2e),e(s2e,U1r),e(m8,J1r),e(m8,Zz),e(Zz,Y1r),e(m8,K1r),e(V,Z1r),e(V,g8),e(g8,l2e),e(l2e,ebr),e(g8,obr),e(g8,eQ),e(eQ,rbr),e(g8,tbr),e(V,abr),e(V,h8),e(h8,i2e),e(i2e,nbr),e(h8,sbr),e(h8,oQ),e(oQ,lbr),e(h8,ibr),e(V,dbr),e(V,p8),e(p8,d2e),e(d2e,cbr),e(p8,fbr),e(p8,rQ),e(rQ,mbr),e(p8,gbr),e(V,hbr),e(V,_8),e(_8,c2e),e(c2e,pbr),e(_8,_br),e(_8,tQ),e(tQ,ubr),e(_8,bbr),e(V,vbr),e(V,u8),e(u8,f2e),e(f2e,Fbr),e(u8,Tbr),e(u8,aQ),e(aQ,Mbr),e(u8,Ebr),e(V,Cbr),e(V,b8),e(b8,m2e),e(m2e,wbr),e(b8,Abr),e(b8,nQ),e(nQ,ybr),e(b8,Lbr),e(V,xbr),e(V,v8),e(v8,g2e),e(g2e,kbr),e(v8,Sbr),e(v8,sQ),e(sQ,Rbr),e(v8,Bbr),e(V,Pbr),e(V,F8),e(F8,h2e),e(h2e,$br),e(F8,Ibr),e(F8,lQ),e(lQ,qbr),e(F8,Nbr),e(V,jbr),e(V,T8),e(T8,p2e),e(p2e,Dbr),e(T8,Gbr),e(T8,iQ),e(iQ,Obr),e(T8,Vbr),e(V,Xbr),e(V,M8),e(M8,_2e),e(_2e,zbr),e(M8,Qbr),e(M8,dQ),e(dQ,Wbr),e(M8,Hbr),e(V,Ubr),e(V,E8),e(E8,u2e),e(u2e,Jbr),e(E8,Ybr),e(E8,cQ),e(cQ,Kbr),e(E8,Zbr),e(V,e2r),e(V,C8),e(C8,b2e),e(b2e,o2r),e(C8,r2r),e(C8,fQ),e(fQ,t2r),e(C8,a2r),e(V,n2r),e(V,w8),e(w8,v2e),e(v2e,s2r),e(w8,l2r),e(w8,mQ),e(mQ,i2r),e(w8,d2r),e(V,c2r),e(V,A8),e(A8,F2e),e(F2e,f2r),e(A8,m2r),e(A8,gQ),e(gQ,g2r),e(A8,h2r),e(V,p2r),e(V,y8),e(y8,T2e),e(T2e,_2r),e(y8,u2r),e(y8,hQ),e(hQ,b2r),e(y8,v2r),e(V,F2r),e(V,L8),e(L8,M2e),e(M2e,T2r),e(L8,M2r),e(L8,pQ),e(pQ,E2r),e(L8,C2r),e(To,w2r),e(To,E2e),e(E2e,A2r),e(To,y2r),g(T0,To,null),b(c,M$e,u),b(c,Oc,u),e(Oc,x8),e(x8,C2e),g(M0,C2e,null),e(Oc,L2r),e(Oc,w2e),e(w2e,x2r),b(c,E$e,u),b(c,Ar,u),g(E0,Ar,null),e(Ar,k2r),e(Ar,Vc),e(Vc,S2r),e(Vc,_Q),e(_Q,R2r),e(Vc,B2r),e(Vc,uQ),e(uQ,P2r),e(Vc,$2r),e(Ar,I2r),e(Ar,C0),e(C0,q2r),e(C0,A2e),e(A2e,N2r),e(C0,j2r),e(Ar,D2r),e(Ar,Ft),g(w0,Ft,null),e(Ft,G2r),e(Ft,y2e),e(y2e,O2r),e(Ft,V2r),e(Ft,Xc),e(Xc,X2r),e(Xc,L2e),e(L2e,z2r),e(Xc,Q2r),e(Xc,bQ),e(bQ,W2r),e(Xc,H2r),e(Ft,U2r),e(Ft,x2e),e(x2e,J2r),e(Ft,Y2r),g(A0,Ft,null),e(Ar,K2r),e(Ar,Mo),g(y0,Mo,null),e(Mo,Z2r),e(Mo,k2e),e(k2e,e5r),e(Mo,o5r),e(Mo,Cn),e(Cn,r5r),e(Cn,S2e),e(S2e,t5r),e(Cn,a5r),e(Cn,R2e),e(R2e,n5r),e(Cn,s5r),e(Cn,B2e),e(B2e,l5r),e(Cn,i5r),e(Mo,d5r),e(Mo,se),e(se,k8),e(k8,P2e),e(P2e,c5r),e(k8,f5r),e(k8,vQ),e(vQ,m5r),e(k8,g5r),e(se,h5r),e(se,S8),e(S8,$2e),e($2e,p5r),e(S8,_5r),e(S8,FQ),e(FQ,u5r),e(S8,b5r),e(se,v5r),e(se,R8),e(R8,I2e),e(I2e,F5r),e(R8,T5r),e(R8,TQ),e(TQ,M5r),e(R8,E5r),e(se,C5r),e(se,B8),e(B8,q2e),e(q2e,w5r),e(B8,A5r),e(B8,MQ),e(MQ,y5r),e(B8,L5r),e(se,x5r),e(se,P8),e(P8,N2e),e(N2e,k5r),e(P8,S5r),e(P8,EQ),e(EQ,R5r),e(P8,B5r),e(se,P5r),e(se,$8),e($8,j2e),e(j2e,$5r),e($8,I5r),e($8,CQ),e(CQ,q5r),e($8,N5r),e(se,j5r),e(se,I8),e(I8,D2e),e(D2e,D5r),e(I8,G5r),e(I8,wQ),e(wQ,O5r),e(I8,V5r),e(se,X5r),e(se,q8),e(q8,G2e),e(G2e,z5r),e(q8,Q5r),e(q8,AQ),e(AQ,W5r),e(q8,H5r),e(se,U5r),e(se,N8),e(N8,O2e),e(O2e,J5r),e(N8,Y5r),e(N8,yQ),e(yQ,K5r),e(N8,Z5r),e(se,e6r),e(se,j8),e(j8,V2e),e(V2e,o6r),e(j8,r6r),e(j8,LQ),e(LQ,t6r),e(j8,a6r),e(se,n6r),e(se,D8),e(D8,X2e),e(X2e,s6r),e(D8,l6r),e(D8,xQ),e(xQ,i6r),e(D8,d6r),e(se,c6r),e(se,G8),e(G8,z2e),e(z2e,f6r),e(G8,m6r),e(G8,kQ),e(kQ,g6r),e(G8,h6r),e(se,p6r),e(se,O8),e(O8,Q2e),e(Q2e,_6r),e(O8,u6r),e(O8,SQ),e(SQ,b6r),e(O8,v6r),e(se,F6r),e(se,V8),e(V8,W2e),e(W2e,T6r),e(V8,M6r),e(V8,RQ),e(RQ,E6r),e(V8,C6r),e(se,w6r),e(se,X8),e(X8,H2e),e(H2e,A6r),e(X8,y6r),e(X8,BQ),e(BQ,L6r),e(X8,x6r),e(se,k6r),e(se,z8),e(z8,U2e),e(U2e,S6r),e(z8,R6r),e(z8,PQ),e(PQ,B6r),e(z8,P6r),e(se,$6r),e(se,Q8),e(Q8,J2e),e(J2e,I6r),e(Q8,q6r),e(Q8,$Q),e($Q,N6r),e(Q8,j6r),e(Mo,D6r),e(Mo,Y2e),e(Y2e,G6r),e(Mo,O6r),g(L0,Mo,null),b(c,C$e,u),b(c,zc,u),e(zc,W8),e(W8,K2e),g(x0,K2e,null),e(zc,V6r),e(zc,Z2e),e(Z2e,X6r),b(c,w$e,u),b(c,yr,u),g(k0,yr,null),e(yr,z6r),e(yr,Qc),e(Qc,Q6r),e(Qc,IQ),e(IQ,W6r),e(Qc,H6r),e(Qc,qQ),e(qQ,U6r),e(Qc,J6r),e(yr,Y6r),e(yr,S0),e(S0,K6r),e(S0,e5e),e(e5e,Z6r),e(S0,evr),e(yr,ovr),e(yr,Tt),g(R0,Tt,null),e(Tt,rvr),e(Tt,o5e),e(o5e,tvr),e(Tt,avr),e(Tt,Wc),e(Wc,nvr),e(Wc,r5e),e(r5e,svr),e(Wc,lvr),e(Wc,NQ),e(NQ,ivr),e(Wc,dvr),e(Tt,cvr),e(Tt,t5e),e(t5e,fvr),e(Tt,mvr),g(B0,Tt,null),e(yr,gvr),e(yr,Eo),g(P0,Eo,null),e(Eo,hvr),e(Eo,a5e),e(a5e,pvr),e(Eo,_vr),e(Eo,wn),e(wn,uvr),e(wn,n5e),e(n5e,bvr),e(wn,vvr),e(wn,s5e),e(s5e,Fvr),e(wn,Tvr),e(wn,l5e),e(l5e,Mvr),e(wn,Evr),e(Eo,Cvr),e(Eo,i5e),e(i5e,H8),e(H8,d5e),e(d5e,wvr),e(H8,Avr),e(H8,jQ),e(jQ,yvr),e(H8,Lvr),e(Eo,xvr),e(Eo,c5e),e(c5e,kvr),e(Eo,Svr),g($0,Eo,null),b(c,A$e,u),b(c,Hc,u),e(Hc,U8),e(U8,f5e),g(I0,f5e,null),e(Hc,Rvr),e(Hc,m5e),e(m5e,Bvr),b(c,y$e,u),b(c,Lr,u),g(q0,Lr,null),e(Lr,Pvr),e(Lr,Uc),e(Uc,$vr),e(Uc,DQ),e(DQ,Ivr),e(Uc,qvr),e(Uc,GQ),e(GQ,Nvr),e(Uc,jvr),e(Lr,Dvr),e(Lr,N0),e(N0,Gvr),e(N0,g5e),e(g5e,Ovr),e(N0,Vvr),e(Lr,Xvr),e(Lr,Mt),g(j0,Mt,null),e(Mt,zvr),e(Mt,h5e),e(h5e,Qvr),e(Mt,Wvr),e(Mt,Jc),e(Jc,Hvr),e(Jc,p5e),e(p5e,Uvr),e(Jc,Jvr),e(Jc,OQ),e(OQ,Yvr),e(Jc,Kvr),e(Mt,Zvr),e(Mt,_5e),e(_5e,eFr),e(Mt,oFr),g(D0,Mt,null),e(Lr,rFr),e(Lr,Co),g(G0,Co,null),e(Co,tFr),e(Co,u5e),e(u5e,aFr),e(Co,nFr),e(Co,An),e(An,sFr),e(An,b5e),e(b5e,lFr),e(An,iFr),e(An,v5e),e(v5e,dFr),e(An,cFr),e(An,F5e),e(F5e,fFr),e(An,mFr),e(Co,gFr),e(Co,Z),e(Z,J8),e(J8,T5e),e(T5e,hFr),e(J8,pFr),e(J8,VQ),e(VQ,_Fr),e(J8,uFr),e(Z,bFr),e(Z,Y8),e(Y8,M5e),e(M5e,vFr),e(Y8,FFr),e(Y8,XQ),e(XQ,TFr),e(Y8,MFr),e(Z,EFr),e(Z,K8),e(K8,E5e),e(E5e,CFr),e(K8,wFr),e(K8,zQ),e(zQ,AFr),e(K8,yFr),e(Z,LFr),e(Z,Z8),e(Z8,C5e),e(C5e,xFr),e(Z8,kFr),e(Z8,QQ),e(QQ,SFr),e(Z8,RFr),e(Z,BFr),e(Z,e7),e(e7,w5e),e(w5e,PFr),e(e7,$Fr),e(e7,WQ),e(WQ,IFr),e(e7,qFr),e(Z,NFr),e(Z,o7),e(o7,A5e),e(A5e,jFr),e(o7,DFr),e(o7,HQ),e(HQ,GFr),e(o7,OFr),e(Z,VFr),e(Z,r7),e(r7,y5e),e(y5e,XFr),e(r7,zFr),e(r7,UQ),e(UQ,QFr),e(r7,WFr),e(Z,HFr),e(Z,t7),e(t7,L5e),e(L5e,UFr),e(t7,JFr),e(t7,JQ),e(JQ,YFr),e(t7,KFr),e(Z,ZFr),e(Z,a7),e(a7,x5e),e(x5e,eTr),e(a7,oTr),e(a7,YQ),e(YQ,rTr),e(a7,tTr),e(Z,aTr),e(Z,n7),e(n7,k5e),e(k5e,nTr),e(n7,sTr),e(n7,KQ),e(KQ,lTr),e(n7,iTr),e(Z,dTr),e(Z,s7),e(s7,S5e),e(S5e,cTr),e(s7,fTr),e(s7,ZQ),e(ZQ,mTr),e(s7,gTr),e(Z,hTr),e(Z,l7),e(l7,R5e),e(R5e,pTr),e(l7,_Tr),e(l7,eW),e(eW,uTr),e(l7,bTr),e(Z,vTr),e(Z,i7),e(i7,B5e),e(B5e,FTr),e(i7,TTr),e(i7,oW),e(oW,MTr),e(i7,ETr),e(Z,CTr),e(Z,d7),e(d7,P5e),e(P5e,wTr),e(d7,ATr),e(d7,rW),e(rW,yTr),e(d7,LTr),e(Z,xTr),e(Z,c7),e(c7,$5e),e($5e,kTr),e(c7,STr),e(c7,tW),e(tW,RTr),e(c7,BTr),e(Z,PTr),e(Z,f7),e(f7,I5e),e(I5e,$Tr),e(f7,ITr),e(f7,aW),e(aW,qTr),e(f7,NTr),e(Z,jTr),e(Z,m7),e(m7,q5e),e(q5e,DTr),e(m7,GTr),e(m7,nW),e(nW,OTr),e(m7,VTr),e(Z,XTr),e(Z,g7),e(g7,N5e),e(N5e,zTr),e(g7,QTr),e(g7,sW),e(sW,WTr),e(g7,HTr),e(Z,UTr),e(Z,h7),e(h7,j5e),e(j5e,JTr),e(h7,YTr),e(h7,lW),e(lW,KTr),e(h7,ZTr),e(Z,e8r),e(Z,p7),e(p7,D5e),e(D5e,o8r),e(p7,r8r),e(p7,iW),e(iW,t8r),e(p7,a8r),e(Co,n8r),e(Co,G5e),e(G5e,s8r),e(Co,l8r),g(O0,Co,null),b(c,L$e,u),b(c,Yc,u),e(Yc,_7),e(_7,O5e),g(V0,O5e,null),e(Yc,i8r),e(Yc,V5e),e(V5e,d8r),b(c,x$e,u),b(c,xr,u),g(X0,xr,null),e(xr,c8r),e(xr,Kc),e(Kc,f8r),e(Kc,dW),e(dW,m8r),e(Kc,g8r),e(Kc,cW),e(cW,h8r),e(Kc,p8r),e(xr,_8r),e(xr,z0),e(z0,u8r),e(z0,X5e),e(X5e,b8r),e(z0,v8r),e(xr,F8r),e(xr,Et),g(Q0,Et,null),e(Et,T8r),e(Et,z5e),e(z5e,M8r),e(Et,E8r),e(Et,Zc),e(Zc,C8r),e(Zc,Q5e),e(Q5e,w8r),e(Zc,A8r),e(Zc,fW),e(fW,y8r),e(Zc,L8r),e(Et,x8r),e(Et,W5e),e(W5e,k8r),e(Et,S8r),g(W0,Et,null),e(xr,R8r),e(xr,wo),g(H0,wo,null),e(wo,B8r),e(wo,H5e),e(H5e,P8r),e(wo,$8r),e(wo,yn),e(yn,I8r),e(yn,U5e),e(U5e,q8r),e(yn,N8r),e(yn,J5e),e(J5e,j8r),e(yn,D8r),e(yn,Y5e),e(Y5e,G8r),e(yn,O8r),e(wo,V8r),e(wo,ee),e(ee,u7),e(u7,K5e),e(K5e,X8r),e(u7,z8r),e(u7,mW),e(mW,Q8r),e(u7,W8r),e(ee,H8r),e(ee,b7),e(b7,Z5e),e(Z5e,U8r),e(b7,J8r),e(b7,gW),e(gW,Y8r),e(b7,K8r),e(ee,Z8r),e(ee,v7),e(v7,e6e),e(e6e,e7r),e(v7,o7r),e(v7,hW),e(hW,r7r),e(v7,t7r),e(ee,a7r),e(ee,F7),e(F7,o6e),e(o6e,n7r),e(F7,s7r),e(F7,pW),e(pW,l7r),e(F7,i7r),e(ee,d7r),e(ee,T7),e(T7,r6e),e(r6e,c7r),e(T7,f7r),e(T7,_W),e(_W,m7r),e(T7,g7r),e(ee,h7r),e(ee,M7),e(M7,t6e),e(t6e,p7r),e(M7,_7r),e(M7,uW),e(uW,u7r),e(M7,b7r),e(ee,v7r),e(ee,E7),e(E7,a6e),e(a6e,F7r),e(E7,T7r),e(E7,bW),e(bW,M7r),e(E7,E7r),e(ee,C7r),e(ee,C7),e(C7,n6e),e(n6e,w7r),e(C7,A7r),e(C7,vW),e(vW,y7r),e(C7,L7r),e(ee,x7r),e(ee,w7),e(w7,s6e),e(s6e,k7r),e(w7,S7r),e(w7,FW),e(FW,R7r),e(w7,B7r),e(ee,P7r),e(ee,A7),e(A7,l6e),e(l6e,$7r),e(A7,I7r),e(A7,TW),e(TW,q7r),e(A7,N7r),e(ee,j7r),e(ee,y7),e(y7,i6e),e(i6e,D7r),e(y7,G7r),e(y7,MW),e(MW,O7r),e(y7,V7r),e(ee,X7r),e(ee,L7),e(L7,d6e),e(d6e,z7r),e(L7,Q7r),e(L7,EW),e(EW,W7r),e(L7,H7r),e(ee,U7r),e(ee,x7),e(x7,c6e),e(c6e,J7r),e(x7,Y7r),e(x7,CW),e(CW,K7r),e(x7,Z7r),e(ee,eMr),e(ee,k7),e(k7,f6e),e(f6e,oMr),e(k7,rMr),e(k7,wW),e(wW,tMr),e(k7,aMr),e(ee,nMr),e(ee,S7),e(S7,m6e),e(m6e,sMr),e(S7,lMr),e(S7,AW),e(AW,iMr),e(S7,dMr),e(ee,cMr),e(ee,R7),e(R7,g6e),e(g6e,fMr),e(R7,mMr),e(R7,yW),e(yW,gMr),e(R7,hMr),e(ee,pMr),e(ee,B7),e(B7,h6e),e(h6e,_Mr),e(B7,uMr),e(B7,LW),e(LW,bMr),e(B7,vMr),e(ee,FMr),e(ee,P7),e(P7,p6e),e(p6e,TMr),e(P7,MMr),e(P7,xW),e(xW,EMr),e(P7,CMr),e(ee,wMr),e(ee,$7),e($7,_6e),e(_6e,AMr),e($7,yMr),e($7,kW),e(kW,LMr),e($7,xMr),e(ee,kMr),e(ee,I7),e(I7,u6e),e(u6e,SMr),e(I7,RMr),e(I7,SW),e(SW,BMr),e(I7,PMr),e(wo,$Mr),e(wo,b6e),e(b6e,IMr),e(wo,qMr),g(U0,wo,null),b(c,k$e,u),b(c,ef,u),e(ef,q7),e(q7,v6e),g(J0,v6e,null),e(ef,NMr),e(ef,F6e),e(F6e,jMr),b(c,S$e,u),b(c,kr,u),g(Y0,kr,null),e(kr,DMr),e(kr,of),e(of,GMr),e(of,RW),e(RW,OMr),e(of,VMr),e(of,BW),e(BW,XMr),e(of,zMr),e(kr,QMr),e(kr,K0),e(K0,WMr),e(K0,T6e),e(T6e,HMr),e(K0,UMr),e(kr,JMr),e(kr,Ct),g(Z0,Ct,null),e(Ct,YMr),e(Ct,M6e),e(M6e,KMr),e(Ct,ZMr),e(Ct,rf),e(rf,e4r),e(rf,E6e),e(E6e,o4r),e(rf,r4r),e(rf,PW),e(PW,t4r),e(rf,a4r),e(Ct,n4r),e(Ct,C6e),e(C6e,s4r),e(Ct,l4r),g(ey,Ct,null),e(kr,i4r),e(kr,Ao),g(oy,Ao,null),e(Ao,d4r),e(Ao,w6e),e(w6e,c4r),e(Ao,f4r),e(Ao,Ln),e(Ln,m4r),e(Ln,A6e),e(A6e,g4r),e(Ln,h4r),e(Ln,y6e),e(y6e,p4r),e(Ln,_4r),e(Ln,L6e),e(L6e,u4r),e(Ln,b4r),e(Ao,v4r),e(Ao,x6e),e(x6e,N7),e(N7,k6e),e(k6e,F4r),e(N7,T4r),e(N7,$W),e($W,M4r),e(N7,E4r),e(Ao,C4r),e(Ao,S6e),e(S6e,w4r),e(Ao,A4r),g(ry,Ao,null),b(c,R$e,u),b(c,tf,u),e(tf,j7),e(j7,R6e),g(ty,R6e,null),e(tf,y4r),e(tf,B6e),e(B6e,L4r),b(c,B$e,u),b(c,Sr,u),g(ay,Sr,null),e(Sr,x4r),e(Sr,af),e(af,k4r),e(af,IW),e(IW,S4r),e(af,R4r),e(af,qW),e(qW,B4r),e(af,P4r),e(Sr,$4r),e(Sr,ny),e(ny,I4r),e(ny,P6e),e(P6e,q4r),e(ny,N4r),e(Sr,j4r),e(Sr,wt),g(sy,wt,null),e(wt,D4r),e(wt,$6e),e($6e,G4r),e(wt,O4r),e(wt,nf),e(nf,V4r),e(nf,I6e),e(I6e,X4r),e(nf,z4r),e(nf,NW),e(NW,Q4r),e(nf,W4r),e(wt,H4r),e(wt,q6e),e(q6e,U4r),e(wt,J4r),g(ly,wt,null),e(Sr,Y4r),e(Sr,yo),g(iy,yo,null),e(yo,K4r),e(yo,N6e),e(N6e,Z4r),e(yo,eEr),e(yo,xn),e(xn,oEr),e(xn,j6e),e(j6e,rEr),e(xn,tEr),e(xn,D6e),e(D6e,aEr),e(xn,nEr),e(xn,G6e),e(G6e,sEr),e(xn,lEr),e(yo,iEr),e(yo,O6e),e(O6e,D7),e(D7,V6e),e(V6e,dEr),e(D7,cEr),e(D7,jW),e(jW,fEr),e(D7,mEr),e(yo,gEr),e(yo,X6e),e(X6e,hEr),e(yo,pEr),g(dy,yo,null),b(c,P$e,u),b(c,sf,u),e(sf,G7),e(G7,z6e),g(cy,z6e,null),e(sf,_Er),e(sf,Q6e),e(Q6e,uEr),b(c,$$e,u),b(c,Rr,u),g(fy,Rr,null),e(Rr,bEr),e(Rr,lf),e(lf,vEr),e(lf,DW),e(DW,FEr),e(lf,TEr),e(lf,GW),e(GW,MEr),e(lf,EEr),e(Rr,CEr),e(Rr,my),e(my,wEr),e(my,W6e),e(W6e,AEr),e(my,yEr),e(Rr,LEr),e(Rr,At),g(gy,At,null),e(At,xEr),e(At,H6e),e(H6e,kEr),e(At,SEr),e(At,df),e(df,REr),e(df,U6e),e(U6e,BEr),e(df,PEr),e(df,OW),e(OW,$Er),e(df,IEr),e(At,qEr),e(At,J6e),e(J6e,NEr),e(At,jEr),g(hy,At,null),e(Rr,DEr),e(Rr,Lo),g(py,Lo,null),e(Lo,GEr),e(Lo,Y6e),e(Y6e,OEr),e(Lo,VEr),e(Lo,kn),e(kn,XEr),e(kn,K6e),e(K6e,zEr),e(kn,QEr),e(kn,Z6e),e(Z6e,WEr),e(kn,HEr),e(kn,eve),e(eve,UEr),e(kn,JEr),e(Lo,YEr),e(Lo,z),e(z,O7),e(O7,ove),e(ove,KEr),e(O7,ZEr),e(O7,VW),e(VW,e3r),e(O7,o3r),e(z,r3r),e(z,V7),e(V7,rve),e(rve,t3r),e(V7,a3r),e(V7,XW),e(XW,n3r),e(V7,s3r),e(z,l3r),e(z,X7),e(X7,tve),e(tve,i3r),e(X7,d3r),e(X7,zW),e(zW,c3r),e(X7,f3r),e(z,m3r),e(z,z7),e(z7,ave),e(ave,g3r),e(z7,h3r),e(z7,QW),e(QW,p3r),e(z7,_3r),e(z,u3r),e(z,Q7),e(Q7,nve),e(nve,b3r),e(Q7,v3r),e(Q7,WW),e(WW,F3r),e(Q7,T3r),e(z,M3r),e(z,W7),e(W7,sve),e(sve,E3r),e(W7,C3r),e(W7,HW),e(HW,w3r),e(W7,A3r),e(z,y3r),e(z,H7),e(H7,lve),e(lve,L3r),e(H7,x3r),e(H7,UW),e(UW,k3r),e(H7,S3r),e(z,R3r),e(z,U7),e(U7,ive),e(ive,B3r),e(U7,P3r),e(U7,JW),e(JW,$3r),e(U7,I3r),e(z,q3r),e(z,J7),e(J7,dve),e(dve,N3r),e(J7,j3r),e(J7,YW),e(YW,D3r),e(J7,G3r),e(z,O3r),e(z,Y7),e(Y7,cve),e(cve,V3r),e(Y7,X3r),e(Y7,KW),e(KW,z3r),e(Y7,Q3r),e(z,W3r),e(z,K7),e(K7,fve),e(fve,H3r),e(K7,U3r),e(K7,ZW),e(ZW,J3r),e(K7,Y3r),e(z,K3r),e(z,Z7),e(Z7,mve),e(mve,Z3r),e(Z7,eCr),e(Z7,eH),e(eH,oCr),e(Z7,rCr),e(z,tCr),e(z,eM),e(eM,gve),e(gve,aCr),e(eM,nCr),e(eM,oH),e(oH,sCr),e(eM,lCr),e(z,iCr),e(z,oM),e(oM,hve),e(hve,dCr),e(oM,cCr),e(oM,rH),e(rH,fCr),e(oM,mCr),e(z,gCr),e(z,rM),e(rM,pve),e(pve,hCr),e(rM,pCr),e(rM,tH),e(tH,_Cr),e(rM,uCr),e(z,bCr),e(z,tM),e(tM,_ve),e(_ve,vCr),e(tM,FCr),e(tM,aH),e(aH,TCr),e(tM,MCr),e(z,ECr),e(z,aM),e(aM,uve),e(uve,CCr),e(aM,wCr),e(aM,nH),e(nH,ACr),e(aM,yCr),e(z,LCr),e(z,nM),e(nM,bve),e(bve,xCr),e(nM,kCr),e(nM,sH),e(sH,SCr),e(nM,RCr),e(z,BCr),e(z,sM),e(sM,vve),e(vve,PCr),e(sM,$Cr),e(sM,lH),e(lH,ICr),e(sM,qCr),e(z,NCr),e(z,lM),e(lM,Fve),e(Fve,jCr),e(lM,DCr),e(lM,iH),e(iH,GCr),e(lM,OCr),e(z,VCr),e(z,iM),e(iM,Tve),e(Tve,XCr),e(iM,zCr),e(iM,dH),e(dH,QCr),e(iM,WCr),e(z,HCr),e(z,dM),e(dM,Mve),e(Mve,UCr),e(dM,JCr),e(dM,cH),e(cH,YCr),e(dM,KCr),e(z,ZCr),e(z,cM),e(cM,Eve),e(Eve,ewr),e(cM,owr),e(cM,fH),e(fH,rwr),e(cM,twr),e(z,awr),e(z,fM),e(fM,Cve),e(Cve,nwr),e(fM,swr),e(fM,mH),e(mH,lwr),e(fM,iwr),e(z,dwr),e(z,mM),e(mM,wve),e(wve,cwr),e(mM,fwr),e(mM,gH),e(gH,mwr),e(mM,gwr),e(Lo,hwr),e(Lo,Ave),e(Ave,pwr),e(Lo,_wr),g(_y,Lo,null),b(c,I$e,u),b(c,cf,u),e(cf,gM),e(gM,yve),g(uy,yve,null),e(cf,uwr),e(cf,Lve),e(Lve,bwr),b(c,q$e,u),b(c,Br,u),g(by,Br,null),e(Br,vwr),e(Br,ff),e(ff,Fwr),e(ff,hH),e(hH,Twr),e(ff,Mwr),e(ff,pH),e(pH,Ewr),e(ff,Cwr),e(Br,wwr),e(Br,vy),e(vy,Awr),e(vy,xve),e(xve,ywr),e(vy,Lwr),e(Br,xwr),e(Br,yt),g(Fy,yt,null),e(yt,kwr),e(yt,kve),e(kve,Swr),e(yt,Rwr),e(yt,mf),e(mf,Bwr),e(mf,Sve),e(Sve,Pwr),e(mf,$wr),e(mf,_H),e(_H,Iwr),e(mf,qwr),e(yt,Nwr),e(yt,Rve),e(Rve,jwr),e(yt,Dwr),g(Ty,yt,null),e(Br,Gwr),e(Br,xo),g(My,xo,null),e(xo,Owr),e(xo,Bve),e(Bve,Vwr),e(xo,Xwr),e(xo,Sn),e(Sn,zwr),e(Sn,Pve),e(Pve,Qwr),e(Sn,Wwr),e(Sn,$ve),e($ve,Hwr),e(Sn,Uwr),e(Sn,Ive),e(Ive,Jwr),e(Sn,Ywr),e(xo,Kwr),e(xo,ca),e(ca,hM),e(hM,qve),e(qve,Zwr),e(hM,eAr),e(hM,uH),e(uH,oAr),e(hM,rAr),e(ca,tAr),e(ca,pM),e(pM,Nve),e(Nve,aAr),e(pM,nAr),e(pM,bH),e(bH,sAr),e(pM,lAr),e(ca,iAr),e(ca,_M),e(_M,jve),e(jve,dAr),e(_M,cAr),e(_M,vH),e(vH,fAr),e(_M,mAr),e(ca,gAr),e(ca,uM),e(uM,Dve),e(Dve,hAr),e(uM,pAr),e(uM,FH),e(FH,_Ar),e(uM,uAr),e(ca,bAr),e(ca,bM),e(bM,Gve),e(Gve,vAr),e(bM,FAr),e(bM,TH),e(TH,TAr),e(bM,MAr),e(xo,EAr),e(xo,Ove),e(Ove,CAr),e(xo,wAr),g(Ey,xo,null),b(c,N$e,u),b(c,gf,u),e(gf,vM),e(vM,Vve),g(Cy,Vve,null),e(gf,AAr),e(gf,Xve),e(Xve,yAr),b(c,j$e,u),b(c,Pr,u),g(wy,Pr,null),e(Pr,LAr),e(Pr,hf),e(hf,xAr),e(hf,MH),e(MH,kAr),e(hf,SAr),e(hf,EH),e(EH,RAr),e(hf,BAr),e(Pr,PAr),e(Pr,Ay),e(Ay,$Ar),e(Ay,zve),e(zve,IAr),e(Ay,qAr),e(Pr,NAr),e(Pr,Lt),g(yy,Lt,null),e(Lt,jAr),e(Lt,Qve),e(Qve,DAr),e(Lt,GAr),e(Lt,pf),e(pf,OAr),e(pf,Wve),e(Wve,VAr),e(pf,XAr),e(pf,CH),e(CH,zAr),e(pf,QAr),e(Lt,WAr),e(Lt,Hve),e(Hve,HAr),e(Lt,UAr),g(Ly,Lt,null),e(Pr,JAr),e(Pr,ko),g(xy,ko,null),e(ko,YAr),e(ko,Uve),e(Uve,KAr),e(ko,ZAr),e(ko,Rn),e(Rn,e0r),e(Rn,Jve),e(Jve,o0r),e(Rn,r0r),e(Rn,Yve),e(Yve,t0r),e(Rn,a0r),e(Rn,Kve),e(Kve,n0r),e(Rn,s0r),e(ko,l0r),e(ko,he),e(he,FM),e(FM,Zve),e(Zve,i0r),e(FM,d0r),e(FM,wH),e(wH,c0r),e(FM,f0r),e(he,m0r),e(he,TM),e(TM,eFe),e(eFe,g0r),e(TM,h0r),e(TM,AH),e(AH,p0r),e(TM,_0r),e(he,u0r),e(he,MM),e(MM,oFe),e(oFe,b0r),e(MM,v0r),e(MM,yH),e(yH,F0r),e(MM,T0r),e(he,M0r),e(he,EM),e(EM,rFe),e(rFe,E0r),e(EM,C0r),e(EM,LH),e(LH,w0r),e(EM,A0r),e(he,y0r),e(he,CM),e(CM,tFe),e(tFe,L0r),e(CM,x0r),e(CM,xH),e(xH,k0r),e(CM,S0r),e(he,R0r),e(he,wM),e(wM,aFe),e(aFe,B0r),e(wM,P0r),e(wM,kH),e(kH,$0r),e(wM,I0r),e(he,q0r),e(he,AM),e(AM,nFe),e(nFe,N0r),e(AM,j0r),e(AM,SH),e(SH,D0r),e(AM,G0r),e(he,O0r),e(he,yM),e(yM,sFe),e(sFe,V0r),e(yM,X0r),e(yM,RH),e(RH,z0r),e(yM,Q0r),e(he,W0r),e(he,LM),e(LM,lFe),e(lFe,H0r),e(LM,U0r),e(LM,BH),e(BH,J0r),e(LM,Y0r),e(he,K0r),e(he,xM),e(xM,iFe),e(iFe,Z0r),e(xM,eyr),e(xM,PH),e(PH,oyr),e(xM,ryr),e(he,tyr),e(he,kM),e(kM,dFe),e(dFe,ayr),e(kM,nyr),e(kM,$H),e($H,syr),e(kM,lyr),e(he,iyr),e(he,SM),e(SM,cFe),e(cFe,dyr),e(SM,cyr),e(SM,IH),e(IH,fyr),e(SM,myr),e(ko,gyr),e(ko,fFe),e(fFe,hyr),e(ko,pyr),g(ky,ko,null),b(c,D$e,u),b(c,_f,u),e(_f,RM),e(RM,mFe),g(Sy,mFe,null),e(_f,_yr),e(_f,gFe),e(gFe,uyr),b(c,G$e,u),b(c,$r,u),g(Ry,$r,null),e($r,byr),e($r,uf),e(uf,vyr),e(uf,qH),e(qH,Fyr),e(uf,Tyr),e(uf,NH),e(NH,Myr),e(uf,Eyr),e($r,Cyr),e($r,By),e(By,wyr),e(By,hFe),e(hFe,Ayr),e(By,yyr),e($r,Lyr),e($r,xt),g(Py,xt,null),e(xt,xyr),e(xt,pFe),e(pFe,kyr),e(xt,Syr),e(xt,bf),e(bf,Ryr),e(bf,_Fe),e(_Fe,Byr),e(bf,Pyr),e(bf,jH),e(jH,$yr),e(bf,Iyr),e(xt,qyr),e(xt,uFe),e(uFe,Nyr),e(xt,jyr),g($y,xt,null),e($r,Dyr),e($r,So),g(Iy,So,null),e(So,Gyr),e(So,bFe),e(bFe,Oyr),e(So,Vyr),e(So,Bn),e(Bn,Xyr),e(Bn,vFe),e(vFe,zyr),e(Bn,Qyr),e(Bn,FFe),e(FFe,Wyr),e(Bn,Hyr),e(Bn,TFe),e(TFe,Uyr),e(Bn,Jyr),e(So,Yyr),e(So,Te),e(Te,BM),e(BM,MFe),e(MFe,Kyr),e(BM,Zyr),e(BM,DH),e(DH,eLr),e(BM,oLr),e(Te,rLr),e(Te,PM),e(PM,EFe),e(EFe,tLr),e(PM,aLr),e(PM,GH),e(GH,nLr),e(PM,sLr),e(Te,lLr),e(Te,$M),e($M,CFe),e(CFe,iLr),e($M,dLr),e($M,OH),e(OH,cLr),e($M,fLr),e(Te,mLr),e(Te,IM),e(IM,wFe),e(wFe,gLr),e(IM,hLr),e(IM,VH),e(VH,pLr),e(IM,_Lr),e(Te,uLr),e(Te,qM),e(qM,AFe),e(AFe,bLr),e(qM,vLr),e(qM,XH),e(XH,FLr),e(qM,TLr),e(Te,MLr),e(Te,NM),e(NM,yFe),e(yFe,ELr),e(NM,CLr),e(NM,zH),e(zH,wLr),e(NM,ALr),e(Te,yLr),e(Te,jM),e(jM,LFe),e(LFe,LLr),e(jM,xLr),e(jM,QH),e(QH,kLr),e(jM,SLr),e(Te,RLr),e(Te,DM),e(DM,xFe),e(xFe,BLr),e(DM,PLr),e(DM,WH),e(WH,$Lr),e(DM,ILr),e(Te,qLr),e(Te,GM),e(GM,kFe),e(kFe,NLr),e(GM,jLr),e(GM,HH),e(HH,DLr),e(GM,GLr),e(Te,OLr),e(Te,OM),e(OM,SFe),e(SFe,VLr),e(OM,XLr),e(OM,UH),e(UH,zLr),e(OM,QLr),e(So,WLr),e(So,RFe),e(RFe,HLr),e(So,ULr),g(qy,So,null),b(c,O$e,u),b(c,vf,u),e(vf,VM),e(VM,BFe),g(Ny,BFe,null),e(vf,JLr),e(vf,PFe),e(PFe,YLr),b(c,V$e,u),b(c,Ir,u),g(jy,Ir,null),e(Ir,KLr),e(Ir,Ff),e(Ff,ZLr),e(Ff,JH),e(JH,e9r),e(Ff,o9r),e(Ff,YH),e(YH,r9r),e(Ff,t9r),e(Ir,a9r),e(Ir,Dy),e(Dy,n9r),e(Dy,$Fe),e($Fe,s9r),e(Dy,l9r),e(Ir,i9r),e(Ir,kt),g(Gy,kt,null),e(kt,d9r),e(kt,IFe),e(IFe,c9r),e(kt,f9r),e(kt,Tf),e(Tf,m9r),e(Tf,qFe),e(qFe,g9r),e(Tf,h9r),e(Tf,KH),e(KH,p9r),e(Tf,_9r),e(kt,u9r),e(kt,NFe),e(NFe,b9r),e(kt,v9r),g(Oy,kt,null),e(Ir,F9r),e(Ir,Ro),g(Vy,Ro,null),e(Ro,T9r),e(Ro,jFe),e(jFe,M9r),e(Ro,E9r),e(Ro,Pn),e(Pn,C9r),e(Pn,DFe),e(DFe,w9r),e(Pn,A9r),e(Pn,GFe),e(GFe,y9r),e(Pn,L9r),e(Pn,OFe),e(OFe,x9r),e(Pn,k9r),e(Ro,S9r),e(Ro,we),e(we,XM),e(XM,VFe),e(VFe,R9r),e(XM,B9r),e(XM,ZH),e(ZH,P9r),e(XM,$9r),e(we,I9r),e(we,zM),e(zM,XFe),e(XFe,q9r),e(zM,N9r),e(zM,eU),e(eU,j9r),e(zM,D9r),e(we,G9r),e(we,QM),e(QM,zFe),e(zFe,O9r),e(QM,V9r),e(QM,oU),e(oU,X9r),e(QM,z9r),e(we,Q9r),e(we,WM),e(WM,QFe),e(QFe,W9r),e(WM,H9r),e(WM,rU),e(rU,U9r),e(WM,J9r),e(we,Y9r),e(we,HM),e(HM,WFe),e(WFe,K9r),e(HM,Z9r),e(HM,tU),e(tU,exr),e(HM,oxr),e(we,rxr),e(we,UM),e(UM,HFe),e(HFe,txr),e(UM,axr),e(UM,aU),e(aU,nxr),e(UM,sxr),e(we,lxr),e(we,JM),e(JM,UFe),e(UFe,ixr),e(JM,dxr),e(JM,nU),e(nU,cxr),e(JM,fxr),e(we,mxr),e(we,YM),e(YM,JFe),e(JFe,gxr),e(YM,hxr),e(YM,sU),e(sU,pxr),e(YM,_xr),e(we,uxr),e(we,KM),e(KM,YFe),e(YFe,bxr),e(KM,vxr),e(KM,lU),e(lU,Fxr),e(KM,Txr),e(Ro,Mxr),e(Ro,KFe),e(KFe,Exr),e(Ro,Cxr),g(Xy,Ro,null),b(c,X$e,u),b(c,Mf,u),e(Mf,ZM),e(ZM,ZFe),g(zy,ZFe,null),e(Mf,wxr),e(Mf,eTe),e(eTe,Axr),b(c,z$e,u),b(c,qr,u),g(Qy,qr,null),e(qr,yxr),e(qr,Ef),e(Ef,Lxr),e(Ef,iU),e(iU,xxr),e(Ef,kxr),e(Ef,dU),e(dU,Sxr),e(Ef,Rxr),e(qr,Bxr),e(qr,Wy),e(Wy,Pxr),e(Wy,oTe),e(oTe,$xr),e(Wy,Ixr),e(qr,qxr),e(qr,St),g(Hy,St,null),e(St,Nxr),e(St,rTe),e(rTe,jxr),e(St,Dxr),e(St,Cf),e(Cf,Gxr),e(Cf,tTe),e(tTe,Oxr),e(Cf,Vxr),e(Cf,cU),e(cU,Xxr),e(Cf,zxr),e(St,Qxr),e(St,aTe),e(aTe,Wxr),e(St,Hxr),g(Uy,St,null),e(qr,Uxr),e(qr,Bo),g(Jy,Bo,null),e(Bo,Jxr),e(Bo,nTe),e(nTe,Yxr),e(Bo,Kxr),e(Bo,$n),e($n,Zxr),e($n,sTe),e(sTe,ekr),e($n,okr),e($n,lTe),e(lTe,rkr),e($n,tkr),e($n,iTe),e(iTe,akr),e($n,nkr),e(Bo,skr),e(Bo,Me),e(Me,e4),e(e4,dTe),e(dTe,lkr),e(e4,ikr),e(e4,fU),e(fU,dkr),e(e4,ckr),e(Me,fkr),e(Me,o4),e(o4,cTe),e(cTe,mkr),e(o4,gkr),e(o4,mU),e(mU,hkr),e(o4,pkr),e(Me,_kr),e(Me,r4),e(r4,fTe),e(fTe,ukr),e(r4,bkr),e(r4,gU),e(gU,vkr),e(r4,Fkr),e(Me,Tkr),e(Me,t4),e(t4,mTe),e(mTe,Mkr),e(t4,Ekr),e(t4,hU),e(hU,Ckr),e(t4,wkr),e(Me,Akr),e(Me,a4),e(a4,gTe),e(gTe,ykr),e(a4,Lkr),e(a4,pU),e(pU,xkr),e(a4,kkr),e(Me,Skr),e(Me,n4),e(n4,hTe),e(hTe,Rkr),e(n4,Bkr),e(n4,_U),e(_U,Pkr),e(n4,$kr),e(Me,Ikr),e(Me,s4),e(s4,pTe),e(pTe,qkr),e(s4,Nkr),e(s4,uU),e(uU,jkr),e(s4,Dkr),e(Me,Gkr),e(Me,l4),e(l4,_Te),e(_Te,Okr),e(l4,Vkr),e(l4,bU),e(bU,Xkr),e(l4,zkr),e(Me,Qkr),e(Me,i4),e(i4,uTe),e(uTe,Wkr),e(i4,Hkr),e(i4,vU),e(vU,Ukr),e(i4,Jkr),e(Me,Ykr),e(Me,d4),e(d4,bTe),e(bTe,Kkr),e(d4,Zkr),e(d4,FU),e(FU,eSr),e(d4,oSr),e(Bo,rSr),e(Bo,vTe),e(vTe,tSr),e(Bo,aSr),g(Yy,Bo,null),b(c,Q$e,u),b(c,wf,u),e(wf,c4),e(c4,FTe),g(Ky,FTe,null),e(wf,nSr),e(wf,TTe),e(TTe,sSr),b(c,W$e,u),b(c,Nr,u),g(Zy,Nr,null),e(Nr,lSr),e(Nr,Af),e(Af,iSr),e(Af,TU),e(TU,dSr),e(Af,cSr),e(Af,MU),e(MU,fSr),e(Af,mSr),e(Nr,gSr),e(Nr,eL),e(eL,hSr),e(eL,MTe),e(MTe,pSr),e(eL,_Sr),e(Nr,uSr),e(Nr,Rt),g(oL,Rt,null),e(Rt,bSr),e(Rt,ETe),e(ETe,vSr),e(Rt,FSr),e(Rt,yf),e(yf,TSr),e(yf,CTe),e(CTe,MSr),e(yf,ESr),e(yf,EU),e(EU,CSr),e(yf,wSr),e(Rt,ASr),e(Rt,wTe),e(wTe,ySr),e(Rt,LSr),g(rL,Rt,null),e(Nr,xSr),e(Nr,Po),g(tL,Po,null),e(Po,kSr),e(Po,ATe),e(ATe,SSr),e(Po,RSr),e(Po,In),e(In,BSr),e(In,yTe),e(yTe,PSr),e(In,$Sr),e(In,LTe),e(LTe,ISr),e(In,qSr),e(In,xTe),e(xTe,NSr),e(In,jSr),e(Po,DSr),e(Po,Ee),e(Ee,f4),e(f4,kTe),e(kTe,GSr),e(f4,OSr),e(f4,CU),e(CU,VSr),e(f4,XSr),e(Ee,zSr),e(Ee,m4),e(m4,STe),e(STe,QSr),e(m4,WSr),e(m4,wU),e(wU,HSr),e(m4,USr),e(Ee,JSr),e(Ee,g4),e(g4,RTe),e(RTe,YSr),e(g4,KSr),e(g4,AU),e(AU,ZSr),e(g4,eRr),e(Ee,oRr),e(Ee,h4),e(h4,BTe),e(BTe,rRr),e(h4,tRr),e(h4,yU),e(yU,aRr),e(h4,nRr),e(Ee,sRr),e(Ee,p4),e(p4,PTe),e(PTe,lRr),e(p4,iRr),e(p4,LU),e(LU,dRr),e(p4,cRr),e(Ee,fRr),e(Ee,_4),e(_4,$Te),e($Te,mRr),e(_4,gRr),e(_4,xU),e(xU,hRr),e(_4,pRr),e(Ee,_Rr),e(Ee,u4),e(u4,ITe),e(ITe,uRr),e(u4,bRr),e(u4,kU),e(kU,vRr),e(u4,FRr),e(Ee,TRr),e(Ee,b4),e(b4,qTe),e(qTe,MRr),e(b4,ERr),e(b4,SU),e(SU,CRr),e(b4,wRr),e(Ee,ARr),e(Ee,v4),e(v4,NTe),e(NTe,yRr),e(v4,LRr),e(v4,RU),e(RU,xRr),e(v4,kRr),e(Ee,SRr),e(Ee,F4),e(F4,jTe),e(jTe,RRr),e(F4,BRr),e(F4,BU),e(BU,PRr),e(F4,$Rr),e(Po,IRr),e(Po,DTe),e(DTe,qRr),e(Po,NRr),g(aL,Po,null),b(c,H$e,u),b(c,Lf,u),e(Lf,T4),e(T4,GTe),g(nL,GTe,null),e(Lf,jRr),e(Lf,OTe),e(OTe,DRr),b(c,U$e,u),b(c,jr,u),g(sL,jr,null),e(jr,GRr),e(jr,xf),e(xf,ORr),e(xf,PU),e(PU,VRr),e(xf,XRr),e(xf,$U),e($U,zRr),e(xf,QRr),e(jr,WRr),e(jr,lL),e(lL,HRr),e(lL,VTe),e(VTe,URr),e(lL,JRr),e(jr,YRr),e(jr,Bt),g(iL,Bt,null),e(Bt,KRr),e(Bt,XTe),e(XTe,ZRr),e(Bt,eBr),e(Bt,kf),e(kf,oBr),e(kf,zTe),e(zTe,rBr),e(kf,tBr),e(kf,IU),e(IU,aBr),e(kf,nBr),e(Bt,sBr),e(Bt,QTe),e(QTe,lBr),e(Bt,iBr),g(dL,Bt,null),e(jr,dBr),e(jr,$o),g(cL,$o,null),e($o,cBr),e($o,WTe),e(WTe,fBr),e($o,mBr),e($o,qn),e(qn,gBr),e(qn,HTe),e(HTe,hBr),e(qn,pBr),e(qn,UTe),e(UTe,_Br),e(qn,uBr),e(qn,JTe),e(JTe,bBr),e(qn,vBr),e($o,FBr),e($o,Pe),e(Pe,M4),e(M4,YTe),e(YTe,TBr),e(M4,MBr),e(M4,qU),e(qU,EBr),e(M4,CBr),e(Pe,wBr),e(Pe,E4),e(E4,KTe),e(KTe,ABr),e(E4,yBr),e(E4,NU),e(NU,LBr),e(E4,xBr),e(Pe,kBr),e(Pe,C4),e(C4,ZTe),e(ZTe,SBr),e(C4,RBr),e(C4,jU),e(jU,BBr),e(C4,PBr),e(Pe,$Br),e(Pe,w4),e(w4,e8e),e(e8e,IBr),e(w4,qBr),e(w4,DU),e(DU,NBr),e(w4,jBr),e(Pe,DBr),e(Pe,A4),e(A4,o8e),e(o8e,GBr),e(A4,OBr),e(A4,GU),e(GU,VBr),e(A4,XBr),e(Pe,zBr),e(Pe,y4),e(y4,r8e),e(r8e,QBr),e(y4,WBr),e(y4,OU),e(OU,HBr),e(y4,UBr),e(Pe,JBr),e(Pe,L4),e(L4,t8e),e(t8e,YBr),e(L4,KBr),e(L4,VU),e(VU,ZBr),e(L4,ePr),e(Pe,oPr),e(Pe,x4),e(x4,a8e),e(a8e,rPr),e(x4,tPr),e(x4,XU),e(XU,aPr),e(x4,nPr),e($o,sPr),e($o,n8e),e(n8e,lPr),e($o,iPr),g(fL,$o,null),b(c,J$e,u),b(c,Sf,u),e(Sf,k4),e(k4,s8e),g(mL,s8e,null),e(Sf,dPr),e(Sf,l8e),e(l8e,cPr),b(c,Y$e,u),b(c,Dr,u),g(gL,Dr,null),e(Dr,fPr),e(Dr,Rf),e(Rf,mPr),e(Rf,zU),e(zU,gPr),e(Rf,hPr),e(Rf,QU),e(QU,pPr),e(Rf,_Pr),e(Dr,uPr),e(Dr,hL),e(hL,bPr),e(hL,i8e),e(i8e,vPr),e(hL,FPr),e(Dr,TPr),e(Dr,Pt),g(pL,Pt,null),e(Pt,MPr),e(Pt,d8e),e(d8e,EPr),e(Pt,CPr),e(Pt,Bf),e(Bf,wPr),e(Bf,c8e),e(c8e,APr),e(Bf,yPr),e(Bf,WU),e(WU,LPr),e(Bf,xPr),e(Pt,kPr),e(Pt,f8e),e(f8e,SPr),e(Pt,RPr),g(_L,Pt,null),e(Dr,BPr),e(Dr,Io),g(uL,Io,null),e(Io,PPr),e(Io,m8e),e(m8e,$Pr),e(Io,IPr),e(Io,Nn),e(Nn,qPr),e(Nn,g8e),e(g8e,NPr),e(Nn,jPr),e(Nn,h8e),e(h8e,DPr),e(Nn,GPr),e(Nn,p8e),e(p8e,OPr),e(Nn,VPr),e(Io,XPr),e(Io,$e),e($e,S4),e(S4,_8e),e(_8e,zPr),e(S4,QPr),e(S4,HU),e(HU,WPr),e(S4,HPr),e($e,UPr),e($e,R4),e(R4,u8e),e(u8e,JPr),e(R4,YPr),e(R4,UU),e(UU,KPr),e(R4,ZPr),e($e,e$r),e($e,B4),e(B4,b8e),e(b8e,o$r),e(B4,r$r),e(B4,JU),e(JU,t$r),e(B4,a$r),e($e,n$r),e($e,P4),e(P4,v8e),e(v8e,s$r),e(P4,l$r),e(P4,YU),e(YU,i$r),e(P4,d$r),e($e,c$r),e($e,$4),e($4,F8e),e(F8e,f$r),e($4,m$r),e($4,KU),e(KU,g$r),e($4,h$r),e($e,p$r),e($e,I4),e(I4,T8e),e(T8e,_$r),e(I4,u$r),e(I4,ZU),e(ZU,b$r),e(I4,v$r),e($e,F$r),e($e,q4),e(q4,M8e),e(M8e,T$r),e(q4,M$r),e(q4,eJ),e(eJ,E$r),e(q4,C$r),e($e,w$r),e($e,N4),e(N4,E8e),e(E8e,A$r),e(N4,y$r),e(N4,oJ),e(oJ,L$r),e(N4,x$r),e(Io,k$r),e(Io,C8e),e(C8e,S$r),e(Io,R$r),g(bL,Io,null),b(c,K$e,u),b(c,Pf,u),e(Pf,j4),e(j4,w8e),g(vL,w8e,null),e(Pf,B$r),e(Pf,A8e),e(A8e,P$r),b(c,Z$e,u),b(c,Gr,u),g(FL,Gr,null),e(Gr,$$r),e(Gr,$f),e($f,I$r),e($f,rJ),e(rJ,q$r),e($f,N$r),e($f,tJ),e(tJ,j$r),e($f,D$r),e(Gr,G$r),e(Gr,TL),e(TL,O$r),e(TL,y8e),e(y8e,V$r),e(TL,X$r),e(Gr,z$r),e(Gr,$t),g(ML,$t,null),e($t,Q$r),e($t,L8e),e(L8e,W$r),e($t,H$r),e($t,If),e(If,U$r),e(If,x8e),e(x8e,J$r),e(If,Y$r),e(If,aJ),e(aJ,K$r),e(If,Z$r),e($t,eIr),e($t,k8e),e(k8e,oIr),e($t,rIr),g(EL,$t,null),e(Gr,tIr),e(Gr,qo),g(CL,qo,null),e(qo,aIr),e(qo,S8e),e(S8e,nIr),e(qo,sIr),e(qo,jn),e(jn,lIr),e(jn,R8e),e(R8e,iIr),e(jn,dIr),e(jn,B8e),e(B8e,cIr),e(jn,fIr),e(jn,P8e),e(P8e,mIr),e(jn,gIr),e(qo,hIr),e(qo,$8e),e($8e,D4),e(D4,I8e),e(I8e,pIr),e(D4,_Ir),e(D4,nJ),e(nJ,uIr),e(D4,bIr),e(qo,vIr),e(qo,q8e),e(q8e,FIr),e(qo,TIr),g(wL,qo,null),b(c,eIe,u),b(c,qf,u),e(qf,G4),e(G4,N8e),g(AL,N8e,null),e(qf,MIr),e(qf,j8e),e(j8e,EIr),b(c,oIe,u),b(c,Or,u),g(yL,Or,null),e(Or,CIr),e(Or,Nf),e(Nf,wIr),e(Nf,sJ),e(sJ,AIr),e(Nf,yIr),e(Nf,lJ),e(lJ,LIr),e(Nf,xIr),e(Or,kIr),e(Or,LL),e(LL,SIr),e(LL,D8e),e(D8e,RIr),e(LL,BIr),e(Or,PIr),e(Or,It),g(xL,It,null),e(It,$Ir),e(It,G8e),e(G8e,IIr),e(It,qIr),e(It,jf),e(jf,NIr),e(jf,O8e),e(O8e,jIr),e(jf,DIr),e(jf,iJ),e(iJ,GIr),e(jf,OIr),e(It,VIr),e(It,V8e),e(V8e,XIr),e(It,zIr),g(kL,It,null),e(Or,QIr),e(Or,No),g(SL,No,null),e(No,WIr),e(No,X8e),e(X8e,HIr),e(No,UIr),e(No,Dn),e(Dn,JIr),e(Dn,z8e),e(z8e,YIr),e(Dn,KIr),e(Dn,Q8e),e(Q8e,ZIr),e(Dn,eqr),e(Dn,W8e),e(W8e,oqr),e(Dn,rqr),e(No,tqr),e(No,RL),e(RL,O4),e(O4,H8e),e(H8e,aqr),e(O4,nqr),e(O4,dJ),e(dJ,sqr),e(O4,lqr),e(RL,iqr),e(RL,V4),e(V4,U8e),e(U8e,dqr),e(V4,cqr),e(V4,cJ),e(cJ,fqr),e(V4,mqr),e(No,gqr),e(No,J8e),e(J8e,hqr),e(No,pqr),g(BL,No,null),b(c,rIe,u),b(c,Df,u),e(Df,X4),e(X4,Y8e),g(PL,Y8e,null),e(Df,_qr),e(Df,K8e),e(K8e,uqr),b(c,tIe,u),b(c,Vr,u),g($L,Vr,null),e(Vr,bqr),e(Vr,Gf),e(Gf,vqr),e(Gf,fJ),e(fJ,Fqr),e(Gf,Tqr),e(Gf,mJ),e(mJ,Mqr),e(Gf,Eqr),e(Vr,Cqr),e(Vr,IL),e(IL,wqr),e(IL,Z8e),e(Z8e,Aqr),e(IL,yqr),e(Vr,Lqr),e(Vr,qt),g(qL,qt,null),e(qt,xqr),e(qt,e7e),e(e7e,kqr),e(qt,Sqr),e(qt,Of),e(Of,Rqr),e(Of,o7e),e(o7e,Bqr),e(Of,Pqr),e(Of,gJ),e(gJ,$qr),e(Of,Iqr),e(qt,qqr),e(qt,r7e),e(r7e,Nqr),e(qt,jqr),g(NL,qt,null),e(Vr,Dqr),e(Vr,jo),g(jL,jo,null),e(jo,Gqr),e(jo,t7e),e(t7e,Oqr),e(jo,Vqr),e(jo,Gn),e(Gn,Xqr),e(Gn,a7e),e(a7e,zqr),e(Gn,Qqr),e(Gn,n7e),e(n7e,Wqr),e(Gn,Hqr),e(Gn,s7e),e(s7e,Uqr),e(Gn,Jqr),e(jo,Yqr),e(jo,l7e),e(l7e,z4),e(z4,i7e),e(i7e,Kqr),e(z4,Zqr),e(z4,hJ),e(hJ,eNr),e(z4,oNr),e(jo,rNr),e(jo,d7e),e(d7e,tNr),e(jo,aNr),g(DL,jo,null),aIe=!0},p(c,[u]){const GL={};u&2&&(GL.$$scope={dirty:u,ctx:c}),Jf.$set(GL);const c7e={};u&2&&(c7e.$$scope={dirty:u,ctx:c}),Uh.$set(c7e);const f7e={};u&2&&(f7e.$$scope={dirty:u,ctx:c}),mp.$set(f7e)},i(c){aIe||(h(_e.$$.fragment,c),h(Da.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(Jf.$$.fragment,c),h(KE.$$.fragment,c),h(ZE.$$.fragment,c),h(r3.$$.fragment,c),h(t3.$$.fragment,c),h(a3.$$.fragment,c),h(n3.$$.fragment,c),h(s3.$$.fragment,c),h(d3.$$.fragment,c),h(c3.$$.fragment,c),h(f3.$$.fragment,c),h(m3.$$.fragment,c),h(g3.$$.fragment,c),h(_3.$$.fragment,c),h(Uh.$$.fragment,c),h(u3.$$.fragment,c),h(b3.$$.fragment,c),h(v3.$$.fragment,c),h(F3.$$.fragment,c),h(E3.$$.fragment,c),h(mp.$$.fragment,c),h(C3.$$.fragment,c),h(w3.$$.fragment,c),h(A3.$$.fragment,c),h(y3.$$.fragment,c),h(x3.$$.fragment,c),h(k3.$$.fragment,c),h(S3.$$.fragment,c),h(R3.$$.fragment,c),h(B3.$$.fragment,c),h(P3.$$.fragment,c),h(I3.$$.fragment,c),h(q3.$$.fragment,c),h(N3.$$.fragment,c),h(j3.$$.fragment,c),h(D3.$$.fragment,c),h(G3.$$.fragment,c),h(V3.$$.fragment,c),h(X3.$$.fragment,c),h(z3.$$.fragment,c),h(Q3.$$.fragment,c),h(W3.$$.fragment,c),h(H3.$$.fragment,c),h(J3.$$.fragment,c),h(Y3.$$.fragment,c),h(K3.$$.fragment,c),h(Z3.$$.fragment,c),h(eC.$$.fragment,c),h(oC.$$.fragment,c),h(tC.$$.fragment,c),h(aC.$$.fragment,c),h(nC.$$.fragment,c),h(sC.$$.fragment,c),h(lC.$$.fragment,c),h(iC.$$.fragment,c),h(cC.$$.fragment,c),h(fC.$$.fragment,c),h(mC.$$.fragment,c),h(gC.$$.fragment,c),h(hC.$$.fragment,c),h(pC.$$.fragment,c),h(uC.$$.fragment,c),h(bC.$$.fragment,c),h(vC.$$.fragment,c),h(FC.$$.fragment,c),h(TC.$$.fragment,c),h(MC.$$.fragment,c),h(CC.$$.fragment,c),h(wC.$$.fragment,c),h(AC.$$.fragment,c),h(yC.$$.fragment,c),h(LC.$$.fragment,c),h(xC.$$.fragment,c),h(SC.$$.fragment,c),h(RC.$$.fragment,c),h(BC.$$.fragment,c),h(PC.$$.fragment,c),h($C.$$.fragment,c),h(IC.$$.fragment,c),h(NC.$$.fragment,c),h(jC.$$.fragment,c),h(DC.$$.fragment,c),h(GC.$$.fragment,c),h(OC.$$.fragment,c),h(VC.$$.fragment,c),h(zC.$$.fragment,c),h(QC.$$.fragment,c),h(WC.$$.fragment,c),h(HC.$$.fragment,c),h(UC.$$.fragment,c),h(JC.$$.fragment,c),h(KC.$$.fragment,c),h(ZC.$$.fragment,c),h(ew.$$.fragment,c),h(ow.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(iw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(pw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(vw.$$.fragment,c),h(Fw.$$.fragment,c),h(Tw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(Cw.$$.fragment,c),h(Aw.$$.fragment,c),h(yw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Sw.$$.fragment,c),h(Bw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(qw.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(Xw.$$.fragment,c),h(zw.$$.fragment,c),h(Qw.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Yw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(aA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(fA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(bA.$$.fragment,c),h(vA.$$.fragment,c),h(FA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(CA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(yA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(SA.$$.fragment,c),h(RA.$$.fragment,c),h(BA.$$.fragment,c),h(PA.$$.fragment,c),h(IA.$$.fragment,c),h(qA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(VA.$$.fragment,c),h(XA.$$.fragment,c),h(zA.$$.fragment,c),h(QA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(e0.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(l0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(f0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(p0.$$.fragment,c),h(_0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(F0.$$.fragment,c),h(T0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(y0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(B0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(I0.$$.fragment,c),h(q0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(X0.$$.fragment,c),h(Q0.$$.fragment,c),h(W0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(J0.$$.fragment,c),h(Y0.$$.fragment,c),h(Z0.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(sy.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(gy.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(Fy.$$.fragment,c),h(Ty.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(Cy.$$.fragment,c),h(wy.$$.fragment,c),h(yy.$$.fragment,c),h(Ly.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Sy.$$.fragment,c),h(Ry.$$.fragment,c),h(Py.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(qy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Gy.$$.fragment,c),h(Oy.$$.fragment,c),h(Vy.$$.fragment,c),h(Xy.$$.fragment,c),h(zy.$$.fragment,c),h(Qy.$$.fragment,c),h(Hy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(tL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(cL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(uL.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(FL.$$.fragment,c),h(ML.$$.fragment,c),h(EL.$$.fragment,c),h(CL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(yL.$$.fragment,c),h(xL.$$.fragment,c),h(kL.$$.fragment,c),h(SL.$$.fragment,c),h(BL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(qL.$$.fragment,c),h(NL.$$.fragment,c),h(jL.$$.fragment,c),h(DL.$$.fragment,c),aIe=!0)},o(c){p(_e.$$.fragment,c),p(Da.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(Jf.$$.fragment,c),p(KE.$$.fragment,c),p(ZE.$$.fragment,c),p(r3.$$.fragment,c),p(t3.$$.fragment,c),p(a3.$$.fragment,c),p(n3.$$.fragment,c),p(s3.$$.fragment,c),p(d3.$$.fragment,c),p(c3.$$.fragment,c),p(f3.$$.fragment,c),p(m3.$$.fragment,c),p(g3.$$.fragment,c),p(_3.$$.fragment,c),p(Uh.$$.fragment,c),p(u3.$$.fragment,c),p(b3.$$.fragment,c),p(v3.$$.fragment,c),p(F3.$$.fragment,c),p(E3.$$.fragment,c),p(mp.$$.fragment,c),p(C3.$$.fragment,c),p(w3.$$.fragment,c),p(A3.$$.fragment,c),p(y3.$$.fragment,c),p(x3.$$.fragment,c),p(k3.$$.fragment,c),p(S3.$$.fragment,c),p(R3.$$.fragment,c),p(B3.$$.fragment,c),p(P3.$$.fragment,c),p(I3.$$.fragment,c),p(q3.$$.fragment,c),p(N3.$$.fragment,c),p(j3.$$.fragment,c),p(D3.$$.fragment,c),p(G3.$$.fragment,c),p(V3.$$.fragment,c),p(X3.$$.fragment,c),p(z3.$$.fragment,c),p(Q3.$$.fragment,c),p(W3.$$.fragment,c),p(H3.$$.fragment,c),p(J3.$$.fragment,c),p(Y3.$$.fragment,c),p(K3.$$.fragment,c),p(Z3.$$.fragment,c),p(eC.$$.fragment,c),p(oC.$$.fragment,c),p(tC.$$.fragment,c),p(aC.$$.fragment,c),p(nC.$$.fragment,c),p(sC.$$.fragment,c),p(lC.$$.fragment,c),p(iC.$$.fragment,c),p(cC.$$.fragment,c),p(fC.$$.fragment,c),p(mC.$$.fragment,c),p(gC.$$.fragment,c),p(hC.$$.fragment,c),p(pC.$$.fragment,c),p(uC.$$.fragment,c),p(bC.$$.fragment,c),p(vC.$$.fragment,c),p(FC.$$.fragment,c),p(TC.$$.fragment,c),p(MC.$$.fragment,c),p(CC.$$.fragment,c),p(wC.$$.fragment,c),p(AC.$$.fragment,c),p(yC.$$.fragment,c),p(LC.$$.fragment,c),p(xC.$$.fragment,c),p(SC.$$.fragment,c),p(RC.$$.fragment,c),p(BC.$$.fragment,c),p(PC.$$.fragment,c),p($C.$$.fragment,c),p(IC.$$.fragment,c),p(NC.$$.fragment,c),p(jC.$$.fragment,c),p(DC.$$.fragment,c),p(GC.$$.fragment,c),p(OC.$$.fragment,c),p(VC.$$.fragment,c),p(zC.$$.fragment,c),p(QC.$$.fragment,c),p(WC.$$.fragment,c),p(HC.$$.fragment,c),p(UC.$$.fragment,c),p(JC.$$.fragment,c),p(KC.$$.fragment,c),p(ZC.$$.fragment,c),p(ew.$$.fragment,c),p(ow.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(iw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(pw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(vw.$$.fragment,c),p(Fw.$$.fragment,c),p(Tw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(Cw.$$.fragment,c),p(Aw.$$.fragment,c),p(yw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Sw.$$.fragment,c),p(Bw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(qw.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(Xw.$$.fragment,c),p(zw.$$.fragment,c),p(Qw.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Yw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(aA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(fA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(bA.$$.fragment,c),p(vA.$$.fragment,c),p(FA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(CA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(yA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(SA.$$.fragment,c),p(RA.$$.fragment,c),p(BA.$$.fragment,c),p(PA.$$.fragment,c),p(IA.$$.fragment,c),p(qA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(VA.$$.fragment,c),p(XA.$$.fragment,c),p(zA.$$.fragment,c),p(QA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(e0.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(l0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(f0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(p0.$$.fragment,c),p(_0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(F0.$$.fragment,c),p(T0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(y0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(B0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(I0.$$.fragment,c),p(q0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(X0.$$.fragment,c),p(Q0.$$.fragment,c),p(W0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(J0.$$.fragment,c),p(Y0.$$.fragment,c),p(Z0.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(sy.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(gy.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(Fy.$$.fragment,c),p(Ty.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(Cy.$$.fragment,c),p(wy.$$.fragment,c),p(yy.$$.fragment,c),p(Ly.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Sy.$$.fragment,c),p(Ry.$$.fragment,c),p(Py.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(qy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Gy.$$.fragment,c),p(Oy.$$.fragment,c),p(Vy.$$.fragment,c),p(Xy.$$.fragment,c),p(zy.$$.fragment,c),p(Qy.$$.fragment,c),p(Hy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(tL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(cL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(uL.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(FL.$$.fragment,c),p(ML.$$.fragment,c),p(EL.$$.fragment,c),p(CL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(yL.$$.fragment,c),p(xL.$$.fragment,c),p(kL.$$.fragment,c),p(SL.$$.fragment,c),p(BL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(qL.$$.fragment,c),p(NL.$$.fragment,c),p(jL.$$.fragment,c),p(DL.$$.fragment,c),aIe=!1},d(c){t(oe),c&&t(co),c&&t(me),_(_e),c&&t(zf),c&&t(fa),c&&t(Se),c&&t(fo),c&&t(Wf),_(Da,c),c&&t(mo),c&&t(ve),c&&t(zo),c&&t(Ga),c&&t(tPe),c&&t(Ki),_(JE),c&&t(aPe),c&&t(Qn),c&&t(nPe),_(YE,c),c&&t(sPe),c&&t(Y9),c&&t(lPe),_(Jf,c),c&&t(iPe),c&&t(Zi),_(KE),c&&t(dPe),c&&t(Qo),_(ZE),_(r3),_(t3),_(a3),c&&t(cPe),c&&t(od),_(n3),c&&t(fPe),c&&t(Wo),_(s3),_(d3),_(c3),_(f3),c&&t(mPe),c&&t(rd),_(m3),c&&t(gPe),c&&t(Ho),_(g3),_(_3),_(Uh),_(u3),_(b3),c&&t(hPe),c&&t(td),_(v3),c&&t(pPe),c&&t(Uo),_(F3),_(E3),_(mp),_(C3),_(w3),c&&t(_Pe),c&&t(nd),_(A3),c&&t(uPe),c&&t(Jo),_(y3),_(x3),_(k3),_(S3),_(R3),c&&t(bPe),c&&t(id),_(B3),c&&t(vPe),c&&t(Yo),_(P3),_(I3),_(q3),_(N3),_(j3),c&&t(FPe),c&&t(fd),_(D3),c&&t(TPe),c&&t(Ko),_(G3),_(V3),_(X3),_(z3),_(Q3),c&&t(MPe),c&&t(hd),_(W3),c&&t(EPe),c&&t(Zo),_(H3),_(J3),_(Y3),_(K3),_(Z3),c&&t(CPe),c&&t(ud),_(eC),c&&t(wPe),c&&t(er),_(oC),_(tC),_(aC),_(nC),_(sC),c&&t(APe),c&&t(Fd),_(lC),c&&t(yPe),c&&t(or),_(iC),_(cC),_(fC),_(mC),_(gC),c&&t(LPe),c&&t(Ed),_(hC),c&&t(xPe),c&&t(rr),_(pC),_(uC),_(bC),_(vC),_(FC),c&&t(kPe),c&&t(Ad),_(TC),c&&t(SPe),c&&t(tr),_(MC),_(CC),_(wC),_(AC),_(yC),c&&t(RPe),c&&t(xd),_(LC),c&&t(BPe),c&&t(ar),_(xC),_(SC),_(RC),_(BC),_(PC),c&&t(PPe),c&&t(Rd),_($C),c&&t($Pe),c&&t(nr),_(IC),_(NC),_(jC),_(DC),_(GC),c&&t(IPe),c&&t($d),_(OC),c&&t(qPe),c&&t(sr),_(VC),_(zC),_(QC),_(WC),_(HC),c&&t(NPe),c&&t(Nd),_(UC),c&&t(jPe),c&&t(lr),_(JC),_(KC),_(ZC),_(ew),_(ow),c&&t(DPe),c&&t(Gd),_(rw),c&&t(GPe),c&&t(ir),_(tw),_(nw),_(sw),_(lw),_(iw),c&&t(OPe),c&&t(Xd),_(dw),c&&t(VPe),c&&t(dr),_(cw),_(mw),_(gw),_(hw),_(pw),c&&t(XPe),c&&t(Wd),_(_w),c&&t(zPe),c&&t(cr),_(uw),_(vw),_(Fw),_(Tw),_(Mw),c&&t(QPe),c&&t(Jd),_(Ew),c&&t(WPe),c&&t(fr),_(Cw),_(Aw),_(yw),_(Lw),_(xw),c&&t(HPe),c&&t(Zd),_(kw),c&&t(UPe),c&&t(mr),_(Sw),_(Bw),_(Pw),_($w),_(qw),c&&t(JPe),c&&t(rc),_(Nw),c&&t(YPe),c&&t(gr),_(jw),_(Gw),_(Ow),_(Vw),_(Xw),c&&t(KPe),c&&t(nc),_(zw),c&&t(ZPe),c&&t(hr),_(Qw),_(Hw),_(Uw),_(Jw),_(Yw),c&&t(e$e),c&&t(dc),_(Kw),c&&t(o$e),c&&t(pr),_(Zw),_(oA),_(rA),_(tA),_(aA),c&&t(r$e),c&&t(mc),_(nA),c&&t(t$e),c&&t(_r),_(sA),_(iA),_(dA),_(cA),_(fA),c&&t(a$e),c&&t(pc),_(mA),c&&t(n$e),c&&t(ur),_(gA),_(pA),_(_A),_(uA),_(bA),c&&t(s$e),c&&t(bc),_(vA),c&&t(l$e),c&&t(br),_(FA),_(MA),_(EA),_(CA),_(wA),c&&t(i$e),c&&t(Tc),_(AA),c&&t(d$e),c&&t(vr),_(yA),_(xA),_(kA),_(SA),_(RA),c&&t(c$e),c&&t(Cc),_(BA),c&&t(f$e),c&&t(Fr),_(PA),_(IA),_(qA),_(NA),_(jA),c&&t(m$e),c&&t(yc),_(DA),c&&t(g$e),c&&t(Tr),_(GA),_(VA),_(XA),_(zA),_(QA),c&&t(h$e),c&&t(kc),_(WA),c&&t(p$e),c&&t(Mr),_(HA),_(JA),_(YA),_(KA),_(e0),c&&t(_$e),c&&t(Bc),_(o0),c&&t(u$e),c&&t(Er),_(r0),_(a0),_(n0),_(s0),_(l0),c&&t(b$e),c&&t(Ic),_(i0),c&&t(v$e),c&&t(Cr),_(d0),_(f0),_(m0),_(g0),_(h0),c&&t(F$e),c&&t(jc),_(p0),c&&t(T$e),c&&t(wr),_(_0),_(b0),_(v0),_(F0),_(T0),c&&t(M$e),c&&t(Oc),_(M0),c&&t(E$e),c&&t(Ar),_(E0),_(w0),_(A0),_(y0),_(L0),c&&t(C$e),c&&t(zc),_(x0),c&&t(w$e),c&&t(yr),_(k0),_(R0),_(B0),_(P0),_($0),c&&t(A$e),c&&t(Hc),_(I0),c&&t(y$e),c&&t(Lr),_(q0),_(j0),_(D0),_(G0),_(O0),c&&t(L$e),c&&t(Yc),_(V0),c&&t(x$e),c&&t(xr),_(X0),_(Q0),_(W0),_(H0),_(U0),c&&t(k$e),c&&t(ef),_(J0),c&&t(S$e),c&&t(kr),_(Y0),_(Z0),_(ey),_(oy),_(ry),c&&t(R$e),c&&t(tf),_(ty),c&&t(B$e),c&&t(Sr),_(ay),_(sy),_(ly),_(iy),_(dy),c&&t(P$e),c&&t(sf),_(cy),c&&t($$e),c&&t(Rr),_(fy),_(gy),_(hy),_(py),_(_y),c&&t(I$e),c&&t(cf),_(uy),c&&t(q$e),c&&t(Br),_(by),_(Fy),_(Ty),_(My),_(Ey),c&&t(N$e),c&&t(gf),_(Cy),c&&t(j$e),c&&t(Pr),_(wy),_(yy),_(Ly),_(xy),_(ky),c&&t(D$e),c&&t(_f),_(Sy),c&&t(G$e),c&&t($r),_(Ry),_(Py),_($y),_(Iy),_(qy),c&&t(O$e),c&&t(vf),_(Ny),c&&t(V$e),c&&t(Ir),_(jy),_(Gy),_(Oy),_(Vy),_(Xy),c&&t(X$e),c&&t(Mf),_(zy),c&&t(z$e),c&&t(qr),_(Qy),_(Hy),_(Uy),_(Jy),_(Yy),c&&t(Q$e),c&&t(wf),_(Ky),c&&t(W$e),c&&t(Nr),_(Zy),_(oL),_(rL),_(tL),_(aL),c&&t(H$e),c&&t(Lf),_(nL),c&&t(U$e),c&&t(jr),_(sL),_(iL),_(dL),_(cL),_(fL),c&&t(J$e),c&&t(Sf),_(mL),c&&t(Y$e),c&&t(Dr),_(gL),_(pL),_(_L),_(uL),_(bL),c&&t(K$e),c&&t(Pf),_(vL),c&&t(Z$e),c&&t(Gr),_(FL),_(ML),_(EL),_(CL),_(wL),c&&t(eIe),c&&t(qf),_(AL),c&&t(oIe),c&&t(Or),_(yL),_(xL),_(kL),_(SL),_(BL),c&&t(rIe),c&&t(Df),_(PL),c&&t(tIe),c&&t(Vr),_($L),_(qL),_(NL),_(jL),_(DL)}}}const V0t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function X0t(Xf){return N0t(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class J0t extends P0t{constructor(oe){super();$0t(this,oe,X0t,O0t,I0t,{})}}export{J0t as default,V0t as metadata};
