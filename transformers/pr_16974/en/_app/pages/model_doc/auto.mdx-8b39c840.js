import{S as tMt,i as aMt,s as nMt,e as a,k as l,w as F,t as o,M as sMt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as lMt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as RRr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function iMt(A){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,dw,rf,Ie,Oe,ai,Tn,cw,Mn,En,fw,ni,Cn,mw,si,tf,ba;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Fo=o(`, make sure its
`),oi=a("code"),of=o("model_type"),Yr=o(" attribute is set to the same key you use when registering the config (here "),ri=a("code"),ti=o('"new-model"'),dw=o(")."),rf=l(),Ie=a("p"),Oe=o("Likewise, if your "),ai=a("code"),Tn=o("NewModel"),cw=o(" is a subclass of "),Mn=a("a"),En=o("PreTrainedModel"),fw=o(`, make sure its
`),ni=a("code"),Cn=o("config_class"),mw=o(` attribute is set to the same class you use when registering the model (here
`),si=a("code"),tf=o("NewModelConfig"),ba=o(")."),this.h()},l(Ve){g=n(Ve,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var Cx=s(p);m=r(Cx,"NewModelConfig"),Cx.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var li=s(d);h=r(li,"PretrainedConfig"),li.forEach(t),Fo=r(Ae,`, make sure its
`),oi=n(Ae,"CODE",{});var wx=s(oi);of=r(wx,"model_type"),wx.forEach(t),Yr=r(Ae," attribute is set to the same key you use when registering the config (here "),ri=n(Ae,"CODE",{});var Ax=s(ri);ti=r(Ax,'"new-model"'),Ax.forEach(t),dw=r(Ae,")."),Ae.forEach(t),rf=i(Ve),Ie=n(Ve,"P",{});var To=s(Ie);Oe=r(To,"Likewise, if your "),ai=n(To,"CODE",{});var va=s(ai);Tn=r(va,"NewModel"),va.forEach(t),cw=r(To," is a subclass of "),Mn=n(To,"A",{href:!0});var yx=s(Mn);En=r(yx,"PreTrainedModel"),yx.forEach(t),fw=r(To,`, make sure its
`),ni=n(To,"CODE",{});var af=s(ni);Cn=r(af,"config_class"),af.forEach(t),mw=r(To,` attribute is set to the same class you use when registering the model (here
`),si=n(To,"CODE",{});var Lx=s(si);tf=r(Lx,"NewModelConfig"),Lx.forEach(t),ba=r(To,")."),To.forEach(t),this.h()},h(){c(Mn,"href","/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel")},m(Ve,Ae){b(Ve,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Fo),e(g,oi),e(oi,of),e(g,Yr),e(g,ri),e(ri,ti),e(g,dw),b(Ve,rf,Ae),b(Ve,Ie,Ae),e(Ie,Oe),e(Ie,ai),e(ai,Tn),e(Ie,cw),e(Ie,Mn),e(Mn,En),e(Ie,fw),e(Ie,ni),e(ni,Cn),e(Ie,mw),e(Ie,si),e(si,tf),e(Ie,ba)},d(Ve){Ve&&t(g),Ve&&t(rf),Ve&&t(Ie)}}}function dMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fMt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function mMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gMt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Fo=s(p);m=r(Fo,"use_auth_token=True"),Fo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function hMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Mt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Mt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZMt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function eEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function oEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function tEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function aEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function sEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _Et(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function vEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function FEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function TEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function MEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function EEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function wEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function AEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function yEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Et(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function REt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function IEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZEt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e5t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o5t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r5t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t5t(A){let g,v,p,m,u,d,h,Fo,oi,of,Yr,ri,ti,dw,rf,Ie,Oe,ai,Tn,cw,Mn,En,fw,ni,Cn,mw,si,tf,ba,Ve,Ae,Cx,li,wx,Ax,To,va,yx,af,Lx,Rqe,yRe,ii,nf,IK,gw,Bqe,qK,Pqe,LRe,wn,Iqe,NK,qqe,Nqe,jK,jqe,Dqe,xRe,hw,$Re,xx,Gqe,kRe,sf,SRe,di,lf,DK,pw,Oqe,GK,Vqe,RRe,Mo,uw,Xqe,_w,zqe,$x,Qqe,Wqe,Hqe,bw,Uqe,OK,Jqe,Yqe,Kqe,Fr,vw,Zqe,VK,eNe,oNe,ci,rNe,XK,tNe,aNe,zK,nNe,sNe,lNe,y,df,QK,iNe,dNe,kx,cNe,fNe,mNe,cf,WK,gNe,hNe,Sx,pNe,uNe,_Ne,ff,HK,bNe,vNe,Rx,FNe,TNe,MNe,mf,UK,ENe,CNe,Bx,wNe,ANe,yNe,gf,JK,LNe,xNe,Px,$Ne,kNe,SNe,hf,YK,RNe,BNe,Ix,PNe,INe,qNe,pf,KK,NNe,jNe,qx,DNe,GNe,ONe,uf,ZK,VNe,XNe,Nx,zNe,QNe,WNe,_f,eZ,HNe,UNe,jx,JNe,YNe,KNe,bf,oZ,ZNe,eje,Dx,oje,rje,tje,vf,rZ,aje,nje,Gx,sje,lje,ije,Ff,tZ,dje,cje,Ox,fje,mje,gje,Tf,aZ,hje,pje,Vx,uje,_je,bje,Mf,nZ,vje,Fje,Xx,Tje,Mje,Eje,Ef,sZ,Cje,wje,zx,Aje,yje,Lje,Cf,lZ,xje,$je,Qx,kje,Sje,Rje,wf,iZ,Bje,Pje,Wx,Ije,qje,Nje,Af,dZ,jje,Dje,Hx,Gje,Oje,Vje,yf,cZ,Xje,zje,Ux,Qje,Wje,Hje,Lf,fZ,Uje,Jje,Jx,Yje,Kje,Zje,xf,mZ,eDe,oDe,Yx,rDe,tDe,aDe,$f,gZ,nDe,sDe,Kx,lDe,iDe,dDe,kf,hZ,cDe,fDe,Zx,mDe,gDe,hDe,Sf,pZ,pDe,uDe,e$,_De,bDe,vDe,Rf,uZ,FDe,TDe,o$,MDe,EDe,CDe,Bf,_Z,wDe,ADe,r$,yDe,LDe,xDe,Pf,bZ,$De,kDe,t$,SDe,RDe,BDe,If,vZ,PDe,IDe,a$,qDe,NDe,jDe,qf,FZ,DDe,GDe,n$,ODe,VDe,XDe,Nf,TZ,zDe,QDe,s$,WDe,HDe,UDe,jf,MZ,JDe,YDe,l$,KDe,ZDe,eGe,Df,EZ,oGe,rGe,i$,tGe,aGe,nGe,Gf,CZ,sGe,lGe,d$,iGe,dGe,cGe,Of,wZ,fGe,mGe,c$,gGe,hGe,pGe,Vf,AZ,uGe,_Ge,f$,bGe,vGe,FGe,Xf,yZ,TGe,MGe,m$,EGe,CGe,wGe,zf,LZ,AGe,yGe,g$,LGe,xGe,$Ge,Qf,xZ,kGe,SGe,h$,RGe,BGe,PGe,Wf,$Z,IGe,qGe,p$,NGe,jGe,DGe,Hf,kZ,GGe,OGe,u$,VGe,XGe,zGe,Uf,SZ,QGe,WGe,_$,HGe,UGe,JGe,Jf,RZ,YGe,KGe,b$,ZGe,eOe,oOe,Yf,BZ,rOe,tOe,v$,aOe,nOe,sOe,Kf,PZ,lOe,iOe,F$,dOe,cOe,fOe,Zf,IZ,mOe,gOe,T$,hOe,pOe,uOe,em,qZ,_Oe,bOe,M$,vOe,FOe,TOe,om,NZ,MOe,EOe,E$,COe,wOe,AOe,rm,jZ,yOe,LOe,C$,xOe,$Oe,kOe,tm,DZ,SOe,ROe,w$,BOe,POe,IOe,am,GZ,qOe,NOe,A$,jOe,DOe,GOe,nm,OZ,OOe,VOe,y$,XOe,zOe,QOe,sm,VZ,WOe,HOe,L$,UOe,JOe,YOe,lm,XZ,KOe,ZOe,x$,eVe,oVe,rVe,im,zZ,tVe,aVe,$$,nVe,sVe,lVe,dm,QZ,iVe,dVe,k$,cVe,fVe,mVe,cm,WZ,gVe,hVe,S$,pVe,uVe,_Ve,fm,HZ,bVe,vVe,R$,FVe,TVe,MVe,mm,UZ,EVe,CVe,B$,wVe,AVe,yVe,gm,JZ,LVe,xVe,P$,$Ve,kVe,SVe,hm,YZ,RVe,BVe,I$,PVe,IVe,qVe,pm,KZ,NVe,jVe,q$,DVe,GVe,OVe,um,ZZ,VVe,XVe,N$,zVe,QVe,WVe,_m,eee,HVe,UVe,j$,JVe,YVe,KVe,bm,oee,ZVe,eXe,D$,oXe,rXe,tXe,vm,ree,aXe,nXe,G$,sXe,lXe,iXe,Fm,tee,dXe,cXe,O$,fXe,mXe,gXe,Tm,aee,hXe,pXe,V$,uXe,_Xe,bXe,Mm,nee,vXe,FXe,X$,TXe,MXe,EXe,Em,see,CXe,wXe,z$,AXe,yXe,LXe,Cm,lee,xXe,$Xe,Q$,kXe,SXe,RXe,wm,iee,BXe,PXe,W$,IXe,qXe,NXe,Am,dee,jXe,DXe,H$,GXe,OXe,VXe,ym,cee,XXe,zXe,U$,QXe,WXe,HXe,Lm,fee,UXe,JXe,J$,YXe,KXe,ZXe,xm,mee,eze,oze,Y$,rze,tze,aze,$m,gee,nze,sze,K$,lze,ize,dze,km,hee,cze,fze,Z$,mze,gze,hze,Sm,pee,pze,uze,ek,_ze,bze,vze,Rm,uee,Fze,Tze,ok,Mze,Eze,Cze,Bm,_ee,wze,Aze,rk,yze,Lze,xze,Pm,bee,$ze,kze,tk,Sze,Rze,Bze,Im,vee,Pze,Ize,ak,qze,Nze,jze,qm,Fee,Dze,Gze,nk,Oze,Vze,Xze,Nm,Tee,zze,Qze,sk,Wze,Hze,Uze,jm,Mee,Jze,Yze,lk,Kze,Zze,eQe,Dm,Eee,oQe,rQe,ik,tQe,aQe,nQe,Gm,Cee,sQe,lQe,dk,iQe,dQe,cQe,Om,wee,fQe,mQe,ck,gQe,hQe,pQe,Vm,Aee,uQe,_Qe,fk,bQe,vQe,FQe,Xm,yee,TQe,MQe,mk,EQe,CQe,wQe,zm,Lee,AQe,yQe,gk,LQe,xQe,$Qe,Qm,xee,kQe,SQe,hk,RQe,BQe,PQe,Wm,$ee,IQe,qQe,pk,NQe,jQe,DQe,Hm,kee,GQe,OQe,uk,VQe,XQe,zQe,Um,See,QQe,WQe,_k,HQe,UQe,JQe,Jm,Ree,YQe,KQe,bk,ZQe,eWe,oWe,Ym,Bee,rWe,tWe,vk,aWe,nWe,sWe,Km,Pee,lWe,iWe,Fk,dWe,cWe,fWe,Zm,Iee,mWe,gWe,Tk,hWe,pWe,uWe,eg,qee,_We,bWe,Mk,vWe,FWe,TWe,og,Nee,MWe,EWe,Ek,CWe,wWe,AWe,rg,jee,yWe,LWe,Ck,xWe,$We,kWe,tg,SWe,ag,Fw,RWe,Dee,BWe,BRe,fi,ng,Gee,Tw,PWe,Oee,IWe,PRe,Eo,Mw,qWe,Ew,NWe,wk,jWe,DWe,GWe,Cw,OWe,Vee,VWe,XWe,zWe,Tr,ww,QWe,Xee,WWe,HWe,Fa,UWe,zee,JWe,YWe,Qee,KWe,ZWe,Wee,eHe,oHe,rHe,k,An,Hee,tHe,aHe,Ak,nHe,sHe,yk,lHe,iHe,dHe,yn,Uee,cHe,fHe,Lk,mHe,gHe,xk,hHe,pHe,uHe,Ln,Jee,_He,bHe,$k,vHe,FHe,kk,THe,MHe,EHe,sg,Yee,CHe,wHe,Sk,AHe,yHe,LHe,xn,Kee,xHe,$He,Rk,kHe,SHe,Bk,RHe,BHe,PHe,lg,Zee,IHe,qHe,Pk,NHe,jHe,DHe,ig,eoe,GHe,OHe,Ik,VHe,XHe,zHe,dg,ooe,QHe,WHe,qk,HHe,UHe,JHe,$n,roe,YHe,KHe,Nk,ZHe,eUe,jk,oUe,rUe,tUe,kn,toe,aUe,nUe,Dk,sUe,lUe,Gk,iUe,dUe,cUe,Sn,aoe,fUe,mUe,Ok,gUe,hUe,Vk,pUe,uUe,_Ue,cg,noe,bUe,vUe,Xk,FUe,TUe,MUe,fg,soe,EUe,CUe,zk,wUe,AUe,yUe,Rn,loe,LUe,xUe,Qk,$Ue,kUe,Wk,SUe,RUe,BUe,mg,ioe,PUe,IUe,Hk,qUe,NUe,jUe,Bn,doe,DUe,GUe,Uk,OUe,VUe,Jk,XUe,zUe,QUe,Pn,coe,WUe,HUe,Yk,UUe,JUe,Kk,YUe,KUe,ZUe,In,foe,eJe,oJe,Zk,rJe,tJe,moe,aJe,nJe,sJe,gg,goe,lJe,iJe,eS,dJe,cJe,fJe,qn,hoe,mJe,gJe,oS,hJe,pJe,rS,uJe,_Je,bJe,Nn,poe,vJe,FJe,tS,TJe,MJe,aS,EJe,CJe,wJe,jn,uoe,AJe,yJe,nS,LJe,xJe,sS,$Je,kJe,SJe,Dn,_oe,RJe,BJe,lS,PJe,IJe,iS,qJe,NJe,jJe,Gn,boe,DJe,GJe,dS,OJe,VJe,cS,XJe,zJe,QJe,On,voe,WJe,HJe,fS,UJe,JJe,mS,YJe,KJe,ZJe,hg,Foe,eYe,oYe,gS,rYe,tYe,aYe,Vn,Toe,nYe,sYe,hS,lYe,iYe,pS,dYe,cYe,fYe,pg,Moe,mYe,gYe,uS,hYe,pYe,uYe,Xn,Eoe,_Ye,bYe,_S,vYe,FYe,bS,TYe,MYe,EYe,zn,Coe,CYe,wYe,vS,AYe,yYe,FS,LYe,xYe,$Ye,Qn,woe,kYe,SYe,TS,RYe,BYe,MS,PYe,IYe,qYe,Wn,Aoe,NYe,jYe,ES,DYe,GYe,CS,OYe,VYe,XYe,Hn,yoe,zYe,QYe,wS,WYe,HYe,AS,UYe,JYe,YYe,ug,Loe,KYe,ZYe,yS,eKe,oKe,rKe,Un,xoe,tKe,aKe,LS,nKe,sKe,xS,lKe,iKe,dKe,Jn,$oe,cKe,fKe,$S,mKe,gKe,kS,hKe,pKe,uKe,Yn,koe,_Ke,bKe,SS,vKe,FKe,RS,TKe,MKe,EKe,Kn,Soe,CKe,wKe,BS,AKe,yKe,PS,LKe,xKe,$Ke,Zn,Roe,kKe,SKe,IS,RKe,BKe,qS,PKe,IKe,qKe,es,Boe,NKe,jKe,NS,DKe,GKe,jS,OKe,VKe,XKe,_g,Poe,zKe,QKe,DS,WKe,HKe,UKe,os,Ioe,JKe,YKe,GS,KKe,ZKe,OS,eZe,oZe,rZe,bg,qoe,tZe,aZe,VS,nZe,sZe,lZe,vg,Noe,iZe,dZe,XS,cZe,fZe,mZe,rs,joe,gZe,hZe,zS,pZe,uZe,QS,_Ze,bZe,vZe,ts,Doe,FZe,TZe,WS,MZe,EZe,HS,CZe,wZe,AZe,as,Goe,yZe,LZe,US,xZe,$Ze,JS,kZe,SZe,RZe,Fg,Ooe,BZe,PZe,YS,IZe,qZe,NZe,ns,Voe,jZe,DZe,KS,GZe,OZe,ZS,VZe,XZe,zZe,ss,Xoe,QZe,WZe,eR,HZe,UZe,oR,JZe,YZe,KZe,ls,zoe,ZZe,eeo,rR,oeo,reo,tR,teo,aeo,neo,is,Qoe,seo,leo,aR,ieo,deo,nR,ceo,feo,meo,ds,Woe,geo,heo,sR,peo,ueo,lR,_eo,beo,veo,cs,Hoe,Feo,Teo,iR,Meo,Eeo,dR,Ceo,weo,Aeo,Tg,Uoe,yeo,Leo,cR,xeo,$eo,keo,Mg,Joe,Seo,Reo,fR,Beo,Peo,Ieo,Eg,Yoe,qeo,Neo,mR,jeo,Deo,Geo,Cg,Koe,Oeo,Veo,gR,Xeo,zeo,Qeo,fs,Zoe,Weo,Heo,hR,Ueo,Jeo,pR,Yeo,Keo,Zeo,wg,ere,eoo,ooo,uR,roo,too,aoo,ms,ore,noo,soo,_R,loo,ioo,bR,doo,coo,foo,gs,rre,moo,goo,vR,hoo,poo,FR,uoo,_oo,boo,hs,tre,voo,Foo,TR,Too,Moo,MR,Eoo,Coo,woo,ps,are,Aoo,yoo,ER,Loo,xoo,CR,$oo,koo,Soo,us,nre,Roo,Boo,wR,Poo,Ioo,AR,qoo,Noo,joo,_s,sre,Doo,Goo,yR,Ooo,Voo,LR,Xoo,zoo,Qoo,Ag,lre,Woo,Hoo,xR,Uoo,Joo,Yoo,yg,ire,Koo,Zoo,$R,ero,oro,rro,bs,dre,tro,aro,kR,nro,sro,SR,lro,iro,dro,vs,cre,cro,fro,RR,mro,gro,BR,hro,pro,uro,Fs,fre,_ro,bro,PR,vro,Fro,IR,Tro,Mro,Ero,Lg,mre,Cro,wro,qR,Aro,yro,Lro,xg,gre,xro,$ro,NR,kro,Sro,Rro,$g,hre,Bro,Pro,jR,Iro,qro,Nro,Ts,pre,jro,Dro,DR,Gro,Oro,GR,Vro,Xro,zro,kg,ure,Qro,Wro,OR,Hro,Uro,Jro,Sg,_re,Yro,Kro,VR,Zro,eto,oto,Ms,bre,rto,tto,XR,ato,nto,zR,sto,lto,ito,Rg,vre,dto,cto,QR,fto,mto,gto,Bg,Fre,hto,pto,WR,uto,_to,bto,Es,Tre,vto,Fto,HR,Tto,Mto,UR,Eto,Cto,wto,Cs,Mre,Ato,yto,JR,Lto,xto,YR,$to,kto,Sto,ws,Ere,Rto,Bto,KR,Pto,Ito,ZR,qto,Nto,jto,As,Cre,Dto,Gto,eB,Oto,Vto,oB,Xto,zto,Qto,Pg,Wto,Ig,Aw,Hto,wre,Uto,IRe,mi,qg,Are,yw,Jto,yre,Yto,qRe,Co,Lw,Kto,xw,Zto,rB,eao,oao,rao,$w,tao,Lre,aao,nao,sao,Xe,kw,lao,xre,iao,dao,Ta,cao,$re,fao,mao,kre,gao,hao,Sre,pao,uao,_ao,ae,Ng,Rre,bao,vao,tB,Fao,Tao,Mao,jg,Bre,Eao,Cao,aB,wao,Aao,yao,Dg,Pre,Lao,xao,nB,$ao,kao,Sao,Gg,Ire,Rao,Bao,sB,Pao,Iao,qao,Og,qre,Nao,jao,lB,Dao,Gao,Oao,Vg,Nre,Vao,Xao,iB,zao,Qao,Wao,Xg,jre,Hao,Uao,dB,Jao,Yao,Kao,zg,Dre,Zao,eno,cB,ono,rno,tno,Qg,Gre,ano,nno,fB,sno,lno,ino,Wg,Ore,dno,cno,mB,fno,mno,gno,Hg,Vre,hno,pno,gB,uno,_no,bno,Ug,Xre,vno,Fno,hB,Tno,Mno,Eno,Jg,zre,Cno,wno,pB,Ano,yno,Lno,Yg,Qre,xno,$no,uB,kno,Sno,Rno,Kg,Wre,Bno,Pno,_B,Ino,qno,Nno,Zg,Hre,jno,Dno,bB,Gno,Ono,Vno,eh,Ure,Xno,zno,vB,Qno,Wno,Hno,oh,Jre,Uno,Jno,FB,Yno,Kno,Zno,rh,Yre,eso,oso,TB,rso,tso,aso,th,Kre,nso,sso,MB,lso,iso,dso,ah,Zre,cso,fso,EB,mso,gso,hso,nh,ete,pso,uso,CB,_so,bso,vso,sh,ote,Fso,Tso,wB,Mso,Eso,Cso,lh,wso,ih,Aso,dh,Sw,yso,rte,Lso,NRe,gi,ch,tte,Rw,xso,ate,$so,jRe,wo,Bw,kso,Pw,Sso,AB,Rso,Bso,Pso,Iw,Iso,nte,qso,Nso,jso,ze,qw,Dso,ste,Gso,Oso,hi,Vso,lte,Xso,zso,ite,Qso,Wso,Hso,be,fh,dte,Uso,Jso,yB,Yso,Kso,Zso,mh,cte,elo,olo,LB,rlo,tlo,alo,gh,fte,nlo,slo,xB,llo,ilo,dlo,hh,mte,clo,flo,$B,mlo,glo,hlo,ph,gte,plo,ulo,kB,_lo,blo,vlo,uh,hte,Flo,Tlo,SB,Mlo,Elo,Clo,_h,pte,wlo,Alo,RB,ylo,Llo,xlo,bh,ute,$lo,klo,BB,Slo,Rlo,Blo,vh,_te,Plo,Ilo,PB,qlo,Nlo,jlo,Fh,bte,Dlo,Glo,IB,Olo,Vlo,Xlo,Th,vte,zlo,Qlo,qB,Wlo,Hlo,Ulo,Mh,Fte,Jlo,Ylo,NB,Klo,Zlo,eio,Eh,Tte,oio,rio,jB,tio,aio,nio,Ch,Mte,sio,lio,DB,iio,dio,cio,wh,fio,Ah,mio,yh,Nw,gio,Ete,hio,DRe,pi,Lh,Cte,jw,pio,wte,uio,GRe,Ao,Dw,_io,ui,bio,GB,vio,Fio,OB,Tio,Mio,Eio,Gw,Cio,Ate,wio,Aio,yio,Kr,Ow,Lio,yte,xio,$io,_i,kio,Lte,Sio,Rio,VB,Bio,Pio,Iio,xh,qio,Qe,Vw,Nio,xte,jio,Dio,Ma,Gio,$te,Oio,Vio,kte,Xio,zio,Ste,Qio,Wio,Hio,x,$h,Rte,Uio,Jio,XB,Yio,Kio,Zio,kh,Bte,edo,odo,zB,rdo,tdo,ado,Sh,Pte,ndo,sdo,QB,ldo,ido,ddo,Rh,Ite,cdo,fdo,WB,mdo,gdo,hdo,Bh,qte,pdo,udo,HB,_do,bdo,vdo,Ph,Nte,Fdo,Tdo,UB,Mdo,Edo,Cdo,Ih,jte,wdo,Ado,JB,ydo,Ldo,xdo,qh,Dte,$do,kdo,YB,Sdo,Rdo,Bdo,Nh,Gte,Pdo,Ido,KB,qdo,Ndo,jdo,jh,Ote,Ddo,Gdo,ZB,Odo,Vdo,Xdo,Dh,Vte,zdo,Qdo,eP,Wdo,Hdo,Udo,Gh,Xte,Jdo,Ydo,oP,Kdo,Zdo,eco,Oh,zte,oco,rco,rP,tco,aco,nco,Vh,Qte,sco,lco,tP,ico,dco,cco,Xh,Wte,fco,mco,aP,gco,hco,pco,zh,Hte,uco,_co,nP,bco,vco,Fco,Qh,Ute,Tco,Mco,sP,Eco,Cco,wco,Wh,Jte,Aco,yco,lP,Lco,xco,$co,Hh,Yte,kco,Sco,iP,Rco,Bco,Pco,Uh,Kte,Ico,qco,dP,Nco,jco,Dco,Jh,Zte,Gco,Oco,cP,Vco,Xco,zco,Yh,eae,Qco,Wco,fP,Hco,Uco,Jco,Kh,oae,Yco,Kco,mP,Zco,efo,ofo,Zh,rae,rfo,tfo,gP,afo,nfo,sfo,ep,tae,lfo,ifo,hP,dfo,cfo,ffo,op,aae,mfo,gfo,pP,hfo,pfo,ufo,rp,nae,_fo,bfo,uP,vfo,Ffo,Tfo,tp,sae,Mfo,Efo,_P,Cfo,wfo,Afo,ap,lae,yfo,Lfo,bP,xfo,$fo,kfo,np,iae,Sfo,Rfo,vP,Bfo,Pfo,Ifo,ys,dae,qfo,Nfo,FP,jfo,Dfo,TP,Gfo,Ofo,Vfo,sp,cae,Xfo,zfo,MP,Qfo,Wfo,Hfo,lp,fae,Ufo,Jfo,EP,Yfo,Kfo,Zfo,ip,mae,emo,omo,CP,rmo,tmo,amo,dp,gae,nmo,smo,wP,lmo,imo,dmo,cp,hae,cmo,fmo,AP,mmo,gmo,hmo,fp,pae,pmo,umo,yP,_mo,bmo,vmo,mp,uae,Fmo,Tmo,LP,Mmo,Emo,Cmo,gp,_ae,wmo,Amo,xP,ymo,Lmo,xmo,hp,bae,$mo,kmo,$P,Smo,Rmo,Bmo,pp,vae,Pmo,Imo,kP,qmo,Nmo,jmo,up,Fae,Dmo,Gmo,SP,Omo,Vmo,Xmo,_p,Tae,zmo,Qmo,RP,Wmo,Hmo,Umo,bp,Mae,Jmo,Ymo,BP,Kmo,Zmo,ego,vp,Eae,ogo,rgo,PP,tgo,ago,ngo,Fp,Cae,sgo,lgo,IP,igo,dgo,cgo,Tp,wae,fgo,mgo,qP,ggo,hgo,pgo,Mp,Aae,ugo,_go,NP,bgo,vgo,Fgo,Ep,yae,Tgo,Mgo,jP,Ego,Cgo,wgo,Cp,Lae,Ago,ygo,DP,Lgo,xgo,$go,wp,xae,kgo,Sgo,GP,Rgo,Bgo,Pgo,Ap,$ae,Igo,qgo,OP,Ngo,jgo,Dgo,yp,kae,Ggo,Ogo,VP,Vgo,Xgo,zgo,Lp,Sae,Qgo,Wgo,XP,Hgo,Ugo,Jgo,xp,Rae,Ygo,Kgo,zP,Zgo,eho,oho,$p,Bae,rho,tho,QP,aho,nho,sho,kp,Pae,lho,iho,WP,dho,cho,fho,Sp,Iae,mho,gho,HP,hho,pho,uho,Rp,qae,_ho,bho,UP,vho,Fho,Tho,Bp,Nae,Mho,Eho,JP,Cho,who,Aho,Pp,jae,yho,Lho,YP,xho,$ho,kho,Ip,Dae,Sho,Rho,KP,Bho,Pho,Iho,qp,Gae,qho,Nho,ZP,jho,Dho,Gho,Np,Oae,Oho,Vho,eI,Xho,zho,Qho,jp,Vae,Who,Hho,oI,Uho,Jho,Yho,Dp,Xae,Kho,Zho,rI,epo,opo,rpo,Gp,zae,tpo,apo,tI,npo,spo,lpo,Op,Qae,ipo,dpo,aI,cpo,fpo,mpo,Vp,Wae,gpo,hpo,nI,ppo,upo,_po,Xp,Hae,bpo,vpo,sI,Fpo,Tpo,Mpo,zp,Uae,Epo,Cpo,lI,wpo,Apo,ypo,Qp,Jae,Lpo,xpo,iI,$po,kpo,Spo,Wp,Yae,Rpo,Bpo,dI,Ppo,Ipo,qpo,Hp,Kae,Npo,jpo,cI,Dpo,Gpo,Opo,Up,Zae,Vpo,Xpo,fI,zpo,Qpo,Wpo,Jp,ene,Hpo,Upo,mI,Jpo,Ypo,Kpo,Yp,one,Zpo,euo,gI,ouo,ruo,tuo,Kp,rne,auo,nuo,hI,suo,luo,iuo,Zp,tne,duo,cuo,pI,fuo,muo,guo,eu,ane,huo,puo,uI,uuo,_uo,buo,ou,nne,vuo,Fuo,_I,Tuo,Muo,Euo,ru,sne,Cuo,wuo,bI,Auo,yuo,Luo,tu,lne,xuo,$uo,vI,kuo,Suo,Ruo,au,ine,Buo,Puo,FI,Iuo,quo,Nuo,nu,dne,juo,Duo,TI,Guo,Ouo,Vuo,su,cne,Xuo,zuo,MI,Quo,Wuo,Huo,lu,fne,Uuo,Juo,EI,Yuo,Kuo,Zuo,iu,mne,e_o,o_o,CI,r_o,t_o,a_o,du,gne,n_o,s_o,wI,l_o,i_o,d_o,cu,hne,c_o,f_o,AI,m_o,g_o,h_o,fu,pne,p_o,u_o,yI,__o,b_o,v_o,mu,une,F_o,T_o,LI,M_o,E_o,C_o,gu,_ne,w_o,A_o,xI,y_o,L_o,x_o,hu,bne,$_o,k_o,$I,S_o,R_o,B_o,pu,P_o,vne,I_o,q_o,Fne,N_o,j_o,uu,ORe,bi,_u,Tne,Xw,D_o,Mne,G_o,VRe,yo,zw,O_o,vi,V_o,kI,X_o,z_o,SI,Q_o,W_o,H_o,Qw,U_o,Ene,J_o,Y_o,K_o,Zr,Ww,Z_o,Cne,e1o,o1o,Fi,r1o,wne,t1o,a1o,RI,n1o,s1o,l1o,bu,i1o,We,Hw,d1o,Ane,c1o,f1o,Ea,m1o,yne,g1o,h1o,Lne,p1o,u1o,xne,_1o,b1o,v1o,G,vu,$ne,F1o,T1o,BI,M1o,E1o,C1o,Fu,kne,w1o,A1o,PI,y1o,L1o,x1o,Tu,Sne,$1o,k1o,II,S1o,R1o,B1o,Mu,Rne,P1o,I1o,qI,q1o,N1o,j1o,Eu,Bne,D1o,G1o,NI,O1o,V1o,X1o,Cu,Pne,z1o,Q1o,jI,W1o,H1o,U1o,wu,Ine,J1o,Y1o,DI,K1o,Z1o,ebo,Au,qne,obo,rbo,GI,tbo,abo,nbo,yu,Nne,sbo,lbo,OI,ibo,dbo,cbo,Lu,jne,fbo,mbo,VI,gbo,hbo,pbo,xu,Dne,ubo,_bo,XI,bbo,vbo,Fbo,$u,Gne,Tbo,Mbo,zI,Ebo,Cbo,wbo,ku,One,Abo,ybo,QI,Lbo,xbo,$bo,Su,Vne,kbo,Sbo,WI,Rbo,Bbo,Pbo,Ru,Xne,Ibo,qbo,HI,Nbo,jbo,Dbo,Bu,zne,Gbo,Obo,UI,Vbo,Xbo,zbo,Pu,Qne,Qbo,Wbo,JI,Hbo,Ubo,Jbo,Iu,Wne,Ybo,Kbo,YI,Zbo,e4o,o4o,qu,Hne,r4o,t4o,KI,a4o,n4o,s4o,Nu,Une,l4o,i4o,ZI,d4o,c4o,f4o,ju,Jne,m4o,g4o,eq,h4o,p4o,u4o,Du,Yne,_4o,b4o,oq,v4o,F4o,T4o,Gu,Kne,M4o,E4o,rq,C4o,w4o,A4o,Ou,Zne,y4o,L4o,tq,x4o,$4o,k4o,Vu,ese,S4o,R4o,aq,B4o,P4o,I4o,Xu,ose,q4o,N4o,nq,j4o,D4o,G4o,zu,rse,O4o,V4o,sq,X4o,z4o,Q4o,Qu,tse,W4o,H4o,lq,U4o,J4o,Y4o,Wu,ase,K4o,Z4o,iq,e2o,o2o,r2o,Hu,nse,t2o,a2o,dq,n2o,s2o,l2o,Uu,sse,i2o,d2o,cq,c2o,f2o,m2o,Ju,lse,g2o,h2o,fq,p2o,u2o,_2o,Yu,ise,b2o,v2o,mq,F2o,T2o,M2o,Ku,dse,E2o,C2o,gq,w2o,A2o,y2o,Zu,cse,L2o,x2o,hq,$2o,k2o,S2o,e_,fse,R2o,B2o,pq,P2o,I2o,q2o,o_,mse,N2o,j2o,uq,D2o,G2o,O2o,r_,gse,V2o,X2o,_q,z2o,Q2o,W2o,t_,hse,H2o,U2o,bq,J2o,Y2o,K2o,a_,Z2o,pse,evo,ovo,use,rvo,tvo,n_,XRe,Ti,s_,_se,Uw,avo,bse,nvo,zRe,Lo,Jw,svo,Mi,lvo,vq,ivo,dvo,Fq,cvo,fvo,mvo,Yw,gvo,vse,hvo,pvo,uvo,et,Kw,_vo,Fse,bvo,vvo,Ei,Fvo,Tse,Tvo,Mvo,Tq,Evo,Cvo,wvo,l_,Avo,He,Zw,yvo,Mse,Lvo,xvo,Ca,$vo,Ese,kvo,Svo,Cse,Rvo,Bvo,wse,Pvo,Ivo,qvo,z,i_,Ase,Nvo,jvo,Mq,Dvo,Gvo,Ovo,d_,yse,Vvo,Xvo,Eq,zvo,Qvo,Wvo,c_,Lse,Hvo,Uvo,Cq,Jvo,Yvo,Kvo,f_,xse,Zvo,eFo,wq,oFo,rFo,tFo,m_,$se,aFo,nFo,Aq,sFo,lFo,iFo,g_,kse,dFo,cFo,yq,fFo,mFo,gFo,h_,Sse,hFo,pFo,Lq,uFo,_Fo,bFo,p_,Rse,vFo,FFo,xq,TFo,MFo,EFo,u_,Bse,CFo,wFo,$q,AFo,yFo,LFo,__,Pse,xFo,$Fo,kq,kFo,SFo,RFo,b_,Ise,BFo,PFo,Sq,IFo,qFo,NFo,v_,qse,jFo,DFo,Rq,GFo,OFo,VFo,F_,Nse,XFo,zFo,Bq,QFo,WFo,HFo,T_,jse,UFo,JFo,Pq,YFo,KFo,ZFo,M_,Dse,e6o,o6o,Iq,r6o,t6o,a6o,E_,Gse,n6o,s6o,qq,l6o,i6o,d6o,C_,Ose,c6o,f6o,Nq,m6o,g6o,h6o,w_,Vse,p6o,u6o,jq,_6o,b6o,v6o,A_,Xse,F6o,T6o,Dq,M6o,E6o,C6o,y_,zse,w6o,A6o,Gq,y6o,L6o,x6o,L_,Qse,$6o,k6o,Oq,S6o,R6o,B6o,x_,Wse,P6o,I6o,Vq,q6o,N6o,j6o,$_,Hse,D6o,G6o,Xq,O6o,V6o,X6o,k_,Use,z6o,Q6o,zq,W6o,H6o,U6o,S_,Jse,J6o,Y6o,Qq,K6o,Z6o,eTo,R_,Yse,oTo,rTo,Wq,tTo,aTo,nTo,B_,Kse,sTo,lTo,Hq,iTo,dTo,cTo,P_,Zse,fTo,mTo,Uq,gTo,hTo,pTo,I_,ele,uTo,_To,Jq,bTo,vTo,FTo,q_,ole,TTo,MTo,Yq,ETo,CTo,wTo,N_,rle,ATo,yTo,Kq,LTo,xTo,$To,j_,tle,kTo,STo,Zq,RTo,BTo,PTo,D_,ale,ITo,qTo,eN,NTo,jTo,DTo,G_,nle,GTo,OTo,oN,VTo,XTo,zTo,O_,sle,QTo,WTo,rN,HTo,UTo,JTo,V_,YTo,lle,KTo,ZTo,ile,e7o,o7o,X_,QRe,Ci,z_,dle,eA,r7o,cle,t7o,WRe,xo,oA,a7o,wi,n7o,tN,s7o,l7o,aN,i7o,d7o,c7o,rA,f7o,fle,m7o,g7o,h7o,ot,tA,p7o,mle,u7o,_7o,Ai,b7o,gle,v7o,F7o,nN,T7o,M7o,E7o,Q_,C7o,Ue,aA,w7o,hle,A7o,y7o,wa,L7o,ple,x7o,$7o,ule,k7o,S7o,_le,R7o,B7o,P7o,Q,W_,ble,I7o,q7o,sN,N7o,j7o,D7o,H_,vle,G7o,O7o,lN,V7o,X7o,z7o,U_,Fle,Q7o,W7o,iN,H7o,U7o,J7o,J_,Tle,Y7o,K7o,dN,Z7o,e9o,o9o,Y_,Mle,r9o,t9o,cN,a9o,n9o,s9o,K_,Ele,l9o,i9o,fN,d9o,c9o,f9o,Z_,Cle,m9o,g9o,mN,h9o,p9o,u9o,e1,wle,_9o,b9o,gN,v9o,F9o,T9o,o1,Ale,M9o,E9o,hN,C9o,w9o,A9o,r1,yle,y9o,L9o,pN,x9o,$9o,k9o,t1,Lle,S9o,R9o,uN,B9o,P9o,I9o,a1,xle,q9o,N9o,_N,j9o,D9o,G9o,n1,$le,O9o,V9o,bN,X9o,z9o,Q9o,s1,kle,W9o,H9o,vN,U9o,J9o,Y9o,l1,Sle,K9o,Z9o,FN,eMo,oMo,rMo,i1,Rle,tMo,aMo,TN,nMo,sMo,lMo,d1,Ble,iMo,dMo,MN,cMo,fMo,mMo,c1,Ple,gMo,hMo,EN,pMo,uMo,_Mo,f1,Ile,bMo,vMo,CN,FMo,TMo,MMo,m1,qle,EMo,CMo,wN,wMo,AMo,yMo,g1,Nle,LMo,xMo,AN,$Mo,kMo,SMo,h1,jle,RMo,BMo,yN,PMo,IMo,qMo,p1,Dle,NMo,jMo,LN,DMo,GMo,OMo,u1,Gle,VMo,XMo,xN,zMo,QMo,WMo,_1,Ole,HMo,UMo,$N,JMo,YMo,KMo,b1,Vle,ZMo,eEo,kN,oEo,rEo,tEo,v1,Xle,aEo,nEo,SN,sEo,lEo,iEo,F1,zle,dEo,cEo,RN,fEo,mEo,gEo,T1,Qle,hEo,pEo,BN,uEo,_Eo,bEo,M1,Wle,vEo,FEo,PN,TEo,MEo,EEo,E1,Hle,CEo,wEo,Ule,AEo,yEo,LEo,C1,Jle,xEo,$Eo,IN,kEo,SEo,REo,w1,Yle,BEo,PEo,qN,IEo,qEo,NEo,A1,Kle,jEo,DEo,NN,GEo,OEo,VEo,y1,Zle,XEo,zEo,jN,QEo,WEo,HEo,L1,UEo,eie,JEo,YEo,oie,KEo,ZEo,x1,HRe,yi,$1,rie,nA,e5o,tie,o5o,URe,$o,sA,r5o,Li,t5o,DN,a5o,n5o,GN,s5o,l5o,i5o,lA,d5o,aie,c5o,f5o,m5o,rt,iA,g5o,nie,h5o,p5o,xi,u5o,sie,_5o,b5o,ON,v5o,F5o,T5o,k1,M5o,Je,dA,E5o,lie,C5o,w5o,Aa,A5o,iie,y5o,L5o,die,x5o,$5o,cie,k5o,S5o,R5o,he,S1,fie,B5o,P5o,VN,I5o,q5o,N5o,R1,mie,j5o,D5o,XN,G5o,O5o,V5o,B1,gie,X5o,z5o,zN,Q5o,W5o,H5o,P1,hie,U5o,J5o,QN,Y5o,K5o,Z5o,I1,pie,eCo,oCo,WN,rCo,tCo,aCo,q1,uie,nCo,sCo,HN,lCo,iCo,dCo,N1,_ie,cCo,fCo,UN,mCo,gCo,hCo,j1,bie,pCo,uCo,JN,_Co,bCo,vCo,D1,vie,FCo,TCo,YN,MCo,ECo,CCo,G1,Fie,wCo,ACo,KN,yCo,LCo,xCo,O1,Tie,$Co,kCo,ZN,SCo,RCo,BCo,V1,Mie,PCo,ICo,ej,qCo,NCo,jCo,X1,Eie,DCo,GCo,oj,OCo,VCo,XCo,z1,Cie,zCo,QCo,rj,WCo,HCo,UCo,Q1,wie,JCo,YCo,tj,KCo,ZCo,e3o,W1,Aie,o3o,r3o,aj,t3o,a3o,n3o,H1,yie,s3o,l3o,nj,i3o,d3o,c3o,U1,f3o,Lie,m3o,g3o,xie,h3o,p3o,J1,JRe,$i,Y1,$ie,cA,u3o,kie,_3o,YRe,ko,fA,b3o,ki,v3o,sj,F3o,T3o,lj,M3o,E3o,C3o,mA,w3o,Sie,A3o,y3o,L3o,tt,gA,x3o,Rie,$3o,k3o,Si,S3o,Bie,R3o,B3o,ij,P3o,I3o,q3o,K1,N3o,Ye,hA,j3o,Pie,D3o,G3o,ya,O3o,Iie,V3o,X3o,qie,z3o,Q3o,Nie,W3o,H3o,U3o,q,Z1,jie,J3o,Y3o,dj,K3o,Z3o,ewo,eb,Die,owo,rwo,cj,two,awo,nwo,ob,Gie,swo,lwo,fj,iwo,dwo,cwo,rb,Oie,fwo,mwo,mj,gwo,hwo,pwo,tb,Vie,uwo,_wo,gj,bwo,vwo,Fwo,ab,Xie,Two,Mwo,hj,Ewo,Cwo,wwo,nb,zie,Awo,ywo,pj,Lwo,xwo,$wo,sb,Qie,kwo,Swo,uj,Rwo,Bwo,Pwo,lb,Wie,Iwo,qwo,_j,Nwo,jwo,Dwo,ib,Hie,Gwo,Owo,bj,Vwo,Xwo,zwo,db,Uie,Qwo,Wwo,vj,Hwo,Uwo,Jwo,cb,Jie,Ywo,Kwo,Fj,Zwo,eAo,oAo,fb,Yie,rAo,tAo,Tj,aAo,nAo,sAo,mb,Kie,lAo,iAo,Mj,dAo,cAo,fAo,gb,Zie,mAo,gAo,Ej,hAo,pAo,uAo,hb,ede,_Ao,bAo,Cj,vAo,FAo,TAo,pb,ode,MAo,EAo,wj,CAo,wAo,AAo,ub,rde,yAo,LAo,Aj,xAo,$Ao,kAo,_b,tde,SAo,RAo,yj,BAo,PAo,IAo,bb,ade,qAo,NAo,Lj,jAo,DAo,GAo,vb,nde,OAo,VAo,xj,XAo,zAo,QAo,Fb,sde,WAo,HAo,$j,UAo,JAo,YAo,Tb,lde,KAo,ZAo,kj,e0o,o0o,r0o,Mb,ide,t0o,a0o,Sj,n0o,s0o,l0o,Eb,dde,i0o,d0o,Rj,c0o,f0o,m0o,Cb,cde,g0o,h0o,Bj,p0o,u0o,_0o,wb,fde,b0o,v0o,Pj,F0o,T0o,M0o,Ab,mde,E0o,C0o,Ij,w0o,A0o,y0o,yb,gde,L0o,x0o,qj,$0o,k0o,S0o,Lb,hde,R0o,B0o,Nj,P0o,I0o,q0o,xb,pde,N0o,j0o,jj,D0o,G0o,O0o,$b,ude,V0o,X0o,Dj,z0o,Q0o,W0o,kb,_de,H0o,U0o,Gj,J0o,Y0o,K0o,Sb,bde,Z0o,eyo,Oj,oyo,ryo,tyo,Rb,vde,ayo,nyo,Vj,syo,lyo,iyo,Bb,Fde,dyo,cyo,Xj,fyo,myo,gyo,Pb,Tde,hyo,pyo,zj,uyo,_yo,byo,Ib,Mde,vyo,Fyo,Qj,Tyo,Myo,Eyo,qb,Ede,Cyo,wyo,Wj,Ayo,yyo,Lyo,Nb,Cde,xyo,$yo,Hj,kyo,Syo,Ryo,jb,wde,Byo,Pyo,Uj,Iyo,qyo,Nyo,Db,Ade,jyo,Dyo,Jj,Gyo,Oyo,Vyo,Gb,yde,Xyo,zyo,Yj,Qyo,Wyo,Hyo,Ob,Lde,Uyo,Jyo,Kj,Yyo,Kyo,Zyo,Vb,xde,eLo,oLo,Zj,rLo,tLo,aLo,Xb,$de,nLo,sLo,eD,lLo,iLo,dLo,zb,kde,cLo,fLo,oD,mLo,gLo,hLo,Qb,pLo,Sde,uLo,_Lo,Rde,bLo,vLo,Wb,KRe,Ri,Hb,Bde,pA,FLo,Pde,TLo,ZRe,So,uA,MLo,Bi,ELo,rD,CLo,wLo,tD,ALo,yLo,LLo,_A,xLo,Ide,$Lo,kLo,SLo,at,bA,RLo,qde,BLo,PLo,Pi,ILo,Nde,qLo,NLo,aD,jLo,DLo,GLo,Ub,OLo,Ke,vA,VLo,jde,XLo,zLo,La,QLo,Dde,WLo,HLo,Gde,ULo,JLo,Ode,YLo,KLo,ZLo,Y,Jb,Vde,e8o,o8o,nD,r8o,t8o,a8o,Yb,Xde,n8o,s8o,sD,l8o,i8o,d8o,Kb,zde,c8o,f8o,lD,m8o,g8o,h8o,Zb,Qde,p8o,u8o,iD,_8o,b8o,v8o,e4,Wde,F8o,T8o,dD,M8o,E8o,C8o,o4,Hde,w8o,A8o,cD,y8o,L8o,x8o,r4,Ude,$8o,k8o,fD,S8o,R8o,B8o,t4,Jde,P8o,I8o,mD,q8o,N8o,j8o,a4,Yde,D8o,G8o,gD,O8o,V8o,X8o,n4,Kde,z8o,Q8o,hD,W8o,H8o,U8o,s4,Zde,J8o,Y8o,pD,K8o,Z8o,exo,l4,ece,oxo,rxo,uD,txo,axo,nxo,i4,oce,sxo,lxo,_D,ixo,dxo,cxo,d4,rce,fxo,mxo,bD,gxo,hxo,pxo,c4,tce,uxo,_xo,vD,bxo,vxo,Fxo,f4,ace,Txo,Mxo,FD,Exo,Cxo,wxo,m4,nce,Axo,yxo,TD,Lxo,xxo,$xo,g4,sce,kxo,Sxo,MD,Rxo,Bxo,Pxo,h4,lce,Ixo,qxo,ED,Nxo,jxo,Dxo,p4,ice,Gxo,Oxo,CD,Vxo,Xxo,zxo,u4,dce,Qxo,Wxo,wD,Hxo,Uxo,Jxo,_4,cce,Yxo,Kxo,AD,Zxo,e$o,o$o,b4,fce,r$o,t$o,yD,a$o,n$o,s$o,v4,mce,l$o,i$o,LD,d$o,c$o,f$o,F4,gce,m$o,g$o,xD,h$o,p$o,u$o,T4,hce,_$o,b$o,$D,v$o,F$o,T$o,M4,pce,M$o,E$o,kD,C$o,w$o,A$o,E4,uce,y$o,L$o,SD,x$o,$$o,k$o,C4,S$o,_ce,R$o,B$o,bce,P$o,I$o,w4,eBe,Ii,A4,vce,FA,q$o,Fce,N$o,oBe,Ro,TA,j$o,qi,D$o,RD,G$o,O$o,BD,V$o,X$o,z$o,MA,Q$o,Tce,W$o,H$o,U$o,nt,EA,J$o,Mce,Y$o,K$o,Ni,Z$o,Ece,eko,oko,PD,rko,tko,ako,y4,nko,Ze,CA,sko,Cce,lko,iko,xa,dko,wce,cko,fko,Ace,mko,gko,yce,hko,pko,uko,Wr,L4,Lce,_ko,bko,ID,vko,Fko,Tko,x4,xce,Mko,Eko,qD,Cko,wko,Ako,$4,$ce,yko,Lko,ND,xko,$ko,kko,k4,kce,Sko,Rko,jD,Bko,Pko,Iko,S4,Sce,qko,Nko,DD,jko,Dko,Gko,R4,Oko,Rce,Vko,Xko,Bce,zko,Qko,B4,rBe,ji,P4,Pce,wA,Wko,Ice,Hko,tBe,Bo,AA,Uko,Di,Jko,GD,Yko,Kko,OD,Zko,eSo,oSo,yA,rSo,qce,tSo,aSo,nSo,st,LA,sSo,Nce,lSo,iSo,Gi,dSo,jce,cSo,fSo,VD,mSo,gSo,hSo,I4,pSo,eo,xA,uSo,Dce,_So,bSo,$a,vSo,Gce,FSo,TSo,Oce,MSo,ESo,Vce,CSo,wSo,ASo,U,q4,Xce,ySo,LSo,XD,xSo,$So,kSo,N4,zce,SSo,RSo,zD,BSo,PSo,ISo,j4,Qce,qSo,NSo,QD,jSo,DSo,GSo,D4,Wce,OSo,VSo,WD,XSo,zSo,QSo,G4,Hce,WSo,HSo,HD,USo,JSo,YSo,O4,Uce,KSo,ZSo,UD,eRo,oRo,rRo,V4,Jce,tRo,aRo,JD,nRo,sRo,lRo,X4,Yce,iRo,dRo,YD,cRo,fRo,mRo,z4,Kce,gRo,hRo,KD,pRo,uRo,_Ro,Q4,Zce,bRo,vRo,ZD,FRo,TRo,MRo,W4,efe,ERo,CRo,eG,wRo,ARo,yRo,H4,ofe,LRo,xRo,oG,$Ro,kRo,SRo,U4,rfe,RRo,BRo,rG,PRo,IRo,qRo,J4,tfe,NRo,jRo,tG,DRo,GRo,ORo,Y4,afe,VRo,XRo,aG,zRo,QRo,WRo,K4,nfe,HRo,URo,nG,JRo,YRo,KRo,Z4,sfe,ZRo,eBo,sG,oBo,rBo,tBo,e2,lfe,aBo,nBo,lG,sBo,lBo,iBo,o2,ife,dBo,cBo,iG,fBo,mBo,gBo,r2,dfe,hBo,pBo,dG,uBo,_Bo,bBo,t2,cfe,vBo,FBo,cG,TBo,MBo,EBo,a2,ffe,CBo,wBo,fG,ABo,yBo,LBo,n2,mfe,xBo,$Bo,mG,kBo,SBo,RBo,s2,gfe,BBo,PBo,gG,IBo,qBo,NBo,l2,hfe,jBo,DBo,hG,GBo,OBo,VBo,i2,pfe,XBo,zBo,pG,QBo,WBo,HBo,d2,ufe,UBo,JBo,uG,YBo,KBo,ZBo,c2,_fe,ePo,oPo,_G,rPo,tPo,aPo,f2,bfe,nPo,sPo,bG,lPo,iPo,dPo,m2,vfe,cPo,fPo,vG,mPo,gPo,hPo,g2,Ffe,pPo,uPo,FG,_Po,bPo,vPo,h2,Tfe,FPo,TPo,TG,MPo,EPo,CPo,p2,Mfe,wPo,APo,MG,yPo,LPo,xPo,u2,$Po,Efe,kPo,SPo,Cfe,RPo,BPo,_2,aBe,Oi,b2,wfe,$A,PPo,Afe,IPo,nBe,Po,kA,qPo,Vi,NPo,EG,jPo,DPo,CG,GPo,OPo,VPo,SA,XPo,yfe,zPo,QPo,WPo,lt,RA,HPo,Lfe,UPo,JPo,Xi,YPo,xfe,KPo,ZPo,wG,eIo,oIo,rIo,v2,tIo,oo,BA,aIo,$fe,nIo,sIo,ka,lIo,kfe,iIo,dIo,Sfe,cIo,fIo,Rfe,mIo,gIo,hIo,O,F2,Bfe,pIo,uIo,AG,_Io,bIo,vIo,T2,Pfe,FIo,TIo,yG,MIo,EIo,CIo,M2,Ife,wIo,AIo,LG,yIo,LIo,xIo,E2,qfe,$Io,kIo,xG,SIo,RIo,BIo,C2,Nfe,PIo,IIo,$G,qIo,NIo,jIo,w2,jfe,DIo,GIo,kG,OIo,VIo,XIo,A2,Dfe,zIo,QIo,SG,WIo,HIo,UIo,y2,Gfe,JIo,YIo,RG,KIo,ZIo,eqo,L2,Ofe,oqo,rqo,BG,tqo,aqo,nqo,x2,Vfe,sqo,lqo,PG,iqo,dqo,cqo,$2,Xfe,fqo,mqo,IG,gqo,hqo,pqo,k2,zfe,uqo,_qo,qG,bqo,vqo,Fqo,S2,Qfe,Tqo,Mqo,NG,Eqo,Cqo,wqo,R2,Wfe,Aqo,yqo,jG,Lqo,xqo,$qo,B2,Hfe,kqo,Sqo,DG,Rqo,Bqo,Pqo,P2,Ufe,Iqo,qqo,GG,Nqo,jqo,Dqo,I2,Jfe,Gqo,Oqo,OG,Vqo,Xqo,zqo,q2,Yfe,Qqo,Wqo,VG,Hqo,Uqo,Jqo,N2,Kfe,Yqo,Kqo,XG,Zqo,eNo,oNo,j2,Zfe,rNo,tNo,zG,aNo,nNo,sNo,D2,eme,lNo,iNo,QG,dNo,cNo,fNo,G2,ome,mNo,gNo,WG,hNo,pNo,uNo,O2,rme,_No,bNo,HG,vNo,FNo,TNo,V2,tme,MNo,ENo,UG,CNo,wNo,ANo,X2,ame,yNo,LNo,JG,xNo,$No,kNo,z2,nme,SNo,RNo,YG,BNo,PNo,INo,Q2,sme,qNo,NNo,KG,jNo,DNo,GNo,W2,lme,ONo,VNo,ZG,XNo,zNo,QNo,H2,ime,WNo,HNo,eO,UNo,JNo,YNo,U2,dme,KNo,ZNo,oO,ejo,ojo,rjo,J2,cme,tjo,ajo,rO,njo,sjo,ljo,Y2,fme,ijo,djo,tO,cjo,fjo,mjo,K2,mme,gjo,hjo,aO,pjo,ujo,_jo,Z2,gme,bjo,vjo,nO,Fjo,Tjo,Mjo,ev,hme,Ejo,Cjo,sO,wjo,Ajo,yjo,ov,pme,Ljo,xjo,lO,$jo,kjo,Sjo,rv,ume,Rjo,Bjo,iO,Pjo,Ijo,qjo,tv,_me,Njo,jjo,dO,Djo,Gjo,Ojo,av,bme,Vjo,Xjo,cO,zjo,Qjo,Wjo,nv,Hjo,vme,Ujo,Jjo,Fme,Yjo,Kjo,sv,sBe,zi,lv,Tme,PA,Zjo,Mme,eDo,lBe,Io,IA,oDo,Qi,rDo,fO,tDo,aDo,mO,nDo,sDo,lDo,qA,iDo,Eme,dDo,cDo,fDo,it,NA,mDo,Cme,gDo,hDo,Wi,pDo,wme,uDo,_Do,gO,bDo,vDo,FDo,iv,TDo,ro,jA,MDo,Ame,EDo,CDo,Sa,wDo,yme,ADo,yDo,Lme,LDo,xDo,xme,$Do,kDo,SDo,$me,dv,kme,RDo,BDo,hO,PDo,IDo,qDo,cv,NDo,Sme,jDo,DDo,Rme,GDo,ODo,fv,iBe,Hi,mv,Bme,DA,VDo,Pme,XDo,dBe,qo,GA,zDo,Ui,QDo,pO,WDo,HDo,uO,UDo,JDo,YDo,OA,KDo,Ime,ZDo,eGo,oGo,dt,VA,rGo,qme,tGo,aGo,Ji,nGo,Nme,sGo,lGo,_O,iGo,dGo,cGo,gv,fGo,to,XA,mGo,jme,gGo,hGo,Ra,pGo,Dme,uGo,_Go,Gme,bGo,vGo,Ome,FGo,TGo,MGo,ve,hv,Vme,EGo,CGo,bO,wGo,AGo,yGo,pv,Xme,LGo,xGo,vO,$Go,kGo,SGo,uv,zme,RGo,BGo,FO,PGo,IGo,qGo,Ls,Qme,NGo,jGo,TO,DGo,GGo,MO,OGo,VGo,XGo,_v,Wme,zGo,QGo,EO,WGo,HGo,UGo,ct,Hme,JGo,YGo,CO,KGo,ZGo,wO,eOo,oOo,AO,rOo,tOo,aOo,bv,Ume,nOo,sOo,yO,lOo,iOo,dOo,vv,Jme,cOo,fOo,LO,mOo,gOo,hOo,Fv,Yme,pOo,uOo,xO,_Oo,bOo,vOo,Tv,Kme,FOo,TOo,$O,MOo,EOo,COo,Mv,Zme,wOo,AOo,kO,yOo,LOo,xOo,Ev,ege,$Oo,kOo,SO,SOo,ROo,BOo,Cv,oge,POo,IOo,RO,qOo,NOo,jOo,wv,DOo,rge,GOo,OOo,tge,VOo,XOo,Av,cBe,Yi,yv,age,zA,zOo,nge,QOo,fBe,No,QA,WOo,Ki,HOo,BO,UOo,JOo,PO,YOo,KOo,ZOo,WA,eVo,sge,oVo,rVo,tVo,ft,HA,aVo,lge,nVo,sVo,Zi,lVo,ige,iVo,dVo,IO,cVo,fVo,mVo,Lv,gVo,ao,UA,hVo,dge,pVo,uVo,Ba,_Vo,cge,bVo,vVo,fge,FVo,TVo,mge,MVo,EVo,CVo,gge,xv,hge,wVo,AVo,qO,yVo,LVo,xVo,$v,$Vo,pge,kVo,SVo,uge,RVo,BVo,kv,mBe,ed,Sv,_ge,JA,PVo,bge,IVo,gBe,jo,YA,qVo,od,NVo,NO,jVo,DVo,jO,GVo,OVo,VVo,KA,XVo,vge,zVo,QVo,WVo,mt,ZA,HVo,Fge,UVo,JVo,rd,YVo,Tge,KVo,ZVo,DO,eXo,oXo,rXo,Rv,tXo,no,e0,aXo,Mge,nXo,sXo,Pa,lXo,Ege,iXo,dXo,Cge,cXo,fXo,wge,mXo,gXo,hXo,qe,Bv,Age,pXo,uXo,GO,_Xo,bXo,vXo,Pv,yge,FXo,TXo,OO,MXo,EXo,CXo,Iv,Lge,wXo,AXo,VO,yXo,LXo,xXo,qv,xge,$Xo,kXo,XO,SXo,RXo,BXo,Nv,$ge,PXo,IXo,zO,qXo,NXo,jXo,jv,kge,DXo,GXo,QO,OXo,VXo,XXo,Dv,Sge,zXo,QXo,WO,WXo,HXo,UXo,Gv,Rge,JXo,YXo,HO,KXo,ZXo,ezo,Ov,ozo,Bge,rzo,tzo,Pge,azo,nzo,Vv,hBe,td,Xv,Ige,o0,szo,qge,lzo,pBe,Do,r0,izo,ad,dzo,UO,czo,fzo,JO,mzo,gzo,hzo,t0,pzo,Nge,uzo,_zo,bzo,gt,a0,vzo,jge,Fzo,Tzo,nd,Mzo,Dge,Ezo,Czo,YO,wzo,Azo,yzo,zv,Lzo,so,n0,xzo,Gge,$zo,kzo,Ia,Szo,Oge,Rzo,Bzo,Vge,Pzo,Izo,Xge,qzo,Nzo,jzo,qa,Qv,zge,Dzo,Gzo,KO,Ozo,Vzo,Xzo,Wv,Qge,zzo,Qzo,ZO,Wzo,Hzo,Uzo,Hv,Wge,Jzo,Yzo,eV,Kzo,Zzo,eQo,Uv,Hge,oQo,rQo,oV,tQo,aQo,nQo,Jv,sQo,Uge,lQo,iQo,Jge,dQo,cQo,Yv,uBe,sd,Kv,Yge,s0,fQo,Kge,mQo,_Be,Go,l0,gQo,ld,hQo,rV,pQo,uQo,tV,_Qo,bQo,vQo,i0,FQo,Zge,TQo,MQo,EQo,ht,d0,CQo,ehe,wQo,AQo,id,yQo,ohe,LQo,xQo,aV,$Qo,kQo,SQo,Zv,RQo,lo,c0,BQo,rhe,PQo,IQo,Na,qQo,the,NQo,jQo,ahe,DQo,GQo,nhe,OQo,VQo,XQo,Ne,eF,she,zQo,QQo,nV,WQo,HQo,UQo,oF,lhe,JQo,YQo,sV,KQo,ZQo,eWo,rF,ihe,oWo,rWo,lV,tWo,aWo,nWo,tF,dhe,sWo,lWo,iV,iWo,dWo,cWo,aF,che,fWo,mWo,dV,gWo,hWo,pWo,nF,fhe,uWo,_Wo,cV,bWo,vWo,FWo,sF,mhe,TWo,MWo,fV,EWo,CWo,wWo,lF,ghe,AWo,yWo,mV,LWo,xWo,$Wo,iF,kWo,hhe,SWo,RWo,phe,BWo,PWo,dF,bBe,dd,cF,uhe,f0,IWo,_he,qWo,vBe,Oo,m0,NWo,cd,jWo,gV,DWo,GWo,hV,OWo,VWo,XWo,g0,zWo,bhe,QWo,WWo,HWo,pt,h0,UWo,vhe,JWo,YWo,fd,KWo,Fhe,ZWo,eHo,pV,oHo,rHo,tHo,fF,aHo,io,p0,nHo,The,sHo,lHo,ja,iHo,Mhe,dHo,cHo,Ehe,fHo,mHo,Che,gHo,hHo,pHo,u0,mF,whe,uHo,_Ho,uV,bHo,vHo,FHo,gF,Ahe,THo,MHo,_V,EHo,CHo,wHo,hF,AHo,yhe,yHo,LHo,Lhe,xHo,$Ho,pF,FBe,md,uF,xhe,_0,kHo,$he,SHo,TBe,Vo,b0,RHo,gd,BHo,bV,PHo,IHo,vV,qHo,NHo,jHo,v0,DHo,khe,GHo,OHo,VHo,ut,F0,XHo,She,zHo,QHo,hd,WHo,Rhe,HHo,UHo,FV,JHo,YHo,KHo,_F,ZHo,co,T0,eUo,Bhe,oUo,rUo,Da,tUo,Phe,aUo,nUo,Ihe,sUo,lUo,qhe,iUo,dUo,cUo,Ga,bF,Nhe,fUo,mUo,TV,gUo,hUo,pUo,vF,jhe,uUo,_Uo,MV,bUo,vUo,FUo,FF,Dhe,TUo,MUo,EV,EUo,CUo,wUo,TF,Ghe,AUo,yUo,CV,LUo,xUo,$Uo,MF,kUo,Ohe,SUo,RUo,Vhe,BUo,PUo,EF,MBe,pd,CF,Xhe,M0,IUo,zhe,qUo,EBe,Xo,E0,NUo,ud,jUo,wV,DUo,GUo,AV,OUo,VUo,XUo,C0,zUo,Qhe,QUo,WUo,HUo,_t,w0,UUo,Whe,JUo,YUo,_d,KUo,Hhe,ZUo,eJo,yV,oJo,rJo,tJo,wF,aJo,fo,A0,nJo,Uhe,sJo,lJo,Oa,iJo,Jhe,dJo,cJo,Yhe,fJo,mJo,Khe,gJo,hJo,pJo,bd,AF,Zhe,uJo,_Jo,LV,bJo,vJo,FJo,yF,epe,TJo,MJo,xV,EJo,CJo,wJo,LF,ope,AJo,yJo,$V,LJo,xJo,$Jo,xF,kJo,rpe,SJo,RJo,tpe,BJo,PJo,$F,CBe,vd,kF,ape,y0,IJo,npe,qJo,wBe,zo,L0,NJo,Fd,jJo,kV,DJo,GJo,SV,OJo,VJo,XJo,x0,zJo,spe,QJo,WJo,HJo,bt,$0,UJo,lpe,JJo,YJo,Td,KJo,ipe,ZJo,eYo,RV,oYo,rYo,tYo,SF,aYo,mo,k0,nYo,dpe,sYo,lYo,Va,iYo,cpe,dYo,cYo,fpe,fYo,mYo,mpe,gYo,hYo,pYo,gpe,RF,hpe,uYo,_Yo,BV,bYo,vYo,FYo,BF,TYo,ppe,MYo,EYo,upe,CYo,wYo,PF,ABe,Md,IF,_pe,S0,AYo,bpe,yYo,yBe,Qo,R0,LYo,Ed,xYo,PV,$Yo,kYo,IV,SYo,RYo,BYo,B0,PYo,vpe,IYo,qYo,NYo,vt,P0,jYo,Fpe,DYo,GYo,Cd,OYo,Tpe,VYo,XYo,qV,zYo,QYo,WYo,qF,HYo,go,I0,UYo,Mpe,JYo,YYo,Xa,KYo,Epe,ZYo,eKo,Cpe,oKo,rKo,wpe,tKo,aKo,nKo,Ape,NF,ype,sKo,lKo,NV,iKo,dKo,cKo,jF,fKo,Lpe,mKo,gKo,xpe,hKo,pKo,DF,LBe,wd,GF,$pe,q0,uKo,kpe,_Ko,xBe,Wo,N0,bKo,Ad,vKo,jV,FKo,TKo,DV,MKo,EKo,CKo,j0,wKo,Spe,AKo,yKo,LKo,Ft,D0,xKo,Rpe,$Ko,kKo,yd,SKo,Bpe,RKo,BKo,GV,PKo,IKo,qKo,OF,NKo,ho,G0,jKo,Ppe,DKo,GKo,za,OKo,Ipe,VKo,XKo,qpe,zKo,QKo,Npe,WKo,HKo,UKo,Qa,VF,jpe,JKo,YKo,OV,KKo,ZKo,eZo,XF,Dpe,oZo,rZo,VV,tZo,aZo,nZo,zF,Gpe,sZo,lZo,XV,iZo,dZo,cZo,QF,Ope,fZo,mZo,zV,gZo,hZo,pZo,WF,uZo,Vpe,_Zo,bZo,Xpe,vZo,FZo,HF,$Be,Ld,UF,zpe,O0,TZo,Qpe,MZo,kBe,Ho,V0,EZo,xd,CZo,QV,wZo,AZo,WV,yZo,LZo,xZo,X0,$Zo,Wpe,kZo,SZo,RZo,Tt,z0,BZo,Hpe,PZo,IZo,$d,qZo,Upe,NZo,jZo,HV,DZo,GZo,OZo,JF,VZo,po,Q0,XZo,Jpe,zZo,QZo,Wa,WZo,Ype,HZo,UZo,Kpe,JZo,YZo,Zpe,KZo,ZZo,eer,eue,YF,oue,oer,rer,UV,ter,aer,ner,KF,ser,rue,ler,ier,tue,der,cer,ZF,SBe,kd,e6,aue,W0,fer,nue,mer,RBe,Uo,H0,ger,Sd,her,JV,per,uer,YV,_er,ber,ver,U0,Fer,sue,Ter,Mer,Eer,Mt,J0,Cer,lue,wer,Aer,Rd,yer,iue,Ler,xer,KV,$er,ker,Ser,o6,Rer,Mr,Y0,Ber,due,Per,Ier,Ha,qer,cue,Ner,jer,fue,Der,Ger,mue,Oer,Ver,Xer,j,r6,gue,zer,Qer,ZV,Wer,Her,Uer,t6,hue,Jer,Yer,eX,Ker,Zer,eor,a6,pue,oor,ror,oX,tor,aor,nor,n6,uue,sor,lor,rX,ior,dor,cor,s6,_ue,mor,gor,tX,hor,por,uor,l6,bue,_or,bor,aX,vor,For,Tor,i6,vue,Mor,Eor,nX,Cor,wor,Aor,d6,Fue,yor,Lor,sX,xor,$or,kor,c6,Tue,Sor,Ror,lX,Bor,Por,Ior,f6,Mue,qor,Nor,iX,jor,Dor,Gor,m6,Eue,Oor,Vor,dX,Xor,zor,Qor,g6,Cue,Wor,Hor,cX,Uor,Jor,Yor,h6,wue,Kor,Zor,fX,err,orr,rrr,p6,Aue,trr,arr,mX,nrr,srr,lrr,u6,yue,irr,drr,gX,crr,frr,mrr,_6,Lue,grr,hrr,hX,prr,urr,_rr,xs,xue,brr,vrr,pX,Frr,Trr,uX,Mrr,Err,Crr,b6,$ue,wrr,Arr,_X,yrr,Lrr,xrr,v6,kue,$rr,krr,bX,Srr,Rrr,Brr,F6,Sue,Prr,Irr,vX,qrr,Nrr,jrr,T6,Rue,Drr,Grr,FX,Orr,Vrr,Xrr,M6,Bue,zrr,Qrr,TX,Wrr,Hrr,Urr,E6,Pue,Jrr,Yrr,MX,Krr,Zrr,etr,C6,Iue,otr,rtr,EX,ttr,atr,ntr,w6,que,str,ltr,CX,itr,dtr,ctr,A6,Nue,ftr,mtr,wX,gtr,htr,ptr,y6,jue,utr,_tr,AX,btr,vtr,Ftr,L6,Due,Ttr,Mtr,yX,Etr,Ctr,wtr,x6,Gue,Atr,ytr,LX,Ltr,xtr,$tr,$6,Oue,ktr,Str,xX,Rtr,Btr,Ptr,k6,Vue,Itr,qtr,$X,Ntr,jtr,Dtr,S6,Xue,Gtr,Otr,kX,Vtr,Xtr,ztr,R6,zue,Qtr,Wtr,SX,Htr,Utr,Jtr,B6,Que,Ytr,Ktr,RX,Ztr,ear,oar,P6,Wue,rar,tar,BX,aar,nar,sar,I6,Hue,lar,iar,PX,dar,car,far,q6,Uue,mar,gar,IX,har,par,uar,N6,Jue,_ar,bar,qX,Far,Tar,Mar,j6,Yue,Ear,Car,NX,war,Aar,yar,D6,Kue,Lar,xar,jX,$ar,kar,Sar,G6,Zue,Rar,Bar,DX,Par,Iar,qar,O6,e_e,Nar,jar,GX,Dar,Gar,Oar,V6,o_e,Var,Xar,OX,zar,Qar,War,X6,r_e,Har,Uar,VX,Jar,Yar,Kar,z6,BBe,Bd,Q6,t_e,K0,Zar,a_e,enr,PBe,Jo,Z0,onr,Pd,rnr,XX,tnr,anr,zX,nnr,snr,lnr,ey,inr,n_e,dnr,cnr,fnr,Et,oy,mnr,s_e,gnr,hnr,Id,pnr,l_e,unr,_nr,QX,bnr,vnr,Fnr,W6,Tnr,Er,ry,Mnr,i_e,Enr,Cnr,Ua,wnr,d_e,Anr,ynr,c_e,Lnr,xnr,f_e,$nr,knr,Snr,ne,H6,m_e,Rnr,Bnr,WX,Pnr,Inr,qnr,U6,g_e,Nnr,jnr,HX,Dnr,Gnr,Onr,J6,h_e,Vnr,Xnr,UX,znr,Qnr,Wnr,Y6,p_e,Hnr,Unr,JX,Jnr,Ynr,Knr,K6,u_e,Znr,esr,YX,osr,rsr,tsr,Z6,__e,asr,nsr,KX,ssr,lsr,isr,eT,b_e,dsr,csr,ZX,fsr,msr,gsr,oT,v_e,hsr,psr,ez,usr,_sr,bsr,rT,F_e,vsr,Fsr,oz,Tsr,Msr,Esr,tT,T_e,Csr,wsr,rz,Asr,ysr,Lsr,aT,M_e,xsr,$sr,tz,ksr,Ssr,Rsr,nT,E_e,Bsr,Psr,az,Isr,qsr,Nsr,sT,C_e,jsr,Dsr,nz,Gsr,Osr,Vsr,lT,w_e,Xsr,zsr,sz,Qsr,Wsr,Hsr,iT,A_e,Usr,Jsr,lz,Ysr,Ksr,Zsr,dT,y_e,elr,olr,iz,rlr,tlr,alr,cT,L_e,nlr,slr,dz,llr,ilr,dlr,fT,x_e,clr,flr,cz,mlr,glr,hlr,mT,$_e,plr,ulr,fz,_lr,blr,vlr,gT,k_e,Flr,Tlr,mz,Mlr,Elr,Clr,hT,S_e,wlr,Alr,gz,ylr,Llr,xlr,pT,R_e,$lr,klr,hz,Slr,Rlr,Blr,uT,B_e,Plr,Ilr,pz,qlr,Nlr,jlr,_T,IBe,qd,bT,P_e,ty,Dlr,I_e,Glr,qBe,Yo,ay,Olr,Nd,Vlr,uz,Xlr,zlr,_z,Qlr,Wlr,Hlr,ny,Ulr,q_e,Jlr,Ylr,Klr,Ct,sy,Zlr,N_e,eir,oir,jd,rir,j_e,tir,air,bz,nir,sir,lir,vT,iir,Cr,ly,dir,D_e,cir,fir,Ja,mir,G_e,gir,hir,O_e,pir,uir,V_e,_ir,bir,vir,Te,FT,X_e,Fir,Tir,vz,Mir,Eir,Cir,TT,z_e,wir,Air,Fz,yir,Lir,xir,MT,Q_e,$ir,kir,Tz,Sir,Rir,Bir,ET,W_e,Pir,Iir,Mz,qir,Nir,jir,CT,H_e,Dir,Gir,Ez,Oir,Vir,Xir,wT,U_e,zir,Qir,Cz,Wir,Hir,Uir,AT,J_e,Jir,Yir,wz,Kir,Zir,edr,yT,Y_e,odr,rdr,Az,tdr,adr,ndr,LT,K_e,sdr,ldr,yz,idr,ddr,cdr,xT,Z_e,fdr,mdr,Lz,gdr,hdr,pdr,$T,e1e,udr,_dr,xz,bdr,vdr,Fdr,kT,o1e,Tdr,Mdr,$z,Edr,Cdr,wdr,ST,NBe,Dd,RT,r1e,iy,Adr,t1e,ydr,jBe,Ko,dy,Ldr,Gd,xdr,kz,$dr,kdr,Sz,Sdr,Rdr,Bdr,cy,Pdr,a1e,Idr,qdr,Ndr,wt,fy,jdr,n1e,Ddr,Gdr,Od,Odr,s1e,Vdr,Xdr,Rz,zdr,Qdr,Wdr,BT,Hdr,wr,my,Udr,l1e,Jdr,Ydr,Ya,Kdr,i1e,Zdr,ecr,d1e,ocr,rcr,c1e,tcr,acr,ncr,gy,PT,f1e,scr,lcr,Bz,icr,dcr,ccr,IT,m1e,fcr,mcr,Pz,gcr,hcr,pcr,qT,DBe,Vd,NT,g1e,hy,ucr,h1e,_cr,GBe,Zo,py,bcr,Xd,vcr,Iz,Fcr,Tcr,qz,Mcr,Ecr,Ccr,uy,wcr,p1e,Acr,ycr,Lcr,At,_y,xcr,u1e,$cr,kcr,zd,Scr,_1e,Rcr,Bcr,Nz,Pcr,Icr,qcr,jT,Ncr,Ar,by,jcr,b1e,Dcr,Gcr,Ka,Ocr,v1e,Vcr,Xcr,F1e,zcr,Qcr,T1e,Wcr,Hcr,Ucr,ie,DT,M1e,Jcr,Ycr,jz,Kcr,Zcr,efr,GT,E1e,ofr,rfr,Dz,tfr,afr,nfr,OT,C1e,sfr,lfr,Gz,ifr,dfr,cfr,VT,w1e,ffr,mfr,Oz,gfr,hfr,pfr,XT,A1e,ufr,_fr,Vz,bfr,vfr,Ffr,zT,y1e,Tfr,Mfr,Xz,Efr,Cfr,wfr,QT,L1e,Afr,yfr,zz,Lfr,xfr,$fr,WT,x1e,kfr,Sfr,Qz,Rfr,Bfr,Pfr,HT,$1e,Ifr,qfr,Wz,Nfr,jfr,Dfr,UT,k1e,Gfr,Ofr,Hz,Vfr,Xfr,zfr,JT,S1e,Qfr,Wfr,Uz,Hfr,Ufr,Jfr,YT,R1e,Yfr,Kfr,Jz,Zfr,emr,omr,KT,B1e,rmr,tmr,Yz,amr,nmr,smr,ZT,P1e,lmr,imr,Kz,dmr,cmr,fmr,e7,I1e,mmr,gmr,Zz,hmr,pmr,umr,o7,q1e,_mr,bmr,eQ,vmr,Fmr,Tmr,r7,N1e,Mmr,Emr,oQ,Cmr,wmr,Amr,t7,j1e,ymr,Lmr,rQ,xmr,$mr,kmr,a7,D1e,Smr,Rmr,tQ,Bmr,Pmr,Imr,n7,G1e,qmr,Nmr,aQ,jmr,Dmr,Gmr,s7,OBe,Qd,l7,O1e,vy,Omr,V1e,Vmr,VBe,er,Fy,Xmr,Wd,zmr,nQ,Qmr,Wmr,sQ,Hmr,Umr,Jmr,Ty,Ymr,X1e,Kmr,Zmr,egr,yt,My,ogr,z1e,rgr,tgr,Hd,agr,Q1e,ngr,sgr,lQ,lgr,igr,dgr,i7,cgr,yr,Ey,fgr,W1e,mgr,ggr,Za,hgr,H1e,pgr,ugr,U1e,_gr,bgr,J1e,vgr,Fgr,Tgr,ye,d7,Y1e,Mgr,Egr,iQ,Cgr,wgr,Agr,c7,K1e,ygr,Lgr,dQ,xgr,$gr,kgr,f7,Z1e,Sgr,Rgr,cQ,Bgr,Pgr,Igr,m7,ebe,qgr,Ngr,fQ,jgr,Dgr,Ggr,g7,obe,Ogr,Vgr,mQ,Xgr,zgr,Qgr,h7,rbe,Wgr,Hgr,gQ,Ugr,Jgr,Ygr,p7,tbe,Kgr,Zgr,hQ,ehr,ohr,rhr,u7,abe,thr,ahr,pQ,nhr,shr,lhr,_7,nbe,ihr,dhr,uQ,chr,fhr,mhr,b7,sbe,ghr,hhr,_Q,phr,uhr,_hr,v7,XBe,Ud,F7,lbe,Cy,bhr,ibe,vhr,zBe,or,wy,Fhr,Jd,Thr,bQ,Mhr,Ehr,vQ,Chr,whr,Ahr,Ay,yhr,dbe,Lhr,xhr,$hr,Lt,yy,khr,cbe,Shr,Rhr,Yd,Bhr,fbe,Phr,Ihr,FQ,qhr,Nhr,jhr,T7,Dhr,Lr,Ly,Ghr,mbe,Ohr,Vhr,en,Xhr,gbe,zhr,Qhr,hbe,Whr,Hhr,pbe,Uhr,Jhr,Yhr,Z,M7,ube,Khr,Zhr,TQ,epr,opr,rpr,E7,_be,tpr,apr,MQ,npr,spr,lpr,C7,bbe,ipr,dpr,EQ,cpr,fpr,mpr,w7,vbe,gpr,hpr,CQ,ppr,upr,_pr,A7,Fbe,bpr,vpr,wQ,Fpr,Tpr,Mpr,y7,Tbe,Epr,Cpr,AQ,wpr,Apr,ypr,L7,Mbe,Lpr,xpr,yQ,$pr,kpr,Spr,x7,Ebe,Rpr,Bpr,LQ,Ppr,Ipr,qpr,$7,Cbe,Npr,jpr,xQ,Dpr,Gpr,Opr,k7,wbe,Vpr,Xpr,$Q,zpr,Qpr,Wpr,S7,Abe,Hpr,Upr,kQ,Jpr,Ypr,Kpr,R7,ybe,Zpr,eur,SQ,our,rur,tur,B7,Lbe,aur,nur,RQ,sur,lur,iur,P7,xbe,dur,cur,BQ,fur,mur,gur,I7,$be,hur,pur,PQ,uur,_ur,bur,q7,kbe,vur,Fur,IQ,Tur,Mur,Eur,N7,Sbe,Cur,wur,qQ,Aur,yur,Lur,j7,Rbe,xur,$ur,NQ,kur,Sur,Rur,D7,Bbe,Bur,Pur,jQ,Iur,qur,Nur,G7,Pbe,jur,Dur,DQ,Gur,Our,Vur,O7,Ibe,Xur,zur,GQ,Qur,Wur,Hur,V7,qbe,Uur,Jur,OQ,Yur,Kur,Zur,X7,Nbe,e_r,o_r,VQ,r_r,t_r,a_r,z7,jbe,n_r,s_r,XQ,l_r,i_r,d_r,Q7,Dbe,c_r,f_r,zQ,m_r,g_r,h_r,W7,Gbe,p_r,u_r,QQ,__r,b_r,v_r,H7,QBe,Kd,U7,Obe,xy,F_r,Vbe,T_r,WBe,rr,$y,M_r,Zd,E_r,WQ,C_r,w_r,HQ,A_r,y_r,L_r,ky,x_r,Xbe,$_r,k_r,S_r,xt,Sy,R_r,zbe,B_r,P_r,ec,I_r,Qbe,q_r,N_r,UQ,j_r,D_r,G_r,J7,O_r,xr,Ry,V_r,Wbe,X_r,z_r,on,Q_r,Hbe,W_r,H_r,Ube,U_r,J_r,Jbe,Y_r,K_r,Z_r,pe,Y7,Ybe,e1r,o1r,JQ,r1r,t1r,a1r,K7,Kbe,n1r,s1r,YQ,l1r,i1r,d1r,Z7,Zbe,c1r,f1r,KQ,m1r,g1r,h1r,e9,e4e,p1r,u1r,ZQ,_1r,b1r,v1r,o9,o4e,F1r,T1r,eW,M1r,E1r,C1r,r9,r4e,w1r,A1r,oW,y1r,L1r,x1r,t9,t4e,$1r,k1r,rW,S1r,R1r,B1r,a9,a4e,P1r,I1r,tW,q1r,N1r,j1r,n9,n4e,D1r,G1r,aW,O1r,V1r,X1r,s9,s4e,z1r,Q1r,nW,W1r,H1r,U1r,l9,l4e,J1r,Y1r,sW,K1r,Z1r,ebr,i9,i4e,obr,rbr,lW,tbr,abr,nbr,d9,d4e,sbr,lbr,iW,ibr,dbr,cbr,c9,c4e,fbr,mbr,dW,gbr,hbr,pbr,f9,f4e,ubr,_br,cW,bbr,vbr,Fbr,m9,m4e,Tbr,Mbr,fW,Ebr,Cbr,wbr,g9,g4e,Abr,ybr,mW,Lbr,xbr,$br,h9,HBe,oc,p9,h4e,By,kbr,p4e,Sbr,UBe,tr,Py,Rbr,rc,Bbr,gW,Pbr,Ibr,hW,qbr,Nbr,jbr,Iy,Dbr,u4e,Gbr,Obr,Vbr,$t,qy,Xbr,_4e,zbr,Qbr,tc,Wbr,b4e,Hbr,Ubr,pW,Jbr,Ybr,Kbr,u9,Zbr,$r,Ny,e4r,v4e,o4r,r4r,rn,t4r,F4e,a4r,n4r,T4e,s4r,l4r,M4e,i4r,d4r,c4r,E4e,_9,C4e,f4r,m4r,uW,g4r,h4r,p4r,b9,JBe,ac,v9,w4e,jy,u4r,A4e,_4r,YBe,ar,Dy,b4r,nc,v4r,_W,F4r,T4r,bW,M4r,E4r,C4r,Gy,w4r,y4e,A4r,y4r,L4r,kt,Oy,x4r,L4e,$4r,k4r,sc,S4r,x4e,R4r,B4r,vW,P4r,I4r,q4r,F9,N4r,kr,Vy,j4r,$4e,D4r,G4r,tn,O4r,k4e,V4r,X4r,S4e,z4r,Q4r,R4e,W4r,H4r,U4r,de,T9,B4e,J4r,Y4r,FW,K4r,Z4r,e2r,M9,P4e,o2r,r2r,TW,t2r,a2r,n2r,E9,I4e,s2r,l2r,MW,i2r,d2r,c2r,C9,q4e,f2r,m2r,EW,g2r,h2r,p2r,w9,N4e,u2r,_2r,CW,b2r,v2r,F2r,A9,j4e,T2r,M2r,wW,E2r,C2r,w2r,y9,D4e,A2r,y2r,AW,L2r,x2r,$2r,L9,G4e,k2r,S2r,yW,R2r,B2r,P2r,x9,O4e,I2r,q2r,LW,N2r,j2r,D2r,$9,V4e,G2r,O2r,xW,V2r,X2r,z2r,k9,X4e,Q2r,W2r,$W,H2r,U2r,J2r,S9,z4e,Y2r,K2r,kW,Z2r,evr,ovr,R9,Q4e,rvr,tvr,SW,avr,nvr,svr,B9,W4e,lvr,ivr,RW,dvr,cvr,fvr,P9,H4e,mvr,gvr,BW,hvr,pvr,uvr,I9,U4e,_vr,bvr,PW,vvr,Fvr,Tvr,q9,J4e,Mvr,Evr,IW,Cvr,wvr,Avr,N9,Y4e,yvr,Lvr,qW,xvr,$vr,kvr,j9,K4e,Svr,Rvr,NW,Bvr,Pvr,Ivr,D9,Z4e,qvr,Nvr,jW,jvr,Dvr,Gvr,G9,KBe,lc,O9,e2e,Xy,Ovr,o2e,Vvr,ZBe,nr,zy,Xvr,ic,zvr,DW,Qvr,Wvr,GW,Hvr,Uvr,Jvr,Qy,Yvr,r2e,Kvr,Zvr,eFr,St,Wy,oFr,t2e,rFr,tFr,dc,aFr,a2e,nFr,sFr,OW,lFr,iFr,dFr,V9,cFr,Sr,Hy,fFr,n2e,mFr,gFr,an,hFr,s2e,pFr,uFr,l2e,_Fr,bFr,i2e,vFr,FFr,TFr,ce,X9,d2e,MFr,EFr,VW,CFr,wFr,AFr,z9,c2e,yFr,LFr,XW,xFr,$Fr,kFr,Q9,f2e,SFr,RFr,zW,BFr,PFr,IFr,W9,m2e,qFr,NFr,QW,jFr,DFr,GFr,H9,g2e,OFr,VFr,WW,XFr,zFr,QFr,U9,h2e,WFr,HFr,HW,UFr,JFr,YFr,J9,p2e,KFr,ZFr,UW,e6r,o6r,r6r,Y9,u2e,t6r,a6r,JW,n6r,s6r,l6r,K9,_2e,i6r,d6r,YW,c6r,f6r,m6r,Z9,b2e,g6r,h6r,KW,p6r,u6r,_6r,eM,v2e,b6r,v6r,ZW,F6r,T6r,M6r,oM,F2e,E6r,C6r,eH,w6r,A6r,y6r,rM,T2e,L6r,x6r,oH,$6r,k6r,S6r,tM,M2e,R6r,B6r,rH,P6r,I6r,q6r,aM,E2e,N6r,j6r,tH,D6r,G6r,O6r,nM,C2e,V6r,X6r,aH,z6r,Q6r,W6r,sM,w2e,H6r,U6r,nH,J6r,Y6r,K6r,lM,A2e,Z6r,eTr,sH,oTr,rTr,tTr,iM,y2e,aTr,nTr,lH,sTr,lTr,iTr,dM,L2e,dTr,cTr,iH,fTr,mTr,gTr,cM,ePe,cc,fM,x2e,Uy,hTr,$2e,pTr,oPe,sr,Jy,uTr,fc,_Tr,dH,bTr,vTr,cH,FTr,TTr,MTr,Yy,ETr,k2e,CTr,wTr,ATr,Rt,Ky,yTr,S2e,LTr,xTr,mc,$Tr,R2e,kTr,STr,fH,RTr,BTr,PTr,mM,ITr,Rr,Zy,qTr,B2e,NTr,jTr,nn,DTr,P2e,GTr,OTr,I2e,VTr,XTr,q2e,zTr,QTr,WTr,N2e,gM,j2e,HTr,UTr,mH,JTr,YTr,KTr,hM,rPe,gc,pM,D2e,eL,ZTr,G2e,e7r,tPe,lr,oL,o7r,hc,r7r,gH,t7r,a7r,hH,n7r,s7r,l7r,rL,i7r,O2e,d7r,c7r,f7r,Bt,tL,m7r,V2e,g7r,h7r,pc,p7r,X2e,u7r,_7r,pH,b7r,v7r,F7r,uM,T7r,Br,aL,M7r,z2e,E7r,C7r,sn,w7r,Q2e,A7r,y7r,W2e,L7r,x7r,H2e,$7r,k7r,S7r,U2e,_M,J2e,R7r,B7r,uH,P7r,I7r,q7r,bM,aPe,uc,vM,Y2e,nL,N7r,K2e,j7r,nPe,ir,sL,D7r,_c,G7r,_H,O7r,V7r,bH,X7r,z7r,Q7r,lL,W7r,Z2e,H7r,U7r,J7r,Pt,iL,Y7r,eve,K7r,Z7r,bc,e9r,ove,o9r,r9r,vH,t9r,a9r,n9r,FM,s9r,Pr,dL,l9r,rve,i9r,d9r,ln,c9r,tve,f9r,m9r,ave,g9r,h9r,nve,p9r,u9r,_9r,oe,TM,sve,b9r,v9r,FH,F9r,T9r,M9r,MM,lve,E9r,C9r,TH,w9r,A9r,y9r,EM,ive,L9r,x9r,MH,$9r,k9r,S9r,CM,dve,R9r,B9r,EH,P9r,I9r,q9r,wM,cve,N9r,j9r,CH,D9r,G9r,O9r,AM,fve,V9r,X9r,wH,z9r,Q9r,W9r,yM,mve,H9r,U9r,AH,J9r,Y9r,K9r,LM,gve,Z9r,eMr,yH,oMr,rMr,tMr,xM,hve,aMr,nMr,LH,sMr,lMr,iMr,$M,pve,dMr,cMr,xH,fMr,mMr,gMr,kM,uve,hMr,pMr,$H,uMr,_Mr,bMr,SM,_ve,vMr,FMr,kH,TMr,MMr,EMr,RM,bve,CMr,wMr,SH,AMr,yMr,LMr,BM,vve,xMr,$Mr,RH,kMr,SMr,RMr,PM,Fve,BMr,PMr,BH,IMr,qMr,NMr,IM,Tve,jMr,DMr,PH,GMr,OMr,VMr,qM,Mve,XMr,zMr,IH,QMr,WMr,HMr,NM,Eve,UMr,JMr,qH,YMr,KMr,ZMr,jM,Cve,eEr,oEr,NH,rEr,tEr,aEr,DM,wve,nEr,sEr,jH,lEr,iEr,dEr,GM,Ave,cEr,fEr,DH,mEr,gEr,hEr,OM,yve,pEr,uEr,GH,_Er,bEr,vEr,VM,Lve,FEr,TEr,OH,MEr,EEr,CEr,XM,xve,wEr,AEr,VH,yEr,LEr,xEr,zM,$ve,$Er,kEr,XH,SEr,REr,BEr,QM,sPe,vc,WM,kve,cL,PEr,Sve,IEr,lPe,dr,fL,qEr,Fc,NEr,zH,jEr,DEr,QH,GEr,OEr,VEr,mL,XEr,Rve,zEr,QEr,WEr,It,gL,HEr,Bve,UEr,JEr,Tc,YEr,Pve,KEr,ZEr,WH,e5r,o5r,r5r,HM,t5r,Ir,hL,a5r,Ive,n5r,s5r,dn,l5r,qve,i5r,d5r,Nve,c5r,f5r,jve,m5r,g5r,h5r,Hr,UM,Dve,p5r,u5r,HH,_5r,b5r,v5r,JM,Gve,F5r,T5r,UH,M5r,E5r,C5r,YM,Ove,w5r,A5r,JH,y5r,L5r,x5r,KM,Vve,$5r,k5r,YH,S5r,R5r,B5r,ZM,Xve,P5r,I5r,KH,q5r,N5r,j5r,eE,iPe,Mc,oE,zve,pL,D5r,Qve,G5r,dPe,cr,uL,O5r,Ec,V5r,ZH,X5r,z5r,eU,Q5r,W5r,H5r,_L,U5r,Wve,J5r,Y5r,K5r,qt,bL,Z5r,Hve,eCr,oCr,Cc,rCr,Uve,tCr,aCr,oU,nCr,sCr,lCr,rE,iCr,qr,vL,dCr,Jve,cCr,fCr,cn,mCr,Yve,gCr,hCr,Kve,pCr,uCr,Zve,_Cr,bCr,vCr,Me,tE,eFe,FCr,TCr,rU,MCr,ECr,CCr,aE,oFe,wCr,ACr,tU,yCr,LCr,xCr,nE,rFe,$Cr,kCr,aU,SCr,RCr,BCr,sE,tFe,PCr,ICr,nU,qCr,NCr,jCr,lE,aFe,DCr,GCr,sU,OCr,VCr,XCr,iE,nFe,zCr,QCr,lU,WCr,HCr,UCr,dE,sFe,JCr,YCr,iU,KCr,ZCr,e3r,cE,lFe,o3r,r3r,dU,t3r,a3r,n3r,fE,iFe,s3r,l3r,cU,i3r,d3r,c3r,mE,dFe,f3r,m3r,fU,g3r,h3r,p3r,gE,cFe,u3r,_3r,mU,b3r,v3r,F3r,hE,fFe,T3r,M3r,gU,E3r,C3r,w3r,pE,cPe,wc,uE,mFe,FL,A3r,gFe,y3r,fPe,fr,TL,L3r,Ac,x3r,hU,$3r,k3r,pU,S3r,R3r,B3r,ML,P3r,hFe,I3r,q3r,N3r,Nt,EL,j3r,pFe,D3r,G3r,yc,O3r,uFe,V3r,X3r,uU,z3r,Q3r,W3r,_E,H3r,Nr,CL,U3r,_Fe,J3r,Y3r,fn,K3r,bFe,Z3r,ewr,vFe,owr,rwr,FFe,twr,awr,nwr,Le,bE,TFe,swr,lwr,_U,iwr,dwr,cwr,vE,MFe,fwr,mwr,bU,gwr,hwr,pwr,FE,EFe,uwr,_wr,vU,bwr,vwr,Fwr,TE,CFe,Twr,Mwr,FU,Ewr,Cwr,wwr,ME,wFe,Awr,ywr,TU,Lwr,xwr,$wr,EE,AFe,kwr,Swr,MU,Rwr,Bwr,Pwr,CE,yFe,Iwr,qwr,EU,Nwr,jwr,Dwr,wE,LFe,Gwr,Owr,CU,Vwr,Xwr,zwr,AE,xFe,Qwr,Wwr,wU,Hwr,Uwr,Jwr,yE,$Fe,Ywr,Kwr,AU,Zwr,eAr,oAr,LE,mPe,Lc,xE,kFe,wL,rAr,SFe,tAr,gPe,mr,AL,aAr,xc,nAr,yU,sAr,lAr,LU,iAr,dAr,cAr,yL,fAr,RFe,mAr,gAr,hAr,jt,LL,pAr,BFe,uAr,_Ar,$c,bAr,PFe,vAr,FAr,xU,TAr,MAr,EAr,$E,CAr,jr,xL,wAr,IFe,AAr,yAr,mn,LAr,qFe,xAr,$Ar,NFe,kAr,SAr,jFe,RAr,BAr,PAr,ke,kE,DFe,IAr,qAr,$U,NAr,jAr,DAr,SE,GFe,GAr,OAr,kU,VAr,XAr,zAr,RE,OFe,QAr,WAr,SU,HAr,UAr,JAr,BE,VFe,YAr,KAr,RU,ZAr,e0r,o0r,PE,XFe,r0r,t0r,BU,a0r,n0r,s0r,IE,zFe,l0r,i0r,PU,d0r,c0r,f0r,qE,QFe,m0r,g0r,IU,h0r,p0r,u0r,NE,WFe,_0r,b0r,qU,v0r,F0r,T0r,jE,HFe,M0r,E0r,NU,C0r,w0r,A0r,DE,hPe,kc,GE,UFe,$L,y0r,JFe,L0r,pPe,gr,kL,x0r,Sc,$0r,jU,k0r,S0r,DU,R0r,B0r,P0r,SL,I0r,YFe,q0r,N0r,j0r,Dt,RL,D0r,KFe,G0r,O0r,Rc,V0r,ZFe,X0r,z0r,GU,Q0r,W0r,H0r,OE,U0r,Dr,BL,J0r,e6e,Y0r,K0r,gn,Z0r,o6e,eyr,oyr,r6e,ryr,tyr,t6e,ayr,nyr,syr,xe,VE,a6e,lyr,iyr,OU,dyr,cyr,fyr,XE,n6e,myr,gyr,VU,hyr,pyr,uyr,zE,s6e,_yr,byr,XU,vyr,Fyr,Tyr,QE,l6e,Myr,Eyr,zU,Cyr,wyr,Ayr,WE,i6e,yyr,Lyr,QU,xyr,$yr,kyr,HE,d6e,Syr,Ryr,WU,Byr,Pyr,Iyr,UE,c6e,qyr,Nyr,HU,jyr,Dyr,Gyr,JE,f6e,Oyr,Vyr,UU,Xyr,zyr,Qyr,YE,m6e,Wyr,Hyr,JU,Uyr,Jyr,Yyr,KE,g6e,Kyr,Zyr,YU,eLr,oLr,rLr,ZE,uPe,Bc,e5,h6e,PL,tLr,p6e,aLr,_Pe,hr,IL,nLr,Pc,sLr,KU,lLr,iLr,ZU,dLr,cLr,fLr,qL,mLr,u6e,gLr,hLr,pLr,Gt,NL,uLr,_6e,_Lr,bLr,Ic,vLr,b6e,FLr,TLr,eJ,MLr,ELr,CLr,o5,wLr,Gr,jL,ALr,v6e,yLr,LLr,hn,xLr,F6e,$Lr,kLr,T6e,SLr,RLr,M6e,BLr,PLr,ILr,$e,r5,E6e,qLr,NLr,oJ,jLr,DLr,GLr,t5,C6e,OLr,VLr,rJ,XLr,zLr,QLr,a5,w6e,WLr,HLr,tJ,ULr,JLr,YLr,n5,A6e,KLr,ZLr,aJ,e8r,o8r,r8r,s5,y6e,t8r,a8r,nJ,n8r,s8r,l8r,l5,L6e,i8r,d8r,sJ,c8r,f8r,m8r,i5,x6e,g8r,h8r,lJ,p8r,u8r,_8r,d5,$6e,b8r,v8r,iJ,F8r,T8r,M8r,c5,k6e,E8r,C8r,dJ,w8r,A8r,y8r,f5,S6e,L8r,x8r,cJ,$8r,k8r,S8r,m5,bPe,qc,g5,R6e,DL,R8r,B6e,B8r,vPe,pr,GL,P8r,Nc,I8r,fJ,q8r,N8r,mJ,j8r,D8r,G8r,OL,O8r,P6e,V8r,X8r,z8r,Ot,VL,Q8r,I6e,W8r,H8r,jc,U8r,q6e,J8r,Y8r,gJ,K8r,Z8r,exr,h5,oxr,Or,XL,rxr,N6e,txr,axr,pn,nxr,j6e,sxr,lxr,D6e,ixr,dxr,G6e,cxr,fxr,mxr,je,p5,O6e,gxr,hxr,hJ,pxr,uxr,_xr,u5,V6e,bxr,vxr,pJ,Fxr,Txr,Mxr,_5,X6e,Exr,Cxr,uJ,wxr,Axr,yxr,b5,z6e,Lxr,xxr,_J,$xr,kxr,Sxr,v5,Q6e,Rxr,Bxr,bJ,Pxr,Ixr,qxr,F5,W6e,Nxr,jxr,vJ,Dxr,Gxr,Oxr,T5,H6e,Vxr,Xxr,FJ,zxr,Qxr,Wxr,M5,U6e,Hxr,Uxr,TJ,Jxr,Yxr,Kxr,E5,FPe,Dc,C5,J6e,zL,Zxr,Y6e,e$r,TPe,ur,QL,o$r,Gc,r$r,MJ,t$r,a$r,EJ,n$r,s$r,l$r,WL,i$r,K6e,d$r,c$r,f$r,Vt,HL,m$r,Z6e,g$r,h$r,Oc,p$r,eTe,u$r,_$r,CJ,b$r,v$r,F$r,w5,T$r,Vr,UL,M$r,oTe,E$r,C$r,un,w$r,rTe,A$r,y$r,tTe,L$r,x$r,aTe,$$r,k$r,S$r,De,A5,nTe,R$r,B$r,wJ,P$r,I$r,q$r,y5,sTe,N$r,j$r,AJ,D$r,G$r,O$r,L5,lTe,V$r,X$r,yJ,z$r,Q$r,W$r,x5,iTe,H$r,U$r,LJ,J$r,Y$r,K$r,$5,dTe,Z$r,ekr,xJ,okr,rkr,tkr,k5,cTe,akr,nkr,$J,skr,lkr,ikr,S5,fTe,dkr,ckr,kJ,fkr,mkr,gkr,R5,mTe,hkr,pkr,SJ,ukr,_kr,bkr,B5,MPe,Vc,P5,gTe,JL,vkr,hTe,Fkr,EPe,_r,YL,Tkr,Xc,Mkr,RJ,Ekr,Ckr,BJ,wkr,Akr,ykr,KL,Lkr,pTe,xkr,$kr,kkr,Xt,ZL,Skr,uTe,Rkr,Bkr,zc,Pkr,_Te,Ikr,qkr,PJ,Nkr,jkr,Dkr,I5,Gkr,Xr,e8,Okr,bTe,Vkr,Xkr,_n,zkr,vTe,Qkr,Wkr,FTe,Hkr,Ukr,TTe,Jkr,Ykr,Kkr,MTe,q5,ETe,Zkr,eSr,IJ,oSr,rSr,tSr,N5,CPe,Qc,j5,CTe,o8,aSr,wTe,nSr,wPe,br,r8,sSr,Wc,lSr,qJ,iSr,dSr,NJ,cSr,fSr,mSr,t8,gSr,ATe,hSr,pSr,uSr,zt,a8,_Sr,yTe,bSr,vSr,Hc,FSr,LTe,TSr,MSr,jJ,ESr,CSr,wSr,D5,ASr,zr,n8,ySr,xTe,LSr,xSr,bn,$Sr,$Te,kSr,SSr,kTe,RSr,BSr,STe,PSr,ISr,qSr,s8,G5,RTe,NSr,jSr,DJ,DSr,GSr,OSr,O5,BTe,VSr,XSr,GJ,zSr,QSr,WSr,V5,APe,Uc,X5,PTe,l8,HSr,ITe,USr,yPe,vr,i8,JSr,Jc,YSr,OJ,KSr,ZSr,VJ,eRr,oRr,rRr,d8,tRr,qTe,aRr,nRr,sRr,Qt,c8,lRr,NTe,iRr,dRr,Yc,cRr,jTe,fRr,mRr,XJ,gRr,hRr,pRr,z5,uRr,Qr,f8,_Rr,DTe,bRr,vRr,vn,FRr,GTe,TRr,MRr,OTe,ERr,CRr,VTe,wRr,ARr,yRr,XTe,Q5,zTe,LRr,xRr,zJ,$Rr,kRr,SRr,W5,LPe;return d=new ee({}),ba=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),gw=new ee({}),hw=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),sf=new RRr({props:{warning:!0,$$slots:{default:[iMt]},$$scope:{ctx:A}}}),pw=new ee({}),uw=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/configuration_auto.py#L560"}}),vw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/configuration_auto.py#L583"}}),tg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[dMt]},$$scope:{ctx:A}}}),Fw=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/configuration_auto.py#L705"}}),Tw=new ee({}),Mw=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/tokenization_auto.py#L377"}}),ww=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16974/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/tokenization_auto.py#L391"}}),Pg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[cMt]},$$scope:{ctx:A}}}),Aw=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/tokenization_auto.py#L587"}}),yw=new ee({}),Lw=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/feature_extraction_auto.py#L176"}}),kw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16974/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/feature_extraction_auto.py#L190"}}),lh=new RRr({props:{$$slots:{default:[fMt]},$$scope:{ctx:A}}}),ih=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[mMt]},$$scope:{ctx:A}}}),Sw=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/feature_extraction_auto.py#L317"}}),Rw=new ee({}),Bw=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/processing_auto.py#L76"}}),qw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/processing_auto.py#L90"}}),wh=new RRr({props:{$$slots:{default:[gMt]},$$scope:{ctx:A}}}),Ah=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[hMt]},$$scope:{ctx:A}}}),Nw=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/processing_auto.py#L243"}}),jw=new ee({}),Dw=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L714"}}),Ow=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),xh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[pMt]},$$scope:{ctx:A}}}),Vw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),uu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[uMt]},$$scope:{ctx:A}}}),Xw=new ee({}),zw=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L721"}}),Ww=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),bu=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[_Mt]},$$scope:{ctx:A}}}),Hw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),n_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[bMt]},$$scope:{ctx:A}}}),Uw=new ee({}),Jw=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L736"}}),Kw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),l_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[vMt]},$$scope:{ctx:A}}}),Zw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),X_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[FMt]},$$scope:{ctx:A}}}),eA=new ee({}),oA=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L743"}}),tA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),Q_=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[TMt]},$$scope:{ctx:A}}}),aA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),x1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[MMt]},$$scope:{ctx:A}}}),nA=new ee({}),sA=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L750"}}),iA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),k1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[EMt]},$$scope:{ctx:A}}}),dA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),J1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[CMt]},$$scope:{ctx:A}}}),cA=new ee({}),fA=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L759"}}),gA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),K1=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[wMt]},$$scope:{ctx:A}}}),hA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),Wb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[AMt]},$$scope:{ctx:A}}}),pA=new ee({}),uA=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L793"}}),bA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),Ub=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[yMt]},$$scope:{ctx:A}}}),vA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),w4=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[LMt]},$$scope:{ctx:A}}}),FA=new ee({}),TA=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L800"}}),EA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),y4=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[xMt]},$$scope:{ctx:A}}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),B4=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[$Mt]},$$scope:{ctx:A}}}),wA=new ee({}),AA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L786"}}),LA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),I4=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[kMt]},$$scope:{ctx:A}}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),_2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[SMt]},$$scope:{ctx:A}}}),$A=new ee({}),kA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L768"}}),RA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),v2=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[RMt]},$$scope:{ctx:A}}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),sv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[BMt]},$$scope:{ctx:A}}}),PA=new ee({}),IA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L775"}}),NA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),iv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[PMt]},$$scope:{ctx:A}}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),fv=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[IMt]},$$scope:{ctx:A}}}),DA=new ee({}),GA=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L809"}}),VA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),gv=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[qMt]},$$scope:{ctx:A}}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),Av=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[NMt]},$$scope:{ctx:A}}}),zA=new ee({}),QA=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L848"}}),HA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),Lv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[jMt]},$$scope:{ctx:A}}}),UA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[DMt]},$$scope:{ctx:A}}}),JA=new ee({}),YA=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L855"}}),ZA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[GMt]},$$scope:{ctx:A}}}),e0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),Vv=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[OMt]},$$scope:{ctx:A}}}),o0=new ee({}),r0=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L878"}}),a0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),zv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[VMt]},$$scope:{ctx:A}}}),n0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),Yv=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[XMt]},$$scope:{ctx:A}}}),s0=new ee({}),l0=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L862"}}),d0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),Zv=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[zMt]},$$scope:{ctx:A}}}),c0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),dF=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[QMt]},$$scope:{ctx:A}}}),f0=new ee({}),m0=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L869"}}),h0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),fF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[WMt]},$$scope:{ctx:A}}}),p0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),pF=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[HMt]},$$scope:{ctx:A}}}),_0=new ee({}),b0=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L887"}}),F0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),_F=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[UMt]},$$scope:{ctx:A}}}),T0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),EF=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[JMt]},$$scope:{ctx:A}}}),M0=new ee({}),E0=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L894"}}),w0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),wF=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[YMt]},$$scope:{ctx:A}}}),A0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),$F=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[KMt]},$$scope:{ctx:A}}}),y0=new ee({}),L0=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L841"}}),$0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),SF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[ZMt]},$$scope:{ctx:A}}}),k0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),PF=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[eEt]},$$scope:{ctx:A}}}),S0=new ee({}),R0=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L816"}}),P0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),qF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[oEt]},$$scope:{ctx:A}}}),I0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[rEt]},$$scope:{ctx:A}}}),q0=new ee({}),N0=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L823"}}),D0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[tEt]},$$scope:{ctx:A}}}),G0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),HF=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[aEt]},$$scope:{ctx:A}}}),O0=new ee({}),V0=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_auto.py#L832"}}),z0=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),JF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[nEt]},$$scope:{ctx:A}}}),Q0=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),ZF=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[sEt]},$$scope:{ctx:A}}}),W0=new ee({}),H0=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),J0=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),o6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[lEt]},$$scope:{ctx:A}}}),Y0=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),z6=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[iEt]},$$scope:{ctx:A}}}),K0=new ee({}),Z0=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L388"}}),oy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),W6=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[dEt]},$$scope:{ctx:A}}}),ry=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),_T=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[cEt]},$$scope:{ctx:A}}}),ty=new ee({}),ay=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),sy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),vT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[fEt]},$$scope:{ctx:A}}}),ly=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),ST=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[mEt]},$$scope:{ctx:A}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),fy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),BT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[gEt]},$$scope:{ctx:A}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),qT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[hEt]},$$scope:{ctx:A}}}),hy=new ee({}),py=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L426"}}),_y=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),jT=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[pEt]},$$scope:{ctx:A}}}),by=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),s7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[uEt]},$$scope:{ctx:A}}}),vy=new ee({}),Fy=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),My=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),i7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[_Et]},$$scope:{ctx:A}}}),Ey=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),v7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[bEt]},$$scope:{ctx:A}}}),Cy=new ee({}),wy=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),yy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),T7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[vEt]},$$scope:{ctx:A}}}),Ly=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),H7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[FEt]},$$scope:{ctx:A}}}),xy=new ee({}),$y=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L478"}}),Sy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),J7=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[TEt]},$$scope:{ctx:A}}}),Ry=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),h9=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[MEt]},$$scope:{ctx:A}}}),By=new ee({}),Py=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L458"}}),qy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),u9=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[EEt]},$$scope:{ctx:A}}}),Ny=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),b9=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[CEt]},$$scope:{ctx:A}}}),jy=new ee({}),Dy=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),Oy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),F9=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[wEt]},$$scope:{ctx:A}}}),Vy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),G9=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[AEt]},$$scope:{ctx:A}}}),Xy=new ee({}),zy=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L451"}}),Wy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),V9=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[yEt]},$$scope:{ctx:A}}}),Hy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),cM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[LEt]},$$scope:{ctx:A}}}),Uy=new ee({}),Jy=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L419"}}),Ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),mM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[xEt]},$$scope:{ctx:A}}}),Zy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),hM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[$Et]},$$scope:{ctx:A}}}),eL=new ee({}),oL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_tf_auto.py#L494"}}),tL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),uM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[kEt]},$$scope:{ctx:A}}}),aL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),bM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[SEt]},$$scope:{ctx:A}}}),nL=new ee({}),sL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),iL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),FM=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[REt]},$$scope:{ctx:A}}}),dL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),QM=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[BEt]},$$scope:{ctx:A}}}),cL=new ee({}),fL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),gL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),HM=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[PEt]},$$scope:{ctx:A}}}),hL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[IEt]},$$scope:{ctx:A}}}),pL=new ee({}),uL=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),bL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[qEt]},$$scope:{ctx:A}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),pE=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[NEt]},$$scope:{ctx:A}}}),FL=new ee({}),TL=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),EL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),_E=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[jEt]},$$scope:{ctx:A}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),LE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[DEt]},$$scope:{ctx:A}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),LL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),$E=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[GEt]},$$scope:{ctx:A}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),DE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[OEt]},$$scope:{ctx:A}}}),$L=new ee({}),kL=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),RL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),OE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[VEt]},$$scope:{ctx:A}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),ZE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[XEt]},$$scope:{ctx:A}}}),PL=new ee({}),IL=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),NL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),o5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[zEt]},$$scope:{ctx:A}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),m5=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[QEt]},$$scope:{ctx:A}}}),DL=new ee({}),GL=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),VL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),h5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[WEt]},$$scope:{ctx:A}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),E5=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[HEt]},$$scope:{ctx:A}}}),zL=new ee({}),QL=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),HL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),w5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[UEt]},$$scope:{ctx:A}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),B5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[JEt]},$$scope:{ctx:A}}}),JL=new ee({}),YL=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),I5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[YEt]},$$scope:{ctx:A}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),N5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[KEt]},$$scope:{ctx:A}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),a8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),D5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[ZEt]},$$scope:{ctx:A}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),V5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[e5t]},$$scope:{ctx:A}}}),l8=new ee({}),i8=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),c8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L389"}}),z5=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[o5t]},$$scope:{ctx:A}}}),f8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16974/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16974/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16974/src/transformers/models/auto/auto_factory.py#L417"}}),W5=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[r5t]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Fo=a("span"),oi=o("Auto Classes"),of=l(),Yr=a("p"),ri=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=a("code"),dw=o("from_pretrained()"),rf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Ie=l(),Oe=a("p"),ai=o("Instantiating one of "),Tn=a("a"),cw=o("AutoConfig"),Mn=o(", "),En=a("a"),fw=o("AutoModel"),ni=o(`, and
`),Cn=a("a"),mw=o("AutoTokenizer"),si=o(" will directly create a class of the relevant architecture. For instance"),tf=l(),F(ba.$$.fragment),Ve=l(),Ae=a("p"),Cx=o("will create a model that is an instance of "),li=a("a"),wx=o("BertModel"),Ax=o("."),To=l(),va=a("p"),yx=o("There is one class of "),af=a("code"),Lx=o("AutoModel"),Rqe=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),yRe=l(),ii=a("h2"),nf=a("a"),IK=a("span"),F(gw.$$.fragment),Bqe=l(),qK=a("span"),Pqe=o("Extending the Auto Classes"),LRe=l(),wn=a("p"),Iqe=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),NK=a("code"),qqe=o("NewModel"),Nqe=o(", make sure you have a "),jK=a("code"),jqe=o("NewModelConfig"),Dqe=o(` then you can add those to the auto
classes like this:`),xRe=l(),F(hw.$$.fragment),$Re=l(),xx=a("p"),Gqe=o("You will then be able to use the auto classes like you would usually do!"),kRe=l(),F(sf.$$.fragment),SRe=l(),di=a("h2"),lf=a("a"),DK=a("span"),F(pw.$$.fragment),Oqe=l(),GK=a("span"),Vqe=o("AutoConfig"),RRe=l(),Mo=a("div"),F(uw.$$.fragment),Xqe=l(),_w=a("p"),zqe=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$x=a("a"),Qqe=o("from_pretrained()"),Wqe=o(" class method."),Hqe=l(),bw=a("p"),Uqe=o("This class cannot be instantiated directly using "),OK=a("code"),Jqe=o("__init__()"),Yqe=o(" (throws an error)."),Kqe=l(),Fr=a("div"),F(vw.$$.fragment),Zqe=l(),VK=a("p"),eNe=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),oNe=l(),ci=a("p"),rNe=o("The configuration class to instantiate is selected based on the "),XK=a("code"),tNe=o("model_type"),aNe=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zK=a("code"),nNe=o("pretrained_model_name_or_path"),sNe=o(":"),lNe=l(),y=a("ul"),df=a("li"),QK=a("strong"),iNe=o("albert"),dNe=o(" \u2014 "),kx=a("a"),cNe=o("AlbertConfig"),fNe=o(" (ALBERT model)"),mNe=l(),cf=a("li"),WK=a("strong"),gNe=o("bart"),hNe=o(" \u2014 "),Sx=a("a"),pNe=o("BartConfig"),uNe=o(" (BART model)"),_Ne=l(),ff=a("li"),HK=a("strong"),bNe=o("beit"),vNe=o(" \u2014 "),Rx=a("a"),FNe=o("BeitConfig"),TNe=o(" (BEiT model)"),MNe=l(),mf=a("li"),UK=a("strong"),ENe=o("bert"),CNe=o(" \u2014 "),Bx=a("a"),wNe=o("BertConfig"),ANe=o(" (BERT model)"),yNe=l(),gf=a("li"),JK=a("strong"),LNe=o("bert-generation"),xNe=o(" \u2014 "),Px=a("a"),$Ne=o("BertGenerationConfig"),kNe=o(" (Bert Generation model)"),SNe=l(),hf=a("li"),YK=a("strong"),RNe=o("big_bird"),BNe=o(" \u2014 "),Ix=a("a"),PNe=o("BigBirdConfig"),INe=o(" (BigBird model)"),qNe=l(),pf=a("li"),KK=a("strong"),NNe=o("bigbird_pegasus"),jNe=o(" \u2014 "),qx=a("a"),DNe=o("BigBirdPegasusConfig"),GNe=o(" (BigBirdPegasus model)"),ONe=l(),uf=a("li"),ZK=a("strong"),VNe=o("blenderbot"),XNe=o(" \u2014 "),Nx=a("a"),zNe=o("BlenderbotConfig"),QNe=o(" (Blenderbot model)"),WNe=l(),_f=a("li"),eZ=a("strong"),HNe=o("blenderbot-small"),UNe=o(" \u2014 "),jx=a("a"),JNe=o("BlenderbotSmallConfig"),YNe=o(" (BlenderbotSmall model)"),KNe=l(),bf=a("li"),oZ=a("strong"),ZNe=o("camembert"),eje=o(" \u2014 "),Dx=a("a"),oje=o("CamembertConfig"),rje=o(" (CamemBERT model)"),tje=l(),vf=a("li"),rZ=a("strong"),aje=o("canine"),nje=o(" \u2014 "),Gx=a("a"),sje=o("CanineConfig"),lje=o(" (Canine model)"),ije=l(),Ff=a("li"),tZ=a("strong"),dje=o("clip"),cje=o(" \u2014 "),Ox=a("a"),fje=o("CLIPConfig"),mje=o(" (CLIP model)"),gje=l(),Tf=a("li"),aZ=a("strong"),hje=o("convbert"),pje=o(" \u2014 "),Vx=a("a"),uje=o("ConvBertConfig"),_je=o(" (ConvBERT model)"),bje=l(),Mf=a("li"),nZ=a("strong"),vje=o("convnext"),Fje=o(" \u2014 "),Xx=a("a"),Tje=o("ConvNextConfig"),Mje=o(" (ConvNext model)"),Eje=l(),Ef=a("li"),sZ=a("strong"),Cje=o("ctrl"),wje=o(" \u2014 "),zx=a("a"),Aje=o("CTRLConfig"),yje=o(" (CTRL model)"),Lje=l(),Cf=a("li"),lZ=a("strong"),xje=o("data2vec-audio"),$je=o(" \u2014 "),Qx=a("a"),kje=o("Data2VecAudioConfig"),Sje=o(" (Data2VecAudio model)"),Rje=l(),wf=a("li"),iZ=a("strong"),Bje=o("data2vec-text"),Pje=o(" \u2014 "),Wx=a("a"),Ije=o("Data2VecTextConfig"),qje=o(" (Data2VecText model)"),Nje=l(),Af=a("li"),dZ=a("strong"),jje=o("data2vec-vision"),Dje=o(" \u2014 "),Hx=a("a"),Gje=o("Data2VecVisionConfig"),Oje=o(" (Data2VecVision model)"),Vje=l(),yf=a("li"),cZ=a("strong"),Xje=o("deberta"),zje=o(" \u2014 "),Ux=a("a"),Qje=o("DebertaConfig"),Wje=o(" (DeBERTa model)"),Hje=l(),Lf=a("li"),fZ=a("strong"),Uje=o("deberta-v2"),Jje=o(" \u2014 "),Jx=a("a"),Yje=o("DebertaV2Config"),Kje=o(" (DeBERTa-v2 model)"),Zje=l(),xf=a("li"),mZ=a("strong"),eDe=o("decision_transformer"),oDe=o(" \u2014 "),Yx=a("a"),rDe=o("DecisionTransformerConfig"),tDe=o(" (Decision Transformer model)"),aDe=l(),$f=a("li"),gZ=a("strong"),nDe=o("deit"),sDe=o(" \u2014 "),Kx=a("a"),lDe=o("DeiTConfig"),iDe=o(" (DeiT model)"),dDe=l(),kf=a("li"),hZ=a("strong"),cDe=o("detr"),fDe=o(" \u2014 "),Zx=a("a"),mDe=o("DetrConfig"),gDe=o(" (DETR model)"),hDe=l(),Sf=a("li"),pZ=a("strong"),pDe=o("distilbert"),uDe=o(" \u2014 "),e$=a("a"),_De=o("DistilBertConfig"),bDe=o(" (DistilBERT model)"),vDe=l(),Rf=a("li"),uZ=a("strong"),FDe=o("dpr"),TDe=o(" \u2014 "),o$=a("a"),MDe=o("DPRConfig"),EDe=o(" (DPR model)"),CDe=l(),Bf=a("li"),_Z=a("strong"),wDe=o("dpt"),ADe=o(" \u2014 "),r$=a("a"),yDe=o("DPTConfig"),LDe=o(" (DPT model)"),xDe=l(),Pf=a("li"),bZ=a("strong"),$De=o("electra"),kDe=o(" \u2014 "),t$=a("a"),SDe=o("ElectraConfig"),RDe=o(" (ELECTRA model)"),BDe=l(),If=a("li"),vZ=a("strong"),PDe=o("encoder-decoder"),IDe=o(" \u2014 "),a$=a("a"),qDe=o("EncoderDecoderConfig"),NDe=o(" (Encoder decoder model)"),jDe=l(),qf=a("li"),FZ=a("strong"),DDe=o("flaubert"),GDe=o(" \u2014 "),n$=a("a"),ODe=o("FlaubertConfig"),VDe=o(" (FlauBERT model)"),XDe=l(),Nf=a("li"),TZ=a("strong"),zDe=o("fnet"),QDe=o(" \u2014 "),s$=a("a"),WDe=o("FNetConfig"),HDe=o(" (FNet model)"),UDe=l(),jf=a("li"),MZ=a("strong"),JDe=o("fsmt"),YDe=o(" \u2014 "),l$=a("a"),KDe=o("FSMTConfig"),ZDe=o(" (FairSeq Machine-Translation model)"),eGe=l(),Df=a("li"),EZ=a("strong"),oGe=o("funnel"),rGe=o(" \u2014 "),i$=a("a"),tGe=o("FunnelConfig"),aGe=o(" (Funnel Transformer model)"),nGe=l(),Gf=a("li"),CZ=a("strong"),sGe=o("glpn"),lGe=o(" \u2014 "),d$=a("a"),iGe=o("GLPNConfig"),dGe=o(" (GLPN model)"),cGe=l(),Of=a("li"),wZ=a("strong"),fGe=o("gpt2"),mGe=o(" \u2014 "),c$=a("a"),gGe=o("GPT2Config"),hGe=o(" (OpenAI GPT-2 model)"),pGe=l(),Vf=a("li"),AZ=a("strong"),uGe=o("gpt_neo"),_Ge=o(" \u2014 "),f$=a("a"),bGe=o("GPTNeoConfig"),vGe=o(" (GPT Neo model)"),FGe=l(),Xf=a("li"),yZ=a("strong"),TGe=o("gptj"),MGe=o(" \u2014 "),m$=a("a"),EGe=o("GPTJConfig"),CGe=o(" (GPT-J model)"),wGe=l(),zf=a("li"),LZ=a("strong"),AGe=o("hubert"),yGe=o(" \u2014 "),g$=a("a"),LGe=o("HubertConfig"),xGe=o(" (Hubert model)"),$Ge=l(),Qf=a("li"),xZ=a("strong"),kGe=o("ibert"),SGe=o(" \u2014 "),h$=a("a"),RGe=o("IBertConfig"),BGe=o(" (I-BERT model)"),PGe=l(),Wf=a("li"),$Z=a("strong"),IGe=o("imagegpt"),qGe=o(" \u2014 "),p$=a("a"),NGe=o("ImageGPTConfig"),jGe=o(" (ImageGPT model)"),DGe=l(),Hf=a("li"),kZ=a("strong"),GGe=o("layoutlm"),OGe=o(" \u2014 "),u$=a("a"),VGe=o("LayoutLMConfig"),XGe=o(" (LayoutLM model)"),zGe=l(),Uf=a("li"),SZ=a("strong"),QGe=o("layoutlmv2"),WGe=o(" \u2014 "),_$=a("a"),HGe=o("LayoutLMv2Config"),UGe=o(" (LayoutLMv2 model)"),JGe=l(),Jf=a("li"),RZ=a("strong"),YGe=o("led"),KGe=o(" \u2014 "),b$=a("a"),ZGe=o("LEDConfig"),eOe=o(" (LED model)"),oOe=l(),Yf=a("li"),BZ=a("strong"),rOe=o("longformer"),tOe=o(" \u2014 "),v$=a("a"),aOe=o("LongformerConfig"),nOe=o(" (Longformer model)"),sOe=l(),Kf=a("li"),PZ=a("strong"),lOe=o("luke"),iOe=o(" \u2014 "),F$=a("a"),dOe=o("LukeConfig"),cOe=o(" (LUKE model)"),fOe=l(),Zf=a("li"),IZ=a("strong"),mOe=o("lxmert"),gOe=o(" \u2014 "),T$=a("a"),hOe=o("LxmertConfig"),pOe=o(" (LXMERT model)"),uOe=l(),em=a("li"),qZ=a("strong"),_Oe=o("m2m_100"),bOe=o(" \u2014 "),M$=a("a"),vOe=o("M2M100Config"),FOe=o(" (M2M100 model)"),TOe=l(),om=a("li"),NZ=a("strong"),MOe=o("marian"),EOe=o(" \u2014 "),E$=a("a"),COe=o("MarianConfig"),wOe=o(" (Marian model)"),AOe=l(),rm=a("li"),jZ=a("strong"),yOe=o("maskformer"),LOe=o(" \u2014 "),C$=a("a"),xOe=o("MaskFormerConfig"),$Oe=o(" (MaskFormer model)"),kOe=l(),tm=a("li"),DZ=a("strong"),SOe=o("mbart"),ROe=o(" \u2014 "),w$=a("a"),BOe=o("MBartConfig"),POe=o(" (mBART model)"),IOe=l(),am=a("li"),GZ=a("strong"),qOe=o("megatron-bert"),NOe=o(" \u2014 "),A$=a("a"),jOe=o("MegatronBertConfig"),DOe=o(" (MegatronBert model)"),GOe=l(),nm=a("li"),OZ=a("strong"),OOe=o("mobilebert"),VOe=o(" \u2014 "),y$=a("a"),XOe=o("MobileBertConfig"),zOe=o(" (MobileBERT model)"),QOe=l(),sm=a("li"),VZ=a("strong"),WOe=o("mpnet"),HOe=o(" \u2014 "),L$=a("a"),UOe=o("MPNetConfig"),JOe=o(" (MPNet model)"),YOe=l(),lm=a("li"),XZ=a("strong"),KOe=o("mt5"),ZOe=o(" \u2014 "),x$=a("a"),eVe=o("MT5Config"),oVe=o(" (mT5 model)"),rVe=l(),im=a("li"),zZ=a("strong"),tVe=o("nystromformer"),aVe=o(" \u2014 "),$$=a("a"),nVe=o("NystromformerConfig"),sVe=o(" (Nystromformer model)"),lVe=l(),dm=a("li"),QZ=a("strong"),iVe=o("openai-gpt"),dVe=o(" \u2014 "),k$=a("a"),cVe=o("OpenAIGPTConfig"),fVe=o(" (OpenAI GPT model)"),mVe=l(),cm=a("li"),WZ=a("strong"),gVe=o("pegasus"),hVe=o(" \u2014 "),S$=a("a"),pVe=o("PegasusConfig"),uVe=o(" (Pegasus model)"),_Ve=l(),fm=a("li"),HZ=a("strong"),bVe=o("perceiver"),vVe=o(" \u2014 "),R$=a("a"),FVe=o("PerceiverConfig"),TVe=o(" (Perceiver model)"),MVe=l(),mm=a("li"),UZ=a("strong"),EVe=o("plbart"),CVe=o(" \u2014 "),B$=a("a"),wVe=o("PLBartConfig"),AVe=o(" (PLBart model)"),yVe=l(),gm=a("li"),JZ=a("strong"),LVe=o("poolformer"),xVe=o(" \u2014 "),P$=a("a"),$Ve=o("PoolFormerConfig"),kVe=o(" (PoolFormer model)"),SVe=l(),hm=a("li"),YZ=a("strong"),RVe=o("prophetnet"),BVe=o(" \u2014 "),I$=a("a"),PVe=o("ProphetNetConfig"),IVe=o(" (ProphetNet model)"),qVe=l(),pm=a("li"),KZ=a("strong"),NVe=o("qdqbert"),jVe=o(" \u2014 "),q$=a("a"),DVe=o("QDQBertConfig"),GVe=o(" (QDQBert model)"),OVe=l(),um=a("li"),ZZ=a("strong"),VVe=o("rag"),XVe=o(" \u2014 "),N$=a("a"),zVe=o("RagConfig"),QVe=o(" (RAG model)"),WVe=l(),_m=a("li"),eee=a("strong"),HVe=o("realm"),UVe=o(" \u2014 "),j$=a("a"),JVe=o("RealmConfig"),YVe=o(" (Realm model)"),KVe=l(),bm=a("li"),oee=a("strong"),ZVe=o("reformer"),eXe=o(" \u2014 "),D$=a("a"),oXe=o("ReformerConfig"),rXe=o(" (Reformer model)"),tXe=l(),vm=a("li"),ree=a("strong"),aXe=o("regnet"),nXe=o(" \u2014 "),G$=a("a"),sXe=o("RegNetConfig"),lXe=o(" (RegNet model)"),iXe=l(),Fm=a("li"),tee=a("strong"),dXe=o("rembert"),cXe=o(" \u2014 "),O$=a("a"),fXe=o("RemBertConfig"),mXe=o(" (RemBERT model)"),gXe=l(),Tm=a("li"),aee=a("strong"),hXe=o("resnet"),pXe=o(" \u2014 "),V$=a("a"),uXe=o("ResNetConfig"),_Xe=o(" (ResNet model)"),bXe=l(),Mm=a("li"),nee=a("strong"),vXe=o("retribert"),FXe=o(" \u2014 "),X$=a("a"),TXe=o("RetriBertConfig"),MXe=o(" (RetriBERT model)"),EXe=l(),Em=a("li"),see=a("strong"),CXe=o("roberta"),wXe=o(" \u2014 "),z$=a("a"),AXe=o("RobertaConfig"),yXe=o(" (RoBERTa model)"),LXe=l(),Cm=a("li"),lee=a("strong"),xXe=o("roformer"),$Xe=o(" \u2014 "),Q$=a("a"),kXe=o("RoFormerConfig"),SXe=o(" (RoFormer model)"),RXe=l(),wm=a("li"),iee=a("strong"),BXe=o("segformer"),PXe=o(" \u2014 "),W$=a("a"),IXe=o("SegformerConfig"),qXe=o(" (SegFormer model)"),NXe=l(),Am=a("li"),dee=a("strong"),jXe=o("sew"),DXe=o(" \u2014 "),H$=a("a"),GXe=o("SEWConfig"),OXe=o(" (SEW model)"),VXe=l(),ym=a("li"),cee=a("strong"),XXe=o("sew-d"),zXe=o(" \u2014 "),U$=a("a"),QXe=o("SEWDConfig"),WXe=o(" (SEW-D model)"),HXe=l(),Lm=a("li"),fee=a("strong"),UXe=o("speech-encoder-decoder"),JXe=o(" \u2014 "),J$=a("a"),YXe=o("SpeechEncoderDecoderConfig"),KXe=o(" (Speech Encoder decoder model)"),ZXe=l(),xm=a("li"),mee=a("strong"),eze=o("speech_to_text"),oze=o(" \u2014 "),Y$=a("a"),rze=o("Speech2TextConfig"),tze=o(" (Speech2Text model)"),aze=l(),$m=a("li"),gee=a("strong"),nze=o("speech_to_text_2"),sze=o(" \u2014 "),K$=a("a"),lze=o("Speech2Text2Config"),ize=o(" (Speech2Text2 model)"),dze=l(),km=a("li"),hee=a("strong"),cze=o("splinter"),fze=o(" \u2014 "),Z$=a("a"),mze=o("SplinterConfig"),gze=o(" (Splinter model)"),hze=l(),Sm=a("li"),pee=a("strong"),pze=o("squeezebert"),uze=o(" \u2014 "),ek=a("a"),_ze=o("SqueezeBertConfig"),bze=o(" (SqueezeBERT model)"),vze=l(),Rm=a("li"),uee=a("strong"),Fze=o("swin"),Tze=o(" \u2014 "),ok=a("a"),Mze=o("SwinConfig"),Eze=o(" (Swin model)"),Cze=l(),Bm=a("li"),_ee=a("strong"),wze=o("t5"),Aze=o(" \u2014 "),rk=a("a"),yze=o("T5Config"),Lze=o(" (T5 model)"),xze=l(),Pm=a("li"),bee=a("strong"),$ze=o("tapas"),kze=o(" \u2014 "),tk=a("a"),Sze=o("TapasConfig"),Rze=o(" (TAPAS model)"),Bze=l(),Im=a("li"),vee=a("strong"),Pze=o("tapex"),Ize=o(" \u2014 "),ak=a("a"),qze=o("BartConfig"),Nze=o(" (TAPEX model)"),jze=l(),qm=a("li"),Fee=a("strong"),Dze=o("transfo-xl"),Gze=o(" \u2014 "),nk=a("a"),Oze=o("TransfoXLConfig"),Vze=o(" (Transformer-XL model)"),Xze=l(),Nm=a("li"),Tee=a("strong"),zze=o("trocr"),Qze=o(" \u2014 "),sk=a("a"),Wze=o("TrOCRConfig"),Hze=o(" (TrOCR model)"),Uze=l(),jm=a("li"),Mee=a("strong"),Jze=o("unispeech"),Yze=o(" \u2014 "),lk=a("a"),Kze=o("UniSpeechConfig"),Zze=o(" (UniSpeech model)"),eQe=l(),Dm=a("li"),Eee=a("strong"),oQe=o("unispeech-sat"),rQe=o(" \u2014 "),ik=a("a"),tQe=o("UniSpeechSatConfig"),aQe=o(" (UniSpeechSat model)"),nQe=l(),Gm=a("li"),Cee=a("strong"),sQe=o("van"),lQe=o(" \u2014 "),dk=a("a"),iQe=o("VanConfig"),dQe=o(" (VAN model)"),cQe=l(),Om=a("li"),wee=a("strong"),fQe=o("vilt"),mQe=o(" \u2014 "),ck=a("a"),gQe=o("ViltConfig"),hQe=o(" (ViLT model)"),pQe=l(),Vm=a("li"),Aee=a("strong"),uQe=o("vision-encoder-decoder"),_Qe=o(" \u2014 "),fk=a("a"),bQe=o("VisionEncoderDecoderConfig"),vQe=o(" (Vision Encoder decoder model)"),FQe=l(),Xm=a("li"),yee=a("strong"),TQe=o("vision-text-dual-encoder"),MQe=o(" \u2014 "),mk=a("a"),EQe=o("VisionTextDualEncoderConfig"),CQe=o(" (VisionTextDualEncoder model)"),wQe=l(),zm=a("li"),Lee=a("strong"),AQe=o("visual_bert"),yQe=o(" \u2014 "),gk=a("a"),LQe=o("VisualBertConfig"),xQe=o(" (VisualBert model)"),$Qe=l(),Qm=a("li"),xee=a("strong"),kQe=o("vit"),SQe=o(" \u2014 "),hk=a("a"),RQe=o("ViTConfig"),BQe=o(" (ViT model)"),PQe=l(),Wm=a("li"),$ee=a("strong"),IQe=o("vit_mae"),qQe=o(" \u2014 "),pk=a("a"),NQe=o("ViTMAEConfig"),jQe=o(" (ViTMAE model)"),DQe=l(),Hm=a("li"),kee=a("strong"),GQe=o("wav2vec2"),OQe=o(" \u2014 "),uk=a("a"),VQe=o("Wav2Vec2Config"),XQe=o(" (Wav2Vec2 model)"),zQe=l(),Um=a("li"),See=a("strong"),QQe=o("wavlm"),WQe=o(" \u2014 "),_k=a("a"),HQe=o("WavLMConfig"),UQe=o(" (WavLM model)"),JQe=l(),Jm=a("li"),Ree=a("strong"),YQe=o("xglm"),KQe=o(" \u2014 "),bk=a("a"),ZQe=o("XGLMConfig"),eWe=o(" (XGLM model)"),oWe=l(),Ym=a("li"),Bee=a("strong"),rWe=o("xlm"),tWe=o(" \u2014 "),vk=a("a"),aWe=o("XLMConfig"),nWe=o(" (XLM model)"),sWe=l(),Km=a("li"),Pee=a("strong"),lWe=o("xlm-prophetnet"),iWe=o(" \u2014 "),Fk=a("a"),dWe=o("XLMProphetNetConfig"),cWe=o(" (XLMProphetNet model)"),fWe=l(),Zm=a("li"),Iee=a("strong"),mWe=o("xlm-roberta"),gWe=o(" \u2014 "),Tk=a("a"),hWe=o("XLMRobertaConfig"),pWe=o(" (XLM-RoBERTa model)"),uWe=l(),eg=a("li"),qee=a("strong"),_We=o("xlm-roberta-xl"),bWe=o(" \u2014 "),Mk=a("a"),vWe=o("XLMRobertaXLConfig"),FWe=o(" (XLM-RoBERTa-XL model)"),TWe=l(),og=a("li"),Nee=a("strong"),MWe=o("xlnet"),EWe=o(" \u2014 "),Ek=a("a"),CWe=o("XLNetConfig"),wWe=o(" (XLNet model)"),AWe=l(),rg=a("li"),jee=a("strong"),yWe=o("yoso"),LWe=o(" \u2014 "),Ck=a("a"),xWe=o("YosoConfig"),$We=o(" (YOSO model)"),kWe=l(),F(tg.$$.fragment),SWe=l(),ag=a("div"),F(Fw.$$.fragment),RWe=l(),Dee=a("p"),BWe=o("Register a new configuration for this class."),BRe=l(),fi=a("h2"),ng=a("a"),Gee=a("span"),F(Tw.$$.fragment),PWe=l(),Oee=a("span"),IWe=o("AutoTokenizer"),PRe=l(),Eo=a("div"),F(Mw.$$.fragment),qWe=l(),Ew=a("p"),NWe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=a("a"),jWe=o("AutoTokenizer.from_pretrained()"),DWe=o(" class method."),GWe=l(),Cw=a("p"),OWe=o("This class cannot be instantiated directly using "),Vee=a("code"),VWe=o("__init__()"),XWe=o(" (throws an error)."),zWe=l(),Tr=a("div"),F(ww.$$.fragment),QWe=l(),Xee=a("p"),WWe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),HWe=l(),Fa=a("p"),UWe=o("The tokenizer class to instantiate is selected based on the "),zee=a("code"),JWe=o("model_type"),YWe=o(` property of the config object (either
passed as an argument or loaded from `),Qee=a("code"),KWe=o("pretrained_model_name_or_path"),ZWe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wee=a("code"),eHe=o("pretrained_model_name_or_path"),oHe=o(":"),rHe=l(),k=a("ul"),An=a("li"),Hee=a("strong"),tHe=o("albert"),aHe=o(" \u2014 "),Ak=a("a"),nHe=o("AlbertTokenizer"),sHe=o(" or "),yk=a("a"),lHe=o("AlbertTokenizerFast"),iHe=o(" (ALBERT model)"),dHe=l(),yn=a("li"),Uee=a("strong"),cHe=o("bart"),fHe=o(" \u2014 "),Lk=a("a"),mHe=o("BartTokenizer"),gHe=o(" or "),xk=a("a"),hHe=o("BartTokenizerFast"),pHe=o(" (BART model)"),uHe=l(),Ln=a("li"),Jee=a("strong"),_He=o("barthez"),bHe=o(" \u2014 "),$k=a("a"),vHe=o("BarthezTokenizer"),FHe=o(" or "),kk=a("a"),THe=o("BarthezTokenizerFast"),MHe=o(" (BARThez model)"),EHe=l(),sg=a("li"),Yee=a("strong"),CHe=o("bartpho"),wHe=o(" \u2014 "),Sk=a("a"),AHe=o("BartphoTokenizer"),yHe=o(" (BARTpho model)"),LHe=l(),xn=a("li"),Kee=a("strong"),xHe=o("bert"),$He=o(" \u2014 "),Rk=a("a"),kHe=o("BertTokenizer"),SHe=o(" or "),Bk=a("a"),RHe=o("BertTokenizerFast"),BHe=o(" (BERT model)"),PHe=l(),lg=a("li"),Zee=a("strong"),IHe=o("bert-generation"),qHe=o(" \u2014 "),Pk=a("a"),NHe=o("BertGenerationTokenizer"),jHe=o(" (Bert Generation model)"),DHe=l(),ig=a("li"),eoe=a("strong"),GHe=o("bert-japanese"),OHe=o(" \u2014 "),Ik=a("a"),VHe=o("BertJapaneseTokenizer"),XHe=o(" (BertJapanese model)"),zHe=l(),dg=a("li"),ooe=a("strong"),QHe=o("bertweet"),WHe=o(" \u2014 "),qk=a("a"),HHe=o("BertweetTokenizer"),UHe=o(" (Bertweet model)"),JHe=l(),$n=a("li"),roe=a("strong"),YHe=o("big_bird"),KHe=o(" \u2014 "),Nk=a("a"),ZHe=o("BigBirdTokenizer"),eUe=o(" or "),jk=a("a"),oUe=o("BigBirdTokenizerFast"),rUe=o(" (BigBird model)"),tUe=l(),kn=a("li"),toe=a("strong"),aUe=o("bigbird_pegasus"),nUe=o(" \u2014 "),Dk=a("a"),sUe=o("PegasusTokenizer"),lUe=o(" or "),Gk=a("a"),iUe=o("PegasusTokenizerFast"),dUe=o(" (BigBirdPegasus model)"),cUe=l(),Sn=a("li"),aoe=a("strong"),fUe=o("blenderbot"),mUe=o(" \u2014 "),Ok=a("a"),gUe=o("BlenderbotTokenizer"),hUe=o(" or "),Vk=a("a"),pUe=o("BlenderbotTokenizerFast"),uUe=o(" (Blenderbot model)"),_Ue=l(),cg=a("li"),noe=a("strong"),bUe=o("blenderbot-small"),vUe=o(" \u2014 "),Xk=a("a"),FUe=o("BlenderbotSmallTokenizer"),TUe=o(" (BlenderbotSmall model)"),MUe=l(),fg=a("li"),soe=a("strong"),EUe=o("byt5"),CUe=o(" \u2014 "),zk=a("a"),wUe=o("ByT5Tokenizer"),AUe=o(" (ByT5 model)"),yUe=l(),Rn=a("li"),loe=a("strong"),LUe=o("camembert"),xUe=o(" \u2014 "),Qk=a("a"),$Ue=o("CamembertTokenizer"),kUe=o(" or "),Wk=a("a"),SUe=o("CamembertTokenizerFast"),RUe=o(" (CamemBERT model)"),BUe=l(),mg=a("li"),ioe=a("strong"),PUe=o("canine"),IUe=o(" \u2014 "),Hk=a("a"),qUe=o("CanineTokenizer"),NUe=o(" (Canine model)"),jUe=l(),Bn=a("li"),doe=a("strong"),DUe=o("clip"),GUe=o(" \u2014 "),Uk=a("a"),OUe=o("CLIPTokenizer"),VUe=o(" or "),Jk=a("a"),XUe=o("CLIPTokenizerFast"),zUe=o(" (CLIP model)"),QUe=l(),Pn=a("li"),coe=a("strong"),WUe=o("convbert"),HUe=o(" \u2014 "),Yk=a("a"),UUe=o("ConvBertTokenizer"),JUe=o(" or "),Kk=a("a"),YUe=o("ConvBertTokenizerFast"),KUe=o(" (ConvBERT model)"),ZUe=l(),In=a("li"),foe=a("strong"),eJe=o("cpm"),oJe=o(" \u2014 "),Zk=a("a"),rJe=o("CpmTokenizer"),tJe=o(" or "),moe=a("code"),aJe=o("CpmTokenizerFast"),nJe=o(" (CPM model)"),sJe=l(),gg=a("li"),goe=a("strong"),lJe=o("ctrl"),iJe=o(" \u2014 "),eS=a("a"),dJe=o("CTRLTokenizer"),cJe=o(" (CTRL model)"),fJe=l(),qn=a("li"),hoe=a("strong"),mJe=o("data2vec-text"),gJe=o(" \u2014 "),oS=a("a"),hJe=o("RobertaTokenizer"),pJe=o(" or "),rS=a("a"),uJe=o("RobertaTokenizerFast"),_Je=o(" (Data2VecText model)"),bJe=l(),Nn=a("li"),poe=a("strong"),vJe=o("deberta"),FJe=o(" \u2014 "),tS=a("a"),TJe=o("DebertaTokenizer"),MJe=o(" or "),aS=a("a"),EJe=o("DebertaTokenizerFast"),CJe=o(" (DeBERTa model)"),wJe=l(),jn=a("li"),uoe=a("strong"),AJe=o("deberta-v2"),yJe=o(" \u2014 "),nS=a("a"),LJe=o("DebertaV2Tokenizer"),xJe=o(" or "),sS=a("a"),$Je=o("DebertaV2TokenizerFast"),kJe=o(" (DeBERTa-v2 model)"),SJe=l(),Dn=a("li"),_oe=a("strong"),RJe=o("distilbert"),BJe=o(" \u2014 "),lS=a("a"),PJe=o("DistilBertTokenizer"),IJe=o(" or "),iS=a("a"),qJe=o("DistilBertTokenizerFast"),NJe=o(" (DistilBERT model)"),jJe=l(),Gn=a("li"),boe=a("strong"),DJe=o("dpr"),GJe=o(" \u2014 "),dS=a("a"),OJe=o("DPRQuestionEncoderTokenizer"),VJe=o(" or "),cS=a("a"),XJe=o("DPRQuestionEncoderTokenizerFast"),zJe=o(" (DPR model)"),QJe=l(),On=a("li"),voe=a("strong"),WJe=o("electra"),HJe=o(" \u2014 "),fS=a("a"),UJe=o("ElectraTokenizer"),JJe=o(" or "),mS=a("a"),YJe=o("ElectraTokenizerFast"),KJe=o(" (ELECTRA model)"),ZJe=l(),hg=a("li"),Foe=a("strong"),eYe=o("flaubert"),oYe=o(" \u2014 "),gS=a("a"),rYe=o("FlaubertTokenizer"),tYe=o(" (FlauBERT model)"),aYe=l(),Vn=a("li"),Toe=a("strong"),nYe=o("fnet"),sYe=o(" \u2014 "),hS=a("a"),lYe=o("FNetTokenizer"),iYe=o(" or "),pS=a("a"),dYe=o("FNetTokenizerFast"),cYe=o(" (FNet model)"),fYe=l(),pg=a("li"),Moe=a("strong"),mYe=o("fsmt"),gYe=o(" \u2014 "),uS=a("a"),hYe=o("FSMTTokenizer"),pYe=o(" (FairSeq Machine-Translation model)"),uYe=l(),Xn=a("li"),Eoe=a("strong"),_Ye=o("funnel"),bYe=o(" \u2014 "),_S=a("a"),vYe=o("FunnelTokenizer"),FYe=o(" or "),bS=a("a"),TYe=o("FunnelTokenizerFast"),MYe=o(" (Funnel Transformer model)"),EYe=l(),zn=a("li"),Coe=a("strong"),CYe=o("gpt2"),wYe=o(" \u2014 "),vS=a("a"),AYe=o("GPT2Tokenizer"),yYe=o(" or "),FS=a("a"),LYe=o("GPT2TokenizerFast"),xYe=o(" (OpenAI GPT-2 model)"),$Ye=l(),Qn=a("li"),woe=a("strong"),kYe=o("gpt_neo"),SYe=o(" \u2014 "),TS=a("a"),RYe=o("GPT2Tokenizer"),BYe=o(" or "),MS=a("a"),PYe=o("GPT2TokenizerFast"),IYe=o(" (GPT Neo model)"),qYe=l(),Wn=a("li"),Aoe=a("strong"),NYe=o("gptj"),jYe=o(" \u2014 "),ES=a("a"),DYe=o("GPT2Tokenizer"),GYe=o(" or "),CS=a("a"),OYe=o("GPT2TokenizerFast"),VYe=o(" (GPT-J model)"),XYe=l(),Hn=a("li"),yoe=a("strong"),zYe=o("herbert"),QYe=o(" \u2014 "),wS=a("a"),WYe=o("HerbertTokenizer"),HYe=o(" or "),AS=a("a"),UYe=o("HerbertTokenizerFast"),JYe=o(" (HerBERT model)"),YYe=l(),ug=a("li"),Loe=a("strong"),KYe=o("hubert"),ZYe=o(" \u2014 "),yS=a("a"),eKe=o("Wav2Vec2CTCTokenizer"),oKe=o(" (Hubert model)"),rKe=l(),Un=a("li"),xoe=a("strong"),tKe=o("ibert"),aKe=o(" \u2014 "),LS=a("a"),nKe=o("RobertaTokenizer"),sKe=o(" or "),xS=a("a"),lKe=o("RobertaTokenizerFast"),iKe=o(" (I-BERT model)"),dKe=l(),Jn=a("li"),$oe=a("strong"),cKe=o("layoutlm"),fKe=o(" \u2014 "),$S=a("a"),mKe=o("LayoutLMTokenizer"),gKe=o(" or "),kS=a("a"),hKe=o("LayoutLMTokenizerFast"),pKe=o(" (LayoutLM model)"),uKe=l(),Yn=a("li"),koe=a("strong"),_Ke=o("layoutlmv2"),bKe=o(" \u2014 "),SS=a("a"),vKe=o("LayoutLMv2Tokenizer"),FKe=o(" or "),RS=a("a"),TKe=o("LayoutLMv2TokenizerFast"),MKe=o(" (LayoutLMv2 model)"),EKe=l(),Kn=a("li"),Soe=a("strong"),CKe=o("layoutxlm"),wKe=o(" \u2014 "),BS=a("a"),AKe=o("LayoutXLMTokenizer"),yKe=o(" or "),PS=a("a"),LKe=o("LayoutXLMTokenizerFast"),xKe=o(" (LayoutXLM model)"),$Ke=l(),Zn=a("li"),Roe=a("strong"),kKe=o("led"),SKe=o(" \u2014 "),IS=a("a"),RKe=o("LEDTokenizer"),BKe=o(" or "),qS=a("a"),PKe=o("LEDTokenizerFast"),IKe=o(" (LED model)"),qKe=l(),es=a("li"),Boe=a("strong"),NKe=o("longformer"),jKe=o(" \u2014 "),NS=a("a"),DKe=o("LongformerTokenizer"),GKe=o(" or "),jS=a("a"),OKe=o("LongformerTokenizerFast"),VKe=o(" (Longformer model)"),XKe=l(),_g=a("li"),Poe=a("strong"),zKe=o("luke"),QKe=o(" \u2014 "),DS=a("a"),WKe=o("LukeTokenizer"),HKe=o(" (LUKE model)"),UKe=l(),os=a("li"),Ioe=a("strong"),JKe=o("lxmert"),YKe=o(" \u2014 "),GS=a("a"),KKe=o("LxmertTokenizer"),ZKe=o(" or "),OS=a("a"),eZe=o("LxmertTokenizerFast"),oZe=o(" (LXMERT model)"),rZe=l(),bg=a("li"),qoe=a("strong"),tZe=o("m2m_100"),aZe=o(" \u2014 "),VS=a("a"),nZe=o("M2M100Tokenizer"),sZe=o(" (M2M100 model)"),lZe=l(),vg=a("li"),Noe=a("strong"),iZe=o("marian"),dZe=o(" \u2014 "),XS=a("a"),cZe=o("MarianTokenizer"),fZe=o(" (Marian model)"),mZe=l(),rs=a("li"),joe=a("strong"),gZe=o("mbart"),hZe=o(" \u2014 "),zS=a("a"),pZe=o("MBartTokenizer"),uZe=o(" or "),QS=a("a"),_Ze=o("MBartTokenizerFast"),bZe=o(" (mBART model)"),vZe=l(),ts=a("li"),Doe=a("strong"),FZe=o("mbart50"),TZe=o(" \u2014 "),WS=a("a"),MZe=o("MBart50Tokenizer"),EZe=o(" or "),HS=a("a"),CZe=o("MBart50TokenizerFast"),wZe=o(" (mBART-50 model)"),AZe=l(),as=a("li"),Goe=a("strong"),yZe=o("megatron-bert"),LZe=o(" \u2014 "),US=a("a"),xZe=o("BertTokenizer"),$Ze=o(" or "),JS=a("a"),kZe=o("BertTokenizerFast"),SZe=o(" (MegatronBert model)"),RZe=l(),Fg=a("li"),Ooe=a("strong"),BZe=o("mluke"),PZe=o(" \u2014 "),YS=a("a"),IZe=o("MLukeTokenizer"),qZe=o(" (mLUKE model)"),NZe=l(),ns=a("li"),Voe=a("strong"),jZe=o("mobilebert"),DZe=o(" \u2014 "),KS=a("a"),GZe=o("MobileBertTokenizer"),OZe=o(" or "),ZS=a("a"),VZe=o("MobileBertTokenizerFast"),XZe=o(" (MobileBERT model)"),zZe=l(),ss=a("li"),Xoe=a("strong"),QZe=o("mpnet"),WZe=o(" \u2014 "),eR=a("a"),HZe=o("MPNetTokenizer"),UZe=o(" or "),oR=a("a"),JZe=o("MPNetTokenizerFast"),YZe=o(" (MPNet model)"),KZe=l(),ls=a("li"),zoe=a("strong"),ZZe=o("mt5"),eeo=o(" \u2014 "),rR=a("a"),oeo=o("MT5Tokenizer"),reo=o(" or "),tR=a("a"),teo=o("MT5TokenizerFast"),aeo=o(" (mT5 model)"),neo=l(),is=a("li"),Qoe=a("strong"),seo=o("nystromformer"),leo=o(" \u2014 "),aR=a("a"),ieo=o("AlbertTokenizer"),deo=o(" or "),nR=a("a"),ceo=o("AlbertTokenizerFast"),feo=o(" (Nystromformer model)"),meo=l(),ds=a("li"),Woe=a("strong"),geo=o("openai-gpt"),heo=o(" \u2014 "),sR=a("a"),peo=o("OpenAIGPTTokenizer"),ueo=o(" or "),lR=a("a"),_eo=o("OpenAIGPTTokenizerFast"),beo=o(" (OpenAI GPT model)"),veo=l(),cs=a("li"),Hoe=a("strong"),Feo=o("pegasus"),Teo=o(" \u2014 "),iR=a("a"),Meo=o("PegasusTokenizer"),Eeo=o(" or "),dR=a("a"),Ceo=o("PegasusTokenizerFast"),weo=o(" (Pegasus model)"),Aeo=l(),Tg=a("li"),Uoe=a("strong"),yeo=o("perceiver"),Leo=o(" \u2014 "),cR=a("a"),xeo=o("PerceiverTokenizer"),$eo=o(" (Perceiver model)"),keo=l(),Mg=a("li"),Joe=a("strong"),Seo=o("phobert"),Reo=o(" \u2014 "),fR=a("a"),Beo=o("PhobertTokenizer"),Peo=o(" (PhoBERT model)"),Ieo=l(),Eg=a("li"),Yoe=a("strong"),qeo=o("plbart"),Neo=o(" \u2014 "),mR=a("a"),jeo=o("PLBartTokenizer"),Deo=o(" (PLBart model)"),Geo=l(),Cg=a("li"),Koe=a("strong"),Oeo=o("prophetnet"),Veo=o(" \u2014 "),gR=a("a"),Xeo=o("ProphetNetTokenizer"),zeo=o(" (ProphetNet model)"),Qeo=l(),fs=a("li"),Zoe=a("strong"),Weo=o("qdqbert"),Heo=o(" \u2014 "),hR=a("a"),Ueo=o("BertTokenizer"),Jeo=o(" or "),pR=a("a"),Yeo=o("BertTokenizerFast"),Keo=o(" (QDQBert model)"),Zeo=l(),wg=a("li"),ere=a("strong"),eoo=o("rag"),ooo=o(" \u2014 "),uR=a("a"),roo=o("RagTokenizer"),too=o(" (RAG model)"),aoo=l(),ms=a("li"),ore=a("strong"),noo=o("realm"),soo=o(" \u2014 "),_R=a("a"),loo=o("RealmTokenizer"),ioo=o(" or "),bR=a("a"),doo=o("RealmTokenizerFast"),coo=o(" (Realm model)"),foo=l(),gs=a("li"),rre=a("strong"),moo=o("reformer"),goo=o(" \u2014 "),vR=a("a"),hoo=o("ReformerTokenizer"),poo=o(" or "),FR=a("a"),uoo=o("ReformerTokenizerFast"),_oo=o(" (Reformer model)"),boo=l(),hs=a("li"),tre=a("strong"),voo=o("rembert"),Foo=o(" \u2014 "),TR=a("a"),Too=o("RemBertTokenizer"),Moo=o(" or "),MR=a("a"),Eoo=o("RemBertTokenizerFast"),Coo=o(" (RemBERT model)"),woo=l(),ps=a("li"),are=a("strong"),Aoo=o("retribert"),yoo=o(" \u2014 "),ER=a("a"),Loo=o("RetriBertTokenizer"),xoo=o(" or "),CR=a("a"),$oo=o("RetriBertTokenizerFast"),koo=o(" (RetriBERT model)"),Soo=l(),us=a("li"),nre=a("strong"),Roo=o("roberta"),Boo=o(" \u2014 "),wR=a("a"),Poo=o("RobertaTokenizer"),Ioo=o(" or "),AR=a("a"),qoo=o("RobertaTokenizerFast"),Noo=o(" (RoBERTa model)"),joo=l(),_s=a("li"),sre=a("strong"),Doo=o("roformer"),Goo=o(" \u2014 "),yR=a("a"),Ooo=o("RoFormerTokenizer"),Voo=o(" or "),LR=a("a"),Xoo=o("RoFormerTokenizerFast"),zoo=o(" (RoFormer model)"),Qoo=l(),Ag=a("li"),lre=a("strong"),Woo=o("speech_to_text"),Hoo=o(" \u2014 "),xR=a("a"),Uoo=o("Speech2TextTokenizer"),Joo=o(" (Speech2Text model)"),Yoo=l(),yg=a("li"),ire=a("strong"),Koo=o("speech_to_text_2"),Zoo=o(" \u2014 "),$R=a("a"),ero=o("Speech2Text2Tokenizer"),oro=o(" (Speech2Text2 model)"),rro=l(),bs=a("li"),dre=a("strong"),tro=o("splinter"),aro=o(" \u2014 "),kR=a("a"),nro=o("SplinterTokenizer"),sro=o(" or "),SR=a("a"),lro=o("SplinterTokenizerFast"),iro=o(" (Splinter model)"),dro=l(),vs=a("li"),cre=a("strong"),cro=o("squeezebert"),fro=o(" \u2014 "),RR=a("a"),mro=o("SqueezeBertTokenizer"),gro=o(" or "),BR=a("a"),hro=o("SqueezeBertTokenizerFast"),pro=o(" (SqueezeBERT model)"),uro=l(),Fs=a("li"),fre=a("strong"),_ro=o("t5"),bro=o(" \u2014 "),PR=a("a"),vro=o("T5Tokenizer"),Fro=o(" or "),IR=a("a"),Tro=o("T5TokenizerFast"),Mro=o(" (T5 model)"),Ero=l(),Lg=a("li"),mre=a("strong"),Cro=o("tapas"),wro=o(" \u2014 "),qR=a("a"),Aro=o("TapasTokenizer"),yro=o(" (TAPAS model)"),Lro=l(),xg=a("li"),gre=a("strong"),xro=o("tapex"),$ro=o(" \u2014 "),NR=a("a"),kro=o("TapexTokenizer"),Sro=o(" (TAPEX model)"),Rro=l(),$g=a("li"),hre=a("strong"),Bro=o("transfo-xl"),Pro=o(" \u2014 "),jR=a("a"),Iro=o("TransfoXLTokenizer"),qro=o(" (Transformer-XL model)"),Nro=l(),Ts=a("li"),pre=a("strong"),jro=o("visual_bert"),Dro=o(" \u2014 "),DR=a("a"),Gro=o("BertTokenizer"),Oro=o(" or "),GR=a("a"),Vro=o("BertTokenizerFast"),Xro=o(" (VisualBert model)"),zro=l(),kg=a("li"),ure=a("strong"),Qro=o("wav2vec2"),Wro=o(" \u2014 "),OR=a("a"),Hro=o("Wav2Vec2CTCTokenizer"),Uro=o(" (Wav2Vec2 model)"),Jro=l(),Sg=a("li"),_re=a("strong"),Yro=o("wav2vec2_phoneme"),Kro=o(" \u2014 "),VR=a("a"),Zro=o("Wav2Vec2PhonemeCTCTokenizer"),eto=o(" (Wav2Vec2Phoneme model)"),oto=l(),Ms=a("li"),bre=a("strong"),rto=o("xglm"),tto=o(" \u2014 "),XR=a("a"),ato=o("XGLMTokenizer"),nto=o(" or "),zR=a("a"),sto=o("XGLMTokenizerFast"),lto=o(" (XGLM model)"),ito=l(),Rg=a("li"),vre=a("strong"),dto=o("xlm"),cto=o(" \u2014 "),QR=a("a"),fto=o("XLMTokenizer"),mto=o(" (XLM model)"),gto=l(),Bg=a("li"),Fre=a("strong"),hto=o("xlm-prophetnet"),pto=o(" \u2014 "),WR=a("a"),uto=o("XLMProphetNetTokenizer"),_to=o(" (XLMProphetNet model)"),bto=l(),Es=a("li"),Tre=a("strong"),vto=o("xlm-roberta"),Fto=o(" \u2014 "),HR=a("a"),Tto=o("XLMRobertaTokenizer"),Mto=o(" or "),UR=a("a"),Eto=o("XLMRobertaTokenizerFast"),Cto=o(" (XLM-RoBERTa model)"),wto=l(),Cs=a("li"),Mre=a("strong"),Ato=o("xlm-roberta-xl"),yto=o(" \u2014 "),JR=a("a"),Lto=o("RobertaTokenizer"),xto=o(" or "),YR=a("a"),$to=o("RobertaTokenizerFast"),kto=o(" (XLM-RoBERTa-XL model)"),Sto=l(),ws=a("li"),Ere=a("strong"),Rto=o("xlnet"),Bto=o(" \u2014 "),KR=a("a"),Pto=o("XLNetTokenizer"),Ito=o(" or "),ZR=a("a"),qto=o("XLNetTokenizerFast"),Nto=o(" (XLNet model)"),jto=l(),As=a("li"),Cre=a("strong"),Dto=o("yoso"),Gto=o(" \u2014 "),eB=a("a"),Oto=o("AlbertTokenizer"),Vto=o(" or "),oB=a("a"),Xto=o("AlbertTokenizerFast"),zto=o(" (YOSO model)"),Qto=l(),F(Pg.$$.fragment),Wto=l(),Ig=a("div"),F(Aw.$$.fragment),Hto=l(),wre=a("p"),Uto=o("Register a new tokenizer in this mapping."),IRe=l(),mi=a("h2"),qg=a("a"),Are=a("span"),F(yw.$$.fragment),Jto=l(),yre=a("span"),Yto=o("AutoFeatureExtractor"),qRe=l(),Co=a("div"),F(Lw.$$.fragment),Kto=l(),xw=a("p"),Zto=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rB=a("a"),eao=o("AutoFeatureExtractor.from_pretrained()"),oao=o(" class method."),rao=l(),$w=a("p"),tao=o("This class cannot be instantiated directly using "),Lre=a("code"),aao=o("__init__()"),nao=o(" (throws an error)."),sao=l(),Xe=a("div"),F(kw.$$.fragment),lao=l(),xre=a("p"),iao=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),dao=l(),Ta=a("p"),cao=o("The feature extractor class to instantiate is selected based on the "),$re=a("code"),fao=o("model_type"),mao=o(` property of the config object
(either passed as an argument or loaded from `),kre=a("code"),gao=o("pretrained_model_name_or_path"),hao=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sre=a("code"),pao=o("pretrained_model_name_or_path"),uao=o(":"),_ao=l(),ae=a("ul"),Ng=a("li"),Rre=a("strong"),bao=o("beit"),vao=o(" \u2014 "),tB=a("a"),Fao=o("BeitFeatureExtractor"),Tao=o(" (BEiT model)"),Mao=l(),jg=a("li"),Bre=a("strong"),Eao=o("clip"),Cao=o(" \u2014 "),aB=a("a"),wao=o("CLIPFeatureExtractor"),Aao=o(" (CLIP model)"),yao=l(),Dg=a("li"),Pre=a("strong"),Lao=o("convnext"),xao=o(" \u2014 "),nB=a("a"),$ao=o("ConvNextFeatureExtractor"),kao=o(" (ConvNext model)"),Sao=l(),Gg=a("li"),Ire=a("strong"),Rao=o("data2vec-audio"),Bao=o(" \u2014 "),sB=a("a"),Pao=o("Wav2Vec2FeatureExtractor"),Iao=o(" (Data2VecAudio model)"),qao=l(),Og=a("li"),qre=a("strong"),Nao=o("data2vec-vision"),jao=o(" \u2014 "),lB=a("a"),Dao=o("BeitFeatureExtractor"),Gao=o(" (Data2VecVision model)"),Oao=l(),Vg=a("li"),Nre=a("strong"),Vao=o("deit"),Xao=o(" \u2014 "),iB=a("a"),zao=o("DeiTFeatureExtractor"),Qao=o(" (DeiT model)"),Wao=l(),Xg=a("li"),jre=a("strong"),Hao=o("detr"),Uao=o(" \u2014 "),dB=a("a"),Jao=o("DetrFeatureExtractor"),Yao=o(" (DETR model)"),Kao=l(),zg=a("li"),Dre=a("strong"),Zao=o("dpt"),eno=o(" \u2014 "),cB=a("a"),ono=o("DPTFeatureExtractor"),rno=o(" (DPT model)"),tno=l(),Qg=a("li"),Gre=a("strong"),ano=o("glpn"),nno=o(" \u2014 "),fB=a("a"),sno=o("GLPNFeatureExtractor"),lno=o(" (GLPN model)"),ino=l(),Wg=a("li"),Ore=a("strong"),dno=o("hubert"),cno=o(" \u2014 "),mB=a("a"),fno=o("Wav2Vec2FeatureExtractor"),mno=o(" (Hubert model)"),gno=l(),Hg=a("li"),Vre=a("strong"),hno=o("layoutlmv2"),pno=o(" \u2014 "),gB=a("a"),uno=o("LayoutLMv2FeatureExtractor"),_no=o(" (LayoutLMv2 model)"),bno=l(),Ug=a("li"),Xre=a("strong"),vno=o("maskformer"),Fno=o(" \u2014 "),hB=a("a"),Tno=o("MaskFormerFeatureExtractor"),Mno=o(" (MaskFormer model)"),Eno=l(),Jg=a("li"),zre=a("strong"),Cno=o("perceiver"),wno=o(" \u2014 "),pB=a("a"),Ano=o("PerceiverFeatureExtractor"),yno=o(" (Perceiver model)"),Lno=l(),Yg=a("li"),Qre=a("strong"),xno=o("poolformer"),$no=o(" \u2014 "),uB=a("a"),kno=o("PoolFormerFeatureExtractor"),Sno=o(" (PoolFormer model)"),Rno=l(),Kg=a("li"),Wre=a("strong"),Bno=o("regnet"),Pno=o(" \u2014 "),_B=a("a"),Ino=o("ConvNextFeatureExtractor"),qno=o(" (RegNet model)"),Nno=l(),Zg=a("li"),Hre=a("strong"),jno=o("resnet"),Dno=o(" \u2014 "),bB=a("a"),Gno=o("ConvNextFeatureExtractor"),Ono=o(" (ResNet model)"),Vno=l(),eh=a("li"),Ure=a("strong"),Xno=o("segformer"),zno=o(" \u2014 "),vB=a("a"),Qno=o("SegformerFeatureExtractor"),Wno=o(" (SegFormer model)"),Hno=l(),oh=a("li"),Jre=a("strong"),Uno=o("speech_to_text"),Jno=o(" \u2014 "),FB=a("a"),Yno=o("Speech2TextFeatureExtractor"),Kno=o(" (Speech2Text model)"),Zno=l(),rh=a("li"),Yre=a("strong"),eso=o("swin"),oso=o(" \u2014 "),TB=a("a"),rso=o("ViTFeatureExtractor"),tso=o(" (Swin model)"),aso=l(),th=a("li"),Kre=a("strong"),nso=o("van"),sso=o(" \u2014 "),MB=a("a"),lso=o("ConvNextFeatureExtractor"),iso=o(" (VAN model)"),dso=l(),ah=a("li"),Zre=a("strong"),cso=o("vit"),fso=o(" \u2014 "),EB=a("a"),mso=o("ViTFeatureExtractor"),gso=o(" (ViT model)"),hso=l(),nh=a("li"),ete=a("strong"),pso=o("vit_mae"),uso=o(" \u2014 "),CB=a("a"),_so=o("ViTFeatureExtractor"),bso=o(" (ViTMAE model)"),vso=l(),sh=a("li"),ote=a("strong"),Fso=o("wav2vec2"),Tso=o(" \u2014 "),wB=a("a"),Mso=o("Wav2Vec2FeatureExtractor"),Eso=o(" (Wav2Vec2 model)"),Cso=l(),F(lh.$$.fragment),wso=l(),F(ih.$$.fragment),Aso=l(),dh=a("div"),F(Sw.$$.fragment),yso=l(),rte=a("p"),Lso=o("Register a new feature extractor for this class."),NRe=l(),gi=a("h2"),ch=a("a"),tte=a("span"),F(Rw.$$.fragment),xso=l(),ate=a("span"),$so=o("AutoProcessor"),jRe=l(),wo=a("div"),F(Bw.$$.fragment),kso=l(),Pw=a("p"),Sso=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AB=a("a"),Rso=o("AutoProcessor.from_pretrained()"),Bso=o(" class method."),Pso=l(),Iw=a("p"),Iso=o("This class cannot be instantiated directly using "),nte=a("code"),qso=o("__init__()"),Nso=o(" (throws an error)."),jso=l(),ze=a("div"),F(qw.$$.fragment),Dso=l(),ste=a("p"),Gso=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Oso=l(),hi=a("p"),Vso=o("The processor class to instantiate is selected based on the "),lte=a("code"),Xso=o("model_type"),zso=o(` property of the config object (either
passed as an argument or loaded from `),ite=a("code"),Qso=o("pretrained_model_name_or_path"),Wso=o(" if possible):"),Hso=l(),be=a("ul"),fh=a("li"),dte=a("strong"),Uso=o("clip"),Jso=o(" \u2014 "),yB=a("a"),Yso=o("CLIPProcessor"),Kso=o(" (CLIP model)"),Zso=l(),mh=a("li"),cte=a("strong"),elo=o("layoutlmv2"),olo=o(" \u2014 "),LB=a("a"),rlo=o("LayoutLMv2Processor"),tlo=o(" (LayoutLMv2 model)"),alo=l(),gh=a("li"),fte=a("strong"),nlo=o("layoutxlm"),slo=o(" \u2014 "),xB=a("a"),llo=o("LayoutXLMProcessor"),ilo=o(" (LayoutXLM model)"),dlo=l(),hh=a("li"),mte=a("strong"),clo=o("sew"),flo=o(" \u2014 "),$B=a("a"),mlo=o("Wav2Vec2Processor"),glo=o(" (SEW model)"),hlo=l(),ph=a("li"),gte=a("strong"),plo=o("sew-d"),ulo=o(" \u2014 "),kB=a("a"),_lo=o("Wav2Vec2Processor"),blo=o(" (SEW-D model)"),vlo=l(),uh=a("li"),hte=a("strong"),Flo=o("speech_to_text"),Tlo=o(" \u2014 "),SB=a("a"),Mlo=o("Speech2TextProcessor"),Elo=o(" (Speech2Text model)"),Clo=l(),_h=a("li"),pte=a("strong"),wlo=o("speech_to_text_2"),Alo=o(" \u2014 "),RB=a("a"),ylo=o("Speech2Text2Processor"),Llo=o(" (Speech2Text2 model)"),xlo=l(),bh=a("li"),ute=a("strong"),$lo=o("trocr"),klo=o(" \u2014 "),BB=a("a"),Slo=o("TrOCRProcessor"),Rlo=o(" (TrOCR model)"),Blo=l(),vh=a("li"),_te=a("strong"),Plo=o("unispeech"),Ilo=o(" \u2014 "),PB=a("a"),qlo=o("Wav2Vec2Processor"),Nlo=o(" (UniSpeech model)"),jlo=l(),Fh=a("li"),bte=a("strong"),Dlo=o("unispeech-sat"),Glo=o(" \u2014 "),IB=a("a"),Olo=o("Wav2Vec2Processor"),Vlo=o(" (UniSpeechSat model)"),Xlo=l(),Th=a("li"),vte=a("strong"),zlo=o("vilt"),Qlo=o(" \u2014 "),qB=a("a"),Wlo=o("ViltProcessor"),Hlo=o(" (ViLT model)"),Ulo=l(),Mh=a("li"),Fte=a("strong"),Jlo=o("vision-text-dual-encoder"),Ylo=o(" \u2014 "),NB=a("a"),Klo=o("VisionTextDualEncoderProcessor"),Zlo=o(" (VisionTextDualEncoder model)"),eio=l(),Eh=a("li"),Tte=a("strong"),oio=o("wav2vec2"),rio=o(" \u2014 "),jB=a("a"),tio=o("Wav2Vec2Processor"),aio=o(" (Wav2Vec2 model)"),nio=l(),Ch=a("li"),Mte=a("strong"),sio=o("wavlm"),lio=o(" \u2014 "),DB=a("a"),iio=o("Wav2Vec2Processor"),dio=o(" (WavLM model)"),cio=l(),F(wh.$$.fragment),fio=l(),F(Ah.$$.fragment),mio=l(),yh=a("div"),F(Nw.$$.fragment),gio=l(),Ete=a("p"),hio=o("Register a new processor for this class."),DRe=l(),pi=a("h2"),Lh=a("a"),Cte=a("span"),F(jw.$$.fragment),pio=l(),wte=a("span"),uio=o("AutoModel"),GRe=l(),Ao=a("div"),F(Dw.$$.fragment),_io=l(),ui=a("p"),bio=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GB=a("a"),vio=o("from_pretrained()"),Fio=o(" class method or the "),OB=a("a"),Tio=o("from_config()"),Mio=o(` class
method.`),Eio=l(),Gw=a("p"),Cio=o("This class cannot be instantiated directly using "),Ate=a("code"),wio=o("__init__()"),Aio=o(" (throws an error)."),yio=l(),Kr=a("div"),F(Ow.$$.fragment),Lio=l(),yte=a("p"),xio=o("Instantiates one of the base model classes of the library from a configuration."),$io=l(),_i=a("p"),kio=o(`Note:
Loading a model from its configuration file does `),Lte=a("strong"),Sio=o("not"),Rio=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VB=a("a"),Bio=o("from_pretrained()"),Pio=o(" to load the model weights."),Iio=l(),F(xh.$$.fragment),qio=l(),Qe=a("div"),F(Vw.$$.fragment),Nio=l(),xte=a("p"),jio=o("Instantiate one of the base model classes of the library from a pretrained model."),Dio=l(),Ma=a("p"),Gio=o("The model class to instantiate is selected based on the "),$te=a("code"),Oio=o("model_type"),Vio=o(` property of the config object (either
passed as an argument or loaded from `),kte=a("code"),Xio=o("pretrained_model_name_or_path"),zio=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ste=a("code"),Qio=o("pretrained_model_name_or_path"),Wio=o(":"),Hio=l(),x=a("ul"),$h=a("li"),Rte=a("strong"),Uio=o("albert"),Jio=o(" \u2014 "),XB=a("a"),Yio=o("AlbertModel"),Kio=o(" (ALBERT model)"),Zio=l(),kh=a("li"),Bte=a("strong"),edo=o("bart"),odo=o(" \u2014 "),zB=a("a"),rdo=o("BartModel"),tdo=o(" (BART model)"),ado=l(),Sh=a("li"),Pte=a("strong"),ndo=o("beit"),sdo=o(" \u2014 "),QB=a("a"),ldo=o("BeitModel"),ido=o(" (BEiT model)"),ddo=l(),Rh=a("li"),Ite=a("strong"),cdo=o("bert"),fdo=o(" \u2014 "),WB=a("a"),mdo=o("BertModel"),gdo=o(" (BERT model)"),hdo=l(),Bh=a("li"),qte=a("strong"),pdo=o("bert-generation"),udo=o(" \u2014 "),HB=a("a"),_do=o("BertGenerationEncoder"),bdo=o(" (Bert Generation model)"),vdo=l(),Ph=a("li"),Nte=a("strong"),Fdo=o("big_bird"),Tdo=o(" \u2014 "),UB=a("a"),Mdo=o("BigBirdModel"),Edo=o(" (BigBird model)"),Cdo=l(),Ih=a("li"),jte=a("strong"),wdo=o("bigbird_pegasus"),Ado=o(" \u2014 "),JB=a("a"),ydo=o("BigBirdPegasusModel"),Ldo=o(" (BigBirdPegasus model)"),xdo=l(),qh=a("li"),Dte=a("strong"),$do=o("blenderbot"),kdo=o(" \u2014 "),YB=a("a"),Sdo=o("BlenderbotModel"),Rdo=o(" (Blenderbot model)"),Bdo=l(),Nh=a("li"),Gte=a("strong"),Pdo=o("blenderbot-small"),Ido=o(" \u2014 "),KB=a("a"),qdo=o("BlenderbotSmallModel"),Ndo=o(" (BlenderbotSmall model)"),jdo=l(),jh=a("li"),Ote=a("strong"),Ddo=o("camembert"),Gdo=o(" \u2014 "),ZB=a("a"),Odo=o("CamembertModel"),Vdo=o(" (CamemBERT model)"),Xdo=l(),Dh=a("li"),Vte=a("strong"),zdo=o("canine"),Qdo=o(" \u2014 "),eP=a("a"),Wdo=o("CanineModel"),Hdo=o(" (Canine model)"),Udo=l(),Gh=a("li"),Xte=a("strong"),Jdo=o("clip"),Ydo=o(" \u2014 "),oP=a("a"),Kdo=o("CLIPModel"),Zdo=o(" (CLIP model)"),eco=l(),Oh=a("li"),zte=a("strong"),oco=o("convbert"),rco=o(" \u2014 "),rP=a("a"),tco=o("ConvBertModel"),aco=o(" (ConvBERT model)"),nco=l(),Vh=a("li"),Qte=a("strong"),sco=o("convnext"),lco=o(" \u2014 "),tP=a("a"),ico=o("ConvNextModel"),dco=o(" (ConvNext model)"),cco=l(),Xh=a("li"),Wte=a("strong"),fco=o("ctrl"),mco=o(" \u2014 "),aP=a("a"),gco=o("CTRLModel"),hco=o(" (CTRL model)"),pco=l(),zh=a("li"),Hte=a("strong"),uco=o("data2vec-audio"),_co=o(" \u2014 "),nP=a("a"),bco=o("Data2VecAudioModel"),vco=o(" (Data2VecAudio model)"),Fco=l(),Qh=a("li"),Ute=a("strong"),Tco=o("data2vec-text"),Mco=o(" \u2014 "),sP=a("a"),Eco=o("Data2VecTextModel"),Cco=o(" (Data2VecText model)"),wco=l(),Wh=a("li"),Jte=a("strong"),Aco=o("data2vec-vision"),yco=o(" \u2014 "),lP=a("a"),Lco=o("Data2VecVisionModel"),xco=o(" (Data2VecVision model)"),$co=l(),Hh=a("li"),Yte=a("strong"),kco=o("deberta"),Sco=o(" \u2014 "),iP=a("a"),Rco=o("DebertaModel"),Bco=o(" (DeBERTa model)"),Pco=l(),Uh=a("li"),Kte=a("strong"),Ico=o("deberta-v2"),qco=o(" \u2014 "),dP=a("a"),Nco=o("DebertaV2Model"),jco=o(" (DeBERTa-v2 model)"),Dco=l(),Jh=a("li"),Zte=a("strong"),Gco=o("decision_transformer"),Oco=o(" \u2014 "),cP=a("a"),Vco=o("DecisionTransformerModel"),Xco=o(" (Decision Transformer model)"),zco=l(),Yh=a("li"),eae=a("strong"),Qco=o("deit"),Wco=o(" \u2014 "),fP=a("a"),Hco=o("DeiTModel"),Uco=o(" (DeiT model)"),Jco=l(),Kh=a("li"),oae=a("strong"),Yco=o("detr"),Kco=o(" \u2014 "),mP=a("a"),Zco=o("DetrModel"),efo=o(" (DETR model)"),ofo=l(),Zh=a("li"),rae=a("strong"),rfo=o("distilbert"),tfo=o(" \u2014 "),gP=a("a"),afo=o("DistilBertModel"),nfo=o(" (DistilBERT model)"),sfo=l(),ep=a("li"),tae=a("strong"),lfo=o("dpr"),ifo=o(" \u2014 "),hP=a("a"),dfo=o("DPRQuestionEncoder"),cfo=o(" (DPR model)"),ffo=l(),op=a("li"),aae=a("strong"),mfo=o("dpt"),gfo=o(" \u2014 "),pP=a("a"),hfo=o("DPTModel"),pfo=o(" (DPT model)"),ufo=l(),rp=a("li"),nae=a("strong"),_fo=o("electra"),bfo=o(" \u2014 "),uP=a("a"),vfo=o("ElectraModel"),Ffo=o(" (ELECTRA model)"),Tfo=l(),tp=a("li"),sae=a("strong"),Mfo=o("flaubert"),Efo=o(" \u2014 "),_P=a("a"),Cfo=o("FlaubertModel"),wfo=o(" (FlauBERT model)"),Afo=l(),ap=a("li"),lae=a("strong"),yfo=o("fnet"),Lfo=o(" \u2014 "),bP=a("a"),xfo=o("FNetModel"),$fo=o(" (FNet model)"),kfo=l(),np=a("li"),iae=a("strong"),Sfo=o("fsmt"),Rfo=o(" \u2014 "),vP=a("a"),Bfo=o("FSMTModel"),Pfo=o(" (FairSeq Machine-Translation model)"),Ifo=l(),ys=a("li"),dae=a("strong"),qfo=o("funnel"),Nfo=o(" \u2014 "),FP=a("a"),jfo=o("FunnelModel"),Dfo=o(" or "),TP=a("a"),Gfo=o("FunnelBaseModel"),Ofo=o(" (Funnel Transformer model)"),Vfo=l(),sp=a("li"),cae=a("strong"),Xfo=o("glpn"),zfo=o(" \u2014 "),MP=a("a"),Qfo=o("GLPNModel"),Wfo=o(" (GLPN model)"),Hfo=l(),lp=a("li"),fae=a("strong"),Ufo=o("gpt2"),Jfo=o(" \u2014 "),EP=a("a"),Yfo=o("GPT2Model"),Kfo=o(" (OpenAI GPT-2 model)"),Zfo=l(),ip=a("li"),mae=a("strong"),emo=o("gpt_neo"),omo=o(" \u2014 "),CP=a("a"),rmo=o("GPTNeoModel"),tmo=o(" (GPT Neo model)"),amo=l(),dp=a("li"),gae=a("strong"),nmo=o("gptj"),smo=o(" \u2014 "),wP=a("a"),lmo=o("GPTJModel"),imo=o(" (GPT-J model)"),dmo=l(),cp=a("li"),hae=a("strong"),cmo=o("hubert"),fmo=o(" \u2014 "),AP=a("a"),mmo=o("HubertModel"),gmo=o(" (Hubert model)"),hmo=l(),fp=a("li"),pae=a("strong"),pmo=o("ibert"),umo=o(" \u2014 "),yP=a("a"),_mo=o("IBertModel"),bmo=o(" (I-BERT model)"),vmo=l(),mp=a("li"),uae=a("strong"),Fmo=o("imagegpt"),Tmo=o(" \u2014 "),LP=a("a"),Mmo=o("ImageGPTModel"),Emo=o(" (ImageGPT model)"),Cmo=l(),gp=a("li"),_ae=a("strong"),wmo=o("layoutlm"),Amo=o(" \u2014 "),xP=a("a"),ymo=o("LayoutLMModel"),Lmo=o(" (LayoutLM model)"),xmo=l(),hp=a("li"),bae=a("strong"),$mo=o("layoutlmv2"),kmo=o(" \u2014 "),$P=a("a"),Smo=o("LayoutLMv2Model"),Rmo=o(" (LayoutLMv2 model)"),Bmo=l(),pp=a("li"),vae=a("strong"),Pmo=o("led"),Imo=o(" \u2014 "),kP=a("a"),qmo=o("LEDModel"),Nmo=o(" (LED model)"),jmo=l(),up=a("li"),Fae=a("strong"),Dmo=o("longformer"),Gmo=o(" \u2014 "),SP=a("a"),Omo=o("LongformerModel"),Vmo=o(" (Longformer model)"),Xmo=l(),_p=a("li"),Tae=a("strong"),zmo=o("luke"),Qmo=o(" \u2014 "),RP=a("a"),Wmo=o("LukeModel"),Hmo=o(" (LUKE model)"),Umo=l(),bp=a("li"),Mae=a("strong"),Jmo=o("lxmert"),Ymo=o(" \u2014 "),BP=a("a"),Kmo=o("LxmertModel"),Zmo=o(" (LXMERT model)"),ego=l(),vp=a("li"),Eae=a("strong"),ogo=o("m2m_100"),rgo=o(" \u2014 "),PP=a("a"),tgo=o("M2M100Model"),ago=o(" (M2M100 model)"),ngo=l(),Fp=a("li"),Cae=a("strong"),sgo=o("marian"),lgo=o(" \u2014 "),IP=a("a"),igo=o("MarianModel"),dgo=o(" (Marian model)"),cgo=l(),Tp=a("li"),wae=a("strong"),fgo=o("maskformer"),mgo=o(" \u2014 "),qP=a("a"),ggo=o("MaskFormerModel"),hgo=o(" (MaskFormer model)"),pgo=l(),Mp=a("li"),Aae=a("strong"),ugo=o("mbart"),_go=o(" \u2014 "),NP=a("a"),bgo=o("MBartModel"),vgo=o(" (mBART model)"),Fgo=l(),Ep=a("li"),yae=a("strong"),Tgo=o("megatron-bert"),Mgo=o(" \u2014 "),jP=a("a"),Ego=o("MegatronBertModel"),Cgo=o(" (MegatronBert model)"),wgo=l(),Cp=a("li"),Lae=a("strong"),Ago=o("mobilebert"),ygo=o(" \u2014 "),DP=a("a"),Lgo=o("MobileBertModel"),xgo=o(" (MobileBERT model)"),$go=l(),wp=a("li"),xae=a("strong"),kgo=o("mpnet"),Sgo=o(" \u2014 "),GP=a("a"),Rgo=o("MPNetModel"),Bgo=o(" (MPNet model)"),Pgo=l(),Ap=a("li"),$ae=a("strong"),Igo=o("mt5"),qgo=o(" \u2014 "),OP=a("a"),Ngo=o("MT5Model"),jgo=o(" (mT5 model)"),Dgo=l(),yp=a("li"),kae=a("strong"),Ggo=o("nystromformer"),Ogo=o(" \u2014 "),VP=a("a"),Vgo=o("NystromformerModel"),Xgo=o(" (Nystromformer model)"),zgo=l(),Lp=a("li"),Sae=a("strong"),Qgo=o("openai-gpt"),Wgo=o(" \u2014 "),XP=a("a"),Hgo=o("OpenAIGPTModel"),Ugo=o(" (OpenAI GPT model)"),Jgo=l(),xp=a("li"),Rae=a("strong"),Ygo=o("pegasus"),Kgo=o(" \u2014 "),zP=a("a"),Zgo=o("PegasusModel"),eho=o(" (Pegasus model)"),oho=l(),$p=a("li"),Bae=a("strong"),rho=o("perceiver"),tho=o(" \u2014 "),QP=a("a"),aho=o("PerceiverModel"),nho=o(" (Perceiver model)"),sho=l(),kp=a("li"),Pae=a("strong"),lho=o("plbart"),iho=o(" \u2014 "),WP=a("a"),dho=o("PLBartModel"),cho=o(" (PLBart model)"),fho=l(),Sp=a("li"),Iae=a("strong"),mho=o("poolformer"),gho=o(" \u2014 "),HP=a("a"),hho=o("PoolFormerModel"),pho=o(" (PoolFormer model)"),uho=l(),Rp=a("li"),qae=a("strong"),_ho=o("prophetnet"),bho=o(" \u2014 "),UP=a("a"),vho=o("ProphetNetModel"),Fho=o(" (ProphetNet model)"),Tho=l(),Bp=a("li"),Nae=a("strong"),Mho=o("qdqbert"),Eho=o(" \u2014 "),JP=a("a"),Cho=o("QDQBertModel"),who=o(" (QDQBert model)"),Aho=l(),Pp=a("li"),jae=a("strong"),yho=o("reformer"),Lho=o(" \u2014 "),YP=a("a"),xho=o("ReformerModel"),$ho=o(" (Reformer model)"),kho=l(),Ip=a("li"),Dae=a("strong"),Sho=o("regnet"),Rho=o(" \u2014 "),KP=a("a"),Bho=o("RegNetModel"),Pho=o(" (RegNet model)"),Iho=l(),qp=a("li"),Gae=a("strong"),qho=o("rembert"),Nho=o(" \u2014 "),ZP=a("a"),jho=o("RemBertModel"),Dho=o(" (RemBERT model)"),Gho=l(),Np=a("li"),Oae=a("strong"),Oho=o("resnet"),Vho=o(" \u2014 "),eI=a("a"),Xho=o("ResNetModel"),zho=o(" (ResNet model)"),Qho=l(),jp=a("li"),Vae=a("strong"),Who=o("retribert"),Hho=o(" \u2014 "),oI=a("a"),Uho=o("RetriBertModel"),Jho=o(" (RetriBERT model)"),Yho=l(),Dp=a("li"),Xae=a("strong"),Kho=o("roberta"),Zho=o(" \u2014 "),rI=a("a"),epo=o("RobertaModel"),opo=o(" (RoBERTa model)"),rpo=l(),Gp=a("li"),zae=a("strong"),tpo=o("roformer"),apo=o(" \u2014 "),tI=a("a"),npo=o("RoFormerModel"),spo=o(" (RoFormer model)"),lpo=l(),Op=a("li"),Qae=a("strong"),ipo=o("segformer"),dpo=o(" \u2014 "),aI=a("a"),cpo=o("SegformerModel"),fpo=o(" (SegFormer model)"),mpo=l(),Vp=a("li"),Wae=a("strong"),gpo=o("sew"),hpo=o(" \u2014 "),nI=a("a"),ppo=o("SEWModel"),upo=o(" (SEW model)"),_po=l(),Xp=a("li"),Hae=a("strong"),bpo=o("sew-d"),vpo=o(" \u2014 "),sI=a("a"),Fpo=o("SEWDModel"),Tpo=o(" (SEW-D model)"),Mpo=l(),zp=a("li"),Uae=a("strong"),Epo=o("speech_to_text"),Cpo=o(" \u2014 "),lI=a("a"),wpo=o("Speech2TextModel"),Apo=o(" (Speech2Text model)"),ypo=l(),Qp=a("li"),Jae=a("strong"),Lpo=o("splinter"),xpo=o(" \u2014 "),iI=a("a"),$po=o("SplinterModel"),kpo=o(" (Splinter model)"),Spo=l(),Wp=a("li"),Yae=a("strong"),Rpo=o("squeezebert"),Bpo=o(" \u2014 "),dI=a("a"),Ppo=o("SqueezeBertModel"),Ipo=o(" (SqueezeBERT model)"),qpo=l(),Hp=a("li"),Kae=a("strong"),Npo=o("swin"),jpo=o(" \u2014 "),cI=a("a"),Dpo=o("SwinModel"),Gpo=o(" (Swin model)"),Opo=l(),Up=a("li"),Zae=a("strong"),Vpo=o("t5"),Xpo=o(" \u2014 "),fI=a("a"),zpo=o("T5Model"),Qpo=o(" (T5 model)"),Wpo=l(),Jp=a("li"),ene=a("strong"),Hpo=o("tapas"),Upo=o(" \u2014 "),mI=a("a"),Jpo=o("TapasModel"),Ypo=o(" (TAPAS model)"),Kpo=l(),Yp=a("li"),one=a("strong"),Zpo=o("transfo-xl"),euo=o(" \u2014 "),gI=a("a"),ouo=o("TransfoXLModel"),ruo=o(" (Transformer-XL model)"),tuo=l(),Kp=a("li"),rne=a("strong"),auo=o("unispeech"),nuo=o(" \u2014 "),hI=a("a"),suo=o("UniSpeechModel"),luo=o(" (UniSpeech model)"),iuo=l(),Zp=a("li"),tne=a("strong"),duo=o("unispeech-sat"),cuo=o(" \u2014 "),pI=a("a"),fuo=o("UniSpeechSatModel"),muo=o(" (UniSpeechSat model)"),guo=l(),eu=a("li"),ane=a("strong"),huo=o("van"),puo=o(" \u2014 "),uI=a("a"),uuo=o("VanModel"),_uo=o(" (VAN model)"),buo=l(),ou=a("li"),nne=a("strong"),vuo=o("vilt"),Fuo=o(" \u2014 "),_I=a("a"),Tuo=o("ViltModel"),Muo=o(" (ViLT model)"),Euo=l(),ru=a("li"),sne=a("strong"),Cuo=o("vision-text-dual-encoder"),wuo=o(" \u2014 "),bI=a("a"),Auo=o("VisionTextDualEncoderModel"),yuo=o(" (VisionTextDualEncoder model)"),Luo=l(),tu=a("li"),lne=a("strong"),xuo=o("visual_bert"),$uo=o(" \u2014 "),vI=a("a"),kuo=o("VisualBertModel"),Suo=o(" (VisualBert model)"),Ruo=l(),au=a("li"),ine=a("strong"),Buo=o("vit"),Puo=o(" \u2014 "),FI=a("a"),Iuo=o("ViTModel"),quo=o(" (ViT model)"),Nuo=l(),nu=a("li"),dne=a("strong"),juo=o("vit_mae"),Duo=o(" \u2014 "),TI=a("a"),Guo=o("ViTMAEModel"),Ouo=o(" (ViTMAE model)"),Vuo=l(),su=a("li"),cne=a("strong"),Xuo=o("wav2vec2"),zuo=o(" \u2014 "),MI=a("a"),Quo=o("Wav2Vec2Model"),Wuo=o(" (Wav2Vec2 model)"),Huo=l(),lu=a("li"),fne=a("strong"),Uuo=o("wavlm"),Juo=o(" \u2014 "),EI=a("a"),Yuo=o("WavLMModel"),Kuo=o(" (WavLM model)"),Zuo=l(),iu=a("li"),mne=a("strong"),e_o=o("xglm"),o_o=o(" \u2014 "),CI=a("a"),r_o=o("XGLMModel"),t_o=o(" (XGLM model)"),a_o=l(),du=a("li"),gne=a("strong"),n_o=o("xlm"),s_o=o(" \u2014 "),wI=a("a"),l_o=o("XLMModel"),i_o=o(" (XLM model)"),d_o=l(),cu=a("li"),hne=a("strong"),c_o=o("xlm-prophetnet"),f_o=o(" \u2014 "),AI=a("a"),m_o=o("XLMProphetNetModel"),g_o=o(" (XLMProphetNet model)"),h_o=l(),fu=a("li"),pne=a("strong"),p_o=o("xlm-roberta"),u_o=o(" \u2014 "),yI=a("a"),__o=o("XLMRobertaModel"),b_o=o(" (XLM-RoBERTa model)"),v_o=l(),mu=a("li"),une=a("strong"),F_o=o("xlm-roberta-xl"),T_o=o(" \u2014 "),LI=a("a"),M_o=o("XLMRobertaXLModel"),E_o=o(" (XLM-RoBERTa-XL model)"),C_o=l(),gu=a("li"),_ne=a("strong"),w_o=o("xlnet"),A_o=o(" \u2014 "),xI=a("a"),y_o=o("XLNetModel"),L_o=o(" (XLNet model)"),x_o=l(),hu=a("li"),bne=a("strong"),$_o=o("yoso"),k_o=o(" \u2014 "),$I=a("a"),S_o=o("YosoModel"),R_o=o(" (YOSO model)"),B_o=l(),pu=a("p"),P_o=o("The model is set in evaluation mode by default using "),vne=a("code"),I_o=o("model.eval()"),q_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fne=a("code"),N_o=o("model.train()"),j_o=l(),F(uu.$$.fragment),ORe=l(),bi=a("h2"),_u=a("a"),Tne=a("span"),F(Xw.$$.fragment),D_o=l(),Mne=a("span"),G_o=o("AutoModelForPreTraining"),VRe=l(),yo=a("div"),F(zw.$$.fragment),O_o=l(),vi=a("p"),V_o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kI=a("a"),X_o=o("from_pretrained()"),z_o=o(" class method or the "),SI=a("a"),Q_o=o("from_config()"),W_o=o(` class
method.`),H_o=l(),Qw=a("p"),U_o=o("This class cannot be instantiated directly using "),Ene=a("code"),J_o=o("__init__()"),Y_o=o(" (throws an error)."),K_o=l(),Zr=a("div"),F(Ww.$$.fragment),Z_o=l(),Cne=a("p"),e1o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o1o=l(),Fi=a("p"),r1o=o(`Note:
Loading a model from its configuration file does `),wne=a("strong"),t1o=o("not"),a1o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=a("a"),n1o=o("from_pretrained()"),s1o=o(" to load the model weights."),l1o=l(),F(bu.$$.fragment),i1o=l(),We=a("div"),F(Hw.$$.fragment),d1o=l(),Ane=a("p"),c1o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f1o=l(),Ea=a("p"),m1o=o("The model class to instantiate is selected based on the "),yne=a("code"),g1o=o("model_type"),h1o=o(` property of the config object (either
passed as an argument or loaded from `),Lne=a("code"),p1o=o("pretrained_model_name_or_path"),u1o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xne=a("code"),_1o=o("pretrained_model_name_or_path"),b1o=o(":"),v1o=l(),G=a("ul"),vu=a("li"),$ne=a("strong"),F1o=o("albert"),T1o=o(" \u2014 "),BI=a("a"),M1o=o("AlbertForPreTraining"),E1o=o(" (ALBERT model)"),C1o=l(),Fu=a("li"),kne=a("strong"),w1o=o("bart"),A1o=o(" \u2014 "),PI=a("a"),y1o=o("BartForConditionalGeneration"),L1o=o(" (BART model)"),x1o=l(),Tu=a("li"),Sne=a("strong"),$1o=o("bert"),k1o=o(" \u2014 "),II=a("a"),S1o=o("BertForPreTraining"),R1o=o(" (BERT model)"),B1o=l(),Mu=a("li"),Rne=a("strong"),P1o=o("big_bird"),I1o=o(" \u2014 "),qI=a("a"),q1o=o("BigBirdForPreTraining"),N1o=o(" (BigBird model)"),j1o=l(),Eu=a("li"),Bne=a("strong"),D1o=o("camembert"),G1o=o(" \u2014 "),NI=a("a"),O1o=o("CamembertForMaskedLM"),V1o=o(" (CamemBERT model)"),X1o=l(),Cu=a("li"),Pne=a("strong"),z1o=o("ctrl"),Q1o=o(" \u2014 "),jI=a("a"),W1o=o("CTRLLMHeadModel"),H1o=o(" (CTRL model)"),U1o=l(),wu=a("li"),Ine=a("strong"),J1o=o("data2vec-text"),Y1o=o(" \u2014 "),DI=a("a"),K1o=o("Data2VecTextForMaskedLM"),Z1o=o(" (Data2VecText model)"),ebo=l(),Au=a("li"),qne=a("strong"),obo=o("deberta"),rbo=o(" \u2014 "),GI=a("a"),tbo=o("DebertaForMaskedLM"),abo=o(" (DeBERTa model)"),nbo=l(),yu=a("li"),Nne=a("strong"),sbo=o("deberta-v2"),lbo=o(" \u2014 "),OI=a("a"),ibo=o("DebertaV2ForMaskedLM"),dbo=o(" (DeBERTa-v2 model)"),cbo=l(),Lu=a("li"),jne=a("strong"),fbo=o("distilbert"),mbo=o(" \u2014 "),VI=a("a"),gbo=o("DistilBertForMaskedLM"),hbo=o(" (DistilBERT model)"),pbo=l(),xu=a("li"),Dne=a("strong"),ubo=o("electra"),_bo=o(" \u2014 "),XI=a("a"),bbo=o("ElectraForPreTraining"),vbo=o(" (ELECTRA model)"),Fbo=l(),$u=a("li"),Gne=a("strong"),Tbo=o("flaubert"),Mbo=o(" \u2014 "),zI=a("a"),Ebo=o("FlaubertWithLMHeadModel"),Cbo=o(" (FlauBERT model)"),wbo=l(),ku=a("li"),One=a("strong"),Abo=o("fnet"),ybo=o(" \u2014 "),QI=a("a"),Lbo=o("FNetForPreTraining"),xbo=o(" (FNet model)"),$bo=l(),Su=a("li"),Vne=a("strong"),kbo=o("fsmt"),Sbo=o(" \u2014 "),WI=a("a"),Rbo=o("FSMTForConditionalGeneration"),Bbo=o(" (FairSeq Machine-Translation model)"),Pbo=l(),Ru=a("li"),Xne=a("strong"),Ibo=o("funnel"),qbo=o(" \u2014 "),HI=a("a"),Nbo=o("FunnelForPreTraining"),jbo=o(" (Funnel Transformer model)"),Dbo=l(),Bu=a("li"),zne=a("strong"),Gbo=o("gpt2"),Obo=o(" \u2014 "),UI=a("a"),Vbo=o("GPT2LMHeadModel"),Xbo=o(" (OpenAI GPT-2 model)"),zbo=l(),Pu=a("li"),Qne=a("strong"),Qbo=o("ibert"),Wbo=o(" \u2014 "),JI=a("a"),Hbo=o("IBertForMaskedLM"),Ubo=o(" (I-BERT model)"),Jbo=l(),Iu=a("li"),Wne=a("strong"),Ybo=o("layoutlm"),Kbo=o(" \u2014 "),YI=a("a"),Zbo=o("LayoutLMForMaskedLM"),e4o=o(" (LayoutLM model)"),o4o=l(),qu=a("li"),Hne=a("strong"),r4o=o("longformer"),t4o=o(" \u2014 "),KI=a("a"),a4o=o("LongformerForMaskedLM"),n4o=o(" (Longformer model)"),s4o=l(),Nu=a("li"),Une=a("strong"),l4o=o("lxmert"),i4o=o(" \u2014 "),ZI=a("a"),d4o=o("LxmertForPreTraining"),c4o=o(" (LXMERT model)"),f4o=l(),ju=a("li"),Jne=a("strong"),m4o=o("megatron-bert"),g4o=o(" \u2014 "),eq=a("a"),h4o=o("MegatronBertForPreTraining"),p4o=o(" (MegatronBert model)"),u4o=l(),Du=a("li"),Yne=a("strong"),_4o=o("mobilebert"),b4o=o(" \u2014 "),oq=a("a"),v4o=o("MobileBertForPreTraining"),F4o=o(" (MobileBERT model)"),T4o=l(),Gu=a("li"),Kne=a("strong"),M4o=o("mpnet"),E4o=o(" \u2014 "),rq=a("a"),C4o=o("MPNetForMaskedLM"),w4o=o(" (MPNet model)"),A4o=l(),Ou=a("li"),Zne=a("strong"),y4o=o("openai-gpt"),L4o=o(" \u2014 "),tq=a("a"),x4o=o("OpenAIGPTLMHeadModel"),$4o=o(" (OpenAI GPT model)"),k4o=l(),Vu=a("li"),ese=a("strong"),S4o=o("retribert"),R4o=o(" \u2014 "),aq=a("a"),B4o=o("RetriBertModel"),P4o=o(" (RetriBERT model)"),I4o=l(),Xu=a("li"),ose=a("strong"),q4o=o("roberta"),N4o=o(" \u2014 "),nq=a("a"),j4o=o("RobertaForMaskedLM"),D4o=o(" (RoBERTa model)"),G4o=l(),zu=a("li"),rse=a("strong"),O4o=o("squeezebert"),V4o=o(" \u2014 "),sq=a("a"),X4o=o("SqueezeBertForMaskedLM"),z4o=o(" (SqueezeBERT model)"),Q4o=l(),Qu=a("li"),tse=a("strong"),W4o=o("t5"),H4o=o(" \u2014 "),lq=a("a"),U4o=o("T5ForConditionalGeneration"),J4o=o(" (T5 model)"),Y4o=l(),Wu=a("li"),ase=a("strong"),K4o=o("tapas"),Z4o=o(" \u2014 "),iq=a("a"),e2o=o("TapasForMaskedLM"),o2o=o(" (TAPAS model)"),r2o=l(),Hu=a("li"),nse=a("strong"),t2o=o("transfo-xl"),a2o=o(" \u2014 "),dq=a("a"),n2o=o("TransfoXLLMHeadModel"),s2o=o(" (Transformer-XL model)"),l2o=l(),Uu=a("li"),sse=a("strong"),i2o=o("unispeech"),d2o=o(" \u2014 "),cq=a("a"),c2o=o("UniSpeechForPreTraining"),f2o=o(" (UniSpeech model)"),m2o=l(),Ju=a("li"),lse=a("strong"),g2o=o("unispeech-sat"),h2o=o(" \u2014 "),fq=a("a"),p2o=o("UniSpeechSatForPreTraining"),u2o=o(" (UniSpeechSat model)"),_2o=l(),Yu=a("li"),ise=a("strong"),b2o=o("visual_bert"),v2o=o(" \u2014 "),mq=a("a"),F2o=o("VisualBertForPreTraining"),T2o=o(" (VisualBert model)"),M2o=l(),Ku=a("li"),dse=a("strong"),E2o=o("vit_mae"),C2o=o(" \u2014 "),gq=a("a"),w2o=o("ViTMAEForPreTraining"),A2o=o(" (ViTMAE model)"),y2o=l(),Zu=a("li"),cse=a("strong"),L2o=o("wav2vec2"),x2o=o(" \u2014 "),hq=a("a"),$2o=o("Wav2Vec2ForPreTraining"),k2o=o(" (Wav2Vec2 model)"),S2o=l(),e_=a("li"),fse=a("strong"),R2o=o("xlm"),B2o=o(" \u2014 "),pq=a("a"),P2o=o("XLMWithLMHeadModel"),I2o=o(" (XLM model)"),q2o=l(),o_=a("li"),mse=a("strong"),N2o=o("xlm-roberta"),j2o=o(" \u2014 "),uq=a("a"),D2o=o("XLMRobertaForMaskedLM"),G2o=o(" (XLM-RoBERTa model)"),O2o=l(),r_=a("li"),gse=a("strong"),V2o=o("xlm-roberta-xl"),X2o=o(" \u2014 "),_q=a("a"),z2o=o("XLMRobertaXLForMaskedLM"),Q2o=o(" (XLM-RoBERTa-XL model)"),W2o=l(),t_=a("li"),hse=a("strong"),H2o=o("xlnet"),U2o=o(" \u2014 "),bq=a("a"),J2o=o("XLNetLMHeadModel"),Y2o=o(" (XLNet model)"),K2o=l(),a_=a("p"),Z2o=o("The model is set in evaluation mode by default using "),pse=a("code"),evo=o("model.eval()"),ovo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=a("code"),rvo=o("model.train()"),tvo=l(),F(n_.$$.fragment),XRe=l(),Ti=a("h2"),s_=a("a"),_se=a("span"),F(Uw.$$.fragment),avo=l(),bse=a("span"),nvo=o("AutoModelForCausalLM"),zRe=l(),Lo=a("div"),F(Jw.$$.fragment),svo=l(),Mi=a("p"),lvo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vq=a("a"),ivo=o("from_pretrained()"),dvo=o(" class method or the "),Fq=a("a"),cvo=o("from_config()"),fvo=o(` class
method.`),mvo=l(),Yw=a("p"),gvo=o("This class cannot be instantiated directly using "),vse=a("code"),hvo=o("__init__()"),pvo=o(" (throws an error)."),uvo=l(),et=a("div"),F(Kw.$$.fragment),_vo=l(),Fse=a("p"),bvo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),vvo=l(),Ei=a("p"),Fvo=o(`Note:
Loading a model from its configuration file does `),Tse=a("strong"),Tvo=o("not"),Mvo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Tq=a("a"),Evo=o("from_pretrained()"),Cvo=o(" to load the model weights."),wvo=l(),F(l_.$$.fragment),Avo=l(),He=a("div"),F(Zw.$$.fragment),yvo=l(),Mse=a("p"),Lvo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),xvo=l(),Ca=a("p"),$vo=o("The model class to instantiate is selected based on the "),Ese=a("code"),kvo=o("model_type"),Svo=o(` property of the config object (either
passed as an argument or loaded from `),Cse=a("code"),Rvo=o("pretrained_model_name_or_path"),Bvo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wse=a("code"),Pvo=o("pretrained_model_name_or_path"),Ivo=o(":"),qvo=l(),z=a("ul"),i_=a("li"),Ase=a("strong"),Nvo=o("bart"),jvo=o(" \u2014 "),Mq=a("a"),Dvo=o("BartForCausalLM"),Gvo=o(" (BART model)"),Ovo=l(),d_=a("li"),yse=a("strong"),Vvo=o("bert"),Xvo=o(" \u2014 "),Eq=a("a"),zvo=o("BertLMHeadModel"),Qvo=o(" (BERT model)"),Wvo=l(),c_=a("li"),Lse=a("strong"),Hvo=o("bert-generation"),Uvo=o(" \u2014 "),Cq=a("a"),Jvo=o("BertGenerationDecoder"),Yvo=o(" (Bert Generation model)"),Kvo=l(),f_=a("li"),xse=a("strong"),Zvo=o("big_bird"),eFo=o(" \u2014 "),wq=a("a"),oFo=o("BigBirdForCausalLM"),rFo=o(" (BigBird model)"),tFo=l(),m_=a("li"),$se=a("strong"),aFo=o("bigbird_pegasus"),nFo=o(" \u2014 "),Aq=a("a"),sFo=o("BigBirdPegasusForCausalLM"),lFo=o(" (BigBirdPegasus model)"),iFo=l(),g_=a("li"),kse=a("strong"),dFo=o("blenderbot"),cFo=o(" \u2014 "),yq=a("a"),fFo=o("BlenderbotForCausalLM"),mFo=o(" (Blenderbot model)"),gFo=l(),h_=a("li"),Sse=a("strong"),hFo=o("blenderbot-small"),pFo=o(" \u2014 "),Lq=a("a"),uFo=o("BlenderbotSmallForCausalLM"),_Fo=o(" (BlenderbotSmall model)"),bFo=l(),p_=a("li"),Rse=a("strong"),vFo=o("camembert"),FFo=o(" \u2014 "),xq=a("a"),TFo=o("CamembertForCausalLM"),MFo=o(" (CamemBERT model)"),EFo=l(),u_=a("li"),Bse=a("strong"),CFo=o("ctrl"),wFo=o(" \u2014 "),$q=a("a"),AFo=o("CTRLLMHeadModel"),yFo=o(" (CTRL model)"),LFo=l(),__=a("li"),Pse=a("strong"),xFo=o("data2vec-text"),$Fo=o(" \u2014 "),kq=a("a"),kFo=o("Data2VecTextForCausalLM"),SFo=o(" (Data2VecText model)"),RFo=l(),b_=a("li"),Ise=a("strong"),BFo=o("electra"),PFo=o(" \u2014 "),Sq=a("a"),IFo=o("ElectraForCausalLM"),qFo=o(" (ELECTRA model)"),NFo=l(),v_=a("li"),qse=a("strong"),jFo=o("gpt2"),DFo=o(" \u2014 "),Rq=a("a"),GFo=o("GPT2LMHeadModel"),OFo=o(" (OpenAI GPT-2 model)"),VFo=l(),F_=a("li"),Nse=a("strong"),XFo=o("gpt_neo"),zFo=o(" \u2014 "),Bq=a("a"),QFo=o("GPTNeoForCausalLM"),WFo=o(" (GPT Neo model)"),HFo=l(),T_=a("li"),jse=a("strong"),UFo=o("gptj"),JFo=o(" \u2014 "),Pq=a("a"),YFo=o("GPTJForCausalLM"),KFo=o(" (GPT-J model)"),ZFo=l(),M_=a("li"),Dse=a("strong"),e6o=o("marian"),o6o=o(" \u2014 "),Iq=a("a"),r6o=o("MarianForCausalLM"),t6o=o(" (Marian model)"),a6o=l(),E_=a("li"),Gse=a("strong"),n6o=o("mbart"),s6o=o(" \u2014 "),qq=a("a"),l6o=o("MBartForCausalLM"),i6o=o(" (mBART model)"),d6o=l(),C_=a("li"),Ose=a("strong"),c6o=o("megatron-bert"),f6o=o(" \u2014 "),Nq=a("a"),m6o=o("MegatronBertForCausalLM"),g6o=o(" (MegatronBert model)"),h6o=l(),w_=a("li"),Vse=a("strong"),p6o=o("openai-gpt"),u6o=o(" \u2014 "),jq=a("a"),_6o=o("OpenAIGPTLMHeadModel"),b6o=o(" (OpenAI GPT model)"),v6o=l(),A_=a("li"),Xse=a("strong"),F6o=o("pegasus"),T6o=o(" \u2014 "),Dq=a("a"),M6o=o("PegasusForCausalLM"),E6o=o(" (Pegasus model)"),C6o=l(),y_=a("li"),zse=a("strong"),w6o=o("plbart"),A6o=o(" \u2014 "),Gq=a("a"),y6o=o("PLBartForCausalLM"),L6o=o(" (PLBart model)"),x6o=l(),L_=a("li"),Qse=a("strong"),$6o=o("prophetnet"),k6o=o(" \u2014 "),Oq=a("a"),S6o=o("ProphetNetForCausalLM"),R6o=o(" (ProphetNet model)"),B6o=l(),x_=a("li"),Wse=a("strong"),P6o=o("qdqbert"),I6o=o(" \u2014 "),Vq=a("a"),q6o=o("QDQBertLMHeadModel"),N6o=o(" (QDQBert model)"),j6o=l(),$_=a("li"),Hse=a("strong"),D6o=o("reformer"),G6o=o(" \u2014 "),Xq=a("a"),O6o=o("ReformerModelWithLMHead"),V6o=o(" (Reformer model)"),X6o=l(),k_=a("li"),Use=a("strong"),z6o=o("rembert"),Q6o=o(" \u2014 "),zq=a("a"),W6o=o("RemBertForCausalLM"),H6o=o(" (RemBERT model)"),U6o=l(),S_=a("li"),Jse=a("strong"),J6o=o("roberta"),Y6o=o(" \u2014 "),Qq=a("a"),K6o=o("RobertaForCausalLM"),Z6o=o(" (RoBERTa model)"),eTo=l(),R_=a("li"),Yse=a("strong"),oTo=o("roformer"),rTo=o(" \u2014 "),Wq=a("a"),tTo=o("RoFormerForCausalLM"),aTo=o(" (RoFormer model)"),nTo=l(),B_=a("li"),Kse=a("strong"),sTo=o("speech_to_text_2"),lTo=o(" \u2014 "),Hq=a("a"),iTo=o("Speech2Text2ForCausalLM"),dTo=o(" (Speech2Text2 model)"),cTo=l(),P_=a("li"),Zse=a("strong"),fTo=o("transfo-xl"),mTo=o(" \u2014 "),Uq=a("a"),gTo=o("TransfoXLLMHeadModel"),hTo=o(" (Transformer-XL model)"),pTo=l(),I_=a("li"),ele=a("strong"),uTo=o("trocr"),_To=o(" \u2014 "),Jq=a("a"),bTo=o("TrOCRForCausalLM"),vTo=o(" (TrOCR model)"),FTo=l(),q_=a("li"),ole=a("strong"),TTo=o("xglm"),MTo=o(" \u2014 "),Yq=a("a"),ETo=o("XGLMForCausalLM"),CTo=o(" (XGLM model)"),wTo=l(),N_=a("li"),rle=a("strong"),ATo=o("xlm"),yTo=o(" \u2014 "),Kq=a("a"),LTo=o("XLMWithLMHeadModel"),xTo=o(" (XLM model)"),$To=l(),j_=a("li"),tle=a("strong"),kTo=o("xlm-prophetnet"),STo=o(" \u2014 "),Zq=a("a"),RTo=o("XLMProphetNetForCausalLM"),BTo=o(" (XLMProphetNet model)"),PTo=l(),D_=a("li"),ale=a("strong"),ITo=o("xlm-roberta"),qTo=o(" \u2014 "),eN=a("a"),NTo=o("XLMRobertaForCausalLM"),jTo=o(" (XLM-RoBERTa model)"),DTo=l(),G_=a("li"),nle=a("strong"),GTo=o("xlm-roberta-xl"),OTo=o(" \u2014 "),oN=a("a"),VTo=o("XLMRobertaXLForCausalLM"),XTo=o(" (XLM-RoBERTa-XL model)"),zTo=l(),O_=a("li"),sle=a("strong"),QTo=o("xlnet"),WTo=o(" \u2014 "),rN=a("a"),HTo=o("XLNetLMHeadModel"),UTo=o(" (XLNet model)"),JTo=l(),V_=a("p"),YTo=o("The model is set in evaluation mode by default using "),lle=a("code"),KTo=o("model.eval()"),ZTo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ile=a("code"),e7o=o("model.train()"),o7o=l(),F(X_.$$.fragment),QRe=l(),Ci=a("h2"),z_=a("a"),dle=a("span"),F(eA.$$.fragment),r7o=l(),cle=a("span"),t7o=o("AutoModelForMaskedLM"),WRe=l(),xo=a("div"),F(oA.$$.fragment),a7o=l(),wi=a("p"),n7o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tN=a("a"),s7o=o("from_pretrained()"),l7o=o(" class method or the "),aN=a("a"),i7o=o("from_config()"),d7o=o(` class
method.`),c7o=l(),rA=a("p"),f7o=o("This class cannot be instantiated directly using "),fle=a("code"),m7o=o("__init__()"),g7o=o(" (throws an error)."),h7o=l(),ot=a("div"),F(tA.$$.fragment),p7o=l(),mle=a("p"),u7o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_7o=l(),Ai=a("p"),b7o=o(`Note:
Loading a model from its configuration file does `),gle=a("strong"),v7o=o("not"),F7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=a("a"),T7o=o("from_pretrained()"),M7o=o(" to load the model weights."),E7o=l(),F(Q_.$$.fragment),C7o=l(),Ue=a("div"),F(aA.$$.fragment),w7o=l(),hle=a("p"),A7o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),y7o=l(),wa=a("p"),L7o=o("The model class to instantiate is selected based on the "),ple=a("code"),x7o=o("model_type"),$7o=o(` property of the config object (either
passed as an argument or loaded from `),ule=a("code"),k7o=o("pretrained_model_name_or_path"),S7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=a("code"),R7o=o("pretrained_model_name_or_path"),B7o=o(":"),P7o=l(),Q=a("ul"),W_=a("li"),ble=a("strong"),I7o=o("albert"),q7o=o(" \u2014 "),sN=a("a"),N7o=o("AlbertForMaskedLM"),j7o=o(" (ALBERT model)"),D7o=l(),H_=a("li"),vle=a("strong"),G7o=o("bart"),O7o=o(" \u2014 "),lN=a("a"),V7o=o("BartForConditionalGeneration"),X7o=o(" (BART model)"),z7o=l(),U_=a("li"),Fle=a("strong"),Q7o=o("bert"),W7o=o(" \u2014 "),iN=a("a"),H7o=o("BertForMaskedLM"),U7o=o(" (BERT model)"),J7o=l(),J_=a("li"),Tle=a("strong"),Y7o=o("big_bird"),K7o=o(" \u2014 "),dN=a("a"),Z7o=o("BigBirdForMaskedLM"),e9o=o(" (BigBird model)"),o9o=l(),Y_=a("li"),Mle=a("strong"),r9o=o("camembert"),t9o=o(" \u2014 "),cN=a("a"),a9o=o("CamembertForMaskedLM"),n9o=o(" (CamemBERT model)"),s9o=l(),K_=a("li"),Ele=a("strong"),l9o=o("convbert"),i9o=o(" \u2014 "),fN=a("a"),d9o=o("ConvBertForMaskedLM"),c9o=o(" (ConvBERT model)"),f9o=l(),Z_=a("li"),Cle=a("strong"),m9o=o("data2vec-text"),g9o=o(" \u2014 "),mN=a("a"),h9o=o("Data2VecTextForMaskedLM"),p9o=o(" (Data2VecText model)"),u9o=l(),e1=a("li"),wle=a("strong"),_9o=o("deberta"),b9o=o(" \u2014 "),gN=a("a"),v9o=o("DebertaForMaskedLM"),F9o=o(" (DeBERTa model)"),T9o=l(),o1=a("li"),Ale=a("strong"),M9o=o("deberta-v2"),E9o=o(" \u2014 "),hN=a("a"),C9o=o("DebertaV2ForMaskedLM"),w9o=o(" (DeBERTa-v2 model)"),A9o=l(),r1=a("li"),yle=a("strong"),y9o=o("distilbert"),L9o=o(" \u2014 "),pN=a("a"),x9o=o("DistilBertForMaskedLM"),$9o=o(" (DistilBERT model)"),k9o=l(),t1=a("li"),Lle=a("strong"),S9o=o("electra"),R9o=o(" \u2014 "),uN=a("a"),B9o=o("ElectraForMaskedLM"),P9o=o(" (ELECTRA model)"),I9o=l(),a1=a("li"),xle=a("strong"),q9o=o("flaubert"),N9o=o(" \u2014 "),_N=a("a"),j9o=o("FlaubertWithLMHeadModel"),D9o=o(" (FlauBERT model)"),G9o=l(),n1=a("li"),$le=a("strong"),O9o=o("fnet"),V9o=o(" \u2014 "),bN=a("a"),X9o=o("FNetForMaskedLM"),z9o=o(" (FNet model)"),Q9o=l(),s1=a("li"),kle=a("strong"),W9o=o("funnel"),H9o=o(" \u2014 "),vN=a("a"),U9o=o("FunnelForMaskedLM"),J9o=o(" (Funnel Transformer model)"),Y9o=l(),l1=a("li"),Sle=a("strong"),K9o=o("ibert"),Z9o=o(" \u2014 "),FN=a("a"),eMo=o("IBertForMaskedLM"),oMo=o(" (I-BERT model)"),rMo=l(),i1=a("li"),Rle=a("strong"),tMo=o("layoutlm"),aMo=o(" \u2014 "),TN=a("a"),nMo=o("LayoutLMForMaskedLM"),sMo=o(" (LayoutLM model)"),lMo=l(),d1=a("li"),Ble=a("strong"),iMo=o("longformer"),dMo=o(" \u2014 "),MN=a("a"),cMo=o("LongformerForMaskedLM"),fMo=o(" (Longformer model)"),mMo=l(),c1=a("li"),Ple=a("strong"),gMo=o("mbart"),hMo=o(" \u2014 "),EN=a("a"),pMo=o("MBartForConditionalGeneration"),uMo=o(" (mBART model)"),_Mo=l(),f1=a("li"),Ile=a("strong"),bMo=o("megatron-bert"),vMo=o(" \u2014 "),CN=a("a"),FMo=o("MegatronBertForMaskedLM"),TMo=o(" (MegatronBert model)"),MMo=l(),m1=a("li"),qle=a("strong"),EMo=o("mobilebert"),CMo=o(" \u2014 "),wN=a("a"),wMo=o("MobileBertForMaskedLM"),AMo=o(" (MobileBERT model)"),yMo=l(),g1=a("li"),Nle=a("strong"),LMo=o("mpnet"),xMo=o(" \u2014 "),AN=a("a"),$Mo=o("MPNetForMaskedLM"),kMo=o(" (MPNet model)"),SMo=l(),h1=a("li"),jle=a("strong"),RMo=o("nystromformer"),BMo=o(" \u2014 "),yN=a("a"),PMo=o("NystromformerForMaskedLM"),IMo=o(" (Nystromformer model)"),qMo=l(),p1=a("li"),Dle=a("strong"),NMo=o("perceiver"),jMo=o(" \u2014 "),LN=a("a"),DMo=o("PerceiverForMaskedLM"),GMo=o(" (Perceiver model)"),OMo=l(),u1=a("li"),Gle=a("strong"),VMo=o("qdqbert"),XMo=o(" \u2014 "),xN=a("a"),zMo=o("QDQBertForMaskedLM"),QMo=o(" (QDQBert model)"),WMo=l(),_1=a("li"),Ole=a("strong"),HMo=o("reformer"),UMo=o(" \u2014 "),$N=a("a"),JMo=o("ReformerForMaskedLM"),YMo=o(" (Reformer model)"),KMo=l(),b1=a("li"),Vle=a("strong"),ZMo=o("rembert"),eEo=o(" \u2014 "),kN=a("a"),oEo=o("RemBertForMaskedLM"),rEo=o(" (RemBERT model)"),tEo=l(),v1=a("li"),Xle=a("strong"),aEo=o("roberta"),nEo=o(" \u2014 "),SN=a("a"),sEo=o("RobertaForMaskedLM"),lEo=o(" (RoBERTa model)"),iEo=l(),F1=a("li"),zle=a("strong"),dEo=o("roformer"),cEo=o(" \u2014 "),RN=a("a"),fEo=o("RoFormerForMaskedLM"),mEo=o(" (RoFormer model)"),gEo=l(),T1=a("li"),Qle=a("strong"),hEo=o("squeezebert"),pEo=o(" \u2014 "),BN=a("a"),uEo=o("SqueezeBertForMaskedLM"),_Eo=o(" (SqueezeBERT model)"),bEo=l(),M1=a("li"),Wle=a("strong"),vEo=o("tapas"),FEo=o(" \u2014 "),PN=a("a"),TEo=o("TapasForMaskedLM"),MEo=o(" (TAPAS model)"),EEo=l(),E1=a("li"),Hle=a("strong"),CEo=o("wav2vec2"),wEo=o(" \u2014 "),Ule=a("code"),AEo=o("Wav2Vec2ForMaskedLM"),yEo=o(" (Wav2Vec2 model)"),LEo=l(),C1=a("li"),Jle=a("strong"),xEo=o("xlm"),$Eo=o(" \u2014 "),IN=a("a"),kEo=o("XLMWithLMHeadModel"),SEo=o(" (XLM model)"),REo=l(),w1=a("li"),Yle=a("strong"),BEo=o("xlm-roberta"),PEo=o(" \u2014 "),qN=a("a"),IEo=o("XLMRobertaForMaskedLM"),qEo=o(" (XLM-RoBERTa model)"),NEo=l(),A1=a("li"),Kle=a("strong"),jEo=o("xlm-roberta-xl"),DEo=o(" \u2014 "),NN=a("a"),GEo=o("XLMRobertaXLForMaskedLM"),OEo=o(" (XLM-RoBERTa-XL model)"),VEo=l(),y1=a("li"),Zle=a("strong"),XEo=o("yoso"),zEo=o(" \u2014 "),jN=a("a"),QEo=o("YosoForMaskedLM"),WEo=o(" (YOSO model)"),HEo=l(),L1=a("p"),UEo=o("The model is set in evaluation mode by default using "),eie=a("code"),JEo=o("model.eval()"),YEo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=a("code"),KEo=o("model.train()"),ZEo=l(),F(x1.$$.fragment),HRe=l(),yi=a("h2"),$1=a("a"),rie=a("span"),F(nA.$$.fragment),e5o=l(),tie=a("span"),o5o=o("AutoModelForSeq2SeqLM"),URe=l(),$o=a("div"),F(sA.$$.fragment),r5o=l(),Li=a("p"),t5o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DN=a("a"),a5o=o("from_pretrained()"),n5o=o(" class method or the "),GN=a("a"),s5o=o("from_config()"),l5o=o(` class
method.`),i5o=l(),lA=a("p"),d5o=o("This class cannot be instantiated directly using "),aie=a("code"),c5o=o("__init__()"),f5o=o(" (throws an error)."),m5o=l(),rt=a("div"),F(iA.$$.fragment),g5o=l(),nie=a("p"),h5o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),p5o=l(),xi=a("p"),u5o=o(`Note:
Loading a model from its configuration file does `),sie=a("strong"),_5o=o("not"),b5o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ON=a("a"),v5o=o("from_pretrained()"),F5o=o(" to load the model weights."),T5o=l(),F(k1.$$.fragment),M5o=l(),Je=a("div"),F(dA.$$.fragment),E5o=l(),lie=a("p"),C5o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),w5o=l(),Aa=a("p"),A5o=o("The model class to instantiate is selected based on the "),iie=a("code"),y5o=o("model_type"),L5o=o(` property of the config object (either
passed as an argument or loaded from `),die=a("code"),x5o=o("pretrained_model_name_or_path"),$5o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=a("code"),k5o=o("pretrained_model_name_or_path"),S5o=o(":"),R5o=l(),he=a("ul"),S1=a("li"),fie=a("strong"),B5o=o("bart"),P5o=o(" \u2014 "),VN=a("a"),I5o=o("BartForConditionalGeneration"),q5o=o(" (BART model)"),N5o=l(),R1=a("li"),mie=a("strong"),j5o=o("bigbird_pegasus"),D5o=o(" \u2014 "),XN=a("a"),G5o=o("BigBirdPegasusForConditionalGeneration"),O5o=o(" (BigBirdPegasus model)"),V5o=l(),B1=a("li"),gie=a("strong"),X5o=o("blenderbot"),z5o=o(" \u2014 "),zN=a("a"),Q5o=o("BlenderbotForConditionalGeneration"),W5o=o(" (Blenderbot model)"),H5o=l(),P1=a("li"),hie=a("strong"),U5o=o("blenderbot-small"),J5o=o(" \u2014 "),QN=a("a"),Y5o=o("BlenderbotSmallForConditionalGeneration"),K5o=o(" (BlenderbotSmall model)"),Z5o=l(),I1=a("li"),pie=a("strong"),eCo=o("encoder-decoder"),oCo=o(" \u2014 "),WN=a("a"),rCo=o("EncoderDecoderModel"),tCo=o(" (Encoder decoder model)"),aCo=l(),q1=a("li"),uie=a("strong"),nCo=o("fsmt"),sCo=o(" \u2014 "),HN=a("a"),lCo=o("FSMTForConditionalGeneration"),iCo=o(" (FairSeq Machine-Translation model)"),dCo=l(),N1=a("li"),_ie=a("strong"),cCo=o("led"),fCo=o(" \u2014 "),UN=a("a"),mCo=o("LEDForConditionalGeneration"),gCo=o(" (LED model)"),hCo=l(),j1=a("li"),bie=a("strong"),pCo=o("m2m_100"),uCo=o(" \u2014 "),JN=a("a"),_Co=o("M2M100ForConditionalGeneration"),bCo=o(" (M2M100 model)"),vCo=l(),D1=a("li"),vie=a("strong"),FCo=o("marian"),TCo=o(" \u2014 "),YN=a("a"),MCo=o("MarianMTModel"),ECo=o(" (Marian model)"),CCo=l(),G1=a("li"),Fie=a("strong"),wCo=o("mbart"),ACo=o(" \u2014 "),KN=a("a"),yCo=o("MBartForConditionalGeneration"),LCo=o(" (mBART model)"),xCo=l(),O1=a("li"),Tie=a("strong"),$Co=o("mt5"),kCo=o(" \u2014 "),ZN=a("a"),SCo=o("MT5ForConditionalGeneration"),RCo=o(" (mT5 model)"),BCo=l(),V1=a("li"),Mie=a("strong"),PCo=o("pegasus"),ICo=o(" \u2014 "),ej=a("a"),qCo=o("PegasusForConditionalGeneration"),NCo=o(" (Pegasus model)"),jCo=l(),X1=a("li"),Eie=a("strong"),DCo=o("plbart"),GCo=o(" \u2014 "),oj=a("a"),OCo=o("PLBartForConditionalGeneration"),VCo=o(" (PLBart model)"),XCo=l(),z1=a("li"),Cie=a("strong"),zCo=o("prophetnet"),QCo=o(" \u2014 "),rj=a("a"),WCo=o("ProphetNetForConditionalGeneration"),HCo=o(" (ProphetNet model)"),UCo=l(),Q1=a("li"),wie=a("strong"),JCo=o("t5"),YCo=o(" \u2014 "),tj=a("a"),KCo=o("T5ForConditionalGeneration"),ZCo=o(" (T5 model)"),e3o=l(),W1=a("li"),Aie=a("strong"),o3o=o("tapex"),r3o=o(" \u2014 "),aj=a("a"),t3o=o("BartForConditionalGeneration"),a3o=o(" (TAPEX model)"),n3o=l(),H1=a("li"),yie=a("strong"),s3o=o("xlm-prophetnet"),l3o=o(" \u2014 "),nj=a("a"),i3o=o("XLMProphetNetForConditionalGeneration"),d3o=o(" (XLMProphetNet model)"),c3o=l(),U1=a("p"),f3o=o("The model is set in evaluation mode by default using "),Lie=a("code"),m3o=o("model.eval()"),g3o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=a("code"),h3o=o("model.train()"),p3o=l(),F(J1.$$.fragment),JRe=l(),$i=a("h2"),Y1=a("a"),$ie=a("span"),F(cA.$$.fragment),u3o=l(),kie=a("span"),_3o=o("AutoModelForSequenceClassification"),YRe=l(),ko=a("div"),F(fA.$$.fragment),b3o=l(),ki=a("p"),v3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sj=a("a"),F3o=o("from_pretrained()"),T3o=o(" class method or the "),lj=a("a"),M3o=o("from_config()"),E3o=o(` class
method.`),C3o=l(),mA=a("p"),w3o=o("This class cannot be instantiated directly using "),Sie=a("code"),A3o=o("__init__()"),y3o=o(" (throws an error)."),L3o=l(),tt=a("div"),F(gA.$$.fragment),x3o=l(),Rie=a("p"),$3o=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),k3o=l(),Si=a("p"),S3o=o(`Note:
Loading a model from its configuration file does `),Bie=a("strong"),R3o=o("not"),B3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ij=a("a"),P3o=o("from_pretrained()"),I3o=o(" to load the model weights."),q3o=l(),F(K1.$$.fragment),N3o=l(),Ye=a("div"),F(hA.$$.fragment),j3o=l(),Pie=a("p"),D3o=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),G3o=l(),ya=a("p"),O3o=o("The model class to instantiate is selected based on the "),Iie=a("code"),V3o=o("model_type"),X3o=o(` property of the config object (either
passed as an argument or loaded from `),qie=a("code"),z3o=o("pretrained_model_name_or_path"),Q3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=a("code"),W3o=o("pretrained_model_name_or_path"),H3o=o(":"),U3o=l(),q=a("ul"),Z1=a("li"),jie=a("strong"),J3o=o("albert"),Y3o=o(" \u2014 "),dj=a("a"),K3o=o("AlbertForSequenceClassification"),Z3o=o(" (ALBERT model)"),ewo=l(),eb=a("li"),Die=a("strong"),owo=o("bart"),rwo=o(" \u2014 "),cj=a("a"),two=o("BartForSequenceClassification"),awo=o(" (BART model)"),nwo=l(),ob=a("li"),Gie=a("strong"),swo=o("bert"),lwo=o(" \u2014 "),fj=a("a"),iwo=o("BertForSequenceClassification"),dwo=o(" (BERT model)"),cwo=l(),rb=a("li"),Oie=a("strong"),fwo=o("big_bird"),mwo=o(" \u2014 "),mj=a("a"),gwo=o("BigBirdForSequenceClassification"),hwo=o(" (BigBird model)"),pwo=l(),tb=a("li"),Vie=a("strong"),uwo=o("bigbird_pegasus"),_wo=o(" \u2014 "),gj=a("a"),bwo=o("BigBirdPegasusForSequenceClassification"),vwo=o(" (BigBirdPegasus model)"),Fwo=l(),ab=a("li"),Xie=a("strong"),Two=o("camembert"),Mwo=o(" \u2014 "),hj=a("a"),Ewo=o("CamembertForSequenceClassification"),Cwo=o(" (CamemBERT model)"),wwo=l(),nb=a("li"),zie=a("strong"),Awo=o("canine"),ywo=o(" \u2014 "),pj=a("a"),Lwo=o("CanineForSequenceClassification"),xwo=o(" (Canine model)"),$wo=l(),sb=a("li"),Qie=a("strong"),kwo=o("convbert"),Swo=o(" \u2014 "),uj=a("a"),Rwo=o("ConvBertForSequenceClassification"),Bwo=o(" (ConvBERT model)"),Pwo=l(),lb=a("li"),Wie=a("strong"),Iwo=o("ctrl"),qwo=o(" \u2014 "),_j=a("a"),Nwo=o("CTRLForSequenceClassification"),jwo=o(" (CTRL model)"),Dwo=l(),ib=a("li"),Hie=a("strong"),Gwo=o("data2vec-text"),Owo=o(" \u2014 "),bj=a("a"),Vwo=o("Data2VecTextForSequenceClassification"),Xwo=o(" (Data2VecText model)"),zwo=l(),db=a("li"),Uie=a("strong"),Qwo=o("deberta"),Wwo=o(" \u2014 "),vj=a("a"),Hwo=o("DebertaForSequenceClassification"),Uwo=o(" (DeBERTa model)"),Jwo=l(),cb=a("li"),Jie=a("strong"),Ywo=o("deberta-v2"),Kwo=o(" \u2014 "),Fj=a("a"),Zwo=o("DebertaV2ForSequenceClassification"),eAo=o(" (DeBERTa-v2 model)"),oAo=l(),fb=a("li"),Yie=a("strong"),rAo=o("distilbert"),tAo=o(" \u2014 "),Tj=a("a"),aAo=o("DistilBertForSequenceClassification"),nAo=o(" (DistilBERT model)"),sAo=l(),mb=a("li"),Kie=a("strong"),lAo=o("electra"),iAo=o(" \u2014 "),Mj=a("a"),dAo=o("ElectraForSequenceClassification"),cAo=o(" (ELECTRA model)"),fAo=l(),gb=a("li"),Zie=a("strong"),mAo=o("flaubert"),gAo=o(" \u2014 "),Ej=a("a"),hAo=o("FlaubertForSequenceClassification"),pAo=o(" (FlauBERT model)"),uAo=l(),hb=a("li"),ede=a("strong"),_Ao=o("fnet"),bAo=o(" \u2014 "),Cj=a("a"),vAo=o("FNetForSequenceClassification"),FAo=o(" (FNet model)"),TAo=l(),pb=a("li"),ode=a("strong"),MAo=o("funnel"),EAo=o(" \u2014 "),wj=a("a"),CAo=o("FunnelForSequenceClassification"),wAo=o(" (Funnel Transformer model)"),AAo=l(),ub=a("li"),rde=a("strong"),yAo=o("gpt2"),LAo=o(" \u2014 "),Aj=a("a"),xAo=o("GPT2ForSequenceClassification"),$Ao=o(" (OpenAI GPT-2 model)"),kAo=l(),_b=a("li"),tde=a("strong"),SAo=o("gpt_neo"),RAo=o(" \u2014 "),yj=a("a"),BAo=o("GPTNeoForSequenceClassification"),PAo=o(" (GPT Neo model)"),IAo=l(),bb=a("li"),ade=a("strong"),qAo=o("gptj"),NAo=o(" \u2014 "),Lj=a("a"),jAo=o("GPTJForSequenceClassification"),DAo=o(" (GPT-J model)"),GAo=l(),vb=a("li"),nde=a("strong"),OAo=o("ibert"),VAo=o(" \u2014 "),xj=a("a"),XAo=o("IBertForSequenceClassification"),zAo=o(" (I-BERT model)"),QAo=l(),Fb=a("li"),sde=a("strong"),WAo=o("layoutlm"),HAo=o(" \u2014 "),$j=a("a"),UAo=o("LayoutLMForSequenceClassification"),JAo=o(" (LayoutLM model)"),YAo=l(),Tb=a("li"),lde=a("strong"),KAo=o("layoutlmv2"),ZAo=o(" \u2014 "),kj=a("a"),e0o=o("LayoutLMv2ForSequenceClassification"),o0o=o(" (LayoutLMv2 model)"),r0o=l(),Mb=a("li"),ide=a("strong"),t0o=o("led"),a0o=o(" \u2014 "),Sj=a("a"),n0o=o("LEDForSequenceClassification"),s0o=o(" (LED model)"),l0o=l(),Eb=a("li"),dde=a("strong"),i0o=o("longformer"),d0o=o(" \u2014 "),Rj=a("a"),c0o=o("LongformerForSequenceClassification"),f0o=o(" (Longformer model)"),m0o=l(),Cb=a("li"),cde=a("strong"),g0o=o("mbart"),h0o=o(" \u2014 "),Bj=a("a"),p0o=o("MBartForSequenceClassification"),u0o=o(" (mBART model)"),_0o=l(),wb=a("li"),fde=a("strong"),b0o=o("megatron-bert"),v0o=o(" \u2014 "),Pj=a("a"),F0o=o("MegatronBertForSequenceClassification"),T0o=o(" (MegatronBert model)"),M0o=l(),Ab=a("li"),mde=a("strong"),E0o=o("mobilebert"),C0o=o(" \u2014 "),Ij=a("a"),w0o=o("MobileBertForSequenceClassification"),A0o=o(" (MobileBERT model)"),y0o=l(),yb=a("li"),gde=a("strong"),L0o=o("mpnet"),x0o=o(" \u2014 "),qj=a("a"),$0o=o("MPNetForSequenceClassification"),k0o=o(" (MPNet model)"),S0o=l(),Lb=a("li"),hde=a("strong"),R0o=o("nystromformer"),B0o=o(" \u2014 "),Nj=a("a"),P0o=o("NystromformerForSequenceClassification"),I0o=o(" (Nystromformer model)"),q0o=l(),xb=a("li"),pde=a("strong"),N0o=o("openai-gpt"),j0o=o(" \u2014 "),jj=a("a"),D0o=o("OpenAIGPTForSequenceClassification"),G0o=o(" (OpenAI GPT model)"),O0o=l(),$b=a("li"),ude=a("strong"),V0o=o("perceiver"),X0o=o(" \u2014 "),Dj=a("a"),z0o=o("PerceiverForSequenceClassification"),Q0o=o(" (Perceiver model)"),W0o=l(),kb=a("li"),_de=a("strong"),H0o=o("plbart"),U0o=o(" \u2014 "),Gj=a("a"),J0o=o("PLBartForSequenceClassification"),Y0o=o(" (PLBart model)"),K0o=l(),Sb=a("li"),bde=a("strong"),Z0o=o("qdqbert"),eyo=o(" \u2014 "),Oj=a("a"),oyo=o("QDQBertForSequenceClassification"),ryo=o(" (QDQBert model)"),tyo=l(),Rb=a("li"),vde=a("strong"),ayo=o("reformer"),nyo=o(" \u2014 "),Vj=a("a"),syo=o("ReformerForSequenceClassification"),lyo=o(" (Reformer model)"),iyo=l(),Bb=a("li"),Fde=a("strong"),dyo=o("rembert"),cyo=o(" \u2014 "),Xj=a("a"),fyo=o("RemBertForSequenceClassification"),myo=o(" (RemBERT model)"),gyo=l(),Pb=a("li"),Tde=a("strong"),hyo=o("roberta"),pyo=o(" \u2014 "),zj=a("a"),uyo=o("RobertaForSequenceClassification"),_yo=o(" (RoBERTa model)"),byo=l(),Ib=a("li"),Mde=a("strong"),vyo=o("roformer"),Fyo=o(" \u2014 "),Qj=a("a"),Tyo=o("RoFormerForSequenceClassification"),Myo=o(" (RoFormer model)"),Eyo=l(),qb=a("li"),Ede=a("strong"),Cyo=o("squeezebert"),wyo=o(" \u2014 "),Wj=a("a"),Ayo=o("SqueezeBertForSequenceClassification"),yyo=o(" (SqueezeBERT model)"),Lyo=l(),Nb=a("li"),Cde=a("strong"),xyo=o("tapas"),$yo=o(" \u2014 "),Hj=a("a"),kyo=o("TapasForSequenceClassification"),Syo=o(" (TAPAS model)"),Ryo=l(),jb=a("li"),wde=a("strong"),Byo=o("tapex"),Pyo=o(" \u2014 "),Uj=a("a"),Iyo=o("BartForSequenceClassification"),qyo=o(" (TAPEX model)"),Nyo=l(),Db=a("li"),Ade=a("strong"),jyo=o("transfo-xl"),Dyo=o(" \u2014 "),Jj=a("a"),Gyo=o("TransfoXLForSequenceClassification"),Oyo=o(" (Transformer-XL model)"),Vyo=l(),Gb=a("li"),yde=a("strong"),Xyo=o("xlm"),zyo=o(" \u2014 "),Yj=a("a"),Qyo=o("XLMForSequenceClassification"),Wyo=o(" (XLM model)"),Hyo=l(),Ob=a("li"),Lde=a("strong"),Uyo=o("xlm-roberta"),Jyo=o(" \u2014 "),Kj=a("a"),Yyo=o("XLMRobertaForSequenceClassification"),Kyo=o(" (XLM-RoBERTa model)"),Zyo=l(),Vb=a("li"),xde=a("strong"),eLo=o("xlm-roberta-xl"),oLo=o(" \u2014 "),Zj=a("a"),rLo=o("XLMRobertaXLForSequenceClassification"),tLo=o(" (XLM-RoBERTa-XL model)"),aLo=l(),Xb=a("li"),$de=a("strong"),nLo=o("xlnet"),sLo=o(" \u2014 "),eD=a("a"),lLo=o("XLNetForSequenceClassification"),iLo=o(" (XLNet model)"),dLo=l(),zb=a("li"),kde=a("strong"),cLo=o("yoso"),fLo=o(" \u2014 "),oD=a("a"),mLo=o("YosoForSequenceClassification"),gLo=o(" (YOSO model)"),hLo=l(),Qb=a("p"),pLo=o("The model is set in evaluation mode by default using "),Sde=a("code"),uLo=o("model.eval()"),_Lo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=a("code"),bLo=o("model.train()"),vLo=l(),F(Wb.$$.fragment),KRe=l(),Ri=a("h2"),Hb=a("a"),Bde=a("span"),F(pA.$$.fragment),FLo=l(),Pde=a("span"),TLo=o("AutoModelForMultipleChoice"),ZRe=l(),So=a("div"),F(uA.$$.fragment),MLo=l(),Bi=a("p"),ELo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rD=a("a"),CLo=o("from_pretrained()"),wLo=o(" class method or the "),tD=a("a"),ALo=o("from_config()"),yLo=o(` class
method.`),LLo=l(),_A=a("p"),xLo=o("This class cannot be instantiated directly using "),Ide=a("code"),$Lo=o("__init__()"),kLo=o(" (throws an error)."),SLo=l(),at=a("div"),F(bA.$$.fragment),RLo=l(),qde=a("p"),BLo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),PLo=l(),Pi=a("p"),ILo=o(`Note:
Loading a model from its configuration file does `),Nde=a("strong"),qLo=o("not"),NLo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=a("a"),jLo=o("from_pretrained()"),DLo=o(" to load the model weights."),GLo=l(),F(Ub.$$.fragment),OLo=l(),Ke=a("div"),F(vA.$$.fragment),VLo=l(),jde=a("p"),XLo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zLo=l(),La=a("p"),QLo=o("The model class to instantiate is selected based on the "),Dde=a("code"),WLo=o("model_type"),HLo=o(` property of the config object (either
passed as an argument or loaded from `),Gde=a("code"),ULo=o("pretrained_model_name_or_path"),JLo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=a("code"),YLo=o("pretrained_model_name_or_path"),KLo=o(":"),ZLo=l(),Y=a("ul"),Jb=a("li"),Vde=a("strong"),e8o=o("albert"),o8o=o(" \u2014 "),nD=a("a"),r8o=o("AlbertForMultipleChoice"),t8o=o(" (ALBERT model)"),a8o=l(),Yb=a("li"),Xde=a("strong"),n8o=o("bert"),s8o=o(" \u2014 "),sD=a("a"),l8o=o("BertForMultipleChoice"),i8o=o(" (BERT model)"),d8o=l(),Kb=a("li"),zde=a("strong"),c8o=o("big_bird"),f8o=o(" \u2014 "),lD=a("a"),m8o=o("BigBirdForMultipleChoice"),g8o=o(" (BigBird model)"),h8o=l(),Zb=a("li"),Qde=a("strong"),p8o=o("camembert"),u8o=o(" \u2014 "),iD=a("a"),_8o=o("CamembertForMultipleChoice"),b8o=o(" (CamemBERT model)"),v8o=l(),e4=a("li"),Wde=a("strong"),F8o=o("canine"),T8o=o(" \u2014 "),dD=a("a"),M8o=o("CanineForMultipleChoice"),E8o=o(" (Canine model)"),C8o=l(),o4=a("li"),Hde=a("strong"),w8o=o("convbert"),A8o=o(" \u2014 "),cD=a("a"),y8o=o("ConvBertForMultipleChoice"),L8o=o(" (ConvBERT model)"),x8o=l(),r4=a("li"),Ude=a("strong"),$8o=o("data2vec-text"),k8o=o(" \u2014 "),fD=a("a"),S8o=o("Data2VecTextForMultipleChoice"),R8o=o(" (Data2VecText model)"),B8o=l(),t4=a("li"),Jde=a("strong"),P8o=o("distilbert"),I8o=o(" \u2014 "),mD=a("a"),q8o=o("DistilBertForMultipleChoice"),N8o=o(" (DistilBERT model)"),j8o=l(),a4=a("li"),Yde=a("strong"),D8o=o("electra"),G8o=o(" \u2014 "),gD=a("a"),O8o=o("ElectraForMultipleChoice"),V8o=o(" (ELECTRA model)"),X8o=l(),n4=a("li"),Kde=a("strong"),z8o=o("flaubert"),Q8o=o(" \u2014 "),hD=a("a"),W8o=o("FlaubertForMultipleChoice"),H8o=o(" (FlauBERT model)"),U8o=l(),s4=a("li"),Zde=a("strong"),J8o=o("fnet"),Y8o=o(" \u2014 "),pD=a("a"),K8o=o("FNetForMultipleChoice"),Z8o=o(" (FNet model)"),exo=l(),l4=a("li"),ece=a("strong"),oxo=o("funnel"),rxo=o(" \u2014 "),uD=a("a"),txo=o("FunnelForMultipleChoice"),axo=o(" (Funnel Transformer model)"),nxo=l(),i4=a("li"),oce=a("strong"),sxo=o("ibert"),lxo=o(" \u2014 "),_D=a("a"),ixo=o("IBertForMultipleChoice"),dxo=o(" (I-BERT model)"),cxo=l(),d4=a("li"),rce=a("strong"),fxo=o("longformer"),mxo=o(" \u2014 "),bD=a("a"),gxo=o("LongformerForMultipleChoice"),hxo=o(" (Longformer model)"),pxo=l(),c4=a("li"),tce=a("strong"),uxo=o("megatron-bert"),_xo=o(" \u2014 "),vD=a("a"),bxo=o("MegatronBertForMultipleChoice"),vxo=o(" (MegatronBert model)"),Fxo=l(),f4=a("li"),ace=a("strong"),Txo=o("mobilebert"),Mxo=o(" \u2014 "),FD=a("a"),Exo=o("MobileBertForMultipleChoice"),Cxo=o(" (MobileBERT model)"),wxo=l(),m4=a("li"),nce=a("strong"),Axo=o("mpnet"),yxo=o(" \u2014 "),TD=a("a"),Lxo=o("MPNetForMultipleChoice"),xxo=o(" (MPNet model)"),$xo=l(),g4=a("li"),sce=a("strong"),kxo=o("nystromformer"),Sxo=o(" \u2014 "),MD=a("a"),Rxo=o("NystromformerForMultipleChoice"),Bxo=o(" (Nystromformer model)"),Pxo=l(),h4=a("li"),lce=a("strong"),Ixo=o("qdqbert"),qxo=o(" \u2014 "),ED=a("a"),Nxo=o("QDQBertForMultipleChoice"),jxo=o(" (QDQBert model)"),Dxo=l(),p4=a("li"),ice=a("strong"),Gxo=o("rembert"),Oxo=o(" \u2014 "),CD=a("a"),Vxo=o("RemBertForMultipleChoice"),Xxo=o(" (RemBERT model)"),zxo=l(),u4=a("li"),dce=a("strong"),Qxo=o("roberta"),Wxo=o(" \u2014 "),wD=a("a"),Hxo=o("RobertaForMultipleChoice"),Uxo=o(" (RoBERTa model)"),Jxo=l(),_4=a("li"),cce=a("strong"),Yxo=o("roformer"),Kxo=o(" \u2014 "),AD=a("a"),Zxo=o("RoFormerForMultipleChoice"),e$o=o(" (RoFormer model)"),o$o=l(),b4=a("li"),fce=a("strong"),r$o=o("squeezebert"),t$o=o(" \u2014 "),yD=a("a"),a$o=o("SqueezeBertForMultipleChoice"),n$o=o(" (SqueezeBERT model)"),s$o=l(),v4=a("li"),mce=a("strong"),l$o=o("xlm"),i$o=o(" \u2014 "),LD=a("a"),d$o=o("XLMForMultipleChoice"),c$o=o(" (XLM model)"),f$o=l(),F4=a("li"),gce=a("strong"),m$o=o("xlm-roberta"),g$o=o(" \u2014 "),xD=a("a"),h$o=o("XLMRobertaForMultipleChoice"),p$o=o(" (XLM-RoBERTa model)"),u$o=l(),T4=a("li"),hce=a("strong"),_$o=o("xlm-roberta-xl"),b$o=o(" \u2014 "),$D=a("a"),v$o=o("XLMRobertaXLForMultipleChoice"),F$o=o(" (XLM-RoBERTa-XL model)"),T$o=l(),M4=a("li"),pce=a("strong"),M$o=o("xlnet"),E$o=o(" \u2014 "),kD=a("a"),C$o=o("XLNetForMultipleChoice"),w$o=o(" (XLNet model)"),A$o=l(),E4=a("li"),uce=a("strong"),y$o=o("yoso"),L$o=o(" \u2014 "),SD=a("a"),x$o=o("YosoForMultipleChoice"),$$o=o(" (YOSO model)"),k$o=l(),C4=a("p"),S$o=o("The model is set in evaluation mode by default using "),_ce=a("code"),R$o=o("model.eval()"),B$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bce=a("code"),P$o=o("model.train()"),I$o=l(),F(w4.$$.fragment),eBe=l(),Ii=a("h2"),A4=a("a"),vce=a("span"),F(FA.$$.fragment),q$o=l(),Fce=a("span"),N$o=o("AutoModelForNextSentencePrediction"),oBe=l(),Ro=a("div"),F(TA.$$.fragment),j$o=l(),qi=a("p"),D$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RD=a("a"),G$o=o("from_pretrained()"),O$o=o(" class method or the "),BD=a("a"),V$o=o("from_config()"),X$o=o(` class
method.`),z$o=l(),MA=a("p"),Q$o=o("This class cannot be instantiated directly using "),Tce=a("code"),W$o=o("__init__()"),H$o=o(" (throws an error)."),U$o=l(),nt=a("div"),F(EA.$$.fragment),J$o=l(),Mce=a("p"),Y$o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),K$o=l(),Ni=a("p"),Z$o=o(`Note:
Loading a model from its configuration file does `),Ece=a("strong"),eko=o("not"),oko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=a("a"),rko=o("from_pretrained()"),tko=o(" to load the model weights."),ako=l(),F(y4.$$.fragment),nko=l(),Ze=a("div"),F(CA.$$.fragment),sko=l(),Cce=a("p"),lko=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),iko=l(),xa=a("p"),dko=o("The model class to instantiate is selected based on the "),wce=a("code"),cko=o("model_type"),fko=o(` property of the config object (either
passed as an argument or loaded from `),Ace=a("code"),mko=o("pretrained_model_name_or_path"),gko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=a("code"),hko=o("pretrained_model_name_or_path"),pko=o(":"),uko=l(),Wr=a("ul"),L4=a("li"),Lce=a("strong"),_ko=o("bert"),bko=o(" \u2014 "),ID=a("a"),vko=o("BertForNextSentencePrediction"),Fko=o(" (BERT model)"),Tko=l(),x4=a("li"),xce=a("strong"),Mko=o("fnet"),Eko=o(" \u2014 "),qD=a("a"),Cko=o("FNetForNextSentencePrediction"),wko=o(" (FNet model)"),Ako=l(),$4=a("li"),$ce=a("strong"),yko=o("megatron-bert"),Lko=o(" \u2014 "),ND=a("a"),xko=o("MegatronBertForNextSentencePrediction"),$ko=o(" (MegatronBert model)"),kko=l(),k4=a("li"),kce=a("strong"),Sko=o("mobilebert"),Rko=o(" \u2014 "),jD=a("a"),Bko=o("MobileBertForNextSentencePrediction"),Pko=o(" (MobileBERT model)"),Iko=l(),S4=a("li"),Sce=a("strong"),qko=o("qdqbert"),Nko=o(" \u2014 "),DD=a("a"),jko=o("QDQBertForNextSentencePrediction"),Dko=o(" (QDQBert model)"),Gko=l(),R4=a("p"),Oko=o("The model is set in evaluation mode by default using "),Rce=a("code"),Vko=o("model.eval()"),Xko=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bce=a("code"),zko=o("model.train()"),Qko=l(),F(B4.$$.fragment),rBe=l(),ji=a("h2"),P4=a("a"),Pce=a("span"),F(wA.$$.fragment),Wko=l(),Ice=a("span"),Hko=o("AutoModelForTokenClassification"),tBe=l(),Bo=a("div"),F(AA.$$.fragment),Uko=l(),Di=a("p"),Jko=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GD=a("a"),Yko=o("from_pretrained()"),Kko=o(" class method or the "),OD=a("a"),Zko=o("from_config()"),eSo=o(` class
method.`),oSo=l(),yA=a("p"),rSo=o("This class cannot be instantiated directly using "),qce=a("code"),tSo=o("__init__()"),aSo=o(" (throws an error)."),nSo=l(),st=a("div"),F(LA.$$.fragment),sSo=l(),Nce=a("p"),lSo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),iSo=l(),Gi=a("p"),dSo=o(`Note:
Loading a model from its configuration file does `),jce=a("strong"),cSo=o("not"),fSo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),mSo=o("from_pretrained()"),gSo=o(" to load the model weights."),hSo=l(),F(I4.$$.fragment),pSo=l(),eo=a("div"),F(xA.$$.fragment),uSo=l(),Dce=a("p"),_So=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),bSo=l(),$a=a("p"),vSo=o("The model class to instantiate is selected based on the "),Gce=a("code"),FSo=o("model_type"),TSo=o(` property of the config object (either
passed as an argument or loaded from `),Oce=a("code"),MSo=o("pretrained_model_name_or_path"),ESo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=a("code"),CSo=o("pretrained_model_name_or_path"),wSo=o(":"),ASo=l(),U=a("ul"),q4=a("li"),Xce=a("strong"),ySo=o("albert"),LSo=o(" \u2014 "),XD=a("a"),xSo=o("AlbertForTokenClassification"),$So=o(" (ALBERT model)"),kSo=l(),N4=a("li"),zce=a("strong"),SSo=o("bert"),RSo=o(" \u2014 "),zD=a("a"),BSo=o("BertForTokenClassification"),PSo=o(" (BERT model)"),ISo=l(),j4=a("li"),Qce=a("strong"),qSo=o("big_bird"),NSo=o(" \u2014 "),QD=a("a"),jSo=o("BigBirdForTokenClassification"),DSo=o(" (BigBird model)"),GSo=l(),D4=a("li"),Wce=a("strong"),OSo=o("camembert"),VSo=o(" \u2014 "),WD=a("a"),XSo=o("CamembertForTokenClassification"),zSo=o(" (CamemBERT model)"),QSo=l(),G4=a("li"),Hce=a("strong"),WSo=o("canine"),HSo=o(" \u2014 "),HD=a("a"),USo=o("CanineForTokenClassification"),JSo=o(" (Canine model)"),YSo=l(),O4=a("li"),Uce=a("strong"),KSo=o("convbert"),ZSo=o(" \u2014 "),UD=a("a"),eRo=o("ConvBertForTokenClassification"),oRo=o(" (ConvBERT model)"),rRo=l(),V4=a("li"),Jce=a("strong"),tRo=o("data2vec-text"),aRo=o(" \u2014 "),JD=a("a"),nRo=o("Data2VecTextForTokenClassification"),sRo=o(" (Data2VecText model)"),lRo=l(),X4=a("li"),Yce=a("strong"),iRo=o("deberta"),dRo=o(" \u2014 "),YD=a("a"),cRo=o("DebertaForTokenClassification"),fRo=o(" (DeBERTa model)"),mRo=l(),z4=a("li"),Kce=a("strong"),gRo=o("deberta-v2"),hRo=o(" \u2014 "),KD=a("a"),pRo=o("DebertaV2ForTokenClassification"),uRo=o(" (DeBERTa-v2 model)"),_Ro=l(),Q4=a("li"),Zce=a("strong"),bRo=o("distilbert"),vRo=o(" \u2014 "),ZD=a("a"),FRo=o("DistilBertForTokenClassification"),TRo=o(" (DistilBERT model)"),MRo=l(),W4=a("li"),efe=a("strong"),ERo=o("electra"),CRo=o(" \u2014 "),eG=a("a"),wRo=o("ElectraForTokenClassification"),ARo=o(" (ELECTRA model)"),yRo=l(),H4=a("li"),ofe=a("strong"),LRo=o("flaubert"),xRo=o(" \u2014 "),oG=a("a"),$Ro=o("FlaubertForTokenClassification"),kRo=o(" (FlauBERT model)"),SRo=l(),U4=a("li"),rfe=a("strong"),RRo=o("fnet"),BRo=o(" \u2014 "),rG=a("a"),PRo=o("FNetForTokenClassification"),IRo=o(" (FNet model)"),qRo=l(),J4=a("li"),tfe=a("strong"),NRo=o("funnel"),jRo=o(" \u2014 "),tG=a("a"),DRo=o("FunnelForTokenClassification"),GRo=o(" (Funnel Transformer model)"),ORo=l(),Y4=a("li"),afe=a("strong"),VRo=o("gpt2"),XRo=o(" \u2014 "),aG=a("a"),zRo=o("GPT2ForTokenClassification"),QRo=o(" (OpenAI GPT-2 model)"),WRo=l(),K4=a("li"),nfe=a("strong"),HRo=o("ibert"),URo=o(" \u2014 "),nG=a("a"),JRo=o("IBertForTokenClassification"),YRo=o(" (I-BERT model)"),KRo=l(),Z4=a("li"),sfe=a("strong"),ZRo=o("layoutlm"),eBo=o(" \u2014 "),sG=a("a"),oBo=o("LayoutLMForTokenClassification"),rBo=o(" (LayoutLM model)"),tBo=l(),e2=a("li"),lfe=a("strong"),aBo=o("layoutlmv2"),nBo=o(" \u2014 "),lG=a("a"),sBo=o("LayoutLMv2ForTokenClassification"),lBo=o(" (LayoutLMv2 model)"),iBo=l(),o2=a("li"),ife=a("strong"),dBo=o("longformer"),cBo=o(" \u2014 "),iG=a("a"),fBo=o("LongformerForTokenClassification"),mBo=o(" (Longformer model)"),gBo=l(),r2=a("li"),dfe=a("strong"),hBo=o("megatron-bert"),pBo=o(" \u2014 "),dG=a("a"),uBo=o("MegatronBertForTokenClassification"),_Bo=o(" (MegatronBert model)"),bBo=l(),t2=a("li"),cfe=a("strong"),vBo=o("mobilebert"),FBo=o(" \u2014 "),cG=a("a"),TBo=o("MobileBertForTokenClassification"),MBo=o(" (MobileBERT model)"),EBo=l(),a2=a("li"),ffe=a("strong"),CBo=o("mpnet"),wBo=o(" \u2014 "),fG=a("a"),ABo=o("MPNetForTokenClassification"),yBo=o(" (MPNet model)"),LBo=l(),n2=a("li"),mfe=a("strong"),xBo=o("nystromformer"),$Bo=o(" \u2014 "),mG=a("a"),kBo=o("NystromformerForTokenClassification"),SBo=o(" (Nystromformer model)"),RBo=l(),s2=a("li"),gfe=a("strong"),BBo=o("qdqbert"),PBo=o(" \u2014 "),gG=a("a"),IBo=o("QDQBertForTokenClassification"),qBo=o(" (QDQBert model)"),NBo=l(),l2=a("li"),hfe=a("strong"),jBo=o("rembert"),DBo=o(" \u2014 "),hG=a("a"),GBo=o("RemBertForTokenClassification"),OBo=o(" (RemBERT model)"),VBo=l(),i2=a("li"),pfe=a("strong"),XBo=o("roberta"),zBo=o(" \u2014 "),pG=a("a"),QBo=o("RobertaForTokenClassification"),WBo=o(" (RoBERTa model)"),HBo=l(),d2=a("li"),ufe=a("strong"),UBo=o("roformer"),JBo=o(" \u2014 "),uG=a("a"),YBo=o("RoFormerForTokenClassification"),KBo=o(" (RoFormer model)"),ZBo=l(),c2=a("li"),_fe=a("strong"),ePo=o("squeezebert"),oPo=o(" \u2014 "),_G=a("a"),rPo=o("SqueezeBertForTokenClassification"),tPo=o(" (SqueezeBERT model)"),aPo=l(),f2=a("li"),bfe=a("strong"),nPo=o("xlm"),sPo=o(" \u2014 "),bG=a("a"),lPo=o("XLMForTokenClassification"),iPo=o(" (XLM model)"),dPo=l(),m2=a("li"),vfe=a("strong"),cPo=o("xlm-roberta"),fPo=o(" \u2014 "),vG=a("a"),mPo=o("XLMRobertaForTokenClassification"),gPo=o(" (XLM-RoBERTa model)"),hPo=l(),g2=a("li"),Ffe=a("strong"),pPo=o("xlm-roberta-xl"),uPo=o(" \u2014 "),FG=a("a"),_Po=o("XLMRobertaXLForTokenClassification"),bPo=o(" (XLM-RoBERTa-XL model)"),vPo=l(),h2=a("li"),Tfe=a("strong"),FPo=o("xlnet"),TPo=o(" \u2014 "),TG=a("a"),MPo=o("XLNetForTokenClassification"),EPo=o(" (XLNet model)"),CPo=l(),p2=a("li"),Mfe=a("strong"),wPo=o("yoso"),APo=o(" \u2014 "),MG=a("a"),yPo=o("YosoForTokenClassification"),LPo=o(" (YOSO model)"),xPo=l(),u2=a("p"),$Po=o("The model is set in evaluation mode by default using "),Efe=a("code"),kPo=o("model.eval()"),SPo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=a("code"),RPo=o("model.train()"),BPo=l(),F(_2.$$.fragment),aBe=l(),Oi=a("h2"),b2=a("a"),wfe=a("span"),F($A.$$.fragment),PPo=l(),Afe=a("span"),IPo=o("AutoModelForQuestionAnswering"),nBe=l(),Po=a("div"),F(kA.$$.fragment),qPo=l(),Vi=a("p"),NPo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EG=a("a"),jPo=o("from_pretrained()"),DPo=o(" class method or the "),CG=a("a"),GPo=o("from_config()"),OPo=o(` class
method.`),VPo=l(),SA=a("p"),XPo=o("This class cannot be instantiated directly using "),yfe=a("code"),zPo=o("__init__()"),QPo=o(" (throws an error)."),WPo=l(),lt=a("div"),F(RA.$$.fragment),HPo=l(),Lfe=a("p"),UPo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),JPo=l(),Xi=a("p"),YPo=o(`Note:
Loading a model from its configuration file does `),xfe=a("strong"),KPo=o("not"),ZPo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=a("a"),eIo=o("from_pretrained()"),oIo=o(" to load the model weights."),rIo=l(),F(v2.$$.fragment),tIo=l(),oo=a("div"),F(BA.$$.fragment),aIo=l(),$fe=a("p"),nIo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),sIo=l(),ka=a("p"),lIo=o("The model class to instantiate is selected based on the "),kfe=a("code"),iIo=o("model_type"),dIo=o(` property of the config object (either
passed as an argument or loaded from `),Sfe=a("code"),cIo=o("pretrained_model_name_or_path"),fIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=a("code"),mIo=o("pretrained_model_name_or_path"),gIo=o(":"),hIo=l(),O=a("ul"),F2=a("li"),Bfe=a("strong"),pIo=o("albert"),uIo=o(" \u2014 "),AG=a("a"),_Io=o("AlbertForQuestionAnswering"),bIo=o(" (ALBERT model)"),vIo=l(),T2=a("li"),Pfe=a("strong"),FIo=o("bart"),TIo=o(" \u2014 "),yG=a("a"),MIo=o("BartForQuestionAnswering"),EIo=o(" (BART model)"),CIo=l(),M2=a("li"),Ife=a("strong"),wIo=o("bert"),AIo=o(" \u2014 "),LG=a("a"),yIo=o("BertForQuestionAnswering"),LIo=o(" (BERT model)"),xIo=l(),E2=a("li"),qfe=a("strong"),$Io=o("big_bird"),kIo=o(" \u2014 "),xG=a("a"),SIo=o("BigBirdForQuestionAnswering"),RIo=o(" (BigBird model)"),BIo=l(),C2=a("li"),Nfe=a("strong"),PIo=o("bigbird_pegasus"),IIo=o(" \u2014 "),$G=a("a"),qIo=o("BigBirdPegasusForQuestionAnswering"),NIo=o(" (BigBirdPegasus model)"),jIo=l(),w2=a("li"),jfe=a("strong"),DIo=o("camembert"),GIo=o(" \u2014 "),kG=a("a"),OIo=o("CamembertForQuestionAnswering"),VIo=o(" (CamemBERT model)"),XIo=l(),A2=a("li"),Dfe=a("strong"),zIo=o("canine"),QIo=o(" \u2014 "),SG=a("a"),WIo=o("CanineForQuestionAnswering"),HIo=o(" (Canine model)"),UIo=l(),y2=a("li"),Gfe=a("strong"),JIo=o("convbert"),YIo=o(" \u2014 "),RG=a("a"),KIo=o("ConvBertForQuestionAnswering"),ZIo=o(" (ConvBERT model)"),eqo=l(),L2=a("li"),Ofe=a("strong"),oqo=o("data2vec-text"),rqo=o(" \u2014 "),BG=a("a"),tqo=o("Data2VecTextForQuestionAnswering"),aqo=o(" (Data2VecText model)"),nqo=l(),x2=a("li"),Vfe=a("strong"),sqo=o("deberta"),lqo=o(" \u2014 "),PG=a("a"),iqo=o("DebertaForQuestionAnswering"),dqo=o(" (DeBERTa model)"),cqo=l(),$2=a("li"),Xfe=a("strong"),fqo=o("deberta-v2"),mqo=o(" \u2014 "),IG=a("a"),gqo=o("DebertaV2ForQuestionAnswering"),hqo=o(" (DeBERTa-v2 model)"),pqo=l(),k2=a("li"),zfe=a("strong"),uqo=o("distilbert"),_qo=o(" \u2014 "),qG=a("a"),bqo=o("DistilBertForQuestionAnswering"),vqo=o(" (DistilBERT model)"),Fqo=l(),S2=a("li"),Qfe=a("strong"),Tqo=o("electra"),Mqo=o(" \u2014 "),NG=a("a"),Eqo=o("ElectraForQuestionAnswering"),Cqo=o(" (ELECTRA model)"),wqo=l(),R2=a("li"),Wfe=a("strong"),Aqo=o("flaubert"),yqo=o(" \u2014 "),jG=a("a"),Lqo=o("FlaubertForQuestionAnsweringSimple"),xqo=o(" (FlauBERT model)"),$qo=l(),B2=a("li"),Hfe=a("strong"),kqo=o("fnet"),Sqo=o(" \u2014 "),DG=a("a"),Rqo=o("FNetForQuestionAnswering"),Bqo=o(" (FNet model)"),Pqo=l(),P2=a("li"),Ufe=a("strong"),Iqo=o("funnel"),qqo=o(" \u2014 "),GG=a("a"),Nqo=o("FunnelForQuestionAnswering"),jqo=o(" (Funnel Transformer model)"),Dqo=l(),I2=a("li"),Jfe=a("strong"),Gqo=o("gptj"),Oqo=o(" \u2014 "),OG=a("a"),Vqo=o("GPTJForQuestionAnswering"),Xqo=o(" (GPT-J model)"),zqo=l(),q2=a("li"),Yfe=a("strong"),Qqo=o("ibert"),Wqo=o(" \u2014 "),VG=a("a"),Hqo=o("IBertForQuestionAnswering"),Uqo=o(" (I-BERT model)"),Jqo=l(),N2=a("li"),Kfe=a("strong"),Yqo=o("layoutlmv2"),Kqo=o(" \u2014 "),XG=a("a"),Zqo=o("LayoutLMv2ForQuestionAnswering"),eNo=o(" (LayoutLMv2 model)"),oNo=l(),j2=a("li"),Zfe=a("strong"),rNo=o("led"),tNo=o(" \u2014 "),zG=a("a"),aNo=o("LEDForQuestionAnswering"),nNo=o(" (LED model)"),sNo=l(),D2=a("li"),eme=a("strong"),lNo=o("longformer"),iNo=o(" \u2014 "),QG=a("a"),dNo=o("LongformerForQuestionAnswering"),cNo=o(" (Longformer model)"),fNo=l(),G2=a("li"),ome=a("strong"),mNo=o("lxmert"),gNo=o(" \u2014 "),WG=a("a"),hNo=o("LxmertForQuestionAnswering"),pNo=o(" (LXMERT model)"),uNo=l(),O2=a("li"),rme=a("strong"),_No=o("mbart"),bNo=o(" \u2014 "),HG=a("a"),vNo=o("MBartForQuestionAnswering"),FNo=o(" (mBART model)"),TNo=l(),V2=a("li"),tme=a("strong"),MNo=o("megatron-bert"),ENo=o(" \u2014 "),UG=a("a"),CNo=o("MegatronBertForQuestionAnswering"),wNo=o(" (MegatronBert model)"),ANo=l(),X2=a("li"),ame=a("strong"),yNo=o("mobilebert"),LNo=o(" \u2014 "),JG=a("a"),xNo=o("MobileBertForQuestionAnswering"),$No=o(" (MobileBERT model)"),kNo=l(),z2=a("li"),nme=a("strong"),SNo=o("mpnet"),RNo=o(" \u2014 "),YG=a("a"),BNo=o("MPNetForQuestionAnswering"),PNo=o(" (MPNet model)"),INo=l(),Q2=a("li"),sme=a("strong"),qNo=o("nystromformer"),NNo=o(" \u2014 "),KG=a("a"),jNo=o("NystromformerForQuestionAnswering"),DNo=o(" (Nystromformer model)"),GNo=l(),W2=a("li"),lme=a("strong"),ONo=o("qdqbert"),VNo=o(" \u2014 "),ZG=a("a"),XNo=o("QDQBertForQuestionAnswering"),zNo=o(" (QDQBert model)"),QNo=l(),H2=a("li"),ime=a("strong"),WNo=o("reformer"),HNo=o(" \u2014 "),eO=a("a"),UNo=o("ReformerForQuestionAnswering"),JNo=o(" (Reformer model)"),YNo=l(),U2=a("li"),dme=a("strong"),KNo=o("rembert"),ZNo=o(" \u2014 "),oO=a("a"),ejo=o("RemBertForQuestionAnswering"),ojo=o(" (RemBERT model)"),rjo=l(),J2=a("li"),cme=a("strong"),tjo=o("roberta"),ajo=o(" \u2014 "),rO=a("a"),njo=o("RobertaForQuestionAnswering"),sjo=o(" (RoBERTa model)"),ljo=l(),Y2=a("li"),fme=a("strong"),ijo=o("roformer"),djo=o(" \u2014 "),tO=a("a"),cjo=o("RoFormerForQuestionAnswering"),fjo=o(" (RoFormer model)"),mjo=l(),K2=a("li"),mme=a("strong"),gjo=o("splinter"),hjo=o(" \u2014 "),aO=a("a"),pjo=o("SplinterForQuestionAnswering"),ujo=o(" (Splinter model)"),_jo=l(),Z2=a("li"),gme=a("strong"),bjo=o("squeezebert"),vjo=o(" \u2014 "),nO=a("a"),Fjo=o("SqueezeBertForQuestionAnswering"),Tjo=o(" (SqueezeBERT model)"),Mjo=l(),ev=a("li"),hme=a("strong"),Ejo=o("xlm"),Cjo=o(" \u2014 "),sO=a("a"),wjo=o("XLMForQuestionAnsweringSimple"),Ajo=o(" (XLM model)"),yjo=l(),ov=a("li"),pme=a("strong"),Ljo=o("xlm-roberta"),xjo=o(" \u2014 "),lO=a("a"),$jo=o("XLMRobertaForQuestionAnswering"),kjo=o(" (XLM-RoBERTa model)"),Sjo=l(),rv=a("li"),ume=a("strong"),Rjo=o("xlm-roberta-xl"),Bjo=o(" \u2014 "),iO=a("a"),Pjo=o("XLMRobertaXLForQuestionAnswering"),Ijo=o(" (XLM-RoBERTa-XL model)"),qjo=l(),tv=a("li"),_me=a("strong"),Njo=o("xlnet"),jjo=o(" \u2014 "),dO=a("a"),Djo=o("XLNetForQuestionAnsweringSimple"),Gjo=o(" (XLNet model)"),Ojo=l(),av=a("li"),bme=a("strong"),Vjo=o("yoso"),Xjo=o(" \u2014 "),cO=a("a"),zjo=o("YosoForQuestionAnswering"),Qjo=o(" (YOSO model)"),Wjo=l(),nv=a("p"),Hjo=o("The model is set in evaluation mode by default using "),vme=a("code"),Ujo=o("model.eval()"),Jjo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=a("code"),Yjo=o("model.train()"),Kjo=l(),F(sv.$$.fragment),sBe=l(),zi=a("h2"),lv=a("a"),Tme=a("span"),F(PA.$$.fragment),Zjo=l(),Mme=a("span"),eDo=o("AutoModelForTableQuestionAnswering"),lBe=l(),Io=a("div"),F(IA.$$.fragment),oDo=l(),Qi=a("p"),rDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fO=a("a"),tDo=o("from_pretrained()"),aDo=o(" class method or the "),mO=a("a"),nDo=o("from_config()"),sDo=o(` class
method.`),lDo=l(),qA=a("p"),iDo=o("This class cannot be instantiated directly using "),Eme=a("code"),dDo=o("__init__()"),cDo=o(" (throws an error)."),fDo=l(),it=a("div"),F(NA.$$.fragment),mDo=l(),Cme=a("p"),gDo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),hDo=l(),Wi=a("p"),pDo=o(`Note:
Loading a model from its configuration file does `),wme=a("strong"),uDo=o("not"),_Do=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=a("a"),bDo=o("from_pretrained()"),vDo=o(" to load the model weights."),FDo=l(),F(iv.$$.fragment),TDo=l(),ro=a("div"),F(jA.$$.fragment),MDo=l(),Ame=a("p"),EDo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),CDo=l(),Sa=a("p"),wDo=o("The model class to instantiate is selected based on the "),yme=a("code"),ADo=o("model_type"),yDo=o(` property of the config object (either
passed as an argument or loaded from `),Lme=a("code"),LDo=o("pretrained_model_name_or_path"),xDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=a("code"),$Do=o("pretrained_model_name_or_path"),kDo=o(":"),SDo=l(),$me=a("ul"),dv=a("li"),kme=a("strong"),RDo=o("tapas"),BDo=o(" \u2014 "),hO=a("a"),PDo=o("TapasForQuestionAnswering"),IDo=o(" (TAPAS model)"),qDo=l(),cv=a("p"),NDo=o("The model is set in evaluation mode by default using "),Sme=a("code"),jDo=o("model.eval()"),DDo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=a("code"),GDo=o("model.train()"),ODo=l(),F(fv.$$.fragment),iBe=l(),Hi=a("h2"),mv=a("a"),Bme=a("span"),F(DA.$$.fragment),VDo=l(),Pme=a("span"),XDo=o("AutoModelForImageClassification"),dBe=l(),qo=a("div"),F(GA.$$.fragment),zDo=l(),Ui=a("p"),QDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pO=a("a"),WDo=o("from_pretrained()"),HDo=o(" class method or the "),uO=a("a"),UDo=o("from_config()"),JDo=o(` class
method.`),YDo=l(),OA=a("p"),KDo=o("This class cannot be instantiated directly using "),Ime=a("code"),ZDo=o("__init__()"),eGo=o(" (throws an error)."),oGo=l(),dt=a("div"),F(VA.$$.fragment),rGo=l(),qme=a("p"),tGo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),aGo=l(),Ji=a("p"),nGo=o(`Note:
Loading a model from its configuration file does `),Nme=a("strong"),sGo=o("not"),lGo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=a("a"),iGo=o("from_pretrained()"),dGo=o(" to load the model weights."),cGo=l(),F(gv.$$.fragment),fGo=l(),to=a("div"),F(XA.$$.fragment),mGo=l(),jme=a("p"),gGo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),hGo=l(),Ra=a("p"),pGo=o("The model class to instantiate is selected based on the "),Dme=a("code"),uGo=o("model_type"),_Go=o(` property of the config object (either
passed as an argument or loaded from `),Gme=a("code"),bGo=o("pretrained_model_name_or_path"),vGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=a("code"),FGo=o("pretrained_model_name_or_path"),TGo=o(":"),MGo=l(),ve=a("ul"),hv=a("li"),Vme=a("strong"),EGo=o("beit"),CGo=o(" \u2014 "),bO=a("a"),wGo=o("BeitForImageClassification"),AGo=o(" (BEiT model)"),yGo=l(),pv=a("li"),Xme=a("strong"),LGo=o("convnext"),xGo=o(" \u2014 "),vO=a("a"),$Go=o("ConvNextForImageClassification"),kGo=o(" (ConvNext model)"),SGo=l(),uv=a("li"),zme=a("strong"),RGo=o("data2vec-vision"),BGo=o(" \u2014 "),FO=a("a"),PGo=o("Data2VecVisionForImageClassification"),IGo=o(" (Data2VecVision model)"),qGo=l(),Ls=a("li"),Qme=a("strong"),NGo=o("deit"),jGo=o(" \u2014 "),TO=a("a"),DGo=o("DeiTForImageClassification"),GGo=o(" or "),MO=a("a"),OGo=o("DeiTForImageClassificationWithTeacher"),VGo=o(" (DeiT model)"),XGo=l(),_v=a("li"),Wme=a("strong"),zGo=o("imagegpt"),QGo=o(" \u2014 "),EO=a("a"),WGo=o("ImageGPTForImageClassification"),HGo=o(" (ImageGPT model)"),UGo=l(),ct=a("li"),Hme=a("strong"),JGo=o("perceiver"),YGo=o(" \u2014 "),CO=a("a"),KGo=o("PerceiverForImageClassificationLearned"),ZGo=o(" or "),wO=a("a"),eOo=o("PerceiverForImageClassificationFourier"),oOo=o(" or "),AO=a("a"),rOo=o("PerceiverForImageClassificationConvProcessing"),tOo=o(" (Perceiver model)"),aOo=l(),bv=a("li"),Ume=a("strong"),nOo=o("poolformer"),sOo=o(" \u2014 "),yO=a("a"),lOo=o("PoolFormerForImageClassification"),iOo=o(" (PoolFormer model)"),dOo=l(),vv=a("li"),Jme=a("strong"),cOo=o("regnet"),fOo=o(" \u2014 "),LO=a("a"),mOo=o("RegNetForImageClassification"),gOo=o(" (RegNet model)"),hOo=l(),Fv=a("li"),Yme=a("strong"),pOo=o("resnet"),uOo=o(" \u2014 "),xO=a("a"),_Oo=o("ResNetForImageClassification"),bOo=o(" (ResNet model)"),vOo=l(),Tv=a("li"),Kme=a("strong"),FOo=o("segformer"),TOo=o(" \u2014 "),$O=a("a"),MOo=o("SegformerForImageClassification"),EOo=o(" (SegFormer model)"),COo=l(),Mv=a("li"),Zme=a("strong"),wOo=o("swin"),AOo=o(" \u2014 "),kO=a("a"),yOo=o("SwinForImageClassification"),LOo=o(" (Swin model)"),xOo=l(),Ev=a("li"),ege=a("strong"),$Oo=o("van"),kOo=o(" \u2014 "),SO=a("a"),SOo=o("VanForImageClassification"),ROo=o(" (VAN model)"),BOo=l(),Cv=a("li"),oge=a("strong"),POo=o("vit"),IOo=o(" \u2014 "),RO=a("a"),qOo=o("ViTForImageClassification"),NOo=o(" (ViT model)"),jOo=l(),wv=a("p"),DOo=o("The model is set in evaluation mode by default using "),rge=a("code"),GOo=o("model.eval()"),OOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=a("code"),VOo=o("model.train()"),XOo=l(),F(Av.$$.fragment),cBe=l(),Yi=a("h2"),yv=a("a"),age=a("span"),F(zA.$$.fragment),zOo=l(),nge=a("span"),QOo=o("AutoModelForVision2Seq"),fBe=l(),No=a("div"),F(QA.$$.fragment),WOo=l(),Ki=a("p"),HOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BO=a("a"),UOo=o("from_pretrained()"),JOo=o(" class method or the "),PO=a("a"),YOo=o("from_config()"),KOo=o(` class
method.`),ZOo=l(),WA=a("p"),eVo=o("This class cannot be instantiated directly using "),sge=a("code"),oVo=o("__init__()"),rVo=o(" (throws an error)."),tVo=l(),ft=a("div"),F(HA.$$.fragment),aVo=l(),lge=a("p"),nVo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sVo=l(),Zi=a("p"),lVo=o(`Note:
Loading a model from its configuration file does `),ige=a("strong"),iVo=o("not"),dVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=a("a"),cVo=o("from_pretrained()"),fVo=o(" to load the model weights."),mVo=l(),F(Lv.$$.fragment),gVo=l(),ao=a("div"),F(UA.$$.fragment),hVo=l(),dge=a("p"),pVo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),uVo=l(),Ba=a("p"),_Vo=o("The model class to instantiate is selected based on the "),cge=a("code"),bVo=o("model_type"),vVo=o(` property of the config object (either
passed as an argument or loaded from `),fge=a("code"),FVo=o("pretrained_model_name_or_path"),TVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mge=a("code"),MVo=o("pretrained_model_name_or_path"),EVo=o(":"),CVo=l(),gge=a("ul"),xv=a("li"),hge=a("strong"),wVo=o("vision-encoder-decoder"),AVo=o(" \u2014 "),qO=a("a"),yVo=o("VisionEncoderDecoderModel"),LVo=o(" (Vision Encoder decoder model)"),xVo=l(),$v=a("p"),$Vo=o("The model is set in evaluation mode by default using "),pge=a("code"),kVo=o("model.eval()"),SVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=a("code"),RVo=o("model.train()"),BVo=l(),F(kv.$$.fragment),mBe=l(),ed=a("h2"),Sv=a("a"),_ge=a("span"),F(JA.$$.fragment),PVo=l(),bge=a("span"),IVo=o("AutoModelForAudioClassification"),gBe=l(),jo=a("div"),F(YA.$$.fragment),qVo=l(),od=a("p"),NVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NO=a("a"),jVo=o("from_pretrained()"),DVo=o(" class method or the "),jO=a("a"),GVo=o("from_config()"),OVo=o(` class
method.`),VVo=l(),KA=a("p"),XVo=o("This class cannot be instantiated directly using "),vge=a("code"),zVo=o("__init__()"),QVo=o(" (throws an error)."),WVo=l(),mt=a("div"),F(ZA.$$.fragment),HVo=l(),Fge=a("p"),UVo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),JVo=l(),rd=a("p"),YVo=o(`Note:
Loading a model from its configuration file does `),Tge=a("strong"),KVo=o("not"),ZVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=a("a"),eXo=o("from_pretrained()"),oXo=o(" to load the model weights."),rXo=l(),F(Rv.$$.fragment),tXo=l(),no=a("div"),F(e0.$$.fragment),aXo=l(),Mge=a("p"),nXo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),sXo=l(),Pa=a("p"),lXo=o("The model class to instantiate is selected based on the "),Ege=a("code"),iXo=o("model_type"),dXo=o(` property of the config object (either
passed as an argument or loaded from `),Cge=a("code"),cXo=o("pretrained_model_name_or_path"),fXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=a("code"),mXo=o("pretrained_model_name_or_path"),gXo=o(":"),hXo=l(),qe=a("ul"),Bv=a("li"),Age=a("strong"),pXo=o("data2vec-audio"),uXo=o(" \u2014 "),GO=a("a"),_Xo=o("Data2VecAudioForSequenceClassification"),bXo=o(" (Data2VecAudio model)"),vXo=l(),Pv=a("li"),yge=a("strong"),FXo=o("hubert"),TXo=o(" \u2014 "),OO=a("a"),MXo=o("HubertForSequenceClassification"),EXo=o(" (Hubert model)"),CXo=l(),Iv=a("li"),Lge=a("strong"),wXo=o("sew"),AXo=o(" \u2014 "),VO=a("a"),yXo=o("SEWForSequenceClassification"),LXo=o(" (SEW model)"),xXo=l(),qv=a("li"),xge=a("strong"),$Xo=o("sew-d"),kXo=o(" \u2014 "),XO=a("a"),SXo=o("SEWDForSequenceClassification"),RXo=o(" (SEW-D model)"),BXo=l(),Nv=a("li"),$ge=a("strong"),PXo=o("unispeech"),IXo=o(" \u2014 "),zO=a("a"),qXo=o("UniSpeechForSequenceClassification"),NXo=o(" (UniSpeech model)"),jXo=l(),jv=a("li"),kge=a("strong"),DXo=o("unispeech-sat"),GXo=o(" \u2014 "),QO=a("a"),OXo=o("UniSpeechSatForSequenceClassification"),VXo=o(" (UniSpeechSat model)"),XXo=l(),Dv=a("li"),Sge=a("strong"),zXo=o("wav2vec2"),QXo=o(" \u2014 "),WO=a("a"),WXo=o("Wav2Vec2ForSequenceClassification"),HXo=o(" (Wav2Vec2 model)"),UXo=l(),Gv=a("li"),Rge=a("strong"),JXo=o("wavlm"),YXo=o(" \u2014 "),HO=a("a"),KXo=o("WavLMForSequenceClassification"),ZXo=o(" (WavLM model)"),ezo=l(),Ov=a("p"),ozo=o("The model is set in evaluation mode by default using "),Bge=a("code"),rzo=o("model.eval()"),tzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=a("code"),azo=o("model.train()"),nzo=l(),F(Vv.$$.fragment),hBe=l(),td=a("h2"),Xv=a("a"),Ige=a("span"),F(o0.$$.fragment),szo=l(),qge=a("span"),lzo=o("AutoModelForAudioFrameClassification"),pBe=l(),Do=a("div"),F(r0.$$.fragment),izo=l(),ad=a("p"),dzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UO=a("a"),czo=o("from_pretrained()"),fzo=o(" class method or the "),JO=a("a"),mzo=o("from_config()"),gzo=o(` class
method.`),hzo=l(),t0=a("p"),pzo=o("This class cannot be instantiated directly using "),Nge=a("code"),uzo=o("__init__()"),_zo=o(" (throws an error)."),bzo=l(),gt=a("div"),F(a0.$$.fragment),vzo=l(),jge=a("p"),Fzo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Tzo=l(),nd=a("p"),Mzo=o(`Note:
Loading a model from its configuration file does `),Dge=a("strong"),Ezo=o("not"),Czo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=a("a"),wzo=o("from_pretrained()"),Azo=o(" to load the model weights."),yzo=l(),F(zv.$$.fragment),Lzo=l(),so=a("div"),F(n0.$$.fragment),xzo=l(),Gge=a("p"),$zo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),kzo=l(),Ia=a("p"),Szo=o("The model class to instantiate is selected based on the "),Oge=a("code"),Rzo=o("model_type"),Bzo=o(` property of the config object (either
passed as an argument or loaded from `),Vge=a("code"),Pzo=o("pretrained_model_name_or_path"),Izo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=a("code"),qzo=o("pretrained_model_name_or_path"),Nzo=o(":"),jzo=l(),qa=a("ul"),Qv=a("li"),zge=a("strong"),Dzo=o("data2vec-audio"),Gzo=o(" \u2014 "),KO=a("a"),Ozo=o("Data2VecAudioForAudioFrameClassification"),Vzo=o(" (Data2VecAudio model)"),Xzo=l(),Wv=a("li"),Qge=a("strong"),zzo=o("unispeech-sat"),Qzo=o(" \u2014 "),ZO=a("a"),Wzo=o("UniSpeechSatForAudioFrameClassification"),Hzo=o(" (UniSpeechSat model)"),Uzo=l(),Hv=a("li"),Wge=a("strong"),Jzo=o("wav2vec2"),Yzo=o(" \u2014 "),eV=a("a"),Kzo=o("Wav2Vec2ForAudioFrameClassification"),Zzo=o(" (Wav2Vec2 model)"),eQo=l(),Uv=a("li"),Hge=a("strong"),oQo=o("wavlm"),rQo=o(" \u2014 "),oV=a("a"),tQo=o("WavLMForAudioFrameClassification"),aQo=o(" (WavLM model)"),nQo=l(),Jv=a("p"),sQo=o("The model is set in evaluation mode by default using "),Uge=a("code"),lQo=o("model.eval()"),iQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=a("code"),dQo=o("model.train()"),cQo=l(),F(Yv.$$.fragment),uBe=l(),sd=a("h2"),Kv=a("a"),Yge=a("span"),F(s0.$$.fragment),fQo=l(),Kge=a("span"),mQo=o("AutoModelForCTC"),_Be=l(),Go=a("div"),F(l0.$$.fragment),gQo=l(),ld=a("p"),hQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rV=a("a"),pQo=o("from_pretrained()"),uQo=o(" class method or the "),tV=a("a"),_Qo=o("from_config()"),bQo=o(` class
method.`),vQo=l(),i0=a("p"),FQo=o("This class cannot be instantiated directly using "),Zge=a("code"),TQo=o("__init__()"),MQo=o(" (throws an error)."),EQo=l(),ht=a("div"),F(d0.$$.fragment),CQo=l(),ehe=a("p"),wQo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),AQo=l(),id=a("p"),yQo=o(`Note:
Loading a model from its configuration file does `),ohe=a("strong"),LQo=o("not"),xQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=a("a"),$Qo=o("from_pretrained()"),kQo=o(" to load the model weights."),SQo=l(),F(Zv.$$.fragment),RQo=l(),lo=a("div"),F(c0.$$.fragment),BQo=l(),rhe=a("p"),PQo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),IQo=l(),Na=a("p"),qQo=o("The model class to instantiate is selected based on the "),the=a("code"),NQo=o("model_type"),jQo=o(` property of the config object (either
passed as an argument or loaded from `),ahe=a("code"),DQo=o("pretrained_model_name_or_path"),GQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=a("code"),OQo=o("pretrained_model_name_or_path"),VQo=o(":"),XQo=l(),Ne=a("ul"),eF=a("li"),she=a("strong"),zQo=o("data2vec-audio"),QQo=o(" \u2014 "),nV=a("a"),WQo=o("Data2VecAudioForCTC"),HQo=o(" (Data2VecAudio model)"),UQo=l(),oF=a("li"),lhe=a("strong"),JQo=o("hubert"),YQo=o(" \u2014 "),sV=a("a"),KQo=o("HubertForCTC"),ZQo=o(" (Hubert model)"),eWo=l(),rF=a("li"),ihe=a("strong"),oWo=o("sew"),rWo=o(" \u2014 "),lV=a("a"),tWo=o("SEWForCTC"),aWo=o(" (SEW model)"),nWo=l(),tF=a("li"),dhe=a("strong"),sWo=o("sew-d"),lWo=o(" \u2014 "),iV=a("a"),iWo=o("SEWDForCTC"),dWo=o(" (SEW-D model)"),cWo=l(),aF=a("li"),che=a("strong"),fWo=o("unispeech"),mWo=o(" \u2014 "),dV=a("a"),gWo=o("UniSpeechForCTC"),hWo=o(" (UniSpeech model)"),pWo=l(),nF=a("li"),fhe=a("strong"),uWo=o("unispeech-sat"),_Wo=o(" \u2014 "),cV=a("a"),bWo=o("UniSpeechSatForCTC"),vWo=o(" (UniSpeechSat model)"),FWo=l(),sF=a("li"),mhe=a("strong"),TWo=o("wav2vec2"),MWo=o(" \u2014 "),fV=a("a"),EWo=o("Wav2Vec2ForCTC"),CWo=o(" (Wav2Vec2 model)"),wWo=l(),lF=a("li"),ghe=a("strong"),AWo=o("wavlm"),yWo=o(" \u2014 "),mV=a("a"),LWo=o("WavLMForCTC"),xWo=o(" (WavLM model)"),$Wo=l(),iF=a("p"),kWo=o("The model is set in evaluation mode by default using "),hhe=a("code"),SWo=o("model.eval()"),RWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=a("code"),BWo=o("model.train()"),PWo=l(),F(dF.$$.fragment),bBe=l(),dd=a("h2"),cF=a("a"),uhe=a("span"),F(f0.$$.fragment),IWo=l(),_he=a("span"),qWo=o("AutoModelForSpeechSeq2Seq"),vBe=l(),Oo=a("div"),F(m0.$$.fragment),NWo=l(),cd=a("p"),jWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gV=a("a"),DWo=o("from_pretrained()"),GWo=o(" class method or the "),hV=a("a"),OWo=o("from_config()"),VWo=o(` class
method.`),XWo=l(),g0=a("p"),zWo=o("This class cannot be instantiated directly using "),bhe=a("code"),QWo=o("__init__()"),WWo=o(" (throws an error)."),HWo=l(),pt=a("div"),F(h0.$$.fragment),UWo=l(),vhe=a("p"),JWo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),YWo=l(),fd=a("p"),KWo=o(`Note:
Loading a model from its configuration file does `),Fhe=a("strong"),ZWo=o("not"),eHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=a("a"),oHo=o("from_pretrained()"),rHo=o(" to load the model weights."),tHo=l(),F(fF.$$.fragment),aHo=l(),io=a("div"),F(p0.$$.fragment),nHo=l(),The=a("p"),sHo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),lHo=l(),ja=a("p"),iHo=o("The model class to instantiate is selected based on the "),Mhe=a("code"),dHo=o("model_type"),cHo=o(` property of the config object (either
passed as an argument or loaded from `),Ehe=a("code"),fHo=o("pretrained_model_name_or_path"),mHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=a("code"),gHo=o("pretrained_model_name_or_path"),hHo=o(":"),pHo=l(),u0=a("ul"),mF=a("li"),whe=a("strong"),uHo=o("speech-encoder-decoder"),_Ho=o(" \u2014 "),uV=a("a"),bHo=o("SpeechEncoderDecoderModel"),vHo=o(" (Speech Encoder decoder model)"),FHo=l(),gF=a("li"),Ahe=a("strong"),THo=o("speech_to_text"),MHo=o(" \u2014 "),_V=a("a"),EHo=o("Speech2TextForConditionalGeneration"),CHo=o(" (Speech2Text model)"),wHo=l(),hF=a("p"),AHo=o("The model is set in evaluation mode by default using "),yhe=a("code"),yHo=o("model.eval()"),LHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=a("code"),xHo=o("model.train()"),$Ho=l(),F(pF.$$.fragment),FBe=l(),md=a("h2"),uF=a("a"),xhe=a("span"),F(_0.$$.fragment),kHo=l(),$he=a("span"),SHo=o("AutoModelForAudioXVector"),TBe=l(),Vo=a("div"),F(b0.$$.fragment),RHo=l(),gd=a("p"),BHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bV=a("a"),PHo=o("from_pretrained()"),IHo=o(" class method or the "),vV=a("a"),qHo=o("from_config()"),NHo=o(` class
method.`),jHo=l(),v0=a("p"),DHo=o("This class cannot be instantiated directly using "),khe=a("code"),GHo=o("__init__()"),OHo=o(" (throws an error)."),VHo=l(),ut=a("div"),F(F0.$$.fragment),XHo=l(),She=a("p"),zHo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),QHo=l(),hd=a("p"),WHo=o(`Note:
Loading a model from its configuration file does `),Rhe=a("strong"),HHo=o("not"),UHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=a("a"),JHo=o("from_pretrained()"),YHo=o(" to load the model weights."),KHo=l(),F(_F.$$.fragment),ZHo=l(),co=a("div"),F(T0.$$.fragment),eUo=l(),Bhe=a("p"),oUo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),rUo=l(),Da=a("p"),tUo=o("The model class to instantiate is selected based on the "),Phe=a("code"),aUo=o("model_type"),nUo=o(` property of the config object (either
passed as an argument or loaded from `),Ihe=a("code"),sUo=o("pretrained_model_name_or_path"),lUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=a("code"),iUo=o("pretrained_model_name_or_path"),dUo=o(":"),cUo=l(),Ga=a("ul"),bF=a("li"),Nhe=a("strong"),fUo=o("data2vec-audio"),mUo=o(" \u2014 "),TV=a("a"),gUo=o("Data2VecAudioForXVector"),hUo=o(" (Data2VecAudio model)"),pUo=l(),vF=a("li"),jhe=a("strong"),uUo=o("unispeech-sat"),_Uo=o(" \u2014 "),MV=a("a"),bUo=o("UniSpeechSatForXVector"),vUo=o(" (UniSpeechSat model)"),FUo=l(),FF=a("li"),Dhe=a("strong"),TUo=o("wav2vec2"),MUo=o(" \u2014 "),EV=a("a"),EUo=o("Wav2Vec2ForXVector"),CUo=o(" (Wav2Vec2 model)"),wUo=l(),TF=a("li"),Ghe=a("strong"),AUo=o("wavlm"),yUo=o(" \u2014 "),CV=a("a"),LUo=o("WavLMForXVector"),xUo=o(" (WavLM model)"),$Uo=l(),MF=a("p"),kUo=o("The model is set in evaluation mode by default using "),Ohe=a("code"),SUo=o("model.eval()"),RUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=a("code"),BUo=o("model.train()"),PUo=l(),F(EF.$$.fragment),MBe=l(),pd=a("h2"),CF=a("a"),Xhe=a("span"),F(M0.$$.fragment),IUo=l(),zhe=a("span"),qUo=o("AutoModelForMaskedImageModeling"),EBe=l(),Xo=a("div"),F(E0.$$.fragment),NUo=l(),ud=a("p"),jUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wV=a("a"),DUo=o("from_pretrained()"),GUo=o(" class method or the "),AV=a("a"),OUo=o("from_config()"),VUo=o(` class
method.`),XUo=l(),C0=a("p"),zUo=o("This class cannot be instantiated directly using "),Qhe=a("code"),QUo=o("__init__()"),WUo=o(" (throws an error)."),HUo=l(),_t=a("div"),F(w0.$$.fragment),UUo=l(),Whe=a("p"),JUo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),YUo=l(),_d=a("p"),KUo=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),ZUo=o("not"),eJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=a("a"),oJo=o("from_pretrained()"),rJo=o(" to load the model weights."),tJo=l(),F(wF.$$.fragment),aJo=l(),fo=a("div"),F(A0.$$.fragment),nJo=l(),Uhe=a("p"),sJo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),lJo=l(),Oa=a("p"),iJo=o("The model class to instantiate is selected based on the "),Jhe=a("code"),dJo=o("model_type"),cJo=o(` property of the config object (either
passed as an argument or loaded from `),Yhe=a("code"),fJo=o("pretrained_model_name_or_path"),mJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=a("code"),gJo=o("pretrained_model_name_or_path"),hJo=o(":"),pJo=l(),bd=a("ul"),AF=a("li"),Zhe=a("strong"),uJo=o("deit"),_Jo=o(" \u2014 "),LV=a("a"),bJo=o("DeiTForMaskedImageModeling"),vJo=o(" (DeiT model)"),FJo=l(),yF=a("li"),epe=a("strong"),TJo=o("swin"),MJo=o(" \u2014 "),xV=a("a"),EJo=o("SwinForMaskedImageModeling"),CJo=o(" (Swin model)"),wJo=l(),LF=a("li"),ope=a("strong"),AJo=o("vit"),yJo=o(" \u2014 "),$V=a("a"),LJo=o("ViTForMaskedImageModeling"),xJo=o(" (ViT model)"),$Jo=l(),xF=a("p"),kJo=o("The model is set in evaluation mode by default using "),rpe=a("code"),SJo=o("model.eval()"),RJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=a("code"),BJo=o("model.train()"),PJo=l(),F($F.$$.fragment),CBe=l(),vd=a("h2"),kF=a("a"),ape=a("span"),F(y0.$$.fragment),IJo=l(),npe=a("span"),qJo=o("AutoModelForObjectDetection"),wBe=l(),zo=a("div"),F(L0.$$.fragment),NJo=l(),Fd=a("p"),jJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kV=a("a"),DJo=o("from_pretrained()"),GJo=o(" class method or the "),SV=a("a"),OJo=o("from_config()"),VJo=o(` class
method.`),XJo=l(),x0=a("p"),zJo=o("This class cannot be instantiated directly using "),spe=a("code"),QJo=o("__init__()"),WJo=o(" (throws an error)."),HJo=l(),bt=a("div"),F($0.$$.fragment),UJo=l(),lpe=a("p"),JJo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),YJo=l(),Td=a("p"),KJo=o(`Note:
Loading a model from its configuration file does `),ipe=a("strong"),ZJo=o("not"),eYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=a("a"),oYo=o("from_pretrained()"),rYo=o(" to load the model weights."),tYo=l(),F(SF.$$.fragment),aYo=l(),mo=a("div"),F(k0.$$.fragment),nYo=l(),dpe=a("p"),sYo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),lYo=l(),Va=a("p"),iYo=o("The model class to instantiate is selected based on the "),cpe=a("code"),dYo=o("model_type"),cYo=o(` property of the config object (either
passed as an argument or loaded from `),fpe=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(":"),pYo=l(),gpe=a("ul"),RF=a("li"),hpe=a("strong"),uYo=o("detr"),_Yo=o(" \u2014 "),BV=a("a"),bYo=o("DetrForObjectDetection"),vYo=o(" (DETR model)"),FYo=l(),BF=a("p"),TYo=o("The model is set in evaluation mode by default using "),ppe=a("code"),MYo=o("model.eval()"),EYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=a("code"),CYo=o("model.train()"),wYo=l(),F(PF.$$.fragment),ABe=l(),Md=a("h2"),IF=a("a"),_pe=a("span"),F(S0.$$.fragment),AYo=l(),bpe=a("span"),yYo=o("AutoModelForImageSegmentation"),yBe=l(),Qo=a("div"),F(R0.$$.fragment),LYo=l(),Ed=a("p"),xYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),PV=a("a"),$Yo=o("from_pretrained()"),kYo=o(" class method or the "),IV=a("a"),SYo=o("from_config()"),RYo=o(` class
method.`),BYo=l(),B0=a("p"),PYo=o("This class cannot be instantiated directly using "),vpe=a("code"),IYo=o("__init__()"),qYo=o(" (throws an error)."),NYo=l(),vt=a("div"),F(P0.$$.fragment),jYo=l(),Fpe=a("p"),DYo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),GYo=l(),Cd=a("p"),OYo=o(`Note:
Loading a model from its configuration file does `),Tpe=a("strong"),VYo=o("not"),XYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),zYo=o("from_pretrained()"),QYo=o(" to load the model weights."),WYo=l(),F(qF.$$.fragment),HYo=l(),go=a("div"),F(I0.$$.fragment),UYo=l(),Mpe=a("p"),JYo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),YYo=l(),Xa=a("p"),KYo=o("The model class to instantiate is selected based on the "),Epe=a("code"),ZYo=o("model_type"),eKo=o(` property of the config object (either
passed as an argument or loaded from `),Cpe=a("code"),oKo=o("pretrained_model_name_or_path"),rKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=a("code"),tKo=o("pretrained_model_name_or_path"),aKo=o(":"),nKo=l(),Ape=a("ul"),NF=a("li"),ype=a("strong"),sKo=o("detr"),lKo=o(" \u2014 "),NV=a("a"),iKo=o("DetrForSegmentation"),dKo=o(" (DETR model)"),cKo=l(),jF=a("p"),fKo=o("The model is set in evaluation mode by default using "),Lpe=a("code"),mKo=o("model.eval()"),gKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=a("code"),hKo=o("model.train()"),pKo=l(),F(DF.$$.fragment),LBe=l(),wd=a("h2"),GF=a("a"),$pe=a("span"),F(q0.$$.fragment),uKo=l(),kpe=a("span"),_Ko=o("AutoModelForSemanticSegmentation"),xBe=l(),Wo=a("div"),F(N0.$$.fragment),bKo=l(),Ad=a("p"),vKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jV=a("a"),FKo=o("from_pretrained()"),TKo=o(" class method or the "),DV=a("a"),MKo=o("from_config()"),EKo=o(` class
method.`),CKo=l(),j0=a("p"),wKo=o("This class cannot be instantiated directly using "),Spe=a("code"),AKo=o("__init__()"),yKo=o(" (throws an error)."),LKo=l(),Ft=a("div"),F(D0.$$.fragment),xKo=l(),Rpe=a("p"),$Ko=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),kKo=l(),yd=a("p"),SKo=o(`Note:
Loading a model from its configuration file does `),Bpe=a("strong"),RKo=o("not"),BKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=a("a"),PKo=o("from_pretrained()"),IKo=o(" to load the model weights."),qKo=l(),F(OF.$$.fragment),NKo=l(),ho=a("div"),F(G0.$$.fragment),jKo=l(),Ppe=a("p"),DKo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),GKo=l(),za=a("p"),OKo=o("The model class to instantiate is selected based on the "),Ipe=a("code"),VKo=o("model_type"),XKo=o(` property of the config object (either
passed as an argument or loaded from `),qpe=a("code"),zKo=o("pretrained_model_name_or_path"),QKo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=a("code"),WKo=o("pretrained_model_name_or_path"),HKo=o(":"),UKo=l(),Qa=a("ul"),VF=a("li"),jpe=a("strong"),JKo=o("beit"),YKo=o(" \u2014 "),OV=a("a"),KKo=o("BeitForSemanticSegmentation"),ZKo=o(" (BEiT model)"),eZo=l(),XF=a("li"),Dpe=a("strong"),oZo=o("data2vec-vision"),rZo=o(" \u2014 "),VV=a("a"),tZo=o("Data2VecVisionForSemanticSegmentation"),aZo=o(" (Data2VecVision model)"),nZo=l(),zF=a("li"),Gpe=a("strong"),sZo=o("dpt"),lZo=o(" \u2014 "),XV=a("a"),iZo=o("DPTForSemanticSegmentation"),dZo=o(" (DPT model)"),cZo=l(),QF=a("li"),Ope=a("strong"),fZo=o("segformer"),mZo=o(" \u2014 "),zV=a("a"),gZo=o("SegformerForSemanticSegmentation"),hZo=o(" (SegFormer model)"),pZo=l(),WF=a("p"),uZo=o("The model is set in evaluation mode by default using "),Vpe=a("code"),_Zo=o("model.eval()"),bZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=a("code"),vZo=o("model.train()"),FZo=l(),F(HF.$$.fragment),$Be=l(),Ld=a("h2"),UF=a("a"),zpe=a("span"),F(O0.$$.fragment),TZo=l(),Qpe=a("span"),MZo=o("AutoModelForInstanceSegmentation"),kBe=l(),Ho=a("div"),F(V0.$$.fragment),EZo=l(),xd=a("p"),CZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QV=a("a"),wZo=o("from_pretrained()"),AZo=o(" class method or the "),WV=a("a"),yZo=o("from_config()"),LZo=o(` class
method.`),xZo=l(),X0=a("p"),$Zo=o("This class cannot be instantiated directly using "),Wpe=a("code"),kZo=o("__init__()"),SZo=o(" (throws an error)."),RZo=l(),Tt=a("div"),F(z0.$$.fragment),BZo=l(),Hpe=a("p"),PZo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),IZo=l(),$d=a("p"),qZo=o(`Note:
Loading a model from its configuration file does `),Upe=a("strong"),NZo=o("not"),jZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=a("a"),DZo=o("from_pretrained()"),GZo=o(" to load the model weights."),OZo=l(),F(JF.$$.fragment),VZo=l(),po=a("div"),F(Q0.$$.fragment),XZo=l(),Jpe=a("p"),zZo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),QZo=l(),Wa=a("p"),WZo=o("The model class to instantiate is selected based on the "),Ype=a("code"),HZo=o("model_type"),UZo=o(` property of the config object (either
passed as an argument or loaded from `),Kpe=a("code"),JZo=o("pretrained_model_name_or_path"),YZo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=a("code"),KZo=o("pretrained_model_name_or_path"),ZZo=o(":"),eer=l(),eue=a("ul"),YF=a("li"),oue=a("strong"),oer=o("maskformer"),rer=o(" \u2014 "),UV=a("a"),ter=o("MaskFormerForInstanceSegmentation"),aer=o(" (MaskFormer model)"),ner=l(),KF=a("p"),ser=o("The model is set in evaluation mode by default using "),rue=a("code"),ler=o("model.eval()"),ier=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=a("code"),der=o("model.train()"),cer=l(),F(ZF.$$.fragment),SBe=l(),kd=a("h2"),e6=a("a"),aue=a("span"),F(W0.$$.fragment),fer=l(),nue=a("span"),mer=o("TFAutoModel"),RBe=l(),Uo=a("div"),F(H0.$$.fragment),ger=l(),Sd=a("p"),her=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JV=a("a"),per=o("from_pretrained()"),uer=o(" class method or the "),YV=a("a"),_er=o("from_config()"),ber=o(` class
method.`),ver=l(),U0=a("p"),Fer=o("This class cannot be instantiated directly using "),sue=a("code"),Ter=o("__init__()"),Mer=o(" (throws an error)."),Eer=l(),Mt=a("div"),F(J0.$$.fragment),Cer=l(),lue=a("p"),wer=o("Instantiates one of the base model classes of the library from a configuration."),Aer=l(),Rd=a("p"),yer=o(`Note:
Loading a model from its configuration file does `),iue=a("strong"),Ler=o("not"),xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=a("a"),$er=o("from_pretrained()"),ker=o(" to load the model weights."),Ser=l(),F(o6.$$.fragment),Rer=l(),Mr=a("div"),F(Y0.$$.fragment),Ber=l(),due=a("p"),Per=o("Instantiate one of the base model classes of the library from a pretrained model."),Ier=l(),Ha=a("p"),qer=o("The model class to instantiate is selected based on the "),cue=a("code"),Ner=o("model_type"),jer=o(` property of the config object (either
passed as an argument or loaded from `),fue=a("code"),Der=o("pretrained_model_name_or_path"),Ger=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=a("code"),Oer=o("pretrained_model_name_or_path"),Ver=o(":"),Xer=l(),j=a("ul"),r6=a("li"),gue=a("strong"),zer=o("albert"),Qer=o(" \u2014 "),ZV=a("a"),Wer=o("TFAlbertModel"),Her=o(" (ALBERT model)"),Uer=l(),t6=a("li"),hue=a("strong"),Jer=o("bart"),Yer=o(" \u2014 "),eX=a("a"),Ker=o("TFBartModel"),Zer=o(" (BART model)"),eor=l(),a6=a("li"),pue=a("strong"),oor=o("bert"),ror=o(" \u2014 "),oX=a("a"),tor=o("TFBertModel"),aor=o(" (BERT model)"),nor=l(),n6=a("li"),uue=a("strong"),sor=o("blenderbot"),lor=o(" \u2014 "),rX=a("a"),ior=o("TFBlenderbotModel"),dor=o(" (Blenderbot model)"),cor=l(),s6=a("li"),_ue=a("strong"),mor=o("blenderbot-small"),gor=o(" \u2014 "),tX=a("a"),hor=o("TFBlenderbotSmallModel"),por=o(" (BlenderbotSmall model)"),uor=l(),l6=a("li"),bue=a("strong"),_or=o("camembert"),bor=o(" \u2014 "),aX=a("a"),vor=o("TFCamembertModel"),For=o(" (CamemBERT model)"),Tor=l(),i6=a("li"),vue=a("strong"),Mor=o("clip"),Eor=o(" \u2014 "),nX=a("a"),Cor=o("TFCLIPModel"),wor=o(" (CLIP model)"),Aor=l(),d6=a("li"),Fue=a("strong"),yor=o("convbert"),Lor=o(" \u2014 "),sX=a("a"),xor=o("TFConvBertModel"),$or=o(" (ConvBERT model)"),kor=l(),c6=a("li"),Tue=a("strong"),Sor=o("convnext"),Ror=o(" \u2014 "),lX=a("a"),Bor=o("TFConvNextModel"),Por=o(" (ConvNext model)"),Ior=l(),f6=a("li"),Mue=a("strong"),qor=o("ctrl"),Nor=o(" \u2014 "),iX=a("a"),jor=o("TFCTRLModel"),Dor=o(" (CTRL model)"),Gor=l(),m6=a("li"),Eue=a("strong"),Oor=o("deberta"),Vor=o(" \u2014 "),dX=a("a"),Xor=o("TFDebertaModel"),zor=o(" (DeBERTa model)"),Qor=l(),g6=a("li"),Cue=a("strong"),Wor=o("deberta-v2"),Hor=o(" \u2014 "),cX=a("a"),Uor=o("TFDebertaV2Model"),Jor=o(" (DeBERTa-v2 model)"),Yor=l(),h6=a("li"),wue=a("strong"),Kor=o("distilbert"),Zor=o(" \u2014 "),fX=a("a"),err=o("TFDistilBertModel"),orr=o(" (DistilBERT model)"),rrr=l(),p6=a("li"),Aue=a("strong"),trr=o("dpr"),arr=o(" \u2014 "),mX=a("a"),nrr=o("TFDPRQuestionEncoder"),srr=o(" (DPR model)"),lrr=l(),u6=a("li"),yue=a("strong"),irr=o("electra"),drr=o(" \u2014 "),gX=a("a"),crr=o("TFElectraModel"),frr=o(" (ELECTRA model)"),mrr=l(),_6=a("li"),Lue=a("strong"),grr=o("flaubert"),hrr=o(" \u2014 "),hX=a("a"),prr=o("TFFlaubertModel"),urr=o(" (FlauBERT model)"),_rr=l(),xs=a("li"),xue=a("strong"),brr=o("funnel"),vrr=o(" \u2014 "),pX=a("a"),Frr=o("TFFunnelModel"),Trr=o(" or "),uX=a("a"),Mrr=o("TFFunnelBaseModel"),Err=o(" (Funnel Transformer model)"),Crr=l(),b6=a("li"),$ue=a("strong"),wrr=o("gpt2"),Arr=o(" \u2014 "),_X=a("a"),yrr=o("TFGPT2Model"),Lrr=o(" (OpenAI GPT-2 model)"),xrr=l(),v6=a("li"),kue=a("strong"),$rr=o("gptj"),krr=o(" \u2014 "),bX=a("a"),Srr=o("TFGPTJModel"),Rrr=o(" (GPT-J model)"),Brr=l(),F6=a("li"),Sue=a("strong"),Prr=o("hubert"),Irr=o(" \u2014 "),vX=a("a"),qrr=o("TFHubertModel"),Nrr=o(" (Hubert model)"),jrr=l(),T6=a("li"),Rue=a("strong"),Drr=o("layoutlm"),Grr=o(" \u2014 "),FX=a("a"),Orr=o("TFLayoutLMModel"),Vrr=o(" (LayoutLM model)"),Xrr=l(),M6=a("li"),Bue=a("strong"),zrr=o("led"),Qrr=o(" \u2014 "),TX=a("a"),Wrr=o("TFLEDModel"),Hrr=o(" (LED model)"),Urr=l(),E6=a("li"),Pue=a("strong"),Jrr=o("longformer"),Yrr=o(" \u2014 "),MX=a("a"),Krr=o("TFLongformerModel"),Zrr=o(" (Longformer model)"),etr=l(),C6=a("li"),Iue=a("strong"),otr=o("lxmert"),rtr=o(" \u2014 "),EX=a("a"),ttr=o("TFLxmertModel"),atr=o(" (LXMERT model)"),ntr=l(),w6=a("li"),que=a("strong"),str=o("marian"),ltr=o(" \u2014 "),CX=a("a"),itr=o("TFMarianModel"),dtr=o(" (Marian model)"),ctr=l(),A6=a("li"),Nue=a("strong"),ftr=o("mbart"),mtr=o(" \u2014 "),wX=a("a"),gtr=o("TFMBartModel"),htr=o(" (mBART model)"),ptr=l(),y6=a("li"),jue=a("strong"),utr=o("mobilebert"),_tr=o(" \u2014 "),AX=a("a"),btr=o("TFMobileBertModel"),vtr=o(" (MobileBERT model)"),Ftr=l(),L6=a("li"),Due=a("strong"),Ttr=o("mpnet"),Mtr=o(" \u2014 "),yX=a("a"),Etr=o("TFMPNetModel"),Ctr=o(" (MPNet model)"),wtr=l(),x6=a("li"),Gue=a("strong"),Atr=o("mt5"),ytr=o(" \u2014 "),LX=a("a"),Ltr=o("TFMT5Model"),xtr=o(" (mT5 model)"),$tr=l(),$6=a("li"),Oue=a("strong"),ktr=o("openai-gpt"),Str=o(" \u2014 "),xX=a("a"),Rtr=o("TFOpenAIGPTModel"),Btr=o(" (OpenAI GPT model)"),Ptr=l(),k6=a("li"),Vue=a("strong"),Itr=o("pegasus"),qtr=o(" \u2014 "),$X=a("a"),Ntr=o("TFPegasusModel"),jtr=o(" (Pegasus model)"),Dtr=l(),S6=a("li"),Xue=a("strong"),Gtr=o("rembert"),Otr=o(" \u2014 "),kX=a("a"),Vtr=o("TFRemBertModel"),Xtr=o(" (RemBERT model)"),ztr=l(),R6=a("li"),zue=a("strong"),Qtr=o("roberta"),Wtr=o(" \u2014 "),SX=a("a"),Htr=o("TFRobertaModel"),Utr=o(" (RoBERTa model)"),Jtr=l(),B6=a("li"),Que=a("strong"),Ytr=o("roformer"),Ktr=o(" \u2014 "),RX=a("a"),Ztr=o("TFRoFormerModel"),ear=o(" (RoFormer model)"),oar=l(),P6=a("li"),Wue=a("strong"),rar=o("speech_to_text"),tar=o(" \u2014 "),BX=a("a"),aar=o("TFSpeech2TextModel"),nar=o(" (Speech2Text model)"),sar=l(),I6=a("li"),Hue=a("strong"),lar=o("t5"),iar=o(" \u2014 "),PX=a("a"),dar=o("TFT5Model"),car=o(" (T5 model)"),far=l(),q6=a("li"),Uue=a("strong"),mar=o("tapas"),gar=o(" \u2014 "),IX=a("a"),har=o("TFTapasModel"),par=o(" (TAPAS model)"),uar=l(),N6=a("li"),Jue=a("strong"),_ar=o("transfo-xl"),bar=o(" \u2014 "),qX=a("a"),Far=o("TFTransfoXLModel"),Tar=o(" (Transformer-XL model)"),Mar=l(),j6=a("li"),Yue=a("strong"),Ear=o("vit"),Car=o(" \u2014 "),NX=a("a"),war=o("TFViTModel"),Aar=o(" (ViT model)"),yar=l(),D6=a("li"),Kue=a("strong"),Lar=o("vit_mae"),xar=o(" \u2014 "),jX=a("a"),$ar=o("TFViTMAEModel"),kar=o(" (ViTMAE model)"),Sar=l(),G6=a("li"),Zue=a("strong"),Rar=o("wav2vec2"),Bar=o(" \u2014 "),DX=a("a"),Par=o("TFWav2Vec2Model"),Iar=o(" (Wav2Vec2 model)"),qar=l(),O6=a("li"),e_e=a("strong"),Nar=o("xlm"),jar=o(" \u2014 "),GX=a("a"),Dar=o("TFXLMModel"),Gar=o(" (XLM model)"),Oar=l(),V6=a("li"),o_e=a("strong"),Var=o("xlm-roberta"),Xar=o(" \u2014 "),OX=a("a"),zar=o("TFXLMRobertaModel"),Qar=o(" (XLM-RoBERTa model)"),War=l(),X6=a("li"),r_e=a("strong"),Har=o("xlnet"),Uar=o(" \u2014 "),VX=a("a"),Jar=o("TFXLNetModel"),Yar=o(" (XLNet model)"),Kar=l(),F(z6.$$.fragment),BBe=l(),Bd=a("h2"),Q6=a("a"),t_e=a("span"),F(K0.$$.fragment),Zar=l(),a_e=a("span"),enr=o("TFAutoModelForPreTraining"),PBe=l(),Jo=a("div"),F(Z0.$$.fragment),onr=l(),Pd=a("p"),rnr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XX=a("a"),tnr=o("from_pretrained()"),anr=o(" class method or the "),zX=a("a"),nnr=o("from_config()"),snr=o(` class
method.`),lnr=l(),ey=a("p"),inr=o("This class cannot be instantiated directly using "),n_e=a("code"),dnr=o("__init__()"),cnr=o(" (throws an error)."),fnr=l(),Et=a("div"),F(oy.$$.fragment),mnr=l(),s_e=a("p"),gnr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),hnr=l(),Id=a("p"),pnr=o(`Note:
Loading a model from its configuration file does `),l_e=a("strong"),unr=o("not"),_nr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=a("a"),bnr=o("from_pretrained()"),vnr=o(" to load the model weights."),Fnr=l(),F(W6.$$.fragment),Tnr=l(),Er=a("div"),F(ry.$$.fragment),Mnr=l(),i_e=a("p"),Enr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Cnr=l(),Ua=a("p"),wnr=o("The model class to instantiate is selected based on the "),d_e=a("code"),Anr=o("model_type"),ynr=o(` property of the config object (either
passed as an argument or loaded from `),c_e=a("code"),Lnr=o("pretrained_model_name_or_path"),xnr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f_e=a("code"),$nr=o("pretrained_model_name_or_path"),knr=o(":"),Snr=l(),ne=a("ul"),H6=a("li"),m_e=a("strong"),Rnr=o("albert"),Bnr=o(" \u2014 "),WX=a("a"),Pnr=o("TFAlbertForPreTraining"),Inr=o(" (ALBERT model)"),qnr=l(),U6=a("li"),g_e=a("strong"),Nnr=o("bart"),jnr=o(" \u2014 "),HX=a("a"),Dnr=o("TFBartForConditionalGeneration"),Gnr=o(" (BART model)"),Onr=l(),J6=a("li"),h_e=a("strong"),Vnr=o("bert"),Xnr=o(" \u2014 "),UX=a("a"),znr=o("TFBertForPreTraining"),Qnr=o(" (BERT model)"),Wnr=l(),Y6=a("li"),p_e=a("strong"),Hnr=o("camembert"),Unr=o(" \u2014 "),JX=a("a"),Jnr=o("TFCamembertForMaskedLM"),Ynr=o(" (CamemBERT model)"),Knr=l(),K6=a("li"),u_e=a("strong"),Znr=o("ctrl"),esr=o(" \u2014 "),YX=a("a"),osr=o("TFCTRLLMHeadModel"),rsr=o(" (CTRL model)"),tsr=l(),Z6=a("li"),__e=a("strong"),asr=o("distilbert"),nsr=o(" \u2014 "),KX=a("a"),ssr=o("TFDistilBertForMaskedLM"),lsr=o(" (DistilBERT model)"),isr=l(),eT=a("li"),b_e=a("strong"),dsr=o("electra"),csr=o(" \u2014 "),ZX=a("a"),fsr=o("TFElectraForPreTraining"),msr=o(" (ELECTRA model)"),gsr=l(),oT=a("li"),v_e=a("strong"),hsr=o("flaubert"),psr=o(" \u2014 "),ez=a("a"),usr=o("TFFlaubertWithLMHeadModel"),_sr=o(" (FlauBERT model)"),bsr=l(),rT=a("li"),F_e=a("strong"),vsr=o("funnel"),Fsr=o(" \u2014 "),oz=a("a"),Tsr=o("TFFunnelForPreTraining"),Msr=o(" (Funnel Transformer model)"),Esr=l(),tT=a("li"),T_e=a("strong"),Csr=o("gpt2"),wsr=o(" \u2014 "),rz=a("a"),Asr=o("TFGPT2LMHeadModel"),ysr=o(" (OpenAI GPT-2 model)"),Lsr=l(),aT=a("li"),M_e=a("strong"),xsr=o("layoutlm"),$sr=o(" \u2014 "),tz=a("a"),ksr=o("TFLayoutLMForMaskedLM"),Ssr=o(" (LayoutLM model)"),Rsr=l(),nT=a("li"),E_e=a("strong"),Bsr=o("lxmert"),Psr=o(" \u2014 "),az=a("a"),Isr=o("TFLxmertForPreTraining"),qsr=o(" (LXMERT model)"),Nsr=l(),sT=a("li"),C_e=a("strong"),jsr=o("mobilebert"),Dsr=o(" \u2014 "),nz=a("a"),Gsr=o("TFMobileBertForPreTraining"),Osr=o(" (MobileBERT model)"),Vsr=l(),lT=a("li"),w_e=a("strong"),Xsr=o("mpnet"),zsr=o(" \u2014 "),sz=a("a"),Qsr=o("TFMPNetForMaskedLM"),Wsr=o(" (MPNet model)"),Hsr=l(),iT=a("li"),A_e=a("strong"),Usr=o("openai-gpt"),Jsr=o(" \u2014 "),lz=a("a"),Ysr=o("TFOpenAIGPTLMHeadModel"),Ksr=o(" (OpenAI GPT model)"),Zsr=l(),dT=a("li"),y_e=a("strong"),elr=o("roberta"),olr=o(" \u2014 "),iz=a("a"),rlr=o("TFRobertaForMaskedLM"),tlr=o(" (RoBERTa model)"),alr=l(),cT=a("li"),L_e=a("strong"),nlr=o("t5"),slr=o(" \u2014 "),dz=a("a"),llr=o("TFT5ForConditionalGeneration"),ilr=o(" (T5 model)"),dlr=l(),fT=a("li"),x_e=a("strong"),clr=o("tapas"),flr=o(" \u2014 "),cz=a("a"),mlr=o("TFTapasForMaskedLM"),glr=o(" (TAPAS model)"),hlr=l(),mT=a("li"),$_e=a("strong"),plr=o("transfo-xl"),ulr=o(" \u2014 "),fz=a("a"),_lr=o("TFTransfoXLLMHeadModel"),blr=o(" (Transformer-XL model)"),vlr=l(),gT=a("li"),k_e=a("strong"),Flr=o("vit_mae"),Tlr=o(" \u2014 "),mz=a("a"),Mlr=o("TFViTMAEForPreTraining"),Elr=o(" (ViTMAE model)"),Clr=l(),hT=a("li"),S_e=a("strong"),wlr=o("xlm"),Alr=o(" \u2014 "),gz=a("a"),ylr=o("TFXLMWithLMHeadModel"),Llr=o(" (XLM model)"),xlr=l(),pT=a("li"),R_e=a("strong"),$lr=o("xlm-roberta"),klr=o(" \u2014 "),hz=a("a"),Slr=o("TFXLMRobertaForMaskedLM"),Rlr=o(" (XLM-RoBERTa model)"),Blr=l(),uT=a("li"),B_e=a("strong"),Plr=o("xlnet"),Ilr=o(" \u2014 "),pz=a("a"),qlr=o("TFXLNetLMHeadModel"),Nlr=o(" (XLNet model)"),jlr=l(),F(_T.$$.fragment),IBe=l(),qd=a("h2"),bT=a("a"),P_e=a("span"),F(ty.$$.fragment),Dlr=l(),I_e=a("span"),Glr=o("TFAutoModelForCausalLM"),qBe=l(),Yo=a("div"),F(ay.$$.fragment),Olr=l(),Nd=a("p"),Vlr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uz=a("a"),Xlr=o("from_pretrained()"),zlr=o(" class method or the "),_z=a("a"),Qlr=o("from_config()"),Wlr=o(` class
method.`),Hlr=l(),ny=a("p"),Ulr=o("This class cannot be instantiated directly using "),q_e=a("code"),Jlr=o("__init__()"),Ylr=o(" (throws an error)."),Klr=l(),Ct=a("div"),F(sy.$$.fragment),Zlr=l(),N_e=a("p"),eir=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),oir=l(),jd=a("p"),rir=o(`Note:
Loading a model from its configuration file does `),j_e=a("strong"),tir=o("not"),air=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=a("a"),nir=o("from_pretrained()"),sir=o(" to load the model weights."),lir=l(),F(vT.$$.fragment),iir=l(),Cr=a("div"),F(ly.$$.fragment),dir=l(),D_e=a("p"),cir=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),fir=l(),Ja=a("p"),mir=o("The model class to instantiate is selected based on the "),G_e=a("code"),gir=o("model_type"),hir=o(` property of the config object (either
passed as an argument or loaded from `),O_e=a("code"),pir=o("pretrained_model_name_or_path"),uir=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=a("code"),_ir=o("pretrained_model_name_or_path"),bir=o(":"),vir=l(),Te=a("ul"),FT=a("li"),X_e=a("strong"),Fir=o("bert"),Tir=o(" \u2014 "),vz=a("a"),Mir=o("TFBertLMHeadModel"),Eir=o(" (BERT model)"),Cir=l(),TT=a("li"),z_e=a("strong"),wir=o("camembert"),Air=o(" \u2014 "),Fz=a("a"),yir=o("TFCamembertForCausalLM"),Lir=o(" (CamemBERT model)"),xir=l(),MT=a("li"),Q_e=a("strong"),$ir=o("ctrl"),kir=o(" \u2014 "),Tz=a("a"),Sir=o("TFCTRLLMHeadModel"),Rir=o(" (CTRL model)"),Bir=l(),ET=a("li"),W_e=a("strong"),Pir=o("gpt2"),Iir=o(" \u2014 "),Mz=a("a"),qir=o("TFGPT2LMHeadModel"),Nir=o(" (OpenAI GPT-2 model)"),jir=l(),CT=a("li"),H_e=a("strong"),Dir=o("gptj"),Gir=o(" \u2014 "),Ez=a("a"),Oir=o("TFGPTJForCausalLM"),Vir=o(" (GPT-J model)"),Xir=l(),wT=a("li"),U_e=a("strong"),zir=o("openai-gpt"),Qir=o(" \u2014 "),Cz=a("a"),Wir=o("TFOpenAIGPTLMHeadModel"),Hir=o(" (OpenAI GPT model)"),Uir=l(),AT=a("li"),J_e=a("strong"),Jir=o("rembert"),Yir=o(" \u2014 "),wz=a("a"),Kir=o("TFRemBertForCausalLM"),Zir=o(" (RemBERT model)"),edr=l(),yT=a("li"),Y_e=a("strong"),odr=o("roberta"),rdr=o(" \u2014 "),Az=a("a"),tdr=o("TFRobertaForCausalLM"),adr=o(" (RoBERTa model)"),ndr=l(),LT=a("li"),K_e=a("strong"),sdr=o("roformer"),ldr=o(" \u2014 "),yz=a("a"),idr=o("TFRoFormerForCausalLM"),ddr=o(" (RoFormer model)"),cdr=l(),xT=a("li"),Z_e=a("strong"),fdr=o("transfo-xl"),mdr=o(" \u2014 "),Lz=a("a"),gdr=o("TFTransfoXLLMHeadModel"),hdr=o(" (Transformer-XL model)"),pdr=l(),$T=a("li"),e1e=a("strong"),udr=o("xlm"),_dr=o(" \u2014 "),xz=a("a"),bdr=o("TFXLMWithLMHeadModel"),vdr=o(" (XLM model)"),Fdr=l(),kT=a("li"),o1e=a("strong"),Tdr=o("xlnet"),Mdr=o(" \u2014 "),$z=a("a"),Edr=o("TFXLNetLMHeadModel"),Cdr=o(" (XLNet model)"),wdr=l(),F(ST.$$.fragment),NBe=l(),Dd=a("h2"),RT=a("a"),r1e=a("span"),F(iy.$$.fragment),Adr=l(),t1e=a("span"),ydr=o("TFAutoModelForImageClassification"),jBe=l(),Ko=a("div"),F(dy.$$.fragment),Ldr=l(),Gd=a("p"),xdr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kz=a("a"),$dr=o("from_pretrained()"),kdr=o(" class method or the "),Sz=a("a"),Sdr=o("from_config()"),Rdr=o(` class
method.`),Bdr=l(),cy=a("p"),Pdr=o("This class cannot be instantiated directly using "),a1e=a("code"),Idr=o("__init__()"),qdr=o(" (throws an error)."),Ndr=l(),wt=a("div"),F(fy.$$.fragment),jdr=l(),n1e=a("p"),Ddr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Gdr=l(),Od=a("p"),Odr=o(`Note:
Loading a model from its configuration file does `),s1e=a("strong"),Vdr=o("not"),Xdr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=a("a"),zdr=o("from_pretrained()"),Qdr=o(" to load the model weights."),Wdr=l(),F(BT.$$.fragment),Hdr=l(),wr=a("div"),F(my.$$.fragment),Udr=l(),l1e=a("p"),Jdr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ydr=l(),Ya=a("p"),Kdr=o("The model class to instantiate is selected based on the "),i1e=a("code"),Zdr=o("model_type"),ecr=o(` property of the config object (either
passed as an argument or loaded from `),d1e=a("code"),ocr=o("pretrained_model_name_or_path"),rcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=a("code"),tcr=o("pretrained_model_name_or_path"),acr=o(":"),ncr=l(),gy=a("ul"),PT=a("li"),f1e=a("strong"),scr=o("convnext"),lcr=o(" \u2014 "),Bz=a("a"),icr=o("TFConvNextForImageClassification"),dcr=o(" (ConvNext model)"),ccr=l(),IT=a("li"),m1e=a("strong"),fcr=o("vit"),mcr=o(" \u2014 "),Pz=a("a"),gcr=o("TFViTForImageClassification"),hcr=o(" (ViT model)"),pcr=l(),F(qT.$$.fragment),DBe=l(),Vd=a("h2"),NT=a("a"),g1e=a("span"),F(hy.$$.fragment),ucr=l(),h1e=a("span"),_cr=o("TFAutoModelForMaskedLM"),GBe=l(),Zo=a("div"),F(py.$$.fragment),bcr=l(),Xd=a("p"),vcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Iz=a("a"),Fcr=o("from_pretrained()"),Tcr=o(" class method or the "),qz=a("a"),Mcr=o("from_config()"),Ecr=o(` class
method.`),Ccr=l(),uy=a("p"),wcr=o("This class cannot be instantiated directly using "),p1e=a("code"),Acr=o("__init__()"),ycr=o(" (throws an error)."),Lcr=l(),At=a("div"),F(_y.$$.fragment),xcr=l(),u1e=a("p"),$cr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),kcr=l(),zd=a("p"),Scr=o(`Note:
Loading a model from its configuration file does `),_1e=a("strong"),Rcr=o("not"),Bcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=a("a"),Pcr=o("from_pretrained()"),Icr=o(" to load the model weights."),qcr=l(),F(jT.$$.fragment),Ncr=l(),Ar=a("div"),F(by.$$.fragment),jcr=l(),b1e=a("p"),Dcr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Gcr=l(),Ka=a("p"),Ocr=o("The model class to instantiate is selected based on the "),v1e=a("code"),Vcr=o("model_type"),Xcr=o(` property of the config object (either
passed as an argument or loaded from `),F1e=a("code"),zcr=o("pretrained_model_name_or_path"),Qcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=a("code"),Wcr=o("pretrained_model_name_or_path"),Hcr=o(":"),Ucr=l(),ie=a("ul"),DT=a("li"),M1e=a("strong"),Jcr=o("albert"),Ycr=o(" \u2014 "),jz=a("a"),Kcr=o("TFAlbertForMaskedLM"),Zcr=o(" (ALBERT model)"),efr=l(),GT=a("li"),E1e=a("strong"),ofr=o("bert"),rfr=o(" \u2014 "),Dz=a("a"),tfr=o("TFBertForMaskedLM"),afr=o(" (BERT model)"),nfr=l(),OT=a("li"),C1e=a("strong"),sfr=o("camembert"),lfr=o(" \u2014 "),Gz=a("a"),ifr=o("TFCamembertForMaskedLM"),dfr=o(" (CamemBERT model)"),cfr=l(),VT=a("li"),w1e=a("strong"),ffr=o("convbert"),mfr=o(" \u2014 "),Oz=a("a"),gfr=o("TFConvBertForMaskedLM"),hfr=o(" (ConvBERT model)"),pfr=l(),XT=a("li"),A1e=a("strong"),ufr=o("deberta"),_fr=o(" \u2014 "),Vz=a("a"),bfr=o("TFDebertaForMaskedLM"),vfr=o(" (DeBERTa model)"),Ffr=l(),zT=a("li"),y1e=a("strong"),Tfr=o("deberta-v2"),Mfr=o(" \u2014 "),Xz=a("a"),Efr=o("TFDebertaV2ForMaskedLM"),Cfr=o(" (DeBERTa-v2 model)"),wfr=l(),QT=a("li"),L1e=a("strong"),Afr=o("distilbert"),yfr=o(" \u2014 "),zz=a("a"),Lfr=o("TFDistilBertForMaskedLM"),xfr=o(" (DistilBERT model)"),$fr=l(),WT=a("li"),x1e=a("strong"),kfr=o("electra"),Sfr=o(" \u2014 "),Qz=a("a"),Rfr=o("TFElectraForMaskedLM"),Bfr=o(" (ELECTRA model)"),Pfr=l(),HT=a("li"),$1e=a("strong"),Ifr=o("flaubert"),qfr=o(" \u2014 "),Wz=a("a"),Nfr=o("TFFlaubertWithLMHeadModel"),jfr=o(" (FlauBERT model)"),Dfr=l(),UT=a("li"),k1e=a("strong"),Gfr=o("funnel"),Ofr=o(" \u2014 "),Hz=a("a"),Vfr=o("TFFunnelForMaskedLM"),Xfr=o(" (Funnel Transformer model)"),zfr=l(),JT=a("li"),S1e=a("strong"),Qfr=o("layoutlm"),Wfr=o(" \u2014 "),Uz=a("a"),Hfr=o("TFLayoutLMForMaskedLM"),Ufr=o(" (LayoutLM model)"),Jfr=l(),YT=a("li"),R1e=a("strong"),Yfr=o("longformer"),Kfr=o(" \u2014 "),Jz=a("a"),Zfr=o("TFLongformerForMaskedLM"),emr=o(" (Longformer model)"),omr=l(),KT=a("li"),B1e=a("strong"),rmr=o("mobilebert"),tmr=o(" \u2014 "),Yz=a("a"),amr=o("TFMobileBertForMaskedLM"),nmr=o(" (MobileBERT model)"),smr=l(),ZT=a("li"),P1e=a("strong"),lmr=o("mpnet"),imr=o(" \u2014 "),Kz=a("a"),dmr=o("TFMPNetForMaskedLM"),cmr=o(" (MPNet model)"),fmr=l(),e7=a("li"),I1e=a("strong"),mmr=o("rembert"),gmr=o(" \u2014 "),Zz=a("a"),hmr=o("TFRemBertForMaskedLM"),pmr=o(" (RemBERT model)"),umr=l(),o7=a("li"),q1e=a("strong"),_mr=o("roberta"),bmr=o(" \u2014 "),eQ=a("a"),vmr=o("TFRobertaForMaskedLM"),Fmr=o(" (RoBERTa model)"),Tmr=l(),r7=a("li"),N1e=a("strong"),Mmr=o("roformer"),Emr=o(" \u2014 "),oQ=a("a"),Cmr=o("TFRoFormerForMaskedLM"),wmr=o(" (RoFormer model)"),Amr=l(),t7=a("li"),j1e=a("strong"),ymr=o("tapas"),Lmr=o(" \u2014 "),rQ=a("a"),xmr=o("TFTapasForMaskedLM"),$mr=o(" (TAPAS model)"),kmr=l(),a7=a("li"),D1e=a("strong"),Smr=o("xlm"),Rmr=o(" \u2014 "),tQ=a("a"),Bmr=o("TFXLMWithLMHeadModel"),Pmr=o(" (XLM model)"),Imr=l(),n7=a("li"),G1e=a("strong"),qmr=o("xlm-roberta"),Nmr=o(" \u2014 "),aQ=a("a"),jmr=o("TFXLMRobertaForMaskedLM"),Dmr=o(" (XLM-RoBERTa model)"),Gmr=l(),F(s7.$$.fragment),OBe=l(),Qd=a("h2"),l7=a("a"),O1e=a("span"),F(vy.$$.fragment),Omr=l(),V1e=a("span"),Vmr=o("TFAutoModelForSeq2SeqLM"),VBe=l(),er=a("div"),F(Fy.$$.fragment),Xmr=l(),Wd=a("p"),zmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nQ=a("a"),Qmr=o("from_pretrained()"),Wmr=o(" class method or the "),sQ=a("a"),Hmr=o("from_config()"),Umr=o(` class
method.`),Jmr=l(),Ty=a("p"),Ymr=o("This class cannot be instantiated directly using "),X1e=a("code"),Kmr=o("__init__()"),Zmr=o(" (throws an error)."),egr=l(),yt=a("div"),F(My.$$.fragment),ogr=l(),z1e=a("p"),rgr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),tgr=l(),Hd=a("p"),agr=o(`Note:
Loading a model from its configuration file does `),Q1e=a("strong"),ngr=o("not"),sgr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=a("a"),lgr=o("from_pretrained()"),igr=o(" to load the model weights."),dgr=l(),F(i7.$$.fragment),cgr=l(),yr=a("div"),F(Ey.$$.fragment),fgr=l(),W1e=a("p"),mgr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),ggr=l(),Za=a("p"),hgr=o("The model class to instantiate is selected based on the "),H1e=a("code"),pgr=o("model_type"),ugr=o(` property of the config object (either
passed as an argument or loaded from `),U1e=a("code"),_gr=o("pretrained_model_name_or_path"),bgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=a("code"),vgr=o("pretrained_model_name_or_path"),Fgr=o(":"),Tgr=l(),ye=a("ul"),d7=a("li"),Y1e=a("strong"),Mgr=o("bart"),Egr=o(" \u2014 "),iQ=a("a"),Cgr=o("TFBartForConditionalGeneration"),wgr=o(" (BART model)"),Agr=l(),c7=a("li"),K1e=a("strong"),ygr=o("blenderbot"),Lgr=o(" \u2014 "),dQ=a("a"),xgr=o("TFBlenderbotForConditionalGeneration"),$gr=o(" (Blenderbot model)"),kgr=l(),f7=a("li"),Z1e=a("strong"),Sgr=o("blenderbot-small"),Rgr=o(" \u2014 "),cQ=a("a"),Bgr=o("TFBlenderbotSmallForConditionalGeneration"),Pgr=o(" (BlenderbotSmall model)"),Igr=l(),m7=a("li"),ebe=a("strong"),qgr=o("encoder-decoder"),Ngr=o(" \u2014 "),fQ=a("a"),jgr=o("TFEncoderDecoderModel"),Dgr=o(" (Encoder decoder model)"),Ggr=l(),g7=a("li"),obe=a("strong"),Ogr=o("led"),Vgr=o(" \u2014 "),mQ=a("a"),Xgr=o("TFLEDForConditionalGeneration"),zgr=o(" (LED model)"),Qgr=l(),h7=a("li"),rbe=a("strong"),Wgr=o("marian"),Hgr=o(" \u2014 "),gQ=a("a"),Ugr=o("TFMarianMTModel"),Jgr=o(" (Marian model)"),Ygr=l(),p7=a("li"),tbe=a("strong"),Kgr=o("mbart"),Zgr=o(" \u2014 "),hQ=a("a"),ehr=o("TFMBartForConditionalGeneration"),ohr=o(" (mBART model)"),rhr=l(),u7=a("li"),abe=a("strong"),thr=o("mt5"),ahr=o(" \u2014 "),pQ=a("a"),nhr=o("TFMT5ForConditionalGeneration"),shr=o(" (mT5 model)"),lhr=l(),_7=a("li"),nbe=a("strong"),ihr=o("pegasus"),dhr=o(" \u2014 "),uQ=a("a"),chr=o("TFPegasusForConditionalGeneration"),fhr=o(" (Pegasus model)"),mhr=l(),b7=a("li"),sbe=a("strong"),ghr=o("t5"),hhr=o(" \u2014 "),_Q=a("a"),phr=o("TFT5ForConditionalGeneration"),uhr=o(" (T5 model)"),_hr=l(),F(v7.$$.fragment),XBe=l(),Ud=a("h2"),F7=a("a"),lbe=a("span"),F(Cy.$$.fragment),bhr=l(),ibe=a("span"),vhr=o("TFAutoModelForSequenceClassification"),zBe=l(),or=a("div"),F(wy.$$.fragment),Fhr=l(),Jd=a("p"),Thr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bQ=a("a"),Mhr=o("from_pretrained()"),Ehr=o(" class method or the "),vQ=a("a"),Chr=o("from_config()"),whr=o(` class
method.`),Ahr=l(),Ay=a("p"),yhr=o("This class cannot be instantiated directly using "),dbe=a("code"),Lhr=o("__init__()"),xhr=o(" (throws an error)."),$hr=l(),Lt=a("div"),F(yy.$$.fragment),khr=l(),cbe=a("p"),Shr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rhr=l(),Yd=a("p"),Bhr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),Phr=o("not"),Ihr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=a("a"),qhr=o("from_pretrained()"),Nhr=o(" to load the model weights."),jhr=l(),F(T7.$$.fragment),Dhr=l(),Lr=a("div"),F(Ly.$$.fragment),Ghr=l(),mbe=a("p"),Ohr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vhr=l(),en=a("p"),Xhr=o("The model class to instantiate is selected based on the "),gbe=a("code"),zhr=o("model_type"),Qhr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),Whr=o("pretrained_model_name_or_path"),Hhr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),Uhr=o("pretrained_model_name_or_path"),Jhr=o(":"),Yhr=l(),Z=a("ul"),M7=a("li"),ube=a("strong"),Khr=o("albert"),Zhr=o(" \u2014 "),TQ=a("a"),epr=o("TFAlbertForSequenceClassification"),opr=o(" (ALBERT model)"),rpr=l(),E7=a("li"),_be=a("strong"),tpr=o("bert"),apr=o(" \u2014 "),MQ=a("a"),npr=o("TFBertForSequenceClassification"),spr=o(" (BERT model)"),lpr=l(),C7=a("li"),bbe=a("strong"),ipr=o("camembert"),dpr=o(" \u2014 "),EQ=a("a"),cpr=o("TFCamembertForSequenceClassification"),fpr=o(" (CamemBERT model)"),mpr=l(),w7=a("li"),vbe=a("strong"),gpr=o("convbert"),hpr=o(" \u2014 "),CQ=a("a"),ppr=o("TFConvBertForSequenceClassification"),upr=o(" (ConvBERT model)"),_pr=l(),A7=a("li"),Fbe=a("strong"),bpr=o("ctrl"),vpr=o(" \u2014 "),wQ=a("a"),Fpr=o("TFCTRLForSequenceClassification"),Tpr=o(" (CTRL model)"),Mpr=l(),y7=a("li"),Tbe=a("strong"),Epr=o("deberta"),Cpr=o(" \u2014 "),AQ=a("a"),wpr=o("TFDebertaForSequenceClassification"),Apr=o(" (DeBERTa model)"),ypr=l(),L7=a("li"),Mbe=a("strong"),Lpr=o("deberta-v2"),xpr=o(" \u2014 "),yQ=a("a"),$pr=o("TFDebertaV2ForSequenceClassification"),kpr=o(" (DeBERTa-v2 model)"),Spr=l(),x7=a("li"),Ebe=a("strong"),Rpr=o("distilbert"),Bpr=o(" \u2014 "),LQ=a("a"),Ppr=o("TFDistilBertForSequenceClassification"),Ipr=o(" (DistilBERT model)"),qpr=l(),$7=a("li"),Cbe=a("strong"),Npr=o("electra"),jpr=o(" \u2014 "),xQ=a("a"),Dpr=o("TFElectraForSequenceClassification"),Gpr=o(" (ELECTRA model)"),Opr=l(),k7=a("li"),wbe=a("strong"),Vpr=o("flaubert"),Xpr=o(" \u2014 "),$Q=a("a"),zpr=o("TFFlaubertForSequenceClassification"),Qpr=o(" (FlauBERT model)"),Wpr=l(),S7=a("li"),Abe=a("strong"),Hpr=o("funnel"),Upr=o(" \u2014 "),kQ=a("a"),Jpr=o("TFFunnelForSequenceClassification"),Ypr=o(" (Funnel Transformer model)"),Kpr=l(),R7=a("li"),ybe=a("strong"),Zpr=o("gpt2"),eur=o(" \u2014 "),SQ=a("a"),our=o("TFGPT2ForSequenceClassification"),rur=o(" (OpenAI GPT-2 model)"),tur=l(),B7=a("li"),Lbe=a("strong"),aur=o("gptj"),nur=o(" \u2014 "),RQ=a("a"),sur=o("TFGPTJForSequenceClassification"),lur=o(" (GPT-J model)"),iur=l(),P7=a("li"),xbe=a("strong"),dur=o("layoutlm"),cur=o(" \u2014 "),BQ=a("a"),fur=o("TFLayoutLMForSequenceClassification"),mur=o(" (LayoutLM model)"),gur=l(),I7=a("li"),$be=a("strong"),hur=o("longformer"),pur=o(" \u2014 "),PQ=a("a"),uur=o("TFLongformerForSequenceClassification"),_ur=o(" (Longformer model)"),bur=l(),q7=a("li"),kbe=a("strong"),vur=o("mobilebert"),Fur=o(" \u2014 "),IQ=a("a"),Tur=o("TFMobileBertForSequenceClassification"),Mur=o(" (MobileBERT model)"),Eur=l(),N7=a("li"),Sbe=a("strong"),Cur=o("mpnet"),wur=o(" \u2014 "),qQ=a("a"),Aur=o("TFMPNetForSequenceClassification"),yur=o(" (MPNet model)"),Lur=l(),j7=a("li"),Rbe=a("strong"),xur=o("openai-gpt"),$ur=o(" \u2014 "),NQ=a("a"),kur=o("TFOpenAIGPTForSequenceClassification"),Sur=o(" (OpenAI GPT model)"),Rur=l(),D7=a("li"),Bbe=a("strong"),Bur=o("rembert"),Pur=o(" \u2014 "),jQ=a("a"),Iur=o("TFRemBertForSequenceClassification"),qur=o(" (RemBERT model)"),Nur=l(),G7=a("li"),Pbe=a("strong"),jur=o("roberta"),Dur=o(" \u2014 "),DQ=a("a"),Gur=o("TFRobertaForSequenceClassification"),Our=o(" (RoBERTa model)"),Vur=l(),O7=a("li"),Ibe=a("strong"),Xur=o("roformer"),zur=o(" \u2014 "),GQ=a("a"),Qur=o("TFRoFormerForSequenceClassification"),Wur=o(" (RoFormer model)"),Hur=l(),V7=a("li"),qbe=a("strong"),Uur=o("tapas"),Jur=o(" \u2014 "),OQ=a("a"),Yur=o("TFTapasForSequenceClassification"),Kur=o(" (TAPAS model)"),Zur=l(),X7=a("li"),Nbe=a("strong"),e_r=o("transfo-xl"),o_r=o(" \u2014 "),VQ=a("a"),r_r=o("TFTransfoXLForSequenceClassification"),t_r=o(" (Transformer-XL model)"),a_r=l(),z7=a("li"),jbe=a("strong"),n_r=o("xlm"),s_r=o(" \u2014 "),XQ=a("a"),l_r=o("TFXLMForSequenceClassification"),i_r=o(" (XLM model)"),d_r=l(),Q7=a("li"),Dbe=a("strong"),c_r=o("xlm-roberta"),f_r=o(" \u2014 "),zQ=a("a"),m_r=o("TFXLMRobertaForSequenceClassification"),g_r=o(" (XLM-RoBERTa model)"),h_r=l(),W7=a("li"),Gbe=a("strong"),p_r=o("xlnet"),u_r=o(" \u2014 "),QQ=a("a"),__r=o("TFXLNetForSequenceClassification"),b_r=o(" (XLNet model)"),v_r=l(),F(H7.$$.fragment),QBe=l(),Kd=a("h2"),U7=a("a"),Obe=a("span"),F(xy.$$.fragment),F_r=l(),Vbe=a("span"),T_r=o("TFAutoModelForMultipleChoice"),WBe=l(),rr=a("div"),F($y.$$.fragment),M_r=l(),Zd=a("p"),E_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WQ=a("a"),C_r=o("from_pretrained()"),w_r=o(" class method or the "),HQ=a("a"),A_r=o("from_config()"),y_r=o(` class
method.`),L_r=l(),ky=a("p"),x_r=o("This class cannot be instantiated directly using "),Xbe=a("code"),$_r=o("__init__()"),k_r=o(" (throws an error)."),S_r=l(),xt=a("div"),F(Sy.$$.fragment),R_r=l(),zbe=a("p"),B_r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),P_r=l(),ec=a("p"),I_r=o(`Note:
Loading a model from its configuration file does `),Qbe=a("strong"),q_r=o("not"),N_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=a("a"),j_r=o("from_pretrained()"),D_r=o(" to load the model weights."),G_r=l(),F(J7.$$.fragment),O_r=l(),xr=a("div"),F(Ry.$$.fragment),V_r=l(),Wbe=a("p"),X_r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z_r=l(),on=a("p"),Q_r=o("The model class to instantiate is selected based on the "),Hbe=a("code"),W_r=o("model_type"),H_r=o(` property of the config object (either
passed as an argument or loaded from `),Ube=a("code"),U_r=o("pretrained_model_name_or_path"),J_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=a("code"),Y_r=o("pretrained_model_name_or_path"),K_r=o(":"),Z_r=l(),pe=a("ul"),Y7=a("li"),Ybe=a("strong"),e1r=o("albert"),o1r=o(" \u2014 "),JQ=a("a"),r1r=o("TFAlbertForMultipleChoice"),t1r=o(" (ALBERT model)"),a1r=l(),K7=a("li"),Kbe=a("strong"),n1r=o("bert"),s1r=o(" \u2014 "),YQ=a("a"),l1r=o("TFBertForMultipleChoice"),i1r=o(" (BERT model)"),d1r=l(),Z7=a("li"),Zbe=a("strong"),c1r=o("camembert"),f1r=o(" \u2014 "),KQ=a("a"),m1r=o("TFCamembertForMultipleChoice"),g1r=o(" (CamemBERT model)"),h1r=l(),e9=a("li"),e4e=a("strong"),p1r=o("convbert"),u1r=o(" \u2014 "),ZQ=a("a"),_1r=o("TFConvBertForMultipleChoice"),b1r=o(" (ConvBERT model)"),v1r=l(),o9=a("li"),o4e=a("strong"),F1r=o("distilbert"),T1r=o(" \u2014 "),eW=a("a"),M1r=o("TFDistilBertForMultipleChoice"),E1r=o(" (DistilBERT model)"),C1r=l(),r9=a("li"),r4e=a("strong"),w1r=o("electra"),A1r=o(" \u2014 "),oW=a("a"),y1r=o("TFElectraForMultipleChoice"),L1r=o(" (ELECTRA model)"),x1r=l(),t9=a("li"),t4e=a("strong"),$1r=o("flaubert"),k1r=o(" \u2014 "),rW=a("a"),S1r=o("TFFlaubertForMultipleChoice"),R1r=o(" (FlauBERT model)"),B1r=l(),a9=a("li"),a4e=a("strong"),P1r=o("funnel"),I1r=o(" \u2014 "),tW=a("a"),q1r=o("TFFunnelForMultipleChoice"),N1r=o(" (Funnel Transformer model)"),j1r=l(),n9=a("li"),n4e=a("strong"),D1r=o("longformer"),G1r=o(" \u2014 "),aW=a("a"),O1r=o("TFLongformerForMultipleChoice"),V1r=o(" (Longformer model)"),X1r=l(),s9=a("li"),s4e=a("strong"),z1r=o("mobilebert"),Q1r=o(" \u2014 "),nW=a("a"),W1r=o("TFMobileBertForMultipleChoice"),H1r=o(" (MobileBERT model)"),U1r=l(),l9=a("li"),l4e=a("strong"),J1r=o("mpnet"),Y1r=o(" \u2014 "),sW=a("a"),K1r=o("TFMPNetForMultipleChoice"),Z1r=o(" (MPNet model)"),ebr=l(),i9=a("li"),i4e=a("strong"),obr=o("rembert"),rbr=o(" \u2014 "),lW=a("a"),tbr=o("TFRemBertForMultipleChoice"),abr=o(" (RemBERT model)"),nbr=l(),d9=a("li"),d4e=a("strong"),sbr=o("roberta"),lbr=o(" \u2014 "),iW=a("a"),ibr=o("TFRobertaForMultipleChoice"),dbr=o(" (RoBERTa model)"),cbr=l(),c9=a("li"),c4e=a("strong"),fbr=o("roformer"),mbr=o(" \u2014 "),dW=a("a"),gbr=o("TFRoFormerForMultipleChoice"),hbr=o(" (RoFormer model)"),pbr=l(),f9=a("li"),f4e=a("strong"),ubr=o("xlm"),_br=o(" \u2014 "),cW=a("a"),bbr=o("TFXLMForMultipleChoice"),vbr=o(" (XLM model)"),Fbr=l(),m9=a("li"),m4e=a("strong"),Tbr=o("xlm-roberta"),Mbr=o(" \u2014 "),fW=a("a"),Ebr=o("TFXLMRobertaForMultipleChoice"),Cbr=o(" (XLM-RoBERTa model)"),wbr=l(),g9=a("li"),g4e=a("strong"),Abr=o("xlnet"),ybr=o(" \u2014 "),mW=a("a"),Lbr=o("TFXLNetForMultipleChoice"),xbr=o(" (XLNet model)"),$br=l(),F(h9.$$.fragment),HBe=l(),oc=a("h2"),p9=a("a"),h4e=a("span"),F(By.$$.fragment),kbr=l(),p4e=a("span"),Sbr=o("TFAutoModelForTableQuestionAnswering"),UBe=l(),tr=a("div"),F(Py.$$.fragment),Rbr=l(),rc=a("p"),Bbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gW=a("a"),Pbr=o("from_pretrained()"),Ibr=o(" class method or the "),hW=a("a"),qbr=o("from_config()"),Nbr=o(` class
method.`),jbr=l(),Iy=a("p"),Dbr=o("This class cannot be instantiated directly using "),u4e=a("code"),Gbr=o("__init__()"),Obr=o(" (throws an error)."),Vbr=l(),$t=a("div"),F(qy.$$.fragment),Xbr=l(),_4e=a("p"),zbr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Qbr=l(),tc=a("p"),Wbr=o(`Note:
Loading a model from its configuration file does `),b4e=a("strong"),Hbr=o("not"),Ubr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=a("a"),Jbr=o("from_pretrained()"),Ybr=o(" to load the model weights."),Kbr=l(),F(u9.$$.fragment),Zbr=l(),$r=a("div"),F(Ny.$$.fragment),e4r=l(),v4e=a("p"),o4r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),r4r=l(),rn=a("p"),t4r=o("The model class to instantiate is selected based on the "),F4e=a("code"),a4r=o("model_type"),n4r=o(` property of the config object (either
passed as an argument or loaded from `),T4e=a("code"),s4r=o("pretrained_model_name_or_path"),l4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=a("code"),i4r=o("pretrained_model_name_or_path"),d4r=o(":"),c4r=l(),E4e=a("ul"),_9=a("li"),C4e=a("strong"),f4r=o("tapas"),m4r=o(" \u2014 "),uW=a("a"),g4r=o("TFTapasForQuestionAnswering"),h4r=o(" (TAPAS model)"),p4r=l(),F(b9.$$.fragment),JBe=l(),ac=a("h2"),v9=a("a"),w4e=a("span"),F(jy.$$.fragment),u4r=l(),A4e=a("span"),_4r=o("TFAutoModelForTokenClassification"),YBe=l(),ar=a("div"),F(Dy.$$.fragment),b4r=l(),nc=a("p"),v4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_W=a("a"),F4r=o("from_pretrained()"),T4r=o(" class method or the "),bW=a("a"),M4r=o("from_config()"),E4r=o(` class
method.`),C4r=l(),Gy=a("p"),w4r=o("This class cannot be instantiated directly using "),y4e=a("code"),A4r=o("__init__()"),y4r=o(" (throws an error)."),L4r=l(),kt=a("div"),F(Oy.$$.fragment),x4r=l(),L4e=a("p"),$4r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),k4r=l(),sc=a("p"),S4r=o(`Note:
Loading a model from its configuration file does `),x4e=a("strong"),R4r=o("not"),B4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=a("a"),P4r=o("from_pretrained()"),I4r=o(" to load the model weights."),q4r=l(),F(F9.$$.fragment),N4r=l(),kr=a("div"),F(Vy.$$.fragment),j4r=l(),$4e=a("p"),D4r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),G4r=l(),tn=a("p"),O4r=o("The model class to instantiate is selected based on the "),k4e=a("code"),V4r=o("model_type"),X4r=o(` property of the config object (either
passed as an argument or loaded from `),S4e=a("code"),z4r=o("pretrained_model_name_or_path"),Q4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=a("code"),W4r=o("pretrained_model_name_or_path"),H4r=o(":"),U4r=l(),de=a("ul"),T9=a("li"),B4e=a("strong"),J4r=o("albert"),Y4r=o(" \u2014 "),FW=a("a"),K4r=o("TFAlbertForTokenClassification"),Z4r=o(" (ALBERT model)"),e2r=l(),M9=a("li"),P4e=a("strong"),o2r=o("bert"),r2r=o(" \u2014 "),TW=a("a"),t2r=o("TFBertForTokenClassification"),a2r=o(" (BERT model)"),n2r=l(),E9=a("li"),I4e=a("strong"),s2r=o("camembert"),l2r=o(" \u2014 "),MW=a("a"),i2r=o("TFCamembertForTokenClassification"),d2r=o(" (CamemBERT model)"),c2r=l(),C9=a("li"),q4e=a("strong"),f2r=o("convbert"),m2r=o(" \u2014 "),EW=a("a"),g2r=o("TFConvBertForTokenClassification"),h2r=o(" (ConvBERT model)"),p2r=l(),w9=a("li"),N4e=a("strong"),u2r=o("deberta"),_2r=o(" \u2014 "),CW=a("a"),b2r=o("TFDebertaForTokenClassification"),v2r=o(" (DeBERTa model)"),F2r=l(),A9=a("li"),j4e=a("strong"),T2r=o("deberta-v2"),M2r=o(" \u2014 "),wW=a("a"),E2r=o("TFDebertaV2ForTokenClassification"),C2r=o(" (DeBERTa-v2 model)"),w2r=l(),y9=a("li"),D4e=a("strong"),A2r=o("distilbert"),y2r=o(" \u2014 "),AW=a("a"),L2r=o("TFDistilBertForTokenClassification"),x2r=o(" (DistilBERT model)"),$2r=l(),L9=a("li"),G4e=a("strong"),k2r=o("electra"),S2r=o(" \u2014 "),yW=a("a"),R2r=o("TFElectraForTokenClassification"),B2r=o(" (ELECTRA model)"),P2r=l(),x9=a("li"),O4e=a("strong"),I2r=o("flaubert"),q2r=o(" \u2014 "),LW=a("a"),N2r=o("TFFlaubertForTokenClassification"),j2r=o(" (FlauBERT model)"),D2r=l(),$9=a("li"),V4e=a("strong"),G2r=o("funnel"),O2r=o(" \u2014 "),xW=a("a"),V2r=o("TFFunnelForTokenClassification"),X2r=o(" (Funnel Transformer model)"),z2r=l(),k9=a("li"),X4e=a("strong"),Q2r=o("layoutlm"),W2r=o(" \u2014 "),$W=a("a"),H2r=o("TFLayoutLMForTokenClassification"),U2r=o(" (LayoutLM model)"),J2r=l(),S9=a("li"),z4e=a("strong"),Y2r=o("longformer"),K2r=o(" \u2014 "),kW=a("a"),Z2r=o("TFLongformerForTokenClassification"),evr=o(" (Longformer model)"),ovr=l(),R9=a("li"),Q4e=a("strong"),rvr=o("mobilebert"),tvr=o(" \u2014 "),SW=a("a"),avr=o("TFMobileBertForTokenClassification"),nvr=o(" (MobileBERT model)"),svr=l(),B9=a("li"),W4e=a("strong"),lvr=o("mpnet"),ivr=o(" \u2014 "),RW=a("a"),dvr=o("TFMPNetForTokenClassification"),cvr=o(" (MPNet model)"),fvr=l(),P9=a("li"),H4e=a("strong"),mvr=o("rembert"),gvr=o(" \u2014 "),BW=a("a"),hvr=o("TFRemBertForTokenClassification"),pvr=o(" (RemBERT model)"),uvr=l(),I9=a("li"),U4e=a("strong"),_vr=o("roberta"),bvr=o(" \u2014 "),PW=a("a"),vvr=o("TFRobertaForTokenClassification"),Fvr=o(" (RoBERTa model)"),Tvr=l(),q9=a("li"),J4e=a("strong"),Mvr=o("roformer"),Evr=o(" \u2014 "),IW=a("a"),Cvr=o("TFRoFormerForTokenClassification"),wvr=o(" (RoFormer model)"),Avr=l(),N9=a("li"),Y4e=a("strong"),yvr=o("xlm"),Lvr=o(" \u2014 "),qW=a("a"),xvr=o("TFXLMForTokenClassification"),$vr=o(" (XLM model)"),kvr=l(),j9=a("li"),K4e=a("strong"),Svr=o("xlm-roberta"),Rvr=o(" \u2014 "),NW=a("a"),Bvr=o("TFXLMRobertaForTokenClassification"),Pvr=o(" (XLM-RoBERTa model)"),Ivr=l(),D9=a("li"),Z4e=a("strong"),qvr=o("xlnet"),Nvr=o(" \u2014 "),jW=a("a"),jvr=o("TFXLNetForTokenClassification"),Dvr=o(" (XLNet model)"),Gvr=l(),F(G9.$$.fragment),KBe=l(),lc=a("h2"),O9=a("a"),e2e=a("span"),F(Xy.$$.fragment),Ovr=l(),o2e=a("span"),Vvr=o("TFAutoModelForQuestionAnswering"),ZBe=l(),nr=a("div"),F(zy.$$.fragment),Xvr=l(),ic=a("p"),zvr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DW=a("a"),Qvr=o("from_pretrained()"),Wvr=o(" class method or the "),GW=a("a"),Hvr=o("from_config()"),Uvr=o(` class
method.`),Jvr=l(),Qy=a("p"),Yvr=o("This class cannot be instantiated directly using "),r2e=a("code"),Kvr=o("__init__()"),Zvr=o(" (throws an error)."),eFr=l(),St=a("div"),F(Wy.$$.fragment),oFr=l(),t2e=a("p"),rFr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),tFr=l(),dc=a("p"),aFr=o(`Note:
Loading a model from its configuration file does `),a2e=a("strong"),nFr=o("not"),sFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=a("a"),lFr=o("from_pretrained()"),iFr=o(" to load the model weights."),dFr=l(),F(V9.$$.fragment),cFr=l(),Sr=a("div"),F(Hy.$$.fragment),fFr=l(),n2e=a("p"),mFr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),gFr=l(),an=a("p"),hFr=o("The model class to instantiate is selected based on the "),s2e=a("code"),pFr=o("model_type"),uFr=o(` property of the config object (either
passed as an argument or loaded from `),l2e=a("code"),_Fr=o("pretrained_model_name_or_path"),bFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=a("code"),vFr=o("pretrained_model_name_or_path"),FFr=o(":"),TFr=l(),ce=a("ul"),X9=a("li"),d2e=a("strong"),MFr=o("albert"),EFr=o(" \u2014 "),VW=a("a"),CFr=o("TFAlbertForQuestionAnswering"),wFr=o(" (ALBERT model)"),AFr=l(),z9=a("li"),c2e=a("strong"),yFr=o("bert"),LFr=o(" \u2014 "),XW=a("a"),xFr=o("TFBertForQuestionAnswering"),$Fr=o(" (BERT model)"),kFr=l(),Q9=a("li"),f2e=a("strong"),SFr=o("camembert"),RFr=o(" \u2014 "),zW=a("a"),BFr=o("TFCamembertForQuestionAnswering"),PFr=o(" (CamemBERT model)"),IFr=l(),W9=a("li"),m2e=a("strong"),qFr=o("convbert"),NFr=o(" \u2014 "),QW=a("a"),jFr=o("TFConvBertForQuestionAnswering"),DFr=o(" (ConvBERT model)"),GFr=l(),H9=a("li"),g2e=a("strong"),OFr=o("deberta"),VFr=o(" \u2014 "),WW=a("a"),XFr=o("TFDebertaForQuestionAnswering"),zFr=o(" (DeBERTa model)"),QFr=l(),U9=a("li"),h2e=a("strong"),WFr=o("deberta-v2"),HFr=o(" \u2014 "),HW=a("a"),UFr=o("TFDebertaV2ForQuestionAnswering"),JFr=o(" (DeBERTa-v2 model)"),YFr=l(),J9=a("li"),p2e=a("strong"),KFr=o("distilbert"),ZFr=o(" \u2014 "),UW=a("a"),e6r=o("TFDistilBertForQuestionAnswering"),o6r=o(" (DistilBERT model)"),r6r=l(),Y9=a("li"),u2e=a("strong"),t6r=o("electra"),a6r=o(" \u2014 "),JW=a("a"),n6r=o("TFElectraForQuestionAnswering"),s6r=o(" (ELECTRA model)"),l6r=l(),K9=a("li"),_2e=a("strong"),i6r=o("flaubert"),d6r=o(" \u2014 "),YW=a("a"),c6r=o("TFFlaubertForQuestionAnsweringSimple"),f6r=o(" (FlauBERT model)"),m6r=l(),Z9=a("li"),b2e=a("strong"),g6r=o("funnel"),h6r=o(" \u2014 "),KW=a("a"),p6r=o("TFFunnelForQuestionAnswering"),u6r=o(" (Funnel Transformer model)"),_6r=l(),eM=a("li"),v2e=a("strong"),b6r=o("gptj"),v6r=o(" \u2014 "),ZW=a("a"),F6r=o("TFGPTJForQuestionAnswering"),T6r=o(" (GPT-J model)"),M6r=l(),oM=a("li"),F2e=a("strong"),E6r=o("longformer"),C6r=o(" \u2014 "),eH=a("a"),w6r=o("TFLongformerForQuestionAnswering"),A6r=o(" (Longformer model)"),y6r=l(),rM=a("li"),T2e=a("strong"),L6r=o("mobilebert"),x6r=o(" \u2014 "),oH=a("a"),$6r=o("TFMobileBertForQuestionAnswering"),k6r=o(" (MobileBERT model)"),S6r=l(),tM=a("li"),M2e=a("strong"),R6r=o("mpnet"),B6r=o(" \u2014 "),rH=a("a"),P6r=o("TFMPNetForQuestionAnswering"),I6r=o(" (MPNet model)"),q6r=l(),aM=a("li"),E2e=a("strong"),N6r=o("rembert"),j6r=o(" \u2014 "),tH=a("a"),D6r=o("TFRemBertForQuestionAnswering"),G6r=o(" (RemBERT model)"),O6r=l(),nM=a("li"),C2e=a("strong"),V6r=o("roberta"),X6r=o(" \u2014 "),aH=a("a"),z6r=o("TFRobertaForQuestionAnswering"),Q6r=o(" (RoBERTa model)"),W6r=l(),sM=a("li"),w2e=a("strong"),H6r=o("roformer"),U6r=o(" \u2014 "),nH=a("a"),J6r=o("TFRoFormerForQuestionAnswering"),Y6r=o(" (RoFormer model)"),K6r=l(),lM=a("li"),A2e=a("strong"),Z6r=o("xlm"),eTr=o(" \u2014 "),sH=a("a"),oTr=o("TFXLMForQuestionAnsweringSimple"),rTr=o(" (XLM model)"),tTr=l(),iM=a("li"),y2e=a("strong"),aTr=o("xlm-roberta"),nTr=o(" \u2014 "),lH=a("a"),sTr=o("TFXLMRobertaForQuestionAnswering"),lTr=o(" (XLM-RoBERTa model)"),iTr=l(),dM=a("li"),L2e=a("strong"),dTr=o("xlnet"),cTr=o(" \u2014 "),iH=a("a"),fTr=o("TFXLNetForQuestionAnsweringSimple"),mTr=o(" (XLNet model)"),gTr=l(),F(cM.$$.fragment),ePe=l(),cc=a("h2"),fM=a("a"),x2e=a("span"),F(Uy.$$.fragment),hTr=l(),$2e=a("span"),pTr=o("TFAutoModelForVision2Seq"),oPe=l(),sr=a("div"),F(Jy.$$.fragment),uTr=l(),fc=a("p"),_Tr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dH=a("a"),bTr=o("from_pretrained()"),vTr=o(" class method or the "),cH=a("a"),FTr=o("from_config()"),TTr=o(` class
method.`),MTr=l(),Yy=a("p"),ETr=o("This class cannot be instantiated directly using "),k2e=a("code"),CTr=o("__init__()"),wTr=o(" (throws an error)."),ATr=l(),Rt=a("div"),F(Ky.$$.fragment),yTr=l(),S2e=a("p"),LTr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),xTr=l(),mc=a("p"),$Tr=o(`Note:
Loading a model from its configuration file does `),R2e=a("strong"),kTr=o("not"),STr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=a("a"),RTr=o("from_pretrained()"),BTr=o(" to load the model weights."),PTr=l(),F(mM.$$.fragment),ITr=l(),Rr=a("div"),F(Zy.$$.fragment),qTr=l(),B2e=a("p"),NTr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),jTr=l(),nn=a("p"),DTr=o("The model class to instantiate is selected based on the "),P2e=a("code"),GTr=o("model_type"),OTr=o(` property of the config object (either
passed as an argument or loaded from `),I2e=a("code"),VTr=o("pretrained_model_name_or_path"),XTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=a("code"),zTr=o("pretrained_model_name_or_path"),QTr=o(":"),WTr=l(),N2e=a("ul"),gM=a("li"),j2e=a("strong"),HTr=o("vision-encoder-decoder"),UTr=o(" \u2014 "),mH=a("a"),JTr=o("TFVisionEncoderDecoderModel"),YTr=o(" (Vision Encoder decoder model)"),KTr=l(),F(hM.$$.fragment),rPe=l(),gc=a("h2"),pM=a("a"),D2e=a("span"),F(eL.$$.fragment),ZTr=l(),G2e=a("span"),e7r=o("TFAutoModelForSpeechSeq2Seq"),tPe=l(),lr=a("div"),F(oL.$$.fragment),o7r=l(),hc=a("p"),r7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gH=a("a"),t7r=o("from_pretrained()"),a7r=o(" class method or the "),hH=a("a"),n7r=o("from_config()"),s7r=o(` class
method.`),l7r=l(),rL=a("p"),i7r=o("This class cannot be instantiated directly using "),O2e=a("code"),d7r=o("__init__()"),c7r=o(" (throws an error)."),f7r=l(),Bt=a("div"),F(tL.$$.fragment),m7r=l(),V2e=a("p"),g7r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),h7r=l(),pc=a("p"),p7r=o(`Note:
Loading a model from its configuration file does `),X2e=a("strong"),u7r=o("not"),_7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=a("a"),b7r=o("from_pretrained()"),v7r=o(" to load the model weights."),F7r=l(),F(uM.$$.fragment),T7r=l(),Br=a("div"),F(aL.$$.fragment),M7r=l(),z2e=a("p"),E7r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),C7r=l(),sn=a("p"),w7r=o("The model class to instantiate is selected based on the "),Q2e=a("code"),A7r=o("model_type"),y7r=o(` property of the config object (either
passed as an argument or loaded from `),W2e=a("code"),L7r=o("pretrained_model_name_or_path"),x7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=a("code"),$7r=o("pretrained_model_name_or_path"),k7r=o(":"),S7r=l(),U2e=a("ul"),_M=a("li"),J2e=a("strong"),R7r=o("speech_to_text"),B7r=o(" \u2014 "),uH=a("a"),P7r=o("TFSpeech2TextForConditionalGeneration"),I7r=o(" (Speech2Text model)"),q7r=l(),F(bM.$$.fragment),aPe=l(),uc=a("h2"),vM=a("a"),Y2e=a("span"),F(nL.$$.fragment),N7r=l(),K2e=a("span"),j7r=o("FlaxAutoModel"),nPe=l(),ir=a("div"),F(sL.$$.fragment),D7r=l(),_c=a("p"),G7r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_H=a("a"),O7r=o("from_pretrained()"),V7r=o(" class method or the "),bH=a("a"),X7r=o("from_config()"),z7r=o(` class
method.`),Q7r=l(),lL=a("p"),W7r=o("This class cannot be instantiated directly using "),Z2e=a("code"),H7r=o("__init__()"),U7r=o(" (throws an error)."),J7r=l(),Pt=a("div"),F(iL.$$.fragment),Y7r=l(),eve=a("p"),K7r=o("Instantiates one of the base model classes of the library from a configuration."),Z7r=l(),bc=a("p"),e9r=o(`Note:
Loading a model from its configuration file does `),ove=a("strong"),o9r=o("not"),r9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=a("a"),t9r=o("from_pretrained()"),a9r=o(" to load the model weights."),n9r=l(),F(FM.$$.fragment),s9r=l(),Pr=a("div"),F(dL.$$.fragment),l9r=l(),rve=a("p"),i9r=o("Instantiate one of the base model classes of the library from a pretrained model."),d9r=l(),ln=a("p"),c9r=o("The model class to instantiate is selected based on the "),tve=a("code"),f9r=o("model_type"),m9r=o(` property of the config object (either
passed as an argument or loaded from `),ave=a("code"),g9r=o("pretrained_model_name_or_path"),h9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=a("code"),p9r=o("pretrained_model_name_or_path"),u9r=o(":"),_9r=l(),oe=a("ul"),TM=a("li"),sve=a("strong"),b9r=o("albert"),v9r=o(" \u2014 "),FH=a("a"),F9r=o("FlaxAlbertModel"),T9r=o(" (ALBERT model)"),M9r=l(),MM=a("li"),lve=a("strong"),E9r=o("bart"),C9r=o(" \u2014 "),TH=a("a"),w9r=o("FlaxBartModel"),A9r=o(" (BART model)"),y9r=l(),EM=a("li"),ive=a("strong"),L9r=o("beit"),x9r=o(" \u2014 "),MH=a("a"),$9r=o("FlaxBeitModel"),k9r=o(" (BEiT model)"),S9r=l(),CM=a("li"),dve=a("strong"),R9r=o("bert"),B9r=o(" \u2014 "),EH=a("a"),P9r=o("FlaxBertModel"),I9r=o(" (BERT model)"),q9r=l(),wM=a("li"),cve=a("strong"),N9r=o("big_bird"),j9r=o(" \u2014 "),CH=a("a"),D9r=o("FlaxBigBirdModel"),G9r=o(" (BigBird model)"),O9r=l(),AM=a("li"),fve=a("strong"),V9r=o("blenderbot"),X9r=o(" \u2014 "),wH=a("a"),z9r=o("FlaxBlenderbotModel"),Q9r=o(" (Blenderbot model)"),W9r=l(),yM=a("li"),mve=a("strong"),H9r=o("blenderbot-small"),U9r=o(" \u2014 "),AH=a("a"),J9r=o("FlaxBlenderbotSmallModel"),Y9r=o(" (BlenderbotSmall model)"),K9r=l(),LM=a("li"),gve=a("strong"),Z9r=o("clip"),eMr=o(" \u2014 "),yH=a("a"),oMr=o("FlaxCLIPModel"),rMr=o(" (CLIP model)"),tMr=l(),xM=a("li"),hve=a("strong"),aMr=o("distilbert"),nMr=o(" \u2014 "),LH=a("a"),sMr=o("FlaxDistilBertModel"),lMr=o(" (DistilBERT model)"),iMr=l(),$M=a("li"),pve=a("strong"),dMr=o("electra"),cMr=o(" \u2014 "),xH=a("a"),fMr=o("FlaxElectraModel"),mMr=o(" (ELECTRA model)"),gMr=l(),kM=a("li"),uve=a("strong"),hMr=o("gpt2"),pMr=o(" \u2014 "),$H=a("a"),uMr=o("FlaxGPT2Model"),_Mr=o(" (OpenAI GPT-2 model)"),bMr=l(),SM=a("li"),_ve=a("strong"),vMr=o("gpt_neo"),FMr=o(" \u2014 "),kH=a("a"),TMr=o("FlaxGPTNeoModel"),MMr=o(" (GPT Neo model)"),EMr=l(),RM=a("li"),bve=a("strong"),CMr=o("gptj"),wMr=o(" \u2014 "),SH=a("a"),AMr=o("FlaxGPTJModel"),yMr=o(" (GPT-J model)"),LMr=l(),BM=a("li"),vve=a("strong"),xMr=o("marian"),$Mr=o(" \u2014 "),RH=a("a"),kMr=o("FlaxMarianModel"),SMr=o(" (Marian model)"),RMr=l(),PM=a("li"),Fve=a("strong"),BMr=o("mbart"),PMr=o(" \u2014 "),BH=a("a"),IMr=o("FlaxMBartModel"),qMr=o(" (mBART model)"),NMr=l(),IM=a("li"),Tve=a("strong"),jMr=o("mt5"),DMr=o(" \u2014 "),PH=a("a"),GMr=o("FlaxMT5Model"),OMr=o(" (mT5 model)"),VMr=l(),qM=a("li"),Mve=a("strong"),XMr=o("pegasus"),zMr=o(" \u2014 "),IH=a("a"),QMr=o("FlaxPegasusModel"),WMr=o(" (Pegasus model)"),HMr=l(),NM=a("li"),Eve=a("strong"),UMr=o("roberta"),JMr=o(" \u2014 "),qH=a("a"),YMr=o("FlaxRobertaModel"),KMr=o(" (RoBERTa model)"),ZMr=l(),jM=a("li"),Cve=a("strong"),eEr=o("roformer"),oEr=o(" \u2014 "),NH=a("a"),rEr=o("FlaxRoFormerModel"),tEr=o(" (RoFormer model)"),aEr=l(),DM=a("li"),wve=a("strong"),nEr=o("t5"),sEr=o(" \u2014 "),jH=a("a"),lEr=o("FlaxT5Model"),iEr=o(" (T5 model)"),dEr=l(),GM=a("li"),Ave=a("strong"),cEr=o("vision-text-dual-encoder"),fEr=o(" \u2014 "),DH=a("a"),mEr=o("FlaxVisionTextDualEncoderModel"),gEr=o(" (VisionTextDualEncoder model)"),hEr=l(),OM=a("li"),yve=a("strong"),pEr=o("vit"),uEr=o(" \u2014 "),GH=a("a"),_Er=o("FlaxViTModel"),bEr=o(" (ViT model)"),vEr=l(),VM=a("li"),Lve=a("strong"),FEr=o("wav2vec2"),TEr=o(" \u2014 "),OH=a("a"),MEr=o("FlaxWav2Vec2Model"),EEr=o(" (Wav2Vec2 model)"),CEr=l(),XM=a("li"),xve=a("strong"),wEr=o("xglm"),AEr=o(" \u2014 "),VH=a("a"),yEr=o("FlaxXGLMModel"),LEr=o(" (XGLM model)"),xEr=l(),zM=a("li"),$ve=a("strong"),$Er=o("xlm-roberta"),kEr=o(" \u2014 "),XH=a("a"),SEr=o("FlaxXLMRobertaModel"),REr=o(" (XLM-RoBERTa model)"),BEr=l(),F(QM.$$.fragment),sPe=l(),vc=a("h2"),WM=a("a"),kve=a("span"),F(cL.$$.fragment),PEr=l(),Sve=a("span"),IEr=o("FlaxAutoModelForCausalLM"),lPe=l(),dr=a("div"),F(fL.$$.fragment),qEr=l(),Fc=a("p"),NEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zH=a("a"),jEr=o("from_pretrained()"),DEr=o(" class method or the "),QH=a("a"),GEr=o("from_config()"),OEr=o(` class
method.`),VEr=l(),mL=a("p"),XEr=o("This class cannot be instantiated directly using "),Rve=a("code"),zEr=o("__init__()"),QEr=o(" (throws an error)."),WEr=l(),It=a("div"),F(gL.$$.fragment),HEr=l(),Bve=a("p"),UEr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),JEr=l(),Tc=a("p"),YEr=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),KEr=o("not"),ZEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=a("a"),e5r=o("from_pretrained()"),o5r=o(" to load the model weights."),r5r=l(),F(HM.$$.fragment),t5r=l(),Ir=a("div"),F(hL.$$.fragment),a5r=l(),Ive=a("p"),n5r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),s5r=l(),dn=a("p"),l5r=o("The model class to instantiate is selected based on the "),qve=a("code"),i5r=o("model_type"),d5r=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),c5r=o("pretrained_model_name_or_path"),f5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),m5r=o("pretrained_model_name_or_path"),g5r=o(":"),h5r=l(),Hr=a("ul"),UM=a("li"),Dve=a("strong"),p5r=o("bart"),u5r=o(" \u2014 "),HH=a("a"),_5r=o("FlaxBartForCausalLM"),b5r=o(" (BART model)"),v5r=l(),JM=a("li"),Gve=a("strong"),F5r=o("gpt2"),T5r=o(" \u2014 "),UH=a("a"),M5r=o("FlaxGPT2LMHeadModel"),E5r=o(" (OpenAI GPT-2 model)"),C5r=l(),YM=a("li"),Ove=a("strong"),w5r=o("gpt_neo"),A5r=o(" \u2014 "),JH=a("a"),y5r=o("FlaxGPTNeoForCausalLM"),L5r=o(" (GPT Neo model)"),x5r=l(),KM=a("li"),Vve=a("strong"),$5r=o("gptj"),k5r=o(" \u2014 "),YH=a("a"),S5r=o("FlaxGPTJForCausalLM"),R5r=o(" (GPT-J model)"),B5r=l(),ZM=a("li"),Xve=a("strong"),P5r=o("xglm"),I5r=o(" \u2014 "),KH=a("a"),q5r=o("FlaxXGLMForCausalLM"),N5r=o(" (XGLM model)"),j5r=l(),F(eE.$$.fragment),iPe=l(),Mc=a("h2"),oE=a("a"),zve=a("span"),F(pL.$$.fragment),D5r=l(),Qve=a("span"),G5r=o("FlaxAutoModelForPreTraining"),dPe=l(),cr=a("div"),F(uL.$$.fragment),O5r=l(),Ec=a("p"),V5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZH=a("a"),X5r=o("from_pretrained()"),z5r=o(" class method or the "),eU=a("a"),Q5r=o("from_config()"),W5r=o(` class
method.`),H5r=l(),_L=a("p"),U5r=o("This class cannot be instantiated directly using "),Wve=a("code"),J5r=o("__init__()"),Y5r=o(" (throws an error)."),K5r=l(),qt=a("div"),F(bL.$$.fragment),Z5r=l(),Hve=a("p"),eCr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oCr=l(),Cc=a("p"),rCr=o(`Note:
Loading a model from its configuration file does `),Uve=a("strong"),tCr=o("not"),aCr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=a("a"),nCr=o("from_pretrained()"),sCr=o(" to load the model weights."),lCr=l(),F(rE.$$.fragment),iCr=l(),qr=a("div"),F(vL.$$.fragment),dCr=l(),Jve=a("p"),cCr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),fCr=l(),cn=a("p"),mCr=o("The model class to instantiate is selected based on the "),Yve=a("code"),gCr=o("model_type"),hCr=o(` property of the config object (either
passed as an argument or loaded from `),Kve=a("code"),pCr=o("pretrained_model_name_or_path"),uCr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=a("code"),_Cr=o("pretrained_model_name_or_path"),bCr=o(":"),vCr=l(),Me=a("ul"),tE=a("li"),eFe=a("strong"),FCr=o("albert"),TCr=o(" \u2014 "),rU=a("a"),MCr=o("FlaxAlbertForPreTraining"),ECr=o(" (ALBERT model)"),CCr=l(),aE=a("li"),oFe=a("strong"),wCr=o("bart"),ACr=o(" \u2014 "),tU=a("a"),yCr=o("FlaxBartForConditionalGeneration"),LCr=o(" (BART model)"),xCr=l(),nE=a("li"),rFe=a("strong"),$Cr=o("bert"),kCr=o(" \u2014 "),aU=a("a"),SCr=o("FlaxBertForPreTraining"),RCr=o(" (BERT model)"),BCr=l(),sE=a("li"),tFe=a("strong"),PCr=o("big_bird"),ICr=o(" \u2014 "),nU=a("a"),qCr=o("FlaxBigBirdForPreTraining"),NCr=o(" (BigBird model)"),jCr=l(),lE=a("li"),aFe=a("strong"),DCr=o("electra"),GCr=o(" \u2014 "),sU=a("a"),OCr=o("FlaxElectraForPreTraining"),VCr=o(" (ELECTRA model)"),XCr=l(),iE=a("li"),nFe=a("strong"),zCr=o("mbart"),QCr=o(" \u2014 "),lU=a("a"),WCr=o("FlaxMBartForConditionalGeneration"),HCr=o(" (mBART model)"),UCr=l(),dE=a("li"),sFe=a("strong"),JCr=o("mt5"),YCr=o(" \u2014 "),iU=a("a"),KCr=o("FlaxMT5ForConditionalGeneration"),ZCr=o(" (mT5 model)"),e3r=l(),cE=a("li"),lFe=a("strong"),o3r=o("roberta"),r3r=o(" \u2014 "),dU=a("a"),t3r=o("FlaxRobertaForMaskedLM"),a3r=o(" (RoBERTa model)"),n3r=l(),fE=a("li"),iFe=a("strong"),s3r=o("roformer"),l3r=o(" \u2014 "),cU=a("a"),i3r=o("FlaxRoFormerForMaskedLM"),d3r=o(" (RoFormer model)"),c3r=l(),mE=a("li"),dFe=a("strong"),f3r=o("t5"),m3r=o(" \u2014 "),fU=a("a"),g3r=o("FlaxT5ForConditionalGeneration"),h3r=o(" (T5 model)"),p3r=l(),gE=a("li"),cFe=a("strong"),u3r=o("wav2vec2"),_3r=o(" \u2014 "),mU=a("a"),b3r=o("FlaxWav2Vec2ForPreTraining"),v3r=o(" (Wav2Vec2 model)"),F3r=l(),hE=a("li"),fFe=a("strong"),T3r=o("xlm-roberta"),M3r=o(" \u2014 "),gU=a("a"),E3r=o("FlaxXLMRobertaForMaskedLM"),C3r=o(" (XLM-RoBERTa model)"),w3r=l(),F(pE.$$.fragment),cPe=l(),wc=a("h2"),uE=a("a"),mFe=a("span"),F(FL.$$.fragment),A3r=l(),gFe=a("span"),y3r=o("FlaxAutoModelForMaskedLM"),fPe=l(),fr=a("div"),F(TL.$$.fragment),L3r=l(),Ac=a("p"),x3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hU=a("a"),$3r=o("from_pretrained()"),k3r=o(" class method or the "),pU=a("a"),S3r=o("from_config()"),R3r=o(` class
method.`),B3r=l(),ML=a("p"),P3r=o("This class cannot be instantiated directly using "),hFe=a("code"),I3r=o("__init__()"),q3r=o(" (throws an error)."),N3r=l(),Nt=a("div"),F(EL.$$.fragment),j3r=l(),pFe=a("p"),D3r=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G3r=l(),yc=a("p"),O3r=o(`Note:
Loading a model from its configuration file does `),uFe=a("strong"),V3r=o("not"),X3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=a("a"),z3r=o("from_pretrained()"),Q3r=o(" to load the model weights."),W3r=l(),F(_E.$$.fragment),H3r=l(),Nr=a("div"),F(CL.$$.fragment),U3r=l(),_Fe=a("p"),J3r=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Y3r=l(),fn=a("p"),K3r=o("The model class to instantiate is selected based on the "),bFe=a("code"),Z3r=o("model_type"),ewr=o(` property of the config object (either
passed as an argument or loaded from `),vFe=a("code"),owr=o("pretrained_model_name_or_path"),rwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=a("code"),twr=o("pretrained_model_name_or_path"),awr=o(":"),nwr=l(),Le=a("ul"),bE=a("li"),TFe=a("strong"),swr=o("albert"),lwr=o(" \u2014 "),_U=a("a"),iwr=o("FlaxAlbertForMaskedLM"),dwr=o(" (ALBERT model)"),cwr=l(),vE=a("li"),MFe=a("strong"),fwr=o("bart"),mwr=o(" \u2014 "),bU=a("a"),gwr=o("FlaxBartForConditionalGeneration"),hwr=o(" (BART model)"),pwr=l(),FE=a("li"),EFe=a("strong"),uwr=o("bert"),_wr=o(" \u2014 "),vU=a("a"),bwr=o("FlaxBertForMaskedLM"),vwr=o(" (BERT model)"),Fwr=l(),TE=a("li"),CFe=a("strong"),Twr=o("big_bird"),Mwr=o(" \u2014 "),FU=a("a"),Ewr=o("FlaxBigBirdForMaskedLM"),Cwr=o(" (BigBird model)"),wwr=l(),ME=a("li"),wFe=a("strong"),Awr=o("distilbert"),ywr=o(" \u2014 "),TU=a("a"),Lwr=o("FlaxDistilBertForMaskedLM"),xwr=o(" (DistilBERT model)"),$wr=l(),EE=a("li"),AFe=a("strong"),kwr=o("electra"),Swr=o(" \u2014 "),MU=a("a"),Rwr=o("FlaxElectraForMaskedLM"),Bwr=o(" (ELECTRA model)"),Pwr=l(),CE=a("li"),yFe=a("strong"),Iwr=o("mbart"),qwr=o(" \u2014 "),EU=a("a"),Nwr=o("FlaxMBartForConditionalGeneration"),jwr=o(" (mBART model)"),Dwr=l(),wE=a("li"),LFe=a("strong"),Gwr=o("roberta"),Owr=o(" \u2014 "),CU=a("a"),Vwr=o("FlaxRobertaForMaskedLM"),Xwr=o(" (RoBERTa model)"),zwr=l(),AE=a("li"),xFe=a("strong"),Qwr=o("roformer"),Wwr=o(" \u2014 "),wU=a("a"),Hwr=o("FlaxRoFormerForMaskedLM"),Uwr=o(" (RoFormer model)"),Jwr=l(),yE=a("li"),$Fe=a("strong"),Ywr=o("xlm-roberta"),Kwr=o(" \u2014 "),AU=a("a"),Zwr=o("FlaxXLMRobertaForMaskedLM"),eAr=o(" (XLM-RoBERTa model)"),oAr=l(),F(LE.$$.fragment),mPe=l(),Lc=a("h2"),xE=a("a"),kFe=a("span"),F(wL.$$.fragment),rAr=l(),SFe=a("span"),tAr=o("FlaxAutoModelForSeq2SeqLM"),gPe=l(),mr=a("div"),F(AL.$$.fragment),aAr=l(),xc=a("p"),nAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yU=a("a"),sAr=o("from_pretrained()"),lAr=o(" class method or the "),LU=a("a"),iAr=o("from_config()"),dAr=o(` class
method.`),cAr=l(),yL=a("p"),fAr=o("This class cannot be instantiated directly using "),RFe=a("code"),mAr=o("__init__()"),gAr=o(" (throws an error)."),hAr=l(),jt=a("div"),F(LL.$$.fragment),pAr=l(),BFe=a("p"),uAr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),_Ar=l(),$c=a("p"),bAr=o(`Note:
Loading a model from its configuration file does `),PFe=a("strong"),vAr=o("not"),FAr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=a("a"),TAr=o("from_pretrained()"),MAr=o(" to load the model weights."),EAr=l(),F($E.$$.fragment),CAr=l(),jr=a("div"),F(xL.$$.fragment),wAr=l(),IFe=a("p"),AAr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),yAr=l(),mn=a("p"),LAr=o("The model class to instantiate is selected based on the "),qFe=a("code"),xAr=o("model_type"),$Ar=o(` property of the config object (either
passed as an argument or loaded from `),NFe=a("code"),kAr=o("pretrained_model_name_or_path"),SAr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=a("code"),RAr=o("pretrained_model_name_or_path"),BAr=o(":"),PAr=l(),ke=a("ul"),kE=a("li"),DFe=a("strong"),IAr=o("bart"),qAr=o(" \u2014 "),$U=a("a"),NAr=o("FlaxBartForConditionalGeneration"),jAr=o(" (BART model)"),DAr=l(),SE=a("li"),GFe=a("strong"),GAr=o("blenderbot"),OAr=o(" \u2014 "),kU=a("a"),VAr=o("FlaxBlenderbotForConditionalGeneration"),XAr=o(" (Blenderbot model)"),zAr=l(),RE=a("li"),OFe=a("strong"),QAr=o("blenderbot-small"),WAr=o(" \u2014 "),SU=a("a"),HAr=o("FlaxBlenderbotSmallForConditionalGeneration"),UAr=o(" (BlenderbotSmall model)"),JAr=l(),BE=a("li"),VFe=a("strong"),YAr=o("encoder-decoder"),KAr=o(" \u2014 "),RU=a("a"),ZAr=o("FlaxEncoderDecoderModel"),e0r=o(" (Encoder decoder model)"),o0r=l(),PE=a("li"),XFe=a("strong"),r0r=o("marian"),t0r=o(" \u2014 "),BU=a("a"),a0r=o("FlaxMarianMTModel"),n0r=o(" (Marian model)"),s0r=l(),IE=a("li"),zFe=a("strong"),l0r=o("mbart"),i0r=o(" \u2014 "),PU=a("a"),d0r=o("FlaxMBartForConditionalGeneration"),c0r=o(" (mBART model)"),f0r=l(),qE=a("li"),QFe=a("strong"),m0r=o("mt5"),g0r=o(" \u2014 "),IU=a("a"),h0r=o("FlaxMT5ForConditionalGeneration"),p0r=o(" (mT5 model)"),u0r=l(),NE=a("li"),WFe=a("strong"),_0r=o("pegasus"),b0r=o(" \u2014 "),qU=a("a"),v0r=o("FlaxPegasusForConditionalGeneration"),F0r=o(" (Pegasus model)"),T0r=l(),jE=a("li"),HFe=a("strong"),M0r=o("t5"),E0r=o(" \u2014 "),NU=a("a"),C0r=o("FlaxT5ForConditionalGeneration"),w0r=o(" (T5 model)"),A0r=l(),F(DE.$$.fragment),hPe=l(),kc=a("h2"),GE=a("a"),UFe=a("span"),F($L.$$.fragment),y0r=l(),JFe=a("span"),L0r=o("FlaxAutoModelForSequenceClassification"),pPe=l(),gr=a("div"),F(kL.$$.fragment),x0r=l(),Sc=a("p"),$0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jU=a("a"),k0r=o("from_pretrained()"),S0r=o(" class method or the "),DU=a("a"),R0r=o("from_config()"),B0r=o(` class
method.`),P0r=l(),SL=a("p"),I0r=o("This class cannot be instantiated directly using "),YFe=a("code"),q0r=o("__init__()"),N0r=o(" (throws an error)."),j0r=l(),Dt=a("div"),F(RL.$$.fragment),D0r=l(),KFe=a("p"),G0r=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),O0r=l(),Rc=a("p"),V0r=o(`Note:
Loading a model from its configuration file does `),ZFe=a("strong"),X0r=o("not"),z0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),Q0r=o("from_pretrained()"),W0r=o(" to load the model weights."),H0r=l(),F(OE.$$.fragment),U0r=l(),Dr=a("div"),F(BL.$$.fragment),J0r=l(),e6e=a("p"),Y0r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),K0r=l(),gn=a("p"),Z0r=o("The model class to instantiate is selected based on the "),o6e=a("code"),eyr=o("model_type"),oyr=o(` property of the config object (either
passed as an argument or loaded from `),r6e=a("code"),ryr=o("pretrained_model_name_or_path"),tyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=a("code"),ayr=o("pretrained_model_name_or_path"),nyr=o(":"),syr=l(),xe=a("ul"),VE=a("li"),a6e=a("strong"),lyr=o("albert"),iyr=o(" \u2014 "),OU=a("a"),dyr=o("FlaxAlbertForSequenceClassification"),cyr=o(" (ALBERT model)"),fyr=l(),XE=a("li"),n6e=a("strong"),myr=o("bart"),gyr=o(" \u2014 "),VU=a("a"),hyr=o("FlaxBartForSequenceClassification"),pyr=o(" (BART model)"),uyr=l(),zE=a("li"),s6e=a("strong"),_yr=o("bert"),byr=o(" \u2014 "),XU=a("a"),vyr=o("FlaxBertForSequenceClassification"),Fyr=o(" (BERT model)"),Tyr=l(),QE=a("li"),l6e=a("strong"),Myr=o("big_bird"),Eyr=o(" \u2014 "),zU=a("a"),Cyr=o("FlaxBigBirdForSequenceClassification"),wyr=o(" (BigBird model)"),Ayr=l(),WE=a("li"),i6e=a("strong"),yyr=o("distilbert"),Lyr=o(" \u2014 "),QU=a("a"),xyr=o("FlaxDistilBertForSequenceClassification"),$yr=o(" (DistilBERT model)"),kyr=l(),HE=a("li"),d6e=a("strong"),Syr=o("electra"),Ryr=o(" \u2014 "),WU=a("a"),Byr=o("FlaxElectraForSequenceClassification"),Pyr=o(" (ELECTRA model)"),Iyr=l(),UE=a("li"),c6e=a("strong"),qyr=o("mbart"),Nyr=o(" \u2014 "),HU=a("a"),jyr=o("FlaxMBartForSequenceClassification"),Dyr=o(" (mBART model)"),Gyr=l(),JE=a("li"),f6e=a("strong"),Oyr=o("roberta"),Vyr=o(" \u2014 "),UU=a("a"),Xyr=o("FlaxRobertaForSequenceClassification"),zyr=o(" (RoBERTa model)"),Qyr=l(),YE=a("li"),m6e=a("strong"),Wyr=o("roformer"),Hyr=o(" \u2014 "),JU=a("a"),Uyr=o("FlaxRoFormerForSequenceClassification"),Jyr=o(" (RoFormer model)"),Yyr=l(),KE=a("li"),g6e=a("strong"),Kyr=o("xlm-roberta"),Zyr=o(" \u2014 "),YU=a("a"),eLr=o("FlaxXLMRobertaForSequenceClassification"),oLr=o(" (XLM-RoBERTa model)"),rLr=l(),F(ZE.$$.fragment),uPe=l(),Bc=a("h2"),e5=a("a"),h6e=a("span"),F(PL.$$.fragment),tLr=l(),p6e=a("span"),aLr=o("FlaxAutoModelForQuestionAnswering"),_Pe=l(),hr=a("div"),F(IL.$$.fragment),nLr=l(),Pc=a("p"),sLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KU=a("a"),lLr=o("from_pretrained()"),iLr=o(" class method or the "),ZU=a("a"),dLr=o("from_config()"),cLr=o(` class
method.`),fLr=l(),qL=a("p"),mLr=o("This class cannot be instantiated directly using "),u6e=a("code"),gLr=o("__init__()"),hLr=o(" (throws an error)."),pLr=l(),Gt=a("div"),F(NL.$$.fragment),uLr=l(),_6e=a("p"),_Lr=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),bLr=l(),Ic=a("p"),vLr=o(`Note:
Loading a model from its configuration file does `),b6e=a("strong"),FLr=o("not"),TLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=a("a"),MLr=o("from_pretrained()"),ELr=o(" to load the model weights."),CLr=l(),F(o5.$$.fragment),wLr=l(),Gr=a("div"),F(jL.$$.fragment),ALr=l(),v6e=a("p"),yLr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),LLr=l(),hn=a("p"),xLr=o("The model class to instantiate is selected based on the "),F6e=a("code"),$Lr=o("model_type"),kLr=o(` property of the config object (either
passed as an argument or loaded from `),T6e=a("code"),SLr=o("pretrained_model_name_or_path"),RLr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=a("code"),BLr=o("pretrained_model_name_or_path"),PLr=o(":"),ILr=l(),$e=a("ul"),r5=a("li"),E6e=a("strong"),qLr=o("albert"),NLr=o(" \u2014 "),oJ=a("a"),jLr=o("FlaxAlbertForQuestionAnswering"),DLr=o(" (ALBERT model)"),GLr=l(),t5=a("li"),C6e=a("strong"),OLr=o("bart"),VLr=o(" \u2014 "),rJ=a("a"),XLr=o("FlaxBartForQuestionAnswering"),zLr=o(" (BART model)"),QLr=l(),a5=a("li"),w6e=a("strong"),WLr=o("bert"),HLr=o(" \u2014 "),tJ=a("a"),ULr=o("FlaxBertForQuestionAnswering"),JLr=o(" (BERT model)"),YLr=l(),n5=a("li"),A6e=a("strong"),KLr=o("big_bird"),ZLr=o(" \u2014 "),aJ=a("a"),e8r=o("FlaxBigBirdForQuestionAnswering"),o8r=o(" (BigBird model)"),r8r=l(),s5=a("li"),y6e=a("strong"),t8r=o("distilbert"),a8r=o(" \u2014 "),nJ=a("a"),n8r=o("FlaxDistilBertForQuestionAnswering"),s8r=o(" (DistilBERT model)"),l8r=l(),l5=a("li"),L6e=a("strong"),i8r=o("electra"),d8r=o(" \u2014 "),sJ=a("a"),c8r=o("FlaxElectraForQuestionAnswering"),f8r=o(" (ELECTRA model)"),m8r=l(),i5=a("li"),x6e=a("strong"),g8r=o("mbart"),h8r=o(" \u2014 "),lJ=a("a"),p8r=o("FlaxMBartForQuestionAnswering"),u8r=o(" (mBART model)"),_8r=l(),d5=a("li"),$6e=a("strong"),b8r=o("roberta"),v8r=o(" \u2014 "),iJ=a("a"),F8r=o("FlaxRobertaForQuestionAnswering"),T8r=o(" (RoBERTa model)"),M8r=l(),c5=a("li"),k6e=a("strong"),E8r=o("roformer"),C8r=o(" \u2014 "),dJ=a("a"),w8r=o("FlaxRoFormerForQuestionAnswering"),A8r=o(" (RoFormer model)"),y8r=l(),f5=a("li"),S6e=a("strong"),L8r=o("xlm-roberta"),x8r=o(" \u2014 "),cJ=a("a"),$8r=o("FlaxXLMRobertaForQuestionAnswering"),k8r=o(" (XLM-RoBERTa model)"),S8r=l(),F(m5.$$.fragment),bPe=l(),qc=a("h2"),g5=a("a"),R6e=a("span"),F(DL.$$.fragment),R8r=l(),B6e=a("span"),B8r=o("FlaxAutoModelForTokenClassification"),vPe=l(),pr=a("div"),F(GL.$$.fragment),P8r=l(),Nc=a("p"),I8r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fJ=a("a"),q8r=o("from_pretrained()"),N8r=o(" class method or the "),mJ=a("a"),j8r=o("from_config()"),D8r=o(` class
method.`),G8r=l(),OL=a("p"),O8r=o("This class cannot be instantiated directly using "),P6e=a("code"),V8r=o("__init__()"),X8r=o(" (throws an error)."),z8r=l(),Ot=a("div"),F(VL.$$.fragment),Q8r=l(),I6e=a("p"),W8r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),H8r=l(),jc=a("p"),U8r=o(`Note:
Loading a model from its configuration file does `),q6e=a("strong"),J8r=o("not"),Y8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=a("a"),K8r=o("from_pretrained()"),Z8r=o(" to load the model weights."),exr=l(),F(h5.$$.fragment),oxr=l(),Or=a("div"),F(XL.$$.fragment),rxr=l(),N6e=a("p"),txr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),axr=l(),pn=a("p"),nxr=o("The model class to instantiate is selected based on the "),j6e=a("code"),sxr=o("model_type"),lxr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),ixr=o("pretrained_model_name_or_path"),dxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),cxr=o("pretrained_model_name_or_path"),fxr=o(":"),mxr=l(),je=a("ul"),p5=a("li"),O6e=a("strong"),gxr=o("albert"),hxr=o(" \u2014 "),hJ=a("a"),pxr=o("FlaxAlbertForTokenClassification"),uxr=o(" (ALBERT model)"),_xr=l(),u5=a("li"),V6e=a("strong"),bxr=o("bert"),vxr=o(" \u2014 "),pJ=a("a"),Fxr=o("FlaxBertForTokenClassification"),Txr=o(" (BERT model)"),Mxr=l(),_5=a("li"),X6e=a("strong"),Exr=o("big_bird"),Cxr=o(" \u2014 "),uJ=a("a"),wxr=o("FlaxBigBirdForTokenClassification"),Axr=o(" (BigBird model)"),yxr=l(),b5=a("li"),z6e=a("strong"),Lxr=o("distilbert"),xxr=o(" \u2014 "),_J=a("a"),$xr=o("FlaxDistilBertForTokenClassification"),kxr=o(" (DistilBERT model)"),Sxr=l(),v5=a("li"),Q6e=a("strong"),Rxr=o("electra"),Bxr=o(" \u2014 "),bJ=a("a"),Pxr=o("FlaxElectraForTokenClassification"),Ixr=o(" (ELECTRA model)"),qxr=l(),F5=a("li"),W6e=a("strong"),Nxr=o("roberta"),jxr=o(" \u2014 "),vJ=a("a"),Dxr=o("FlaxRobertaForTokenClassification"),Gxr=o(" (RoBERTa model)"),Oxr=l(),T5=a("li"),H6e=a("strong"),Vxr=o("roformer"),Xxr=o(" \u2014 "),FJ=a("a"),zxr=o("FlaxRoFormerForTokenClassification"),Qxr=o(" (RoFormer model)"),Wxr=l(),M5=a("li"),U6e=a("strong"),Hxr=o("xlm-roberta"),Uxr=o(" \u2014 "),TJ=a("a"),Jxr=o("FlaxXLMRobertaForTokenClassification"),Yxr=o(" (XLM-RoBERTa model)"),Kxr=l(),F(E5.$$.fragment),FPe=l(),Dc=a("h2"),C5=a("a"),J6e=a("span"),F(zL.$$.fragment),Zxr=l(),Y6e=a("span"),e$r=o("FlaxAutoModelForMultipleChoice"),TPe=l(),ur=a("div"),F(QL.$$.fragment),o$r=l(),Gc=a("p"),r$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MJ=a("a"),t$r=o("from_pretrained()"),a$r=o(" class method or the "),EJ=a("a"),n$r=o("from_config()"),s$r=o(` class
method.`),l$r=l(),WL=a("p"),i$r=o("This class cannot be instantiated directly using "),K6e=a("code"),d$r=o("__init__()"),c$r=o(" (throws an error)."),f$r=l(),Vt=a("div"),F(HL.$$.fragment),m$r=l(),Z6e=a("p"),g$r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),h$r=l(),Oc=a("p"),p$r=o(`Note:
Loading a model from its configuration file does `),eTe=a("strong"),u$r=o("not"),_$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=a("a"),b$r=o("from_pretrained()"),v$r=o(" to load the model weights."),F$r=l(),F(w5.$$.fragment),T$r=l(),Vr=a("div"),F(UL.$$.fragment),M$r=l(),oTe=a("p"),E$r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),C$r=l(),un=a("p"),w$r=o("The model class to instantiate is selected based on the "),rTe=a("code"),A$r=o("model_type"),y$r=o(` property of the config object (either
passed as an argument or loaded from `),tTe=a("code"),L$r=o("pretrained_model_name_or_path"),x$r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=a("code"),$$r=o("pretrained_model_name_or_path"),k$r=o(":"),S$r=l(),De=a("ul"),A5=a("li"),nTe=a("strong"),R$r=o("albert"),B$r=o(" \u2014 "),wJ=a("a"),P$r=o("FlaxAlbertForMultipleChoice"),I$r=o(" (ALBERT model)"),q$r=l(),y5=a("li"),sTe=a("strong"),N$r=o("bert"),j$r=o(" \u2014 "),AJ=a("a"),D$r=o("FlaxBertForMultipleChoice"),G$r=o(" (BERT model)"),O$r=l(),L5=a("li"),lTe=a("strong"),V$r=o("big_bird"),X$r=o(" \u2014 "),yJ=a("a"),z$r=o("FlaxBigBirdForMultipleChoice"),Q$r=o(" (BigBird model)"),W$r=l(),x5=a("li"),iTe=a("strong"),H$r=o("distilbert"),U$r=o(" \u2014 "),LJ=a("a"),J$r=o("FlaxDistilBertForMultipleChoice"),Y$r=o(" (DistilBERT model)"),K$r=l(),$5=a("li"),dTe=a("strong"),Z$r=o("electra"),ekr=o(" \u2014 "),xJ=a("a"),okr=o("FlaxElectraForMultipleChoice"),rkr=o(" (ELECTRA model)"),tkr=l(),k5=a("li"),cTe=a("strong"),akr=o("roberta"),nkr=o(" \u2014 "),$J=a("a"),skr=o("FlaxRobertaForMultipleChoice"),lkr=o(" (RoBERTa model)"),ikr=l(),S5=a("li"),fTe=a("strong"),dkr=o("roformer"),ckr=o(" \u2014 "),kJ=a("a"),fkr=o("FlaxRoFormerForMultipleChoice"),mkr=o(" (RoFormer model)"),gkr=l(),R5=a("li"),mTe=a("strong"),hkr=o("xlm-roberta"),pkr=o(" \u2014 "),SJ=a("a"),ukr=o("FlaxXLMRobertaForMultipleChoice"),_kr=o(" (XLM-RoBERTa model)"),bkr=l(),F(B5.$$.fragment),MPe=l(),Vc=a("h2"),P5=a("a"),gTe=a("span"),F(JL.$$.fragment),vkr=l(),hTe=a("span"),Fkr=o("FlaxAutoModelForNextSentencePrediction"),EPe=l(),_r=a("div"),F(YL.$$.fragment),Tkr=l(),Xc=a("p"),Mkr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RJ=a("a"),Ekr=o("from_pretrained()"),Ckr=o(" class method or the "),BJ=a("a"),wkr=o("from_config()"),Akr=o(` class
method.`),ykr=l(),KL=a("p"),Lkr=o("This class cannot be instantiated directly using "),pTe=a("code"),xkr=o("__init__()"),$kr=o(" (throws an error)."),kkr=l(),Xt=a("div"),F(ZL.$$.fragment),Skr=l(),uTe=a("p"),Rkr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Bkr=l(),zc=a("p"),Pkr=o(`Note:
Loading a model from its configuration file does `),_Te=a("strong"),Ikr=o("not"),qkr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=a("a"),Nkr=o("from_pretrained()"),jkr=o(" to load the model weights."),Dkr=l(),F(I5.$$.fragment),Gkr=l(),Xr=a("div"),F(e8.$$.fragment),Okr=l(),bTe=a("p"),Vkr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Xkr=l(),_n=a("p"),zkr=o("The model class to instantiate is selected based on the "),vTe=a("code"),Qkr=o("model_type"),Wkr=o(` property of the config object (either
passed as an argument or loaded from `),FTe=a("code"),Hkr=o("pretrained_model_name_or_path"),Ukr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=a("code"),Jkr=o("pretrained_model_name_or_path"),Ykr=o(":"),Kkr=l(),MTe=a("ul"),q5=a("li"),ETe=a("strong"),Zkr=o("bert"),eSr=o(" \u2014 "),IJ=a("a"),oSr=o("FlaxBertForNextSentencePrediction"),rSr=o(" (BERT model)"),tSr=l(),F(N5.$$.fragment),CPe=l(),Qc=a("h2"),j5=a("a"),CTe=a("span"),F(o8.$$.fragment),aSr=l(),wTe=a("span"),nSr=o("FlaxAutoModelForImageClassification"),wPe=l(),br=a("div"),F(r8.$$.fragment),sSr=l(),Wc=a("p"),lSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qJ=a("a"),iSr=o("from_pretrained()"),dSr=o(" class method or the "),NJ=a("a"),cSr=o("from_config()"),fSr=o(` class
method.`),mSr=l(),t8=a("p"),gSr=o("This class cannot be instantiated directly using "),ATe=a("code"),hSr=o("__init__()"),pSr=o(" (throws an error)."),uSr=l(),zt=a("div"),F(a8.$$.fragment),_Sr=l(),yTe=a("p"),bSr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),vSr=l(),Hc=a("p"),FSr=o(`Note:
Loading a model from its configuration file does `),LTe=a("strong"),TSr=o("not"),MSr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),ESr=o("from_pretrained()"),CSr=o(" to load the model weights."),wSr=l(),F(D5.$$.fragment),ASr=l(),zr=a("div"),F(n8.$$.fragment),ySr=l(),xTe=a("p"),LSr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),xSr=l(),bn=a("p"),$Sr=o("The model class to instantiate is selected based on the "),$Te=a("code"),kSr=o("model_type"),SSr=o(` property of the config object (either
passed as an argument or loaded from `),kTe=a("code"),RSr=o("pretrained_model_name_or_path"),BSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=a("code"),PSr=o("pretrained_model_name_or_path"),ISr=o(":"),qSr=l(),s8=a("ul"),G5=a("li"),RTe=a("strong"),NSr=o("beit"),jSr=o(" \u2014 "),DJ=a("a"),DSr=o("FlaxBeitForImageClassification"),GSr=o(" (BEiT model)"),OSr=l(),O5=a("li"),BTe=a("strong"),VSr=o("vit"),XSr=o(" \u2014 "),GJ=a("a"),zSr=o("FlaxViTForImageClassification"),QSr=o(" (ViT model)"),WSr=l(),F(V5.$$.fragment),APe=l(),Uc=a("h2"),X5=a("a"),PTe=a("span"),F(l8.$$.fragment),HSr=l(),ITe=a("span"),USr=o("FlaxAutoModelForVision2Seq"),yPe=l(),vr=a("div"),F(i8.$$.fragment),JSr=l(),Jc=a("p"),YSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OJ=a("a"),KSr=o("from_pretrained()"),ZSr=o(" class method or the "),VJ=a("a"),eRr=o("from_config()"),oRr=o(` class
method.`),rRr=l(),d8=a("p"),tRr=o("This class cannot be instantiated directly using "),qTe=a("code"),aRr=o("__init__()"),nRr=o(" (throws an error)."),sRr=l(),Qt=a("div"),F(c8.$$.fragment),lRr=l(),NTe=a("p"),iRr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),dRr=l(),Yc=a("p"),cRr=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),fRr=o("not"),mRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=a("a"),gRr=o("from_pretrained()"),hRr=o(" to load the model weights."),pRr=l(),F(z5.$$.fragment),uRr=l(),Qr=a("div"),F(f8.$$.fragment),_Rr=l(),DTe=a("p"),bRr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),vRr=l(),vn=a("p"),FRr=o("The model class to instantiate is selected based on the "),GTe=a("code"),TRr=o("model_type"),MRr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),ERr=o("pretrained_model_name_or_path"),CRr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),wRr=o("pretrained_model_name_or_path"),ARr=o(":"),yRr=l(),XTe=a("ul"),Q5=a("li"),zTe=a("strong"),LRr=o("vision-encoder-decoder"),xRr=o(" \u2014 "),zJ=a("a"),$Rr=o("FlaxVisionEncoderDecoderModel"),kRr=o(" (Vision Encoder decoder model)"),SRr=l(),F(W5.$$.fragment),this.h()},l(f){const _=sMt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var m8=s(p);m=n(m8,"A",{id:!0,class:!0,href:!0});var QTe=s(m);u=n(QTe,"SPAN",{});var WTe=s(u);T(d.$$.fragment,WTe),WTe.forEach(t),QTe.forEach(t),h=i(m8),Fo=n(m8,"SPAN",{});var HTe=s(Fo);oi=r(HTe,"Auto Classes"),HTe.forEach(t),m8.forEach(t),of=i(f),Yr=n(f,"P",{});var g8=s(Yr);ri=r(g8,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),ti=n(g8,"CODE",{});var UTe=s(ti);dw=r(UTe,"from_pretrained()"),UTe.forEach(t),rf=r(g8,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),g8.forEach(t),Ie=i(f),Oe=n(f,"P",{});var Fn=s(Oe);ai=r(Fn,"Instantiating one of "),Tn=n(Fn,"A",{href:!0});var JTe=s(Tn);cw=r(JTe,"AutoConfig"),JTe.forEach(t),Mn=r(Fn,", "),En=n(Fn,"A",{href:!0});var YTe=s(En);fw=r(YTe,"AutoModel"),YTe.forEach(t),ni=r(Fn,`, and
`),Cn=n(Fn,"A",{href:!0});var KTe=s(Cn);mw=r(KTe,"AutoTokenizer"),KTe.forEach(t),si=r(Fn," will directly create a class of the relevant architecture. For instance"),Fn.forEach(t),tf=i(f),T(ba.$$.fragment,f),Ve=i(f),Ae=n(f,"P",{});var h8=s(Ae);Cx=r(h8,"will create a model that is an instance of "),li=n(h8,"A",{href:!0});var ZTe=s(li);wx=r(ZTe,"BertModel"),ZTe.forEach(t),Ax=r(h8,"."),h8.forEach(t),To=i(f),va=n(f,"P",{});var p8=s(va);yx=r(p8,"There is one class of "),af=n(p8,"CODE",{});var e7e=s(af);Lx=r(e7e,"AutoModel"),e7e.forEach(t),Rqe=r(p8," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),p8.forEach(t),yRe=i(f),ii=n(f,"H2",{class:!0});var u8=s(ii);nf=n(u8,"A",{id:!0,class:!0,href:!0});var o7e=s(nf);IK=n(o7e,"SPAN",{});var r7e=s(IK);T(gw.$$.fragment,r7e),r7e.forEach(t),o7e.forEach(t),Bqe=i(u8),qK=n(u8,"SPAN",{});var t7e=s(qK);Pqe=r(t7e,"Extending the Auto Classes"),t7e.forEach(t),u8.forEach(t),LRe=i(f),wn=n(f,"P",{});var Kc=s(wn);Iqe=r(Kc,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),NK=n(Kc,"CODE",{});var a7e=s(NK);qqe=r(a7e,"NewModel"),a7e.forEach(t),Nqe=r(Kc,", make sure you have a "),jK=n(Kc,"CODE",{});var n7e=s(jK);jqe=r(n7e,"NewModelConfig"),n7e.forEach(t),Dqe=r(Kc,` then you can add those to the auto
classes like this:`),Kc.forEach(t),xRe=i(f),T(hw.$$.fragment,f),$Re=i(f),xx=n(f,"P",{});var s7e=s(xx);Gqe=r(s7e,"You will then be able to use the auto classes like you would usually do!"),s7e.forEach(t),kRe=i(f),T(sf.$$.fragment,f),SRe=i(f),di=n(f,"H2",{class:!0});var _8=s(di);lf=n(_8,"A",{id:!0,class:!0,href:!0});var l7e=s(lf);DK=n(l7e,"SPAN",{});var i7e=s(DK);T(pw.$$.fragment,i7e),i7e.forEach(t),l7e.forEach(t),Oqe=i(_8),GK=n(_8,"SPAN",{});var d7e=s(GK);Vqe=r(d7e,"AutoConfig"),d7e.forEach(t),_8.forEach(t),RRe=i(f),Mo=n(f,"DIV",{class:!0});var Ur=s(Mo);T(uw.$$.fragment,Ur),Xqe=i(Ur),_w=n(Ur,"P",{});var b8=s(_w);zqe=r(b8,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),$x=n(b8,"A",{href:!0});var c7e=s($x);Qqe=r(c7e,"from_pretrained()"),c7e.forEach(t),Wqe=r(b8," class method."),b8.forEach(t),Hqe=i(Ur),bw=n(Ur,"P",{});var v8=s(bw);Uqe=r(v8,"This class cannot be instantiated directly using "),OK=n(v8,"CODE",{});var f7e=s(OK);Jqe=r(f7e,"__init__()"),f7e.forEach(t),Yqe=r(v8," (throws an error)."),v8.forEach(t),Kqe=i(Ur),Fr=n(Ur,"DIV",{class:!0});var Jr=s(Fr);T(vw.$$.fragment,Jr),Zqe=i(Jr),VK=n(Jr,"P",{});var m7e=s(VK);eNe=r(m7e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),m7e.forEach(t),oNe=i(Jr),ci=n(Jr,"P",{});var Zc=s(ci);rNe=r(Zc,"The configuration class to instantiate is selected based on the "),XK=n(Zc,"CODE",{});var g7e=s(XK);tNe=r(g7e,"model_type"),g7e.forEach(t),aNe=r(Zc,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),zK=n(Zc,"CODE",{});var h7e=s(zK);nNe=r(h7e,"pretrained_model_name_or_path"),h7e.forEach(t),sNe=r(Zc,":"),Zc.forEach(t),lNe=i(Jr),y=n(Jr,"UL",{});var L=s(y);df=n(L,"LI",{});var H5=s(df);QK=n(H5,"STRONG",{});var p7e=s(QK);iNe=r(p7e,"albert"),p7e.forEach(t),dNe=r(H5," \u2014 "),kx=n(H5,"A",{href:!0});var u7e=s(kx);cNe=r(u7e,"AlbertConfig"),u7e.forEach(t),fNe=r(H5," (ALBERT model)"),H5.forEach(t),mNe=i(L),cf=n(L,"LI",{});var U5=s(cf);WK=n(U5,"STRONG",{});var _7e=s(WK);gNe=r(_7e,"bart"),_7e.forEach(t),hNe=r(U5," \u2014 "),Sx=n(U5,"A",{href:!0});var b7e=s(Sx);pNe=r(b7e,"BartConfig"),b7e.forEach(t),uNe=r(U5," (BART model)"),U5.forEach(t),_Ne=i(L),ff=n(L,"LI",{});var J5=s(ff);HK=n(J5,"STRONG",{});var v7e=s(HK);bNe=r(v7e,"beit"),v7e.forEach(t),vNe=r(J5," \u2014 "),Rx=n(J5,"A",{href:!0});var F7e=s(Rx);FNe=r(F7e,"BeitConfig"),F7e.forEach(t),TNe=r(J5," (BEiT model)"),J5.forEach(t),MNe=i(L),mf=n(L,"LI",{});var Y5=s(mf);UK=n(Y5,"STRONG",{});var T7e=s(UK);ENe=r(T7e,"bert"),T7e.forEach(t),CNe=r(Y5," \u2014 "),Bx=n(Y5,"A",{href:!0});var M7e=s(Bx);wNe=r(M7e,"BertConfig"),M7e.forEach(t),ANe=r(Y5," (BERT model)"),Y5.forEach(t),yNe=i(L),gf=n(L,"LI",{});var K5=s(gf);JK=n(K5,"STRONG",{});var E7e=s(JK);LNe=r(E7e,"bert-generation"),E7e.forEach(t),xNe=r(K5," \u2014 "),Px=n(K5,"A",{href:!0});var C7e=s(Px);$Ne=r(C7e,"BertGenerationConfig"),C7e.forEach(t),kNe=r(K5," (Bert Generation model)"),K5.forEach(t),SNe=i(L),hf=n(L,"LI",{});var Z5=s(hf);YK=n(Z5,"STRONG",{});var w7e=s(YK);RNe=r(w7e,"big_bird"),w7e.forEach(t),BNe=r(Z5," \u2014 "),Ix=n(Z5,"A",{href:!0});var A7e=s(Ix);PNe=r(A7e,"BigBirdConfig"),A7e.forEach(t),INe=r(Z5," (BigBird model)"),Z5.forEach(t),qNe=i(L),pf=n(L,"LI",{});var eC=s(pf);KK=n(eC,"STRONG",{});var y7e=s(KK);NNe=r(y7e,"bigbird_pegasus"),y7e.forEach(t),jNe=r(eC," \u2014 "),qx=n(eC,"A",{href:!0});var L7e=s(qx);DNe=r(L7e,"BigBirdPegasusConfig"),L7e.forEach(t),GNe=r(eC," (BigBirdPegasus model)"),eC.forEach(t),ONe=i(L),uf=n(L,"LI",{});var oC=s(uf);ZK=n(oC,"STRONG",{});var x7e=s(ZK);VNe=r(x7e,"blenderbot"),x7e.forEach(t),XNe=r(oC," \u2014 "),Nx=n(oC,"A",{href:!0});var $7e=s(Nx);zNe=r($7e,"BlenderbotConfig"),$7e.forEach(t),QNe=r(oC," (Blenderbot model)"),oC.forEach(t),WNe=i(L),_f=n(L,"LI",{});var rC=s(_f);eZ=n(rC,"STRONG",{});var k7e=s(eZ);HNe=r(k7e,"blenderbot-small"),k7e.forEach(t),UNe=r(rC," \u2014 "),jx=n(rC,"A",{href:!0});var S7e=s(jx);JNe=r(S7e,"BlenderbotSmallConfig"),S7e.forEach(t),YNe=r(rC," (BlenderbotSmall model)"),rC.forEach(t),KNe=i(L),bf=n(L,"LI",{});var tC=s(bf);oZ=n(tC,"STRONG",{});var R7e=s(oZ);ZNe=r(R7e,"camembert"),R7e.forEach(t),eje=r(tC," \u2014 "),Dx=n(tC,"A",{href:!0});var B7e=s(Dx);oje=r(B7e,"CamembertConfig"),B7e.forEach(t),rje=r(tC," (CamemBERT model)"),tC.forEach(t),tje=i(L),vf=n(L,"LI",{});var aC=s(vf);rZ=n(aC,"STRONG",{});var P7e=s(rZ);aje=r(P7e,"canine"),P7e.forEach(t),nje=r(aC," \u2014 "),Gx=n(aC,"A",{href:!0});var I7e=s(Gx);sje=r(I7e,"CanineConfig"),I7e.forEach(t),lje=r(aC," (Canine model)"),aC.forEach(t),ije=i(L),Ff=n(L,"LI",{});var nC=s(Ff);tZ=n(nC,"STRONG",{});var q7e=s(tZ);dje=r(q7e,"clip"),q7e.forEach(t),cje=r(nC," \u2014 "),Ox=n(nC,"A",{href:!0});var N7e=s(Ox);fje=r(N7e,"CLIPConfig"),N7e.forEach(t),mje=r(nC," (CLIP model)"),nC.forEach(t),gje=i(L),Tf=n(L,"LI",{});var sC=s(Tf);aZ=n(sC,"STRONG",{});var j7e=s(aZ);hje=r(j7e,"convbert"),j7e.forEach(t),pje=r(sC," \u2014 "),Vx=n(sC,"A",{href:!0});var D7e=s(Vx);uje=r(D7e,"ConvBertConfig"),D7e.forEach(t),_je=r(sC," (ConvBERT model)"),sC.forEach(t),bje=i(L),Mf=n(L,"LI",{});var lC=s(Mf);nZ=n(lC,"STRONG",{});var G7e=s(nZ);vje=r(G7e,"convnext"),G7e.forEach(t),Fje=r(lC," \u2014 "),Xx=n(lC,"A",{href:!0});var O7e=s(Xx);Tje=r(O7e,"ConvNextConfig"),O7e.forEach(t),Mje=r(lC," (ConvNext model)"),lC.forEach(t),Eje=i(L),Ef=n(L,"LI",{});var iC=s(Ef);sZ=n(iC,"STRONG",{});var V7e=s(sZ);Cje=r(V7e,"ctrl"),V7e.forEach(t),wje=r(iC," \u2014 "),zx=n(iC,"A",{href:!0});var X7e=s(zx);Aje=r(X7e,"CTRLConfig"),X7e.forEach(t),yje=r(iC," (CTRL model)"),iC.forEach(t),Lje=i(L),Cf=n(L,"LI",{});var dC=s(Cf);lZ=n(dC,"STRONG",{});var z7e=s(lZ);xje=r(z7e,"data2vec-audio"),z7e.forEach(t),$je=r(dC," \u2014 "),Qx=n(dC,"A",{href:!0});var Q7e=s(Qx);kje=r(Q7e,"Data2VecAudioConfig"),Q7e.forEach(t),Sje=r(dC," (Data2VecAudio model)"),dC.forEach(t),Rje=i(L),wf=n(L,"LI",{});var cC=s(wf);iZ=n(cC,"STRONG",{});var W7e=s(iZ);Bje=r(W7e,"data2vec-text"),W7e.forEach(t),Pje=r(cC," \u2014 "),Wx=n(cC,"A",{href:!0});var H7e=s(Wx);Ije=r(H7e,"Data2VecTextConfig"),H7e.forEach(t),qje=r(cC," (Data2VecText model)"),cC.forEach(t),Nje=i(L),Af=n(L,"LI",{});var fC=s(Af);dZ=n(fC,"STRONG",{});var U7e=s(dZ);jje=r(U7e,"data2vec-vision"),U7e.forEach(t),Dje=r(fC," \u2014 "),Hx=n(fC,"A",{href:!0});var J7e=s(Hx);Gje=r(J7e,"Data2VecVisionConfig"),J7e.forEach(t),Oje=r(fC," (Data2VecVision model)"),fC.forEach(t),Vje=i(L),yf=n(L,"LI",{});var mC=s(yf);cZ=n(mC,"STRONG",{});var Y7e=s(cZ);Xje=r(Y7e,"deberta"),Y7e.forEach(t),zje=r(mC," \u2014 "),Ux=n(mC,"A",{href:!0});var K7e=s(Ux);Qje=r(K7e,"DebertaConfig"),K7e.forEach(t),Wje=r(mC," (DeBERTa model)"),mC.forEach(t),Hje=i(L),Lf=n(L,"LI",{});var gC=s(Lf);fZ=n(gC,"STRONG",{});var Z7e=s(fZ);Uje=r(Z7e,"deberta-v2"),Z7e.forEach(t),Jje=r(gC," \u2014 "),Jx=n(gC,"A",{href:!0});var e9e=s(Jx);Yje=r(e9e,"DebertaV2Config"),e9e.forEach(t),Kje=r(gC," (DeBERTa-v2 model)"),gC.forEach(t),Zje=i(L),xf=n(L,"LI",{});var hC=s(xf);mZ=n(hC,"STRONG",{});var o9e=s(mZ);eDe=r(o9e,"decision_transformer"),o9e.forEach(t),oDe=r(hC," \u2014 "),Yx=n(hC,"A",{href:!0});var r9e=s(Yx);rDe=r(r9e,"DecisionTransformerConfig"),r9e.forEach(t),tDe=r(hC," (Decision Transformer model)"),hC.forEach(t),aDe=i(L),$f=n(L,"LI",{});var pC=s($f);gZ=n(pC,"STRONG",{});var t9e=s(gZ);nDe=r(t9e,"deit"),t9e.forEach(t),sDe=r(pC," \u2014 "),Kx=n(pC,"A",{href:!0});var a9e=s(Kx);lDe=r(a9e,"DeiTConfig"),a9e.forEach(t),iDe=r(pC," (DeiT model)"),pC.forEach(t),dDe=i(L),kf=n(L,"LI",{});var n9e=s(kf);hZ=n(n9e,"STRONG",{});var BRr=s(hZ);cDe=r(BRr,"detr"),BRr.forEach(t),fDe=r(n9e," \u2014 "),Zx=n(n9e,"A",{href:!0});var PRr=s(Zx);mDe=r(PRr,"DetrConfig"),PRr.forEach(t),gDe=r(n9e," (DETR model)"),n9e.forEach(t),hDe=i(L),Sf=n(L,"LI",{});var s9e=s(Sf);pZ=n(s9e,"STRONG",{});var IRr=s(pZ);pDe=r(IRr,"distilbert"),IRr.forEach(t),uDe=r(s9e," \u2014 "),e$=n(s9e,"A",{href:!0});var qRr=s(e$);_De=r(qRr,"DistilBertConfig"),qRr.forEach(t),bDe=r(s9e," (DistilBERT model)"),s9e.forEach(t),vDe=i(L),Rf=n(L,"LI",{});var l9e=s(Rf);uZ=n(l9e,"STRONG",{});var NRr=s(uZ);FDe=r(NRr,"dpr"),NRr.forEach(t),TDe=r(l9e," \u2014 "),o$=n(l9e,"A",{href:!0});var jRr=s(o$);MDe=r(jRr,"DPRConfig"),jRr.forEach(t),EDe=r(l9e," (DPR model)"),l9e.forEach(t),CDe=i(L),Bf=n(L,"LI",{});var i9e=s(Bf);_Z=n(i9e,"STRONG",{});var DRr=s(_Z);wDe=r(DRr,"dpt"),DRr.forEach(t),ADe=r(i9e," \u2014 "),r$=n(i9e,"A",{href:!0});var GRr=s(r$);yDe=r(GRr,"DPTConfig"),GRr.forEach(t),LDe=r(i9e," (DPT model)"),i9e.forEach(t),xDe=i(L),Pf=n(L,"LI",{});var d9e=s(Pf);bZ=n(d9e,"STRONG",{});var ORr=s(bZ);$De=r(ORr,"electra"),ORr.forEach(t),kDe=r(d9e," \u2014 "),t$=n(d9e,"A",{href:!0});var VRr=s(t$);SDe=r(VRr,"ElectraConfig"),VRr.forEach(t),RDe=r(d9e," (ELECTRA model)"),d9e.forEach(t),BDe=i(L),If=n(L,"LI",{});var c9e=s(If);vZ=n(c9e,"STRONG",{});var XRr=s(vZ);PDe=r(XRr,"encoder-decoder"),XRr.forEach(t),IDe=r(c9e," \u2014 "),a$=n(c9e,"A",{href:!0});var zRr=s(a$);qDe=r(zRr,"EncoderDecoderConfig"),zRr.forEach(t),NDe=r(c9e," (Encoder decoder model)"),c9e.forEach(t),jDe=i(L),qf=n(L,"LI",{});var f9e=s(qf);FZ=n(f9e,"STRONG",{});var QRr=s(FZ);DDe=r(QRr,"flaubert"),QRr.forEach(t),GDe=r(f9e," \u2014 "),n$=n(f9e,"A",{href:!0});var WRr=s(n$);ODe=r(WRr,"FlaubertConfig"),WRr.forEach(t),VDe=r(f9e," (FlauBERT model)"),f9e.forEach(t),XDe=i(L),Nf=n(L,"LI",{});var m9e=s(Nf);TZ=n(m9e,"STRONG",{});var HRr=s(TZ);zDe=r(HRr,"fnet"),HRr.forEach(t),QDe=r(m9e," \u2014 "),s$=n(m9e,"A",{href:!0});var URr=s(s$);WDe=r(URr,"FNetConfig"),URr.forEach(t),HDe=r(m9e," (FNet model)"),m9e.forEach(t),UDe=i(L),jf=n(L,"LI",{});var g9e=s(jf);MZ=n(g9e,"STRONG",{});var JRr=s(MZ);JDe=r(JRr,"fsmt"),JRr.forEach(t),YDe=r(g9e," \u2014 "),l$=n(g9e,"A",{href:!0});var YRr=s(l$);KDe=r(YRr,"FSMTConfig"),YRr.forEach(t),ZDe=r(g9e," (FairSeq Machine-Translation model)"),g9e.forEach(t),eGe=i(L),Df=n(L,"LI",{});var h9e=s(Df);EZ=n(h9e,"STRONG",{});var KRr=s(EZ);oGe=r(KRr,"funnel"),KRr.forEach(t),rGe=r(h9e," \u2014 "),i$=n(h9e,"A",{href:!0});var ZRr=s(i$);tGe=r(ZRr,"FunnelConfig"),ZRr.forEach(t),aGe=r(h9e," (Funnel Transformer model)"),h9e.forEach(t),nGe=i(L),Gf=n(L,"LI",{});var p9e=s(Gf);CZ=n(p9e,"STRONG",{});var eBr=s(CZ);sGe=r(eBr,"glpn"),eBr.forEach(t),lGe=r(p9e," \u2014 "),d$=n(p9e,"A",{href:!0});var oBr=s(d$);iGe=r(oBr,"GLPNConfig"),oBr.forEach(t),dGe=r(p9e," (GLPN model)"),p9e.forEach(t),cGe=i(L),Of=n(L,"LI",{});var u9e=s(Of);wZ=n(u9e,"STRONG",{});var rBr=s(wZ);fGe=r(rBr,"gpt2"),rBr.forEach(t),mGe=r(u9e," \u2014 "),c$=n(u9e,"A",{href:!0});var tBr=s(c$);gGe=r(tBr,"GPT2Config"),tBr.forEach(t),hGe=r(u9e," (OpenAI GPT-2 model)"),u9e.forEach(t),pGe=i(L),Vf=n(L,"LI",{});var _9e=s(Vf);AZ=n(_9e,"STRONG",{});var aBr=s(AZ);uGe=r(aBr,"gpt_neo"),aBr.forEach(t),_Ge=r(_9e," \u2014 "),f$=n(_9e,"A",{href:!0});var nBr=s(f$);bGe=r(nBr,"GPTNeoConfig"),nBr.forEach(t),vGe=r(_9e," (GPT Neo model)"),_9e.forEach(t),FGe=i(L),Xf=n(L,"LI",{});var b9e=s(Xf);yZ=n(b9e,"STRONG",{});var sBr=s(yZ);TGe=r(sBr,"gptj"),sBr.forEach(t),MGe=r(b9e," \u2014 "),m$=n(b9e,"A",{href:!0});var lBr=s(m$);EGe=r(lBr,"GPTJConfig"),lBr.forEach(t),CGe=r(b9e," (GPT-J model)"),b9e.forEach(t),wGe=i(L),zf=n(L,"LI",{});var v9e=s(zf);LZ=n(v9e,"STRONG",{});var iBr=s(LZ);AGe=r(iBr,"hubert"),iBr.forEach(t),yGe=r(v9e," \u2014 "),g$=n(v9e,"A",{href:!0});var dBr=s(g$);LGe=r(dBr,"HubertConfig"),dBr.forEach(t),xGe=r(v9e," (Hubert model)"),v9e.forEach(t),$Ge=i(L),Qf=n(L,"LI",{});var F9e=s(Qf);xZ=n(F9e,"STRONG",{});var cBr=s(xZ);kGe=r(cBr,"ibert"),cBr.forEach(t),SGe=r(F9e," \u2014 "),h$=n(F9e,"A",{href:!0});var fBr=s(h$);RGe=r(fBr,"IBertConfig"),fBr.forEach(t),BGe=r(F9e," (I-BERT model)"),F9e.forEach(t),PGe=i(L),Wf=n(L,"LI",{});var T9e=s(Wf);$Z=n(T9e,"STRONG",{});var mBr=s($Z);IGe=r(mBr,"imagegpt"),mBr.forEach(t),qGe=r(T9e," \u2014 "),p$=n(T9e,"A",{href:!0});var gBr=s(p$);NGe=r(gBr,"ImageGPTConfig"),gBr.forEach(t),jGe=r(T9e," (ImageGPT model)"),T9e.forEach(t),DGe=i(L),Hf=n(L,"LI",{});var M9e=s(Hf);kZ=n(M9e,"STRONG",{});var hBr=s(kZ);GGe=r(hBr,"layoutlm"),hBr.forEach(t),OGe=r(M9e," \u2014 "),u$=n(M9e,"A",{href:!0});var pBr=s(u$);VGe=r(pBr,"LayoutLMConfig"),pBr.forEach(t),XGe=r(M9e," (LayoutLM model)"),M9e.forEach(t),zGe=i(L),Uf=n(L,"LI",{});var E9e=s(Uf);SZ=n(E9e,"STRONG",{});var uBr=s(SZ);QGe=r(uBr,"layoutlmv2"),uBr.forEach(t),WGe=r(E9e," \u2014 "),_$=n(E9e,"A",{href:!0});var _Br=s(_$);HGe=r(_Br,"LayoutLMv2Config"),_Br.forEach(t),UGe=r(E9e," (LayoutLMv2 model)"),E9e.forEach(t),JGe=i(L),Jf=n(L,"LI",{});var C9e=s(Jf);RZ=n(C9e,"STRONG",{});var bBr=s(RZ);YGe=r(bBr,"led"),bBr.forEach(t),KGe=r(C9e," \u2014 "),b$=n(C9e,"A",{href:!0});var vBr=s(b$);ZGe=r(vBr,"LEDConfig"),vBr.forEach(t),eOe=r(C9e," (LED model)"),C9e.forEach(t),oOe=i(L),Yf=n(L,"LI",{});var w9e=s(Yf);BZ=n(w9e,"STRONG",{});var FBr=s(BZ);rOe=r(FBr,"longformer"),FBr.forEach(t),tOe=r(w9e," \u2014 "),v$=n(w9e,"A",{href:!0});var TBr=s(v$);aOe=r(TBr,"LongformerConfig"),TBr.forEach(t),nOe=r(w9e," (Longformer model)"),w9e.forEach(t),sOe=i(L),Kf=n(L,"LI",{});var A9e=s(Kf);PZ=n(A9e,"STRONG",{});var MBr=s(PZ);lOe=r(MBr,"luke"),MBr.forEach(t),iOe=r(A9e," \u2014 "),F$=n(A9e,"A",{href:!0});var EBr=s(F$);dOe=r(EBr,"LukeConfig"),EBr.forEach(t),cOe=r(A9e," (LUKE model)"),A9e.forEach(t),fOe=i(L),Zf=n(L,"LI",{});var y9e=s(Zf);IZ=n(y9e,"STRONG",{});var CBr=s(IZ);mOe=r(CBr,"lxmert"),CBr.forEach(t),gOe=r(y9e," \u2014 "),T$=n(y9e,"A",{href:!0});var wBr=s(T$);hOe=r(wBr,"LxmertConfig"),wBr.forEach(t),pOe=r(y9e," (LXMERT model)"),y9e.forEach(t),uOe=i(L),em=n(L,"LI",{});var L9e=s(em);qZ=n(L9e,"STRONG",{});var ABr=s(qZ);_Oe=r(ABr,"m2m_100"),ABr.forEach(t),bOe=r(L9e," \u2014 "),M$=n(L9e,"A",{href:!0});var yBr=s(M$);vOe=r(yBr,"M2M100Config"),yBr.forEach(t),FOe=r(L9e," (M2M100 model)"),L9e.forEach(t),TOe=i(L),om=n(L,"LI",{});var x9e=s(om);NZ=n(x9e,"STRONG",{});var LBr=s(NZ);MOe=r(LBr,"marian"),LBr.forEach(t),EOe=r(x9e," \u2014 "),E$=n(x9e,"A",{href:!0});var xBr=s(E$);COe=r(xBr,"MarianConfig"),xBr.forEach(t),wOe=r(x9e," (Marian model)"),x9e.forEach(t),AOe=i(L),rm=n(L,"LI",{});var $9e=s(rm);jZ=n($9e,"STRONG",{});var $Br=s(jZ);yOe=r($Br,"maskformer"),$Br.forEach(t),LOe=r($9e," \u2014 "),C$=n($9e,"A",{href:!0});var kBr=s(C$);xOe=r(kBr,"MaskFormerConfig"),kBr.forEach(t),$Oe=r($9e," (MaskFormer model)"),$9e.forEach(t),kOe=i(L),tm=n(L,"LI",{});var k9e=s(tm);DZ=n(k9e,"STRONG",{});var SBr=s(DZ);SOe=r(SBr,"mbart"),SBr.forEach(t),ROe=r(k9e," \u2014 "),w$=n(k9e,"A",{href:!0});var RBr=s(w$);BOe=r(RBr,"MBartConfig"),RBr.forEach(t),POe=r(k9e," (mBART model)"),k9e.forEach(t),IOe=i(L),am=n(L,"LI",{});var S9e=s(am);GZ=n(S9e,"STRONG",{});var BBr=s(GZ);qOe=r(BBr,"megatron-bert"),BBr.forEach(t),NOe=r(S9e," \u2014 "),A$=n(S9e,"A",{href:!0});var PBr=s(A$);jOe=r(PBr,"MegatronBertConfig"),PBr.forEach(t),DOe=r(S9e," (MegatronBert model)"),S9e.forEach(t),GOe=i(L),nm=n(L,"LI",{});var R9e=s(nm);OZ=n(R9e,"STRONG",{});var IBr=s(OZ);OOe=r(IBr,"mobilebert"),IBr.forEach(t),VOe=r(R9e," \u2014 "),y$=n(R9e,"A",{href:!0});var qBr=s(y$);XOe=r(qBr,"MobileBertConfig"),qBr.forEach(t),zOe=r(R9e," (MobileBERT model)"),R9e.forEach(t),QOe=i(L),sm=n(L,"LI",{});var B9e=s(sm);VZ=n(B9e,"STRONG",{});var NBr=s(VZ);WOe=r(NBr,"mpnet"),NBr.forEach(t),HOe=r(B9e," \u2014 "),L$=n(B9e,"A",{href:!0});var jBr=s(L$);UOe=r(jBr,"MPNetConfig"),jBr.forEach(t),JOe=r(B9e," (MPNet model)"),B9e.forEach(t),YOe=i(L),lm=n(L,"LI",{});var P9e=s(lm);XZ=n(P9e,"STRONG",{});var DBr=s(XZ);KOe=r(DBr,"mt5"),DBr.forEach(t),ZOe=r(P9e," \u2014 "),x$=n(P9e,"A",{href:!0});var GBr=s(x$);eVe=r(GBr,"MT5Config"),GBr.forEach(t),oVe=r(P9e," (mT5 model)"),P9e.forEach(t),rVe=i(L),im=n(L,"LI",{});var I9e=s(im);zZ=n(I9e,"STRONG",{});var OBr=s(zZ);tVe=r(OBr,"nystromformer"),OBr.forEach(t),aVe=r(I9e," \u2014 "),$$=n(I9e,"A",{href:!0});var VBr=s($$);nVe=r(VBr,"NystromformerConfig"),VBr.forEach(t),sVe=r(I9e," (Nystromformer model)"),I9e.forEach(t),lVe=i(L),dm=n(L,"LI",{});var q9e=s(dm);QZ=n(q9e,"STRONG",{});var XBr=s(QZ);iVe=r(XBr,"openai-gpt"),XBr.forEach(t),dVe=r(q9e," \u2014 "),k$=n(q9e,"A",{href:!0});var zBr=s(k$);cVe=r(zBr,"OpenAIGPTConfig"),zBr.forEach(t),fVe=r(q9e," (OpenAI GPT model)"),q9e.forEach(t),mVe=i(L),cm=n(L,"LI",{});var N9e=s(cm);WZ=n(N9e,"STRONG",{});var QBr=s(WZ);gVe=r(QBr,"pegasus"),QBr.forEach(t),hVe=r(N9e," \u2014 "),S$=n(N9e,"A",{href:!0});var WBr=s(S$);pVe=r(WBr,"PegasusConfig"),WBr.forEach(t),uVe=r(N9e," (Pegasus model)"),N9e.forEach(t),_Ve=i(L),fm=n(L,"LI",{});var j9e=s(fm);HZ=n(j9e,"STRONG",{});var HBr=s(HZ);bVe=r(HBr,"perceiver"),HBr.forEach(t),vVe=r(j9e," \u2014 "),R$=n(j9e,"A",{href:!0});var UBr=s(R$);FVe=r(UBr,"PerceiverConfig"),UBr.forEach(t),TVe=r(j9e," (Perceiver model)"),j9e.forEach(t),MVe=i(L),mm=n(L,"LI",{});var D9e=s(mm);UZ=n(D9e,"STRONG",{});var JBr=s(UZ);EVe=r(JBr,"plbart"),JBr.forEach(t),CVe=r(D9e," \u2014 "),B$=n(D9e,"A",{href:!0});var YBr=s(B$);wVe=r(YBr,"PLBartConfig"),YBr.forEach(t),AVe=r(D9e," (PLBart model)"),D9e.forEach(t),yVe=i(L),gm=n(L,"LI",{});var G9e=s(gm);JZ=n(G9e,"STRONG",{});var KBr=s(JZ);LVe=r(KBr,"poolformer"),KBr.forEach(t),xVe=r(G9e," \u2014 "),P$=n(G9e,"A",{href:!0});var ZBr=s(P$);$Ve=r(ZBr,"PoolFormerConfig"),ZBr.forEach(t),kVe=r(G9e," (PoolFormer model)"),G9e.forEach(t),SVe=i(L),hm=n(L,"LI",{});var O9e=s(hm);YZ=n(O9e,"STRONG",{});var ePr=s(YZ);RVe=r(ePr,"prophetnet"),ePr.forEach(t),BVe=r(O9e," \u2014 "),I$=n(O9e,"A",{href:!0});var oPr=s(I$);PVe=r(oPr,"ProphetNetConfig"),oPr.forEach(t),IVe=r(O9e," (ProphetNet model)"),O9e.forEach(t),qVe=i(L),pm=n(L,"LI",{});var V9e=s(pm);KZ=n(V9e,"STRONG",{});var rPr=s(KZ);NVe=r(rPr,"qdqbert"),rPr.forEach(t),jVe=r(V9e," \u2014 "),q$=n(V9e,"A",{href:!0});var tPr=s(q$);DVe=r(tPr,"QDQBertConfig"),tPr.forEach(t),GVe=r(V9e," (QDQBert model)"),V9e.forEach(t),OVe=i(L),um=n(L,"LI",{});var X9e=s(um);ZZ=n(X9e,"STRONG",{});var aPr=s(ZZ);VVe=r(aPr,"rag"),aPr.forEach(t),XVe=r(X9e," \u2014 "),N$=n(X9e,"A",{href:!0});var nPr=s(N$);zVe=r(nPr,"RagConfig"),nPr.forEach(t),QVe=r(X9e," (RAG model)"),X9e.forEach(t),WVe=i(L),_m=n(L,"LI",{});var z9e=s(_m);eee=n(z9e,"STRONG",{});var sPr=s(eee);HVe=r(sPr,"realm"),sPr.forEach(t),UVe=r(z9e," \u2014 "),j$=n(z9e,"A",{href:!0});var lPr=s(j$);JVe=r(lPr,"RealmConfig"),lPr.forEach(t),YVe=r(z9e," (Realm model)"),z9e.forEach(t),KVe=i(L),bm=n(L,"LI",{});var Q9e=s(bm);oee=n(Q9e,"STRONG",{});var iPr=s(oee);ZVe=r(iPr,"reformer"),iPr.forEach(t),eXe=r(Q9e," \u2014 "),D$=n(Q9e,"A",{href:!0});var dPr=s(D$);oXe=r(dPr,"ReformerConfig"),dPr.forEach(t),rXe=r(Q9e," (Reformer model)"),Q9e.forEach(t),tXe=i(L),vm=n(L,"LI",{});var W9e=s(vm);ree=n(W9e,"STRONG",{});var cPr=s(ree);aXe=r(cPr,"regnet"),cPr.forEach(t),nXe=r(W9e," \u2014 "),G$=n(W9e,"A",{href:!0});var fPr=s(G$);sXe=r(fPr,"RegNetConfig"),fPr.forEach(t),lXe=r(W9e," (RegNet model)"),W9e.forEach(t),iXe=i(L),Fm=n(L,"LI",{});var H9e=s(Fm);tee=n(H9e,"STRONG",{});var mPr=s(tee);dXe=r(mPr,"rembert"),mPr.forEach(t),cXe=r(H9e," \u2014 "),O$=n(H9e,"A",{href:!0});var gPr=s(O$);fXe=r(gPr,"RemBertConfig"),gPr.forEach(t),mXe=r(H9e," (RemBERT model)"),H9e.forEach(t),gXe=i(L),Tm=n(L,"LI",{});var U9e=s(Tm);aee=n(U9e,"STRONG",{});var hPr=s(aee);hXe=r(hPr,"resnet"),hPr.forEach(t),pXe=r(U9e," \u2014 "),V$=n(U9e,"A",{href:!0});var pPr=s(V$);uXe=r(pPr,"ResNetConfig"),pPr.forEach(t),_Xe=r(U9e," (ResNet model)"),U9e.forEach(t),bXe=i(L),Mm=n(L,"LI",{});var J9e=s(Mm);nee=n(J9e,"STRONG",{});var uPr=s(nee);vXe=r(uPr,"retribert"),uPr.forEach(t),FXe=r(J9e," \u2014 "),X$=n(J9e,"A",{href:!0});var _Pr=s(X$);TXe=r(_Pr,"RetriBertConfig"),_Pr.forEach(t),MXe=r(J9e," (RetriBERT model)"),J9e.forEach(t),EXe=i(L),Em=n(L,"LI",{});var Y9e=s(Em);see=n(Y9e,"STRONG",{});var bPr=s(see);CXe=r(bPr,"roberta"),bPr.forEach(t),wXe=r(Y9e," \u2014 "),z$=n(Y9e,"A",{href:!0});var vPr=s(z$);AXe=r(vPr,"RobertaConfig"),vPr.forEach(t),yXe=r(Y9e," (RoBERTa model)"),Y9e.forEach(t),LXe=i(L),Cm=n(L,"LI",{});var K9e=s(Cm);lee=n(K9e,"STRONG",{});var FPr=s(lee);xXe=r(FPr,"roformer"),FPr.forEach(t),$Xe=r(K9e," \u2014 "),Q$=n(K9e,"A",{href:!0});var TPr=s(Q$);kXe=r(TPr,"RoFormerConfig"),TPr.forEach(t),SXe=r(K9e," (RoFormer model)"),K9e.forEach(t),RXe=i(L),wm=n(L,"LI",{});var Z9e=s(wm);iee=n(Z9e,"STRONG",{});var MPr=s(iee);BXe=r(MPr,"segformer"),MPr.forEach(t),PXe=r(Z9e," \u2014 "),W$=n(Z9e,"A",{href:!0});var EPr=s(W$);IXe=r(EPr,"SegformerConfig"),EPr.forEach(t),qXe=r(Z9e," (SegFormer model)"),Z9e.forEach(t),NXe=i(L),Am=n(L,"LI",{});var eMe=s(Am);dee=n(eMe,"STRONG",{});var CPr=s(dee);jXe=r(CPr,"sew"),CPr.forEach(t),DXe=r(eMe," \u2014 "),H$=n(eMe,"A",{href:!0});var wPr=s(H$);GXe=r(wPr,"SEWConfig"),wPr.forEach(t),OXe=r(eMe," (SEW model)"),eMe.forEach(t),VXe=i(L),ym=n(L,"LI",{});var oMe=s(ym);cee=n(oMe,"STRONG",{});var APr=s(cee);XXe=r(APr,"sew-d"),APr.forEach(t),zXe=r(oMe," \u2014 "),U$=n(oMe,"A",{href:!0});var yPr=s(U$);QXe=r(yPr,"SEWDConfig"),yPr.forEach(t),WXe=r(oMe," (SEW-D model)"),oMe.forEach(t),HXe=i(L),Lm=n(L,"LI",{});var rMe=s(Lm);fee=n(rMe,"STRONG",{});var LPr=s(fee);UXe=r(LPr,"speech-encoder-decoder"),LPr.forEach(t),JXe=r(rMe," \u2014 "),J$=n(rMe,"A",{href:!0});var xPr=s(J$);YXe=r(xPr,"SpeechEncoderDecoderConfig"),xPr.forEach(t),KXe=r(rMe," (Speech Encoder decoder model)"),rMe.forEach(t),ZXe=i(L),xm=n(L,"LI",{});var tMe=s(xm);mee=n(tMe,"STRONG",{});var $Pr=s(mee);eze=r($Pr,"speech_to_text"),$Pr.forEach(t),oze=r(tMe," \u2014 "),Y$=n(tMe,"A",{href:!0});var kPr=s(Y$);rze=r(kPr,"Speech2TextConfig"),kPr.forEach(t),tze=r(tMe," (Speech2Text model)"),tMe.forEach(t),aze=i(L),$m=n(L,"LI",{});var aMe=s($m);gee=n(aMe,"STRONG",{});var SPr=s(gee);nze=r(SPr,"speech_to_text_2"),SPr.forEach(t),sze=r(aMe," \u2014 "),K$=n(aMe,"A",{href:!0});var RPr=s(K$);lze=r(RPr,"Speech2Text2Config"),RPr.forEach(t),ize=r(aMe," (Speech2Text2 model)"),aMe.forEach(t),dze=i(L),km=n(L,"LI",{});var nMe=s(km);hee=n(nMe,"STRONG",{});var BPr=s(hee);cze=r(BPr,"splinter"),BPr.forEach(t),fze=r(nMe," \u2014 "),Z$=n(nMe,"A",{href:!0});var PPr=s(Z$);mze=r(PPr,"SplinterConfig"),PPr.forEach(t),gze=r(nMe," (Splinter model)"),nMe.forEach(t),hze=i(L),Sm=n(L,"LI",{});var sMe=s(Sm);pee=n(sMe,"STRONG",{});var IPr=s(pee);pze=r(IPr,"squeezebert"),IPr.forEach(t),uze=r(sMe," \u2014 "),ek=n(sMe,"A",{href:!0});var qPr=s(ek);_ze=r(qPr,"SqueezeBertConfig"),qPr.forEach(t),bze=r(sMe," (SqueezeBERT model)"),sMe.forEach(t),vze=i(L),Rm=n(L,"LI",{});var lMe=s(Rm);uee=n(lMe,"STRONG",{});var NPr=s(uee);Fze=r(NPr,"swin"),NPr.forEach(t),Tze=r(lMe," \u2014 "),ok=n(lMe,"A",{href:!0});var jPr=s(ok);Mze=r(jPr,"SwinConfig"),jPr.forEach(t),Eze=r(lMe," (Swin model)"),lMe.forEach(t),Cze=i(L),Bm=n(L,"LI",{});var iMe=s(Bm);_ee=n(iMe,"STRONG",{});var DPr=s(_ee);wze=r(DPr,"t5"),DPr.forEach(t),Aze=r(iMe," \u2014 "),rk=n(iMe,"A",{href:!0});var GPr=s(rk);yze=r(GPr,"T5Config"),GPr.forEach(t),Lze=r(iMe," (T5 model)"),iMe.forEach(t),xze=i(L),Pm=n(L,"LI",{});var dMe=s(Pm);bee=n(dMe,"STRONG",{});var OPr=s(bee);$ze=r(OPr,"tapas"),OPr.forEach(t),kze=r(dMe," \u2014 "),tk=n(dMe,"A",{href:!0});var VPr=s(tk);Sze=r(VPr,"TapasConfig"),VPr.forEach(t),Rze=r(dMe," (TAPAS model)"),dMe.forEach(t),Bze=i(L),Im=n(L,"LI",{});var cMe=s(Im);vee=n(cMe,"STRONG",{});var XPr=s(vee);Pze=r(XPr,"tapex"),XPr.forEach(t),Ize=r(cMe," \u2014 "),ak=n(cMe,"A",{href:!0});var zPr=s(ak);qze=r(zPr,"BartConfig"),zPr.forEach(t),Nze=r(cMe," (TAPEX model)"),cMe.forEach(t),jze=i(L),qm=n(L,"LI",{});var fMe=s(qm);Fee=n(fMe,"STRONG",{});var QPr=s(Fee);Dze=r(QPr,"transfo-xl"),QPr.forEach(t),Gze=r(fMe," \u2014 "),nk=n(fMe,"A",{href:!0});var WPr=s(nk);Oze=r(WPr,"TransfoXLConfig"),WPr.forEach(t),Vze=r(fMe," (Transformer-XL model)"),fMe.forEach(t),Xze=i(L),Nm=n(L,"LI",{});var mMe=s(Nm);Tee=n(mMe,"STRONG",{});var HPr=s(Tee);zze=r(HPr,"trocr"),HPr.forEach(t),Qze=r(mMe," \u2014 "),sk=n(mMe,"A",{href:!0});var UPr=s(sk);Wze=r(UPr,"TrOCRConfig"),UPr.forEach(t),Hze=r(mMe," (TrOCR model)"),mMe.forEach(t),Uze=i(L),jm=n(L,"LI",{});var gMe=s(jm);Mee=n(gMe,"STRONG",{});var JPr=s(Mee);Jze=r(JPr,"unispeech"),JPr.forEach(t),Yze=r(gMe," \u2014 "),lk=n(gMe,"A",{href:!0});var YPr=s(lk);Kze=r(YPr,"UniSpeechConfig"),YPr.forEach(t),Zze=r(gMe," (UniSpeech model)"),gMe.forEach(t),eQe=i(L),Dm=n(L,"LI",{});var hMe=s(Dm);Eee=n(hMe,"STRONG",{});var KPr=s(Eee);oQe=r(KPr,"unispeech-sat"),KPr.forEach(t),rQe=r(hMe," \u2014 "),ik=n(hMe,"A",{href:!0});var ZPr=s(ik);tQe=r(ZPr,"UniSpeechSatConfig"),ZPr.forEach(t),aQe=r(hMe," (UniSpeechSat model)"),hMe.forEach(t),nQe=i(L),Gm=n(L,"LI",{});var pMe=s(Gm);Cee=n(pMe,"STRONG",{});var eIr=s(Cee);sQe=r(eIr,"van"),eIr.forEach(t),lQe=r(pMe," \u2014 "),dk=n(pMe,"A",{href:!0});var oIr=s(dk);iQe=r(oIr,"VanConfig"),oIr.forEach(t),dQe=r(pMe," (VAN model)"),pMe.forEach(t),cQe=i(L),Om=n(L,"LI",{});var uMe=s(Om);wee=n(uMe,"STRONG",{});var rIr=s(wee);fQe=r(rIr,"vilt"),rIr.forEach(t),mQe=r(uMe," \u2014 "),ck=n(uMe,"A",{href:!0});var tIr=s(ck);gQe=r(tIr,"ViltConfig"),tIr.forEach(t),hQe=r(uMe," (ViLT model)"),uMe.forEach(t),pQe=i(L),Vm=n(L,"LI",{});var _Me=s(Vm);Aee=n(_Me,"STRONG",{});var aIr=s(Aee);uQe=r(aIr,"vision-encoder-decoder"),aIr.forEach(t),_Qe=r(_Me," \u2014 "),fk=n(_Me,"A",{href:!0});var nIr=s(fk);bQe=r(nIr,"VisionEncoderDecoderConfig"),nIr.forEach(t),vQe=r(_Me," (Vision Encoder decoder model)"),_Me.forEach(t),FQe=i(L),Xm=n(L,"LI",{});var bMe=s(Xm);yee=n(bMe,"STRONG",{});var sIr=s(yee);TQe=r(sIr,"vision-text-dual-encoder"),sIr.forEach(t),MQe=r(bMe," \u2014 "),mk=n(bMe,"A",{href:!0});var lIr=s(mk);EQe=r(lIr,"VisionTextDualEncoderConfig"),lIr.forEach(t),CQe=r(bMe," (VisionTextDualEncoder model)"),bMe.forEach(t),wQe=i(L),zm=n(L,"LI",{});var vMe=s(zm);Lee=n(vMe,"STRONG",{});var iIr=s(Lee);AQe=r(iIr,"visual_bert"),iIr.forEach(t),yQe=r(vMe," \u2014 "),gk=n(vMe,"A",{href:!0});var dIr=s(gk);LQe=r(dIr,"VisualBertConfig"),dIr.forEach(t),xQe=r(vMe," (VisualBert model)"),vMe.forEach(t),$Qe=i(L),Qm=n(L,"LI",{});var FMe=s(Qm);xee=n(FMe,"STRONG",{});var cIr=s(xee);kQe=r(cIr,"vit"),cIr.forEach(t),SQe=r(FMe," \u2014 "),hk=n(FMe,"A",{href:!0});var fIr=s(hk);RQe=r(fIr,"ViTConfig"),fIr.forEach(t),BQe=r(FMe," (ViT model)"),FMe.forEach(t),PQe=i(L),Wm=n(L,"LI",{});var TMe=s(Wm);$ee=n(TMe,"STRONG",{});var mIr=s($ee);IQe=r(mIr,"vit_mae"),mIr.forEach(t),qQe=r(TMe," \u2014 "),pk=n(TMe,"A",{href:!0});var gIr=s(pk);NQe=r(gIr,"ViTMAEConfig"),gIr.forEach(t),jQe=r(TMe," (ViTMAE model)"),TMe.forEach(t),DQe=i(L),Hm=n(L,"LI",{});var MMe=s(Hm);kee=n(MMe,"STRONG",{});var hIr=s(kee);GQe=r(hIr,"wav2vec2"),hIr.forEach(t),OQe=r(MMe," \u2014 "),uk=n(MMe,"A",{href:!0});var pIr=s(uk);VQe=r(pIr,"Wav2Vec2Config"),pIr.forEach(t),XQe=r(MMe," (Wav2Vec2 model)"),MMe.forEach(t),zQe=i(L),Um=n(L,"LI",{});var EMe=s(Um);See=n(EMe,"STRONG",{});var uIr=s(See);QQe=r(uIr,"wavlm"),uIr.forEach(t),WQe=r(EMe," \u2014 "),_k=n(EMe,"A",{href:!0});var _Ir=s(_k);HQe=r(_Ir,"WavLMConfig"),_Ir.forEach(t),UQe=r(EMe," (WavLM model)"),EMe.forEach(t),JQe=i(L),Jm=n(L,"LI",{});var CMe=s(Jm);Ree=n(CMe,"STRONG",{});var bIr=s(Ree);YQe=r(bIr,"xglm"),bIr.forEach(t),KQe=r(CMe," \u2014 "),bk=n(CMe,"A",{href:!0});var vIr=s(bk);ZQe=r(vIr,"XGLMConfig"),vIr.forEach(t),eWe=r(CMe," (XGLM model)"),CMe.forEach(t),oWe=i(L),Ym=n(L,"LI",{});var wMe=s(Ym);Bee=n(wMe,"STRONG",{});var FIr=s(Bee);rWe=r(FIr,"xlm"),FIr.forEach(t),tWe=r(wMe," \u2014 "),vk=n(wMe,"A",{href:!0});var TIr=s(vk);aWe=r(TIr,"XLMConfig"),TIr.forEach(t),nWe=r(wMe," (XLM model)"),wMe.forEach(t),sWe=i(L),Km=n(L,"LI",{});var AMe=s(Km);Pee=n(AMe,"STRONG",{});var MIr=s(Pee);lWe=r(MIr,"xlm-prophetnet"),MIr.forEach(t),iWe=r(AMe," \u2014 "),Fk=n(AMe,"A",{href:!0});var EIr=s(Fk);dWe=r(EIr,"XLMProphetNetConfig"),EIr.forEach(t),cWe=r(AMe," (XLMProphetNet model)"),AMe.forEach(t),fWe=i(L),Zm=n(L,"LI",{});var yMe=s(Zm);Iee=n(yMe,"STRONG",{});var CIr=s(Iee);mWe=r(CIr,"xlm-roberta"),CIr.forEach(t),gWe=r(yMe," \u2014 "),Tk=n(yMe,"A",{href:!0});var wIr=s(Tk);hWe=r(wIr,"XLMRobertaConfig"),wIr.forEach(t),pWe=r(yMe," (XLM-RoBERTa model)"),yMe.forEach(t),uWe=i(L),eg=n(L,"LI",{});var LMe=s(eg);qee=n(LMe,"STRONG",{});var AIr=s(qee);_We=r(AIr,"xlm-roberta-xl"),AIr.forEach(t),bWe=r(LMe," \u2014 "),Mk=n(LMe,"A",{href:!0});var yIr=s(Mk);vWe=r(yIr,"XLMRobertaXLConfig"),yIr.forEach(t),FWe=r(LMe," (XLM-RoBERTa-XL model)"),LMe.forEach(t),TWe=i(L),og=n(L,"LI",{});var xMe=s(og);Nee=n(xMe,"STRONG",{});var LIr=s(Nee);MWe=r(LIr,"xlnet"),LIr.forEach(t),EWe=r(xMe," \u2014 "),Ek=n(xMe,"A",{href:!0});var xIr=s(Ek);CWe=r(xIr,"XLNetConfig"),xIr.forEach(t),wWe=r(xMe," (XLNet model)"),xMe.forEach(t),AWe=i(L),rg=n(L,"LI",{});var $Me=s(rg);jee=n($Me,"STRONG",{});var $Ir=s(jee);yWe=r($Ir,"yoso"),$Ir.forEach(t),LWe=r($Me," \u2014 "),Ck=n($Me,"A",{href:!0});var kIr=s(Ck);xWe=r(kIr,"YosoConfig"),kIr.forEach(t),$We=r($Me," (YOSO model)"),$Me.forEach(t),L.forEach(t),kWe=i(Jr),T(tg.$$.fragment,Jr),Jr.forEach(t),SWe=i(Ur),ag=n(Ur,"DIV",{class:!0});var xPe=s(ag);T(Fw.$$.fragment,xPe),RWe=i(xPe),Dee=n(xPe,"P",{});var SIr=s(Dee);BWe=r(SIr,"Register a new configuration for this class."),SIr.forEach(t),xPe.forEach(t),Ur.forEach(t),BRe=i(f),fi=n(f,"H2",{class:!0});var $Pe=s(fi);ng=n($Pe,"A",{id:!0,class:!0,href:!0});var RIr=s(ng);Gee=n(RIr,"SPAN",{});var BIr=s(Gee);T(Tw.$$.fragment,BIr),BIr.forEach(t),RIr.forEach(t),PWe=i($Pe),Oee=n($Pe,"SPAN",{});var PIr=s(Oee);IWe=r(PIr,"AutoTokenizer"),PIr.forEach(t),$Pe.forEach(t),PRe=i(f),Eo=n(f,"DIV",{class:!0});var $s=s(Eo);T(Mw.$$.fragment,$s),qWe=i($s),Ew=n($s,"P",{});var kPe=s(Ew);NWe=r(kPe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),wk=n(kPe,"A",{href:!0});var IIr=s(wk);jWe=r(IIr,"AutoTokenizer.from_pretrained()"),IIr.forEach(t),DWe=r(kPe," class method."),kPe.forEach(t),GWe=i($s),Cw=n($s,"P",{});var SPe=s(Cw);OWe=r(SPe,"This class cannot be instantiated directly using "),Vee=n(SPe,"CODE",{});var qIr=s(Vee);VWe=r(qIr,"__init__()"),qIr.forEach(t),XWe=r(SPe," (throws an error)."),SPe.forEach(t),zWe=i($s),Tr=n($s,"DIV",{class:!0});var ks=s(Tr);T(ww.$$.fragment,ks),QWe=i(ks),Xee=n(ks,"P",{});var NIr=s(Xee);WWe=r(NIr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),NIr.forEach(t),HWe=i(ks),Fa=n(ks,"P",{});var uC=s(Fa);UWe=r(uC,"The tokenizer class to instantiate is selected based on the "),zee=n(uC,"CODE",{});var jIr=s(zee);JWe=r(jIr,"model_type"),jIr.forEach(t),YWe=r(uC,` property of the config object (either
passed as an argument or loaded from `),Qee=n(uC,"CODE",{});var DIr=s(Qee);KWe=r(DIr,"pretrained_model_name_or_path"),DIr.forEach(t),ZWe=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wee=n(uC,"CODE",{});var GIr=s(Wee);eHe=r(GIr,"pretrained_model_name_or_path"),GIr.forEach(t),oHe=r(uC,":"),uC.forEach(t),rHe=i(ks),k=n(ks,"UL",{});var S=s(k);An=n(S,"LI",{});var F8=s(An);Hee=n(F8,"STRONG",{});var OIr=s(Hee);tHe=r(OIr,"albert"),OIr.forEach(t),aHe=r(F8," \u2014 "),Ak=n(F8,"A",{href:!0});var VIr=s(Ak);nHe=r(VIr,"AlbertTokenizer"),VIr.forEach(t),sHe=r(F8," or "),yk=n(F8,"A",{href:!0});var XIr=s(yk);lHe=r(XIr,"AlbertTokenizerFast"),XIr.forEach(t),iHe=r(F8," (ALBERT model)"),F8.forEach(t),dHe=i(S),yn=n(S,"LI",{});var T8=s(yn);Uee=n(T8,"STRONG",{});var zIr=s(Uee);cHe=r(zIr,"bart"),zIr.forEach(t),fHe=r(T8," \u2014 "),Lk=n(T8,"A",{href:!0});var QIr=s(Lk);mHe=r(QIr,"BartTokenizer"),QIr.forEach(t),gHe=r(T8," or "),xk=n(T8,"A",{href:!0});var WIr=s(xk);hHe=r(WIr,"BartTokenizerFast"),WIr.forEach(t),pHe=r(T8," (BART model)"),T8.forEach(t),uHe=i(S),Ln=n(S,"LI",{});var M8=s(Ln);Jee=n(M8,"STRONG",{});var HIr=s(Jee);_He=r(HIr,"barthez"),HIr.forEach(t),bHe=r(M8," \u2014 "),$k=n(M8,"A",{href:!0});var UIr=s($k);vHe=r(UIr,"BarthezTokenizer"),UIr.forEach(t),FHe=r(M8," or "),kk=n(M8,"A",{href:!0});var JIr=s(kk);THe=r(JIr,"BarthezTokenizerFast"),JIr.forEach(t),MHe=r(M8," (BARThez model)"),M8.forEach(t),EHe=i(S),sg=n(S,"LI",{});var kMe=s(sg);Yee=n(kMe,"STRONG",{});var YIr=s(Yee);CHe=r(YIr,"bartpho"),YIr.forEach(t),wHe=r(kMe," \u2014 "),Sk=n(kMe,"A",{href:!0});var KIr=s(Sk);AHe=r(KIr,"BartphoTokenizer"),KIr.forEach(t),yHe=r(kMe," (BARTpho model)"),kMe.forEach(t),LHe=i(S),xn=n(S,"LI",{});var E8=s(xn);Kee=n(E8,"STRONG",{});var ZIr=s(Kee);xHe=r(ZIr,"bert"),ZIr.forEach(t),$He=r(E8," \u2014 "),Rk=n(E8,"A",{href:!0});var eqr=s(Rk);kHe=r(eqr,"BertTokenizer"),eqr.forEach(t),SHe=r(E8," or "),Bk=n(E8,"A",{href:!0});var oqr=s(Bk);RHe=r(oqr,"BertTokenizerFast"),oqr.forEach(t),BHe=r(E8," (BERT model)"),E8.forEach(t),PHe=i(S),lg=n(S,"LI",{});var SMe=s(lg);Zee=n(SMe,"STRONG",{});var rqr=s(Zee);IHe=r(rqr,"bert-generation"),rqr.forEach(t),qHe=r(SMe," \u2014 "),Pk=n(SMe,"A",{href:!0});var tqr=s(Pk);NHe=r(tqr,"BertGenerationTokenizer"),tqr.forEach(t),jHe=r(SMe," (Bert Generation model)"),SMe.forEach(t),DHe=i(S),ig=n(S,"LI",{});var RMe=s(ig);eoe=n(RMe,"STRONG",{});var aqr=s(eoe);GHe=r(aqr,"bert-japanese"),aqr.forEach(t),OHe=r(RMe," \u2014 "),Ik=n(RMe,"A",{href:!0});var nqr=s(Ik);VHe=r(nqr,"BertJapaneseTokenizer"),nqr.forEach(t),XHe=r(RMe," (BertJapanese model)"),RMe.forEach(t),zHe=i(S),dg=n(S,"LI",{});var BMe=s(dg);ooe=n(BMe,"STRONG",{});var sqr=s(ooe);QHe=r(sqr,"bertweet"),sqr.forEach(t),WHe=r(BMe," \u2014 "),qk=n(BMe,"A",{href:!0});var lqr=s(qk);HHe=r(lqr,"BertweetTokenizer"),lqr.forEach(t),UHe=r(BMe," (Bertweet model)"),BMe.forEach(t),JHe=i(S),$n=n(S,"LI",{});var C8=s($n);roe=n(C8,"STRONG",{});var iqr=s(roe);YHe=r(iqr,"big_bird"),iqr.forEach(t),KHe=r(C8," \u2014 "),Nk=n(C8,"A",{href:!0});var dqr=s(Nk);ZHe=r(dqr,"BigBirdTokenizer"),dqr.forEach(t),eUe=r(C8," or "),jk=n(C8,"A",{href:!0});var cqr=s(jk);oUe=r(cqr,"BigBirdTokenizerFast"),cqr.forEach(t),rUe=r(C8," (BigBird model)"),C8.forEach(t),tUe=i(S),kn=n(S,"LI",{});var w8=s(kn);toe=n(w8,"STRONG",{});var fqr=s(toe);aUe=r(fqr,"bigbird_pegasus"),fqr.forEach(t),nUe=r(w8," \u2014 "),Dk=n(w8,"A",{href:!0});var mqr=s(Dk);sUe=r(mqr,"PegasusTokenizer"),mqr.forEach(t),lUe=r(w8," or "),Gk=n(w8,"A",{href:!0});var gqr=s(Gk);iUe=r(gqr,"PegasusTokenizerFast"),gqr.forEach(t),dUe=r(w8," (BigBirdPegasus model)"),w8.forEach(t),cUe=i(S),Sn=n(S,"LI",{});var A8=s(Sn);aoe=n(A8,"STRONG",{});var hqr=s(aoe);fUe=r(hqr,"blenderbot"),hqr.forEach(t),mUe=r(A8," \u2014 "),Ok=n(A8,"A",{href:!0});var pqr=s(Ok);gUe=r(pqr,"BlenderbotTokenizer"),pqr.forEach(t),hUe=r(A8," or "),Vk=n(A8,"A",{href:!0});var uqr=s(Vk);pUe=r(uqr,"BlenderbotTokenizerFast"),uqr.forEach(t),uUe=r(A8," (Blenderbot model)"),A8.forEach(t),_Ue=i(S),cg=n(S,"LI",{});var PMe=s(cg);noe=n(PMe,"STRONG",{});var _qr=s(noe);bUe=r(_qr,"blenderbot-small"),_qr.forEach(t),vUe=r(PMe," \u2014 "),Xk=n(PMe,"A",{href:!0});var bqr=s(Xk);FUe=r(bqr,"BlenderbotSmallTokenizer"),bqr.forEach(t),TUe=r(PMe," (BlenderbotSmall model)"),PMe.forEach(t),MUe=i(S),fg=n(S,"LI",{});var IMe=s(fg);soe=n(IMe,"STRONG",{});var vqr=s(soe);EUe=r(vqr,"byt5"),vqr.forEach(t),CUe=r(IMe," \u2014 "),zk=n(IMe,"A",{href:!0});var Fqr=s(zk);wUe=r(Fqr,"ByT5Tokenizer"),Fqr.forEach(t),AUe=r(IMe," (ByT5 model)"),IMe.forEach(t),yUe=i(S),Rn=n(S,"LI",{});var y8=s(Rn);loe=n(y8,"STRONG",{});var Tqr=s(loe);LUe=r(Tqr,"camembert"),Tqr.forEach(t),xUe=r(y8," \u2014 "),Qk=n(y8,"A",{href:!0});var Mqr=s(Qk);$Ue=r(Mqr,"CamembertTokenizer"),Mqr.forEach(t),kUe=r(y8," or "),Wk=n(y8,"A",{href:!0});var Eqr=s(Wk);SUe=r(Eqr,"CamembertTokenizerFast"),Eqr.forEach(t),RUe=r(y8," (CamemBERT model)"),y8.forEach(t),BUe=i(S),mg=n(S,"LI",{});var qMe=s(mg);ioe=n(qMe,"STRONG",{});var Cqr=s(ioe);PUe=r(Cqr,"canine"),Cqr.forEach(t),IUe=r(qMe," \u2014 "),Hk=n(qMe,"A",{href:!0});var wqr=s(Hk);qUe=r(wqr,"CanineTokenizer"),wqr.forEach(t),NUe=r(qMe," (Canine model)"),qMe.forEach(t),jUe=i(S),Bn=n(S,"LI",{});var L8=s(Bn);doe=n(L8,"STRONG",{});var Aqr=s(doe);DUe=r(Aqr,"clip"),Aqr.forEach(t),GUe=r(L8," \u2014 "),Uk=n(L8,"A",{href:!0});var yqr=s(Uk);OUe=r(yqr,"CLIPTokenizer"),yqr.forEach(t),VUe=r(L8," or "),Jk=n(L8,"A",{href:!0});var Lqr=s(Jk);XUe=r(Lqr,"CLIPTokenizerFast"),Lqr.forEach(t),zUe=r(L8," (CLIP model)"),L8.forEach(t),QUe=i(S),Pn=n(S,"LI",{});var x8=s(Pn);coe=n(x8,"STRONG",{});var xqr=s(coe);WUe=r(xqr,"convbert"),xqr.forEach(t),HUe=r(x8," \u2014 "),Yk=n(x8,"A",{href:!0});var $qr=s(Yk);UUe=r($qr,"ConvBertTokenizer"),$qr.forEach(t),JUe=r(x8," or "),Kk=n(x8,"A",{href:!0});var kqr=s(Kk);YUe=r(kqr,"ConvBertTokenizerFast"),kqr.forEach(t),KUe=r(x8," (ConvBERT model)"),x8.forEach(t),ZUe=i(S),In=n(S,"LI",{});var $8=s(In);foe=n($8,"STRONG",{});var Sqr=s(foe);eJe=r(Sqr,"cpm"),Sqr.forEach(t),oJe=r($8," \u2014 "),Zk=n($8,"A",{href:!0});var Rqr=s(Zk);rJe=r(Rqr,"CpmTokenizer"),Rqr.forEach(t),tJe=r($8," or "),moe=n($8,"CODE",{});var Bqr=s(moe);aJe=r(Bqr,"CpmTokenizerFast"),Bqr.forEach(t),nJe=r($8," (CPM model)"),$8.forEach(t),sJe=i(S),gg=n(S,"LI",{});var NMe=s(gg);goe=n(NMe,"STRONG",{});var Pqr=s(goe);lJe=r(Pqr,"ctrl"),Pqr.forEach(t),iJe=r(NMe," \u2014 "),eS=n(NMe,"A",{href:!0});var Iqr=s(eS);dJe=r(Iqr,"CTRLTokenizer"),Iqr.forEach(t),cJe=r(NMe," (CTRL model)"),NMe.forEach(t),fJe=i(S),qn=n(S,"LI",{});var k8=s(qn);hoe=n(k8,"STRONG",{});var qqr=s(hoe);mJe=r(qqr,"data2vec-text"),qqr.forEach(t),gJe=r(k8," \u2014 "),oS=n(k8,"A",{href:!0});var Nqr=s(oS);hJe=r(Nqr,"RobertaTokenizer"),Nqr.forEach(t),pJe=r(k8," or "),rS=n(k8,"A",{href:!0});var jqr=s(rS);uJe=r(jqr,"RobertaTokenizerFast"),jqr.forEach(t),_Je=r(k8," (Data2VecText model)"),k8.forEach(t),bJe=i(S),Nn=n(S,"LI",{});var S8=s(Nn);poe=n(S8,"STRONG",{});var Dqr=s(poe);vJe=r(Dqr,"deberta"),Dqr.forEach(t),FJe=r(S8," \u2014 "),tS=n(S8,"A",{href:!0});var Gqr=s(tS);TJe=r(Gqr,"DebertaTokenizer"),Gqr.forEach(t),MJe=r(S8," or "),aS=n(S8,"A",{href:!0});var Oqr=s(aS);EJe=r(Oqr,"DebertaTokenizerFast"),Oqr.forEach(t),CJe=r(S8," (DeBERTa model)"),S8.forEach(t),wJe=i(S),jn=n(S,"LI",{});var R8=s(jn);uoe=n(R8,"STRONG",{});var Vqr=s(uoe);AJe=r(Vqr,"deberta-v2"),Vqr.forEach(t),yJe=r(R8," \u2014 "),nS=n(R8,"A",{href:!0});var Xqr=s(nS);LJe=r(Xqr,"DebertaV2Tokenizer"),Xqr.forEach(t),xJe=r(R8," or "),sS=n(R8,"A",{href:!0});var zqr=s(sS);$Je=r(zqr,"DebertaV2TokenizerFast"),zqr.forEach(t),kJe=r(R8," (DeBERTa-v2 model)"),R8.forEach(t),SJe=i(S),Dn=n(S,"LI",{});var B8=s(Dn);_oe=n(B8,"STRONG",{});var Qqr=s(_oe);RJe=r(Qqr,"distilbert"),Qqr.forEach(t),BJe=r(B8," \u2014 "),lS=n(B8,"A",{href:!0});var Wqr=s(lS);PJe=r(Wqr,"DistilBertTokenizer"),Wqr.forEach(t),IJe=r(B8," or "),iS=n(B8,"A",{href:!0});var Hqr=s(iS);qJe=r(Hqr,"DistilBertTokenizerFast"),Hqr.forEach(t),NJe=r(B8," (DistilBERT model)"),B8.forEach(t),jJe=i(S),Gn=n(S,"LI",{});var P8=s(Gn);boe=n(P8,"STRONG",{});var Uqr=s(boe);DJe=r(Uqr,"dpr"),Uqr.forEach(t),GJe=r(P8," \u2014 "),dS=n(P8,"A",{href:!0});var Jqr=s(dS);OJe=r(Jqr,"DPRQuestionEncoderTokenizer"),Jqr.forEach(t),VJe=r(P8," or "),cS=n(P8,"A",{href:!0});var Yqr=s(cS);XJe=r(Yqr,"DPRQuestionEncoderTokenizerFast"),Yqr.forEach(t),zJe=r(P8," (DPR model)"),P8.forEach(t),QJe=i(S),On=n(S,"LI",{});var I8=s(On);voe=n(I8,"STRONG",{});var Kqr=s(voe);WJe=r(Kqr,"electra"),Kqr.forEach(t),HJe=r(I8," \u2014 "),fS=n(I8,"A",{href:!0});var Zqr=s(fS);UJe=r(Zqr,"ElectraTokenizer"),Zqr.forEach(t),JJe=r(I8," or "),mS=n(I8,"A",{href:!0});var eNr=s(mS);YJe=r(eNr,"ElectraTokenizerFast"),eNr.forEach(t),KJe=r(I8," (ELECTRA model)"),I8.forEach(t),ZJe=i(S),hg=n(S,"LI",{});var jMe=s(hg);Foe=n(jMe,"STRONG",{});var oNr=s(Foe);eYe=r(oNr,"flaubert"),oNr.forEach(t),oYe=r(jMe," \u2014 "),gS=n(jMe,"A",{href:!0});var rNr=s(gS);rYe=r(rNr,"FlaubertTokenizer"),rNr.forEach(t),tYe=r(jMe," (FlauBERT model)"),jMe.forEach(t),aYe=i(S),Vn=n(S,"LI",{});var q8=s(Vn);Toe=n(q8,"STRONG",{});var tNr=s(Toe);nYe=r(tNr,"fnet"),tNr.forEach(t),sYe=r(q8," \u2014 "),hS=n(q8,"A",{href:!0});var aNr=s(hS);lYe=r(aNr,"FNetTokenizer"),aNr.forEach(t),iYe=r(q8," or "),pS=n(q8,"A",{href:!0});var nNr=s(pS);dYe=r(nNr,"FNetTokenizerFast"),nNr.forEach(t),cYe=r(q8," (FNet model)"),q8.forEach(t),fYe=i(S),pg=n(S,"LI",{});var DMe=s(pg);Moe=n(DMe,"STRONG",{});var sNr=s(Moe);mYe=r(sNr,"fsmt"),sNr.forEach(t),gYe=r(DMe," \u2014 "),uS=n(DMe,"A",{href:!0});var lNr=s(uS);hYe=r(lNr,"FSMTTokenizer"),lNr.forEach(t),pYe=r(DMe," (FairSeq Machine-Translation model)"),DMe.forEach(t),uYe=i(S),Xn=n(S,"LI",{});var N8=s(Xn);Eoe=n(N8,"STRONG",{});var iNr=s(Eoe);_Ye=r(iNr,"funnel"),iNr.forEach(t),bYe=r(N8," \u2014 "),_S=n(N8,"A",{href:!0});var dNr=s(_S);vYe=r(dNr,"FunnelTokenizer"),dNr.forEach(t),FYe=r(N8," or "),bS=n(N8,"A",{href:!0});var cNr=s(bS);TYe=r(cNr,"FunnelTokenizerFast"),cNr.forEach(t),MYe=r(N8," (Funnel Transformer model)"),N8.forEach(t),EYe=i(S),zn=n(S,"LI",{});var j8=s(zn);Coe=n(j8,"STRONG",{});var fNr=s(Coe);CYe=r(fNr,"gpt2"),fNr.forEach(t),wYe=r(j8," \u2014 "),vS=n(j8,"A",{href:!0});var mNr=s(vS);AYe=r(mNr,"GPT2Tokenizer"),mNr.forEach(t),yYe=r(j8," or "),FS=n(j8,"A",{href:!0});var gNr=s(FS);LYe=r(gNr,"GPT2TokenizerFast"),gNr.forEach(t),xYe=r(j8," (OpenAI GPT-2 model)"),j8.forEach(t),$Ye=i(S),Qn=n(S,"LI",{});var D8=s(Qn);woe=n(D8,"STRONG",{});var hNr=s(woe);kYe=r(hNr,"gpt_neo"),hNr.forEach(t),SYe=r(D8," \u2014 "),TS=n(D8,"A",{href:!0});var pNr=s(TS);RYe=r(pNr,"GPT2Tokenizer"),pNr.forEach(t),BYe=r(D8," or "),MS=n(D8,"A",{href:!0});var uNr=s(MS);PYe=r(uNr,"GPT2TokenizerFast"),uNr.forEach(t),IYe=r(D8," (GPT Neo model)"),D8.forEach(t),qYe=i(S),Wn=n(S,"LI",{});var G8=s(Wn);Aoe=n(G8,"STRONG",{});var _Nr=s(Aoe);NYe=r(_Nr,"gptj"),_Nr.forEach(t),jYe=r(G8," \u2014 "),ES=n(G8,"A",{href:!0});var bNr=s(ES);DYe=r(bNr,"GPT2Tokenizer"),bNr.forEach(t),GYe=r(G8," or "),CS=n(G8,"A",{href:!0});var vNr=s(CS);OYe=r(vNr,"GPT2TokenizerFast"),vNr.forEach(t),VYe=r(G8," (GPT-J model)"),G8.forEach(t),XYe=i(S),Hn=n(S,"LI",{});var O8=s(Hn);yoe=n(O8,"STRONG",{});var FNr=s(yoe);zYe=r(FNr,"herbert"),FNr.forEach(t),QYe=r(O8," \u2014 "),wS=n(O8,"A",{href:!0});var TNr=s(wS);WYe=r(TNr,"HerbertTokenizer"),TNr.forEach(t),HYe=r(O8," or "),AS=n(O8,"A",{href:!0});var MNr=s(AS);UYe=r(MNr,"HerbertTokenizerFast"),MNr.forEach(t),JYe=r(O8," (HerBERT model)"),O8.forEach(t),YYe=i(S),ug=n(S,"LI",{});var GMe=s(ug);Loe=n(GMe,"STRONG",{});var ENr=s(Loe);KYe=r(ENr,"hubert"),ENr.forEach(t),ZYe=r(GMe," \u2014 "),yS=n(GMe,"A",{href:!0});var CNr=s(yS);eKe=r(CNr,"Wav2Vec2CTCTokenizer"),CNr.forEach(t),oKe=r(GMe," (Hubert model)"),GMe.forEach(t),rKe=i(S),Un=n(S,"LI",{});var V8=s(Un);xoe=n(V8,"STRONG",{});var wNr=s(xoe);tKe=r(wNr,"ibert"),wNr.forEach(t),aKe=r(V8," \u2014 "),LS=n(V8,"A",{href:!0});var ANr=s(LS);nKe=r(ANr,"RobertaTokenizer"),ANr.forEach(t),sKe=r(V8," or "),xS=n(V8,"A",{href:!0});var yNr=s(xS);lKe=r(yNr,"RobertaTokenizerFast"),yNr.forEach(t),iKe=r(V8," (I-BERT model)"),V8.forEach(t),dKe=i(S),Jn=n(S,"LI",{});var X8=s(Jn);$oe=n(X8,"STRONG",{});var LNr=s($oe);cKe=r(LNr,"layoutlm"),LNr.forEach(t),fKe=r(X8," \u2014 "),$S=n(X8,"A",{href:!0});var xNr=s($S);mKe=r(xNr,"LayoutLMTokenizer"),xNr.forEach(t),gKe=r(X8," or "),kS=n(X8,"A",{href:!0});var $Nr=s(kS);hKe=r($Nr,"LayoutLMTokenizerFast"),$Nr.forEach(t),pKe=r(X8," (LayoutLM model)"),X8.forEach(t),uKe=i(S),Yn=n(S,"LI",{});var z8=s(Yn);koe=n(z8,"STRONG",{});var kNr=s(koe);_Ke=r(kNr,"layoutlmv2"),kNr.forEach(t),bKe=r(z8," \u2014 "),SS=n(z8,"A",{href:!0});var SNr=s(SS);vKe=r(SNr,"LayoutLMv2Tokenizer"),SNr.forEach(t),FKe=r(z8," or "),RS=n(z8,"A",{href:!0});var RNr=s(RS);TKe=r(RNr,"LayoutLMv2TokenizerFast"),RNr.forEach(t),MKe=r(z8," (LayoutLMv2 model)"),z8.forEach(t),EKe=i(S),Kn=n(S,"LI",{});var Q8=s(Kn);Soe=n(Q8,"STRONG",{});var BNr=s(Soe);CKe=r(BNr,"layoutxlm"),BNr.forEach(t),wKe=r(Q8," \u2014 "),BS=n(Q8,"A",{href:!0});var PNr=s(BS);AKe=r(PNr,"LayoutXLMTokenizer"),PNr.forEach(t),yKe=r(Q8," or "),PS=n(Q8,"A",{href:!0});var INr=s(PS);LKe=r(INr,"LayoutXLMTokenizerFast"),INr.forEach(t),xKe=r(Q8," (LayoutXLM model)"),Q8.forEach(t),$Ke=i(S),Zn=n(S,"LI",{});var W8=s(Zn);Roe=n(W8,"STRONG",{});var qNr=s(Roe);kKe=r(qNr,"led"),qNr.forEach(t),SKe=r(W8," \u2014 "),IS=n(W8,"A",{href:!0});var NNr=s(IS);RKe=r(NNr,"LEDTokenizer"),NNr.forEach(t),BKe=r(W8," or "),qS=n(W8,"A",{href:!0});var jNr=s(qS);PKe=r(jNr,"LEDTokenizerFast"),jNr.forEach(t),IKe=r(W8," (LED model)"),W8.forEach(t),qKe=i(S),es=n(S,"LI",{});var H8=s(es);Boe=n(H8,"STRONG",{});var DNr=s(Boe);NKe=r(DNr,"longformer"),DNr.forEach(t),jKe=r(H8," \u2014 "),NS=n(H8,"A",{href:!0});var GNr=s(NS);DKe=r(GNr,"LongformerTokenizer"),GNr.forEach(t),GKe=r(H8," or "),jS=n(H8,"A",{href:!0});var ONr=s(jS);OKe=r(ONr,"LongformerTokenizerFast"),ONr.forEach(t),VKe=r(H8," (Longformer model)"),H8.forEach(t),XKe=i(S),_g=n(S,"LI",{});var OMe=s(_g);Poe=n(OMe,"STRONG",{});var VNr=s(Poe);zKe=r(VNr,"luke"),VNr.forEach(t),QKe=r(OMe," \u2014 "),DS=n(OMe,"A",{href:!0});var XNr=s(DS);WKe=r(XNr,"LukeTokenizer"),XNr.forEach(t),HKe=r(OMe," (LUKE model)"),OMe.forEach(t),UKe=i(S),os=n(S,"LI",{});var U8=s(os);Ioe=n(U8,"STRONG",{});var zNr=s(Ioe);JKe=r(zNr,"lxmert"),zNr.forEach(t),YKe=r(U8," \u2014 "),GS=n(U8,"A",{href:!0});var QNr=s(GS);KKe=r(QNr,"LxmertTokenizer"),QNr.forEach(t),ZKe=r(U8," or "),OS=n(U8,"A",{href:!0});var WNr=s(OS);eZe=r(WNr,"LxmertTokenizerFast"),WNr.forEach(t),oZe=r(U8," (LXMERT model)"),U8.forEach(t),rZe=i(S),bg=n(S,"LI",{});var VMe=s(bg);qoe=n(VMe,"STRONG",{});var HNr=s(qoe);tZe=r(HNr,"m2m_100"),HNr.forEach(t),aZe=r(VMe," \u2014 "),VS=n(VMe,"A",{href:!0});var UNr=s(VS);nZe=r(UNr,"M2M100Tokenizer"),UNr.forEach(t),sZe=r(VMe," (M2M100 model)"),VMe.forEach(t),lZe=i(S),vg=n(S,"LI",{});var XMe=s(vg);Noe=n(XMe,"STRONG",{});var JNr=s(Noe);iZe=r(JNr,"marian"),JNr.forEach(t),dZe=r(XMe," \u2014 "),XS=n(XMe,"A",{href:!0});var YNr=s(XS);cZe=r(YNr,"MarianTokenizer"),YNr.forEach(t),fZe=r(XMe," (Marian model)"),XMe.forEach(t),mZe=i(S),rs=n(S,"LI",{});var J8=s(rs);joe=n(J8,"STRONG",{});var KNr=s(joe);gZe=r(KNr,"mbart"),KNr.forEach(t),hZe=r(J8," \u2014 "),zS=n(J8,"A",{href:!0});var ZNr=s(zS);pZe=r(ZNr,"MBartTokenizer"),ZNr.forEach(t),uZe=r(J8," or "),QS=n(J8,"A",{href:!0});var ejr=s(QS);_Ze=r(ejr,"MBartTokenizerFast"),ejr.forEach(t),bZe=r(J8," (mBART model)"),J8.forEach(t),vZe=i(S),ts=n(S,"LI",{});var Y8=s(ts);Doe=n(Y8,"STRONG",{});var ojr=s(Doe);FZe=r(ojr,"mbart50"),ojr.forEach(t),TZe=r(Y8," \u2014 "),WS=n(Y8,"A",{href:!0});var rjr=s(WS);MZe=r(rjr,"MBart50Tokenizer"),rjr.forEach(t),EZe=r(Y8," or "),HS=n(Y8,"A",{href:!0});var tjr=s(HS);CZe=r(tjr,"MBart50TokenizerFast"),tjr.forEach(t),wZe=r(Y8," (mBART-50 model)"),Y8.forEach(t),AZe=i(S),as=n(S,"LI",{});var K8=s(as);Goe=n(K8,"STRONG",{});var ajr=s(Goe);yZe=r(ajr,"megatron-bert"),ajr.forEach(t),LZe=r(K8," \u2014 "),US=n(K8,"A",{href:!0});var njr=s(US);xZe=r(njr,"BertTokenizer"),njr.forEach(t),$Ze=r(K8," or "),JS=n(K8,"A",{href:!0});var sjr=s(JS);kZe=r(sjr,"BertTokenizerFast"),sjr.forEach(t),SZe=r(K8," (MegatronBert model)"),K8.forEach(t),RZe=i(S),Fg=n(S,"LI",{});var zMe=s(Fg);Ooe=n(zMe,"STRONG",{});var ljr=s(Ooe);BZe=r(ljr,"mluke"),ljr.forEach(t),PZe=r(zMe," \u2014 "),YS=n(zMe,"A",{href:!0});var ijr=s(YS);IZe=r(ijr,"MLukeTokenizer"),ijr.forEach(t),qZe=r(zMe," (mLUKE model)"),zMe.forEach(t),NZe=i(S),ns=n(S,"LI",{});var Z8=s(ns);Voe=n(Z8,"STRONG",{});var djr=s(Voe);jZe=r(djr,"mobilebert"),djr.forEach(t),DZe=r(Z8," \u2014 "),KS=n(Z8,"A",{href:!0});var cjr=s(KS);GZe=r(cjr,"MobileBertTokenizer"),cjr.forEach(t),OZe=r(Z8," or "),ZS=n(Z8,"A",{href:!0});var fjr=s(ZS);VZe=r(fjr,"MobileBertTokenizerFast"),fjr.forEach(t),XZe=r(Z8," (MobileBERT model)"),Z8.forEach(t),zZe=i(S),ss=n(S,"LI",{});var ex=s(ss);Xoe=n(ex,"STRONG",{});var mjr=s(Xoe);QZe=r(mjr,"mpnet"),mjr.forEach(t),WZe=r(ex," \u2014 "),eR=n(ex,"A",{href:!0});var gjr=s(eR);HZe=r(gjr,"MPNetTokenizer"),gjr.forEach(t),UZe=r(ex," or "),oR=n(ex,"A",{href:!0});var hjr=s(oR);JZe=r(hjr,"MPNetTokenizerFast"),hjr.forEach(t),YZe=r(ex," (MPNet model)"),ex.forEach(t),KZe=i(S),ls=n(S,"LI",{});var ox=s(ls);zoe=n(ox,"STRONG",{});var pjr=s(zoe);ZZe=r(pjr,"mt5"),pjr.forEach(t),eeo=r(ox," \u2014 "),rR=n(ox,"A",{href:!0});var ujr=s(rR);oeo=r(ujr,"MT5Tokenizer"),ujr.forEach(t),reo=r(ox," or "),tR=n(ox,"A",{href:!0});var _jr=s(tR);teo=r(_jr,"MT5TokenizerFast"),_jr.forEach(t),aeo=r(ox," (mT5 model)"),ox.forEach(t),neo=i(S),is=n(S,"LI",{});var rx=s(is);Qoe=n(rx,"STRONG",{});var bjr=s(Qoe);seo=r(bjr,"nystromformer"),bjr.forEach(t),leo=r(rx," \u2014 "),aR=n(rx,"A",{href:!0});var vjr=s(aR);ieo=r(vjr,"AlbertTokenizer"),vjr.forEach(t),deo=r(rx," or "),nR=n(rx,"A",{href:!0});var Fjr=s(nR);ceo=r(Fjr,"AlbertTokenizerFast"),Fjr.forEach(t),feo=r(rx," (Nystromformer model)"),rx.forEach(t),meo=i(S),ds=n(S,"LI",{});var tx=s(ds);Woe=n(tx,"STRONG",{});var Tjr=s(Woe);geo=r(Tjr,"openai-gpt"),Tjr.forEach(t),heo=r(tx," \u2014 "),sR=n(tx,"A",{href:!0});var Mjr=s(sR);peo=r(Mjr,"OpenAIGPTTokenizer"),Mjr.forEach(t),ueo=r(tx," or "),lR=n(tx,"A",{href:!0});var Ejr=s(lR);_eo=r(Ejr,"OpenAIGPTTokenizerFast"),Ejr.forEach(t),beo=r(tx," (OpenAI GPT model)"),tx.forEach(t),veo=i(S),cs=n(S,"LI",{});var ax=s(cs);Hoe=n(ax,"STRONG",{});var Cjr=s(Hoe);Feo=r(Cjr,"pegasus"),Cjr.forEach(t),Teo=r(ax," \u2014 "),iR=n(ax,"A",{href:!0});var wjr=s(iR);Meo=r(wjr,"PegasusTokenizer"),wjr.forEach(t),Eeo=r(ax," or "),dR=n(ax,"A",{href:!0});var Ajr=s(dR);Ceo=r(Ajr,"PegasusTokenizerFast"),Ajr.forEach(t),weo=r(ax," (Pegasus model)"),ax.forEach(t),Aeo=i(S),Tg=n(S,"LI",{});var QMe=s(Tg);Uoe=n(QMe,"STRONG",{});var yjr=s(Uoe);yeo=r(yjr,"perceiver"),yjr.forEach(t),Leo=r(QMe," \u2014 "),cR=n(QMe,"A",{href:!0});var Ljr=s(cR);xeo=r(Ljr,"PerceiverTokenizer"),Ljr.forEach(t),$eo=r(QMe," (Perceiver model)"),QMe.forEach(t),keo=i(S),Mg=n(S,"LI",{});var WMe=s(Mg);Joe=n(WMe,"STRONG",{});var xjr=s(Joe);Seo=r(xjr,"phobert"),xjr.forEach(t),Reo=r(WMe," \u2014 "),fR=n(WMe,"A",{href:!0});var $jr=s(fR);Beo=r($jr,"PhobertTokenizer"),$jr.forEach(t),Peo=r(WMe," (PhoBERT model)"),WMe.forEach(t),Ieo=i(S),Eg=n(S,"LI",{});var HMe=s(Eg);Yoe=n(HMe,"STRONG",{});var kjr=s(Yoe);qeo=r(kjr,"plbart"),kjr.forEach(t),Neo=r(HMe," \u2014 "),mR=n(HMe,"A",{href:!0});var Sjr=s(mR);jeo=r(Sjr,"PLBartTokenizer"),Sjr.forEach(t),Deo=r(HMe," (PLBart model)"),HMe.forEach(t),Geo=i(S),Cg=n(S,"LI",{});var UMe=s(Cg);Koe=n(UMe,"STRONG",{});var Rjr=s(Koe);Oeo=r(Rjr,"prophetnet"),Rjr.forEach(t),Veo=r(UMe," \u2014 "),gR=n(UMe,"A",{href:!0});var Bjr=s(gR);Xeo=r(Bjr,"ProphetNetTokenizer"),Bjr.forEach(t),zeo=r(UMe," (ProphetNet model)"),UMe.forEach(t),Qeo=i(S),fs=n(S,"LI",{});var nx=s(fs);Zoe=n(nx,"STRONG",{});var Pjr=s(Zoe);Weo=r(Pjr,"qdqbert"),Pjr.forEach(t),Heo=r(nx," \u2014 "),hR=n(nx,"A",{href:!0});var Ijr=s(hR);Ueo=r(Ijr,"BertTokenizer"),Ijr.forEach(t),Jeo=r(nx," or "),pR=n(nx,"A",{href:!0});var qjr=s(pR);Yeo=r(qjr,"BertTokenizerFast"),qjr.forEach(t),Keo=r(nx," (QDQBert model)"),nx.forEach(t),Zeo=i(S),wg=n(S,"LI",{});var JMe=s(wg);ere=n(JMe,"STRONG",{});var Njr=s(ere);eoo=r(Njr,"rag"),Njr.forEach(t),ooo=r(JMe," \u2014 "),uR=n(JMe,"A",{href:!0});var jjr=s(uR);roo=r(jjr,"RagTokenizer"),jjr.forEach(t),too=r(JMe," (RAG model)"),JMe.forEach(t),aoo=i(S),ms=n(S,"LI",{});var sx=s(ms);ore=n(sx,"STRONG",{});var Djr=s(ore);noo=r(Djr,"realm"),Djr.forEach(t),soo=r(sx," \u2014 "),_R=n(sx,"A",{href:!0});var Gjr=s(_R);loo=r(Gjr,"RealmTokenizer"),Gjr.forEach(t),ioo=r(sx," or "),bR=n(sx,"A",{href:!0});var Ojr=s(bR);doo=r(Ojr,"RealmTokenizerFast"),Ojr.forEach(t),coo=r(sx," (Realm model)"),sx.forEach(t),foo=i(S),gs=n(S,"LI",{});var lx=s(gs);rre=n(lx,"STRONG",{});var Vjr=s(rre);moo=r(Vjr,"reformer"),Vjr.forEach(t),goo=r(lx," \u2014 "),vR=n(lx,"A",{href:!0});var Xjr=s(vR);hoo=r(Xjr,"ReformerTokenizer"),Xjr.forEach(t),poo=r(lx," or "),FR=n(lx,"A",{href:!0});var zjr=s(FR);uoo=r(zjr,"ReformerTokenizerFast"),zjr.forEach(t),_oo=r(lx," (Reformer model)"),lx.forEach(t),boo=i(S),hs=n(S,"LI",{});var ix=s(hs);tre=n(ix,"STRONG",{});var Qjr=s(tre);voo=r(Qjr,"rembert"),Qjr.forEach(t),Foo=r(ix," \u2014 "),TR=n(ix,"A",{href:!0});var Wjr=s(TR);Too=r(Wjr,"RemBertTokenizer"),Wjr.forEach(t),Moo=r(ix," or "),MR=n(ix,"A",{href:!0});var Hjr=s(MR);Eoo=r(Hjr,"RemBertTokenizerFast"),Hjr.forEach(t),Coo=r(ix," (RemBERT model)"),ix.forEach(t),woo=i(S),ps=n(S,"LI",{});var dx=s(ps);are=n(dx,"STRONG",{});var Ujr=s(are);Aoo=r(Ujr,"retribert"),Ujr.forEach(t),yoo=r(dx," \u2014 "),ER=n(dx,"A",{href:!0});var Jjr=s(ER);Loo=r(Jjr,"RetriBertTokenizer"),Jjr.forEach(t),xoo=r(dx," or "),CR=n(dx,"A",{href:!0});var Yjr=s(CR);$oo=r(Yjr,"RetriBertTokenizerFast"),Yjr.forEach(t),koo=r(dx," (RetriBERT model)"),dx.forEach(t),Soo=i(S),us=n(S,"LI",{});var cx=s(us);nre=n(cx,"STRONG",{});var Kjr=s(nre);Roo=r(Kjr,"roberta"),Kjr.forEach(t),Boo=r(cx," \u2014 "),wR=n(cx,"A",{href:!0});var Zjr=s(wR);Poo=r(Zjr,"RobertaTokenizer"),Zjr.forEach(t),Ioo=r(cx," or "),AR=n(cx,"A",{href:!0});var eDr=s(AR);qoo=r(eDr,"RobertaTokenizerFast"),eDr.forEach(t),Noo=r(cx," (RoBERTa model)"),cx.forEach(t),joo=i(S),_s=n(S,"LI",{});var fx=s(_s);sre=n(fx,"STRONG",{});var oDr=s(sre);Doo=r(oDr,"roformer"),oDr.forEach(t),Goo=r(fx," \u2014 "),yR=n(fx,"A",{href:!0});var rDr=s(yR);Ooo=r(rDr,"RoFormerTokenizer"),rDr.forEach(t),Voo=r(fx," or "),LR=n(fx,"A",{href:!0});var tDr=s(LR);Xoo=r(tDr,"RoFormerTokenizerFast"),tDr.forEach(t),zoo=r(fx," (RoFormer model)"),fx.forEach(t),Qoo=i(S),Ag=n(S,"LI",{});var YMe=s(Ag);lre=n(YMe,"STRONG",{});var aDr=s(lre);Woo=r(aDr,"speech_to_text"),aDr.forEach(t),Hoo=r(YMe," \u2014 "),xR=n(YMe,"A",{href:!0});var nDr=s(xR);Uoo=r(nDr,"Speech2TextTokenizer"),nDr.forEach(t),Joo=r(YMe," (Speech2Text model)"),YMe.forEach(t),Yoo=i(S),yg=n(S,"LI",{});var KMe=s(yg);ire=n(KMe,"STRONG",{});var sDr=s(ire);Koo=r(sDr,"speech_to_text_2"),sDr.forEach(t),Zoo=r(KMe," \u2014 "),$R=n(KMe,"A",{href:!0});var lDr=s($R);ero=r(lDr,"Speech2Text2Tokenizer"),lDr.forEach(t),oro=r(KMe," (Speech2Text2 model)"),KMe.forEach(t),rro=i(S),bs=n(S,"LI",{});var mx=s(bs);dre=n(mx,"STRONG",{});var iDr=s(dre);tro=r(iDr,"splinter"),iDr.forEach(t),aro=r(mx," \u2014 "),kR=n(mx,"A",{href:!0});var dDr=s(kR);nro=r(dDr,"SplinterTokenizer"),dDr.forEach(t),sro=r(mx," or "),SR=n(mx,"A",{href:!0});var cDr=s(SR);lro=r(cDr,"SplinterTokenizerFast"),cDr.forEach(t),iro=r(mx," (Splinter model)"),mx.forEach(t),dro=i(S),vs=n(S,"LI",{});var gx=s(vs);cre=n(gx,"STRONG",{});var fDr=s(cre);cro=r(fDr,"squeezebert"),fDr.forEach(t),fro=r(gx," \u2014 "),RR=n(gx,"A",{href:!0});var mDr=s(RR);mro=r(mDr,"SqueezeBertTokenizer"),mDr.forEach(t),gro=r(gx," or "),BR=n(gx,"A",{href:!0});var gDr=s(BR);hro=r(gDr,"SqueezeBertTokenizerFast"),gDr.forEach(t),pro=r(gx," (SqueezeBERT model)"),gx.forEach(t),uro=i(S),Fs=n(S,"LI",{});var hx=s(Fs);fre=n(hx,"STRONG",{});var hDr=s(fre);_ro=r(hDr,"t5"),hDr.forEach(t),bro=r(hx," \u2014 "),PR=n(hx,"A",{href:!0});var pDr=s(PR);vro=r(pDr,"T5Tokenizer"),pDr.forEach(t),Fro=r(hx," or "),IR=n(hx,"A",{href:!0});var uDr=s(IR);Tro=r(uDr,"T5TokenizerFast"),uDr.forEach(t),Mro=r(hx," (T5 model)"),hx.forEach(t),Ero=i(S),Lg=n(S,"LI",{});var ZMe=s(Lg);mre=n(ZMe,"STRONG",{});var _Dr=s(mre);Cro=r(_Dr,"tapas"),_Dr.forEach(t),wro=r(ZMe," \u2014 "),qR=n(ZMe,"A",{href:!0});var bDr=s(qR);Aro=r(bDr,"TapasTokenizer"),bDr.forEach(t),yro=r(ZMe," (TAPAS model)"),ZMe.forEach(t),Lro=i(S),xg=n(S,"LI",{});var eEe=s(xg);gre=n(eEe,"STRONG",{});var vDr=s(gre);xro=r(vDr,"tapex"),vDr.forEach(t),$ro=r(eEe," \u2014 "),NR=n(eEe,"A",{href:!0});var FDr=s(NR);kro=r(FDr,"TapexTokenizer"),FDr.forEach(t),Sro=r(eEe," (TAPEX model)"),eEe.forEach(t),Rro=i(S),$g=n(S,"LI",{});var oEe=s($g);hre=n(oEe,"STRONG",{});var TDr=s(hre);Bro=r(TDr,"transfo-xl"),TDr.forEach(t),Pro=r(oEe," \u2014 "),jR=n(oEe,"A",{href:!0});var MDr=s(jR);Iro=r(MDr,"TransfoXLTokenizer"),MDr.forEach(t),qro=r(oEe," (Transformer-XL model)"),oEe.forEach(t),Nro=i(S),Ts=n(S,"LI",{});var px=s(Ts);pre=n(px,"STRONG",{});var EDr=s(pre);jro=r(EDr,"visual_bert"),EDr.forEach(t),Dro=r(px," \u2014 "),DR=n(px,"A",{href:!0});var CDr=s(DR);Gro=r(CDr,"BertTokenizer"),CDr.forEach(t),Oro=r(px," or "),GR=n(px,"A",{href:!0});var wDr=s(GR);Vro=r(wDr,"BertTokenizerFast"),wDr.forEach(t),Xro=r(px," (VisualBert model)"),px.forEach(t),zro=i(S),kg=n(S,"LI",{});var rEe=s(kg);ure=n(rEe,"STRONG",{});var ADr=s(ure);Qro=r(ADr,"wav2vec2"),ADr.forEach(t),Wro=r(rEe," \u2014 "),OR=n(rEe,"A",{href:!0});var yDr=s(OR);Hro=r(yDr,"Wav2Vec2CTCTokenizer"),yDr.forEach(t),Uro=r(rEe," (Wav2Vec2 model)"),rEe.forEach(t),Jro=i(S),Sg=n(S,"LI",{});var tEe=s(Sg);_re=n(tEe,"STRONG",{});var LDr=s(_re);Yro=r(LDr,"wav2vec2_phoneme"),LDr.forEach(t),Kro=r(tEe," \u2014 "),VR=n(tEe,"A",{href:!0});var xDr=s(VR);Zro=r(xDr,"Wav2Vec2PhonemeCTCTokenizer"),xDr.forEach(t),eto=r(tEe," (Wav2Vec2Phoneme model)"),tEe.forEach(t),oto=i(S),Ms=n(S,"LI",{});var ux=s(Ms);bre=n(ux,"STRONG",{});var $Dr=s(bre);rto=r($Dr,"xglm"),$Dr.forEach(t),tto=r(ux," \u2014 "),XR=n(ux,"A",{href:!0});var kDr=s(XR);ato=r(kDr,"XGLMTokenizer"),kDr.forEach(t),nto=r(ux," or "),zR=n(ux,"A",{href:!0});var SDr=s(zR);sto=r(SDr,"XGLMTokenizerFast"),SDr.forEach(t),lto=r(ux," (XGLM model)"),ux.forEach(t),ito=i(S),Rg=n(S,"LI",{});var aEe=s(Rg);vre=n(aEe,"STRONG",{});var RDr=s(vre);dto=r(RDr,"xlm"),RDr.forEach(t),cto=r(aEe," \u2014 "),QR=n(aEe,"A",{href:!0});var BDr=s(QR);fto=r(BDr,"XLMTokenizer"),BDr.forEach(t),mto=r(aEe," (XLM model)"),aEe.forEach(t),gto=i(S),Bg=n(S,"LI",{});var nEe=s(Bg);Fre=n(nEe,"STRONG",{});var PDr=s(Fre);hto=r(PDr,"xlm-prophetnet"),PDr.forEach(t),pto=r(nEe," \u2014 "),WR=n(nEe,"A",{href:!0});var IDr=s(WR);uto=r(IDr,"XLMProphetNetTokenizer"),IDr.forEach(t),_to=r(nEe," (XLMProphetNet model)"),nEe.forEach(t),bto=i(S),Es=n(S,"LI",{});var _x=s(Es);Tre=n(_x,"STRONG",{});var qDr=s(Tre);vto=r(qDr,"xlm-roberta"),qDr.forEach(t),Fto=r(_x," \u2014 "),HR=n(_x,"A",{href:!0});var NDr=s(HR);Tto=r(NDr,"XLMRobertaTokenizer"),NDr.forEach(t),Mto=r(_x," or "),UR=n(_x,"A",{href:!0});var jDr=s(UR);Eto=r(jDr,"XLMRobertaTokenizerFast"),jDr.forEach(t),Cto=r(_x," (XLM-RoBERTa model)"),_x.forEach(t),wto=i(S),Cs=n(S,"LI",{});var bx=s(Cs);Mre=n(bx,"STRONG",{});var DDr=s(Mre);Ato=r(DDr,"xlm-roberta-xl"),DDr.forEach(t),yto=r(bx," \u2014 "),JR=n(bx,"A",{href:!0});var GDr=s(JR);Lto=r(GDr,"RobertaTokenizer"),GDr.forEach(t),xto=r(bx," or "),YR=n(bx,"A",{href:!0});var ODr=s(YR);$to=r(ODr,"RobertaTokenizerFast"),ODr.forEach(t),kto=r(bx," (XLM-RoBERTa-XL model)"),bx.forEach(t),Sto=i(S),ws=n(S,"LI",{});var vx=s(ws);Ere=n(vx,"STRONG",{});var VDr=s(Ere);Rto=r(VDr,"xlnet"),VDr.forEach(t),Bto=r(vx," \u2014 "),KR=n(vx,"A",{href:!0});var XDr=s(KR);Pto=r(XDr,"XLNetTokenizer"),XDr.forEach(t),Ito=r(vx," or "),ZR=n(vx,"A",{href:!0});var zDr=s(ZR);qto=r(zDr,"XLNetTokenizerFast"),zDr.forEach(t),Nto=r(vx," (XLNet model)"),vx.forEach(t),jto=i(S),As=n(S,"LI",{});var Fx=s(As);Cre=n(Fx,"STRONG",{});var QDr=s(Cre);Dto=r(QDr,"yoso"),QDr.forEach(t),Gto=r(Fx," \u2014 "),eB=n(Fx,"A",{href:!0});var WDr=s(eB);Oto=r(WDr,"AlbertTokenizer"),WDr.forEach(t),Vto=r(Fx," or "),oB=n(Fx,"A",{href:!0});var HDr=s(oB);Xto=r(HDr,"AlbertTokenizerFast"),HDr.forEach(t),zto=r(Fx," (YOSO model)"),Fx.forEach(t),S.forEach(t),Qto=i(ks),T(Pg.$$.fragment,ks),ks.forEach(t),Wto=i($s),Ig=n($s,"DIV",{class:!0});var RPe=s(Ig);T(Aw.$$.fragment,RPe),Hto=i(RPe),wre=n(RPe,"P",{});var UDr=s(wre);Uto=r(UDr,"Register a new tokenizer in this mapping."),UDr.forEach(t),RPe.forEach(t),$s.forEach(t),IRe=i(f),mi=n(f,"H2",{class:!0});var BPe=s(mi);qg=n(BPe,"A",{id:!0,class:!0,href:!0});var JDr=s(qg);Are=n(JDr,"SPAN",{});var YDr=s(Are);T(yw.$$.fragment,YDr),YDr.forEach(t),JDr.forEach(t),Jto=i(BPe),yre=n(BPe,"SPAN",{});var KDr=s(yre);Yto=r(KDr,"AutoFeatureExtractor"),KDr.forEach(t),BPe.forEach(t),qRe=i(f),Co=n(f,"DIV",{class:!0});var Ss=s(Co);T(Lw.$$.fragment,Ss),Kto=i(Ss),xw=n(Ss,"P",{});var PPe=s(xw);Zto=r(PPe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),rB=n(PPe,"A",{href:!0});var ZDr=s(rB);eao=r(ZDr,"AutoFeatureExtractor.from_pretrained()"),ZDr.forEach(t),oao=r(PPe," class method."),PPe.forEach(t),rao=i(Ss),$w=n(Ss,"P",{});var IPe=s($w);tao=r(IPe,"This class cannot be instantiated directly using "),Lre=n(IPe,"CODE",{});var eGr=s(Lre);aao=r(eGr,"__init__()"),eGr.forEach(t),nao=r(IPe," (throws an error)."),IPe.forEach(t),sao=i(Ss),Xe=n(Ss,"DIV",{class:!0});var Wt=s(Xe);T(kw.$$.fragment,Wt),lao=i(Wt),xre=n(Wt,"P",{});var oGr=s(xre);iao=r(oGr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),oGr.forEach(t),dao=i(Wt),Ta=n(Wt,"P",{});var _C=s(Ta);cao=r(_C,"The feature extractor class to instantiate is selected based on the "),$re=n(_C,"CODE",{});var rGr=s($re);fao=r(rGr,"model_type"),rGr.forEach(t),mao=r(_C,` property of the config object
(either passed as an argument or loaded from `),kre=n(_C,"CODE",{});var tGr=s(kre);gao=r(tGr,"pretrained_model_name_or_path"),tGr.forEach(t),hao=r(_C,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Sre=n(_C,"CODE",{});var aGr=s(Sre);pao=r(aGr,"pretrained_model_name_or_path"),aGr.forEach(t),uao=r(_C,":"),_C.forEach(t),_ao=i(Wt),ae=n(Wt,"UL",{});var se=s(ae);Ng=n(se,"LI",{});var sEe=s(Ng);Rre=n(sEe,"STRONG",{});var nGr=s(Rre);bao=r(nGr,"beit"),nGr.forEach(t),vao=r(sEe," \u2014 "),tB=n(sEe,"A",{href:!0});var sGr=s(tB);Fao=r(sGr,"BeitFeatureExtractor"),sGr.forEach(t),Tao=r(sEe," (BEiT model)"),sEe.forEach(t),Mao=i(se),jg=n(se,"LI",{});var lEe=s(jg);Bre=n(lEe,"STRONG",{});var lGr=s(Bre);Eao=r(lGr,"clip"),lGr.forEach(t),Cao=r(lEe," \u2014 "),aB=n(lEe,"A",{href:!0});var iGr=s(aB);wao=r(iGr,"CLIPFeatureExtractor"),iGr.forEach(t),Aao=r(lEe," (CLIP model)"),lEe.forEach(t),yao=i(se),Dg=n(se,"LI",{});var iEe=s(Dg);Pre=n(iEe,"STRONG",{});var dGr=s(Pre);Lao=r(dGr,"convnext"),dGr.forEach(t),xao=r(iEe," \u2014 "),nB=n(iEe,"A",{href:!0});var cGr=s(nB);$ao=r(cGr,"ConvNextFeatureExtractor"),cGr.forEach(t),kao=r(iEe," (ConvNext model)"),iEe.forEach(t),Sao=i(se),Gg=n(se,"LI",{});var dEe=s(Gg);Ire=n(dEe,"STRONG",{});var fGr=s(Ire);Rao=r(fGr,"data2vec-audio"),fGr.forEach(t),Bao=r(dEe," \u2014 "),sB=n(dEe,"A",{href:!0});var mGr=s(sB);Pao=r(mGr,"Wav2Vec2FeatureExtractor"),mGr.forEach(t),Iao=r(dEe," (Data2VecAudio model)"),dEe.forEach(t),qao=i(se),Og=n(se,"LI",{});var cEe=s(Og);qre=n(cEe,"STRONG",{});var gGr=s(qre);Nao=r(gGr,"data2vec-vision"),gGr.forEach(t),jao=r(cEe," \u2014 "),lB=n(cEe,"A",{href:!0});var hGr=s(lB);Dao=r(hGr,"BeitFeatureExtractor"),hGr.forEach(t),Gao=r(cEe," (Data2VecVision model)"),cEe.forEach(t),Oao=i(se),Vg=n(se,"LI",{});var fEe=s(Vg);Nre=n(fEe,"STRONG",{});var pGr=s(Nre);Vao=r(pGr,"deit"),pGr.forEach(t),Xao=r(fEe," \u2014 "),iB=n(fEe,"A",{href:!0});var uGr=s(iB);zao=r(uGr,"DeiTFeatureExtractor"),uGr.forEach(t),Qao=r(fEe," (DeiT model)"),fEe.forEach(t),Wao=i(se),Xg=n(se,"LI",{});var mEe=s(Xg);jre=n(mEe,"STRONG",{});var _Gr=s(jre);Hao=r(_Gr,"detr"),_Gr.forEach(t),Uao=r(mEe," \u2014 "),dB=n(mEe,"A",{href:!0});var bGr=s(dB);Jao=r(bGr,"DetrFeatureExtractor"),bGr.forEach(t),Yao=r(mEe," (DETR model)"),mEe.forEach(t),Kao=i(se),zg=n(se,"LI",{});var gEe=s(zg);Dre=n(gEe,"STRONG",{});var vGr=s(Dre);Zao=r(vGr,"dpt"),vGr.forEach(t),eno=r(gEe," \u2014 "),cB=n(gEe,"A",{href:!0});var FGr=s(cB);ono=r(FGr,"DPTFeatureExtractor"),FGr.forEach(t),rno=r(gEe," (DPT model)"),gEe.forEach(t),tno=i(se),Qg=n(se,"LI",{});var hEe=s(Qg);Gre=n(hEe,"STRONG",{});var TGr=s(Gre);ano=r(TGr,"glpn"),TGr.forEach(t),nno=r(hEe," \u2014 "),fB=n(hEe,"A",{href:!0});var MGr=s(fB);sno=r(MGr,"GLPNFeatureExtractor"),MGr.forEach(t),lno=r(hEe," (GLPN model)"),hEe.forEach(t),ino=i(se),Wg=n(se,"LI",{});var pEe=s(Wg);Ore=n(pEe,"STRONG",{});var EGr=s(Ore);dno=r(EGr,"hubert"),EGr.forEach(t),cno=r(pEe," \u2014 "),mB=n(pEe,"A",{href:!0});var CGr=s(mB);fno=r(CGr,"Wav2Vec2FeatureExtractor"),CGr.forEach(t),mno=r(pEe," (Hubert model)"),pEe.forEach(t),gno=i(se),Hg=n(se,"LI",{});var uEe=s(Hg);Vre=n(uEe,"STRONG",{});var wGr=s(Vre);hno=r(wGr,"layoutlmv2"),wGr.forEach(t),pno=r(uEe," \u2014 "),gB=n(uEe,"A",{href:!0});var AGr=s(gB);uno=r(AGr,"LayoutLMv2FeatureExtractor"),AGr.forEach(t),_no=r(uEe," (LayoutLMv2 model)"),uEe.forEach(t),bno=i(se),Ug=n(se,"LI",{});var _Ee=s(Ug);Xre=n(_Ee,"STRONG",{});var yGr=s(Xre);vno=r(yGr,"maskformer"),yGr.forEach(t),Fno=r(_Ee," \u2014 "),hB=n(_Ee,"A",{href:!0});var LGr=s(hB);Tno=r(LGr,"MaskFormerFeatureExtractor"),LGr.forEach(t),Mno=r(_Ee," (MaskFormer model)"),_Ee.forEach(t),Eno=i(se),Jg=n(se,"LI",{});var bEe=s(Jg);zre=n(bEe,"STRONG",{});var xGr=s(zre);Cno=r(xGr,"perceiver"),xGr.forEach(t),wno=r(bEe," \u2014 "),pB=n(bEe,"A",{href:!0});var $Gr=s(pB);Ano=r($Gr,"PerceiverFeatureExtractor"),$Gr.forEach(t),yno=r(bEe," (Perceiver model)"),bEe.forEach(t),Lno=i(se),Yg=n(se,"LI",{});var vEe=s(Yg);Qre=n(vEe,"STRONG",{});var kGr=s(Qre);xno=r(kGr,"poolformer"),kGr.forEach(t),$no=r(vEe," \u2014 "),uB=n(vEe,"A",{href:!0});var SGr=s(uB);kno=r(SGr,"PoolFormerFeatureExtractor"),SGr.forEach(t),Sno=r(vEe," (PoolFormer model)"),vEe.forEach(t),Rno=i(se),Kg=n(se,"LI",{});var FEe=s(Kg);Wre=n(FEe,"STRONG",{});var RGr=s(Wre);Bno=r(RGr,"regnet"),RGr.forEach(t),Pno=r(FEe," \u2014 "),_B=n(FEe,"A",{href:!0});var BGr=s(_B);Ino=r(BGr,"ConvNextFeatureExtractor"),BGr.forEach(t),qno=r(FEe," (RegNet model)"),FEe.forEach(t),Nno=i(se),Zg=n(se,"LI",{});var TEe=s(Zg);Hre=n(TEe,"STRONG",{});var PGr=s(Hre);jno=r(PGr,"resnet"),PGr.forEach(t),Dno=r(TEe," \u2014 "),bB=n(TEe,"A",{href:!0});var IGr=s(bB);Gno=r(IGr,"ConvNextFeatureExtractor"),IGr.forEach(t),Ono=r(TEe," (ResNet model)"),TEe.forEach(t),Vno=i(se),eh=n(se,"LI",{});var MEe=s(eh);Ure=n(MEe,"STRONG",{});var qGr=s(Ure);Xno=r(qGr,"segformer"),qGr.forEach(t),zno=r(MEe," \u2014 "),vB=n(MEe,"A",{href:!0});var NGr=s(vB);Qno=r(NGr,"SegformerFeatureExtractor"),NGr.forEach(t),Wno=r(MEe," (SegFormer model)"),MEe.forEach(t),Hno=i(se),oh=n(se,"LI",{});var EEe=s(oh);Jre=n(EEe,"STRONG",{});var jGr=s(Jre);Uno=r(jGr,"speech_to_text"),jGr.forEach(t),Jno=r(EEe," \u2014 "),FB=n(EEe,"A",{href:!0});var DGr=s(FB);Yno=r(DGr,"Speech2TextFeatureExtractor"),DGr.forEach(t),Kno=r(EEe," (Speech2Text model)"),EEe.forEach(t),Zno=i(se),rh=n(se,"LI",{});var CEe=s(rh);Yre=n(CEe,"STRONG",{});var GGr=s(Yre);eso=r(GGr,"swin"),GGr.forEach(t),oso=r(CEe," \u2014 "),TB=n(CEe,"A",{href:!0});var OGr=s(TB);rso=r(OGr,"ViTFeatureExtractor"),OGr.forEach(t),tso=r(CEe," (Swin model)"),CEe.forEach(t),aso=i(se),th=n(se,"LI",{});var wEe=s(th);Kre=n(wEe,"STRONG",{});var VGr=s(Kre);nso=r(VGr,"van"),VGr.forEach(t),sso=r(wEe," \u2014 "),MB=n(wEe,"A",{href:!0});var XGr=s(MB);lso=r(XGr,"ConvNextFeatureExtractor"),XGr.forEach(t),iso=r(wEe," (VAN model)"),wEe.forEach(t),dso=i(se),ah=n(se,"LI",{});var AEe=s(ah);Zre=n(AEe,"STRONG",{});var zGr=s(Zre);cso=r(zGr,"vit"),zGr.forEach(t),fso=r(AEe," \u2014 "),EB=n(AEe,"A",{href:!0});var QGr=s(EB);mso=r(QGr,"ViTFeatureExtractor"),QGr.forEach(t),gso=r(AEe," (ViT model)"),AEe.forEach(t),hso=i(se),nh=n(se,"LI",{});var yEe=s(nh);ete=n(yEe,"STRONG",{});var WGr=s(ete);pso=r(WGr,"vit_mae"),WGr.forEach(t),uso=r(yEe," \u2014 "),CB=n(yEe,"A",{href:!0});var HGr=s(CB);_so=r(HGr,"ViTFeatureExtractor"),HGr.forEach(t),bso=r(yEe," (ViTMAE model)"),yEe.forEach(t),vso=i(se),sh=n(se,"LI",{});var LEe=s(sh);ote=n(LEe,"STRONG",{});var UGr=s(ote);Fso=r(UGr,"wav2vec2"),UGr.forEach(t),Tso=r(LEe," \u2014 "),wB=n(LEe,"A",{href:!0});var JGr=s(wB);Mso=r(JGr,"Wav2Vec2FeatureExtractor"),JGr.forEach(t),Eso=r(LEe," (Wav2Vec2 model)"),LEe.forEach(t),se.forEach(t),Cso=i(Wt),T(lh.$$.fragment,Wt),wso=i(Wt),T(ih.$$.fragment,Wt),Wt.forEach(t),Aso=i(Ss),dh=n(Ss,"DIV",{class:!0});var qPe=s(dh);T(Sw.$$.fragment,qPe),yso=i(qPe),rte=n(qPe,"P",{});var YGr=s(rte);Lso=r(YGr,"Register a new feature extractor for this class."),YGr.forEach(t),qPe.forEach(t),Ss.forEach(t),NRe=i(f),gi=n(f,"H2",{class:!0});var NPe=s(gi);ch=n(NPe,"A",{id:!0,class:!0,href:!0});var KGr=s(ch);tte=n(KGr,"SPAN",{});var ZGr=s(tte);T(Rw.$$.fragment,ZGr),ZGr.forEach(t),KGr.forEach(t),xso=i(NPe),ate=n(NPe,"SPAN",{});var eOr=s(ate);$so=r(eOr,"AutoProcessor"),eOr.forEach(t),NPe.forEach(t),jRe=i(f),wo=n(f,"DIV",{class:!0});var Rs=s(wo);T(Bw.$$.fragment,Rs),kso=i(Rs),Pw=n(Rs,"P",{});var jPe=s(Pw);Sso=r(jPe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),AB=n(jPe,"A",{href:!0});var oOr=s(AB);Rso=r(oOr,"AutoProcessor.from_pretrained()"),oOr.forEach(t),Bso=r(jPe," class method."),jPe.forEach(t),Pso=i(Rs),Iw=n(Rs,"P",{});var DPe=s(Iw);Iso=r(DPe,"This class cannot be instantiated directly using "),nte=n(DPe,"CODE",{});var rOr=s(nte);qso=r(rOr,"__init__()"),rOr.forEach(t),Nso=r(DPe," (throws an error)."),DPe.forEach(t),jso=i(Rs),ze=n(Rs,"DIV",{class:!0});var Ht=s(ze);T(qw.$$.fragment,Ht),Dso=i(Ht),ste=n(Ht,"P",{});var tOr=s(ste);Gso=r(tOr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),tOr.forEach(t),Oso=i(Ht),hi=n(Ht,"P",{});var QJ=s(hi);Vso=r(QJ,"The processor class to instantiate is selected based on the "),lte=n(QJ,"CODE",{});var aOr=s(lte);Xso=r(aOr,"model_type"),aOr.forEach(t),zso=r(QJ,` property of the config object (either
passed as an argument or loaded from `),ite=n(QJ,"CODE",{});var nOr=s(ite);Qso=r(nOr,"pretrained_model_name_or_path"),nOr.forEach(t),Wso=r(QJ," if possible):"),QJ.forEach(t),Hso=i(Ht),be=n(Ht,"UL",{});var Fe=s(be);fh=n(Fe,"LI",{});var xEe=s(fh);dte=n(xEe,"STRONG",{});var sOr=s(dte);Uso=r(sOr,"clip"),sOr.forEach(t),Jso=r(xEe," \u2014 "),yB=n(xEe,"A",{href:!0});var lOr=s(yB);Yso=r(lOr,"CLIPProcessor"),lOr.forEach(t),Kso=r(xEe," (CLIP model)"),xEe.forEach(t),Zso=i(Fe),mh=n(Fe,"LI",{});var $Ee=s(mh);cte=n($Ee,"STRONG",{});var iOr=s(cte);elo=r(iOr,"layoutlmv2"),iOr.forEach(t),olo=r($Ee," \u2014 "),LB=n($Ee,"A",{href:!0});var dOr=s(LB);rlo=r(dOr,"LayoutLMv2Processor"),dOr.forEach(t),tlo=r($Ee," (LayoutLMv2 model)"),$Ee.forEach(t),alo=i(Fe),gh=n(Fe,"LI",{});var kEe=s(gh);fte=n(kEe,"STRONG",{});var cOr=s(fte);nlo=r(cOr,"layoutxlm"),cOr.forEach(t),slo=r(kEe," \u2014 "),xB=n(kEe,"A",{href:!0});var fOr=s(xB);llo=r(fOr,"LayoutXLMProcessor"),fOr.forEach(t),ilo=r(kEe," (LayoutXLM model)"),kEe.forEach(t),dlo=i(Fe),hh=n(Fe,"LI",{});var SEe=s(hh);mte=n(SEe,"STRONG",{});var mOr=s(mte);clo=r(mOr,"sew"),mOr.forEach(t),flo=r(SEe," \u2014 "),$B=n(SEe,"A",{href:!0});var gOr=s($B);mlo=r(gOr,"Wav2Vec2Processor"),gOr.forEach(t),glo=r(SEe," (SEW model)"),SEe.forEach(t),hlo=i(Fe),ph=n(Fe,"LI",{});var REe=s(ph);gte=n(REe,"STRONG",{});var hOr=s(gte);plo=r(hOr,"sew-d"),hOr.forEach(t),ulo=r(REe," \u2014 "),kB=n(REe,"A",{href:!0});var pOr=s(kB);_lo=r(pOr,"Wav2Vec2Processor"),pOr.forEach(t),blo=r(REe," (SEW-D model)"),REe.forEach(t),vlo=i(Fe),uh=n(Fe,"LI",{});var BEe=s(uh);hte=n(BEe,"STRONG",{});var uOr=s(hte);Flo=r(uOr,"speech_to_text"),uOr.forEach(t),Tlo=r(BEe," \u2014 "),SB=n(BEe,"A",{href:!0});var _Or=s(SB);Mlo=r(_Or,"Speech2TextProcessor"),_Or.forEach(t),Elo=r(BEe," (Speech2Text model)"),BEe.forEach(t),Clo=i(Fe),_h=n(Fe,"LI",{});var PEe=s(_h);pte=n(PEe,"STRONG",{});var bOr=s(pte);wlo=r(bOr,"speech_to_text_2"),bOr.forEach(t),Alo=r(PEe," \u2014 "),RB=n(PEe,"A",{href:!0});var vOr=s(RB);ylo=r(vOr,"Speech2Text2Processor"),vOr.forEach(t),Llo=r(PEe," (Speech2Text2 model)"),PEe.forEach(t),xlo=i(Fe),bh=n(Fe,"LI",{});var IEe=s(bh);ute=n(IEe,"STRONG",{});var FOr=s(ute);$lo=r(FOr,"trocr"),FOr.forEach(t),klo=r(IEe," \u2014 "),BB=n(IEe,"A",{href:!0});var TOr=s(BB);Slo=r(TOr,"TrOCRProcessor"),TOr.forEach(t),Rlo=r(IEe," (TrOCR model)"),IEe.forEach(t),Blo=i(Fe),vh=n(Fe,"LI",{});var qEe=s(vh);_te=n(qEe,"STRONG",{});var MOr=s(_te);Plo=r(MOr,"unispeech"),MOr.forEach(t),Ilo=r(qEe," \u2014 "),PB=n(qEe,"A",{href:!0});var EOr=s(PB);qlo=r(EOr,"Wav2Vec2Processor"),EOr.forEach(t),Nlo=r(qEe," (UniSpeech model)"),qEe.forEach(t),jlo=i(Fe),Fh=n(Fe,"LI",{});var NEe=s(Fh);bte=n(NEe,"STRONG",{});var COr=s(bte);Dlo=r(COr,"unispeech-sat"),COr.forEach(t),Glo=r(NEe," \u2014 "),IB=n(NEe,"A",{href:!0});var wOr=s(IB);Olo=r(wOr,"Wav2Vec2Processor"),wOr.forEach(t),Vlo=r(NEe," (UniSpeechSat model)"),NEe.forEach(t),Xlo=i(Fe),Th=n(Fe,"LI",{});var jEe=s(Th);vte=n(jEe,"STRONG",{});var AOr=s(vte);zlo=r(AOr,"vilt"),AOr.forEach(t),Qlo=r(jEe," \u2014 "),qB=n(jEe,"A",{href:!0});var yOr=s(qB);Wlo=r(yOr,"ViltProcessor"),yOr.forEach(t),Hlo=r(jEe," (ViLT model)"),jEe.forEach(t),Ulo=i(Fe),Mh=n(Fe,"LI",{});var DEe=s(Mh);Fte=n(DEe,"STRONG",{});var LOr=s(Fte);Jlo=r(LOr,"vision-text-dual-encoder"),LOr.forEach(t),Ylo=r(DEe," \u2014 "),NB=n(DEe,"A",{href:!0});var xOr=s(NB);Klo=r(xOr,"VisionTextDualEncoderProcessor"),xOr.forEach(t),Zlo=r(DEe," (VisionTextDualEncoder model)"),DEe.forEach(t),eio=i(Fe),Eh=n(Fe,"LI",{});var GEe=s(Eh);Tte=n(GEe,"STRONG",{});var $Or=s(Tte);oio=r($Or,"wav2vec2"),$Or.forEach(t),rio=r(GEe," \u2014 "),jB=n(GEe,"A",{href:!0});var kOr=s(jB);tio=r(kOr,"Wav2Vec2Processor"),kOr.forEach(t),aio=r(GEe," (Wav2Vec2 model)"),GEe.forEach(t),nio=i(Fe),Ch=n(Fe,"LI",{});var OEe=s(Ch);Mte=n(OEe,"STRONG",{});var SOr=s(Mte);sio=r(SOr,"wavlm"),SOr.forEach(t),lio=r(OEe," \u2014 "),DB=n(OEe,"A",{href:!0});var ROr=s(DB);iio=r(ROr,"Wav2Vec2Processor"),ROr.forEach(t),dio=r(OEe," (WavLM model)"),OEe.forEach(t),Fe.forEach(t),cio=i(Ht),T(wh.$$.fragment,Ht),fio=i(Ht),T(Ah.$$.fragment,Ht),Ht.forEach(t),mio=i(Rs),yh=n(Rs,"DIV",{class:!0});var GPe=s(yh);T(Nw.$$.fragment,GPe),gio=i(GPe),Ete=n(GPe,"P",{});var BOr=s(Ete);hio=r(BOr,"Register a new processor for this class."),BOr.forEach(t),GPe.forEach(t),Rs.forEach(t),DRe=i(f),pi=n(f,"H2",{class:!0});var OPe=s(pi);Lh=n(OPe,"A",{id:!0,class:!0,href:!0});var POr=s(Lh);Cte=n(POr,"SPAN",{});var IOr=s(Cte);T(jw.$$.fragment,IOr),IOr.forEach(t),POr.forEach(t),pio=i(OPe),wte=n(OPe,"SPAN",{});var qOr=s(wte);uio=r(qOr,"AutoModel"),qOr.forEach(t),OPe.forEach(t),GRe=i(f),Ao=n(f,"DIV",{class:!0});var Bs=s(Ao);T(Dw.$$.fragment,Bs),_io=i(Bs),ui=n(Bs,"P",{});var WJ=s(ui);bio=r(WJ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),GB=n(WJ,"A",{href:!0});var NOr=s(GB);vio=r(NOr,"from_pretrained()"),NOr.forEach(t),Fio=r(WJ," class method or the "),OB=n(WJ,"A",{href:!0});var jOr=s(OB);Tio=r(jOr,"from_config()"),jOr.forEach(t),Mio=r(WJ,` class
method.`),WJ.forEach(t),Eio=i(Bs),Gw=n(Bs,"P",{});var VPe=s(Gw);Cio=r(VPe,"This class cannot be instantiated directly using "),Ate=n(VPe,"CODE",{});var DOr=s(Ate);wio=r(DOr,"__init__()"),DOr.forEach(t),Aio=r(VPe," (throws an error)."),VPe.forEach(t),yio=i(Bs),Kr=n(Bs,"DIV",{class:!0});var bC=s(Kr);T(Ow.$$.fragment,bC),Lio=i(bC),yte=n(bC,"P",{});var GOr=s(yte);xio=r(GOr,"Instantiates one of the base model classes of the library from a configuration."),GOr.forEach(t),$io=i(bC),_i=n(bC,"P",{});var HJ=s(_i);kio=r(HJ,`Note:
Loading a model from its configuration file does `),Lte=n(HJ,"STRONG",{});var OOr=s(Lte);Sio=r(OOr,"not"),OOr.forEach(t),Rio=r(HJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),VB=n(HJ,"A",{href:!0});var VOr=s(VB);Bio=r(VOr,"from_pretrained()"),VOr.forEach(t),Pio=r(HJ," to load the model weights."),HJ.forEach(t),Iio=i(bC),T(xh.$$.fragment,bC),bC.forEach(t),qio=i(Bs),Qe=n(Bs,"DIV",{class:!0});var Ut=s(Qe);T(Vw.$$.fragment,Ut),Nio=i(Ut),xte=n(Ut,"P",{});var XOr=s(xte);jio=r(XOr,"Instantiate one of the base model classes of the library from a pretrained model."),XOr.forEach(t),Dio=i(Ut),Ma=n(Ut,"P",{});var vC=s(Ma);Gio=r(vC,"The model class to instantiate is selected based on the "),$te=n(vC,"CODE",{});var zOr=s($te);Oio=r(zOr,"model_type"),zOr.forEach(t),Vio=r(vC,` property of the config object (either
passed as an argument or loaded from `),kte=n(vC,"CODE",{});var QOr=s(kte);Xio=r(QOr,"pretrained_model_name_or_path"),QOr.forEach(t),zio=r(vC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ste=n(vC,"CODE",{});var WOr=s(Ste);Qio=r(WOr,"pretrained_model_name_or_path"),WOr.forEach(t),Wio=r(vC,":"),vC.forEach(t),Hio=i(Ut),x=n(Ut,"UL",{});var $=s(x);$h=n($,"LI",{});var VEe=s($h);Rte=n(VEe,"STRONG",{});var HOr=s(Rte);Uio=r(HOr,"albert"),HOr.forEach(t),Jio=r(VEe," \u2014 "),XB=n(VEe,"A",{href:!0});var UOr=s(XB);Yio=r(UOr,"AlbertModel"),UOr.forEach(t),Kio=r(VEe," (ALBERT model)"),VEe.forEach(t),Zio=i($),kh=n($,"LI",{});var XEe=s(kh);Bte=n(XEe,"STRONG",{});var JOr=s(Bte);edo=r(JOr,"bart"),JOr.forEach(t),odo=r(XEe," \u2014 "),zB=n(XEe,"A",{href:!0});var YOr=s(zB);rdo=r(YOr,"BartModel"),YOr.forEach(t),tdo=r(XEe," (BART model)"),XEe.forEach(t),ado=i($),Sh=n($,"LI",{});var zEe=s(Sh);Pte=n(zEe,"STRONG",{});var KOr=s(Pte);ndo=r(KOr,"beit"),KOr.forEach(t),sdo=r(zEe," \u2014 "),QB=n(zEe,"A",{href:!0});var ZOr=s(QB);ldo=r(ZOr,"BeitModel"),ZOr.forEach(t),ido=r(zEe," (BEiT model)"),zEe.forEach(t),ddo=i($),Rh=n($,"LI",{});var QEe=s(Rh);Ite=n(QEe,"STRONG",{});var eVr=s(Ite);cdo=r(eVr,"bert"),eVr.forEach(t),fdo=r(QEe," \u2014 "),WB=n(QEe,"A",{href:!0});var oVr=s(WB);mdo=r(oVr,"BertModel"),oVr.forEach(t),gdo=r(QEe," (BERT model)"),QEe.forEach(t),hdo=i($),Bh=n($,"LI",{});var WEe=s(Bh);qte=n(WEe,"STRONG",{});var rVr=s(qte);pdo=r(rVr,"bert-generation"),rVr.forEach(t),udo=r(WEe," \u2014 "),HB=n(WEe,"A",{href:!0});var tVr=s(HB);_do=r(tVr,"BertGenerationEncoder"),tVr.forEach(t),bdo=r(WEe," (Bert Generation model)"),WEe.forEach(t),vdo=i($),Ph=n($,"LI",{});var HEe=s(Ph);Nte=n(HEe,"STRONG",{});var aVr=s(Nte);Fdo=r(aVr,"big_bird"),aVr.forEach(t),Tdo=r(HEe," \u2014 "),UB=n(HEe,"A",{href:!0});var nVr=s(UB);Mdo=r(nVr,"BigBirdModel"),nVr.forEach(t),Edo=r(HEe," (BigBird model)"),HEe.forEach(t),Cdo=i($),Ih=n($,"LI",{});var UEe=s(Ih);jte=n(UEe,"STRONG",{});var sVr=s(jte);wdo=r(sVr,"bigbird_pegasus"),sVr.forEach(t),Ado=r(UEe," \u2014 "),JB=n(UEe,"A",{href:!0});var lVr=s(JB);ydo=r(lVr,"BigBirdPegasusModel"),lVr.forEach(t),Ldo=r(UEe," (BigBirdPegasus model)"),UEe.forEach(t),xdo=i($),qh=n($,"LI",{});var JEe=s(qh);Dte=n(JEe,"STRONG",{});var iVr=s(Dte);$do=r(iVr,"blenderbot"),iVr.forEach(t),kdo=r(JEe," \u2014 "),YB=n(JEe,"A",{href:!0});var dVr=s(YB);Sdo=r(dVr,"BlenderbotModel"),dVr.forEach(t),Rdo=r(JEe," (Blenderbot model)"),JEe.forEach(t),Bdo=i($),Nh=n($,"LI",{});var YEe=s(Nh);Gte=n(YEe,"STRONG",{});var cVr=s(Gte);Pdo=r(cVr,"blenderbot-small"),cVr.forEach(t),Ido=r(YEe," \u2014 "),KB=n(YEe,"A",{href:!0});var fVr=s(KB);qdo=r(fVr,"BlenderbotSmallModel"),fVr.forEach(t),Ndo=r(YEe," (BlenderbotSmall model)"),YEe.forEach(t),jdo=i($),jh=n($,"LI",{});var KEe=s(jh);Ote=n(KEe,"STRONG",{});var mVr=s(Ote);Ddo=r(mVr,"camembert"),mVr.forEach(t),Gdo=r(KEe," \u2014 "),ZB=n(KEe,"A",{href:!0});var gVr=s(ZB);Odo=r(gVr,"CamembertModel"),gVr.forEach(t),Vdo=r(KEe," (CamemBERT model)"),KEe.forEach(t),Xdo=i($),Dh=n($,"LI",{});var ZEe=s(Dh);Vte=n(ZEe,"STRONG",{});var hVr=s(Vte);zdo=r(hVr,"canine"),hVr.forEach(t),Qdo=r(ZEe," \u2014 "),eP=n(ZEe,"A",{href:!0});var pVr=s(eP);Wdo=r(pVr,"CanineModel"),pVr.forEach(t),Hdo=r(ZEe," (Canine model)"),ZEe.forEach(t),Udo=i($),Gh=n($,"LI",{});var e5e=s(Gh);Xte=n(e5e,"STRONG",{});var uVr=s(Xte);Jdo=r(uVr,"clip"),uVr.forEach(t),Ydo=r(e5e," \u2014 "),oP=n(e5e,"A",{href:!0});var _Vr=s(oP);Kdo=r(_Vr,"CLIPModel"),_Vr.forEach(t),Zdo=r(e5e," (CLIP model)"),e5e.forEach(t),eco=i($),Oh=n($,"LI",{});var o5e=s(Oh);zte=n(o5e,"STRONG",{});var bVr=s(zte);oco=r(bVr,"convbert"),bVr.forEach(t),rco=r(o5e," \u2014 "),rP=n(o5e,"A",{href:!0});var vVr=s(rP);tco=r(vVr,"ConvBertModel"),vVr.forEach(t),aco=r(o5e," (ConvBERT model)"),o5e.forEach(t),nco=i($),Vh=n($,"LI",{});var r5e=s(Vh);Qte=n(r5e,"STRONG",{});var FVr=s(Qte);sco=r(FVr,"convnext"),FVr.forEach(t),lco=r(r5e," \u2014 "),tP=n(r5e,"A",{href:!0});var TVr=s(tP);ico=r(TVr,"ConvNextModel"),TVr.forEach(t),dco=r(r5e," (ConvNext model)"),r5e.forEach(t),cco=i($),Xh=n($,"LI",{});var t5e=s(Xh);Wte=n(t5e,"STRONG",{});var MVr=s(Wte);fco=r(MVr,"ctrl"),MVr.forEach(t),mco=r(t5e," \u2014 "),aP=n(t5e,"A",{href:!0});var EVr=s(aP);gco=r(EVr,"CTRLModel"),EVr.forEach(t),hco=r(t5e," (CTRL model)"),t5e.forEach(t),pco=i($),zh=n($,"LI",{});var a5e=s(zh);Hte=n(a5e,"STRONG",{});var CVr=s(Hte);uco=r(CVr,"data2vec-audio"),CVr.forEach(t),_co=r(a5e," \u2014 "),nP=n(a5e,"A",{href:!0});var wVr=s(nP);bco=r(wVr,"Data2VecAudioModel"),wVr.forEach(t),vco=r(a5e," (Data2VecAudio model)"),a5e.forEach(t),Fco=i($),Qh=n($,"LI",{});var n5e=s(Qh);Ute=n(n5e,"STRONG",{});var AVr=s(Ute);Tco=r(AVr,"data2vec-text"),AVr.forEach(t),Mco=r(n5e," \u2014 "),sP=n(n5e,"A",{href:!0});var yVr=s(sP);Eco=r(yVr,"Data2VecTextModel"),yVr.forEach(t),Cco=r(n5e," (Data2VecText model)"),n5e.forEach(t),wco=i($),Wh=n($,"LI",{});var s5e=s(Wh);Jte=n(s5e,"STRONG",{});var LVr=s(Jte);Aco=r(LVr,"data2vec-vision"),LVr.forEach(t),yco=r(s5e," \u2014 "),lP=n(s5e,"A",{href:!0});var xVr=s(lP);Lco=r(xVr,"Data2VecVisionModel"),xVr.forEach(t),xco=r(s5e," (Data2VecVision model)"),s5e.forEach(t),$co=i($),Hh=n($,"LI",{});var l5e=s(Hh);Yte=n(l5e,"STRONG",{});var $Vr=s(Yte);kco=r($Vr,"deberta"),$Vr.forEach(t),Sco=r(l5e," \u2014 "),iP=n(l5e,"A",{href:!0});var kVr=s(iP);Rco=r(kVr,"DebertaModel"),kVr.forEach(t),Bco=r(l5e," (DeBERTa model)"),l5e.forEach(t),Pco=i($),Uh=n($,"LI",{});var i5e=s(Uh);Kte=n(i5e,"STRONG",{});var SVr=s(Kte);Ico=r(SVr,"deberta-v2"),SVr.forEach(t),qco=r(i5e," \u2014 "),dP=n(i5e,"A",{href:!0});var RVr=s(dP);Nco=r(RVr,"DebertaV2Model"),RVr.forEach(t),jco=r(i5e," (DeBERTa-v2 model)"),i5e.forEach(t),Dco=i($),Jh=n($,"LI",{});var d5e=s(Jh);Zte=n(d5e,"STRONG",{});var BVr=s(Zte);Gco=r(BVr,"decision_transformer"),BVr.forEach(t),Oco=r(d5e," \u2014 "),cP=n(d5e,"A",{href:!0});var PVr=s(cP);Vco=r(PVr,"DecisionTransformerModel"),PVr.forEach(t),Xco=r(d5e," (Decision Transformer model)"),d5e.forEach(t),zco=i($),Yh=n($,"LI",{});var c5e=s(Yh);eae=n(c5e,"STRONG",{});var IVr=s(eae);Qco=r(IVr,"deit"),IVr.forEach(t),Wco=r(c5e," \u2014 "),fP=n(c5e,"A",{href:!0});var qVr=s(fP);Hco=r(qVr,"DeiTModel"),qVr.forEach(t),Uco=r(c5e," (DeiT model)"),c5e.forEach(t),Jco=i($),Kh=n($,"LI",{});var f5e=s(Kh);oae=n(f5e,"STRONG",{});var NVr=s(oae);Yco=r(NVr,"detr"),NVr.forEach(t),Kco=r(f5e," \u2014 "),mP=n(f5e,"A",{href:!0});var jVr=s(mP);Zco=r(jVr,"DetrModel"),jVr.forEach(t),efo=r(f5e," (DETR model)"),f5e.forEach(t),ofo=i($),Zh=n($,"LI",{});var m5e=s(Zh);rae=n(m5e,"STRONG",{});var DVr=s(rae);rfo=r(DVr,"distilbert"),DVr.forEach(t),tfo=r(m5e," \u2014 "),gP=n(m5e,"A",{href:!0});var GVr=s(gP);afo=r(GVr,"DistilBertModel"),GVr.forEach(t),nfo=r(m5e," (DistilBERT model)"),m5e.forEach(t),sfo=i($),ep=n($,"LI",{});var g5e=s(ep);tae=n(g5e,"STRONG",{});var OVr=s(tae);lfo=r(OVr,"dpr"),OVr.forEach(t),ifo=r(g5e," \u2014 "),hP=n(g5e,"A",{href:!0});var VVr=s(hP);dfo=r(VVr,"DPRQuestionEncoder"),VVr.forEach(t),cfo=r(g5e," (DPR model)"),g5e.forEach(t),ffo=i($),op=n($,"LI",{});var h5e=s(op);aae=n(h5e,"STRONG",{});var XVr=s(aae);mfo=r(XVr,"dpt"),XVr.forEach(t),gfo=r(h5e," \u2014 "),pP=n(h5e,"A",{href:!0});var zVr=s(pP);hfo=r(zVr,"DPTModel"),zVr.forEach(t),pfo=r(h5e," (DPT model)"),h5e.forEach(t),ufo=i($),rp=n($,"LI",{});var p5e=s(rp);nae=n(p5e,"STRONG",{});var QVr=s(nae);_fo=r(QVr,"electra"),QVr.forEach(t),bfo=r(p5e," \u2014 "),uP=n(p5e,"A",{href:!0});var WVr=s(uP);vfo=r(WVr,"ElectraModel"),WVr.forEach(t),Ffo=r(p5e," (ELECTRA model)"),p5e.forEach(t),Tfo=i($),tp=n($,"LI",{});var u5e=s(tp);sae=n(u5e,"STRONG",{});var HVr=s(sae);Mfo=r(HVr,"flaubert"),HVr.forEach(t),Efo=r(u5e," \u2014 "),_P=n(u5e,"A",{href:!0});var UVr=s(_P);Cfo=r(UVr,"FlaubertModel"),UVr.forEach(t),wfo=r(u5e," (FlauBERT model)"),u5e.forEach(t),Afo=i($),ap=n($,"LI",{});var _5e=s(ap);lae=n(_5e,"STRONG",{});var JVr=s(lae);yfo=r(JVr,"fnet"),JVr.forEach(t),Lfo=r(_5e," \u2014 "),bP=n(_5e,"A",{href:!0});var YVr=s(bP);xfo=r(YVr,"FNetModel"),YVr.forEach(t),$fo=r(_5e," (FNet model)"),_5e.forEach(t),kfo=i($),np=n($,"LI",{});var b5e=s(np);iae=n(b5e,"STRONG",{});var KVr=s(iae);Sfo=r(KVr,"fsmt"),KVr.forEach(t),Rfo=r(b5e," \u2014 "),vP=n(b5e,"A",{href:!0});var ZVr=s(vP);Bfo=r(ZVr,"FSMTModel"),ZVr.forEach(t),Pfo=r(b5e," (FairSeq Machine-Translation model)"),b5e.forEach(t),Ifo=i($),ys=n($,"LI",{});var Tx=s(ys);dae=n(Tx,"STRONG",{});var eXr=s(dae);qfo=r(eXr,"funnel"),eXr.forEach(t),Nfo=r(Tx," \u2014 "),FP=n(Tx,"A",{href:!0});var oXr=s(FP);jfo=r(oXr,"FunnelModel"),oXr.forEach(t),Dfo=r(Tx," or "),TP=n(Tx,"A",{href:!0});var rXr=s(TP);Gfo=r(rXr,"FunnelBaseModel"),rXr.forEach(t),Ofo=r(Tx," (Funnel Transformer model)"),Tx.forEach(t),Vfo=i($),sp=n($,"LI",{});var v5e=s(sp);cae=n(v5e,"STRONG",{});var tXr=s(cae);Xfo=r(tXr,"glpn"),tXr.forEach(t),zfo=r(v5e," \u2014 "),MP=n(v5e,"A",{href:!0});var aXr=s(MP);Qfo=r(aXr,"GLPNModel"),aXr.forEach(t),Wfo=r(v5e," (GLPN model)"),v5e.forEach(t),Hfo=i($),lp=n($,"LI",{});var F5e=s(lp);fae=n(F5e,"STRONG",{});var nXr=s(fae);Ufo=r(nXr,"gpt2"),nXr.forEach(t),Jfo=r(F5e," \u2014 "),EP=n(F5e,"A",{href:!0});var sXr=s(EP);Yfo=r(sXr,"GPT2Model"),sXr.forEach(t),Kfo=r(F5e," (OpenAI GPT-2 model)"),F5e.forEach(t),Zfo=i($),ip=n($,"LI",{});var T5e=s(ip);mae=n(T5e,"STRONG",{});var lXr=s(mae);emo=r(lXr,"gpt_neo"),lXr.forEach(t),omo=r(T5e," \u2014 "),CP=n(T5e,"A",{href:!0});var iXr=s(CP);rmo=r(iXr,"GPTNeoModel"),iXr.forEach(t),tmo=r(T5e," (GPT Neo model)"),T5e.forEach(t),amo=i($),dp=n($,"LI",{});var M5e=s(dp);gae=n(M5e,"STRONG",{});var dXr=s(gae);nmo=r(dXr,"gptj"),dXr.forEach(t),smo=r(M5e," \u2014 "),wP=n(M5e,"A",{href:!0});var cXr=s(wP);lmo=r(cXr,"GPTJModel"),cXr.forEach(t),imo=r(M5e," (GPT-J model)"),M5e.forEach(t),dmo=i($),cp=n($,"LI",{});var E5e=s(cp);hae=n(E5e,"STRONG",{});var fXr=s(hae);cmo=r(fXr,"hubert"),fXr.forEach(t),fmo=r(E5e," \u2014 "),AP=n(E5e,"A",{href:!0});var mXr=s(AP);mmo=r(mXr,"HubertModel"),mXr.forEach(t),gmo=r(E5e," (Hubert model)"),E5e.forEach(t),hmo=i($),fp=n($,"LI",{});var C5e=s(fp);pae=n(C5e,"STRONG",{});var gXr=s(pae);pmo=r(gXr,"ibert"),gXr.forEach(t),umo=r(C5e," \u2014 "),yP=n(C5e,"A",{href:!0});var hXr=s(yP);_mo=r(hXr,"IBertModel"),hXr.forEach(t),bmo=r(C5e," (I-BERT model)"),C5e.forEach(t),vmo=i($),mp=n($,"LI",{});var w5e=s(mp);uae=n(w5e,"STRONG",{});var pXr=s(uae);Fmo=r(pXr,"imagegpt"),pXr.forEach(t),Tmo=r(w5e," \u2014 "),LP=n(w5e,"A",{href:!0});var uXr=s(LP);Mmo=r(uXr,"ImageGPTModel"),uXr.forEach(t),Emo=r(w5e," (ImageGPT model)"),w5e.forEach(t),Cmo=i($),gp=n($,"LI",{});var A5e=s(gp);_ae=n(A5e,"STRONG",{});var _Xr=s(_ae);wmo=r(_Xr,"layoutlm"),_Xr.forEach(t),Amo=r(A5e," \u2014 "),xP=n(A5e,"A",{href:!0});var bXr=s(xP);ymo=r(bXr,"LayoutLMModel"),bXr.forEach(t),Lmo=r(A5e," (LayoutLM model)"),A5e.forEach(t),xmo=i($),hp=n($,"LI",{});var y5e=s(hp);bae=n(y5e,"STRONG",{});var vXr=s(bae);$mo=r(vXr,"layoutlmv2"),vXr.forEach(t),kmo=r(y5e," \u2014 "),$P=n(y5e,"A",{href:!0});var FXr=s($P);Smo=r(FXr,"LayoutLMv2Model"),FXr.forEach(t),Rmo=r(y5e," (LayoutLMv2 model)"),y5e.forEach(t),Bmo=i($),pp=n($,"LI",{});var L5e=s(pp);vae=n(L5e,"STRONG",{});var TXr=s(vae);Pmo=r(TXr,"led"),TXr.forEach(t),Imo=r(L5e," \u2014 "),kP=n(L5e,"A",{href:!0});var MXr=s(kP);qmo=r(MXr,"LEDModel"),MXr.forEach(t),Nmo=r(L5e," (LED model)"),L5e.forEach(t),jmo=i($),up=n($,"LI",{});var x5e=s(up);Fae=n(x5e,"STRONG",{});var EXr=s(Fae);Dmo=r(EXr,"longformer"),EXr.forEach(t),Gmo=r(x5e," \u2014 "),SP=n(x5e,"A",{href:!0});var CXr=s(SP);Omo=r(CXr,"LongformerModel"),CXr.forEach(t),Vmo=r(x5e," (Longformer model)"),x5e.forEach(t),Xmo=i($),_p=n($,"LI",{});var $5e=s(_p);Tae=n($5e,"STRONG",{});var wXr=s(Tae);zmo=r(wXr,"luke"),wXr.forEach(t),Qmo=r($5e," \u2014 "),RP=n($5e,"A",{href:!0});var AXr=s(RP);Wmo=r(AXr,"LukeModel"),AXr.forEach(t),Hmo=r($5e," (LUKE model)"),$5e.forEach(t),Umo=i($),bp=n($,"LI",{});var k5e=s(bp);Mae=n(k5e,"STRONG",{});var yXr=s(Mae);Jmo=r(yXr,"lxmert"),yXr.forEach(t),Ymo=r(k5e," \u2014 "),BP=n(k5e,"A",{href:!0});var LXr=s(BP);Kmo=r(LXr,"LxmertModel"),LXr.forEach(t),Zmo=r(k5e," (LXMERT model)"),k5e.forEach(t),ego=i($),vp=n($,"LI",{});var S5e=s(vp);Eae=n(S5e,"STRONG",{});var xXr=s(Eae);ogo=r(xXr,"m2m_100"),xXr.forEach(t),rgo=r(S5e," \u2014 "),PP=n(S5e,"A",{href:!0});var $Xr=s(PP);tgo=r($Xr,"M2M100Model"),$Xr.forEach(t),ago=r(S5e," (M2M100 model)"),S5e.forEach(t),ngo=i($),Fp=n($,"LI",{});var R5e=s(Fp);Cae=n(R5e,"STRONG",{});var kXr=s(Cae);sgo=r(kXr,"marian"),kXr.forEach(t),lgo=r(R5e," \u2014 "),IP=n(R5e,"A",{href:!0});var SXr=s(IP);igo=r(SXr,"MarianModel"),SXr.forEach(t),dgo=r(R5e," (Marian model)"),R5e.forEach(t),cgo=i($),Tp=n($,"LI",{});var B5e=s(Tp);wae=n(B5e,"STRONG",{});var RXr=s(wae);fgo=r(RXr,"maskformer"),RXr.forEach(t),mgo=r(B5e," \u2014 "),qP=n(B5e,"A",{href:!0});var BXr=s(qP);ggo=r(BXr,"MaskFormerModel"),BXr.forEach(t),hgo=r(B5e," (MaskFormer model)"),B5e.forEach(t),pgo=i($),Mp=n($,"LI",{});var P5e=s(Mp);Aae=n(P5e,"STRONG",{});var PXr=s(Aae);ugo=r(PXr,"mbart"),PXr.forEach(t),_go=r(P5e," \u2014 "),NP=n(P5e,"A",{href:!0});var IXr=s(NP);bgo=r(IXr,"MBartModel"),IXr.forEach(t),vgo=r(P5e," (mBART model)"),P5e.forEach(t),Fgo=i($),Ep=n($,"LI",{});var I5e=s(Ep);yae=n(I5e,"STRONG",{});var qXr=s(yae);Tgo=r(qXr,"megatron-bert"),qXr.forEach(t),Mgo=r(I5e," \u2014 "),jP=n(I5e,"A",{href:!0});var NXr=s(jP);Ego=r(NXr,"MegatronBertModel"),NXr.forEach(t),Cgo=r(I5e," (MegatronBert model)"),I5e.forEach(t),wgo=i($),Cp=n($,"LI",{});var q5e=s(Cp);Lae=n(q5e,"STRONG",{});var jXr=s(Lae);Ago=r(jXr,"mobilebert"),jXr.forEach(t),ygo=r(q5e," \u2014 "),DP=n(q5e,"A",{href:!0});var DXr=s(DP);Lgo=r(DXr,"MobileBertModel"),DXr.forEach(t),xgo=r(q5e," (MobileBERT model)"),q5e.forEach(t),$go=i($),wp=n($,"LI",{});var N5e=s(wp);xae=n(N5e,"STRONG",{});var GXr=s(xae);kgo=r(GXr,"mpnet"),GXr.forEach(t),Sgo=r(N5e," \u2014 "),GP=n(N5e,"A",{href:!0});var OXr=s(GP);Rgo=r(OXr,"MPNetModel"),OXr.forEach(t),Bgo=r(N5e," (MPNet model)"),N5e.forEach(t),Pgo=i($),Ap=n($,"LI",{});var j5e=s(Ap);$ae=n(j5e,"STRONG",{});var VXr=s($ae);Igo=r(VXr,"mt5"),VXr.forEach(t),qgo=r(j5e," \u2014 "),OP=n(j5e,"A",{href:!0});var XXr=s(OP);Ngo=r(XXr,"MT5Model"),XXr.forEach(t),jgo=r(j5e," (mT5 model)"),j5e.forEach(t),Dgo=i($),yp=n($,"LI",{});var D5e=s(yp);kae=n(D5e,"STRONG",{});var zXr=s(kae);Ggo=r(zXr,"nystromformer"),zXr.forEach(t),Ogo=r(D5e," \u2014 "),VP=n(D5e,"A",{href:!0});var QXr=s(VP);Vgo=r(QXr,"NystromformerModel"),QXr.forEach(t),Xgo=r(D5e," (Nystromformer model)"),D5e.forEach(t),zgo=i($),Lp=n($,"LI",{});var G5e=s(Lp);Sae=n(G5e,"STRONG",{});var WXr=s(Sae);Qgo=r(WXr,"openai-gpt"),WXr.forEach(t),Wgo=r(G5e," \u2014 "),XP=n(G5e,"A",{href:!0});var HXr=s(XP);Hgo=r(HXr,"OpenAIGPTModel"),HXr.forEach(t),Ugo=r(G5e," (OpenAI GPT model)"),G5e.forEach(t),Jgo=i($),xp=n($,"LI",{});var O5e=s(xp);Rae=n(O5e,"STRONG",{});var UXr=s(Rae);Ygo=r(UXr,"pegasus"),UXr.forEach(t),Kgo=r(O5e," \u2014 "),zP=n(O5e,"A",{href:!0});var JXr=s(zP);Zgo=r(JXr,"PegasusModel"),JXr.forEach(t),eho=r(O5e," (Pegasus model)"),O5e.forEach(t),oho=i($),$p=n($,"LI",{});var V5e=s($p);Bae=n(V5e,"STRONG",{});var YXr=s(Bae);rho=r(YXr,"perceiver"),YXr.forEach(t),tho=r(V5e," \u2014 "),QP=n(V5e,"A",{href:!0});var KXr=s(QP);aho=r(KXr,"PerceiverModel"),KXr.forEach(t),nho=r(V5e," (Perceiver model)"),V5e.forEach(t),sho=i($),kp=n($,"LI",{});var X5e=s(kp);Pae=n(X5e,"STRONG",{});var ZXr=s(Pae);lho=r(ZXr,"plbart"),ZXr.forEach(t),iho=r(X5e," \u2014 "),WP=n(X5e,"A",{href:!0});var ezr=s(WP);dho=r(ezr,"PLBartModel"),ezr.forEach(t),cho=r(X5e," (PLBart model)"),X5e.forEach(t),fho=i($),Sp=n($,"LI",{});var z5e=s(Sp);Iae=n(z5e,"STRONG",{});var ozr=s(Iae);mho=r(ozr,"poolformer"),ozr.forEach(t),gho=r(z5e," \u2014 "),HP=n(z5e,"A",{href:!0});var rzr=s(HP);hho=r(rzr,"PoolFormerModel"),rzr.forEach(t),pho=r(z5e," (PoolFormer model)"),z5e.forEach(t),uho=i($),Rp=n($,"LI",{});var Q5e=s(Rp);qae=n(Q5e,"STRONG",{});var tzr=s(qae);_ho=r(tzr,"prophetnet"),tzr.forEach(t),bho=r(Q5e," \u2014 "),UP=n(Q5e,"A",{href:!0});var azr=s(UP);vho=r(azr,"ProphetNetModel"),azr.forEach(t),Fho=r(Q5e," (ProphetNet model)"),Q5e.forEach(t),Tho=i($),Bp=n($,"LI",{});var W5e=s(Bp);Nae=n(W5e,"STRONG",{});var nzr=s(Nae);Mho=r(nzr,"qdqbert"),nzr.forEach(t),Eho=r(W5e," \u2014 "),JP=n(W5e,"A",{href:!0});var szr=s(JP);Cho=r(szr,"QDQBertModel"),szr.forEach(t),who=r(W5e," (QDQBert model)"),W5e.forEach(t),Aho=i($),Pp=n($,"LI",{});var H5e=s(Pp);jae=n(H5e,"STRONG",{});var lzr=s(jae);yho=r(lzr,"reformer"),lzr.forEach(t),Lho=r(H5e," \u2014 "),YP=n(H5e,"A",{href:!0});var izr=s(YP);xho=r(izr,"ReformerModel"),izr.forEach(t),$ho=r(H5e," (Reformer model)"),H5e.forEach(t),kho=i($),Ip=n($,"LI",{});var U5e=s(Ip);Dae=n(U5e,"STRONG",{});var dzr=s(Dae);Sho=r(dzr,"regnet"),dzr.forEach(t),Rho=r(U5e," \u2014 "),KP=n(U5e,"A",{href:!0});var czr=s(KP);Bho=r(czr,"RegNetModel"),czr.forEach(t),Pho=r(U5e," (RegNet model)"),U5e.forEach(t),Iho=i($),qp=n($,"LI",{});var J5e=s(qp);Gae=n(J5e,"STRONG",{});var fzr=s(Gae);qho=r(fzr,"rembert"),fzr.forEach(t),Nho=r(J5e," \u2014 "),ZP=n(J5e,"A",{href:!0});var mzr=s(ZP);jho=r(mzr,"RemBertModel"),mzr.forEach(t),Dho=r(J5e," (RemBERT model)"),J5e.forEach(t),Gho=i($),Np=n($,"LI",{});var Y5e=s(Np);Oae=n(Y5e,"STRONG",{});var gzr=s(Oae);Oho=r(gzr,"resnet"),gzr.forEach(t),Vho=r(Y5e," \u2014 "),eI=n(Y5e,"A",{href:!0});var hzr=s(eI);Xho=r(hzr,"ResNetModel"),hzr.forEach(t),zho=r(Y5e," (ResNet model)"),Y5e.forEach(t),Qho=i($),jp=n($,"LI",{});var K5e=s(jp);Vae=n(K5e,"STRONG",{});var pzr=s(Vae);Who=r(pzr,"retribert"),pzr.forEach(t),Hho=r(K5e," \u2014 "),oI=n(K5e,"A",{href:!0});var uzr=s(oI);Uho=r(uzr,"RetriBertModel"),uzr.forEach(t),Jho=r(K5e," (RetriBERT model)"),K5e.forEach(t),Yho=i($),Dp=n($,"LI",{});var Z5e=s(Dp);Xae=n(Z5e,"STRONG",{});var _zr=s(Xae);Kho=r(_zr,"roberta"),_zr.forEach(t),Zho=r(Z5e," \u2014 "),rI=n(Z5e,"A",{href:!0});var bzr=s(rI);epo=r(bzr,"RobertaModel"),bzr.forEach(t),opo=r(Z5e," (RoBERTa model)"),Z5e.forEach(t),rpo=i($),Gp=n($,"LI",{});var eCe=s(Gp);zae=n(eCe,"STRONG",{});var vzr=s(zae);tpo=r(vzr,"roformer"),vzr.forEach(t),apo=r(eCe," \u2014 "),tI=n(eCe,"A",{href:!0});var Fzr=s(tI);npo=r(Fzr,"RoFormerModel"),Fzr.forEach(t),spo=r(eCe," (RoFormer model)"),eCe.forEach(t),lpo=i($),Op=n($,"LI",{});var oCe=s(Op);Qae=n(oCe,"STRONG",{});var Tzr=s(Qae);ipo=r(Tzr,"segformer"),Tzr.forEach(t),dpo=r(oCe," \u2014 "),aI=n(oCe,"A",{href:!0});var Mzr=s(aI);cpo=r(Mzr,"SegformerModel"),Mzr.forEach(t),fpo=r(oCe," (SegFormer model)"),oCe.forEach(t),mpo=i($),Vp=n($,"LI",{});var rCe=s(Vp);Wae=n(rCe,"STRONG",{});var Ezr=s(Wae);gpo=r(Ezr,"sew"),Ezr.forEach(t),hpo=r(rCe," \u2014 "),nI=n(rCe,"A",{href:!0});var Czr=s(nI);ppo=r(Czr,"SEWModel"),Czr.forEach(t),upo=r(rCe," (SEW model)"),rCe.forEach(t),_po=i($),Xp=n($,"LI",{});var tCe=s(Xp);Hae=n(tCe,"STRONG",{});var wzr=s(Hae);bpo=r(wzr,"sew-d"),wzr.forEach(t),vpo=r(tCe," \u2014 "),sI=n(tCe,"A",{href:!0});var Azr=s(sI);Fpo=r(Azr,"SEWDModel"),Azr.forEach(t),Tpo=r(tCe," (SEW-D model)"),tCe.forEach(t),Mpo=i($),zp=n($,"LI",{});var aCe=s(zp);Uae=n(aCe,"STRONG",{});var yzr=s(Uae);Epo=r(yzr,"speech_to_text"),yzr.forEach(t),Cpo=r(aCe," \u2014 "),lI=n(aCe,"A",{href:!0});var Lzr=s(lI);wpo=r(Lzr,"Speech2TextModel"),Lzr.forEach(t),Apo=r(aCe," (Speech2Text model)"),aCe.forEach(t),ypo=i($),Qp=n($,"LI",{});var nCe=s(Qp);Jae=n(nCe,"STRONG",{});var xzr=s(Jae);Lpo=r(xzr,"splinter"),xzr.forEach(t),xpo=r(nCe," \u2014 "),iI=n(nCe,"A",{href:!0});var $zr=s(iI);$po=r($zr,"SplinterModel"),$zr.forEach(t),kpo=r(nCe," (Splinter model)"),nCe.forEach(t),Spo=i($),Wp=n($,"LI",{});var sCe=s(Wp);Yae=n(sCe,"STRONG",{});var kzr=s(Yae);Rpo=r(kzr,"squeezebert"),kzr.forEach(t),Bpo=r(sCe," \u2014 "),dI=n(sCe,"A",{href:!0});var Szr=s(dI);Ppo=r(Szr,"SqueezeBertModel"),Szr.forEach(t),Ipo=r(sCe," (SqueezeBERT model)"),sCe.forEach(t),qpo=i($),Hp=n($,"LI",{});var lCe=s(Hp);Kae=n(lCe,"STRONG",{});var Rzr=s(Kae);Npo=r(Rzr,"swin"),Rzr.forEach(t),jpo=r(lCe," \u2014 "),cI=n(lCe,"A",{href:!0});var Bzr=s(cI);Dpo=r(Bzr,"SwinModel"),Bzr.forEach(t),Gpo=r(lCe," (Swin model)"),lCe.forEach(t),Opo=i($),Up=n($,"LI",{});var iCe=s(Up);Zae=n(iCe,"STRONG",{});var Pzr=s(Zae);Vpo=r(Pzr,"t5"),Pzr.forEach(t),Xpo=r(iCe," \u2014 "),fI=n(iCe,"A",{href:!0});var Izr=s(fI);zpo=r(Izr,"T5Model"),Izr.forEach(t),Qpo=r(iCe," (T5 model)"),iCe.forEach(t),Wpo=i($),Jp=n($,"LI",{});var dCe=s(Jp);ene=n(dCe,"STRONG",{});var qzr=s(ene);Hpo=r(qzr,"tapas"),qzr.forEach(t),Upo=r(dCe," \u2014 "),mI=n(dCe,"A",{href:!0});var Nzr=s(mI);Jpo=r(Nzr,"TapasModel"),Nzr.forEach(t),Ypo=r(dCe," (TAPAS model)"),dCe.forEach(t),Kpo=i($),Yp=n($,"LI",{});var cCe=s(Yp);one=n(cCe,"STRONG",{});var jzr=s(one);Zpo=r(jzr,"transfo-xl"),jzr.forEach(t),euo=r(cCe," \u2014 "),gI=n(cCe,"A",{href:!0});var Dzr=s(gI);ouo=r(Dzr,"TransfoXLModel"),Dzr.forEach(t),ruo=r(cCe," (Transformer-XL model)"),cCe.forEach(t),tuo=i($),Kp=n($,"LI",{});var fCe=s(Kp);rne=n(fCe,"STRONG",{});var Gzr=s(rne);auo=r(Gzr,"unispeech"),Gzr.forEach(t),nuo=r(fCe," \u2014 "),hI=n(fCe,"A",{href:!0});var Ozr=s(hI);suo=r(Ozr,"UniSpeechModel"),Ozr.forEach(t),luo=r(fCe," (UniSpeech model)"),fCe.forEach(t),iuo=i($),Zp=n($,"LI",{});var mCe=s(Zp);tne=n(mCe,"STRONG",{});var Vzr=s(tne);duo=r(Vzr,"unispeech-sat"),Vzr.forEach(t),cuo=r(mCe," \u2014 "),pI=n(mCe,"A",{href:!0});var Xzr=s(pI);fuo=r(Xzr,"UniSpeechSatModel"),Xzr.forEach(t),muo=r(mCe," (UniSpeechSat model)"),mCe.forEach(t),guo=i($),eu=n($,"LI",{});var gCe=s(eu);ane=n(gCe,"STRONG",{});var zzr=s(ane);huo=r(zzr,"van"),zzr.forEach(t),puo=r(gCe," \u2014 "),uI=n(gCe,"A",{href:!0});var Qzr=s(uI);uuo=r(Qzr,"VanModel"),Qzr.forEach(t),_uo=r(gCe," (VAN model)"),gCe.forEach(t),buo=i($),ou=n($,"LI",{});var hCe=s(ou);nne=n(hCe,"STRONG",{});var Wzr=s(nne);vuo=r(Wzr,"vilt"),Wzr.forEach(t),Fuo=r(hCe," \u2014 "),_I=n(hCe,"A",{href:!0});var Hzr=s(_I);Tuo=r(Hzr,"ViltModel"),Hzr.forEach(t),Muo=r(hCe," (ViLT model)"),hCe.forEach(t),Euo=i($),ru=n($,"LI",{});var pCe=s(ru);sne=n(pCe,"STRONG",{});var Uzr=s(sne);Cuo=r(Uzr,"vision-text-dual-encoder"),Uzr.forEach(t),wuo=r(pCe," \u2014 "),bI=n(pCe,"A",{href:!0});var Jzr=s(bI);Auo=r(Jzr,"VisionTextDualEncoderModel"),Jzr.forEach(t),yuo=r(pCe," (VisionTextDualEncoder model)"),pCe.forEach(t),Luo=i($),tu=n($,"LI",{});var uCe=s(tu);lne=n(uCe,"STRONG",{});var Yzr=s(lne);xuo=r(Yzr,"visual_bert"),Yzr.forEach(t),$uo=r(uCe," \u2014 "),vI=n(uCe,"A",{href:!0});var Kzr=s(vI);kuo=r(Kzr,"VisualBertModel"),Kzr.forEach(t),Suo=r(uCe," (VisualBert model)"),uCe.forEach(t),Ruo=i($),au=n($,"LI",{});var _Ce=s(au);ine=n(_Ce,"STRONG",{});var Zzr=s(ine);Buo=r(Zzr,"vit"),Zzr.forEach(t),Puo=r(_Ce," \u2014 "),FI=n(_Ce,"A",{href:!0});var eQr=s(FI);Iuo=r(eQr,"ViTModel"),eQr.forEach(t),quo=r(_Ce," (ViT model)"),_Ce.forEach(t),Nuo=i($),nu=n($,"LI",{});var bCe=s(nu);dne=n(bCe,"STRONG",{});var oQr=s(dne);juo=r(oQr,"vit_mae"),oQr.forEach(t),Duo=r(bCe," \u2014 "),TI=n(bCe,"A",{href:!0});var rQr=s(TI);Guo=r(rQr,"ViTMAEModel"),rQr.forEach(t),Ouo=r(bCe," (ViTMAE model)"),bCe.forEach(t),Vuo=i($),su=n($,"LI",{});var vCe=s(su);cne=n(vCe,"STRONG",{});var tQr=s(cne);Xuo=r(tQr,"wav2vec2"),tQr.forEach(t),zuo=r(vCe," \u2014 "),MI=n(vCe,"A",{href:!0});var aQr=s(MI);Quo=r(aQr,"Wav2Vec2Model"),aQr.forEach(t),Wuo=r(vCe," (Wav2Vec2 model)"),vCe.forEach(t),Huo=i($),lu=n($,"LI",{});var FCe=s(lu);fne=n(FCe,"STRONG",{});var nQr=s(fne);Uuo=r(nQr,"wavlm"),nQr.forEach(t),Juo=r(FCe," \u2014 "),EI=n(FCe,"A",{href:!0});var sQr=s(EI);Yuo=r(sQr,"WavLMModel"),sQr.forEach(t),Kuo=r(FCe," (WavLM model)"),FCe.forEach(t),Zuo=i($),iu=n($,"LI",{});var TCe=s(iu);mne=n(TCe,"STRONG",{});var lQr=s(mne);e_o=r(lQr,"xglm"),lQr.forEach(t),o_o=r(TCe," \u2014 "),CI=n(TCe,"A",{href:!0});var iQr=s(CI);r_o=r(iQr,"XGLMModel"),iQr.forEach(t),t_o=r(TCe," (XGLM model)"),TCe.forEach(t),a_o=i($),du=n($,"LI",{});var MCe=s(du);gne=n(MCe,"STRONG",{});var dQr=s(gne);n_o=r(dQr,"xlm"),dQr.forEach(t),s_o=r(MCe," \u2014 "),wI=n(MCe,"A",{href:!0});var cQr=s(wI);l_o=r(cQr,"XLMModel"),cQr.forEach(t),i_o=r(MCe," (XLM model)"),MCe.forEach(t),d_o=i($),cu=n($,"LI",{});var ECe=s(cu);hne=n(ECe,"STRONG",{});var fQr=s(hne);c_o=r(fQr,"xlm-prophetnet"),fQr.forEach(t),f_o=r(ECe," \u2014 "),AI=n(ECe,"A",{href:!0});var mQr=s(AI);m_o=r(mQr,"XLMProphetNetModel"),mQr.forEach(t),g_o=r(ECe," (XLMProphetNet model)"),ECe.forEach(t),h_o=i($),fu=n($,"LI",{});var CCe=s(fu);pne=n(CCe,"STRONG",{});var gQr=s(pne);p_o=r(gQr,"xlm-roberta"),gQr.forEach(t),u_o=r(CCe," \u2014 "),yI=n(CCe,"A",{href:!0});var hQr=s(yI);__o=r(hQr,"XLMRobertaModel"),hQr.forEach(t),b_o=r(CCe," (XLM-RoBERTa model)"),CCe.forEach(t),v_o=i($),mu=n($,"LI",{});var wCe=s(mu);une=n(wCe,"STRONG",{});var pQr=s(une);F_o=r(pQr,"xlm-roberta-xl"),pQr.forEach(t),T_o=r(wCe," \u2014 "),LI=n(wCe,"A",{href:!0});var uQr=s(LI);M_o=r(uQr,"XLMRobertaXLModel"),uQr.forEach(t),E_o=r(wCe," (XLM-RoBERTa-XL model)"),wCe.forEach(t),C_o=i($),gu=n($,"LI",{});var ACe=s(gu);_ne=n(ACe,"STRONG",{});var _Qr=s(_ne);w_o=r(_Qr,"xlnet"),_Qr.forEach(t),A_o=r(ACe," \u2014 "),xI=n(ACe,"A",{href:!0});var bQr=s(xI);y_o=r(bQr,"XLNetModel"),bQr.forEach(t),L_o=r(ACe," (XLNet model)"),ACe.forEach(t),x_o=i($),hu=n($,"LI",{});var yCe=s(hu);bne=n(yCe,"STRONG",{});var vQr=s(bne);$_o=r(vQr,"yoso"),vQr.forEach(t),k_o=r(yCe," \u2014 "),$I=n(yCe,"A",{href:!0});var FQr=s($I);S_o=r(FQr,"YosoModel"),FQr.forEach(t),R_o=r(yCe," (YOSO model)"),yCe.forEach(t),$.forEach(t),B_o=i(Ut),pu=n(Ut,"P",{});var LCe=s(pu);P_o=r(LCe,"The model is set in evaluation mode by default using "),vne=n(LCe,"CODE",{});var TQr=s(vne);I_o=r(TQr,"model.eval()"),TQr.forEach(t),q_o=r(LCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fne=n(LCe,"CODE",{});var MQr=s(Fne);N_o=r(MQr,"model.train()"),MQr.forEach(t),LCe.forEach(t),j_o=i(Ut),T(uu.$$.fragment,Ut),Ut.forEach(t),Bs.forEach(t),ORe=i(f),bi=n(f,"H2",{class:!0});var XPe=s(bi);_u=n(XPe,"A",{id:!0,class:!0,href:!0});var EQr=s(_u);Tne=n(EQr,"SPAN",{});var CQr=s(Tne);T(Xw.$$.fragment,CQr),CQr.forEach(t),EQr.forEach(t),D_o=i(XPe),Mne=n(XPe,"SPAN",{});var wQr=s(Mne);G_o=r(wQr,"AutoModelForPreTraining"),wQr.forEach(t),XPe.forEach(t),VRe=i(f),yo=n(f,"DIV",{class:!0});var Ps=s(yo);T(zw.$$.fragment,Ps),O_o=i(Ps),vi=n(Ps,"P",{});var UJ=s(vi);V_o=r(UJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),kI=n(UJ,"A",{href:!0});var AQr=s(kI);X_o=r(AQr,"from_pretrained()"),AQr.forEach(t),z_o=r(UJ," class method or the "),SI=n(UJ,"A",{href:!0});var yQr=s(SI);Q_o=r(yQr,"from_config()"),yQr.forEach(t),W_o=r(UJ,` class
method.`),UJ.forEach(t),H_o=i(Ps),Qw=n(Ps,"P",{});var zPe=s(Qw);U_o=r(zPe,"This class cannot be instantiated directly using "),Ene=n(zPe,"CODE",{});var LQr=s(Ene);J_o=r(LQr,"__init__()"),LQr.forEach(t),Y_o=r(zPe," (throws an error)."),zPe.forEach(t),K_o=i(Ps),Zr=n(Ps,"DIV",{class:!0});var FC=s(Zr);T(Ww.$$.fragment,FC),Z_o=i(FC),Cne=n(FC,"P",{});var xQr=s(Cne);e1o=r(xQr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xQr.forEach(t),o1o=i(FC),Fi=n(FC,"P",{});var JJ=s(Fi);r1o=r(JJ,`Note:
Loading a model from its configuration file does `),wne=n(JJ,"STRONG",{});var $Qr=s(wne);t1o=r($Qr,"not"),$Qr.forEach(t),a1o=r(JJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RI=n(JJ,"A",{href:!0});var kQr=s(RI);n1o=r(kQr,"from_pretrained()"),kQr.forEach(t),s1o=r(JJ," to load the model weights."),JJ.forEach(t),l1o=i(FC),T(bu.$$.fragment,FC),FC.forEach(t),i1o=i(Ps),We=n(Ps,"DIV",{class:!0});var Jt=s(We);T(Hw.$$.fragment,Jt),d1o=i(Jt),Ane=n(Jt,"P",{});var SQr=s(Ane);c1o=r(SQr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),SQr.forEach(t),f1o=i(Jt),Ea=n(Jt,"P",{});var TC=s(Ea);m1o=r(TC,"The model class to instantiate is selected based on the "),yne=n(TC,"CODE",{});var RQr=s(yne);g1o=r(RQr,"model_type"),RQr.forEach(t),h1o=r(TC,` property of the config object (either
passed as an argument or loaded from `),Lne=n(TC,"CODE",{});var BQr=s(Lne);p1o=r(BQr,"pretrained_model_name_or_path"),BQr.forEach(t),u1o=r(TC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xne=n(TC,"CODE",{});var PQr=s(xne);_1o=r(PQr,"pretrained_model_name_or_path"),PQr.forEach(t),b1o=r(TC,":"),TC.forEach(t),v1o=i(Jt),G=n(Jt,"UL",{});var V=s(G);vu=n(V,"LI",{});var xCe=s(vu);$ne=n(xCe,"STRONG",{});var IQr=s($ne);F1o=r(IQr,"albert"),IQr.forEach(t),T1o=r(xCe," \u2014 "),BI=n(xCe,"A",{href:!0});var qQr=s(BI);M1o=r(qQr,"AlbertForPreTraining"),qQr.forEach(t),E1o=r(xCe," (ALBERT model)"),xCe.forEach(t),C1o=i(V),Fu=n(V,"LI",{});var $Ce=s(Fu);kne=n($Ce,"STRONG",{});var NQr=s(kne);w1o=r(NQr,"bart"),NQr.forEach(t),A1o=r($Ce," \u2014 "),PI=n($Ce,"A",{href:!0});var jQr=s(PI);y1o=r(jQr,"BartForConditionalGeneration"),jQr.forEach(t),L1o=r($Ce," (BART model)"),$Ce.forEach(t),x1o=i(V),Tu=n(V,"LI",{});var kCe=s(Tu);Sne=n(kCe,"STRONG",{});var DQr=s(Sne);$1o=r(DQr,"bert"),DQr.forEach(t),k1o=r(kCe," \u2014 "),II=n(kCe,"A",{href:!0});var GQr=s(II);S1o=r(GQr,"BertForPreTraining"),GQr.forEach(t),R1o=r(kCe," (BERT model)"),kCe.forEach(t),B1o=i(V),Mu=n(V,"LI",{});var SCe=s(Mu);Rne=n(SCe,"STRONG",{});var OQr=s(Rne);P1o=r(OQr,"big_bird"),OQr.forEach(t),I1o=r(SCe," \u2014 "),qI=n(SCe,"A",{href:!0});var VQr=s(qI);q1o=r(VQr,"BigBirdForPreTraining"),VQr.forEach(t),N1o=r(SCe," (BigBird model)"),SCe.forEach(t),j1o=i(V),Eu=n(V,"LI",{});var RCe=s(Eu);Bne=n(RCe,"STRONG",{});var XQr=s(Bne);D1o=r(XQr,"camembert"),XQr.forEach(t),G1o=r(RCe," \u2014 "),NI=n(RCe,"A",{href:!0});var zQr=s(NI);O1o=r(zQr,"CamembertForMaskedLM"),zQr.forEach(t),V1o=r(RCe," (CamemBERT model)"),RCe.forEach(t),X1o=i(V),Cu=n(V,"LI",{});var BCe=s(Cu);Pne=n(BCe,"STRONG",{});var QQr=s(Pne);z1o=r(QQr,"ctrl"),QQr.forEach(t),Q1o=r(BCe," \u2014 "),jI=n(BCe,"A",{href:!0});var WQr=s(jI);W1o=r(WQr,"CTRLLMHeadModel"),WQr.forEach(t),H1o=r(BCe," (CTRL model)"),BCe.forEach(t),U1o=i(V),wu=n(V,"LI",{});var PCe=s(wu);Ine=n(PCe,"STRONG",{});var HQr=s(Ine);J1o=r(HQr,"data2vec-text"),HQr.forEach(t),Y1o=r(PCe," \u2014 "),DI=n(PCe,"A",{href:!0});var UQr=s(DI);K1o=r(UQr,"Data2VecTextForMaskedLM"),UQr.forEach(t),Z1o=r(PCe," (Data2VecText model)"),PCe.forEach(t),ebo=i(V),Au=n(V,"LI",{});var ICe=s(Au);qne=n(ICe,"STRONG",{});var JQr=s(qne);obo=r(JQr,"deberta"),JQr.forEach(t),rbo=r(ICe," \u2014 "),GI=n(ICe,"A",{href:!0});var YQr=s(GI);tbo=r(YQr,"DebertaForMaskedLM"),YQr.forEach(t),abo=r(ICe," (DeBERTa model)"),ICe.forEach(t),nbo=i(V),yu=n(V,"LI",{});var qCe=s(yu);Nne=n(qCe,"STRONG",{});var KQr=s(Nne);sbo=r(KQr,"deberta-v2"),KQr.forEach(t),lbo=r(qCe," \u2014 "),OI=n(qCe,"A",{href:!0});var ZQr=s(OI);ibo=r(ZQr,"DebertaV2ForMaskedLM"),ZQr.forEach(t),dbo=r(qCe," (DeBERTa-v2 model)"),qCe.forEach(t),cbo=i(V),Lu=n(V,"LI",{});var NCe=s(Lu);jne=n(NCe,"STRONG",{});var eWr=s(jne);fbo=r(eWr,"distilbert"),eWr.forEach(t),mbo=r(NCe," \u2014 "),VI=n(NCe,"A",{href:!0});var oWr=s(VI);gbo=r(oWr,"DistilBertForMaskedLM"),oWr.forEach(t),hbo=r(NCe," (DistilBERT model)"),NCe.forEach(t),pbo=i(V),xu=n(V,"LI",{});var jCe=s(xu);Dne=n(jCe,"STRONG",{});var rWr=s(Dne);ubo=r(rWr,"electra"),rWr.forEach(t),_bo=r(jCe," \u2014 "),XI=n(jCe,"A",{href:!0});var tWr=s(XI);bbo=r(tWr,"ElectraForPreTraining"),tWr.forEach(t),vbo=r(jCe," (ELECTRA model)"),jCe.forEach(t),Fbo=i(V),$u=n(V,"LI",{});var DCe=s($u);Gne=n(DCe,"STRONG",{});var aWr=s(Gne);Tbo=r(aWr,"flaubert"),aWr.forEach(t),Mbo=r(DCe," \u2014 "),zI=n(DCe,"A",{href:!0});var nWr=s(zI);Ebo=r(nWr,"FlaubertWithLMHeadModel"),nWr.forEach(t),Cbo=r(DCe," (FlauBERT model)"),DCe.forEach(t),wbo=i(V),ku=n(V,"LI",{});var GCe=s(ku);One=n(GCe,"STRONG",{});var sWr=s(One);Abo=r(sWr,"fnet"),sWr.forEach(t),ybo=r(GCe," \u2014 "),QI=n(GCe,"A",{href:!0});var lWr=s(QI);Lbo=r(lWr,"FNetForPreTraining"),lWr.forEach(t),xbo=r(GCe," (FNet model)"),GCe.forEach(t),$bo=i(V),Su=n(V,"LI",{});var OCe=s(Su);Vne=n(OCe,"STRONG",{});var iWr=s(Vne);kbo=r(iWr,"fsmt"),iWr.forEach(t),Sbo=r(OCe," \u2014 "),WI=n(OCe,"A",{href:!0});var dWr=s(WI);Rbo=r(dWr,"FSMTForConditionalGeneration"),dWr.forEach(t),Bbo=r(OCe," (FairSeq Machine-Translation model)"),OCe.forEach(t),Pbo=i(V),Ru=n(V,"LI",{});var VCe=s(Ru);Xne=n(VCe,"STRONG",{});var cWr=s(Xne);Ibo=r(cWr,"funnel"),cWr.forEach(t),qbo=r(VCe," \u2014 "),HI=n(VCe,"A",{href:!0});var fWr=s(HI);Nbo=r(fWr,"FunnelForPreTraining"),fWr.forEach(t),jbo=r(VCe," (Funnel Transformer model)"),VCe.forEach(t),Dbo=i(V),Bu=n(V,"LI",{});var XCe=s(Bu);zne=n(XCe,"STRONG",{});var mWr=s(zne);Gbo=r(mWr,"gpt2"),mWr.forEach(t),Obo=r(XCe," \u2014 "),UI=n(XCe,"A",{href:!0});var gWr=s(UI);Vbo=r(gWr,"GPT2LMHeadModel"),gWr.forEach(t),Xbo=r(XCe," (OpenAI GPT-2 model)"),XCe.forEach(t),zbo=i(V),Pu=n(V,"LI",{});var zCe=s(Pu);Qne=n(zCe,"STRONG",{});var hWr=s(Qne);Qbo=r(hWr,"ibert"),hWr.forEach(t),Wbo=r(zCe," \u2014 "),JI=n(zCe,"A",{href:!0});var pWr=s(JI);Hbo=r(pWr,"IBertForMaskedLM"),pWr.forEach(t),Ubo=r(zCe," (I-BERT model)"),zCe.forEach(t),Jbo=i(V),Iu=n(V,"LI",{});var QCe=s(Iu);Wne=n(QCe,"STRONG",{});var uWr=s(Wne);Ybo=r(uWr,"layoutlm"),uWr.forEach(t),Kbo=r(QCe," \u2014 "),YI=n(QCe,"A",{href:!0});var _Wr=s(YI);Zbo=r(_Wr,"LayoutLMForMaskedLM"),_Wr.forEach(t),e4o=r(QCe," (LayoutLM model)"),QCe.forEach(t),o4o=i(V),qu=n(V,"LI",{});var WCe=s(qu);Hne=n(WCe,"STRONG",{});var bWr=s(Hne);r4o=r(bWr,"longformer"),bWr.forEach(t),t4o=r(WCe," \u2014 "),KI=n(WCe,"A",{href:!0});var vWr=s(KI);a4o=r(vWr,"LongformerForMaskedLM"),vWr.forEach(t),n4o=r(WCe," (Longformer model)"),WCe.forEach(t),s4o=i(V),Nu=n(V,"LI",{});var HCe=s(Nu);Une=n(HCe,"STRONG",{});var FWr=s(Une);l4o=r(FWr,"lxmert"),FWr.forEach(t),i4o=r(HCe," \u2014 "),ZI=n(HCe,"A",{href:!0});var TWr=s(ZI);d4o=r(TWr,"LxmertForPreTraining"),TWr.forEach(t),c4o=r(HCe," (LXMERT model)"),HCe.forEach(t),f4o=i(V),ju=n(V,"LI",{});var UCe=s(ju);Jne=n(UCe,"STRONG",{});var MWr=s(Jne);m4o=r(MWr,"megatron-bert"),MWr.forEach(t),g4o=r(UCe," \u2014 "),eq=n(UCe,"A",{href:!0});var EWr=s(eq);h4o=r(EWr,"MegatronBertForPreTraining"),EWr.forEach(t),p4o=r(UCe," (MegatronBert model)"),UCe.forEach(t),u4o=i(V),Du=n(V,"LI",{});var JCe=s(Du);Yne=n(JCe,"STRONG",{});var CWr=s(Yne);_4o=r(CWr,"mobilebert"),CWr.forEach(t),b4o=r(JCe," \u2014 "),oq=n(JCe,"A",{href:!0});var wWr=s(oq);v4o=r(wWr,"MobileBertForPreTraining"),wWr.forEach(t),F4o=r(JCe," (MobileBERT model)"),JCe.forEach(t),T4o=i(V),Gu=n(V,"LI",{});var YCe=s(Gu);Kne=n(YCe,"STRONG",{});var AWr=s(Kne);M4o=r(AWr,"mpnet"),AWr.forEach(t),E4o=r(YCe," \u2014 "),rq=n(YCe,"A",{href:!0});var yWr=s(rq);C4o=r(yWr,"MPNetForMaskedLM"),yWr.forEach(t),w4o=r(YCe," (MPNet model)"),YCe.forEach(t),A4o=i(V),Ou=n(V,"LI",{});var KCe=s(Ou);Zne=n(KCe,"STRONG",{});var LWr=s(Zne);y4o=r(LWr,"openai-gpt"),LWr.forEach(t),L4o=r(KCe," \u2014 "),tq=n(KCe,"A",{href:!0});var xWr=s(tq);x4o=r(xWr,"OpenAIGPTLMHeadModel"),xWr.forEach(t),$4o=r(KCe," (OpenAI GPT model)"),KCe.forEach(t),k4o=i(V),Vu=n(V,"LI",{});var ZCe=s(Vu);ese=n(ZCe,"STRONG",{});var $Wr=s(ese);S4o=r($Wr,"retribert"),$Wr.forEach(t),R4o=r(ZCe," \u2014 "),aq=n(ZCe,"A",{href:!0});var kWr=s(aq);B4o=r(kWr,"RetriBertModel"),kWr.forEach(t),P4o=r(ZCe," (RetriBERT model)"),ZCe.forEach(t),I4o=i(V),Xu=n(V,"LI",{});var e3e=s(Xu);ose=n(e3e,"STRONG",{});var SWr=s(ose);q4o=r(SWr,"roberta"),SWr.forEach(t),N4o=r(e3e," \u2014 "),nq=n(e3e,"A",{href:!0});var RWr=s(nq);j4o=r(RWr,"RobertaForMaskedLM"),RWr.forEach(t),D4o=r(e3e," (RoBERTa model)"),e3e.forEach(t),G4o=i(V),zu=n(V,"LI",{});var o3e=s(zu);rse=n(o3e,"STRONG",{});var BWr=s(rse);O4o=r(BWr,"squeezebert"),BWr.forEach(t),V4o=r(o3e," \u2014 "),sq=n(o3e,"A",{href:!0});var PWr=s(sq);X4o=r(PWr,"SqueezeBertForMaskedLM"),PWr.forEach(t),z4o=r(o3e," (SqueezeBERT model)"),o3e.forEach(t),Q4o=i(V),Qu=n(V,"LI",{});var r3e=s(Qu);tse=n(r3e,"STRONG",{});var IWr=s(tse);W4o=r(IWr,"t5"),IWr.forEach(t),H4o=r(r3e," \u2014 "),lq=n(r3e,"A",{href:!0});var qWr=s(lq);U4o=r(qWr,"T5ForConditionalGeneration"),qWr.forEach(t),J4o=r(r3e," (T5 model)"),r3e.forEach(t),Y4o=i(V),Wu=n(V,"LI",{});var t3e=s(Wu);ase=n(t3e,"STRONG",{});var NWr=s(ase);K4o=r(NWr,"tapas"),NWr.forEach(t),Z4o=r(t3e," \u2014 "),iq=n(t3e,"A",{href:!0});var jWr=s(iq);e2o=r(jWr,"TapasForMaskedLM"),jWr.forEach(t),o2o=r(t3e," (TAPAS model)"),t3e.forEach(t),r2o=i(V),Hu=n(V,"LI",{});var a3e=s(Hu);nse=n(a3e,"STRONG",{});var DWr=s(nse);t2o=r(DWr,"transfo-xl"),DWr.forEach(t),a2o=r(a3e," \u2014 "),dq=n(a3e,"A",{href:!0});var GWr=s(dq);n2o=r(GWr,"TransfoXLLMHeadModel"),GWr.forEach(t),s2o=r(a3e," (Transformer-XL model)"),a3e.forEach(t),l2o=i(V),Uu=n(V,"LI",{});var n3e=s(Uu);sse=n(n3e,"STRONG",{});var OWr=s(sse);i2o=r(OWr,"unispeech"),OWr.forEach(t),d2o=r(n3e," \u2014 "),cq=n(n3e,"A",{href:!0});var VWr=s(cq);c2o=r(VWr,"UniSpeechForPreTraining"),VWr.forEach(t),f2o=r(n3e," (UniSpeech model)"),n3e.forEach(t),m2o=i(V),Ju=n(V,"LI",{});var s3e=s(Ju);lse=n(s3e,"STRONG",{});var XWr=s(lse);g2o=r(XWr,"unispeech-sat"),XWr.forEach(t),h2o=r(s3e," \u2014 "),fq=n(s3e,"A",{href:!0});var zWr=s(fq);p2o=r(zWr,"UniSpeechSatForPreTraining"),zWr.forEach(t),u2o=r(s3e," (UniSpeechSat model)"),s3e.forEach(t),_2o=i(V),Yu=n(V,"LI",{});var l3e=s(Yu);ise=n(l3e,"STRONG",{});var QWr=s(ise);b2o=r(QWr,"visual_bert"),QWr.forEach(t),v2o=r(l3e," \u2014 "),mq=n(l3e,"A",{href:!0});var WWr=s(mq);F2o=r(WWr,"VisualBertForPreTraining"),WWr.forEach(t),T2o=r(l3e," (VisualBert model)"),l3e.forEach(t),M2o=i(V),Ku=n(V,"LI",{});var i3e=s(Ku);dse=n(i3e,"STRONG",{});var HWr=s(dse);E2o=r(HWr,"vit_mae"),HWr.forEach(t),C2o=r(i3e," \u2014 "),gq=n(i3e,"A",{href:!0});var UWr=s(gq);w2o=r(UWr,"ViTMAEForPreTraining"),UWr.forEach(t),A2o=r(i3e," (ViTMAE model)"),i3e.forEach(t),y2o=i(V),Zu=n(V,"LI",{});var d3e=s(Zu);cse=n(d3e,"STRONG",{});var JWr=s(cse);L2o=r(JWr,"wav2vec2"),JWr.forEach(t),x2o=r(d3e," \u2014 "),hq=n(d3e,"A",{href:!0});var YWr=s(hq);$2o=r(YWr,"Wav2Vec2ForPreTraining"),YWr.forEach(t),k2o=r(d3e," (Wav2Vec2 model)"),d3e.forEach(t),S2o=i(V),e_=n(V,"LI",{});var c3e=s(e_);fse=n(c3e,"STRONG",{});var KWr=s(fse);R2o=r(KWr,"xlm"),KWr.forEach(t),B2o=r(c3e," \u2014 "),pq=n(c3e,"A",{href:!0});var ZWr=s(pq);P2o=r(ZWr,"XLMWithLMHeadModel"),ZWr.forEach(t),I2o=r(c3e," (XLM model)"),c3e.forEach(t),q2o=i(V),o_=n(V,"LI",{});var f3e=s(o_);mse=n(f3e,"STRONG",{});var eHr=s(mse);N2o=r(eHr,"xlm-roberta"),eHr.forEach(t),j2o=r(f3e," \u2014 "),uq=n(f3e,"A",{href:!0});var oHr=s(uq);D2o=r(oHr,"XLMRobertaForMaskedLM"),oHr.forEach(t),G2o=r(f3e," (XLM-RoBERTa model)"),f3e.forEach(t),O2o=i(V),r_=n(V,"LI",{});var m3e=s(r_);gse=n(m3e,"STRONG",{});var rHr=s(gse);V2o=r(rHr,"xlm-roberta-xl"),rHr.forEach(t),X2o=r(m3e," \u2014 "),_q=n(m3e,"A",{href:!0});var tHr=s(_q);z2o=r(tHr,"XLMRobertaXLForMaskedLM"),tHr.forEach(t),Q2o=r(m3e," (XLM-RoBERTa-XL model)"),m3e.forEach(t),W2o=i(V),t_=n(V,"LI",{});var g3e=s(t_);hse=n(g3e,"STRONG",{});var aHr=s(hse);H2o=r(aHr,"xlnet"),aHr.forEach(t),U2o=r(g3e," \u2014 "),bq=n(g3e,"A",{href:!0});var nHr=s(bq);J2o=r(nHr,"XLNetLMHeadModel"),nHr.forEach(t),Y2o=r(g3e," (XLNet model)"),g3e.forEach(t),V.forEach(t),K2o=i(Jt),a_=n(Jt,"P",{});var h3e=s(a_);Z2o=r(h3e,"The model is set in evaluation mode by default using "),pse=n(h3e,"CODE",{});var sHr=s(pse);evo=r(sHr,"model.eval()"),sHr.forEach(t),ovo=r(h3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),use=n(h3e,"CODE",{});var lHr=s(use);rvo=r(lHr,"model.train()"),lHr.forEach(t),h3e.forEach(t),tvo=i(Jt),T(n_.$$.fragment,Jt),Jt.forEach(t),Ps.forEach(t),XRe=i(f),Ti=n(f,"H2",{class:!0});var QPe=s(Ti);s_=n(QPe,"A",{id:!0,class:!0,href:!0});var iHr=s(s_);_se=n(iHr,"SPAN",{});var dHr=s(_se);T(Uw.$$.fragment,dHr),dHr.forEach(t),iHr.forEach(t),avo=i(QPe),bse=n(QPe,"SPAN",{});var cHr=s(bse);nvo=r(cHr,"AutoModelForCausalLM"),cHr.forEach(t),QPe.forEach(t),zRe=i(f),Lo=n(f,"DIV",{class:!0});var Is=s(Lo);T(Jw.$$.fragment,Is),svo=i(Is),Mi=n(Is,"P",{});var YJ=s(Mi);lvo=r(YJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vq=n(YJ,"A",{href:!0});var fHr=s(vq);ivo=r(fHr,"from_pretrained()"),fHr.forEach(t),dvo=r(YJ," class method or the "),Fq=n(YJ,"A",{href:!0});var mHr=s(Fq);cvo=r(mHr,"from_config()"),mHr.forEach(t),fvo=r(YJ,` class
method.`),YJ.forEach(t),mvo=i(Is),Yw=n(Is,"P",{});var WPe=s(Yw);gvo=r(WPe,"This class cannot be instantiated directly using "),vse=n(WPe,"CODE",{});var gHr=s(vse);hvo=r(gHr,"__init__()"),gHr.forEach(t),pvo=r(WPe," (throws an error)."),WPe.forEach(t),uvo=i(Is),et=n(Is,"DIV",{class:!0});var MC=s(et);T(Kw.$$.fragment,MC),_vo=i(MC),Fse=n(MC,"P",{});var hHr=s(Fse);bvo=r(hHr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),hHr.forEach(t),vvo=i(MC),Ei=n(MC,"P",{});var KJ=s(Ei);Fvo=r(KJ,`Note:
Loading a model from its configuration file does `),Tse=n(KJ,"STRONG",{});var pHr=s(Tse);Tvo=r(pHr,"not"),pHr.forEach(t),Mvo=r(KJ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Tq=n(KJ,"A",{href:!0});var uHr=s(Tq);Evo=r(uHr,"from_pretrained()"),uHr.forEach(t),Cvo=r(KJ," to load the model weights."),KJ.forEach(t),wvo=i(MC),T(l_.$$.fragment,MC),MC.forEach(t),Avo=i(Is),He=n(Is,"DIV",{class:!0});var Yt=s(He);T(Zw.$$.fragment,Yt),yvo=i(Yt),Mse=n(Yt,"P",{});var _Hr=s(Mse);Lvo=r(_Hr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),_Hr.forEach(t),xvo=i(Yt),Ca=n(Yt,"P",{});var EC=s(Ca);$vo=r(EC,"The model class to instantiate is selected based on the "),Ese=n(EC,"CODE",{});var bHr=s(Ese);kvo=r(bHr,"model_type"),bHr.forEach(t),Svo=r(EC,` property of the config object (either
passed as an argument or loaded from `),Cse=n(EC,"CODE",{});var vHr=s(Cse);Rvo=r(vHr,"pretrained_model_name_or_path"),vHr.forEach(t),Bvo=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wse=n(EC,"CODE",{});var FHr=s(wse);Pvo=r(FHr,"pretrained_model_name_or_path"),FHr.forEach(t),Ivo=r(EC,":"),EC.forEach(t),qvo=i(Yt),z=n(Yt,"UL",{});var W=s(z);i_=n(W,"LI",{});var p3e=s(i_);Ase=n(p3e,"STRONG",{});var THr=s(Ase);Nvo=r(THr,"bart"),THr.forEach(t),jvo=r(p3e," \u2014 "),Mq=n(p3e,"A",{href:!0});var MHr=s(Mq);Dvo=r(MHr,"BartForCausalLM"),MHr.forEach(t),Gvo=r(p3e," (BART model)"),p3e.forEach(t),Ovo=i(W),d_=n(W,"LI",{});var u3e=s(d_);yse=n(u3e,"STRONG",{});var EHr=s(yse);Vvo=r(EHr,"bert"),EHr.forEach(t),Xvo=r(u3e," \u2014 "),Eq=n(u3e,"A",{href:!0});var CHr=s(Eq);zvo=r(CHr,"BertLMHeadModel"),CHr.forEach(t),Qvo=r(u3e," (BERT model)"),u3e.forEach(t),Wvo=i(W),c_=n(W,"LI",{});var _3e=s(c_);Lse=n(_3e,"STRONG",{});var wHr=s(Lse);Hvo=r(wHr,"bert-generation"),wHr.forEach(t),Uvo=r(_3e," \u2014 "),Cq=n(_3e,"A",{href:!0});var AHr=s(Cq);Jvo=r(AHr,"BertGenerationDecoder"),AHr.forEach(t),Yvo=r(_3e," (Bert Generation model)"),_3e.forEach(t),Kvo=i(W),f_=n(W,"LI",{});var b3e=s(f_);xse=n(b3e,"STRONG",{});var yHr=s(xse);Zvo=r(yHr,"big_bird"),yHr.forEach(t),eFo=r(b3e," \u2014 "),wq=n(b3e,"A",{href:!0});var LHr=s(wq);oFo=r(LHr,"BigBirdForCausalLM"),LHr.forEach(t),rFo=r(b3e," (BigBird model)"),b3e.forEach(t),tFo=i(W),m_=n(W,"LI",{});var v3e=s(m_);$se=n(v3e,"STRONG",{});var xHr=s($se);aFo=r(xHr,"bigbird_pegasus"),xHr.forEach(t),nFo=r(v3e," \u2014 "),Aq=n(v3e,"A",{href:!0});var $Hr=s(Aq);sFo=r($Hr,"BigBirdPegasusForCausalLM"),$Hr.forEach(t),lFo=r(v3e," (BigBirdPegasus model)"),v3e.forEach(t),iFo=i(W),g_=n(W,"LI",{});var F3e=s(g_);kse=n(F3e,"STRONG",{});var kHr=s(kse);dFo=r(kHr,"blenderbot"),kHr.forEach(t),cFo=r(F3e," \u2014 "),yq=n(F3e,"A",{href:!0});var SHr=s(yq);fFo=r(SHr,"BlenderbotForCausalLM"),SHr.forEach(t),mFo=r(F3e," (Blenderbot model)"),F3e.forEach(t),gFo=i(W),h_=n(W,"LI",{});var T3e=s(h_);Sse=n(T3e,"STRONG",{});var RHr=s(Sse);hFo=r(RHr,"blenderbot-small"),RHr.forEach(t),pFo=r(T3e," \u2014 "),Lq=n(T3e,"A",{href:!0});var BHr=s(Lq);uFo=r(BHr,"BlenderbotSmallForCausalLM"),BHr.forEach(t),_Fo=r(T3e," (BlenderbotSmall model)"),T3e.forEach(t),bFo=i(W),p_=n(W,"LI",{});var M3e=s(p_);Rse=n(M3e,"STRONG",{});var PHr=s(Rse);vFo=r(PHr,"camembert"),PHr.forEach(t),FFo=r(M3e," \u2014 "),xq=n(M3e,"A",{href:!0});var IHr=s(xq);TFo=r(IHr,"CamembertForCausalLM"),IHr.forEach(t),MFo=r(M3e," (CamemBERT model)"),M3e.forEach(t),EFo=i(W),u_=n(W,"LI",{});var E3e=s(u_);Bse=n(E3e,"STRONG",{});var qHr=s(Bse);CFo=r(qHr,"ctrl"),qHr.forEach(t),wFo=r(E3e," \u2014 "),$q=n(E3e,"A",{href:!0});var NHr=s($q);AFo=r(NHr,"CTRLLMHeadModel"),NHr.forEach(t),yFo=r(E3e," (CTRL model)"),E3e.forEach(t),LFo=i(W),__=n(W,"LI",{});var C3e=s(__);Pse=n(C3e,"STRONG",{});var jHr=s(Pse);xFo=r(jHr,"data2vec-text"),jHr.forEach(t),$Fo=r(C3e," \u2014 "),kq=n(C3e,"A",{href:!0});var DHr=s(kq);kFo=r(DHr,"Data2VecTextForCausalLM"),DHr.forEach(t),SFo=r(C3e," (Data2VecText model)"),C3e.forEach(t),RFo=i(W),b_=n(W,"LI",{});var w3e=s(b_);Ise=n(w3e,"STRONG",{});var GHr=s(Ise);BFo=r(GHr,"electra"),GHr.forEach(t),PFo=r(w3e," \u2014 "),Sq=n(w3e,"A",{href:!0});var OHr=s(Sq);IFo=r(OHr,"ElectraForCausalLM"),OHr.forEach(t),qFo=r(w3e," (ELECTRA model)"),w3e.forEach(t),NFo=i(W),v_=n(W,"LI",{});var A3e=s(v_);qse=n(A3e,"STRONG",{});var VHr=s(qse);jFo=r(VHr,"gpt2"),VHr.forEach(t),DFo=r(A3e," \u2014 "),Rq=n(A3e,"A",{href:!0});var XHr=s(Rq);GFo=r(XHr,"GPT2LMHeadModel"),XHr.forEach(t),OFo=r(A3e," (OpenAI GPT-2 model)"),A3e.forEach(t),VFo=i(W),F_=n(W,"LI",{});var y3e=s(F_);Nse=n(y3e,"STRONG",{});var zHr=s(Nse);XFo=r(zHr,"gpt_neo"),zHr.forEach(t),zFo=r(y3e," \u2014 "),Bq=n(y3e,"A",{href:!0});var QHr=s(Bq);QFo=r(QHr,"GPTNeoForCausalLM"),QHr.forEach(t),WFo=r(y3e," (GPT Neo model)"),y3e.forEach(t),HFo=i(W),T_=n(W,"LI",{});var L3e=s(T_);jse=n(L3e,"STRONG",{});var WHr=s(jse);UFo=r(WHr,"gptj"),WHr.forEach(t),JFo=r(L3e," \u2014 "),Pq=n(L3e,"A",{href:!0});var HHr=s(Pq);YFo=r(HHr,"GPTJForCausalLM"),HHr.forEach(t),KFo=r(L3e," (GPT-J model)"),L3e.forEach(t),ZFo=i(W),M_=n(W,"LI",{});var x3e=s(M_);Dse=n(x3e,"STRONG",{});var UHr=s(Dse);e6o=r(UHr,"marian"),UHr.forEach(t),o6o=r(x3e," \u2014 "),Iq=n(x3e,"A",{href:!0});var JHr=s(Iq);r6o=r(JHr,"MarianForCausalLM"),JHr.forEach(t),t6o=r(x3e," (Marian model)"),x3e.forEach(t),a6o=i(W),E_=n(W,"LI",{});var $3e=s(E_);Gse=n($3e,"STRONG",{});var YHr=s(Gse);n6o=r(YHr,"mbart"),YHr.forEach(t),s6o=r($3e," \u2014 "),qq=n($3e,"A",{href:!0});var KHr=s(qq);l6o=r(KHr,"MBartForCausalLM"),KHr.forEach(t),i6o=r($3e," (mBART model)"),$3e.forEach(t),d6o=i(W),C_=n(W,"LI",{});var k3e=s(C_);Ose=n(k3e,"STRONG",{});var ZHr=s(Ose);c6o=r(ZHr,"megatron-bert"),ZHr.forEach(t),f6o=r(k3e," \u2014 "),Nq=n(k3e,"A",{href:!0});var eUr=s(Nq);m6o=r(eUr,"MegatronBertForCausalLM"),eUr.forEach(t),g6o=r(k3e," (MegatronBert model)"),k3e.forEach(t),h6o=i(W),w_=n(W,"LI",{});var S3e=s(w_);Vse=n(S3e,"STRONG",{});var oUr=s(Vse);p6o=r(oUr,"openai-gpt"),oUr.forEach(t),u6o=r(S3e," \u2014 "),jq=n(S3e,"A",{href:!0});var rUr=s(jq);_6o=r(rUr,"OpenAIGPTLMHeadModel"),rUr.forEach(t),b6o=r(S3e," (OpenAI GPT model)"),S3e.forEach(t),v6o=i(W),A_=n(W,"LI",{});var R3e=s(A_);Xse=n(R3e,"STRONG",{});var tUr=s(Xse);F6o=r(tUr,"pegasus"),tUr.forEach(t),T6o=r(R3e," \u2014 "),Dq=n(R3e,"A",{href:!0});var aUr=s(Dq);M6o=r(aUr,"PegasusForCausalLM"),aUr.forEach(t),E6o=r(R3e," (Pegasus model)"),R3e.forEach(t),C6o=i(W),y_=n(W,"LI",{});var B3e=s(y_);zse=n(B3e,"STRONG",{});var nUr=s(zse);w6o=r(nUr,"plbart"),nUr.forEach(t),A6o=r(B3e," \u2014 "),Gq=n(B3e,"A",{href:!0});var sUr=s(Gq);y6o=r(sUr,"PLBartForCausalLM"),sUr.forEach(t),L6o=r(B3e," (PLBart model)"),B3e.forEach(t),x6o=i(W),L_=n(W,"LI",{});var P3e=s(L_);Qse=n(P3e,"STRONG",{});var lUr=s(Qse);$6o=r(lUr,"prophetnet"),lUr.forEach(t),k6o=r(P3e," \u2014 "),Oq=n(P3e,"A",{href:!0});var iUr=s(Oq);S6o=r(iUr,"ProphetNetForCausalLM"),iUr.forEach(t),R6o=r(P3e," (ProphetNet model)"),P3e.forEach(t),B6o=i(W),x_=n(W,"LI",{});var I3e=s(x_);Wse=n(I3e,"STRONG",{});var dUr=s(Wse);P6o=r(dUr,"qdqbert"),dUr.forEach(t),I6o=r(I3e," \u2014 "),Vq=n(I3e,"A",{href:!0});var cUr=s(Vq);q6o=r(cUr,"QDQBertLMHeadModel"),cUr.forEach(t),N6o=r(I3e," (QDQBert model)"),I3e.forEach(t),j6o=i(W),$_=n(W,"LI",{});var q3e=s($_);Hse=n(q3e,"STRONG",{});var fUr=s(Hse);D6o=r(fUr,"reformer"),fUr.forEach(t),G6o=r(q3e," \u2014 "),Xq=n(q3e,"A",{href:!0});var mUr=s(Xq);O6o=r(mUr,"ReformerModelWithLMHead"),mUr.forEach(t),V6o=r(q3e," (Reformer model)"),q3e.forEach(t),X6o=i(W),k_=n(W,"LI",{});var N3e=s(k_);Use=n(N3e,"STRONG",{});var gUr=s(Use);z6o=r(gUr,"rembert"),gUr.forEach(t),Q6o=r(N3e," \u2014 "),zq=n(N3e,"A",{href:!0});var hUr=s(zq);W6o=r(hUr,"RemBertForCausalLM"),hUr.forEach(t),H6o=r(N3e," (RemBERT model)"),N3e.forEach(t),U6o=i(W),S_=n(W,"LI",{});var j3e=s(S_);Jse=n(j3e,"STRONG",{});var pUr=s(Jse);J6o=r(pUr,"roberta"),pUr.forEach(t),Y6o=r(j3e," \u2014 "),Qq=n(j3e,"A",{href:!0});var uUr=s(Qq);K6o=r(uUr,"RobertaForCausalLM"),uUr.forEach(t),Z6o=r(j3e," (RoBERTa model)"),j3e.forEach(t),eTo=i(W),R_=n(W,"LI",{});var D3e=s(R_);Yse=n(D3e,"STRONG",{});var _Ur=s(Yse);oTo=r(_Ur,"roformer"),_Ur.forEach(t),rTo=r(D3e," \u2014 "),Wq=n(D3e,"A",{href:!0});var bUr=s(Wq);tTo=r(bUr,"RoFormerForCausalLM"),bUr.forEach(t),aTo=r(D3e," (RoFormer model)"),D3e.forEach(t),nTo=i(W),B_=n(W,"LI",{});var G3e=s(B_);Kse=n(G3e,"STRONG",{});var vUr=s(Kse);sTo=r(vUr,"speech_to_text_2"),vUr.forEach(t),lTo=r(G3e," \u2014 "),Hq=n(G3e,"A",{href:!0});var FUr=s(Hq);iTo=r(FUr,"Speech2Text2ForCausalLM"),FUr.forEach(t),dTo=r(G3e," (Speech2Text2 model)"),G3e.forEach(t),cTo=i(W),P_=n(W,"LI",{});var O3e=s(P_);Zse=n(O3e,"STRONG",{});var TUr=s(Zse);fTo=r(TUr,"transfo-xl"),TUr.forEach(t),mTo=r(O3e," \u2014 "),Uq=n(O3e,"A",{href:!0});var MUr=s(Uq);gTo=r(MUr,"TransfoXLLMHeadModel"),MUr.forEach(t),hTo=r(O3e," (Transformer-XL model)"),O3e.forEach(t),pTo=i(W),I_=n(W,"LI",{});var V3e=s(I_);ele=n(V3e,"STRONG",{});var EUr=s(ele);uTo=r(EUr,"trocr"),EUr.forEach(t),_To=r(V3e," \u2014 "),Jq=n(V3e,"A",{href:!0});var CUr=s(Jq);bTo=r(CUr,"TrOCRForCausalLM"),CUr.forEach(t),vTo=r(V3e," (TrOCR model)"),V3e.forEach(t),FTo=i(W),q_=n(W,"LI",{});var X3e=s(q_);ole=n(X3e,"STRONG",{});var wUr=s(ole);TTo=r(wUr,"xglm"),wUr.forEach(t),MTo=r(X3e," \u2014 "),Yq=n(X3e,"A",{href:!0});var AUr=s(Yq);ETo=r(AUr,"XGLMForCausalLM"),AUr.forEach(t),CTo=r(X3e," (XGLM model)"),X3e.forEach(t),wTo=i(W),N_=n(W,"LI",{});var z3e=s(N_);rle=n(z3e,"STRONG",{});var yUr=s(rle);ATo=r(yUr,"xlm"),yUr.forEach(t),yTo=r(z3e," \u2014 "),Kq=n(z3e,"A",{href:!0});var LUr=s(Kq);LTo=r(LUr,"XLMWithLMHeadModel"),LUr.forEach(t),xTo=r(z3e," (XLM model)"),z3e.forEach(t),$To=i(W),j_=n(W,"LI",{});var Q3e=s(j_);tle=n(Q3e,"STRONG",{});var xUr=s(tle);kTo=r(xUr,"xlm-prophetnet"),xUr.forEach(t),STo=r(Q3e," \u2014 "),Zq=n(Q3e,"A",{href:!0});var $Ur=s(Zq);RTo=r($Ur,"XLMProphetNetForCausalLM"),$Ur.forEach(t),BTo=r(Q3e," (XLMProphetNet model)"),Q3e.forEach(t),PTo=i(W),D_=n(W,"LI",{});var W3e=s(D_);ale=n(W3e,"STRONG",{});var kUr=s(ale);ITo=r(kUr,"xlm-roberta"),kUr.forEach(t),qTo=r(W3e," \u2014 "),eN=n(W3e,"A",{href:!0});var SUr=s(eN);NTo=r(SUr,"XLMRobertaForCausalLM"),SUr.forEach(t),jTo=r(W3e," (XLM-RoBERTa model)"),W3e.forEach(t),DTo=i(W),G_=n(W,"LI",{});var H3e=s(G_);nle=n(H3e,"STRONG",{});var RUr=s(nle);GTo=r(RUr,"xlm-roberta-xl"),RUr.forEach(t),OTo=r(H3e," \u2014 "),oN=n(H3e,"A",{href:!0});var BUr=s(oN);VTo=r(BUr,"XLMRobertaXLForCausalLM"),BUr.forEach(t),XTo=r(H3e," (XLM-RoBERTa-XL model)"),H3e.forEach(t),zTo=i(W),O_=n(W,"LI",{});var U3e=s(O_);sle=n(U3e,"STRONG",{});var PUr=s(sle);QTo=r(PUr,"xlnet"),PUr.forEach(t),WTo=r(U3e," \u2014 "),rN=n(U3e,"A",{href:!0});var IUr=s(rN);HTo=r(IUr,"XLNetLMHeadModel"),IUr.forEach(t),UTo=r(U3e," (XLNet model)"),U3e.forEach(t),W.forEach(t),JTo=i(Yt),V_=n(Yt,"P",{});var J3e=s(V_);YTo=r(J3e,"The model is set in evaluation mode by default using "),lle=n(J3e,"CODE",{});var qUr=s(lle);KTo=r(qUr,"model.eval()"),qUr.forEach(t),ZTo=r(J3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ile=n(J3e,"CODE",{});var NUr=s(ile);e7o=r(NUr,"model.train()"),NUr.forEach(t),J3e.forEach(t),o7o=i(Yt),T(X_.$$.fragment,Yt),Yt.forEach(t),Is.forEach(t),QRe=i(f),Ci=n(f,"H2",{class:!0});var HPe=s(Ci);z_=n(HPe,"A",{id:!0,class:!0,href:!0});var jUr=s(z_);dle=n(jUr,"SPAN",{});var DUr=s(dle);T(eA.$$.fragment,DUr),DUr.forEach(t),jUr.forEach(t),r7o=i(HPe),cle=n(HPe,"SPAN",{});var GUr=s(cle);t7o=r(GUr,"AutoModelForMaskedLM"),GUr.forEach(t),HPe.forEach(t),WRe=i(f),xo=n(f,"DIV",{class:!0});var qs=s(xo);T(oA.$$.fragment,qs),a7o=i(qs),wi=n(qs,"P",{});var ZJ=s(wi);n7o=r(ZJ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),tN=n(ZJ,"A",{href:!0});var OUr=s(tN);s7o=r(OUr,"from_pretrained()"),OUr.forEach(t),l7o=r(ZJ," class method or the "),aN=n(ZJ,"A",{href:!0});var VUr=s(aN);i7o=r(VUr,"from_config()"),VUr.forEach(t),d7o=r(ZJ,` class
method.`),ZJ.forEach(t),c7o=i(qs),rA=n(qs,"P",{});var UPe=s(rA);f7o=r(UPe,"This class cannot be instantiated directly using "),fle=n(UPe,"CODE",{});var XUr=s(fle);m7o=r(XUr,"__init__()"),XUr.forEach(t),g7o=r(UPe," (throws an error)."),UPe.forEach(t),h7o=i(qs),ot=n(qs,"DIV",{class:!0});var CC=s(ot);T(tA.$$.fragment,CC),p7o=i(CC),mle=n(CC,"P",{});var zUr=s(mle);u7o=r(zUr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),zUr.forEach(t),_7o=i(CC),Ai=n(CC,"P",{});var eY=s(Ai);b7o=r(eY,`Note:
Loading a model from its configuration file does `),gle=n(eY,"STRONG",{});var QUr=s(gle);v7o=r(QUr,"not"),QUr.forEach(t),F7o=r(eY,` load the model weights. It only affects the
model\u2019s configuration. Use `),nN=n(eY,"A",{href:!0});var WUr=s(nN);T7o=r(WUr,"from_pretrained()"),WUr.forEach(t),M7o=r(eY," to load the model weights."),eY.forEach(t),E7o=i(CC),T(Q_.$$.fragment,CC),CC.forEach(t),C7o=i(qs),Ue=n(qs,"DIV",{class:!0});var Kt=s(Ue);T(aA.$$.fragment,Kt),w7o=i(Kt),hle=n(Kt,"P",{});var HUr=s(hle);A7o=r(HUr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),HUr.forEach(t),y7o=i(Kt),wa=n(Kt,"P",{});var wC=s(wa);L7o=r(wC,"The model class to instantiate is selected based on the "),ple=n(wC,"CODE",{});var UUr=s(ple);x7o=r(UUr,"model_type"),UUr.forEach(t),$7o=r(wC,` property of the config object (either
passed as an argument or loaded from `),ule=n(wC,"CODE",{});var JUr=s(ule);k7o=r(JUr,"pretrained_model_name_or_path"),JUr.forEach(t),S7o=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_le=n(wC,"CODE",{});var YUr=s(_le);R7o=r(YUr,"pretrained_model_name_or_path"),YUr.forEach(t),B7o=r(wC,":"),wC.forEach(t),P7o=i(Kt),Q=n(Kt,"UL",{});var H=s(Q);W_=n(H,"LI",{});var Y3e=s(W_);ble=n(Y3e,"STRONG",{});var KUr=s(ble);I7o=r(KUr,"albert"),KUr.forEach(t),q7o=r(Y3e," \u2014 "),sN=n(Y3e,"A",{href:!0});var ZUr=s(sN);N7o=r(ZUr,"AlbertForMaskedLM"),ZUr.forEach(t),j7o=r(Y3e," (ALBERT model)"),Y3e.forEach(t),D7o=i(H),H_=n(H,"LI",{});var K3e=s(H_);vle=n(K3e,"STRONG",{});var eJr=s(vle);G7o=r(eJr,"bart"),eJr.forEach(t),O7o=r(K3e," \u2014 "),lN=n(K3e,"A",{href:!0});var oJr=s(lN);V7o=r(oJr,"BartForConditionalGeneration"),oJr.forEach(t),X7o=r(K3e," (BART model)"),K3e.forEach(t),z7o=i(H),U_=n(H,"LI",{});var Z3e=s(U_);Fle=n(Z3e,"STRONG",{});var rJr=s(Fle);Q7o=r(rJr,"bert"),rJr.forEach(t),W7o=r(Z3e," \u2014 "),iN=n(Z3e,"A",{href:!0});var tJr=s(iN);H7o=r(tJr,"BertForMaskedLM"),tJr.forEach(t),U7o=r(Z3e," (BERT model)"),Z3e.forEach(t),J7o=i(H),J_=n(H,"LI",{});var ewe=s(J_);Tle=n(ewe,"STRONG",{});var aJr=s(Tle);Y7o=r(aJr,"big_bird"),aJr.forEach(t),K7o=r(ewe," \u2014 "),dN=n(ewe,"A",{href:!0});var nJr=s(dN);Z7o=r(nJr,"BigBirdForMaskedLM"),nJr.forEach(t),e9o=r(ewe," (BigBird model)"),ewe.forEach(t),o9o=i(H),Y_=n(H,"LI",{});var owe=s(Y_);Mle=n(owe,"STRONG",{});var sJr=s(Mle);r9o=r(sJr,"camembert"),sJr.forEach(t),t9o=r(owe," \u2014 "),cN=n(owe,"A",{href:!0});var lJr=s(cN);a9o=r(lJr,"CamembertForMaskedLM"),lJr.forEach(t),n9o=r(owe," (CamemBERT model)"),owe.forEach(t),s9o=i(H),K_=n(H,"LI",{});var rwe=s(K_);Ele=n(rwe,"STRONG",{});var iJr=s(Ele);l9o=r(iJr,"convbert"),iJr.forEach(t),i9o=r(rwe," \u2014 "),fN=n(rwe,"A",{href:!0});var dJr=s(fN);d9o=r(dJr,"ConvBertForMaskedLM"),dJr.forEach(t),c9o=r(rwe," (ConvBERT model)"),rwe.forEach(t),f9o=i(H),Z_=n(H,"LI",{});var twe=s(Z_);Cle=n(twe,"STRONG",{});var cJr=s(Cle);m9o=r(cJr,"data2vec-text"),cJr.forEach(t),g9o=r(twe," \u2014 "),mN=n(twe,"A",{href:!0});var fJr=s(mN);h9o=r(fJr,"Data2VecTextForMaskedLM"),fJr.forEach(t),p9o=r(twe," (Data2VecText model)"),twe.forEach(t),u9o=i(H),e1=n(H,"LI",{});var awe=s(e1);wle=n(awe,"STRONG",{});var mJr=s(wle);_9o=r(mJr,"deberta"),mJr.forEach(t),b9o=r(awe," \u2014 "),gN=n(awe,"A",{href:!0});var gJr=s(gN);v9o=r(gJr,"DebertaForMaskedLM"),gJr.forEach(t),F9o=r(awe," (DeBERTa model)"),awe.forEach(t),T9o=i(H),o1=n(H,"LI",{});var nwe=s(o1);Ale=n(nwe,"STRONG",{});var hJr=s(Ale);M9o=r(hJr,"deberta-v2"),hJr.forEach(t),E9o=r(nwe," \u2014 "),hN=n(nwe,"A",{href:!0});var pJr=s(hN);C9o=r(pJr,"DebertaV2ForMaskedLM"),pJr.forEach(t),w9o=r(nwe," (DeBERTa-v2 model)"),nwe.forEach(t),A9o=i(H),r1=n(H,"LI",{});var swe=s(r1);yle=n(swe,"STRONG",{});var uJr=s(yle);y9o=r(uJr,"distilbert"),uJr.forEach(t),L9o=r(swe," \u2014 "),pN=n(swe,"A",{href:!0});var _Jr=s(pN);x9o=r(_Jr,"DistilBertForMaskedLM"),_Jr.forEach(t),$9o=r(swe," (DistilBERT model)"),swe.forEach(t),k9o=i(H),t1=n(H,"LI",{});var lwe=s(t1);Lle=n(lwe,"STRONG",{});var bJr=s(Lle);S9o=r(bJr,"electra"),bJr.forEach(t),R9o=r(lwe," \u2014 "),uN=n(lwe,"A",{href:!0});var vJr=s(uN);B9o=r(vJr,"ElectraForMaskedLM"),vJr.forEach(t),P9o=r(lwe," (ELECTRA model)"),lwe.forEach(t),I9o=i(H),a1=n(H,"LI",{});var iwe=s(a1);xle=n(iwe,"STRONG",{});var FJr=s(xle);q9o=r(FJr,"flaubert"),FJr.forEach(t),N9o=r(iwe," \u2014 "),_N=n(iwe,"A",{href:!0});var TJr=s(_N);j9o=r(TJr,"FlaubertWithLMHeadModel"),TJr.forEach(t),D9o=r(iwe," (FlauBERT model)"),iwe.forEach(t),G9o=i(H),n1=n(H,"LI",{});var dwe=s(n1);$le=n(dwe,"STRONG",{});var MJr=s($le);O9o=r(MJr,"fnet"),MJr.forEach(t),V9o=r(dwe," \u2014 "),bN=n(dwe,"A",{href:!0});var EJr=s(bN);X9o=r(EJr,"FNetForMaskedLM"),EJr.forEach(t),z9o=r(dwe," (FNet model)"),dwe.forEach(t),Q9o=i(H),s1=n(H,"LI",{});var cwe=s(s1);kle=n(cwe,"STRONG",{});var CJr=s(kle);W9o=r(CJr,"funnel"),CJr.forEach(t),H9o=r(cwe," \u2014 "),vN=n(cwe,"A",{href:!0});var wJr=s(vN);U9o=r(wJr,"FunnelForMaskedLM"),wJr.forEach(t),J9o=r(cwe," (Funnel Transformer model)"),cwe.forEach(t),Y9o=i(H),l1=n(H,"LI",{});var fwe=s(l1);Sle=n(fwe,"STRONG",{});var AJr=s(Sle);K9o=r(AJr,"ibert"),AJr.forEach(t),Z9o=r(fwe," \u2014 "),FN=n(fwe,"A",{href:!0});var yJr=s(FN);eMo=r(yJr,"IBertForMaskedLM"),yJr.forEach(t),oMo=r(fwe," (I-BERT model)"),fwe.forEach(t),rMo=i(H),i1=n(H,"LI",{});var mwe=s(i1);Rle=n(mwe,"STRONG",{});var LJr=s(Rle);tMo=r(LJr,"layoutlm"),LJr.forEach(t),aMo=r(mwe," \u2014 "),TN=n(mwe,"A",{href:!0});var xJr=s(TN);nMo=r(xJr,"LayoutLMForMaskedLM"),xJr.forEach(t),sMo=r(mwe," (LayoutLM model)"),mwe.forEach(t),lMo=i(H),d1=n(H,"LI",{});var gwe=s(d1);Ble=n(gwe,"STRONG",{});var $Jr=s(Ble);iMo=r($Jr,"longformer"),$Jr.forEach(t),dMo=r(gwe," \u2014 "),MN=n(gwe,"A",{href:!0});var kJr=s(MN);cMo=r(kJr,"LongformerForMaskedLM"),kJr.forEach(t),fMo=r(gwe," (Longformer model)"),gwe.forEach(t),mMo=i(H),c1=n(H,"LI",{});var hwe=s(c1);Ple=n(hwe,"STRONG",{});var SJr=s(Ple);gMo=r(SJr,"mbart"),SJr.forEach(t),hMo=r(hwe," \u2014 "),EN=n(hwe,"A",{href:!0});var RJr=s(EN);pMo=r(RJr,"MBartForConditionalGeneration"),RJr.forEach(t),uMo=r(hwe," (mBART model)"),hwe.forEach(t),_Mo=i(H),f1=n(H,"LI",{});var pwe=s(f1);Ile=n(pwe,"STRONG",{});var BJr=s(Ile);bMo=r(BJr,"megatron-bert"),BJr.forEach(t),vMo=r(pwe," \u2014 "),CN=n(pwe,"A",{href:!0});var PJr=s(CN);FMo=r(PJr,"MegatronBertForMaskedLM"),PJr.forEach(t),TMo=r(pwe," (MegatronBert model)"),pwe.forEach(t),MMo=i(H),m1=n(H,"LI",{});var uwe=s(m1);qle=n(uwe,"STRONG",{});var IJr=s(qle);EMo=r(IJr,"mobilebert"),IJr.forEach(t),CMo=r(uwe," \u2014 "),wN=n(uwe,"A",{href:!0});var qJr=s(wN);wMo=r(qJr,"MobileBertForMaskedLM"),qJr.forEach(t),AMo=r(uwe," (MobileBERT model)"),uwe.forEach(t),yMo=i(H),g1=n(H,"LI",{});var _we=s(g1);Nle=n(_we,"STRONG",{});var NJr=s(Nle);LMo=r(NJr,"mpnet"),NJr.forEach(t),xMo=r(_we," \u2014 "),AN=n(_we,"A",{href:!0});var jJr=s(AN);$Mo=r(jJr,"MPNetForMaskedLM"),jJr.forEach(t),kMo=r(_we," (MPNet model)"),_we.forEach(t),SMo=i(H),h1=n(H,"LI",{});var bwe=s(h1);jle=n(bwe,"STRONG",{});var DJr=s(jle);RMo=r(DJr,"nystromformer"),DJr.forEach(t),BMo=r(bwe," \u2014 "),yN=n(bwe,"A",{href:!0});var GJr=s(yN);PMo=r(GJr,"NystromformerForMaskedLM"),GJr.forEach(t),IMo=r(bwe," (Nystromformer model)"),bwe.forEach(t),qMo=i(H),p1=n(H,"LI",{});var vwe=s(p1);Dle=n(vwe,"STRONG",{});var OJr=s(Dle);NMo=r(OJr,"perceiver"),OJr.forEach(t),jMo=r(vwe," \u2014 "),LN=n(vwe,"A",{href:!0});var VJr=s(LN);DMo=r(VJr,"PerceiverForMaskedLM"),VJr.forEach(t),GMo=r(vwe," (Perceiver model)"),vwe.forEach(t),OMo=i(H),u1=n(H,"LI",{});var Fwe=s(u1);Gle=n(Fwe,"STRONG",{});var XJr=s(Gle);VMo=r(XJr,"qdqbert"),XJr.forEach(t),XMo=r(Fwe," \u2014 "),xN=n(Fwe,"A",{href:!0});var zJr=s(xN);zMo=r(zJr,"QDQBertForMaskedLM"),zJr.forEach(t),QMo=r(Fwe," (QDQBert model)"),Fwe.forEach(t),WMo=i(H),_1=n(H,"LI",{});var Twe=s(_1);Ole=n(Twe,"STRONG",{});var QJr=s(Ole);HMo=r(QJr,"reformer"),QJr.forEach(t),UMo=r(Twe," \u2014 "),$N=n(Twe,"A",{href:!0});var WJr=s($N);JMo=r(WJr,"ReformerForMaskedLM"),WJr.forEach(t),YMo=r(Twe," (Reformer model)"),Twe.forEach(t),KMo=i(H),b1=n(H,"LI",{});var Mwe=s(b1);Vle=n(Mwe,"STRONG",{});var HJr=s(Vle);ZMo=r(HJr,"rembert"),HJr.forEach(t),eEo=r(Mwe," \u2014 "),kN=n(Mwe,"A",{href:!0});var UJr=s(kN);oEo=r(UJr,"RemBertForMaskedLM"),UJr.forEach(t),rEo=r(Mwe," (RemBERT model)"),Mwe.forEach(t),tEo=i(H),v1=n(H,"LI",{});var Ewe=s(v1);Xle=n(Ewe,"STRONG",{});var JJr=s(Xle);aEo=r(JJr,"roberta"),JJr.forEach(t),nEo=r(Ewe," \u2014 "),SN=n(Ewe,"A",{href:!0});var YJr=s(SN);sEo=r(YJr,"RobertaForMaskedLM"),YJr.forEach(t),lEo=r(Ewe," (RoBERTa model)"),Ewe.forEach(t),iEo=i(H),F1=n(H,"LI",{});var Cwe=s(F1);zle=n(Cwe,"STRONG",{});var KJr=s(zle);dEo=r(KJr,"roformer"),KJr.forEach(t),cEo=r(Cwe," \u2014 "),RN=n(Cwe,"A",{href:!0});var ZJr=s(RN);fEo=r(ZJr,"RoFormerForMaskedLM"),ZJr.forEach(t),mEo=r(Cwe," (RoFormer model)"),Cwe.forEach(t),gEo=i(H),T1=n(H,"LI",{});var wwe=s(T1);Qle=n(wwe,"STRONG",{});var eYr=s(Qle);hEo=r(eYr,"squeezebert"),eYr.forEach(t),pEo=r(wwe," \u2014 "),BN=n(wwe,"A",{href:!0});var oYr=s(BN);uEo=r(oYr,"SqueezeBertForMaskedLM"),oYr.forEach(t),_Eo=r(wwe," (SqueezeBERT model)"),wwe.forEach(t),bEo=i(H),M1=n(H,"LI",{});var Awe=s(M1);Wle=n(Awe,"STRONG",{});var rYr=s(Wle);vEo=r(rYr,"tapas"),rYr.forEach(t),FEo=r(Awe," \u2014 "),PN=n(Awe,"A",{href:!0});var tYr=s(PN);TEo=r(tYr,"TapasForMaskedLM"),tYr.forEach(t),MEo=r(Awe," (TAPAS model)"),Awe.forEach(t),EEo=i(H),E1=n(H,"LI",{});var ywe=s(E1);Hle=n(ywe,"STRONG",{});var aYr=s(Hle);CEo=r(aYr,"wav2vec2"),aYr.forEach(t),wEo=r(ywe," \u2014 "),Ule=n(ywe,"CODE",{});var nYr=s(Ule);AEo=r(nYr,"Wav2Vec2ForMaskedLM"),nYr.forEach(t),yEo=r(ywe," (Wav2Vec2 model)"),ywe.forEach(t),LEo=i(H),C1=n(H,"LI",{});var Lwe=s(C1);Jle=n(Lwe,"STRONG",{});var sYr=s(Jle);xEo=r(sYr,"xlm"),sYr.forEach(t),$Eo=r(Lwe," \u2014 "),IN=n(Lwe,"A",{href:!0});var lYr=s(IN);kEo=r(lYr,"XLMWithLMHeadModel"),lYr.forEach(t),SEo=r(Lwe," (XLM model)"),Lwe.forEach(t),REo=i(H),w1=n(H,"LI",{});var xwe=s(w1);Yle=n(xwe,"STRONG",{});var iYr=s(Yle);BEo=r(iYr,"xlm-roberta"),iYr.forEach(t),PEo=r(xwe," \u2014 "),qN=n(xwe,"A",{href:!0});var dYr=s(qN);IEo=r(dYr,"XLMRobertaForMaskedLM"),dYr.forEach(t),qEo=r(xwe," (XLM-RoBERTa model)"),xwe.forEach(t),NEo=i(H),A1=n(H,"LI",{});var $we=s(A1);Kle=n($we,"STRONG",{});var cYr=s(Kle);jEo=r(cYr,"xlm-roberta-xl"),cYr.forEach(t),DEo=r($we," \u2014 "),NN=n($we,"A",{href:!0});var fYr=s(NN);GEo=r(fYr,"XLMRobertaXLForMaskedLM"),fYr.forEach(t),OEo=r($we," (XLM-RoBERTa-XL model)"),$we.forEach(t),VEo=i(H),y1=n(H,"LI",{});var kwe=s(y1);Zle=n(kwe,"STRONG",{});var mYr=s(Zle);XEo=r(mYr,"yoso"),mYr.forEach(t),zEo=r(kwe," \u2014 "),jN=n(kwe,"A",{href:!0});var gYr=s(jN);QEo=r(gYr,"YosoForMaskedLM"),gYr.forEach(t),WEo=r(kwe," (YOSO model)"),kwe.forEach(t),H.forEach(t),HEo=i(Kt),L1=n(Kt,"P",{});var Swe=s(L1);UEo=r(Swe,"The model is set in evaluation mode by default using "),eie=n(Swe,"CODE",{});var hYr=s(eie);JEo=r(hYr,"model.eval()"),hYr.forEach(t),YEo=r(Swe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),oie=n(Swe,"CODE",{});var pYr=s(oie);KEo=r(pYr,"model.train()"),pYr.forEach(t),Swe.forEach(t),ZEo=i(Kt),T(x1.$$.fragment,Kt),Kt.forEach(t),qs.forEach(t),HRe=i(f),yi=n(f,"H2",{class:!0});var JPe=s(yi);$1=n(JPe,"A",{id:!0,class:!0,href:!0});var uYr=s($1);rie=n(uYr,"SPAN",{});var _Yr=s(rie);T(nA.$$.fragment,_Yr),_Yr.forEach(t),uYr.forEach(t),e5o=i(JPe),tie=n(JPe,"SPAN",{});var bYr=s(tie);o5o=r(bYr,"AutoModelForSeq2SeqLM"),bYr.forEach(t),JPe.forEach(t),URe=i(f),$o=n(f,"DIV",{class:!0});var Ns=s($o);T(sA.$$.fragment,Ns),r5o=i(Ns),Li=n(Ns,"P",{});var oY=s(Li);t5o=r(oY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),DN=n(oY,"A",{href:!0});var vYr=s(DN);a5o=r(vYr,"from_pretrained()"),vYr.forEach(t),n5o=r(oY," class method or the "),GN=n(oY,"A",{href:!0});var FYr=s(GN);s5o=r(FYr,"from_config()"),FYr.forEach(t),l5o=r(oY,` class
method.`),oY.forEach(t),i5o=i(Ns),lA=n(Ns,"P",{});var YPe=s(lA);d5o=r(YPe,"This class cannot be instantiated directly using "),aie=n(YPe,"CODE",{});var TYr=s(aie);c5o=r(TYr,"__init__()"),TYr.forEach(t),f5o=r(YPe," (throws an error)."),YPe.forEach(t),m5o=i(Ns),rt=n(Ns,"DIV",{class:!0});var AC=s(rt);T(iA.$$.fragment,AC),g5o=i(AC),nie=n(AC,"P",{});var MYr=s(nie);h5o=r(MYr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),MYr.forEach(t),p5o=i(AC),xi=n(AC,"P",{});var rY=s(xi);u5o=r(rY,`Note:
Loading a model from its configuration file does `),sie=n(rY,"STRONG",{});var EYr=s(sie);_5o=r(EYr,"not"),EYr.forEach(t),b5o=r(rY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ON=n(rY,"A",{href:!0});var CYr=s(ON);v5o=r(CYr,"from_pretrained()"),CYr.forEach(t),F5o=r(rY," to load the model weights."),rY.forEach(t),T5o=i(AC),T(k1.$$.fragment,AC),AC.forEach(t),M5o=i(Ns),Je=n(Ns,"DIV",{class:!0});var Zt=s(Je);T(dA.$$.fragment,Zt),E5o=i(Zt),lie=n(Zt,"P",{});var wYr=s(lie);C5o=r(wYr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wYr.forEach(t),w5o=i(Zt),Aa=n(Zt,"P",{});var yC=s(Aa);A5o=r(yC,"The model class to instantiate is selected based on the "),iie=n(yC,"CODE",{});var AYr=s(iie);y5o=r(AYr,"model_type"),AYr.forEach(t),L5o=r(yC,` property of the config object (either
passed as an argument or loaded from `),die=n(yC,"CODE",{});var yYr=s(die);x5o=r(yYr,"pretrained_model_name_or_path"),yYr.forEach(t),$5o=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cie=n(yC,"CODE",{});var LYr=s(cie);k5o=r(LYr,"pretrained_model_name_or_path"),LYr.forEach(t),S5o=r(yC,":"),yC.forEach(t),R5o=i(Zt),he=n(Zt,"UL",{});var ue=s(he);S1=n(ue,"LI",{});var Rwe=s(S1);fie=n(Rwe,"STRONG",{});var xYr=s(fie);B5o=r(xYr,"bart"),xYr.forEach(t),P5o=r(Rwe," \u2014 "),VN=n(Rwe,"A",{href:!0});var $Yr=s(VN);I5o=r($Yr,"BartForConditionalGeneration"),$Yr.forEach(t),q5o=r(Rwe," (BART model)"),Rwe.forEach(t),N5o=i(ue),R1=n(ue,"LI",{});var Bwe=s(R1);mie=n(Bwe,"STRONG",{});var kYr=s(mie);j5o=r(kYr,"bigbird_pegasus"),kYr.forEach(t),D5o=r(Bwe," \u2014 "),XN=n(Bwe,"A",{href:!0});var SYr=s(XN);G5o=r(SYr,"BigBirdPegasusForConditionalGeneration"),SYr.forEach(t),O5o=r(Bwe," (BigBirdPegasus model)"),Bwe.forEach(t),V5o=i(ue),B1=n(ue,"LI",{});var Pwe=s(B1);gie=n(Pwe,"STRONG",{});var RYr=s(gie);X5o=r(RYr,"blenderbot"),RYr.forEach(t),z5o=r(Pwe," \u2014 "),zN=n(Pwe,"A",{href:!0});var BYr=s(zN);Q5o=r(BYr,"BlenderbotForConditionalGeneration"),BYr.forEach(t),W5o=r(Pwe," (Blenderbot model)"),Pwe.forEach(t),H5o=i(ue),P1=n(ue,"LI",{});var Iwe=s(P1);hie=n(Iwe,"STRONG",{});var PYr=s(hie);U5o=r(PYr,"blenderbot-small"),PYr.forEach(t),J5o=r(Iwe," \u2014 "),QN=n(Iwe,"A",{href:!0});var IYr=s(QN);Y5o=r(IYr,"BlenderbotSmallForConditionalGeneration"),IYr.forEach(t),K5o=r(Iwe," (BlenderbotSmall model)"),Iwe.forEach(t),Z5o=i(ue),I1=n(ue,"LI",{});var qwe=s(I1);pie=n(qwe,"STRONG",{});var qYr=s(pie);eCo=r(qYr,"encoder-decoder"),qYr.forEach(t),oCo=r(qwe," \u2014 "),WN=n(qwe,"A",{href:!0});var NYr=s(WN);rCo=r(NYr,"EncoderDecoderModel"),NYr.forEach(t),tCo=r(qwe," (Encoder decoder model)"),qwe.forEach(t),aCo=i(ue),q1=n(ue,"LI",{});var Nwe=s(q1);uie=n(Nwe,"STRONG",{});var jYr=s(uie);nCo=r(jYr,"fsmt"),jYr.forEach(t),sCo=r(Nwe," \u2014 "),HN=n(Nwe,"A",{href:!0});var DYr=s(HN);lCo=r(DYr,"FSMTForConditionalGeneration"),DYr.forEach(t),iCo=r(Nwe," (FairSeq Machine-Translation model)"),Nwe.forEach(t),dCo=i(ue),N1=n(ue,"LI",{});var jwe=s(N1);_ie=n(jwe,"STRONG",{});var GYr=s(_ie);cCo=r(GYr,"led"),GYr.forEach(t),fCo=r(jwe," \u2014 "),UN=n(jwe,"A",{href:!0});var OYr=s(UN);mCo=r(OYr,"LEDForConditionalGeneration"),OYr.forEach(t),gCo=r(jwe," (LED model)"),jwe.forEach(t),hCo=i(ue),j1=n(ue,"LI",{});var Dwe=s(j1);bie=n(Dwe,"STRONG",{});var VYr=s(bie);pCo=r(VYr,"m2m_100"),VYr.forEach(t),uCo=r(Dwe," \u2014 "),JN=n(Dwe,"A",{href:!0});var XYr=s(JN);_Co=r(XYr,"M2M100ForConditionalGeneration"),XYr.forEach(t),bCo=r(Dwe," (M2M100 model)"),Dwe.forEach(t),vCo=i(ue),D1=n(ue,"LI",{});var Gwe=s(D1);vie=n(Gwe,"STRONG",{});var zYr=s(vie);FCo=r(zYr,"marian"),zYr.forEach(t),TCo=r(Gwe," \u2014 "),YN=n(Gwe,"A",{href:!0});var QYr=s(YN);MCo=r(QYr,"MarianMTModel"),QYr.forEach(t),ECo=r(Gwe," (Marian model)"),Gwe.forEach(t),CCo=i(ue),G1=n(ue,"LI",{});var Owe=s(G1);Fie=n(Owe,"STRONG",{});var WYr=s(Fie);wCo=r(WYr,"mbart"),WYr.forEach(t),ACo=r(Owe," \u2014 "),KN=n(Owe,"A",{href:!0});var HYr=s(KN);yCo=r(HYr,"MBartForConditionalGeneration"),HYr.forEach(t),LCo=r(Owe," (mBART model)"),Owe.forEach(t),xCo=i(ue),O1=n(ue,"LI",{});var Vwe=s(O1);Tie=n(Vwe,"STRONG",{});var UYr=s(Tie);$Co=r(UYr,"mt5"),UYr.forEach(t),kCo=r(Vwe," \u2014 "),ZN=n(Vwe,"A",{href:!0});var JYr=s(ZN);SCo=r(JYr,"MT5ForConditionalGeneration"),JYr.forEach(t),RCo=r(Vwe," (mT5 model)"),Vwe.forEach(t),BCo=i(ue),V1=n(ue,"LI",{});var Xwe=s(V1);Mie=n(Xwe,"STRONG",{});var YYr=s(Mie);PCo=r(YYr,"pegasus"),YYr.forEach(t),ICo=r(Xwe," \u2014 "),ej=n(Xwe,"A",{href:!0});var KYr=s(ej);qCo=r(KYr,"PegasusForConditionalGeneration"),KYr.forEach(t),NCo=r(Xwe," (Pegasus model)"),Xwe.forEach(t),jCo=i(ue),X1=n(ue,"LI",{});var zwe=s(X1);Eie=n(zwe,"STRONG",{});var ZYr=s(Eie);DCo=r(ZYr,"plbart"),ZYr.forEach(t),GCo=r(zwe," \u2014 "),oj=n(zwe,"A",{href:!0});var eKr=s(oj);OCo=r(eKr,"PLBartForConditionalGeneration"),eKr.forEach(t),VCo=r(zwe," (PLBart model)"),zwe.forEach(t),XCo=i(ue),z1=n(ue,"LI",{});var Qwe=s(z1);Cie=n(Qwe,"STRONG",{});var oKr=s(Cie);zCo=r(oKr,"prophetnet"),oKr.forEach(t),QCo=r(Qwe," \u2014 "),rj=n(Qwe,"A",{href:!0});var rKr=s(rj);WCo=r(rKr,"ProphetNetForConditionalGeneration"),rKr.forEach(t),HCo=r(Qwe," (ProphetNet model)"),Qwe.forEach(t),UCo=i(ue),Q1=n(ue,"LI",{});var Wwe=s(Q1);wie=n(Wwe,"STRONG",{});var tKr=s(wie);JCo=r(tKr,"t5"),tKr.forEach(t),YCo=r(Wwe," \u2014 "),tj=n(Wwe,"A",{href:!0});var aKr=s(tj);KCo=r(aKr,"T5ForConditionalGeneration"),aKr.forEach(t),ZCo=r(Wwe," (T5 model)"),Wwe.forEach(t),e3o=i(ue),W1=n(ue,"LI",{});var Hwe=s(W1);Aie=n(Hwe,"STRONG",{});var nKr=s(Aie);o3o=r(nKr,"tapex"),nKr.forEach(t),r3o=r(Hwe," \u2014 "),aj=n(Hwe,"A",{href:!0});var sKr=s(aj);t3o=r(sKr,"BartForConditionalGeneration"),sKr.forEach(t),a3o=r(Hwe," (TAPEX model)"),Hwe.forEach(t),n3o=i(ue),H1=n(ue,"LI",{});var Uwe=s(H1);yie=n(Uwe,"STRONG",{});var lKr=s(yie);s3o=r(lKr,"xlm-prophetnet"),lKr.forEach(t),l3o=r(Uwe," \u2014 "),nj=n(Uwe,"A",{href:!0});var iKr=s(nj);i3o=r(iKr,"XLMProphetNetForConditionalGeneration"),iKr.forEach(t),d3o=r(Uwe," (XLMProphetNet model)"),Uwe.forEach(t),ue.forEach(t),c3o=i(Zt),U1=n(Zt,"P",{});var Jwe=s(U1);f3o=r(Jwe,"The model is set in evaluation mode by default using "),Lie=n(Jwe,"CODE",{});var dKr=s(Lie);m3o=r(dKr,"model.eval()"),dKr.forEach(t),g3o=r(Jwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xie=n(Jwe,"CODE",{});var cKr=s(xie);h3o=r(cKr,"model.train()"),cKr.forEach(t),Jwe.forEach(t),p3o=i(Zt),T(J1.$$.fragment,Zt),Zt.forEach(t),Ns.forEach(t),JRe=i(f),$i=n(f,"H2",{class:!0});var KPe=s($i);Y1=n(KPe,"A",{id:!0,class:!0,href:!0});var fKr=s(Y1);$ie=n(fKr,"SPAN",{});var mKr=s($ie);T(cA.$$.fragment,mKr),mKr.forEach(t),fKr.forEach(t),u3o=i(KPe),kie=n(KPe,"SPAN",{});var gKr=s(kie);_3o=r(gKr,"AutoModelForSequenceClassification"),gKr.forEach(t),KPe.forEach(t),YRe=i(f),ko=n(f,"DIV",{class:!0});var js=s(ko);T(fA.$$.fragment,js),b3o=i(js),ki=n(js,"P",{});var tY=s(ki);v3o=r(tY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),sj=n(tY,"A",{href:!0});var hKr=s(sj);F3o=r(hKr,"from_pretrained()"),hKr.forEach(t),T3o=r(tY," class method or the "),lj=n(tY,"A",{href:!0});var pKr=s(lj);M3o=r(pKr,"from_config()"),pKr.forEach(t),E3o=r(tY,` class
method.`),tY.forEach(t),C3o=i(js),mA=n(js,"P",{});var ZPe=s(mA);w3o=r(ZPe,"This class cannot be instantiated directly using "),Sie=n(ZPe,"CODE",{});var uKr=s(Sie);A3o=r(uKr,"__init__()"),uKr.forEach(t),y3o=r(ZPe," (throws an error)."),ZPe.forEach(t),L3o=i(js),tt=n(js,"DIV",{class:!0});var LC=s(tt);T(gA.$$.fragment,LC),x3o=i(LC),Rie=n(LC,"P",{});var _Kr=s(Rie);$3o=r(_Kr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),_Kr.forEach(t),k3o=i(LC),Si=n(LC,"P",{});var aY=s(Si);S3o=r(aY,`Note:
Loading a model from its configuration file does `),Bie=n(aY,"STRONG",{});var bKr=s(Bie);R3o=r(bKr,"not"),bKr.forEach(t),B3o=r(aY,` load the model weights. It only affects the
model\u2019s configuration. Use `),ij=n(aY,"A",{href:!0});var vKr=s(ij);P3o=r(vKr,"from_pretrained()"),vKr.forEach(t),I3o=r(aY," to load the model weights."),aY.forEach(t),q3o=i(LC),T(K1.$$.fragment,LC),LC.forEach(t),N3o=i(js),Ye=n(js,"DIV",{class:!0});var ea=s(Ye);T(hA.$$.fragment,ea),j3o=i(ea),Pie=n(ea,"P",{});var FKr=s(Pie);D3o=r(FKr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),FKr.forEach(t),G3o=i(ea),ya=n(ea,"P",{});var xC=s(ya);O3o=r(xC,"The model class to instantiate is selected based on the "),Iie=n(xC,"CODE",{});var TKr=s(Iie);V3o=r(TKr,"model_type"),TKr.forEach(t),X3o=r(xC,` property of the config object (either
passed as an argument or loaded from `),qie=n(xC,"CODE",{});var MKr=s(qie);z3o=r(MKr,"pretrained_model_name_or_path"),MKr.forEach(t),Q3o=r(xC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Nie=n(xC,"CODE",{});var EKr=s(Nie);W3o=r(EKr,"pretrained_model_name_or_path"),EKr.forEach(t),H3o=r(xC,":"),xC.forEach(t),U3o=i(ea),q=n(ea,"UL",{});var N=s(q);Z1=n(N,"LI",{});var Ywe=s(Z1);jie=n(Ywe,"STRONG",{});var CKr=s(jie);J3o=r(CKr,"albert"),CKr.forEach(t),Y3o=r(Ywe," \u2014 "),dj=n(Ywe,"A",{href:!0});var wKr=s(dj);K3o=r(wKr,"AlbertForSequenceClassification"),wKr.forEach(t),Z3o=r(Ywe," (ALBERT model)"),Ywe.forEach(t),ewo=i(N),eb=n(N,"LI",{});var Kwe=s(eb);Die=n(Kwe,"STRONG",{});var AKr=s(Die);owo=r(AKr,"bart"),AKr.forEach(t),rwo=r(Kwe," \u2014 "),cj=n(Kwe,"A",{href:!0});var yKr=s(cj);two=r(yKr,"BartForSequenceClassification"),yKr.forEach(t),awo=r(Kwe," (BART model)"),Kwe.forEach(t),nwo=i(N),ob=n(N,"LI",{});var Zwe=s(ob);Gie=n(Zwe,"STRONG",{});var LKr=s(Gie);swo=r(LKr,"bert"),LKr.forEach(t),lwo=r(Zwe," \u2014 "),fj=n(Zwe,"A",{href:!0});var xKr=s(fj);iwo=r(xKr,"BertForSequenceClassification"),xKr.forEach(t),dwo=r(Zwe," (BERT model)"),Zwe.forEach(t),cwo=i(N),rb=n(N,"LI",{});var eAe=s(rb);Oie=n(eAe,"STRONG",{});var $Kr=s(Oie);fwo=r($Kr,"big_bird"),$Kr.forEach(t),mwo=r(eAe," \u2014 "),mj=n(eAe,"A",{href:!0});var kKr=s(mj);gwo=r(kKr,"BigBirdForSequenceClassification"),kKr.forEach(t),hwo=r(eAe," (BigBird model)"),eAe.forEach(t),pwo=i(N),tb=n(N,"LI",{});var oAe=s(tb);Vie=n(oAe,"STRONG",{});var SKr=s(Vie);uwo=r(SKr,"bigbird_pegasus"),SKr.forEach(t),_wo=r(oAe," \u2014 "),gj=n(oAe,"A",{href:!0});var RKr=s(gj);bwo=r(RKr,"BigBirdPegasusForSequenceClassification"),RKr.forEach(t),vwo=r(oAe," (BigBirdPegasus model)"),oAe.forEach(t),Fwo=i(N),ab=n(N,"LI",{});var rAe=s(ab);Xie=n(rAe,"STRONG",{});var BKr=s(Xie);Two=r(BKr,"camembert"),BKr.forEach(t),Mwo=r(rAe," \u2014 "),hj=n(rAe,"A",{href:!0});var PKr=s(hj);Ewo=r(PKr,"CamembertForSequenceClassification"),PKr.forEach(t),Cwo=r(rAe," (CamemBERT model)"),rAe.forEach(t),wwo=i(N),nb=n(N,"LI",{});var tAe=s(nb);zie=n(tAe,"STRONG",{});var IKr=s(zie);Awo=r(IKr,"canine"),IKr.forEach(t),ywo=r(tAe," \u2014 "),pj=n(tAe,"A",{href:!0});var qKr=s(pj);Lwo=r(qKr,"CanineForSequenceClassification"),qKr.forEach(t),xwo=r(tAe," (Canine model)"),tAe.forEach(t),$wo=i(N),sb=n(N,"LI",{});var aAe=s(sb);Qie=n(aAe,"STRONG",{});var NKr=s(Qie);kwo=r(NKr,"convbert"),NKr.forEach(t),Swo=r(aAe," \u2014 "),uj=n(aAe,"A",{href:!0});var jKr=s(uj);Rwo=r(jKr,"ConvBertForSequenceClassification"),jKr.forEach(t),Bwo=r(aAe," (ConvBERT model)"),aAe.forEach(t),Pwo=i(N),lb=n(N,"LI",{});var nAe=s(lb);Wie=n(nAe,"STRONG",{});var DKr=s(Wie);Iwo=r(DKr,"ctrl"),DKr.forEach(t),qwo=r(nAe," \u2014 "),_j=n(nAe,"A",{href:!0});var GKr=s(_j);Nwo=r(GKr,"CTRLForSequenceClassification"),GKr.forEach(t),jwo=r(nAe," (CTRL model)"),nAe.forEach(t),Dwo=i(N),ib=n(N,"LI",{});var sAe=s(ib);Hie=n(sAe,"STRONG",{});var OKr=s(Hie);Gwo=r(OKr,"data2vec-text"),OKr.forEach(t),Owo=r(sAe," \u2014 "),bj=n(sAe,"A",{href:!0});var VKr=s(bj);Vwo=r(VKr,"Data2VecTextForSequenceClassification"),VKr.forEach(t),Xwo=r(sAe," (Data2VecText model)"),sAe.forEach(t),zwo=i(N),db=n(N,"LI",{});var lAe=s(db);Uie=n(lAe,"STRONG",{});var XKr=s(Uie);Qwo=r(XKr,"deberta"),XKr.forEach(t),Wwo=r(lAe," \u2014 "),vj=n(lAe,"A",{href:!0});var zKr=s(vj);Hwo=r(zKr,"DebertaForSequenceClassification"),zKr.forEach(t),Uwo=r(lAe," (DeBERTa model)"),lAe.forEach(t),Jwo=i(N),cb=n(N,"LI",{});var iAe=s(cb);Jie=n(iAe,"STRONG",{});var QKr=s(Jie);Ywo=r(QKr,"deberta-v2"),QKr.forEach(t),Kwo=r(iAe," \u2014 "),Fj=n(iAe,"A",{href:!0});var WKr=s(Fj);Zwo=r(WKr,"DebertaV2ForSequenceClassification"),WKr.forEach(t),eAo=r(iAe," (DeBERTa-v2 model)"),iAe.forEach(t),oAo=i(N),fb=n(N,"LI",{});var dAe=s(fb);Yie=n(dAe,"STRONG",{});var HKr=s(Yie);rAo=r(HKr,"distilbert"),HKr.forEach(t),tAo=r(dAe," \u2014 "),Tj=n(dAe,"A",{href:!0});var UKr=s(Tj);aAo=r(UKr,"DistilBertForSequenceClassification"),UKr.forEach(t),nAo=r(dAe," (DistilBERT model)"),dAe.forEach(t),sAo=i(N),mb=n(N,"LI",{});var cAe=s(mb);Kie=n(cAe,"STRONG",{});var JKr=s(Kie);lAo=r(JKr,"electra"),JKr.forEach(t),iAo=r(cAe," \u2014 "),Mj=n(cAe,"A",{href:!0});var YKr=s(Mj);dAo=r(YKr,"ElectraForSequenceClassification"),YKr.forEach(t),cAo=r(cAe," (ELECTRA model)"),cAe.forEach(t),fAo=i(N),gb=n(N,"LI",{});var fAe=s(gb);Zie=n(fAe,"STRONG",{});var KKr=s(Zie);mAo=r(KKr,"flaubert"),KKr.forEach(t),gAo=r(fAe," \u2014 "),Ej=n(fAe,"A",{href:!0});var ZKr=s(Ej);hAo=r(ZKr,"FlaubertForSequenceClassification"),ZKr.forEach(t),pAo=r(fAe," (FlauBERT model)"),fAe.forEach(t),uAo=i(N),hb=n(N,"LI",{});var mAe=s(hb);ede=n(mAe,"STRONG",{});var eZr=s(ede);_Ao=r(eZr,"fnet"),eZr.forEach(t),bAo=r(mAe," \u2014 "),Cj=n(mAe,"A",{href:!0});var oZr=s(Cj);vAo=r(oZr,"FNetForSequenceClassification"),oZr.forEach(t),FAo=r(mAe," (FNet model)"),mAe.forEach(t),TAo=i(N),pb=n(N,"LI",{});var gAe=s(pb);ode=n(gAe,"STRONG",{});var rZr=s(ode);MAo=r(rZr,"funnel"),rZr.forEach(t),EAo=r(gAe," \u2014 "),wj=n(gAe,"A",{href:!0});var tZr=s(wj);CAo=r(tZr,"FunnelForSequenceClassification"),tZr.forEach(t),wAo=r(gAe," (Funnel Transformer model)"),gAe.forEach(t),AAo=i(N),ub=n(N,"LI",{});var hAe=s(ub);rde=n(hAe,"STRONG",{});var aZr=s(rde);yAo=r(aZr,"gpt2"),aZr.forEach(t),LAo=r(hAe," \u2014 "),Aj=n(hAe,"A",{href:!0});var nZr=s(Aj);xAo=r(nZr,"GPT2ForSequenceClassification"),nZr.forEach(t),$Ao=r(hAe," (OpenAI GPT-2 model)"),hAe.forEach(t),kAo=i(N),_b=n(N,"LI",{});var pAe=s(_b);tde=n(pAe,"STRONG",{});var sZr=s(tde);SAo=r(sZr,"gpt_neo"),sZr.forEach(t),RAo=r(pAe," \u2014 "),yj=n(pAe,"A",{href:!0});var lZr=s(yj);BAo=r(lZr,"GPTNeoForSequenceClassification"),lZr.forEach(t),PAo=r(pAe," (GPT Neo model)"),pAe.forEach(t),IAo=i(N),bb=n(N,"LI",{});var uAe=s(bb);ade=n(uAe,"STRONG",{});var iZr=s(ade);qAo=r(iZr,"gptj"),iZr.forEach(t),NAo=r(uAe," \u2014 "),Lj=n(uAe,"A",{href:!0});var dZr=s(Lj);jAo=r(dZr,"GPTJForSequenceClassification"),dZr.forEach(t),DAo=r(uAe," (GPT-J model)"),uAe.forEach(t),GAo=i(N),vb=n(N,"LI",{});var _Ae=s(vb);nde=n(_Ae,"STRONG",{});var cZr=s(nde);OAo=r(cZr,"ibert"),cZr.forEach(t),VAo=r(_Ae," \u2014 "),xj=n(_Ae,"A",{href:!0});var fZr=s(xj);XAo=r(fZr,"IBertForSequenceClassification"),fZr.forEach(t),zAo=r(_Ae," (I-BERT model)"),_Ae.forEach(t),QAo=i(N),Fb=n(N,"LI",{});var bAe=s(Fb);sde=n(bAe,"STRONG",{});var mZr=s(sde);WAo=r(mZr,"layoutlm"),mZr.forEach(t),HAo=r(bAe," \u2014 "),$j=n(bAe,"A",{href:!0});var gZr=s($j);UAo=r(gZr,"LayoutLMForSequenceClassification"),gZr.forEach(t),JAo=r(bAe," (LayoutLM model)"),bAe.forEach(t),YAo=i(N),Tb=n(N,"LI",{});var vAe=s(Tb);lde=n(vAe,"STRONG",{});var hZr=s(lde);KAo=r(hZr,"layoutlmv2"),hZr.forEach(t),ZAo=r(vAe," \u2014 "),kj=n(vAe,"A",{href:!0});var pZr=s(kj);e0o=r(pZr,"LayoutLMv2ForSequenceClassification"),pZr.forEach(t),o0o=r(vAe," (LayoutLMv2 model)"),vAe.forEach(t),r0o=i(N),Mb=n(N,"LI",{});var FAe=s(Mb);ide=n(FAe,"STRONG",{});var uZr=s(ide);t0o=r(uZr,"led"),uZr.forEach(t),a0o=r(FAe," \u2014 "),Sj=n(FAe,"A",{href:!0});var _Zr=s(Sj);n0o=r(_Zr,"LEDForSequenceClassification"),_Zr.forEach(t),s0o=r(FAe," (LED model)"),FAe.forEach(t),l0o=i(N),Eb=n(N,"LI",{});var TAe=s(Eb);dde=n(TAe,"STRONG",{});var bZr=s(dde);i0o=r(bZr,"longformer"),bZr.forEach(t),d0o=r(TAe," \u2014 "),Rj=n(TAe,"A",{href:!0});var vZr=s(Rj);c0o=r(vZr,"LongformerForSequenceClassification"),vZr.forEach(t),f0o=r(TAe," (Longformer model)"),TAe.forEach(t),m0o=i(N),Cb=n(N,"LI",{});var MAe=s(Cb);cde=n(MAe,"STRONG",{});var FZr=s(cde);g0o=r(FZr,"mbart"),FZr.forEach(t),h0o=r(MAe," \u2014 "),Bj=n(MAe,"A",{href:!0});var TZr=s(Bj);p0o=r(TZr,"MBartForSequenceClassification"),TZr.forEach(t),u0o=r(MAe," (mBART model)"),MAe.forEach(t),_0o=i(N),wb=n(N,"LI",{});var EAe=s(wb);fde=n(EAe,"STRONG",{});var MZr=s(fde);b0o=r(MZr,"megatron-bert"),MZr.forEach(t),v0o=r(EAe," \u2014 "),Pj=n(EAe,"A",{href:!0});var EZr=s(Pj);F0o=r(EZr,"MegatronBertForSequenceClassification"),EZr.forEach(t),T0o=r(EAe," (MegatronBert model)"),EAe.forEach(t),M0o=i(N),Ab=n(N,"LI",{});var CAe=s(Ab);mde=n(CAe,"STRONG",{});var CZr=s(mde);E0o=r(CZr,"mobilebert"),CZr.forEach(t),C0o=r(CAe," \u2014 "),Ij=n(CAe,"A",{href:!0});var wZr=s(Ij);w0o=r(wZr,"MobileBertForSequenceClassification"),wZr.forEach(t),A0o=r(CAe," (MobileBERT model)"),CAe.forEach(t),y0o=i(N),yb=n(N,"LI",{});var wAe=s(yb);gde=n(wAe,"STRONG",{});var AZr=s(gde);L0o=r(AZr,"mpnet"),AZr.forEach(t),x0o=r(wAe," \u2014 "),qj=n(wAe,"A",{href:!0});var yZr=s(qj);$0o=r(yZr,"MPNetForSequenceClassification"),yZr.forEach(t),k0o=r(wAe," (MPNet model)"),wAe.forEach(t),S0o=i(N),Lb=n(N,"LI",{});var AAe=s(Lb);hde=n(AAe,"STRONG",{});var LZr=s(hde);R0o=r(LZr,"nystromformer"),LZr.forEach(t),B0o=r(AAe," \u2014 "),Nj=n(AAe,"A",{href:!0});var xZr=s(Nj);P0o=r(xZr,"NystromformerForSequenceClassification"),xZr.forEach(t),I0o=r(AAe," (Nystromformer model)"),AAe.forEach(t),q0o=i(N),xb=n(N,"LI",{});var yAe=s(xb);pde=n(yAe,"STRONG",{});var $Zr=s(pde);N0o=r($Zr,"openai-gpt"),$Zr.forEach(t),j0o=r(yAe," \u2014 "),jj=n(yAe,"A",{href:!0});var kZr=s(jj);D0o=r(kZr,"OpenAIGPTForSequenceClassification"),kZr.forEach(t),G0o=r(yAe," (OpenAI GPT model)"),yAe.forEach(t),O0o=i(N),$b=n(N,"LI",{});var LAe=s($b);ude=n(LAe,"STRONG",{});var SZr=s(ude);V0o=r(SZr,"perceiver"),SZr.forEach(t),X0o=r(LAe," \u2014 "),Dj=n(LAe,"A",{href:!0});var RZr=s(Dj);z0o=r(RZr,"PerceiverForSequenceClassification"),RZr.forEach(t),Q0o=r(LAe," (Perceiver model)"),LAe.forEach(t),W0o=i(N),kb=n(N,"LI",{});var xAe=s(kb);_de=n(xAe,"STRONG",{});var BZr=s(_de);H0o=r(BZr,"plbart"),BZr.forEach(t),U0o=r(xAe," \u2014 "),Gj=n(xAe,"A",{href:!0});var PZr=s(Gj);J0o=r(PZr,"PLBartForSequenceClassification"),PZr.forEach(t),Y0o=r(xAe," (PLBart model)"),xAe.forEach(t),K0o=i(N),Sb=n(N,"LI",{});var $Ae=s(Sb);bde=n($Ae,"STRONG",{});var IZr=s(bde);Z0o=r(IZr,"qdqbert"),IZr.forEach(t),eyo=r($Ae," \u2014 "),Oj=n($Ae,"A",{href:!0});var qZr=s(Oj);oyo=r(qZr,"QDQBertForSequenceClassification"),qZr.forEach(t),ryo=r($Ae," (QDQBert model)"),$Ae.forEach(t),tyo=i(N),Rb=n(N,"LI",{});var kAe=s(Rb);vde=n(kAe,"STRONG",{});var NZr=s(vde);ayo=r(NZr,"reformer"),NZr.forEach(t),nyo=r(kAe," \u2014 "),Vj=n(kAe,"A",{href:!0});var jZr=s(Vj);syo=r(jZr,"ReformerForSequenceClassification"),jZr.forEach(t),lyo=r(kAe," (Reformer model)"),kAe.forEach(t),iyo=i(N),Bb=n(N,"LI",{});var SAe=s(Bb);Fde=n(SAe,"STRONG",{});var DZr=s(Fde);dyo=r(DZr,"rembert"),DZr.forEach(t),cyo=r(SAe," \u2014 "),Xj=n(SAe,"A",{href:!0});var GZr=s(Xj);fyo=r(GZr,"RemBertForSequenceClassification"),GZr.forEach(t),myo=r(SAe," (RemBERT model)"),SAe.forEach(t),gyo=i(N),Pb=n(N,"LI",{});var RAe=s(Pb);Tde=n(RAe,"STRONG",{});var OZr=s(Tde);hyo=r(OZr,"roberta"),OZr.forEach(t),pyo=r(RAe," \u2014 "),zj=n(RAe,"A",{href:!0});var VZr=s(zj);uyo=r(VZr,"RobertaForSequenceClassification"),VZr.forEach(t),_yo=r(RAe," (RoBERTa model)"),RAe.forEach(t),byo=i(N),Ib=n(N,"LI",{});var BAe=s(Ib);Mde=n(BAe,"STRONG",{});var XZr=s(Mde);vyo=r(XZr,"roformer"),XZr.forEach(t),Fyo=r(BAe," \u2014 "),Qj=n(BAe,"A",{href:!0});var zZr=s(Qj);Tyo=r(zZr,"RoFormerForSequenceClassification"),zZr.forEach(t),Myo=r(BAe," (RoFormer model)"),BAe.forEach(t),Eyo=i(N),qb=n(N,"LI",{});var PAe=s(qb);Ede=n(PAe,"STRONG",{});var QZr=s(Ede);Cyo=r(QZr,"squeezebert"),QZr.forEach(t),wyo=r(PAe," \u2014 "),Wj=n(PAe,"A",{href:!0});var WZr=s(Wj);Ayo=r(WZr,"SqueezeBertForSequenceClassification"),WZr.forEach(t),yyo=r(PAe," (SqueezeBERT model)"),PAe.forEach(t),Lyo=i(N),Nb=n(N,"LI",{});var IAe=s(Nb);Cde=n(IAe,"STRONG",{});var HZr=s(Cde);xyo=r(HZr,"tapas"),HZr.forEach(t),$yo=r(IAe," \u2014 "),Hj=n(IAe,"A",{href:!0});var UZr=s(Hj);kyo=r(UZr,"TapasForSequenceClassification"),UZr.forEach(t),Syo=r(IAe," (TAPAS model)"),IAe.forEach(t),Ryo=i(N),jb=n(N,"LI",{});var qAe=s(jb);wde=n(qAe,"STRONG",{});var JZr=s(wde);Byo=r(JZr,"tapex"),JZr.forEach(t),Pyo=r(qAe," \u2014 "),Uj=n(qAe,"A",{href:!0});var YZr=s(Uj);Iyo=r(YZr,"BartForSequenceClassification"),YZr.forEach(t),qyo=r(qAe," (TAPEX model)"),qAe.forEach(t),Nyo=i(N),Db=n(N,"LI",{});var NAe=s(Db);Ade=n(NAe,"STRONG",{});var KZr=s(Ade);jyo=r(KZr,"transfo-xl"),KZr.forEach(t),Dyo=r(NAe," \u2014 "),Jj=n(NAe,"A",{href:!0});var ZZr=s(Jj);Gyo=r(ZZr,"TransfoXLForSequenceClassification"),ZZr.forEach(t),Oyo=r(NAe," (Transformer-XL model)"),NAe.forEach(t),Vyo=i(N),Gb=n(N,"LI",{});var jAe=s(Gb);yde=n(jAe,"STRONG",{});var eet=s(yde);Xyo=r(eet,"xlm"),eet.forEach(t),zyo=r(jAe," \u2014 "),Yj=n(jAe,"A",{href:!0});var oet=s(Yj);Qyo=r(oet,"XLMForSequenceClassification"),oet.forEach(t),Wyo=r(jAe," (XLM model)"),jAe.forEach(t),Hyo=i(N),Ob=n(N,"LI",{});var DAe=s(Ob);Lde=n(DAe,"STRONG",{});var ret=s(Lde);Uyo=r(ret,"xlm-roberta"),ret.forEach(t),Jyo=r(DAe," \u2014 "),Kj=n(DAe,"A",{href:!0});var tet=s(Kj);Yyo=r(tet,"XLMRobertaForSequenceClassification"),tet.forEach(t),Kyo=r(DAe," (XLM-RoBERTa model)"),DAe.forEach(t),Zyo=i(N),Vb=n(N,"LI",{});var GAe=s(Vb);xde=n(GAe,"STRONG",{});var aet=s(xde);eLo=r(aet,"xlm-roberta-xl"),aet.forEach(t),oLo=r(GAe," \u2014 "),Zj=n(GAe,"A",{href:!0});var net=s(Zj);rLo=r(net,"XLMRobertaXLForSequenceClassification"),net.forEach(t),tLo=r(GAe," (XLM-RoBERTa-XL model)"),GAe.forEach(t),aLo=i(N),Xb=n(N,"LI",{});var OAe=s(Xb);$de=n(OAe,"STRONG",{});var set=s($de);nLo=r(set,"xlnet"),set.forEach(t),sLo=r(OAe," \u2014 "),eD=n(OAe,"A",{href:!0});var iet=s(eD);lLo=r(iet,"XLNetForSequenceClassification"),iet.forEach(t),iLo=r(OAe," (XLNet model)"),OAe.forEach(t),dLo=i(N),zb=n(N,"LI",{});var VAe=s(zb);kde=n(VAe,"STRONG",{});var det=s(kde);cLo=r(det,"yoso"),det.forEach(t),fLo=r(VAe," \u2014 "),oD=n(VAe,"A",{href:!0});var cet=s(oD);mLo=r(cet,"YosoForSequenceClassification"),cet.forEach(t),gLo=r(VAe," (YOSO model)"),VAe.forEach(t),N.forEach(t),hLo=i(ea),Qb=n(ea,"P",{});var XAe=s(Qb);pLo=r(XAe,"The model is set in evaluation mode by default using "),Sde=n(XAe,"CODE",{});var fet=s(Sde);uLo=r(fet,"model.eval()"),fet.forEach(t),_Lo=r(XAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rde=n(XAe,"CODE",{});var met=s(Rde);bLo=r(met,"model.train()"),met.forEach(t),XAe.forEach(t),vLo=i(ea),T(Wb.$$.fragment,ea),ea.forEach(t),js.forEach(t),KRe=i(f),Ri=n(f,"H2",{class:!0});var eIe=s(Ri);Hb=n(eIe,"A",{id:!0,class:!0,href:!0});var get=s(Hb);Bde=n(get,"SPAN",{});var het=s(Bde);T(pA.$$.fragment,het),het.forEach(t),get.forEach(t),FLo=i(eIe),Pde=n(eIe,"SPAN",{});var pet=s(Pde);TLo=r(pet,"AutoModelForMultipleChoice"),pet.forEach(t),eIe.forEach(t),ZRe=i(f),So=n(f,"DIV",{class:!0});var Ds=s(So);T(uA.$$.fragment,Ds),MLo=i(Ds),Bi=n(Ds,"P",{});var nY=s(Bi);ELo=r(nY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),rD=n(nY,"A",{href:!0});var uet=s(rD);CLo=r(uet,"from_pretrained()"),uet.forEach(t),wLo=r(nY," class method or the "),tD=n(nY,"A",{href:!0});var _et=s(tD);ALo=r(_et,"from_config()"),_et.forEach(t),yLo=r(nY,` class
method.`),nY.forEach(t),LLo=i(Ds),_A=n(Ds,"P",{});var oIe=s(_A);xLo=r(oIe,"This class cannot be instantiated directly using "),Ide=n(oIe,"CODE",{});var bet=s(Ide);$Lo=r(bet,"__init__()"),bet.forEach(t),kLo=r(oIe," (throws an error)."),oIe.forEach(t),SLo=i(Ds),at=n(Ds,"DIV",{class:!0});var $C=s(at);T(bA.$$.fragment,$C),RLo=i($C),qde=n($C,"P",{});var vet=s(qde);BLo=r(vet,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),vet.forEach(t),PLo=i($C),Pi=n($C,"P",{});var sY=s(Pi);ILo=r(sY,`Note:
Loading a model from its configuration file does `),Nde=n(sY,"STRONG",{});var Fet=s(Nde);qLo=r(Fet,"not"),Fet.forEach(t),NLo=r(sY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aD=n(sY,"A",{href:!0});var Tet=s(aD);jLo=r(Tet,"from_pretrained()"),Tet.forEach(t),DLo=r(sY," to load the model weights."),sY.forEach(t),GLo=i($C),T(Ub.$$.fragment,$C),$C.forEach(t),OLo=i(Ds),Ke=n(Ds,"DIV",{class:!0});var oa=s(Ke);T(vA.$$.fragment,oa),VLo=i(oa),jde=n(oa,"P",{});var Met=s(jde);XLo=r(Met,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Met.forEach(t),zLo=i(oa),La=n(oa,"P",{});var kC=s(La);QLo=r(kC,"The model class to instantiate is selected based on the "),Dde=n(kC,"CODE",{});var Eet=s(Dde);WLo=r(Eet,"model_type"),Eet.forEach(t),HLo=r(kC,` property of the config object (either
passed as an argument or loaded from `),Gde=n(kC,"CODE",{});var Cet=s(Gde);ULo=r(Cet,"pretrained_model_name_or_path"),Cet.forEach(t),JLo=r(kC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ode=n(kC,"CODE",{});var wet=s(Ode);YLo=r(wet,"pretrained_model_name_or_path"),wet.forEach(t),KLo=r(kC,":"),kC.forEach(t),ZLo=i(oa),Y=n(oa,"UL",{});var K=s(Y);Jb=n(K,"LI",{});var zAe=s(Jb);Vde=n(zAe,"STRONG",{});var Aet=s(Vde);e8o=r(Aet,"albert"),Aet.forEach(t),o8o=r(zAe," \u2014 "),nD=n(zAe,"A",{href:!0});var yet=s(nD);r8o=r(yet,"AlbertForMultipleChoice"),yet.forEach(t),t8o=r(zAe," (ALBERT model)"),zAe.forEach(t),a8o=i(K),Yb=n(K,"LI",{});var QAe=s(Yb);Xde=n(QAe,"STRONG",{});var Let=s(Xde);n8o=r(Let,"bert"),Let.forEach(t),s8o=r(QAe," \u2014 "),sD=n(QAe,"A",{href:!0});var xet=s(sD);l8o=r(xet,"BertForMultipleChoice"),xet.forEach(t),i8o=r(QAe," (BERT model)"),QAe.forEach(t),d8o=i(K),Kb=n(K,"LI",{});var WAe=s(Kb);zde=n(WAe,"STRONG",{});var $et=s(zde);c8o=r($et,"big_bird"),$et.forEach(t),f8o=r(WAe," \u2014 "),lD=n(WAe,"A",{href:!0});var ket=s(lD);m8o=r(ket,"BigBirdForMultipleChoice"),ket.forEach(t),g8o=r(WAe," (BigBird model)"),WAe.forEach(t),h8o=i(K),Zb=n(K,"LI",{});var HAe=s(Zb);Qde=n(HAe,"STRONG",{});var Set=s(Qde);p8o=r(Set,"camembert"),Set.forEach(t),u8o=r(HAe," \u2014 "),iD=n(HAe,"A",{href:!0});var Ret=s(iD);_8o=r(Ret,"CamembertForMultipleChoice"),Ret.forEach(t),b8o=r(HAe," (CamemBERT model)"),HAe.forEach(t),v8o=i(K),e4=n(K,"LI",{});var UAe=s(e4);Wde=n(UAe,"STRONG",{});var Bet=s(Wde);F8o=r(Bet,"canine"),Bet.forEach(t),T8o=r(UAe," \u2014 "),dD=n(UAe,"A",{href:!0});var Pet=s(dD);M8o=r(Pet,"CanineForMultipleChoice"),Pet.forEach(t),E8o=r(UAe," (Canine model)"),UAe.forEach(t),C8o=i(K),o4=n(K,"LI",{});var JAe=s(o4);Hde=n(JAe,"STRONG",{});var Iet=s(Hde);w8o=r(Iet,"convbert"),Iet.forEach(t),A8o=r(JAe," \u2014 "),cD=n(JAe,"A",{href:!0});var qet=s(cD);y8o=r(qet,"ConvBertForMultipleChoice"),qet.forEach(t),L8o=r(JAe," (ConvBERT model)"),JAe.forEach(t),x8o=i(K),r4=n(K,"LI",{});var YAe=s(r4);Ude=n(YAe,"STRONG",{});var Net=s(Ude);$8o=r(Net,"data2vec-text"),Net.forEach(t),k8o=r(YAe," \u2014 "),fD=n(YAe,"A",{href:!0});var jet=s(fD);S8o=r(jet,"Data2VecTextForMultipleChoice"),jet.forEach(t),R8o=r(YAe," (Data2VecText model)"),YAe.forEach(t),B8o=i(K),t4=n(K,"LI",{});var KAe=s(t4);Jde=n(KAe,"STRONG",{});var Det=s(Jde);P8o=r(Det,"distilbert"),Det.forEach(t),I8o=r(KAe," \u2014 "),mD=n(KAe,"A",{href:!0});var Get=s(mD);q8o=r(Get,"DistilBertForMultipleChoice"),Get.forEach(t),N8o=r(KAe," (DistilBERT model)"),KAe.forEach(t),j8o=i(K),a4=n(K,"LI",{});var ZAe=s(a4);Yde=n(ZAe,"STRONG",{});var Oet=s(Yde);D8o=r(Oet,"electra"),Oet.forEach(t),G8o=r(ZAe," \u2014 "),gD=n(ZAe,"A",{href:!0});var Vet=s(gD);O8o=r(Vet,"ElectraForMultipleChoice"),Vet.forEach(t),V8o=r(ZAe," (ELECTRA model)"),ZAe.forEach(t),X8o=i(K),n4=n(K,"LI",{});var e0e=s(n4);Kde=n(e0e,"STRONG",{});var Xet=s(Kde);z8o=r(Xet,"flaubert"),Xet.forEach(t),Q8o=r(e0e," \u2014 "),hD=n(e0e,"A",{href:!0});var zet=s(hD);W8o=r(zet,"FlaubertForMultipleChoice"),zet.forEach(t),H8o=r(e0e," (FlauBERT model)"),e0e.forEach(t),U8o=i(K),s4=n(K,"LI",{});var o0e=s(s4);Zde=n(o0e,"STRONG",{});var Qet=s(Zde);J8o=r(Qet,"fnet"),Qet.forEach(t),Y8o=r(o0e," \u2014 "),pD=n(o0e,"A",{href:!0});var Wet=s(pD);K8o=r(Wet,"FNetForMultipleChoice"),Wet.forEach(t),Z8o=r(o0e," (FNet model)"),o0e.forEach(t),exo=i(K),l4=n(K,"LI",{});var r0e=s(l4);ece=n(r0e,"STRONG",{});var Het=s(ece);oxo=r(Het,"funnel"),Het.forEach(t),rxo=r(r0e," \u2014 "),uD=n(r0e,"A",{href:!0});var Uet=s(uD);txo=r(Uet,"FunnelForMultipleChoice"),Uet.forEach(t),axo=r(r0e," (Funnel Transformer model)"),r0e.forEach(t),nxo=i(K),i4=n(K,"LI",{});var t0e=s(i4);oce=n(t0e,"STRONG",{});var Jet=s(oce);sxo=r(Jet,"ibert"),Jet.forEach(t),lxo=r(t0e," \u2014 "),_D=n(t0e,"A",{href:!0});var Yet=s(_D);ixo=r(Yet,"IBertForMultipleChoice"),Yet.forEach(t),dxo=r(t0e," (I-BERT model)"),t0e.forEach(t),cxo=i(K),d4=n(K,"LI",{});var a0e=s(d4);rce=n(a0e,"STRONG",{});var Ket=s(rce);fxo=r(Ket,"longformer"),Ket.forEach(t),mxo=r(a0e," \u2014 "),bD=n(a0e,"A",{href:!0});var Zet=s(bD);gxo=r(Zet,"LongformerForMultipleChoice"),Zet.forEach(t),hxo=r(a0e," (Longformer model)"),a0e.forEach(t),pxo=i(K),c4=n(K,"LI",{});var n0e=s(c4);tce=n(n0e,"STRONG",{});var eot=s(tce);uxo=r(eot,"megatron-bert"),eot.forEach(t),_xo=r(n0e," \u2014 "),vD=n(n0e,"A",{href:!0});var oot=s(vD);bxo=r(oot,"MegatronBertForMultipleChoice"),oot.forEach(t),vxo=r(n0e," (MegatronBert model)"),n0e.forEach(t),Fxo=i(K),f4=n(K,"LI",{});var s0e=s(f4);ace=n(s0e,"STRONG",{});var rot=s(ace);Txo=r(rot,"mobilebert"),rot.forEach(t),Mxo=r(s0e," \u2014 "),FD=n(s0e,"A",{href:!0});var tot=s(FD);Exo=r(tot,"MobileBertForMultipleChoice"),tot.forEach(t),Cxo=r(s0e," (MobileBERT model)"),s0e.forEach(t),wxo=i(K),m4=n(K,"LI",{});var l0e=s(m4);nce=n(l0e,"STRONG",{});var aot=s(nce);Axo=r(aot,"mpnet"),aot.forEach(t),yxo=r(l0e," \u2014 "),TD=n(l0e,"A",{href:!0});var not=s(TD);Lxo=r(not,"MPNetForMultipleChoice"),not.forEach(t),xxo=r(l0e," (MPNet model)"),l0e.forEach(t),$xo=i(K),g4=n(K,"LI",{});var i0e=s(g4);sce=n(i0e,"STRONG",{});var sot=s(sce);kxo=r(sot,"nystromformer"),sot.forEach(t),Sxo=r(i0e," \u2014 "),MD=n(i0e,"A",{href:!0});var lot=s(MD);Rxo=r(lot,"NystromformerForMultipleChoice"),lot.forEach(t),Bxo=r(i0e," (Nystromformer model)"),i0e.forEach(t),Pxo=i(K),h4=n(K,"LI",{});var d0e=s(h4);lce=n(d0e,"STRONG",{});var iot=s(lce);Ixo=r(iot,"qdqbert"),iot.forEach(t),qxo=r(d0e," \u2014 "),ED=n(d0e,"A",{href:!0});var dot=s(ED);Nxo=r(dot,"QDQBertForMultipleChoice"),dot.forEach(t),jxo=r(d0e," (QDQBert model)"),d0e.forEach(t),Dxo=i(K),p4=n(K,"LI",{});var c0e=s(p4);ice=n(c0e,"STRONG",{});var cot=s(ice);Gxo=r(cot,"rembert"),cot.forEach(t),Oxo=r(c0e," \u2014 "),CD=n(c0e,"A",{href:!0});var fot=s(CD);Vxo=r(fot,"RemBertForMultipleChoice"),fot.forEach(t),Xxo=r(c0e," (RemBERT model)"),c0e.forEach(t),zxo=i(K),u4=n(K,"LI",{});var f0e=s(u4);dce=n(f0e,"STRONG",{});var mot=s(dce);Qxo=r(mot,"roberta"),mot.forEach(t),Wxo=r(f0e," \u2014 "),wD=n(f0e,"A",{href:!0});var got=s(wD);Hxo=r(got,"RobertaForMultipleChoice"),got.forEach(t),Uxo=r(f0e," (RoBERTa model)"),f0e.forEach(t),Jxo=i(K),_4=n(K,"LI",{});var m0e=s(_4);cce=n(m0e,"STRONG",{});var hot=s(cce);Yxo=r(hot,"roformer"),hot.forEach(t),Kxo=r(m0e," \u2014 "),AD=n(m0e,"A",{href:!0});var pot=s(AD);Zxo=r(pot,"RoFormerForMultipleChoice"),pot.forEach(t),e$o=r(m0e," (RoFormer model)"),m0e.forEach(t),o$o=i(K),b4=n(K,"LI",{});var g0e=s(b4);fce=n(g0e,"STRONG",{});var uot=s(fce);r$o=r(uot,"squeezebert"),uot.forEach(t),t$o=r(g0e," \u2014 "),yD=n(g0e,"A",{href:!0});var _ot=s(yD);a$o=r(_ot,"SqueezeBertForMultipleChoice"),_ot.forEach(t),n$o=r(g0e," (SqueezeBERT model)"),g0e.forEach(t),s$o=i(K),v4=n(K,"LI",{});var h0e=s(v4);mce=n(h0e,"STRONG",{});var bot=s(mce);l$o=r(bot,"xlm"),bot.forEach(t),i$o=r(h0e," \u2014 "),LD=n(h0e,"A",{href:!0});var vot=s(LD);d$o=r(vot,"XLMForMultipleChoice"),vot.forEach(t),c$o=r(h0e," (XLM model)"),h0e.forEach(t),f$o=i(K),F4=n(K,"LI",{});var p0e=s(F4);gce=n(p0e,"STRONG",{});var Fot=s(gce);m$o=r(Fot,"xlm-roberta"),Fot.forEach(t),g$o=r(p0e," \u2014 "),xD=n(p0e,"A",{href:!0});var Tot=s(xD);h$o=r(Tot,"XLMRobertaForMultipleChoice"),Tot.forEach(t),p$o=r(p0e," (XLM-RoBERTa model)"),p0e.forEach(t),u$o=i(K),T4=n(K,"LI",{});var u0e=s(T4);hce=n(u0e,"STRONG",{});var Mot=s(hce);_$o=r(Mot,"xlm-roberta-xl"),Mot.forEach(t),b$o=r(u0e," \u2014 "),$D=n(u0e,"A",{href:!0});var Eot=s($D);v$o=r(Eot,"XLMRobertaXLForMultipleChoice"),Eot.forEach(t),F$o=r(u0e," (XLM-RoBERTa-XL model)"),u0e.forEach(t),T$o=i(K),M4=n(K,"LI",{});var _0e=s(M4);pce=n(_0e,"STRONG",{});var Cot=s(pce);M$o=r(Cot,"xlnet"),Cot.forEach(t),E$o=r(_0e," \u2014 "),kD=n(_0e,"A",{href:!0});var wot=s(kD);C$o=r(wot,"XLNetForMultipleChoice"),wot.forEach(t),w$o=r(_0e," (XLNet model)"),_0e.forEach(t),A$o=i(K),E4=n(K,"LI",{});var b0e=s(E4);uce=n(b0e,"STRONG",{});var Aot=s(uce);y$o=r(Aot,"yoso"),Aot.forEach(t),L$o=r(b0e," \u2014 "),SD=n(b0e,"A",{href:!0});var yot=s(SD);x$o=r(yot,"YosoForMultipleChoice"),yot.forEach(t),$$o=r(b0e," (YOSO model)"),b0e.forEach(t),K.forEach(t),k$o=i(oa),C4=n(oa,"P",{});var v0e=s(C4);S$o=r(v0e,"The model is set in evaluation mode by default using "),_ce=n(v0e,"CODE",{});var Lot=s(_ce);R$o=r(Lot,"model.eval()"),Lot.forEach(t),B$o=r(v0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),bce=n(v0e,"CODE",{});var xot=s(bce);P$o=r(xot,"model.train()"),xot.forEach(t),v0e.forEach(t),I$o=i(oa),T(w4.$$.fragment,oa),oa.forEach(t),Ds.forEach(t),eBe=i(f),Ii=n(f,"H2",{class:!0});var rIe=s(Ii);A4=n(rIe,"A",{id:!0,class:!0,href:!0});var $ot=s(A4);vce=n($ot,"SPAN",{});var kot=s(vce);T(FA.$$.fragment,kot),kot.forEach(t),$ot.forEach(t),q$o=i(rIe),Fce=n(rIe,"SPAN",{});var Sot=s(Fce);N$o=r(Sot,"AutoModelForNextSentencePrediction"),Sot.forEach(t),rIe.forEach(t),oBe=i(f),Ro=n(f,"DIV",{class:!0});var Gs=s(Ro);T(TA.$$.fragment,Gs),j$o=i(Gs),qi=n(Gs,"P",{});var lY=s(qi);D$o=r(lY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RD=n(lY,"A",{href:!0});var Rot=s(RD);G$o=r(Rot,"from_pretrained()"),Rot.forEach(t),O$o=r(lY," class method or the "),BD=n(lY,"A",{href:!0});var Bot=s(BD);V$o=r(Bot,"from_config()"),Bot.forEach(t),X$o=r(lY,` class
method.`),lY.forEach(t),z$o=i(Gs),MA=n(Gs,"P",{});var tIe=s(MA);Q$o=r(tIe,"This class cannot be instantiated directly using "),Tce=n(tIe,"CODE",{});var Pot=s(Tce);W$o=r(Pot,"__init__()"),Pot.forEach(t),H$o=r(tIe," (throws an error)."),tIe.forEach(t),U$o=i(Gs),nt=n(Gs,"DIV",{class:!0});var SC=s(nt);T(EA.$$.fragment,SC),J$o=i(SC),Mce=n(SC,"P",{});var Iot=s(Mce);Y$o=r(Iot,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),Iot.forEach(t),K$o=i(SC),Ni=n(SC,"P",{});var iY=s(Ni);Z$o=r(iY,`Note:
Loading a model from its configuration file does `),Ece=n(iY,"STRONG",{});var qot=s(Ece);eko=r(qot,"not"),qot.forEach(t),oko=r(iY,` load the model weights. It only affects the
model\u2019s configuration. Use `),PD=n(iY,"A",{href:!0});var Not=s(PD);rko=r(Not,"from_pretrained()"),Not.forEach(t),tko=r(iY," to load the model weights."),iY.forEach(t),ako=i(SC),T(y4.$$.fragment,SC),SC.forEach(t),nko=i(Gs),Ze=n(Gs,"DIV",{class:!0});var ra=s(Ze);T(CA.$$.fragment,ra),sko=i(ra),Cce=n(ra,"P",{});var jot=s(Cce);lko=r(jot,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),jot.forEach(t),iko=i(ra),xa=n(ra,"P",{});var RC=s(xa);dko=r(RC,"The model class to instantiate is selected based on the "),wce=n(RC,"CODE",{});var Dot=s(wce);cko=r(Dot,"model_type"),Dot.forEach(t),fko=r(RC,` property of the config object (either
passed as an argument or loaded from `),Ace=n(RC,"CODE",{});var Got=s(Ace);mko=r(Got,"pretrained_model_name_or_path"),Got.forEach(t),gko=r(RC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),yce=n(RC,"CODE",{});var Oot=s(yce);hko=r(Oot,"pretrained_model_name_or_path"),Oot.forEach(t),pko=r(RC,":"),RC.forEach(t),uko=i(ra),Wr=n(ra,"UL",{});var Os=s(Wr);L4=n(Os,"LI",{});var F0e=s(L4);Lce=n(F0e,"STRONG",{});var Vot=s(Lce);_ko=r(Vot,"bert"),Vot.forEach(t),bko=r(F0e," \u2014 "),ID=n(F0e,"A",{href:!0});var Xot=s(ID);vko=r(Xot,"BertForNextSentencePrediction"),Xot.forEach(t),Fko=r(F0e," (BERT model)"),F0e.forEach(t),Tko=i(Os),x4=n(Os,"LI",{});var T0e=s(x4);xce=n(T0e,"STRONG",{});var zot=s(xce);Mko=r(zot,"fnet"),zot.forEach(t),Eko=r(T0e," \u2014 "),qD=n(T0e,"A",{href:!0});var Qot=s(qD);Cko=r(Qot,"FNetForNextSentencePrediction"),Qot.forEach(t),wko=r(T0e," (FNet model)"),T0e.forEach(t),Ako=i(Os),$4=n(Os,"LI",{});var M0e=s($4);$ce=n(M0e,"STRONG",{});var Wot=s($ce);yko=r(Wot,"megatron-bert"),Wot.forEach(t),Lko=r(M0e," \u2014 "),ND=n(M0e,"A",{href:!0});var Hot=s(ND);xko=r(Hot,"MegatronBertForNextSentencePrediction"),Hot.forEach(t),$ko=r(M0e," (MegatronBert model)"),M0e.forEach(t),kko=i(Os),k4=n(Os,"LI",{});var E0e=s(k4);kce=n(E0e,"STRONG",{});var Uot=s(kce);Sko=r(Uot,"mobilebert"),Uot.forEach(t),Rko=r(E0e," \u2014 "),jD=n(E0e,"A",{href:!0});var Jot=s(jD);Bko=r(Jot,"MobileBertForNextSentencePrediction"),Jot.forEach(t),Pko=r(E0e," (MobileBERT model)"),E0e.forEach(t),Iko=i(Os),S4=n(Os,"LI",{});var C0e=s(S4);Sce=n(C0e,"STRONG",{});var Yot=s(Sce);qko=r(Yot,"qdqbert"),Yot.forEach(t),Nko=r(C0e," \u2014 "),DD=n(C0e,"A",{href:!0});var Kot=s(DD);jko=r(Kot,"QDQBertForNextSentencePrediction"),Kot.forEach(t),Dko=r(C0e," (QDQBert model)"),C0e.forEach(t),Os.forEach(t),Gko=i(ra),R4=n(ra,"P",{});var w0e=s(R4);Oko=r(w0e,"The model is set in evaluation mode by default using "),Rce=n(w0e,"CODE",{});var Zot=s(Rce);Vko=r(Zot,"model.eval()"),Zot.forEach(t),Xko=r(w0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Bce=n(w0e,"CODE",{});var ert=s(Bce);zko=r(ert,"model.train()"),ert.forEach(t),w0e.forEach(t),Qko=i(ra),T(B4.$$.fragment,ra),ra.forEach(t),Gs.forEach(t),rBe=i(f),ji=n(f,"H2",{class:!0});var aIe=s(ji);P4=n(aIe,"A",{id:!0,class:!0,href:!0});var ort=s(P4);Pce=n(ort,"SPAN",{});var rrt=s(Pce);T(wA.$$.fragment,rrt),rrt.forEach(t),ort.forEach(t),Wko=i(aIe),Ice=n(aIe,"SPAN",{});var trt=s(Ice);Hko=r(trt,"AutoModelForTokenClassification"),trt.forEach(t),aIe.forEach(t),tBe=i(f),Bo=n(f,"DIV",{class:!0});var Vs=s(Bo);T(AA.$$.fragment,Vs),Uko=i(Vs),Di=n(Vs,"P",{});var dY=s(Di);Jko=r(dY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),GD=n(dY,"A",{href:!0});var art=s(GD);Yko=r(art,"from_pretrained()"),art.forEach(t),Kko=r(dY," class method or the "),OD=n(dY,"A",{href:!0});var nrt=s(OD);Zko=r(nrt,"from_config()"),nrt.forEach(t),eSo=r(dY,` class
method.`),dY.forEach(t),oSo=i(Vs),yA=n(Vs,"P",{});var nIe=s(yA);rSo=r(nIe,"This class cannot be instantiated directly using "),qce=n(nIe,"CODE",{});var srt=s(qce);tSo=r(srt,"__init__()"),srt.forEach(t),aSo=r(nIe," (throws an error)."),nIe.forEach(t),nSo=i(Vs),st=n(Vs,"DIV",{class:!0});var BC=s(st);T(LA.$$.fragment,BC),sSo=i(BC),Nce=n(BC,"P",{});var lrt=s(Nce);lSo=r(lrt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),lrt.forEach(t),iSo=i(BC),Gi=n(BC,"P",{});var cY=s(Gi);dSo=r(cY,`Note:
Loading a model from its configuration file does `),jce=n(cY,"STRONG",{});var irt=s(jce);cSo=r(irt,"not"),irt.forEach(t),fSo=r(cY,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(cY,"A",{href:!0});var drt=s(VD);mSo=r(drt,"from_pretrained()"),drt.forEach(t),gSo=r(cY," to load the model weights."),cY.forEach(t),hSo=i(BC),T(I4.$$.fragment,BC),BC.forEach(t),pSo=i(Vs),eo=n(Vs,"DIV",{class:!0});var ta=s(eo);T(xA.$$.fragment,ta),uSo=i(ta),Dce=n(ta,"P",{});var crt=s(Dce);_So=r(crt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),crt.forEach(t),bSo=i(ta),$a=n(ta,"P",{});var PC=s($a);vSo=r(PC,"The model class to instantiate is selected based on the "),Gce=n(PC,"CODE",{});var frt=s(Gce);FSo=r(frt,"model_type"),frt.forEach(t),TSo=r(PC,` property of the config object (either
passed as an argument or loaded from `),Oce=n(PC,"CODE",{});var mrt=s(Oce);MSo=r(mrt,"pretrained_model_name_or_path"),mrt.forEach(t),ESo=r(PC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Vce=n(PC,"CODE",{});var grt=s(Vce);CSo=r(grt,"pretrained_model_name_or_path"),grt.forEach(t),wSo=r(PC,":"),PC.forEach(t),ASo=i(ta),U=n(ta,"UL",{});var J=s(U);q4=n(J,"LI",{});var A0e=s(q4);Xce=n(A0e,"STRONG",{});var hrt=s(Xce);ySo=r(hrt,"albert"),hrt.forEach(t),LSo=r(A0e," \u2014 "),XD=n(A0e,"A",{href:!0});var prt=s(XD);xSo=r(prt,"AlbertForTokenClassification"),prt.forEach(t),$So=r(A0e," (ALBERT model)"),A0e.forEach(t),kSo=i(J),N4=n(J,"LI",{});var y0e=s(N4);zce=n(y0e,"STRONG",{});var urt=s(zce);SSo=r(urt,"bert"),urt.forEach(t),RSo=r(y0e," \u2014 "),zD=n(y0e,"A",{href:!0});var _rt=s(zD);BSo=r(_rt,"BertForTokenClassification"),_rt.forEach(t),PSo=r(y0e," (BERT model)"),y0e.forEach(t),ISo=i(J),j4=n(J,"LI",{});var L0e=s(j4);Qce=n(L0e,"STRONG",{});var brt=s(Qce);qSo=r(brt,"big_bird"),brt.forEach(t),NSo=r(L0e," \u2014 "),QD=n(L0e,"A",{href:!0});var vrt=s(QD);jSo=r(vrt,"BigBirdForTokenClassification"),vrt.forEach(t),DSo=r(L0e," (BigBird model)"),L0e.forEach(t),GSo=i(J),D4=n(J,"LI",{});var x0e=s(D4);Wce=n(x0e,"STRONG",{});var Frt=s(Wce);OSo=r(Frt,"camembert"),Frt.forEach(t),VSo=r(x0e," \u2014 "),WD=n(x0e,"A",{href:!0});var Trt=s(WD);XSo=r(Trt,"CamembertForTokenClassification"),Trt.forEach(t),zSo=r(x0e," (CamemBERT model)"),x0e.forEach(t),QSo=i(J),G4=n(J,"LI",{});var $0e=s(G4);Hce=n($0e,"STRONG",{});var Mrt=s(Hce);WSo=r(Mrt,"canine"),Mrt.forEach(t),HSo=r($0e," \u2014 "),HD=n($0e,"A",{href:!0});var Ert=s(HD);USo=r(Ert,"CanineForTokenClassification"),Ert.forEach(t),JSo=r($0e," (Canine model)"),$0e.forEach(t),YSo=i(J),O4=n(J,"LI",{});var k0e=s(O4);Uce=n(k0e,"STRONG",{});var Crt=s(Uce);KSo=r(Crt,"convbert"),Crt.forEach(t),ZSo=r(k0e," \u2014 "),UD=n(k0e,"A",{href:!0});var wrt=s(UD);eRo=r(wrt,"ConvBertForTokenClassification"),wrt.forEach(t),oRo=r(k0e," (ConvBERT model)"),k0e.forEach(t),rRo=i(J),V4=n(J,"LI",{});var S0e=s(V4);Jce=n(S0e,"STRONG",{});var Art=s(Jce);tRo=r(Art,"data2vec-text"),Art.forEach(t),aRo=r(S0e," \u2014 "),JD=n(S0e,"A",{href:!0});var yrt=s(JD);nRo=r(yrt,"Data2VecTextForTokenClassification"),yrt.forEach(t),sRo=r(S0e," (Data2VecText model)"),S0e.forEach(t),lRo=i(J),X4=n(J,"LI",{});var R0e=s(X4);Yce=n(R0e,"STRONG",{});var Lrt=s(Yce);iRo=r(Lrt,"deberta"),Lrt.forEach(t),dRo=r(R0e," \u2014 "),YD=n(R0e,"A",{href:!0});var xrt=s(YD);cRo=r(xrt,"DebertaForTokenClassification"),xrt.forEach(t),fRo=r(R0e," (DeBERTa model)"),R0e.forEach(t),mRo=i(J),z4=n(J,"LI",{});var B0e=s(z4);Kce=n(B0e,"STRONG",{});var $rt=s(Kce);gRo=r($rt,"deberta-v2"),$rt.forEach(t),hRo=r(B0e," \u2014 "),KD=n(B0e,"A",{href:!0});var krt=s(KD);pRo=r(krt,"DebertaV2ForTokenClassification"),krt.forEach(t),uRo=r(B0e," (DeBERTa-v2 model)"),B0e.forEach(t),_Ro=i(J),Q4=n(J,"LI",{});var P0e=s(Q4);Zce=n(P0e,"STRONG",{});var Srt=s(Zce);bRo=r(Srt,"distilbert"),Srt.forEach(t),vRo=r(P0e," \u2014 "),ZD=n(P0e,"A",{href:!0});var Rrt=s(ZD);FRo=r(Rrt,"DistilBertForTokenClassification"),Rrt.forEach(t),TRo=r(P0e," (DistilBERT model)"),P0e.forEach(t),MRo=i(J),W4=n(J,"LI",{});var I0e=s(W4);efe=n(I0e,"STRONG",{});var Brt=s(efe);ERo=r(Brt,"electra"),Brt.forEach(t),CRo=r(I0e," \u2014 "),eG=n(I0e,"A",{href:!0});var Prt=s(eG);wRo=r(Prt,"ElectraForTokenClassification"),Prt.forEach(t),ARo=r(I0e," (ELECTRA model)"),I0e.forEach(t),yRo=i(J),H4=n(J,"LI",{});var q0e=s(H4);ofe=n(q0e,"STRONG",{});var Irt=s(ofe);LRo=r(Irt,"flaubert"),Irt.forEach(t),xRo=r(q0e," \u2014 "),oG=n(q0e,"A",{href:!0});var qrt=s(oG);$Ro=r(qrt,"FlaubertForTokenClassification"),qrt.forEach(t),kRo=r(q0e," (FlauBERT model)"),q0e.forEach(t),SRo=i(J),U4=n(J,"LI",{});var N0e=s(U4);rfe=n(N0e,"STRONG",{});var Nrt=s(rfe);RRo=r(Nrt,"fnet"),Nrt.forEach(t),BRo=r(N0e," \u2014 "),rG=n(N0e,"A",{href:!0});var jrt=s(rG);PRo=r(jrt,"FNetForTokenClassification"),jrt.forEach(t),IRo=r(N0e," (FNet model)"),N0e.forEach(t),qRo=i(J),J4=n(J,"LI",{});var j0e=s(J4);tfe=n(j0e,"STRONG",{});var Drt=s(tfe);NRo=r(Drt,"funnel"),Drt.forEach(t),jRo=r(j0e," \u2014 "),tG=n(j0e,"A",{href:!0});var Grt=s(tG);DRo=r(Grt,"FunnelForTokenClassification"),Grt.forEach(t),GRo=r(j0e," (Funnel Transformer model)"),j0e.forEach(t),ORo=i(J),Y4=n(J,"LI",{});var D0e=s(Y4);afe=n(D0e,"STRONG",{});var Ort=s(afe);VRo=r(Ort,"gpt2"),Ort.forEach(t),XRo=r(D0e," \u2014 "),aG=n(D0e,"A",{href:!0});var Vrt=s(aG);zRo=r(Vrt,"GPT2ForTokenClassification"),Vrt.forEach(t),QRo=r(D0e," (OpenAI GPT-2 model)"),D0e.forEach(t),WRo=i(J),K4=n(J,"LI",{});var G0e=s(K4);nfe=n(G0e,"STRONG",{});var Xrt=s(nfe);HRo=r(Xrt,"ibert"),Xrt.forEach(t),URo=r(G0e," \u2014 "),nG=n(G0e,"A",{href:!0});var zrt=s(nG);JRo=r(zrt,"IBertForTokenClassification"),zrt.forEach(t),YRo=r(G0e," (I-BERT model)"),G0e.forEach(t),KRo=i(J),Z4=n(J,"LI",{});var O0e=s(Z4);sfe=n(O0e,"STRONG",{});var Qrt=s(sfe);ZRo=r(Qrt,"layoutlm"),Qrt.forEach(t),eBo=r(O0e," \u2014 "),sG=n(O0e,"A",{href:!0});var Wrt=s(sG);oBo=r(Wrt,"LayoutLMForTokenClassification"),Wrt.forEach(t),rBo=r(O0e," (LayoutLM model)"),O0e.forEach(t),tBo=i(J),e2=n(J,"LI",{});var V0e=s(e2);lfe=n(V0e,"STRONG",{});var Hrt=s(lfe);aBo=r(Hrt,"layoutlmv2"),Hrt.forEach(t),nBo=r(V0e," \u2014 "),lG=n(V0e,"A",{href:!0});var Urt=s(lG);sBo=r(Urt,"LayoutLMv2ForTokenClassification"),Urt.forEach(t),lBo=r(V0e," (LayoutLMv2 model)"),V0e.forEach(t),iBo=i(J),o2=n(J,"LI",{});var X0e=s(o2);ife=n(X0e,"STRONG",{});var Jrt=s(ife);dBo=r(Jrt,"longformer"),Jrt.forEach(t),cBo=r(X0e," \u2014 "),iG=n(X0e,"A",{href:!0});var Yrt=s(iG);fBo=r(Yrt,"LongformerForTokenClassification"),Yrt.forEach(t),mBo=r(X0e," (Longformer model)"),X0e.forEach(t),gBo=i(J),r2=n(J,"LI",{});var z0e=s(r2);dfe=n(z0e,"STRONG",{});var Krt=s(dfe);hBo=r(Krt,"megatron-bert"),Krt.forEach(t),pBo=r(z0e," \u2014 "),dG=n(z0e,"A",{href:!0});var Zrt=s(dG);uBo=r(Zrt,"MegatronBertForTokenClassification"),Zrt.forEach(t),_Bo=r(z0e," (MegatronBert model)"),z0e.forEach(t),bBo=i(J),t2=n(J,"LI",{});var Q0e=s(t2);cfe=n(Q0e,"STRONG",{});var ett=s(cfe);vBo=r(ett,"mobilebert"),ett.forEach(t),FBo=r(Q0e," \u2014 "),cG=n(Q0e,"A",{href:!0});var ott=s(cG);TBo=r(ott,"MobileBertForTokenClassification"),ott.forEach(t),MBo=r(Q0e," (MobileBERT model)"),Q0e.forEach(t),EBo=i(J),a2=n(J,"LI",{});var W0e=s(a2);ffe=n(W0e,"STRONG",{});var rtt=s(ffe);CBo=r(rtt,"mpnet"),rtt.forEach(t),wBo=r(W0e," \u2014 "),fG=n(W0e,"A",{href:!0});var ttt=s(fG);ABo=r(ttt,"MPNetForTokenClassification"),ttt.forEach(t),yBo=r(W0e," (MPNet model)"),W0e.forEach(t),LBo=i(J),n2=n(J,"LI",{});var H0e=s(n2);mfe=n(H0e,"STRONG",{});var att=s(mfe);xBo=r(att,"nystromformer"),att.forEach(t),$Bo=r(H0e," \u2014 "),mG=n(H0e,"A",{href:!0});var ntt=s(mG);kBo=r(ntt,"NystromformerForTokenClassification"),ntt.forEach(t),SBo=r(H0e," (Nystromformer model)"),H0e.forEach(t),RBo=i(J),s2=n(J,"LI",{});var U0e=s(s2);gfe=n(U0e,"STRONG",{});var stt=s(gfe);BBo=r(stt,"qdqbert"),stt.forEach(t),PBo=r(U0e," \u2014 "),gG=n(U0e,"A",{href:!0});var ltt=s(gG);IBo=r(ltt,"QDQBertForTokenClassification"),ltt.forEach(t),qBo=r(U0e," (QDQBert model)"),U0e.forEach(t),NBo=i(J),l2=n(J,"LI",{});var J0e=s(l2);hfe=n(J0e,"STRONG",{});var itt=s(hfe);jBo=r(itt,"rembert"),itt.forEach(t),DBo=r(J0e," \u2014 "),hG=n(J0e,"A",{href:!0});var dtt=s(hG);GBo=r(dtt,"RemBertForTokenClassification"),dtt.forEach(t),OBo=r(J0e," (RemBERT model)"),J0e.forEach(t),VBo=i(J),i2=n(J,"LI",{});var Y0e=s(i2);pfe=n(Y0e,"STRONG",{});var ctt=s(pfe);XBo=r(ctt,"roberta"),ctt.forEach(t),zBo=r(Y0e," \u2014 "),pG=n(Y0e,"A",{href:!0});var ftt=s(pG);QBo=r(ftt,"RobertaForTokenClassification"),ftt.forEach(t),WBo=r(Y0e," (RoBERTa model)"),Y0e.forEach(t),HBo=i(J),d2=n(J,"LI",{});var K0e=s(d2);ufe=n(K0e,"STRONG",{});var mtt=s(ufe);UBo=r(mtt,"roformer"),mtt.forEach(t),JBo=r(K0e," \u2014 "),uG=n(K0e,"A",{href:!0});var gtt=s(uG);YBo=r(gtt,"RoFormerForTokenClassification"),gtt.forEach(t),KBo=r(K0e," (RoFormer model)"),K0e.forEach(t),ZBo=i(J),c2=n(J,"LI",{});var Z0e=s(c2);_fe=n(Z0e,"STRONG",{});var htt=s(_fe);ePo=r(htt,"squeezebert"),htt.forEach(t),oPo=r(Z0e," \u2014 "),_G=n(Z0e,"A",{href:!0});var ptt=s(_G);rPo=r(ptt,"SqueezeBertForTokenClassification"),ptt.forEach(t),tPo=r(Z0e," (SqueezeBERT model)"),Z0e.forEach(t),aPo=i(J),f2=n(J,"LI",{});var eye=s(f2);bfe=n(eye,"STRONG",{});var utt=s(bfe);nPo=r(utt,"xlm"),utt.forEach(t),sPo=r(eye," \u2014 "),bG=n(eye,"A",{href:!0});var _tt=s(bG);lPo=r(_tt,"XLMForTokenClassification"),_tt.forEach(t),iPo=r(eye," (XLM model)"),eye.forEach(t),dPo=i(J),m2=n(J,"LI",{});var oye=s(m2);vfe=n(oye,"STRONG",{});var btt=s(vfe);cPo=r(btt,"xlm-roberta"),btt.forEach(t),fPo=r(oye," \u2014 "),vG=n(oye,"A",{href:!0});var vtt=s(vG);mPo=r(vtt,"XLMRobertaForTokenClassification"),vtt.forEach(t),gPo=r(oye," (XLM-RoBERTa model)"),oye.forEach(t),hPo=i(J),g2=n(J,"LI",{});var rye=s(g2);Ffe=n(rye,"STRONG",{});var Ftt=s(Ffe);pPo=r(Ftt,"xlm-roberta-xl"),Ftt.forEach(t),uPo=r(rye," \u2014 "),FG=n(rye,"A",{href:!0});var Ttt=s(FG);_Po=r(Ttt,"XLMRobertaXLForTokenClassification"),Ttt.forEach(t),bPo=r(rye," (XLM-RoBERTa-XL model)"),rye.forEach(t),vPo=i(J),h2=n(J,"LI",{});var tye=s(h2);Tfe=n(tye,"STRONG",{});var Mtt=s(Tfe);FPo=r(Mtt,"xlnet"),Mtt.forEach(t),TPo=r(tye," \u2014 "),TG=n(tye,"A",{href:!0});var Ett=s(TG);MPo=r(Ett,"XLNetForTokenClassification"),Ett.forEach(t),EPo=r(tye," (XLNet model)"),tye.forEach(t),CPo=i(J),p2=n(J,"LI",{});var aye=s(p2);Mfe=n(aye,"STRONG",{});var Ctt=s(Mfe);wPo=r(Ctt,"yoso"),Ctt.forEach(t),APo=r(aye," \u2014 "),MG=n(aye,"A",{href:!0});var wtt=s(MG);yPo=r(wtt,"YosoForTokenClassification"),wtt.forEach(t),LPo=r(aye," (YOSO model)"),aye.forEach(t),J.forEach(t),xPo=i(ta),u2=n(ta,"P",{});var nye=s(u2);$Po=r(nye,"The model is set in evaluation mode by default using "),Efe=n(nye,"CODE",{});var Att=s(Efe);kPo=r(Att,"model.eval()"),Att.forEach(t),SPo=r(nye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cfe=n(nye,"CODE",{});var ytt=s(Cfe);RPo=r(ytt,"model.train()"),ytt.forEach(t),nye.forEach(t),BPo=i(ta),T(_2.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),aBe=i(f),Oi=n(f,"H2",{class:!0});var sIe=s(Oi);b2=n(sIe,"A",{id:!0,class:!0,href:!0});var Ltt=s(b2);wfe=n(Ltt,"SPAN",{});var xtt=s(wfe);T($A.$$.fragment,xtt),xtt.forEach(t),Ltt.forEach(t),PPo=i(sIe),Afe=n(sIe,"SPAN",{});var $tt=s(Afe);IPo=r($tt,"AutoModelForQuestionAnswering"),$tt.forEach(t),sIe.forEach(t),nBe=i(f),Po=n(f,"DIV",{class:!0});var Xs=s(Po);T(kA.$$.fragment,Xs),qPo=i(Xs),Vi=n(Xs,"P",{});var fY=s(Vi);NPo=r(fY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),EG=n(fY,"A",{href:!0});var ktt=s(EG);jPo=r(ktt,"from_pretrained()"),ktt.forEach(t),DPo=r(fY," class method or the "),CG=n(fY,"A",{href:!0});var Stt=s(CG);GPo=r(Stt,"from_config()"),Stt.forEach(t),OPo=r(fY,` class
method.`),fY.forEach(t),VPo=i(Xs),SA=n(Xs,"P",{});var lIe=s(SA);XPo=r(lIe,"This class cannot be instantiated directly using "),yfe=n(lIe,"CODE",{});var Rtt=s(yfe);zPo=r(Rtt,"__init__()"),Rtt.forEach(t),QPo=r(lIe," (throws an error)."),lIe.forEach(t),WPo=i(Xs),lt=n(Xs,"DIV",{class:!0});var IC=s(lt);T(RA.$$.fragment,IC),HPo=i(IC),Lfe=n(IC,"P",{});var Btt=s(Lfe);UPo=r(Btt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Btt.forEach(t),JPo=i(IC),Xi=n(IC,"P",{});var mY=s(Xi);YPo=r(mY,`Note:
Loading a model from its configuration file does `),xfe=n(mY,"STRONG",{});var Ptt=s(xfe);KPo=r(Ptt,"not"),Ptt.forEach(t),ZPo=r(mY,` load the model weights. It only affects the
model\u2019s configuration. Use `),wG=n(mY,"A",{href:!0});var Itt=s(wG);eIo=r(Itt,"from_pretrained()"),Itt.forEach(t),oIo=r(mY," to load the model weights."),mY.forEach(t),rIo=i(IC),T(v2.$$.fragment,IC),IC.forEach(t),tIo=i(Xs),oo=n(Xs,"DIV",{class:!0});var aa=s(oo);T(BA.$$.fragment,aa),aIo=i(aa),$fe=n(aa,"P",{});var qtt=s($fe);nIo=r(qtt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),qtt.forEach(t),sIo=i(aa),ka=n(aa,"P",{});var qC=s(ka);lIo=r(qC,"The model class to instantiate is selected based on the "),kfe=n(qC,"CODE",{});var Ntt=s(kfe);iIo=r(Ntt,"model_type"),Ntt.forEach(t),dIo=r(qC,` property of the config object (either
passed as an argument or loaded from `),Sfe=n(qC,"CODE",{});var jtt=s(Sfe);cIo=r(jtt,"pretrained_model_name_or_path"),jtt.forEach(t),fIo=r(qC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rfe=n(qC,"CODE",{});var Dtt=s(Rfe);mIo=r(Dtt,"pretrained_model_name_or_path"),Dtt.forEach(t),gIo=r(qC,":"),qC.forEach(t),hIo=i(aa),O=n(aa,"UL",{});var X=s(O);F2=n(X,"LI",{});var sye=s(F2);Bfe=n(sye,"STRONG",{});var Gtt=s(Bfe);pIo=r(Gtt,"albert"),Gtt.forEach(t),uIo=r(sye," \u2014 "),AG=n(sye,"A",{href:!0});var Ott=s(AG);_Io=r(Ott,"AlbertForQuestionAnswering"),Ott.forEach(t),bIo=r(sye," (ALBERT model)"),sye.forEach(t),vIo=i(X),T2=n(X,"LI",{});var lye=s(T2);Pfe=n(lye,"STRONG",{});var Vtt=s(Pfe);FIo=r(Vtt,"bart"),Vtt.forEach(t),TIo=r(lye," \u2014 "),yG=n(lye,"A",{href:!0});var Xtt=s(yG);MIo=r(Xtt,"BartForQuestionAnswering"),Xtt.forEach(t),EIo=r(lye," (BART model)"),lye.forEach(t),CIo=i(X),M2=n(X,"LI",{});var iye=s(M2);Ife=n(iye,"STRONG",{});var ztt=s(Ife);wIo=r(ztt,"bert"),ztt.forEach(t),AIo=r(iye," \u2014 "),LG=n(iye,"A",{href:!0});var Qtt=s(LG);yIo=r(Qtt,"BertForQuestionAnswering"),Qtt.forEach(t),LIo=r(iye," (BERT model)"),iye.forEach(t),xIo=i(X),E2=n(X,"LI",{});var dye=s(E2);qfe=n(dye,"STRONG",{});var Wtt=s(qfe);$Io=r(Wtt,"big_bird"),Wtt.forEach(t),kIo=r(dye," \u2014 "),xG=n(dye,"A",{href:!0});var Htt=s(xG);SIo=r(Htt,"BigBirdForQuestionAnswering"),Htt.forEach(t),RIo=r(dye," (BigBird model)"),dye.forEach(t),BIo=i(X),C2=n(X,"LI",{});var cye=s(C2);Nfe=n(cye,"STRONG",{});var Utt=s(Nfe);PIo=r(Utt,"bigbird_pegasus"),Utt.forEach(t),IIo=r(cye," \u2014 "),$G=n(cye,"A",{href:!0});var Jtt=s($G);qIo=r(Jtt,"BigBirdPegasusForQuestionAnswering"),Jtt.forEach(t),NIo=r(cye," (BigBirdPegasus model)"),cye.forEach(t),jIo=i(X),w2=n(X,"LI",{});var fye=s(w2);jfe=n(fye,"STRONG",{});var Ytt=s(jfe);DIo=r(Ytt,"camembert"),Ytt.forEach(t),GIo=r(fye," \u2014 "),kG=n(fye,"A",{href:!0});var Ktt=s(kG);OIo=r(Ktt,"CamembertForQuestionAnswering"),Ktt.forEach(t),VIo=r(fye," (CamemBERT model)"),fye.forEach(t),XIo=i(X),A2=n(X,"LI",{});var mye=s(A2);Dfe=n(mye,"STRONG",{});var Ztt=s(Dfe);zIo=r(Ztt,"canine"),Ztt.forEach(t),QIo=r(mye," \u2014 "),SG=n(mye,"A",{href:!0});var eat=s(SG);WIo=r(eat,"CanineForQuestionAnswering"),eat.forEach(t),HIo=r(mye," (Canine model)"),mye.forEach(t),UIo=i(X),y2=n(X,"LI",{});var gye=s(y2);Gfe=n(gye,"STRONG",{});var oat=s(Gfe);JIo=r(oat,"convbert"),oat.forEach(t),YIo=r(gye," \u2014 "),RG=n(gye,"A",{href:!0});var rat=s(RG);KIo=r(rat,"ConvBertForQuestionAnswering"),rat.forEach(t),ZIo=r(gye," (ConvBERT model)"),gye.forEach(t),eqo=i(X),L2=n(X,"LI",{});var hye=s(L2);Ofe=n(hye,"STRONG",{});var tat=s(Ofe);oqo=r(tat,"data2vec-text"),tat.forEach(t),rqo=r(hye," \u2014 "),BG=n(hye,"A",{href:!0});var aat=s(BG);tqo=r(aat,"Data2VecTextForQuestionAnswering"),aat.forEach(t),aqo=r(hye," (Data2VecText model)"),hye.forEach(t),nqo=i(X),x2=n(X,"LI",{});var pye=s(x2);Vfe=n(pye,"STRONG",{});var nat=s(Vfe);sqo=r(nat,"deberta"),nat.forEach(t),lqo=r(pye," \u2014 "),PG=n(pye,"A",{href:!0});var sat=s(PG);iqo=r(sat,"DebertaForQuestionAnswering"),sat.forEach(t),dqo=r(pye," (DeBERTa model)"),pye.forEach(t),cqo=i(X),$2=n(X,"LI",{});var uye=s($2);Xfe=n(uye,"STRONG",{});var lat=s(Xfe);fqo=r(lat,"deberta-v2"),lat.forEach(t),mqo=r(uye," \u2014 "),IG=n(uye,"A",{href:!0});var iat=s(IG);gqo=r(iat,"DebertaV2ForQuestionAnswering"),iat.forEach(t),hqo=r(uye," (DeBERTa-v2 model)"),uye.forEach(t),pqo=i(X),k2=n(X,"LI",{});var _ye=s(k2);zfe=n(_ye,"STRONG",{});var dat=s(zfe);uqo=r(dat,"distilbert"),dat.forEach(t),_qo=r(_ye," \u2014 "),qG=n(_ye,"A",{href:!0});var cat=s(qG);bqo=r(cat,"DistilBertForQuestionAnswering"),cat.forEach(t),vqo=r(_ye," (DistilBERT model)"),_ye.forEach(t),Fqo=i(X),S2=n(X,"LI",{});var bye=s(S2);Qfe=n(bye,"STRONG",{});var fat=s(Qfe);Tqo=r(fat,"electra"),fat.forEach(t),Mqo=r(bye," \u2014 "),NG=n(bye,"A",{href:!0});var mat=s(NG);Eqo=r(mat,"ElectraForQuestionAnswering"),mat.forEach(t),Cqo=r(bye," (ELECTRA model)"),bye.forEach(t),wqo=i(X),R2=n(X,"LI",{});var vye=s(R2);Wfe=n(vye,"STRONG",{});var gat=s(Wfe);Aqo=r(gat,"flaubert"),gat.forEach(t),yqo=r(vye," \u2014 "),jG=n(vye,"A",{href:!0});var hat=s(jG);Lqo=r(hat,"FlaubertForQuestionAnsweringSimple"),hat.forEach(t),xqo=r(vye," (FlauBERT model)"),vye.forEach(t),$qo=i(X),B2=n(X,"LI",{});var Fye=s(B2);Hfe=n(Fye,"STRONG",{});var pat=s(Hfe);kqo=r(pat,"fnet"),pat.forEach(t),Sqo=r(Fye," \u2014 "),DG=n(Fye,"A",{href:!0});var uat=s(DG);Rqo=r(uat,"FNetForQuestionAnswering"),uat.forEach(t),Bqo=r(Fye," (FNet model)"),Fye.forEach(t),Pqo=i(X),P2=n(X,"LI",{});var Tye=s(P2);Ufe=n(Tye,"STRONG",{});var _at=s(Ufe);Iqo=r(_at,"funnel"),_at.forEach(t),qqo=r(Tye," \u2014 "),GG=n(Tye,"A",{href:!0});var bat=s(GG);Nqo=r(bat,"FunnelForQuestionAnswering"),bat.forEach(t),jqo=r(Tye," (Funnel Transformer model)"),Tye.forEach(t),Dqo=i(X),I2=n(X,"LI",{});var Mye=s(I2);Jfe=n(Mye,"STRONG",{});var vat=s(Jfe);Gqo=r(vat,"gptj"),vat.forEach(t),Oqo=r(Mye," \u2014 "),OG=n(Mye,"A",{href:!0});var Fat=s(OG);Vqo=r(Fat,"GPTJForQuestionAnswering"),Fat.forEach(t),Xqo=r(Mye," (GPT-J model)"),Mye.forEach(t),zqo=i(X),q2=n(X,"LI",{});var Eye=s(q2);Yfe=n(Eye,"STRONG",{});var Tat=s(Yfe);Qqo=r(Tat,"ibert"),Tat.forEach(t),Wqo=r(Eye," \u2014 "),VG=n(Eye,"A",{href:!0});var Mat=s(VG);Hqo=r(Mat,"IBertForQuestionAnswering"),Mat.forEach(t),Uqo=r(Eye," (I-BERT model)"),Eye.forEach(t),Jqo=i(X),N2=n(X,"LI",{});var Cye=s(N2);Kfe=n(Cye,"STRONG",{});var Eat=s(Kfe);Yqo=r(Eat,"layoutlmv2"),Eat.forEach(t),Kqo=r(Cye," \u2014 "),XG=n(Cye,"A",{href:!0});var Cat=s(XG);Zqo=r(Cat,"LayoutLMv2ForQuestionAnswering"),Cat.forEach(t),eNo=r(Cye," (LayoutLMv2 model)"),Cye.forEach(t),oNo=i(X),j2=n(X,"LI",{});var wye=s(j2);Zfe=n(wye,"STRONG",{});var wat=s(Zfe);rNo=r(wat,"led"),wat.forEach(t),tNo=r(wye," \u2014 "),zG=n(wye,"A",{href:!0});var Aat=s(zG);aNo=r(Aat,"LEDForQuestionAnswering"),Aat.forEach(t),nNo=r(wye," (LED model)"),wye.forEach(t),sNo=i(X),D2=n(X,"LI",{});var Aye=s(D2);eme=n(Aye,"STRONG",{});var yat=s(eme);lNo=r(yat,"longformer"),yat.forEach(t),iNo=r(Aye," \u2014 "),QG=n(Aye,"A",{href:!0});var Lat=s(QG);dNo=r(Lat,"LongformerForQuestionAnswering"),Lat.forEach(t),cNo=r(Aye," (Longformer model)"),Aye.forEach(t),fNo=i(X),G2=n(X,"LI",{});var yye=s(G2);ome=n(yye,"STRONG",{});var xat=s(ome);mNo=r(xat,"lxmert"),xat.forEach(t),gNo=r(yye," \u2014 "),WG=n(yye,"A",{href:!0});var $at=s(WG);hNo=r($at,"LxmertForQuestionAnswering"),$at.forEach(t),pNo=r(yye," (LXMERT model)"),yye.forEach(t),uNo=i(X),O2=n(X,"LI",{});var Lye=s(O2);rme=n(Lye,"STRONG",{});var kat=s(rme);_No=r(kat,"mbart"),kat.forEach(t),bNo=r(Lye," \u2014 "),HG=n(Lye,"A",{href:!0});var Sat=s(HG);vNo=r(Sat,"MBartForQuestionAnswering"),Sat.forEach(t),FNo=r(Lye," (mBART model)"),Lye.forEach(t),TNo=i(X),V2=n(X,"LI",{});var xye=s(V2);tme=n(xye,"STRONG",{});var Rat=s(tme);MNo=r(Rat,"megatron-bert"),Rat.forEach(t),ENo=r(xye," \u2014 "),UG=n(xye,"A",{href:!0});var Bat=s(UG);CNo=r(Bat,"MegatronBertForQuestionAnswering"),Bat.forEach(t),wNo=r(xye," (MegatronBert model)"),xye.forEach(t),ANo=i(X),X2=n(X,"LI",{});var $ye=s(X2);ame=n($ye,"STRONG",{});var Pat=s(ame);yNo=r(Pat,"mobilebert"),Pat.forEach(t),LNo=r($ye," \u2014 "),JG=n($ye,"A",{href:!0});var Iat=s(JG);xNo=r(Iat,"MobileBertForQuestionAnswering"),Iat.forEach(t),$No=r($ye," (MobileBERT model)"),$ye.forEach(t),kNo=i(X),z2=n(X,"LI",{});var kye=s(z2);nme=n(kye,"STRONG",{});var qat=s(nme);SNo=r(qat,"mpnet"),qat.forEach(t),RNo=r(kye," \u2014 "),YG=n(kye,"A",{href:!0});var Nat=s(YG);BNo=r(Nat,"MPNetForQuestionAnswering"),Nat.forEach(t),PNo=r(kye," (MPNet model)"),kye.forEach(t),INo=i(X),Q2=n(X,"LI",{});var Sye=s(Q2);sme=n(Sye,"STRONG",{});var jat=s(sme);qNo=r(jat,"nystromformer"),jat.forEach(t),NNo=r(Sye," \u2014 "),KG=n(Sye,"A",{href:!0});var Dat=s(KG);jNo=r(Dat,"NystromformerForQuestionAnswering"),Dat.forEach(t),DNo=r(Sye," (Nystromformer model)"),Sye.forEach(t),GNo=i(X),W2=n(X,"LI",{});var Rye=s(W2);lme=n(Rye,"STRONG",{});var Gat=s(lme);ONo=r(Gat,"qdqbert"),Gat.forEach(t),VNo=r(Rye," \u2014 "),ZG=n(Rye,"A",{href:!0});var Oat=s(ZG);XNo=r(Oat,"QDQBertForQuestionAnswering"),Oat.forEach(t),zNo=r(Rye," (QDQBert model)"),Rye.forEach(t),QNo=i(X),H2=n(X,"LI",{});var Bye=s(H2);ime=n(Bye,"STRONG",{});var Vat=s(ime);WNo=r(Vat,"reformer"),Vat.forEach(t),HNo=r(Bye," \u2014 "),eO=n(Bye,"A",{href:!0});var Xat=s(eO);UNo=r(Xat,"ReformerForQuestionAnswering"),Xat.forEach(t),JNo=r(Bye," (Reformer model)"),Bye.forEach(t),YNo=i(X),U2=n(X,"LI",{});var Pye=s(U2);dme=n(Pye,"STRONG",{});var zat=s(dme);KNo=r(zat,"rembert"),zat.forEach(t),ZNo=r(Pye," \u2014 "),oO=n(Pye,"A",{href:!0});var Qat=s(oO);ejo=r(Qat,"RemBertForQuestionAnswering"),Qat.forEach(t),ojo=r(Pye," (RemBERT model)"),Pye.forEach(t),rjo=i(X),J2=n(X,"LI",{});var Iye=s(J2);cme=n(Iye,"STRONG",{});var Wat=s(cme);tjo=r(Wat,"roberta"),Wat.forEach(t),ajo=r(Iye," \u2014 "),rO=n(Iye,"A",{href:!0});var Hat=s(rO);njo=r(Hat,"RobertaForQuestionAnswering"),Hat.forEach(t),sjo=r(Iye," (RoBERTa model)"),Iye.forEach(t),ljo=i(X),Y2=n(X,"LI",{});var qye=s(Y2);fme=n(qye,"STRONG",{});var Uat=s(fme);ijo=r(Uat,"roformer"),Uat.forEach(t),djo=r(qye," \u2014 "),tO=n(qye,"A",{href:!0});var Jat=s(tO);cjo=r(Jat,"RoFormerForQuestionAnswering"),Jat.forEach(t),fjo=r(qye," (RoFormer model)"),qye.forEach(t),mjo=i(X),K2=n(X,"LI",{});var Nye=s(K2);mme=n(Nye,"STRONG",{});var Yat=s(mme);gjo=r(Yat,"splinter"),Yat.forEach(t),hjo=r(Nye," \u2014 "),aO=n(Nye,"A",{href:!0});var Kat=s(aO);pjo=r(Kat,"SplinterForQuestionAnswering"),Kat.forEach(t),ujo=r(Nye," (Splinter model)"),Nye.forEach(t),_jo=i(X),Z2=n(X,"LI",{});var jye=s(Z2);gme=n(jye,"STRONG",{});var Zat=s(gme);bjo=r(Zat,"squeezebert"),Zat.forEach(t),vjo=r(jye," \u2014 "),nO=n(jye,"A",{href:!0});var ent=s(nO);Fjo=r(ent,"SqueezeBertForQuestionAnswering"),ent.forEach(t),Tjo=r(jye," (SqueezeBERT model)"),jye.forEach(t),Mjo=i(X),ev=n(X,"LI",{});var Dye=s(ev);hme=n(Dye,"STRONG",{});var ont=s(hme);Ejo=r(ont,"xlm"),ont.forEach(t),Cjo=r(Dye," \u2014 "),sO=n(Dye,"A",{href:!0});var rnt=s(sO);wjo=r(rnt,"XLMForQuestionAnsweringSimple"),rnt.forEach(t),Ajo=r(Dye," (XLM model)"),Dye.forEach(t),yjo=i(X),ov=n(X,"LI",{});var Gye=s(ov);pme=n(Gye,"STRONG",{});var tnt=s(pme);Ljo=r(tnt,"xlm-roberta"),tnt.forEach(t),xjo=r(Gye," \u2014 "),lO=n(Gye,"A",{href:!0});var ant=s(lO);$jo=r(ant,"XLMRobertaForQuestionAnswering"),ant.forEach(t),kjo=r(Gye," (XLM-RoBERTa model)"),Gye.forEach(t),Sjo=i(X),rv=n(X,"LI",{});var Oye=s(rv);ume=n(Oye,"STRONG",{});var nnt=s(ume);Rjo=r(nnt,"xlm-roberta-xl"),nnt.forEach(t),Bjo=r(Oye," \u2014 "),iO=n(Oye,"A",{href:!0});var snt=s(iO);Pjo=r(snt,"XLMRobertaXLForQuestionAnswering"),snt.forEach(t),Ijo=r(Oye," (XLM-RoBERTa-XL model)"),Oye.forEach(t),qjo=i(X),tv=n(X,"LI",{});var Vye=s(tv);_me=n(Vye,"STRONG",{});var lnt=s(_me);Njo=r(lnt,"xlnet"),lnt.forEach(t),jjo=r(Vye," \u2014 "),dO=n(Vye,"A",{href:!0});var int=s(dO);Djo=r(int,"XLNetForQuestionAnsweringSimple"),int.forEach(t),Gjo=r(Vye," (XLNet model)"),Vye.forEach(t),Ojo=i(X),av=n(X,"LI",{});var Xye=s(av);bme=n(Xye,"STRONG",{});var dnt=s(bme);Vjo=r(dnt,"yoso"),dnt.forEach(t),Xjo=r(Xye," \u2014 "),cO=n(Xye,"A",{href:!0});var cnt=s(cO);zjo=r(cnt,"YosoForQuestionAnswering"),cnt.forEach(t),Qjo=r(Xye," (YOSO model)"),Xye.forEach(t),X.forEach(t),Wjo=i(aa),nv=n(aa,"P",{});var zye=s(nv);Hjo=r(zye,"The model is set in evaluation mode by default using "),vme=n(zye,"CODE",{});var fnt=s(vme);Ujo=r(fnt,"model.eval()"),fnt.forEach(t),Jjo=r(zye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fme=n(zye,"CODE",{});var mnt=s(Fme);Yjo=r(mnt,"model.train()"),mnt.forEach(t),zye.forEach(t),Kjo=i(aa),T(sv.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),sBe=i(f),zi=n(f,"H2",{class:!0});var iIe=s(zi);lv=n(iIe,"A",{id:!0,class:!0,href:!0});var gnt=s(lv);Tme=n(gnt,"SPAN",{});var hnt=s(Tme);T(PA.$$.fragment,hnt),hnt.forEach(t),gnt.forEach(t),Zjo=i(iIe),Mme=n(iIe,"SPAN",{});var pnt=s(Mme);eDo=r(pnt,"AutoModelForTableQuestionAnswering"),pnt.forEach(t),iIe.forEach(t),lBe=i(f),Io=n(f,"DIV",{class:!0});var zs=s(Io);T(IA.$$.fragment,zs),oDo=i(zs),Qi=n(zs,"P",{});var gY=s(Qi);rDo=r(gY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),fO=n(gY,"A",{href:!0});var unt=s(fO);tDo=r(unt,"from_pretrained()"),unt.forEach(t),aDo=r(gY," class method or the "),mO=n(gY,"A",{href:!0});var _nt=s(mO);nDo=r(_nt,"from_config()"),_nt.forEach(t),sDo=r(gY,` class
method.`),gY.forEach(t),lDo=i(zs),qA=n(zs,"P",{});var dIe=s(qA);iDo=r(dIe,"This class cannot be instantiated directly using "),Eme=n(dIe,"CODE",{});var bnt=s(Eme);dDo=r(bnt,"__init__()"),bnt.forEach(t),cDo=r(dIe," (throws an error)."),dIe.forEach(t),fDo=i(zs),it=n(zs,"DIV",{class:!0});var NC=s(it);T(NA.$$.fragment,NC),mDo=i(NC),Cme=n(NC,"P",{});var vnt=s(Cme);gDo=r(vnt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vnt.forEach(t),hDo=i(NC),Wi=n(NC,"P",{});var hY=s(Wi);pDo=r(hY,`Note:
Loading a model from its configuration file does `),wme=n(hY,"STRONG",{});var Fnt=s(wme);uDo=r(Fnt,"not"),Fnt.forEach(t),_Do=r(hY,` load the model weights. It only affects the
model\u2019s configuration. Use `),gO=n(hY,"A",{href:!0});var Tnt=s(gO);bDo=r(Tnt,"from_pretrained()"),Tnt.forEach(t),vDo=r(hY," to load the model weights."),hY.forEach(t),FDo=i(NC),T(iv.$$.fragment,NC),NC.forEach(t),TDo=i(zs),ro=n(zs,"DIV",{class:!0});var na=s(ro);T(jA.$$.fragment,na),MDo=i(na),Ame=n(na,"P",{});var Mnt=s(Ame);EDo=r(Mnt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),Mnt.forEach(t),CDo=i(na),Sa=n(na,"P",{});var jC=s(Sa);wDo=r(jC,"The model class to instantiate is selected based on the "),yme=n(jC,"CODE",{});var Ent=s(yme);ADo=r(Ent,"model_type"),Ent.forEach(t),yDo=r(jC,` property of the config object (either
passed as an argument or loaded from `),Lme=n(jC,"CODE",{});var Cnt=s(Lme);LDo=r(Cnt,"pretrained_model_name_or_path"),Cnt.forEach(t),xDo=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xme=n(jC,"CODE",{});var wnt=s(xme);$Do=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),kDo=r(jC,":"),jC.forEach(t),SDo=i(na),$me=n(na,"UL",{});var Ant=s($me);dv=n(Ant,"LI",{});var Qye=s(dv);kme=n(Qye,"STRONG",{});var ynt=s(kme);RDo=r(ynt,"tapas"),ynt.forEach(t),BDo=r(Qye," \u2014 "),hO=n(Qye,"A",{href:!0});var Lnt=s(hO);PDo=r(Lnt,"TapasForQuestionAnswering"),Lnt.forEach(t),IDo=r(Qye," (TAPAS model)"),Qye.forEach(t),Ant.forEach(t),qDo=i(na),cv=n(na,"P",{});var Wye=s(cv);NDo=r(Wye,"The model is set in evaluation mode by default using "),Sme=n(Wye,"CODE",{});var xnt=s(Sme);jDo=r(xnt,"model.eval()"),xnt.forEach(t),DDo=r(Wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rme=n(Wye,"CODE",{});var $nt=s(Rme);GDo=r($nt,"model.train()"),$nt.forEach(t),Wye.forEach(t),ODo=i(na),T(fv.$$.fragment,na),na.forEach(t),zs.forEach(t),iBe=i(f),Hi=n(f,"H2",{class:!0});var cIe=s(Hi);mv=n(cIe,"A",{id:!0,class:!0,href:!0});var knt=s(mv);Bme=n(knt,"SPAN",{});var Snt=s(Bme);T(DA.$$.fragment,Snt),Snt.forEach(t),knt.forEach(t),VDo=i(cIe),Pme=n(cIe,"SPAN",{});var Rnt=s(Pme);XDo=r(Rnt,"AutoModelForImageClassification"),Rnt.forEach(t),cIe.forEach(t),dBe=i(f),qo=n(f,"DIV",{class:!0});var Qs=s(qo);T(GA.$$.fragment,Qs),zDo=i(Qs),Ui=n(Qs,"P",{});var pY=s(Ui);QDo=r(pY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),pO=n(pY,"A",{href:!0});var Bnt=s(pO);WDo=r(Bnt,"from_pretrained()"),Bnt.forEach(t),HDo=r(pY," class method or the "),uO=n(pY,"A",{href:!0});var Pnt=s(uO);UDo=r(Pnt,"from_config()"),Pnt.forEach(t),JDo=r(pY,` class
method.`),pY.forEach(t),YDo=i(Qs),OA=n(Qs,"P",{});var fIe=s(OA);KDo=r(fIe,"This class cannot be instantiated directly using "),Ime=n(fIe,"CODE",{});var Int=s(Ime);ZDo=r(Int,"__init__()"),Int.forEach(t),eGo=r(fIe," (throws an error)."),fIe.forEach(t),oGo=i(Qs),dt=n(Qs,"DIV",{class:!0});var DC=s(dt);T(VA.$$.fragment,DC),rGo=i(DC),qme=n(DC,"P",{});var qnt=s(qme);tGo=r(qnt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),qnt.forEach(t),aGo=i(DC),Ji=n(DC,"P",{});var uY=s(Ji);nGo=r(uY,`Note:
Loading a model from its configuration file does `),Nme=n(uY,"STRONG",{});var Nnt=s(Nme);sGo=r(Nnt,"not"),Nnt.forEach(t),lGo=r(uY,` load the model weights. It only affects the
model\u2019s configuration. Use `),_O=n(uY,"A",{href:!0});var jnt=s(_O);iGo=r(jnt,"from_pretrained()"),jnt.forEach(t),dGo=r(uY," to load the model weights."),uY.forEach(t),cGo=i(DC),T(gv.$$.fragment,DC),DC.forEach(t),fGo=i(Qs),to=n(Qs,"DIV",{class:!0});var sa=s(to);T(XA.$$.fragment,sa),mGo=i(sa),jme=n(sa,"P",{});var Dnt=s(jme);gGo=r(Dnt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Dnt.forEach(t),hGo=i(sa),Ra=n(sa,"P",{});var GC=s(Ra);pGo=r(GC,"The model class to instantiate is selected based on the "),Dme=n(GC,"CODE",{});var Gnt=s(Dme);uGo=r(Gnt,"model_type"),Gnt.forEach(t),_Go=r(GC,` property of the config object (either
passed as an argument or loaded from `),Gme=n(GC,"CODE",{});var Ont=s(Gme);bGo=r(Ont,"pretrained_model_name_or_path"),Ont.forEach(t),vGo=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ome=n(GC,"CODE",{});var Vnt=s(Ome);FGo=r(Vnt,"pretrained_model_name_or_path"),Vnt.forEach(t),TGo=r(GC,":"),GC.forEach(t),MGo=i(sa),ve=n(sa,"UL",{});var Ee=s(ve);hv=n(Ee,"LI",{});var Hye=s(hv);Vme=n(Hye,"STRONG",{});var Xnt=s(Vme);EGo=r(Xnt,"beit"),Xnt.forEach(t),CGo=r(Hye," \u2014 "),bO=n(Hye,"A",{href:!0});var znt=s(bO);wGo=r(znt,"BeitForImageClassification"),znt.forEach(t),AGo=r(Hye," (BEiT model)"),Hye.forEach(t),yGo=i(Ee),pv=n(Ee,"LI",{});var Uye=s(pv);Xme=n(Uye,"STRONG",{});var Qnt=s(Xme);LGo=r(Qnt,"convnext"),Qnt.forEach(t),xGo=r(Uye," \u2014 "),vO=n(Uye,"A",{href:!0});var Wnt=s(vO);$Go=r(Wnt,"ConvNextForImageClassification"),Wnt.forEach(t),kGo=r(Uye," (ConvNext model)"),Uye.forEach(t),SGo=i(Ee),uv=n(Ee,"LI",{});var Jye=s(uv);zme=n(Jye,"STRONG",{});var Hnt=s(zme);RGo=r(Hnt,"data2vec-vision"),Hnt.forEach(t),BGo=r(Jye," \u2014 "),FO=n(Jye,"A",{href:!0});var Unt=s(FO);PGo=r(Unt,"Data2VecVisionForImageClassification"),Unt.forEach(t),IGo=r(Jye," (Data2VecVision model)"),Jye.forEach(t),qGo=i(Ee),Ls=n(Ee,"LI",{});var Mx=s(Ls);Qme=n(Mx,"STRONG",{});var Jnt=s(Qme);NGo=r(Jnt,"deit"),Jnt.forEach(t),jGo=r(Mx," \u2014 "),TO=n(Mx,"A",{href:!0});var Ynt=s(TO);DGo=r(Ynt,"DeiTForImageClassification"),Ynt.forEach(t),GGo=r(Mx," or "),MO=n(Mx,"A",{href:!0});var Knt=s(MO);OGo=r(Knt,"DeiTForImageClassificationWithTeacher"),Knt.forEach(t),VGo=r(Mx," (DeiT model)"),Mx.forEach(t),XGo=i(Ee),_v=n(Ee,"LI",{});var Yye=s(_v);Wme=n(Yye,"STRONG",{});var Znt=s(Wme);zGo=r(Znt,"imagegpt"),Znt.forEach(t),QGo=r(Yye," \u2014 "),EO=n(Yye,"A",{href:!0});var est=s(EO);WGo=r(est,"ImageGPTForImageClassification"),est.forEach(t),HGo=r(Yye," (ImageGPT model)"),Yye.forEach(t),UGo=i(Ee),ct=n(Ee,"LI",{});var ef=s(ct);Hme=n(ef,"STRONG",{});var ost=s(Hme);JGo=r(ost,"perceiver"),ost.forEach(t),YGo=r(ef," \u2014 "),CO=n(ef,"A",{href:!0});var rst=s(CO);KGo=r(rst,"PerceiverForImageClassificationLearned"),rst.forEach(t),ZGo=r(ef," or "),wO=n(ef,"A",{href:!0});var tst=s(wO);eOo=r(tst,"PerceiverForImageClassificationFourier"),tst.forEach(t),oOo=r(ef," or "),AO=n(ef,"A",{href:!0});var ast=s(AO);rOo=r(ast,"PerceiverForImageClassificationConvProcessing"),ast.forEach(t),tOo=r(ef," (Perceiver model)"),ef.forEach(t),aOo=i(Ee),bv=n(Ee,"LI",{});var Kye=s(bv);Ume=n(Kye,"STRONG",{});var nst=s(Ume);nOo=r(nst,"poolformer"),nst.forEach(t),sOo=r(Kye," \u2014 "),yO=n(Kye,"A",{href:!0});var sst=s(yO);lOo=r(sst,"PoolFormerForImageClassification"),sst.forEach(t),iOo=r(Kye," (PoolFormer model)"),Kye.forEach(t),dOo=i(Ee),vv=n(Ee,"LI",{});var Zye=s(vv);Jme=n(Zye,"STRONG",{});var lst=s(Jme);cOo=r(lst,"regnet"),lst.forEach(t),fOo=r(Zye," \u2014 "),LO=n(Zye,"A",{href:!0});var ist=s(LO);mOo=r(ist,"RegNetForImageClassification"),ist.forEach(t),gOo=r(Zye," (RegNet model)"),Zye.forEach(t),hOo=i(Ee),Fv=n(Ee,"LI",{});var eLe=s(Fv);Yme=n(eLe,"STRONG",{});var dst=s(Yme);pOo=r(dst,"resnet"),dst.forEach(t),uOo=r(eLe," \u2014 "),xO=n(eLe,"A",{href:!0});var cst=s(xO);_Oo=r(cst,"ResNetForImageClassification"),cst.forEach(t),bOo=r(eLe," (ResNet model)"),eLe.forEach(t),vOo=i(Ee),Tv=n(Ee,"LI",{});var oLe=s(Tv);Kme=n(oLe,"STRONG",{});var fst=s(Kme);FOo=r(fst,"segformer"),fst.forEach(t),TOo=r(oLe," \u2014 "),$O=n(oLe,"A",{href:!0});var mst=s($O);MOo=r(mst,"SegformerForImageClassification"),mst.forEach(t),EOo=r(oLe," (SegFormer model)"),oLe.forEach(t),COo=i(Ee),Mv=n(Ee,"LI",{});var rLe=s(Mv);Zme=n(rLe,"STRONG",{});var gst=s(Zme);wOo=r(gst,"swin"),gst.forEach(t),AOo=r(rLe," \u2014 "),kO=n(rLe,"A",{href:!0});var hst=s(kO);yOo=r(hst,"SwinForImageClassification"),hst.forEach(t),LOo=r(rLe," (Swin model)"),rLe.forEach(t),xOo=i(Ee),Ev=n(Ee,"LI",{});var tLe=s(Ev);ege=n(tLe,"STRONG",{});var pst=s(ege);$Oo=r(pst,"van"),pst.forEach(t),kOo=r(tLe," \u2014 "),SO=n(tLe,"A",{href:!0});var ust=s(SO);SOo=r(ust,"VanForImageClassification"),ust.forEach(t),ROo=r(tLe," (VAN model)"),tLe.forEach(t),BOo=i(Ee),Cv=n(Ee,"LI",{});var aLe=s(Cv);oge=n(aLe,"STRONG",{});var _st=s(oge);POo=r(_st,"vit"),_st.forEach(t),IOo=r(aLe," \u2014 "),RO=n(aLe,"A",{href:!0});var bst=s(RO);qOo=r(bst,"ViTForImageClassification"),bst.forEach(t),NOo=r(aLe," (ViT model)"),aLe.forEach(t),Ee.forEach(t),jOo=i(sa),wv=n(sa,"P",{});var nLe=s(wv);DOo=r(nLe,"The model is set in evaluation mode by default using "),rge=n(nLe,"CODE",{});var vst=s(rge);GOo=r(vst,"model.eval()"),vst.forEach(t),OOo=r(nLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tge=n(nLe,"CODE",{});var Fst=s(tge);VOo=r(Fst,"model.train()"),Fst.forEach(t),nLe.forEach(t),XOo=i(sa),T(Av.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),cBe=i(f),Yi=n(f,"H2",{class:!0});var mIe=s(Yi);yv=n(mIe,"A",{id:!0,class:!0,href:!0});var Tst=s(yv);age=n(Tst,"SPAN",{});var Mst=s(age);T(zA.$$.fragment,Mst),Mst.forEach(t),Tst.forEach(t),zOo=i(mIe),nge=n(mIe,"SPAN",{});var Est=s(nge);QOo=r(Est,"AutoModelForVision2Seq"),Est.forEach(t),mIe.forEach(t),fBe=i(f),No=n(f,"DIV",{class:!0});var Ws=s(No);T(QA.$$.fragment,Ws),WOo=i(Ws),Ki=n(Ws,"P",{});var _Y=s(Ki);HOo=r(_Y,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),BO=n(_Y,"A",{href:!0});var Cst=s(BO);UOo=r(Cst,"from_pretrained()"),Cst.forEach(t),JOo=r(_Y," class method or the "),PO=n(_Y,"A",{href:!0});var wst=s(PO);YOo=r(wst,"from_config()"),wst.forEach(t),KOo=r(_Y,` class
method.`),_Y.forEach(t),ZOo=i(Ws),WA=n(Ws,"P",{});var gIe=s(WA);eVo=r(gIe,"This class cannot be instantiated directly using "),sge=n(gIe,"CODE",{});var Ast=s(sge);oVo=r(Ast,"__init__()"),Ast.forEach(t),rVo=r(gIe," (throws an error)."),gIe.forEach(t),tVo=i(Ws),ft=n(Ws,"DIV",{class:!0});var OC=s(ft);T(HA.$$.fragment,OC),aVo=i(OC),lge=n(OC,"P",{});var yst=s(lge);nVo=r(yst,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yst.forEach(t),sVo=i(OC),Zi=n(OC,"P",{});var bY=s(Zi);lVo=r(bY,`Note:
Loading a model from its configuration file does `),ige=n(bY,"STRONG",{});var Lst=s(ige);iVo=r(Lst,"not"),Lst.forEach(t),dVo=r(bY,` load the model weights. It only affects the
model\u2019s configuration. Use `),IO=n(bY,"A",{href:!0});var xst=s(IO);cVo=r(xst,"from_pretrained()"),xst.forEach(t),fVo=r(bY," to load the model weights."),bY.forEach(t),mVo=i(OC),T(Lv.$$.fragment,OC),OC.forEach(t),gVo=i(Ws),ao=n(Ws,"DIV",{class:!0});var la=s(ao);T(UA.$$.fragment,la),hVo=i(la),dge=n(la,"P",{});var $st=s(dge);pVo=r($st,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),$st.forEach(t),uVo=i(la),Ba=n(la,"P",{});var VC=s(Ba);_Vo=r(VC,"The model class to instantiate is selected based on the "),cge=n(VC,"CODE",{});var kst=s(cge);bVo=r(kst,"model_type"),kst.forEach(t),vVo=r(VC,` property of the config object (either
passed as an argument or loaded from `),fge=n(VC,"CODE",{});var Sst=s(fge);FVo=r(Sst,"pretrained_model_name_or_path"),Sst.forEach(t),TVo=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mge=n(VC,"CODE",{});var Rst=s(mge);MVo=r(Rst,"pretrained_model_name_or_path"),Rst.forEach(t),EVo=r(VC,":"),VC.forEach(t),CVo=i(la),gge=n(la,"UL",{});var Bst=s(gge);xv=n(Bst,"LI",{});var sLe=s(xv);hge=n(sLe,"STRONG",{});var Pst=s(hge);wVo=r(Pst,"vision-encoder-decoder"),Pst.forEach(t),AVo=r(sLe," \u2014 "),qO=n(sLe,"A",{href:!0});var Ist=s(qO);yVo=r(Ist,"VisionEncoderDecoderModel"),Ist.forEach(t),LVo=r(sLe," (Vision Encoder decoder model)"),sLe.forEach(t),Bst.forEach(t),xVo=i(la),$v=n(la,"P",{});var lLe=s($v);$Vo=r(lLe,"The model is set in evaluation mode by default using "),pge=n(lLe,"CODE",{});var qst=s(pge);kVo=r(qst,"model.eval()"),qst.forEach(t),SVo=r(lLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),uge=n(lLe,"CODE",{});var Nst=s(uge);RVo=r(Nst,"model.train()"),Nst.forEach(t),lLe.forEach(t),BVo=i(la),T(kv.$$.fragment,la),la.forEach(t),Ws.forEach(t),mBe=i(f),ed=n(f,"H2",{class:!0});var hIe=s(ed);Sv=n(hIe,"A",{id:!0,class:!0,href:!0});var jst=s(Sv);_ge=n(jst,"SPAN",{});var Dst=s(_ge);T(JA.$$.fragment,Dst),Dst.forEach(t),jst.forEach(t),PVo=i(hIe),bge=n(hIe,"SPAN",{});var Gst=s(bge);IVo=r(Gst,"AutoModelForAudioClassification"),Gst.forEach(t),hIe.forEach(t),gBe=i(f),jo=n(f,"DIV",{class:!0});var Hs=s(jo);T(YA.$$.fragment,Hs),qVo=i(Hs),od=n(Hs,"P",{});var vY=s(od);NVo=r(vY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),NO=n(vY,"A",{href:!0});var Ost=s(NO);jVo=r(Ost,"from_pretrained()"),Ost.forEach(t),DVo=r(vY," class method or the "),jO=n(vY,"A",{href:!0});var Vst=s(jO);GVo=r(Vst,"from_config()"),Vst.forEach(t),OVo=r(vY,` class
method.`),vY.forEach(t),VVo=i(Hs),KA=n(Hs,"P",{});var pIe=s(KA);XVo=r(pIe,"This class cannot be instantiated directly using "),vge=n(pIe,"CODE",{});var Xst=s(vge);zVo=r(Xst,"__init__()"),Xst.forEach(t),QVo=r(pIe," (throws an error)."),pIe.forEach(t),WVo=i(Hs),mt=n(Hs,"DIV",{class:!0});var XC=s(mt);T(ZA.$$.fragment,XC),HVo=i(XC),Fge=n(XC,"P",{});var zst=s(Fge);UVo=r(zst,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),zst.forEach(t),JVo=i(XC),rd=n(XC,"P",{});var FY=s(rd);YVo=r(FY,`Note:
Loading a model from its configuration file does `),Tge=n(FY,"STRONG",{});var Qst=s(Tge);KVo=r(Qst,"not"),Qst.forEach(t),ZVo=r(FY,` load the model weights. It only affects the
model\u2019s configuration. Use `),DO=n(FY,"A",{href:!0});var Wst=s(DO);eXo=r(Wst,"from_pretrained()"),Wst.forEach(t),oXo=r(FY," to load the model weights."),FY.forEach(t),rXo=i(XC),T(Rv.$$.fragment,XC),XC.forEach(t),tXo=i(Hs),no=n(Hs,"DIV",{class:!0});var ia=s(no);T(e0.$$.fragment,ia),aXo=i(ia),Mge=n(ia,"P",{});var Hst=s(Mge);nXo=r(Hst,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Hst.forEach(t),sXo=i(ia),Pa=n(ia,"P",{});var zC=s(Pa);lXo=r(zC,"The model class to instantiate is selected based on the "),Ege=n(zC,"CODE",{});var Ust=s(Ege);iXo=r(Ust,"model_type"),Ust.forEach(t),dXo=r(zC,` property of the config object (either
passed as an argument or loaded from `),Cge=n(zC,"CODE",{});var Jst=s(Cge);cXo=r(Jst,"pretrained_model_name_or_path"),Jst.forEach(t),fXo=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wge=n(zC,"CODE",{});var Yst=s(wge);mXo=r(Yst,"pretrained_model_name_or_path"),Yst.forEach(t),gXo=r(zC,":"),zC.forEach(t),hXo=i(ia),qe=n(ia,"UL",{});var uo=s(qe);Bv=n(uo,"LI",{});var iLe=s(Bv);Age=n(iLe,"STRONG",{});var Kst=s(Age);pXo=r(Kst,"data2vec-audio"),Kst.forEach(t),uXo=r(iLe," \u2014 "),GO=n(iLe,"A",{href:!0});var Zst=s(GO);_Xo=r(Zst,"Data2VecAudioForSequenceClassification"),Zst.forEach(t),bXo=r(iLe," (Data2VecAudio model)"),iLe.forEach(t),vXo=i(uo),Pv=n(uo,"LI",{});var dLe=s(Pv);yge=n(dLe,"STRONG",{});var elt=s(yge);FXo=r(elt,"hubert"),elt.forEach(t),TXo=r(dLe," \u2014 "),OO=n(dLe,"A",{href:!0});var olt=s(OO);MXo=r(olt,"HubertForSequenceClassification"),olt.forEach(t),EXo=r(dLe," (Hubert model)"),dLe.forEach(t),CXo=i(uo),Iv=n(uo,"LI",{});var cLe=s(Iv);Lge=n(cLe,"STRONG",{});var rlt=s(Lge);wXo=r(rlt,"sew"),rlt.forEach(t),AXo=r(cLe," \u2014 "),VO=n(cLe,"A",{href:!0});var tlt=s(VO);yXo=r(tlt,"SEWForSequenceClassification"),tlt.forEach(t),LXo=r(cLe," (SEW model)"),cLe.forEach(t),xXo=i(uo),qv=n(uo,"LI",{});var fLe=s(qv);xge=n(fLe,"STRONG",{});var alt=s(xge);$Xo=r(alt,"sew-d"),alt.forEach(t),kXo=r(fLe," \u2014 "),XO=n(fLe,"A",{href:!0});var nlt=s(XO);SXo=r(nlt,"SEWDForSequenceClassification"),nlt.forEach(t),RXo=r(fLe," (SEW-D model)"),fLe.forEach(t),BXo=i(uo),Nv=n(uo,"LI",{});var mLe=s(Nv);$ge=n(mLe,"STRONG",{});var slt=s($ge);PXo=r(slt,"unispeech"),slt.forEach(t),IXo=r(mLe," \u2014 "),zO=n(mLe,"A",{href:!0});var llt=s(zO);qXo=r(llt,"UniSpeechForSequenceClassification"),llt.forEach(t),NXo=r(mLe," (UniSpeech model)"),mLe.forEach(t),jXo=i(uo),jv=n(uo,"LI",{});var gLe=s(jv);kge=n(gLe,"STRONG",{});var ilt=s(kge);DXo=r(ilt,"unispeech-sat"),ilt.forEach(t),GXo=r(gLe," \u2014 "),QO=n(gLe,"A",{href:!0});var dlt=s(QO);OXo=r(dlt,"UniSpeechSatForSequenceClassification"),dlt.forEach(t),VXo=r(gLe," (UniSpeechSat model)"),gLe.forEach(t),XXo=i(uo),Dv=n(uo,"LI",{});var hLe=s(Dv);Sge=n(hLe,"STRONG",{});var clt=s(Sge);zXo=r(clt,"wav2vec2"),clt.forEach(t),QXo=r(hLe," \u2014 "),WO=n(hLe,"A",{href:!0});var flt=s(WO);WXo=r(flt,"Wav2Vec2ForSequenceClassification"),flt.forEach(t),HXo=r(hLe," (Wav2Vec2 model)"),hLe.forEach(t),UXo=i(uo),Gv=n(uo,"LI",{});var pLe=s(Gv);Rge=n(pLe,"STRONG",{});var mlt=s(Rge);JXo=r(mlt,"wavlm"),mlt.forEach(t),YXo=r(pLe," \u2014 "),HO=n(pLe,"A",{href:!0});var glt=s(HO);KXo=r(glt,"WavLMForSequenceClassification"),glt.forEach(t),ZXo=r(pLe," (WavLM model)"),pLe.forEach(t),uo.forEach(t),ezo=i(ia),Ov=n(ia,"P",{});var uLe=s(Ov);ozo=r(uLe,"The model is set in evaluation mode by default using "),Bge=n(uLe,"CODE",{});var hlt=s(Bge);rzo=r(hlt,"model.eval()"),hlt.forEach(t),tzo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pge=n(uLe,"CODE",{});var plt=s(Pge);azo=r(plt,"model.train()"),plt.forEach(t),uLe.forEach(t),nzo=i(ia),T(Vv.$$.fragment,ia),ia.forEach(t),Hs.forEach(t),hBe=i(f),td=n(f,"H2",{class:!0});var uIe=s(td);Xv=n(uIe,"A",{id:!0,class:!0,href:!0});var ult=s(Xv);Ige=n(ult,"SPAN",{});var _lt=s(Ige);T(o0.$$.fragment,_lt),_lt.forEach(t),ult.forEach(t),szo=i(uIe),qge=n(uIe,"SPAN",{});var blt=s(qge);lzo=r(blt,"AutoModelForAudioFrameClassification"),blt.forEach(t),uIe.forEach(t),pBe=i(f),Do=n(f,"DIV",{class:!0});var Us=s(Do);T(r0.$$.fragment,Us),izo=i(Us),ad=n(Us,"P",{});var TY=s(ad);dzo=r(TY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),UO=n(TY,"A",{href:!0});var vlt=s(UO);czo=r(vlt,"from_pretrained()"),vlt.forEach(t),fzo=r(TY," class method or the "),JO=n(TY,"A",{href:!0});var Flt=s(JO);mzo=r(Flt,"from_config()"),Flt.forEach(t),gzo=r(TY,` class
method.`),TY.forEach(t),hzo=i(Us),t0=n(Us,"P",{});var _Ie=s(t0);pzo=r(_Ie,"This class cannot be instantiated directly using "),Nge=n(_Ie,"CODE",{});var Tlt=s(Nge);uzo=r(Tlt,"__init__()"),Tlt.forEach(t),_zo=r(_Ie," (throws an error)."),_Ie.forEach(t),bzo=i(Us),gt=n(Us,"DIV",{class:!0});var QC=s(gt);T(a0.$$.fragment,QC),vzo=i(QC),jge=n(QC,"P",{});var Mlt=s(jge);Fzo=r(Mlt,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Mlt.forEach(t),Tzo=i(QC),nd=n(QC,"P",{});var MY=s(nd);Mzo=r(MY,`Note:
Loading a model from its configuration file does `),Dge=n(MY,"STRONG",{});var Elt=s(Dge);Ezo=r(Elt,"not"),Elt.forEach(t),Czo=r(MY,` load the model weights. It only affects the
model\u2019s configuration. Use `),YO=n(MY,"A",{href:!0});var Clt=s(YO);wzo=r(Clt,"from_pretrained()"),Clt.forEach(t),Azo=r(MY," to load the model weights."),MY.forEach(t),yzo=i(QC),T(zv.$$.fragment,QC),QC.forEach(t),Lzo=i(Us),so=n(Us,"DIV",{class:!0});var da=s(so);T(n0.$$.fragment,da),xzo=i(da),Gge=n(da,"P",{});var wlt=s(Gge);$zo=r(wlt,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),wlt.forEach(t),kzo=i(da),Ia=n(da,"P",{});var WC=s(Ia);Szo=r(WC,"The model class to instantiate is selected based on the "),Oge=n(WC,"CODE",{});var Alt=s(Oge);Rzo=r(Alt,"model_type"),Alt.forEach(t),Bzo=r(WC,` property of the config object (either
passed as an argument or loaded from `),Vge=n(WC,"CODE",{});var ylt=s(Vge);Pzo=r(ylt,"pretrained_model_name_or_path"),ylt.forEach(t),Izo=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Xge=n(WC,"CODE",{});var Llt=s(Xge);qzo=r(Llt,"pretrained_model_name_or_path"),Llt.forEach(t),Nzo=r(WC,":"),WC.forEach(t),jzo=i(da),qa=n(da,"UL",{});var HC=s(qa);Qv=n(HC,"LI",{});var _Le=s(Qv);zge=n(_Le,"STRONG",{});var xlt=s(zge);Dzo=r(xlt,"data2vec-audio"),xlt.forEach(t),Gzo=r(_Le," \u2014 "),KO=n(_Le,"A",{href:!0});var $lt=s(KO);Ozo=r($lt,"Data2VecAudioForAudioFrameClassification"),$lt.forEach(t),Vzo=r(_Le," (Data2VecAudio model)"),_Le.forEach(t),Xzo=i(HC),Wv=n(HC,"LI",{});var bLe=s(Wv);Qge=n(bLe,"STRONG",{});var klt=s(Qge);zzo=r(klt,"unispeech-sat"),klt.forEach(t),Qzo=r(bLe," \u2014 "),ZO=n(bLe,"A",{href:!0});var Slt=s(ZO);Wzo=r(Slt,"UniSpeechSatForAudioFrameClassification"),Slt.forEach(t),Hzo=r(bLe," (UniSpeechSat model)"),bLe.forEach(t),Uzo=i(HC),Hv=n(HC,"LI",{});var vLe=s(Hv);Wge=n(vLe,"STRONG",{});var Rlt=s(Wge);Jzo=r(Rlt,"wav2vec2"),Rlt.forEach(t),Yzo=r(vLe," \u2014 "),eV=n(vLe,"A",{href:!0});var Blt=s(eV);Kzo=r(Blt,"Wav2Vec2ForAudioFrameClassification"),Blt.forEach(t),Zzo=r(vLe," (Wav2Vec2 model)"),vLe.forEach(t),eQo=i(HC),Uv=n(HC,"LI",{});var FLe=s(Uv);Hge=n(FLe,"STRONG",{});var Plt=s(Hge);oQo=r(Plt,"wavlm"),Plt.forEach(t),rQo=r(FLe," \u2014 "),oV=n(FLe,"A",{href:!0});var Ilt=s(oV);tQo=r(Ilt,"WavLMForAudioFrameClassification"),Ilt.forEach(t),aQo=r(FLe," (WavLM model)"),FLe.forEach(t),HC.forEach(t),nQo=i(da),Jv=n(da,"P",{});var TLe=s(Jv);sQo=r(TLe,"The model is set in evaluation mode by default using "),Uge=n(TLe,"CODE",{});var qlt=s(Uge);lQo=r(qlt,"model.eval()"),qlt.forEach(t),iQo=r(TLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jge=n(TLe,"CODE",{});var Nlt=s(Jge);dQo=r(Nlt,"model.train()"),Nlt.forEach(t),TLe.forEach(t),cQo=i(da),T(Yv.$$.fragment,da),da.forEach(t),Us.forEach(t),uBe=i(f),sd=n(f,"H2",{class:!0});var bIe=s(sd);Kv=n(bIe,"A",{id:!0,class:!0,href:!0});var jlt=s(Kv);Yge=n(jlt,"SPAN",{});var Dlt=s(Yge);T(s0.$$.fragment,Dlt),Dlt.forEach(t),jlt.forEach(t),fQo=i(bIe),Kge=n(bIe,"SPAN",{});var Glt=s(Kge);mQo=r(Glt,"AutoModelForCTC"),Glt.forEach(t),bIe.forEach(t),_Be=i(f),Go=n(f,"DIV",{class:!0});var Js=s(Go);T(l0.$$.fragment,Js),gQo=i(Js),ld=n(Js,"P",{});var EY=s(ld);hQo=r(EY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),rV=n(EY,"A",{href:!0});var Olt=s(rV);pQo=r(Olt,"from_pretrained()"),Olt.forEach(t),uQo=r(EY," class method or the "),tV=n(EY,"A",{href:!0});var Vlt=s(tV);_Qo=r(Vlt,"from_config()"),Vlt.forEach(t),bQo=r(EY,` class
method.`),EY.forEach(t),vQo=i(Js),i0=n(Js,"P",{});var vIe=s(i0);FQo=r(vIe,"This class cannot be instantiated directly using "),Zge=n(vIe,"CODE",{});var Xlt=s(Zge);TQo=r(Xlt,"__init__()"),Xlt.forEach(t),MQo=r(vIe," (throws an error)."),vIe.forEach(t),EQo=i(Js),ht=n(Js,"DIV",{class:!0});var UC=s(ht);T(d0.$$.fragment,UC),CQo=i(UC),ehe=n(UC,"P",{});var zlt=s(ehe);wQo=r(zlt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),zlt.forEach(t),AQo=i(UC),id=n(UC,"P",{});var CY=s(id);yQo=r(CY,`Note:
Loading a model from its configuration file does `),ohe=n(CY,"STRONG",{});var Qlt=s(ohe);LQo=r(Qlt,"not"),Qlt.forEach(t),xQo=r(CY,` load the model weights. It only affects the
model\u2019s configuration. Use `),aV=n(CY,"A",{href:!0});var Wlt=s(aV);$Qo=r(Wlt,"from_pretrained()"),Wlt.forEach(t),kQo=r(CY," to load the model weights."),CY.forEach(t),SQo=i(UC),T(Zv.$$.fragment,UC),UC.forEach(t),RQo=i(Js),lo=n(Js,"DIV",{class:!0});var ca=s(lo);T(c0.$$.fragment,ca),BQo=i(ca),rhe=n(ca,"P",{});var Hlt=s(rhe);PQo=r(Hlt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Hlt.forEach(t),IQo=i(ca),Na=n(ca,"P",{});var JC=s(Na);qQo=r(JC,"The model class to instantiate is selected based on the "),the=n(JC,"CODE",{});var Ult=s(the);NQo=r(Ult,"model_type"),Ult.forEach(t),jQo=r(JC,` property of the config object (either
passed as an argument or loaded from `),ahe=n(JC,"CODE",{});var Jlt=s(ahe);DQo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),GQo=r(JC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nhe=n(JC,"CODE",{});var Ylt=s(nhe);OQo=r(Ylt,"pretrained_model_name_or_path"),Ylt.forEach(t),VQo=r(JC,":"),JC.forEach(t),XQo=i(ca),Ne=n(ca,"UL",{});var _o=s(Ne);eF=n(_o,"LI",{});var MLe=s(eF);she=n(MLe,"STRONG",{});var Klt=s(she);zQo=r(Klt,"data2vec-audio"),Klt.forEach(t),QQo=r(MLe," \u2014 "),nV=n(MLe,"A",{href:!0});var Zlt=s(nV);WQo=r(Zlt,"Data2VecAudioForCTC"),Zlt.forEach(t),HQo=r(MLe," (Data2VecAudio model)"),MLe.forEach(t),UQo=i(_o),oF=n(_o,"LI",{});var ELe=s(oF);lhe=n(ELe,"STRONG",{});var eit=s(lhe);JQo=r(eit,"hubert"),eit.forEach(t),YQo=r(ELe," \u2014 "),sV=n(ELe,"A",{href:!0});var oit=s(sV);KQo=r(oit,"HubertForCTC"),oit.forEach(t),ZQo=r(ELe," (Hubert model)"),ELe.forEach(t),eWo=i(_o),rF=n(_o,"LI",{});var CLe=s(rF);ihe=n(CLe,"STRONG",{});var rit=s(ihe);oWo=r(rit,"sew"),rit.forEach(t),rWo=r(CLe," \u2014 "),lV=n(CLe,"A",{href:!0});var tit=s(lV);tWo=r(tit,"SEWForCTC"),tit.forEach(t),aWo=r(CLe," (SEW model)"),CLe.forEach(t),nWo=i(_o),tF=n(_o,"LI",{});var wLe=s(tF);dhe=n(wLe,"STRONG",{});var ait=s(dhe);sWo=r(ait,"sew-d"),ait.forEach(t),lWo=r(wLe," \u2014 "),iV=n(wLe,"A",{href:!0});var nit=s(iV);iWo=r(nit,"SEWDForCTC"),nit.forEach(t),dWo=r(wLe," (SEW-D model)"),wLe.forEach(t),cWo=i(_o),aF=n(_o,"LI",{});var ALe=s(aF);che=n(ALe,"STRONG",{});var sit=s(che);fWo=r(sit,"unispeech"),sit.forEach(t),mWo=r(ALe," \u2014 "),dV=n(ALe,"A",{href:!0});var lit=s(dV);gWo=r(lit,"UniSpeechForCTC"),lit.forEach(t),hWo=r(ALe," (UniSpeech model)"),ALe.forEach(t),pWo=i(_o),nF=n(_o,"LI",{});var yLe=s(nF);fhe=n(yLe,"STRONG",{});var iit=s(fhe);uWo=r(iit,"unispeech-sat"),iit.forEach(t),_Wo=r(yLe," \u2014 "),cV=n(yLe,"A",{href:!0});var dit=s(cV);bWo=r(dit,"UniSpeechSatForCTC"),dit.forEach(t),vWo=r(yLe," (UniSpeechSat model)"),yLe.forEach(t),FWo=i(_o),sF=n(_o,"LI",{});var LLe=s(sF);mhe=n(LLe,"STRONG",{});var cit=s(mhe);TWo=r(cit,"wav2vec2"),cit.forEach(t),MWo=r(LLe," \u2014 "),fV=n(LLe,"A",{href:!0});var fit=s(fV);EWo=r(fit,"Wav2Vec2ForCTC"),fit.forEach(t),CWo=r(LLe," (Wav2Vec2 model)"),LLe.forEach(t),wWo=i(_o),lF=n(_o,"LI",{});var xLe=s(lF);ghe=n(xLe,"STRONG",{});var mit=s(ghe);AWo=r(mit,"wavlm"),mit.forEach(t),yWo=r(xLe," \u2014 "),mV=n(xLe,"A",{href:!0});var git=s(mV);LWo=r(git,"WavLMForCTC"),git.forEach(t),xWo=r(xLe," (WavLM model)"),xLe.forEach(t),_o.forEach(t),$Wo=i(ca),iF=n(ca,"P",{});var $Le=s(iF);kWo=r($Le,"The model is set in evaluation mode by default using "),hhe=n($Le,"CODE",{});var hit=s(hhe);SWo=r(hit,"model.eval()"),hit.forEach(t),RWo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),phe=n($Le,"CODE",{});var pit=s(phe);BWo=r(pit,"model.train()"),pit.forEach(t),$Le.forEach(t),PWo=i(ca),T(dF.$$.fragment,ca),ca.forEach(t),Js.forEach(t),bBe=i(f),dd=n(f,"H2",{class:!0});var FIe=s(dd);cF=n(FIe,"A",{id:!0,class:!0,href:!0});var uit=s(cF);uhe=n(uit,"SPAN",{});var _it=s(uhe);T(f0.$$.fragment,_it),_it.forEach(t),uit.forEach(t),IWo=i(FIe),_he=n(FIe,"SPAN",{});var bit=s(_he);qWo=r(bit,"AutoModelForSpeechSeq2Seq"),bit.forEach(t),FIe.forEach(t),vBe=i(f),Oo=n(f,"DIV",{class:!0});var Ys=s(Oo);T(m0.$$.fragment,Ys),NWo=i(Ys),cd=n(Ys,"P",{});var wY=s(cd);jWo=r(wY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gV=n(wY,"A",{href:!0});var vit=s(gV);DWo=r(vit,"from_pretrained()"),vit.forEach(t),GWo=r(wY," class method or the "),hV=n(wY,"A",{href:!0});var Fit=s(hV);OWo=r(Fit,"from_config()"),Fit.forEach(t),VWo=r(wY,` class
method.`),wY.forEach(t),XWo=i(Ys),g0=n(Ys,"P",{});var TIe=s(g0);zWo=r(TIe,"This class cannot be instantiated directly using "),bhe=n(TIe,"CODE",{});var Tit=s(bhe);QWo=r(Tit,"__init__()"),Tit.forEach(t),WWo=r(TIe," (throws an error)."),TIe.forEach(t),HWo=i(Ys),pt=n(Ys,"DIV",{class:!0});var YC=s(pt);T(h0.$$.fragment,YC),UWo=i(YC),vhe=n(YC,"P",{});var Mit=s(vhe);JWo=r(Mit,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),Mit.forEach(t),YWo=i(YC),fd=n(YC,"P",{});var AY=s(fd);KWo=r(AY,`Note:
Loading a model from its configuration file does `),Fhe=n(AY,"STRONG",{});var Eit=s(Fhe);ZWo=r(Eit,"not"),Eit.forEach(t),eHo=r(AY,` load the model weights. It only affects the
model\u2019s configuration. Use `),pV=n(AY,"A",{href:!0});var Cit=s(pV);oHo=r(Cit,"from_pretrained()"),Cit.forEach(t),rHo=r(AY," to load the model weights."),AY.forEach(t),tHo=i(YC),T(fF.$$.fragment,YC),YC.forEach(t),aHo=i(Ys),io=n(Ys,"DIV",{class:!0});var fa=s(io);T(p0.$$.fragment,fa),nHo=i(fa),The=n(fa,"P",{});var wit=s(The);sHo=r(wit,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),wit.forEach(t),lHo=i(fa),ja=n(fa,"P",{});var KC=s(ja);iHo=r(KC,"The model class to instantiate is selected based on the "),Mhe=n(KC,"CODE",{});var Ait=s(Mhe);dHo=r(Ait,"model_type"),Ait.forEach(t),cHo=r(KC,` property of the config object (either
passed as an argument or loaded from `),Ehe=n(KC,"CODE",{});var yit=s(Ehe);fHo=r(yit,"pretrained_model_name_or_path"),yit.forEach(t),mHo=r(KC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Che=n(KC,"CODE",{});var Lit=s(Che);gHo=r(Lit,"pretrained_model_name_or_path"),Lit.forEach(t),hHo=r(KC,":"),KC.forEach(t),pHo=i(fa),u0=n(fa,"UL",{});var MIe=s(u0);mF=n(MIe,"LI",{});var kLe=s(mF);whe=n(kLe,"STRONG",{});var xit=s(whe);uHo=r(xit,"speech-encoder-decoder"),xit.forEach(t),_Ho=r(kLe," \u2014 "),uV=n(kLe,"A",{href:!0});var $it=s(uV);bHo=r($it,"SpeechEncoderDecoderModel"),$it.forEach(t),vHo=r(kLe," (Speech Encoder decoder model)"),kLe.forEach(t),FHo=i(MIe),gF=n(MIe,"LI",{});var SLe=s(gF);Ahe=n(SLe,"STRONG",{});var kit=s(Ahe);THo=r(kit,"speech_to_text"),kit.forEach(t),MHo=r(SLe," \u2014 "),_V=n(SLe,"A",{href:!0});var Sit=s(_V);EHo=r(Sit,"Speech2TextForConditionalGeneration"),Sit.forEach(t),CHo=r(SLe," (Speech2Text model)"),SLe.forEach(t),MIe.forEach(t),wHo=i(fa),hF=n(fa,"P",{});var RLe=s(hF);AHo=r(RLe,"The model is set in evaluation mode by default using "),yhe=n(RLe,"CODE",{});var Rit=s(yhe);yHo=r(Rit,"model.eval()"),Rit.forEach(t),LHo=r(RLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lhe=n(RLe,"CODE",{});var Bit=s(Lhe);xHo=r(Bit,"model.train()"),Bit.forEach(t),RLe.forEach(t),$Ho=i(fa),T(pF.$$.fragment,fa),fa.forEach(t),Ys.forEach(t),FBe=i(f),md=n(f,"H2",{class:!0});var EIe=s(md);uF=n(EIe,"A",{id:!0,class:!0,href:!0});var Pit=s(uF);xhe=n(Pit,"SPAN",{});var Iit=s(xhe);T(_0.$$.fragment,Iit),Iit.forEach(t),Pit.forEach(t),kHo=i(EIe),$he=n(EIe,"SPAN",{});var qit=s($he);SHo=r(qit,"AutoModelForAudioXVector"),qit.forEach(t),EIe.forEach(t),TBe=i(f),Vo=n(f,"DIV",{class:!0});var Ks=s(Vo);T(b0.$$.fragment,Ks),RHo=i(Ks),gd=n(Ks,"P",{});var yY=s(gd);BHo=r(yY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),bV=n(yY,"A",{href:!0});var Nit=s(bV);PHo=r(Nit,"from_pretrained()"),Nit.forEach(t),IHo=r(yY," class method or the "),vV=n(yY,"A",{href:!0});var jit=s(vV);qHo=r(jit,"from_config()"),jit.forEach(t),NHo=r(yY,` class
method.`),yY.forEach(t),jHo=i(Ks),v0=n(Ks,"P",{});var CIe=s(v0);DHo=r(CIe,"This class cannot be instantiated directly using "),khe=n(CIe,"CODE",{});var Dit=s(khe);GHo=r(Dit,"__init__()"),Dit.forEach(t),OHo=r(CIe," (throws an error)."),CIe.forEach(t),VHo=i(Ks),ut=n(Ks,"DIV",{class:!0});var ZC=s(ut);T(F0.$$.fragment,ZC),XHo=i(ZC),She=n(ZC,"P",{});var Git=s(She);zHo=r(Git,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Git.forEach(t),QHo=i(ZC),hd=n(ZC,"P",{});var LY=s(hd);WHo=r(LY,`Note:
Loading a model from its configuration file does `),Rhe=n(LY,"STRONG",{});var Oit=s(Rhe);HHo=r(Oit,"not"),Oit.forEach(t),UHo=r(LY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FV=n(LY,"A",{href:!0});var Vit=s(FV);JHo=r(Vit,"from_pretrained()"),Vit.forEach(t),YHo=r(LY," to load the model weights."),LY.forEach(t),KHo=i(ZC),T(_F.$$.fragment,ZC),ZC.forEach(t),ZHo=i(Ks),co=n(Ks,"DIV",{class:!0});var ma=s(co);T(T0.$$.fragment,ma),eUo=i(ma),Bhe=n(ma,"P",{});var Xit=s(Bhe);oUo=r(Xit,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Xit.forEach(t),rUo=i(ma),Da=n(ma,"P",{});var e3=s(Da);tUo=r(e3,"The model class to instantiate is selected based on the "),Phe=n(e3,"CODE",{});var zit=s(Phe);aUo=r(zit,"model_type"),zit.forEach(t),nUo=r(e3,` property of the config object (either
passed as an argument or loaded from `),Ihe=n(e3,"CODE",{});var Qit=s(Ihe);sUo=r(Qit,"pretrained_model_name_or_path"),Qit.forEach(t),lUo=r(e3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qhe=n(e3,"CODE",{});var Wit=s(qhe);iUo=r(Wit,"pretrained_model_name_or_path"),Wit.forEach(t),dUo=r(e3,":"),e3.forEach(t),cUo=i(ma),Ga=n(ma,"UL",{});var o3=s(Ga);bF=n(o3,"LI",{});var BLe=s(bF);Nhe=n(BLe,"STRONG",{});var Hit=s(Nhe);fUo=r(Hit,"data2vec-audio"),Hit.forEach(t),mUo=r(BLe," \u2014 "),TV=n(BLe,"A",{href:!0});var Uit=s(TV);gUo=r(Uit,"Data2VecAudioForXVector"),Uit.forEach(t),hUo=r(BLe," (Data2VecAudio model)"),BLe.forEach(t),pUo=i(o3),vF=n(o3,"LI",{});var PLe=s(vF);jhe=n(PLe,"STRONG",{});var Jit=s(jhe);uUo=r(Jit,"unispeech-sat"),Jit.forEach(t),_Uo=r(PLe," \u2014 "),MV=n(PLe,"A",{href:!0});var Yit=s(MV);bUo=r(Yit,"UniSpeechSatForXVector"),Yit.forEach(t),vUo=r(PLe," (UniSpeechSat model)"),PLe.forEach(t),FUo=i(o3),FF=n(o3,"LI",{});var ILe=s(FF);Dhe=n(ILe,"STRONG",{});var Kit=s(Dhe);TUo=r(Kit,"wav2vec2"),Kit.forEach(t),MUo=r(ILe," \u2014 "),EV=n(ILe,"A",{href:!0});var Zit=s(EV);EUo=r(Zit,"Wav2Vec2ForXVector"),Zit.forEach(t),CUo=r(ILe," (Wav2Vec2 model)"),ILe.forEach(t),wUo=i(o3),TF=n(o3,"LI",{});var qLe=s(TF);Ghe=n(qLe,"STRONG",{});var edt=s(Ghe);AUo=r(edt,"wavlm"),edt.forEach(t),yUo=r(qLe," \u2014 "),CV=n(qLe,"A",{href:!0});var odt=s(CV);LUo=r(odt,"WavLMForXVector"),odt.forEach(t),xUo=r(qLe," (WavLM model)"),qLe.forEach(t),o3.forEach(t),$Uo=i(ma),MF=n(ma,"P",{});var NLe=s(MF);kUo=r(NLe,"The model is set in evaluation mode by default using "),Ohe=n(NLe,"CODE",{});var rdt=s(Ohe);SUo=r(rdt,"model.eval()"),rdt.forEach(t),RUo=r(NLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Vhe=n(NLe,"CODE",{});var tdt=s(Vhe);BUo=r(tdt,"model.train()"),tdt.forEach(t),NLe.forEach(t),PUo=i(ma),T(EF.$$.fragment,ma),ma.forEach(t),Ks.forEach(t),MBe=i(f),pd=n(f,"H2",{class:!0});var wIe=s(pd);CF=n(wIe,"A",{id:!0,class:!0,href:!0});var adt=s(CF);Xhe=n(adt,"SPAN",{});var ndt=s(Xhe);T(M0.$$.fragment,ndt),ndt.forEach(t),adt.forEach(t),IUo=i(wIe),zhe=n(wIe,"SPAN",{});var sdt=s(zhe);qUo=r(sdt,"AutoModelForMaskedImageModeling"),sdt.forEach(t),wIe.forEach(t),EBe=i(f),Xo=n(f,"DIV",{class:!0});var Zs=s(Xo);T(E0.$$.fragment,Zs),NUo=i(Zs),ud=n(Zs,"P",{});var xY=s(ud);jUo=r(xY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),wV=n(xY,"A",{href:!0});var ldt=s(wV);DUo=r(ldt,"from_pretrained()"),ldt.forEach(t),GUo=r(xY," class method or the "),AV=n(xY,"A",{href:!0});var idt=s(AV);OUo=r(idt,"from_config()"),idt.forEach(t),VUo=r(xY,` class
method.`),xY.forEach(t),XUo=i(Zs),C0=n(Zs,"P",{});var AIe=s(C0);zUo=r(AIe,"This class cannot be instantiated directly using "),Qhe=n(AIe,"CODE",{});var ddt=s(Qhe);QUo=r(ddt,"__init__()"),ddt.forEach(t),WUo=r(AIe," (throws an error)."),AIe.forEach(t),HUo=i(Zs),_t=n(Zs,"DIV",{class:!0});var r3=s(_t);T(w0.$$.fragment,r3),UUo=i(r3),Whe=n(r3,"P",{});var cdt=s(Whe);JUo=r(cdt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),cdt.forEach(t),YUo=i(r3),_d=n(r3,"P",{});var $Y=s(_d);KUo=r($Y,`Note:
Loading a model from its configuration file does `),Hhe=n($Y,"STRONG",{});var fdt=s(Hhe);ZUo=r(fdt,"not"),fdt.forEach(t),eJo=r($Y,` load the model weights. It only affects the
model\u2019s configuration. Use `),yV=n($Y,"A",{href:!0});var mdt=s(yV);oJo=r(mdt,"from_pretrained()"),mdt.forEach(t),rJo=r($Y," to load the model weights."),$Y.forEach(t),tJo=i(r3),T(wF.$$.fragment,r3),r3.forEach(t),aJo=i(Zs),fo=n(Zs,"DIV",{class:!0});var ga=s(fo);T(A0.$$.fragment,ga),nJo=i(ga),Uhe=n(ga,"P",{});var gdt=s(Uhe);sJo=r(gdt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),gdt.forEach(t),lJo=i(ga),Oa=n(ga,"P",{});var t3=s(Oa);iJo=r(t3,"The model class to instantiate is selected based on the "),Jhe=n(t3,"CODE",{});var hdt=s(Jhe);dJo=r(hdt,"model_type"),hdt.forEach(t),cJo=r(t3,` property of the config object (either
passed as an argument or loaded from `),Yhe=n(t3,"CODE",{});var pdt=s(Yhe);fJo=r(pdt,"pretrained_model_name_or_path"),pdt.forEach(t),mJo=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Khe=n(t3,"CODE",{});var udt=s(Khe);gJo=r(udt,"pretrained_model_name_or_path"),udt.forEach(t),hJo=r(t3,":"),t3.forEach(t),pJo=i(ga),bd=n(ga,"UL",{});var kY=s(bd);AF=n(kY,"LI",{});var jLe=s(AF);Zhe=n(jLe,"STRONG",{});var _dt=s(Zhe);uJo=r(_dt,"deit"),_dt.forEach(t),_Jo=r(jLe," \u2014 "),LV=n(jLe,"A",{href:!0});var bdt=s(LV);bJo=r(bdt,"DeiTForMaskedImageModeling"),bdt.forEach(t),vJo=r(jLe," (DeiT model)"),jLe.forEach(t),FJo=i(kY),yF=n(kY,"LI",{});var DLe=s(yF);epe=n(DLe,"STRONG",{});var vdt=s(epe);TJo=r(vdt,"swin"),vdt.forEach(t),MJo=r(DLe," \u2014 "),xV=n(DLe,"A",{href:!0});var Fdt=s(xV);EJo=r(Fdt,"SwinForMaskedImageModeling"),Fdt.forEach(t),CJo=r(DLe," (Swin model)"),DLe.forEach(t),wJo=i(kY),LF=n(kY,"LI",{});var GLe=s(LF);ope=n(GLe,"STRONG",{});var Tdt=s(ope);AJo=r(Tdt,"vit"),Tdt.forEach(t),yJo=r(GLe," \u2014 "),$V=n(GLe,"A",{href:!0});var Mdt=s($V);LJo=r(Mdt,"ViTForMaskedImageModeling"),Mdt.forEach(t),xJo=r(GLe," (ViT model)"),GLe.forEach(t),kY.forEach(t),$Jo=i(ga),xF=n(ga,"P",{});var OLe=s(xF);kJo=r(OLe,"The model is set in evaluation mode by default using "),rpe=n(OLe,"CODE",{});var Edt=s(rpe);SJo=r(Edt,"model.eval()"),Edt.forEach(t),RJo=r(OLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tpe=n(OLe,"CODE",{});var Cdt=s(tpe);BJo=r(Cdt,"model.train()"),Cdt.forEach(t),OLe.forEach(t),PJo=i(ga),T($F.$$.fragment,ga),ga.forEach(t),Zs.forEach(t),CBe=i(f),vd=n(f,"H2",{class:!0});var yIe=s(vd);kF=n(yIe,"A",{id:!0,class:!0,href:!0});var wdt=s(kF);ape=n(wdt,"SPAN",{});var Adt=s(ape);T(y0.$$.fragment,Adt),Adt.forEach(t),wdt.forEach(t),IJo=i(yIe),npe=n(yIe,"SPAN",{});var ydt=s(npe);qJo=r(ydt,"AutoModelForObjectDetection"),ydt.forEach(t),yIe.forEach(t),wBe=i(f),zo=n(f,"DIV",{class:!0});var el=s(zo);T(L0.$$.fragment,el),NJo=i(el),Fd=n(el,"P",{});var SY=s(Fd);jJo=r(SY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),kV=n(SY,"A",{href:!0});var Ldt=s(kV);DJo=r(Ldt,"from_pretrained()"),Ldt.forEach(t),GJo=r(SY," class method or the "),SV=n(SY,"A",{href:!0});var xdt=s(SV);OJo=r(xdt,"from_config()"),xdt.forEach(t),VJo=r(SY,` class
method.`),SY.forEach(t),XJo=i(el),x0=n(el,"P",{});var LIe=s(x0);zJo=r(LIe,"This class cannot be instantiated directly using "),spe=n(LIe,"CODE",{});var $dt=s(spe);QJo=r($dt,"__init__()"),$dt.forEach(t),WJo=r(LIe," (throws an error)."),LIe.forEach(t),HJo=i(el),bt=n(el,"DIV",{class:!0});var a3=s(bt);T($0.$$.fragment,a3),UJo=i(a3),lpe=n(a3,"P",{});var kdt=s(lpe);JJo=r(kdt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),kdt.forEach(t),YJo=i(a3),Td=n(a3,"P",{});var RY=s(Td);KJo=r(RY,`Note:
Loading a model from its configuration file does `),ipe=n(RY,"STRONG",{});var Sdt=s(ipe);ZJo=r(Sdt,"not"),Sdt.forEach(t),eYo=r(RY,` load the model weights. It only affects the
model\u2019s configuration. Use `),RV=n(RY,"A",{href:!0});var Rdt=s(RV);oYo=r(Rdt,"from_pretrained()"),Rdt.forEach(t),rYo=r(RY," to load the model weights."),RY.forEach(t),tYo=i(a3),T(SF.$$.fragment,a3),a3.forEach(t),aYo=i(el),mo=n(el,"DIV",{class:!0});var ha=s(mo);T(k0.$$.fragment,ha),nYo=i(ha),dpe=n(ha,"P",{});var Bdt=s(dpe);sYo=r(Bdt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Bdt.forEach(t),lYo=i(ha),Va=n(ha,"P",{});var n3=s(Va);iYo=r(n3,"The model class to instantiate is selected based on the "),cpe=n(n3,"CODE",{});var Pdt=s(cpe);dYo=r(Pdt,"model_type"),Pdt.forEach(t),cYo=r(n3,` property of the config object (either
passed as an argument or loaded from `),fpe=n(n3,"CODE",{});var Idt=s(fpe);fYo=r(Idt,"pretrained_model_name_or_path"),Idt.forEach(t),mYo=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mpe=n(n3,"CODE",{});var qdt=s(mpe);gYo=r(qdt,"pretrained_model_name_or_path"),qdt.forEach(t),hYo=r(n3,":"),n3.forEach(t),pYo=i(ha),gpe=n(ha,"UL",{});var Ndt=s(gpe);RF=n(Ndt,"LI",{});var VLe=s(RF);hpe=n(VLe,"STRONG",{});var jdt=s(hpe);uYo=r(jdt,"detr"),jdt.forEach(t),_Yo=r(VLe," \u2014 "),BV=n(VLe,"A",{href:!0});var Ddt=s(BV);bYo=r(Ddt,"DetrForObjectDetection"),Ddt.forEach(t),vYo=r(VLe," (DETR model)"),VLe.forEach(t),Ndt.forEach(t),FYo=i(ha),BF=n(ha,"P",{});var XLe=s(BF);TYo=r(XLe,"The model is set in evaluation mode by default using "),ppe=n(XLe,"CODE",{});var Gdt=s(ppe);MYo=r(Gdt,"model.eval()"),Gdt.forEach(t),EYo=r(XLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),upe=n(XLe,"CODE",{});var Odt=s(upe);CYo=r(Odt,"model.train()"),Odt.forEach(t),XLe.forEach(t),wYo=i(ha),T(PF.$$.fragment,ha),ha.forEach(t),el.forEach(t),ABe=i(f),Md=n(f,"H2",{class:!0});var xIe=s(Md);IF=n(xIe,"A",{id:!0,class:!0,href:!0});var Vdt=s(IF);_pe=n(Vdt,"SPAN",{});var Xdt=s(_pe);T(S0.$$.fragment,Xdt),Xdt.forEach(t),Vdt.forEach(t),AYo=i(xIe),bpe=n(xIe,"SPAN",{});var zdt=s(bpe);yYo=r(zdt,"AutoModelForImageSegmentation"),zdt.forEach(t),xIe.forEach(t),yBe=i(f),Qo=n(f,"DIV",{class:!0});var ol=s(Qo);T(R0.$$.fragment,ol),LYo=i(ol),Ed=n(ol,"P",{});var BY=s(Ed);xYo=r(BY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),PV=n(BY,"A",{href:!0});var Qdt=s(PV);$Yo=r(Qdt,"from_pretrained()"),Qdt.forEach(t),kYo=r(BY," class method or the "),IV=n(BY,"A",{href:!0});var Wdt=s(IV);SYo=r(Wdt,"from_config()"),Wdt.forEach(t),RYo=r(BY,` class
method.`),BY.forEach(t),BYo=i(ol),B0=n(ol,"P",{});var $Ie=s(B0);PYo=r($Ie,"This class cannot be instantiated directly using "),vpe=n($Ie,"CODE",{});var Hdt=s(vpe);IYo=r(Hdt,"__init__()"),Hdt.forEach(t),qYo=r($Ie," (throws an error)."),$Ie.forEach(t),NYo=i(ol),vt=n(ol,"DIV",{class:!0});var s3=s(vt);T(P0.$$.fragment,s3),jYo=i(s3),Fpe=n(s3,"P",{});var Udt=s(Fpe);DYo=r(Udt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Udt.forEach(t),GYo=i(s3),Cd=n(s3,"P",{});var PY=s(Cd);OYo=r(PY,`Note:
Loading a model from its configuration file does `),Tpe=n(PY,"STRONG",{});var Jdt=s(Tpe);VYo=r(Jdt,"not"),Jdt.forEach(t),XYo=r(PY,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(PY,"A",{href:!0});var Ydt=s(qV);zYo=r(Ydt,"from_pretrained()"),Ydt.forEach(t),QYo=r(PY," to load the model weights."),PY.forEach(t),WYo=i(s3),T(qF.$$.fragment,s3),s3.forEach(t),HYo=i(ol),go=n(ol,"DIV",{class:!0});var pa=s(go);T(I0.$$.fragment,pa),UYo=i(pa),Mpe=n(pa,"P",{});var Kdt=s(Mpe);JYo=r(Kdt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Kdt.forEach(t),YYo=i(pa),Xa=n(pa,"P",{});var l3=s(Xa);KYo=r(l3,"The model class to instantiate is selected based on the "),Epe=n(l3,"CODE",{});var Zdt=s(Epe);ZYo=r(Zdt,"model_type"),Zdt.forEach(t),eKo=r(l3,` property of the config object (either
passed as an argument or loaded from `),Cpe=n(l3,"CODE",{});var ect=s(Cpe);oKo=r(ect,"pretrained_model_name_or_path"),ect.forEach(t),rKo=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wpe=n(l3,"CODE",{});var oct=s(wpe);tKo=r(oct,"pretrained_model_name_or_path"),oct.forEach(t),aKo=r(l3,":"),l3.forEach(t),nKo=i(pa),Ape=n(pa,"UL",{});var rct=s(Ape);NF=n(rct,"LI",{});var zLe=s(NF);ype=n(zLe,"STRONG",{});var tct=s(ype);sKo=r(tct,"detr"),tct.forEach(t),lKo=r(zLe," \u2014 "),NV=n(zLe,"A",{href:!0});var act=s(NV);iKo=r(act,"DetrForSegmentation"),act.forEach(t),dKo=r(zLe," (DETR model)"),zLe.forEach(t),rct.forEach(t),cKo=i(pa),jF=n(pa,"P",{});var QLe=s(jF);fKo=r(QLe,"The model is set in evaluation mode by default using "),Lpe=n(QLe,"CODE",{});var nct=s(Lpe);mKo=r(nct,"model.eval()"),nct.forEach(t),gKo=r(QLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),xpe=n(QLe,"CODE",{});var sct=s(xpe);hKo=r(sct,"model.train()"),sct.forEach(t),QLe.forEach(t),pKo=i(pa),T(DF.$$.fragment,pa),pa.forEach(t),ol.forEach(t),LBe=i(f),wd=n(f,"H2",{class:!0});var kIe=s(wd);GF=n(kIe,"A",{id:!0,class:!0,href:!0});var lct=s(GF);$pe=n(lct,"SPAN",{});var ict=s($pe);T(q0.$$.fragment,ict),ict.forEach(t),lct.forEach(t),uKo=i(kIe),kpe=n(kIe,"SPAN",{});var dct=s(kpe);_Ko=r(dct,"AutoModelForSemanticSegmentation"),dct.forEach(t),kIe.forEach(t),xBe=i(f),Wo=n(f,"DIV",{class:!0});var rl=s(Wo);T(N0.$$.fragment,rl),bKo=i(rl),Ad=n(rl,"P",{});var IY=s(Ad);vKo=r(IY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),jV=n(IY,"A",{href:!0});var cct=s(jV);FKo=r(cct,"from_pretrained()"),cct.forEach(t),TKo=r(IY," class method or the "),DV=n(IY,"A",{href:!0});var fct=s(DV);MKo=r(fct,"from_config()"),fct.forEach(t),EKo=r(IY,` class
method.`),IY.forEach(t),CKo=i(rl),j0=n(rl,"P",{});var SIe=s(j0);wKo=r(SIe,"This class cannot be instantiated directly using "),Spe=n(SIe,"CODE",{});var mct=s(Spe);AKo=r(mct,"__init__()"),mct.forEach(t),yKo=r(SIe," (throws an error)."),SIe.forEach(t),LKo=i(rl),Ft=n(rl,"DIV",{class:!0});var i3=s(Ft);T(D0.$$.fragment,i3),xKo=i(i3),Rpe=n(i3,"P",{});var gct=s(Rpe);$Ko=r(gct,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),gct.forEach(t),kKo=i(i3),yd=n(i3,"P",{});var qY=s(yd);SKo=r(qY,`Note:
Loading a model from its configuration file does `),Bpe=n(qY,"STRONG",{});var hct=s(Bpe);RKo=r(hct,"not"),hct.forEach(t),BKo=r(qY,` load the model weights. It only affects the
model\u2019s configuration. Use `),GV=n(qY,"A",{href:!0});var pct=s(GV);PKo=r(pct,"from_pretrained()"),pct.forEach(t),IKo=r(qY," to load the model weights."),qY.forEach(t),qKo=i(i3),T(OF.$$.fragment,i3),i3.forEach(t),NKo=i(rl),ho=n(rl,"DIV",{class:!0});var ua=s(ho);T(G0.$$.fragment,ua),jKo=i(ua),Ppe=n(ua,"P",{});var uct=s(Ppe);DKo=r(uct,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),uct.forEach(t),GKo=i(ua),za=n(ua,"P",{});var d3=s(za);OKo=r(d3,"The model class to instantiate is selected based on the "),Ipe=n(d3,"CODE",{});var _ct=s(Ipe);VKo=r(_ct,"model_type"),_ct.forEach(t),XKo=r(d3,` property of the config object (either
passed as an argument or loaded from `),qpe=n(d3,"CODE",{});var bct=s(qpe);zKo=r(bct,"pretrained_model_name_or_path"),bct.forEach(t),QKo=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Npe=n(d3,"CODE",{});var vct=s(Npe);WKo=r(vct,"pretrained_model_name_or_path"),vct.forEach(t),HKo=r(d3,":"),d3.forEach(t),UKo=i(ua),Qa=n(ua,"UL",{});var c3=s(Qa);VF=n(c3,"LI",{});var WLe=s(VF);jpe=n(WLe,"STRONG",{});var Fct=s(jpe);JKo=r(Fct,"beit"),Fct.forEach(t),YKo=r(WLe," \u2014 "),OV=n(WLe,"A",{href:!0});var Tct=s(OV);KKo=r(Tct,"BeitForSemanticSegmentation"),Tct.forEach(t),ZKo=r(WLe," (BEiT model)"),WLe.forEach(t),eZo=i(c3),XF=n(c3,"LI",{});var HLe=s(XF);Dpe=n(HLe,"STRONG",{});var Mct=s(Dpe);oZo=r(Mct,"data2vec-vision"),Mct.forEach(t),rZo=r(HLe," \u2014 "),VV=n(HLe,"A",{href:!0});var Ect=s(VV);tZo=r(Ect,"Data2VecVisionForSemanticSegmentation"),Ect.forEach(t),aZo=r(HLe," (Data2VecVision model)"),HLe.forEach(t),nZo=i(c3),zF=n(c3,"LI",{});var ULe=s(zF);Gpe=n(ULe,"STRONG",{});var Cct=s(Gpe);sZo=r(Cct,"dpt"),Cct.forEach(t),lZo=r(ULe," \u2014 "),XV=n(ULe,"A",{href:!0});var wct=s(XV);iZo=r(wct,"DPTForSemanticSegmentation"),wct.forEach(t),dZo=r(ULe," (DPT model)"),ULe.forEach(t),cZo=i(c3),QF=n(c3,"LI",{});var JLe=s(QF);Ope=n(JLe,"STRONG",{});var Act=s(Ope);fZo=r(Act,"segformer"),Act.forEach(t),mZo=r(JLe," \u2014 "),zV=n(JLe,"A",{href:!0});var yct=s(zV);gZo=r(yct,"SegformerForSemanticSegmentation"),yct.forEach(t),hZo=r(JLe," (SegFormer model)"),JLe.forEach(t),c3.forEach(t),pZo=i(ua),WF=n(ua,"P",{});var YLe=s(WF);uZo=r(YLe,"The model is set in evaluation mode by default using "),Vpe=n(YLe,"CODE",{});var Lct=s(Vpe);_Zo=r(Lct,"model.eval()"),Lct.forEach(t),bZo=r(YLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Xpe=n(YLe,"CODE",{});var xct=s(Xpe);vZo=r(xct,"model.train()"),xct.forEach(t),YLe.forEach(t),FZo=i(ua),T(HF.$$.fragment,ua),ua.forEach(t),rl.forEach(t),$Be=i(f),Ld=n(f,"H2",{class:!0});var RIe=s(Ld);UF=n(RIe,"A",{id:!0,class:!0,href:!0});var $ct=s(UF);zpe=n($ct,"SPAN",{});var kct=s(zpe);T(O0.$$.fragment,kct),kct.forEach(t),$ct.forEach(t),TZo=i(RIe),Qpe=n(RIe,"SPAN",{});var Sct=s(Qpe);MZo=r(Sct,"AutoModelForInstanceSegmentation"),Sct.forEach(t),RIe.forEach(t),kBe=i(f),Ho=n(f,"DIV",{class:!0});var tl=s(Ho);T(V0.$$.fragment,tl),EZo=i(tl),xd=n(tl,"P",{});var NY=s(xd);CZo=r(NY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),QV=n(NY,"A",{href:!0});var Rct=s(QV);wZo=r(Rct,"from_pretrained()"),Rct.forEach(t),AZo=r(NY," class method or the "),WV=n(NY,"A",{href:!0});var Bct=s(WV);yZo=r(Bct,"from_config()"),Bct.forEach(t),LZo=r(NY,` class
method.`),NY.forEach(t),xZo=i(tl),X0=n(tl,"P",{});var BIe=s(X0);$Zo=r(BIe,"This class cannot be instantiated directly using "),Wpe=n(BIe,"CODE",{});var Pct=s(Wpe);kZo=r(Pct,"__init__()"),Pct.forEach(t),SZo=r(BIe," (throws an error)."),BIe.forEach(t),RZo=i(tl),Tt=n(tl,"DIV",{class:!0});var f3=s(Tt);T(z0.$$.fragment,f3),BZo=i(f3),Hpe=n(f3,"P",{});var Ict=s(Hpe);PZo=r(Ict,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Ict.forEach(t),IZo=i(f3),$d=n(f3,"P",{});var jY=s($d);qZo=r(jY,`Note:
Loading a model from its configuration file does `),Upe=n(jY,"STRONG",{});var qct=s(Upe);NZo=r(qct,"not"),qct.forEach(t),jZo=r(jY,` load the model weights. It only affects the
model\u2019s configuration. Use `),HV=n(jY,"A",{href:!0});var Nct=s(HV);DZo=r(Nct,"from_pretrained()"),Nct.forEach(t),GZo=r(jY," to load the model weights."),jY.forEach(t),OZo=i(f3),T(JF.$$.fragment,f3),f3.forEach(t),VZo=i(tl),po=n(tl,"DIV",{class:!0});var _a=s(po);T(Q0.$$.fragment,_a),XZo=i(_a),Jpe=n(_a,"P",{});var jct=s(Jpe);zZo=r(jct,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),jct.forEach(t),QZo=i(_a),Wa=n(_a,"P",{});var m3=s(Wa);WZo=r(m3,"The model class to instantiate is selected based on the "),Ype=n(m3,"CODE",{});var Dct=s(Ype);HZo=r(Dct,"model_type"),Dct.forEach(t),UZo=r(m3,` property of the config object (either
passed as an argument or loaded from `),Kpe=n(m3,"CODE",{});var Gct=s(Kpe);JZo=r(Gct,"pretrained_model_name_or_path"),Gct.forEach(t),YZo=r(m3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zpe=n(m3,"CODE",{});var Oct=s(Zpe);KZo=r(Oct,"pretrained_model_name_or_path"),Oct.forEach(t),ZZo=r(m3,":"),m3.forEach(t),eer=i(_a),eue=n(_a,"UL",{});var Vct=s(eue);YF=n(Vct,"LI",{});var KLe=s(YF);oue=n(KLe,"STRONG",{});var Xct=s(oue);oer=r(Xct,"maskformer"),Xct.forEach(t),rer=r(KLe," \u2014 "),UV=n(KLe,"A",{href:!0});var zct=s(UV);ter=r(zct,"MaskFormerForInstanceSegmentation"),zct.forEach(t),aer=r(KLe," (MaskFormer model)"),KLe.forEach(t),Vct.forEach(t),ner=i(_a),KF=n(_a,"P",{});var ZLe=s(KF);ser=r(ZLe,"The model is set in evaluation mode by default using "),rue=n(ZLe,"CODE",{});var Qct=s(rue);ler=r(Qct,"model.eval()"),Qct.forEach(t),ier=r(ZLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),tue=n(ZLe,"CODE",{});var Wct=s(tue);der=r(Wct,"model.train()"),Wct.forEach(t),ZLe.forEach(t),cer=i(_a),T(ZF.$$.fragment,_a),_a.forEach(t),tl.forEach(t),SBe=i(f),kd=n(f,"H2",{class:!0});var PIe=s(kd);e6=n(PIe,"A",{id:!0,class:!0,href:!0});var Hct=s(e6);aue=n(Hct,"SPAN",{});var Uct=s(aue);T(W0.$$.fragment,Uct),Uct.forEach(t),Hct.forEach(t),fer=i(PIe),nue=n(PIe,"SPAN",{});var Jct=s(nue);mer=r(Jct,"TFAutoModel"),Jct.forEach(t),PIe.forEach(t),RBe=i(f),Uo=n(f,"DIV",{class:!0});var al=s(Uo);T(H0.$$.fragment,al),ger=i(al),Sd=n(al,"P",{});var DY=s(Sd);her=r(DY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),JV=n(DY,"A",{href:!0});var Yct=s(JV);per=r(Yct,"from_pretrained()"),Yct.forEach(t),uer=r(DY," class method or the "),YV=n(DY,"A",{href:!0});var Kct=s(YV);_er=r(Kct,"from_config()"),Kct.forEach(t),ber=r(DY,` class
method.`),DY.forEach(t),ver=i(al),U0=n(al,"P",{});var IIe=s(U0);Fer=r(IIe,"This class cannot be instantiated directly using "),sue=n(IIe,"CODE",{});var Zct=s(sue);Ter=r(Zct,"__init__()"),Zct.forEach(t),Mer=r(IIe," (throws an error)."),IIe.forEach(t),Eer=i(al),Mt=n(al,"DIV",{class:!0});var g3=s(Mt);T(J0.$$.fragment,g3),Cer=i(g3),lue=n(g3,"P",{});var eft=s(lue);wer=r(eft,"Instantiates one of the base model classes of the library from a configuration."),eft.forEach(t),Aer=i(g3),Rd=n(g3,"P",{});var GY=s(Rd);yer=r(GY,`Note:
Loading a model from its configuration file does `),iue=n(GY,"STRONG",{});var oft=s(iue);Ler=r(oft,"not"),oft.forEach(t),xer=r(GY,` load the model weights. It only affects the
model\u2019s configuration. Use `),KV=n(GY,"A",{href:!0});var rft=s(KV);$er=r(rft,"from_pretrained()"),rft.forEach(t),ker=r(GY," to load the model weights."),GY.forEach(t),Ser=i(g3),T(o6.$$.fragment,g3),g3.forEach(t),Rer=i(al),Mr=n(al,"DIV",{class:!0});var nl=s(Mr);T(Y0.$$.fragment,nl),Ber=i(nl),due=n(nl,"P",{});var tft=s(due);Per=r(tft,"Instantiate one of the base model classes of the library from a pretrained model."),tft.forEach(t),Ier=i(nl),Ha=n(nl,"P",{});var h3=s(Ha);qer=r(h3,"The model class to instantiate is selected based on the "),cue=n(h3,"CODE",{});var aft=s(cue);Ner=r(aft,"model_type"),aft.forEach(t),jer=r(h3,` property of the config object (either
passed as an argument or loaded from `),fue=n(h3,"CODE",{});var nft=s(fue);Der=r(nft,"pretrained_model_name_or_path"),nft.forEach(t),Ger=r(h3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mue=n(h3,"CODE",{});var sft=s(mue);Oer=r(sft,"pretrained_model_name_or_path"),sft.forEach(t),Ver=r(h3,":"),h3.forEach(t),Xer=i(nl),j=n(nl,"UL",{});var D=s(j);r6=n(D,"LI",{});var e8e=s(r6);gue=n(e8e,"STRONG",{});var lft=s(gue);zer=r(lft,"albert"),lft.forEach(t),Qer=r(e8e," \u2014 "),ZV=n(e8e,"A",{href:!0});var ift=s(ZV);Wer=r(ift,"TFAlbertModel"),ift.forEach(t),Her=r(e8e," (ALBERT model)"),e8e.forEach(t),Uer=i(D),t6=n(D,"LI",{});var o8e=s(t6);hue=n(o8e,"STRONG",{});var dft=s(hue);Jer=r(dft,"bart"),dft.forEach(t),Yer=r(o8e," \u2014 "),eX=n(o8e,"A",{href:!0});var cft=s(eX);Ker=r(cft,"TFBartModel"),cft.forEach(t),Zer=r(o8e," (BART model)"),o8e.forEach(t),eor=i(D),a6=n(D,"LI",{});var r8e=s(a6);pue=n(r8e,"STRONG",{});var fft=s(pue);oor=r(fft,"bert"),fft.forEach(t),ror=r(r8e," \u2014 "),oX=n(r8e,"A",{href:!0});var mft=s(oX);tor=r(mft,"TFBertModel"),mft.forEach(t),aor=r(r8e," (BERT model)"),r8e.forEach(t),nor=i(D),n6=n(D,"LI",{});var t8e=s(n6);uue=n(t8e,"STRONG",{});var gft=s(uue);sor=r(gft,"blenderbot"),gft.forEach(t),lor=r(t8e," \u2014 "),rX=n(t8e,"A",{href:!0});var hft=s(rX);ior=r(hft,"TFBlenderbotModel"),hft.forEach(t),dor=r(t8e," (Blenderbot model)"),t8e.forEach(t),cor=i(D),s6=n(D,"LI",{});var a8e=s(s6);_ue=n(a8e,"STRONG",{});var pft=s(_ue);mor=r(pft,"blenderbot-small"),pft.forEach(t),gor=r(a8e," \u2014 "),tX=n(a8e,"A",{href:!0});var uft=s(tX);hor=r(uft,"TFBlenderbotSmallModel"),uft.forEach(t),por=r(a8e," (BlenderbotSmall model)"),a8e.forEach(t),uor=i(D),l6=n(D,"LI",{});var n8e=s(l6);bue=n(n8e,"STRONG",{});var _ft=s(bue);_or=r(_ft,"camembert"),_ft.forEach(t),bor=r(n8e," \u2014 "),aX=n(n8e,"A",{href:!0});var bft=s(aX);vor=r(bft,"TFCamembertModel"),bft.forEach(t),For=r(n8e," (CamemBERT model)"),n8e.forEach(t),Tor=i(D),i6=n(D,"LI",{});var s8e=s(i6);vue=n(s8e,"STRONG",{});var vft=s(vue);Mor=r(vft,"clip"),vft.forEach(t),Eor=r(s8e," \u2014 "),nX=n(s8e,"A",{href:!0});var Fft=s(nX);Cor=r(Fft,"TFCLIPModel"),Fft.forEach(t),wor=r(s8e," (CLIP model)"),s8e.forEach(t),Aor=i(D),d6=n(D,"LI",{});var l8e=s(d6);Fue=n(l8e,"STRONG",{});var Tft=s(Fue);yor=r(Tft,"convbert"),Tft.forEach(t),Lor=r(l8e," \u2014 "),sX=n(l8e,"A",{href:!0});var Mft=s(sX);xor=r(Mft,"TFConvBertModel"),Mft.forEach(t),$or=r(l8e," (ConvBERT model)"),l8e.forEach(t),kor=i(D),c6=n(D,"LI",{});var i8e=s(c6);Tue=n(i8e,"STRONG",{});var Eft=s(Tue);Sor=r(Eft,"convnext"),Eft.forEach(t),Ror=r(i8e," \u2014 "),lX=n(i8e,"A",{href:!0});var Cft=s(lX);Bor=r(Cft,"TFConvNextModel"),Cft.forEach(t),Por=r(i8e," (ConvNext model)"),i8e.forEach(t),Ior=i(D),f6=n(D,"LI",{});var d8e=s(f6);Mue=n(d8e,"STRONG",{});var wft=s(Mue);qor=r(wft,"ctrl"),wft.forEach(t),Nor=r(d8e," \u2014 "),iX=n(d8e,"A",{href:!0});var Aft=s(iX);jor=r(Aft,"TFCTRLModel"),Aft.forEach(t),Dor=r(d8e," (CTRL model)"),d8e.forEach(t),Gor=i(D),m6=n(D,"LI",{});var c8e=s(m6);Eue=n(c8e,"STRONG",{});var yft=s(Eue);Oor=r(yft,"deberta"),yft.forEach(t),Vor=r(c8e," \u2014 "),dX=n(c8e,"A",{href:!0});var Lft=s(dX);Xor=r(Lft,"TFDebertaModel"),Lft.forEach(t),zor=r(c8e," (DeBERTa model)"),c8e.forEach(t),Qor=i(D),g6=n(D,"LI",{});var f8e=s(g6);Cue=n(f8e,"STRONG",{});var xft=s(Cue);Wor=r(xft,"deberta-v2"),xft.forEach(t),Hor=r(f8e," \u2014 "),cX=n(f8e,"A",{href:!0});var $ft=s(cX);Uor=r($ft,"TFDebertaV2Model"),$ft.forEach(t),Jor=r(f8e," (DeBERTa-v2 model)"),f8e.forEach(t),Yor=i(D),h6=n(D,"LI",{});var m8e=s(h6);wue=n(m8e,"STRONG",{});var kft=s(wue);Kor=r(kft,"distilbert"),kft.forEach(t),Zor=r(m8e," \u2014 "),fX=n(m8e,"A",{href:!0});var Sft=s(fX);err=r(Sft,"TFDistilBertModel"),Sft.forEach(t),orr=r(m8e," (DistilBERT model)"),m8e.forEach(t),rrr=i(D),p6=n(D,"LI",{});var g8e=s(p6);Aue=n(g8e,"STRONG",{});var Rft=s(Aue);trr=r(Rft,"dpr"),Rft.forEach(t),arr=r(g8e," \u2014 "),mX=n(g8e,"A",{href:!0});var Bft=s(mX);nrr=r(Bft,"TFDPRQuestionEncoder"),Bft.forEach(t),srr=r(g8e," (DPR model)"),g8e.forEach(t),lrr=i(D),u6=n(D,"LI",{});var h8e=s(u6);yue=n(h8e,"STRONG",{});var Pft=s(yue);irr=r(Pft,"electra"),Pft.forEach(t),drr=r(h8e," \u2014 "),gX=n(h8e,"A",{href:!0});var Ift=s(gX);crr=r(Ift,"TFElectraModel"),Ift.forEach(t),frr=r(h8e," (ELECTRA model)"),h8e.forEach(t),mrr=i(D),_6=n(D,"LI",{});var p8e=s(_6);Lue=n(p8e,"STRONG",{});var qft=s(Lue);grr=r(qft,"flaubert"),qft.forEach(t),hrr=r(p8e," \u2014 "),hX=n(p8e,"A",{href:!0});var Nft=s(hX);prr=r(Nft,"TFFlaubertModel"),Nft.forEach(t),urr=r(p8e," (FlauBERT model)"),p8e.forEach(t),_rr=i(D),xs=n(D,"LI",{});var Ex=s(xs);xue=n(Ex,"STRONG",{});var jft=s(xue);brr=r(jft,"funnel"),jft.forEach(t),vrr=r(Ex," \u2014 "),pX=n(Ex,"A",{href:!0});var Dft=s(pX);Frr=r(Dft,"TFFunnelModel"),Dft.forEach(t),Trr=r(Ex," or "),uX=n(Ex,"A",{href:!0});var Gft=s(uX);Mrr=r(Gft,"TFFunnelBaseModel"),Gft.forEach(t),Err=r(Ex," (Funnel Transformer model)"),Ex.forEach(t),Crr=i(D),b6=n(D,"LI",{});var u8e=s(b6);$ue=n(u8e,"STRONG",{});var Oft=s($ue);wrr=r(Oft,"gpt2"),Oft.forEach(t),Arr=r(u8e," \u2014 "),_X=n(u8e,"A",{href:!0});var Vft=s(_X);yrr=r(Vft,"TFGPT2Model"),Vft.forEach(t),Lrr=r(u8e," (OpenAI GPT-2 model)"),u8e.forEach(t),xrr=i(D),v6=n(D,"LI",{});var _8e=s(v6);kue=n(_8e,"STRONG",{});var Xft=s(kue);$rr=r(Xft,"gptj"),Xft.forEach(t),krr=r(_8e," \u2014 "),bX=n(_8e,"A",{href:!0});var zft=s(bX);Srr=r(zft,"TFGPTJModel"),zft.forEach(t),Rrr=r(_8e," (GPT-J model)"),_8e.forEach(t),Brr=i(D),F6=n(D,"LI",{});var b8e=s(F6);Sue=n(b8e,"STRONG",{});var Qft=s(Sue);Prr=r(Qft,"hubert"),Qft.forEach(t),Irr=r(b8e," \u2014 "),vX=n(b8e,"A",{href:!0});var Wft=s(vX);qrr=r(Wft,"TFHubertModel"),Wft.forEach(t),Nrr=r(b8e," (Hubert model)"),b8e.forEach(t),jrr=i(D),T6=n(D,"LI",{});var v8e=s(T6);Rue=n(v8e,"STRONG",{});var Hft=s(Rue);Drr=r(Hft,"layoutlm"),Hft.forEach(t),Grr=r(v8e," \u2014 "),FX=n(v8e,"A",{href:!0});var Uft=s(FX);Orr=r(Uft,"TFLayoutLMModel"),Uft.forEach(t),Vrr=r(v8e," (LayoutLM model)"),v8e.forEach(t),Xrr=i(D),M6=n(D,"LI",{});var F8e=s(M6);Bue=n(F8e,"STRONG",{});var Jft=s(Bue);zrr=r(Jft,"led"),Jft.forEach(t),Qrr=r(F8e," \u2014 "),TX=n(F8e,"A",{href:!0});var Yft=s(TX);Wrr=r(Yft,"TFLEDModel"),Yft.forEach(t),Hrr=r(F8e," (LED model)"),F8e.forEach(t),Urr=i(D),E6=n(D,"LI",{});var T8e=s(E6);Pue=n(T8e,"STRONG",{});var Kft=s(Pue);Jrr=r(Kft,"longformer"),Kft.forEach(t),Yrr=r(T8e," \u2014 "),MX=n(T8e,"A",{href:!0});var Zft=s(MX);Krr=r(Zft,"TFLongformerModel"),Zft.forEach(t),Zrr=r(T8e," (Longformer model)"),T8e.forEach(t),etr=i(D),C6=n(D,"LI",{});var M8e=s(C6);Iue=n(M8e,"STRONG",{});var emt=s(Iue);otr=r(emt,"lxmert"),emt.forEach(t),rtr=r(M8e," \u2014 "),EX=n(M8e,"A",{href:!0});var omt=s(EX);ttr=r(omt,"TFLxmertModel"),omt.forEach(t),atr=r(M8e," (LXMERT model)"),M8e.forEach(t),ntr=i(D),w6=n(D,"LI",{});var E8e=s(w6);que=n(E8e,"STRONG",{});var rmt=s(que);str=r(rmt,"marian"),rmt.forEach(t),ltr=r(E8e," \u2014 "),CX=n(E8e,"A",{href:!0});var tmt=s(CX);itr=r(tmt,"TFMarianModel"),tmt.forEach(t),dtr=r(E8e," (Marian model)"),E8e.forEach(t),ctr=i(D),A6=n(D,"LI",{});var C8e=s(A6);Nue=n(C8e,"STRONG",{});var amt=s(Nue);ftr=r(amt,"mbart"),amt.forEach(t),mtr=r(C8e," \u2014 "),wX=n(C8e,"A",{href:!0});var nmt=s(wX);gtr=r(nmt,"TFMBartModel"),nmt.forEach(t),htr=r(C8e," (mBART model)"),C8e.forEach(t),ptr=i(D),y6=n(D,"LI",{});var w8e=s(y6);jue=n(w8e,"STRONG",{});var smt=s(jue);utr=r(smt,"mobilebert"),smt.forEach(t),_tr=r(w8e," \u2014 "),AX=n(w8e,"A",{href:!0});var lmt=s(AX);btr=r(lmt,"TFMobileBertModel"),lmt.forEach(t),vtr=r(w8e," (MobileBERT model)"),w8e.forEach(t),Ftr=i(D),L6=n(D,"LI",{});var A8e=s(L6);Due=n(A8e,"STRONG",{});var imt=s(Due);Ttr=r(imt,"mpnet"),imt.forEach(t),Mtr=r(A8e," \u2014 "),yX=n(A8e,"A",{href:!0});var dmt=s(yX);Etr=r(dmt,"TFMPNetModel"),dmt.forEach(t),Ctr=r(A8e," (MPNet model)"),A8e.forEach(t),wtr=i(D),x6=n(D,"LI",{});var y8e=s(x6);Gue=n(y8e,"STRONG",{});var cmt=s(Gue);Atr=r(cmt,"mt5"),cmt.forEach(t),ytr=r(y8e," \u2014 "),LX=n(y8e,"A",{href:!0});var fmt=s(LX);Ltr=r(fmt,"TFMT5Model"),fmt.forEach(t),xtr=r(y8e," (mT5 model)"),y8e.forEach(t),$tr=i(D),$6=n(D,"LI",{});var L8e=s($6);Oue=n(L8e,"STRONG",{});var mmt=s(Oue);ktr=r(mmt,"openai-gpt"),mmt.forEach(t),Str=r(L8e," \u2014 "),xX=n(L8e,"A",{href:!0});var gmt=s(xX);Rtr=r(gmt,"TFOpenAIGPTModel"),gmt.forEach(t),Btr=r(L8e," (OpenAI GPT model)"),L8e.forEach(t),Ptr=i(D),k6=n(D,"LI",{});var x8e=s(k6);Vue=n(x8e,"STRONG",{});var hmt=s(Vue);Itr=r(hmt,"pegasus"),hmt.forEach(t),qtr=r(x8e," \u2014 "),$X=n(x8e,"A",{href:!0});var pmt=s($X);Ntr=r(pmt,"TFPegasusModel"),pmt.forEach(t),jtr=r(x8e," (Pegasus model)"),x8e.forEach(t),Dtr=i(D),S6=n(D,"LI",{});var $8e=s(S6);Xue=n($8e,"STRONG",{});var umt=s(Xue);Gtr=r(umt,"rembert"),umt.forEach(t),Otr=r($8e," \u2014 "),kX=n($8e,"A",{href:!0});var _mt=s(kX);Vtr=r(_mt,"TFRemBertModel"),_mt.forEach(t),Xtr=r($8e," (RemBERT model)"),$8e.forEach(t),ztr=i(D),R6=n(D,"LI",{});var k8e=s(R6);zue=n(k8e,"STRONG",{});var bmt=s(zue);Qtr=r(bmt,"roberta"),bmt.forEach(t),Wtr=r(k8e," \u2014 "),SX=n(k8e,"A",{href:!0});var vmt=s(SX);Htr=r(vmt,"TFRobertaModel"),vmt.forEach(t),Utr=r(k8e," (RoBERTa model)"),k8e.forEach(t),Jtr=i(D),B6=n(D,"LI",{});var S8e=s(B6);Que=n(S8e,"STRONG",{});var Fmt=s(Que);Ytr=r(Fmt,"roformer"),Fmt.forEach(t),Ktr=r(S8e," \u2014 "),RX=n(S8e,"A",{href:!0});var Tmt=s(RX);Ztr=r(Tmt,"TFRoFormerModel"),Tmt.forEach(t),ear=r(S8e," (RoFormer model)"),S8e.forEach(t),oar=i(D),P6=n(D,"LI",{});var R8e=s(P6);Wue=n(R8e,"STRONG",{});var Mmt=s(Wue);rar=r(Mmt,"speech_to_text"),Mmt.forEach(t),tar=r(R8e," \u2014 "),BX=n(R8e,"A",{href:!0});var Emt=s(BX);aar=r(Emt,"TFSpeech2TextModel"),Emt.forEach(t),nar=r(R8e," (Speech2Text model)"),R8e.forEach(t),sar=i(D),I6=n(D,"LI",{});var B8e=s(I6);Hue=n(B8e,"STRONG",{});var Cmt=s(Hue);lar=r(Cmt,"t5"),Cmt.forEach(t),iar=r(B8e," \u2014 "),PX=n(B8e,"A",{href:!0});var wmt=s(PX);dar=r(wmt,"TFT5Model"),wmt.forEach(t),car=r(B8e," (T5 model)"),B8e.forEach(t),far=i(D),q6=n(D,"LI",{});var P8e=s(q6);Uue=n(P8e,"STRONG",{});var Amt=s(Uue);mar=r(Amt,"tapas"),Amt.forEach(t),gar=r(P8e," \u2014 "),IX=n(P8e,"A",{href:!0});var ymt=s(IX);har=r(ymt,"TFTapasModel"),ymt.forEach(t),par=r(P8e," (TAPAS model)"),P8e.forEach(t),uar=i(D),N6=n(D,"LI",{});var I8e=s(N6);Jue=n(I8e,"STRONG",{});var Lmt=s(Jue);_ar=r(Lmt,"transfo-xl"),Lmt.forEach(t),bar=r(I8e," \u2014 "),qX=n(I8e,"A",{href:!0});var xmt=s(qX);Far=r(xmt,"TFTransfoXLModel"),xmt.forEach(t),Tar=r(I8e," (Transformer-XL model)"),I8e.forEach(t),Mar=i(D),j6=n(D,"LI",{});var q8e=s(j6);Yue=n(q8e,"STRONG",{});var $mt=s(Yue);Ear=r($mt,"vit"),$mt.forEach(t),Car=r(q8e," \u2014 "),NX=n(q8e,"A",{href:!0});var kmt=s(NX);war=r(kmt,"TFViTModel"),kmt.forEach(t),Aar=r(q8e," (ViT model)"),q8e.forEach(t),yar=i(D),D6=n(D,"LI",{});var N8e=s(D6);Kue=n(N8e,"STRONG",{});var Smt=s(Kue);Lar=r(Smt,"vit_mae"),Smt.forEach(t),xar=r(N8e," \u2014 "),jX=n(N8e,"A",{href:!0});var Rmt=s(jX);$ar=r(Rmt,"TFViTMAEModel"),Rmt.forEach(t),kar=r(N8e," (ViTMAE model)"),N8e.forEach(t),Sar=i(D),G6=n(D,"LI",{});var j8e=s(G6);Zue=n(j8e,"STRONG",{});var Bmt=s(Zue);Rar=r(Bmt,"wav2vec2"),Bmt.forEach(t),Bar=r(j8e," \u2014 "),DX=n(j8e,"A",{href:!0});var Pmt=s(DX);Par=r(Pmt,"TFWav2Vec2Model"),Pmt.forEach(t),Iar=r(j8e," (Wav2Vec2 model)"),j8e.forEach(t),qar=i(D),O6=n(D,"LI",{});var D8e=s(O6);e_e=n(D8e,"STRONG",{});var Imt=s(e_e);Nar=r(Imt,"xlm"),Imt.forEach(t),jar=r(D8e," \u2014 "),GX=n(D8e,"A",{href:!0});var qmt=s(GX);Dar=r(qmt,"TFXLMModel"),qmt.forEach(t),Gar=r(D8e," (XLM model)"),D8e.forEach(t),Oar=i(D),V6=n(D,"LI",{});var G8e=s(V6);o_e=n(G8e,"STRONG",{});var Nmt=s(o_e);Var=r(Nmt,"xlm-roberta"),Nmt.forEach(t),Xar=r(G8e," \u2014 "),OX=n(G8e,"A",{href:!0});var jmt=s(OX);zar=r(jmt,"TFXLMRobertaModel"),jmt.forEach(t),Qar=r(G8e," (XLM-RoBERTa model)"),G8e.forEach(t),War=i(D),X6=n(D,"LI",{});var O8e=s(X6);r_e=n(O8e,"STRONG",{});var Dmt=s(r_e);Har=r(Dmt,"xlnet"),Dmt.forEach(t),Uar=r(O8e," \u2014 "),VX=n(O8e,"A",{href:!0});var Gmt=s(VX);Jar=r(Gmt,"TFXLNetModel"),Gmt.forEach(t),Yar=r(O8e," (XLNet model)"),O8e.forEach(t),D.forEach(t),Kar=i(nl),T(z6.$$.fragment,nl),nl.forEach(t),al.forEach(t),BBe=i(f),Bd=n(f,"H2",{class:!0});var qIe=s(Bd);Q6=n(qIe,"A",{id:!0,class:!0,href:!0});var Omt=s(Q6);t_e=n(Omt,"SPAN",{});var Vmt=s(t_e);T(K0.$$.fragment,Vmt),Vmt.forEach(t),Omt.forEach(t),Zar=i(qIe),a_e=n(qIe,"SPAN",{});var Xmt=s(a_e);enr=r(Xmt,"TFAutoModelForPreTraining"),Xmt.forEach(t),qIe.forEach(t),PBe=i(f),Jo=n(f,"DIV",{class:!0});var sl=s(Jo);T(Z0.$$.fragment,sl),onr=i(sl),Pd=n(sl,"P",{});var OY=s(Pd);rnr=r(OY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),XX=n(OY,"A",{href:!0});var zmt=s(XX);tnr=r(zmt,"from_pretrained()"),zmt.forEach(t),anr=r(OY," class method or the "),zX=n(OY,"A",{href:!0});var Qmt=s(zX);nnr=r(Qmt,"from_config()"),Qmt.forEach(t),snr=r(OY,` class
method.`),OY.forEach(t),lnr=i(sl),ey=n(sl,"P",{});var NIe=s(ey);inr=r(NIe,"This class cannot be instantiated directly using "),n_e=n(NIe,"CODE",{});var Wmt=s(n_e);dnr=r(Wmt,"__init__()"),Wmt.forEach(t),cnr=r(NIe," (throws an error)."),NIe.forEach(t),fnr=i(sl),Et=n(sl,"DIV",{class:!0});var p3=s(Et);T(oy.$$.fragment,p3),mnr=i(p3),s_e=n(p3,"P",{});var Hmt=s(s_e);gnr=r(Hmt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Hmt.forEach(t),hnr=i(p3),Id=n(p3,"P",{});var VY=s(Id);pnr=r(VY,`Note:
Loading a model from its configuration file does `),l_e=n(VY,"STRONG",{});var Umt=s(l_e);unr=r(Umt,"not"),Umt.forEach(t),_nr=r(VY,` load the model weights. It only affects the
model\u2019s configuration. Use `),QX=n(VY,"A",{href:!0});var Jmt=s(QX);bnr=r(Jmt,"from_pretrained()"),Jmt.forEach(t),vnr=r(VY," to load the model weights."),VY.forEach(t),Fnr=i(p3),T(W6.$$.fragment,p3),p3.forEach(t),Tnr=i(sl),Er=n(sl,"DIV",{class:!0});var ll=s(Er);T(ry.$$.fragment,ll),Mnr=i(ll),i_e=n(ll,"P",{});var Ymt=s(i_e);Enr=r(Ymt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Ymt.forEach(t),Cnr=i(ll),Ua=n(ll,"P",{});var u3=s(Ua);wnr=r(u3,"The model class to instantiate is selected based on the "),d_e=n(u3,"CODE",{});var Kmt=s(d_e);Anr=r(Kmt,"model_type"),Kmt.forEach(t),ynr=r(u3,` property of the config object (either
passed as an argument or loaded from `),c_e=n(u3,"CODE",{});var Zmt=s(c_e);Lnr=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),xnr=r(u3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f_e=n(u3,"CODE",{});var egt=s(f_e);$nr=r(egt,"pretrained_model_name_or_path"),egt.forEach(t),knr=r(u3,":"),u3.forEach(t),Snr=i(ll),ne=n(ll,"UL",{});var le=s(ne);H6=n(le,"LI",{});var V8e=s(H6);m_e=n(V8e,"STRONG",{});var ogt=s(m_e);Rnr=r(ogt,"albert"),ogt.forEach(t),Bnr=r(V8e," \u2014 "),WX=n(V8e,"A",{href:!0});var rgt=s(WX);Pnr=r(rgt,"TFAlbertForPreTraining"),rgt.forEach(t),Inr=r(V8e," (ALBERT model)"),V8e.forEach(t),qnr=i(le),U6=n(le,"LI",{});var X8e=s(U6);g_e=n(X8e,"STRONG",{});var tgt=s(g_e);Nnr=r(tgt,"bart"),tgt.forEach(t),jnr=r(X8e," \u2014 "),HX=n(X8e,"A",{href:!0});var agt=s(HX);Dnr=r(agt,"TFBartForConditionalGeneration"),agt.forEach(t),Gnr=r(X8e," (BART model)"),X8e.forEach(t),Onr=i(le),J6=n(le,"LI",{});var z8e=s(J6);h_e=n(z8e,"STRONG",{});var ngt=s(h_e);Vnr=r(ngt,"bert"),ngt.forEach(t),Xnr=r(z8e," \u2014 "),UX=n(z8e,"A",{href:!0});var sgt=s(UX);znr=r(sgt,"TFBertForPreTraining"),sgt.forEach(t),Qnr=r(z8e," (BERT model)"),z8e.forEach(t),Wnr=i(le),Y6=n(le,"LI",{});var Q8e=s(Y6);p_e=n(Q8e,"STRONG",{});var lgt=s(p_e);Hnr=r(lgt,"camembert"),lgt.forEach(t),Unr=r(Q8e," \u2014 "),JX=n(Q8e,"A",{href:!0});var igt=s(JX);Jnr=r(igt,"TFCamembertForMaskedLM"),igt.forEach(t),Ynr=r(Q8e," (CamemBERT model)"),Q8e.forEach(t),Knr=i(le),K6=n(le,"LI",{});var W8e=s(K6);u_e=n(W8e,"STRONG",{});var dgt=s(u_e);Znr=r(dgt,"ctrl"),dgt.forEach(t),esr=r(W8e," \u2014 "),YX=n(W8e,"A",{href:!0});var cgt=s(YX);osr=r(cgt,"TFCTRLLMHeadModel"),cgt.forEach(t),rsr=r(W8e," (CTRL model)"),W8e.forEach(t),tsr=i(le),Z6=n(le,"LI",{});var H8e=s(Z6);__e=n(H8e,"STRONG",{});var fgt=s(__e);asr=r(fgt,"distilbert"),fgt.forEach(t),nsr=r(H8e," \u2014 "),KX=n(H8e,"A",{href:!0});var mgt=s(KX);ssr=r(mgt,"TFDistilBertForMaskedLM"),mgt.forEach(t),lsr=r(H8e," (DistilBERT model)"),H8e.forEach(t),isr=i(le),eT=n(le,"LI",{});var U8e=s(eT);b_e=n(U8e,"STRONG",{});var ggt=s(b_e);dsr=r(ggt,"electra"),ggt.forEach(t),csr=r(U8e," \u2014 "),ZX=n(U8e,"A",{href:!0});var hgt=s(ZX);fsr=r(hgt,"TFElectraForPreTraining"),hgt.forEach(t),msr=r(U8e," (ELECTRA model)"),U8e.forEach(t),gsr=i(le),oT=n(le,"LI",{});var J8e=s(oT);v_e=n(J8e,"STRONG",{});var pgt=s(v_e);hsr=r(pgt,"flaubert"),pgt.forEach(t),psr=r(J8e," \u2014 "),ez=n(J8e,"A",{href:!0});var ugt=s(ez);usr=r(ugt,"TFFlaubertWithLMHeadModel"),ugt.forEach(t),_sr=r(J8e," (FlauBERT model)"),J8e.forEach(t),bsr=i(le),rT=n(le,"LI",{});var Y8e=s(rT);F_e=n(Y8e,"STRONG",{});var _gt=s(F_e);vsr=r(_gt,"funnel"),_gt.forEach(t),Fsr=r(Y8e," \u2014 "),oz=n(Y8e,"A",{href:!0});var bgt=s(oz);Tsr=r(bgt,"TFFunnelForPreTraining"),bgt.forEach(t),Msr=r(Y8e," (Funnel Transformer model)"),Y8e.forEach(t),Esr=i(le),tT=n(le,"LI",{});var K8e=s(tT);T_e=n(K8e,"STRONG",{});var vgt=s(T_e);Csr=r(vgt,"gpt2"),vgt.forEach(t),wsr=r(K8e," \u2014 "),rz=n(K8e,"A",{href:!0});var Fgt=s(rz);Asr=r(Fgt,"TFGPT2LMHeadModel"),Fgt.forEach(t),ysr=r(K8e," (OpenAI GPT-2 model)"),K8e.forEach(t),Lsr=i(le),aT=n(le,"LI",{});var Z8e=s(aT);M_e=n(Z8e,"STRONG",{});var Tgt=s(M_e);xsr=r(Tgt,"layoutlm"),Tgt.forEach(t),$sr=r(Z8e," \u2014 "),tz=n(Z8e,"A",{href:!0});var Mgt=s(tz);ksr=r(Mgt,"TFLayoutLMForMaskedLM"),Mgt.forEach(t),Ssr=r(Z8e," (LayoutLM model)"),Z8e.forEach(t),Rsr=i(le),nT=n(le,"LI",{});var exe=s(nT);E_e=n(exe,"STRONG",{});var Egt=s(E_e);Bsr=r(Egt,"lxmert"),Egt.forEach(t),Psr=r(exe," \u2014 "),az=n(exe,"A",{href:!0});var Cgt=s(az);Isr=r(Cgt,"TFLxmertForPreTraining"),Cgt.forEach(t),qsr=r(exe," (LXMERT model)"),exe.forEach(t),Nsr=i(le),sT=n(le,"LI",{});var oxe=s(sT);C_e=n(oxe,"STRONG",{});var wgt=s(C_e);jsr=r(wgt,"mobilebert"),wgt.forEach(t),Dsr=r(oxe," \u2014 "),nz=n(oxe,"A",{href:!0});var Agt=s(nz);Gsr=r(Agt,"TFMobileBertForPreTraining"),Agt.forEach(t),Osr=r(oxe," (MobileBERT model)"),oxe.forEach(t),Vsr=i(le),lT=n(le,"LI",{});var rxe=s(lT);w_e=n(rxe,"STRONG",{});var ygt=s(w_e);Xsr=r(ygt,"mpnet"),ygt.forEach(t),zsr=r(rxe," \u2014 "),sz=n(rxe,"A",{href:!0});var Lgt=s(sz);Qsr=r(Lgt,"TFMPNetForMaskedLM"),Lgt.forEach(t),Wsr=r(rxe," (MPNet model)"),rxe.forEach(t),Hsr=i(le),iT=n(le,"LI",{});var txe=s(iT);A_e=n(txe,"STRONG",{});var xgt=s(A_e);Usr=r(xgt,"openai-gpt"),xgt.forEach(t),Jsr=r(txe," \u2014 "),lz=n(txe,"A",{href:!0});var $gt=s(lz);Ysr=r($gt,"TFOpenAIGPTLMHeadModel"),$gt.forEach(t),Ksr=r(txe," (OpenAI GPT model)"),txe.forEach(t),Zsr=i(le),dT=n(le,"LI",{});var axe=s(dT);y_e=n(axe,"STRONG",{});var kgt=s(y_e);elr=r(kgt,"roberta"),kgt.forEach(t),olr=r(axe," \u2014 "),iz=n(axe,"A",{href:!0});var Sgt=s(iz);rlr=r(Sgt,"TFRobertaForMaskedLM"),Sgt.forEach(t),tlr=r(axe," (RoBERTa model)"),axe.forEach(t),alr=i(le),cT=n(le,"LI",{});var nxe=s(cT);L_e=n(nxe,"STRONG",{});var Rgt=s(L_e);nlr=r(Rgt,"t5"),Rgt.forEach(t),slr=r(nxe," \u2014 "),dz=n(nxe,"A",{href:!0});var Bgt=s(dz);llr=r(Bgt,"TFT5ForConditionalGeneration"),Bgt.forEach(t),ilr=r(nxe," (T5 model)"),nxe.forEach(t),dlr=i(le),fT=n(le,"LI",{});var sxe=s(fT);x_e=n(sxe,"STRONG",{});var Pgt=s(x_e);clr=r(Pgt,"tapas"),Pgt.forEach(t),flr=r(sxe," \u2014 "),cz=n(sxe,"A",{href:!0});var Igt=s(cz);mlr=r(Igt,"TFTapasForMaskedLM"),Igt.forEach(t),glr=r(sxe," (TAPAS model)"),sxe.forEach(t),hlr=i(le),mT=n(le,"LI",{});var lxe=s(mT);$_e=n(lxe,"STRONG",{});var qgt=s($_e);plr=r(qgt,"transfo-xl"),qgt.forEach(t),ulr=r(lxe," \u2014 "),fz=n(lxe,"A",{href:!0});var Ngt=s(fz);_lr=r(Ngt,"TFTransfoXLLMHeadModel"),Ngt.forEach(t),blr=r(lxe," (Transformer-XL model)"),lxe.forEach(t),vlr=i(le),gT=n(le,"LI",{});var ixe=s(gT);k_e=n(ixe,"STRONG",{});var jgt=s(k_e);Flr=r(jgt,"vit_mae"),jgt.forEach(t),Tlr=r(ixe," \u2014 "),mz=n(ixe,"A",{href:!0});var Dgt=s(mz);Mlr=r(Dgt,"TFViTMAEForPreTraining"),Dgt.forEach(t),Elr=r(ixe," (ViTMAE model)"),ixe.forEach(t),Clr=i(le),hT=n(le,"LI",{});var dxe=s(hT);S_e=n(dxe,"STRONG",{});var Ggt=s(S_e);wlr=r(Ggt,"xlm"),Ggt.forEach(t),Alr=r(dxe," \u2014 "),gz=n(dxe,"A",{href:!0});var Ogt=s(gz);ylr=r(Ogt,"TFXLMWithLMHeadModel"),Ogt.forEach(t),Llr=r(dxe," (XLM model)"),dxe.forEach(t),xlr=i(le),pT=n(le,"LI",{});var cxe=s(pT);R_e=n(cxe,"STRONG",{});var Vgt=s(R_e);$lr=r(Vgt,"xlm-roberta"),Vgt.forEach(t),klr=r(cxe," \u2014 "),hz=n(cxe,"A",{href:!0});var Xgt=s(hz);Slr=r(Xgt,"TFXLMRobertaForMaskedLM"),Xgt.forEach(t),Rlr=r(cxe," (XLM-RoBERTa model)"),cxe.forEach(t),Blr=i(le),uT=n(le,"LI",{});var fxe=s(uT);B_e=n(fxe,"STRONG",{});var zgt=s(B_e);Plr=r(zgt,"xlnet"),zgt.forEach(t),Ilr=r(fxe," \u2014 "),pz=n(fxe,"A",{href:!0});var Qgt=s(pz);qlr=r(Qgt,"TFXLNetLMHeadModel"),Qgt.forEach(t),Nlr=r(fxe," (XLNet model)"),fxe.forEach(t),le.forEach(t),jlr=i(ll),T(_T.$$.fragment,ll),ll.forEach(t),sl.forEach(t),IBe=i(f),qd=n(f,"H2",{class:!0});var jIe=s(qd);bT=n(jIe,"A",{id:!0,class:!0,href:!0});var Wgt=s(bT);P_e=n(Wgt,"SPAN",{});var Hgt=s(P_e);T(ty.$$.fragment,Hgt),Hgt.forEach(t),Wgt.forEach(t),Dlr=i(jIe),I_e=n(jIe,"SPAN",{});var Ugt=s(I_e);Glr=r(Ugt,"TFAutoModelForCausalLM"),Ugt.forEach(t),jIe.forEach(t),qBe=i(f),Yo=n(f,"DIV",{class:!0});var il=s(Yo);T(ay.$$.fragment,il),Olr=i(il),Nd=n(il,"P",{});var XY=s(Nd);Vlr=r(XY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),uz=n(XY,"A",{href:!0});var Jgt=s(uz);Xlr=r(Jgt,"from_pretrained()"),Jgt.forEach(t),zlr=r(XY," class method or the "),_z=n(XY,"A",{href:!0});var Ygt=s(_z);Qlr=r(Ygt,"from_config()"),Ygt.forEach(t),Wlr=r(XY,` class
method.`),XY.forEach(t),Hlr=i(il),ny=n(il,"P",{});var DIe=s(ny);Ulr=r(DIe,"This class cannot be instantiated directly using "),q_e=n(DIe,"CODE",{});var Kgt=s(q_e);Jlr=r(Kgt,"__init__()"),Kgt.forEach(t),Ylr=r(DIe," (throws an error)."),DIe.forEach(t),Klr=i(il),Ct=n(il,"DIV",{class:!0});var _3=s(Ct);T(sy.$$.fragment,_3),Zlr=i(_3),N_e=n(_3,"P",{});var Zgt=s(N_e);eir=r(Zgt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Zgt.forEach(t),oir=i(_3),jd=n(_3,"P",{});var zY=s(jd);rir=r(zY,`Note:
Loading a model from its configuration file does `),j_e=n(zY,"STRONG",{});var eht=s(j_e);tir=r(eht,"not"),eht.forEach(t),air=r(zY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bz=n(zY,"A",{href:!0});var oht=s(bz);nir=r(oht,"from_pretrained()"),oht.forEach(t),sir=r(zY," to load the model weights."),zY.forEach(t),lir=i(_3),T(vT.$$.fragment,_3),_3.forEach(t),iir=i(il),Cr=n(il,"DIV",{class:!0});var dl=s(Cr);T(ly.$$.fragment,dl),dir=i(dl),D_e=n(dl,"P",{});var rht=s(D_e);cir=r(rht,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),rht.forEach(t),fir=i(dl),Ja=n(dl,"P",{});var b3=s(Ja);mir=r(b3,"The model class to instantiate is selected based on the "),G_e=n(b3,"CODE",{});var tht=s(G_e);gir=r(tht,"model_type"),tht.forEach(t),hir=r(b3,` property of the config object (either
passed as an argument or loaded from `),O_e=n(b3,"CODE",{});var aht=s(O_e);pir=r(aht,"pretrained_model_name_or_path"),aht.forEach(t),uir=r(b3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),V_e=n(b3,"CODE",{});var nht=s(V_e);_ir=r(nht,"pretrained_model_name_or_path"),nht.forEach(t),bir=r(b3,":"),b3.forEach(t),vir=i(dl),Te=n(dl,"UL",{});var Ce=s(Te);FT=n(Ce,"LI",{});var mxe=s(FT);X_e=n(mxe,"STRONG",{});var sht=s(X_e);Fir=r(sht,"bert"),sht.forEach(t),Tir=r(mxe," \u2014 "),vz=n(mxe,"A",{href:!0});var lht=s(vz);Mir=r(lht,"TFBertLMHeadModel"),lht.forEach(t),Eir=r(mxe," (BERT model)"),mxe.forEach(t),Cir=i(Ce),TT=n(Ce,"LI",{});var gxe=s(TT);z_e=n(gxe,"STRONG",{});var iht=s(z_e);wir=r(iht,"camembert"),iht.forEach(t),Air=r(gxe," \u2014 "),Fz=n(gxe,"A",{href:!0});var dht=s(Fz);yir=r(dht,"TFCamembertForCausalLM"),dht.forEach(t),Lir=r(gxe," (CamemBERT model)"),gxe.forEach(t),xir=i(Ce),MT=n(Ce,"LI",{});var hxe=s(MT);Q_e=n(hxe,"STRONG",{});var cht=s(Q_e);$ir=r(cht,"ctrl"),cht.forEach(t),kir=r(hxe," \u2014 "),Tz=n(hxe,"A",{href:!0});var fht=s(Tz);Sir=r(fht,"TFCTRLLMHeadModel"),fht.forEach(t),Rir=r(hxe," (CTRL model)"),hxe.forEach(t),Bir=i(Ce),ET=n(Ce,"LI",{});var pxe=s(ET);W_e=n(pxe,"STRONG",{});var mht=s(W_e);Pir=r(mht,"gpt2"),mht.forEach(t),Iir=r(pxe," \u2014 "),Mz=n(pxe,"A",{href:!0});var ght=s(Mz);qir=r(ght,"TFGPT2LMHeadModel"),ght.forEach(t),Nir=r(pxe," (OpenAI GPT-2 model)"),pxe.forEach(t),jir=i(Ce),CT=n(Ce,"LI",{});var uxe=s(CT);H_e=n(uxe,"STRONG",{});var hht=s(H_e);Dir=r(hht,"gptj"),hht.forEach(t),Gir=r(uxe," \u2014 "),Ez=n(uxe,"A",{href:!0});var pht=s(Ez);Oir=r(pht,"TFGPTJForCausalLM"),pht.forEach(t),Vir=r(uxe," (GPT-J model)"),uxe.forEach(t),Xir=i(Ce),wT=n(Ce,"LI",{});var _xe=s(wT);U_e=n(_xe,"STRONG",{});var uht=s(U_e);zir=r(uht,"openai-gpt"),uht.forEach(t),Qir=r(_xe," \u2014 "),Cz=n(_xe,"A",{href:!0});var _ht=s(Cz);Wir=r(_ht,"TFOpenAIGPTLMHeadModel"),_ht.forEach(t),Hir=r(_xe," (OpenAI GPT model)"),_xe.forEach(t),Uir=i(Ce),AT=n(Ce,"LI",{});var bxe=s(AT);J_e=n(bxe,"STRONG",{});var bht=s(J_e);Jir=r(bht,"rembert"),bht.forEach(t),Yir=r(bxe," \u2014 "),wz=n(bxe,"A",{href:!0});var vht=s(wz);Kir=r(vht,"TFRemBertForCausalLM"),vht.forEach(t),Zir=r(bxe," (RemBERT model)"),bxe.forEach(t),edr=i(Ce),yT=n(Ce,"LI",{});var vxe=s(yT);Y_e=n(vxe,"STRONG",{});var Fht=s(Y_e);odr=r(Fht,"roberta"),Fht.forEach(t),rdr=r(vxe," \u2014 "),Az=n(vxe,"A",{href:!0});var Tht=s(Az);tdr=r(Tht,"TFRobertaForCausalLM"),Tht.forEach(t),adr=r(vxe," (RoBERTa model)"),vxe.forEach(t),ndr=i(Ce),LT=n(Ce,"LI",{});var Fxe=s(LT);K_e=n(Fxe,"STRONG",{});var Mht=s(K_e);sdr=r(Mht,"roformer"),Mht.forEach(t),ldr=r(Fxe," \u2014 "),yz=n(Fxe,"A",{href:!0});var Eht=s(yz);idr=r(Eht,"TFRoFormerForCausalLM"),Eht.forEach(t),ddr=r(Fxe," (RoFormer model)"),Fxe.forEach(t),cdr=i(Ce),xT=n(Ce,"LI",{});var Txe=s(xT);Z_e=n(Txe,"STRONG",{});var Cht=s(Z_e);fdr=r(Cht,"transfo-xl"),Cht.forEach(t),mdr=r(Txe," \u2014 "),Lz=n(Txe,"A",{href:!0});var wht=s(Lz);gdr=r(wht,"TFTransfoXLLMHeadModel"),wht.forEach(t),hdr=r(Txe," (Transformer-XL model)"),Txe.forEach(t),pdr=i(Ce),$T=n(Ce,"LI",{});var Mxe=s($T);e1e=n(Mxe,"STRONG",{});var Aht=s(e1e);udr=r(Aht,"xlm"),Aht.forEach(t),_dr=r(Mxe," \u2014 "),xz=n(Mxe,"A",{href:!0});var yht=s(xz);bdr=r(yht,"TFXLMWithLMHeadModel"),yht.forEach(t),vdr=r(Mxe," (XLM model)"),Mxe.forEach(t),Fdr=i(Ce),kT=n(Ce,"LI",{});var Exe=s(kT);o1e=n(Exe,"STRONG",{});var Lht=s(o1e);Tdr=r(Lht,"xlnet"),Lht.forEach(t),Mdr=r(Exe," \u2014 "),$z=n(Exe,"A",{href:!0});var xht=s($z);Edr=r(xht,"TFXLNetLMHeadModel"),xht.forEach(t),Cdr=r(Exe," (XLNet model)"),Exe.forEach(t),Ce.forEach(t),wdr=i(dl),T(ST.$$.fragment,dl),dl.forEach(t),il.forEach(t),NBe=i(f),Dd=n(f,"H2",{class:!0});var GIe=s(Dd);RT=n(GIe,"A",{id:!0,class:!0,href:!0});var $ht=s(RT);r1e=n($ht,"SPAN",{});var kht=s(r1e);T(iy.$$.fragment,kht),kht.forEach(t),$ht.forEach(t),Adr=i(GIe),t1e=n(GIe,"SPAN",{});var Sht=s(t1e);ydr=r(Sht,"TFAutoModelForImageClassification"),Sht.forEach(t),GIe.forEach(t),jBe=i(f),Ko=n(f,"DIV",{class:!0});var cl=s(Ko);T(dy.$$.fragment,cl),Ldr=i(cl),Gd=n(cl,"P",{});var QY=s(Gd);xdr=r(QY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),kz=n(QY,"A",{href:!0});var Rht=s(kz);$dr=r(Rht,"from_pretrained()"),Rht.forEach(t),kdr=r(QY," class method or the "),Sz=n(QY,"A",{href:!0});var Bht=s(Sz);Sdr=r(Bht,"from_config()"),Bht.forEach(t),Rdr=r(QY,` class
method.`),QY.forEach(t),Bdr=i(cl),cy=n(cl,"P",{});var OIe=s(cy);Pdr=r(OIe,"This class cannot be instantiated directly using "),a1e=n(OIe,"CODE",{});var Pht=s(a1e);Idr=r(Pht,"__init__()"),Pht.forEach(t),qdr=r(OIe," (throws an error)."),OIe.forEach(t),Ndr=i(cl),wt=n(cl,"DIV",{class:!0});var v3=s(wt);T(fy.$$.fragment,v3),jdr=i(v3),n1e=n(v3,"P",{});var Iht=s(n1e);Ddr=r(Iht,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Iht.forEach(t),Gdr=i(v3),Od=n(v3,"P",{});var WY=s(Od);Odr=r(WY,`Note:
Loading a model from its configuration file does `),s1e=n(WY,"STRONG",{});var qht=s(s1e);Vdr=r(qht,"not"),qht.forEach(t),Xdr=r(WY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Rz=n(WY,"A",{href:!0});var Nht=s(Rz);zdr=r(Nht,"from_pretrained()"),Nht.forEach(t),Qdr=r(WY," to load the model weights."),WY.forEach(t),Wdr=i(v3),T(BT.$$.fragment,v3),v3.forEach(t),Hdr=i(cl),wr=n(cl,"DIV",{class:!0});var fl=s(wr);T(my.$$.fragment,fl),Udr=i(fl),l1e=n(fl,"P",{});var jht=s(l1e);Jdr=r(jht,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),jht.forEach(t),Ydr=i(fl),Ya=n(fl,"P",{});var F3=s(Ya);Kdr=r(F3,"The model class to instantiate is selected based on the "),i1e=n(F3,"CODE",{});var Dht=s(i1e);Zdr=r(Dht,"model_type"),Dht.forEach(t),ecr=r(F3,` property of the config object (either
passed as an argument or loaded from `),d1e=n(F3,"CODE",{});var Ght=s(d1e);ocr=r(Ght,"pretrained_model_name_or_path"),Ght.forEach(t),rcr=r(F3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c1e=n(F3,"CODE",{});var Oht=s(c1e);tcr=r(Oht,"pretrained_model_name_or_path"),Oht.forEach(t),acr=r(F3,":"),F3.forEach(t),ncr=i(fl),gy=n(fl,"UL",{});var VIe=s(gy);PT=n(VIe,"LI",{});var Cxe=s(PT);f1e=n(Cxe,"STRONG",{});var Vht=s(f1e);scr=r(Vht,"convnext"),Vht.forEach(t),lcr=r(Cxe," \u2014 "),Bz=n(Cxe,"A",{href:!0});var Xht=s(Bz);icr=r(Xht,"TFConvNextForImageClassification"),Xht.forEach(t),dcr=r(Cxe," (ConvNext model)"),Cxe.forEach(t),ccr=i(VIe),IT=n(VIe,"LI",{});var wxe=s(IT);m1e=n(wxe,"STRONG",{});var zht=s(m1e);fcr=r(zht,"vit"),zht.forEach(t),mcr=r(wxe," \u2014 "),Pz=n(wxe,"A",{href:!0});var Qht=s(Pz);gcr=r(Qht,"TFViTForImageClassification"),Qht.forEach(t),hcr=r(wxe," (ViT model)"),wxe.forEach(t),VIe.forEach(t),pcr=i(fl),T(qT.$$.fragment,fl),fl.forEach(t),cl.forEach(t),DBe=i(f),Vd=n(f,"H2",{class:!0});var XIe=s(Vd);NT=n(XIe,"A",{id:!0,class:!0,href:!0});var Wht=s(NT);g1e=n(Wht,"SPAN",{});var Hht=s(g1e);T(hy.$$.fragment,Hht),Hht.forEach(t),Wht.forEach(t),ucr=i(XIe),h1e=n(XIe,"SPAN",{});var Uht=s(h1e);_cr=r(Uht,"TFAutoModelForMaskedLM"),Uht.forEach(t),XIe.forEach(t),GBe=i(f),Zo=n(f,"DIV",{class:!0});var ml=s(Zo);T(py.$$.fragment,ml),bcr=i(ml),Xd=n(ml,"P",{});var HY=s(Xd);vcr=r(HY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),Iz=n(HY,"A",{href:!0});var Jht=s(Iz);Fcr=r(Jht,"from_pretrained()"),Jht.forEach(t),Tcr=r(HY," class method or the "),qz=n(HY,"A",{href:!0});var Yht=s(qz);Mcr=r(Yht,"from_config()"),Yht.forEach(t),Ecr=r(HY,` class
method.`),HY.forEach(t),Ccr=i(ml),uy=n(ml,"P",{});var zIe=s(uy);wcr=r(zIe,"This class cannot be instantiated directly using "),p1e=n(zIe,"CODE",{});var Kht=s(p1e);Acr=r(Kht,"__init__()"),Kht.forEach(t),ycr=r(zIe," (throws an error)."),zIe.forEach(t),Lcr=i(ml),At=n(ml,"DIV",{class:!0});var T3=s(At);T(_y.$$.fragment,T3),xcr=i(T3),u1e=n(T3,"P",{});var Zht=s(u1e);$cr=r(Zht,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Zht.forEach(t),kcr=i(T3),zd=n(T3,"P",{});var UY=s(zd);Scr=r(UY,`Note:
Loading a model from its configuration file does `),_1e=n(UY,"STRONG",{});var ept=s(_1e);Rcr=r(ept,"not"),ept.forEach(t),Bcr=r(UY,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nz=n(UY,"A",{href:!0});var opt=s(Nz);Pcr=r(opt,"from_pretrained()"),opt.forEach(t),Icr=r(UY," to load the model weights."),UY.forEach(t),qcr=i(T3),T(jT.$$.fragment,T3),T3.forEach(t),Ncr=i(ml),Ar=n(ml,"DIV",{class:!0});var gl=s(Ar);T(by.$$.fragment,gl),jcr=i(gl),b1e=n(gl,"P",{});var rpt=s(b1e);Dcr=r(rpt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),rpt.forEach(t),Gcr=i(gl),Ka=n(gl,"P",{});var M3=s(Ka);Ocr=r(M3,"The model class to instantiate is selected based on the "),v1e=n(M3,"CODE",{});var tpt=s(v1e);Vcr=r(tpt,"model_type"),tpt.forEach(t),Xcr=r(M3,` property of the config object (either
passed as an argument or loaded from `),F1e=n(M3,"CODE",{});var apt=s(F1e);zcr=r(apt,"pretrained_model_name_or_path"),apt.forEach(t),Qcr=r(M3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T1e=n(M3,"CODE",{});var npt=s(T1e);Wcr=r(npt,"pretrained_model_name_or_path"),npt.forEach(t),Hcr=r(M3,":"),M3.forEach(t),Ucr=i(gl),ie=n(gl,"UL",{});var fe=s(ie);DT=n(fe,"LI",{});var Axe=s(DT);M1e=n(Axe,"STRONG",{});var spt=s(M1e);Jcr=r(spt,"albert"),spt.forEach(t),Ycr=r(Axe," \u2014 "),jz=n(Axe,"A",{href:!0});var lpt=s(jz);Kcr=r(lpt,"TFAlbertForMaskedLM"),lpt.forEach(t),Zcr=r(Axe," (ALBERT model)"),Axe.forEach(t),efr=i(fe),GT=n(fe,"LI",{});var yxe=s(GT);E1e=n(yxe,"STRONG",{});var ipt=s(E1e);ofr=r(ipt,"bert"),ipt.forEach(t),rfr=r(yxe," \u2014 "),Dz=n(yxe,"A",{href:!0});var dpt=s(Dz);tfr=r(dpt,"TFBertForMaskedLM"),dpt.forEach(t),afr=r(yxe," (BERT model)"),yxe.forEach(t),nfr=i(fe),OT=n(fe,"LI",{});var Lxe=s(OT);C1e=n(Lxe,"STRONG",{});var cpt=s(C1e);sfr=r(cpt,"camembert"),cpt.forEach(t),lfr=r(Lxe," \u2014 "),Gz=n(Lxe,"A",{href:!0});var fpt=s(Gz);ifr=r(fpt,"TFCamembertForMaskedLM"),fpt.forEach(t),dfr=r(Lxe," (CamemBERT model)"),Lxe.forEach(t),cfr=i(fe),VT=n(fe,"LI",{});var xxe=s(VT);w1e=n(xxe,"STRONG",{});var mpt=s(w1e);ffr=r(mpt,"convbert"),mpt.forEach(t),mfr=r(xxe," \u2014 "),Oz=n(xxe,"A",{href:!0});var gpt=s(Oz);gfr=r(gpt,"TFConvBertForMaskedLM"),gpt.forEach(t),hfr=r(xxe," (ConvBERT model)"),xxe.forEach(t),pfr=i(fe),XT=n(fe,"LI",{});var $xe=s(XT);A1e=n($xe,"STRONG",{});var hpt=s(A1e);ufr=r(hpt,"deberta"),hpt.forEach(t),_fr=r($xe," \u2014 "),Vz=n($xe,"A",{href:!0});var ppt=s(Vz);bfr=r(ppt,"TFDebertaForMaskedLM"),ppt.forEach(t),vfr=r($xe," (DeBERTa model)"),$xe.forEach(t),Ffr=i(fe),zT=n(fe,"LI",{});var kxe=s(zT);y1e=n(kxe,"STRONG",{});var upt=s(y1e);Tfr=r(upt,"deberta-v2"),upt.forEach(t),Mfr=r(kxe," \u2014 "),Xz=n(kxe,"A",{href:!0});var _pt=s(Xz);Efr=r(_pt,"TFDebertaV2ForMaskedLM"),_pt.forEach(t),Cfr=r(kxe," (DeBERTa-v2 model)"),kxe.forEach(t),wfr=i(fe),QT=n(fe,"LI",{});var Sxe=s(QT);L1e=n(Sxe,"STRONG",{});var bpt=s(L1e);Afr=r(bpt,"distilbert"),bpt.forEach(t),yfr=r(Sxe," \u2014 "),zz=n(Sxe,"A",{href:!0});var vpt=s(zz);Lfr=r(vpt,"TFDistilBertForMaskedLM"),vpt.forEach(t),xfr=r(Sxe," (DistilBERT model)"),Sxe.forEach(t),$fr=i(fe),WT=n(fe,"LI",{});var Rxe=s(WT);x1e=n(Rxe,"STRONG",{});var Fpt=s(x1e);kfr=r(Fpt,"electra"),Fpt.forEach(t),Sfr=r(Rxe," \u2014 "),Qz=n(Rxe,"A",{href:!0});var Tpt=s(Qz);Rfr=r(Tpt,"TFElectraForMaskedLM"),Tpt.forEach(t),Bfr=r(Rxe," (ELECTRA model)"),Rxe.forEach(t),Pfr=i(fe),HT=n(fe,"LI",{});var Bxe=s(HT);$1e=n(Bxe,"STRONG",{});var Mpt=s($1e);Ifr=r(Mpt,"flaubert"),Mpt.forEach(t),qfr=r(Bxe," \u2014 "),Wz=n(Bxe,"A",{href:!0});var Ept=s(Wz);Nfr=r(Ept,"TFFlaubertWithLMHeadModel"),Ept.forEach(t),jfr=r(Bxe," (FlauBERT model)"),Bxe.forEach(t),Dfr=i(fe),UT=n(fe,"LI",{});var Pxe=s(UT);k1e=n(Pxe,"STRONG",{});var Cpt=s(k1e);Gfr=r(Cpt,"funnel"),Cpt.forEach(t),Ofr=r(Pxe," \u2014 "),Hz=n(Pxe,"A",{href:!0});var wpt=s(Hz);Vfr=r(wpt,"TFFunnelForMaskedLM"),wpt.forEach(t),Xfr=r(Pxe," (Funnel Transformer model)"),Pxe.forEach(t),zfr=i(fe),JT=n(fe,"LI",{});var Ixe=s(JT);S1e=n(Ixe,"STRONG",{});var Apt=s(S1e);Qfr=r(Apt,"layoutlm"),Apt.forEach(t),Wfr=r(Ixe," \u2014 "),Uz=n(Ixe,"A",{href:!0});var ypt=s(Uz);Hfr=r(ypt,"TFLayoutLMForMaskedLM"),ypt.forEach(t),Ufr=r(Ixe," (LayoutLM model)"),Ixe.forEach(t),Jfr=i(fe),YT=n(fe,"LI",{});var qxe=s(YT);R1e=n(qxe,"STRONG",{});var Lpt=s(R1e);Yfr=r(Lpt,"longformer"),Lpt.forEach(t),Kfr=r(qxe," \u2014 "),Jz=n(qxe,"A",{href:!0});var xpt=s(Jz);Zfr=r(xpt,"TFLongformerForMaskedLM"),xpt.forEach(t),emr=r(qxe," (Longformer model)"),qxe.forEach(t),omr=i(fe),KT=n(fe,"LI",{});var Nxe=s(KT);B1e=n(Nxe,"STRONG",{});var $pt=s(B1e);rmr=r($pt,"mobilebert"),$pt.forEach(t),tmr=r(Nxe," \u2014 "),Yz=n(Nxe,"A",{href:!0});var kpt=s(Yz);amr=r(kpt,"TFMobileBertForMaskedLM"),kpt.forEach(t),nmr=r(Nxe," (MobileBERT model)"),Nxe.forEach(t),smr=i(fe),ZT=n(fe,"LI",{});var jxe=s(ZT);P1e=n(jxe,"STRONG",{});var Spt=s(P1e);lmr=r(Spt,"mpnet"),Spt.forEach(t),imr=r(jxe," \u2014 "),Kz=n(jxe,"A",{href:!0});var Rpt=s(Kz);dmr=r(Rpt,"TFMPNetForMaskedLM"),Rpt.forEach(t),cmr=r(jxe," (MPNet model)"),jxe.forEach(t),fmr=i(fe),e7=n(fe,"LI",{});var Dxe=s(e7);I1e=n(Dxe,"STRONG",{});var Bpt=s(I1e);mmr=r(Bpt,"rembert"),Bpt.forEach(t),gmr=r(Dxe," \u2014 "),Zz=n(Dxe,"A",{href:!0});var Ppt=s(Zz);hmr=r(Ppt,"TFRemBertForMaskedLM"),Ppt.forEach(t),pmr=r(Dxe," (RemBERT model)"),Dxe.forEach(t),umr=i(fe),o7=n(fe,"LI",{});var Gxe=s(o7);q1e=n(Gxe,"STRONG",{});var Ipt=s(q1e);_mr=r(Ipt,"roberta"),Ipt.forEach(t),bmr=r(Gxe," \u2014 "),eQ=n(Gxe,"A",{href:!0});var qpt=s(eQ);vmr=r(qpt,"TFRobertaForMaskedLM"),qpt.forEach(t),Fmr=r(Gxe," (RoBERTa model)"),Gxe.forEach(t),Tmr=i(fe),r7=n(fe,"LI",{});var Oxe=s(r7);N1e=n(Oxe,"STRONG",{});var Npt=s(N1e);Mmr=r(Npt,"roformer"),Npt.forEach(t),Emr=r(Oxe," \u2014 "),oQ=n(Oxe,"A",{href:!0});var jpt=s(oQ);Cmr=r(jpt,"TFRoFormerForMaskedLM"),jpt.forEach(t),wmr=r(Oxe," (RoFormer model)"),Oxe.forEach(t),Amr=i(fe),t7=n(fe,"LI",{});var Vxe=s(t7);j1e=n(Vxe,"STRONG",{});var Dpt=s(j1e);ymr=r(Dpt,"tapas"),Dpt.forEach(t),Lmr=r(Vxe," \u2014 "),rQ=n(Vxe,"A",{href:!0});var Gpt=s(rQ);xmr=r(Gpt,"TFTapasForMaskedLM"),Gpt.forEach(t),$mr=r(Vxe," (TAPAS model)"),Vxe.forEach(t),kmr=i(fe),a7=n(fe,"LI",{});var Xxe=s(a7);D1e=n(Xxe,"STRONG",{});var Opt=s(D1e);Smr=r(Opt,"xlm"),Opt.forEach(t),Rmr=r(Xxe," \u2014 "),tQ=n(Xxe,"A",{href:!0});var Vpt=s(tQ);Bmr=r(Vpt,"TFXLMWithLMHeadModel"),Vpt.forEach(t),Pmr=r(Xxe," (XLM model)"),Xxe.forEach(t),Imr=i(fe),n7=n(fe,"LI",{});var zxe=s(n7);G1e=n(zxe,"STRONG",{});var Xpt=s(G1e);qmr=r(Xpt,"xlm-roberta"),Xpt.forEach(t),Nmr=r(zxe," \u2014 "),aQ=n(zxe,"A",{href:!0});var zpt=s(aQ);jmr=r(zpt,"TFXLMRobertaForMaskedLM"),zpt.forEach(t),Dmr=r(zxe," (XLM-RoBERTa model)"),zxe.forEach(t),fe.forEach(t),Gmr=i(gl),T(s7.$$.fragment,gl),gl.forEach(t),ml.forEach(t),OBe=i(f),Qd=n(f,"H2",{class:!0});var QIe=s(Qd);l7=n(QIe,"A",{id:!0,class:!0,href:!0});var Qpt=s(l7);O1e=n(Qpt,"SPAN",{});var Wpt=s(O1e);T(vy.$$.fragment,Wpt),Wpt.forEach(t),Qpt.forEach(t),Omr=i(QIe),V1e=n(QIe,"SPAN",{});var Hpt=s(V1e);Vmr=r(Hpt,"TFAutoModelForSeq2SeqLM"),Hpt.forEach(t),QIe.forEach(t),VBe=i(f),er=n(f,"DIV",{class:!0});var hl=s(er);T(Fy.$$.fragment,hl),Xmr=i(hl),Wd=n(hl,"P",{});var JY=s(Wd);zmr=r(JY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),nQ=n(JY,"A",{href:!0});var Upt=s(nQ);Qmr=r(Upt,"from_pretrained()"),Upt.forEach(t),Wmr=r(JY," class method or the "),sQ=n(JY,"A",{href:!0});var Jpt=s(sQ);Hmr=r(Jpt,"from_config()"),Jpt.forEach(t),Umr=r(JY,` class
method.`),JY.forEach(t),Jmr=i(hl),Ty=n(hl,"P",{});var WIe=s(Ty);Ymr=r(WIe,"This class cannot be instantiated directly using "),X1e=n(WIe,"CODE",{});var Ypt=s(X1e);Kmr=r(Ypt,"__init__()"),Ypt.forEach(t),Zmr=r(WIe," (throws an error)."),WIe.forEach(t),egr=i(hl),yt=n(hl,"DIV",{class:!0});var E3=s(yt);T(My.$$.fragment,E3),ogr=i(E3),z1e=n(E3,"P",{});var Kpt=s(z1e);rgr=r(Kpt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kpt.forEach(t),tgr=i(E3),Hd=n(E3,"P",{});var YY=s(Hd);agr=r(YY,`Note:
Loading a model from its configuration file does `),Q1e=n(YY,"STRONG",{});var Zpt=s(Q1e);ngr=r(Zpt,"not"),Zpt.forEach(t),sgr=r(YY,` load the model weights. It only affects the
model\u2019s configuration. Use `),lQ=n(YY,"A",{href:!0});var eut=s(lQ);lgr=r(eut,"from_pretrained()"),eut.forEach(t),igr=r(YY," to load the model weights."),YY.forEach(t),dgr=i(E3),T(i7.$$.fragment,E3),E3.forEach(t),cgr=i(hl),yr=n(hl,"DIV",{class:!0});var pl=s(yr);T(Ey.$$.fragment,pl),fgr=i(pl),W1e=n(pl,"P",{});var out=s(W1e);mgr=r(out,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),out.forEach(t),ggr=i(pl),Za=n(pl,"P",{});var C3=s(Za);hgr=r(C3,"The model class to instantiate is selected based on the "),H1e=n(C3,"CODE",{});var rut=s(H1e);pgr=r(rut,"model_type"),rut.forEach(t),ugr=r(C3,` property of the config object (either
passed as an argument or loaded from `),U1e=n(C3,"CODE",{});var tut=s(U1e);_gr=r(tut,"pretrained_model_name_or_path"),tut.forEach(t),bgr=r(C3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J1e=n(C3,"CODE",{});var aut=s(J1e);vgr=r(aut,"pretrained_model_name_or_path"),aut.forEach(t),Fgr=r(C3,":"),C3.forEach(t),Tgr=i(pl),ye=n(pl,"UL",{});var Se=s(ye);d7=n(Se,"LI",{});var Qxe=s(d7);Y1e=n(Qxe,"STRONG",{});var nut=s(Y1e);Mgr=r(nut,"bart"),nut.forEach(t),Egr=r(Qxe," \u2014 "),iQ=n(Qxe,"A",{href:!0});var sut=s(iQ);Cgr=r(sut,"TFBartForConditionalGeneration"),sut.forEach(t),wgr=r(Qxe," (BART model)"),Qxe.forEach(t),Agr=i(Se),c7=n(Se,"LI",{});var Wxe=s(c7);K1e=n(Wxe,"STRONG",{});var lut=s(K1e);ygr=r(lut,"blenderbot"),lut.forEach(t),Lgr=r(Wxe," \u2014 "),dQ=n(Wxe,"A",{href:!0});var iut=s(dQ);xgr=r(iut,"TFBlenderbotForConditionalGeneration"),iut.forEach(t),$gr=r(Wxe," (Blenderbot model)"),Wxe.forEach(t),kgr=i(Se),f7=n(Se,"LI",{});var Hxe=s(f7);Z1e=n(Hxe,"STRONG",{});var dut=s(Z1e);Sgr=r(dut,"blenderbot-small"),dut.forEach(t),Rgr=r(Hxe," \u2014 "),cQ=n(Hxe,"A",{href:!0});var cut=s(cQ);Bgr=r(cut,"TFBlenderbotSmallForConditionalGeneration"),cut.forEach(t),Pgr=r(Hxe," (BlenderbotSmall model)"),Hxe.forEach(t),Igr=i(Se),m7=n(Se,"LI",{});var Uxe=s(m7);ebe=n(Uxe,"STRONG",{});var fut=s(ebe);qgr=r(fut,"encoder-decoder"),fut.forEach(t),Ngr=r(Uxe," \u2014 "),fQ=n(Uxe,"A",{href:!0});var mut=s(fQ);jgr=r(mut,"TFEncoderDecoderModel"),mut.forEach(t),Dgr=r(Uxe," (Encoder decoder model)"),Uxe.forEach(t),Ggr=i(Se),g7=n(Se,"LI",{});var Jxe=s(g7);obe=n(Jxe,"STRONG",{});var gut=s(obe);Ogr=r(gut,"led"),gut.forEach(t),Vgr=r(Jxe," \u2014 "),mQ=n(Jxe,"A",{href:!0});var hut=s(mQ);Xgr=r(hut,"TFLEDForConditionalGeneration"),hut.forEach(t),zgr=r(Jxe," (LED model)"),Jxe.forEach(t),Qgr=i(Se),h7=n(Se,"LI",{});var Yxe=s(h7);rbe=n(Yxe,"STRONG",{});var put=s(rbe);Wgr=r(put,"marian"),put.forEach(t),Hgr=r(Yxe," \u2014 "),gQ=n(Yxe,"A",{href:!0});var uut=s(gQ);Ugr=r(uut,"TFMarianMTModel"),uut.forEach(t),Jgr=r(Yxe," (Marian model)"),Yxe.forEach(t),Ygr=i(Se),p7=n(Se,"LI",{});var Kxe=s(p7);tbe=n(Kxe,"STRONG",{});var _ut=s(tbe);Kgr=r(_ut,"mbart"),_ut.forEach(t),Zgr=r(Kxe," \u2014 "),hQ=n(Kxe,"A",{href:!0});var but=s(hQ);ehr=r(but,"TFMBartForConditionalGeneration"),but.forEach(t),ohr=r(Kxe," (mBART model)"),Kxe.forEach(t),rhr=i(Se),u7=n(Se,"LI",{});var Zxe=s(u7);abe=n(Zxe,"STRONG",{});var vut=s(abe);thr=r(vut,"mt5"),vut.forEach(t),ahr=r(Zxe," \u2014 "),pQ=n(Zxe,"A",{href:!0});var Fut=s(pQ);nhr=r(Fut,"TFMT5ForConditionalGeneration"),Fut.forEach(t),shr=r(Zxe," (mT5 model)"),Zxe.forEach(t),lhr=i(Se),_7=n(Se,"LI",{});var e$e=s(_7);nbe=n(e$e,"STRONG",{});var Tut=s(nbe);ihr=r(Tut,"pegasus"),Tut.forEach(t),dhr=r(e$e," \u2014 "),uQ=n(e$e,"A",{href:!0});var Mut=s(uQ);chr=r(Mut,"TFPegasusForConditionalGeneration"),Mut.forEach(t),fhr=r(e$e," (Pegasus model)"),e$e.forEach(t),mhr=i(Se),b7=n(Se,"LI",{});var o$e=s(b7);sbe=n(o$e,"STRONG",{});var Eut=s(sbe);ghr=r(Eut,"t5"),Eut.forEach(t),hhr=r(o$e," \u2014 "),_Q=n(o$e,"A",{href:!0});var Cut=s(_Q);phr=r(Cut,"TFT5ForConditionalGeneration"),Cut.forEach(t),uhr=r(o$e," (T5 model)"),o$e.forEach(t),Se.forEach(t),_hr=i(pl),T(v7.$$.fragment,pl),pl.forEach(t),hl.forEach(t),XBe=i(f),Ud=n(f,"H2",{class:!0});var HIe=s(Ud);F7=n(HIe,"A",{id:!0,class:!0,href:!0});var wut=s(F7);lbe=n(wut,"SPAN",{});var Aut=s(lbe);T(Cy.$$.fragment,Aut),Aut.forEach(t),wut.forEach(t),bhr=i(HIe),ibe=n(HIe,"SPAN",{});var yut=s(ibe);vhr=r(yut,"TFAutoModelForSequenceClassification"),yut.forEach(t),HIe.forEach(t),zBe=i(f),or=n(f,"DIV",{class:!0});var ul=s(or);T(wy.$$.fragment,ul),Fhr=i(ul),Jd=n(ul,"P",{});var KY=s(Jd);Thr=r(KY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),bQ=n(KY,"A",{href:!0});var Lut=s(bQ);Mhr=r(Lut,"from_pretrained()"),Lut.forEach(t),Ehr=r(KY," class method or the "),vQ=n(KY,"A",{href:!0});var xut=s(vQ);Chr=r(xut,"from_config()"),xut.forEach(t),whr=r(KY,` class
method.`),KY.forEach(t),Ahr=i(ul),Ay=n(ul,"P",{});var UIe=s(Ay);yhr=r(UIe,"This class cannot be instantiated directly using "),dbe=n(UIe,"CODE",{});var $ut=s(dbe);Lhr=r($ut,"__init__()"),$ut.forEach(t),xhr=r(UIe," (throws an error)."),UIe.forEach(t),$hr=i(ul),Lt=n(ul,"DIV",{class:!0});var w3=s(Lt);T(yy.$$.fragment,w3),khr=i(w3),cbe=n(w3,"P",{});var kut=s(cbe);Shr=r(kut,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kut.forEach(t),Rhr=i(w3),Yd=n(w3,"P",{});var ZY=s(Yd);Bhr=r(ZY,`Note:
Loading a model from its configuration file does `),fbe=n(ZY,"STRONG",{});var Sut=s(fbe);Phr=r(Sut,"not"),Sut.forEach(t),Ihr=r(ZY,` load the model weights. It only affects the
model\u2019s configuration. Use `),FQ=n(ZY,"A",{href:!0});var Rut=s(FQ);qhr=r(Rut,"from_pretrained()"),Rut.forEach(t),Nhr=r(ZY," to load the model weights."),ZY.forEach(t),jhr=i(w3),T(T7.$$.fragment,w3),w3.forEach(t),Dhr=i(ul),Lr=n(ul,"DIV",{class:!0});var _l=s(Lr);T(Ly.$$.fragment,_l),Ghr=i(_l),mbe=n(_l,"P",{});var But=s(mbe);Ohr=r(But,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),But.forEach(t),Vhr=i(_l),en=n(_l,"P",{});var A3=s(en);Xhr=r(A3,"The model class to instantiate is selected based on the "),gbe=n(A3,"CODE",{});var Put=s(gbe);zhr=r(Put,"model_type"),Put.forEach(t),Qhr=r(A3,` property of the config object (either
passed as an argument or loaded from `),hbe=n(A3,"CODE",{});var Iut=s(hbe);Whr=r(Iut,"pretrained_model_name_or_path"),Iut.forEach(t),Hhr=r(A3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(A3,"CODE",{});var qut=s(pbe);Uhr=r(qut,"pretrained_model_name_or_path"),qut.forEach(t),Jhr=r(A3,":"),A3.forEach(t),Yhr=i(_l),Z=n(_l,"UL",{});var re=s(Z);M7=n(re,"LI",{});var r$e=s(M7);ube=n(r$e,"STRONG",{});var Nut=s(ube);Khr=r(Nut,"albert"),Nut.forEach(t),Zhr=r(r$e," \u2014 "),TQ=n(r$e,"A",{href:!0});var jut=s(TQ);epr=r(jut,"TFAlbertForSequenceClassification"),jut.forEach(t),opr=r(r$e," (ALBERT model)"),r$e.forEach(t),rpr=i(re),E7=n(re,"LI",{});var t$e=s(E7);_be=n(t$e,"STRONG",{});var Dut=s(_be);tpr=r(Dut,"bert"),Dut.forEach(t),apr=r(t$e," \u2014 "),MQ=n(t$e,"A",{href:!0});var Gut=s(MQ);npr=r(Gut,"TFBertForSequenceClassification"),Gut.forEach(t),spr=r(t$e," (BERT model)"),t$e.forEach(t),lpr=i(re),C7=n(re,"LI",{});var a$e=s(C7);bbe=n(a$e,"STRONG",{});var Out=s(bbe);ipr=r(Out,"camembert"),Out.forEach(t),dpr=r(a$e," \u2014 "),EQ=n(a$e,"A",{href:!0});var Vut=s(EQ);cpr=r(Vut,"TFCamembertForSequenceClassification"),Vut.forEach(t),fpr=r(a$e," (CamemBERT model)"),a$e.forEach(t),mpr=i(re),w7=n(re,"LI",{});var n$e=s(w7);vbe=n(n$e,"STRONG",{});var Xut=s(vbe);gpr=r(Xut,"convbert"),Xut.forEach(t),hpr=r(n$e," \u2014 "),CQ=n(n$e,"A",{href:!0});var zut=s(CQ);ppr=r(zut,"TFConvBertForSequenceClassification"),zut.forEach(t),upr=r(n$e," (ConvBERT model)"),n$e.forEach(t),_pr=i(re),A7=n(re,"LI",{});var s$e=s(A7);Fbe=n(s$e,"STRONG",{});var Qut=s(Fbe);bpr=r(Qut,"ctrl"),Qut.forEach(t),vpr=r(s$e," \u2014 "),wQ=n(s$e,"A",{href:!0});var Wut=s(wQ);Fpr=r(Wut,"TFCTRLForSequenceClassification"),Wut.forEach(t),Tpr=r(s$e," (CTRL model)"),s$e.forEach(t),Mpr=i(re),y7=n(re,"LI",{});var l$e=s(y7);Tbe=n(l$e,"STRONG",{});var Hut=s(Tbe);Epr=r(Hut,"deberta"),Hut.forEach(t),Cpr=r(l$e," \u2014 "),AQ=n(l$e,"A",{href:!0});var Uut=s(AQ);wpr=r(Uut,"TFDebertaForSequenceClassification"),Uut.forEach(t),Apr=r(l$e," (DeBERTa model)"),l$e.forEach(t),ypr=i(re),L7=n(re,"LI",{});var i$e=s(L7);Mbe=n(i$e,"STRONG",{});var Jut=s(Mbe);Lpr=r(Jut,"deberta-v2"),Jut.forEach(t),xpr=r(i$e," \u2014 "),yQ=n(i$e,"A",{href:!0});var Yut=s(yQ);$pr=r(Yut,"TFDebertaV2ForSequenceClassification"),Yut.forEach(t),kpr=r(i$e," (DeBERTa-v2 model)"),i$e.forEach(t),Spr=i(re),x7=n(re,"LI",{});var d$e=s(x7);Ebe=n(d$e,"STRONG",{});var Kut=s(Ebe);Rpr=r(Kut,"distilbert"),Kut.forEach(t),Bpr=r(d$e," \u2014 "),LQ=n(d$e,"A",{href:!0});var Zut=s(LQ);Ppr=r(Zut,"TFDistilBertForSequenceClassification"),Zut.forEach(t),Ipr=r(d$e," (DistilBERT model)"),d$e.forEach(t),qpr=i(re),$7=n(re,"LI",{});var c$e=s($7);Cbe=n(c$e,"STRONG",{});var e_t=s(Cbe);Npr=r(e_t,"electra"),e_t.forEach(t),jpr=r(c$e," \u2014 "),xQ=n(c$e,"A",{href:!0});var o_t=s(xQ);Dpr=r(o_t,"TFElectraForSequenceClassification"),o_t.forEach(t),Gpr=r(c$e," (ELECTRA model)"),c$e.forEach(t),Opr=i(re),k7=n(re,"LI",{});var f$e=s(k7);wbe=n(f$e,"STRONG",{});var r_t=s(wbe);Vpr=r(r_t,"flaubert"),r_t.forEach(t),Xpr=r(f$e," \u2014 "),$Q=n(f$e,"A",{href:!0});var t_t=s($Q);zpr=r(t_t,"TFFlaubertForSequenceClassification"),t_t.forEach(t),Qpr=r(f$e," (FlauBERT model)"),f$e.forEach(t),Wpr=i(re),S7=n(re,"LI",{});var m$e=s(S7);Abe=n(m$e,"STRONG",{});var a_t=s(Abe);Hpr=r(a_t,"funnel"),a_t.forEach(t),Upr=r(m$e," \u2014 "),kQ=n(m$e,"A",{href:!0});var n_t=s(kQ);Jpr=r(n_t,"TFFunnelForSequenceClassification"),n_t.forEach(t),Ypr=r(m$e," (Funnel Transformer model)"),m$e.forEach(t),Kpr=i(re),R7=n(re,"LI",{});var g$e=s(R7);ybe=n(g$e,"STRONG",{});var s_t=s(ybe);Zpr=r(s_t,"gpt2"),s_t.forEach(t),eur=r(g$e," \u2014 "),SQ=n(g$e,"A",{href:!0});var l_t=s(SQ);our=r(l_t,"TFGPT2ForSequenceClassification"),l_t.forEach(t),rur=r(g$e," (OpenAI GPT-2 model)"),g$e.forEach(t),tur=i(re),B7=n(re,"LI",{});var h$e=s(B7);Lbe=n(h$e,"STRONG",{});var i_t=s(Lbe);aur=r(i_t,"gptj"),i_t.forEach(t),nur=r(h$e," \u2014 "),RQ=n(h$e,"A",{href:!0});var d_t=s(RQ);sur=r(d_t,"TFGPTJForSequenceClassification"),d_t.forEach(t),lur=r(h$e," (GPT-J model)"),h$e.forEach(t),iur=i(re),P7=n(re,"LI",{});var p$e=s(P7);xbe=n(p$e,"STRONG",{});var c_t=s(xbe);dur=r(c_t,"layoutlm"),c_t.forEach(t),cur=r(p$e," \u2014 "),BQ=n(p$e,"A",{href:!0});var f_t=s(BQ);fur=r(f_t,"TFLayoutLMForSequenceClassification"),f_t.forEach(t),mur=r(p$e," (LayoutLM model)"),p$e.forEach(t),gur=i(re),I7=n(re,"LI",{});var u$e=s(I7);$be=n(u$e,"STRONG",{});var m_t=s($be);hur=r(m_t,"longformer"),m_t.forEach(t),pur=r(u$e," \u2014 "),PQ=n(u$e,"A",{href:!0});var g_t=s(PQ);uur=r(g_t,"TFLongformerForSequenceClassification"),g_t.forEach(t),_ur=r(u$e," (Longformer model)"),u$e.forEach(t),bur=i(re),q7=n(re,"LI",{});var _$e=s(q7);kbe=n(_$e,"STRONG",{});var h_t=s(kbe);vur=r(h_t,"mobilebert"),h_t.forEach(t),Fur=r(_$e," \u2014 "),IQ=n(_$e,"A",{href:!0});var p_t=s(IQ);Tur=r(p_t,"TFMobileBertForSequenceClassification"),p_t.forEach(t),Mur=r(_$e," (MobileBERT model)"),_$e.forEach(t),Eur=i(re),N7=n(re,"LI",{});var b$e=s(N7);Sbe=n(b$e,"STRONG",{});var u_t=s(Sbe);Cur=r(u_t,"mpnet"),u_t.forEach(t),wur=r(b$e," \u2014 "),qQ=n(b$e,"A",{href:!0});var __t=s(qQ);Aur=r(__t,"TFMPNetForSequenceClassification"),__t.forEach(t),yur=r(b$e," (MPNet model)"),b$e.forEach(t),Lur=i(re),j7=n(re,"LI",{});var v$e=s(j7);Rbe=n(v$e,"STRONG",{});var b_t=s(Rbe);xur=r(b_t,"openai-gpt"),b_t.forEach(t),$ur=r(v$e," \u2014 "),NQ=n(v$e,"A",{href:!0});var v_t=s(NQ);kur=r(v_t,"TFOpenAIGPTForSequenceClassification"),v_t.forEach(t),Sur=r(v$e," (OpenAI GPT model)"),v$e.forEach(t),Rur=i(re),D7=n(re,"LI",{});var F$e=s(D7);Bbe=n(F$e,"STRONG",{});var F_t=s(Bbe);Bur=r(F_t,"rembert"),F_t.forEach(t),Pur=r(F$e," \u2014 "),jQ=n(F$e,"A",{href:!0});var T_t=s(jQ);Iur=r(T_t,"TFRemBertForSequenceClassification"),T_t.forEach(t),qur=r(F$e," (RemBERT model)"),F$e.forEach(t),Nur=i(re),G7=n(re,"LI",{});var T$e=s(G7);Pbe=n(T$e,"STRONG",{});var M_t=s(Pbe);jur=r(M_t,"roberta"),M_t.forEach(t),Dur=r(T$e," \u2014 "),DQ=n(T$e,"A",{href:!0});var E_t=s(DQ);Gur=r(E_t,"TFRobertaForSequenceClassification"),E_t.forEach(t),Our=r(T$e," (RoBERTa model)"),T$e.forEach(t),Vur=i(re),O7=n(re,"LI",{});var M$e=s(O7);Ibe=n(M$e,"STRONG",{});var C_t=s(Ibe);Xur=r(C_t,"roformer"),C_t.forEach(t),zur=r(M$e," \u2014 "),GQ=n(M$e,"A",{href:!0});var w_t=s(GQ);Qur=r(w_t,"TFRoFormerForSequenceClassification"),w_t.forEach(t),Wur=r(M$e," (RoFormer model)"),M$e.forEach(t),Hur=i(re),V7=n(re,"LI",{});var E$e=s(V7);qbe=n(E$e,"STRONG",{});var A_t=s(qbe);Uur=r(A_t,"tapas"),A_t.forEach(t),Jur=r(E$e," \u2014 "),OQ=n(E$e,"A",{href:!0});var y_t=s(OQ);Yur=r(y_t,"TFTapasForSequenceClassification"),y_t.forEach(t),Kur=r(E$e," (TAPAS model)"),E$e.forEach(t),Zur=i(re),X7=n(re,"LI",{});var C$e=s(X7);Nbe=n(C$e,"STRONG",{});var L_t=s(Nbe);e_r=r(L_t,"transfo-xl"),L_t.forEach(t),o_r=r(C$e," \u2014 "),VQ=n(C$e,"A",{href:!0});var x_t=s(VQ);r_r=r(x_t,"TFTransfoXLForSequenceClassification"),x_t.forEach(t),t_r=r(C$e," (Transformer-XL model)"),C$e.forEach(t),a_r=i(re),z7=n(re,"LI",{});var w$e=s(z7);jbe=n(w$e,"STRONG",{});var $_t=s(jbe);n_r=r($_t,"xlm"),$_t.forEach(t),s_r=r(w$e," \u2014 "),XQ=n(w$e,"A",{href:!0});var k_t=s(XQ);l_r=r(k_t,"TFXLMForSequenceClassification"),k_t.forEach(t),i_r=r(w$e," (XLM model)"),w$e.forEach(t),d_r=i(re),Q7=n(re,"LI",{});var A$e=s(Q7);Dbe=n(A$e,"STRONG",{});var S_t=s(Dbe);c_r=r(S_t,"xlm-roberta"),S_t.forEach(t),f_r=r(A$e," \u2014 "),zQ=n(A$e,"A",{href:!0});var R_t=s(zQ);m_r=r(R_t,"TFXLMRobertaForSequenceClassification"),R_t.forEach(t),g_r=r(A$e," (XLM-RoBERTa model)"),A$e.forEach(t),h_r=i(re),W7=n(re,"LI",{});var y$e=s(W7);Gbe=n(y$e,"STRONG",{});var B_t=s(Gbe);p_r=r(B_t,"xlnet"),B_t.forEach(t),u_r=r(y$e," \u2014 "),QQ=n(y$e,"A",{href:!0});var P_t=s(QQ);__r=r(P_t,"TFXLNetForSequenceClassification"),P_t.forEach(t),b_r=r(y$e," (XLNet model)"),y$e.forEach(t),re.forEach(t),v_r=i(_l),T(H7.$$.fragment,_l),_l.forEach(t),ul.forEach(t),QBe=i(f),Kd=n(f,"H2",{class:!0});var JIe=s(Kd);U7=n(JIe,"A",{id:!0,class:!0,href:!0});var I_t=s(U7);Obe=n(I_t,"SPAN",{});var q_t=s(Obe);T(xy.$$.fragment,q_t),q_t.forEach(t),I_t.forEach(t),F_r=i(JIe),Vbe=n(JIe,"SPAN",{});var N_t=s(Vbe);T_r=r(N_t,"TFAutoModelForMultipleChoice"),N_t.forEach(t),JIe.forEach(t),WBe=i(f),rr=n(f,"DIV",{class:!0});var bl=s(rr);T($y.$$.fragment,bl),M_r=i(bl),Zd=n(bl,"P",{});var eK=s(Zd);E_r=r(eK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),WQ=n(eK,"A",{href:!0});var j_t=s(WQ);C_r=r(j_t,"from_pretrained()"),j_t.forEach(t),w_r=r(eK," class method or the "),HQ=n(eK,"A",{href:!0});var D_t=s(HQ);A_r=r(D_t,"from_config()"),D_t.forEach(t),y_r=r(eK,` class
method.`),eK.forEach(t),L_r=i(bl),ky=n(bl,"P",{});var YIe=s(ky);x_r=r(YIe,"This class cannot be instantiated directly using "),Xbe=n(YIe,"CODE",{});var G_t=s(Xbe);$_r=r(G_t,"__init__()"),G_t.forEach(t),k_r=r(YIe," (throws an error)."),YIe.forEach(t),S_r=i(bl),xt=n(bl,"DIV",{class:!0});var y3=s(xt);T(Sy.$$.fragment,y3),R_r=i(y3),zbe=n(y3,"P",{});var O_t=s(zbe);B_r=r(O_t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),O_t.forEach(t),P_r=i(y3),ec=n(y3,"P",{});var oK=s(ec);I_r=r(oK,`Note:
Loading a model from its configuration file does `),Qbe=n(oK,"STRONG",{});var V_t=s(Qbe);q_r=r(V_t,"not"),V_t.forEach(t),N_r=r(oK,` load the model weights. It only affects the
model\u2019s configuration. Use `),UQ=n(oK,"A",{href:!0});var X_t=s(UQ);j_r=r(X_t,"from_pretrained()"),X_t.forEach(t),D_r=r(oK," to load the model weights."),oK.forEach(t),G_r=i(y3),T(J7.$$.fragment,y3),y3.forEach(t),O_r=i(bl),xr=n(bl,"DIV",{class:!0});var vl=s(xr);T(Ry.$$.fragment,vl),V_r=i(vl),Wbe=n(vl,"P",{});var z_t=s(Wbe);X_r=r(z_t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),z_t.forEach(t),z_r=i(vl),on=n(vl,"P",{});var L3=s(on);Q_r=r(L3,"The model class to instantiate is selected based on the "),Hbe=n(L3,"CODE",{});var Q_t=s(Hbe);W_r=r(Q_t,"model_type"),Q_t.forEach(t),H_r=r(L3,` property of the config object (either
passed as an argument or loaded from `),Ube=n(L3,"CODE",{});var W_t=s(Ube);U_r=r(W_t,"pretrained_model_name_or_path"),W_t.forEach(t),J_r=r(L3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jbe=n(L3,"CODE",{});var H_t=s(Jbe);Y_r=r(H_t,"pretrained_model_name_or_path"),H_t.forEach(t),K_r=r(L3,":"),L3.forEach(t),Z_r=i(vl),pe=n(vl,"UL",{});var _e=s(pe);Y7=n(_e,"LI",{});var L$e=s(Y7);Ybe=n(L$e,"STRONG",{});var U_t=s(Ybe);e1r=r(U_t,"albert"),U_t.forEach(t),o1r=r(L$e," \u2014 "),JQ=n(L$e,"A",{href:!0});var J_t=s(JQ);r1r=r(J_t,"TFAlbertForMultipleChoice"),J_t.forEach(t),t1r=r(L$e," (ALBERT model)"),L$e.forEach(t),a1r=i(_e),K7=n(_e,"LI",{});var x$e=s(K7);Kbe=n(x$e,"STRONG",{});var Y_t=s(Kbe);n1r=r(Y_t,"bert"),Y_t.forEach(t),s1r=r(x$e," \u2014 "),YQ=n(x$e,"A",{href:!0});var K_t=s(YQ);l1r=r(K_t,"TFBertForMultipleChoice"),K_t.forEach(t),i1r=r(x$e," (BERT model)"),x$e.forEach(t),d1r=i(_e),Z7=n(_e,"LI",{});var $$e=s(Z7);Zbe=n($$e,"STRONG",{});var Z_t=s(Zbe);c1r=r(Z_t,"camembert"),Z_t.forEach(t),f1r=r($$e," \u2014 "),KQ=n($$e,"A",{href:!0});var e1t=s(KQ);m1r=r(e1t,"TFCamembertForMultipleChoice"),e1t.forEach(t),g1r=r($$e," (CamemBERT model)"),$$e.forEach(t),h1r=i(_e),e9=n(_e,"LI",{});var k$e=s(e9);e4e=n(k$e,"STRONG",{});var o1t=s(e4e);p1r=r(o1t,"convbert"),o1t.forEach(t),u1r=r(k$e," \u2014 "),ZQ=n(k$e,"A",{href:!0});var r1t=s(ZQ);_1r=r(r1t,"TFConvBertForMultipleChoice"),r1t.forEach(t),b1r=r(k$e," (ConvBERT model)"),k$e.forEach(t),v1r=i(_e),o9=n(_e,"LI",{});var S$e=s(o9);o4e=n(S$e,"STRONG",{});var t1t=s(o4e);F1r=r(t1t,"distilbert"),t1t.forEach(t),T1r=r(S$e," \u2014 "),eW=n(S$e,"A",{href:!0});var a1t=s(eW);M1r=r(a1t,"TFDistilBertForMultipleChoice"),a1t.forEach(t),E1r=r(S$e," (DistilBERT model)"),S$e.forEach(t),C1r=i(_e),r9=n(_e,"LI",{});var R$e=s(r9);r4e=n(R$e,"STRONG",{});var n1t=s(r4e);w1r=r(n1t,"electra"),n1t.forEach(t),A1r=r(R$e," \u2014 "),oW=n(R$e,"A",{href:!0});var s1t=s(oW);y1r=r(s1t,"TFElectraForMultipleChoice"),s1t.forEach(t),L1r=r(R$e," (ELECTRA model)"),R$e.forEach(t),x1r=i(_e),t9=n(_e,"LI",{});var B$e=s(t9);t4e=n(B$e,"STRONG",{});var l1t=s(t4e);$1r=r(l1t,"flaubert"),l1t.forEach(t),k1r=r(B$e," \u2014 "),rW=n(B$e,"A",{href:!0});var i1t=s(rW);S1r=r(i1t,"TFFlaubertForMultipleChoice"),i1t.forEach(t),R1r=r(B$e," (FlauBERT model)"),B$e.forEach(t),B1r=i(_e),a9=n(_e,"LI",{});var P$e=s(a9);a4e=n(P$e,"STRONG",{});var d1t=s(a4e);P1r=r(d1t,"funnel"),d1t.forEach(t),I1r=r(P$e," \u2014 "),tW=n(P$e,"A",{href:!0});var c1t=s(tW);q1r=r(c1t,"TFFunnelForMultipleChoice"),c1t.forEach(t),N1r=r(P$e," (Funnel Transformer model)"),P$e.forEach(t),j1r=i(_e),n9=n(_e,"LI",{});var I$e=s(n9);n4e=n(I$e,"STRONG",{});var f1t=s(n4e);D1r=r(f1t,"longformer"),f1t.forEach(t),G1r=r(I$e," \u2014 "),aW=n(I$e,"A",{href:!0});var m1t=s(aW);O1r=r(m1t,"TFLongformerForMultipleChoice"),m1t.forEach(t),V1r=r(I$e," (Longformer model)"),I$e.forEach(t),X1r=i(_e),s9=n(_e,"LI",{});var q$e=s(s9);s4e=n(q$e,"STRONG",{});var g1t=s(s4e);z1r=r(g1t,"mobilebert"),g1t.forEach(t),Q1r=r(q$e," \u2014 "),nW=n(q$e,"A",{href:!0});var h1t=s(nW);W1r=r(h1t,"TFMobileBertForMultipleChoice"),h1t.forEach(t),H1r=r(q$e," (MobileBERT model)"),q$e.forEach(t),U1r=i(_e),l9=n(_e,"LI",{});var N$e=s(l9);l4e=n(N$e,"STRONG",{});var p1t=s(l4e);J1r=r(p1t,"mpnet"),p1t.forEach(t),Y1r=r(N$e," \u2014 "),sW=n(N$e,"A",{href:!0});var u1t=s(sW);K1r=r(u1t,"TFMPNetForMultipleChoice"),u1t.forEach(t),Z1r=r(N$e," (MPNet model)"),N$e.forEach(t),ebr=i(_e),i9=n(_e,"LI",{});var j$e=s(i9);i4e=n(j$e,"STRONG",{});var _1t=s(i4e);obr=r(_1t,"rembert"),_1t.forEach(t),rbr=r(j$e," \u2014 "),lW=n(j$e,"A",{href:!0});var b1t=s(lW);tbr=r(b1t,"TFRemBertForMultipleChoice"),b1t.forEach(t),abr=r(j$e," (RemBERT model)"),j$e.forEach(t),nbr=i(_e),d9=n(_e,"LI",{});var D$e=s(d9);d4e=n(D$e,"STRONG",{});var v1t=s(d4e);sbr=r(v1t,"roberta"),v1t.forEach(t),lbr=r(D$e," \u2014 "),iW=n(D$e,"A",{href:!0});var F1t=s(iW);ibr=r(F1t,"TFRobertaForMultipleChoice"),F1t.forEach(t),dbr=r(D$e," (RoBERTa model)"),D$e.forEach(t),cbr=i(_e),c9=n(_e,"LI",{});var G$e=s(c9);c4e=n(G$e,"STRONG",{});var T1t=s(c4e);fbr=r(T1t,"roformer"),T1t.forEach(t),mbr=r(G$e," \u2014 "),dW=n(G$e,"A",{href:!0});var M1t=s(dW);gbr=r(M1t,"TFRoFormerForMultipleChoice"),M1t.forEach(t),hbr=r(G$e," (RoFormer model)"),G$e.forEach(t),pbr=i(_e),f9=n(_e,"LI",{});var O$e=s(f9);f4e=n(O$e,"STRONG",{});var E1t=s(f4e);ubr=r(E1t,"xlm"),E1t.forEach(t),_br=r(O$e," \u2014 "),cW=n(O$e,"A",{href:!0});var C1t=s(cW);bbr=r(C1t,"TFXLMForMultipleChoice"),C1t.forEach(t),vbr=r(O$e," (XLM model)"),O$e.forEach(t),Fbr=i(_e),m9=n(_e,"LI",{});var V$e=s(m9);m4e=n(V$e,"STRONG",{});var w1t=s(m4e);Tbr=r(w1t,"xlm-roberta"),w1t.forEach(t),Mbr=r(V$e," \u2014 "),fW=n(V$e,"A",{href:!0});var A1t=s(fW);Ebr=r(A1t,"TFXLMRobertaForMultipleChoice"),A1t.forEach(t),Cbr=r(V$e," (XLM-RoBERTa model)"),V$e.forEach(t),wbr=i(_e),g9=n(_e,"LI",{});var X$e=s(g9);g4e=n(X$e,"STRONG",{});var y1t=s(g4e);Abr=r(y1t,"xlnet"),y1t.forEach(t),ybr=r(X$e," \u2014 "),mW=n(X$e,"A",{href:!0});var L1t=s(mW);Lbr=r(L1t,"TFXLNetForMultipleChoice"),L1t.forEach(t),xbr=r(X$e," (XLNet model)"),X$e.forEach(t),_e.forEach(t),$br=i(vl),T(h9.$$.fragment,vl),vl.forEach(t),bl.forEach(t),HBe=i(f),oc=n(f,"H2",{class:!0});var KIe=s(oc);p9=n(KIe,"A",{id:!0,class:!0,href:!0});var x1t=s(p9);h4e=n(x1t,"SPAN",{});var $1t=s(h4e);T(By.$$.fragment,$1t),$1t.forEach(t),x1t.forEach(t),kbr=i(KIe),p4e=n(KIe,"SPAN",{});var k1t=s(p4e);Sbr=r(k1t,"TFAutoModelForTableQuestionAnswering"),k1t.forEach(t),KIe.forEach(t),UBe=i(f),tr=n(f,"DIV",{class:!0});var Fl=s(tr);T(Py.$$.fragment,Fl),Rbr=i(Fl),rc=n(Fl,"P",{});var rK=s(rc);Bbr=r(rK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),gW=n(rK,"A",{href:!0});var S1t=s(gW);Pbr=r(S1t,"from_pretrained()"),S1t.forEach(t),Ibr=r(rK," class method or the "),hW=n(rK,"A",{href:!0});var R1t=s(hW);qbr=r(R1t,"from_config()"),R1t.forEach(t),Nbr=r(rK,` class
method.`),rK.forEach(t),jbr=i(Fl),Iy=n(Fl,"P",{});var ZIe=s(Iy);Dbr=r(ZIe,"This class cannot be instantiated directly using "),u4e=n(ZIe,"CODE",{});var B1t=s(u4e);Gbr=r(B1t,"__init__()"),B1t.forEach(t),Obr=r(ZIe," (throws an error)."),ZIe.forEach(t),Vbr=i(Fl),$t=n(Fl,"DIV",{class:!0});var x3=s($t);T(qy.$$.fragment,x3),Xbr=i(x3),_4e=n(x3,"P",{});var P1t=s(_4e);zbr=r(P1t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),P1t.forEach(t),Qbr=i(x3),tc=n(x3,"P",{});var tK=s(tc);Wbr=r(tK,`Note:
Loading a model from its configuration file does `),b4e=n(tK,"STRONG",{});var I1t=s(b4e);Hbr=r(I1t,"not"),I1t.forEach(t),Ubr=r(tK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pW=n(tK,"A",{href:!0});var q1t=s(pW);Jbr=r(q1t,"from_pretrained()"),q1t.forEach(t),Ybr=r(tK," to load the model weights."),tK.forEach(t),Kbr=i(x3),T(u9.$$.fragment,x3),x3.forEach(t),Zbr=i(Fl),$r=n(Fl,"DIV",{class:!0});var Tl=s($r);T(Ny.$$.fragment,Tl),e4r=i(Tl),v4e=n(Tl,"P",{});var N1t=s(v4e);o4r=r(N1t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),N1t.forEach(t),r4r=i(Tl),rn=n(Tl,"P",{});var $3=s(rn);t4r=r($3,"The model class to instantiate is selected based on the "),F4e=n($3,"CODE",{});var j1t=s(F4e);a4r=r(j1t,"model_type"),j1t.forEach(t),n4r=r($3,` property of the config object (either
passed as an argument or loaded from `),T4e=n($3,"CODE",{});var D1t=s(T4e);s4r=r(D1t,"pretrained_model_name_or_path"),D1t.forEach(t),l4r=r($3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M4e=n($3,"CODE",{});var G1t=s(M4e);i4r=r(G1t,"pretrained_model_name_or_path"),G1t.forEach(t),d4r=r($3,":"),$3.forEach(t),c4r=i(Tl),E4e=n(Tl,"UL",{});var O1t=s(E4e);_9=n(O1t,"LI",{});var z$e=s(_9);C4e=n(z$e,"STRONG",{});var V1t=s(C4e);f4r=r(V1t,"tapas"),V1t.forEach(t),m4r=r(z$e," \u2014 "),uW=n(z$e,"A",{href:!0});var X1t=s(uW);g4r=r(X1t,"TFTapasForQuestionAnswering"),X1t.forEach(t),h4r=r(z$e," (TAPAS model)"),z$e.forEach(t),O1t.forEach(t),p4r=i(Tl),T(b9.$$.fragment,Tl),Tl.forEach(t),Fl.forEach(t),JBe=i(f),ac=n(f,"H2",{class:!0});var eqe=s(ac);v9=n(eqe,"A",{id:!0,class:!0,href:!0});var z1t=s(v9);w4e=n(z1t,"SPAN",{});var Q1t=s(w4e);T(jy.$$.fragment,Q1t),Q1t.forEach(t),z1t.forEach(t),u4r=i(eqe),A4e=n(eqe,"SPAN",{});var W1t=s(A4e);_4r=r(W1t,"TFAutoModelForTokenClassification"),W1t.forEach(t),eqe.forEach(t),YBe=i(f),ar=n(f,"DIV",{class:!0});var Ml=s(ar);T(Dy.$$.fragment,Ml),b4r=i(Ml),nc=n(Ml,"P",{});var aK=s(nc);v4r=r(aK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),_W=n(aK,"A",{href:!0});var H1t=s(_W);F4r=r(H1t,"from_pretrained()"),H1t.forEach(t),T4r=r(aK," class method or the "),bW=n(aK,"A",{href:!0});var U1t=s(bW);M4r=r(U1t,"from_config()"),U1t.forEach(t),E4r=r(aK,` class
method.`),aK.forEach(t),C4r=i(Ml),Gy=n(Ml,"P",{});var oqe=s(Gy);w4r=r(oqe,"This class cannot be instantiated directly using "),y4e=n(oqe,"CODE",{});var J1t=s(y4e);A4r=r(J1t,"__init__()"),J1t.forEach(t),y4r=r(oqe," (throws an error)."),oqe.forEach(t),L4r=i(Ml),kt=n(Ml,"DIV",{class:!0});var k3=s(kt);T(Oy.$$.fragment,k3),x4r=i(k3),L4e=n(k3,"P",{});var Y1t=s(L4e);$4r=r(Y1t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Y1t.forEach(t),k4r=i(k3),sc=n(k3,"P",{});var nK=s(sc);S4r=r(nK,`Note:
Loading a model from its configuration file does `),x4e=n(nK,"STRONG",{});var K1t=s(x4e);R4r=r(K1t,"not"),K1t.forEach(t),B4r=r(nK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vW=n(nK,"A",{href:!0});var Z1t=s(vW);P4r=r(Z1t,"from_pretrained()"),Z1t.forEach(t),I4r=r(nK," to load the model weights."),nK.forEach(t),q4r=i(k3),T(F9.$$.fragment,k3),k3.forEach(t),N4r=i(Ml),kr=n(Ml,"DIV",{class:!0});var El=s(kr);T(Vy.$$.fragment,El),j4r=i(El),$4e=n(El,"P",{});var ebt=s($4e);D4r=r(ebt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),ebt.forEach(t),G4r=i(El),tn=n(El,"P",{});var S3=s(tn);O4r=r(S3,"The model class to instantiate is selected based on the "),k4e=n(S3,"CODE",{});var obt=s(k4e);V4r=r(obt,"model_type"),obt.forEach(t),X4r=r(S3,` property of the config object (either
passed as an argument or loaded from `),S4e=n(S3,"CODE",{});var rbt=s(S4e);z4r=r(rbt,"pretrained_model_name_or_path"),rbt.forEach(t),Q4r=r(S3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R4e=n(S3,"CODE",{});var tbt=s(R4e);W4r=r(tbt,"pretrained_model_name_or_path"),tbt.forEach(t),H4r=r(S3,":"),S3.forEach(t),U4r=i(El),de=n(El,"UL",{});var me=s(de);T9=n(me,"LI",{});var Q$e=s(T9);B4e=n(Q$e,"STRONG",{});var abt=s(B4e);J4r=r(abt,"albert"),abt.forEach(t),Y4r=r(Q$e," \u2014 "),FW=n(Q$e,"A",{href:!0});var nbt=s(FW);K4r=r(nbt,"TFAlbertForTokenClassification"),nbt.forEach(t),Z4r=r(Q$e," (ALBERT model)"),Q$e.forEach(t),e2r=i(me),M9=n(me,"LI",{});var W$e=s(M9);P4e=n(W$e,"STRONG",{});var sbt=s(P4e);o2r=r(sbt,"bert"),sbt.forEach(t),r2r=r(W$e," \u2014 "),TW=n(W$e,"A",{href:!0});var lbt=s(TW);t2r=r(lbt,"TFBertForTokenClassification"),lbt.forEach(t),a2r=r(W$e," (BERT model)"),W$e.forEach(t),n2r=i(me),E9=n(me,"LI",{});var H$e=s(E9);I4e=n(H$e,"STRONG",{});var ibt=s(I4e);s2r=r(ibt,"camembert"),ibt.forEach(t),l2r=r(H$e," \u2014 "),MW=n(H$e,"A",{href:!0});var dbt=s(MW);i2r=r(dbt,"TFCamembertForTokenClassification"),dbt.forEach(t),d2r=r(H$e," (CamemBERT model)"),H$e.forEach(t),c2r=i(me),C9=n(me,"LI",{});var U$e=s(C9);q4e=n(U$e,"STRONG",{});var cbt=s(q4e);f2r=r(cbt,"convbert"),cbt.forEach(t),m2r=r(U$e," \u2014 "),EW=n(U$e,"A",{href:!0});var fbt=s(EW);g2r=r(fbt,"TFConvBertForTokenClassification"),fbt.forEach(t),h2r=r(U$e," (ConvBERT model)"),U$e.forEach(t),p2r=i(me),w9=n(me,"LI",{});var J$e=s(w9);N4e=n(J$e,"STRONG",{});var mbt=s(N4e);u2r=r(mbt,"deberta"),mbt.forEach(t),_2r=r(J$e," \u2014 "),CW=n(J$e,"A",{href:!0});var gbt=s(CW);b2r=r(gbt,"TFDebertaForTokenClassification"),gbt.forEach(t),v2r=r(J$e," (DeBERTa model)"),J$e.forEach(t),F2r=i(me),A9=n(me,"LI",{});var Y$e=s(A9);j4e=n(Y$e,"STRONG",{});var hbt=s(j4e);T2r=r(hbt,"deberta-v2"),hbt.forEach(t),M2r=r(Y$e," \u2014 "),wW=n(Y$e,"A",{href:!0});var pbt=s(wW);E2r=r(pbt,"TFDebertaV2ForTokenClassification"),pbt.forEach(t),C2r=r(Y$e," (DeBERTa-v2 model)"),Y$e.forEach(t),w2r=i(me),y9=n(me,"LI",{});var K$e=s(y9);D4e=n(K$e,"STRONG",{});var ubt=s(D4e);A2r=r(ubt,"distilbert"),ubt.forEach(t),y2r=r(K$e," \u2014 "),AW=n(K$e,"A",{href:!0});var _bt=s(AW);L2r=r(_bt,"TFDistilBertForTokenClassification"),_bt.forEach(t),x2r=r(K$e," (DistilBERT model)"),K$e.forEach(t),$2r=i(me),L9=n(me,"LI",{});var Z$e=s(L9);G4e=n(Z$e,"STRONG",{});var bbt=s(G4e);k2r=r(bbt,"electra"),bbt.forEach(t),S2r=r(Z$e," \u2014 "),yW=n(Z$e,"A",{href:!0});var vbt=s(yW);R2r=r(vbt,"TFElectraForTokenClassification"),vbt.forEach(t),B2r=r(Z$e," (ELECTRA model)"),Z$e.forEach(t),P2r=i(me),x9=n(me,"LI",{});var eke=s(x9);O4e=n(eke,"STRONG",{});var Fbt=s(O4e);I2r=r(Fbt,"flaubert"),Fbt.forEach(t),q2r=r(eke," \u2014 "),LW=n(eke,"A",{href:!0});var Tbt=s(LW);N2r=r(Tbt,"TFFlaubertForTokenClassification"),Tbt.forEach(t),j2r=r(eke," (FlauBERT model)"),eke.forEach(t),D2r=i(me),$9=n(me,"LI",{});var oke=s($9);V4e=n(oke,"STRONG",{});var Mbt=s(V4e);G2r=r(Mbt,"funnel"),Mbt.forEach(t),O2r=r(oke," \u2014 "),xW=n(oke,"A",{href:!0});var Ebt=s(xW);V2r=r(Ebt,"TFFunnelForTokenClassification"),Ebt.forEach(t),X2r=r(oke," (Funnel Transformer model)"),oke.forEach(t),z2r=i(me),k9=n(me,"LI",{});var rke=s(k9);X4e=n(rke,"STRONG",{});var Cbt=s(X4e);Q2r=r(Cbt,"layoutlm"),Cbt.forEach(t),W2r=r(rke," \u2014 "),$W=n(rke,"A",{href:!0});var wbt=s($W);H2r=r(wbt,"TFLayoutLMForTokenClassification"),wbt.forEach(t),U2r=r(rke," (LayoutLM model)"),rke.forEach(t),J2r=i(me),S9=n(me,"LI",{});var tke=s(S9);z4e=n(tke,"STRONG",{});var Abt=s(z4e);Y2r=r(Abt,"longformer"),Abt.forEach(t),K2r=r(tke," \u2014 "),kW=n(tke,"A",{href:!0});var ybt=s(kW);Z2r=r(ybt,"TFLongformerForTokenClassification"),ybt.forEach(t),evr=r(tke," (Longformer model)"),tke.forEach(t),ovr=i(me),R9=n(me,"LI",{});var ake=s(R9);Q4e=n(ake,"STRONG",{});var Lbt=s(Q4e);rvr=r(Lbt,"mobilebert"),Lbt.forEach(t),tvr=r(ake," \u2014 "),SW=n(ake,"A",{href:!0});var xbt=s(SW);avr=r(xbt,"TFMobileBertForTokenClassification"),xbt.forEach(t),nvr=r(ake," (MobileBERT model)"),ake.forEach(t),svr=i(me),B9=n(me,"LI",{});var nke=s(B9);W4e=n(nke,"STRONG",{});var $bt=s(W4e);lvr=r($bt,"mpnet"),$bt.forEach(t),ivr=r(nke," \u2014 "),RW=n(nke,"A",{href:!0});var kbt=s(RW);dvr=r(kbt,"TFMPNetForTokenClassification"),kbt.forEach(t),cvr=r(nke," (MPNet model)"),nke.forEach(t),fvr=i(me),P9=n(me,"LI",{});var ske=s(P9);H4e=n(ske,"STRONG",{});var Sbt=s(H4e);mvr=r(Sbt,"rembert"),Sbt.forEach(t),gvr=r(ske," \u2014 "),BW=n(ske,"A",{href:!0});var Rbt=s(BW);hvr=r(Rbt,"TFRemBertForTokenClassification"),Rbt.forEach(t),pvr=r(ske," (RemBERT model)"),ske.forEach(t),uvr=i(me),I9=n(me,"LI",{});var lke=s(I9);U4e=n(lke,"STRONG",{});var Bbt=s(U4e);_vr=r(Bbt,"roberta"),Bbt.forEach(t),bvr=r(lke," \u2014 "),PW=n(lke,"A",{href:!0});var Pbt=s(PW);vvr=r(Pbt,"TFRobertaForTokenClassification"),Pbt.forEach(t),Fvr=r(lke," (RoBERTa model)"),lke.forEach(t),Tvr=i(me),q9=n(me,"LI",{});var ike=s(q9);J4e=n(ike,"STRONG",{});var Ibt=s(J4e);Mvr=r(Ibt,"roformer"),Ibt.forEach(t),Evr=r(ike," \u2014 "),IW=n(ike,"A",{href:!0});var qbt=s(IW);Cvr=r(qbt,"TFRoFormerForTokenClassification"),qbt.forEach(t),wvr=r(ike," (RoFormer model)"),ike.forEach(t),Avr=i(me),N9=n(me,"LI",{});var dke=s(N9);Y4e=n(dke,"STRONG",{});var Nbt=s(Y4e);yvr=r(Nbt,"xlm"),Nbt.forEach(t),Lvr=r(dke," \u2014 "),qW=n(dke,"A",{href:!0});var jbt=s(qW);xvr=r(jbt,"TFXLMForTokenClassification"),jbt.forEach(t),$vr=r(dke," (XLM model)"),dke.forEach(t),kvr=i(me),j9=n(me,"LI",{});var cke=s(j9);K4e=n(cke,"STRONG",{});var Dbt=s(K4e);Svr=r(Dbt,"xlm-roberta"),Dbt.forEach(t),Rvr=r(cke," \u2014 "),NW=n(cke,"A",{href:!0});var Gbt=s(NW);Bvr=r(Gbt,"TFXLMRobertaForTokenClassification"),Gbt.forEach(t),Pvr=r(cke," (XLM-RoBERTa model)"),cke.forEach(t),Ivr=i(me),D9=n(me,"LI",{});var fke=s(D9);Z4e=n(fke,"STRONG",{});var Obt=s(Z4e);qvr=r(Obt,"xlnet"),Obt.forEach(t),Nvr=r(fke," \u2014 "),jW=n(fke,"A",{href:!0});var Vbt=s(jW);jvr=r(Vbt,"TFXLNetForTokenClassification"),Vbt.forEach(t),Dvr=r(fke," (XLNet model)"),fke.forEach(t),me.forEach(t),Gvr=i(El),T(G9.$$.fragment,El),El.forEach(t),Ml.forEach(t),KBe=i(f),lc=n(f,"H2",{class:!0});var rqe=s(lc);O9=n(rqe,"A",{id:!0,class:!0,href:!0});var Xbt=s(O9);e2e=n(Xbt,"SPAN",{});var zbt=s(e2e);T(Xy.$$.fragment,zbt),zbt.forEach(t),Xbt.forEach(t),Ovr=i(rqe),o2e=n(rqe,"SPAN",{});var Qbt=s(o2e);Vvr=r(Qbt,"TFAutoModelForQuestionAnswering"),Qbt.forEach(t),rqe.forEach(t),ZBe=i(f),nr=n(f,"DIV",{class:!0});var Cl=s(nr);T(zy.$$.fragment,Cl),Xvr=i(Cl),ic=n(Cl,"P",{});var sK=s(ic);zvr=r(sK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),DW=n(sK,"A",{href:!0});var Wbt=s(DW);Qvr=r(Wbt,"from_pretrained()"),Wbt.forEach(t),Wvr=r(sK," class method or the "),GW=n(sK,"A",{href:!0});var Hbt=s(GW);Hvr=r(Hbt,"from_config()"),Hbt.forEach(t),Uvr=r(sK,` class
method.`),sK.forEach(t),Jvr=i(Cl),Qy=n(Cl,"P",{});var tqe=s(Qy);Yvr=r(tqe,"This class cannot be instantiated directly using "),r2e=n(tqe,"CODE",{});var Ubt=s(r2e);Kvr=r(Ubt,"__init__()"),Ubt.forEach(t),Zvr=r(tqe," (throws an error)."),tqe.forEach(t),eFr=i(Cl),St=n(Cl,"DIV",{class:!0});var R3=s(St);T(Wy.$$.fragment,R3),oFr=i(R3),t2e=n(R3,"P",{});var Jbt=s(t2e);rFr=r(Jbt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Jbt.forEach(t),tFr=i(R3),dc=n(R3,"P",{});var lK=s(dc);aFr=r(lK,`Note:
Loading a model from its configuration file does `),a2e=n(lK,"STRONG",{});var Ybt=s(a2e);nFr=r(Ybt,"not"),Ybt.forEach(t),sFr=r(lK,` load the model weights. It only affects the
model\u2019s configuration. Use `),OW=n(lK,"A",{href:!0});var Kbt=s(OW);lFr=r(Kbt,"from_pretrained()"),Kbt.forEach(t),iFr=r(lK," to load the model weights."),lK.forEach(t),dFr=i(R3),T(V9.$$.fragment,R3),R3.forEach(t),cFr=i(Cl),Sr=n(Cl,"DIV",{class:!0});var wl=s(Sr);T(Hy.$$.fragment,wl),fFr=i(wl),n2e=n(wl,"P",{});var Zbt=s(n2e);mFr=r(Zbt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Zbt.forEach(t),gFr=i(wl),an=n(wl,"P",{});var B3=s(an);hFr=r(B3,"The model class to instantiate is selected based on the "),s2e=n(B3,"CODE",{});var e4t=s(s2e);pFr=r(e4t,"model_type"),e4t.forEach(t),uFr=r(B3,` property of the config object (either
passed as an argument or loaded from `),l2e=n(B3,"CODE",{});var o4t=s(l2e);_Fr=r(o4t,"pretrained_model_name_or_path"),o4t.forEach(t),bFr=r(B3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i2e=n(B3,"CODE",{});var r4t=s(i2e);vFr=r(r4t,"pretrained_model_name_or_path"),r4t.forEach(t),FFr=r(B3,":"),B3.forEach(t),TFr=i(wl),ce=n(wl,"UL",{});var ge=s(ce);X9=n(ge,"LI",{});var mke=s(X9);d2e=n(mke,"STRONG",{});var t4t=s(d2e);MFr=r(t4t,"albert"),t4t.forEach(t),EFr=r(mke," \u2014 "),VW=n(mke,"A",{href:!0});var a4t=s(VW);CFr=r(a4t,"TFAlbertForQuestionAnswering"),a4t.forEach(t),wFr=r(mke," (ALBERT model)"),mke.forEach(t),AFr=i(ge),z9=n(ge,"LI",{});var gke=s(z9);c2e=n(gke,"STRONG",{});var n4t=s(c2e);yFr=r(n4t,"bert"),n4t.forEach(t),LFr=r(gke," \u2014 "),XW=n(gke,"A",{href:!0});var s4t=s(XW);xFr=r(s4t,"TFBertForQuestionAnswering"),s4t.forEach(t),$Fr=r(gke," (BERT model)"),gke.forEach(t),kFr=i(ge),Q9=n(ge,"LI",{});var hke=s(Q9);f2e=n(hke,"STRONG",{});var l4t=s(f2e);SFr=r(l4t,"camembert"),l4t.forEach(t),RFr=r(hke," \u2014 "),zW=n(hke,"A",{href:!0});var i4t=s(zW);BFr=r(i4t,"TFCamembertForQuestionAnswering"),i4t.forEach(t),PFr=r(hke," (CamemBERT model)"),hke.forEach(t),IFr=i(ge),W9=n(ge,"LI",{});var pke=s(W9);m2e=n(pke,"STRONG",{});var d4t=s(m2e);qFr=r(d4t,"convbert"),d4t.forEach(t),NFr=r(pke," \u2014 "),QW=n(pke,"A",{href:!0});var c4t=s(QW);jFr=r(c4t,"TFConvBertForQuestionAnswering"),c4t.forEach(t),DFr=r(pke," (ConvBERT model)"),pke.forEach(t),GFr=i(ge),H9=n(ge,"LI",{});var uke=s(H9);g2e=n(uke,"STRONG",{});var f4t=s(g2e);OFr=r(f4t,"deberta"),f4t.forEach(t),VFr=r(uke," \u2014 "),WW=n(uke,"A",{href:!0});var m4t=s(WW);XFr=r(m4t,"TFDebertaForQuestionAnswering"),m4t.forEach(t),zFr=r(uke," (DeBERTa model)"),uke.forEach(t),QFr=i(ge),U9=n(ge,"LI",{});var _ke=s(U9);h2e=n(_ke,"STRONG",{});var g4t=s(h2e);WFr=r(g4t,"deberta-v2"),g4t.forEach(t),HFr=r(_ke," \u2014 "),HW=n(_ke,"A",{href:!0});var h4t=s(HW);UFr=r(h4t,"TFDebertaV2ForQuestionAnswering"),h4t.forEach(t),JFr=r(_ke," (DeBERTa-v2 model)"),_ke.forEach(t),YFr=i(ge),J9=n(ge,"LI",{});var bke=s(J9);p2e=n(bke,"STRONG",{});var p4t=s(p2e);KFr=r(p4t,"distilbert"),p4t.forEach(t),ZFr=r(bke," \u2014 "),UW=n(bke,"A",{href:!0});var u4t=s(UW);e6r=r(u4t,"TFDistilBertForQuestionAnswering"),u4t.forEach(t),o6r=r(bke," (DistilBERT model)"),bke.forEach(t),r6r=i(ge),Y9=n(ge,"LI",{});var vke=s(Y9);u2e=n(vke,"STRONG",{});var _4t=s(u2e);t6r=r(_4t,"electra"),_4t.forEach(t),a6r=r(vke," \u2014 "),JW=n(vke,"A",{href:!0});var b4t=s(JW);n6r=r(b4t,"TFElectraForQuestionAnswering"),b4t.forEach(t),s6r=r(vke," (ELECTRA model)"),vke.forEach(t),l6r=i(ge),K9=n(ge,"LI",{});var Fke=s(K9);_2e=n(Fke,"STRONG",{});var v4t=s(_2e);i6r=r(v4t,"flaubert"),v4t.forEach(t),d6r=r(Fke," \u2014 "),YW=n(Fke,"A",{href:!0});var F4t=s(YW);c6r=r(F4t,"TFFlaubertForQuestionAnsweringSimple"),F4t.forEach(t),f6r=r(Fke," (FlauBERT model)"),Fke.forEach(t),m6r=i(ge),Z9=n(ge,"LI",{});var Tke=s(Z9);b2e=n(Tke,"STRONG",{});var T4t=s(b2e);g6r=r(T4t,"funnel"),T4t.forEach(t),h6r=r(Tke," \u2014 "),KW=n(Tke,"A",{href:!0});var M4t=s(KW);p6r=r(M4t,"TFFunnelForQuestionAnswering"),M4t.forEach(t),u6r=r(Tke," (Funnel Transformer model)"),Tke.forEach(t),_6r=i(ge),eM=n(ge,"LI",{});var Mke=s(eM);v2e=n(Mke,"STRONG",{});var E4t=s(v2e);b6r=r(E4t,"gptj"),E4t.forEach(t),v6r=r(Mke," \u2014 "),ZW=n(Mke,"A",{href:!0});var C4t=s(ZW);F6r=r(C4t,"TFGPTJForQuestionAnswering"),C4t.forEach(t),T6r=r(Mke," (GPT-J model)"),Mke.forEach(t),M6r=i(ge),oM=n(ge,"LI",{});var Eke=s(oM);F2e=n(Eke,"STRONG",{});var w4t=s(F2e);E6r=r(w4t,"longformer"),w4t.forEach(t),C6r=r(Eke," \u2014 "),eH=n(Eke,"A",{href:!0});var A4t=s(eH);w6r=r(A4t,"TFLongformerForQuestionAnswering"),A4t.forEach(t),A6r=r(Eke," (Longformer model)"),Eke.forEach(t),y6r=i(ge),rM=n(ge,"LI",{});var Cke=s(rM);T2e=n(Cke,"STRONG",{});var y4t=s(T2e);L6r=r(y4t,"mobilebert"),y4t.forEach(t),x6r=r(Cke," \u2014 "),oH=n(Cke,"A",{href:!0});var L4t=s(oH);$6r=r(L4t,"TFMobileBertForQuestionAnswering"),L4t.forEach(t),k6r=r(Cke," (MobileBERT model)"),Cke.forEach(t),S6r=i(ge),tM=n(ge,"LI",{});var wke=s(tM);M2e=n(wke,"STRONG",{});var x4t=s(M2e);R6r=r(x4t,"mpnet"),x4t.forEach(t),B6r=r(wke," \u2014 "),rH=n(wke,"A",{href:!0});var $4t=s(rH);P6r=r($4t,"TFMPNetForQuestionAnswering"),$4t.forEach(t),I6r=r(wke," (MPNet model)"),wke.forEach(t),q6r=i(ge),aM=n(ge,"LI",{});var Ake=s(aM);E2e=n(Ake,"STRONG",{});var k4t=s(E2e);N6r=r(k4t,"rembert"),k4t.forEach(t),j6r=r(Ake," \u2014 "),tH=n(Ake,"A",{href:!0});var S4t=s(tH);D6r=r(S4t,"TFRemBertForQuestionAnswering"),S4t.forEach(t),G6r=r(Ake," (RemBERT model)"),Ake.forEach(t),O6r=i(ge),nM=n(ge,"LI",{});var yke=s(nM);C2e=n(yke,"STRONG",{});var R4t=s(C2e);V6r=r(R4t,"roberta"),R4t.forEach(t),X6r=r(yke," \u2014 "),aH=n(yke,"A",{href:!0});var B4t=s(aH);z6r=r(B4t,"TFRobertaForQuestionAnswering"),B4t.forEach(t),Q6r=r(yke," (RoBERTa model)"),yke.forEach(t),W6r=i(ge),sM=n(ge,"LI",{});var Lke=s(sM);w2e=n(Lke,"STRONG",{});var P4t=s(w2e);H6r=r(P4t,"roformer"),P4t.forEach(t),U6r=r(Lke," \u2014 "),nH=n(Lke,"A",{href:!0});var I4t=s(nH);J6r=r(I4t,"TFRoFormerForQuestionAnswering"),I4t.forEach(t),Y6r=r(Lke," (RoFormer model)"),Lke.forEach(t),K6r=i(ge),lM=n(ge,"LI",{});var xke=s(lM);A2e=n(xke,"STRONG",{});var q4t=s(A2e);Z6r=r(q4t,"xlm"),q4t.forEach(t),eTr=r(xke," \u2014 "),sH=n(xke,"A",{href:!0});var N4t=s(sH);oTr=r(N4t,"TFXLMForQuestionAnsweringSimple"),N4t.forEach(t),rTr=r(xke," (XLM model)"),xke.forEach(t),tTr=i(ge),iM=n(ge,"LI",{});var $ke=s(iM);y2e=n($ke,"STRONG",{});var j4t=s(y2e);aTr=r(j4t,"xlm-roberta"),j4t.forEach(t),nTr=r($ke," \u2014 "),lH=n($ke,"A",{href:!0});var D4t=s(lH);sTr=r(D4t,"TFXLMRobertaForQuestionAnswering"),D4t.forEach(t),lTr=r($ke," (XLM-RoBERTa model)"),$ke.forEach(t),iTr=i(ge),dM=n(ge,"LI",{});var kke=s(dM);L2e=n(kke,"STRONG",{});var G4t=s(L2e);dTr=r(G4t,"xlnet"),G4t.forEach(t),cTr=r(kke," \u2014 "),iH=n(kke,"A",{href:!0});var O4t=s(iH);fTr=r(O4t,"TFXLNetForQuestionAnsweringSimple"),O4t.forEach(t),mTr=r(kke," (XLNet model)"),kke.forEach(t),ge.forEach(t),gTr=i(wl),T(cM.$$.fragment,wl),wl.forEach(t),Cl.forEach(t),ePe=i(f),cc=n(f,"H2",{class:!0});var aqe=s(cc);fM=n(aqe,"A",{id:!0,class:!0,href:!0});var V4t=s(fM);x2e=n(V4t,"SPAN",{});var X4t=s(x2e);T(Uy.$$.fragment,X4t),X4t.forEach(t),V4t.forEach(t),hTr=i(aqe),$2e=n(aqe,"SPAN",{});var z4t=s($2e);pTr=r(z4t,"TFAutoModelForVision2Seq"),z4t.forEach(t),aqe.forEach(t),oPe=i(f),sr=n(f,"DIV",{class:!0});var Al=s(sr);T(Jy.$$.fragment,Al),uTr=i(Al),fc=n(Al,"P",{});var iK=s(fc);_Tr=r(iK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),dH=n(iK,"A",{href:!0});var Q4t=s(dH);bTr=r(Q4t,"from_pretrained()"),Q4t.forEach(t),vTr=r(iK," class method or the "),cH=n(iK,"A",{href:!0});var W4t=s(cH);FTr=r(W4t,"from_config()"),W4t.forEach(t),TTr=r(iK,` class
method.`),iK.forEach(t),MTr=i(Al),Yy=n(Al,"P",{});var nqe=s(Yy);ETr=r(nqe,"This class cannot be instantiated directly using "),k2e=n(nqe,"CODE",{});var H4t=s(k2e);CTr=r(H4t,"__init__()"),H4t.forEach(t),wTr=r(nqe," (throws an error)."),nqe.forEach(t),ATr=i(Al),Rt=n(Al,"DIV",{class:!0});var P3=s(Rt);T(Ky.$$.fragment,P3),yTr=i(P3),S2e=n(P3,"P",{});var U4t=s(S2e);LTr=r(U4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),U4t.forEach(t),xTr=i(P3),mc=n(P3,"P",{});var dK=s(mc);$Tr=r(dK,`Note:
Loading a model from its configuration file does `),R2e=n(dK,"STRONG",{});var J4t=s(R2e);kTr=r(J4t,"not"),J4t.forEach(t),STr=r(dK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fH=n(dK,"A",{href:!0});var Y4t=s(fH);RTr=r(Y4t,"from_pretrained()"),Y4t.forEach(t),BTr=r(dK," to load the model weights."),dK.forEach(t),PTr=i(P3),T(mM.$$.fragment,P3),P3.forEach(t),ITr=i(Al),Rr=n(Al,"DIV",{class:!0});var yl=s(Rr);T(Zy.$$.fragment,yl),qTr=i(yl),B2e=n(yl,"P",{});var K4t=s(B2e);NTr=r(K4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),K4t.forEach(t),jTr=i(yl),nn=n(yl,"P",{});var I3=s(nn);DTr=r(I3,"The model class to instantiate is selected based on the "),P2e=n(I3,"CODE",{});var Z4t=s(P2e);GTr=r(Z4t,"model_type"),Z4t.forEach(t),OTr=r(I3,` property of the config object (either
passed as an argument or loaded from `),I2e=n(I3,"CODE",{});var e2t=s(I2e);VTr=r(e2t,"pretrained_model_name_or_path"),e2t.forEach(t),XTr=r(I3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),q2e=n(I3,"CODE",{});var o2t=s(q2e);zTr=r(o2t,"pretrained_model_name_or_path"),o2t.forEach(t),QTr=r(I3,":"),I3.forEach(t),WTr=i(yl),N2e=n(yl,"UL",{});var r2t=s(N2e);gM=n(r2t,"LI",{});var Ske=s(gM);j2e=n(Ske,"STRONG",{});var t2t=s(j2e);HTr=r(t2t,"vision-encoder-decoder"),t2t.forEach(t),UTr=r(Ske," \u2014 "),mH=n(Ske,"A",{href:!0});var a2t=s(mH);JTr=r(a2t,"TFVisionEncoderDecoderModel"),a2t.forEach(t),YTr=r(Ske," (Vision Encoder decoder model)"),Ske.forEach(t),r2t.forEach(t),KTr=i(yl),T(hM.$$.fragment,yl),yl.forEach(t),Al.forEach(t),rPe=i(f),gc=n(f,"H2",{class:!0});var sqe=s(gc);pM=n(sqe,"A",{id:!0,class:!0,href:!0});var n2t=s(pM);D2e=n(n2t,"SPAN",{});var s2t=s(D2e);T(eL.$$.fragment,s2t),s2t.forEach(t),n2t.forEach(t),ZTr=i(sqe),G2e=n(sqe,"SPAN",{});var l2t=s(G2e);e7r=r(l2t,"TFAutoModelForSpeechSeq2Seq"),l2t.forEach(t),sqe.forEach(t),tPe=i(f),lr=n(f,"DIV",{class:!0});var Ll=s(lr);T(oL.$$.fragment,Ll),o7r=i(Ll),hc=n(Ll,"P",{});var cK=s(hc);r7r=r(cK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),gH=n(cK,"A",{href:!0});var i2t=s(gH);t7r=r(i2t,"from_pretrained()"),i2t.forEach(t),a7r=r(cK," class method or the "),hH=n(cK,"A",{href:!0});var d2t=s(hH);n7r=r(d2t,"from_config()"),d2t.forEach(t),s7r=r(cK,` class
method.`),cK.forEach(t),l7r=i(Ll),rL=n(Ll,"P",{});var lqe=s(rL);i7r=r(lqe,"This class cannot be instantiated directly using "),O2e=n(lqe,"CODE",{});var c2t=s(O2e);d7r=r(c2t,"__init__()"),c2t.forEach(t),c7r=r(lqe," (throws an error)."),lqe.forEach(t),f7r=i(Ll),Bt=n(Ll,"DIV",{class:!0});var q3=s(Bt);T(tL.$$.fragment,q3),m7r=i(q3),V2e=n(q3,"P",{});var f2t=s(V2e);g7r=r(f2t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),f2t.forEach(t),h7r=i(q3),pc=n(q3,"P",{});var fK=s(pc);p7r=r(fK,`Note:
Loading a model from its configuration file does `),X2e=n(fK,"STRONG",{});var m2t=s(X2e);u7r=r(m2t,"not"),m2t.forEach(t),_7r=r(fK,` load the model weights. It only affects the
model\u2019s configuration. Use `),pH=n(fK,"A",{href:!0});var g2t=s(pH);b7r=r(g2t,"from_pretrained()"),g2t.forEach(t),v7r=r(fK," to load the model weights."),fK.forEach(t),F7r=i(q3),T(uM.$$.fragment,q3),q3.forEach(t),T7r=i(Ll),Br=n(Ll,"DIV",{class:!0});var xl=s(Br);T(aL.$$.fragment,xl),M7r=i(xl),z2e=n(xl,"P",{});var h2t=s(z2e);E7r=r(h2t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),h2t.forEach(t),C7r=i(xl),sn=n(xl,"P",{});var N3=s(sn);w7r=r(N3,"The model class to instantiate is selected based on the "),Q2e=n(N3,"CODE",{});var p2t=s(Q2e);A7r=r(p2t,"model_type"),p2t.forEach(t),y7r=r(N3,` property of the config object (either
passed as an argument or loaded from `),W2e=n(N3,"CODE",{});var u2t=s(W2e);L7r=r(u2t,"pretrained_model_name_or_path"),u2t.forEach(t),x7r=r(N3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H2e=n(N3,"CODE",{});var _2t=s(H2e);$7r=r(_2t,"pretrained_model_name_or_path"),_2t.forEach(t),k7r=r(N3,":"),N3.forEach(t),S7r=i(xl),U2e=n(xl,"UL",{});var b2t=s(U2e);_M=n(b2t,"LI",{});var Rke=s(_M);J2e=n(Rke,"STRONG",{});var v2t=s(J2e);R7r=r(v2t,"speech_to_text"),v2t.forEach(t),B7r=r(Rke," \u2014 "),uH=n(Rke,"A",{href:!0});var F2t=s(uH);P7r=r(F2t,"TFSpeech2TextForConditionalGeneration"),F2t.forEach(t),I7r=r(Rke," (Speech2Text model)"),Rke.forEach(t),b2t.forEach(t),q7r=i(xl),T(bM.$$.fragment,xl),xl.forEach(t),Ll.forEach(t),aPe=i(f),uc=n(f,"H2",{class:!0});var iqe=s(uc);vM=n(iqe,"A",{id:!0,class:!0,href:!0});var T2t=s(vM);Y2e=n(T2t,"SPAN",{});var M2t=s(Y2e);T(nL.$$.fragment,M2t),M2t.forEach(t),T2t.forEach(t),N7r=i(iqe),K2e=n(iqe,"SPAN",{});var E2t=s(K2e);j7r=r(E2t,"FlaxAutoModel"),E2t.forEach(t),iqe.forEach(t),nPe=i(f),ir=n(f,"DIV",{class:!0});var $l=s(ir);T(sL.$$.fragment,$l),D7r=i($l),_c=n($l,"P",{});var mK=s(_c);G7r=r(mK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),_H=n(mK,"A",{href:!0});var C2t=s(_H);O7r=r(C2t,"from_pretrained()"),C2t.forEach(t),V7r=r(mK," class method or the "),bH=n(mK,"A",{href:!0});var w2t=s(bH);X7r=r(w2t,"from_config()"),w2t.forEach(t),z7r=r(mK,` class
method.`),mK.forEach(t),Q7r=i($l),lL=n($l,"P",{});var dqe=s(lL);W7r=r(dqe,"This class cannot be instantiated directly using "),Z2e=n(dqe,"CODE",{});var A2t=s(Z2e);H7r=r(A2t,"__init__()"),A2t.forEach(t),U7r=r(dqe," (throws an error)."),dqe.forEach(t),J7r=i($l),Pt=n($l,"DIV",{class:!0});var j3=s(Pt);T(iL.$$.fragment,j3),Y7r=i(j3),eve=n(j3,"P",{});var y2t=s(eve);K7r=r(y2t,"Instantiates one of the base model classes of the library from a configuration."),y2t.forEach(t),Z7r=i(j3),bc=n(j3,"P",{});var gK=s(bc);e9r=r(gK,`Note:
Loading a model from its configuration file does `),ove=n(gK,"STRONG",{});var L2t=s(ove);o9r=r(L2t,"not"),L2t.forEach(t),r9r=r(gK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vH=n(gK,"A",{href:!0});var x2t=s(vH);t9r=r(x2t,"from_pretrained()"),x2t.forEach(t),a9r=r(gK," to load the model weights."),gK.forEach(t),n9r=i(j3),T(FM.$$.fragment,j3),j3.forEach(t),s9r=i($l),Pr=n($l,"DIV",{class:!0});var kl=s(Pr);T(dL.$$.fragment,kl),l9r=i(kl),rve=n(kl,"P",{});var $2t=s(rve);i9r=r($2t,"Instantiate one of the base model classes of the library from a pretrained model."),$2t.forEach(t),d9r=i(kl),ln=n(kl,"P",{});var D3=s(ln);c9r=r(D3,"The model class to instantiate is selected based on the "),tve=n(D3,"CODE",{});var k2t=s(tve);f9r=r(k2t,"model_type"),k2t.forEach(t),m9r=r(D3,` property of the config object (either
passed as an argument or loaded from `),ave=n(D3,"CODE",{});var S2t=s(ave);g9r=r(S2t,"pretrained_model_name_or_path"),S2t.forEach(t),h9r=r(D3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nve=n(D3,"CODE",{});var R2t=s(nve);p9r=r(R2t,"pretrained_model_name_or_path"),R2t.forEach(t),u9r=r(D3,":"),D3.forEach(t),_9r=i(kl),oe=n(kl,"UL",{});var te=s(oe);TM=n(te,"LI",{});var Bke=s(TM);sve=n(Bke,"STRONG",{});var B2t=s(sve);b9r=r(B2t,"albert"),B2t.forEach(t),v9r=r(Bke," \u2014 "),FH=n(Bke,"A",{href:!0});var P2t=s(FH);F9r=r(P2t,"FlaxAlbertModel"),P2t.forEach(t),T9r=r(Bke," (ALBERT model)"),Bke.forEach(t),M9r=i(te),MM=n(te,"LI",{});var Pke=s(MM);lve=n(Pke,"STRONG",{});var I2t=s(lve);E9r=r(I2t,"bart"),I2t.forEach(t),C9r=r(Pke," \u2014 "),TH=n(Pke,"A",{href:!0});var q2t=s(TH);w9r=r(q2t,"FlaxBartModel"),q2t.forEach(t),A9r=r(Pke," (BART model)"),Pke.forEach(t),y9r=i(te),EM=n(te,"LI",{});var Ike=s(EM);ive=n(Ike,"STRONG",{});var N2t=s(ive);L9r=r(N2t,"beit"),N2t.forEach(t),x9r=r(Ike," \u2014 "),MH=n(Ike,"A",{href:!0});var j2t=s(MH);$9r=r(j2t,"FlaxBeitModel"),j2t.forEach(t),k9r=r(Ike," (BEiT model)"),Ike.forEach(t),S9r=i(te),CM=n(te,"LI",{});var qke=s(CM);dve=n(qke,"STRONG",{});var D2t=s(dve);R9r=r(D2t,"bert"),D2t.forEach(t),B9r=r(qke," \u2014 "),EH=n(qke,"A",{href:!0});var G2t=s(EH);P9r=r(G2t,"FlaxBertModel"),G2t.forEach(t),I9r=r(qke," (BERT model)"),qke.forEach(t),q9r=i(te),wM=n(te,"LI",{});var Nke=s(wM);cve=n(Nke,"STRONG",{});var O2t=s(cve);N9r=r(O2t,"big_bird"),O2t.forEach(t),j9r=r(Nke," \u2014 "),CH=n(Nke,"A",{href:!0});var V2t=s(CH);D9r=r(V2t,"FlaxBigBirdModel"),V2t.forEach(t),G9r=r(Nke," (BigBird model)"),Nke.forEach(t),O9r=i(te),AM=n(te,"LI",{});var jke=s(AM);fve=n(jke,"STRONG",{});var X2t=s(fve);V9r=r(X2t,"blenderbot"),X2t.forEach(t),X9r=r(jke," \u2014 "),wH=n(jke,"A",{href:!0});var z2t=s(wH);z9r=r(z2t,"FlaxBlenderbotModel"),z2t.forEach(t),Q9r=r(jke," (Blenderbot model)"),jke.forEach(t),W9r=i(te),yM=n(te,"LI",{});var Dke=s(yM);mve=n(Dke,"STRONG",{});var Q2t=s(mve);H9r=r(Q2t,"blenderbot-small"),Q2t.forEach(t),U9r=r(Dke," \u2014 "),AH=n(Dke,"A",{href:!0});var W2t=s(AH);J9r=r(W2t,"FlaxBlenderbotSmallModel"),W2t.forEach(t),Y9r=r(Dke," (BlenderbotSmall model)"),Dke.forEach(t),K9r=i(te),LM=n(te,"LI",{});var Gke=s(LM);gve=n(Gke,"STRONG",{});var H2t=s(gve);Z9r=r(H2t,"clip"),H2t.forEach(t),eMr=r(Gke," \u2014 "),yH=n(Gke,"A",{href:!0});var U2t=s(yH);oMr=r(U2t,"FlaxCLIPModel"),U2t.forEach(t),rMr=r(Gke," (CLIP model)"),Gke.forEach(t),tMr=i(te),xM=n(te,"LI",{});var Oke=s(xM);hve=n(Oke,"STRONG",{});var J2t=s(hve);aMr=r(J2t,"distilbert"),J2t.forEach(t),nMr=r(Oke," \u2014 "),LH=n(Oke,"A",{href:!0});var Y2t=s(LH);sMr=r(Y2t,"FlaxDistilBertModel"),Y2t.forEach(t),lMr=r(Oke," (DistilBERT model)"),Oke.forEach(t),iMr=i(te),$M=n(te,"LI",{});var Vke=s($M);pve=n(Vke,"STRONG",{});var K2t=s(pve);dMr=r(K2t,"electra"),K2t.forEach(t),cMr=r(Vke," \u2014 "),xH=n(Vke,"A",{href:!0});var Z2t=s(xH);fMr=r(Z2t,"FlaxElectraModel"),Z2t.forEach(t),mMr=r(Vke," (ELECTRA model)"),Vke.forEach(t),gMr=i(te),kM=n(te,"LI",{});var Xke=s(kM);uve=n(Xke,"STRONG",{});var evt=s(uve);hMr=r(evt,"gpt2"),evt.forEach(t),pMr=r(Xke," \u2014 "),$H=n(Xke,"A",{href:!0});var ovt=s($H);uMr=r(ovt,"FlaxGPT2Model"),ovt.forEach(t),_Mr=r(Xke," (OpenAI GPT-2 model)"),Xke.forEach(t),bMr=i(te),SM=n(te,"LI",{});var zke=s(SM);_ve=n(zke,"STRONG",{});var rvt=s(_ve);vMr=r(rvt,"gpt_neo"),rvt.forEach(t),FMr=r(zke," \u2014 "),kH=n(zke,"A",{href:!0});var tvt=s(kH);TMr=r(tvt,"FlaxGPTNeoModel"),tvt.forEach(t),MMr=r(zke," (GPT Neo model)"),zke.forEach(t),EMr=i(te),RM=n(te,"LI",{});var Qke=s(RM);bve=n(Qke,"STRONG",{});var avt=s(bve);CMr=r(avt,"gptj"),avt.forEach(t),wMr=r(Qke," \u2014 "),SH=n(Qke,"A",{href:!0});var nvt=s(SH);AMr=r(nvt,"FlaxGPTJModel"),nvt.forEach(t),yMr=r(Qke," (GPT-J model)"),Qke.forEach(t),LMr=i(te),BM=n(te,"LI",{});var Wke=s(BM);vve=n(Wke,"STRONG",{});var svt=s(vve);xMr=r(svt,"marian"),svt.forEach(t),$Mr=r(Wke," \u2014 "),RH=n(Wke,"A",{href:!0});var lvt=s(RH);kMr=r(lvt,"FlaxMarianModel"),lvt.forEach(t),SMr=r(Wke," (Marian model)"),Wke.forEach(t),RMr=i(te),PM=n(te,"LI",{});var Hke=s(PM);Fve=n(Hke,"STRONG",{});var ivt=s(Fve);BMr=r(ivt,"mbart"),ivt.forEach(t),PMr=r(Hke," \u2014 "),BH=n(Hke,"A",{href:!0});var dvt=s(BH);IMr=r(dvt,"FlaxMBartModel"),dvt.forEach(t),qMr=r(Hke," (mBART model)"),Hke.forEach(t),NMr=i(te),IM=n(te,"LI",{});var Uke=s(IM);Tve=n(Uke,"STRONG",{});var cvt=s(Tve);jMr=r(cvt,"mt5"),cvt.forEach(t),DMr=r(Uke," \u2014 "),PH=n(Uke,"A",{href:!0});var fvt=s(PH);GMr=r(fvt,"FlaxMT5Model"),fvt.forEach(t),OMr=r(Uke," (mT5 model)"),Uke.forEach(t),VMr=i(te),qM=n(te,"LI",{});var Jke=s(qM);Mve=n(Jke,"STRONG",{});var mvt=s(Mve);XMr=r(mvt,"pegasus"),mvt.forEach(t),zMr=r(Jke," \u2014 "),IH=n(Jke,"A",{href:!0});var gvt=s(IH);QMr=r(gvt,"FlaxPegasusModel"),gvt.forEach(t),WMr=r(Jke," (Pegasus model)"),Jke.forEach(t),HMr=i(te),NM=n(te,"LI",{});var Yke=s(NM);Eve=n(Yke,"STRONG",{});var hvt=s(Eve);UMr=r(hvt,"roberta"),hvt.forEach(t),JMr=r(Yke," \u2014 "),qH=n(Yke,"A",{href:!0});var pvt=s(qH);YMr=r(pvt,"FlaxRobertaModel"),pvt.forEach(t),KMr=r(Yke," (RoBERTa model)"),Yke.forEach(t),ZMr=i(te),jM=n(te,"LI",{});var Kke=s(jM);Cve=n(Kke,"STRONG",{});var uvt=s(Cve);eEr=r(uvt,"roformer"),uvt.forEach(t),oEr=r(Kke," \u2014 "),NH=n(Kke,"A",{href:!0});var _vt=s(NH);rEr=r(_vt,"FlaxRoFormerModel"),_vt.forEach(t),tEr=r(Kke," (RoFormer model)"),Kke.forEach(t),aEr=i(te),DM=n(te,"LI",{});var Zke=s(DM);wve=n(Zke,"STRONG",{});var bvt=s(wve);nEr=r(bvt,"t5"),bvt.forEach(t),sEr=r(Zke," \u2014 "),jH=n(Zke,"A",{href:!0});var vvt=s(jH);lEr=r(vvt,"FlaxT5Model"),vvt.forEach(t),iEr=r(Zke," (T5 model)"),Zke.forEach(t),dEr=i(te),GM=n(te,"LI",{});var eSe=s(GM);Ave=n(eSe,"STRONG",{});var Fvt=s(Ave);cEr=r(Fvt,"vision-text-dual-encoder"),Fvt.forEach(t),fEr=r(eSe," \u2014 "),DH=n(eSe,"A",{href:!0});var Tvt=s(DH);mEr=r(Tvt,"FlaxVisionTextDualEncoderModel"),Tvt.forEach(t),gEr=r(eSe," (VisionTextDualEncoder model)"),eSe.forEach(t),hEr=i(te),OM=n(te,"LI",{});var oSe=s(OM);yve=n(oSe,"STRONG",{});var Mvt=s(yve);pEr=r(Mvt,"vit"),Mvt.forEach(t),uEr=r(oSe," \u2014 "),GH=n(oSe,"A",{href:!0});var Evt=s(GH);_Er=r(Evt,"FlaxViTModel"),Evt.forEach(t),bEr=r(oSe," (ViT model)"),oSe.forEach(t),vEr=i(te),VM=n(te,"LI",{});var rSe=s(VM);Lve=n(rSe,"STRONG",{});var Cvt=s(Lve);FEr=r(Cvt,"wav2vec2"),Cvt.forEach(t),TEr=r(rSe," \u2014 "),OH=n(rSe,"A",{href:!0});var wvt=s(OH);MEr=r(wvt,"FlaxWav2Vec2Model"),wvt.forEach(t),EEr=r(rSe," (Wav2Vec2 model)"),rSe.forEach(t),CEr=i(te),XM=n(te,"LI",{});var tSe=s(XM);xve=n(tSe,"STRONG",{});var Avt=s(xve);wEr=r(Avt,"xglm"),Avt.forEach(t),AEr=r(tSe," \u2014 "),VH=n(tSe,"A",{href:!0});var yvt=s(VH);yEr=r(yvt,"FlaxXGLMModel"),yvt.forEach(t),LEr=r(tSe," (XGLM model)"),tSe.forEach(t),xEr=i(te),zM=n(te,"LI",{});var aSe=s(zM);$ve=n(aSe,"STRONG",{});var Lvt=s($ve);$Er=r(Lvt,"xlm-roberta"),Lvt.forEach(t),kEr=r(aSe," \u2014 "),XH=n(aSe,"A",{href:!0});var xvt=s(XH);SEr=r(xvt,"FlaxXLMRobertaModel"),xvt.forEach(t),REr=r(aSe," (XLM-RoBERTa model)"),aSe.forEach(t),te.forEach(t),BEr=i(kl),T(QM.$$.fragment,kl),kl.forEach(t),$l.forEach(t),sPe=i(f),vc=n(f,"H2",{class:!0});var cqe=s(vc);WM=n(cqe,"A",{id:!0,class:!0,href:!0});var $vt=s(WM);kve=n($vt,"SPAN",{});var kvt=s(kve);T(cL.$$.fragment,kvt),kvt.forEach(t),$vt.forEach(t),PEr=i(cqe),Sve=n(cqe,"SPAN",{});var Svt=s(Sve);IEr=r(Svt,"FlaxAutoModelForCausalLM"),Svt.forEach(t),cqe.forEach(t),lPe=i(f),dr=n(f,"DIV",{class:!0});var Sl=s(dr);T(fL.$$.fragment,Sl),qEr=i(Sl),Fc=n(Sl,"P",{});var hK=s(Fc);NEr=r(hK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),zH=n(hK,"A",{href:!0});var Rvt=s(zH);jEr=r(Rvt,"from_pretrained()"),Rvt.forEach(t),DEr=r(hK," class method or the "),QH=n(hK,"A",{href:!0});var Bvt=s(QH);GEr=r(Bvt,"from_config()"),Bvt.forEach(t),OEr=r(hK,` class
method.`),hK.forEach(t),VEr=i(Sl),mL=n(Sl,"P",{});var fqe=s(mL);XEr=r(fqe,"This class cannot be instantiated directly using "),Rve=n(fqe,"CODE",{});var Pvt=s(Rve);zEr=r(Pvt,"__init__()"),Pvt.forEach(t),QEr=r(fqe," (throws an error)."),fqe.forEach(t),WEr=i(Sl),It=n(Sl,"DIV",{class:!0});var G3=s(It);T(gL.$$.fragment,G3),HEr=i(G3),Bve=n(G3,"P",{});var Ivt=s(Bve);UEr=r(Ivt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Ivt.forEach(t),JEr=i(G3),Tc=n(G3,"P",{});var pK=s(Tc);YEr=r(pK,`Note:
Loading a model from its configuration file does `),Pve=n(pK,"STRONG",{});var qvt=s(Pve);KEr=r(qvt,"not"),qvt.forEach(t),ZEr=r(pK,` load the model weights. It only affects the
model\u2019s configuration. Use `),WH=n(pK,"A",{href:!0});var Nvt=s(WH);e5r=r(Nvt,"from_pretrained()"),Nvt.forEach(t),o5r=r(pK," to load the model weights."),pK.forEach(t),r5r=i(G3),T(HM.$$.fragment,G3),G3.forEach(t),t5r=i(Sl),Ir=n(Sl,"DIV",{class:!0});var Rl=s(Ir);T(hL.$$.fragment,Rl),a5r=i(Rl),Ive=n(Rl,"P",{});var jvt=s(Ive);n5r=r(jvt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jvt.forEach(t),s5r=i(Rl),dn=n(Rl,"P",{});var O3=s(dn);l5r=r(O3,"The model class to instantiate is selected based on the "),qve=n(O3,"CODE",{});var Dvt=s(qve);i5r=r(Dvt,"model_type"),Dvt.forEach(t),d5r=r(O3,` property of the config object (either
passed as an argument or loaded from `),Nve=n(O3,"CODE",{});var Gvt=s(Nve);c5r=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),f5r=r(O3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(O3,"CODE",{});var Ovt=s(jve);m5r=r(Ovt,"pretrained_model_name_or_path"),Ovt.forEach(t),g5r=r(O3,":"),O3.forEach(t),h5r=i(Rl),Hr=n(Rl,"UL",{});var Bl=s(Hr);UM=n(Bl,"LI",{});var nSe=s(UM);Dve=n(nSe,"STRONG",{});var Vvt=s(Dve);p5r=r(Vvt,"bart"),Vvt.forEach(t),u5r=r(nSe," \u2014 "),HH=n(nSe,"A",{href:!0});var Xvt=s(HH);_5r=r(Xvt,"FlaxBartForCausalLM"),Xvt.forEach(t),b5r=r(nSe," (BART model)"),nSe.forEach(t),v5r=i(Bl),JM=n(Bl,"LI",{});var sSe=s(JM);Gve=n(sSe,"STRONG",{});var zvt=s(Gve);F5r=r(zvt,"gpt2"),zvt.forEach(t),T5r=r(sSe," \u2014 "),UH=n(sSe,"A",{href:!0});var Qvt=s(UH);M5r=r(Qvt,"FlaxGPT2LMHeadModel"),Qvt.forEach(t),E5r=r(sSe," (OpenAI GPT-2 model)"),sSe.forEach(t),C5r=i(Bl),YM=n(Bl,"LI",{});var lSe=s(YM);Ove=n(lSe,"STRONG",{});var Wvt=s(Ove);w5r=r(Wvt,"gpt_neo"),Wvt.forEach(t),A5r=r(lSe," \u2014 "),JH=n(lSe,"A",{href:!0});var Hvt=s(JH);y5r=r(Hvt,"FlaxGPTNeoForCausalLM"),Hvt.forEach(t),L5r=r(lSe," (GPT Neo model)"),lSe.forEach(t),x5r=i(Bl),KM=n(Bl,"LI",{});var iSe=s(KM);Vve=n(iSe,"STRONG",{});var Uvt=s(Vve);$5r=r(Uvt,"gptj"),Uvt.forEach(t),k5r=r(iSe," \u2014 "),YH=n(iSe,"A",{href:!0});var Jvt=s(YH);S5r=r(Jvt,"FlaxGPTJForCausalLM"),Jvt.forEach(t),R5r=r(iSe," (GPT-J model)"),iSe.forEach(t),B5r=i(Bl),ZM=n(Bl,"LI",{});var dSe=s(ZM);Xve=n(dSe,"STRONG",{});var Yvt=s(Xve);P5r=r(Yvt,"xglm"),Yvt.forEach(t),I5r=r(dSe," \u2014 "),KH=n(dSe,"A",{href:!0});var Kvt=s(KH);q5r=r(Kvt,"FlaxXGLMForCausalLM"),Kvt.forEach(t),N5r=r(dSe," (XGLM model)"),dSe.forEach(t),Bl.forEach(t),j5r=i(Rl),T(eE.$$.fragment,Rl),Rl.forEach(t),Sl.forEach(t),iPe=i(f),Mc=n(f,"H2",{class:!0});var mqe=s(Mc);oE=n(mqe,"A",{id:!0,class:!0,href:!0});var Zvt=s(oE);zve=n(Zvt,"SPAN",{});var eFt=s(zve);T(pL.$$.fragment,eFt),eFt.forEach(t),Zvt.forEach(t),D5r=i(mqe),Qve=n(mqe,"SPAN",{});var oFt=s(Qve);G5r=r(oFt,"FlaxAutoModelForPreTraining"),oFt.forEach(t),mqe.forEach(t),dPe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(uL.$$.fragment,Pl),O5r=i(Pl),Ec=n(Pl,"P",{});var uK=s(Ec);V5r=r(uK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ZH=n(uK,"A",{href:!0});var rFt=s(ZH);X5r=r(rFt,"from_pretrained()"),rFt.forEach(t),z5r=r(uK," class method or the "),eU=n(uK,"A",{href:!0});var tFt=s(eU);Q5r=r(tFt,"from_config()"),tFt.forEach(t),W5r=r(uK,` class
method.`),uK.forEach(t),H5r=i(Pl),_L=n(Pl,"P",{});var gqe=s(_L);U5r=r(gqe,"This class cannot be instantiated directly using "),Wve=n(gqe,"CODE",{});var aFt=s(Wve);J5r=r(aFt,"__init__()"),aFt.forEach(t),Y5r=r(gqe," (throws an error)."),gqe.forEach(t),K5r=i(Pl),qt=n(Pl,"DIV",{class:!0});var V3=s(qt);T(bL.$$.fragment,V3),Z5r=i(V3),Hve=n(V3,"P",{});var nFt=s(Hve);eCr=r(nFt,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),nFt.forEach(t),oCr=i(V3),Cc=n(V3,"P",{});var _K=s(Cc);rCr=r(_K,`Note:
Loading a model from its configuration file does `),Uve=n(_K,"STRONG",{});var sFt=s(Uve);tCr=r(sFt,"not"),sFt.forEach(t),aCr=r(_K,` load the model weights. It only affects the
model\u2019s configuration. Use `),oU=n(_K,"A",{href:!0});var lFt=s(oU);nCr=r(lFt,"from_pretrained()"),lFt.forEach(t),sCr=r(_K," to load the model weights."),_K.forEach(t),lCr=i(V3),T(rE.$$.fragment,V3),V3.forEach(t),iCr=i(Pl),qr=n(Pl,"DIV",{class:!0});var Il=s(qr);T(vL.$$.fragment,Il),dCr=i(Il),Jve=n(Il,"P",{});var iFt=s(Jve);cCr=r(iFt,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),iFt.forEach(t),fCr=i(Il),cn=n(Il,"P",{});var X3=s(cn);mCr=r(X3,"The model class to instantiate is selected based on the "),Yve=n(X3,"CODE",{});var dFt=s(Yve);gCr=r(dFt,"model_type"),dFt.forEach(t),hCr=r(X3,` property of the config object (either
passed as an argument or loaded from `),Kve=n(X3,"CODE",{});var cFt=s(Kve);pCr=r(cFt,"pretrained_model_name_or_path"),cFt.forEach(t),uCr=r(X3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Zve=n(X3,"CODE",{});var fFt=s(Zve);_Cr=r(fFt,"pretrained_model_name_or_path"),fFt.forEach(t),bCr=r(X3,":"),X3.forEach(t),vCr=i(Il),Me=n(Il,"UL",{});var we=s(Me);tE=n(we,"LI",{});var cSe=s(tE);eFe=n(cSe,"STRONG",{});var mFt=s(eFe);FCr=r(mFt,"albert"),mFt.forEach(t),TCr=r(cSe," \u2014 "),rU=n(cSe,"A",{href:!0});var gFt=s(rU);MCr=r(gFt,"FlaxAlbertForPreTraining"),gFt.forEach(t),ECr=r(cSe," (ALBERT model)"),cSe.forEach(t),CCr=i(we),aE=n(we,"LI",{});var fSe=s(aE);oFe=n(fSe,"STRONG",{});var hFt=s(oFe);wCr=r(hFt,"bart"),hFt.forEach(t),ACr=r(fSe," \u2014 "),tU=n(fSe,"A",{href:!0});var pFt=s(tU);yCr=r(pFt,"FlaxBartForConditionalGeneration"),pFt.forEach(t),LCr=r(fSe," (BART model)"),fSe.forEach(t),xCr=i(we),nE=n(we,"LI",{});var mSe=s(nE);rFe=n(mSe,"STRONG",{});var uFt=s(rFe);$Cr=r(uFt,"bert"),uFt.forEach(t),kCr=r(mSe," \u2014 "),aU=n(mSe,"A",{href:!0});var _Ft=s(aU);SCr=r(_Ft,"FlaxBertForPreTraining"),_Ft.forEach(t),RCr=r(mSe," (BERT model)"),mSe.forEach(t),BCr=i(we),sE=n(we,"LI",{});var gSe=s(sE);tFe=n(gSe,"STRONG",{});var bFt=s(tFe);PCr=r(bFt,"big_bird"),bFt.forEach(t),ICr=r(gSe," \u2014 "),nU=n(gSe,"A",{href:!0});var vFt=s(nU);qCr=r(vFt,"FlaxBigBirdForPreTraining"),vFt.forEach(t),NCr=r(gSe," (BigBird model)"),gSe.forEach(t),jCr=i(we),lE=n(we,"LI",{});var hSe=s(lE);aFe=n(hSe,"STRONG",{});var FFt=s(aFe);DCr=r(FFt,"electra"),FFt.forEach(t),GCr=r(hSe," \u2014 "),sU=n(hSe,"A",{href:!0});var TFt=s(sU);OCr=r(TFt,"FlaxElectraForPreTraining"),TFt.forEach(t),VCr=r(hSe," (ELECTRA model)"),hSe.forEach(t),XCr=i(we),iE=n(we,"LI",{});var pSe=s(iE);nFe=n(pSe,"STRONG",{});var MFt=s(nFe);zCr=r(MFt,"mbart"),MFt.forEach(t),QCr=r(pSe," \u2014 "),lU=n(pSe,"A",{href:!0});var EFt=s(lU);WCr=r(EFt,"FlaxMBartForConditionalGeneration"),EFt.forEach(t),HCr=r(pSe," (mBART model)"),pSe.forEach(t),UCr=i(we),dE=n(we,"LI",{});var uSe=s(dE);sFe=n(uSe,"STRONG",{});var CFt=s(sFe);JCr=r(CFt,"mt5"),CFt.forEach(t),YCr=r(uSe," \u2014 "),iU=n(uSe,"A",{href:!0});var wFt=s(iU);KCr=r(wFt,"FlaxMT5ForConditionalGeneration"),wFt.forEach(t),ZCr=r(uSe," (mT5 model)"),uSe.forEach(t),e3r=i(we),cE=n(we,"LI",{});var _Se=s(cE);lFe=n(_Se,"STRONG",{});var AFt=s(lFe);o3r=r(AFt,"roberta"),AFt.forEach(t),r3r=r(_Se," \u2014 "),dU=n(_Se,"A",{href:!0});var yFt=s(dU);t3r=r(yFt,"FlaxRobertaForMaskedLM"),yFt.forEach(t),a3r=r(_Se," (RoBERTa model)"),_Se.forEach(t),n3r=i(we),fE=n(we,"LI",{});var bSe=s(fE);iFe=n(bSe,"STRONG",{});var LFt=s(iFe);s3r=r(LFt,"roformer"),LFt.forEach(t),l3r=r(bSe," \u2014 "),cU=n(bSe,"A",{href:!0});var xFt=s(cU);i3r=r(xFt,"FlaxRoFormerForMaskedLM"),xFt.forEach(t),d3r=r(bSe," (RoFormer model)"),bSe.forEach(t),c3r=i(we),mE=n(we,"LI",{});var vSe=s(mE);dFe=n(vSe,"STRONG",{});var $Ft=s(dFe);f3r=r($Ft,"t5"),$Ft.forEach(t),m3r=r(vSe," \u2014 "),fU=n(vSe,"A",{href:!0});var kFt=s(fU);g3r=r(kFt,"FlaxT5ForConditionalGeneration"),kFt.forEach(t),h3r=r(vSe," (T5 model)"),vSe.forEach(t),p3r=i(we),gE=n(we,"LI",{});var FSe=s(gE);cFe=n(FSe,"STRONG",{});var SFt=s(cFe);u3r=r(SFt,"wav2vec2"),SFt.forEach(t),_3r=r(FSe," \u2014 "),mU=n(FSe,"A",{href:!0});var RFt=s(mU);b3r=r(RFt,"FlaxWav2Vec2ForPreTraining"),RFt.forEach(t),v3r=r(FSe," (Wav2Vec2 model)"),FSe.forEach(t),F3r=i(we),hE=n(we,"LI",{});var TSe=s(hE);fFe=n(TSe,"STRONG",{});var BFt=s(fFe);T3r=r(BFt,"xlm-roberta"),BFt.forEach(t),M3r=r(TSe," \u2014 "),gU=n(TSe,"A",{href:!0});var PFt=s(gU);E3r=r(PFt,"FlaxXLMRobertaForMaskedLM"),PFt.forEach(t),C3r=r(TSe," (XLM-RoBERTa model)"),TSe.forEach(t),we.forEach(t),w3r=i(Il),T(pE.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),cPe=i(f),wc=n(f,"H2",{class:!0});var hqe=s(wc);uE=n(hqe,"A",{id:!0,class:!0,href:!0});var IFt=s(uE);mFe=n(IFt,"SPAN",{});var qFt=s(mFe);T(FL.$$.fragment,qFt),qFt.forEach(t),IFt.forEach(t),A3r=i(hqe),gFe=n(hqe,"SPAN",{});var NFt=s(gFe);y3r=r(NFt,"FlaxAutoModelForMaskedLM"),NFt.forEach(t),hqe.forEach(t),fPe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(TL.$$.fragment,ql),L3r=i(ql),Ac=n(ql,"P",{});var bK=s(Ac);x3r=r(bK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),hU=n(bK,"A",{href:!0});var jFt=s(hU);$3r=r(jFt,"from_pretrained()"),jFt.forEach(t),k3r=r(bK," class method or the "),pU=n(bK,"A",{href:!0});var DFt=s(pU);S3r=r(DFt,"from_config()"),DFt.forEach(t),R3r=r(bK,` class
method.`),bK.forEach(t),B3r=i(ql),ML=n(ql,"P",{});var pqe=s(ML);P3r=r(pqe,"This class cannot be instantiated directly using "),hFe=n(pqe,"CODE",{});var GFt=s(hFe);I3r=r(GFt,"__init__()"),GFt.forEach(t),q3r=r(pqe," (throws an error)."),pqe.forEach(t),N3r=i(ql),Nt=n(ql,"DIV",{class:!0});var z3=s(Nt);T(EL.$$.fragment,z3),j3r=i(z3),pFe=n(z3,"P",{});var OFt=s(pFe);D3r=r(OFt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),OFt.forEach(t),G3r=i(z3),yc=n(z3,"P",{});var vK=s(yc);O3r=r(vK,`Note:
Loading a model from its configuration file does `),uFe=n(vK,"STRONG",{});var VFt=s(uFe);V3r=r(VFt,"not"),VFt.forEach(t),X3r=r(vK,` load the model weights. It only affects the
model\u2019s configuration. Use `),uU=n(vK,"A",{href:!0});var XFt=s(uU);z3r=r(XFt,"from_pretrained()"),XFt.forEach(t),Q3r=r(vK," to load the model weights."),vK.forEach(t),W3r=i(z3),T(_E.$$.fragment,z3),z3.forEach(t),H3r=i(ql),Nr=n(ql,"DIV",{class:!0});var Nl=s(Nr);T(CL.$$.fragment,Nl),U3r=i(Nl),_Fe=n(Nl,"P",{});var zFt=s(_Fe);J3r=r(zFt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),zFt.forEach(t),Y3r=i(Nl),fn=n(Nl,"P",{});var Q3=s(fn);K3r=r(Q3,"The model class to instantiate is selected based on the "),bFe=n(Q3,"CODE",{});var QFt=s(bFe);Z3r=r(QFt,"model_type"),QFt.forEach(t),ewr=r(Q3,` property of the config object (either
passed as an argument or loaded from `),vFe=n(Q3,"CODE",{});var WFt=s(vFe);owr=r(WFt,"pretrained_model_name_or_path"),WFt.forEach(t),rwr=r(Q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),FFe=n(Q3,"CODE",{});var HFt=s(FFe);twr=r(HFt,"pretrained_model_name_or_path"),HFt.forEach(t),awr=r(Q3,":"),Q3.forEach(t),nwr=i(Nl),Le=n(Nl,"UL",{});var Re=s(Le);bE=n(Re,"LI",{});var MSe=s(bE);TFe=n(MSe,"STRONG",{});var UFt=s(TFe);swr=r(UFt,"albert"),UFt.forEach(t),lwr=r(MSe," \u2014 "),_U=n(MSe,"A",{href:!0});var JFt=s(_U);iwr=r(JFt,"FlaxAlbertForMaskedLM"),JFt.forEach(t),dwr=r(MSe," (ALBERT model)"),MSe.forEach(t),cwr=i(Re),vE=n(Re,"LI",{});var ESe=s(vE);MFe=n(ESe,"STRONG",{});var YFt=s(MFe);fwr=r(YFt,"bart"),YFt.forEach(t),mwr=r(ESe," \u2014 "),bU=n(ESe,"A",{href:!0});var KFt=s(bU);gwr=r(KFt,"FlaxBartForConditionalGeneration"),KFt.forEach(t),hwr=r(ESe," (BART model)"),ESe.forEach(t),pwr=i(Re),FE=n(Re,"LI",{});var CSe=s(FE);EFe=n(CSe,"STRONG",{});var ZFt=s(EFe);uwr=r(ZFt,"bert"),ZFt.forEach(t),_wr=r(CSe," \u2014 "),vU=n(CSe,"A",{href:!0});var e6t=s(vU);bwr=r(e6t,"FlaxBertForMaskedLM"),e6t.forEach(t),vwr=r(CSe," (BERT model)"),CSe.forEach(t),Fwr=i(Re),TE=n(Re,"LI",{});var wSe=s(TE);CFe=n(wSe,"STRONG",{});var o6t=s(CFe);Twr=r(o6t,"big_bird"),o6t.forEach(t),Mwr=r(wSe," \u2014 "),FU=n(wSe,"A",{href:!0});var r6t=s(FU);Ewr=r(r6t,"FlaxBigBirdForMaskedLM"),r6t.forEach(t),Cwr=r(wSe," (BigBird model)"),wSe.forEach(t),wwr=i(Re),ME=n(Re,"LI",{});var ASe=s(ME);wFe=n(ASe,"STRONG",{});var t6t=s(wFe);Awr=r(t6t,"distilbert"),t6t.forEach(t),ywr=r(ASe," \u2014 "),TU=n(ASe,"A",{href:!0});var a6t=s(TU);Lwr=r(a6t,"FlaxDistilBertForMaskedLM"),a6t.forEach(t),xwr=r(ASe," (DistilBERT model)"),ASe.forEach(t),$wr=i(Re),EE=n(Re,"LI",{});var ySe=s(EE);AFe=n(ySe,"STRONG",{});var n6t=s(AFe);kwr=r(n6t,"electra"),n6t.forEach(t),Swr=r(ySe," \u2014 "),MU=n(ySe,"A",{href:!0});var s6t=s(MU);Rwr=r(s6t,"FlaxElectraForMaskedLM"),s6t.forEach(t),Bwr=r(ySe," (ELECTRA model)"),ySe.forEach(t),Pwr=i(Re),CE=n(Re,"LI",{});var LSe=s(CE);yFe=n(LSe,"STRONG",{});var l6t=s(yFe);Iwr=r(l6t,"mbart"),l6t.forEach(t),qwr=r(LSe," \u2014 "),EU=n(LSe,"A",{href:!0});var i6t=s(EU);Nwr=r(i6t,"FlaxMBartForConditionalGeneration"),i6t.forEach(t),jwr=r(LSe," (mBART model)"),LSe.forEach(t),Dwr=i(Re),wE=n(Re,"LI",{});var xSe=s(wE);LFe=n(xSe,"STRONG",{});var d6t=s(LFe);Gwr=r(d6t,"roberta"),d6t.forEach(t),Owr=r(xSe," \u2014 "),CU=n(xSe,"A",{href:!0});var c6t=s(CU);Vwr=r(c6t,"FlaxRobertaForMaskedLM"),c6t.forEach(t),Xwr=r(xSe," (RoBERTa model)"),xSe.forEach(t),zwr=i(Re),AE=n(Re,"LI",{});var $Se=s(AE);xFe=n($Se,"STRONG",{});var f6t=s(xFe);Qwr=r(f6t,"roformer"),f6t.forEach(t),Wwr=r($Se," \u2014 "),wU=n($Se,"A",{href:!0});var m6t=s(wU);Hwr=r(m6t,"FlaxRoFormerForMaskedLM"),m6t.forEach(t),Uwr=r($Se," (RoFormer model)"),$Se.forEach(t),Jwr=i(Re),yE=n(Re,"LI",{});var kSe=s(yE);$Fe=n(kSe,"STRONG",{});var g6t=s($Fe);Ywr=r(g6t,"xlm-roberta"),g6t.forEach(t),Kwr=r(kSe," \u2014 "),AU=n(kSe,"A",{href:!0});var h6t=s(AU);Zwr=r(h6t,"FlaxXLMRobertaForMaskedLM"),h6t.forEach(t),eAr=r(kSe," (XLM-RoBERTa model)"),kSe.forEach(t),Re.forEach(t),oAr=i(Nl),T(LE.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),mPe=i(f),Lc=n(f,"H2",{class:!0});var uqe=s(Lc);xE=n(uqe,"A",{id:!0,class:!0,href:!0});var p6t=s(xE);kFe=n(p6t,"SPAN",{});var u6t=s(kFe);T(wL.$$.fragment,u6t),u6t.forEach(t),p6t.forEach(t),rAr=i(uqe),SFe=n(uqe,"SPAN",{});var _6t=s(SFe);tAr=r(_6t,"FlaxAutoModelForSeq2SeqLM"),_6t.forEach(t),uqe.forEach(t),gPe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(AL.$$.fragment,jl),aAr=i(jl),xc=n(jl,"P",{});var FK=s(xc);nAr=r(FK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),yU=n(FK,"A",{href:!0});var b6t=s(yU);sAr=r(b6t,"from_pretrained()"),b6t.forEach(t),lAr=r(FK," class method or the "),LU=n(FK,"A",{href:!0});var v6t=s(LU);iAr=r(v6t,"from_config()"),v6t.forEach(t),dAr=r(FK,` class
method.`),FK.forEach(t),cAr=i(jl),yL=n(jl,"P",{});var _qe=s(yL);fAr=r(_qe,"This class cannot be instantiated directly using "),RFe=n(_qe,"CODE",{});var F6t=s(RFe);mAr=r(F6t,"__init__()"),F6t.forEach(t),gAr=r(_qe," (throws an error)."),_qe.forEach(t),hAr=i(jl),jt=n(jl,"DIV",{class:!0});var W3=s(jt);T(LL.$$.fragment,W3),pAr=i(W3),BFe=n(W3,"P",{});var T6t=s(BFe);uAr=r(T6t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),T6t.forEach(t),_Ar=i(W3),$c=n(W3,"P",{});var TK=s($c);bAr=r(TK,`Note:
Loading a model from its configuration file does `),PFe=n(TK,"STRONG",{});var M6t=s(PFe);vAr=r(M6t,"not"),M6t.forEach(t),FAr=r(TK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xU=n(TK,"A",{href:!0});var E6t=s(xU);TAr=r(E6t,"from_pretrained()"),E6t.forEach(t),MAr=r(TK," to load the model weights."),TK.forEach(t),EAr=i(W3),T($E.$$.fragment,W3),W3.forEach(t),CAr=i(jl),jr=n(jl,"DIV",{class:!0});var Dl=s(jr);T(xL.$$.fragment,Dl),wAr=i(Dl),IFe=n(Dl,"P",{});var C6t=s(IFe);AAr=r(C6t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),C6t.forEach(t),yAr=i(Dl),mn=n(Dl,"P",{});var H3=s(mn);LAr=r(H3,"The model class to instantiate is selected based on the "),qFe=n(H3,"CODE",{});var w6t=s(qFe);xAr=r(w6t,"model_type"),w6t.forEach(t),$Ar=r(H3,` property of the config object (either
passed as an argument or loaded from `),NFe=n(H3,"CODE",{});var A6t=s(NFe);kAr=r(A6t,"pretrained_model_name_or_path"),A6t.forEach(t),SAr=r(H3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jFe=n(H3,"CODE",{});var y6t=s(jFe);RAr=r(y6t,"pretrained_model_name_or_path"),y6t.forEach(t),BAr=r(H3,":"),H3.forEach(t),PAr=i(Dl),ke=n(Dl,"UL",{});var Ge=s(ke);kE=n(Ge,"LI",{});var SSe=s(kE);DFe=n(SSe,"STRONG",{});var L6t=s(DFe);IAr=r(L6t,"bart"),L6t.forEach(t),qAr=r(SSe," \u2014 "),$U=n(SSe,"A",{href:!0});var x6t=s($U);NAr=r(x6t,"FlaxBartForConditionalGeneration"),x6t.forEach(t),jAr=r(SSe," (BART model)"),SSe.forEach(t),DAr=i(Ge),SE=n(Ge,"LI",{});var RSe=s(SE);GFe=n(RSe,"STRONG",{});var $6t=s(GFe);GAr=r($6t,"blenderbot"),$6t.forEach(t),OAr=r(RSe," \u2014 "),kU=n(RSe,"A",{href:!0});var k6t=s(kU);VAr=r(k6t,"FlaxBlenderbotForConditionalGeneration"),k6t.forEach(t),XAr=r(RSe," (Blenderbot model)"),RSe.forEach(t),zAr=i(Ge),RE=n(Ge,"LI",{});var BSe=s(RE);OFe=n(BSe,"STRONG",{});var S6t=s(OFe);QAr=r(S6t,"blenderbot-small"),S6t.forEach(t),WAr=r(BSe," \u2014 "),SU=n(BSe,"A",{href:!0});var R6t=s(SU);HAr=r(R6t,"FlaxBlenderbotSmallForConditionalGeneration"),R6t.forEach(t),UAr=r(BSe," (BlenderbotSmall model)"),BSe.forEach(t),JAr=i(Ge),BE=n(Ge,"LI",{});var PSe=s(BE);VFe=n(PSe,"STRONG",{});var B6t=s(VFe);YAr=r(B6t,"encoder-decoder"),B6t.forEach(t),KAr=r(PSe," \u2014 "),RU=n(PSe,"A",{href:!0});var P6t=s(RU);ZAr=r(P6t,"FlaxEncoderDecoderModel"),P6t.forEach(t),e0r=r(PSe," (Encoder decoder model)"),PSe.forEach(t),o0r=i(Ge),PE=n(Ge,"LI",{});var ISe=s(PE);XFe=n(ISe,"STRONG",{});var I6t=s(XFe);r0r=r(I6t,"marian"),I6t.forEach(t),t0r=r(ISe," \u2014 "),BU=n(ISe,"A",{href:!0});var q6t=s(BU);a0r=r(q6t,"FlaxMarianMTModel"),q6t.forEach(t),n0r=r(ISe," (Marian model)"),ISe.forEach(t),s0r=i(Ge),IE=n(Ge,"LI",{});var qSe=s(IE);zFe=n(qSe,"STRONG",{});var N6t=s(zFe);l0r=r(N6t,"mbart"),N6t.forEach(t),i0r=r(qSe," \u2014 "),PU=n(qSe,"A",{href:!0});var j6t=s(PU);d0r=r(j6t,"FlaxMBartForConditionalGeneration"),j6t.forEach(t),c0r=r(qSe," (mBART model)"),qSe.forEach(t),f0r=i(Ge),qE=n(Ge,"LI",{});var NSe=s(qE);QFe=n(NSe,"STRONG",{});var D6t=s(QFe);m0r=r(D6t,"mt5"),D6t.forEach(t),g0r=r(NSe," \u2014 "),IU=n(NSe,"A",{href:!0});var G6t=s(IU);h0r=r(G6t,"FlaxMT5ForConditionalGeneration"),G6t.forEach(t),p0r=r(NSe," (mT5 model)"),NSe.forEach(t),u0r=i(Ge),NE=n(Ge,"LI",{});var jSe=s(NE);WFe=n(jSe,"STRONG",{});var O6t=s(WFe);_0r=r(O6t,"pegasus"),O6t.forEach(t),b0r=r(jSe," \u2014 "),qU=n(jSe,"A",{href:!0});var V6t=s(qU);v0r=r(V6t,"FlaxPegasusForConditionalGeneration"),V6t.forEach(t),F0r=r(jSe," (Pegasus model)"),jSe.forEach(t),T0r=i(Ge),jE=n(Ge,"LI",{});var DSe=s(jE);HFe=n(DSe,"STRONG",{});var X6t=s(HFe);M0r=r(X6t,"t5"),X6t.forEach(t),E0r=r(DSe," \u2014 "),NU=n(DSe,"A",{href:!0});var z6t=s(NU);C0r=r(z6t,"FlaxT5ForConditionalGeneration"),z6t.forEach(t),w0r=r(DSe," (T5 model)"),DSe.forEach(t),Ge.forEach(t),A0r=i(Dl),T(DE.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),hPe=i(f),kc=n(f,"H2",{class:!0});var bqe=s(kc);GE=n(bqe,"A",{id:!0,class:!0,href:!0});var Q6t=s(GE);UFe=n(Q6t,"SPAN",{});var W6t=s(UFe);T($L.$$.fragment,W6t),W6t.forEach(t),Q6t.forEach(t),y0r=i(bqe),JFe=n(bqe,"SPAN",{});var H6t=s(JFe);L0r=r(H6t,"FlaxAutoModelForSequenceClassification"),H6t.forEach(t),bqe.forEach(t),pPe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(kL.$$.fragment,Gl),x0r=i(Gl),Sc=n(Gl,"P",{});var MK=s(Sc);$0r=r(MK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),jU=n(MK,"A",{href:!0});var U6t=s(jU);k0r=r(U6t,"from_pretrained()"),U6t.forEach(t),S0r=r(MK," class method or the "),DU=n(MK,"A",{href:!0});var J6t=s(DU);R0r=r(J6t,"from_config()"),J6t.forEach(t),B0r=r(MK,` class
method.`),MK.forEach(t),P0r=i(Gl),SL=n(Gl,"P",{});var vqe=s(SL);I0r=r(vqe,"This class cannot be instantiated directly using "),YFe=n(vqe,"CODE",{});var Y6t=s(YFe);q0r=r(Y6t,"__init__()"),Y6t.forEach(t),N0r=r(vqe," (throws an error)."),vqe.forEach(t),j0r=i(Gl),Dt=n(Gl,"DIV",{class:!0});var U3=s(Dt);T(RL.$$.fragment,U3),D0r=i(U3),KFe=n(U3,"P",{});var K6t=s(KFe);G0r=r(K6t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),K6t.forEach(t),O0r=i(U3),Rc=n(U3,"P",{});var EK=s(Rc);V0r=r(EK,`Note:
Loading a model from its configuration file does `),ZFe=n(EK,"STRONG",{});var Z6t=s(ZFe);X0r=r(Z6t,"not"),Z6t.forEach(t),z0r=r(EK,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(EK,"A",{href:!0});var eTt=s(GU);Q0r=r(eTt,"from_pretrained()"),eTt.forEach(t),W0r=r(EK," to load the model weights."),EK.forEach(t),H0r=i(U3),T(OE.$$.fragment,U3),U3.forEach(t),U0r=i(Gl),Dr=n(Gl,"DIV",{class:!0});var Ol=s(Dr);T(BL.$$.fragment,Ol),J0r=i(Ol),e6e=n(Ol,"P",{});var oTt=s(e6e);Y0r=r(oTt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),oTt.forEach(t),K0r=i(Ol),gn=n(Ol,"P",{});var J3=s(gn);Z0r=r(J3,"The model class to instantiate is selected based on the "),o6e=n(J3,"CODE",{});var rTt=s(o6e);eyr=r(rTt,"model_type"),rTt.forEach(t),oyr=r(J3,` property of the config object (either
passed as an argument or loaded from `),r6e=n(J3,"CODE",{});var tTt=s(r6e);ryr=r(tTt,"pretrained_model_name_or_path"),tTt.forEach(t),tyr=r(J3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t6e=n(J3,"CODE",{});var aTt=s(t6e);ayr=r(aTt,"pretrained_model_name_or_path"),aTt.forEach(t),nyr=r(J3,":"),J3.forEach(t),syr=i(Ol),xe=n(Ol,"UL",{});var Be=s(xe);VE=n(Be,"LI",{});var GSe=s(VE);a6e=n(GSe,"STRONG",{});var nTt=s(a6e);lyr=r(nTt,"albert"),nTt.forEach(t),iyr=r(GSe," \u2014 "),OU=n(GSe,"A",{href:!0});var sTt=s(OU);dyr=r(sTt,"FlaxAlbertForSequenceClassification"),sTt.forEach(t),cyr=r(GSe," (ALBERT model)"),GSe.forEach(t),fyr=i(Be),XE=n(Be,"LI",{});var OSe=s(XE);n6e=n(OSe,"STRONG",{});var lTt=s(n6e);myr=r(lTt,"bart"),lTt.forEach(t),gyr=r(OSe," \u2014 "),VU=n(OSe,"A",{href:!0});var iTt=s(VU);hyr=r(iTt,"FlaxBartForSequenceClassification"),iTt.forEach(t),pyr=r(OSe," (BART model)"),OSe.forEach(t),uyr=i(Be),zE=n(Be,"LI",{});var VSe=s(zE);s6e=n(VSe,"STRONG",{});var dTt=s(s6e);_yr=r(dTt,"bert"),dTt.forEach(t),byr=r(VSe," \u2014 "),XU=n(VSe,"A",{href:!0});var cTt=s(XU);vyr=r(cTt,"FlaxBertForSequenceClassification"),cTt.forEach(t),Fyr=r(VSe," (BERT model)"),VSe.forEach(t),Tyr=i(Be),QE=n(Be,"LI",{});var XSe=s(QE);l6e=n(XSe,"STRONG",{});var fTt=s(l6e);Myr=r(fTt,"big_bird"),fTt.forEach(t),Eyr=r(XSe," \u2014 "),zU=n(XSe,"A",{href:!0});var mTt=s(zU);Cyr=r(mTt,"FlaxBigBirdForSequenceClassification"),mTt.forEach(t),wyr=r(XSe," (BigBird model)"),XSe.forEach(t),Ayr=i(Be),WE=n(Be,"LI",{});var zSe=s(WE);i6e=n(zSe,"STRONG",{});var gTt=s(i6e);yyr=r(gTt,"distilbert"),gTt.forEach(t),Lyr=r(zSe," \u2014 "),QU=n(zSe,"A",{href:!0});var hTt=s(QU);xyr=r(hTt,"FlaxDistilBertForSequenceClassification"),hTt.forEach(t),$yr=r(zSe," (DistilBERT model)"),zSe.forEach(t),kyr=i(Be),HE=n(Be,"LI",{});var QSe=s(HE);d6e=n(QSe,"STRONG",{});var pTt=s(d6e);Syr=r(pTt,"electra"),pTt.forEach(t),Ryr=r(QSe," \u2014 "),WU=n(QSe,"A",{href:!0});var uTt=s(WU);Byr=r(uTt,"FlaxElectraForSequenceClassification"),uTt.forEach(t),Pyr=r(QSe," (ELECTRA model)"),QSe.forEach(t),Iyr=i(Be),UE=n(Be,"LI",{});var WSe=s(UE);c6e=n(WSe,"STRONG",{});var _Tt=s(c6e);qyr=r(_Tt,"mbart"),_Tt.forEach(t),Nyr=r(WSe," \u2014 "),HU=n(WSe,"A",{href:!0});var bTt=s(HU);jyr=r(bTt,"FlaxMBartForSequenceClassification"),bTt.forEach(t),Dyr=r(WSe," (mBART model)"),WSe.forEach(t),Gyr=i(Be),JE=n(Be,"LI",{});var HSe=s(JE);f6e=n(HSe,"STRONG",{});var vTt=s(f6e);Oyr=r(vTt,"roberta"),vTt.forEach(t),Vyr=r(HSe," \u2014 "),UU=n(HSe,"A",{href:!0});var FTt=s(UU);Xyr=r(FTt,"FlaxRobertaForSequenceClassification"),FTt.forEach(t),zyr=r(HSe," (RoBERTa model)"),HSe.forEach(t),Qyr=i(Be),YE=n(Be,"LI",{});var USe=s(YE);m6e=n(USe,"STRONG",{});var TTt=s(m6e);Wyr=r(TTt,"roformer"),TTt.forEach(t),Hyr=r(USe," \u2014 "),JU=n(USe,"A",{href:!0});var MTt=s(JU);Uyr=r(MTt,"FlaxRoFormerForSequenceClassification"),MTt.forEach(t),Jyr=r(USe," (RoFormer model)"),USe.forEach(t),Yyr=i(Be),KE=n(Be,"LI",{});var JSe=s(KE);g6e=n(JSe,"STRONG",{});var ETt=s(g6e);Kyr=r(ETt,"xlm-roberta"),ETt.forEach(t),Zyr=r(JSe," \u2014 "),YU=n(JSe,"A",{href:!0});var CTt=s(YU);eLr=r(CTt,"FlaxXLMRobertaForSequenceClassification"),CTt.forEach(t),oLr=r(JSe," (XLM-RoBERTa model)"),JSe.forEach(t),Be.forEach(t),rLr=i(Ol),T(ZE.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),uPe=i(f),Bc=n(f,"H2",{class:!0});var Fqe=s(Bc);e5=n(Fqe,"A",{id:!0,class:!0,href:!0});var wTt=s(e5);h6e=n(wTt,"SPAN",{});var ATt=s(h6e);T(PL.$$.fragment,ATt),ATt.forEach(t),wTt.forEach(t),tLr=i(Fqe),p6e=n(Fqe,"SPAN",{});var yTt=s(p6e);aLr=r(yTt,"FlaxAutoModelForQuestionAnswering"),yTt.forEach(t),Fqe.forEach(t),_Pe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(IL.$$.fragment,Vl),nLr=i(Vl),Pc=n(Vl,"P",{});var CK=s(Pc);sLr=r(CK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),KU=n(CK,"A",{href:!0});var LTt=s(KU);lLr=r(LTt,"from_pretrained()"),LTt.forEach(t),iLr=r(CK," class method or the "),ZU=n(CK,"A",{href:!0});var xTt=s(ZU);dLr=r(xTt,"from_config()"),xTt.forEach(t),cLr=r(CK,` class
method.`),CK.forEach(t),fLr=i(Vl),qL=n(Vl,"P",{});var Tqe=s(qL);mLr=r(Tqe,"This class cannot be instantiated directly using "),u6e=n(Tqe,"CODE",{});var $Tt=s(u6e);gLr=r($Tt,"__init__()"),$Tt.forEach(t),hLr=r(Tqe," (throws an error)."),Tqe.forEach(t),pLr=i(Vl),Gt=n(Vl,"DIV",{class:!0});var Y3=s(Gt);T(NL.$$.fragment,Y3),uLr=i(Y3),_6e=n(Y3,"P",{});var kTt=s(_6e);_Lr=r(kTt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),kTt.forEach(t),bLr=i(Y3),Ic=n(Y3,"P",{});var wK=s(Ic);vLr=r(wK,`Note:
Loading a model from its configuration file does `),b6e=n(wK,"STRONG",{});var STt=s(b6e);FLr=r(STt,"not"),STt.forEach(t),TLr=r(wK,` load the model weights. It only affects the
model\u2019s configuration. Use `),eJ=n(wK,"A",{href:!0});var RTt=s(eJ);MLr=r(RTt,"from_pretrained()"),RTt.forEach(t),ELr=r(wK," to load the model weights."),wK.forEach(t),CLr=i(Y3),T(o5.$$.fragment,Y3),Y3.forEach(t),wLr=i(Vl),Gr=n(Vl,"DIV",{class:!0});var Xl=s(Gr);T(jL.$$.fragment,Xl),ALr=i(Xl),v6e=n(Xl,"P",{});var BTt=s(v6e);yLr=r(BTt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),BTt.forEach(t),LLr=i(Xl),hn=n(Xl,"P",{});var K3=s(hn);xLr=r(K3,"The model class to instantiate is selected based on the "),F6e=n(K3,"CODE",{});var PTt=s(F6e);$Lr=r(PTt,"model_type"),PTt.forEach(t),kLr=r(K3,` property of the config object (either
passed as an argument or loaded from `),T6e=n(K3,"CODE",{});var ITt=s(T6e);SLr=r(ITt,"pretrained_model_name_or_path"),ITt.forEach(t),RLr=r(K3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M6e=n(K3,"CODE",{});var qTt=s(M6e);BLr=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),PLr=r(K3,":"),K3.forEach(t),ILr=i(Xl),$e=n(Xl,"UL",{});var Pe=s($e);r5=n(Pe,"LI",{});var YSe=s(r5);E6e=n(YSe,"STRONG",{});var NTt=s(E6e);qLr=r(NTt,"albert"),NTt.forEach(t),NLr=r(YSe," \u2014 "),oJ=n(YSe,"A",{href:!0});var jTt=s(oJ);jLr=r(jTt,"FlaxAlbertForQuestionAnswering"),jTt.forEach(t),DLr=r(YSe," (ALBERT model)"),YSe.forEach(t),GLr=i(Pe),t5=n(Pe,"LI",{});var KSe=s(t5);C6e=n(KSe,"STRONG",{});var DTt=s(C6e);OLr=r(DTt,"bart"),DTt.forEach(t),VLr=r(KSe," \u2014 "),rJ=n(KSe,"A",{href:!0});var GTt=s(rJ);XLr=r(GTt,"FlaxBartForQuestionAnswering"),GTt.forEach(t),zLr=r(KSe," (BART model)"),KSe.forEach(t),QLr=i(Pe),a5=n(Pe,"LI",{});var ZSe=s(a5);w6e=n(ZSe,"STRONG",{});var OTt=s(w6e);WLr=r(OTt,"bert"),OTt.forEach(t),HLr=r(ZSe," \u2014 "),tJ=n(ZSe,"A",{href:!0});var VTt=s(tJ);ULr=r(VTt,"FlaxBertForQuestionAnswering"),VTt.forEach(t),JLr=r(ZSe," (BERT model)"),ZSe.forEach(t),YLr=i(Pe),n5=n(Pe,"LI",{});var eRe=s(n5);A6e=n(eRe,"STRONG",{});var XTt=s(A6e);KLr=r(XTt,"big_bird"),XTt.forEach(t),ZLr=r(eRe," \u2014 "),aJ=n(eRe,"A",{href:!0});var zTt=s(aJ);e8r=r(zTt,"FlaxBigBirdForQuestionAnswering"),zTt.forEach(t),o8r=r(eRe," (BigBird model)"),eRe.forEach(t),r8r=i(Pe),s5=n(Pe,"LI",{});var oRe=s(s5);y6e=n(oRe,"STRONG",{});var QTt=s(y6e);t8r=r(QTt,"distilbert"),QTt.forEach(t),a8r=r(oRe," \u2014 "),nJ=n(oRe,"A",{href:!0});var WTt=s(nJ);n8r=r(WTt,"FlaxDistilBertForQuestionAnswering"),WTt.forEach(t),s8r=r(oRe," (DistilBERT model)"),oRe.forEach(t),l8r=i(Pe),l5=n(Pe,"LI",{});var rRe=s(l5);L6e=n(rRe,"STRONG",{});var HTt=s(L6e);i8r=r(HTt,"electra"),HTt.forEach(t),d8r=r(rRe," \u2014 "),sJ=n(rRe,"A",{href:!0});var UTt=s(sJ);c8r=r(UTt,"FlaxElectraForQuestionAnswering"),UTt.forEach(t),f8r=r(rRe," (ELECTRA model)"),rRe.forEach(t),m8r=i(Pe),i5=n(Pe,"LI",{});var tRe=s(i5);x6e=n(tRe,"STRONG",{});var JTt=s(x6e);g8r=r(JTt,"mbart"),JTt.forEach(t),h8r=r(tRe," \u2014 "),lJ=n(tRe,"A",{href:!0});var YTt=s(lJ);p8r=r(YTt,"FlaxMBartForQuestionAnswering"),YTt.forEach(t),u8r=r(tRe," (mBART model)"),tRe.forEach(t),_8r=i(Pe),d5=n(Pe,"LI",{});var aRe=s(d5);$6e=n(aRe,"STRONG",{});var KTt=s($6e);b8r=r(KTt,"roberta"),KTt.forEach(t),v8r=r(aRe," \u2014 "),iJ=n(aRe,"A",{href:!0});var ZTt=s(iJ);F8r=r(ZTt,"FlaxRobertaForQuestionAnswering"),ZTt.forEach(t),T8r=r(aRe," (RoBERTa model)"),aRe.forEach(t),M8r=i(Pe),c5=n(Pe,"LI",{});var nRe=s(c5);k6e=n(nRe,"STRONG",{});var e7t=s(k6e);E8r=r(e7t,"roformer"),e7t.forEach(t),C8r=r(nRe," \u2014 "),dJ=n(nRe,"A",{href:!0});var o7t=s(dJ);w8r=r(o7t,"FlaxRoFormerForQuestionAnswering"),o7t.forEach(t),A8r=r(nRe," (RoFormer model)"),nRe.forEach(t),y8r=i(Pe),f5=n(Pe,"LI",{});var sRe=s(f5);S6e=n(sRe,"STRONG",{});var r7t=s(S6e);L8r=r(r7t,"xlm-roberta"),r7t.forEach(t),x8r=r(sRe," \u2014 "),cJ=n(sRe,"A",{href:!0});var t7t=s(cJ);$8r=r(t7t,"FlaxXLMRobertaForQuestionAnswering"),t7t.forEach(t),k8r=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),Pe.forEach(t),S8r=i(Xl),T(m5.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),bPe=i(f),qc=n(f,"H2",{class:!0});var Mqe=s(qc);g5=n(Mqe,"A",{id:!0,class:!0,href:!0});var a7t=s(g5);R6e=n(a7t,"SPAN",{});var n7t=s(R6e);T(DL.$$.fragment,n7t),n7t.forEach(t),a7t.forEach(t),R8r=i(Mqe),B6e=n(Mqe,"SPAN",{});var s7t=s(B6e);B8r=r(s7t,"FlaxAutoModelForTokenClassification"),s7t.forEach(t),Mqe.forEach(t),vPe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(GL.$$.fragment,zl),P8r=i(zl),Nc=n(zl,"P",{});var AK=s(Nc);I8r=r(AK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fJ=n(AK,"A",{href:!0});var l7t=s(fJ);q8r=r(l7t,"from_pretrained()"),l7t.forEach(t),N8r=r(AK," class method or the "),mJ=n(AK,"A",{href:!0});var i7t=s(mJ);j8r=r(i7t,"from_config()"),i7t.forEach(t),D8r=r(AK,` class
method.`),AK.forEach(t),G8r=i(zl),OL=n(zl,"P",{});var Eqe=s(OL);O8r=r(Eqe,"This class cannot be instantiated directly using "),P6e=n(Eqe,"CODE",{});var d7t=s(P6e);V8r=r(d7t,"__init__()"),d7t.forEach(t),X8r=r(Eqe," (throws an error)."),Eqe.forEach(t),z8r=i(zl),Ot=n(zl,"DIV",{class:!0});var Z3=s(Ot);T(VL.$$.fragment,Z3),Q8r=i(Z3),I6e=n(Z3,"P",{});var c7t=s(I6e);W8r=r(c7t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),c7t.forEach(t),H8r=i(Z3),jc=n(Z3,"P",{});var yK=s(jc);U8r=r(yK,`Note:
Loading a model from its configuration file does `),q6e=n(yK,"STRONG",{});var f7t=s(q6e);J8r=r(f7t,"not"),f7t.forEach(t),Y8r=r(yK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gJ=n(yK,"A",{href:!0});var m7t=s(gJ);K8r=r(m7t,"from_pretrained()"),m7t.forEach(t),Z8r=r(yK," to load the model weights."),yK.forEach(t),exr=i(Z3),T(h5.$$.fragment,Z3),Z3.forEach(t),oxr=i(zl),Or=n(zl,"DIV",{class:!0});var Ql=s(Or);T(XL.$$.fragment,Ql),rxr=i(Ql),N6e=n(Ql,"P",{});var g7t=s(N6e);txr=r(g7t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),g7t.forEach(t),axr=i(Ql),pn=n(Ql,"P",{});var ew=s(pn);nxr=r(ew,"The model class to instantiate is selected based on the "),j6e=n(ew,"CODE",{});var h7t=s(j6e);sxr=r(h7t,"model_type"),h7t.forEach(t),lxr=r(ew,` property of the config object (either
passed as an argument or loaded from `),D6e=n(ew,"CODE",{});var p7t=s(D6e);ixr=r(p7t,"pretrained_model_name_or_path"),p7t.forEach(t),dxr=r(ew,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(ew,"CODE",{});var u7t=s(G6e);cxr=r(u7t,"pretrained_model_name_or_path"),u7t.forEach(t),fxr=r(ew,":"),ew.forEach(t),mxr=i(Ql),je=n(Ql,"UL",{});var bo=s(je);p5=n(bo,"LI",{});var lRe=s(p5);O6e=n(lRe,"STRONG",{});var _7t=s(O6e);gxr=r(_7t,"albert"),_7t.forEach(t),hxr=r(lRe," \u2014 "),hJ=n(lRe,"A",{href:!0});var b7t=s(hJ);pxr=r(b7t,"FlaxAlbertForTokenClassification"),b7t.forEach(t),uxr=r(lRe," (ALBERT model)"),lRe.forEach(t),_xr=i(bo),u5=n(bo,"LI",{});var iRe=s(u5);V6e=n(iRe,"STRONG",{});var v7t=s(V6e);bxr=r(v7t,"bert"),v7t.forEach(t),vxr=r(iRe," \u2014 "),pJ=n(iRe,"A",{href:!0});var F7t=s(pJ);Fxr=r(F7t,"FlaxBertForTokenClassification"),F7t.forEach(t),Txr=r(iRe," (BERT model)"),iRe.forEach(t),Mxr=i(bo),_5=n(bo,"LI",{});var dRe=s(_5);X6e=n(dRe,"STRONG",{});var T7t=s(X6e);Exr=r(T7t,"big_bird"),T7t.forEach(t),Cxr=r(dRe," \u2014 "),uJ=n(dRe,"A",{href:!0});var M7t=s(uJ);wxr=r(M7t,"FlaxBigBirdForTokenClassification"),M7t.forEach(t),Axr=r(dRe," (BigBird model)"),dRe.forEach(t),yxr=i(bo),b5=n(bo,"LI",{});var cRe=s(b5);z6e=n(cRe,"STRONG",{});var E7t=s(z6e);Lxr=r(E7t,"distilbert"),E7t.forEach(t),xxr=r(cRe," \u2014 "),_J=n(cRe,"A",{href:!0});var C7t=s(_J);$xr=r(C7t,"FlaxDistilBertForTokenClassification"),C7t.forEach(t),kxr=r(cRe," (DistilBERT model)"),cRe.forEach(t),Sxr=i(bo),v5=n(bo,"LI",{});var fRe=s(v5);Q6e=n(fRe,"STRONG",{});var w7t=s(Q6e);Rxr=r(w7t,"electra"),w7t.forEach(t),Bxr=r(fRe," \u2014 "),bJ=n(fRe,"A",{href:!0});var A7t=s(bJ);Pxr=r(A7t,"FlaxElectraForTokenClassification"),A7t.forEach(t),Ixr=r(fRe," (ELECTRA model)"),fRe.forEach(t),qxr=i(bo),F5=n(bo,"LI",{});var mRe=s(F5);W6e=n(mRe,"STRONG",{});var y7t=s(W6e);Nxr=r(y7t,"roberta"),y7t.forEach(t),jxr=r(mRe," \u2014 "),vJ=n(mRe,"A",{href:!0});var L7t=s(vJ);Dxr=r(L7t,"FlaxRobertaForTokenClassification"),L7t.forEach(t),Gxr=r(mRe," (RoBERTa model)"),mRe.forEach(t),Oxr=i(bo),T5=n(bo,"LI",{});var gRe=s(T5);H6e=n(gRe,"STRONG",{});var x7t=s(H6e);Vxr=r(x7t,"roformer"),x7t.forEach(t),Xxr=r(gRe," \u2014 "),FJ=n(gRe,"A",{href:!0});var $7t=s(FJ);zxr=r($7t,"FlaxRoFormerForTokenClassification"),$7t.forEach(t),Qxr=r(gRe," (RoFormer model)"),gRe.forEach(t),Wxr=i(bo),M5=n(bo,"LI",{});var hRe=s(M5);U6e=n(hRe,"STRONG",{});var k7t=s(U6e);Hxr=r(k7t,"xlm-roberta"),k7t.forEach(t),Uxr=r(hRe," \u2014 "),TJ=n(hRe,"A",{href:!0});var S7t=s(TJ);Jxr=r(S7t,"FlaxXLMRobertaForTokenClassification"),S7t.forEach(t),Yxr=r(hRe," (XLM-RoBERTa model)"),hRe.forEach(t),bo.forEach(t),Kxr=i(Ql),T(E5.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),FPe=i(f),Dc=n(f,"H2",{class:!0});var Cqe=s(Dc);C5=n(Cqe,"A",{id:!0,class:!0,href:!0});var R7t=s(C5);J6e=n(R7t,"SPAN",{});var B7t=s(J6e);T(zL.$$.fragment,B7t),B7t.forEach(t),R7t.forEach(t),Zxr=i(Cqe),Y6e=n(Cqe,"SPAN",{});var P7t=s(Y6e);e$r=r(P7t,"FlaxAutoModelForMultipleChoice"),P7t.forEach(t),Cqe.forEach(t),TPe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(QL.$$.fragment,Wl),o$r=i(Wl),Gc=n(Wl,"P",{});var LK=s(Gc);r$r=r(LK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),MJ=n(LK,"A",{href:!0});var I7t=s(MJ);t$r=r(I7t,"from_pretrained()"),I7t.forEach(t),a$r=r(LK," class method or the "),EJ=n(LK,"A",{href:!0});var q7t=s(EJ);n$r=r(q7t,"from_config()"),q7t.forEach(t),s$r=r(LK,` class
method.`),LK.forEach(t),l$r=i(Wl),WL=n(Wl,"P",{});var wqe=s(WL);i$r=r(wqe,"This class cannot be instantiated directly using "),K6e=n(wqe,"CODE",{});var N7t=s(K6e);d$r=r(N7t,"__init__()"),N7t.forEach(t),c$r=r(wqe," (throws an error)."),wqe.forEach(t),f$r=i(Wl),Vt=n(Wl,"DIV",{class:!0});var ow=s(Vt);T(HL.$$.fragment,ow),m$r=i(ow),Z6e=n(ow,"P",{});var j7t=s(Z6e);g$r=r(j7t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),j7t.forEach(t),h$r=i(ow),Oc=n(ow,"P",{});var xK=s(Oc);p$r=r(xK,`Note:
Loading a model from its configuration file does `),eTe=n(xK,"STRONG",{});var D7t=s(eTe);u$r=r(D7t,"not"),D7t.forEach(t),_$r=r(xK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CJ=n(xK,"A",{href:!0});var G7t=s(CJ);b$r=r(G7t,"from_pretrained()"),G7t.forEach(t),v$r=r(xK," to load the model weights."),xK.forEach(t),F$r=i(ow),T(w5.$$.fragment,ow),ow.forEach(t),T$r=i(Wl),Vr=n(Wl,"DIV",{class:!0});var Hl=s(Vr);T(UL.$$.fragment,Hl),M$r=i(Hl),oTe=n(Hl,"P",{});var O7t=s(oTe);E$r=r(O7t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),O7t.forEach(t),C$r=i(Hl),un=n(Hl,"P",{});var rw=s(un);w$r=r(rw,"The model class to instantiate is selected based on the "),rTe=n(rw,"CODE",{});var V7t=s(rTe);A$r=r(V7t,"model_type"),V7t.forEach(t),y$r=r(rw,` property of the config object (either
passed as an argument or loaded from `),tTe=n(rw,"CODE",{});var X7t=s(tTe);L$r=r(X7t,"pretrained_model_name_or_path"),X7t.forEach(t),x$r=r(rw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),aTe=n(rw,"CODE",{});var z7t=s(aTe);$$r=r(z7t,"pretrained_model_name_or_path"),z7t.forEach(t),k$r=r(rw,":"),rw.forEach(t),S$r=i(Hl),De=n(Hl,"UL",{});var vo=s(De);A5=n(vo,"LI",{});var pRe=s(A5);nTe=n(pRe,"STRONG",{});var Q7t=s(nTe);R$r=r(Q7t,"albert"),Q7t.forEach(t),B$r=r(pRe," \u2014 "),wJ=n(pRe,"A",{href:!0});var W7t=s(wJ);P$r=r(W7t,"FlaxAlbertForMultipleChoice"),W7t.forEach(t),I$r=r(pRe," (ALBERT model)"),pRe.forEach(t),q$r=i(vo),y5=n(vo,"LI",{});var uRe=s(y5);sTe=n(uRe,"STRONG",{});var H7t=s(sTe);N$r=r(H7t,"bert"),H7t.forEach(t),j$r=r(uRe," \u2014 "),AJ=n(uRe,"A",{href:!0});var U7t=s(AJ);D$r=r(U7t,"FlaxBertForMultipleChoice"),U7t.forEach(t),G$r=r(uRe," (BERT model)"),uRe.forEach(t),O$r=i(vo),L5=n(vo,"LI",{});var _Re=s(L5);lTe=n(_Re,"STRONG",{});var J7t=s(lTe);V$r=r(J7t,"big_bird"),J7t.forEach(t),X$r=r(_Re," \u2014 "),yJ=n(_Re,"A",{href:!0});var Y7t=s(yJ);z$r=r(Y7t,"FlaxBigBirdForMultipleChoice"),Y7t.forEach(t),Q$r=r(_Re," (BigBird model)"),_Re.forEach(t),W$r=i(vo),x5=n(vo,"LI",{});var bRe=s(x5);iTe=n(bRe,"STRONG",{});var K7t=s(iTe);H$r=r(K7t,"distilbert"),K7t.forEach(t),U$r=r(bRe," \u2014 "),LJ=n(bRe,"A",{href:!0});var Z7t=s(LJ);J$r=r(Z7t,"FlaxDistilBertForMultipleChoice"),Z7t.forEach(t),Y$r=r(bRe," (DistilBERT model)"),bRe.forEach(t),K$r=i(vo),$5=n(vo,"LI",{});var vRe=s($5);dTe=n(vRe,"STRONG",{});var e9t=s(dTe);Z$r=r(e9t,"electra"),e9t.forEach(t),ekr=r(vRe," \u2014 "),xJ=n(vRe,"A",{href:!0});var o9t=s(xJ);okr=r(o9t,"FlaxElectraForMultipleChoice"),o9t.forEach(t),rkr=r(vRe," (ELECTRA model)"),vRe.forEach(t),tkr=i(vo),k5=n(vo,"LI",{});var FRe=s(k5);cTe=n(FRe,"STRONG",{});var r9t=s(cTe);akr=r(r9t,"roberta"),r9t.forEach(t),nkr=r(FRe," \u2014 "),$J=n(FRe,"A",{href:!0});var t9t=s($J);skr=r(t9t,"FlaxRobertaForMultipleChoice"),t9t.forEach(t),lkr=r(FRe," (RoBERTa model)"),FRe.forEach(t),ikr=i(vo),S5=n(vo,"LI",{});var TRe=s(S5);fTe=n(TRe,"STRONG",{});var a9t=s(fTe);dkr=r(a9t,"roformer"),a9t.forEach(t),ckr=r(TRe," \u2014 "),kJ=n(TRe,"A",{href:!0});var n9t=s(kJ);fkr=r(n9t,"FlaxRoFormerForMultipleChoice"),n9t.forEach(t),mkr=r(TRe," (RoFormer model)"),TRe.forEach(t),gkr=i(vo),R5=n(vo,"LI",{});var MRe=s(R5);mTe=n(MRe,"STRONG",{});var s9t=s(mTe);hkr=r(s9t,"xlm-roberta"),s9t.forEach(t),pkr=r(MRe," \u2014 "),SJ=n(MRe,"A",{href:!0});var l9t=s(SJ);ukr=r(l9t,"FlaxXLMRobertaForMultipleChoice"),l9t.forEach(t),_kr=r(MRe," (XLM-RoBERTa model)"),MRe.forEach(t),vo.forEach(t),bkr=i(Hl),T(B5.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),MPe=i(f),Vc=n(f,"H2",{class:!0});var Aqe=s(Vc);P5=n(Aqe,"A",{id:!0,class:!0,href:!0});var i9t=s(P5);gTe=n(i9t,"SPAN",{});var d9t=s(gTe);T(JL.$$.fragment,d9t),d9t.forEach(t),i9t.forEach(t),vkr=i(Aqe),hTe=n(Aqe,"SPAN",{});var c9t=s(hTe);Fkr=r(c9t,"FlaxAutoModelForNextSentencePrediction"),c9t.forEach(t),Aqe.forEach(t),EPe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(YL.$$.fragment,Ul),Tkr=i(Ul),Xc=n(Ul,"P",{});var $K=s(Xc);Mkr=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),RJ=n($K,"A",{href:!0});var f9t=s(RJ);Ekr=r(f9t,"from_pretrained()"),f9t.forEach(t),Ckr=r($K," class method or the "),BJ=n($K,"A",{href:!0});var m9t=s(BJ);wkr=r(m9t,"from_config()"),m9t.forEach(t),Akr=r($K,` class
method.`),$K.forEach(t),ykr=i(Ul),KL=n(Ul,"P",{});var yqe=s(KL);Lkr=r(yqe,"This class cannot be instantiated directly using "),pTe=n(yqe,"CODE",{});var g9t=s(pTe);xkr=r(g9t,"__init__()"),g9t.forEach(t),$kr=r(yqe," (throws an error)."),yqe.forEach(t),kkr=i(Ul),Xt=n(Ul,"DIV",{class:!0});var tw=s(Xt);T(ZL.$$.fragment,tw),Skr=i(tw),uTe=n(tw,"P",{});var h9t=s(uTe);Rkr=r(h9t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),h9t.forEach(t),Bkr=i(tw),zc=n(tw,"P",{});var kK=s(zc);Pkr=r(kK,`Note:
Loading a model from its configuration file does `),_Te=n(kK,"STRONG",{});var p9t=s(_Te);Ikr=r(p9t,"not"),p9t.forEach(t),qkr=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PJ=n(kK,"A",{href:!0});var u9t=s(PJ);Nkr=r(u9t,"from_pretrained()"),u9t.forEach(t),jkr=r(kK," to load the model weights."),kK.forEach(t),Dkr=i(tw),T(I5.$$.fragment,tw),tw.forEach(t),Gkr=i(Ul),Xr=n(Ul,"DIV",{class:!0});var Jl=s(Xr);T(e8.$$.fragment,Jl),Okr=i(Jl),bTe=n(Jl,"P",{});var _9t=s(bTe);Vkr=r(_9t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),_9t.forEach(t),Xkr=i(Jl),_n=n(Jl,"P",{});var aw=s(_n);zkr=r(aw,"The model class to instantiate is selected based on the "),vTe=n(aw,"CODE",{});var b9t=s(vTe);Qkr=r(b9t,"model_type"),b9t.forEach(t),Wkr=r(aw,` property of the config object (either
passed as an argument or loaded from `),FTe=n(aw,"CODE",{});var v9t=s(FTe);Hkr=r(v9t,"pretrained_model_name_or_path"),v9t.forEach(t),Ukr=r(aw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),TTe=n(aw,"CODE",{});var F9t=s(TTe);Jkr=r(F9t,"pretrained_model_name_or_path"),F9t.forEach(t),Ykr=r(aw,":"),aw.forEach(t),Kkr=i(Jl),MTe=n(Jl,"UL",{});var T9t=s(MTe);q5=n(T9t,"LI",{});var ERe=s(q5);ETe=n(ERe,"STRONG",{});var M9t=s(ETe);Zkr=r(M9t,"bert"),M9t.forEach(t),eSr=r(ERe," \u2014 "),IJ=n(ERe,"A",{href:!0});var E9t=s(IJ);oSr=r(E9t,"FlaxBertForNextSentencePrediction"),E9t.forEach(t),rSr=r(ERe," (BERT model)"),ERe.forEach(t),T9t.forEach(t),tSr=i(Jl),T(N5.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),CPe=i(f),Qc=n(f,"H2",{class:!0});var Lqe=s(Qc);j5=n(Lqe,"A",{id:!0,class:!0,href:!0});var C9t=s(j5);CTe=n(C9t,"SPAN",{});var w9t=s(CTe);T(o8.$$.fragment,w9t),w9t.forEach(t),C9t.forEach(t),aSr=i(Lqe),wTe=n(Lqe,"SPAN",{});var A9t=s(wTe);nSr=r(A9t,"FlaxAutoModelForImageClassification"),A9t.forEach(t),Lqe.forEach(t),wPe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(r8.$$.fragment,Yl),sSr=i(Yl),Wc=n(Yl,"P",{});var SK=s(Wc);lSr=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),qJ=n(SK,"A",{href:!0});var y9t=s(qJ);iSr=r(y9t,"from_pretrained()"),y9t.forEach(t),dSr=r(SK," class method or the "),NJ=n(SK,"A",{href:!0});var L9t=s(NJ);cSr=r(L9t,"from_config()"),L9t.forEach(t),fSr=r(SK,` class
method.`),SK.forEach(t),mSr=i(Yl),t8=n(Yl,"P",{});var xqe=s(t8);gSr=r(xqe,"This class cannot be instantiated directly using "),ATe=n(xqe,"CODE",{});var x9t=s(ATe);hSr=r(x9t,"__init__()"),x9t.forEach(t),pSr=r(xqe," (throws an error)."),xqe.forEach(t),uSr=i(Yl),zt=n(Yl,"DIV",{class:!0});var nw=s(zt);T(a8.$$.fragment,nw),_Sr=i(nw),yTe=n(nw,"P",{});var $9t=s(yTe);bSr=r($9t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),$9t.forEach(t),vSr=i(nw),Hc=n(nw,"P",{});var RK=s(Hc);FSr=r(RK,`Note:
Loading a model from its configuration file does `),LTe=n(RK,"STRONG",{});var k9t=s(LTe);TSr=r(k9t,"not"),k9t.forEach(t),MSr=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(RK,"A",{href:!0});var S9t=s(jJ);ESr=r(S9t,"from_pretrained()"),S9t.forEach(t),CSr=r(RK," to load the model weights."),RK.forEach(t),wSr=i(nw),T(D5.$$.fragment,nw),nw.forEach(t),ASr=i(Yl),zr=n(Yl,"DIV",{class:!0});var Kl=s(zr);T(n8.$$.fragment,Kl),ySr=i(Kl),xTe=n(Kl,"P",{});var R9t=s(xTe);LSr=r(R9t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),R9t.forEach(t),xSr=i(Kl),bn=n(Kl,"P",{});var sw=s(bn);$Sr=r(sw,"The model class to instantiate is selected based on the "),$Te=n(sw,"CODE",{});var B9t=s($Te);kSr=r(B9t,"model_type"),B9t.forEach(t),SSr=r(sw,` property of the config object (either
passed as an argument or loaded from `),kTe=n(sw,"CODE",{});var P9t=s(kTe);RSr=r(P9t,"pretrained_model_name_or_path"),P9t.forEach(t),BSr=r(sw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),STe=n(sw,"CODE",{});var I9t=s(STe);PSr=r(I9t,"pretrained_model_name_or_path"),I9t.forEach(t),ISr=r(sw,":"),sw.forEach(t),qSr=i(Kl),s8=n(Kl,"UL",{});var $qe=s(s8);G5=n($qe,"LI",{});var CRe=s(G5);RTe=n(CRe,"STRONG",{});var q9t=s(RTe);NSr=r(q9t,"beit"),q9t.forEach(t),jSr=r(CRe," \u2014 "),DJ=n(CRe,"A",{href:!0});var N9t=s(DJ);DSr=r(N9t,"FlaxBeitForImageClassification"),N9t.forEach(t),GSr=r(CRe," (BEiT model)"),CRe.forEach(t),OSr=i($qe),O5=n($qe,"LI",{});var wRe=s(O5);BTe=n(wRe,"STRONG",{});var j9t=s(BTe);VSr=r(j9t,"vit"),j9t.forEach(t),XSr=r(wRe," \u2014 "),GJ=n(wRe,"A",{href:!0});var D9t=s(GJ);zSr=r(D9t,"FlaxViTForImageClassification"),D9t.forEach(t),QSr=r(wRe," (ViT model)"),wRe.forEach(t),$qe.forEach(t),WSr=i(Kl),T(V5.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),APe=i(f),Uc=n(f,"H2",{class:!0});var kqe=s(Uc);X5=n(kqe,"A",{id:!0,class:!0,href:!0});var G9t=s(X5);PTe=n(G9t,"SPAN",{});var O9t=s(PTe);T(l8.$$.fragment,O9t),O9t.forEach(t),G9t.forEach(t),HSr=i(kqe),ITe=n(kqe,"SPAN",{});var V9t=s(ITe);USr=r(V9t,"FlaxAutoModelForVision2Seq"),V9t.forEach(t),kqe.forEach(t),yPe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(i8.$$.fragment,Zl),JSr=i(Zl),Jc=n(Zl,"P",{});var BK=s(Jc);YSr=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),OJ=n(BK,"A",{href:!0});var X9t=s(OJ);KSr=r(X9t,"from_pretrained()"),X9t.forEach(t),ZSr=r(BK," class method or the "),VJ=n(BK,"A",{href:!0});var z9t=s(VJ);eRr=r(z9t,"from_config()"),z9t.forEach(t),oRr=r(BK,` class
method.`),BK.forEach(t),rRr=i(Zl),d8=n(Zl,"P",{});var Sqe=s(d8);tRr=r(Sqe,"This class cannot be instantiated directly using "),qTe=n(Sqe,"CODE",{});var Q9t=s(qTe);aRr=r(Q9t,"__init__()"),Q9t.forEach(t),nRr=r(Sqe," (throws an error)."),Sqe.forEach(t),sRr=i(Zl),Qt=n(Zl,"DIV",{class:!0});var lw=s(Qt);T(c8.$$.fragment,lw),lRr=i(lw),NTe=n(lw,"P",{});var W9t=s(NTe);iRr=r(W9t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),W9t.forEach(t),dRr=i(lw),Yc=n(lw,"P",{});var PK=s(Yc);cRr=r(PK,`Note:
Loading a model from its configuration file does `),jTe=n(PK,"STRONG",{});var H9t=s(jTe);fRr=r(H9t,"not"),H9t.forEach(t),mRr=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XJ=n(PK,"A",{href:!0});var U9t=s(XJ);gRr=r(U9t,"from_pretrained()"),U9t.forEach(t),hRr=r(PK," to load the model weights."),PK.forEach(t),pRr=i(lw),T(z5.$$.fragment,lw),lw.forEach(t),uRr=i(Zl),Qr=n(Zl,"DIV",{class:!0});var ei=s(Qr);T(f8.$$.fragment,ei),_Rr=i(ei),DTe=n(ei,"P",{});var J9t=s(DTe);bRr=r(J9t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J9t.forEach(t),vRr=i(ei),vn=n(ei,"P",{});var iw=s(vn);FRr=r(iw,"The model class to instantiate is selected based on the "),GTe=n(iw,"CODE",{});var Y9t=s(GTe);TRr=r(Y9t,"model_type"),Y9t.forEach(t),MRr=r(iw,` property of the config object (either
passed as an argument or loaded from `),OTe=n(iw,"CODE",{});var K9t=s(OTe);ERr=r(K9t,"pretrained_model_name_or_path"),K9t.forEach(t),CRr=r(iw,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(iw,"CODE",{});var Z9t=s(VTe);wRr=r(Z9t,"pretrained_model_name_or_path"),Z9t.forEach(t),ARr=r(iw,":"),iw.forEach(t),yRr=i(ei),XTe=n(ei,"UL",{});var eMt=s(XTe);Q5=n(eMt,"LI",{});var ARe=s(Q5);zTe=n(ARe,"STRONG",{});var oMt=s(zTe);LRr=r(oMt,"vision-encoder-decoder"),oMt.forEach(t),xRr=r(ARe," \u2014 "),zJ=n(ARe,"A",{href:!0});var rMt=s(zJ);$Rr=r(rMt,"FlaxVisionEncoderDecoderModel"),rMt.forEach(t),kRr=r(ARe," (Vision Encoder decoder model)"),ARe.forEach(t),eMt.forEach(t),SRr=i(ei),T(W5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(a5t)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(Tn,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.AutoConfig"),c(En,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.AutoModel"),c(Cn,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.AutoTokenizer"),c(li,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertModel"),c(nf,"id","extending-the-auto-classes"),c(nf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(nf,"href","#extending-the-auto-classes"),c(ii,"class","relative group"),c(lf,"id","transformers.AutoConfig"),c(lf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lf,"href","#transformers.AutoConfig"),c(di,"class","relative group"),c($x,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(kx,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertConfig"),c(Sx,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig"),c(Rx,"href","/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitConfig"),c(Bx,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertConfig"),c(Px,"href","/docs/transformers/pr_16974/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(Ix,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdConfig"),c(qx,"href","/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(Nx,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(jx,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(Dx,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertConfig"),c(Gx,"href","/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineConfig"),c(Ox,"href","/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPConfig"),c(Vx,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertConfig"),c(Xx,"href","/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextConfig"),c(zx,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLConfig"),c(Qx,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(Wx,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(Hx,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c(Ux,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaConfig"),c(Jx,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(Yx,"href","/docs/transformers/pr_16974/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(Kx,"href","/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTConfig"),c(Zx,"href","/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrConfig"),c(e$,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertConfig"),c(o$,"href","/docs/transformers/pr_16974/en/model_doc/dpr#transformers.DPRConfig"),c(r$,"href","/docs/transformers/pr_16974/en/model_doc/dpt#transformers.DPTConfig"),c(t$,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraConfig"),c(a$,"href","/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(n$,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertConfig"),c(s$,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetConfig"),c(l$,"href","/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTConfig"),c(i$,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelConfig"),c(d$,"href","/docs/transformers/pr_16974/en/model_doc/glpn#transformers.GLPNConfig"),c(c$,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Config"),c(f$,"href","/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(m$,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJConfig"),c(g$,"href","/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertConfig"),c(h$,"href","/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertConfig"),c(p$,"href","/docs/transformers/pr_16974/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(u$,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(_$,"href","/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(b$,"href","/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDConfig"),c(v$,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerConfig"),c(F$,"href","/docs/transformers/pr_16974/en/model_doc/luke#transformers.LukeConfig"),c(T$,"href","/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertConfig"),c(M$,"href","/docs/transformers/pr_16974/en/model_doc/m2m_100#transformers.M2M100Config"),c(E$,"href","/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianConfig"),c(C$,"href","/docs/transformers/pr_16974/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(w$,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartConfig"),c(A$,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(y$,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(L$,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetConfig"),c(x$,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Config"),c($$,"href","/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(k$,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(S$,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusConfig"),c(R$,"href","/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverConfig"),c(B$,"href","/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartConfig"),c(P$,"href","/docs/transformers/pr_16974/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(I$,"href","/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(q$,"href","/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(N$,"href","/docs/transformers/pr_16974/en/model_doc/rag#transformers.RagConfig"),c(j$,"href","/docs/transformers/pr_16974/en/model_doc/realm#transformers.RealmConfig"),c(D$,"href","/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerConfig"),c(G$,"href","/docs/transformers/pr_16974/en/model_doc/regnet#transformers.RegNetConfig"),c(O$,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertConfig"),c(V$,"href","/docs/transformers/pr_16974/en/model_doc/resnet#transformers.ResNetConfig"),c(X$,"href","/docs/transformers/pr_16974/en/model_doc/retribert#transformers.RetriBertConfig"),c(z$,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaConfig"),c(Q$,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerConfig"),c(W$,"href","/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerConfig"),c(H$,"href","/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWConfig"),c(U$,"href","/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDConfig"),c(J$,"href","/docs/transformers/pr_16974/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Y$,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(K$,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Z$,"href","/docs/transformers/pr_16974/en/model_doc/splinter#transformers.SplinterConfig"),c(ek,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(ok,"href","/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinConfig"),c(rk,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Config"),c(tk,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasConfig"),c(ak,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartConfig"),c(nk,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(sk,"href","/docs/transformers/pr_16974/en/model_doc/trocr#transformers.TrOCRConfig"),c(lk,"href","/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(ik,"href","/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(dk,"href","/docs/transformers/pr_16974/en/model_doc/van#transformers.VanConfig"),c(ck,"href","/docs/transformers/pr_16974/en/model_doc/vilt#transformers.ViltConfig"),c(fk,"href","/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(mk,"href","/docs/transformers/pr_16974/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(gk,"href","/docs/transformers/pr_16974/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(hk,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTConfig"),c(pk,"href","/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(uk,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(_k,"href","/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMConfig"),c(bk,"href","/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMConfig"),c(vk,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMConfig"),c(Fk,"href","/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(Tk,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(Mk,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(Ek,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetConfig"),c(Ck,"href","/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoConfig"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ag,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ng,"id","transformers.AutoTokenizer"),c(ng,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ng,"href","#transformers.AutoTokenizer"),c(fi,"class","relative group"),c(wk,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(Ak,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertTokenizer"),c(yk,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Lk,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartTokenizer"),c(xk,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartTokenizerFast"),c($k,"href","/docs/transformers/pr_16974/en/model_doc/barthez#transformers.BarthezTokenizer"),c(kk,"href","/docs/transformers/pr_16974/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(Sk,"href","/docs/transformers/pr_16974/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(Rk,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertTokenizer"),c(Bk,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertTokenizerFast"),c(Pk,"href","/docs/transformers/pr_16974/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(Ik,"href","/docs/transformers/pr_16974/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(qk,"href","/docs/transformers/pr_16974/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(Nk,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(jk,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(Dk,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(Gk,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(Ok,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(Vk,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(Xk,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(zk,"href","/docs/transformers/pr_16974/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(Qk,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertTokenizer"),c(Wk,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c(Hk,"href","/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineTokenizer"),c(Uk,"href","/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPTokenizer"),c(Jk,"href","/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(Yk,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(Kk,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(Zk,"href","/docs/transformers/pr_16974/en/model_doc/cpm#transformers.CpmTokenizer"),c(eS,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(oS,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaTokenizer"),c(rS,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(tS,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaTokenizer"),c(aS,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(nS,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(sS,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(lS,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(iS,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(dS,"href","/docs/transformers/pr_16974/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(cS,"href","/docs/transformers/pr_16974/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(fS,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraTokenizer"),c(mS,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(gS,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(hS,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetTokenizer"),c(pS,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(uS,"href","/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(_S,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelTokenizer"),c(bS,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(vS,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(FS,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(TS,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(MS,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(ES,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(CS,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(wS,"href","/docs/transformers/pr_16974/en/model_doc/herbert#transformers.HerbertTokenizer"),c(AS,"href","/docs/transformers/pr_16974/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(yS,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(LS,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaTokenizer"),c(xS,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c($S,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(kS,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(SS,"href","/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(RS,"href","/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(BS,"href","/docs/transformers/pr_16974/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(PS,"href","/docs/transformers/pr_16974/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(IS,"href","/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDTokenizer"),c(qS,"href","/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDTokenizerFast"),c(NS,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerTokenizer"),c(jS,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(DS,"href","/docs/transformers/pr_16974/en/model_doc/luke#transformers.LukeTokenizer"),c(GS,"href","/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(OS,"href","/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(VS,"href","/docs/transformers/pr_16974/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(XS,"href","/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianTokenizer"),c(zS,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartTokenizer"),c(QS,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartTokenizerFast"),c(WS,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(HS,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(US,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertTokenizer"),c(JS,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertTokenizerFast"),c(YS,"href","/docs/transformers/pr_16974/en/model_doc/mluke#transformers.MLukeTokenizer"),c(KS,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(ZS,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(eR,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(oR,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(rR,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.T5Tokenizer"),c(tR,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.T5TokenizerFast"),c(aR,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertTokenizer"),c(nR,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(sR,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(lR,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(iR,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(dR,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(cR,"href","/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(fR,"href","/docs/transformers/pr_16974/en/model_doc/phobert#transformers.PhobertTokenizer"),c(mR,"href","/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartTokenizer"),c(gR,"href","/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(hR,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertTokenizer"),c(pR,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertTokenizerFast"),c(uR,"href","/docs/transformers/pr_16974/en/model_doc/rag#transformers.RagTokenizer"),c(_R,"href","/docs/transformers/pr_16974/en/model_doc/realm#transformers.RealmTokenizer"),c(bR,"href","/docs/transformers/pr_16974/en/model_doc/realm#transformers.RealmTokenizerFast"),c(vR,"href","/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerTokenizer"),c(FR,"href","/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(TR,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertTokenizer"),c(MR,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(ER,"href","/docs/transformers/pr_16974/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(CR,"href","/docs/transformers/pr_16974/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(wR,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaTokenizer"),c(AR,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(yR,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(LR,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(xR,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c($R,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(kR,"href","/docs/transformers/pr_16974/en/model_doc/splinter#transformers.SplinterTokenizer"),c(SR,"href","/docs/transformers/pr_16974/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(RR,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(BR,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(PR,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.T5Tokenizer"),c(IR,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.T5TokenizerFast"),c(qR,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasTokenizer"),c(NR,"href","/docs/transformers/pr_16974/en/model_doc/tapex#transformers.TapexTokenizer"),c(jR,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(DR,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertTokenizer"),c(GR,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertTokenizerFast"),c(OR,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(VR,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(XR,"href","/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMTokenizer"),c(zR,"href","/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(QR,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMTokenizer"),c(WR,"href","/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(HR,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(UR,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(JR,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaTokenizer"),c(YR,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(KR,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(ZR,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(eB,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertTokenizer"),c(oB,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ig,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qg,"id","transformers.AutoFeatureExtractor"),c(qg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qg,"href","#transformers.AutoFeatureExtractor"),c(mi,"class","relative group"),c(rB,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(tB,"href","/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(aB,"href","/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(nB,"href","/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sB,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(lB,"href","/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(iB,"href","/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(dB,"href","/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(cB,"href","/docs/transformers/pr_16974/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(fB,"href","/docs/transformers/pr_16974/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(mB,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(gB,"href","/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(hB,"href","/docs/transformers/pr_16974/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(pB,"href","/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(uB,"href","/docs/transformers/pr_16974/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(_B,"href","/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(bB,"href","/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(vB,"href","/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(FB,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(TB,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(MB,"href","/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(EB,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(CB,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(wB,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(Xe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ch,"id","transformers.AutoProcessor"),c(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ch,"href","#transformers.AutoProcessor"),c(gi,"class","relative group"),c(AB,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(yB,"href","/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPProcessor"),c(LB,"href","/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(xB,"href","/docs/transformers/pr_16974/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c($B,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(kB,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(SB,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(RB,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(BB,"href","/docs/transformers/pr_16974/en/model_doc/trocr#transformers.TrOCRProcessor"),c(PB,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(IB,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(qB,"href","/docs/transformers/pr_16974/en/model_doc/vilt#transformers.ViltProcessor"),c(NB,"href","/docs/transformers/pr_16974/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(jB,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(DB,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lh,"id","transformers.AutoModel"),c(Lh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Lh,"href","#transformers.AutoModel"),c(pi,"class","relative group"),c(GB,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OB,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VB,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XB,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertModel"),c(zB,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartModel"),c(QB,"href","/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitModel"),c(WB,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertModel"),c(HB,"href","/docs/transformers/pr_16974/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(UB,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdModel"),c(JB,"href","/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(YB,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(KB,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(ZB,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertModel"),c(eP,"href","/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineModel"),c(oP,"href","/docs/transformers/pr_16974/en/model_doc/clip#transformers.CLIPModel"),c(rP,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertModel"),c(tP,"href","/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextModel"),c(aP,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLModel"),c(nP,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(sP,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(lP,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(iP,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaModel"),c(dP,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(cP,"href","/docs/transformers/pr_16974/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(fP,"href","/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTModel"),c(mP,"href","/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrModel"),c(gP,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertModel"),c(hP,"href","/docs/transformers/pr_16974/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(pP,"href","/docs/transformers/pr_16974/en/model_doc/dpt#transformers.DPTModel"),c(uP,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraModel"),c(_P,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertModel"),c(bP,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetModel"),c(vP,"href","/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTModel"),c(FP,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelModel"),c(TP,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelBaseModel"),c(MP,"href","/docs/transformers/pr_16974/en/model_doc/glpn#transformers.GLPNModel"),c(EP,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2Model"),c(CP,"href","/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(wP,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJModel"),c(AP,"href","/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertModel"),c(yP,"href","/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertModel"),c(LP,"href","/docs/transformers/pr_16974/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(xP,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMModel"),c($P,"href","/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(kP,"href","/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDModel"),c(SP,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerModel"),c(RP,"href","/docs/transformers/pr_16974/en/model_doc/luke#transformers.LukeModel"),c(BP,"href","/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertModel"),c(PP,"href","/docs/transformers/pr_16974/en/model_doc/m2m_100#transformers.M2M100Model"),c(IP,"href","/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianModel"),c(qP,"href","/docs/transformers/pr_16974/en/model_doc/maskformer#transformers.MaskFormerModel"),c(NP,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartModel"),c(jP,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(DP,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertModel"),c(GP,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetModel"),c(OP,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5Model"),c(VP,"href","/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerModel"),c(XP,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(zP,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusModel"),c(QP,"href","/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverModel"),c(WP,"href","/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartModel"),c(HP,"href","/docs/transformers/pr_16974/en/model_doc/poolformer#transformers.PoolFormerModel"),c(UP,"href","/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(JP,"href","/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertModel"),c(YP,"href","/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerModel"),c(KP,"href","/docs/transformers/pr_16974/en/model_doc/regnet#transformers.RegNetModel"),c(ZP,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertModel"),c(eI,"href","/docs/transformers/pr_16974/en/model_doc/resnet#transformers.ResNetModel"),c(oI,"href","/docs/transformers/pr_16974/en/model_doc/retribert#transformers.RetriBertModel"),c(rI,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaModel"),c(tI,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerModel"),c(aI,"href","/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerModel"),c(nI,"href","/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWModel"),c(sI,"href","/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDModel"),c(lI,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(iI,"href","/docs/transformers/pr_16974/en/model_doc/splinter#transformers.SplinterModel"),c(dI,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(cI,"href","/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinModel"),c(fI,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5Model"),c(mI,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasModel"),c(gI,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(hI,"href","/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechModel"),c(pI,"href","/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(uI,"href","/docs/transformers/pr_16974/en/model_doc/van#transformers.VanModel"),c(_I,"href","/docs/transformers/pr_16974/en/model_doc/vilt#transformers.ViltModel"),c(bI,"href","/docs/transformers/pr_16974/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(vI,"href","/docs/transformers/pr_16974/en/model_doc/visual_bert#transformers.VisualBertModel"),c(FI,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTModel"),c(TI,"href","/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(MI,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(EI,"href","/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMModel"),c(CI,"href","/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMModel"),c(wI,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMModel"),c(AI,"href","/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(yI,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(LI,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(xI,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetModel"),c($I,"href","/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoModel"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_u,"id","transformers.AutoModelForPreTraining"),c(_u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(_u,"href","#transformers.AutoModelForPreTraining"),c(bi,"class","relative group"),c(kI,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SI,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RI,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BI,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForPreTraining"),c(PI,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(II,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForPreTraining"),c(qI,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(NI,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(jI,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(DI,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(GI,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(OI,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(VI,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(XI,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForPreTraining"),c(zI,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(QI,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForPreTraining"),c(WI,"href","/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(HI,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(UI,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(JI,"href","/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(YI,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(KI,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ZI,"href","/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(eq,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(oq,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(rq,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(tq,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(aq,"href","/docs/transformers/pr_16974/en/model_doc/retribert#transformers.RetriBertModel"),c(nq,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(sq,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(lq,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(iq,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(dq,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(cq,"href","/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(fq,"href","/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(mq,"href","/docs/transformers/pr_16974/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(gq,"href","/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(hq,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(pq,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(uq,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(_q,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(bq,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(s_,"id","transformers.AutoModelForCausalLM"),c(s_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(s_,"href","#transformers.AutoModelForCausalLM"),c(Ti,"class","relative group"),c(vq,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Fq,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Tq,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mq,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForCausalLM"),c(Eq,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertLMHeadModel"),c(Cq,"href","/docs/transformers/pr_16974/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(wq,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(Aq,"href","/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(yq,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(Lq,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(xq,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForCausalLM"),c($q,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(kq,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(Sq,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForCausalLM"),c(Rq,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Bq,"href","/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(Pq,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(Iq,"href","/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianForCausalLM"),c(qq,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForCausalLM"),c(Nq,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(jq,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Dq,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(Gq,"href","/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(Oq,"href","/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(Vq,"href","/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(Xq,"href","/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c(zq,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(Qq,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(Wq,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(Hq,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(Uq,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Jq,"href","/docs/transformers/pr_16974/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(Yq,"href","/docs/transformers/pr_16974/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(Kq,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Zq,"href","/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(eN,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(oN,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(rN,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z_,"id","transformers.AutoModelForMaskedLM"),c(z_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z_,"href","#transformers.AutoModelForMaskedLM"),c(Ci,"class","relative group"),c(tN,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aN,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nN,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sN,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(lN,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(iN,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForMaskedLM"),c(dN,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(cN,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(fN,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(mN,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(gN,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(hN,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(pN,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(uN,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(_N,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(bN,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(vN,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(FN,"href","/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(TN,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(MN,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(EN,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(CN,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(wN,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(AN,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(yN,"href","/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(LN,"href","/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(xN,"href","/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c($N,"href","/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(kN,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(SN,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(RN,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(BN,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(PN,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(IN,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(qN,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(NN,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(jN,"href","/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($1,"id","transformers.AutoModelForSeq2SeqLM"),c($1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($1,"href","#transformers.AutoModelForSeq2SeqLM"),c(yi,"class","relative group"),c(DN,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GN,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ON,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VN,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(XN,"href","/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c(zN,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(QN,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(HN,"href","/docs/transformers/pr_16974/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(UN,"href","/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(JN,"href","/docs/transformers/pr_16974/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(YN,"href","/docs/transformers/pr_16974/en/model_doc/marian#transformers.MarianMTModel"),c(KN,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(ZN,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(ej,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(oj,"href","/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(rj,"href","/docs/transformers/pr_16974/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(tj,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(aj,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(nj,"href","/docs/transformers/pr_16974/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y1,"id","transformers.AutoModelForSequenceClassification"),c(Y1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y1,"href","#transformers.AutoModelForSequenceClassification"),c($i,"class","relative group"),c(sj,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lj,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ij,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dj,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(cj,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForSequenceClassification"),c(fj,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForSequenceClassification"),c(mj,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(gj,"href","/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(hj,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(pj,"href","/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(uj,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(_j,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(bj,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(vj,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(Fj,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(Tj,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(Mj,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(Ej,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(Cj,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(wj,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(Aj,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(yj,"href","/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(Lj,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(xj,"href","/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c($j,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(kj,"href","/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(Sj,"href","/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDForSequenceClassification"),c(Rj,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(Bj,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(Pj,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(Ij,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(qj,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(Nj,"href","/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(jj,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(Dj,"href","/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(Gj,"href","/docs/transformers/pr_16974/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(Oj,"href","/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(Vj,"href","/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(Xj,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c(zj,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(Qj,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(Wj,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(Hj,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hb,"id","transformers.AutoModelForMultipleChoice"),c(Hb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hb,"href","#transformers.AutoModelForMultipleChoice"),c(Ri,"class","relative group"),c(rD,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tD,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aD,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nD,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(sD,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForMultipleChoice"),c(lD,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(iD,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(dD,"href","/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(cD,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(fD,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(mD,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(gD,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(hD,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(pD,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(uD,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(_D,"href","/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(bD,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(vD,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(FD,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(TD,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(MD,"href","/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(ED,"href","/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(CD,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(wD,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(AD,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(yD,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(LD,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(xD,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c($D,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(kD,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(SD,"href","/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(A4,"id","transformers.AutoModelForNextSentencePrediction"),c(A4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(A4,"href","#transformers.AutoModelForNextSentencePrediction"),c(Ii,"class","relative group"),c(RD,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BD,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PD,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ID,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(qD,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(ND,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(jD,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(DD,"href","/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P4,"id","transformers.AutoModelForTokenClassification"),c(P4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P4,"href","#transformers.AutoModelForTokenClassification"),c(ji,"class","relative group"),c(GD,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(zD,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForTokenClassification"),c(QD,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(WD,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(HD,"href","/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineForTokenClassification"),c(UD,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(JD,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(YD,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(KD,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(ZD,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(eG,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(oG,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(rG,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(tG,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(aG,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(nG,"href","/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(sG,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(lG,"href","/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(iG,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(dG,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(cG,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(fG,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(mG,"href","/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(gG,"href","/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(hG,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(pG,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(uG,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(_G,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(bG,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(vG,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(FG,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(TG,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(MG,"href","/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(b2,"id","transformers.AutoModelForQuestionAnswering"),c(b2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(b2,"href","#transformers.AutoModelForQuestionAnswering"),c(Oi,"class","relative group"),c(EG,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(CG,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(wG,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AG,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(yG,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(LG,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(xG,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c($G,"href","/docs/transformers/pr_16974/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(kG,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(SG,"href","/docs/transformers/pr_16974/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(RG,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(BG,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(PG,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(IG,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(qG,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(NG,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(jG,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(DG,"href","/docs/transformers/pr_16974/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(GG,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(OG,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(VG,"href","/docs/transformers/pr_16974/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c(XG,"href","/docs/transformers/pr_16974/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(zG,"href","/docs/transformers/pr_16974/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(QG,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(WG,"href","/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(HG,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(UG,"href","/docs/transformers/pr_16974/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(JG,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(YG,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(KG,"href","/docs/transformers/pr_16974/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(ZG,"href","/docs/transformers/pr_16974/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(eO,"href","/docs/transformers/pr_16974/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(oO,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(rO,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(tO,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(aO,"href","/docs/transformers/pr_16974/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(nO,"href","/docs/transformers/pr_16974/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(sO,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(lO,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(iO,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(dO,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(cO,"href","/docs/transformers/pr_16974/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lv,"id","transformers.AutoModelForTableQuestionAnswering"),c(lv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(lv,"href","#transformers.AutoModelForTableQuestionAnswering"),c(zi,"class","relative group"),c(fO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hO,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mv,"id","transformers.AutoModelForImageClassification"),c(mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(mv,"href","#transformers.AutoModelForImageClassification"),c(Hi,"class","relative group"),c(pO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(uO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(_O,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bO,"href","/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitForImageClassification"),c(vO,"href","/docs/transformers/pr_16974/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(FO,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(TO,"href","/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTForImageClassification"),c(MO,"href","/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(EO,"href","/docs/transformers/pr_16974/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(CO,"href","/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(wO,"href","/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(AO,"href","/docs/transformers/pr_16974/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(yO,"href","/docs/transformers/pr_16974/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(LO,"href","/docs/transformers/pr_16974/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(xO,"href","/docs/transformers/pr_16974/en/model_doc/resnet#transformers.ResNetForImageClassification"),c($O,"href","/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(kO,"href","/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinForImageClassification"),c(SO,"href","/docs/transformers/pr_16974/en/model_doc/van#transformers.VanForImageClassification"),c(RO,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTForImageClassification"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yv,"id","transformers.AutoModelForVision2Seq"),c(yv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(yv,"href","#transformers.AutoModelForVision2Seq"),c(Yi,"class","relative group"),c(BO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qO,"href","/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForAudioClassification"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForAudioClassification"),c(ed,"class","relative group"),c(NO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(DO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GO,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(OO,"href","/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(VO,"href","/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWForSequenceClassification"),c(XO,"href","/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(zO,"href","/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(QO,"href","/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(WO,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(HO,"href","/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xv,"id","transformers.AutoModelForAudioFrameClassification"),c(Xv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Xv,"href","#transformers.AutoModelForAudioFrameClassification"),c(td,"class","relative group"),c(UO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(JO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(YO,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(KO,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(ZO,"href","/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(eV,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(oV,"href","/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Kv,"id","transformers.AutoModelForCTC"),c(Kv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Kv,"href","#transformers.AutoModelForCTC"),c(sd,"class","relative group"),c(rV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nV,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(sV,"href","/docs/transformers/pr_16974/en/model_doc/hubert#transformers.HubertForCTC"),c(lV,"href","/docs/transformers/pr_16974/en/model_doc/sew#transformers.SEWForCTC"),c(iV,"href","/docs/transformers/pr_16974/en/model_doc/sew-d#transformers.SEWDForCTC"),c(dV,"href","/docs/transformers/pr_16974/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(cV,"href","/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(fV,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(mV,"href","/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMForCTC"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cF,"id","transformers.AutoModelForSpeechSeq2Seq"),c(cF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cF,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(dd,"class","relative group"),c(gV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uV,"href","/docs/transformers/pr_16974/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(_V,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uF,"id","transformers.AutoModelForAudioXVector"),c(uF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uF,"href","#transformers.AutoModelForAudioXVector"),c(md,"class","relative group"),c(bV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TV,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(MV,"href","/docs/transformers/pr_16974/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(EV,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(CV,"href","/docs/transformers/pr_16974/en/model_doc/wavlm#transformers.WavLMForXVector"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(CF,"id","transformers.AutoModelForMaskedImageModeling"),c(CF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(CF,"href","#transformers.AutoModelForMaskedImageModeling"),c(pd,"class","relative group"),c(wV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LV,"href","/docs/transformers/pr_16974/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(xV,"href","/docs/transformers/pr_16974/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c($V,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(kF,"id","transformers.AutoModelForObjectDetection"),c(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(kF,"href","#transformers.AutoModelForObjectDetection"),c(vd,"class","relative group"),c(kV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BV,"href","/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrForObjectDetection"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IF,"id","transformers.AutoModelForImageSegmentation"),c(IF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(IF,"href","#transformers.AutoModelForImageSegmentation"),c(Md,"class","relative group"),c(PV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_16974/en/model_doc/detr#transformers.DetrForSegmentation"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForSemanticSegmentation"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForSemanticSegmentation"),c(wd,"class","relative group"),c(jV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OV,"href","/docs/transformers/pr_16974/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c(VV,"href","/docs/transformers/pr_16974/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(XV,"href","/docs/transformers/pr_16974/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(zV,"href","/docs/transformers/pr_16974/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UF,"id","transformers.AutoModelForInstanceSegmentation"),c(UF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UF,"href","#transformers.AutoModelForInstanceSegmentation"),c(Ld,"class","relative group"),c(QV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(WV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(HV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UV,"href","/docs/transformers/pr_16974/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e6,"id","transformers.TFAutoModel"),c(e6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e6,"href","#transformers.TFAutoModel"),c(kd,"class","relative group"),c(JV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KV,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZV,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertModel"),c(eX,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.TFBartModel"),c(oX,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertModel"),c(rX,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(tX,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(aX,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertModel"),c(nX,"href","/docs/transformers/pr_16974/en/model_doc/clip#transformers.TFCLIPModel"),c(sX,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertModel"),c(lX,"href","/docs/transformers/pr_16974/en/model_doc/convnext#transformers.TFConvNextModel"),c(iX,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.TFCTRLModel"),c(dX,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaModel"),c(cX,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(fX,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(mX,"href","/docs/transformers/pr_16974/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(gX,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraModel"),c(hX,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(pX,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelModel"),c(uX,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(_X,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.TFGPT2Model"),c(bX,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.TFGPTJModel"),c(vX,"href","/docs/transformers/pr_16974/en/model_doc/hubert#transformers.TFHubertModel"),c(FX,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(TX,"href","/docs/transformers/pr_16974/en/model_doc/led#transformers.TFLEDModel"),c(MX,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerModel"),c(EX,"href","/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.TFLxmertModel"),c(CX,"href","/docs/transformers/pr_16974/en/model_doc/marian#transformers.TFMarianModel"),c(wX,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.TFMBartModel"),c(AX,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(yX,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetModel"),c(LX,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.TFMT5Model"),c(xX,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c($X,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.TFPegasusModel"),c(kX,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertModel"),c(SX,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaModel"),c(RX,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerModel"),c(BX,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(PX,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.TFT5Model"),c(IX,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasModel"),c(qX,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(NX,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.TFViTModel"),c(jX,"href","/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(DX,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(GX,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMModel"),c(OX,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(VX,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetModel"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Q6,"id","transformers.TFAutoModelForPreTraining"),c(Q6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Q6,"href","#transformers.TFAutoModelForPreTraining"),c(Bd,"class","relative group"),c(XX,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zX,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(QX,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WX,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(HX,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(UX,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForPreTraining"),c(JX,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(YX,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(KX,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(ZX,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(ez,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(oz,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(rz,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(tz,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(az,"href","/docs/transformers/pr_16974/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(nz,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(sz,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(lz,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(iz,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(dz,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(cz,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(fz,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(mz,"href","/docs/transformers/pr_16974/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(gz,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(hz,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(pz,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(bT,"id","transformers.TFAutoModelForCausalLM"),c(bT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bT,"href","#transformers.TFAutoModelForCausalLM"),c(qd,"class","relative group"),c(uz,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_z,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bz,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vz,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(Fz,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(Tz,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Mz,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(Ez,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(Cz,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(wz,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(Az,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(yz,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(Lz,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(xz,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c($z,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RT,"id","transformers.TFAutoModelForImageClassification"),c(RT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RT,"href","#transformers.TFAutoModelForImageClassification"),c(Dd,"class","relative group"),c(kz,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Sz,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Rz,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bz,"href","/docs/transformers/pr_16974/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(Pz,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.TFViTForImageClassification"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NT,"id","transformers.TFAutoModelForMaskedLM"),c(NT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(NT,"href","#transformers.TFAutoModelForMaskedLM"),c(Vd,"class","relative group"),c(Iz,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qz,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Nz,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jz,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(Dz,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForMaskedLM"),c(Gz,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(Oz,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(Vz,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(Xz,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(zz,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Qz,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(Wz,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Hz,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(Uz,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Jz,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(Yz,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(Kz,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(eQ,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(oQ,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(rQ,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(aQ,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(l7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Qd,"class","relative group"),c(nQ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(sQ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(lQ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iQ,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(dQ,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(cQ,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(fQ,"href","/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(mQ,"href","/docs/transformers/pr_16974/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(gQ,"href","/docs/transformers/pr_16974/en/model_doc/marian#transformers.TFMarianMTModel"),c(hQ,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(pQ,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(uQ,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(_Q,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(F7,"id","transformers.TFAutoModelForSequenceClassification"),c(F7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(F7,"href","#transformers.TFAutoModelForSequenceClassification"),c(Ud,"class","relative group"),c(bQ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vQ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(FQ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TQ,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(MQ,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(EQ,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(CQ,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(wQ,"href","/docs/transformers/pr_16974/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(AQ,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(yQ,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(LQ,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(xQ,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c($Q,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(kQ,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(SQ,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(RQ,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(BQ,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(PQ,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(IQ,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(qQ,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(NQ,"href","/docs/transformers/pr_16974/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(jQ,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(DQ,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c(GQ,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(OQ,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(VQ,"href","/docs/transformers/pr_16974/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(XQ,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(zQ,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(QQ,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U7,"id","transformers.TFAutoModelForMultipleChoice"),c(U7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U7,"href","#transformers.TFAutoModelForMultipleChoice"),c(Kd,"class","relative group"),c(WQ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(HQ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(UQ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JQ,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(YQ,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(KQ,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(ZQ,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(eW,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(oW,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(rW,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(tW,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(aW,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(nW,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(sW,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(lW,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(iW,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(dW,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(cW,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(fW,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(mW,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p9,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(p9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(oc,"class","relative group"),c(gW,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hW,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pW,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uW,"href","/docs/transformers/pr_16974/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v9,"id","transformers.TFAutoModelForTokenClassification"),c(v9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v9,"href","#transformers.TFAutoModelForTokenClassification"),c(ac,"class","relative group"),c(_W,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bW,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vW,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FW,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(TW,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(MW,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(EW,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(CW,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(wW,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(AW,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(yW,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(LW,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(xW,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c($W,"href","/docs/transformers/pr_16974/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(kW,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(SW,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(RW,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(BW,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(PW,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c(IW,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(qW,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(NW,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(jW,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O9,"id","transformers.TFAutoModelForQuestionAnswering"),c(O9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O9,"href","#transformers.TFAutoModelForQuestionAnswering"),c(lc,"class","relative group"),c(DW,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GW,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OW,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VW,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(XW,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(zW,"href","/docs/transformers/pr_16974/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(QW,"href","/docs/transformers/pr_16974/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(WW,"href","/docs/transformers/pr_16974/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(HW,"href","/docs/transformers/pr_16974/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(UW,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(JW,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(YW,"href","/docs/transformers/pr_16974/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(KW,"href","/docs/transformers/pr_16974/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(ZW,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(eH,"href","/docs/transformers/pr_16974/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(oH,"href","/docs/transformers/pr_16974/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(rH,"href","/docs/transformers/pr_16974/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(tH,"href","/docs/transformers/pr_16974/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(aH,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(nH,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(sH,"href","/docs/transformers/pr_16974/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(lH,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(iH,"href","/docs/transformers/pr_16974/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fM,"id","transformers.TFAutoModelForVision2Seq"),c(fM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(fM,"href","#transformers.TFAutoModelForVision2Seq"),c(cc,"class","relative group"),c(dH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mH,"href","/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(pM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(pM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(gc,"class","relative group"),c(gH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(hH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(pH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uH,"href","/docs/transformers/pr_16974/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vM,"id","transformers.FlaxAutoModel"),c(vM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(vM,"href","#transformers.FlaxAutoModel"),c(uc,"class","relative group"),c(_H,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FH,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertModel"),c(TH,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartModel"),c(MH,"href","/docs/transformers/pr_16974/en/model_doc/beit#transformers.FlaxBeitModel"),c(EH,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertModel"),c(CH,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(wH,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(AH,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(yH,"href","/docs/transformers/pr_16974/en/model_doc/clip#transformers.FlaxCLIPModel"),c(LH,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(xH,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraModel"),c($H,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(kH,"href","/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(SH,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(RH,"href","/docs/transformers/pr_16974/en/model_doc/marian#transformers.FlaxMarianModel"),c(BH,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartModel"),c(PH,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.FlaxMT5Model"),c(IH,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(qH,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(NH,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(jH,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.FlaxT5Model"),c(DH,"href","/docs/transformers/pr_16974/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(GH,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.FlaxViTModel"),c(OH,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(VH,"href","/docs/transformers/pr_16974/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(XH,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(WM,"id","transformers.FlaxAutoModelForCausalLM"),c(WM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(WM,"href","#transformers.FlaxAutoModelForCausalLM"),c(vc,"class","relative group"),c(zH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(QH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(WH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(HH,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(UH,"href","/docs/transformers/pr_16974/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(JH,"href","/docs/transformers/pr_16974/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(YH,"href","/docs/transformers/pr_16974/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(KH,"href","/docs/transformers/pr_16974/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.FlaxAutoModelForPreTraining"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.FlaxAutoModelForPreTraining"),c(Mc,"class","relative group"),c(ZH,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rU,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(tU,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(aU,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(nU,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(sU,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(lU,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(iU,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(dU,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(cU,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(fU,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(mU,"href","/docs/transformers/pr_16974/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(gU,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(uE,"id","transformers.FlaxAutoModelForMaskedLM"),c(uE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uE,"href","#transformers.FlaxAutoModelForMaskedLM"),c(wc,"class","relative group"),c(hU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(uU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_U,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(bU,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(vU,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(FU,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(TU,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(MU,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(EU,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(CU,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(wU,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(AU,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(xE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(xE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Lc,"class","relative group"),c(yU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($U,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(kU,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c(SU,"href","/docs/transformers/pr_16974/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(RU,"href","/docs/transformers/pr_16974/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(BU,"href","/docs/transformers/pr_16974/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(PU,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(IU,"href","/docs/transformers/pr_16974/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(qU,"href","/docs/transformers/pr_16974/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(NU,"href","/docs/transformers/pr_16974/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(GE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(kc,"class","relative group"),c(jU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(VU,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(XU,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(zU,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(QU,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(WU,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(HU,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(UU,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(JU,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(YU,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(e5,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(e5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(e5,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Bc,"class","relative group"),c(KU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ZU,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(eJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oJ,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(rJ,"href","/docs/transformers/pr_16974/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(tJ,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(aJ,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(nJ,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(sJ,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(lJ,"href","/docs/transformers/pr_16974/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(iJ,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(dJ,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(cJ,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(g5,"id","transformers.FlaxAutoModelForTokenClassification"),c(g5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(g5,"href","#transformers.FlaxAutoModelForTokenClassification"),c(qc,"class","relative group"),c(fJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hJ,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(pJ,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(uJ,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(_J,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(bJ,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(vJ,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(FJ,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(TJ,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C5,"id","transformers.FlaxAutoModelForMultipleChoice"),c(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C5,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Dc,"class","relative group"),c(MJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wJ,"href","/docs/transformers/pr_16974/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(AJ,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(yJ,"href","/docs/transformers/pr_16974/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(LJ,"href","/docs/transformers/pr_16974/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(xJ,"href","/docs/transformers/pr_16974/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c($J,"href","/docs/transformers/pr_16974/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(kJ,"href","/docs/transformers/pr_16974/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c(SJ,"href","/docs/transformers/pr_16974/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(P5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(P5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(P5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Vc,"class","relative group"),c(RJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IJ,"href","/docs/transformers/pr_16974/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(j5,"id","transformers.FlaxAutoModelForImageClassification"),c(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(j5,"href","#transformers.FlaxAutoModelForImageClassification"),c(Qc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_16974/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(GJ,"href","/docs/transformers/pr_16974/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(X5,"id","transformers.FlaxAutoModelForVision2Seq"),c(X5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(X5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(Uc,"class","relative group"),c(OJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XJ,"href","/docs/transformers/pr_16974/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zJ,"href","/docs/transformers/pr_16974/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Fo),e(Fo,oi),b(f,of,_),b(f,Yr,_),e(Yr,ri),e(Yr,ti),e(ti,dw),e(Yr,rf),b(f,Ie,_),b(f,Oe,_),e(Oe,ai),e(Oe,Tn),e(Tn,cw),e(Oe,Mn),e(Oe,En),e(En,fw),e(Oe,ni),e(Oe,Cn),e(Cn,mw),e(Oe,si),b(f,tf,_),M(ba,f,_),b(f,Ve,_),b(f,Ae,_),e(Ae,Cx),e(Ae,li),e(li,wx),e(Ae,Ax),b(f,To,_),b(f,va,_),e(va,yx),e(va,af),e(af,Lx),e(va,Rqe),b(f,yRe,_),b(f,ii,_),e(ii,nf),e(nf,IK),M(gw,IK,null),e(ii,Bqe),e(ii,qK),e(qK,Pqe),b(f,LRe,_),b(f,wn,_),e(wn,Iqe),e(wn,NK),e(NK,qqe),e(wn,Nqe),e(wn,jK),e(jK,jqe),e(wn,Dqe),b(f,xRe,_),M(hw,f,_),b(f,$Re,_),b(f,xx,_),e(xx,Gqe),b(f,kRe,_),M(sf,f,_),b(f,SRe,_),b(f,di,_),e(di,lf),e(lf,DK),M(pw,DK,null),e(di,Oqe),e(di,GK),e(GK,Vqe),b(f,RRe,_),b(f,Mo,_),M(uw,Mo,null),e(Mo,Xqe),e(Mo,_w),e(_w,zqe),e(_w,$x),e($x,Qqe),e(_w,Wqe),e(Mo,Hqe),e(Mo,bw),e(bw,Uqe),e(bw,OK),e(OK,Jqe),e(bw,Yqe),e(Mo,Kqe),e(Mo,Fr),M(vw,Fr,null),e(Fr,Zqe),e(Fr,VK),e(VK,eNe),e(Fr,oNe),e(Fr,ci),e(ci,rNe),e(ci,XK),e(XK,tNe),e(ci,aNe),e(ci,zK),e(zK,nNe),e(ci,sNe),e(Fr,lNe),e(Fr,y),e(y,df),e(df,QK),e(QK,iNe),e(df,dNe),e(df,kx),e(kx,cNe),e(df,fNe),e(y,mNe),e(y,cf),e(cf,WK),e(WK,gNe),e(cf,hNe),e(cf,Sx),e(Sx,pNe),e(cf,uNe),e(y,_Ne),e(y,ff),e(ff,HK),e(HK,bNe),e(ff,vNe),e(ff,Rx),e(Rx,FNe),e(ff,TNe),e(y,MNe),e(y,mf),e(mf,UK),e(UK,ENe),e(mf,CNe),e(mf,Bx),e(Bx,wNe),e(mf,ANe),e(y,yNe),e(y,gf),e(gf,JK),e(JK,LNe),e(gf,xNe),e(gf,Px),e(Px,$Ne),e(gf,kNe),e(y,SNe),e(y,hf),e(hf,YK),e(YK,RNe),e(hf,BNe),e(hf,Ix),e(Ix,PNe),e(hf,INe),e(y,qNe),e(y,pf),e(pf,KK),e(KK,NNe),e(pf,jNe),e(pf,qx),e(qx,DNe),e(pf,GNe),e(y,ONe),e(y,uf),e(uf,ZK),e(ZK,VNe),e(uf,XNe),e(uf,Nx),e(Nx,zNe),e(uf,QNe),e(y,WNe),e(y,_f),e(_f,eZ),e(eZ,HNe),e(_f,UNe),e(_f,jx),e(jx,JNe),e(_f,YNe),e(y,KNe),e(y,bf),e(bf,oZ),e(oZ,ZNe),e(bf,eje),e(bf,Dx),e(Dx,oje),e(bf,rje),e(y,tje),e(y,vf),e(vf,rZ),e(rZ,aje),e(vf,nje),e(vf,Gx),e(Gx,sje),e(vf,lje),e(y,ije),e(y,Ff),e(Ff,tZ),e(tZ,dje),e(Ff,cje),e(Ff,Ox),e(Ox,fje),e(Ff,mje),e(y,gje),e(y,Tf),e(Tf,aZ),e(aZ,hje),e(Tf,pje),e(Tf,Vx),e(Vx,uje),e(Tf,_je),e(y,bje),e(y,Mf),e(Mf,nZ),e(nZ,vje),e(Mf,Fje),e(Mf,Xx),e(Xx,Tje),e(Mf,Mje),e(y,Eje),e(y,Ef),e(Ef,sZ),e(sZ,Cje),e(Ef,wje),e(Ef,zx),e(zx,Aje),e(Ef,yje),e(y,Lje),e(y,Cf),e(Cf,lZ),e(lZ,xje),e(Cf,$je),e(Cf,Qx),e(Qx,kje),e(Cf,Sje),e(y,Rje),e(y,wf),e(wf,iZ),e(iZ,Bje),e(wf,Pje),e(wf,Wx),e(Wx,Ije),e(wf,qje),e(y,Nje),e(y,Af),e(Af,dZ),e(dZ,jje),e(Af,Dje),e(Af,Hx),e(Hx,Gje),e(Af,Oje),e(y,Vje),e(y,yf),e(yf,cZ),e(cZ,Xje),e(yf,zje),e(yf,Ux),e(Ux,Qje),e(yf,Wje),e(y,Hje),e(y,Lf),e(Lf,fZ),e(fZ,Uje),e(Lf,Jje),e(Lf,Jx),e(Jx,Yje),e(Lf,Kje),e(y,Zje),e(y,xf),e(xf,mZ),e(mZ,eDe),e(xf,oDe),e(xf,Yx),e(Yx,rDe),e(xf,tDe),e(y,aDe),e(y,$f),e($f,gZ),e(gZ,nDe),e($f,sDe),e($f,Kx),e(Kx,lDe),e($f,iDe),e(y,dDe),e(y,kf),e(kf,hZ),e(hZ,cDe),e(kf,fDe),e(kf,Zx),e(Zx,mDe),e(kf,gDe),e(y,hDe),e(y,Sf),e(Sf,pZ),e(pZ,pDe),e(Sf,uDe),e(Sf,e$),e(e$,_De),e(Sf,bDe),e(y,vDe),e(y,Rf),e(Rf,uZ),e(uZ,FDe),e(Rf,TDe),e(Rf,o$),e(o$,MDe),e(Rf,EDe),e(y,CDe),e(y,Bf),e(Bf,_Z),e(_Z,wDe),e(Bf,ADe),e(Bf,r$),e(r$,yDe),e(Bf,LDe),e(y,xDe),e(y,Pf),e(Pf,bZ),e(bZ,$De),e(Pf,kDe),e(Pf,t$),e(t$,SDe),e(Pf,RDe),e(y,BDe),e(y,If),e(If,vZ),e(vZ,PDe),e(If,IDe),e(If,a$),e(a$,qDe),e(If,NDe),e(y,jDe),e(y,qf),e(qf,FZ),e(FZ,DDe),e(qf,GDe),e(qf,n$),e(n$,ODe),e(qf,VDe),e(y,XDe),e(y,Nf),e(Nf,TZ),e(TZ,zDe),e(Nf,QDe),e(Nf,s$),e(s$,WDe),e(Nf,HDe),e(y,UDe),e(y,jf),e(jf,MZ),e(MZ,JDe),e(jf,YDe),e(jf,l$),e(l$,KDe),e(jf,ZDe),e(y,eGe),e(y,Df),e(Df,EZ),e(EZ,oGe),e(Df,rGe),e(Df,i$),e(i$,tGe),e(Df,aGe),e(y,nGe),e(y,Gf),e(Gf,CZ),e(CZ,sGe),e(Gf,lGe),e(Gf,d$),e(d$,iGe),e(Gf,dGe),e(y,cGe),e(y,Of),e(Of,wZ),e(wZ,fGe),e(Of,mGe),e(Of,c$),e(c$,gGe),e(Of,hGe),e(y,pGe),e(y,Vf),e(Vf,AZ),e(AZ,uGe),e(Vf,_Ge),e(Vf,f$),e(f$,bGe),e(Vf,vGe),e(y,FGe),e(y,Xf),e(Xf,yZ),e(yZ,TGe),e(Xf,MGe),e(Xf,m$),e(m$,EGe),e(Xf,CGe),e(y,wGe),e(y,zf),e(zf,LZ),e(LZ,AGe),e(zf,yGe),e(zf,g$),e(g$,LGe),e(zf,xGe),e(y,$Ge),e(y,Qf),e(Qf,xZ),e(xZ,kGe),e(Qf,SGe),e(Qf,h$),e(h$,RGe),e(Qf,BGe),e(y,PGe),e(y,Wf),e(Wf,$Z),e($Z,IGe),e(Wf,qGe),e(Wf,p$),e(p$,NGe),e(Wf,jGe),e(y,DGe),e(y,Hf),e(Hf,kZ),e(kZ,GGe),e(Hf,OGe),e(Hf,u$),e(u$,VGe),e(Hf,XGe),e(y,zGe),e(y,Uf),e(Uf,SZ),e(SZ,QGe),e(Uf,WGe),e(Uf,_$),e(_$,HGe),e(Uf,UGe),e(y,JGe),e(y,Jf),e(Jf,RZ),e(RZ,YGe),e(Jf,KGe),e(Jf,b$),e(b$,ZGe),e(Jf,eOe),e(y,oOe),e(y,Yf),e(Yf,BZ),e(BZ,rOe),e(Yf,tOe),e(Yf,v$),e(v$,aOe),e(Yf,nOe),e(y,sOe),e(y,Kf),e(Kf,PZ),e(PZ,lOe),e(Kf,iOe),e(Kf,F$),e(F$,dOe),e(Kf,cOe),e(y,fOe),e(y,Zf),e(Zf,IZ),e(IZ,mOe),e(Zf,gOe),e(Zf,T$),e(T$,hOe),e(Zf,pOe),e(y,uOe),e(y,em),e(em,qZ),e(qZ,_Oe),e(em,bOe),e(em,M$),e(M$,vOe),e(em,FOe),e(y,TOe),e(y,om),e(om,NZ),e(NZ,MOe),e(om,EOe),e(om,E$),e(E$,COe),e(om,wOe),e(y,AOe),e(y,rm),e(rm,jZ),e(jZ,yOe),e(rm,LOe),e(rm,C$),e(C$,xOe),e(rm,$Oe),e(y,kOe),e(y,tm),e(tm,DZ),e(DZ,SOe),e(tm,ROe),e(tm,w$),e(w$,BOe),e(tm,POe),e(y,IOe),e(y,am),e(am,GZ),e(GZ,qOe),e(am,NOe),e(am,A$),e(A$,jOe),e(am,DOe),e(y,GOe),e(y,nm),e(nm,OZ),e(OZ,OOe),e(nm,VOe),e(nm,y$),e(y$,XOe),e(nm,zOe),e(y,QOe),e(y,sm),e(sm,VZ),e(VZ,WOe),e(sm,HOe),e(sm,L$),e(L$,UOe),e(sm,JOe),e(y,YOe),e(y,lm),e(lm,XZ),e(XZ,KOe),e(lm,ZOe),e(lm,x$),e(x$,eVe),e(lm,oVe),e(y,rVe),e(y,im),e(im,zZ),e(zZ,tVe),e(im,aVe),e(im,$$),e($$,nVe),e(im,sVe),e(y,lVe),e(y,dm),e(dm,QZ),e(QZ,iVe),e(dm,dVe),e(dm,k$),e(k$,cVe),e(dm,fVe),e(y,mVe),e(y,cm),e(cm,WZ),e(WZ,gVe),e(cm,hVe),e(cm,S$),e(S$,pVe),e(cm,uVe),e(y,_Ve),e(y,fm),e(fm,HZ),e(HZ,bVe),e(fm,vVe),e(fm,R$),e(R$,FVe),e(fm,TVe),e(y,MVe),e(y,mm),e(mm,UZ),e(UZ,EVe),e(mm,CVe),e(mm,B$),e(B$,wVe),e(mm,AVe),e(y,yVe),e(y,gm),e(gm,JZ),e(JZ,LVe),e(gm,xVe),e(gm,P$),e(P$,$Ve),e(gm,kVe),e(y,SVe),e(y,hm),e(hm,YZ),e(YZ,RVe),e(hm,BVe),e(hm,I$),e(I$,PVe),e(hm,IVe),e(y,qVe),e(y,pm),e(pm,KZ),e(KZ,NVe),e(pm,jVe),e(pm,q$),e(q$,DVe),e(pm,GVe),e(y,OVe),e(y,um),e(um,ZZ),e(ZZ,VVe),e(um,XVe),e(um,N$),e(N$,zVe),e(um,QVe),e(y,WVe),e(y,_m),e(_m,eee),e(eee,HVe),e(_m,UVe),e(_m,j$),e(j$,JVe),e(_m,YVe),e(y,KVe),e(y,bm),e(bm,oee),e(oee,ZVe),e(bm,eXe),e(bm,D$),e(D$,oXe),e(bm,rXe),e(y,tXe),e(y,vm),e(vm,ree),e(ree,aXe),e(vm,nXe),e(vm,G$),e(G$,sXe),e(vm,lXe),e(y,iXe),e(y,Fm),e(Fm,tee),e(tee,dXe),e(Fm,cXe),e(Fm,O$),e(O$,fXe),e(Fm,mXe),e(y,gXe),e(y,Tm),e(Tm,aee),e(aee,hXe),e(Tm,pXe),e(Tm,V$),e(V$,uXe),e(Tm,_Xe),e(y,bXe),e(y,Mm),e(Mm,nee),e(nee,vXe),e(Mm,FXe),e(Mm,X$),e(X$,TXe),e(Mm,MXe),e(y,EXe),e(y,Em),e(Em,see),e(see,CXe),e(Em,wXe),e(Em,z$),e(z$,AXe),e(Em,yXe),e(y,LXe),e(y,Cm),e(Cm,lee),e(lee,xXe),e(Cm,$Xe),e(Cm,Q$),e(Q$,kXe),e(Cm,SXe),e(y,RXe),e(y,wm),e(wm,iee),e(iee,BXe),e(wm,PXe),e(wm,W$),e(W$,IXe),e(wm,qXe),e(y,NXe),e(y,Am),e(Am,dee),e(dee,jXe),e(Am,DXe),e(Am,H$),e(H$,GXe),e(Am,OXe),e(y,VXe),e(y,ym),e(ym,cee),e(cee,XXe),e(ym,zXe),e(ym,U$),e(U$,QXe),e(ym,WXe),e(y,HXe),e(y,Lm),e(Lm,fee),e(fee,UXe),e(Lm,JXe),e(Lm,J$),e(J$,YXe),e(Lm,KXe),e(y,ZXe),e(y,xm),e(xm,mee),e(mee,eze),e(xm,oze),e(xm,Y$),e(Y$,rze),e(xm,tze),e(y,aze),e(y,$m),e($m,gee),e(gee,nze),e($m,sze),e($m,K$),e(K$,lze),e($m,ize),e(y,dze),e(y,km),e(km,hee),e(hee,cze),e(km,fze),e(km,Z$),e(Z$,mze),e(km,gze),e(y,hze),e(y,Sm),e(Sm,pee),e(pee,pze),e(Sm,uze),e(Sm,ek),e(ek,_ze),e(Sm,bze),e(y,vze),e(y,Rm),e(Rm,uee),e(uee,Fze),e(Rm,Tze),e(Rm,ok),e(ok,Mze),e(Rm,Eze),e(y,Cze),e(y,Bm),e(Bm,_ee),e(_ee,wze),e(Bm,Aze),e(Bm,rk),e(rk,yze),e(Bm,Lze),e(y,xze),e(y,Pm),e(Pm,bee),e(bee,$ze),e(Pm,kze),e(Pm,tk),e(tk,Sze),e(Pm,Rze),e(y,Bze),e(y,Im),e(Im,vee),e(vee,Pze),e(Im,Ize),e(Im,ak),e(ak,qze),e(Im,Nze),e(y,jze),e(y,qm),e(qm,Fee),e(Fee,Dze),e(qm,Gze),e(qm,nk),e(nk,Oze),e(qm,Vze),e(y,Xze),e(y,Nm),e(Nm,Tee),e(Tee,zze),e(Nm,Qze),e(Nm,sk),e(sk,Wze),e(Nm,Hze),e(y,Uze),e(y,jm),e(jm,Mee),e(Mee,Jze),e(jm,Yze),e(jm,lk),e(lk,Kze),e(jm,Zze),e(y,eQe),e(y,Dm),e(Dm,Eee),e(Eee,oQe),e(Dm,rQe),e(Dm,ik),e(ik,tQe),e(Dm,aQe),e(y,nQe),e(y,Gm),e(Gm,Cee),e(Cee,sQe),e(Gm,lQe),e(Gm,dk),e(dk,iQe),e(Gm,dQe),e(y,cQe),e(y,Om),e(Om,wee),e(wee,fQe),e(Om,mQe),e(Om,ck),e(ck,gQe),e(Om,hQe),e(y,pQe),e(y,Vm),e(Vm,Aee),e(Aee,uQe),e(Vm,_Qe),e(Vm,fk),e(fk,bQe),e(Vm,vQe),e(y,FQe),e(y,Xm),e(Xm,yee),e(yee,TQe),e(Xm,MQe),e(Xm,mk),e(mk,EQe),e(Xm,CQe),e(y,wQe),e(y,zm),e(zm,Lee),e(Lee,AQe),e(zm,yQe),e(zm,gk),e(gk,LQe),e(zm,xQe),e(y,$Qe),e(y,Qm),e(Qm,xee),e(xee,kQe),e(Qm,SQe),e(Qm,hk),e(hk,RQe),e(Qm,BQe),e(y,PQe),e(y,Wm),e(Wm,$ee),e($ee,IQe),e(Wm,qQe),e(Wm,pk),e(pk,NQe),e(Wm,jQe),e(y,DQe),e(y,Hm),e(Hm,kee),e(kee,GQe),e(Hm,OQe),e(Hm,uk),e(uk,VQe),e(Hm,XQe),e(y,zQe),e(y,Um),e(Um,See),e(See,QQe),e(Um,WQe),e(Um,_k),e(_k,HQe),e(Um,UQe),e(y,JQe),e(y,Jm),e(Jm,Ree),e(Ree,YQe),e(Jm,KQe),e(Jm,bk),e(bk,ZQe),e(Jm,eWe),e(y,oWe),e(y,Ym),e(Ym,Bee),e(Bee,rWe),e(Ym,tWe),e(Ym,vk),e(vk,aWe),e(Ym,nWe),e(y,sWe),e(y,Km),e(Km,Pee),e(Pee,lWe),e(Km,iWe),e(Km,Fk),e(Fk,dWe),e(Km,cWe),e(y,fWe),e(y,Zm),e(Zm,Iee),e(Iee,mWe),e(Zm,gWe),e(Zm,Tk),e(Tk,hWe),e(Zm,pWe),e(y,uWe),e(y,eg),e(eg,qee),e(qee,_We),e(eg,bWe),e(eg,Mk),e(Mk,vWe),e(eg,FWe),e(y,TWe),e(y,og),e(og,Nee),e(Nee,MWe),e(og,EWe),e(og,Ek),e(Ek,CWe),e(og,wWe),e(y,AWe),e(y,rg),e(rg,jee),e(jee,yWe),e(rg,LWe),e(rg,Ck),e(Ck,xWe),e(rg,$We),e(Fr,kWe),M(tg,Fr,null),e(Mo,SWe),e(Mo,ag),M(Fw,ag,null),e(ag,RWe),e(ag,Dee),e(Dee,BWe),b(f,BRe,_),b(f,fi,_),e(fi,ng),e(ng,Gee),M(Tw,Gee,null),e(fi,PWe),e(fi,Oee),e(Oee,IWe),b(f,PRe,_),b(f,Eo,_),M(Mw,Eo,null),e(Eo,qWe),e(Eo,Ew),e(Ew,NWe),e(Ew,wk),e(wk,jWe),e(Ew,DWe),e(Eo,GWe),e(Eo,Cw),e(Cw,OWe),e(Cw,Vee),e(Vee,VWe),e(Cw,XWe),e(Eo,zWe),e(Eo,Tr),M(ww,Tr,null),e(Tr,QWe),e(Tr,Xee),e(Xee,WWe),e(Tr,HWe),e(Tr,Fa),e(Fa,UWe),e(Fa,zee),e(zee,JWe),e(Fa,YWe),e(Fa,Qee),e(Qee,KWe),e(Fa,ZWe),e(Fa,Wee),e(Wee,eHe),e(Fa,oHe),e(Tr,rHe),e(Tr,k),e(k,An),e(An,Hee),e(Hee,tHe),e(An,aHe),e(An,Ak),e(Ak,nHe),e(An,sHe),e(An,yk),e(yk,lHe),e(An,iHe),e(k,dHe),e(k,yn),e(yn,Uee),e(Uee,cHe),e(yn,fHe),e(yn,Lk),e(Lk,mHe),e(yn,gHe),e(yn,xk),e(xk,hHe),e(yn,pHe),e(k,uHe),e(k,Ln),e(Ln,Jee),e(Jee,_He),e(Ln,bHe),e(Ln,$k),e($k,vHe),e(Ln,FHe),e(Ln,kk),e(kk,THe),e(Ln,MHe),e(k,EHe),e(k,sg),e(sg,Yee),e(Yee,CHe),e(sg,wHe),e(sg,Sk),e(Sk,AHe),e(sg,yHe),e(k,LHe),e(k,xn),e(xn,Kee),e(Kee,xHe),e(xn,$He),e(xn,Rk),e(Rk,kHe),e(xn,SHe),e(xn,Bk),e(Bk,RHe),e(xn,BHe),e(k,PHe),e(k,lg),e(lg,Zee),e(Zee,IHe),e(lg,qHe),e(lg,Pk),e(Pk,NHe),e(lg,jHe),e(k,DHe),e(k,ig),e(ig,eoe),e(eoe,GHe),e(ig,OHe),e(ig,Ik),e(Ik,VHe),e(ig,XHe),e(k,zHe),e(k,dg),e(dg,ooe),e(ooe,QHe),e(dg,WHe),e(dg,qk),e(qk,HHe),e(dg,UHe),e(k,JHe),e(k,$n),e($n,roe),e(roe,YHe),e($n,KHe),e($n,Nk),e(Nk,ZHe),e($n,eUe),e($n,jk),e(jk,oUe),e($n,rUe),e(k,tUe),e(k,kn),e(kn,toe),e(toe,aUe),e(kn,nUe),e(kn,Dk),e(Dk,sUe),e(kn,lUe),e(kn,Gk),e(Gk,iUe),e(kn,dUe),e(k,cUe),e(k,Sn),e(Sn,aoe),e(aoe,fUe),e(Sn,mUe),e(Sn,Ok),e(Ok,gUe),e(Sn,hUe),e(Sn,Vk),e(Vk,pUe),e(Sn,uUe),e(k,_Ue),e(k,cg),e(cg,noe),e(noe,bUe),e(cg,vUe),e(cg,Xk),e(Xk,FUe),e(cg,TUe),e(k,MUe),e(k,fg),e(fg,soe),e(soe,EUe),e(fg,CUe),e(fg,zk),e(zk,wUe),e(fg,AUe),e(k,yUe),e(k,Rn),e(Rn,loe),e(loe,LUe),e(Rn,xUe),e(Rn,Qk),e(Qk,$Ue),e(Rn,kUe),e(Rn,Wk),e(Wk,SUe),e(Rn,RUe),e(k,BUe),e(k,mg),e(mg,ioe),e(ioe,PUe),e(mg,IUe),e(mg,Hk),e(Hk,qUe),e(mg,NUe),e(k,jUe),e(k,Bn),e(Bn,doe),e(doe,DUe),e(Bn,GUe),e(Bn,Uk),e(Uk,OUe),e(Bn,VUe),e(Bn,Jk),e(Jk,XUe),e(Bn,zUe),e(k,QUe),e(k,Pn),e(Pn,coe),e(coe,WUe),e(Pn,HUe),e(Pn,Yk),e(Yk,UUe),e(Pn,JUe),e(Pn,Kk),e(Kk,YUe),e(Pn,KUe),e(k,ZUe),e(k,In),e(In,foe),e(foe,eJe),e(In,oJe),e(In,Zk),e(Zk,rJe),e(In,tJe),e(In,moe),e(moe,aJe),e(In,nJe),e(k,sJe),e(k,gg),e(gg,goe),e(goe,lJe),e(gg,iJe),e(gg,eS),e(eS,dJe),e(gg,cJe),e(k,fJe),e(k,qn),e(qn,hoe),e(hoe,mJe),e(qn,gJe),e(qn,oS),e(oS,hJe),e(qn,pJe),e(qn,rS),e(rS,uJe),e(qn,_Je),e(k,bJe),e(k,Nn),e(Nn,poe),e(poe,vJe),e(Nn,FJe),e(Nn,tS),e(tS,TJe),e(Nn,MJe),e(Nn,aS),e(aS,EJe),e(Nn,CJe),e(k,wJe),e(k,jn),e(jn,uoe),e(uoe,AJe),e(jn,yJe),e(jn,nS),e(nS,LJe),e(jn,xJe),e(jn,sS),e(sS,$Je),e(jn,kJe),e(k,SJe),e(k,Dn),e(Dn,_oe),e(_oe,RJe),e(Dn,BJe),e(Dn,lS),e(lS,PJe),e(Dn,IJe),e(Dn,iS),e(iS,qJe),e(Dn,NJe),e(k,jJe),e(k,Gn),e(Gn,boe),e(boe,DJe),e(Gn,GJe),e(Gn,dS),e(dS,OJe),e(Gn,VJe),e(Gn,cS),e(cS,XJe),e(Gn,zJe),e(k,QJe),e(k,On),e(On,voe),e(voe,WJe),e(On,HJe),e(On,fS),e(fS,UJe),e(On,JJe),e(On,mS),e(mS,YJe),e(On,KJe),e(k,ZJe),e(k,hg),e(hg,Foe),e(Foe,eYe),e(hg,oYe),e(hg,gS),e(gS,rYe),e(hg,tYe),e(k,aYe),e(k,Vn),e(Vn,Toe),e(Toe,nYe),e(Vn,sYe),e(Vn,hS),e(hS,lYe),e(Vn,iYe),e(Vn,pS),e(pS,dYe),e(Vn,cYe),e(k,fYe),e(k,pg),e(pg,Moe),e(Moe,mYe),e(pg,gYe),e(pg,uS),e(uS,hYe),e(pg,pYe),e(k,uYe),e(k,Xn),e(Xn,Eoe),e(Eoe,_Ye),e(Xn,bYe),e(Xn,_S),e(_S,vYe),e(Xn,FYe),e(Xn,bS),e(bS,TYe),e(Xn,MYe),e(k,EYe),e(k,zn),e(zn,Coe),e(Coe,CYe),e(zn,wYe),e(zn,vS),e(vS,AYe),e(zn,yYe),e(zn,FS),e(FS,LYe),e(zn,xYe),e(k,$Ye),e(k,Qn),e(Qn,woe),e(woe,kYe),e(Qn,SYe),e(Qn,TS),e(TS,RYe),e(Qn,BYe),e(Qn,MS),e(MS,PYe),e(Qn,IYe),e(k,qYe),e(k,Wn),e(Wn,Aoe),e(Aoe,NYe),e(Wn,jYe),e(Wn,ES),e(ES,DYe),e(Wn,GYe),e(Wn,CS),e(CS,OYe),e(Wn,VYe),e(k,XYe),e(k,Hn),e(Hn,yoe),e(yoe,zYe),e(Hn,QYe),e(Hn,wS),e(wS,WYe),e(Hn,HYe),e(Hn,AS),e(AS,UYe),e(Hn,JYe),e(k,YYe),e(k,ug),e(ug,Loe),e(Loe,KYe),e(ug,ZYe),e(ug,yS),e(yS,eKe),e(ug,oKe),e(k,rKe),e(k,Un),e(Un,xoe),e(xoe,tKe),e(Un,aKe),e(Un,LS),e(LS,nKe),e(Un,sKe),e(Un,xS),e(xS,lKe),e(Un,iKe),e(k,dKe),e(k,Jn),e(Jn,$oe),e($oe,cKe),e(Jn,fKe),e(Jn,$S),e($S,mKe),e(Jn,gKe),e(Jn,kS),e(kS,hKe),e(Jn,pKe),e(k,uKe),e(k,Yn),e(Yn,koe),e(koe,_Ke),e(Yn,bKe),e(Yn,SS),e(SS,vKe),e(Yn,FKe),e(Yn,RS),e(RS,TKe),e(Yn,MKe),e(k,EKe),e(k,Kn),e(Kn,Soe),e(Soe,CKe),e(Kn,wKe),e(Kn,BS),e(BS,AKe),e(Kn,yKe),e(Kn,PS),e(PS,LKe),e(Kn,xKe),e(k,$Ke),e(k,Zn),e(Zn,Roe),e(Roe,kKe),e(Zn,SKe),e(Zn,IS),e(IS,RKe),e(Zn,BKe),e(Zn,qS),e(qS,PKe),e(Zn,IKe),e(k,qKe),e(k,es),e(es,Boe),e(Boe,NKe),e(es,jKe),e(es,NS),e(NS,DKe),e(es,GKe),e(es,jS),e(jS,OKe),e(es,VKe),e(k,XKe),e(k,_g),e(_g,Poe),e(Poe,zKe),e(_g,QKe),e(_g,DS),e(DS,WKe),e(_g,HKe),e(k,UKe),e(k,os),e(os,Ioe),e(Ioe,JKe),e(os,YKe),e(os,GS),e(GS,KKe),e(os,ZKe),e(os,OS),e(OS,eZe),e(os,oZe),e(k,rZe),e(k,bg),e(bg,qoe),e(qoe,tZe),e(bg,aZe),e(bg,VS),e(VS,nZe),e(bg,sZe),e(k,lZe),e(k,vg),e(vg,Noe),e(Noe,iZe),e(vg,dZe),e(vg,XS),e(XS,cZe),e(vg,fZe),e(k,mZe),e(k,rs),e(rs,joe),e(joe,gZe),e(rs,hZe),e(rs,zS),e(zS,pZe),e(rs,uZe),e(rs,QS),e(QS,_Ze),e(rs,bZe),e(k,vZe),e(k,ts),e(ts,Doe),e(Doe,FZe),e(ts,TZe),e(ts,WS),e(WS,MZe),e(ts,EZe),e(ts,HS),e(HS,CZe),e(ts,wZe),e(k,AZe),e(k,as),e(as,Goe),e(Goe,yZe),e(as,LZe),e(as,US),e(US,xZe),e(as,$Ze),e(as,JS),e(JS,kZe),e(as,SZe),e(k,RZe),e(k,Fg),e(Fg,Ooe),e(Ooe,BZe),e(Fg,PZe),e(Fg,YS),e(YS,IZe),e(Fg,qZe),e(k,NZe),e(k,ns),e(ns,Voe),e(Voe,jZe),e(ns,DZe),e(ns,KS),e(KS,GZe),e(ns,OZe),e(ns,ZS),e(ZS,VZe),e(ns,XZe),e(k,zZe),e(k,ss),e(ss,Xoe),e(Xoe,QZe),e(ss,WZe),e(ss,eR),e(eR,HZe),e(ss,UZe),e(ss,oR),e(oR,JZe),e(ss,YZe),e(k,KZe),e(k,ls),e(ls,zoe),e(zoe,ZZe),e(ls,eeo),e(ls,rR),e(rR,oeo),e(ls,reo),e(ls,tR),e(tR,teo),e(ls,aeo),e(k,neo),e(k,is),e(is,Qoe),e(Qoe,seo),e(is,leo),e(is,aR),e(aR,ieo),e(is,deo),e(is,nR),e(nR,ceo),e(is,feo),e(k,meo),e(k,ds),e(ds,Woe),e(Woe,geo),e(ds,heo),e(ds,sR),e(sR,peo),e(ds,ueo),e(ds,lR),e(lR,_eo),e(ds,beo),e(k,veo),e(k,cs),e(cs,Hoe),e(Hoe,Feo),e(cs,Teo),e(cs,iR),e(iR,Meo),e(cs,Eeo),e(cs,dR),e(dR,Ceo),e(cs,weo),e(k,Aeo),e(k,Tg),e(Tg,Uoe),e(Uoe,yeo),e(Tg,Leo),e(Tg,cR),e(cR,xeo),e(Tg,$eo),e(k,keo),e(k,Mg),e(Mg,Joe),e(Joe,Seo),e(Mg,Reo),e(Mg,fR),e(fR,Beo),e(Mg,Peo),e(k,Ieo),e(k,Eg),e(Eg,Yoe),e(Yoe,qeo),e(Eg,Neo),e(Eg,mR),e(mR,jeo),e(Eg,Deo),e(k,Geo),e(k,Cg),e(Cg,Koe),e(Koe,Oeo),e(Cg,Veo),e(Cg,gR),e(gR,Xeo),e(Cg,zeo),e(k,Qeo),e(k,fs),e(fs,Zoe),e(Zoe,Weo),e(fs,Heo),e(fs,hR),e(hR,Ueo),e(fs,Jeo),e(fs,pR),e(pR,Yeo),e(fs,Keo),e(k,Zeo),e(k,wg),e(wg,ere),e(ere,eoo),e(wg,ooo),e(wg,uR),e(uR,roo),e(wg,too),e(k,aoo),e(k,ms),e(ms,ore),e(ore,noo),e(ms,soo),e(ms,_R),e(_R,loo),e(ms,ioo),e(ms,bR),e(bR,doo),e(ms,coo),e(k,foo),e(k,gs),e(gs,rre),e(rre,moo),e(gs,goo),e(gs,vR),e(vR,hoo),e(gs,poo),e(gs,FR),e(FR,uoo),e(gs,_oo),e(k,boo),e(k,hs),e(hs,tre),e(tre,voo),e(hs,Foo),e(hs,TR),e(TR,Too),e(hs,Moo),e(hs,MR),e(MR,Eoo),e(hs,Coo),e(k,woo),e(k,ps),e(ps,are),e(are,Aoo),e(ps,yoo),e(ps,ER),e(ER,Loo),e(ps,xoo),e(ps,CR),e(CR,$oo),e(ps,koo),e(k,Soo),e(k,us),e(us,nre),e(nre,Roo),e(us,Boo),e(us,wR),e(wR,Poo),e(us,Ioo),e(us,AR),e(AR,qoo),e(us,Noo),e(k,joo),e(k,_s),e(_s,sre),e(sre,Doo),e(_s,Goo),e(_s,yR),e(yR,Ooo),e(_s,Voo),e(_s,LR),e(LR,Xoo),e(_s,zoo),e(k,Qoo),e(k,Ag),e(Ag,lre),e(lre,Woo),e(Ag,Hoo),e(Ag,xR),e(xR,Uoo),e(Ag,Joo),e(k,Yoo),e(k,yg),e(yg,ire),e(ire,Koo),e(yg,Zoo),e(yg,$R),e($R,ero),e(yg,oro),e(k,rro),e(k,bs),e(bs,dre),e(dre,tro),e(bs,aro),e(bs,kR),e(kR,nro),e(bs,sro),e(bs,SR),e(SR,lro),e(bs,iro),e(k,dro),e(k,vs),e(vs,cre),e(cre,cro),e(vs,fro),e(vs,RR),e(RR,mro),e(vs,gro),e(vs,BR),e(BR,hro),e(vs,pro),e(k,uro),e(k,Fs),e(Fs,fre),e(fre,_ro),e(Fs,bro),e(Fs,PR),e(PR,vro),e(Fs,Fro),e(Fs,IR),e(IR,Tro),e(Fs,Mro),e(k,Ero),e(k,Lg),e(Lg,mre),e(mre,Cro),e(Lg,wro),e(Lg,qR),e(qR,Aro),e(Lg,yro),e(k,Lro),e(k,xg),e(xg,gre),e(gre,xro),e(xg,$ro),e(xg,NR),e(NR,kro),e(xg,Sro),e(k,Rro),e(k,$g),e($g,hre),e(hre,Bro),e($g,Pro),e($g,jR),e(jR,Iro),e($g,qro),e(k,Nro),e(k,Ts),e(Ts,pre),e(pre,jro),e(Ts,Dro),e(Ts,DR),e(DR,Gro),e(Ts,Oro),e(Ts,GR),e(GR,Vro),e(Ts,Xro),e(k,zro),e(k,kg),e(kg,ure),e(ure,Qro),e(kg,Wro),e(kg,OR),e(OR,Hro),e(kg,Uro),e(k,Jro),e(k,Sg),e(Sg,_re),e(_re,Yro),e(Sg,Kro),e(Sg,VR),e(VR,Zro),e(Sg,eto),e(k,oto),e(k,Ms),e(Ms,bre),e(bre,rto),e(Ms,tto),e(Ms,XR),e(XR,ato),e(Ms,nto),e(Ms,zR),e(zR,sto),e(Ms,lto),e(k,ito),e(k,Rg),e(Rg,vre),e(vre,dto),e(Rg,cto),e(Rg,QR),e(QR,fto),e(Rg,mto),e(k,gto),e(k,Bg),e(Bg,Fre),e(Fre,hto),e(Bg,pto),e(Bg,WR),e(WR,uto),e(Bg,_to),e(k,bto),e(k,Es),e(Es,Tre),e(Tre,vto),e(Es,Fto),e(Es,HR),e(HR,Tto),e(Es,Mto),e(Es,UR),e(UR,Eto),e(Es,Cto),e(k,wto),e(k,Cs),e(Cs,Mre),e(Mre,Ato),e(Cs,yto),e(Cs,JR),e(JR,Lto),e(Cs,xto),e(Cs,YR),e(YR,$to),e(Cs,kto),e(k,Sto),e(k,ws),e(ws,Ere),e(Ere,Rto),e(ws,Bto),e(ws,KR),e(KR,Pto),e(ws,Ito),e(ws,ZR),e(ZR,qto),e(ws,Nto),e(k,jto),e(k,As),e(As,Cre),e(Cre,Dto),e(As,Gto),e(As,eB),e(eB,Oto),e(As,Vto),e(As,oB),e(oB,Xto),e(As,zto),e(Tr,Qto),M(Pg,Tr,null),e(Eo,Wto),e(Eo,Ig),M(Aw,Ig,null),e(Ig,Hto),e(Ig,wre),e(wre,Uto),b(f,IRe,_),b(f,mi,_),e(mi,qg),e(qg,Are),M(yw,Are,null),e(mi,Jto),e(mi,yre),e(yre,Yto),b(f,qRe,_),b(f,Co,_),M(Lw,Co,null),e(Co,Kto),e(Co,xw),e(xw,Zto),e(xw,rB),e(rB,eao),e(xw,oao),e(Co,rao),e(Co,$w),e($w,tao),e($w,Lre),e(Lre,aao),e($w,nao),e(Co,sao),e(Co,Xe),M(kw,Xe,null),e(Xe,lao),e(Xe,xre),e(xre,iao),e(Xe,dao),e(Xe,Ta),e(Ta,cao),e(Ta,$re),e($re,fao),e(Ta,mao),e(Ta,kre),e(kre,gao),e(Ta,hao),e(Ta,Sre),e(Sre,pao),e(Ta,uao),e(Xe,_ao),e(Xe,ae),e(ae,Ng),e(Ng,Rre),e(Rre,bao),e(Ng,vao),e(Ng,tB),e(tB,Fao),e(Ng,Tao),e(ae,Mao),e(ae,jg),e(jg,Bre),e(Bre,Eao),e(jg,Cao),e(jg,aB),e(aB,wao),e(jg,Aao),e(ae,yao),e(ae,Dg),e(Dg,Pre),e(Pre,Lao),e(Dg,xao),e(Dg,nB),e(nB,$ao),e(Dg,kao),e(ae,Sao),e(ae,Gg),e(Gg,Ire),e(Ire,Rao),e(Gg,Bao),e(Gg,sB),e(sB,Pao),e(Gg,Iao),e(ae,qao),e(ae,Og),e(Og,qre),e(qre,Nao),e(Og,jao),e(Og,lB),e(lB,Dao),e(Og,Gao),e(ae,Oao),e(ae,Vg),e(Vg,Nre),e(Nre,Vao),e(Vg,Xao),e(Vg,iB),e(iB,zao),e(Vg,Qao),e(ae,Wao),e(ae,Xg),e(Xg,jre),e(jre,Hao),e(Xg,Uao),e(Xg,dB),e(dB,Jao),e(Xg,Yao),e(ae,Kao),e(ae,zg),e(zg,Dre),e(Dre,Zao),e(zg,eno),e(zg,cB),e(cB,ono),e(zg,rno),e(ae,tno),e(ae,Qg),e(Qg,Gre),e(Gre,ano),e(Qg,nno),e(Qg,fB),e(fB,sno),e(Qg,lno),e(ae,ino),e(ae,Wg),e(Wg,Ore),e(Ore,dno),e(Wg,cno),e(Wg,mB),e(mB,fno),e(Wg,mno),e(ae,gno),e(ae,Hg),e(Hg,Vre),e(Vre,hno),e(Hg,pno),e(Hg,gB),e(gB,uno),e(Hg,_no),e(ae,bno),e(ae,Ug),e(Ug,Xre),e(Xre,vno),e(Ug,Fno),e(Ug,hB),e(hB,Tno),e(Ug,Mno),e(ae,Eno),e(ae,Jg),e(Jg,zre),e(zre,Cno),e(Jg,wno),e(Jg,pB),e(pB,Ano),e(Jg,yno),e(ae,Lno),e(ae,Yg),e(Yg,Qre),e(Qre,xno),e(Yg,$no),e(Yg,uB),e(uB,kno),e(Yg,Sno),e(ae,Rno),e(ae,Kg),e(Kg,Wre),e(Wre,Bno),e(Kg,Pno),e(Kg,_B),e(_B,Ino),e(Kg,qno),e(ae,Nno),e(ae,Zg),e(Zg,Hre),e(Hre,jno),e(Zg,Dno),e(Zg,bB),e(bB,Gno),e(Zg,Ono),e(ae,Vno),e(ae,eh),e(eh,Ure),e(Ure,Xno),e(eh,zno),e(eh,vB),e(vB,Qno),e(eh,Wno),e(ae,Hno),e(ae,oh),e(oh,Jre),e(Jre,Uno),e(oh,Jno),e(oh,FB),e(FB,Yno),e(oh,Kno),e(ae,Zno),e(ae,rh),e(rh,Yre),e(Yre,eso),e(rh,oso),e(rh,TB),e(TB,rso),e(rh,tso),e(ae,aso),e(ae,th),e(th,Kre),e(Kre,nso),e(th,sso),e(th,MB),e(MB,lso),e(th,iso),e(ae,dso),e(ae,ah),e(ah,Zre),e(Zre,cso),e(ah,fso),e(ah,EB),e(EB,mso),e(ah,gso),e(ae,hso),e(ae,nh),e(nh,ete),e(ete,pso),e(nh,uso),e(nh,CB),e(CB,_so),e(nh,bso),e(ae,vso),e(ae,sh),e(sh,ote),e(ote,Fso),e(sh,Tso),e(sh,wB),e(wB,Mso),e(sh,Eso),e(Xe,Cso),M(lh,Xe,null),e(Xe,wso),M(ih,Xe,null),e(Co,Aso),e(Co,dh),M(Sw,dh,null),e(dh,yso),e(dh,rte),e(rte,Lso),b(f,NRe,_),b(f,gi,_),e(gi,ch),e(ch,tte),M(Rw,tte,null),e(gi,xso),e(gi,ate),e(ate,$so),b(f,jRe,_),b(f,wo,_),M(Bw,wo,null),e(wo,kso),e(wo,Pw),e(Pw,Sso),e(Pw,AB),e(AB,Rso),e(Pw,Bso),e(wo,Pso),e(wo,Iw),e(Iw,Iso),e(Iw,nte),e(nte,qso),e(Iw,Nso),e(wo,jso),e(wo,ze),M(qw,ze,null),e(ze,Dso),e(ze,ste),e(ste,Gso),e(ze,Oso),e(ze,hi),e(hi,Vso),e(hi,lte),e(lte,Xso),e(hi,zso),e(hi,ite),e(ite,Qso),e(hi,Wso),e(ze,Hso),e(ze,be),e(be,fh),e(fh,dte),e(dte,Uso),e(fh,Jso),e(fh,yB),e(yB,Yso),e(fh,Kso),e(be,Zso),e(be,mh),e(mh,cte),e(cte,elo),e(mh,olo),e(mh,LB),e(LB,rlo),e(mh,tlo),e(be,alo),e(be,gh),e(gh,fte),e(fte,nlo),e(gh,slo),e(gh,xB),e(xB,llo),e(gh,ilo),e(be,dlo),e(be,hh),e(hh,mte),e(mte,clo),e(hh,flo),e(hh,$B),e($B,mlo),e(hh,glo),e(be,hlo),e(be,ph),e(ph,gte),e(gte,plo),e(ph,ulo),e(ph,kB),e(kB,_lo),e(ph,blo),e(be,vlo),e(be,uh),e(uh,hte),e(hte,Flo),e(uh,Tlo),e(uh,SB),e(SB,Mlo),e(uh,Elo),e(be,Clo),e(be,_h),e(_h,pte),e(pte,wlo),e(_h,Alo),e(_h,RB),e(RB,ylo),e(_h,Llo),e(be,xlo),e(be,bh),e(bh,ute),e(ute,$lo),e(bh,klo),e(bh,BB),e(BB,Slo),e(bh,Rlo),e(be,Blo),e(be,vh),e(vh,_te),e(_te,Plo),e(vh,Ilo),e(vh,PB),e(PB,qlo),e(vh,Nlo),e(be,jlo),e(be,Fh),e(Fh,bte),e(bte,Dlo),e(Fh,Glo),e(Fh,IB),e(IB,Olo),e(Fh,Vlo),e(be,Xlo),e(be,Th),e(Th,vte),e(vte,zlo),e(Th,Qlo),e(Th,qB),e(qB,Wlo),e(Th,Hlo),e(be,Ulo),e(be,Mh),e(Mh,Fte),e(Fte,Jlo),e(Mh,Ylo),e(Mh,NB),e(NB,Klo),e(Mh,Zlo),e(be,eio),e(be,Eh),e(Eh,Tte),e(Tte,oio),e(Eh,rio),e(Eh,jB),e(jB,tio),e(Eh,aio),e(be,nio),e(be,Ch),e(Ch,Mte),e(Mte,sio),e(Ch,lio),e(Ch,DB),e(DB,iio),e(Ch,dio),e(ze,cio),M(wh,ze,null),e(ze,fio),M(Ah,ze,null),e(wo,mio),e(wo,yh),M(Nw,yh,null),e(yh,gio),e(yh,Ete),e(Ete,hio),b(f,DRe,_),b(f,pi,_),e(pi,Lh),e(Lh,Cte),M(jw,Cte,null),e(pi,pio),e(pi,wte),e(wte,uio),b(f,GRe,_),b(f,Ao,_),M(Dw,Ao,null),e(Ao,_io),e(Ao,ui),e(ui,bio),e(ui,GB),e(GB,vio),e(ui,Fio),e(ui,OB),e(OB,Tio),e(ui,Mio),e(Ao,Eio),e(Ao,Gw),e(Gw,Cio),e(Gw,Ate),e(Ate,wio),e(Gw,Aio),e(Ao,yio),e(Ao,Kr),M(Ow,Kr,null),e(Kr,Lio),e(Kr,yte),e(yte,xio),e(Kr,$io),e(Kr,_i),e(_i,kio),e(_i,Lte),e(Lte,Sio),e(_i,Rio),e(_i,VB),e(VB,Bio),e(_i,Pio),e(Kr,Iio),M(xh,Kr,null),e(Ao,qio),e(Ao,Qe),M(Vw,Qe,null),e(Qe,Nio),e(Qe,xte),e(xte,jio),e(Qe,Dio),e(Qe,Ma),e(Ma,Gio),e(Ma,$te),e($te,Oio),e(Ma,Vio),e(Ma,kte),e(kte,Xio),e(Ma,zio),e(Ma,Ste),e(Ste,Qio),e(Ma,Wio),e(Qe,Hio),e(Qe,x),e(x,$h),e($h,Rte),e(Rte,Uio),e($h,Jio),e($h,XB),e(XB,Yio),e($h,Kio),e(x,Zio),e(x,kh),e(kh,Bte),e(Bte,edo),e(kh,odo),e(kh,zB),e(zB,rdo),e(kh,tdo),e(x,ado),e(x,Sh),e(Sh,Pte),e(Pte,ndo),e(Sh,sdo),e(Sh,QB),e(QB,ldo),e(Sh,ido),e(x,ddo),e(x,Rh),e(Rh,Ite),e(Ite,cdo),e(Rh,fdo),e(Rh,WB),e(WB,mdo),e(Rh,gdo),e(x,hdo),e(x,Bh),e(Bh,qte),e(qte,pdo),e(Bh,udo),e(Bh,HB),e(HB,_do),e(Bh,bdo),e(x,vdo),e(x,Ph),e(Ph,Nte),e(Nte,Fdo),e(Ph,Tdo),e(Ph,UB),e(UB,Mdo),e(Ph,Edo),e(x,Cdo),e(x,Ih),e(Ih,jte),e(jte,wdo),e(Ih,Ado),e(Ih,JB),e(JB,ydo),e(Ih,Ldo),e(x,xdo),e(x,qh),e(qh,Dte),e(Dte,$do),e(qh,kdo),e(qh,YB),e(YB,Sdo),e(qh,Rdo),e(x,Bdo),e(x,Nh),e(Nh,Gte),e(Gte,Pdo),e(Nh,Ido),e(Nh,KB),e(KB,qdo),e(Nh,Ndo),e(x,jdo),e(x,jh),e(jh,Ote),e(Ote,Ddo),e(jh,Gdo),e(jh,ZB),e(ZB,Odo),e(jh,Vdo),e(x,Xdo),e(x,Dh),e(Dh,Vte),e(Vte,zdo),e(Dh,Qdo),e(Dh,eP),e(eP,Wdo),e(Dh,Hdo),e(x,Udo),e(x,Gh),e(Gh,Xte),e(Xte,Jdo),e(Gh,Ydo),e(Gh,oP),e(oP,Kdo),e(Gh,Zdo),e(x,eco),e(x,Oh),e(Oh,zte),e(zte,oco),e(Oh,rco),e(Oh,rP),e(rP,tco),e(Oh,aco),e(x,nco),e(x,Vh),e(Vh,Qte),e(Qte,sco),e(Vh,lco),e(Vh,tP),e(tP,ico),e(Vh,dco),e(x,cco),e(x,Xh),e(Xh,Wte),e(Wte,fco),e(Xh,mco),e(Xh,aP),e(aP,gco),e(Xh,hco),e(x,pco),e(x,zh),e(zh,Hte),e(Hte,uco),e(zh,_co),e(zh,nP),e(nP,bco),e(zh,vco),e(x,Fco),e(x,Qh),e(Qh,Ute),e(Ute,Tco),e(Qh,Mco),e(Qh,sP),e(sP,Eco),e(Qh,Cco),e(x,wco),e(x,Wh),e(Wh,Jte),e(Jte,Aco),e(Wh,yco),e(Wh,lP),e(lP,Lco),e(Wh,xco),e(x,$co),e(x,Hh),e(Hh,Yte),e(Yte,kco),e(Hh,Sco),e(Hh,iP),e(iP,Rco),e(Hh,Bco),e(x,Pco),e(x,Uh),e(Uh,Kte),e(Kte,Ico),e(Uh,qco),e(Uh,dP),e(dP,Nco),e(Uh,jco),e(x,Dco),e(x,Jh),e(Jh,Zte),e(Zte,Gco),e(Jh,Oco),e(Jh,cP),e(cP,Vco),e(Jh,Xco),e(x,zco),e(x,Yh),e(Yh,eae),e(eae,Qco),e(Yh,Wco),e(Yh,fP),e(fP,Hco),e(Yh,Uco),e(x,Jco),e(x,Kh),e(Kh,oae),e(oae,Yco),e(Kh,Kco),e(Kh,mP),e(mP,Zco),e(Kh,efo),e(x,ofo),e(x,Zh),e(Zh,rae),e(rae,rfo),e(Zh,tfo),e(Zh,gP),e(gP,afo),e(Zh,nfo),e(x,sfo),e(x,ep),e(ep,tae),e(tae,lfo),e(ep,ifo),e(ep,hP),e(hP,dfo),e(ep,cfo),e(x,ffo),e(x,op),e(op,aae),e(aae,mfo),e(op,gfo),e(op,pP),e(pP,hfo),e(op,pfo),e(x,ufo),e(x,rp),e(rp,nae),e(nae,_fo),e(rp,bfo),e(rp,uP),e(uP,vfo),e(rp,Ffo),e(x,Tfo),e(x,tp),e(tp,sae),e(sae,Mfo),e(tp,Efo),e(tp,_P),e(_P,Cfo),e(tp,wfo),e(x,Afo),e(x,ap),e(ap,lae),e(lae,yfo),e(ap,Lfo),e(ap,bP),e(bP,xfo),e(ap,$fo),e(x,kfo),e(x,np),e(np,iae),e(iae,Sfo),e(np,Rfo),e(np,vP),e(vP,Bfo),e(np,Pfo),e(x,Ifo),e(x,ys),e(ys,dae),e(dae,qfo),e(ys,Nfo),e(ys,FP),e(FP,jfo),e(ys,Dfo),e(ys,TP),e(TP,Gfo),e(ys,Ofo),e(x,Vfo),e(x,sp),e(sp,cae),e(cae,Xfo),e(sp,zfo),e(sp,MP),e(MP,Qfo),e(sp,Wfo),e(x,Hfo),e(x,lp),e(lp,fae),e(fae,Ufo),e(lp,Jfo),e(lp,EP),e(EP,Yfo),e(lp,Kfo),e(x,Zfo),e(x,ip),e(ip,mae),e(mae,emo),e(ip,omo),e(ip,CP),e(CP,rmo),e(ip,tmo),e(x,amo),e(x,dp),e(dp,gae),e(gae,nmo),e(dp,smo),e(dp,wP),e(wP,lmo),e(dp,imo),e(x,dmo),e(x,cp),e(cp,hae),e(hae,cmo),e(cp,fmo),e(cp,AP),e(AP,mmo),e(cp,gmo),e(x,hmo),e(x,fp),e(fp,pae),e(pae,pmo),e(fp,umo),e(fp,yP),e(yP,_mo),e(fp,bmo),e(x,vmo),e(x,mp),e(mp,uae),e(uae,Fmo),e(mp,Tmo),e(mp,LP),e(LP,Mmo),e(mp,Emo),e(x,Cmo),e(x,gp),e(gp,_ae),e(_ae,wmo),e(gp,Amo),e(gp,xP),e(xP,ymo),e(gp,Lmo),e(x,xmo),e(x,hp),e(hp,bae),e(bae,$mo),e(hp,kmo),e(hp,$P),e($P,Smo),e(hp,Rmo),e(x,Bmo),e(x,pp),e(pp,vae),e(vae,Pmo),e(pp,Imo),e(pp,kP),e(kP,qmo),e(pp,Nmo),e(x,jmo),e(x,up),e(up,Fae),e(Fae,Dmo),e(up,Gmo),e(up,SP),e(SP,Omo),e(up,Vmo),e(x,Xmo),e(x,_p),e(_p,Tae),e(Tae,zmo),e(_p,Qmo),e(_p,RP),e(RP,Wmo),e(_p,Hmo),e(x,Umo),e(x,bp),e(bp,Mae),e(Mae,Jmo),e(bp,Ymo),e(bp,BP),e(BP,Kmo),e(bp,Zmo),e(x,ego),e(x,vp),e(vp,Eae),e(Eae,ogo),e(vp,rgo),e(vp,PP),e(PP,tgo),e(vp,ago),e(x,ngo),e(x,Fp),e(Fp,Cae),e(Cae,sgo),e(Fp,lgo),e(Fp,IP),e(IP,igo),e(Fp,dgo),e(x,cgo),e(x,Tp),e(Tp,wae),e(wae,fgo),e(Tp,mgo),e(Tp,qP),e(qP,ggo),e(Tp,hgo),e(x,pgo),e(x,Mp),e(Mp,Aae),e(Aae,ugo),e(Mp,_go),e(Mp,NP),e(NP,bgo),e(Mp,vgo),e(x,Fgo),e(x,Ep),e(Ep,yae),e(yae,Tgo),e(Ep,Mgo),e(Ep,jP),e(jP,Ego),e(Ep,Cgo),e(x,wgo),e(x,Cp),e(Cp,Lae),e(Lae,Ago),e(Cp,ygo),e(Cp,DP),e(DP,Lgo),e(Cp,xgo),e(x,$go),e(x,wp),e(wp,xae),e(xae,kgo),e(wp,Sgo),e(wp,GP),e(GP,Rgo),e(wp,Bgo),e(x,Pgo),e(x,Ap),e(Ap,$ae),e($ae,Igo),e(Ap,qgo),e(Ap,OP),e(OP,Ngo),e(Ap,jgo),e(x,Dgo),e(x,yp),e(yp,kae),e(kae,Ggo),e(yp,Ogo),e(yp,VP),e(VP,Vgo),e(yp,Xgo),e(x,zgo),e(x,Lp),e(Lp,Sae),e(Sae,Qgo),e(Lp,Wgo),e(Lp,XP),e(XP,Hgo),e(Lp,Ugo),e(x,Jgo),e(x,xp),e(xp,Rae),e(Rae,Ygo),e(xp,Kgo),e(xp,zP),e(zP,Zgo),e(xp,eho),e(x,oho),e(x,$p),e($p,Bae),e(Bae,rho),e($p,tho),e($p,QP),e(QP,aho),e($p,nho),e(x,sho),e(x,kp),e(kp,Pae),e(Pae,lho),e(kp,iho),e(kp,WP),e(WP,dho),e(kp,cho),e(x,fho),e(x,Sp),e(Sp,Iae),e(Iae,mho),e(Sp,gho),e(Sp,HP),e(HP,hho),e(Sp,pho),e(x,uho),e(x,Rp),e(Rp,qae),e(qae,_ho),e(Rp,bho),e(Rp,UP),e(UP,vho),e(Rp,Fho),e(x,Tho),e(x,Bp),e(Bp,Nae),e(Nae,Mho),e(Bp,Eho),e(Bp,JP),e(JP,Cho),e(Bp,who),e(x,Aho),e(x,Pp),e(Pp,jae),e(jae,yho),e(Pp,Lho),e(Pp,YP),e(YP,xho),e(Pp,$ho),e(x,kho),e(x,Ip),e(Ip,Dae),e(Dae,Sho),e(Ip,Rho),e(Ip,KP),e(KP,Bho),e(Ip,Pho),e(x,Iho),e(x,qp),e(qp,Gae),e(Gae,qho),e(qp,Nho),e(qp,ZP),e(ZP,jho),e(qp,Dho),e(x,Gho),e(x,Np),e(Np,Oae),e(Oae,Oho),e(Np,Vho),e(Np,eI),e(eI,Xho),e(Np,zho),e(x,Qho),e(x,jp),e(jp,Vae),e(Vae,Who),e(jp,Hho),e(jp,oI),e(oI,Uho),e(jp,Jho),e(x,Yho),e(x,Dp),e(Dp,Xae),e(Xae,Kho),e(Dp,Zho),e(Dp,rI),e(rI,epo),e(Dp,opo),e(x,rpo),e(x,Gp),e(Gp,zae),e(zae,tpo),e(Gp,apo),e(Gp,tI),e(tI,npo),e(Gp,spo),e(x,lpo),e(x,Op),e(Op,Qae),e(Qae,ipo),e(Op,dpo),e(Op,aI),e(aI,cpo),e(Op,fpo),e(x,mpo),e(x,Vp),e(Vp,Wae),e(Wae,gpo),e(Vp,hpo),e(Vp,nI),e(nI,ppo),e(Vp,upo),e(x,_po),e(x,Xp),e(Xp,Hae),e(Hae,bpo),e(Xp,vpo),e(Xp,sI),e(sI,Fpo),e(Xp,Tpo),e(x,Mpo),e(x,zp),e(zp,Uae),e(Uae,Epo),e(zp,Cpo),e(zp,lI),e(lI,wpo),e(zp,Apo),e(x,ypo),e(x,Qp),e(Qp,Jae),e(Jae,Lpo),e(Qp,xpo),e(Qp,iI),e(iI,$po),e(Qp,kpo),e(x,Spo),e(x,Wp),e(Wp,Yae),e(Yae,Rpo),e(Wp,Bpo),e(Wp,dI),e(dI,Ppo),e(Wp,Ipo),e(x,qpo),e(x,Hp),e(Hp,Kae),e(Kae,Npo),e(Hp,jpo),e(Hp,cI),e(cI,Dpo),e(Hp,Gpo),e(x,Opo),e(x,Up),e(Up,Zae),e(Zae,Vpo),e(Up,Xpo),e(Up,fI),e(fI,zpo),e(Up,Qpo),e(x,Wpo),e(x,Jp),e(Jp,ene),e(ene,Hpo),e(Jp,Upo),e(Jp,mI),e(mI,Jpo),e(Jp,Ypo),e(x,Kpo),e(x,Yp),e(Yp,one),e(one,Zpo),e(Yp,euo),e(Yp,gI),e(gI,ouo),e(Yp,ruo),e(x,tuo),e(x,Kp),e(Kp,rne),e(rne,auo),e(Kp,nuo),e(Kp,hI),e(hI,suo),e(Kp,luo),e(x,iuo),e(x,Zp),e(Zp,tne),e(tne,duo),e(Zp,cuo),e(Zp,pI),e(pI,fuo),e(Zp,muo),e(x,guo),e(x,eu),e(eu,ane),e(ane,huo),e(eu,puo),e(eu,uI),e(uI,uuo),e(eu,_uo),e(x,buo),e(x,ou),e(ou,nne),e(nne,vuo),e(ou,Fuo),e(ou,_I),e(_I,Tuo),e(ou,Muo),e(x,Euo),e(x,ru),e(ru,sne),e(sne,Cuo),e(ru,wuo),e(ru,bI),e(bI,Auo),e(ru,yuo),e(x,Luo),e(x,tu),e(tu,lne),e(lne,xuo),e(tu,$uo),e(tu,vI),e(vI,kuo),e(tu,Suo),e(x,Ruo),e(x,au),e(au,ine),e(ine,Buo),e(au,Puo),e(au,FI),e(FI,Iuo),e(au,quo),e(x,Nuo),e(x,nu),e(nu,dne),e(dne,juo),e(nu,Duo),e(nu,TI),e(TI,Guo),e(nu,Ouo),e(x,Vuo),e(x,su),e(su,cne),e(cne,Xuo),e(su,zuo),e(su,MI),e(MI,Quo),e(su,Wuo),e(x,Huo),e(x,lu),e(lu,fne),e(fne,Uuo),e(lu,Juo),e(lu,EI),e(EI,Yuo),e(lu,Kuo),e(x,Zuo),e(x,iu),e(iu,mne),e(mne,e_o),e(iu,o_o),e(iu,CI),e(CI,r_o),e(iu,t_o),e(x,a_o),e(x,du),e(du,gne),e(gne,n_o),e(du,s_o),e(du,wI),e(wI,l_o),e(du,i_o),e(x,d_o),e(x,cu),e(cu,hne),e(hne,c_o),e(cu,f_o),e(cu,AI),e(AI,m_o),e(cu,g_o),e(x,h_o),e(x,fu),e(fu,pne),e(pne,p_o),e(fu,u_o),e(fu,yI),e(yI,__o),e(fu,b_o),e(x,v_o),e(x,mu),e(mu,une),e(une,F_o),e(mu,T_o),e(mu,LI),e(LI,M_o),e(mu,E_o),e(x,C_o),e(x,gu),e(gu,_ne),e(_ne,w_o),e(gu,A_o),e(gu,xI),e(xI,y_o),e(gu,L_o),e(x,x_o),e(x,hu),e(hu,bne),e(bne,$_o),e(hu,k_o),e(hu,$I),e($I,S_o),e(hu,R_o),e(Qe,B_o),e(Qe,pu),e(pu,P_o),e(pu,vne),e(vne,I_o),e(pu,q_o),e(pu,Fne),e(Fne,N_o),e(Qe,j_o),M(uu,Qe,null),b(f,ORe,_),b(f,bi,_),e(bi,_u),e(_u,Tne),M(Xw,Tne,null),e(bi,D_o),e(bi,Mne),e(Mne,G_o),b(f,VRe,_),b(f,yo,_),M(zw,yo,null),e(yo,O_o),e(yo,vi),e(vi,V_o),e(vi,kI),e(kI,X_o),e(vi,z_o),e(vi,SI),e(SI,Q_o),e(vi,W_o),e(yo,H_o),e(yo,Qw),e(Qw,U_o),e(Qw,Ene),e(Ene,J_o),e(Qw,Y_o),e(yo,K_o),e(yo,Zr),M(Ww,Zr,null),e(Zr,Z_o),e(Zr,Cne),e(Cne,e1o),e(Zr,o1o),e(Zr,Fi),e(Fi,r1o),e(Fi,wne),e(wne,t1o),e(Fi,a1o),e(Fi,RI),e(RI,n1o),e(Fi,s1o),e(Zr,l1o),M(bu,Zr,null),e(yo,i1o),e(yo,We),M(Hw,We,null),e(We,d1o),e(We,Ane),e(Ane,c1o),e(We,f1o),e(We,Ea),e(Ea,m1o),e(Ea,yne),e(yne,g1o),e(Ea,h1o),e(Ea,Lne),e(Lne,p1o),e(Ea,u1o),e(Ea,xne),e(xne,_1o),e(Ea,b1o),e(We,v1o),e(We,G),e(G,vu),e(vu,$ne),e($ne,F1o),e(vu,T1o),e(vu,BI),e(BI,M1o),e(vu,E1o),e(G,C1o),e(G,Fu),e(Fu,kne),e(kne,w1o),e(Fu,A1o),e(Fu,PI),e(PI,y1o),e(Fu,L1o),e(G,x1o),e(G,Tu),e(Tu,Sne),e(Sne,$1o),e(Tu,k1o),e(Tu,II),e(II,S1o),e(Tu,R1o),e(G,B1o),e(G,Mu),e(Mu,Rne),e(Rne,P1o),e(Mu,I1o),e(Mu,qI),e(qI,q1o),e(Mu,N1o),e(G,j1o),e(G,Eu),e(Eu,Bne),e(Bne,D1o),e(Eu,G1o),e(Eu,NI),e(NI,O1o),e(Eu,V1o),e(G,X1o),e(G,Cu),e(Cu,Pne),e(Pne,z1o),e(Cu,Q1o),e(Cu,jI),e(jI,W1o),e(Cu,H1o),e(G,U1o),e(G,wu),e(wu,Ine),e(Ine,J1o),e(wu,Y1o),e(wu,DI),e(DI,K1o),e(wu,Z1o),e(G,ebo),e(G,Au),e(Au,qne),e(qne,obo),e(Au,rbo),e(Au,GI),e(GI,tbo),e(Au,abo),e(G,nbo),e(G,yu),e(yu,Nne),e(Nne,sbo),e(yu,lbo),e(yu,OI),e(OI,ibo),e(yu,dbo),e(G,cbo),e(G,Lu),e(Lu,jne),e(jne,fbo),e(Lu,mbo),e(Lu,VI),e(VI,gbo),e(Lu,hbo),e(G,pbo),e(G,xu),e(xu,Dne),e(Dne,ubo),e(xu,_bo),e(xu,XI),e(XI,bbo),e(xu,vbo),e(G,Fbo),e(G,$u),e($u,Gne),e(Gne,Tbo),e($u,Mbo),e($u,zI),e(zI,Ebo),e($u,Cbo),e(G,wbo),e(G,ku),e(ku,One),e(One,Abo),e(ku,ybo),e(ku,QI),e(QI,Lbo),e(ku,xbo),e(G,$bo),e(G,Su),e(Su,Vne),e(Vne,kbo),e(Su,Sbo),e(Su,WI),e(WI,Rbo),e(Su,Bbo),e(G,Pbo),e(G,Ru),e(Ru,Xne),e(Xne,Ibo),e(Ru,qbo),e(Ru,HI),e(HI,Nbo),e(Ru,jbo),e(G,Dbo),e(G,Bu),e(Bu,zne),e(zne,Gbo),e(Bu,Obo),e(Bu,UI),e(UI,Vbo),e(Bu,Xbo),e(G,zbo),e(G,Pu),e(Pu,Qne),e(Qne,Qbo),e(Pu,Wbo),e(Pu,JI),e(JI,Hbo),e(Pu,Ubo),e(G,Jbo),e(G,Iu),e(Iu,Wne),e(Wne,Ybo),e(Iu,Kbo),e(Iu,YI),e(YI,Zbo),e(Iu,e4o),e(G,o4o),e(G,qu),e(qu,Hne),e(Hne,r4o),e(qu,t4o),e(qu,KI),e(KI,a4o),e(qu,n4o),e(G,s4o),e(G,Nu),e(Nu,Une),e(Une,l4o),e(Nu,i4o),e(Nu,ZI),e(ZI,d4o),e(Nu,c4o),e(G,f4o),e(G,ju),e(ju,Jne),e(Jne,m4o),e(ju,g4o),e(ju,eq),e(eq,h4o),e(ju,p4o),e(G,u4o),e(G,Du),e(Du,Yne),e(Yne,_4o),e(Du,b4o),e(Du,oq),e(oq,v4o),e(Du,F4o),e(G,T4o),e(G,Gu),e(Gu,Kne),e(Kne,M4o),e(Gu,E4o),e(Gu,rq),e(rq,C4o),e(Gu,w4o),e(G,A4o),e(G,Ou),e(Ou,Zne),e(Zne,y4o),e(Ou,L4o),e(Ou,tq),e(tq,x4o),e(Ou,$4o),e(G,k4o),e(G,Vu),e(Vu,ese),e(ese,S4o),e(Vu,R4o),e(Vu,aq),e(aq,B4o),e(Vu,P4o),e(G,I4o),e(G,Xu),e(Xu,ose),e(ose,q4o),e(Xu,N4o),e(Xu,nq),e(nq,j4o),e(Xu,D4o),e(G,G4o),e(G,zu),e(zu,rse),e(rse,O4o),e(zu,V4o),e(zu,sq),e(sq,X4o),e(zu,z4o),e(G,Q4o),e(G,Qu),e(Qu,tse),e(tse,W4o),e(Qu,H4o),e(Qu,lq),e(lq,U4o),e(Qu,J4o),e(G,Y4o),e(G,Wu),e(Wu,ase),e(ase,K4o),e(Wu,Z4o),e(Wu,iq),e(iq,e2o),e(Wu,o2o),e(G,r2o),e(G,Hu),e(Hu,nse),e(nse,t2o),e(Hu,a2o),e(Hu,dq),e(dq,n2o),e(Hu,s2o),e(G,l2o),e(G,Uu),e(Uu,sse),e(sse,i2o),e(Uu,d2o),e(Uu,cq),e(cq,c2o),e(Uu,f2o),e(G,m2o),e(G,Ju),e(Ju,lse),e(lse,g2o),e(Ju,h2o),e(Ju,fq),e(fq,p2o),e(Ju,u2o),e(G,_2o),e(G,Yu),e(Yu,ise),e(ise,b2o),e(Yu,v2o),e(Yu,mq),e(mq,F2o),e(Yu,T2o),e(G,M2o),e(G,Ku),e(Ku,dse),e(dse,E2o),e(Ku,C2o),e(Ku,gq),e(gq,w2o),e(Ku,A2o),e(G,y2o),e(G,Zu),e(Zu,cse),e(cse,L2o),e(Zu,x2o),e(Zu,hq),e(hq,$2o),e(Zu,k2o),e(G,S2o),e(G,e_),e(e_,fse),e(fse,R2o),e(e_,B2o),e(e_,pq),e(pq,P2o),e(e_,I2o),e(G,q2o),e(G,o_),e(o_,mse),e(mse,N2o),e(o_,j2o),e(o_,uq),e(uq,D2o),e(o_,G2o),e(G,O2o),e(G,r_),e(r_,gse),e(gse,V2o),e(r_,X2o),e(r_,_q),e(_q,z2o),e(r_,Q2o),e(G,W2o),e(G,t_),e(t_,hse),e(hse,H2o),e(t_,U2o),e(t_,bq),e(bq,J2o),e(t_,Y2o),e(We,K2o),e(We,a_),e(a_,Z2o),e(a_,pse),e(pse,evo),e(a_,ovo),e(a_,use),e(use,rvo),e(We,tvo),M(n_,We,null),b(f,XRe,_),b(f,Ti,_),e(Ti,s_),e(s_,_se),M(Uw,_se,null),e(Ti,avo),e(Ti,bse),e(bse,nvo),b(f,zRe,_),b(f,Lo,_),M(Jw,Lo,null),e(Lo,svo),e(Lo,Mi),e(Mi,lvo),e(Mi,vq),e(vq,ivo),e(Mi,dvo),e(Mi,Fq),e(Fq,cvo),e(Mi,fvo),e(Lo,mvo),e(Lo,Yw),e(Yw,gvo),e(Yw,vse),e(vse,hvo),e(Yw,pvo),e(Lo,uvo),e(Lo,et),M(Kw,et,null),e(et,_vo),e(et,Fse),e(Fse,bvo),e(et,vvo),e(et,Ei),e(Ei,Fvo),e(Ei,Tse),e(Tse,Tvo),e(Ei,Mvo),e(Ei,Tq),e(Tq,Evo),e(Ei,Cvo),e(et,wvo),M(l_,et,null),e(Lo,Avo),e(Lo,He),M(Zw,He,null),e(He,yvo),e(He,Mse),e(Mse,Lvo),e(He,xvo),e(He,Ca),e(Ca,$vo),e(Ca,Ese),e(Ese,kvo),e(Ca,Svo),e(Ca,Cse),e(Cse,Rvo),e(Ca,Bvo),e(Ca,wse),e(wse,Pvo),e(Ca,Ivo),e(He,qvo),e(He,z),e(z,i_),e(i_,Ase),e(Ase,Nvo),e(i_,jvo),e(i_,Mq),e(Mq,Dvo),e(i_,Gvo),e(z,Ovo),e(z,d_),e(d_,yse),e(yse,Vvo),e(d_,Xvo),e(d_,Eq),e(Eq,zvo),e(d_,Qvo),e(z,Wvo),e(z,c_),e(c_,Lse),e(Lse,Hvo),e(c_,Uvo),e(c_,Cq),e(Cq,Jvo),e(c_,Yvo),e(z,Kvo),e(z,f_),e(f_,xse),e(xse,Zvo),e(f_,eFo),e(f_,wq),e(wq,oFo),e(f_,rFo),e(z,tFo),e(z,m_),e(m_,$se),e($se,aFo),e(m_,nFo),e(m_,Aq),e(Aq,sFo),e(m_,lFo),e(z,iFo),e(z,g_),e(g_,kse),e(kse,dFo),e(g_,cFo),e(g_,yq),e(yq,fFo),e(g_,mFo),e(z,gFo),e(z,h_),e(h_,Sse),e(Sse,hFo),e(h_,pFo),e(h_,Lq),e(Lq,uFo),e(h_,_Fo),e(z,bFo),e(z,p_),e(p_,Rse),e(Rse,vFo),e(p_,FFo),e(p_,xq),e(xq,TFo),e(p_,MFo),e(z,EFo),e(z,u_),e(u_,Bse),e(Bse,CFo),e(u_,wFo),e(u_,$q),e($q,AFo),e(u_,yFo),e(z,LFo),e(z,__),e(__,Pse),e(Pse,xFo),e(__,$Fo),e(__,kq),e(kq,kFo),e(__,SFo),e(z,RFo),e(z,b_),e(b_,Ise),e(Ise,BFo),e(b_,PFo),e(b_,Sq),e(Sq,IFo),e(b_,qFo),e(z,NFo),e(z,v_),e(v_,qse),e(qse,jFo),e(v_,DFo),e(v_,Rq),e(Rq,GFo),e(v_,OFo),e(z,VFo),e(z,F_),e(F_,Nse),e(Nse,XFo),e(F_,zFo),e(F_,Bq),e(Bq,QFo),e(F_,WFo),e(z,HFo),e(z,T_),e(T_,jse),e(jse,UFo),e(T_,JFo),e(T_,Pq),e(Pq,YFo),e(T_,KFo),e(z,ZFo),e(z,M_),e(M_,Dse),e(Dse,e6o),e(M_,o6o),e(M_,Iq),e(Iq,r6o),e(M_,t6o),e(z,a6o),e(z,E_),e(E_,Gse),e(Gse,n6o),e(E_,s6o),e(E_,qq),e(qq,l6o),e(E_,i6o),e(z,d6o),e(z,C_),e(C_,Ose),e(Ose,c6o),e(C_,f6o),e(C_,Nq),e(Nq,m6o),e(C_,g6o),e(z,h6o),e(z,w_),e(w_,Vse),e(Vse,p6o),e(w_,u6o),e(w_,jq),e(jq,_6o),e(w_,b6o),e(z,v6o),e(z,A_),e(A_,Xse),e(Xse,F6o),e(A_,T6o),e(A_,Dq),e(Dq,M6o),e(A_,E6o),e(z,C6o),e(z,y_),e(y_,zse),e(zse,w6o),e(y_,A6o),e(y_,Gq),e(Gq,y6o),e(y_,L6o),e(z,x6o),e(z,L_),e(L_,Qse),e(Qse,$6o),e(L_,k6o),e(L_,Oq),e(Oq,S6o),e(L_,R6o),e(z,B6o),e(z,x_),e(x_,Wse),e(Wse,P6o),e(x_,I6o),e(x_,Vq),e(Vq,q6o),e(x_,N6o),e(z,j6o),e(z,$_),e($_,Hse),e(Hse,D6o),e($_,G6o),e($_,Xq),e(Xq,O6o),e($_,V6o),e(z,X6o),e(z,k_),e(k_,Use),e(Use,z6o),e(k_,Q6o),e(k_,zq),e(zq,W6o),e(k_,H6o),e(z,U6o),e(z,S_),e(S_,Jse),e(Jse,J6o),e(S_,Y6o),e(S_,Qq),e(Qq,K6o),e(S_,Z6o),e(z,eTo),e(z,R_),e(R_,Yse),e(Yse,oTo),e(R_,rTo),e(R_,Wq),e(Wq,tTo),e(R_,aTo),e(z,nTo),e(z,B_),e(B_,Kse),e(Kse,sTo),e(B_,lTo),e(B_,Hq),e(Hq,iTo),e(B_,dTo),e(z,cTo),e(z,P_),e(P_,Zse),e(Zse,fTo),e(P_,mTo),e(P_,Uq),e(Uq,gTo),e(P_,hTo),e(z,pTo),e(z,I_),e(I_,ele),e(ele,uTo),e(I_,_To),e(I_,Jq),e(Jq,bTo),e(I_,vTo),e(z,FTo),e(z,q_),e(q_,ole),e(ole,TTo),e(q_,MTo),e(q_,Yq),e(Yq,ETo),e(q_,CTo),e(z,wTo),e(z,N_),e(N_,rle),e(rle,ATo),e(N_,yTo),e(N_,Kq),e(Kq,LTo),e(N_,xTo),e(z,$To),e(z,j_),e(j_,tle),e(tle,kTo),e(j_,STo),e(j_,Zq),e(Zq,RTo),e(j_,BTo),e(z,PTo),e(z,D_),e(D_,ale),e(ale,ITo),e(D_,qTo),e(D_,eN),e(eN,NTo),e(D_,jTo),e(z,DTo),e(z,G_),e(G_,nle),e(nle,GTo),e(G_,OTo),e(G_,oN),e(oN,VTo),e(G_,XTo),e(z,zTo),e(z,O_),e(O_,sle),e(sle,QTo),e(O_,WTo),e(O_,rN),e(rN,HTo),e(O_,UTo),e(He,JTo),e(He,V_),e(V_,YTo),e(V_,lle),e(lle,KTo),e(V_,ZTo),e(V_,ile),e(ile,e7o),e(He,o7o),M(X_,He,null),b(f,QRe,_),b(f,Ci,_),e(Ci,z_),e(z_,dle),M(eA,dle,null),e(Ci,r7o),e(Ci,cle),e(cle,t7o),b(f,WRe,_),b(f,xo,_),M(oA,xo,null),e(xo,a7o),e(xo,wi),e(wi,n7o),e(wi,tN),e(tN,s7o),e(wi,l7o),e(wi,aN),e(aN,i7o),e(wi,d7o),e(xo,c7o),e(xo,rA),e(rA,f7o),e(rA,fle),e(fle,m7o),e(rA,g7o),e(xo,h7o),e(xo,ot),M(tA,ot,null),e(ot,p7o),e(ot,mle),e(mle,u7o),e(ot,_7o),e(ot,Ai),e(Ai,b7o),e(Ai,gle),e(gle,v7o),e(Ai,F7o),e(Ai,nN),e(nN,T7o),e(Ai,M7o),e(ot,E7o),M(Q_,ot,null),e(xo,C7o),e(xo,Ue),M(aA,Ue,null),e(Ue,w7o),e(Ue,hle),e(hle,A7o),e(Ue,y7o),e(Ue,wa),e(wa,L7o),e(wa,ple),e(ple,x7o),e(wa,$7o),e(wa,ule),e(ule,k7o),e(wa,S7o),e(wa,_le),e(_le,R7o),e(wa,B7o),e(Ue,P7o),e(Ue,Q),e(Q,W_),e(W_,ble),e(ble,I7o),e(W_,q7o),e(W_,sN),e(sN,N7o),e(W_,j7o),e(Q,D7o),e(Q,H_),e(H_,vle),e(vle,G7o),e(H_,O7o),e(H_,lN),e(lN,V7o),e(H_,X7o),e(Q,z7o),e(Q,U_),e(U_,Fle),e(Fle,Q7o),e(U_,W7o),e(U_,iN),e(iN,H7o),e(U_,U7o),e(Q,J7o),e(Q,J_),e(J_,Tle),e(Tle,Y7o),e(J_,K7o),e(J_,dN),e(dN,Z7o),e(J_,e9o),e(Q,o9o),e(Q,Y_),e(Y_,Mle),e(Mle,r9o),e(Y_,t9o),e(Y_,cN),e(cN,a9o),e(Y_,n9o),e(Q,s9o),e(Q,K_),e(K_,Ele),e(Ele,l9o),e(K_,i9o),e(K_,fN),e(fN,d9o),e(K_,c9o),e(Q,f9o),e(Q,Z_),e(Z_,Cle),e(Cle,m9o),e(Z_,g9o),e(Z_,mN),e(mN,h9o),e(Z_,p9o),e(Q,u9o),e(Q,e1),e(e1,wle),e(wle,_9o),e(e1,b9o),e(e1,gN),e(gN,v9o),e(e1,F9o),e(Q,T9o),e(Q,o1),e(o1,Ale),e(Ale,M9o),e(o1,E9o),e(o1,hN),e(hN,C9o),e(o1,w9o),e(Q,A9o),e(Q,r1),e(r1,yle),e(yle,y9o),e(r1,L9o),e(r1,pN),e(pN,x9o),e(r1,$9o),e(Q,k9o),e(Q,t1),e(t1,Lle),e(Lle,S9o),e(t1,R9o),e(t1,uN),e(uN,B9o),e(t1,P9o),e(Q,I9o),e(Q,a1),e(a1,xle),e(xle,q9o),e(a1,N9o),e(a1,_N),e(_N,j9o),e(a1,D9o),e(Q,G9o),e(Q,n1),e(n1,$le),e($le,O9o),e(n1,V9o),e(n1,bN),e(bN,X9o),e(n1,z9o),e(Q,Q9o),e(Q,s1),e(s1,kle),e(kle,W9o),e(s1,H9o),e(s1,vN),e(vN,U9o),e(s1,J9o),e(Q,Y9o),e(Q,l1),e(l1,Sle),e(Sle,K9o),e(l1,Z9o),e(l1,FN),e(FN,eMo),e(l1,oMo),e(Q,rMo),e(Q,i1),e(i1,Rle),e(Rle,tMo),e(i1,aMo),e(i1,TN),e(TN,nMo),e(i1,sMo),e(Q,lMo),e(Q,d1),e(d1,Ble),e(Ble,iMo),e(d1,dMo),e(d1,MN),e(MN,cMo),e(d1,fMo),e(Q,mMo),e(Q,c1),e(c1,Ple),e(Ple,gMo),e(c1,hMo),e(c1,EN),e(EN,pMo),e(c1,uMo),e(Q,_Mo),e(Q,f1),e(f1,Ile),e(Ile,bMo),e(f1,vMo),e(f1,CN),e(CN,FMo),e(f1,TMo),e(Q,MMo),e(Q,m1),e(m1,qle),e(qle,EMo),e(m1,CMo),e(m1,wN),e(wN,wMo),e(m1,AMo),e(Q,yMo),e(Q,g1),e(g1,Nle),e(Nle,LMo),e(g1,xMo),e(g1,AN),e(AN,$Mo),e(g1,kMo),e(Q,SMo),e(Q,h1),e(h1,jle),e(jle,RMo),e(h1,BMo),e(h1,yN),e(yN,PMo),e(h1,IMo),e(Q,qMo),e(Q,p1),e(p1,Dle),e(Dle,NMo),e(p1,jMo),e(p1,LN),e(LN,DMo),e(p1,GMo),e(Q,OMo),e(Q,u1),e(u1,Gle),e(Gle,VMo),e(u1,XMo),e(u1,xN),e(xN,zMo),e(u1,QMo),e(Q,WMo),e(Q,_1),e(_1,Ole),e(Ole,HMo),e(_1,UMo),e(_1,$N),e($N,JMo),e(_1,YMo),e(Q,KMo),e(Q,b1),e(b1,Vle),e(Vle,ZMo),e(b1,eEo),e(b1,kN),e(kN,oEo),e(b1,rEo),e(Q,tEo),e(Q,v1),e(v1,Xle),e(Xle,aEo),e(v1,nEo),e(v1,SN),e(SN,sEo),e(v1,lEo),e(Q,iEo),e(Q,F1),e(F1,zle),e(zle,dEo),e(F1,cEo),e(F1,RN),e(RN,fEo),e(F1,mEo),e(Q,gEo),e(Q,T1),e(T1,Qle),e(Qle,hEo),e(T1,pEo),e(T1,BN),e(BN,uEo),e(T1,_Eo),e(Q,bEo),e(Q,M1),e(M1,Wle),e(Wle,vEo),e(M1,FEo),e(M1,PN),e(PN,TEo),e(M1,MEo),e(Q,EEo),e(Q,E1),e(E1,Hle),e(Hle,CEo),e(E1,wEo),e(E1,Ule),e(Ule,AEo),e(E1,yEo),e(Q,LEo),e(Q,C1),e(C1,Jle),e(Jle,xEo),e(C1,$Eo),e(C1,IN),e(IN,kEo),e(C1,SEo),e(Q,REo),e(Q,w1),e(w1,Yle),e(Yle,BEo),e(w1,PEo),e(w1,qN),e(qN,IEo),e(w1,qEo),e(Q,NEo),e(Q,A1),e(A1,Kle),e(Kle,jEo),e(A1,DEo),e(A1,NN),e(NN,GEo),e(A1,OEo),e(Q,VEo),e(Q,y1),e(y1,Zle),e(Zle,XEo),e(y1,zEo),e(y1,jN),e(jN,QEo),e(y1,WEo),e(Ue,HEo),e(Ue,L1),e(L1,UEo),e(L1,eie),e(eie,JEo),e(L1,YEo),e(L1,oie),e(oie,KEo),e(Ue,ZEo),M(x1,Ue,null),b(f,HRe,_),b(f,yi,_),e(yi,$1),e($1,rie),M(nA,rie,null),e(yi,e5o),e(yi,tie),e(tie,o5o),b(f,URe,_),b(f,$o,_),M(sA,$o,null),e($o,r5o),e($o,Li),e(Li,t5o),e(Li,DN),e(DN,a5o),e(Li,n5o),e(Li,GN),e(GN,s5o),e(Li,l5o),e($o,i5o),e($o,lA),e(lA,d5o),e(lA,aie),e(aie,c5o),e(lA,f5o),e($o,m5o),e($o,rt),M(iA,rt,null),e(rt,g5o),e(rt,nie),e(nie,h5o),e(rt,p5o),e(rt,xi),e(xi,u5o),e(xi,sie),e(sie,_5o),e(xi,b5o),e(xi,ON),e(ON,v5o),e(xi,F5o),e(rt,T5o),M(k1,rt,null),e($o,M5o),e($o,Je),M(dA,Je,null),e(Je,E5o),e(Je,lie),e(lie,C5o),e(Je,w5o),e(Je,Aa),e(Aa,A5o),e(Aa,iie),e(iie,y5o),e(Aa,L5o),e(Aa,die),e(die,x5o),e(Aa,$5o),e(Aa,cie),e(cie,k5o),e(Aa,S5o),e(Je,R5o),e(Je,he),e(he,S1),e(S1,fie),e(fie,B5o),e(S1,P5o),e(S1,VN),e(VN,I5o),e(S1,q5o),e(he,N5o),e(he,R1),e(R1,mie),e(mie,j5o),e(R1,D5o),e(R1,XN),e(XN,G5o),e(R1,O5o),e(he,V5o),e(he,B1),e(B1,gie),e(gie,X5o),e(B1,z5o),e(B1,zN),e(zN,Q5o),e(B1,W5o),e(he,H5o),e(he,P1),e(P1,hie),e(hie,U5o),e(P1,J5o),e(P1,QN),e(QN,Y5o),e(P1,K5o),e(he,Z5o),e(he,I1),e(I1,pie),e(pie,eCo),e(I1,oCo),e(I1,WN),e(WN,rCo),e(I1,tCo),e(he,aCo),e(he,q1),e(q1,uie),e(uie,nCo),e(q1,sCo),e(q1,HN),e(HN,lCo),e(q1,iCo),e(he,dCo),e(he,N1),e(N1,_ie),e(_ie,cCo),e(N1,fCo),e(N1,UN),e(UN,mCo),e(N1,gCo),e(he,hCo),e(he,j1),e(j1,bie),e(bie,pCo),e(j1,uCo),e(j1,JN),e(JN,_Co),e(j1,bCo),e(he,vCo),e(he,D1),e(D1,vie),e(vie,FCo),e(D1,TCo),e(D1,YN),e(YN,MCo),e(D1,ECo),e(he,CCo),e(he,G1),e(G1,Fie),e(Fie,wCo),e(G1,ACo),e(G1,KN),e(KN,yCo),e(G1,LCo),e(he,xCo),e(he,O1),e(O1,Tie),e(Tie,$Co),e(O1,kCo),e(O1,ZN),e(ZN,SCo),e(O1,RCo),e(he,BCo),e(he,V1),e(V1,Mie),e(Mie,PCo),e(V1,ICo),e(V1,ej),e(ej,qCo),e(V1,NCo),e(he,jCo),e(he,X1),e(X1,Eie),e(Eie,DCo),e(X1,GCo),e(X1,oj),e(oj,OCo),e(X1,VCo),e(he,XCo),e(he,z1),e(z1,Cie),e(Cie,zCo),e(z1,QCo),e(z1,rj),e(rj,WCo),e(z1,HCo),e(he,UCo),e(he,Q1),e(Q1,wie),e(wie,JCo),e(Q1,YCo),e(Q1,tj),e(tj,KCo),e(Q1,ZCo),e(he,e3o),e(he,W1),e(W1,Aie),e(Aie,o3o),e(W1,r3o),e(W1,aj),e(aj,t3o),e(W1,a3o),e(he,n3o),e(he,H1),e(H1,yie),e(yie,s3o),e(H1,l3o),e(H1,nj),e(nj,i3o),e(H1,d3o),e(Je,c3o),e(Je,U1),e(U1,f3o),e(U1,Lie),e(Lie,m3o),e(U1,g3o),e(U1,xie),e(xie,h3o),e(Je,p3o),M(J1,Je,null),b(f,JRe,_),b(f,$i,_),e($i,Y1),e(Y1,$ie),M(cA,$ie,null),e($i,u3o),e($i,kie),e(kie,_3o),b(f,YRe,_),b(f,ko,_),M(fA,ko,null),e(ko,b3o),e(ko,ki),e(ki,v3o),e(ki,sj),e(sj,F3o),e(ki,T3o),e(ki,lj),e(lj,M3o),e(ki,E3o),e(ko,C3o),e(ko,mA),e(mA,w3o),e(mA,Sie),e(Sie,A3o),e(mA,y3o),e(ko,L3o),e(ko,tt),M(gA,tt,null),e(tt,x3o),e(tt,Rie),e(Rie,$3o),e(tt,k3o),e(tt,Si),e(Si,S3o),e(Si,Bie),e(Bie,R3o),e(Si,B3o),e(Si,ij),e(ij,P3o),e(Si,I3o),e(tt,q3o),M(K1,tt,null),e(ko,N3o),e(ko,Ye),M(hA,Ye,null),e(Ye,j3o),e(Ye,Pie),e(Pie,D3o),e(Ye,G3o),e(Ye,ya),e(ya,O3o),e(ya,Iie),e(Iie,V3o),e(ya,X3o),e(ya,qie),e(qie,z3o),e(ya,Q3o),e(ya,Nie),e(Nie,W3o),e(ya,H3o),e(Ye,U3o),e(Ye,q),e(q,Z1),e(Z1,jie),e(jie,J3o),e(Z1,Y3o),e(Z1,dj),e(dj,K3o),e(Z1,Z3o),e(q,ewo),e(q,eb),e(eb,Die),e(Die,owo),e(eb,rwo),e(eb,cj),e(cj,two),e(eb,awo),e(q,nwo),e(q,ob),e(ob,Gie),e(Gie,swo),e(ob,lwo),e(ob,fj),e(fj,iwo),e(ob,dwo),e(q,cwo),e(q,rb),e(rb,Oie),e(Oie,fwo),e(rb,mwo),e(rb,mj),e(mj,gwo),e(rb,hwo),e(q,pwo),e(q,tb),e(tb,Vie),e(Vie,uwo),e(tb,_wo),e(tb,gj),e(gj,bwo),e(tb,vwo),e(q,Fwo),e(q,ab),e(ab,Xie),e(Xie,Two),e(ab,Mwo),e(ab,hj),e(hj,Ewo),e(ab,Cwo),e(q,wwo),e(q,nb),e(nb,zie),e(zie,Awo),e(nb,ywo),e(nb,pj),e(pj,Lwo),e(nb,xwo),e(q,$wo),e(q,sb),e(sb,Qie),e(Qie,kwo),e(sb,Swo),e(sb,uj),e(uj,Rwo),e(sb,Bwo),e(q,Pwo),e(q,lb),e(lb,Wie),e(Wie,Iwo),e(lb,qwo),e(lb,_j),e(_j,Nwo),e(lb,jwo),e(q,Dwo),e(q,ib),e(ib,Hie),e(Hie,Gwo),e(ib,Owo),e(ib,bj),e(bj,Vwo),e(ib,Xwo),e(q,zwo),e(q,db),e(db,Uie),e(Uie,Qwo),e(db,Wwo),e(db,vj),e(vj,Hwo),e(db,Uwo),e(q,Jwo),e(q,cb),e(cb,Jie),e(Jie,Ywo),e(cb,Kwo),e(cb,Fj),e(Fj,Zwo),e(cb,eAo),e(q,oAo),e(q,fb),e(fb,Yie),e(Yie,rAo),e(fb,tAo),e(fb,Tj),e(Tj,aAo),e(fb,nAo),e(q,sAo),e(q,mb),e(mb,Kie),e(Kie,lAo),e(mb,iAo),e(mb,Mj),e(Mj,dAo),e(mb,cAo),e(q,fAo),e(q,gb),e(gb,Zie),e(Zie,mAo),e(gb,gAo),e(gb,Ej),e(Ej,hAo),e(gb,pAo),e(q,uAo),e(q,hb),e(hb,ede),e(ede,_Ao),e(hb,bAo),e(hb,Cj),e(Cj,vAo),e(hb,FAo),e(q,TAo),e(q,pb),e(pb,ode),e(ode,MAo),e(pb,EAo),e(pb,wj),e(wj,CAo),e(pb,wAo),e(q,AAo),e(q,ub),e(ub,rde),e(rde,yAo),e(ub,LAo),e(ub,Aj),e(Aj,xAo),e(ub,$Ao),e(q,kAo),e(q,_b),e(_b,tde),e(tde,SAo),e(_b,RAo),e(_b,yj),e(yj,BAo),e(_b,PAo),e(q,IAo),e(q,bb),e(bb,ade),e(ade,qAo),e(bb,NAo),e(bb,Lj),e(Lj,jAo),e(bb,DAo),e(q,GAo),e(q,vb),e(vb,nde),e(nde,OAo),e(vb,VAo),e(vb,xj),e(xj,XAo),e(vb,zAo),e(q,QAo),e(q,Fb),e(Fb,sde),e(sde,WAo),e(Fb,HAo),e(Fb,$j),e($j,UAo),e(Fb,JAo),e(q,YAo),e(q,Tb),e(Tb,lde),e(lde,KAo),e(Tb,ZAo),e(Tb,kj),e(kj,e0o),e(Tb,o0o),e(q,r0o),e(q,Mb),e(Mb,ide),e(ide,t0o),e(Mb,a0o),e(Mb,Sj),e(Sj,n0o),e(Mb,s0o),e(q,l0o),e(q,Eb),e(Eb,dde),e(dde,i0o),e(Eb,d0o),e(Eb,Rj),e(Rj,c0o),e(Eb,f0o),e(q,m0o),e(q,Cb),e(Cb,cde),e(cde,g0o),e(Cb,h0o),e(Cb,Bj),e(Bj,p0o),e(Cb,u0o),e(q,_0o),e(q,wb),e(wb,fde),e(fde,b0o),e(wb,v0o),e(wb,Pj),e(Pj,F0o),e(wb,T0o),e(q,M0o),e(q,Ab),e(Ab,mde),e(mde,E0o),e(Ab,C0o),e(Ab,Ij),e(Ij,w0o),e(Ab,A0o),e(q,y0o),e(q,yb),e(yb,gde),e(gde,L0o),e(yb,x0o),e(yb,qj),e(qj,$0o),e(yb,k0o),e(q,S0o),e(q,Lb),e(Lb,hde),e(hde,R0o),e(Lb,B0o),e(Lb,Nj),e(Nj,P0o),e(Lb,I0o),e(q,q0o),e(q,xb),e(xb,pde),e(pde,N0o),e(xb,j0o),e(xb,jj),e(jj,D0o),e(xb,G0o),e(q,O0o),e(q,$b),e($b,ude),e(ude,V0o),e($b,X0o),e($b,Dj),e(Dj,z0o),e($b,Q0o),e(q,W0o),e(q,kb),e(kb,_de),e(_de,H0o),e(kb,U0o),e(kb,Gj),e(Gj,J0o),e(kb,Y0o),e(q,K0o),e(q,Sb),e(Sb,bde),e(bde,Z0o),e(Sb,eyo),e(Sb,Oj),e(Oj,oyo),e(Sb,ryo),e(q,tyo),e(q,Rb),e(Rb,vde),e(vde,ayo),e(Rb,nyo),e(Rb,Vj),e(Vj,syo),e(Rb,lyo),e(q,iyo),e(q,Bb),e(Bb,Fde),e(Fde,dyo),e(Bb,cyo),e(Bb,Xj),e(Xj,fyo),e(Bb,myo),e(q,gyo),e(q,Pb),e(Pb,Tde),e(Tde,hyo),e(Pb,pyo),e(Pb,zj),e(zj,uyo),e(Pb,_yo),e(q,byo),e(q,Ib),e(Ib,Mde),e(Mde,vyo),e(Ib,Fyo),e(Ib,Qj),e(Qj,Tyo),e(Ib,Myo),e(q,Eyo),e(q,qb),e(qb,Ede),e(Ede,Cyo),e(qb,wyo),e(qb,Wj),e(Wj,Ayo),e(qb,yyo),e(q,Lyo),e(q,Nb),e(Nb,Cde),e(Cde,xyo),e(Nb,$yo),e(Nb,Hj),e(Hj,kyo),e(Nb,Syo),e(q,Ryo),e(q,jb),e(jb,wde),e(wde,Byo),e(jb,Pyo),e(jb,Uj),e(Uj,Iyo),e(jb,qyo),e(q,Nyo),e(q,Db),e(Db,Ade),e(Ade,jyo),e(Db,Dyo),e(Db,Jj),e(Jj,Gyo),e(Db,Oyo),e(q,Vyo),e(q,Gb),e(Gb,yde),e(yde,Xyo),e(Gb,zyo),e(Gb,Yj),e(Yj,Qyo),e(Gb,Wyo),e(q,Hyo),e(q,Ob),e(Ob,Lde),e(Lde,Uyo),e(Ob,Jyo),e(Ob,Kj),e(Kj,Yyo),e(Ob,Kyo),e(q,Zyo),e(q,Vb),e(Vb,xde),e(xde,eLo),e(Vb,oLo),e(Vb,Zj),e(Zj,rLo),e(Vb,tLo),e(q,aLo),e(q,Xb),e(Xb,$de),e($de,nLo),e(Xb,sLo),e(Xb,eD),e(eD,lLo),e(Xb,iLo),e(q,dLo),e(q,zb),e(zb,kde),e(kde,cLo),e(zb,fLo),e(zb,oD),e(oD,mLo),e(zb,gLo),e(Ye,hLo),e(Ye,Qb),e(Qb,pLo),e(Qb,Sde),e(Sde,uLo),e(Qb,_Lo),e(Qb,Rde),e(Rde,bLo),e(Ye,vLo),M(Wb,Ye,null),b(f,KRe,_),b(f,Ri,_),e(Ri,Hb),e(Hb,Bde),M(pA,Bde,null),e(Ri,FLo),e(Ri,Pde),e(Pde,TLo),b(f,ZRe,_),b(f,So,_),M(uA,So,null),e(So,MLo),e(So,Bi),e(Bi,ELo),e(Bi,rD),e(rD,CLo),e(Bi,wLo),e(Bi,tD),e(tD,ALo),e(Bi,yLo),e(So,LLo),e(So,_A),e(_A,xLo),e(_A,Ide),e(Ide,$Lo),e(_A,kLo),e(So,SLo),e(So,at),M(bA,at,null),e(at,RLo),e(at,qde),e(qde,BLo),e(at,PLo),e(at,Pi),e(Pi,ILo),e(Pi,Nde),e(Nde,qLo),e(Pi,NLo),e(Pi,aD),e(aD,jLo),e(Pi,DLo),e(at,GLo),M(Ub,at,null),e(So,OLo),e(So,Ke),M(vA,Ke,null),e(Ke,VLo),e(Ke,jde),e(jde,XLo),e(Ke,zLo),e(Ke,La),e(La,QLo),e(La,Dde),e(Dde,WLo),e(La,HLo),e(La,Gde),e(Gde,ULo),e(La,JLo),e(La,Ode),e(Ode,YLo),e(La,KLo),e(Ke,ZLo),e(Ke,Y),e(Y,Jb),e(Jb,Vde),e(Vde,e8o),e(Jb,o8o),e(Jb,nD),e(nD,r8o),e(Jb,t8o),e(Y,a8o),e(Y,Yb),e(Yb,Xde),e(Xde,n8o),e(Yb,s8o),e(Yb,sD),e(sD,l8o),e(Yb,i8o),e(Y,d8o),e(Y,Kb),e(Kb,zde),e(zde,c8o),e(Kb,f8o),e(Kb,lD),e(lD,m8o),e(Kb,g8o),e(Y,h8o),e(Y,Zb),e(Zb,Qde),e(Qde,p8o),e(Zb,u8o),e(Zb,iD),e(iD,_8o),e(Zb,b8o),e(Y,v8o),e(Y,e4),e(e4,Wde),e(Wde,F8o),e(e4,T8o),e(e4,dD),e(dD,M8o),e(e4,E8o),e(Y,C8o),e(Y,o4),e(o4,Hde),e(Hde,w8o),e(o4,A8o),e(o4,cD),e(cD,y8o),e(o4,L8o),e(Y,x8o),e(Y,r4),e(r4,Ude),e(Ude,$8o),e(r4,k8o),e(r4,fD),e(fD,S8o),e(r4,R8o),e(Y,B8o),e(Y,t4),e(t4,Jde),e(Jde,P8o),e(t4,I8o),e(t4,mD),e(mD,q8o),e(t4,N8o),e(Y,j8o),e(Y,a4),e(a4,Yde),e(Yde,D8o),e(a4,G8o),e(a4,gD),e(gD,O8o),e(a4,V8o),e(Y,X8o),e(Y,n4),e(n4,Kde),e(Kde,z8o),e(n4,Q8o),e(n4,hD),e(hD,W8o),e(n4,H8o),e(Y,U8o),e(Y,s4),e(s4,Zde),e(Zde,J8o),e(s4,Y8o),e(s4,pD),e(pD,K8o),e(s4,Z8o),e(Y,exo),e(Y,l4),e(l4,ece),e(ece,oxo),e(l4,rxo),e(l4,uD),e(uD,txo),e(l4,axo),e(Y,nxo),e(Y,i4),e(i4,oce),e(oce,sxo),e(i4,lxo),e(i4,_D),e(_D,ixo),e(i4,dxo),e(Y,cxo),e(Y,d4),e(d4,rce),e(rce,fxo),e(d4,mxo),e(d4,bD),e(bD,gxo),e(d4,hxo),e(Y,pxo),e(Y,c4),e(c4,tce),e(tce,uxo),e(c4,_xo),e(c4,vD),e(vD,bxo),e(c4,vxo),e(Y,Fxo),e(Y,f4),e(f4,ace),e(ace,Txo),e(f4,Mxo),e(f4,FD),e(FD,Exo),e(f4,Cxo),e(Y,wxo),e(Y,m4),e(m4,nce),e(nce,Axo),e(m4,yxo),e(m4,TD),e(TD,Lxo),e(m4,xxo),e(Y,$xo),e(Y,g4),e(g4,sce),e(sce,kxo),e(g4,Sxo),e(g4,MD),e(MD,Rxo),e(g4,Bxo),e(Y,Pxo),e(Y,h4),e(h4,lce),e(lce,Ixo),e(h4,qxo),e(h4,ED),e(ED,Nxo),e(h4,jxo),e(Y,Dxo),e(Y,p4),e(p4,ice),e(ice,Gxo),e(p4,Oxo),e(p4,CD),e(CD,Vxo),e(p4,Xxo),e(Y,zxo),e(Y,u4),e(u4,dce),e(dce,Qxo),e(u4,Wxo),e(u4,wD),e(wD,Hxo),e(u4,Uxo),e(Y,Jxo),e(Y,_4),e(_4,cce),e(cce,Yxo),e(_4,Kxo),e(_4,AD),e(AD,Zxo),e(_4,e$o),e(Y,o$o),e(Y,b4),e(b4,fce),e(fce,r$o),e(b4,t$o),e(b4,yD),e(yD,a$o),e(b4,n$o),e(Y,s$o),e(Y,v4),e(v4,mce),e(mce,l$o),e(v4,i$o),e(v4,LD),e(LD,d$o),e(v4,c$o),e(Y,f$o),e(Y,F4),e(F4,gce),e(gce,m$o),e(F4,g$o),e(F4,xD),e(xD,h$o),e(F4,p$o),e(Y,u$o),e(Y,T4),e(T4,hce),e(hce,_$o),e(T4,b$o),e(T4,$D),e($D,v$o),e(T4,F$o),e(Y,T$o),e(Y,M4),e(M4,pce),e(pce,M$o),e(M4,E$o),e(M4,kD),e(kD,C$o),e(M4,w$o),e(Y,A$o),e(Y,E4),e(E4,uce),e(uce,y$o),e(E4,L$o),e(E4,SD),e(SD,x$o),e(E4,$$o),e(Ke,k$o),e(Ke,C4),e(C4,S$o),e(C4,_ce),e(_ce,R$o),e(C4,B$o),e(C4,bce),e(bce,P$o),e(Ke,I$o),M(w4,Ke,null),b(f,eBe,_),b(f,Ii,_),e(Ii,A4),e(A4,vce),M(FA,vce,null),e(Ii,q$o),e(Ii,Fce),e(Fce,N$o),b(f,oBe,_),b(f,Ro,_),M(TA,Ro,null),e(Ro,j$o),e(Ro,qi),e(qi,D$o),e(qi,RD),e(RD,G$o),e(qi,O$o),e(qi,BD),e(BD,V$o),e(qi,X$o),e(Ro,z$o),e(Ro,MA),e(MA,Q$o),e(MA,Tce),e(Tce,W$o),e(MA,H$o),e(Ro,U$o),e(Ro,nt),M(EA,nt,null),e(nt,J$o),e(nt,Mce),e(Mce,Y$o),e(nt,K$o),e(nt,Ni),e(Ni,Z$o),e(Ni,Ece),e(Ece,eko),e(Ni,oko),e(Ni,PD),e(PD,rko),e(Ni,tko),e(nt,ako),M(y4,nt,null),e(Ro,nko),e(Ro,Ze),M(CA,Ze,null),e(Ze,sko),e(Ze,Cce),e(Cce,lko),e(Ze,iko),e(Ze,xa),e(xa,dko),e(xa,wce),e(wce,cko),e(xa,fko),e(xa,Ace),e(Ace,mko),e(xa,gko),e(xa,yce),e(yce,hko),e(xa,pko),e(Ze,uko),e(Ze,Wr),e(Wr,L4),e(L4,Lce),e(Lce,_ko),e(L4,bko),e(L4,ID),e(ID,vko),e(L4,Fko),e(Wr,Tko),e(Wr,x4),e(x4,xce),e(xce,Mko),e(x4,Eko),e(x4,qD),e(qD,Cko),e(x4,wko),e(Wr,Ako),e(Wr,$4),e($4,$ce),e($ce,yko),e($4,Lko),e($4,ND),e(ND,xko),e($4,$ko),e(Wr,kko),e(Wr,k4),e(k4,kce),e(kce,Sko),e(k4,Rko),e(k4,jD),e(jD,Bko),e(k4,Pko),e(Wr,Iko),e(Wr,S4),e(S4,Sce),e(Sce,qko),e(S4,Nko),e(S4,DD),e(DD,jko),e(S4,Dko),e(Ze,Gko),e(Ze,R4),e(R4,Oko),e(R4,Rce),e(Rce,Vko),e(R4,Xko),e(R4,Bce),e(Bce,zko),e(Ze,Qko),M(B4,Ze,null),b(f,rBe,_),b(f,ji,_),e(ji,P4),e(P4,Pce),M(wA,Pce,null),e(ji,Wko),e(ji,Ice),e(Ice,Hko),b(f,tBe,_),b(f,Bo,_),M(AA,Bo,null),e(Bo,Uko),e(Bo,Di),e(Di,Jko),e(Di,GD),e(GD,Yko),e(Di,Kko),e(Di,OD),e(OD,Zko),e(Di,eSo),e(Bo,oSo),e(Bo,yA),e(yA,rSo),e(yA,qce),e(qce,tSo),e(yA,aSo),e(Bo,nSo),e(Bo,st),M(LA,st,null),e(st,sSo),e(st,Nce),e(Nce,lSo),e(st,iSo),e(st,Gi),e(Gi,dSo),e(Gi,jce),e(jce,cSo),e(Gi,fSo),e(Gi,VD),e(VD,mSo),e(Gi,gSo),e(st,hSo),M(I4,st,null),e(Bo,pSo),e(Bo,eo),M(xA,eo,null),e(eo,uSo),e(eo,Dce),e(Dce,_So),e(eo,bSo),e(eo,$a),e($a,vSo),e($a,Gce),e(Gce,FSo),e($a,TSo),e($a,Oce),e(Oce,MSo),e($a,ESo),e($a,Vce),e(Vce,CSo),e($a,wSo),e(eo,ASo),e(eo,U),e(U,q4),e(q4,Xce),e(Xce,ySo),e(q4,LSo),e(q4,XD),e(XD,xSo),e(q4,$So),e(U,kSo),e(U,N4),e(N4,zce),e(zce,SSo),e(N4,RSo),e(N4,zD),e(zD,BSo),e(N4,PSo),e(U,ISo),e(U,j4),e(j4,Qce),e(Qce,qSo),e(j4,NSo),e(j4,QD),e(QD,jSo),e(j4,DSo),e(U,GSo),e(U,D4),e(D4,Wce),e(Wce,OSo),e(D4,VSo),e(D4,WD),e(WD,XSo),e(D4,zSo),e(U,QSo),e(U,G4),e(G4,Hce),e(Hce,WSo),e(G4,HSo),e(G4,HD),e(HD,USo),e(G4,JSo),e(U,YSo),e(U,O4),e(O4,Uce),e(Uce,KSo),e(O4,ZSo),e(O4,UD),e(UD,eRo),e(O4,oRo),e(U,rRo),e(U,V4),e(V4,Jce),e(Jce,tRo),e(V4,aRo),e(V4,JD),e(JD,nRo),e(V4,sRo),e(U,lRo),e(U,X4),e(X4,Yce),e(Yce,iRo),e(X4,dRo),e(X4,YD),e(YD,cRo),e(X4,fRo),e(U,mRo),e(U,z4),e(z4,Kce),e(Kce,gRo),e(z4,hRo),e(z4,KD),e(KD,pRo),e(z4,uRo),e(U,_Ro),e(U,Q4),e(Q4,Zce),e(Zce,bRo),e(Q4,vRo),e(Q4,ZD),e(ZD,FRo),e(Q4,TRo),e(U,MRo),e(U,W4),e(W4,efe),e(efe,ERo),e(W4,CRo),e(W4,eG),e(eG,wRo),e(W4,ARo),e(U,yRo),e(U,H4),e(H4,ofe),e(ofe,LRo),e(H4,xRo),e(H4,oG),e(oG,$Ro),e(H4,kRo),e(U,SRo),e(U,U4),e(U4,rfe),e(rfe,RRo),e(U4,BRo),e(U4,rG),e(rG,PRo),e(U4,IRo),e(U,qRo),e(U,J4),e(J4,tfe),e(tfe,NRo),e(J4,jRo),e(J4,tG),e(tG,DRo),e(J4,GRo),e(U,ORo),e(U,Y4),e(Y4,afe),e(afe,VRo),e(Y4,XRo),e(Y4,aG),e(aG,zRo),e(Y4,QRo),e(U,WRo),e(U,K4),e(K4,nfe),e(nfe,HRo),e(K4,URo),e(K4,nG),e(nG,JRo),e(K4,YRo),e(U,KRo),e(U,Z4),e(Z4,sfe),e(sfe,ZRo),e(Z4,eBo),e(Z4,sG),e(sG,oBo),e(Z4,rBo),e(U,tBo),e(U,e2),e(e2,lfe),e(lfe,aBo),e(e2,nBo),e(e2,lG),e(lG,sBo),e(e2,lBo),e(U,iBo),e(U,o2),e(o2,ife),e(ife,dBo),e(o2,cBo),e(o2,iG),e(iG,fBo),e(o2,mBo),e(U,gBo),e(U,r2),e(r2,dfe),e(dfe,hBo),e(r2,pBo),e(r2,dG),e(dG,uBo),e(r2,_Bo),e(U,bBo),e(U,t2),e(t2,cfe),e(cfe,vBo),e(t2,FBo),e(t2,cG),e(cG,TBo),e(t2,MBo),e(U,EBo),e(U,a2),e(a2,ffe),e(ffe,CBo),e(a2,wBo),e(a2,fG),e(fG,ABo),e(a2,yBo),e(U,LBo),e(U,n2),e(n2,mfe),e(mfe,xBo),e(n2,$Bo),e(n2,mG),e(mG,kBo),e(n2,SBo),e(U,RBo),e(U,s2),e(s2,gfe),e(gfe,BBo),e(s2,PBo),e(s2,gG),e(gG,IBo),e(s2,qBo),e(U,NBo),e(U,l2),e(l2,hfe),e(hfe,jBo),e(l2,DBo),e(l2,hG),e(hG,GBo),e(l2,OBo),e(U,VBo),e(U,i2),e(i2,pfe),e(pfe,XBo),e(i2,zBo),e(i2,pG),e(pG,QBo),e(i2,WBo),e(U,HBo),e(U,d2),e(d2,ufe),e(ufe,UBo),e(d2,JBo),e(d2,uG),e(uG,YBo),e(d2,KBo),e(U,ZBo),e(U,c2),e(c2,_fe),e(_fe,ePo),e(c2,oPo),e(c2,_G),e(_G,rPo),e(c2,tPo),e(U,aPo),e(U,f2),e(f2,bfe),e(bfe,nPo),e(f2,sPo),e(f2,bG),e(bG,lPo),e(f2,iPo),e(U,dPo),e(U,m2),e(m2,vfe),e(vfe,cPo),e(m2,fPo),e(m2,vG),e(vG,mPo),e(m2,gPo),e(U,hPo),e(U,g2),e(g2,Ffe),e(Ffe,pPo),e(g2,uPo),e(g2,FG),e(FG,_Po),e(g2,bPo),e(U,vPo),e(U,h2),e(h2,Tfe),e(Tfe,FPo),e(h2,TPo),e(h2,TG),e(TG,MPo),e(h2,EPo),e(U,CPo),e(U,p2),e(p2,Mfe),e(Mfe,wPo),e(p2,APo),e(p2,MG),e(MG,yPo),e(p2,LPo),e(eo,xPo),e(eo,u2),e(u2,$Po),e(u2,Efe),e(Efe,kPo),e(u2,SPo),e(u2,Cfe),e(Cfe,RPo),e(eo,BPo),M(_2,eo,null),b(f,aBe,_),b(f,Oi,_),e(Oi,b2),e(b2,wfe),M($A,wfe,null),e(Oi,PPo),e(Oi,Afe),e(Afe,IPo),b(f,nBe,_),b(f,Po,_),M(kA,Po,null),e(Po,qPo),e(Po,Vi),e(Vi,NPo),e(Vi,EG),e(EG,jPo),e(Vi,DPo),e(Vi,CG),e(CG,GPo),e(Vi,OPo),e(Po,VPo),e(Po,SA),e(SA,XPo),e(SA,yfe),e(yfe,zPo),e(SA,QPo),e(Po,WPo),e(Po,lt),M(RA,lt,null),e(lt,HPo),e(lt,Lfe),e(Lfe,UPo),e(lt,JPo),e(lt,Xi),e(Xi,YPo),e(Xi,xfe),e(xfe,KPo),e(Xi,ZPo),e(Xi,wG),e(wG,eIo),e(Xi,oIo),e(lt,rIo),M(v2,lt,null),e(Po,tIo),e(Po,oo),M(BA,oo,null),e(oo,aIo),e(oo,$fe),e($fe,nIo),e(oo,sIo),e(oo,ka),e(ka,lIo),e(ka,kfe),e(kfe,iIo),e(ka,dIo),e(ka,Sfe),e(Sfe,cIo),e(ka,fIo),e(ka,Rfe),e(Rfe,mIo),e(ka,gIo),e(oo,hIo),e(oo,O),e(O,F2),e(F2,Bfe),e(Bfe,pIo),e(F2,uIo),e(F2,AG),e(AG,_Io),e(F2,bIo),e(O,vIo),e(O,T2),e(T2,Pfe),e(Pfe,FIo),e(T2,TIo),e(T2,yG),e(yG,MIo),e(T2,EIo),e(O,CIo),e(O,M2),e(M2,Ife),e(Ife,wIo),e(M2,AIo),e(M2,LG),e(LG,yIo),e(M2,LIo),e(O,xIo),e(O,E2),e(E2,qfe),e(qfe,$Io),e(E2,kIo),e(E2,xG),e(xG,SIo),e(E2,RIo),e(O,BIo),e(O,C2),e(C2,Nfe),e(Nfe,PIo),e(C2,IIo),e(C2,$G),e($G,qIo),e(C2,NIo),e(O,jIo),e(O,w2),e(w2,jfe),e(jfe,DIo),e(w2,GIo),e(w2,kG),e(kG,OIo),e(w2,VIo),e(O,XIo),e(O,A2),e(A2,Dfe),e(Dfe,zIo),e(A2,QIo),e(A2,SG),e(SG,WIo),e(A2,HIo),e(O,UIo),e(O,y2),e(y2,Gfe),e(Gfe,JIo),e(y2,YIo),e(y2,RG),e(RG,KIo),e(y2,ZIo),e(O,eqo),e(O,L2),e(L2,Ofe),e(Ofe,oqo),e(L2,rqo),e(L2,BG),e(BG,tqo),e(L2,aqo),e(O,nqo),e(O,x2),e(x2,Vfe),e(Vfe,sqo),e(x2,lqo),e(x2,PG),e(PG,iqo),e(x2,dqo),e(O,cqo),e(O,$2),e($2,Xfe),e(Xfe,fqo),e($2,mqo),e($2,IG),e(IG,gqo),e($2,hqo),e(O,pqo),e(O,k2),e(k2,zfe),e(zfe,uqo),e(k2,_qo),e(k2,qG),e(qG,bqo),e(k2,vqo),e(O,Fqo),e(O,S2),e(S2,Qfe),e(Qfe,Tqo),e(S2,Mqo),e(S2,NG),e(NG,Eqo),e(S2,Cqo),e(O,wqo),e(O,R2),e(R2,Wfe),e(Wfe,Aqo),e(R2,yqo),e(R2,jG),e(jG,Lqo),e(R2,xqo),e(O,$qo),e(O,B2),e(B2,Hfe),e(Hfe,kqo),e(B2,Sqo),e(B2,DG),e(DG,Rqo),e(B2,Bqo),e(O,Pqo),e(O,P2),e(P2,Ufe),e(Ufe,Iqo),e(P2,qqo),e(P2,GG),e(GG,Nqo),e(P2,jqo),e(O,Dqo),e(O,I2),e(I2,Jfe),e(Jfe,Gqo),e(I2,Oqo),e(I2,OG),e(OG,Vqo),e(I2,Xqo),e(O,zqo),e(O,q2),e(q2,Yfe),e(Yfe,Qqo),e(q2,Wqo),e(q2,VG),e(VG,Hqo),e(q2,Uqo),e(O,Jqo),e(O,N2),e(N2,Kfe),e(Kfe,Yqo),e(N2,Kqo),e(N2,XG),e(XG,Zqo),e(N2,eNo),e(O,oNo),e(O,j2),e(j2,Zfe),e(Zfe,rNo),e(j2,tNo),e(j2,zG),e(zG,aNo),e(j2,nNo),e(O,sNo),e(O,D2),e(D2,eme),e(eme,lNo),e(D2,iNo),e(D2,QG),e(QG,dNo),e(D2,cNo),e(O,fNo),e(O,G2),e(G2,ome),e(ome,mNo),e(G2,gNo),e(G2,WG),e(WG,hNo),e(G2,pNo),e(O,uNo),e(O,O2),e(O2,rme),e(rme,_No),e(O2,bNo),e(O2,HG),e(HG,vNo),e(O2,FNo),e(O,TNo),e(O,V2),e(V2,tme),e(tme,MNo),e(V2,ENo),e(V2,UG),e(UG,CNo),e(V2,wNo),e(O,ANo),e(O,X2),e(X2,ame),e(ame,yNo),e(X2,LNo),e(X2,JG),e(JG,xNo),e(X2,$No),e(O,kNo),e(O,z2),e(z2,nme),e(nme,SNo),e(z2,RNo),e(z2,YG),e(YG,BNo),e(z2,PNo),e(O,INo),e(O,Q2),e(Q2,sme),e(sme,qNo),e(Q2,NNo),e(Q2,KG),e(KG,jNo),e(Q2,DNo),e(O,GNo),e(O,W2),e(W2,lme),e(lme,ONo),e(W2,VNo),e(W2,ZG),e(ZG,XNo),e(W2,zNo),e(O,QNo),e(O,H2),e(H2,ime),e(ime,WNo),e(H2,HNo),e(H2,eO),e(eO,UNo),e(H2,JNo),e(O,YNo),e(O,U2),e(U2,dme),e(dme,KNo),e(U2,ZNo),e(U2,oO),e(oO,ejo),e(U2,ojo),e(O,rjo),e(O,J2),e(J2,cme),e(cme,tjo),e(J2,ajo),e(J2,rO),e(rO,njo),e(J2,sjo),e(O,ljo),e(O,Y2),e(Y2,fme),e(fme,ijo),e(Y2,djo),e(Y2,tO),e(tO,cjo),e(Y2,fjo),e(O,mjo),e(O,K2),e(K2,mme),e(mme,gjo),e(K2,hjo),e(K2,aO),e(aO,pjo),e(K2,ujo),e(O,_jo),e(O,Z2),e(Z2,gme),e(gme,bjo),e(Z2,vjo),e(Z2,nO),e(nO,Fjo),e(Z2,Tjo),e(O,Mjo),e(O,ev),e(ev,hme),e(hme,Ejo),e(ev,Cjo),e(ev,sO),e(sO,wjo),e(ev,Ajo),e(O,yjo),e(O,ov),e(ov,pme),e(pme,Ljo),e(ov,xjo),e(ov,lO),e(lO,$jo),e(ov,kjo),e(O,Sjo),e(O,rv),e(rv,ume),e(ume,Rjo),e(rv,Bjo),e(rv,iO),e(iO,Pjo),e(rv,Ijo),e(O,qjo),e(O,tv),e(tv,_me),e(_me,Njo),e(tv,jjo),e(tv,dO),e(dO,Djo),e(tv,Gjo),e(O,Ojo),e(O,av),e(av,bme),e(bme,Vjo),e(av,Xjo),e(av,cO),e(cO,zjo),e(av,Qjo),e(oo,Wjo),e(oo,nv),e(nv,Hjo),e(nv,vme),e(vme,Ujo),e(nv,Jjo),e(nv,Fme),e(Fme,Yjo),e(oo,Kjo),M(sv,oo,null),b(f,sBe,_),b(f,zi,_),e(zi,lv),e(lv,Tme),M(PA,Tme,null),e(zi,Zjo),e(zi,Mme),e(Mme,eDo),b(f,lBe,_),b(f,Io,_),M(IA,Io,null),e(Io,oDo),e(Io,Qi),e(Qi,rDo),e(Qi,fO),e(fO,tDo),e(Qi,aDo),e(Qi,mO),e(mO,nDo),e(Qi,sDo),e(Io,lDo),e(Io,qA),e(qA,iDo),e(qA,Eme),e(Eme,dDo),e(qA,cDo),e(Io,fDo),e(Io,it),M(NA,it,null),e(it,mDo),e(it,Cme),e(Cme,gDo),e(it,hDo),e(it,Wi),e(Wi,pDo),e(Wi,wme),e(wme,uDo),e(Wi,_Do),e(Wi,gO),e(gO,bDo),e(Wi,vDo),e(it,FDo),M(iv,it,null),e(Io,TDo),e(Io,ro),M(jA,ro,null),e(ro,MDo),e(ro,Ame),e(Ame,EDo),e(ro,CDo),e(ro,Sa),e(Sa,wDo),e(Sa,yme),e(yme,ADo),e(Sa,yDo),e(Sa,Lme),e(Lme,LDo),e(Sa,xDo),e(Sa,xme),e(xme,$Do),e(Sa,kDo),e(ro,SDo),e(ro,$me),e($me,dv),e(dv,kme),e(kme,RDo),e(dv,BDo),e(dv,hO),e(hO,PDo),e(dv,IDo),e(ro,qDo),e(ro,cv),e(cv,NDo),e(cv,Sme),e(Sme,jDo),e(cv,DDo),e(cv,Rme),e(Rme,GDo),e(ro,ODo),M(fv,ro,null),b(f,iBe,_),b(f,Hi,_),e(Hi,mv),e(mv,Bme),M(DA,Bme,null),e(Hi,VDo),e(Hi,Pme),e(Pme,XDo),b(f,dBe,_),b(f,qo,_),M(GA,qo,null),e(qo,zDo),e(qo,Ui),e(Ui,QDo),e(Ui,pO),e(pO,WDo),e(Ui,HDo),e(Ui,uO),e(uO,UDo),e(Ui,JDo),e(qo,YDo),e(qo,OA),e(OA,KDo),e(OA,Ime),e(Ime,ZDo),e(OA,eGo),e(qo,oGo),e(qo,dt),M(VA,dt,null),e(dt,rGo),e(dt,qme),e(qme,tGo),e(dt,aGo),e(dt,Ji),e(Ji,nGo),e(Ji,Nme),e(Nme,sGo),e(Ji,lGo),e(Ji,_O),e(_O,iGo),e(Ji,dGo),e(dt,cGo),M(gv,dt,null),e(qo,fGo),e(qo,to),M(XA,to,null),e(to,mGo),e(to,jme),e(jme,gGo),e(to,hGo),e(to,Ra),e(Ra,pGo),e(Ra,Dme),e(Dme,uGo),e(Ra,_Go),e(Ra,Gme),e(Gme,bGo),e(Ra,vGo),e(Ra,Ome),e(Ome,FGo),e(Ra,TGo),e(to,MGo),e(to,ve),e(ve,hv),e(hv,Vme),e(Vme,EGo),e(hv,CGo),e(hv,bO),e(bO,wGo),e(hv,AGo),e(ve,yGo),e(ve,pv),e(pv,Xme),e(Xme,LGo),e(pv,xGo),e(pv,vO),e(vO,$Go),e(pv,kGo),e(ve,SGo),e(ve,uv),e(uv,zme),e(zme,RGo),e(uv,BGo),e(uv,FO),e(FO,PGo),e(uv,IGo),e(ve,qGo),e(ve,Ls),e(Ls,Qme),e(Qme,NGo),e(Ls,jGo),e(Ls,TO),e(TO,DGo),e(Ls,GGo),e(Ls,MO),e(MO,OGo),e(Ls,VGo),e(ve,XGo),e(ve,_v),e(_v,Wme),e(Wme,zGo),e(_v,QGo),e(_v,EO),e(EO,WGo),e(_v,HGo),e(ve,UGo),e(ve,ct),e(ct,Hme),e(Hme,JGo),e(ct,YGo),e(ct,CO),e(CO,KGo),e(ct,ZGo),e(ct,wO),e(wO,eOo),e(ct,oOo),e(ct,AO),e(AO,rOo),e(ct,tOo),e(ve,aOo),e(ve,bv),e(bv,Ume),e(Ume,nOo),e(bv,sOo),e(bv,yO),e(yO,lOo),e(bv,iOo),e(ve,dOo),e(ve,vv),e(vv,Jme),e(Jme,cOo),e(vv,fOo),e(vv,LO),e(LO,mOo),e(vv,gOo),e(ve,hOo),e(ve,Fv),e(Fv,Yme),e(Yme,pOo),e(Fv,uOo),e(Fv,xO),e(xO,_Oo),e(Fv,bOo),e(ve,vOo),e(ve,Tv),e(Tv,Kme),e(Kme,FOo),e(Tv,TOo),e(Tv,$O),e($O,MOo),e(Tv,EOo),e(ve,COo),e(ve,Mv),e(Mv,Zme),e(Zme,wOo),e(Mv,AOo),e(Mv,kO),e(kO,yOo),e(Mv,LOo),e(ve,xOo),e(ve,Ev),e(Ev,ege),e(ege,$Oo),e(Ev,kOo),e(Ev,SO),e(SO,SOo),e(Ev,ROo),e(ve,BOo),e(ve,Cv),e(Cv,oge),e(oge,POo),e(Cv,IOo),e(Cv,RO),e(RO,qOo),e(Cv,NOo),e(to,jOo),e(to,wv),e(wv,DOo),e(wv,rge),e(rge,GOo),e(wv,OOo),e(wv,tge),e(tge,VOo),e(to,XOo),M(Av,to,null),b(f,cBe,_),b(f,Yi,_),e(Yi,yv),e(yv,age),M(zA,age,null),e(Yi,zOo),e(Yi,nge),e(nge,QOo),b(f,fBe,_),b(f,No,_),M(QA,No,null),e(No,WOo),e(No,Ki),e(Ki,HOo),e(Ki,BO),e(BO,UOo),e(Ki,JOo),e(Ki,PO),e(PO,YOo),e(Ki,KOo),e(No,ZOo),e(No,WA),e(WA,eVo),e(WA,sge),e(sge,oVo),e(WA,rVo),e(No,tVo),e(No,ft),M(HA,ft,null),e(ft,aVo),e(ft,lge),e(lge,nVo),e(ft,sVo),e(ft,Zi),e(Zi,lVo),e(Zi,ige),e(ige,iVo),e(Zi,dVo),e(Zi,IO),e(IO,cVo),e(Zi,fVo),e(ft,mVo),M(Lv,ft,null),e(No,gVo),e(No,ao),M(UA,ao,null),e(ao,hVo),e(ao,dge),e(dge,pVo),e(ao,uVo),e(ao,Ba),e(Ba,_Vo),e(Ba,cge),e(cge,bVo),e(Ba,vVo),e(Ba,fge),e(fge,FVo),e(Ba,TVo),e(Ba,mge),e(mge,MVo),e(Ba,EVo),e(ao,CVo),e(ao,gge),e(gge,xv),e(xv,hge),e(hge,wVo),e(xv,AVo),e(xv,qO),e(qO,yVo),e(xv,LVo),e(ao,xVo),e(ao,$v),e($v,$Vo),e($v,pge),e(pge,kVo),e($v,SVo),e($v,uge),e(uge,RVo),e(ao,BVo),M(kv,ao,null),b(f,mBe,_),b(f,ed,_),e(ed,Sv),e(Sv,_ge),M(JA,_ge,null),e(ed,PVo),e(ed,bge),e(bge,IVo),b(f,gBe,_),b(f,jo,_),M(YA,jo,null),e(jo,qVo),e(jo,od),e(od,NVo),e(od,NO),e(NO,jVo),e(od,DVo),e(od,jO),e(jO,GVo),e(od,OVo),e(jo,VVo),e(jo,KA),e(KA,XVo),e(KA,vge),e(vge,zVo),e(KA,QVo),e(jo,WVo),e(jo,mt),M(ZA,mt,null),e(mt,HVo),e(mt,Fge),e(Fge,UVo),e(mt,JVo),e(mt,rd),e(rd,YVo),e(rd,Tge),e(Tge,KVo),e(rd,ZVo),e(rd,DO),e(DO,eXo),e(rd,oXo),e(mt,rXo),M(Rv,mt,null),e(jo,tXo),e(jo,no),M(e0,no,null),e(no,aXo),e(no,Mge),e(Mge,nXo),e(no,sXo),e(no,Pa),e(Pa,lXo),e(Pa,Ege),e(Ege,iXo),e(Pa,dXo),e(Pa,Cge),e(Cge,cXo),e(Pa,fXo),e(Pa,wge),e(wge,mXo),e(Pa,gXo),e(no,hXo),e(no,qe),e(qe,Bv),e(Bv,Age),e(Age,pXo),e(Bv,uXo),e(Bv,GO),e(GO,_Xo),e(Bv,bXo),e(qe,vXo),e(qe,Pv),e(Pv,yge),e(yge,FXo),e(Pv,TXo),e(Pv,OO),e(OO,MXo),e(Pv,EXo),e(qe,CXo),e(qe,Iv),e(Iv,Lge),e(Lge,wXo),e(Iv,AXo),e(Iv,VO),e(VO,yXo),e(Iv,LXo),e(qe,xXo),e(qe,qv),e(qv,xge),e(xge,$Xo),e(qv,kXo),e(qv,XO),e(XO,SXo),e(qv,RXo),e(qe,BXo),e(qe,Nv),e(Nv,$ge),e($ge,PXo),e(Nv,IXo),e(Nv,zO),e(zO,qXo),e(Nv,NXo),e(qe,jXo),e(qe,jv),e(jv,kge),e(kge,DXo),e(jv,GXo),e(jv,QO),e(QO,OXo),e(jv,VXo),e(qe,XXo),e(qe,Dv),e(Dv,Sge),e(Sge,zXo),e(Dv,QXo),e(Dv,WO),e(WO,WXo),e(Dv,HXo),e(qe,UXo),e(qe,Gv),e(Gv,Rge),e(Rge,JXo),e(Gv,YXo),e(Gv,HO),e(HO,KXo),e(Gv,ZXo),e(no,ezo),e(no,Ov),e(Ov,ozo),e(Ov,Bge),e(Bge,rzo),e(Ov,tzo),e(Ov,Pge),e(Pge,azo),e(no,nzo),M(Vv,no,null),b(f,hBe,_),b(f,td,_),e(td,Xv),e(Xv,Ige),M(o0,Ige,null),e(td,szo),e(td,qge),e(qge,lzo),b(f,pBe,_),b(f,Do,_),M(r0,Do,null),e(Do,izo),e(Do,ad),e(ad,dzo),e(ad,UO),e(UO,czo),e(ad,fzo),e(ad,JO),e(JO,mzo),e(ad,gzo),e(Do,hzo),e(Do,t0),e(t0,pzo),e(t0,Nge),e(Nge,uzo),e(t0,_zo),e(Do,bzo),e(Do,gt),M(a0,gt,null),e(gt,vzo),e(gt,jge),e(jge,Fzo),e(gt,Tzo),e(gt,nd),e(nd,Mzo),e(nd,Dge),e(Dge,Ezo),e(nd,Czo),e(nd,YO),e(YO,wzo),e(nd,Azo),e(gt,yzo),M(zv,gt,null),e(Do,Lzo),e(Do,so),M(n0,so,null),e(so,xzo),e(so,Gge),e(Gge,$zo),e(so,kzo),e(so,Ia),e(Ia,Szo),e(Ia,Oge),e(Oge,Rzo),e(Ia,Bzo),e(Ia,Vge),e(Vge,Pzo),e(Ia,Izo),e(Ia,Xge),e(Xge,qzo),e(Ia,Nzo),e(so,jzo),e(so,qa),e(qa,Qv),e(Qv,zge),e(zge,Dzo),e(Qv,Gzo),e(Qv,KO),e(KO,Ozo),e(Qv,Vzo),e(qa,Xzo),e(qa,Wv),e(Wv,Qge),e(Qge,zzo),e(Wv,Qzo),e(Wv,ZO),e(ZO,Wzo),e(Wv,Hzo),e(qa,Uzo),e(qa,Hv),e(Hv,Wge),e(Wge,Jzo),e(Hv,Yzo),e(Hv,eV),e(eV,Kzo),e(Hv,Zzo),e(qa,eQo),e(qa,Uv),e(Uv,Hge),e(Hge,oQo),e(Uv,rQo),e(Uv,oV),e(oV,tQo),e(Uv,aQo),e(so,nQo),e(so,Jv),e(Jv,sQo),e(Jv,Uge),e(Uge,lQo),e(Jv,iQo),e(Jv,Jge),e(Jge,dQo),e(so,cQo),M(Yv,so,null),b(f,uBe,_),b(f,sd,_),e(sd,Kv),e(Kv,Yge),M(s0,Yge,null),e(sd,fQo),e(sd,Kge),e(Kge,mQo),b(f,_Be,_),b(f,Go,_),M(l0,Go,null),e(Go,gQo),e(Go,ld),e(ld,hQo),e(ld,rV),e(rV,pQo),e(ld,uQo),e(ld,tV),e(tV,_Qo),e(ld,bQo),e(Go,vQo),e(Go,i0),e(i0,FQo),e(i0,Zge),e(Zge,TQo),e(i0,MQo),e(Go,EQo),e(Go,ht),M(d0,ht,null),e(ht,CQo),e(ht,ehe),e(ehe,wQo),e(ht,AQo),e(ht,id),e(id,yQo),e(id,ohe),e(ohe,LQo),e(id,xQo),e(id,aV),e(aV,$Qo),e(id,kQo),e(ht,SQo),M(Zv,ht,null),e(Go,RQo),e(Go,lo),M(c0,lo,null),e(lo,BQo),e(lo,rhe),e(rhe,PQo),e(lo,IQo),e(lo,Na),e(Na,qQo),e(Na,the),e(the,NQo),e(Na,jQo),e(Na,ahe),e(ahe,DQo),e(Na,GQo),e(Na,nhe),e(nhe,OQo),e(Na,VQo),e(lo,XQo),e(lo,Ne),e(Ne,eF),e(eF,she),e(she,zQo),e(eF,QQo),e(eF,nV),e(nV,WQo),e(eF,HQo),e(Ne,UQo),e(Ne,oF),e(oF,lhe),e(lhe,JQo),e(oF,YQo),e(oF,sV),e(sV,KQo),e(oF,ZQo),e(Ne,eWo),e(Ne,rF),e(rF,ihe),e(ihe,oWo),e(rF,rWo),e(rF,lV),e(lV,tWo),e(rF,aWo),e(Ne,nWo),e(Ne,tF),e(tF,dhe),e(dhe,sWo),e(tF,lWo),e(tF,iV),e(iV,iWo),e(tF,dWo),e(Ne,cWo),e(Ne,aF),e(aF,che),e(che,fWo),e(aF,mWo),e(aF,dV),e(dV,gWo),e(aF,hWo),e(Ne,pWo),e(Ne,nF),e(nF,fhe),e(fhe,uWo),e(nF,_Wo),e(nF,cV),e(cV,bWo),e(nF,vWo),e(Ne,FWo),e(Ne,sF),e(sF,mhe),e(mhe,TWo),e(sF,MWo),e(sF,fV),e(fV,EWo),e(sF,CWo),e(Ne,wWo),e(Ne,lF),e(lF,ghe),e(ghe,AWo),e(lF,yWo),e(lF,mV),e(mV,LWo),e(lF,xWo),e(lo,$Wo),e(lo,iF),e(iF,kWo),e(iF,hhe),e(hhe,SWo),e(iF,RWo),e(iF,phe),e(phe,BWo),e(lo,PWo),M(dF,lo,null),b(f,bBe,_),b(f,dd,_),e(dd,cF),e(cF,uhe),M(f0,uhe,null),e(dd,IWo),e(dd,_he),e(_he,qWo),b(f,vBe,_),b(f,Oo,_),M(m0,Oo,null),e(Oo,NWo),e(Oo,cd),e(cd,jWo),e(cd,gV),e(gV,DWo),e(cd,GWo),e(cd,hV),e(hV,OWo),e(cd,VWo),e(Oo,XWo),e(Oo,g0),e(g0,zWo),e(g0,bhe),e(bhe,QWo),e(g0,WWo),e(Oo,HWo),e(Oo,pt),M(h0,pt,null),e(pt,UWo),e(pt,vhe),e(vhe,JWo),e(pt,YWo),e(pt,fd),e(fd,KWo),e(fd,Fhe),e(Fhe,ZWo),e(fd,eHo),e(fd,pV),e(pV,oHo),e(fd,rHo),e(pt,tHo),M(fF,pt,null),e(Oo,aHo),e(Oo,io),M(p0,io,null),e(io,nHo),e(io,The),e(The,sHo),e(io,lHo),e(io,ja),e(ja,iHo),e(ja,Mhe),e(Mhe,dHo),e(ja,cHo),e(ja,Ehe),e(Ehe,fHo),e(ja,mHo),e(ja,Che),e(Che,gHo),e(ja,hHo),e(io,pHo),e(io,u0),e(u0,mF),e(mF,whe),e(whe,uHo),e(mF,_Ho),e(mF,uV),e(uV,bHo),e(mF,vHo),e(u0,FHo),e(u0,gF),e(gF,Ahe),e(Ahe,THo),e(gF,MHo),e(gF,_V),e(_V,EHo),e(gF,CHo),e(io,wHo),e(io,hF),e(hF,AHo),e(hF,yhe),e(yhe,yHo),e(hF,LHo),e(hF,Lhe),e(Lhe,xHo),e(io,$Ho),M(pF,io,null),b(f,FBe,_),b(f,md,_),e(md,uF),e(uF,xhe),M(_0,xhe,null),e(md,kHo),e(md,$he),e($he,SHo),b(f,TBe,_),b(f,Vo,_),M(b0,Vo,null),e(Vo,RHo),e(Vo,gd),e(gd,BHo),e(gd,bV),e(bV,PHo),e(gd,IHo),e(gd,vV),e(vV,qHo),e(gd,NHo),e(Vo,jHo),e(Vo,v0),e(v0,DHo),e(v0,khe),e(khe,GHo),e(v0,OHo),e(Vo,VHo),e(Vo,ut),M(F0,ut,null),e(ut,XHo),e(ut,She),e(She,zHo),e(ut,QHo),e(ut,hd),e(hd,WHo),e(hd,Rhe),e(Rhe,HHo),e(hd,UHo),e(hd,FV),e(FV,JHo),e(hd,YHo),e(ut,KHo),M(_F,ut,null),e(Vo,ZHo),e(Vo,co),M(T0,co,null),e(co,eUo),e(co,Bhe),e(Bhe,oUo),e(co,rUo),e(co,Da),e(Da,tUo),e(Da,Phe),e(Phe,aUo),e(Da,nUo),e(Da,Ihe),e(Ihe,sUo),e(Da,lUo),e(Da,qhe),e(qhe,iUo),e(Da,dUo),e(co,cUo),e(co,Ga),e(Ga,bF),e(bF,Nhe),e(Nhe,fUo),e(bF,mUo),e(bF,TV),e(TV,gUo),e(bF,hUo),e(Ga,pUo),e(Ga,vF),e(vF,jhe),e(jhe,uUo),e(vF,_Uo),e(vF,MV),e(MV,bUo),e(vF,vUo),e(Ga,FUo),e(Ga,FF),e(FF,Dhe),e(Dhe,TUo),e(FF,MUo),e(FF,EV),e(EV,EUo),e(FF,CUo),e(Ga,wUo),e(Ga,TF),e(TF,Ghe),e(Ghe,AUo),e(TF,yUo),e(TF,CV),e(CV,LUo),e(TF,xUo),e(co,$Uo),e(co,MF),e(MF,kUo),e(MF,Ohe),e(Ohe,SUo),e(MF,RUo),e(MF,Vhe),e(Vhe,BUo),e(co,PUo),M(EF,co,null),b(f,MBe,_),b(f,pd,_),e(pd,CF),e(CF,Xhe),M(M0,Xhe,null),e(pd,IUo),e(pd,zhe),e(zhe,qUo),b(f,EBe,_),b(f,Xo,_),M(E0,Xo,null),e(Xo,NUo),e(Xo,ud),e(ud,jUo),e(ud,wV),e(wV,DUo),e(ud,GUo),e(ud,AV),e(AV,OUo),e(ud,VUo),e(Xo,XUo),e(Xo,C0),e(C0,zUo),e(C0,Qhe),e(Qhe,QUo),e(C0,WUo),e(Xo,HUo),e(Xo,_t),M(w0,_t,null),e(_t,UUo),e(_t,Whe),e(Whe,JUo),e(_t,YUo),e(_t,_d),e(_d,KUo),e(_d,Hhe),e(Hhe,ZUo),e(_d,eJo),e(_d,yV),e(yV,oJo),e(_d,rJo),e(_t,tJo),M(wF,_t,null),e(Xo,aJo),e(Xo,fo),M(A0,fo,null),e(fo,nJo),e(fo,Uhe),e(Uhe,sJo),e(fo,lJo),e(fo,Oa),e(Oa,iJo),e(Oa,Jhe),e(Jhe,dJo),e(Oa,cJo),e(Oa,Yhe),e(Yhe,fJo),e(Oa,mJo),e(Oa,Khe),e(Khe,gJo),e(Oa,hJo),e(fo,pJo),e(fo,bd),e(bd,AF),e(AF,Zhe),e(Zhe,uJo),e(AF,_Jo),e(AF,LV),e(LV,bJo),e(AF,vJo),e(bd,FJo),e(bd,yF),e(yF,epe),e(epe,TJo),e(yF,MJo),e(yF,xV),e(xV,EJo),e(yF,CJo),e(bd,wJo),e(bd,LF),e(LF,ope),e(ope,AJo),e(LF,yJo),e(LF,$V),e($V,LJo),e(LF,xJo),e(fo,$Jo),e(fo,xF),e(xF,kJo),e(xF,rpe),e(rpe,SJo),e(xF,RJo),e(xF,tpe),e(tpe,BJo),e(fo,PJo),M($F,fo,null),b(f,CBe,_),b(f,vd,_),e(vd,kF),e(kF,ape),M(y0,ape,null),e(vd,IJo),e(vd,npe),e(npe,qJo),b(f,wBe,_),b(f,zo,_),M(L0,zo,null),e(zo,NJo),e(zo,Fd),e(Fd,jJo),e(Fd,kV),e(kV,DJo),e(Fd,GJo),e(Fd,SV),e(SV,OJo),e(Fd,VJo),e(zo,XJo),e(zo,x0),e(x0,zJo),e(x0,spe),e(spe,QJo),e(x0,WJo),e(zo,HJo),e(zo,bt),M($0,bt,null),e(bt,UJo),e(bt,lpe),e(lpe,JJo),e(bt,YJo),e(bt,Td),e(Td,KJo),e(Td,ipe),e(ipe,ZJo),e(Td,eYo),e(Td,RV),e(RV,oYo),e(Td,rYo),e(bt,tYo),M(SF,bt,null),e(zo,aYo),e(zo,mo),M(k0,mo,null),e(mo,nYo),e(mo,dpe),e(dpe,sYo),e(mo,lYo),e(mo,Va),e(Va,iYo),e(Va,cpe),e(cpe,dYo),e(Va,cYo),e(Va,fpe),e(fpe,fYo),e(Va,mYo),e(Va,mpe),e(mpe,gYo),e(Va,hYo),e(mo,pYo),e(mo,gpe),e(gpe,RF),e(RF,hpe),e(hpe,uYo),e(RF,_Yo),e(RF,BV),e(BV,bYo),e(RF,vYo),e(mo,FYo),e(mo,BF),e(BF,TYo),e(BF,ppe),e(ppe,MYo),e(BF,EYo),e(BF,upe),e(upe,CYo),e(mo,wYo),M(PF,mo,null),b(f,ABe,_),b(f,Md,_),e(Md,IF),e(IF,_pe),M(S0,_pe,null),e(Md,AYo),e(Md,bpe),e(bpe,yYo),b(f,yBe,_),b(f,Qo,_),M(R0,Qo,null),e(Qo,LYo),e(Qo,Ed),e(Ed,xYo),e(Ed,PV),e(PV,$Yo),e(Ed,kYo),e(Ed,IV),e(IV,SYo),e(Ed,RYo),e(Qo,BYo),e(Qo,B0),e(B0,PYo),e(B0,vpe),e(vpe,IYo),e(B0,qYo),e(Qo,NYo),e(Qo,vt),M(P0,vt,null),e(vt,jYo),e(vt,Fpe),e(Fpe,DYo),e(vt,GYo),e(vt,Cd),e(Cd,OYo),e(Cd,Tpe),e(Tpe,VYo),e(Cd,XYo),e(Cd,qV),e(qV,zYo),e(Cd,QYo),e(vt,WYo),M(qF,vt,null),e(Qo,HYo),e(Qo,go),M(I0,go,null),e(go,UYo),e(go,Mpe),e(Mpe,JYo),e(go,YYo),e(go,Xa),e(Xa,KYo),e(Xa,Epe),e(Epe,ZYo),e(Xa,eKo),e(Xa,Cpe),e(Cpe,oKo),e(Xa,rKo),e(Xa,wpe),e(wpe,tKo),e(Xa,aKo),e(go,nKo),e(go,Ape),e(Ape,NF),e(NF,ype),e(ype,sKo),e(NF,lKo),e(NF,NV),e(NV,iKo),e(NF,dKo),e(go,cKo),e(go,jF),e(jF,fKo),e(jF,Lpe),e(Lpe,mKo),e(jF,gKo),e(jF,xpe),e(xpe,hKo),e(go,pKo),M(DF,go,null),b(f,LBe,_),b(f,wd,_),e(wd,GF),e(GF,$pe),M(q0,$pe,null),e(wd,uKo),e(wd,kpe),e(kpe,_Ko),b(f,xBe,_),b(f,Wo,_),M(N0,Wo,null),e(Wo,bKo),e(Wo,Ad),e(Ad,vKo),e(Ad,jV),e(jV,FKo),e(Ad,TKo),e(Ad,DV),e(DV,MKo),e(Ad,EKo),e(Wo,CKo),e(Wo,j0),e(j0,wKo),e(j0,Spe),e(Spe,AKo),e(j0,yKo),e(Wo,LKo),e(Wo,Ft),M(D0,Ft,null),e(Ft,xKo),e(Ft,Rpe),e(Rpe,$Ko),e(Ft,kKo),e(Ft,yd),e(yd,SKo),e(yd,Bpe),e(Bpe,RKo),e(yd,BKo),e(yd,GV),e(GV,PKo),e(yd,IKo),e(Ft,qKo),M(OF,Ft,null),e(Wo,NKo),e(Wo,ho),M(G0,ho,null),e(ho,jKo),e(ho,Ppe),e(Ppe,DKo),e(ho,GKo),e(ho,za),e(za,OKo),e(za,Ipe),e(Ipe,VKo),e(za,XKo),e(za,qpe),e(qpe,zKo),e(za,QKo),e(za,Npe),e(Npe,WKo),e(za,HKo),e(ho,UKo),e(ho,Qa),e(Qa,VF),e(VF,jpe),e(jpe,JKo),e(VF,YKo),e(VF,OV),e(OV,KKo),e(VF,ZKo),e(Qa,eZo),e(Qa,XF),e(XF,Dpe),e(Dpe,oZo),e(XF,rZo),e(XF,VV),e(VV,tZo),e(XF,aZo),e(Qa,nZo),e(Qa,zF),e(zF,Gpe),e(Gpe,sZo),e(zF,lZo),e(zF,XV),e(XV,iZo),e(zF,dZo),e(Qa,cZo),e(Qa,QF),e(QF,Ope),e(Ope,fZo),e(QF,mZo),e(QF,zV),e(zV,gZo),e(QF,hZo),e(ho,pZo),e(ho,WF),e(WF,uZo),e(WF,Vpe),e(Vpe,_Zo),e(WF,bZo),e(WF,Xpe),e(Xpe,vZo),e(ho,FZo),M(HF,ho,null),b(f,$Be,_),b(f,Ld,_),e(Ld,UF),e(UF,zpe),M(O0,zpe,null),e(Ld,TZo),e(Ld,Qpe),e(Qpe,MZo),b(f,kBe,_),b(f,Ho,_),M(V0,Ho,null),e(Ho,EZo),e(Ho,xd),e(xd,CZo),e(xd,QV),e(QV,wZo),e(xd,AZo),e(xd,WV),e(WV,yZo),e(xd,LZo),e(Ho,xZo),e(Ho,X0),e(X0,$Zo),e(X0,Wpe),e(Wpe,kZo),e(X0,SZo),e(Ho,RZo),e(Ho,Tt),M(z0,Tt,null),e(Tt,BZo),e(Tt,Hpe),e(Hpe,PZo),e(Tt,IZo),e(Tt,$d),e($d,qZo),e($d,Upe),e(Upe,NZo),e($d,jZo),e($d,HV),e(HV,DZo),e($d,GZo),e(Tt,OZo),M(JF,Tt,null),e(Ho,VZo),e(Ho,po),M(Q0,po,null),e(po,XZo),e(po,Jpe),e(Jpe,zZo),e(po,QZo),e(po,Wa),e(Wa,WZo),e(Wa,Ype),e(Ype,HZo),e(Wa,UZo),e(Wa,Kpe),e(Kpe,JZo),e(Wa,YZo),e(Wa,Zpe),e(Zpe,KZo),e(Wa,ZZo),e(po,eer),e(po,eue),e(eue,YF),e(YF,oue),e(oue,oer),e(YF,rer),e(YF,UV),e(UV,ter),e(YF,aer),e(po,ner),e(po,KF),e(KF,ser),e(KF,rue),e(rue,ler),e(KF,ier),e(KF,tue),e(tue,der),e(po,cer),M(ZF,po,null),b(f,SBe,_),b(f,kd,_),e(kd,e6),e(e6,aue),M(W0,aue,null),e(kd,fer),e(kd,nue),e(nue,mer),b(f,RBe,_),b(f,Uo,_),M(H0,Uo,null),e(Uo,ger),e(Uo,Sd),e(Sd,her),e(Sd,JV),e(JV,per),e(Sd,uer),e(Sd,YV),e(YV,_er),e(Sd,ber),e(Uo,ver),e(Uo,U0),e(U0,Fer),e(U0,sue),e(sue,Ter),e(U0,Mer),e(Uo,Eer),e(Uo,Mt),M(J0,Mt,null),e(Mt,Cer),e(Mt,lue),e(lue,wer),e(Mt,Aer),e(Mt,Rd),e(Rd,yer),e(Rd,iue),e(iue,Ler),e(Rd,xer),e(Rd,KV),e(KV,$er),e(Rd,ker),e(Mt,Ser),M(o6,Mt,null),e(Uo,Rer),e(Uo,Mr),M(Y0,Mr,null),e(Mr,Ber),e(Mr,due),e(due,Per),e(Mr,Ier),e(Mr,Ha),e(Ha,qer),e(Ha,cue),e(cue,Ner),e(Ha,jer),e(Ha,fue),e(fue,Der),e(Ha,Ger),e(Ha,mue),e(mue,Oer),e(Ha,Ver),e(Mr,Xer),e(Mr,j),e(j,r6),e(r6,gue),e(gue,zer),e(r6,Qer),e(r6,ZV),e(ZV,Wer),e(r6,Her),e(j,Uer),e(j,t6),e(t6,hue),e(hue,Jer),e(t6,Yer),e(t6,eX),e(eX,Ker),e(t6,Zer),e(j,eor),e(j,a6),e(a6,pue),e(pue,oor),e(a6,ror),e(a6,oX),e(oX,tor),e(a6,aor),e(j,nor),e(j,n6),e(n6,uue),e(uue,sor),e(n6,lor),e(n6,rX),e(rX,ior),e(n6,dor),e(j,cor),e(j,s6),e(s6,_ue),e(_ue,mor),e(s6,gor),e(s6,tX),e(tX,hor),e(s6,por),e(j,uor),e(j,l6),e(l6,bue),e(bue,_or),e(l6,bor),e(l6,aX),e(aX,vor),e(l6,For),e(j,Tor),e(j,i6),e(i6,vue),e(vue,Mor),e(i6,Eor),e(i6,nX),e(nX,Cor),e(i6,wor),e(j,Aor),e(j,d6),e(d6,Fue),e(Fue,yor),e(d6,Lor),e(d6,sX),e(sX,xor),e(d6,$or),e(j,kor),e(j,c6),e(c6,Tue),e(Tue,Sor),e(c6,Ror),e(c6,lX),e(lX,Bor),e(c6,Por),e(j,Ior),e(j,f6),e(f6,Mue),e(Mue,qor),e(f6,Nor),e(f6,iX),e(iX,jor),e(f6,Dor),e(j,Gor),e(j,m6),e(m6,Eue),e(Eue,Oor),e(m6,Vor),e(m6,dX),e(dX,Xor),e(m6,zor),e(j,Qor),e(j,g6),e(g6,Cue),e(Cue,Wor),e(g6,Hor),e(g6,cX),e(cX,Uor),e(g6,Jor),e(j,Yor),e(j,h6),e(h6,wue),e(wue,Kor),e(h6,Zor),e(h6,fX),e(fX,err),e(h6,orr),e(j,rrr),e(j,p6),e(p6,Aue),e(Aue,trr),e(p6,arr),e(p6,mX),e(mX,nrr),e(p6,srr),e(j,lrr),e(j,u6),e(u6,yue),e(yue,irr),e(u6,drr),e(u6,gX),e(gX,crr),e(u6,frr),e(j,mrr),e(j,_6),e(_6,Lue),e(Lue,grr),e(_6,hrr),e(_6,hX),e(hX,prr),e(_6,urr),e(j,_rr),e(j,xs),e(xs,xue),e(xue,brr),e(xs,vrr),e(xs,pX),e(pX,Frr),e(xs,Trr),e(xs,uX),e(uX,Mrr),e(xs,Err),e(j,Crr),e(j,b6),e(b6,$ue),e($ue,wrr),e(b6,Arr),e(b6,_X),e(_X,yrr),e(b6,Lrr),e(j,xrr),e(j,v6),e(v6,kue),e(kue,$rr),e(v6,krr),e(v6,bX),e(bX,Srr),e(v6,Rrr),e(j,Brr),e(j,F6),e(F6,Sue),e(Sue,Prr),e(F6,Irr),e(F6,vX),e(vX,qrr),e(F6,Nrr),e(j,jrr),e(j,T6),e(T6,Rue),e(Rue,Drr),e(T6,Grr),e(T6,FX),e(FX,Orr),e(T6,Vrr),e(j,Xrr),e(j,M6),e(M6,Bue),e(Bue,zrr),e(M6,Qrr),e(M6,TX),e(TX,Wrr),e(M6,Hrr),e(j,Urr),e(j,E6),e(E6,Pue),e(Pue,Jrr),e(E6,Yrr),e(E6,MX),e(MX,Krr),e(E6,Zrr),e(j,etr),e(j,C6),e(C6,Iue),e(Iue,otr),e(C6,rtr),e(C6,EX),e(EX,ttr),e(C6,atr),e(j,ntr),e(j,w6),e(w6,que),e(que,str),e(w6,ltr),e(w6,CX),e(CX,itr),e(w6,dtr),e(j,ctr),e(j,A6),e(A6,Nue),e(Nue,ftr),e(A6,mtr),e(A6,wX),e(wX,gtr),e(A6,htr),e(j,ptr),e(j,y6),e(y6,jue),e(jue,utr),e(y6,_tr),e(y6,AX),e(AX,btr),e(y6,vtr),e(j,Ftr),e(j,L6),e(L6,Due),e(Due,Ttr),e(L6,Mtr),e(L6,yX),e(yX,Etr),e(L6,Ctr),e(j,wtr),e(j,x6),e(x6,Gue),e(Gue,Atr),e(x6,ytr),e(x6,LX),e(LX,Ltr),e(x6,xtr),e(j,$tr),e(j,$6),e($6,Oue),e(Oue,ktr),e($6,Str),e($6,xX),e(xX,Rtr),e($6,Btr),e(j,Ptr),e(j,k6),e(k6,Vue),e(Vue,Itr),e(k6,qtr),e(k6,$X),e($X,Ntr),e(k6,jtr),e(j,Dtr),e(j,S6),e(S6,Xue),e(Xue,Gtr),e(S6,Otr),e(S6,kX),e(kX,Vtr),e(S6,Xtr),e(j,ztr),e(j,R6),e(R6,zue),e(zue,Qtr),e(R6,Wtr),e(R6,SX),e(SX,Htr),e(R6,Utr),e(j,Jtr),e(j,B6),e(B6,Que),e(Que,Ytr),e(B6,Ktr),e(B6,RX),e(RX,Ztr),e(B6,ear),e(j,oar),e(j,P6),e(P6,Wue),e(Wue,rar),e(P6,tar),e(P6,BX),e(BX,aar),e(P6,nar),e(j,sar),e(j,I6),e(I6,Hue),e(Hue,lar),e(I6,iar),e(I6,PX),e(PX,dar),e(I6,car),e(j,far),e(j,q6),e(q6,Uue),e(Uue,mar),e(q6,gar),e(q6,IX),e(IX,har),e(q6,par),e(j,uar),e(j,N6),e(N6,Jue),e(Jue,_ar),e(N6,bar),e(N6,qX),e(qX,Far),e(N6,Tar),e(j,Mar),e(j,j6),e(j6,Yue),e(Yue,Ear),e(j6,Car),e(j6,NX),e(NX,war),e(j6,Aar),e(j,yar),e(j,D6),e(D6,Kue),e(Kue,Lar),e(D6,xar),e(D6,jX),e(jX,$ar),e(D6,kar),e(j,Sar),e(j,G6),e(G6,Zue),e(Zue,Rar),e(G6,Bar),e(G6,DX),e(DX,Par),e(G6,Iar),e(j,qar),e(j,O6),e(O6,e_e),e(e_e,Nar),e(O6,jar),e(O6,GX),e(GX,Dar),e(O6,Gar),e(j,Oar),e(j,V6),e(V6,o_e),e(o_e,Var),e(V6,Xar),e(V6,OX),e(OX,zar),e(V6,Qar),e(j,War),e(j,X6),e(X6,r_e),e(r_e,Har),e(X6,Uar),e(X6,VX),e(VX,Jar),e(X6,Yar),e(Mr,Kar),M(z6,Mr,null),b(f,BBe,_),b(f,Bd,_),e(Bd,Q6),e(Q6,t_e),M(K0,t_e,null),e(Bd,Zar),e(Bd,a_e),e(a_e,enr),b(f,PBe,_),b(f,Jo,_),M(Z0,Jo,null),e(Jo,onr),e(Jo,Pd),e(Pd,rnr),e(Pd,XX),e(XX,tnr),e(Pd,anr),e(Pd,zX),e(zX,nnr),e(Pd,snr),e(Jo,lnr),e(Jo,ey),e(ey,inr),e(ey,n_e),e(n_e,dnr),e(ey,cnr),e(Jo,fnr),e(Jo,Et),M(oy,Et,null),e(Et,mnr),e(Et,s_e),e(s_e,gnr),e(Et,hnr),e(Et,Id),e(Id,pnr),e(Id,l_e),e(l_e,unr),e(Id,_nr),e(Id,QX),e(QX,bnr),e(Id,vnr),e(Et,Fnr),M(W6,Et,null),e(Jo,Tnr),e(Jo,Er),M(ry,Er,null),e(Er,Mnr),e(Er,i_e),e(i_e,Enr),e(Er,Cnr),e(Er,Ua),e(Ua,wnr),e(Ua,d_e),e(d_e,Anr),e(Ua,ynr),e(Ua,c_e),e(c_e,Lnr),e(Ua,xnr),e(Ua,f_e),e(f_e,$nr),e(Ua,knr),e(Er,Snr),e(Er,ne),e(ne,H6),e(H6,m_e),e(m_e,Rnr),e(H6,Bnr),e(H6,WX),e(WX,Pnr),e(H6,Inr),e(ne,qnr),e(ne,U6),e(U6,g_e),e(g_e,Nnr),e(U6,jnr),e(U6,HX),e(HX,Dnr),e(U6,Gnr),e(ne,Onr),e(ne,J6),e(J6,h_e),e(h_e,Vnr),e(J6,Xnr),e(J6,UX),e(UX,znr),e(J6,Qnr),e(ne,Wnr),e(ne,Y6),e(Y6,p_e),e(p_e,Hnr),e(Y6,Unr),e(Y6,JX),e(JX,Jnr),e(Y6,Ynr),e(ne,Knr),e(ne,K6),e(K6,u_e),e(u_e,Znr),e(K6,esr),e(K6,YX),e(YX,osr),e(K6,rsr),e(ne,tsr),e(ne,Z6),e(Z6,__e),e(__e,asr),e(Z6,nsr),e(Z6,KX),e(KX,ssr),e(Z6,lsr),e(ne,isr),e(ne,eT),e(eT,b_e),e(b_e,dsr),e(eT,csr),e(eT,ZX),e(ZX,fsr),e(eT,msr),e(ne,gsr),e(ne,oT),e(oT,v_e),e(v_e,hsr),e(oT,psr),e(oT,ez),e(ez,usr),e(oT,_sr),e(ne,bsr),e(ne,rT),e(rT,F_e),e(F_e,vsr),e(rT,Fsr),e(rT,oz),e(oz,Tsr),e(rT,Msr),e(ne,Esr),e(ne,tT),e(tT,T_e),e(T_e,Csr),e(tT,wsr),e(tT,rz),e(rz,Asr),e(tT,ysr),e(ne,Lsr),e(ne,aT),e(aT,M_e),e(M_e,xsr),e(aT,$sr),e(aT,tz),e(tz,ksr),e(aT,Ssr),e(ne,Rsr),e(ne,nT),e(nT,E_e),e(E_e,Bsr),e(nT,Psr),e(nT,az),e(az,Isr),e(nT,qsr),e(ne,Nsr),e(ne,sT),e(sT,C_e),e(C_e,jsr),e(sT,Dsr),e(sT,nz),e(nz,Gsr),e(sT,Osr),e(ne,Vsr),e(ne,lT),e(lT,w_e),e(w_e,Xsr),e(lT,zsr),e(lT,sz),e(sz,Qsr),e(lT,Wsr),e(ne,Hsr),e(ne,iT),e(iT,A_e),e(A_e,Usr),e(iT,Jsr),e(iT,lz),e(lz,Ysr),e(iT,Ksr),e(ne,Zsr),e(ne,dT),e(dT,y_e),e(y_e,elr),e(dT,olr),e(dT,iz),e(iz,rlr),e(dT,tlr),e(ne,alr),e(ne,cT),e(cT,L_e),e(L_e,nlr),e(cT,slr),e(cT,dz),e(dz,llr),e(cT,ilr),e(ne,dlr),e(ne,fT),e(fT,x_e),e(x_e,clr),e(fT,flr),e(fT,cz),e(cz,mlr),e(fT,glr),e(ne,hlr),e(ne,mT),e(mT,$_e),e($_e,plr),e(mT,ulr),e(mT,fz),e(fz,_lr),e(mT,blr),e(ne,vlr),e(ne,gT),e(gT,k_e),e(k_e,Flr),e(gT,Tlr),e(gT,mz),e(mz,Mlr),e(gT,Elr),e(ne,Clr),e(ne,hT),e(hT,S_e),e(S_e,wlr),e(hT,Alr),e(hT,gz),e(gz,ylr),e(hT,Llr),e(ne,xlr),e(ne,pT),e(pT,R_e),e(R_e,$lr),e(pT,klr),e(pT,hz),e(hz,Slr),e(pT,Rlr),e(ne,Blr),e(ne,uT),e(uT,B_e),e(B_e,Plr),e(uT,Ilr),e(uT,pz),e(pz,qlr),e(uT,Nlr),e(Er,jlr),M(_T,Er,null),b(f,IBe,_),b(f,qd,_),e(qd,bT),e(bT,P_e),M(ty,P_e,null),e(qd,Dlr),e(qd,I_e),e(I_e,Glr),b(f,qBe,_),b(f,Yo,_),M(ay,Yo,null),e(Yo,Olr),e(Yo,Nd),e(Nd,Vlr),e(Nd,uz),e(uz,Xlr),e(Nd,zlr),e(Nd,_z),e(_z,Qlr),e(Nd,Wlr),e(Yo,Hlr),e(Yo,ny),e(ny,Ulr),e(ny,q_e),e(q_e,Jlr),e(ny,Ylr),e(Yo,Klr),e(Yo,Ct),M(sy,Ct,null),e(Ct,Zlr),e(Ct,N_e),e(N_e,eir),e(Ct,oir),e(Ct,jd),e(jd,rir),e(jd,j_e),e(j_e,tir),e(jd,air),e(jd,bz),e(bz,nir),e(jd,sir),e(Ct,lir),M(vT,Ct,null),e(Yo,iir),e(Yo,Cr),M(ly,Cr,null),e(Cr,dir),e(Cr,D_e),e(D_e,cir),e(Cr,fir),e(Cr,Ja),e(Ja,mir),e(Ja,G_e),e(G_e,gir),e(Ja,hir),e(Ja,O_e),e(O_e,pir),e(Ja,uir),e(Ja,V_e),e(V_e,_ir),e(Ja,bir),e(Cr,vir),e(Cr,Te),e(Te,FT),e(FT,X_e),e(X_e,Fir),e(FT,Tir),e(FT,vz),e(vz,Mir),e(FT,Eir),e(Te,Cir),e(Te,TT),e(TT,z_e),e(z_e,wir),e(TT,Air),e(TT,Fz),e(Fz,yir),e(TT,Lir),e(Te,xir),e(Te,MT),e(MT,Q_e),e(Q_e,$ir),e(MT,kir),e(MT,Tz),e(Tz,Sir),e(MT,Rir),e(Te,Bir),e(Te,ET),e(ET,W_e),e(W_e,Pir),e(ET,Iir),e(ET,Mz),e(Mz,qir),e(ET,Nir),e(Te,jir),e(Te,CT),e(CT,H_e),e(H_e,Dir),e(CT,Gir),e(CT,Ez),e(Ez,Oir),e(CT,Vir),e(Te,Xir),e(Te,wT),e(wT,U_e),e(U_e,zir),e(wT,Qir),e(wT,Cz),e(Cz,Wir),e(wT,Hir),e(Te,Uir),e(Te,AT),e(AT,J_e),e(J_e,Jir),e(AT,Yir),e(AT,wz),e(wz,Kir),e(AT,Zir),e(Te,edr),e(Te,yT),e(yT,Y_e),e(Y_e,odr),e(yT,rdr),e(yT,Az),e(Az,tdr),e(yT,adr),e(Te,ndr),e(Te,LT),e(LT,K_e),e(K_e,sdr),e(LT,ldr),e(LT,yz),e(yz,idr),e(LT,ddr),e(Te,cdr),e(Te,xT),e(xT,Z_e),e(Z_e,fdr),e(xT,mdr),e(xT,Lz),e(Lz,gdr),e(xT,hdr),e(Te,pdr),e(Te,$T),e($T,e1e),e(e1e,udr),e($T,_dr),e($T,xz),e(xz,bdr),e($T,vdr),e(Te,Fdr),e(Te,kT),e(kT,o1e),e(o1e,Tdr),e(kT,Mdr),e(kT,$z),e($z,Edr),e(kT,Cdr),e(Cr,wdr),M(ST,Cr,null),b(f,NBe,_),b(f,Dd,_),e(Dd,RT),e(RT,r1e),M(iy,r1e,null),e(Dd,Adr),e(Dd,t1e),e(t1e,ydr),b(f,jBe,_),b(f,Ko,_),M(dy,Ko,null),e(Ko,Ldr),e(Ko,Gd),e(Gd,xdr),e(Gd,kz),e(kz,$dr),e(Gd,kdr),e(Gd,Sz),e(Sz,Sdr),e(Gd,Rdr),e(Ko,Bdr),e(Ko,cy),e(cy,Pdr),e(cy,a1e),e(a1e,Idr),e(cy,qdr),e(Ko,Ndr),e(Ko,wt),M(fy,wt,null),e(wt,jdr),e(wt,n1e),e(n1e,Ddr),e(wt,Gdr),e(wt,Od),e(Od,Odr),e(Od,s1e),e(s1e,Vdr),e(Od,Xdr),e(Od,Rz),e(Rz,zdr),e(Od,Qdr),e(wt,Wdr),M(BT,wt,null),e(Ko,Hdr),e(Ko,wr),M(my,wr,null),e(wr,Udr),e(wr,l1e),e(l1e,Jdr),e(wr,Ydr),e(wr,Ya),e(Ya,Kdr),e(Ya,i1e),e(i1e,Zdr),e(Ya,ecr),e(Ya,d1e),e(d1e,ocr),e(Ya,rcr),e(Ya,c1e),e(c1e,tcr),e(Ya,acr),e(wr,ncr),e(wr,gy),e(gy,PT),e(PT,f1e),e(f1e,scr),e(PT,lcr),e(PT,Bz),e(Bz,icr),e(PT,dcr),e(gy,ccr),e(gy,IT),e(IT,m1e),e(m1e,fcr),e(IT,mcr),e(IT,Pz),e(Pz,gcr),e(IT,hcr),e(wr,pcr),M(qT,wr,null),b(f,DBe,_),b(f,Vd,_),e(Vd,NT),e(NT,g1e),M(hy,g1e,null),e(Vd,ucr),e(Vd,h1e),e(h1e,_cr),b(f,GBe,_),b(f,Zo,_),M(py,Zo,null),e(Zo,bcr),e(Zo,Xd),e(Xd,vcr),e(Xd,Iz),e(Iz,Fcr),e(Xd,Tcr),e(Xd,qz),e(qz,Mcr),e(Xd,Ecr),e(Zo,Ccr),e(Zo,uy),e(uy,wcr),e(uy,p1e),e(p1e,Acr),e(uy,ycr),e(Zo,Lcr),e(Zo,At),M(_y,At,null),e(At,xcr),e(At,u1e),e(u1e,$cr),e(At,kcr),e(At,zd),e(zd,Scr),e(zd,_1e),e(_1e,Rcr),e(zd,Bcr),e(zd,Nz),e(Nz,Pcr),e(zd,Icr),e(At,qcr),M(jT,At,null),e(Zo,Ncr),e(Zo,Ar),M(by,Ar,null),e(Ar,jcr),e(Ar,b1e),e(b1e,Dcr),e(Ar,Gcr),e(Ar,Ka),e(Ka,Ocr),e(Ka,v1e),e(v1e,Vcr),e(Ka,Xcr),e(Ka,F1e),e(F1e,zcr),e(Ka,Qcr),e(Ka,T1e),e(T1e,Wcr),e(Ka,Hcr),e(Ar,Ucr),e(Ar,ie),e(ie,DT),e(DT,M1e),e(M1e,Jcr),e(DT,Ycr),e(DT,jz),e(jz,Kcr),e(DT,Zcr),e(ie,efr),e(ie,GT),e(GT,E1e),e(E1e,ofr),e(GT,rfr),e(GT,Dz),e(Dz,tfr),e(GT,afr),e(ie,nfr),e(ie,OT),e(OT,C1e),e(C1e,sfr),e(OT,lfr),e(OT,Gz),e(Gz,ifr),e(OT,dfr),e(ie,cfr),e(ie,VT),e(VT,w1e),e(w1e,ffr),e(VT,mfr),e(VT,Oz),e(Oz,gfr),e(VT,hfr),e(ie,pfr),e(ie,XT),e(XT,A1e),e(A1e,ufr),e(XT,_fr),e(XT,Vz),e(Vz,bfr),e(XT,vfr),e(ie,Ffr),e(ie,zT),e(zT,y1e),e(y1e,Tfr),e(zT,Mfr),e(zT,Xz),e(Xz,Efr),e(zT,Cfr),e(ie,wfr),e(ie,QT),e(QT,L1e),e(L1e,Afr),e(QT,yfr),e(QT,zz),e(zz,Lfr),e(QT,xfr),e(ie,$fr),e(ie,WT),e(WT,x1e),e(x1e,kfr),e(WT,Sfr),e(WT,Qz),e(Qz,Rfr),e(WT,Bfr),e(ie,Pfr),e(ie,HT),e(HT,$1e),e($1e,Ifr),e(HT,qfr),e(HT,Wz),e(Wz,Nfr),e(HT,jfr),e(ie,Dfr),e(ie,UT),e(UT,k1e),e(k1e,Gfr),e(UT,Ofr),e(UT,Hz),e(Hz,Vfr),e(UT,Xfr),e(ie,zfr),e(ie,JT),e(JT,S1e),e(S1e,Qfr),e(JT,Wfr),e(JT,Uz),e(Uz,Hfr),e(JT,Ufr),e(ie,Jfr),e(ie,YT),e(YT,R1e),e(R1e,Yfr),e(YT,Kfr),e(YT,Jz),e(Jz,Zfr),e(YT,emr),e(ie,omr),e(ie,KT),e(KT,B1e),e(B1e,rmr),e(KT,tmr),e(KT,Yz),e(Yz,amr),e(KT,nmr),e(ie,smr),e(ie,ZT),e(ZT,P1e),e(P1e,lmr),e(ZT,imr),e(ZT,Kz),e(Kz,dmr),e(ZT,cmr),e(ie,fmr),e(ie,e7),e(e7,I1e),e(I1e,mmr),e(e7,gmr),e(e7,Zz),e(Zz,hmr),e(e7,pmr),e(ie,umr),e(ie,o7),e(o7,q1e),e(q1e,_mr),e(o7,bmr),e(o7,eQ),e(eQ,vmr),e(o7,Fmr),e(ie,Tmr),e(ie,r7),e(r7,N1e),e(N1e,Mmr),e(r7,Emr),e(r7,oQ),e(oQ,Cmr),e(r7,wmr),e(ie,Amr),e(ie,t7),e(t7,j1e),e(j1e,ymr),e(t7,Lmr),e(t7,rQ),e(rQ,xmr),e(t7,$mr),e(ie,kmr),e(ie,a7),e(a7,D1e),e(D1e,Smr),e(a7,Rmr),e(a7,tQ),e(tQ,Bmr),e(a7,Pmr),e(ie,Imr),e(ie,n7),e(n7,G1e),e(G1e,qmr),e(n7,Nmr),e(n7,aQ),e(aQ,jmr),e(n7,Dmr),e(Ar,Gmr),M(s7,Ar,null),b(f,OBe,_),b(f,Qd,_),e(Qd,l7),e(l7,O1e),M(vy,O1e,null),e(Qd,Omr),e(Qd,V1e),e(V1e,Vmr),b(f,VBe,_),b(f,er,_),M(Fy,er,null),e(er,Xmr),e(er,Wd),e(Wd,zmr),e(Wd,nQ),e(nQ,Qmr),e(Wd,Wmr),e(Wd,sQ),e(sQ,Hmr),e(Wd,Umr),e(er,Jmr),e(er,Ty),e(Ty,Ymr),e(Ty,X1e),e(X1e,Kmr),e(Ty,Zmr),e(er,egr),e(er,yt),M(My,yt,null),e(yt,ogr),e(yt,z1e),e(z1e,rgr),e(yt,tgr),e(yt,Hd),e(Hd,agr),e(Hd,Q1e),e(Q1e,ngr),e(Hd,sgr),e(Hd,lQ),e(lQ,lgr),e(Hd,igr),e(yt,dgr),M(i7,yt,null),e(er,cgr),e(er,yr),M(Ey,yr,null),e(yr,fgr),e(yr,W1e),e(W1e,mgr),e(yr,ggr),e(yr,Za),e(Za,hgr),e(Za,H1e),e(H1e,pgr),e(Za,ugr),e(Za,U1e),e(U1e,_gr),e(Za,bgr),e(Za,J1e),e(J1e,vgr),e(Za,Fgr),e(yr,Tgr),e(yr,ye),e(ye,d7),e(d7,Y1e),e(Y1e,Mgr),e(d7,Egr),e(d7,iQ),e(iQ,Cgr),e(d7,wgr),e(ye,Agr),e(ye,c7),e(c7,K1e),e(K1e,ygr),e(c7,Lgr),e(c7,dQ),e(dQ,xgr),e(c7,$gr),e(ye,kgr),e(ye,f7),e(f7,Z1e),e(Z1e,Sgr),e(f7,Rgr),e(f7,cQ),e(cQ,Bgr),e(f7,Pgr),e(ye,Igr),e(ye,m7),e(m7,ebe),e(ebe,qgr),e(m7,Ngr),e(m7,fQ),e(fQ,jgr),e(m7,Dgr),e(ye,Ggr),e(ye,g7),e(g7,obe),e(obe,Ogr),e(g7,Vgr),e(g7,mQ),e(mQ,Xgr),e(g7,zgr),e(ye,Qgr),e(ye,h7),e(h7,rbe),e(rbe,Wgr),e(h7,Hgr),e(h7,gQ),e(gQ,Ugr),e(h7,Jgr),e(ye,Ygr),e(ye,p7),e(p7,tbe),e(tbe,Kgr),e(p7,Zgr),e(p7,hQ),e(hQ,ehr),e(p7,ohr),e(ye,rhr),e(ye,u7),e(u7,abe),e(abe,thr),e(u7,ahr),e(u7,pQ),e(pQ,nhr),e(u7,shr),e(ye,lhr),e(ye,_7),e(_7,nbe),e(nbe,ihr),e(_7,dhr),e(_7,uQ),e(uQ,chr),e(_7,fhr),e(ye,mhr),e(ye,b7),e(b7,sbe),e(sbe,ghr),e(b7,hhr),e(b7,_Q),e(_Q,phr),e(b7,uhr),e(yr,_hr),M(v7,yr,null),b(f,XBe,_),b(f,Ud,_),e(Ud,F7),e(F7,lbe),M(Cy,lbe,null),e(Ud,bhr),e(Ud,ibe),e(ibe,vhr),b(f,zBe,_),b(f,or,_),M(wy,or,null),e(or,Fhr),e(or,Jd),e(Jd,Thr),e(Jd,bQ),e(bQ,Mhr),e(Jd,Ehr),e(Jd,vQ),e(vQ,Chr),e(Jd,whr),e(or,Ahr),e(or,Ay),e(Ay,yhr),e(Ay,dbe),e(dbe,Lhr),e(Ay,xhr),e(or,$hr),e(or,Lt),M(yy,Lt,null),e(Lt,khr),e(Lt,cbe),e(cbe,Shr),e(Lt,Rhr),e(Lt,Yd),e(Yd,Bhr),e(Yd,fbe),e(fbe,Phr),e(Yd,Ihr),e(Yd,FQ),e(FQ,qhr),e(Yd,Nhr),e(Lt,jhr),M(T7,Lt,null),e(or,Dhr),e(or,Lr),M(Ly,Lr,null),e(Lr,Ghr),e(Lr,mbe),e(mbe,Ohr),e(Lr,Vhr),e(Lr,en),e(en,Xhr),e(en,gbe),e(gbe,zhr),e(en,Qhr),e(en,hbe),e(hbe,Whr),e(en,Hhr),e(en,pbe),e(pbe,Uhr),e(en,Jhr),e(Lr,Yhr),e(Lr,Z),e(Z,M7),e(M7,ube),e(ube,Khr),e(M7,Zhr),e(M7,TQ),e(TQ,epr),e(M7,opr),e(Z,rpr),e(Z,E7),e(E7,_be),e(_be,tpr),e(E7,apr),e(E7,MQ),e(MQ,npr),e(E7,spr),e(Z,lpr),e(Z,C7),e(C7,bbe),e(bbe,ipr),e(C7,dpr),e(C7,EQ),e(EQ,cpr),e(C7,fpr),e(Z,mpr),e(Z,w7),e(w7,vbe),e(vbe,gpr),e(w7,hpr),e(w7,CQ),e(CQ,ppr),e(w7,upr),e(Z,_pr),e(Z,A7),e(A7,Fbe),e(Fbe,bpr),e(A7,vpr),e(A7,wQ),e(wQ,Fpr),e(A7,Tpr),e(Z,Mpr),e(Z,y7),e(y7,Tbe),e(Tbe,Epr),e(y7,Cpr),e(y7,AQ),e(AQ,wpr),e(y7,Apr),e(Z,ypr),e(Z,L7),e(L7,Mbe),e(Mbe,Lpr),e(L7,xpr),e(L7,yQ),e(yQ,$pr),e(L7,kpr),e(Z,Spr),e(Z,x7),e(x7,Ebe),e(Ebe,Rpr),e(x7,Bpr),e(x7,LQ),e(LQ,Ppr),e(x7,Ipr),e(Z,qpr),e(Z,$7),e($7,Cbe),e(Cbe,Npr),e($7,jpr),e($7,xQ),e(xQ,Dpr),e($7,Gpr),e(Z,Opr),e(Z,k7),e(k7,wbe),e(wbe,Vpr),e(k7,Xpr),e(k7,$Q),e($Q,zpr),e(k7,Qpr),e(Z,Wpr),e(Z,S7),e(S7,Abe),e(Abe,Hpr),e(S7,Upr),e(S7,kQ),e(kQ,Jpr),e(S7,Ypr),e(Z,Kpr),e(Z,R7),e(R7,ybe),e(ybe,Zpr),e(R7,eur),e(R7,SQ),e(SQ,our),e(R7,rur),e(Z,tur),e(Z,B7),e(B7,Lbe),e(Lbe,aur),e(B7,nur),e(B7,RQ),e(RQ,sur),e(B7,lur),e(Z,iur),e(Z,P7),e(P7,xbe),e(xbe,dur),e(P7,cur),e(P7,BQ),e(BQ,fur),e(P7,mur),e(Z,gur),e(Z,I7),e(I7,$be),e($be,hur),e(I7,pur),e(I7,PQ),e(PQ,uur),e(I7,_ur),e(Z,bur),e(Z,q7),e(q7,kbe),e(kbe,vur),e(q7,Fur),e(q7,IQ),e(IQ,Tur),e(q7,Mur),e(Z,Eur),e(Z,N7),e(N7,Sbe),e(Sbe,Cur),e(N7,wur),e(N7,qQ),e(qQ,Aur),e(N7,yur),e(Z,Lur),e(Z,j7),e(j7,Rbe),e(Rbe,xur),e(j7,$ur),e(j7,NQ),e(NQ,kur),e(j7,Sur),e(Z,Rur),e(Z,D7),e(D7,Bbe),e(Bbe,Bur),e(D7,Pur),e(D7,jQ),e(jQ,Iur),e(D7,qur),e(Z,Nur),e(Z,G7),e(G7,Pbe),e(Pbe,jur),e(G7,Dur),e(G7,DQ),e(DQ,Gur),e(G7,Our),e(Z,Vur),e(Z,O7),e(O7,Ibe),e(Ibe,Xur),e(O7,zur),e(O7,GQ),e(GQ,Qur),e(O7,Wur),e(Z,Hur),e(Z,V7),e(V7,qbe),e(qbe,Uur),e(V7,Jur),e(V7,OQ),e(OQ,Yur),e(V7,Kur),e(Z,Zur),e(Z,X7),e(X7,Nbe),e(Nbe,e_r),e(X7,o_r),e(X7,VQ),e(VQ,r_r),e(X7,t_r),e(Z,a_r),e(Z,z7),e(z7,jbe),e(jbe,n_r),e(z7,s_r),e(z7,XQ),e(XQ,l_r),e(z7,i_r),e(Z,d_r),e(Z,Q7),e(Q7,Dbe),e(Dbe,c_r),e(Q7,f_r),e(Q7,zQ),e(zQ,m_r),e(Q7,g_r),e(Z,h_r),e(Z,W7),e(W7,Gbe),e(Gbe,p_r),e(W7,u_r),e(W7,QQ),e(QQ,__r),e(W7,b_r),e(Lr,v_r),M(H7,Lr,null),b(f,QBe,_),b(f,Kd,_),e(Kd,U7),e(U7,Obe),M(xy,Obe,null),e(Kd,F_r),e(Kd,Vbe),e(Vbe,T_r),b(f,WBe,_),b(f,rr,_),M($y,rr,null),e(rr,M_r),e(rr,Zd),e(Zd,E_r),e(Zd,WQ),e(WQ,C_r),e(Zd,w_r),e(Zd,HQ),e(HQ,A_r),e(Zd,y_r),e(rr,L_r),e(rr,ky),e(ky,x_r),e(ky,Xbe),e(Xbe,$_r),e(ky,k_r),e(rr,S_r),e(rr,xt),M(Sy,xt,null),e(xt,R_r),e(xt,zbe),e(zbe,B_r),e(xt,P_r),e(xt,ec),e(ec,I_r),e(ec,Qbe),e(Qbe,q_r),e(ec,N_r),e(ec,UQ),e(UQ,j_r),e(ec,D_r),e(xt,G_r),M(J7,xt,null),e(rr,O_r),e(rr,xr),M(Ry,xr,null),e(xr,V_r),e(xr,Wbe),e(Wbe,X_r),e(xr,z_r),e(xr,on),e(on,Q_r),e(on,Hbe),e(Hbe,W_r),e(on,H_r),e(on,Ube),e(Ube,U_r),e(on,J_r),e(on,Jbe),e(Jbe,Y_r),e(on,K_r),e(xr,Z_r),e(xr,pe),e(pe,Y7),e(Y7,Ybe),e(Ybe,e1r),e(Y7,o1r),e(Y7,JQ),e(JQ,r1r),e(Y7,t1r),e(pe,a1r),e(pe,K7),e(K7,Kbe),e(Kbe,n1r),e(K7,s1r),e(K7,YQ),e(YQ,l1r),e(K7,i1r),e(pe,d1r),e(pe,Z7),e(Z7,Zbe),e(Zbe,c1r),e(Z7,f1r),e(Z7,KQ),e(KQ,m1r),e(Z7,g1r),e(pe,h1r),e(pe,e9),e(e9,e4e),e(e4e,p1r),e(e9,u1r),e(e9,ZQ),e(ZQ,_1r),e(e9,b1r),e(pe,v1r),e(pe,o9),e(o9,o4e),e(o4e,F1r),e(o9,T1r),e(o9,eW),e(eW,M1r),e(o9,E1r),e(pe,C1r),e(pe,r9),e(r9,r4e),e(r4e,w1r),e(r9,A1r),e(r9,oW),e(oW,y1r),e(r9,L1r),e(pe,x1r),e(pe,t9),e(t9,t4e),e(t4e,$1r),e(t9,k1r),e(t9,rW),e(rW,S1r),e(t9,R1r),e(pe,B1r),e(pe,a9),e(a9,a4e),e(a4e,P1r),e(a9,I1r),e(a9,tW),e(tW,q1r),e(a9,N1r),e(pe,j1r),e(pe,n9),e(n9,n4e),e(n4e,D1r),e(n9,G1r),e(n9,aW),e(aW,O1r),e(n9,V1r),e(pe,X1r),e(pe,s9),e(s9,s4e),e(s4e,z1r),e(s9,Q1r),e(s9,nW),e(nW,W1r),e(s9,H1r),e(pe,U1r),e(pe,l9),e(l9,l4e),e(l4e,J1r),e(l9,Y1r),e(l9,sW),e(sW,K1r),e(l9,Z1r),e(pe,ebr),e(pe,i9),e(i9,i4e),e(i4e,obr),e(i9,rbr),e(i9,lW),e(lW,tbr),e(i9,abr),e(pe,nbr),e(pe,d9),e(d9,d4e),e(d4e,sbr),e(d9,lbr),e(d9,iW),e(iW,ibr),e(d9,dbr),e(pe,cbr),e(pe,c9),e(c9,c4e),e(c4e,fbr),e(c9,mbr),e(c9,dW),e(dW,gbr),e(c9,hbr),e(pe,pbr),e(pe,f9),e(f9,f4e),e(f4e,ubr),e(f9,_br),e(f9,cW),e(cW,bbr),e(f9,vbr),e(pe,Fbr),e(pe,m9),e(m9,m4e),e(m4e,Tbr),e(m9,Mbr),e(m9,fW),e(fW,Ebr),e(m9,Cbr),e(pe,wbr),e(pe,g9),e(g9,g4e),e(g4e,Abr),e(g9,ybr),e(g9,mW),e(mW,Lbr),e(g9,xbr),e(xr,$br),M(h9,xr,null),b(f,HBe,_),b(f,oc,_),e(oc,p9),e(p9,h4e),M(By,h4e,null),e(oc,kbr),e(oc,p4e),e(p4e,Sbr),b(f,UBe,_),b(f,tr,_),M(Py,tr,null),e(tr,Rbr),e(tr,rc),e(rc,Bbr),e(rc,gW),e(gW,Pbr),e(rc,Ibr),e(rc,hW),e(hW,qbr),e(rc,Nbr),e(tr,jbr),e(tr,Iy),e(Iy,Dbr),e(Iy,u4e),e(u4e,Gbr),e(Iy,Obr),e(tr,Vbr),e(tr,$t),M(qy,$t,null),e($t,Xbr),e($t,_4e),e(_4e,zbr),e($t,Qbr),e($t,tc),e(tc,Wbr),e(tc,b4e),e(b4e,Hbr),e(tc,Ubr),e(tc,pW),e(pW,Jbr),e(tc,Ybr),e($t,Kbr),M(u9,$t,null),e(tr,Zbr),e(tr,$r),M(Ny,$r,null),e($r,e4r),e($r,v4e),e(v4e,o4r),e($r,r4r),e($r,rn),e(rn,t4r),e(rn,F4e),e(F4e,a4r),e(rn,n4r),e(rn,T4e),e(T4e,s4r),e(rn,l4r),e(rn,M4e),e(M4e,i4r),e(rn,d4r),e($r,c4r),e($r,E4e),e(E4e,_9),e(_9,C4e),e(C4e,f4r),e(_9,m4r),e(_9,uW),e(uW,g4r),e(_9,h4r),e($r,p4r),M(b9,$r,null),b(f,JBe,_),b(f,ac,_),e(ac,v9),e(v9,w4e),M(jy,w4e,null),e(ac,u4r),e(ac,A4e),e(A4e,_4r),b(f,YBe,_),b(f,ar,_),M(Dy,ar,null),e(ar,b4r),e(ar,nc),e(nc,v4r),e(nc,_W),e(_W,F4r),e(nc,T4r),e(nc,bW),e(bW,M4r),e(nc,E4r),e(ar,C4r),e(ar,Gy),e(Gy,w4r),e(Gy,y4e),e(y4e,A4r),e(Gy,y4r),e(ar,L4r),e(ar,kt),M(Oy,kt,null),e(kt,x4r),e(kt,L4e),e(L4e,$4r),e(kt,k4r),e(kt,sc),e(sc,S4r),e(sc,x4e),e(x4e,R4r),e(sc,B4r),e(sc,vW),e(vW,P4r),e(sc,I4r),e(kt,q4r),M(F9,kt,null),e(ar,N4r),e(ar,kr),M(Vy,kr,null),e(kr,j4r),e(kr,$4e),e($4e,D4r),e(kr,G4r),e(kr,tn),e(tn,O4r),e(tn,k4e),e(k4e,V4r),e(tn,X4r),e(tn,S4e),e(S4e,z4r),e(tn,Q4r),e(tn,R4e),e(R4e,W4r),e(tn,H4r),e(kr,U4r),e(kr,de),e(de,T9),e(T9,B4e),e(B4e,J4r),e(T9,Y4r),e(T9,FW),e(FW,K4r),e(T9,Z4r),e(de,e2r),e(de,M9),e(M9,P4e),e(P4e,o2r),e(M9,r2r),e(M9,TW),e(TW,t2r),e(M9,a2r),e(de,n2r),e(de,E9),e(E9,I4e),e(I4e,s2r),e(E9,l2r),e(E9,MW),e(MW,i2r),e(E9,d2r),e(de,c2r),e(de,C9),e(C9,q4e),e(q4e,f2r),e(C9,m2r),e(C9,EW),e(EW,g2r),e(C9,h2r),e(de,p2r),e(de,w9),e(w9,N4e),e(N4e,u2r),e(w9,_2r),e(w9,CW),e(CW,b2r),e(w9,v2r),e(de,F2r),e(de,A9),e(A9,j4e),e(j4e,T2r),e(A9,M2r),e(A9,wW),e(wW,E2r),e(A9,C2r),e(de,w2r),e(de,y9),e(y9,D4e),e(D4e,A2r),e(y9,y2r),e(y9,AW),e(AW,L2r),e(y9,x2r),e(de,$2r),e(de,L9),e(L9,G4e),e(G4e,k2r),e(L9,S2r),e(L9,yW),e(yW,R2r),e(L9,B2r),e(de,P2r),e(de,x9),e(x9,O4e),e(O4e,I2r),e(x9,q2r),e(x9,LW),e(LW,N2r),e(x9,j2r),e(de,D2r),e(de,$9),e($9,V4e),e(V4e,G2r),e($9,O2r),e($9,xW),e(xW,V2r),e($9,X2r),e(de,z2r),e(de,k9),e(k9,X4e),e(X4e,Q2r),e(k9,W2r),e(k9,$W),e($W,H2r),e(k9,U2r),e(de,J2r),e(de,S9),e(S9,z4e),e(z4e,Y2r),e(S9,K2r),e(S9,kW),e(kW,Z2r),e(S9,evr),e(de,ovr),e(de,R9),e(R9,Q4e),e(Q4e,rvr),e(R9,tvr),e(R9,SW),e(SW,avr),e(R9,nvr),e(de,svr),e(de,B9),e(B9,W4e),e(W4e,lvr),e(B9,ivr),e(B9,RW),e(RW,dvr),e(B9,cvr),e(de,fvr),e(de,P9),e(P9,H4e),e(H4e,mvr),e(P9,gvr),e(P9,BW),e(BW,hvr),e(P9,pvr),e(de,uvr),e(de,I9),e(I9,U4e),e(U4e,_vr),e(I9,bvr),e(I9,PW),e(PW,vvr),e(I9,Fvr),e(de,Tvr),e(de,q9),e(q9,J4e),e(J4e,Mvr),e(q9,Evr),e(q9,IW),e(IW,Cvr),e(q9,wvr),e(de,Avr),e(de,N9),e(N9,Y4e),e(Y4e,yvr),e(N9,Lvr),e(N9,qW),e(qW,xvr),e(N9,$vr),e(de,kvr),e(de,j9),e(j9,K4e),e(K4e,Svr),e(j9,Rvr),e(j9,NW),e(NW,Bvr),e(j9,Pvr),e(de,Ivr),e(de,D9),e(D9,Z4e),e(Z4e,qvr),e(D9,Nvr),e(D9,jW),e(jW,jvr),e(D9,Dvr),e(kr,Gvr),M(G9,kr,null),b(f,KBe,_),b(f,lc,_),e(lc,O9),e(O9,e2e),M(Xy,e2e,null),e(lc,Ovr),e(lc,o2e),e(o2e,Vvr),b(f,ZBe,_),b(f,nr,_),M(zy,nr,null),e(nr,Xvr),e(nr,ic),e(ic,zvr),e(ic,DW),e(DW,Qvr),e(ic,Wvr),e(ic,GW),e(GW,Hvr),e(ic,Uvr),e(nr,Jvr),e(nr,Qy),e(Qy,Yvr),e(Qy,r2e),e(r2e,Kvr),e(Qy,Zvr),e(nr,eFr),e(nr,St),M(Wy,St,null),e(St,oFr),e(St,t2e),e(t2e,rFr),e(St,tFr),e(St,dc),e(dc,aFr),e(dc,a2e),e(a2e,nFr),e(dc,sFr),e(dc,OW),e(OW,lFr),e(dc,iFr),e(St,dFr),M(V9,St,null),e(nr,cFr),e(nr,Sr),M(Hy,Sr,null),e(Sr,fFr),e(Sr,n2e),e(n2e,mFr),e(Sr,gFr),e(Sr,an),e(an,hFr),e(an,s2e),e(s2e,pFr),e(an,uFr),e(an,l2e),e(l2e,_Fr),e(an,bFr),e(an,i2e),e(i2e,vFr),e(an,FFr),e(Sr,TFr),e(Sr,ce),e(ce,X9),e(X9,d2e),e(d2e,MFr),e(X9,EFr),e(X9,VW),e(VW,CFr),e(X9,wFr),e(ce,AFr),e(ce,z9),e(z9,c2e),e(c2e,yFr),e(z9,LFr),e(z9,XW),e(XW,xFr),e(z9,$Fr),e(ce,kFr),e(ce,Q9),e(Q9,f2e),e(f2e,SFr),e(Q9,RFr),e(Q9,zW),e(zW,BFr),e(Q9,PFr),e(ce,IFr),e(ce,W9),e(W9,m2e),e(m2e,qFr),e(W9,NFr),e(W9,QW),e(QW,jFr),e(W9,DFr),e(ce,GFr),e(ce,H9),e(H9,g2e),e(g2e,OFr),e(H9,VFr),e(H9,WW),e(WW,XFr),e(H9,zFr),e(ce,QFr),e(ce,U9),e(U9,h2e),e(h2e,WFr),e(U9,HFr),e(U9,HW),e(HW,UFr),e(U9,JFr),e(ce,YFr),e(ce,J9),e(J9,p2e),e(p2e,KFr),e(J9,ZFr),e(J9,UW),e(UW,e6r),e(J9,o6r),e(ce,r6r),e(ce,Y9),e(Y9,u2e),e(u2e,t6r),e(Y9,a6r),e(Y9,JW),e(JW,n6r),e(Y9,s6r),e(ce,l6r),e(ce,K9),e(K9,_2e),e(_2e,i6r),e(K9,d6r),e(K9,YW),e(YW,c6r),e(K9,f6r),e(ce,m6r),e(ce,Z9),e(Z9,b2e),e(b2e,g6r),e(Z9,h6r),e(Z9,KW),e(KW,p6r),e(Z9,u6r),e(ce,_6r),e(ce,eM),e(eM,v2e),e(v2e,b6r),e(eM,v6r),e(eM,ZW),e(ZW,F6r),e(eM,T6r),e(ce,M6r),e(ce,oM),e(oM,F2e),e(F2e,E6r),e(oM,C6r),e(oM,eH),e(eH,w6r),e(oM,A6r),e(ce,y6r),e(ce,rM),e(rM,T2e),e(T2e,L6r),e(rM,x6r),e(rM,oH),e(oH,$6r),e(rM,k6r),e(ce,S6r),e(ce,tM),e(tM,M2e),e(M2e,R6r),e(tM,B6r),e(tM,rH),e(rH,P6r),e(tM,I6r),e(ce,q6r),e(ce,aM),e(aM,E2e),e(E2e,N6r),e(aM,j6r),e(aM,tH),e(tH,D6r),e(aM,G6r),e(ce,O6r),e(ce,nM),e(nM,C2e),e(C2e,V6r),e(nM,X6r),e(nM,aH),e(aH,z6r),e(nM,Q6r),e(ce,W6r),e(ce,sM),e(sM,w2e),e(w2e,H6r),e(sM,U6r),e(sM,nH),e(nH,J6r),e(sM,Y6r),e(ce,K6r),e(ce,lM),e(lM,A2e),e(A2e,Z6r),e(lM,eTr),e(lM,sH),e(sH,oTr),e(lM,rTr),e(ce,tTr),e(ce,iM),e(iM,y2e),e(y2e,aTr),e(iM,nTr),e(iM,lH),e(lH,sTr),e(iM,lTr),e(ce,iTr),e(ce,dM),e(dM,L2e),e(L2e,dTr),e(dM,cTr),e(dM,iH),e(iH,fTr),e(dM,mTr),e(Sr,gTr),M(cM,Sr,null),b(f,ePe,_),b(f,cc,_),e(cc,fM),e(fM,x2e),M(Uy,x2e,null),e(cc,hTr),e(cc,$2e),e($2e,pTr),b(f,oPe,_),b(f,sr,_),M(Jy,sr,null),e(sr,uTr),e(sr,fc),e(fc,_Tr),e(fc,dH),e(dH,bTr),e(fc,vTr),e(fc,cH),e(cH,FTr),e(fc,TTr),e(sr,MTr),e(sr,Yy),e(Yy,ETr),e(Yy,k2e),e(k2e,CTr),e(Yy,wTr),e(sr,ATr),e(sr,Rt),M(Ky,Rt,null),e(Rt,yTr),e(Rt,S2e),e(S2e,LTr),e(Rt,xTr),e(Rt,mc),e(mc,$Tr),e(mc,R2e),e(R2e,kTr),e(mc,STr),e(mc,fH),e(fH,RTr),e(mc,BTr),e(Rt,PTr),M(mM,Rt,null),e(sr,ITr),e(sr,Rr),M(Zy,Rr,null),e(Rr,qTr),e(Rr,B2e),e(B2e,NTr),e(Rr,jTr),e(Rr,nn),e(nn,DTr),e(nn,P2e),e(P2e,GTr),e(nn,OTr),e(nn,I2e),e(I2e,VTr),e(nn,XTr),e(nn,q2e),e(q2e,zTr),e(nn,QTr),e(Rr,WTr),e(Rr,N2e),e(N2e,gM),e(gM,j2e),e(j2e,HTr),e(gM,UTr),e(gM,mH),e(mH,JTr),e(gM,YTr),e(Rr,KTr),M(hM,Rr,null),b(f,rPe,_),b(f,gc,_),e(gc,pM),e(pM,D2e),M(eL,D2e,null),e(gc,ZTr),e(gc,G2e),e(G2e,e7r),b(f,tPe,_),b(f,lr,_),M(oL,lr,null),e(lr,o7r),e(lr,hc),e(hc,r7r),e(hc,gH),e(gH,t7r),e(hc,a7r),e(hc,hH),e(hH,n7r),e(hc,s7r),e(lr,l7r),e(lr,rL),e(rL,i7r),e(rL,O2e),e(O2e,d7r),e(rL,c7r),e(lr,f7r),e(lr,Bt),M(tL,Bt,null),e(Bt,m7r),e(Bt,V2e),e(V2e,g7r),e(Bt,h7r),e(Bt,pc),e(pc,p7r),e(pc,X2e),e(X2e,u7r),e(pc,_7r),e(pc,pH),e(pH,b7r),e(pc,v7r),e(Bt,F7r),M(uM,Bt,null),e(lr,T7r),e(lr,Br),M(aL,Br,null),e(Br,M7r),e(Br,z2e),e(z2e,E7r),e(Br,C7r),e(Br,sn),e(sn,w7r),e(sn,Q2e),e(Q2e,A7r),e(sn,y7r),e(sn,W2e),e(W2e,L7r),e(sn,x7r),e(sn,H2e),e(H2e,$7r),e(sn,k7r),e(Br,S7r),e(Br,U2e),e(U2e,_M),e(_M,J2e),e(J2e,R7r),e(_M,B7r),e(_M,uH),e(uH,P7r),e(_M,I7r),e(Br,q7r),M(bM,Br,null),b(f,aPe,_),b(f,uc,_),e(uc,vM),e(vM,Y2e),M(nL,Y2e,null),e(uc,N7r),e(uc,K2e),e(K2e,j7r),b(f,nPe,_),b(f,ir,_),M(sL,ir,null),e(ir,D7r),e(ir,_c),e(_c,G7r),e(_c,_H),e(_H,O7r),e(_c,V7r),e(_c,bH),e(bH,X7r),e(_c,z7r),e(ir,Q7r),e(ir,lL),e(lL,W7r),e(lL,Z2e),e(Z2e,H7r),e(lL,U7r),e(ir,J7r),e(ir,Pt),M(iL,Pt,null),e(Pt,Y7r),e(Pt,eve),e(eve,K7r),e(Pt,Z7r),e(Pt,bc),e(bc,e9r),e(bc,ove),e(ove,o9r),e(bc,r9r),e(bc,vH),e(vH,t9r),e(bc,a9r),e(Pt,n9r),M(FM,Pt,null),e(ir,s9r),e(ir,Pr),M(dL,Pr,null),e(Pr,l9r),e(Pr,rve),e(rve,i9r),e(Pr,d9r),e(Pr,ln),e(ln,c9r),e(ln,tve),e(tve,f9r),e(ln,m9r),e(ln,ave),e(ave,g9r),e(ln,h9r),e(ln,nve),e(nve,p9r),e(ln,u9r),e(Pr,_9r),e(Pr,oe),e(oe,TM),e(TM,sve),e(sve,b9r),e(TM,v9r),e(TM,FH),e(FH,F9r),e(TM,T9r),e(oe,M9r),e(oe,MM),e(MM,lve),e(lve,E9r),e(MM,C9r),e(MM,TH),e(TH,w9r),e(MM,A9r),e(oe,y9r),e(oe,EM),e(EM,ive),e(ive,L9r),e(EM,x9r),e(EM,MH),e(MH,$9r),e(EM,k9r),e(oe,S9r),e(oe,CM),e(CM,dve),e(dve,R9r),e(CM,B9r),e(CM,EH),e(EH,P9r),e(CM,I9r),e(oe,q9r),e(oe,wM),e(wM,cve),e(cve,N9r),e(wM,j9r),e(wM,CH),e(CH,D9r),e(wM,G9r),e(oe,O9r),e(oe,AM),e(AM,fve),e(fve,V9r),e(AM,X9r),e(AM,wH),e(wH,z9r),e(AM,Q9r),e(oe,W9r),e(oe,yM),e(yM,mve),e(mve,H9r),e(yM,U9r),e(yM,AH),e(AH,J9r),e(yM,Y9r),e(oe,K9r),e(oe,LM),e(LM,gve),e(gve,Z9r),e(LM,eMr),e(LM,yH),e(yH,oMr),e(LM,rMr),e(oe,tMr),e(oe,xM),e(xM,hve),e(hve,aMr),e(xM,nMr),e(xM,LH),e(LH,sMr),e(xM,lMr),e(oe,iMr),e(oe,$M),e($M,pve),e(pve,dMr),e($M,cMr),e($M,xH),e(xH,fMr),e($M,mMr),e(oe,gMr),e(oe,kM),e(kM,uve),e(uve,hMr),e(kM,pMr),e(kM,$H),e($H,uMr),e(kM,_Mr),e(oe,bMr),e(oe,SM),e(SM,_ve),e(_ve,vMr),e(SM,FMr),e(SM,kH),e(kH,TMr),e(SM,MMr),e(oe,EMr),e(oe,RM),e(RM,bve),e(bve,CMr),e(RM,wMr),e(RM,SH),e(SH,AMr),e(RM,yMr),e(oe,LMr),e(oe,BM),e(BM,vve),e(vve,xMr),e(BM,$Mr),e(BM,RH),e(RH,kMr),e(BM,SMr),e(oe,RMr),e(oe,PM),e(PM,Fve),e(Fve,BMr),e(PM,PMr),e(PM,BH),e(BH,IMr),e(PM,qMr),e(oe,NMr),e(oe,IM),e(IM,Tve),e(Tve,jMr),e(IM,DMr),e(IM,PH),e(PH,GMr),e(IM,OMr),e(oe,VMr),e(oe,qM),e(qM,Mve),e(Mve,XMr),e(qM,zMr),e(qM,IH),e(IH,QMr),e(qM,WMr),e(oe,HMr),e(oe,NM),e(NM,Eve),e(Eve,UMr),e(NM,JMr),e(NM,qH),e(qH,YMr),e(NM,KMr),e(oe,ZMr),e(oe,jM),e(jM,Cve),e(Cve,eEr),e(jM,oEr),e(jM,NH),e(NH,rEr),e(jM,tEr),e(oe,aEr),e(oe,DM),e(DM,wve),e(wve,nEr),e(DM,sEr),e(DM,jH),e(jH,lEr),e(DM,iEr),e(oe,dEr),e(oe,GM),e(GM,Ave),e(Ave,cEr),e(GM,fEr),e(GM,DH),e(DH,mEr),e(GM,gEr),e(oe,hEr),e(oe,OM),e(OM,yve),e(yve,pEr),e(OM,uEr),e(OM,GH),e(GH,_Er),e(OM,bEr),e(oe,vEr),e(oe,VM),e(VM,Lve),e(Lve,FEr),e(VM,TEr),e(VM,OH),e(OH,MEr),e(VM,EEr),e(oe,CEr),e(oe,XM),e(XM,xve),e(xve,wEr),e(XM,AEr),e(XM,VH),e(VH,yEr),e(XM,LEr),e(oe,xEr),e(oe,zM),e(zM,$ve),e($ve,$Er),e(zM,kEr),e(zM,XH),e(XH,SEr),e(zM,REr),e(Pr,BEr),M(QM,Pr,null),b(f,sPe,_),b(f,vc,_),e(vc,WM),e(WM,kve),M(cL,kve,null),e(vc,PEr),e(vc,Sve),e(Sve,IEr),b(f,lPe,_),b(f,dr,_),M(fL,dr,null),e(dr,qEr),e(dr,Fc),e(Fc,NEr),e(Fc,zH),e(zH,jEr),e(Fc,DEr),e(Fc,QH),e(QH,GEr),e(Fc,OEr),e(dr,VEr),e(dr,mL),e(mL,XEr),e(mL,Rve),e(Rve,zEr),e(mL,QEr),e(dr,WEr),e(dr,It),M(gL,It,null),e(It,HEr),e(It,Bve),e(Bve,UEr),e(It,JEr),e(It,Tc),e(Tc,YEr),e(Tc,Pve),e(Pve,KEr),e(Tc,ZEr),e(Tc,WH),e(WH,e5r),e(Tc,o5r),e(It,r5r),M(HM,It,null),e(dr,t5r),e(dr,Ir),M(hL,Ir,null),e(Ir,a5r),e(Ir,Ive),e(Ive,n5r),e(Ir,s5r),e(Ir,dn),e(dn,l5r),e(dn,qve),e(qve,i5r),e(dn,d5r),e(dn,Nve),e(Nve,c5r),e(dn,f5r),e(dn,jve),e(jve,m5r),e(dn,g5r),e(Ir,h5r),e(Ir,Hr),e(Hr,UM),e(UM,Dve),e(Dve,p5r),e(UM,u5r),e(UM,HH),e(HH,_5r),e(UM,b5r),e(Hr,v5r),e(Hr,JM),e(JM,Gve),e(Gve,F5r),e(JM,T5r),e(JM,UH),e(UH,M5r),e(JM,E5r),e(Hr,C5r),e(Hr,YM),e(YM,Ove),e(Ove,w5r),e(YM,A5r),e(YM,JH),e(JH,y5r),e(YM,L5r),e(Hr,x5r),e(Hr,KM),e(KM,Vve),e(Vve,$5r),e(KM,k5r),e(KM,YH),e(YH,S5r),e(KM,R5r),e(Hr,B5r),e(Hr,ZM),e(ZM,Xve),e(Xve,P5r),e(ZM,I5r),e(ZM,KH),e(KH,q5r),e(ZM,N5r),e(Ir,j5r),M(eE,Ir,null),b(f,iPe,_),b(f,Mc,_),e(Mc,oE),e(oE,zve),M(pL,zve,null),e(Mc,D5r),e(Mc,Qve),e(Qve,G5r),b(f,dPe,_),b(f,cr,_),M(uL,cr,null),e(cr,O5r),e(cr,Ec),e(Ec,V5r),e(Ec,ZH),e(ZH,X5r),e(Ec,z5r),e(Ec,eU),e(eU,Q5r),e(Ec,W5r),e(cr,H5r),e(cr,_L),e(_L,U5r),e(_L,Wve),e(Wve,J5r),e(_L,Y5r),e(cr,K5r),e(cr,qt),M(bL,qt,null),e(qt,Z5r),e(qt,Hve),e(Hve,eCr),e(qt,oCr),e(qt,Cc),e(Cc,rCr),e(Cc,Uve),e(Uve,tCr),e(Cc,aCr),e(Cc,oU),e(oU,nCr),e(Cc,sCr),e(qt,lCr),M(rE,qt,null),e(cr,iCr),e(cr,qr),M(vL,qr,null),e(qr,dCr),e(qr,Jve),e(Jve,cCr),e(qr,fCr),e(qr,cn),e(cn,mCr),e(cn,Yve),e(Yve,gCr),e(cn,hCr),e(cn,Kve),e(Kve,pCr),e(cn,uCr),e(cn,Zve),e(Zve,_Cr),e(cn,bCr),e(qr,vCr),e(qr,Me),e(Me,tE),e(tE,eFe),e(eFe,FCr),e(tE,TCr),e(tE,rU),e(rU,MCr),e(tE,ECr),e(Me,CCr),e(Me,aE),e(aE,oFe),e(oFe,wCr),e(aE,ACr),e(aE,tU),e(tU,yCr),e(aE,LCr),e(Me,xCr),e(Me,nE),e(nE,rFe),e(rFe,$Cr),e(nE,kCr),e(nE,aU),e(aU,SCr),e(nE,RCr),e(Me,BCr),e(Me,sE),e(sE,tFe),e(tFe,PCr),e(sE,ICr),e(sE,nU),e(nU,qCr),e(sE,NCr),e(Me,jCr),e(Me,lE),e(lE,aFe),e(aFe,DCr),e(lE,GCr),e(lE,sU),e(sU,OCr),e(lE,VCr),e(Me,XCr),e(Me,iE),e(iE,nFe),e(nFe,zCr),e(iE,QCr),e(iE,lU),e(lU,WCr),e(iE,HCr),e(Me,UCr),e(Me,dE),e(dE,sFe),e(sFe,JCr),e(dE,YCr),e(dE,iU),e(iU,KCr),e(dE,ZCr),e(Me,e3r),e(Me,cE),e(cE,lFe),e(lFe,o3r),e(cE,r3r),e(cE,dU),e(dU,t3r),e(cE,a3r),e(Me,n3r),e(Me,fE),e(fE,iFe),e(iFe,s3r),e(fE,l3r),e(fE,cU),e(cU,i3r),e(fE,d3r),e(Me,c3r),e(Me,mE),e(mE,dFe),e(dFe,f3r),e(mE,m3r),e(mE,fU),e(fU,g3r),e(mE,h3r),e(Me,p3r),e(Me,gE),e(gE,cFe),e(cFe,u3r),e(gE,_3r),e(gE,mU),e(mU,b3r),e(gE,v3r),e(Me,F3r),e(Me,hE),e(hE,fFe),e(fFe,T3r),e(hE,M3r),e(hE,gU),e(gU,E3r),e(hE,C3r),e(qr,w3r),M(pE,qr,null),b(f,cPe,_),b(f,wc,_),e(wc,uE),e(uE,mFe),M(FL,mFe,null),e(wc,A3r),e(wc,gFe),e(gFe,y3r),b(f,fPe,_),b(f,fr,_),M(TL,fr,null),e(fr,L3r),e(fr,Ac),e(Ac,x3r),e(Ac,hU),e(hU,$3r),e(Ac,k3r),e(Ac,pU),e(pU,S3r),e(Ac,R3r),e(fr,B3r),e(fr,ML),e(ML,P3r),e(ML,hFe),e(hFe,I3r),e(ML,q3r),e(fr,N3r),e(fr,Nt),M(EL,Nt,null),e(Nt,j3r),e(Nt,pFe),e(pFe,D3r),e(Nt,G3r),e(Nt,yc),e(yc,O3r),e(yc,uFe),e(uFe,V3r),e(yc,X3r),e(yc,uU),e(uU,z3r),e(yc,Q3r),e(Nt,W3r),M(_E,Nt,null),e(fr,H3r),e(fr,Nr),M(CL,Nr,null),e(Nr,U3r),e(Nr,_Fe),e(_Fe,J3r),e(Nr,Y3r),e(Nr,fn),e(fn,K3r),e(fn,bFe),e(bFe,Z3r),e(fn,ewr),e(fn,vFe),e(vFe,owr),e(fn,rwr),e(fn,FFe),e(FFe,twr),e(fn,awr),e(Nr,nwr),e(Nr,Le),e(Le,bE),e(bE,TFe),e(TFe,swr),e(bE,lwr),e(bE,_U),e(_U,iwr),e(bE,dwr),e(Le,cwr),e(Le,vE),e(vE,MFe),e(MFe,fwr),e(vE,mwr),e(vE,bU),e(bU,gwr),e(vE,hwr),e(Le,pwr),e(Le,FE),e(FE,EFe),e(EFe,uwr),e(FE,_wr),e(FE,vU),e(vU,bwr),e(FE,vwr),e(Le,Fwr),e(Le,TE),e(TE,CFe),e(CFe,Twr),e(TE,Mwr),e(TE,FU),e(FU,Ewr),e(TE,Cwr),e(Le,wwr),e(Le,ME),e(ME,wFe),e(wFe,Awr),e(ME,ywr),e(ME,TU),e(TU,Lwr),e(ME,xwr),e(Le,$wr),e(Le,EE),e(EE,AFe),e(AFe,kwr),e(EE,Swr),e(EE,MU),e(MU,Rwr),e(EE,Bwr),e(Le,Pwr),e(Le,CE),e(CE,yFe),e(yFe,Iwr),e(CE,qwr),e(CE,EU),e(EU,Nwr),e(CE,jwr),e(Le,Dwr),e(Le,wE),e(wE,LFe),e(LFe,Gwr),e(wE,Owr),e(wE,CU),e(CU,Vwr),e(wE,Xwr),e(Le,zwr),e(Le,AE),e(AE,xFe),e(xFe,Qwr),e(AE,Wwr),e(AE,wU),e(wU,Hwr),e(AE,Uwr),e(Le,Jwr),e(Le,yE),e(yE,$Fe),e($Fe,Ywr),e(yE,Kwr),e(yE,AU),e(AU,Zwr),e(yE,eAr),e(Nr,oAr),M(LE,Nr,null),b(f,mPe,_),b(f,Lc,_),e(Lc,xE),e(xE,kFe),M(wL,kFe,null),e(Lc,rAr),e(Lc,SFe),e(SFe,tAr),b(f,gPe,_),b(f,mr,_),M(AL,mr,null),e(mr,aAr),e(mr,xc),e(xc,nAr),e(xc,yU),e(yU,sAr),e(xc,lAr),e(xc,LU),e(LU,iAr),e(xc,dAr),e(mr,cAr),e(mr,yL),e(yL,fAr),e(yL,RFe),e(RFe,mAr),e(yL,gAr),e(mr,hAr),e(mr,jt),M(LL,jt,null),e(jt,pAr),e(jt,BFe),e(BFe,uAr),e(jt,_Ar),e(jt,$c),e($c,bAr),e($c,PFe),e(PFe,vAr),e($c,FAr),e($c,xU),e(xU,TAr),e($c,MAr),e(jt,EAr),M($E,jt,null),e(mr,CAr),e(mr,jr),M(xL,jr,null),e(jr,wAr),e(jr,IFe),e(IFe,AAr),e(jr,yAr),e(jr,mn),e(mn,LAr),e(mn,qFe),e(qFe,xAr),e(mn,$Ar),e(mn,NFe),e(NFe,kAr),e(mn,SAr),e(mn,jFe),e(jFe,RAr),e(mn,BAr),e(jr,PAr),e(jr,ke),e(ke,kE),e(kE,DFe),e(DFe,IAr),e(kE,qAr),e(kE,$U),e($U,NAr),e(kE,jAr),e(ke,DAr),e(ke,SE),e(SE,GFe),e(GFe,GAr),e(SE,OAr),e(SE,kU),e(kU,VAr),e(SE,XAr),e(ke,zAr),e(ke,RE),e(RE,OFe),e(OFe,QAr),e(RE,WAr),e(RE,SU),e(SU,HAr),e(RE,UAr),e(ke,JAr),e(ke,BE),e(BE,VFe),e(VFe,YAr),e(BE,KAr),e(BE,RU),e(RU,ZAr),e(BE,e0r),e(ke,o0r),e(ke,PE),e(PE,XFe),e(XFe,r0r),e(PE,t0r),e(PE,BU),e(BU,a0r),e(PE,n0r),e(ke,s0r),e(ke,IE),e(IE,zFe),e(zFe,l0r),e(IE,i0r),e(IE,PU),e(PU,d0r),e(IE,c0r),e(ke,f0r),e(ke,qE),e(qE,QFe),e(QFe,m0r),e(qE,g0r),e(qE,IU),e(IU,h0r),e(qE,p0r),e(ke,u0r),e(ke,NE),e(NE,WFe),e(WFe,_0r),e(NE,b0r),e(NE,qU),e(qU,v0r),e(NE,F0r),e(ke,T0r),e(ke,jE),e(jE,HFe),e(HFe,M0r),e(jE,E0r),e(jE,NU),e(NU,C0r),e(jE,w0r),e(jr,A0r),M(DE,jr,null),b(f,hPe,_),b(f,kc,_),e(kc,GE),e(GE,UFe),M($L,UFe,null),e(kc,y0r),e(kc,JFe),e(JFe,L0r),b(f,pPe,_),b(f,gr,_),M(kL,gr,null),e(gr,x0r),e(gr,Sc),e(Sc,$0r),e(Sc,jU),e(jU,k0r),e(Sc,S0r),e(Sc,DU),e(DU,R0r),e(Sc,B0r),e(gr,P0r),e(gr,SL),e(SL,I0r),e(SL,YFe),e(YFe,q0r),e(SL,N0r),e(gr,j0r),e(gr,Dt),M(RL,Dt,null),e(Dt,D0r),e(Dt,KFe),e(KFe,G0r),e(Dt,O0r),e(Dt,Rc),e(Rc,V0r),e(Rc,ZFe),e(ZFe,X0r),e(Rc,z0r),e(Rc,GU),e(GU,Q0r),e(Rc,W0r),e(Dt,H0r),M(OE,Dt,null),e(gr,U0r),e(gr,Dr),M(BL,Dr,null),e(Dr,J0r),e(Dr,e6e),e(e6e,Y0r),e(Dr,K0r),e(Dr,gn),e(gn,Z0r),e(gn,o6e),e(o6e,eyr),e(gn,oyr),e(gn,r6e),e(r6e,ryr),e(gn,tyr),e(gn,t6e),e(t6e,ayr),e(gn,nyr),e(Dr,syr),e(Dr,xe),e(xe,VE),e(VE,a6e),e(a6e,lyr),e(VE,iyr),e(VE,OU),e(OU,dyr),e(VE,cyr),e(xe,fyr),e(xe,XE),e(XE,n6e),e(n6e,myr),e(XE,gyr),e(XE,VU),e(VU,hyr),e(XE,pyr),e(xe,uyr),e(xe,zE),e(zE,s6e),e(s6e,_yr),e(zE,byr),e(zE,XU),e(XU,vyr),e(zE,Fyr),e(xe,Tyr),e(xe,QE),e(QE,l6e),e(l6e,Myr),e(QE,Eyr),e(QE,zU),e(zU,Cyr),e(QE,wyr),e(xe,Ayr),e(xe,WE),e(WE,i6e),e(i6e,yyr),e(WE,Lyr),e(WE,QU),e(QU,xyr),e(WE,$yr),e(xe,kyr),e(xe,HE),e(HE,d6e),e(d6e,Syr),e(HE,Ryr),e(HE,WU),e(WU,Byr),e(HE,Pyr),e(xe,Iyr),e(xe,UE),e(UE,c6e),e(c6e,qyr),e(UE,Nyr),e(UE,HU),e(HU,jyr),e(UE,Dyr),e(xe,Gyr),e(xe,JE),e(JE,f6e),e(f6e,Oyr),e(JE,Vyr),e(JE,UU),e(UU,Xyr),e(JE,zyr),e(xe,Qyr),e(xe,YE),e(YE,m6e),e(m6e,Wyr),e(YE,Hyr),e(YE,JU),e(JU,Uyr),e(YE,Jyr),e(xe,Yyr),e(xe,KE),e(KE,g6e),e(g6e,Kyr),e(KE,Zyr),e(KE,YU),e(YU,eLr),e(KE,oLr),e(Dr,rLr),M(ZE,Dr,null),b(f,uPe,_),b(f,Bc,_),e(Bc,e5),e(e5,h6e),M(PL,h6e,null),e(Bc,tLr),e(Bc,p6e),e(p6e,aLr),b(f,_Pe,_),b(f,hr,_),M(IL,hr,null),e(hr,nLr),e(hr,Pc),e(Pc,sLr),e(Pc,KU),e(KU,lLr),e(Pc,iLr),e(Pc,ZU),e(ZU,dLr),e(Pc,cLr),e(hr,fLr),e(hr,qL),e(qL,mLr),e(qL,u6e),e(u6e,gLr),e(qL,hLr),e(hr,pLr),e(hr,Gt),M(NL,Gt,null),e(Gt,uLr),e(Gt,_6e),e(_6e,_Lr),e(Gt,bLr),e(Gt,Ic),e(Ic,vLr),e(Ic,b6e),e(b6e,FLr),e(Ic,TLr),e(Ic,eJ),e(eJ,MLr),e(Ic,ELr),e(Gt,CLr),M(o5,Gt,null),e(hr,wLr),e(hr,Gr),M(jL,Gr,null),e(Gr,ALr),e(Gr,v6e),e(v6e,yLr),e(Gr,LLr),e(Gr,hn),e(hn,xLr),e(hn,F6e),e(F6e,$Lr),e(hn,kLr),e(hn,T6e),e(T6e,SLr),e(hn,RLr),e(hn,M6e),e(M6e,BLr),e(hn,PLr),e(Gr,ILr),e(Gr,$e),e($e,r5),e(r5,E6e),e(E6e,qLr),e(r5,NLr),e(r5,oJ),e(oJ,jLr),e(r5,DLr),e($e,GLr),e($e,t5),e(t5,C6e),e(C6e,OLr),e(t5,VLr),e(t5,rJ),e(rJ,XLr),e(t5,zLr),e($e,QLr),e($e,a5),e(a5,w6e),e(w6e,WLr),e(a5,HLr),e(a5,tJ),e(tJ,ULr),e(a5,JLr),e($e,YLr),e($e,n5),e(n5,A6e),e(A6e,KLr),e(n5,ZLr),e(n5,aJ),e(aJ,e8r),e(n5,o8r),e($e,r8r),e($e,s5),e(s5,y6e),e(y6e,t8r),e(s5,a8r),e(s5,nJ),e(nJ,n8r),e(s5,s8r),e($e,l8r),e($e,l5),e(l5,L6e),e(L6e,i8r),e(l5,d8r),e(l5,sJ),e(sJ,c8r),e(l5,f8r),e($e,m8r),e($e,i5),e(i5,x6e),e(x6e,g8r),e(i5,h8r),e(i5,lJ),e(lJ,p8r),e(i5,u8r),e($e,_8r),e($e,d5),e(d5,$6e),e($6e,b8r),e(d5,v8r),e(d5,iJ),e(iJ,F8r),e(d5,T8r),e($e,M8r),e($e,c5),e(c5,k6e),e(k6e,E8r),e(c5,C8r),e(c5,dJ),e(dJ,w8r),e(c5,A8r),e($e,y8r),e($e,f5),e(f5,S6e),e(S6e,L8r),e(f5,x8r),e(f5,cJ),e(cJ,$8r),e(f5,k8r),e(Gr,S8r),M(m5,Gr,null),b(f,bPe,_),b(f,qc,_),e(qc,g5),e(g5,R6e),M(DL,R6e,null),e(qc,R8r),e(qc,B6e),e(B6e,B8r),b(f,vPe,_),b(f,pr,_),M(GL,pr,null),e(pr,P8r),e(pr,Nc),e(Nc,I8r),e(Nc,fJ),e(fJ,q8r),e(Nc,N8r),e(Nc,mJ),e(mJ,j8r),e(Nc,D8r),e(pr,G8r),e(pr,OL),e(OL,O8r),e(OL,P6e),e(P6e,V8r),e(OL,X8r),e(pr,z8r),e(pr,Ot),M(VL,Ot,null),e(Ot,Q8r),e(Ot,I6e),e(I6e,W8r),e(Ot,H8r),e(Ot,jc),e(jc,U8r),e(jc,q6e),e(q6e,J8r),e(jc,Y8r),e(jc,gJ),e(gJ,K8r),e(jc,Z8r),e(Ot,exr),M(h5,Ot,null),e(pr,oxr),e(pr,Or),M(XL,Or,null),e(Or,rxr),e(Or,N6e),e(N6e,txr),e(Or,axr),e(Or,pn),e(pn,nxr),e(pn,j6e),e(j6e,sxr),e(pn,lxr),e(pn,D6e),e(D6e,ixr),e(pn,dxr),e(pn,G6e),e(G6e,cxr),e(pn,fxr),e(Or,mxr),e(Or,je),e(je,p5),e(p5,O6e),e(O6e,gxr),e(p5,hxr),e(p5,hJ),e(hJ,pxr),e(p5,uxr),e(je,_xr),e(je,u5),e(u5,V6e),e(V6e,bxr),e(u5,vxr),e(u5,pJ),e(pJ,Fxr),e(u5,Txr),e(je,Mxr),e(je,_5),e(_5,X6e),e(X6e,Exr),e(_5,Cxr),e(_5,uJ),e(uJ,wxr),e(_5,Axr),e(je,yxr),e(je,b5),e(b5,z6e),e(z6e,Lxr),e(b5,xxr),e(b5,_J),e(_J,$xr),e(b5,kxr),e(je,Sxr),e(je,v5),e(v5,Q6e),e(Q6e,Rxr),e(v5,Bxr),e(v5,bJ),e(bJ,Pxr),e(v5,Ixr),e(je,qxr),e(je,F5),e(F5,W6e),e(W6e,Nxr),e(F5,jxr),e(F5,vJ),e(vJ,Dxr),e(F5,Gxr),e(je,Oxr),e(je,T5),e(T5,H6e),e(H6e,Vxr),e(T5,Xxr),e(T5,FJ),e(FJ,zxr),e(T5,Qxr),e(je,Wxr),e(je,M5),e(M5,U6e),e(U6e,Hxr),e(M5,Uxr),e(M5,TJ),e(TJ,Jxr),e(M5,Yxr),e(Or,Kxr),M(E5,Or,null),b(f,FPe,_),b(f,Dc,_),e(Dc,C5),e(C5,J6e),M(zL,J6e,null),e(Dc,Zxr),e(Dc,Y6e),e(Y6e,e$r),b(f,TPe,_),b(f,ur,_),M(QL,ur,null),e(ur,o$r),e(ur,Gc),e(Gc,r$r),e(Gc,MJ),e(MJ,t$r),e(Gc,a$r),e(Gc,EJ),e(EJ,n$r),e(Gc,s$r),e(ur,l$r),e(ur,WL),e(WL,i$r),e(WL,K6e),e(K6e,d$r),e(WL,c$r),e(ur,f$r),e(ur,Vt),M(HL,Vt,null),e(Vt,m$r),e(Vt,Z6e),e(Z6e,g$r),e(Vt,h$r),e(Vt,Oc),e(Oc,p$r),e(Oc,eTe),e(eTe,u$r),e(Oc,_$r),e(Oc,CJ),e(CJ,b$r),e(Oc,v$r),e(Vt,F$r),M(w5,Vt,null),e(ur,T$r),e(ur,Vr),M(UL,Vr,null),e(Vr,M$r),e(Vr,oTe),e(oTe,E$r),e(Vr,C$r),e(Vr,un),e(un,w$r),e(un,rTe),e(rTe,A$r),e(un,y$r),e(un,tTe),e(tTe,L$r),e(un,x$r),e(un,aTe),e(aTe,$$r),e(un,k$r),e(Vr,S$r),e(Vr,De),e(De,A5),e(A5,nTe),e(nTe,R$r),e(A5,B$r),e(A5,wJ),e(wJ,P$r),e(A5,I$r),e(De,q$r),e(De,y5),e(y5,sTe),e(sTe,N$r),e(y5,j$r),e(y5,AJ),e(AJ,D$r),e(y5,G$r),e(De,O$r),e(De,L5),e(L5,lTe),e(lTe,V$r),e(L5,X$r),e(L5,yJ),e(yJ,z$r),e(L5,Q$r),e(De,W$r),e(De,x5),e(x5,iTe),e(iTe,H$r),e(x5,U$r),e(x5,LJ),e(LJ,J$r),e(x5,Y$r),e(De,K$r),e(De,$5),e($5,dTe),e(dTe,Z$r),e($5,ekr),e($5,xJ),e(xJ,okr),e($5,rkr),e(De,tkr),e(De,k5),e(k5,cTe),e(cTe,akr),e(k5,nkr),e(k5,$J),e($J,skr),e(k5,lkr),e(De,ikr),e(De,S5),e(S5,fTe),e(fTe,dkr),e(S5,ckr),e(S5,kJ),e(kJ,fkr),e(S5,mkr),e(De,gkr),e(De,R5),e(R5,mTe),e(mTe,hkr),e(R5,pkr),e(R5,SJ),e(SJ,ukr),e(R5,_kr),e(Vr,bkr),M(B5,Vr,null),b(f,MPe,_),b(f,Vc,_),e(Vc,P5),e(P5,gTe),M(JL,gTe,null),e(Vc,vkr),e(Vc,hTe),e(hTe,Fkr),b(f,EPe,_),b(f,_r,_),M(YL,_r,null),e(_r,Tkr),e(_r,Xc),e(Xc,Mkr),e(Xc,RJ),e(RJ,Ekr),e(Xc,Ckr),e(Xc,BJ),e(BJ,wkr),e(Xc,Akr),e(_r,ykr),e(_r,KL),e(KL,Lkr),e(KL,pTe),e(pTe,xkr),e(KL,$kr),e(_r,kkr),e(_r,Xt),M(ZL,Xt,null),e(Xt,Skr),e(Xt,uTe),e(uTe,Rkr),e(Xt,Bkr),e(Xt,zc),e(zc,Pkr),e(zc,_Te),e(_Te,Ikr),e(zc,qkr),e(zc,PJ),e(PJ,Nkr),e(zc,jkr),e(Xt,Dkr),M(I5,Xt,null),e(_r,Gkr),e(_r,Xr),M(e8,Xr,null),e(Xr,Okr),e(Xr,bTe),e(bTe,Vkr),e(Xr,Xkr),e(Xr,_n),e(_n,zkr),e(_n,vTe),e(vTe,Qkr),e(_n,Wkr),e(_n,FTe),e(FTe,Hkr),e(_n,Ukr),e(_n,TTe),e(TTe,Jkr),e(_n,Ykr),e(Xr,Kkr),e(Xr,MTe),e(MTe,q5),e(q5,ETe),e(ETe,Zkr),e(q5,eSr),e(q5,IJ),e(IJ,oSr),e(q5,rSr),e(Xr,tSr),M(N5,Xr,null),b(f,CPe,_),b(f,Qc,_),e(Qc,j5),e(j5,CTe),M(o8,CTe,null),e(Qc,aSr),e(Qc,wTe),e(wTe,nSr),b(f,wPe,_),b(f,br,_),M(r8,br,null),e(br,sSr),e(br,Wc),e(Wc,lSr),e(Wc,qJ),e(qJ,iSr),e(Wc,dSr),e(Wc,NJ),e(NJ,cSr),e(Wc,fSr),e(br,mSr),e(br,t8),e(t8,gSr),e(t8,ATe),e(ATe,hSr),e(t8,pSr),e(br,uSr),e(br,zt),M(a8,zt,null),e(zt,_Sr),e(zt,yTe),e(yTe,bSr),e(zt,vSr),e(zt,Hc),e(Hc,FSr),e(Hc,LTe),e(LTe,TSr),e(Hc,MSr),e(Hc,jJ),e(jJ,ESr),e(Hc,CSr),e(zt,wSr),M(D5,zt,null),e(br,ASr),e(br,zr),M(n8,zr,null),e(zr,ySr),e(zr,xTe),e(xTe,LSr),e(zr,xSr),e(zr,bn),e(bn,$Sr),e(bn,$Te),e($Te,kSr),e(bn,SSr),e(bn,kTe),e(kTe,RSr),e(bn,BSr),e(bn,STe),e(STe,PSr),e(bn,ISr),e(zr,qSr),e(zr,s8),e(s8,G5),e(G5,RTe),e(RTe,NSr),e(G5,jSr),e(G5,DJ),e(DJ,DSr),e(G5,GSr),e(s8,OSr),e(s8,O5),e(O5,BTe),e(BTe,VSr),e(O5,XSr),e(O5,GJ),e(GJ,zSr),e(O5,QSr),e(zr,WSr),M(V5,zr,null),b(f,APe,_),b(f,Uc,_),e(Uc,X5),e(X5,PTe),M(l8,PTe,null),e(Uc,HSr),e(Uc,ITe),e(ITe,USr),b(f,yPe,_),b(f,vr,_),M(i8,vr,null),e(vr,JSr),e(vr,Jc),e(Jc,YSr),e(Jc,OJ),e(OJ,KSr),e(Jc,ZSr),e(Jc,VJ),e(VJ,eRr),e(Jc,oRr),e(vr,rRr),e(vr,d8),e(d8,tRr),e(d8,qTe),e(qTe,aRr),e(d8,nRr),e(vr,sRr),e(vr,Qt),M(c8,Qt,null),e(Qt,lRr),e(Qt,NTe),e(NTe,iRr),e(Qt,dRr),e(Qt,Yc),e(Yc,cRr),e(Yc,jTe),e(jTe,fRr),e(Yc,mRr),e(Yc,XJ),e(XJ,gRr),e(Yc,hRr),e(Qt,pRr),M(z5,Qt,null),e(vr,uRr),e(vr,Qr),M(f8,Qr,null),e(Qr,_Rr),e(Qr,DTe),e(DTe,bRr),e(Qr,vRr),e(Qr,vn),e(vn,FRr),e(vn,GTe),e(GTe,TRr),e(vn,MRr),e(vn,OTe),e(OTe,ERr),e(vn,CRr),e(vn,VTe),e(VTe,wRr),e(vn,ARr),e(Qr,yRr),e(Qr,XTe),e(XTe,Q5),e(Q5,zTe),e(zTe,LRr),e(Q5,xRr),e(Q5,zJ),e(zJ,$Rr),e(Q5,kRr),e(Qr,SRr),M(W5,Qr,null),LPe=!0},p(f,[_]){const m8={};_&2&&(m8.$$scope={dirty:_,ctx:f}),sf.$set(m8);const QTe={};_&2&&(QTe.$$scope={dirty:_,ctx:f}),tg.$set(QTe);const WTe={};_&2&&(WTe.$$scope={dirty:_,ctx:f}),Pg.$set(WTe);const HTe={};_&2&&(HTe.$$scope={dirty:_,ctx:f}),lh.$set(HTe);const g8={};_&2&&(g8.$$scope={dirty:_,ctx:f}),ih.$set(g8);const UTe={};_&2&&(UTe.$$scope={dirty:_,ctx:f}),wh.$set(UTe);const Fn={};_&2&&(Fn.$$scope={dirty:_,ctx:f}),Ah.$set(Fn);const JTe={};_&2&&(JTe.$$scope={dirty:_,ctx:f}),xh.$set(JTe);const YTe={};_&2&&(YTe.$$scope={dirty:_,ctx:f}),uu.$set(YTe);const KTe={};_&2&&(KTe.$$scope={dirty:_,ctx:f}),bu.$set(KTe);const h8={};_&2&&(h8.$$scope={dirty:_,ctx:f}),n_.$set(h8);const ZTe={};_&2&&(ZTe.$$scope={dirty:_,ctx:f}),l_.$set(ZTe);const p8={};_&2&&(p8.$$scope={dirty:_,ctx:f}),X_.$set(p8);const e7e={};_&2&&(e7e.$$scope={dirty:_,ctx:f}),Q_.$set(e7e);const u8={};_&2&&(u8.$$scope={dirty:_,ctx:f}),x1.$set(u8);const o7e={};_&2&&(o7e.$$scope={dirty:_,ctx:f}),k1.$set(o7e);const r7e={};_&2&&(r7e.$$scope={dirty:_,ctx:f}),J1.$set(r7e);const t7e={};_&2&&(t7e.$$scope={dirty:_,ctx:f}),K1.$set(t7e);const Kc={};_&2&&(Kc.$$scope={dirty:_,ctx:f}),Wb.$set(Kc);const a7e={};_&2&&(a7e.$$scope={dirty:_,ctx:f}),Ub.$set(a7e);const n7e={};_&2&&(n7e.$$scope={dirty:_,ctx:f}),w4.$set(n7e);const s7e={};_&2&&(s7e.$$scope={dirty:_,ctx:f}),y4.$set(s7e);const _8={};_&2&&(_8.$$scope={dirty:_,ctx:f}),B4.$set(_8);const l7e={};_&2&&(l7e.$$scope={dirty:_,ctx:f}),I4.$set(l7e);const i7e={};_&2&&(i7e.$$scope={dirty:_,ctx:f}),_2.$set(i7e);const d7e={};_&2&&(d7e.$$scope={dirty:_,ctx:f}),v2.$set(d7e);const Ur={};_&2&&(Ur.$$scope={dirty:_,ctx:f}),sv.$set(Ur);const b8={};_&2&&(b8.$$scope={dirty:_,ctx:f}),iv.$set(b8);const c7e={};_&2&&(c7e.$$scope={dirty:_,ctx:f}),fv.$set(c7e);const v8={};_&2&&(v8.$$scope={dirty:_,ctx:f}),gv.$set(v8);const f7e={};_&2&&(f7e.$$scope={dirty:_,ctx:f}),Av.$set(f7e);const Jr={};_&2&&(Jr.$$scope={dirty:_,ctx:f}),Lv.$set(Jr);const m7e={};_&2&&(m7e.$$scope={dirty:_,ctx:f}),kv.$set(m7e);const Zc={};_&2&&(Zc.$$scope={dirty:_,ctx:f}),Rv.$set(Zc);const g7e={};_&2&&(g7e.$$scope={dirty:_,ctx:f}),Vv.$set(g7e);const h7e={};_&2&&(h7e.$$scope={dirty:_,ctx:f}),zv.$set(h7e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),Yv.$set(L);const H5={};_&2&&(H5.$$scope={dirty:_,ctx:f}),Zv.$set(H5);const p7e={};_&2&&(p7e.$$scope={dirty:_,ctx:f}),dF.$set(p7e);const u7e={};_&2&&(u7e.$$scope={dirty:_,ctx:f}),fF.$set(u7e);const U5={};_&2&&(U5.$$scope={dirty:_,ctx:f}),pF.$set(U5);const _7e={};_&2&&(_7e.$$scope={dirty:_,ctx:f}),_F.$set(_7e);const b7e={};_&2&&(b7e.$$scope={dirty:_,ctx:f}),EF.$set(b7e);const J5={};_&2&&(J5.$$scope={dirty:_,ctx:f}),wF.$set(J5);const v7e={};_&2&&(v7e.$$scope={dirty:_,ctx:f}),$F.$set(v7e);const F7e={};_&2&&(F7e.$$scope={dirty:_,ctx:f}),SF.$set(F7e);const Y5={};_&2&&(Y5.$$scope={dirty:_,ctx:f}),PF.$set(Y5);const T7e={};_&2&&(T7e.$$scope={dirty:_,ctx:f}),qF.$set(T7e);const M7e={};_&2&&(M7e.$$scope={dirty:_,ctx:f}),DF.$set(M7e);const K5={};_&2&&(K5.$$scope={dirty:_,ctx:f}),OF.$set(K5);const E7e={};_&2&&(E7e.$$scope={dirty:_,ctx:f}),HF.$set(E7e);const C7e={};_&2&&(C7e.$$scope={dirty:_,ctx:f}),JF.$set(C7e);const Z5={};_&2&&(Z5.$$scope={dirty:_,ctx:f}),ZF.$set(Z5);const w7e={};_&2&&(w7e.$$scope={dirty:_,ctx:f}),o6.$set(w7e);const A7e={};_&2&&(A7e.$$scope={dirty:_,ctx:f}),z6.$set(A7e);const eC={};_&2&&(eC.$$scope={dirty:_,ctx:f}),W6.$set(eC);const y7e={};_&2&&(y7e.$$scope={dirty:_,ctx:f}),_T.$set(y7e);const L7e={};_&2&&(L7e.$$scope={dirty:_,ctx:f}),vT.$set(L7e);const oC={};_&2&&(oC.$$scope={dirty:_,ctx:f}),ST.$set(oC);const x7e={};_&2&&(x7e.$$scope={dirty:_,ctx:f}),BT.$set(x7e);const $7e={};_&2&&($7e.$$scope={dirty:_,ctx:f}),qT.$set($7e);const rC={};_&2&&(rC.$$scope={dirty:_,ctx:f}),jT.$set(rC);const k7e={};_&2&&(k7e.$$scope={dirty:_,ctx:f}),s7.$set(k7e);const S7e={};_&2&&(S7e.$$scope={dirty:_,ctx:f}),i7.$set(S7e);const tC={};_&2&&(tC.$$scope={dirty:_,ctx:f}),v7.$set(tC);const R7e={};_&2&&(R7e.$$scope={dirty:_,ctx:f}),T7.$set(R7e);const B7e={};_&2&&(B7e.$$scope={dirty:_,ctx:f}),H7.$set(B7e);const aC={};_&2&&(aC.$$scope={dirty:_,ctx:f}),J7.$set(aC);const P7e={};_&2&&(P7e.$$scope={dirty:_,ctx:f}),h9.$set(P7e);const I7e={};_&2&&(I7e.$$scope={dirty:_,ctx:f}),u9.$set(I7e);const nC={};_&2&&(nC.$$scope={dirty:_,ctx:f}),b9.$set(nC);const q7e={};_&2&&(q7e.$$scope={dirty:_,ctx:f}),F9.$set(q7e);const N7e={};_&2&&(N7e.$$scope={dirty:_,ctx:f}),G9.$set(N7e);const sC={};_&2&&(sC.$$scope={dirty:_,ctx:f}),V9.$set(sC);const j7e={};_&2&&(j7e.$$scope={dirty:_,ctx:f}),cM.$set(j7e);const D7e={};_&2&&(D7e.$$scope={dirty:_,ctx:f}),mM.$set(D7e);const lC={};_&2&&(lC.$$scope={dirty:_,ctx:f}),hM.$set(lC);const G7e={};_&2&&(G7e.$$scope={dirty:_,ctx:f}),uM.$set(G7e);const O7e={};_&2&&(O7e.$$scope={dirty:_,ctx:f}),bM.$set(O7e);const iC={};_&2&&(iC.$$scope={dirty:_,ctx:f}),FM.$set(iC);const V7e={};_&2&&(V7e.$$scope={dirty:_,ctx:f}),QM.$set(V7e);const X7e={};_&2&&(X7e.$$scope={dirty:_,ctx:f}),HM.$set(X7e);const dC={};_&2&&(dC.$$scope={dirty:_,ctx:f}),eE.$set(dC);const z7e={};_&2&&(z7e.$$scope={dirty:_,ctx:f}),rE.$set(z7e);const Q7e={};_&2&&(Q7e.$$scope={dirty:_,ctx:f}),pE.$set(Q7e);const cC={};_&2&&(cC.$$scope={dirty:_,ctx:f}),_E.$set(cC);const W7e={};_&2&&(W7e.$$scope={dirty:_,ctx:f}),LE.$set(W7e);const H7e={};_&2&&(H7e.$$scope={dirty:_,ctx:f}),$E.$set(H7e);const fC={};_&2&&(fC.$$scope={dirty:_,ctx:f}),DE.$set(fC);const U7e={};_&2&&(U7e.$$scope={dirty:_,ctx:f}),OE.$set(U7e);const J7e={};_&2&&(J7e.$$scope={dirty:_,ctx:f}),ZE.$set(J7e);const mC={};_&2&&(mC.$$scope={dirty:_,ctx:f}),o5.$set(mC);const Y7e={};_&2&&(Y7e.$$scope={dirty:_,ctx:f}),m5.$set(Y7e);const K7e={};_&2&&(K7e.$$scope={dirty:_,ctx:f}),h5.$set(K7e);const gC={};_&2&&(gC.$$scope={dirty:_,ctx:f}),E5.$set(gC);const Z7e={};_&2&&(Z7e.$$scope={dirty:_,ctx:f}),w5.$set(Z7e);const e9e={};_&2&&(e9e.$$scope={dirty:_,ctx:f}),B5.$set(e9e);const hC={};_&2&&(hC.$$scope={dirty:_,ctx:f}),I5.$set(hC);const o9e={};_&2&&(o9e.$$scope={dirty:_,ctx:f}),N5.$set(o9e);const r9e={};_&2&&(r9e.$$scope={dirty:_,ctx:f}),D5.$set(r9e);const pC={};_&2&&(pC.$$scope={dirty:_,ctx:f}),V5.$set(pC);const t9e={};_&2&&(t9e.$$scope={dirty:_,ctx:f}),z5.$set(t9e);const a9e={};_&2&&(a9e.$$scope={dirty:_,ctx:f}),W5.$set(a9e)},i(f){LPe||(E(d.$$.fragment,f),E(ba.$$.fragment,f),E(gw.$$.fragment,f),E(hw.$$.fragment,f),E(sf.$$.fragment,f),E(pw.$$.fragment,f),E(uw.$$.fragment,f),E(vw.$$.fragment,f),E(tg.$$.fragment,f),E(Fw.$$.fragment,f),E(Tw.$$.fragment,f),E(Mw.$$.fragment,f),E(ww.$$.fragment,f),E(Pg.$$.fragment,f),E(Aw.$$.fragment,f),E(yw.$$.fragment,f),E(Lw.$$.fragment,f),E(kw.$$.fragment,f),E(lh.$$.fragment,f),E(ih.$$.fragment,f),E(Sw.$$.fragment,f),E(Rw.$$.fragment,f),E(Bw.$$.fragment,f),E(qw.$$.fragment,f),E(wh.$$.fragment,f),E(Ah.$$.fragment,f),E(Nw.$$.fragment,f),E(jw.$$.fragment,f),E(Dw.$$.fragment,f),E(Ow.$$.fragment,f),E(xh.$$.fragment,f),E(Vw.$$.fragment,f),E(uu.$$.fragment,f),E(Xw.$$.fragment,f),E(zw.$$.fragment,f),E(Ww.$$.fragment,f),E(bu.$$.fragment,f),E(Hw.$$.fragment,f),E(n_.$$.fragment,f),E(Uw.$$.fragment,f),E(Jw.$$.fragment,f),E(Kw.$$.fragment,f),E(l_.$$.fragment,f),E(Zw.$$.fragment,f),E(X_.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(tA.$$.fragment,f),E(Q_.$$.fragment,f),E(aA.$$.fragment,f),E(x1.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(iA.$$.fragment,f),E(k1.$$.fragment,f),E(dA.$$.fragment,f),E(J1.$$.fragment,f),E(cA.$$.fragment,f),E(fA.$$.fragment,f),E(gA.$$.fragment,f),E(K1.$$.fragment,f),E(hA.$$.fragment,f),E(Wb.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(bA.$$.fragment,f),E(Ub.$$.fragment,f),E(vA.$$.fragment,f),E(w4.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(EA.$$.fragment,f),E(y4.$$.fragment,f),E(CA.$$.fragment,f),E(B4.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(LA.$$.fragment,f),E(I4.$$.fragment,f),E(xA.$$.fragment,f),E(_2.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(RA.$$.fragment,f),E(v2.$$.fragment,f),E(BA.$$.fragment,f),E(sv.$$.fragment,f),E(PA.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(iv.$$.fragment,f),E(jA.$$.fragment,f),E(fv.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(VA.$$.fragment,f),E(gv.$$.fragment,f),E(XA.$$.fragment,f),E(Av.$$.fragment,f),E(zA.$$.fragment,f),E(QA.$$.fragment,f),E(HA.$$.fragment,f),E(Lv.$$.fragment,f),E(UA.$$.fragment,f),E(kv.$$.fragment,f),E(JA.$$.fragment,f),E(YA.$$.fragment,f),E(ZA.$$.fragment,f),E(Rv.$$.fragment,f),E(e0.$$.fragment,f),E(Vv.$$.fragment,f),E(o0.$$.fragment,f),E(r0.$$.fragment,f),E(a0.$$.fragment,f),E(zv.$$.fragment,f),E(n0.$$.fragment,f),E(Yv.$$.fragment,f),E(s0.$$.fragment,f),E(l0.$$.fragment,f),E(d0.$$.fragment,f),E(Zv.$$.fragment,f),E(c0.$$.fragment,f),E(dF.$$.fragment,f),E(f0.$$.fragment,f),E(m0.$$.fragment,f),E(h0.$$.fragment,f),E(fF.$$.fragment,f),E(p0.$$.fragment,f),E(pF.$$.fragment,f),E(_0.$$.fragment,f),E(b0.$$.fragment,f),E(F0.$$.fragment,f),E(_F.$$.fragment,f),E(T0.$$.fragment,f),E(EF.$$.fragment,f),E(M0.$$.fragment,f),E(E0.$$.fragment,f),E(w0.$$.fragment,f),E(wF.$$.fragment,f),E(A0.$$.fragment,f),E($F.$$.fragment,f),E(y0.$$.fragment,f),E(L0.$$.fragment,f),E($0.$$.fragment,f),E(SF.$$.fragment,f),E(k0.$$.fragment,f),E(PF.$$.fragment,f),E(S0.$$.fragment,f),E(R0.$$.fragment,f),E(P0.$$.fragment,f),E(qF.$$.fragment,f),E(I0.$$.fragment,f),E(DF.$$.fragment,f),E(q0.$$.fragment,f),E(N0.$$.fragment,f),E(D0.$$.fragment,f),E(OF.$$.fragment,f),E(G0.$$.fragment,f),E(HF.$$.fragment,f),E(O0.$$.fragment,f),E(V0.$$.fragment,f),E(z0.$$.fragment,f),E(JF.$$.fragment,f),E(Q0.$$.fragment,f),E(ZF.$$.fragment,f),E(W0.$$.fragment,f),E(H0.$$.fragment,f),E(J0.$$.fragment,f),E(o6.$$.fragment,f),E(Y0.$$.fragment,f),E(z6.$$.fragment,f),E(K0.$$.fragment,f),E(Z0.$$.fragment,f),E(oy.$$.fragment,f),E(W6.$$.fragment,f),E(ry.$$.fragment,f),E(_T.$$.fragment,f),E(ty.$$.fragment,f),E(ay.$$.fragment,f),E(sy.$$.fragment,f),E(vT.$$.fragment,f),E(ly.$$.fragment,f),E(ST.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(BT.$$.fragment,f),E(my.$$.fragment,f),E(qT.$$.fragment,f),E(hy.$$.fragment,f),E(py.$$.fragment,f),E(_y.$$.fragment,f),E(jT.$$.fragment,f),E(by.$$.fragment,f),E(s7.$$.fragment,f),E(vy.$$.fragment,f),E(Fy.$$.fragment,f),E(My.$$.fragment,f),E(i7.$$.fragment,f),E(Ey.$$.fragment,f),E(v7.$$.fragment,f),E(Cy.$$.fragment,f),E(wy.$$.fragment,f),E(yy.$$.fragment,f),E(T7.$$.fragment,f),E(Ly.$$.fragment,f),E(H7.$$.fragment,f),E(xy.$$.fragment,f),E($y.$$.fragment,f),E(Sy.$$.fragment,f),E(J7.$$.fragment,f),E(Ry.$$.fragment,f),E(h9.$$.fragment,f),E(By.$$.fragment,f),E(Py.$$.fragment,f),E(qy.$$.fragment,f),E(u9.$$.fragment,f),E(Ny.$$.fragment,f),E(b9.$$.fragment,f),E(jy.$$.fragment,f),E(Dy.$$.fragment,f),E(Oy.$$.fragment,f),E(F9.$$.fragment,f),E(Vy.$$.fragment,f),E(G9.$$.fragment,f),E(Xy.$$.fragment,f),E(zy.$$.fragment,f),E(Wy.$$.fragment,f),E(V9.$$.fragment,f),E(Hy.$$.fragment,f),E(cM.$$.fragment,f),E(Uy.$$.fragment,f),E(Jy.$$.fragment,f),E(Ky.$$.fragment,f),E(mM.$$.fragment,f),E(Zy.$$.fragment,f),E(hM.$$.fragment,f),E(eL.$$.fragment,f),E(oL.$$.fragment,f),E(tL.$$.fragment,f),E(uM.$$.fragment,f),E(aL.$$.fragment,f),E(bM.$$.fragment,f),E(nL.$$.fragment,f),E(sL.$$.fragment,f),E(iL.$$.fragment,f),E(FM.$$.fragment,f),E(dL.$$.fragment,f),E(QM.$$.fragment,f),E(cL.$$.fragment,f),E(fL.$$.fragment,f),E(gL.$$.fragment,f),E(HM.$$.fragment,f),E(hL.$$.fragment,f),E(eE.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(rE.$$.fragment,f),E(vL.$$.fragment,f),E(pE.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(_E.$$.fragment,f),E(CL.$$.fragment,f),E(LE.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E($E.$$.fragment,f),E(xL.$$.fragment,f),E(DE.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(OE.$$.fragment,f),E(BL.$$.fragment,f),E(ZE.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(o5.$$.fragment,f),E(jL.$$.fragment,f),E(m5.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(h5.$$.fragment,f),E(XL.$$.fragment,f),E(E5.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(w5.$$.fragment,f),E(UL.$$.fragment,f),E(B5.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(I5.$$.fragment,f),E(e8.$$.fragment,f),E(N5.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(D5.$$.fragment,f),E(n8.$$.fragment,f),E(V5.$$.fragment,f),E(l8.$$.fragment,f),E(i8.$$.fragment,f),E(c8.$$.fragment,f),E(z5.$$.fragment,f),E(f8.$$.fragment,f),E(W5.$$.fragment,f),LPe=!0)},o(f){C(d.$$.fragment,f),C(ba.$$.fragment,f),C(gw.$$.fragment,f),C(hw.$$.fragment,f),C(sf.$$.fragment,f),C(pw.$$.fragment,f),C(uw.$$.fragment,f),C(vw.$$.fragment,f),C(tg.$$.fragment,f),C(Fw.$$.fragment,f),C(Tw.$$.fragment,f),C(Mw.$$.fragment,f),C(ww.$$.fragment,f),C(Pg.$$.fragment,f),C(Aw.$$.fragment,f),C(yw.$$.fragment,f),C(Lw.$$.fragment,f),C(kw.$$.fragment,f),C(lh.$$.fragment,f),C(ih.$$.fragment,f),C(Sw.$$.fragment,f),C(Rw.$$.fragment,f),C(Bw.$$.fragment,f),C(qw.$$.fragment,f),C(wh.$$.fragment,f),C(Ah.$$.fragment,f),C(Nw.$$.fragment,f),C(jw.$$.fragment,f),C(Dw.$$.fragment,f),C(Ow.$$.fragment,f),C(xh.$$.fragment,f),C(Vw.$$.fragment,f),C(uu.$$.fragment,f),C(Xw.$$.fragment,f),C(zw.$$.fragment,f),C(Ww.$$.fragment,f),C(bu.$$.fragment,f),C(Hw.$$.fragment,f),C(n_.$$.fragment,f),C(Uw.$$.fragment,f),C(Jw.$$.fragment,f),C(Kw.$$.fragment,f),C(l_.$$.fragment,f),C(Zw.$$.fragment,f),C(X_.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(tA.$$.fragment,f),C(Q_.$$.fragment,f),C(aA.$$.fragment,f),C(x1.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(iA.$$.fragment,f),C(k1.$$.fragment,f),C(dA.$$.fragment,f),C(J1.$$.fragment,f),C(cA.$$.fragment,f),C(fA.$$.fragment,f),C(gA.$$.fragment,f),C(K1.$$.fragment,f),C(hA.$$.fragment,f),C(Wb.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(bA.$$.fragment,f),C(Ub.$$.fragment,f),C(vA.$$.fragment,f),C(w4.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(EA.$$.fragment,f),C(y4.$$.fragment,f),C(CA.$$.fragment,f),C(B4.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(LA.$$.fragment,f),C(I4.$$.fragment,f),C(xA.$$.fragment,f),C(_2.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(RA.$$.fragment,f),C(v2.$$.fragment,f),C(BA.$$.fragment,f),C(sv.$$.fragment,f),C(PA.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(iv.$$.fragment,f),C(jA.$$.fragment,f),C(fv.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(VA.$$.fragment,f),C(gv.$$.fragment,f),C(XA.$$.fragment,f),C(Av.$$.fragment,f),C(zA.$$.fragment,f),C(QA.$$.fragment,f),C(HA.$$.fragment,f),C(Lv.$$.fragment,f),C(UA.$$.fragment,f),C(kv.$$.fragment,f),C(JA.$$.fragment,f),C(YA.$$.fragment,f),C(ZA.$$.fragment,f),C(Rv.$$.fragment,f),C(e0.$$.fragment,f),C(Vv.$$.fragment,f),C(o0.$$.fragment,f),C(r0.$$.fragment,f),C(a0.$$.fragment,f),C(zv.$$.fragment,f),C(n0.$$.fragment,f),C(Yv.$$.fragment,f),C(s0.$$.fragment,f),C(l0.$$.fragment,f),C(d0.$$.fragment,f),C(Zv.$$.fragment,f),C(c0.$$.fragment,f),C(dF.$$.fragment,f),C(f0.$$.fragment,f),C(m0.$$.fragment,f),C(h0.$$.fragment,f),C(fF.$$.fragment,f),C(p0.$$.fragment,f),C(pF.$$.fragment,f),C(_0.$$.fragment,f),C(b0.$$.fragment,f),C(F0.$$.fragment,f),C(_F.$$.fragment,f),C(T0.$$.fragment,f),C(EF.$$.fragment,f),C(M0.$$.fragment,f),C(E0.$$.fragment,f),C(w0.$$.fragment,f),C(wF.$$.fragment,f),C(A0.$$.fragment,f),C($F.$$.fragment,f),C(y0.$$.fragment,f),C(L0.$$.fragment,f),C($0.$$.fragment,f),C(SF.$$.fragment,f),C(k0.$$.fragment,f),C(PF.$$.fragment,f),C(S0.$$.fragment,f),C(R0.$$.fragment,f),C(P0.$$.fragment,f),C(qF.$$.fragment,f),C(I0.$$.fragment,f),C(DF.$$.fragment,f),C(q0.$$.fragment,f),C(N0.$$.fragment,f),C(D0.$$.fragment,f),C(OF.$$.fragment,f),C(G0.$$.fragment,f),C(HF.$$.fragment,f),C(O0.$$.fragment,f),C(V0.$$.fragment,f),C(z0.$$.fragment,f),C(JF.$$.fragment,f),C(Q0.$$.fragment,f),C(ZF.$$.fragment,f),C(W0.$$.fragment,f),C(H0.$$.fragment,f),C(J0.$$.fragment,f),C(o6.$$.fragment,f),C(Y0.$$.fragment,f),C(z6.$$.fragment,f),C(K0.$$.fragment,f),C(Z0.$$.fragment,f),C(oy.$$.fragment,f),C(W6.$$.fragment,f),C(ry.$$.fragment,f),C(_T.$$.fragment,f),C(ty.$$.fragment,f),C(ay.$$.fragment,f),C(sy.$$.fragment,f),C(vT.$$.fragment,f),C(ly.$$.fragment,f),C(ST.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(BT.$$.fragment,f),C(my.$$.fragment,f),C(qT.$$.fragment,f),C(hy.$$.fragment,f),C(py.$$.fragment,f),C(_y.$$.fragment,f),C(jT.$$.fragment,f),C(by.$$.fragment,f),C(s7.$$.fragment,f),C(vy.$$.fragment,f),C(Fy.$$.fragment,f),C(My.$$.fragment,f),C(i7.$$.fragment,f),C(Ey.$$.fragment,f),C(v7.$$.fragment,f),C(Cy.$$.fragment,f),C(wy.$$.fragment,f),C(yy.$$.fragment,f),C(T7.$$.fragment,f),C(Ly.$$.fragment,f),C(H7.$$.fragment,f),C(xy.$$.fragment,f),C($y.$$.fragment,f),C(Sy.$$.fragment,f),C(J7.$$.fragment,f),C(Ry.$$.fragment,f),C(h9.$$.fragment,f),C(By.$$.fragment,f),C(Py.$$.fragment,f),C(qy.$$.fragment,f),C(u9.$$.fragment,f),C(Ny.$$.fragment,f),C(b9.$$.fragment,f),C(jy.$$.fragment,f),C(Dy.$$.fragment,f),C(Oy.$$.fragment,f),C(F9.$$.fragment,f),C(Vy.$$.fragment,f),C(G9.$$.fragment,f),C(Xy.$$.fragment,f),C(zy.$$.fragment,f),C(Wy.$$.fragment,f),C(V9.$$.fragment,f),C(Hy.$$.fragment,f),C(cM.$$.fragment,f),C(Uy.$$.fragment,f),C(Jy.$$.fragment,f),C(Ky.$$.fragment,f),C(mM.$$.fragment,f),C(Zy.$$.fragment,f),C(hM.$$.fragment,f),C(eL.$$.fragment,f),C(oL.$$.fragment,f),C(tL.$$.fragment,f),C(uM.$$.fragment,f),C(aL.$$.fragment,f),C(bM.$$.fragment,f),C(nL.$$.fragment,f),C(sL.$$.fragment,f),C(iL.$$.fragment,f),C(FM.$$.fragment,f),C(dL.$$.fragment,f),C(QM.$$.fragment,f),C(cL.$$.fragment,f),C(fL.$$.fragment,f),C(gL.$$.fragment,f),C(HM.$$.fragment,f),C(hL.$$.fragment,f),C(eE.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(rE.$$.fragment,f),C(vL.$$.fragment,f),C(pE.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(_E.$$.fragment,f),C(CL.$$.fragment,f),C(LE.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C($E.$$.fragment,f),C(xL.$$.fragment,f),C(DE.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(OE.$$.fragment,f),C(BL.$$.fragment,f),C(ZE.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(o5.$$.fragment,f),C(jL.$$.fragment,f),C(m5.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(h5.$$.fragment,f),C(XL.$$.fragment,f),C(E5.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(w5.$$.fragment,f),C(UL.$$.fragment,f),C(B5.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(I5.$$.fragment,f),C(e8.$$.fragment,f),C(N5.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(D5.$$.fragment,f),C(n8.$$.fragment,f),C(V5.$$.fragment,f),C(l8.$$.fragment,f),C(i8.$$.fragment,f),C(c8.$$.fragment,f),C(z5.$$.fragment,f),C(f8.$$.fragment,f),C(W5.$$.fragment,f),LPe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(of),f&&t(Yr),f&&t(Ie),f&&t(Oe),f&&t(tf),w(ba,f),f&&t(Ve),f&&t(Ae),f&&t(To),f&&t(va),f&&t(yRe),f&&t(ii),w(gw),f&&t(LRe),f&&t(wn),f&&t(xRe),w(hw,f),f&&t($Re),f&&t(xx),f&&t(kRe),w(sf,f),f&&t(SRe),f&&t(di),w(pw),f&&t(RRe),f&&t(Mo),w(uw),w(vw),w(tg),w(Fw),f&&t(BRe),f&&t(fi),w(Tw),f&&t(PRe),f&&t(Eo),w(Mw),w(ww),w(Pg),w(Aw),f&&t(IRe),f&&t(mi),w(yw),f&&t(qRe),f&&t(Co),w(Lw),w(kw),w(lh),w(ih),w(Sw),f&&t(NRe),f&&t(gi),w(Rw),f&&t(jRe),f&&t(wo),w(Bw),w(qw),w(wh),w(Ah),w(Nw),f&&t(DRe),f&&t(pi),w(jw),f&&t(GRe),f&&t(Ao),w(Dw),w(Ow),w(xh),w(Vw),w(uu),f&&t(ORe),f&&t(bi),w(Xw),f&&t(VRe),f&&t(yo),w(zw),w(Ww),w(bu),w(Hw),w(n_),f&&t(XRe),f&&t(Ti),w(Uw),f&&t(zRe),f&&t(Lo),w(Jw),w(Kw),w(l_),w(Zw),w(X_),f&&t(QRe),f&&t(Ci),w(eA),f&&t(WRe),f&&t(xo),w(oA),w(tA),w(Q_),w(aA),w(x1),f&&t(HRe),f&&t(yi),w(nA),f&&t(URe),f&&t($o),w(sA),w(iA),w(k1),w(dA),w(J1),f&&t(JRe),f&&t($i),w(cA),f&&t(YRe),f&&t(ko),w(fA),w(gA),w(K1),w(hA),w(Wb),f&&t(KRe),f&&t(Ri),w(pA),f&&t(ZRe),f&&t(So),w(uA),w(bA),w(Ub),w(vA),w(w4),f&&t(eBe),f&&t(Ii),w(FA),f&&t(oBe),f&&t(Ro),w(TA),w(EA),w(y4),w(CA),w(B4),f&&t(rBe),f&&t(ji),w(wA),f&&t(tBe),f&&t(Bo),w(AA),w(LA),w(I4),w(xA),w(_2),f&&t(aBe),f&&t(Oi),w($A),f&&t(nBe),f&&t(Po),w(kA),w(RA),w(v2),w(BA),w(sv),f&&t(sBe),f&&t(zi),w(PA),f&&t(lBe),f&&t(Io),w(IA),w(NA),w(iv),w(jA),w(fv),f&&t(iBe),f&&t(Hi),w(DA),f&&t(dBe),f&&t(qo),w(GA),w(VA),w(gv),w(XA),w(Av),f&&t(cBe),f&&t(Yi),w(zA),f&&t(fBe),f&&t(No),w(QA),w(HA),w(Lv),w(UA),w(kv),f&&t(mBe),f&&t(ed),w(JA),f&&t(gBe),f&&t(jo),w(YA),w(ZA),w(Rv),w(e0),w(Vv),f&&t(hBe),f&&t(td),w(o0),f&&t(pBe),f&&t(Do),w(r0),w(a0),w(zv),w(n0),w(Yv),f&&t(uBe),f&&t(sd),w(s0),f&&t(_Be),f&&t(Go),w(l0),w(d0),w(Zv),w(c0),w(dF),f&&t(bBe),f&&t(dd),w(f0),f&&t(vBe),f&&t(Oo),w(m0),w(h0),w(fF),w(p0),w(pF),f&&t(FBe),f&&t(md),w(_0),f&&t(TBe),f&&t(Vo),w(b0),w(F0),w(_F),w(T0),w(EF),f&&t(MBe),f&&t(pd),w(M0),f&&t(EBe),f&&t(Xo),w(E0),w(w0),w(wF),w(A0),w($F),f&&t(CBe),f&&t(vd),w(y0),f&&t(wBe),f&&t(zo),w(L0),w($0),w(SF),w(k0),w(PF),f&&t(ABe),f&&t(Md),w(S0),f&&t(yBe),f&&t(Qo),w(R0),w(P0),w(qF),w(I0),w(DF),f&&t(LBe),f&&t(wd),w(q0),f&&t(xBe),f&&t(Wo),w(N0),w(D0),w(OF),w(G0),w(HF),f&&t($Be),f&&t(Ld),w(O0),f&&t(kBe),f&&t(Ho),w(V0),w(z0),w(JF),w(Q0),w(ZF),f&&t(SBe),f&&t(kd),w(W0),f&&t(RBe),f&&t(Uo),w(H0),w(J0),w(o6),w(Y0),w(z6),f&&t(BBe),f&&t(Bd),w(K0),f&&t(PBe),f&&t(Jo),w(Z0),w(oy),w(W6),w(ry),w(_T),f&&t(IBe),f&&t(qd),w(ty),f&&t(qBe),f&&t(Yo),w(ay),w(sy),w(vT),w(ly),w(ST),f&&t(NBe),f&&t(Dd),w(iy),f&&t(jBe),f&&t(Ko),w(dy),w(fy),w(BT),w(my),w(qT),f&&t(DBe),f&&t(Vd),w(hy),f&&t(GBe),f&&t(Zo),w(py),w(_y),w(jT),w(by),w(s7),f&&t(OBe),f&&t(Qd),w(vy),f&&t(VBe),f&&t(er),w(Fy),w(My),w(i7),w(Ey),w(v7),f&&t(XBe),f&&t(Ud),w(Cy),f&&t(zBe),f&&t(or),w(wy),w(yy),w(T7),w(Ly),w(H7),f&&t(QBe),f&&t(Kd),w(xy),f&&t(WBe),f&&t(rr),w($y),w(Sy),w(J7),w(Ry),w(h9),f&&t(HBe),f&&t(oc),w(By),f&&t(UBe),f&&t(tr),w(Py),w(qy),w(u9),w(Ny),w(b9),f&&t(JBe),f&&t(ac),w(jy),f&&t(YBe),f&&t(ar),w(Dy),w(Oy),w(F9),w(Vy),w(G9),f&&t(KBe),f&&t(lc),w(Xy),f&&t(ZBe),f&&t(nr),w(zy),w(Wy),w(V9),w(Hy),w(cM),f&&t(ePe),f&&t(cc),w(Uy),f&&t(oPe),f&&t(sr),w(Jy),w(Ky),w(mM),w(Zy),w(hM),f&&t(rPe),f&&t(gc),w(eL),f&&t(tPe),f&&t(lr),w(oL),w(tL),w(uM),w(aL),w(bM),f&&t(aPe),f&&t(uc),w(nL),f&&t(nPe),f&&t(ir),w(sL),w(iL),w(FM),w(dL),w(QM),f&&t(sPe),f&&t(vc),w(cL),f&&t(lPe),f&&t(dr),w(fL),w(gL),w(HM),w(hL),w(eE),f&&t(iPe),f&&t(Mc),w(pL),f&&t(dPe),f&&t(cr),w(uL),w(bL),w(rE),w(vL),w(pE),f&&t(cPe),f&&t(wc),w(FL),f&&t(fPe),f&&t(fr),w(TL),w(EL),w(_E),w(CL),w(LE),f&&t(mPe),f&&t(Lc),w(wL),f&&t(gPe),f&&t(mr),w(AL),w(LL),w($E),w(xL),w(DE),f&&t(hPe),f&&t(kc),w($L),f&&t(pPe),f&&t(gr),w(kL),w(RL),w(OE),w(BL),w(ZE),f&&t(uPe),f&&t(Bc),w(PL),f&&t(_Pe),f&&t(hr),w(IL),w(NL),w(o5),w(jL),w(m5),f&&t(bPe),f&&t(qc),w(DL),f&&t(vPe),f&&t(pr),w(GL),w(VL),w(h5),w(XL),w(E5),f&&t(FPe),f&&t(Dc),w(zL),f&&t(TPe),f&&t(ur),w(QL),w(HL),w(w5),w(UL),w(B5),f&&t(MPe),f&&t(Vc),w(JL),f&&t(EPe),f&&t(_r),w(YL),w(ZL),w(I5),w(e8),w(N5),f&&t(CPe),f&&t(Qc),w(o8),f&&t(wPe),f&&t(br),w(r8),w(a8),w(D5),w(n8),w(V5),f&&t(APe),f&&t(Uc),w(l8),f&&t(yPe),f&&t(vr),w(i8),w(c8),w(z5),w(f8),w(W5)}}}const a5t={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function n5t(A){return lMt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class m5t extends tMt{constructor(g){super();aMt(this,g,n5t,t5t,nMt,{})}}export{m5t as default,a5t as metadata};
