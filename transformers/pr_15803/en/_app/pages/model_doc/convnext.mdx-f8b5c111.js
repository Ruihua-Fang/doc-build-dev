import{S as Ia,i as ja,s as za,e as n,k as d,w as v,t as s,L as Pa,c as a,d as o,m as h,a as r,x as _,h as i,b as l,M as Aa,J as t,g as f,y as x,q as C,o as w,B as N}from"../../chunks/vendor-9e2b328e.js";import{T as Ma}from"../../chunks/Tip-76f97a76.js";import{D as Pe}from"../../chunks/Docstring-50fd6873.js";import{C as An}from"../../chunks/CodeBlock-88e23343.js";import{I as Ae}from"../../chunks/IconCopyLink-fd0e58fd.js";import"../../chunks/CopyButton-4ae140ab.js";function qa(se){let m,y,p,u,k;return{c(){m=n("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),p=n("code"),u=s("Module"),k=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(g){m=a(g,"P",{});var b=r(m);y=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),p=a(b,"CODE",{});var M=r(p);u=i(M,"Module"),M.forEach(o),k=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(g,b){f(g,m,b),t(m,y),t(m,p),t(p,u),t(m,k)},d(g){g&&o(m)}}}function Oa(se){let m,y,p,u,k;return{c(){m=n("p"),y=s("Although the recipe for forward pass needs to be defined within this function, one should call the "),p=n("code"),u=s("Module"),k=s(`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`)},l(g){m=a(g,"P",{});var b=r(m);y=i(b,"Although the recipe for forward pass needs to be defined within this function, one should call the "),p=a(b,"CODE",{});var M=r(p);u=i(M,"Module"),M.forEach(o),k=i(b,`
instance afterwards instead of this since the former takes care of running the pre and post processing steps while
the latter silently ignores them.`),b.forEach(o)},m(g,b){f(g,m,b),t(m,y),t(m,p),t(p,u),t(m,k)},d(g){g&&o(m)}}}function Sa(se){let m,y,p,u,k,g,b,M,oo,bt,O,G,tt,ie,no,ot,ao,$t,Z,ro,le,so,io,yt,qe,lo,Tt,Oe,nt,co,Et,Se,ho,kt,Le,at,fo,Ft,J,qn,Mt,K,mo,De,po,uo,It,z,go,ce,vo,_o,de,xo,Co,jt,S,Y,rt,he,wo,st,No,zt,L,fe,bo,me,$o,Xe,yo,To,Pt,D,Q,it,pe,Eo,lt,ko,At,$,ue,Fo,X,Mo,He,Io,jo,ge,zo,Po,Ao,H,qo,Ve,Oo,So,We,Lo,Do,Xo,ct,Ho,Vo,ve,qt,V,ee,dt,_e,Wo,ht,Ro,Ot,I,xe,Uo,ft,Bo,Go,Ce,Zo,Re,Jo,Ko,St,W,te,mt,we,Yo,pt,Qo,Lt,j,Ne,en,be,tn,$e,on,nn,an,T,ye,rn,R,sn,Ue,ln,cn,ut,dn,hn,fn,oe,mn,gt,pn,un,Te,Dt,U,ne,vt,Ee,gn,_t,vn,Xt,F,ke,_n,xt,xn,Cn,Fe,wn,Me,Nn,bn,$n,E,Ie,yn,B,Tn,Be,En,kn,Ct,Fn,Mn,In,ae,jn,wt,zn,Pn,je,Ht;return g=new Ae({}),ie=new Ae({}),he=new Ae({}),fe=new Pe({props:{name:"class transformers.models.convnext.modeling_convnext.ConvNextModelOutput",anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput",parameters:[{name:"last_hidden_state",val:": FloatTensor = None"},{name:"pooler_output",val:": typing.Optional[torch.FloatTensor] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15803/src/transformers/models/convnext/modeling_convnext.py#L76",parametersDescription:[{anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput.last_hidden_state",description:`<strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Last hidden states (final feature map) of the last stage of the model.`,name:"last_hidden_state"},{anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput.pooler_output",description:`<strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.dim[-1])</code>) &#x2014;
Global average pooling of the last feature map followed by a layernorm.`,name:"pooler_output"},{anchor:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.`,name:"hidden_states"}]}}),pe=new Ae({}),ue=new Pe({props:{name:"class transformers.ConvNextConfig",anchor:"transformers.ConvNextConfig",parameters:[{name:"num_channels",val:" = 3"},{name:"patch_size",val:" = 4"},{name:"num_stages",val:" = 4"},{name:"hidden_sizes",val:" = None"},{name:"depths",val:" = None"},{name:"hidden_act",val:" = 'gelu'"},{name:"initializer_range",val:" = 0.02"},{name:"layer_norm_eps",val:" = 1e-12"},{name:"is_encoder_decoder",val:" = False"},{name:"layer_scale_init_value",val:" = 1e-06"},{name:"drop_path_rate",val:" = 0.0"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15803/src/transformers/models/convnext/configuration_convnext.py#L29",parametersDescription:[{anchor:"transformers.ConvNextConfig.num_channels",description:`<strong>num_channels</strong> (<code>int</code>, <em>optional</em>, defaults to 3) &#x2014;
The number of input channels.`,name:"num_channels"},{anchor:"transformers.ConvNextConfig.patch_size",description:`<strong>patch_size</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
Patch size to use in the patch embedding layer.`,name:"patch_size"},{anchor:"transformers.ConvNextConfig.num_stages",description:`<strong>num_stages</strong> (<code>int</code>, optional, defaults to 4) &#x2014;
The number of stages in the model.`,name:"num_stages"},{anchor:"transformers.ConvNextConfig.hidden_sizes",description:`<strong>hidden_sizes</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [96, 192, 384, 768]) &#x2014;
Dimensionality (hidden size) at each stage.`,name:"hidden_sizes"},{anchor:"transformers.ConvNextConfig.depths",description:`<strong>depths</strong> (<code>List[int]</code>, <em>optional</em>, defaults to [3, 3, 9, 3]) &#x2014;
Depth (number of blocks) for each stage.`,name:"depths"},{anchor:"transformers.ConvNextConfig.hidden_act",description:`<strong>hidden_act</strong> (<code>str</code> or <code>function</code>, <em>optional</em>, defaults to <code>&quot;gelu&quot;</code>) &#x2014;
The non-linear activation function (function or string) in each block. If string, <code>&quot;gelu&quot;</code>, <code>&quot;relu&quot;</code>,
<code>&quot;selu&quot;</code> and <code>&quot;gelu_new&quot;</code> are supported.`,name:"hidden_act"},{anchor:"transformers.ConvNextConfig.initializer_range",description:`<strong>initializer_range</strong> (<code>float</code>, <em>optional</em>, defaults to 0.02) &#x2014;
The standard deviation of the truncated_normal_initializer for initializing all weight matrices.`,name:"initializer_range"},{anchor:"transformers.ConvNextConfig.layer_norm_eps",description:`<strong>layer_norm_eps</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-12) &#x2014;
The epsilon used by the layer normalization layers.`,name:"layer_norm_eps"},{anchor:"transformers.ConvNextConfig.layer_scale_init_value",description:`<strong>layer_scale_init_value</strong> (<code>float</code>, <em>optional</em>, defaults to 1e-6) &#x2014;
The initial value for the layer scale.`,name:"layer_scale_init_value"},{anchor:"transformers.ConvNextConfig.drop_path_rate",description:`<strong>drop_path_rate</strong> (<code>float</code>, <em>optional</em>, defaults to 0.0) &#x2014;
The drop rate for stochastic depth.`,name:"drop_path_rate"}]}}),ve=new An({props:{code:`from transformers import ConvNextModel, ConvNextConfig

# Initializing a ConvNext convnext-tiny-224 style configuration
configuration = ConvNextConfig()
# Initializing a model from the convnext-tiny-224 style configuration
model = ConvNextModel(configuration)
# Accessing the model configuration
configuration = model.config,`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextModel, ConvNextConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a ConvNext convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = ConvNextConfig()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Initializing a model from the convnext-tiny-224 style configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel(configuration)
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Accessing the model configuration</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>configuration = model.config`}}),_e=new Ae({}),xe=new Pe({props:{name:"class transformers.ConvNextFeatureExtractor",anchor:"transformers.ConvNextFeatureExtractor",parameters:[{name:"do_resize",val:" = True"},{name:"size",val:" = 224"},{name:"resample",val:" = 3"},{name:"crop_pct",val:" = None"},{name:"do_normalize",val:" = True"},{name:"image_mean",val:" = None"},{name:"image_std",val:" = None"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15803/src/transformers/models/convnext/feature_extraction_convnext.py#L37",parametersDescription:[{anchor:"transformers.ConvNextFeatureExtractor.do_resize",description:`<strong>do_resize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether to resize (and optionally center crop) the input to a certain <code>size</code>.`,name:"do_resize"},{anchor:"transformers.ConvNextFeatureExtractor.size",description:`<strong>size</strong> (<code>int</code>, <em>optional</em>, defaults to 224) &#x2014;
Resize the input to the given size. If 384 or larger, the image is resized to (<code>size</code>, <code>size</code>). Else, the
smaller edge of the image will be matched to int(<code>size</code>/ <code>crop_pct</code>), after which the image is cropped to
<code>size</code>. Only has an effect if <code>do_resize</code> is set to <code>True</code>.`,name:"size"},{anchor:"transformers.ConvNextFeatureExtractor.resample",description:`<strong>resample</strong> (<code>int</code>, <em>optional</em>, defaults to <code>PIL.Image.BICUBIC</code>) &#x2014;
An optional resampling filter. This can be one of <code>PIL.Image.NEAREST</code>, <code>PIL.Image.BOX</code>,
<code>PIL.Image.BILINEAR</code>, <code>PIL.Image.HAMMING</code>, <code>PIL.Image.BICUBIC</code> or <code>PIL.Image.LANCZOS</code>. Only has an effect
if <code>do_resize</code> is set to <code>True</code>.`,name:"resample"},{anchor:"transformers.ConvNextFeatureExtractor.crop_pct",description:`<strong>crop_pct</strong> (<code>float</code>, <em>optional</em>) &#x2014;
The percentage of the image to crop. If <code>None</code>, then a cropping percentage of 224 / 256 is used. Only has
an effect if <code>do_resize</code> is set to <code>True</code> and <code>size</code> &lt; 384.`,name:"crop_pct"},{anchor:"transformers.ConvNextFeatureExtractor.do_normalize",description:`<strong>do_normalize</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to normalize the input with mean and standard deviation.`,name:"do_normalize"},{anchor:"transformers.ConvNextFeatureExtractor.image_mean",description:`<strong>image_mean</strong> (<code>List[int]</code>, defaults to <code>[0.485, 0.456, 0.406]</code>) &#x2014;
The sequence of means for each channel, to be used when normalizing images.`,name:"image_mean"},{anchor:"transformers.ConvNextFeatureExtractor.image_std",description:`<strong>image_std</strong> (<code>List[int]</code>, defaults to <code>[0.229, 0.224, 0.225]</code>) &#x2014;
The sequence of standard deviations for each channel, to be used when normalizing images.`,name:"image_std"}]}}),we=new Ae({}),Ne=new Pe({props:{name:"class transformers.ConvNextModel",anchor:"transformers.ConvNextModel",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15803/src/transformers/models/convnext/modeling_convnext.py#L368",parametersDescription:[{anchor:"transformers.ConvNextModel.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15803/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15803/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),ye=new Pe({props:{name:"forward",anchor:"transformers.ConvNextModel.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15803/src/transformers/models/convnext/modeling_convnext.py#L382",parametersDescription:[{anchor:"transformers.ConvNextModel.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15803/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextModel.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextModel.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15803/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"}],returnDescription:`
<p>A <a
  href="/docs/transformers/pr_15803/en/model_doc/convnext#transformers.models.convnext.modeling_convnext.ConvNextModelOutput"
>transformers.models.convnext.modeling_convnext.ConvNextModelOutput</a> or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15803/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li><strong>last_hidden_state</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) \u2014 Last hidden states (final feature map) of the last stage of the model.</li>
<li><strong>pooler_output</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.dim[-1])</code>) \u2014 Global average pooling of the last feature map followed by a layernorm.</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.</li>
</ul>
`,returnType:`
<p><a
  href="/docs/transformers/pr_15803/en/model_doc/convnext#transformers.models.convnext.modeling_convnext.ConvNextModelOutput"
>transformers.models.convnext.modeling_convnext.ConvNextModelOutput</a> or <code>tuple(torch.FloatTensor)</code></p>
`}}),oe=new Ma({props:{$$slots:{default:[qa]},$$scope:{ctx:se}}}),Te=new An({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextModel
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextModel.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    outputs = model(**inputs)

last_hidden_states = outputs.last_hidden_state
list(last_hidden_states.shape),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextModel
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextModel.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    outputs = model(**inputs)

<span class="hljs-meta">&gt;&gt;&gt; </span>last_hidden_states = outputs.last_hidden_state
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">list</span>(last_hidden_states.shape)
[<span class="hljs-number">1</span>, <span class="hljs-number">768</span>, <span class="hljs-number">7</span>, <span class="hljs-number">7</span>]`}}),Ee=new Ae({}),ke=new Pe({props:{name:"class transformers.ConvNextForImageClassification",anchor:"transformers.ConvNextForImageClassification",parameters:[{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_15803/src/transformers/models/convnext/modeling_convnext.py#L430",parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_15803/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a>) &#x2014; Model configuration class with all the parameters of the model.
Initializing with a config file does not load the weights associated with the model, only the
configuration. Check out the <a href="/docs/transformers/pr_15803/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> method to load the model weights.`,name:"config"}]}}),Ie=new Pe({props:{name:"forward",anchor:"transformers.ConvNextForImageClassification.forward",parameters:[{name:"pixel_values",val:" = None"},{name:"labels",val:" = None"},{name:"output_hidden_states",val:" = None"},{name:"return_dict",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_15803/src/transformers/models/convnext/modeling_convnext.py#L445",parametersDescription:[{anchor:"transformers.ConvNextForImageClassification.forward.pixel_values",description:`<strong>pixel_values</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, num_channels, height, width)</code>) &#x2014;
Pixel values. Pixel values can be obtained using <a href="/docs/transformers/pr_15803/en/model_doc/auto#transformers.AutoFeatureExtractor">AutoFeatureExtractor</a>. See
<code>AutoFeatureExtractor.__call__()</code>for details.`,name:"pixel_values"},{anchor:"transformers.ConvNextForImageClassification.forward.output_hidden_states",description:`<strong>output_hidden_states</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return the hidden states of all layers. See <code>hidden_states</code> under returned tensors for
more detail.`,name:"output_hidden_states"},{anchor:"transformers.ConvNextForImageClassification.forward.return_dict",description:`<strong>return_dict</strong> (<code>bool</code>, <em>optional</em>) &#x2014;
Whether or not to return a <a href="/docs/transformers/pr_15803/en/main_classes/output#transformers.file_utils.ModelOutput">ModelOutput</a> instead of a plain tuple.`,name:"return_dict"},{anchor:"transformers.ConvNextForImageClassification.forward.labels",description:`<strong>labels</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size,)</code>, <em>optional</em>) &#x2014;
Labels for computing the image classification/regression loss. Indices should be in <code>[0, ..., config.num_labels - 1]</code>. If <code>config.num_labels == 1</code> a regression loss is computed (Mean-Square loss), If
<code>config.num_labels &gt; 1</code> a classification loss is computed (Cross-Entropy).`,name:"labels"}],returnDescription:`
<p>A <code>transformers.models.convnext.modeling_convnext.ConvNextClassifierOutput</code>or a tuple of
<code>torch.FloatTensor</code> (if <code>return_dict=False</code> is passed or when <code>config.return_dict=False</code>) comprising various
elements depending on the configuration (<a
  href="/docs/transformers/pr_15803/en/model_doc/convnext#transformers.ConvNextConfig"
>ConvNextConfig</a>) and inputs.</p>
<ul>
<li><strong>loss</strong> (<code>torch.FloatTensor</code> of shape <code>(1,)</code>, <em>optional</em>, returned when <code>labels</code> is provided) \u2014 Classification (or regression if config.num_labels==1) loss.</li>
<li><strong>logits</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.num_labels)</code>) \u2014 Classification (or regression if config.num_labels==1) scores (before SoftMax).</li>
<li><strong>hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) \u2014 Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each stage) of
shape <code>(batch_size, num_channels, height, width)</code>. Hidden-states (also called feature maps) of the model at
the output of each stage.</li>
</ul>
`,returnType:`
<p><code>transformers.models.convnext.modeling_convnext.ConvNextClassifierOutput</code>or <code>tuple(torch.FloatTensor)</code></p>
`}}),ae=new Ma({props:{$$slots:{default:[Oa]},$$scope:{ctx:se}}}),je=new An({props:{code:`from transformers import ConvNextFeatureExtractor, ConvNextForImageClassification
import torch
from datasets import load_dataset

dataset = load_dataset("huggingface/cats-image")
image = dataset["test"]["image"][0]

feature_extractor = ConvNextFeatureExtractor.from_pretrained("facebook/convnext-tiny-224")
model = ConvNextForImageClassification.from_pretrained("facebook/convnext-tiny-224")

inputs = feature_extractor(image, return_tensors="pt")

with torch.no_grad():
    logits = model(**inputs).logits

# model predicts one of the 1000 ImageNet classes
predicted_label = logits.argmax(-1).item()
print(model.config.id2label[predicted_label]),`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> ConvNextFeatureExtractor, ConvNextForImageClassification
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">import</span> torch
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> datasets <span class="hljs-keyword">import</span> load_dataset

<span class="hljs-meta">&gt;&gt;&gt; </span>dataset = load_dataset(<span class="hljs-string">&quot;huggingface/cats-image&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>image = dataset[<span class="hljs-string">&quot;test&quot;</span>][<span class="hljs-string">&quot;image&quot;</span>][<span class="hljs-number">0</span>]

<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = ConvNextFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = ConvNextForImageClassification.from_pretrained(<span class="hljs-string">&quot;facebook/convnext-tiny-224&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span>inputs = feature_extractor(image, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">with</span> torch.no_grad():
<span class="hljs-meta">... </span>    logits = model(**inputs).logits

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># model predicts one of the 1000 ImageNet classes</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>predicted_label = logits.argmax(-<span class="hljs-number">1</span>).item()
<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-built_in">print</span>(model.config.id2label[predicted_label])
<span class="hljs-string">&#x27;tabby, tabby cat&#x27;</span>`}}),{c(){m=n("meta"),y=d(),p=n("h1"),u=n("a"),k=n("span"),v(g.$$.fragment),b=d(),M=n("span"),oo=s("ConvNeXT"),bt=d(),O=n("h2"),G=n("a"),tt=n("span"),v(ie.$$.fragment),no=d(),ot=n("span"),ao=s("Overview"),$t=d(),Z=n("p"),ro=s("The ConvNeXT model was proposed in "),le=n("a"),so=s("A ConvNet for the 2020s"),io=s(` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),yt=d(),qe=n("p"),lo=s("The abstract from the paper is the following:"),Tt=d(),Oe=n("p"),nt=n("em"),co=s(`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),Et=d(),Se=n("p"),ho=s("Tips:"),kt=d(),Le=n("ul"),at=n("li"),fo=s("See the code examples below each model regarding usage."),Ft=d(),J=n("img"),Mt=d(),K=n("small"),mo=s("ConvNeXT architecture. Taken from the "),De=n("a"),po=s("original paper"),uo=s("."),It=d(),z=n("p"),go=s("This model was contributed by "),ce=n("a"),vo=s("nielsr"),_o=s(". The original code can be found "),de=n("a"),xo=s("here"),Co=s("."),jt=d(),S=n("h2"),Y=n("a"),rt=n("span"),v(he.$$.fragment),wo=d(),st=n("span"),No=s("ConvNeXT specific outputs"),zt=d(),L=n("div"),v(fe.$$.fragment),bo=d(),me=n("p"),$o=s("Class for "),Xe=n("a"),yo=s("ConvNextModel"),To=s("\u2019s outputs, with potential hidden states (feature maps)."),Pt=d(),D=n("h2"),Q=n("a"),it=n("span"),v(pe.$$.fragment),Eo=d(),lt=n("span"),ko=s("ConvNextConfig"),At=d(),$=n("div"),v(ue.$$.fragment),Fo=d(),X=n("p"),Mo=s("This is the configuration class to store the configuration of a "),He=n("a"),Io=s("ConvNextModel"),jo=s(`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),ge=n("a"),zo=s("facebook/convnext-tiny-224"),Po=s(" architecture."),Ao=d(),H=n("p"),qo=s("Configuration objects inherit from "),Ve=n("a"),Oo=s("PretrainedConfig"),So=s(` and can be used to control the model outputs. Read the
documentation from `),We=n("a"),Lo=s("PretrainedConfig"),Do=s(" for more information."),Xo=d(),ct=n("p"),Ho=s("Example:"),Vo=d(),v(ve.$$.fragment),qt=d(),V=n("h2"),ee=n("a"),dt=n("span"),v(_e.$$.fragment),Wo=d(),ht=n("span"),Ro=s("ConvNextFeatureExtractor"),Ot=d(),I=n("div"),v(xe.$$.fragment),Uo=d(),ft=n("p"),Bo=s("Constructs a ConvNeXT feature extractor."),Go=d(),Ce=n("p"),Zo=s("This feature extractor inherits from "),Re=n("a"),Jo=s("FeatureExtractionMixin"),Ko=s(` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),St=d(),W=n("h2"),te=n("a"),mt=n("span"),v(we.$$.fragment),Yo=d(),pt=n("span"),Qo=s("ConvNextModel"),Lt=d(),j=n("div"),v(Ne.$$.fragment),en=d(),be=n("p"),tn=s(`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),$e=n("a"),on=s("torch.nn.Module"),nn=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),an=d(),T=n("div"),v(ye.$$.fragment),rn=d(),R=n("p"),sn=s("The "),Ue=n("a"),ln=s("ConvNextModel"),cn=s(" forward method, overrides the "),ut=n("code"),dn=s("__call__"),hn=s(" special method."),fn=d(),v(oe.$$.fragment),mn=d(),gt=n("p"),pn=s("Example:"),un=d(),v(Te.$$.fragment),Dt=d(),U=n("h2"),ne=n("a"),vt=n("span"),v(Ee.$$.fragment),gn=d(),_t=n("span"),vn=s("ConvNextForImageClassification"),Xt=d(),F=n("div"),v(ke.$$.fragment),_n=d(),xt=n("p"),xn=s(`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),Cn=d(),Fe=n("p"),wn=s("This model is a PyTorch "),Me=n("a"),Nn=s("torch.nn.Module"),bn=s(` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),$n=d(),E=n("div"),v(Ie.$$.fragment),yn=d(),B=n("p"),Tn=s("The "),Be=n("a"),En=s("ConvNextForImageClassification"),kn=s(" forward method, overrides the "),Ct=n("code"),Fn=s("__call__"),Mn=s(" special method."),In=d(),v(ae.$$.fragment),jn=d(),wt=n("p"),zn=s("Example:"),Pn=d(),v(je.$$.fragment),this.h()},l(e){const c=Pa('[data-svelte="svelte-1phssyn"]',document.head);m=a(c,"META",{name:!0,content:!0}),c.forEach(o),y=h(e),p=a(e,"H1",{class:!0});var ze=r(p);u=a(ze,"A",{id:!0,class:!0,href:!0});var Nt=r(u);k=a(Nt,"SPAN",{});var On=r(k);_(g.$$.fragment,On),On.forEach(o),Nt.forEach(o),b=h(ze),M=a(ze,"SPAN",{});var Sn=r(M);oo=i(Sn,"ConvNeXT"),Sn.forEach(o),ze.forEach(o),bt=h(e),O=a(e,"H2",{class:!0});var Vt=r(O);G=a(Vt,"A",{id:!0,class:!0,href:!0});var Ln=r(G);tt=a(Ln,"SPAN",{});var Dn=r(tt);_(ie.$$.fragment,Dn),Dn.forEach(o),Ln.forEach(o),no=h(Vt),ot=a(Vt,"SPAN",{});var Xn=r(ot);ao=i(Xn,"Overview"),Xn.forEach(o),Vt.forEach(o),$t=h(e),Z=a(e,"P",{});var Wt=r(Z);ro=i(Wt,"The ConvNeXT model was proposed in "),le=a(Wt,"A",{href:!0,rel:!0});var Hn=r(le);so=i(Hn,"A ConvNet for the 2020s"),Hn.forEach(o),io=i(Wt,` by Zhuang Liu, Hanzi Mao, Chao-Yuan Wu, Christoph Feichtenhofer, Trevor Darrell, Saining Xie.
ConvNeXT is a pure convolutional model (ConvNet), inspired by the design of Vision Transformers, that claims to outperform them.`),Wt.forEach(o),yt=h(e),qe=a(e,"P",{});var Vn=r(qe);lo=i(Vn,"The abstract from the paper is the following:"),Vn.forEach(o),Tt=h(e),Oe=a(e,"P",{});var Wn=r(Oe);nt=a(Wn,"EM",{});var Rn=r(nt);co=i(Rn,`The \u201CRoaring 20s\u201D of visual recognition began with the introduction of Vision Transformers (ViTs), which quickly superseded ConvNets as the state-of-the-art image classification model.
A vanilla ViT, on the other hand, faces difficulties when applied to general computer vision tasks such as object detection and semantic segmentation. It is the hierarchical Transformers
(e.g., Swin Transformers) that reintroduced several ConvNet priors, making Transformers practically viable as a generic vision backbone and demonstrating remarkable performance on a wide
variety of vision tasks. However, the effectiveness of such hybrid approaches is still largely credited to the intrinsic superiority of Transformers, rather than the inherent inductive
biases of convolutions. In this work, we reexamine the design spaces and test the limits of what a pure ConvNet can achieve. We gradually \u201Cmodernize\u201D a standard ResNet toward the design
of a vision Transformer, and discover several key components that contribute to the performance difference along the way. The outcome of this exploration is a family of pure ConvNet models
dubbed ConvNeXt. Constructed entirely from standard ConvNet modules, ConvNeXts compete favorably with Transformers in terms of accuracy and scalability, achieving 87.8% ImageNet top-1 accuracy
and outperforming Swin Transformers on COCO detection and ADE20K segmentation, while maintaining the simplicity and efficiency of standard ConvNets.`),Rn.forEach(o),Wn.forEach(o),Et=h(e),Se=a(e,"P",{});var Un=r(Se);ho=i(Un,"Tips:"),Un.forEach(o),kt=h(e),Le=a(e,"UL",{});var Bn=r(Le);at=a(Bn,"LI",{});var Gn=r(at);fo=i(Gn,"See the code examples below each model regarding usage."),Gn.forEach(o),Bn.forEach(o),Ft=h(e),J=a(e,"IMG",{src:!0,alt:!0,width:!0}),Mt=h(e),K=a(e,"SMALL",{});var Rt=r(K);mo=i(Rt,"ConvNeXT architecture. Taken from the "),De=a(Rt,"A",{href:!0});var Zn=r(De);po=i(Zn,"original paper"),Zn.forEach(o),uo=i(Rt,"."),Rt.forEach(o),It=h(e),z=a(e,"P",{});var Ge=r(z);go=i(Ge,"This model was contributed by "),ce=a(Ge,"A",{href:!0,rel:!0});var Jn=r(ce);vo=i(Jn,"nielsr"),Jn.forEach(o),_o=i(Ge,". The original code can be found "),de=a(Ge,"A",{href:!0,rel:!0});var Kn=r(de);xo=i(Kn,"here"),Kn.forEach(o),Co=i(Ge,"."),Ge.forEach(o),jt=h(e),S=a(e,"H2",{class:!0});var Ut=r(S);Y=a(Ut,"A",{id:!0,class:!0,href:!0});var Yn=r(Y);rt=a(Yn,"SPAN",{});var Qn=r(rt);_(he.$$.fragment,Qn),Qn.forEach(o),Yn.forEach(o),wo=h(Ut),st=a(Ut,"SPAN",{});var ea=r(st);No=i(ea,"ConvNeXT specific outputs"),ea.forEach(o),Ut.forEach(o),zt=h(e),L=a(e,"DIV",{class:!0});var Bt=r(L);_(fe.$$.fragment,Bt),bo=h(Bt),me=a(Bt,"P",{});var Gt=r(me);$o=i(Gt,"Class for "),Xe=a(Gt,"A",{href:!0});var ta=r(Xe);yo=i(ta,"ConvNextModel"),ta.forEach(o),To=i(Gt,"\u2019s outputs, with potential hidden states (feature maps)."),Gt.forEach(o),Bt.forEach(o),Pt=h(e),D=a(e,"H2",{class:!0});var Zt=r(D);Q=a(Zt,"A",{id:!0,class:!0,href:!0});var oa=r(Q);it=a(oa,"SPAN",{});var na=r(it);_(pe.$$.fragment,na),na.forEach(o),oa.forEach(o),Eo=h(Zt),lt=a(Zt,"SPAN",{});var aa=r(lt);ko=i(aa,"ConvNextConfig"),aa.forEach(o),Zt.forEach(o),At=h(e),$=a(e,"DIV",{class:!0});var P=r($);_(ue.$$.fragment,P),Fo=h(P),X=a(P,"P",{});var Ze=r(X);Mo=i(Ze,"This is the configuration class to store the configuration of a "),He=a(Ze,"A",{href:!0});var ra=r(He);Io=i(ra,"ConvNextModel"),ra.forEach(o),jo=i(Ze,`. It is used to instantiate an
ConvNeXT model according to the specified arguments, defining the model architecture. Instantiating a configuration
with the defaults will yield a similar configuration to that of the ConvNeXT
`),ge=a(Ze,"A",{href:!0,rel:!0});var sa=r(ge);zo=i(sa,"facebook/convnext-tiny-224"),sa.forEach(o),Po=i(Ze," architecture."),Ze.forEach(o),Ao=h(P),H=a(P,"P",{});var Je=r(H);qo=i(Je,"Configuration objects inherit from "),Ve=a(Je,"A",{href:!0});var ia=r(Ve);Oo=i(ia,"PretrainedConfig"),ia.forEach(o),So=i(Je,` and can be used to control the model outputs. Read the
documentation from `),We=a(Je,"A",{href:!0});var la=r(We);Lo=i(la,"PretrainedConfig"),la.forEach(o),Do=i(Je," for more information."),Je.forEach(o),Xo=h(P),ct=a(P,"P",{});var ca=r(ct);Ho=i(ca,"Example:"),ca.forEach(o),Vo=h(P),_(ve.$$.fragment,P),P.forEach(o),qt=h(e),V=a(e,"H2",{class:!0});var Jt=r(V);ee=a(Jt,"A",{id:!0,class:!0,href:!0});var da=r(ee);dt=a(da,"SPAN",{});var ha=r(dt);_(_e.$$.fragment,ha),ha.forEach(o),da.forEach(o),Wo=h(Jt),ht=a(Jt,"SPAN",{});var fa=r(ht);Ro=i(fa,"ConvNextFeatureExtractor"),fa.forEach(o),Jt.forEach(o),Ot=h(e),I=a(e,"DIV",{class:!0});var Ke=r(I);_(xe.$$.fragment,Ke),Uo=h(Ke),ft=a(Ke,"P",{});var ma=r(ft);Bo=i(ma,"Constructs a ConvNeXT feature extractor."),ma.forEach(o),Go=h(Ke),Ce=a(Ke,"P",{});var Kt=r(Ce);Zo=i(Kt,"This feature extractor inherits from "),Re=a(Kt,"A",{href:!0});var pa=r(Re);Jo=i(pa,"FeatureExtractionMixin"),pa.forEach(o),Ko=i(Kt,` which contains most of the main methods. Users
should refer to this superclass for more information regarding those methods.`),Kt.forEach(o),Ke.forEach(o),St=h(e),W=a(e,"H2",{class:!0});var Yt=r(W);te=a(Yt,"A",{id:!0,class:!0,href:!0});var ua=r(te);mt=a(ua,"SPAN",{});var ga=r(mt);_(we.$$.fragment,ga),ga.forEach(o),ua.forEach(o),Yo=h(Yt),pt=a(Yt,"SPAN",{});var va=r(pt);Qo=i(va,"ConvNextModel"),va.forEach(o),Yt.forEach(o),Lt=h(e),j=a(e,"DIV",{class:!0});var Ye=r(j);_(Ne.$$.fragment,Ye),en=h(Ye),be=a(Ye,"P",{});var Qt=r(be);tn=i(Qt,`The bare ConvNext model outputting raw features without any specific head on top.
This model is a PyTorch `),$e=a(Qt,"A",{href:!0,rel:!0});var _a=r($e);on=i(_a,"torch.nn.Module"),_a.forEach(o),nn=i(Qt,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),Qt.forEach(o),an=h(Ye),T=a(Ye,"DIV",{class:!0});var A=r(T);_(ye.$$.fragment,A),rn=h(A),R=a(A,"P",{});var Qe=r(R);sn=i(Qe,"The "),Ue=a(Qe,"A",{href:!0});var xa=r(Ue);ln=i(xa,"ConvNextModel"),xa.forEach(o),cn=i(Qe," forward method, overrides the "),ut=a(Qe,"CODE",{});var Ca=r(ut);dn=i(Ca,"__call__"),Ca.forEach(o),hn=i(Qe," special method."),Qe.forEach(o),fn=h(A),_(oe.$$.fragment,A),mn=h(A),gt=a(A,"P",{});var wa=r(gt);pn=i(wa,"Example:"),wa.forEach(o),un=h(A),_(Te.$$.fragment,A),A.forEach(o),Ye.forEach(o),Dt=h(e),U=a(e,"H2",{class:!0});var eo=r(U);ne=a(eo,"A",{id:!0,class:!0,href:!0});var Na=r(ne);vt=a(Na,"SPAN",{});var ba=r(vt);_(Ee.$$.fragment,ba),ba.forEach(o),Na.forEach(o),gn=h(eo),_t=a(eo,"SPAN",{});var $a=r(_t);vn=i($a,"ConvNextForImageClassification"),$a.forEach(o),eo.forEach(o),Xt=h(e),F=a(e,"DIV",{class:!0});var re=r(F);_(ke.$$.fragment,re),_n=h(re),xt=a(re,"P",{});var ya=r(xt);xn=i(ya,`ConvNext Model with an image classification head on top (a linear layer on top of the pooled features), e.g. for
ImageNet.`),ya.forEach(o),Cn=h(re),Fe=a(re,"P",{});var to=r(Fe);wn=i(to,"This model is a PyTorch "),Me=a(to,"A",{href:!0,rel:!0});var Ta=r(Me);Nn=i(Ta,"torch.nn.Module"),Ta.forEach(o),bn=i(to,` subclass. Use it
as a regular PyTorch Module and refer to the PyTorch documentation for all matter related to general usage and
behavior.`),to.forEach(o),$n=h(re),E=a(re,"DIV",{class:!0});var q=r(E);_(Ie.$$.fragment,q),yn=h(q),B=a(q,"P",{});var et=r(B);Tn=i(et,"The "),Be=a(et,"A",{href:!0});var Ea=r(Be);En=i(Ea,"ConvNextForImageClassification"),Ea.forEach(o),kn=i(et," forward method, overrides the "),Ct=a(et,"CODE",{});var ka=r(Ct);Fn=i(ka,"__call__"),ka.forEach(o),Mn=i(et," special method."),et.forEach(o),In=h(q),_(ae.$$.fragment,q),jn=h(q),wt=a(q,"P",{});var Fa=r(wt);zn=i(Fa,"Example:"),Fa.forEach(o),Pn=h(q),_(je.$$.fragment,q),q.forEach(o),re.forEach(o),this.h()},h(){l(m,"name","hf:doc:metadata"),l(m,"content",JSON.stringify(La)),l(u,"id","convnext"),l(u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(u,"href","#convnext"),l(p,"class","relative group"),l(G,"id","overview"),l(G,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(G,"href","#overview"),l(O,"class","relative group"),l(le,"href","https://arxiv.org/abs/2201.03545"),l(le,"rel","nofollow"),Aa(J.src,qn="https://huggingface.co/datasets/huggingface/documentation-images/resolve/main/convnext_architecture.jpg")||l(J,"src",qn),l(J,"alt","drawing"),l(J,"width","600"),l(De,"href","https://arxiv.org/abs/2201.03545"),l(ce,"href","https://huggingface.co/nielsr"),l(ce,"rel","nofollow"),l(de,"href","https://github.com/facebookresearch/ConvNeXt"),l(de,"rel","nofollow"),l(Y,"id","transformers.models.convnext.modeling_convnext.ConvNextModelOutput"),l(Y,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Y,"href","#transformers.models.convnext.modeling_convnext.ConvNextModelOutput"),l(S,"class","relative group"),l(Xe,"href","/docs/transformers/pr_15803/en/model_doc/convnext#transformers.ConvNextModel"),l(L,"class","docstring"),l(Q,"id","transformers.ConvNextConfig"),l(Q,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(Q,"href","#transformers.ConvNextConfig"),l(D,"class","relative group"),l(He,"href","/docs/transformers/pr_15803/en/model_doc/convnext#transformers.ConvNextModel"),l(ge,"href","https://huggingface.co/facebook/convnext-tiny-224"),l(ge,"rel","nofollow"),l(Ve,"href","/docs/transformers/pr_15803/en/main_classes/configuration#transformers.PretrainedConfig"),l(We,"href","/docs/transformers/pr_15803/en/main_classes/configuration#transformers.PretrainedConfig"),l($,"class","docstring"),l(ee,"id","transformers.ConvNextFeatureExtractor"),l(ee,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ee,"href","#transformers.ConvNextFeatureExtractor"),l(V,"class","relative group"),l(Re,"href","/docs/transformers/pr_15803/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin"),l(I,"class","docstring"),l(te,"id","transformers.ConvNextModel"),l(te,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(te,"href","#transformers.ConvNextModel"),l(W,"class","relative group"),l($e,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l($e,"rel","nofollow"),l(Ue,"href","/docs/transformers/pr_15803/en/model_doc/convnext#transformers.ConvNextModel"),l(T,"class","docstring"),l(j,"class","docstring"),l(ne,"id","transformers.ConvNextForImageClassification"),l(ne,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),l(ne,"href","#transformers.ConvNextForImageClassification"),l(U,"class","relative group"),l(Me,"href","https://pytorch.org/docs/stable/nn.html#torch.nn.Module"),l(Me,"rel","nofollow"),l(Be,"href","/docs/transformers/pr_15803/en/model_doc/convnext#transformers.ConvNextForImageClassification"),l(E,"class","docstring"),l(F,"class","docstring")},m(e,c){t(document.head,m),f(e,y,c),f(e,p,c),t(p,u),t(u,k),x(g,k,null),t(p,b),t(p,M),t(M,oo),f(e,bt,c),f(e,O,c),t(O,G),t(G,tt),x(ie,tt,null),t(O,no),t(O,ot),t(ot,ao),f(e,$t,c),f(e,Z,c),t(Z,ro),t(Z,le),t(le,so),t(Z,io),f(e,yt,c),f(e,qe,c),t(qe,lo),f(e,Tt,c),f(e,Oe,c),t(Oe,nt),t(nt,co),f(e,Et,c),f(e,Se,c),t(Se,ho),f(e,kt,c),f(e,Le,c),t(Le,at),t(at,fo),f(e,Ft,c),f(e,J,c),f(e,Mt,c),f(e,K,c),t(K,mo),t(K,De),t(De,po),t(K,uo),f(e,It,c),f(e,z,c),t(z,go),t(z,ce),t(ce,vo),t(z,_o),t(z,de),t(de,xo),t(z,Co),f(e,jt,c),f(e,S,c),t(S,Y),t(Y,rt),x(he,rt,null),t(S,wo),t(S,st),t(st,No),f(e,zt,c),f(e,L,c),x(fe,L,null),t(L,bo),t(L,me),t(me,$o),t(me,Xe),t(Xe,yo),t(me,To),f(e,Pt,c),f(e,D,c),t(D,Q),t(Q,it),x(pe,it,null),t(D,Eo),t(D,lt),t(lt,ko),f(e,At,c),f(e,$,c),x(ue,$,null),t($,Fo),t($,X),t(X,Mo),t(X,He),t(He,Io),t(X,jo),t(X,ge),t(ge,zo),t(X,Po),t($,Ao),t($,H),t(H,qo),t(H,Ve),t(Ve,Oo),t(H,So),t(H,We),t(We,Lo),t(H,Do),t($,Xo),t($,ct),t(ct,Ho),t($,Vo),x(ve,$,null),f(e,qt,c),f(e,V,c),t(V,ee),t(ee,dt),x(_e,dt,null),t(V,Wo),t(V,ht),t(ht,Ro),f(e,Ot,c),f(e,I,c),x(xe,I,null),t(I,Uo),t(I,ft),t(ft,Bo),t(I,Go),t(I,Ce),t(Ce,Zo),t(Ce,Re),t(Re,Jo),t(Ce,Ko),f(e,St,c),f(e,W,c),t(W,te),t(te,mt),x(we,mt,null),t(W,Yo),t(W,pt),t(pt,Qo),f(e,Lt,c),f(e,j,c),x(Ne,j,null),t(j,en),t(j,be),t(be,tn),t(be,$e),t($e,on),t(be,nn),t(j,an),t(j,T),x(ye,T,null),t(T,rn),t(T,R),t(R,sn),t(R,Ue),t(Ue,ln),t(R,cn),t(R,ut),t(ut,dn),t(R,hn),t(T,fn),x(oe,T,null),t(T,mn),t(T,gt),t(gt,pn),t(T,un),x(Te,T,null),f(e,Dt,c),f(e,U,c),t(U,ne),t(ne,vt),x(Ee,vt,null),t(U,gn),t(U,_t),t(_t,vn),f(e,Xt,c),f(e,F,c),x(ke,F,null),t(F,_n),t(F,xt),t(xt,xn),t(F,Cn),t(F,Fe),t(Fe,wn),t(Fe,Me),t(Me,Nn),t(Fe,bn),t(F,$n),t(F,E),x(Ie,E,null),t(E,yn),t(E,B),t(B,Tn),t(B,Be),t(Be,En),t(B,kn),t(B,Ct),t(Ct,Fn),t(B,Mn),t(E,In),x(ae,E,null),t(E,jn),t(E,wt),t(wt,zn),t(E,Pn),x(je,E,null),Ht=!0},p(e,[c]){const ze={};c&2&&(ze.$$scope={dirty:c,ctx:e}),oe.$set(ze);const Nt={};c&2&&(Nt.$$scope={dirty:c,ctx:e}),ae.$set(Nt)},i(e){Ht||(C(g.$$.fragment,e),C(ie.$$.fragment,e),C(he.$$.fragment,e),C(fe.$$.fragment,e),C(pe.$$.fragment,e),C(ue.$$.fragment,e),C(ve.$$.fragment,e),C(_e.$$.fragment,e),C(xe.$$.fragment,e),C(we.$$.fragment,e),C(Ne.$$.fragment,e),C(ye.$$.fragment,e),C(oe.$$.fragment,e),C(Te.$$.fragment,e),C(Ee.$$.fragment,e),C(ke.$$.fragment,e),C(Ie.$$.fragment,e),C(ae.$$.fragment,e),C(je.$$.fragment,e),Ht=!0)},o(e){w(g.$$.fragment,e),w(ie.$$.fragment,e),w(he.$$.fragment,e),w(fe.$$.fragment,e),w(pe.$$.fragment,e),w(ue.$$.fragment,e),w(ve.$$.fragment,e),w(_e.$$.fragment,e),w(xe.$$.fragment,e),w(we.$$.fragment,e),w(Ne.$$.fragment,e),w(ye.$$.fragment,e),w(oe.$$.fragment,e),w(Te.$$.fragment,e),w(Ee.$$.fragment,e),w(ke.$$.fragment,e),w(Ie.$$.fragment,e),w(ae.$$.fragment,e),w(je.$$.fragment,e),Ht=!1},d(e){o(m),e&&o(y),e&&o(p),N(g),e&&o(bt),e&&o(O),N(ie),e&&o($t),e&&o(Z),e&&o(yt),e&&o(qe),e&&o(Tt),e&&o(Oe),e&&o(Et),e&&o(Se),e&&o(kt),e&&o(Le),e&&o(Ft),e&&o(J),e&&o(Mt),e&&o(K),e&&o(It),e&&o(z),e&&o(jt),e&&o(S),N(he),e&&o(zt),e&&o(L),N(fe),e&&o(Pt),e&&o(D),N(pe),e&&o(At),e&&o($),N(ue),N(ve),e&&o(qt),e&&o(V),N(_e),e&&o(Ot),e&&o(I),N(xe),e&&o(St),e&&o(W),N(we),e&&o(Lt),e&&o(j),N(Ne),N(ye),N(oe),N(Te),e&&o(Dt),e&&o(U),N(Ee),e&&o(Xt),e&&o(F),N(ke),N(Ie),N(ae),N(je)}}}const La={local:"convnext",sections:[{local:"overview",title:"Overview"},{local:"transformers.models.convnext.modeling_convnext.ConvNextModelOutput",title:"ConvNeXT specific outputs"},{local:"transformers.ConvNextConfig",title:"ConvNextConfig"},{local:"transformers.ConvNextFeatureExtractor",title:"ConvNextFeatureExtractor"},{local:"transformers.ConvNextModel",title:"ConvNextModel"},{local:"transformers.ConvNextForImageClassification",title:"ConvNextForImageClassification"}],title:"ConvNeXT"};function Da(se,m,y){let{fw:p}=m;return se.$$set=u=>{"fw"in u&&y(0,p=u.fw)},[p]}class Ba extends Ia{constructor(m){super();ja(this,m,Da,Sa,za,{fw:0})}}export{Ba as default,La as metadata};
