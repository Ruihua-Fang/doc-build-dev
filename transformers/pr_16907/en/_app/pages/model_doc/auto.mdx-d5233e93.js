import{S as uCt,i as _Ct,s as bCt,e as a,k as l,w as F,t as o,M as vCt,c as n,d as t,m as i,a as s,x as T,h as r,b as c,F as e,g as b,y as M,q as E,o as C,B as w,v as FCt,L as I}from"../../chunks/vendor-6b77c823.js";import{T as dqr}from"../../chunks/Tip-39098574.js";import{D as R}from"../../chunks/Docstring-1088f2fb.js";import{C as B}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as ee}from"../../chunks/IconCopyLink-7a11ce68.js";import{E as P}from"../../chunks/ExampleCodeBlock-5212b321.js";function TCt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,N3,gf,qe,Xe,ci,An,j3,yn,Ln,D3,fi,xn,G3,mi,hf,Ma;return{c(){g=a("p"),v=o("If your "),p=a("code"),m=o("NewModelConfig"),u=o(" is a subclass of "),d=a("code"),h=o("PretrainedConfig"),Mo=o(`, make sure its
`),li=a("code"),mf=o("model_type"),et=o(" attribute is set to the same key you use when registering the config (here "),ii=a("code"),di=o('"new-model"'),N3=o(")."),gf=l(),qe=a("p"),Xe=o("Likewise, if your "),ci=a("code"),An=o("NewModel"),j3=o(" is a subclass of "),yn=a("a"),Ln=o("PreTrainedModel"),D3=o(`, make sure its
`),fi=a("code"),xn=o("config_class"),G3=o(` attribute is set to the same class you use when registering the model (here
`),mi=a("code"),hf=o("NewModelConfig"),Ma=o(")."),this.h()},l(ze){g=n(ze,"P",{});var Ae=s(g);v=r(Ae,"If your "),p=n(Ae,"CODE",{});var n$=s(p);m=r(n$,"NewModelConfig"),n$.forEach(t),u=r(Ae," is a subclass of "),d=n(Ae,"CODE",{});var gi=s(d);h=r(gi,"PretrainedConfig"),gi.forEach(t),Mo=r(Ae,`, make sure its
`),li=n(Ae,"CODE",{});var s$=s(li);mf=r(s$,"model_type"),s$.forEach(t),et=r(Ae," attribute is set to the same key you use when registering the config (here "),ii=n(Ae,"CODE",{});var l$=s(ii);di=r(l$,'"new-model"'),l$.forEach(t),N3=r(Ae,")."),Ae.forEach(t),gf=i(ze),qe=n(ze,"P",{});var Eo=s(qe);Xe=r(Eo,"Likewise, if your "),ci=n(Eo,"CODE",{});var Ea=s(ci);An=r(Ea,"NewModel"),Ea.forEach(t),j3=r(Eo," is a subclass of "),yn=n(Eo,"A",{href:!0});var i$=s(yn);Ln=r(i$,"PreTrainedModel"),i$.forEach(t),D3=r(Eo,`, make sure its
`),fi=n(Eo,"CODE",{});var pf=s(fi);xn=r(pf,"config_class"),pf.forEach(t),G3=r(Eo,` attribute is set to the same class you use when registering the model (here
`),mi=n(Eo,"CODE",{});var d$=s(mi);hf=r(d$,"NewModelConfig"),d$.forEach(t),Ma=r(Eo,")."),Eo.forEach(t),this.h()},h(){c(yn,"href","/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel")},m(ze,Ae){b(ze,g,Ae),e(g,v),e(g,p),e(p,m),e(g,u),e(g,d),e(d,h),e(g,Mo),e(g,li),e(li,mf),e(g,et),e(g,ii),e(ii,di),e(g,N3),b(ze,gf,Ae),b(ze,qe,Ae),e(qe,Xe),e(qe,ci),e(ci,An),e(qe,j3),e(qe,yn),e(yn,Ln),e(qe,D3),e(qe,fi),e(fi,xn),e(qe,G3),e(qe,mi),e(mi,hf),e(qe,Ma)},d(ze){ze&&t(g),ze&&t(gf),ze&&t(qe)}}}function MCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ECt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function CCt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function wCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ACt(A){let g,v,p,m,u;return{c(){g=a("p"),v=o("Passing "),p=a("code"),m=o("use_auth_token=True"),u=o(" is required when you want to use a private model.")},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Passing "),p=n(h,"CODE",{});var Mo=s(p);m=r(Mo,"use_auth_token=True"),Mo.forEach(t),u=r(h," is required when you want to use a private model."),h.forEach(t)},m(d,h){b(d,g,h),e(g,v),e(g,p),e(p,m),e(g,u)},d(d){d&&t(g)}}}function yCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function LCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function xCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $Ct(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function kCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function SCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function RCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function BCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function PCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ICt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function qCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function NCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function jCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function DCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function GCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function OCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function VCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function XCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function zCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function QCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function WCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function HCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function UCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function JCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function YCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function KCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ZCt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function e3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function o3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function r3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function t3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function a3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function n3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function s3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function l3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function i3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function d3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function c3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function f3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function m3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function g3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function h3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function p3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function u3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function b3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function v3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function F3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function T3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function M3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function E3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function C3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function w3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function A3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function y3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function L3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function x3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function $3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function k3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function S3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function R3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function B3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function P3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function I3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function q3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function N3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function j3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function D3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function G3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function O3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function V3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function X3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function z3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Q3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function W3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function H3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function U3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function J3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Y3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function K3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function Z3t(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function ewt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function owt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function rwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function twt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function awt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function nwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function swt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function lwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function iwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function dwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function cwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function fwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function mwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function gwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function hwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function pwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function uwt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function _wt(A){let g,v,p,m,u;return m=new B({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){g=a("p"),v=o("Examples:"),p=l(),F(m.$$.fragment)},l(d){g=n(d,"P",{});var h=s(g);v=r(h,"Examples:"),h.forEach(t),p=i(d),T(m.$$.fragment,d)},m(d,h){b(d,g,h),e(g,v),b(d,p,h),M(m,d,h),u=!0},p:I,i(d){u||(E(m.$$.fragment,d),u=!0)},o(d){C(m.$$.fragment,d),u=!1},d(d){d&&t(g),d&&t(p),w(m,d)}}}function bwt(A){let g,v,p,m,u,d,h,Mo,li,mf,et,ii,di,N3,gf,qe,Xe,ci,An,j3,yn,Ln,D3,fi,xn,G3,mi,hf,Ma,ze,Ae,n$,gi,s$,l$,Eo,Ea,i$,pf,d$,bje,lPe,hi,uf,qZ,O3,vje,NZ,Fje,iPe,$n,Tje,jZ,Mje,Eje,DZ,Cje,wje,dPe,V3,cPe,c$,Aje,fPe,_f,mPe,pi,bf,GZ,X3,yje,OZ,Lje,gPe,Co,z3,xje,Q3,$je,f$,kje,Sje,Rje,W3,Bje,VZ,Pje,Ije,qje,Er,H3,Nje,XZ,jje,Dje,ui,Gje,zZ,Oje,Vje,QZ,Xje,zje,Qje,y,vf,WZ,Wje,Hje,m$,Uje,Jje,Yje,Ff,HZ,Kje,Zje,g$,eDe,oDe,rDe,Tf,UZ,tDe,aDe,h$,nDe,sDe,lDe,Mf,JZ,iDe,dDe,p$,cDe,fDe,mDe,Ef,YZ,gDe,hDe,u$,pDe,uDe,_De,Cf,KZ,bDe,vDe,_$,FDe,TDe,MDe,wf,ZZ,EDe,CDe,b$,wDe,ADe,yDe,Af,eee,LDe,xDe,v$,$De,kDe,SDe,yf,oee,RDe,BDe,F$,PDe,IDe,qDe,Lf,ree,NDe,jDe,T$,DDe,GDe,ODe,xf,tee,VDe,XDe,M$,zDe,QDe,WDe,$f,aee,HDe,UDe,E$,JDe,YDe,KDe,kf,nee,ZDe,eGe,C$,oGe,rGe,tGe,Sf,see,aGe,nGe,w$,sGe,lGe,iGe,Rf,lee,dGe,cGe,A$,fGe,mGe,gGe,Bf,iee,hGe,pGe,y$,uGe,_Ge,bGe,Pf,dee,vGe,FGe,L$,TGe,MGe,EGe,If,cee,CGe,wGe,x$,AGe,yGe,LGe,qf,fee,xGe,$Ge,$$,kGe,SGe,RGe,Nf,mee,BGe,PGe,k$,IGe,qGe,NGe,jf,gee,jGe,DGe,S$,GGe,OGe,VGe,Df,hee,XGe,zGe,R$,QGe,WGe,HGe,Gf,pee,UGe,JGe,B$,YGe,KGe,ZGe,Of,uee,eOe,oOe,P$,rOe,tOe,aOe,Vf,_ee,nOe,sOe,I$,lOe,iOe,dOe,Xf,bee,cOe,fOe,q$,mOe,gOe,hOe,zf,vee,pOe,uOe,N$,_Oe,bOe,vOe,Qf,Fee,FOe,TOe,j$,MOe,EOe,COe,Wf,Tee,wOe,AOe,D$,yOe,LOe,xOe,Hf,Mee,$Oe,kOe,G$,SOe,ROe,BOe,Uf,Eee,POe,IOe,O$,qOe,NOe,jOe,Jf,Cee,DOe,GOe,V$,OOe,VOe,XOe,Yf,wee,zOe,QOe,X$,WOe,HOe,UOe,Kf,Aee,JOe,YOe,z$,KOe,ZOe,eVe,Zf,yee,oVe,rVe,Q$,tVe,aVe,nVe,em,Lee,sVe,lVe,W$,iVe,dVe,cVe,om,xee,fVe,mVe,H$,gVe,hVe,pVe,rm,$ee,uVe,_Ve,U$,bVe,vVe,FVe,tm,kee,TVe,MVe,J$,EVe,CVe,wVe,am,See,AVe,yVe,Y$,LVe,xVe,$Ve,nm,Ree,kVe,SVe,K$,RVe,BVe,PVe,sm,Bee,IVe,qVe,Z$,NVe,jVe,DVe,lm,Pee,GVe,OVe,ek,VVe,XVe,zVe,im,Iee,QVe,WVe,ok,HVe,UVe,JVe,dm,qee,YVe,KVe,rk,ZVe,eXe,oXe,cm,Nee,rXe,tXe,tk,aXe,nXe,sXe,fm,jee,lXe,iXe,ak,dXe,cXe,fXe,mm,Dee,mXe,gXe,nk,hXe,pXe,uXe,gm,Gee,_Xe,bXe,sk,vXe,FXe,TXe,hm,Oee,MXe,EXe,lk,CXe,wXe,AXe,pm,Vee,yXe,LXe,ik,xXe,$Xe,kXe,um,Xee,SXe,RXe,dk,BXe,PXe,IXe,_m,zee,qXe,NXe,ck,jXe,DXe,GXe,bm,Qee,OXe,VXe,fk,XXe,zXe,QXe,vm,Wee,WXe,HXe,mk,UXe,JXe,YXe,Fm,Hee,KXe,ZXe,gk,eze,oze,rze,Tm,Uee,tze,aze,hk,nze,sze,lze,Mm,Jee,ize,dze,pk,cze,fze,mze,Em,Yee,gze,hze,uk,pze,uze,_ze,Cm,Kee,bze,vze,_k,Fze,Tze,Mze,wm,Zee,Eze,Cze,bk,wze,Aze,yze,Am,eoe,Lze,xze,vk,$ze,kze,Sze,ym,ooe,Rze,Bze,Fk,Pze,Ize,qze,Lm,roe,Nze,jze,Tk,Dze,Gze,Oze,xm,toe,Vze,Xze,Mk,zze,Qze,Wze,$m,aoe,Hze,Uze,Ek,Jze,Yze,Kze,km,noe,Zze,eQe,Ck,oQe,rQe,tQe,Sm,soe,aQe,nQe,wk,sQe,lQe,iQe,Rm,loe,dQe,cQe,Ak,fQe,mQe,gQe,Bm,ioe,hQe,pQe,yk,uQe,_Qe,bQe,Pm,doe,vQe,FQe,Lk,TQe,MQe,EQe,Im,coe,CQe,wQe,xk,AQe,yQe,LQe,qm,foe,xQe,$Qe,$k,kQe,SQe,RQe,Nm,moe,BQe,PQe,kk,IQe,qQe,NQe,jm,goe,jQe,DQe,Sk,GQe,OQe,VQe,Dm,hoe,XQe,zQe,Rk,QQe,WQe,HQe,Gm,poe,UQe,JQe,Bk,YQe,KQe,ZQe,Om,uoe,eWe,oWe,Pk,rWe,tWe,aWe,Vm,_oe,nWe,sWe,Ik,lWe,iWe,dWe,Xm,boe,cWe,fWe,qk,mWe,gWe,hWe,zm,voe,pWe,uWe,Nk,_We,bWe,vWe,Qm,Foe,FWe,TWe,jk,MWe,EWe,CWe,Wm,Toe,wWe,AWe,Dk,yWe,LWe,xWe,Hm,Moe,$We,kWe,Gk,SWe,RWe,BWe,Um,Eoe,PWe,IWe,Ok,qWe,NWe,jWe,Jm,Coe,DWe,GWe,Vk,OWe,VWe,XWe,Ym,woe,zWe,QWe,Xk,WWe,HWe,UWe,Km,Aoe,JWe,YWe,zk,KWe,ZWe,eHe,Zm,yoe,oHe,rHe,Qk,tHe,aHe,nHe,eg,Loe,sHe,lHe,Wk,iHe,dHe,cHe,og,xoe,fHe,mHe,Hk,gHe,hHe,pHe,rg,$oe,uHe,_He,Uk,bHe,vHe,FHe,tg,koe,THe,MHe,Jk,EHe,CHe,wHe,ag,Soe,AHe,yHe,Yk,LHe,xHe,$He,ng,Roe,kHe,SHe,Kk,RHe,BHe,PHe,sg,Boe,IHe,qHe,Zk,NHe,jHe,DHe,lg,Poe,GHe,OHe,eS,VHe,XHe,zHe,ig,Ioe,QHe,WHe,oS,HHe,UHe,JHe,dg,qoe,YHe,KHe,rS,ZHe,eUe,oUe,cg,Noe,rUe,tUe,tS,aUe,nUe,sUe,fg,joe,lUe,iUe,aS,dUe,cUe,fUe,mg,Doe,mUe,gUe,nS,hUe,pUe,uUe,gg,Goe,_Ue,bUe,sS,vUe,FUe,TUe,hg,MUe,pg,U3,EUe,Ooe,CUe,hPe,_i,ug,Voe,J3,wUe,Xoe,AUe,pPe,wo,Y3,yUe,K3,LUe,lS,xUe,$Ue,kUe,Z3,SUe,zoe,RUe,BUe,PUe,Cr,ew,IUe,Qoe,qUe,NUe,Ca,jUe,Woe,DUe,GUe,Hoe,OUe,VUe,Uoe,XUe,zUe,QUe,k,kn,Joe,WUe,HUe,iS,UUe,JUe,dS,YUe,KUe,ZUe,Sn,Yoe,eJe,oJe,cS,rJe,tJe,fS,aJe,nJe,sJe,Rn,Koe,lJe,iJe,mS,dJe,cJe,gS,fJe,mJe,gJe,_g,Zoe,hJe,pJe,hS,uJe,_Je,bJe,Bn,ere,vJe,FJe,pS,TJe,MJe,uS,EJe,CJe,wJe,bg,ore,AJe,yJe,_S,LJe,xJe,$Je,vg,rre,kJe,SJe,bS,RJe,BJe,PJe,Fg,tre,IJe,qJe,vS,NJe,jJe,DJe,Pn,are,GJe,OJe,FS,VJe,XJe,TS,zJe,QJe,WJe,In,nre,HJe,UJe,MS,JJe,YJe,ES,KJe,ZJe,eYe,qn,sre,oYe,rYe,CS,tYe,aYe,wS,nYe,sYe,lYe,Tg,lre,iYe,dYe,AS,cYe,fYe,mYe,Mg,ire,gYe,hYe,yS,pYe,uYe,_Ye,Nn,dre,bYe,vYe,LS,FYe,TYe,xS,MYe,EYe,CYe,Eg,cre,wYe,AYe,$S,yYe,LYe,xYe,jn,fre,$Ye,kYe,kS,SYe,RYe,SS,BYe,PYe,IYe,Dn,mre,qYe,NYe,RS,jYe,DYe,BS,GYe,OYe,VYe,Gn,gre,XYe,zYe,PS,QYe,WYe,IS,HYe,UYe,JYe,Cg,hre,YYe,KYe,qS,ZYe,eKe,oKe,On,pre,rKe,tKe,NS,aKe,nKe,jS,sKe,lKe,iKe,Vn,ure,dKe,cKe,DS,fKe,mKe,GS,gKe,hKe,pKe,Xn,_re,uKe,_Ke,OS,bKe,vKe,VS,FKe,TKe,MKe,zn,bre,EKe,CKe,XS,wKe,AKe,zS,yKe,LKe,xKe,Qn,vre,$Ke,kKe,QS,SKe,RKe,WS,BKe,PKe,IKe,Wn,Fre,qKe,NKe,HS,jKe,DKe,US,GKe,OKe,VKe,wg,Tre,XKe,zKe,JS,QKe,WKe,HKe,Hn,Mre,UKe,JKe,YS,YKe,KKe,KS,ZKe,eZe,oZe,Ag,Ere,rZe,tZe,ZS,aZe,nZe,sZe,Un,Cre,lZe,iZe,eR,dZe,cZe,oR,fZe,mZe,gZe,Jn,wre,hZe,pZe,rR,uZe,_Ze,tR,bZe,vZe,FZe,Yn,Are,TZe,MZe,aR,EZe,CZe,nR,wZe,AZe,yZe,Kn,yre,LZe,xZe,sR,$Ze,kZe,lR,SZe,RZe,BZe,Zn,Lre,PZe,IZe,iR,qZe,NZe,dR,jZe,DZe,GZe,yg,xre,OZe,VZe,cR,XZe,zZe,QZe,es,$re,WZe,HZe,fR,UZe,JZe,mR,YZe,KZe,ZZe,os,kre,eeo,oeo,gR,reo,teo,hR,aeo,neo,seo,rs,Sre,leo,ieo,pR,deo,ceo,uR,feo,meo,geo,ts,Rre,heo,peo,_R,ueo,_eo,bR,beo,veo,Feo,as,Bre,Teo,Meo,vR,Eeo,Ceo,FR,weo,Aeo,yeo,ns,Pre,Leo,xeo,TR,$eo,keo,MR,Seo,Reo,Beo,Lg,Ire,Peo,Ieo,ER,qeo,Neo,jeo,ss,qre,Deo,Geo,CR,Oeo,Veo,wR,Xeo,zeo,Qeo,xg,Nre,Weo,Heo,AR,Ueo,Jeo,Yeo,$g,jre,Keo,Zeo,yR,eoo,ooo,roo,ls,Dre,too,aoo,LR,noo,soo,xR,loo,ioo,doo,is,Gre,coo,foo,$R,moo,goo,kR,hoo,poo,uoo,ds,Ore,_oo,boo,SR,voo,Foo,RR,Too,Moo,Eoo,kg,Vre,Coo,woo,BR,Aoo,yoo,Loo,cs,Xre,xoo,$oo,PR,koo,Soo,IR,Roo,Boo,Poo,fs,zre,Ioo,qoo,qR,Noo,joo,NR,Doo,Goo,Ooo,ms,Qre,Voo,Xoo,jR,zoo,Qoo,DR,Woo,Hoo,Uoo,gs,Wre,Joo,Yoo,GR,Koo,Zoo,OR,ero,oro,rro,hs,Hre,tro,aro,VR,nro,sro,XR,lro,iro,dro,ps,Ure,cro,fro,zR,mro,gro,QR,hro,pro,uro,Sg,Jre,_ro,bro,WR,vro,Fro,Tro,Rg,Yre,Mro,Ero,HR,Cro,wro,Aro,Bg,Kre,yro,Lro,UR,xro,$ro,kro,Pg,Zre,Sro,Rro,JR,Bro,Pro,Iro,us,ete,qro,Nro,YR,jro,Dro,KR,Gro,Oro,Vro,Ig,ote,Xro,zro,ZR,Qro,Wro,Hro,_s,rte,Uro,Jro,eB,Yro,Kro,oB,Zro,eto,oto,bs,tte,rto,tto,rB,ato,nto,tB,sto,lto,ito,vs,ate,dto,cto,aB,fto,mto,nB,gto,hto,pto,Fs,nte,uto,_to,sB,bto,vto,lB,Fto,Tto,Mto,Ts,ste,Eto,Cto,iB,wto,Ato,dB,yto,Lto,xto,Ms,lte,$to,kto,cB,Sto,Rto,fB,Bto,Pto,Ito,qg,ite,qto,Nto,mB,jto,Dto,Gto,Ng,dte,Oto,Vto,gB,Xto,zto,Qto,Es,cte,Wto,Hto,hB,Uto,Jto,pB,Yto,Kto,Zto,Cs,fte,eao,oao,uB,rao,tao,_B,aao,nao,sao,ws,mte,lao,iao,bB,dao,cao,vB,fao,mao,gao,jg,gte,hao,pao,FB,uao,_ao,bao,Dg,hte,vao,Fao,TB,Tao,Mao,Eao,Gg,pte,Cao,wao,MB,Aao,yao,Lao,As,ute,xao,$ao,EB,kao,Sao,CB,Rao,Bao,Pao,Og,_te,Iao,qao,wB,Nao,jao,Dao,Vg,bte,Gao,Oao,AB,Vao,Xao,zao,ys,vte,Qao,Wao,yB,Hao,Uao,LB,Jao,Yao,Kao,Xg,Fte,Zao,eno,xB,ono,rno,tno,zg,Tte,ano,nno,$B,sno,lno,ino,Ls,Mte,dno,cno,kB,fno,mno,SB,gno,hno,pno,xs,Ete,uno,_no,RB,bno,vno,BB,Fno,Tno,Mno,$s,Cte,Eno,Cno,PB,wno,Ano,IB,yno,Lno,xno,ks,wte,$no,kno,qB,Sno,Rno,NB,Bno,Pno,Ino,Qg,qno,Wg,ow,Nno,Ate,jno,uPe,bi,Hg,yte,rw,Dno,Lte,Gno,_Pe,Ao,tw,Ono,aw,Vno,jB,Xno,zno,Qno,nw,Wno,xte,Hno,Uno,Jno,Qe,sw,Yno,$te,Kno,Zno,wa,eso,kte,oso,rso,Ste,tso,aso,Rte,nso,sso,lso,te,Ug,Bte,iso,dso,DB,cso,fso,mso,Jg,Pte,gso,hso,GB,pso,uso,_so,Yg,Ite,bso,vso,OB,Fso,Tso,Mso,Kg,qte,Eso,Cso,VB,wso,Aso,yso,Zg,Nte,Lso,xso,XB,$so,kso,Sso,eh,jte,Rso,Bso,zB,Pso,Iso,qso,oh,Dte,Nso,jso,QB,Dso,Gso,Oso,rh,Gte,Vso,Xso,WB,zso,Qso,Wso,th,Ote,Hso,Uso,HB,Jso,Yso,Kso,ah,Vte,Zso,elo,UB,olo,rlo,tlo,nh,Xte,alo,nlo,JB,slo,llo,ilo,sh,zte,dlo,clo,YB,flo,mlo,glo,lh,Qte,hlo,plo,KB,ulo,_lo,blo,ih,Wte,vlo,Flo,ZB,Tlo,Mlo,Elo,dh,Hte,Clo,wlo,eP,Alo,ylo,Llo,ch,Ute,xlo,$lo,oP,klo,Slo,Rlo,fh,Jte,Blo,Plo,rP,Ilo,qlo,Nlo,mh,Yte,jlo,Dlo,tP,Glo,Olo,Vlo,gh,Kte,Xlo,zlo,aP,Qlo,Wlo,Hlo,hh,Zte,Ulo,Jlo,nP,Ylo,Klo,Zlo,ph,eae,eio,oio,sP,rio,tio,aio,uh,oae,nio,sio,lP,lio,iio,dio,_h,rae,cio,fio,iP,mio,gio,hio,bh,tae,pio,uio,dP,_io,bio,vio,vh,Fio,Fh,Tio,Th,lw,Mio,aae,Eio,bPe,vi,Mh,nae,iw,Cio,sae,wio,vPe,yo,dw,Aio,cw,yio,cP,Lio,xio,$io,fw,kio,lae,Sio,Rio,Bio,We,mw,Pio,iae,Iio,qio,Fi,Nio,dae,jio,Dio,cae,Gio,Oio,Vio,be,Eh,fae,Xio,zio,fP,Qio,Wio,Hio,Ch,mae,Uio,Jio,mP,Yio,Kio,Zio,wh,gae,edo,odo,gP,rdo,tdo,ado,Ah,hae,ndo,sdo,hP,ldo,ido,ddo,yh,pae,cdo,fdo,pP,mdo,gdo,hdo,Lh,uae,pdo,udo,uP,_do,bdo,vdo,xh,_ae,Fdo,Tdo,_P,Mdo,Edo,Cdo,$h,bae,wdo,Ado,bP,ydo,Ldo,xdo,kh,vae,$do,kdo,vP,Sdo,Rdo,Bdo,Sh,Fae,Pdo,Ido,FP,qdo,Ndo,jdo,Rh,Tae,Ddo,Gdo,TP,Odo,Vdo,Xdo,Bh,Mae,zdo,Qdo,MP,Wdo,Hdo,Udo,Ph,Eae,Jdo,Ydo,EP,Kdo,Zdo,eco,Ih,Cae,oco,rco,CP,tco,aco,nco,qh,sco,Nh,lco,jh,gw,ico,wae,dco,FPe,Ti,Dh,Aae,hw,cco,yae,fco,TPe,Lo,pw,mco,Mi,gco,wP,hco,pco,AP,uco,_co,bco,uw,vco,Lae,Fco,Tco,Mco,ot,_w,Eco,xae,Cco,wco,Ei,Aco,$ae,yco,Lco,yP,xco,$co,kco,Gh,Sco,He,bw,Rco,kae,Bco,Pco,Aa,Ico,Sae,qco,Nco,Rae,jco,Dco,Bae,Gco,Oco,Vco,x,Oh,Pae,Xco,zco,LP,Qco,Wco,Hco,Vh,Iae,Uco,Jco,xP,Yco,Kco,Zco,Xh,qae,efo,ofo,$P,rfo,tfo,afo,zh,Nae,nfo,sfo,kP,lfo,ifo,dfo,Qh,jae,cfo,ffo,SP,mfo,gfo,hfo,Wh,Dae,pfo,ufo,RP,_fo,bfo,vfo,Hh,Gae,Ffo,Tfo,BP,Mfo,Efo,Cfo,Uh,Oae,wfo,Afo,PP,yfo,Lfo,xfo,Jh,Vae,$fo,kfo,IP,Sfo,Rfo,Bfo,Yh,Xae,Pfo,Ifo,qP,qfo,Nfo,jfo,Kh,zae,Dfo,Gfo,NP,Ofo,Vfo,Xfo,Zh,Qae,zfo,Qfo,jP,Wfo,Hfo,Ufo,ep,Wae,Jfo,Yfo,DP,Kfo,Zfo,emo,op,Hae,omo,rmo,GP,tmo,amo,nmo,rp,Uae,smo,lmo,OP,imo,dmo,cmo,tp,Jae,fmo,mmo,VP,gmo,hmo,pmo,ap,Yae,umo,_mo,XP,bmo,vmo,Fmo,np,Kae,Tmo,Mmo,zP,Emo,Cmo,wmo,sp,Zae,Amo,ymo,QP,Lmo,xmo,$mo,lp,ene,kmo,Smo,WP,Rmo,Bmo,Pmo,ip,one,Imo,qmo,HP,Nmo,jmo,Dmo,dp,rne,Gmo,Omo,UP,Vmo,Xmo,zmo,cp,tne,Qmo,Wmo,JP,Hmo,Umo,Jmo,fp,ane,Ymo,Kmo,YP,Zmo,ego,ogo,mp,nne,rgo,tgo,KP,ago,ngo,sgo,gp,sne,lgo,igo,ZP,dgo,cgo,fgo,hp,lne,mgo,ggo,eI,hgo,pgo,ugo,pp,ine,_go,bgo,oI,vgo,Fgo,Tgo,up,dne,Mgo,Ego,rI,Cgo,wgo,Ago,_p,cne,ygo,Lgo,tI,xgo,$go,kgo,Ss,fne,Sgo,Rgo,aI,Bgo,Pgo,nI,Igo,qgo,Ngo,bp,mne,jgo,Dgo,sI,Ggo,Ogo,Vgo,vp,gne,Xgo,zgo,lI,Qgo,Wgo,Hgo,Fp,hne,Ugo,Jgo,iI,Ygo,Kgo,Zgo,Tp,pne,eho,oho,dI,rho,tho,aho,Mp,une,nho,sho,cI,lho,iho,dho,Ep,_ne,cho,fho,fI,mho,gho,hho,Cp,bne,pho,uho,mI,_ho,bho,vho,wp,vne,Fho,Tho,gI,Mho,Eho,Cho,Ap,Fne,who,Aho,hI,yho,Lho,xho,yp,Tne,$ho,kho,pI,Sho,Rho,Bho,Lp,Mne,Pho,Iho,uI,qho,Nho,jho,xp,Ene,Dho,Gho,_I,Oho,Vho,Xho,$p,Cne,zho,Qho,bI,Who,Hho,Uho,kp,wne,Jho,Yho,vI,Kho,Zho,epo,Sp,Ane,opo,rpo,FI,tpo,apo,npo,Rp,yne,spo,lpo,TI,ipo,dpo,cpo,Bp,Lne,fpo,mpo,MI,gpo,hpo,ppo,Pp,xne,upo,_po,EI,bpo,vpo,Fpo,Ip,$ne,Tpo,Mpo,CI,Epo,Cpo,wpo,qp,kne,Apo,ypo,wI,Lpo,xpo,$po,Np,Sne,kpo,Spo,AI,Rpo,Bpo,Ppo,jp,Rne,Ipo,qpo,yI,Npo,jpo,Dpo,Dp,Bne,Gpo,Opo,LI,Vpo,Xpo,zpo,Gp,Pne,Qpo,Wpo,xI,Hpo,Upo,Jpo,Op,Ine,Ypo,Kpo,$I,Zpo,euo,ouo,Vp,qne,ruo,tuo,kI,auo,nuo,suo,Xp,Nne,luo,iuo,SI,duo,cuo,fuo,zp,jne,muo,guo,RI,huo,puo,uuo,Qp,Dne,_uo,buo,BI,vuo,Fuo,Tuo,Wp,Gne,Muo,Euo,PI,Cuo,wuo,Auo,Hp,One,yuo,Luo,II,xuo,$uo,kuo,Up,Vne,Suo,Ruo,qI,Buo,Puo,Iuo,Jp,Xne,quo,Nuo,NI,juo,Duo,Guo,Yp,zne,Ouo,Vuo,jI,Xuo,zuo,Quo,Kp,Qne,Wuo,Huo,DI,Uuo,Juo,Yuo,Zp,Wne,Kuo,Zuo,GI,e_o,o_o,r_o,eu,Hne,t_o,a_o,OI,n_o,s_o,l_o,ou,Une,i_o,d_o,VI,c_o,f_o,m_o,ru,Jne,g_o,h_o,XI,p_o,u_o,__o,tu,Yne,b_o,v_o,zI,F_o,T_o,M_o,au,Kne,E_o,C_o,QI,w_o,A_o,y_o,nu,Zne,L_o,x_o,WI,$_o,k_o,S_o,su,ese,R_o,B_o,HI,P_o,I_o,q_o,lu,ose,N_o,j_o,UI,D_o,G_o,O_o,iu,rse,V_o,X_o,JI,z_o,Q_o,W_o,du,tse,H_o,U_o,YI,J_o,Y_o,K_o,cu,ase,Z_o,e1o,KI,o1o,r1o,t1o,fu,nse,a1o,n1o,ZI,s1o,l1o,i1o,mu,sse,d1o,c1o,eq,f1o,m1o,g1o,gu,lse,h1o,p1o,oq,u1o,_1o,b1o,hu,ise,v1o,F1o,rq,T1o,M1o,E1o,pu,dse,C1o,w1o,tq,A1o,y1o,L1o,uu,cse,x1o,$1o,aq,k1o,S1o,R1o,_u,fse,B1o,P1o,nq,I1o,q1o,N1o,bu,mse,j1o,D1o,sq,G1o,O1o,V1o,vu,gse,X1o,z1o,lq,Q1o,W1o,H1o,Fu,hse,U1o,J1o,iq,Y1o,K1o,Z1o,Tu,pse,ebo,obo,dq,rbo,tbo,abo,Mu,use,nbo,sbo,cq,lbo,ibo,dbo,Eu,_se,cbo,fbo,fq,mbo,gbo,hbo,Cu,bse,pbo,ubo,mq,_bo,bbo,vbo,wu,vse,Fbo,Tbo,gq,Mbo,Ebo,Cbo,Au,Fse,wbo,Abo,hq,ybo,Lbo,xbo,yu,Tse,$bo,kbo,pq,Sbo,Rbo,Bbo,Lu,Pbo,Mse,Ibo,qbo,Ese,Nbo,jbo,xu,MPe,Ci,$u,Cse,vw,Dbo,wse,Gbo,EPe,xo,Fw,Obo,wi,Vbo,uq,Xbo,zbo,_q,Qbo,Wbo,Hbo,Tw,Ubo,Ase,Jbo,Ybo,Kbo,rt,Mw,Zbo,yse,e2o,o2o,Ai,r2o,Lse,t2o,a2o,bq,n2o,s2o,l2o,ku,i2o,Ue,Ew,d2o,xse,c2o,f2o,ya,m2o,$se,g2o,h2o,kse,p2o,u2o,Sse,_2o,b2o,v2o,G,Su,Rse,F2o,T2o,vq,M2o,E2o,C2o,Ru,Bse,w2o,A2o,Fq,y2o,L2o,x2o,Bu,Pse,$2o,k2o,Tq,S2o,R2o,B2o,Pu,Ise,P2o,I2o,Mq,q2o,N2o,j2o,Iu,qse,D2o,G2o,Eq,O2o,V2o,X2o,qu,Nse,z2o,Q2o,Cq,W2o,H2o,U2o,Nu,jse,J2o,Y2o,wq,K2o,Z2o,evo,ju,Dse,ovo,rvo,Aq,tvo,avo,nvo,Du,Gse,svo,lvo,yq,ivo,dvo,cvo,Gu,Ose,fvo,mvo,Lq,gvo,hvo,pvo,Ou,Vse,uvo,_vo,xq,bvo,vvo,Fvo,Vu,Xse,Tvo,Mvo,$q,Evo,Cvo,wvo,Xu,zse,Avo,yvo,kq,Lvo,xvo,$vo,zu,Qse,kvo,Svo,Sq,Rvo,Bvo,Pvo,Qu,Wse,Ivo,qvo,Rq,Nvo,jvo,Dvo,Wu,Hse,Gvo,Ovo,Bq,Vvo,Xvo,zvo,Hu,Use,Qvo,Wvo,Pq,Hvo,Uvo,Jvo,Uu,Jse,Yvo,Kvo,Iq,Zvo,eFo,oFo,Ju,Yse,rFo,tFo,qq,aFo,nFo,sFo,Yu,Kse,lFo,iFo,Nq,dFo,cFo,fFo,Ku,Zse,mFo,gFo,jq,hFo,pFo,uFo,Zu,ele,_Fo,bFo,Dq,vFo,FFo,TFo,e_,ole,MFo,EFo,Gq,CFo,wFo,AFo,o_,rle,yFo,LFo,Oq,xFo,$Fo,kFo,r_,tle,SFo,RFo,Vq,BFo,PFo,IFo,t_,ale,qFo,NFo,Xq,jFo,DFo,GFo,a_,nle,OFo,VFo,zq,XFo,zFo,QFo,n_,sle,WFo,HFo,Qq,UFo,JFo,YFo,s_,lle,KFo,ZFo,Wq,e0o,o0o,r0o,l_,ile,t0o,a0o,Hq,n0o,s0o,l0o,i_,dle,i0o,d0o,Uq,c0o,f0o,m0o,d_,cle,g0o,h0o,Jq,p0o,u0o,_0o,c_,fle,b0o,v0o,Yq,F0o,T0o,M0o,f_,mle,E0o,C0o,Kq,w0o,A0o,y0o,m_,gle,L0o,x0o,Zq,$0o,k0o,S0o,g_,hle,R0o,B0o,eN,P0o,I0o,q0o,h_,ple,N0o,j0o,oN,D0o,G0o,O0o,p_,ule,V0o,X0o,rN,z0o,Q0o,W0o,u_,_le,H0o,U0o,tN,J0o,Y0o,K0o,__,Z0o,ble,e6o,o6o,vle,r6o,t6o,b_,CPe,yi,v_,Fle,Cw,a6o,Tle,n6o,wPe,$o,ww,s6o,Li,l6o,aN,i6o,d6o,nN,c6o,f6o,m6o,Aw,g6o,Mle,h6o,p6o,u6o,tt,yw,_6o,Ele,b6o,v6o,xi,F6o,Cle,T6o,M6o,sN,E6o,C6o,w6o,F_,A6o,Je,Lw,y6o,wle,L6o,x6o,La,$6o,Ale,k6o,S6o,yle,R6o,B6o,Lle,P6o,I6o,q6o,z,T_,xle,N6o,j6o,lN,D6o,G6o,O6o,M_,$le,V6o,X6o,iN,z6o,Q6o,W6o,E_,kle,H6o,U6o,dN,J6o,Y6o,K6o,C_,Sle,Z6o,eTo,cN,oTo,rTo,tTo,w_,Rle,aTo,nTo,fN,sTo,lTo,iTo,A_,Ble,dTo,cTo,mN,fTo,mTo,gTo,y_,Ple,hTo,pTo,gN,uTo,_To,bTo,L_,Ile,vTo,FTo,hN,TTo,MTo,ETo,x_,qle,CTo,wTo,pN,ATo,yTo,LTo,$_,Nle,xTo,$To,uN,kTo,STo,RTo,k_,jle,BTo,PTo,_N,ITo,qTo,NTo,S_,Dle,jTo,DTo,bN,GTo,OTo,VTo,R_,Gle,XTo,zTo,vN,QTo,WTo,HTo,B_,Ole,UTo,JTo,FN,YTo,KTo,ZTo,P_,Vle,e7o,o7o,TN,r7o,t7o,a7o,I_,Xle,n7o,s7o,MN,l7o,i7o,d7o,q_,zle,c7o,f7o,EN,m7o,g7o,h7o,N_,Qle,p7o,u7o,CN,_7o,b7o,v7o,j_,Wle,F7o,T7o,wN,M7o,E7o,C7o,D_,Hle,w7o,A7o,AN,y7o,L7o,x7o,G_,Ule,$7o,k7o,yN,S7o,R7o,B7o,O_,Jle,P7o,I7o,LN,q7o,N7o,j7o,V_,Yle,D7o,G7o,xN,O7o,V7o,X7o,X_,Kle,z7o,Q7o,$N,W7o,H7o,U7o,z_,Zle,J7o,Y7o,kN,K7o,Z7o,e9o,Q_,eie,o9o,r9o,SN,t9o,a9o,n9o,W_,oie,s9o,l9o,RN,i9o,d9o,c9o,H_,rie,f9o,m9o,BN,g9o,h9o,p9o,U_,tie,u9o,_9o,PN,b9o,v9o,F9o,J_,aie,T9o,M9o,IN,E9o,C9o,w9o,Y_,nie,A9o,y9o,qN,L9o,x9o,$9o,K_,sie,k9o,S9o,NN,R9o,B9o,P9o,Z_,lie,I9o,q9o,jN,N9o,j9o,D9o,e1,iie,G9o,O9o,DN,V9o,X9o,z9o,o1,die,Q9o,W9o,GN,H9o,U9o,J9o,r1,Y9o,cie,K9o,Z9o,fie,eMo,oMo,t1,APe,$i,a1,mie,xw,rMo,gie,tMo,yPe,ko,$w,aMo,ki,nMo,ON,sMo,lMo,VN,iMo,dMo,cMo,kw,fMo,hie,mMo,gMo,hMo,at,Sw,pMo,pie,uMo,_Mo,Si,bMo,uie,vMo,FMo,XN,TMo,MMo,EMo,n1,CMo,Ye,Rw,wMo,_ie,AMo,yMo,xa,LMo,bie,xMo,$Mo,vie,kMo,SMo,Fie,RMo,BMo,PMo,Q,s1,Tie,IMo,qMo,zN,NMo,jMo,DMo,l1,Mie,GMo,OMo,QN,VMo,XMo,zMo,i1,Eie,QMo,WMo,WN,HMo,UMo,JMo,d1,Cie,YMo,KMo,HN,ZMo,e4o,o4o,c1,wie,r4o,t4o,UN,a4o,n4o,s4o,f1,Aie,l4o,i4o,JN,d4o,c4o,f4o,m1,yie,m4o,g4o,YN,h4o,p4o,u4o,g1,Lie,_4o,b4o,KN,v4o,F4o,T4o,h1,xie,M4o,E4o,ZN,C4o,w4o,A4o,p1,$ie,y4o,L4o,ej,x4o,$4o,k4o,u1,kie,S4o,R4o,oj,B4o,P4o,I4o,_1,Sie,q4o,N4o,rj,j4o,D4o,G4o,b1,Rie,O4o,V4o,tj,X4o,z4o,Q4o,v1,Bie,W4o,H4o,aj,U4o,J4o,Y4o,F1,Pie,K4o,Z4o,nj,eEo,oEo,rEo,T1,Iie,tEo,aEo,sj,nEo,sEo,lEo,M1,qie,iEo,dEo,lj,cEo,fEo,mEo,E1,Nie,gEo,hEo,ij,pEo,uEo,_Eo,C1,jie,bEo,vEo,dj,FEo,TEo,MEo,w1,Die,EEo,CEo,cj,wEo,AEo,yEo,A1,Gie,LEo,xEo,fj,$Eo,kEo,SEo,y1,Oie,REo,BEo,mj,PEo,IEo,qEo,L1,Vie,NEo,jEo,gj,DEo,GEo,OEo,x1,Xie,VEo,XEo,hj,zEo,QEo,WEo,$1,zie,HEo,UEo,pj,JEo,YEo,KEo,k1,Qie,ZEo,e5o,uj,o5o,r5o,t5o,S1,Wie,a5o,n5o,_j,s5o,l5o,i5o,R1,Hie,d5o,c5o,bj,f5o,m5o,g5o,B1,Uie,h5o,p5o,vj,u5o,_5o,b5o,P1,Jie,v5o,F5o,Fj,T5o,M5o,E5o,I1,Yie,C5o,w5o,Kie,A5o,y5o,L5o,q1,Zie,x5o,$5o,Tj,k5o,S5o,R5o,N1,ede,B5o,P5o,Mj,I5o,q5o,N5o,j1,ode,j5o,D5o,Ej,G5o,O5o,V5o,D1,rde,X5o,z5o,Cj,Q5o,W5o,H5o,G1,U5o,tde,J5o,Y5o,ade,K5o,Z5o,O1,LPe,Ri,V1,nde,Bw,eCo,sde,oCo,xPe,So,Pw,rCo,Bi,tCo,wj,aCo,nCo,Aj,sCo,lCo,iCo,Iw,dCo,lde,cCo,fCo,mCo,nt,qw,gCo,ide,hCo,pCo,Pi,uCo,dde,_Co,bCo,yj,vCo,FCo,TCo,X1,MCo,Ke,Nw,ECo,cde,CCo,wCo,$a,ACo,fde,yCo,LCo,mde,xCo,$Co,gde,kCo,SCo,RCo,he,z1,hde,BCo,PCo,Lj,ICo,qCo,NCo,Q1,pde,jCo,DCo,xj,GCo,OCo,VCo,W1,ude,XCo,zCo,$j,QCo,WCo,HCo,H1,_de,UCo,JCo,kj,YCo,KCo,ZCo,U1,bde,e3o,o3o,Sj,r3o,t3o,a3o,J1,vde,n3o,s3o,Rj,l3o,i3o,d3o,Y1,Fde,c3o,f3o,Bj,m3o,g3o,h3o,K1,Tde,p3o,u3o,Pj,_3o,b3o,v3o,Z1,Mde,F3o,T3o,Ij,M3o,E3o,C3o,eb,Ede,w3o,A3o,qj,y3o,L3o,x3o,ob,Cde,$3o,k3o,Nj,S3o,R3o,B3o,rb,wde,P3o,I3o,jj,q3o,N3o,j3o,tb,Ade,D3o,G3o,Dj,O3o,V3o,X3o,ab,yde,z3o,Q3o,Gj,W3o,H3o,U3o,nb,Lde,J3o,Y3o,Oj,K3o,Z3o,ewo,sb,xde,owo,rwo,Vj,two,awo,nwo,lb,$de,swo,lwo,Xj,iwo,dwo,cwo,ib,fwo,kde,mwo,gwo,Sde,hwo,pwo,db,$Pe,Ii,cb,Rde,jw,uwo,Bde,_wo,kPe,Ro,Dw,bwo,qi,vwo,zj,Fwo,Two,Qj,Mwo,Ewo,Cwo,Gw,wwo,Pde,Awo,ywo,Lwo,st,Ow,xwo,Ide,$wo,kwo,Ni,Swo,qde,Rwo,Bwo,Wj,Pwo,Iwo,qwo,fb,Nwo,Ze,Vw,jwo,Nde,Dwo,Gwo,ka,Owo,jde,Vwo,Xwo,Dde,zwo,Qwo,Gde,Wwo,Hwo,Uwo,q,mb,Ode,Jwo,Ywo,Hj,Kwo,Zwo,eAo,gb,Vde,oAo,rAo,Uj,tAo,aAo,nAo,hb,Xde,sAo,lAo,Jj,iAo,dAo,cAo,pb,zde,fAo,mAo,Yj,gAo,hAo,pAo,ub,Qde,uAo,_Ao,Kj,bAo,vAo,FAo,_b,Wde,TAo,MAo,Zj,EAo,CAo,wAo,bb,Hde,AAo,yAo,eD,LAo,xAo,$Ao,vb,Ude,kAo,SAo,oD,RAo,BAo,PAo,Fb,Jde,IAo,qAo,rD,NAo,jAo,DAo,Tb,Yde,GAo,OAo,tD,VAo,XAo,zAo,Mb,Kde,QAo,WAo,aD,HAo,UAo,JAo,Eb,Zde,YAo,KAo,nD,ZAo,eyo,oyo,Cb,ece,ryo,tyo,sD,ayo,nyo,syo,wb,oce,lyo,iyo,lD,dyo,cyo,fyo,Ab,rce,myo,gyo,iD,hyo,pyo,uyo,yb,tce,_yo,byo,dD,vyo,Fyo,Tyo,Lb,ace,Myo,Eyo,cD,Cyo,wyo,Ayo,xb,nce,yyo,Lyo,fD,xyo,$yo,kyo,$b,sce,Syo,Ryo,mD,Byo,Pyo,Iyo,kb,lce,qyo,Nyo,gD,jyo,Dyo,Gyo,Sb,ice,Oyo,Vyo,hD,Xyo,zyo,Qyo,Rb,dce,Wyo,Hyo,pD,Uyo,Jyo,Yyo,Bb,cce,Kyo,Zyo,uD,eLo,oLo,rLo,Pb,fce,tLo,aLo,_D,nLo,sLo,lLo,Ib,mce,iLo,dLo,bD,cLo,fLo,mLo,qb,gce,gLo,hLo,vD,pLo,uLo,_Lo,Nb,hce,bLo,vLo,FD,FLo,TLo,MLo,jb,pce,ELo,CLo,TD,wLo,ALo,yLo,Db,uce,LLo,xLo,MD,$Lo,kLo,SLo,Gb,_ce,RLo,BLo,ED,PLo,ILo,qLo,Ob,bce,NLo,jLo,CD,DLo,GLo,OLo,Vb,vce,VLo,XLo,wD,zLo,QLo,WLo,Xb,Fce,HLo,ULo,AD,JLo,YLo,KLo,zb,Tce,ZLo,e8o,yD,o8o,r8o,t8o,Qb,Mce,a8o,n8o,LD,s8o,l8o,i8o,Wb,Ece,d8o,c8o,xD,f8o,m8o,g8o,Hb,Cce,h8o,p8o,$D,u8o,_8o,b8o,Ub,wce,v8o,F8o,kD,T8o,M8o,E8o,Jb,Ace,C8o,w8o,SD,A8o,y8o,L8o,Yb,yce,x8o,$8o,RD,k8o,S8o,R8o,Kb,Lce,B8o,P8o,BD,I8o,q8o,N8o,Zb,xce,j8o,D8o,PD,G8o,O8o,V8o,e2,$ce,X8o,z8o,ID,Q8o,W8o,H8o,o2,kce,U8o,J8o,qD,Y8o,K8o,Z8o,r2,Sce,exo,oxo,ND,rxo,txo,axo,t2,Rce,nxo,sxo,jD,lxo,ixo,dxo,a2,Bce,cxo,fxo,DD,mxo,gxo,hxo,n2,pxo,Pce,uxo,_xo,Ice,bxo,vxo,s2,SPe,ji,l2,qce,Xw,Fxo,Nce,Txo,RPe,Bo,zw,Mxo,Di,Exo,GD,Cxo,wxo,OD,Axo,yxo,Lxo,Qw,xxo,jce,$xo,kxo,Sxo,lt,Ww,Rxo,Dce,Bxo,Pxo,Gi,Ixo,Gce,qxo,Nxo,VD,jxo,Dxo,Gxo,i2,Oxo,eo,Hw,Vxo,Oce,Xxo,zxo,Sa,Qxo,Vce,Wxo,Hxo,Xce,Uxo,Jxo,zce,Yxo,Kxo,Zxo,Y,d2,Qce,e$o,o$o,XD,r$o,t$o,a$o,c2,Wce,n$o,s$o,zD,l$o,i$o,d$o,f2,Hce,c$o,f$o,QD,m$o,g$o,h$o,m2,Uce,p$o,u$o,WD,_$o,b$o,v$o,g2,Jce,F$o,T$o,HD,M$o,E$o,C$o,h2,Yce,w$o,A$o,UD,y$o,L$o,x$o,p2,Kce,$$o,k$o,JD,S$o,R$o,B$o,u2,Zce,P$o,I$o,YD,q$o,N$o,j$o,_2,efe,D$o,G$o,KD,O$o,V$o,X$o,b2,ofe,z$o,Q$o,ZD,W$o,H$o,U$o,v2,rfe,J$o,Y$o,eG,K$o,Z$o,eko,F2,tfe,oko,rko,oG,tko,ako,nko,T2,afe,sko,lko,rG,iko,dko,cko,M2,nfe,fko,mko,tG,gko,hko,pko,E2,sfe,uko,_ko,aG,bko,vko,Fko,C2,lfe,Tko,Mko,nG,Eko,Cko,wko,w2,ife,Ako,yko,sG,Lko,xko,$ko,A2,dfe,kko,Sko,lG,Rko,Bko,Pko,y2,cfe,Iko,qko,iG,Nko,jko,Dko,L2,ffe,Gko,Oko,dG,Vko,Xko,zko,x2,mfe,Qko,Wko,cG,Hko,Uko,Jko,$2,gfe,Yko,Kko,fG,Zko,eSo,oSo,k2,hfe,rSo,tSo,mG,aSo,nSo,sSo,S2,pfe,lSo,iSo,gG,dSo,cSo,fSo,R2,ufe,mSo,gSo,hG,hSo,pSo,uSo,B2,_fe,_So,bSo,pG,vSo,FSo,TSo,P2,bfe,MSo,ESo,uG,CSo,wSo,ASo,I2,vfe,ySo,LSo,_G,xSo,$So,kSo,q2,Ffe,SSo,RSo,bG,BSo,PSo,ISo,N2,qSo,Tfe,NSo,jSo,Mfe,DSo,GSo,j2,BPe,Oi,D2,Efe,Uw,OSo,Cfe,VSo,PPe,Po,Jw,XSo,Vi,zSo,vG,QSo,WSo,FG,HSo,USo,JSo,Yw,YSo,wfe,KSo,ZSo,eRo,it,Kw,oRo,Afe,rRo,tRo,Xi,aRo,yfe,nRo,sRo,TG,lRo,iRo,dRo,G2,cRo,oo,Zw,fRo,Lfe,mRo,gRo,Ra,hRo,xfe,pRo,uRo,$fe,_Ro,bRo,kfe,vRo,FRo,TRo,Yr,O2,Sfe,MRo,ERo,MG,CRo,wRo,ARo,V2,Rfe,yRo,LRo,EG,xRo,$Ro,kRo,X2,Bfe,SRo,RRo,CG,BRo,PRo,IRo,z2,Pfe,qRo,NRo,wG,jRo,DRo,GRo,Q2,Ife,ORo,VRo,AG,XRo,zRo,QRo,W2,WRo,qfe,HRo,URo,Nfe,JRo,YRo,H2,IPe,zi,U2,jfe,eA,KRo,Dfe,ZRo,qPe,Io,oA,eBo,Qi,oBo,yG,rBo,tBo,LG,aBo,nBo,sBo,rA,lBo,Gfe,iBo,dBo,cBo,dt,tA,fBo,Ofe,mBo,gBo,Wi,hBo,Vfe,pBo,uBo,xG,_Bo,bBo,vBo,J2,FBo,ro,aA,TBo,Xfe,MBo,EBo,Ba,CBo,zfe,wBo,ABo,Qfe,yBo,LBo,Wfe,xBo,$Bo,kBo,U,Y2,Hfe,SBo,RBo,$G,BBo,PBo,IBo,K2,Ufe,qBo,NBo,kG,jBo,DBo,GBo,Z2,Jfe,OBo,VBo,SG,XBo,zBo,QBo,ev,Yfe,WBo,HBo,RG,UBo,JBo,YBo,ov,Kfe,KBo,ZBo,BG,ePo,oPo,rPo,rv,Zfe,tPo,aPo,PG,nPo,sPo,lPo,tv,eme,iPo,dPo,IG,cPo,fPo,mPo,av,ome,gPo,hPo,qG,pPo,uPo,_Po,nv,rme,bPo,vPo,NG,FPo,TPo,MPo,sv,tme,EPo,CPo,jG,wPo,APo,yPo,lv,ame,LPo,xPo,DG,$Po,kPo,SPo,iv,nme,RPo,BPo,GG,PPo,IPo,qPo,dv,sme,NPo,jPo,OG,DPo,GPo,OPo,cv,lme,VPo,XPo,VG,zPo,QPo,WPo,fv,ime,HPo,UPo,XG,JPo,YPo,KPo,mv,dme,ZPo,eIo,zG,oIo,rIo,tIo,gv,cme,aIo,nIo,QG,sIo,lIo,iIo,hv,fme,dIo,cIo,WG,fIo,mIo,gIo,pv,mme,hIo,pIo,HG,uIo,_Io,bIo,uv,gme,vIo,FIo,UG,TIo,MIo,EIo,_v,hme,CIo,wIo,JG,AIo,yIo,LIo,bv,pme,xIo,$Io,YG,kIo,SIo,RIo,vv,ume,BIo,PIo,KG,IIo,qIo,NIo,Fv,_me,jIo,DIo,ZG,GIo,OIo,VIo,Tv,bme,XIo,zIo,eO,QIo,WIo,HIo,Mv,vme,UIo,JIo,oO,YIo,KIo,ZIo,Ev,Fme,eqo,oqo,rO,rqo,tqo,aqo,Cv,Tme,nqo,sqo,tO,lqo,iqo,dqo,wv,Mme,cqo,fqo,aO,mqo,gqo,hqo,Av,Eme,pqo,uqo,nO,_qo,bqo,vqo,yv,Cme,Fqo,Tqo,sO,Mqo,Eqo,Cqo,Lv,wme,wqo,Aqo,lO,yqo,Lqo,xqo,xv,Ame,$qo,kqo,iO,Sqo,Rqo,Bqo,$v,Pqo,yme,Iqo,qqo,Lme,Nqo,jqo,kv,NPe,Hi,Sv,xme,nA,Dqo,$me,Gqo,jPe,qo,sA,Oqo,Ui,Vqo,dO,Xqo,zqo,cO,Qqo,Wqo,Hqo,lA,Uqo,kme,Jqo,Yqo,Kqo,ct,iA,Zqo,Sme,eNo,oNo,Ji,rNo,Rme,tNo,aNo,fO,nNo,sNo,lNo,Rv,iNo,to,dA,dNo,Bme,cNo,fNo,Pa,mNo,Pme,gNo,hNo,Ime,pNo,uNo,qme,_No,bNo,vNo,O,Bv,Nme,FNo,TNo,mO,MNo,ENo,CNo,Pv,jme,wNo,ANo,gO,yNo,LNo,xNo,Iv,Dme,$No,kNo,hO,SNo,RNo,BNo,qv,Gme,PNo,INo,pO,qNo,NNo,jNo,Nv,Ome,DNo,GNo,uO,ONo,VNo,XNo,jv,Vme,zNo,QNo,_O,WNo,HNo,UNo,Dv,Xme,JNo,YNo,bO,KNo,ZNo,ejo,Gv,zme,ojo,rjo,vO,tjo,ajo,njo,Ov,Qme,sjo,ljo,FO,ijo,djo,cjo,Vv,Wme,fjo,mjo,TO,gjo,hjo,pjo,Xv,Hme,ujo,_jo,MO,bjo,vjo,Fjo,zv,Ume,Tjo,Mjo,EO,Ejo,Cjo,wjo,Qv,Jme,Ajo,yjo,CO,Ljo,xjo,$jo,Wv,Yme,kjo,Sjo,wO,Rjo,Bjo,Pjo,Hv,Kme,Ijo,qjo,AO,Njo,jjo,Djo,Uv,Zme,Gjo,Ojo,yO,Vjo,Xjo,zjo,Jv,ege,Qjo,Wjo,LO,Hjo,Ujo,Jjo,Yv,oge,Yjo,Kjo,xO,Zjo,eDo,oDo,Kv,rge,rDo,tDo,$O,aDo,nDo,sDo,Zv,tge,lDo,iDo,kO,dDo,cDo,fDo,eF,age,mDo,gDo,SO,hDo,pDo,uDo,oF,nge,_Do,bDo,RO,vDo,FDo,TDo,rF,sge,MDo,EDo,BO,CDo,wDo,ADo,tF,lge,yDo,LDo,PO,xDo,$Do,kDo,aF,ige,SDo,RDo,IO,BDo,PDo,IDo,nF,dge,qDo,NDo,qO,jDo,DDo,GDo,sF,cge,ODo,VDo,NO,XDo,zDo,QDo,lF,fge,WDo,HDo,jO,UDo,JDo,YDo,iF,mge,KDo,ZDo,DO,eGo,oGo,rGo,dF,gge,tGo,aGo,GO,nGo,sGo,lGo,cF,hge,iGo,dGo,OO,cGo,fGo,mGo,fF,pge,gGo,hGo,VO,pGo,uGo,_Go,mF,uge,bGo,vGo,XO,FGo,TGo,MGo,gF,_ge,EGo,CGo,zO,wGo,AGo,yGo,hF,bge,LGo,xGo,QO,$Go,kGo,SGo,pF,vge,RGo,BGo,WO,PGo,IGo,qGo,uF,Fge,NGo,jGo,HO,DGo,GGo,OGo,_F,Tge,VGo,XGo,UO,zGo,QGo,WGo,bF,Mge,HGo,UGo,JO,JGo,YGo,KGo,vF,ZGo,Ege,eOo,oOo,Cge,rOo,tOo,FF,DPe,Yi,TF,wge,cA,aOo,Age,nOo,GPe,No,fA,sOo,Ki,lOo,YO,iOo,dOo,KO,cOo,fOo,mOo,mA,gOo,yge,hOo,pOo,uOo,ft,gA,_Oo,Lge,bOo,vOo,Zi,FOo,xge,TOo,MOo,ZO,EOo,COo,wOo,MF,AOo,ao,hA,yOo,$ge,LOo,xOo,Ia,$Oo,kge,kOo,SOo,Sge,ROo,BOo,Rge,POo,IOo,qOo,Bge,EF,Pge,NOo,jOo,eV,DOo,GOo,OOo,CF,VOo,Ige,XOo,zOo,qge,QOo,WOo,wF,OPe,ed,AF,Nge,pA,HOo,jge,UOo,VPe,jo,uA,JOo,od,YOo,oV,KOo,ZOo,rV,eVo,oVo,rVo,_A,tVo,Dge,aVo,nVo,sVo,mt,bA,lVo,Gge,iVo,dVo,rd,cVo,Oge,fVo,mVo,tV,gVo,hVo,pVo,yF,uVo,no,vA,_Vo,Vge,bVo,vVo,qa,FVo,Xge,TVo,MVo,zge,EVo,CVo,Qge,wVo,AVo,yVo,ve,LF,Wge,LVo,xVo,aV,$Vo,kVo,SVo,xF,Hge,RVo,BVo,nV,PVo,IVo,qVo,$F,Uge,NVo,jVo,sV,DVo,GVo,OVo,Rs,Jge,VVo,XVo,lV,zVo,QVo,iV,WVo,HVo,UVo,kF,Yge,JVo,YVo,dV,KVo,ZVo,eXo,gt,Kge,oXo,rXo,cV,tXo,aXo,fV,nXo,sXo,mV,lXo,iXo,dXo,SF,Zge,cXo,fXo,gV,mXo,gXo,hXo,RF,ehe,pXo,uXo,hV,_Xo,bXo,vXo,BF,ohe,FXo,TXo,pV,MXo,EXo,CXo,PF,rhe,wXo,AXo,uV,yXo,LXo,xXo,IF,the,$Xo,kXo,_V,SXo,RXo,BXo,qF,ahe,PXo,IXo,bV,qXo,NXo,jXo,NF,nhe,DXo,GXo,vV,OXo,VXo,XXo,jF,zXo,she,QXo,WXo,lhe,HXo,UXo,DF,XPe,td,GF,ihe,FA,JXo,dhe,YXo,zPe,Do,TA,KXo,ad,ZXo,FV,ezo,ozo,TV,rzo,tzo,azo,MA,nzo,che,szo,lzo,izo,ht,EA,dzo,fhe,czo,fzo,nd,mzo,mhe,gzo,hzo,MV,pzo,uzo,_zo,OF,bzo,so,CA,vzo,ghe,Fzo,Tzo,Na,Mzo,hhe,Ezo,Czo,phe,wzo,Azo,uhe,yzo,Lzo,xzo,_he,VF,bhe,$zo,kzo,EV,Szo,Rzo,Bzo,XF,Pzo,vhe,Izo,qzo,Fhe,Nzo,jzo,zF,QPe,sd,QF,The,wA,Dzo,Mhe,Gzo,WPe,Go,AA,Ozo,ld,Vzo,CV,Xzo,zzo,wV,Qzo,Wzo,Hzo,yA,Uzo,Ehe,Jzo,Yzo,Kzo,pt,LA,Zzo,Che,eQo,oQo,id,rQo,whe,tQo,aQo,AV,nQo,sQo,lQo,WF,iQo,lo,xA,dQo,Ahe,cQo,fQo,ja,mQo,yhe,gQo,hQo,Lhe,pQo,uQo,xhe,_Qo,bQo,vQo,Ne,HF,$he,FQo,TQo,yV,MQo,EQo,CQo,UF,khe,wQo,AQo,LV,yQo,LQo,xQo,JF,She,$Qo,kQo,xV,SQo,RQo,BQo,YF,Rhe,PQo,IQo,$V,qQo,NQo,jQo,KF,Bhe,DQo,GQo,kV,OQo,VQo,XQo,ZF,Phe,zQo,QQo,SV,WQo,HQo,UQo,e0,Ihe,JQo,YQo,RV,KQo,ZQo,eWo,o0,qhe,oWo,rWo,BV,tWo,aWo,nWo,r0,sWo,Nhe,lWo,iWo,jhe,dWo,cWo,t0,HPe,dd,a0,Dhe,$A,fWo,Ghe,mWo,UPe,Oo,kA,gWo,cd,hWo,PV,pWo,uWo,IV,_Wo,bWo,vWo,SA,FWo,Ohe,TWo,MWo,EWo,ut,RA,CWo,Vhe,wWo,AWo,fd,yWo,Xhe,LWo,xWo,qV,$Wo,kWo,SWo,n0,RWo,io,BA,BWo,zhe,PWo,IWo,Da,qWo,Qhe,NWo,jWo,Whe,DWo,GWo,Hhe,OWo,VWo,XWo,Ga,s0,Uhe,zWo,QWo,NV,WWo,HWo,UWo,l0,Jhe,JWo,YWo,jV,KWo,ZWo,eHo,i0,Yhe,oHo,rHo,DV,tHo,aHo,nHo,d0,Khe,sHo,lHo,GV,iHo,dHo,cHo,c0,fHo,Zhe,mHo,gHo,epe,hHo,pHo,f0,JPe,md,m0,ope,PA,uHo,rpe,_Ho,YPe,Vo,IA,bHo,gd,vHo,OV,FHo,THo,VV,MHo,EHo,CHo,qA,wHo,tpe,AHo,yHo,LHo,_t,NA,xHo,ape,$Ho,kHo,hd,SHo,npe,RHo,BHo,XV,PHo,IHo,qHo,g0,NHo,co,jA,jHo,spe,DHo,GHo,Oa,OHo,lpe,VHo,XHo,ipe,zHo,QHo,dpe,WHo,HHo,UHo,je,h0,cpe,JHo,YHo,zV,KHo,ZHo,eUo,p0,fpe,oUo,rUo,QV,tUo,aUo,nUo,u0,mpe,sUo,lUo,WV,iUo,dUo,cUo,_0,gpe,fUo,mUo,HV,gUo,hUo,pUo,b0,hpe,uUo,_Uo,UV,bUo,vUo,FUo,v0,ppe,TUo,MUo,JV,EUo,CUo,wUo,F0,upe,AUo,yUo,YV,LUo,xUo,$Uo,T0,_pe,kUo,SUo,KV,RUo,BUo,PUo,M0,IUo,bpe,qUo,NUo,vpe,jUo,DUo,E0,KPe,pd,C0,Fpe,DA,GUo,Tpe,OUo,ZPe,Xo,GA,VUo,ud,XUo,ZV,zUo,QUo,eX,WUo,HUo,UUo,OA,JUo,Mpe,YUo,KUo,ZUo,bt,VA,eJo,Epe,oJo,rJo,_d,tJo,Cpe,aJo,nJo,oX,sJo,lJo,iJo,w0,dJo,fo,XA,cJo,wpe,fJo,mJo,Va,gJo,Ape,hJo,pJo,ype,uJo,_Jo,Lpe,bJo,vJo,FJo,zA,A0,xpe,TJo,MJo,rX,EJo,CJo,wJo,y0,$pe,AJo,yJo,tX,LJo,xJo,$Jo,L0,kJo,kpe,SJo,RJo,Spe,BJo,PJo,x0,eIe,bd,$0,Rpe,QA,IJo,Bpe,qJo,oIe,zo,WA,NJo,vd,jJo,aX,DJo,GJo,nX,OJo,VJo,XJo,HA,zJo,Ppe,QJo,WJo,HJo,vt,UA,UJo,Ipe,JJo,YJo,Fd,KJo,qpe,ZJo,eYo,sX,oYo,rYo,tYo,k0,aYo,mo,JA,nYo,Npe,sYo,lYo,Xa,iYo,jpe,dYo,cYo,Dpe,fYo,mYo,Gpe,gYo,hYo,pYo,za,S0,Ope,uYo,_Yo,lX,bYo,vYo,FYo,R0,Vpe,TYo,MYo,iX,EYo,CYo,wYo,B0,Xpe,AYo,yYo,dX,LYo,xYo,$Yo,P0,zpe,kYo,SYo,cX,RYo,BYo,PYo,I0,IYo,Qpe,qYo,NYo,Wpe,jYo,DYo,q0,rIe,Td,N0,Hpe,YA,GYo,Upe,OYo,tIe,Qo,KA,VYo,Md,XYo,fX,zYo,QYo,mX,WYo,HYo,UYo,ZA,JYo,Jpe,YYo,KYo,ZYo,Ft,ey,eKo,Ype,oKo,rKo,Ed,tKo,Kpe,aKo,nKo,gX,sKo,lKo,iKo,j0,dKo,go,oy,cKo,Zpe,fKo,mKo,Qa,gKo,eue,hKo,pKo,oue,uKo,_Ko,rue,bKo,vKo,FKo,Cd,D0,tue,TKo,MKo,hX,EKo,CKo,wKo,G0,aue,AKo,yKo,pX,LKo,xKo,$Ko,O0,nue,kKo,SKo,uX,RKo,BKo,PKo,V0,IKo,sue,qKo,NKo,lue,jKo,DKo,X0,aIe,wd,z0,iue,ry,GKo,due,OKo,nIe,Wo,ty,VKo,Ad,XKo,_X,zKo,QKo,bX,WKo,HKo,UKo,ay,JKo,cue,YKo,KKo,ZKo,Tt,ny,eZo,fue,oZo,rZo,yd,tZo,mue,aZo,nZo,vX,sZo,lZo,iZo,Q0,dZo,ho,sy,cZo,gue,fZo,mZo,Wa,gZo,hue,hZo,pZo,pue,uZo,_Zo,uue,bZo,vZo,FZo,ly,W0,_ue,TZo,MZo,FX,EZo,CZo,wZo,H0,bue,AZo,yZo,TX,LZo,xZo,$Zo,U0,kZo,vue,SZo,RZo,Fue,BZo,PZo,J0,sIe,Ld,Y0,Tue,iy,IZo,Mue,qZo,lIe,Ho,dy,NZo,xd,jZo,MX,DZo,GZo,EX,OZo,VZo,XZo,cy,zZo,Eue,QZo,WZo,HZo,Mt,fy,UZo,Cue,JZo,YZo,$d,KZo,wue,ZZo,eer,CX,oer,rer,ter,K0,aer,po,my,ner,Aue,ser,ler,Ha,ier,yue,der,cer,Lue,fer,mer,xue,ger,her,per,$ue,Z0,kue,uer,_er,wX,ber,ver,Fer,e6,Ter,Sue,Mer,Eer,Rue,Cer,wer,o6,iIe,kd,r6,Bue,gy,Aer,Pue,yer,dIe,Uo,hy,Ler,Sd,xer,AX,$er,ker,yX,Ser,Rer,Ber,py,Per,Iue,Ier,qer,Ner,Et,uy,jer,que,Der,Ger,Rd,Oer,Nue,Ver,Xer,LX,zer,Qer,Wer,t6,Her,uo,_y,Uer,jue,Jer,Yer,Ua,Ker,Due,Zer,eor,Gue,oor,ror,Oue,tor,aor,nor,Ja,a6,Vue,sor,lor,xX,ior,dor,cor,n6,Xue,mor,gor,$X,hor,por,uor,s6,zue,_or,bor,kX,vor,For,Tor,l6,Que,Mor,Eor,SX,Cor,wor,Aor,i6,yor,Wue,Lor,xor,Hue,$or,kor,d6,cIe,Bd,c6,Uue,by,Sor,Jue,Ror,fIe,Jo,vy,Bor,Pd,Por,RX,Ior,qor,BX,Nor,jor,Dor,Fy,Gor,Yue,Oor,Vor,Xor,Ct,Ty,zor,Kue,Qor,Wor,Id,Hor,Zue,Uor,Jor,PX,Yor,Kor,Zor,f6,err,_o,My,orr,e_e,rrr,trr,Ya,arr,o_e,nrr,srr,r_e,lrr,irr,t_e,drr,crr,frr,a_e,m6,n_e,mrr,grr,IX,hrr,prr,urr,g6,_rr,s_e,brr,vrr,l_e,Frr,Trr,h6,mIe,qd,p6,i_e,Ey,Mrr,d_e,Err,gIe,Yo,Cy,Crr,Nd,wrr,qX,Arr,yrr,NX,Lrr,xrr,$rr,wy,krr,c_e,Srr,Rrr,Brr,wt,Ay,Prr,f_e,Irr,qrr,jd,Nrr,m_e,jrr,Drr,jX,Grr,Orr,Vrr,u6,Xrr,wr,yy,zrr,g_e,Qrr,Wrr,Ka,Hrr,h_e,Urr,Jrr,p_e,Yrr,Krr,u_e,Zrr,etr,otr,j,_6,__e,rtr,ttr,DX,atr,ntr,str,b6,b_e,ltr,itr,GX,dtr,ctr,ftr,v6,v_e,mtr,gtr,OX,htr,ptr,utr,F6,F_e,_tr,btr,VX,vtr,Ftr,Ttr,T6,T_e,Mtr,Etr,XX,Ctr,wtr,Atr,M6,M_e,ytr,Ltr,zX,xtr,$tr,ktr,E6,E_e,Str,Rtr,QX,Btr,Ptr,Itr,C6,C_e,qtr,Ntr,WX,jtr,Dtr,Gtr,w6,w_e,Otr,Vtr,HX,Xtr,ztr,Qtr,A6,A_e,Wtr,Htr,UX,Utr,Jtr,Ytr,y6,y_e,Ktr,Ztr,JX,ear,oar,rar,L6,L_e,tar,aar,YX,nar,sar,lar,x6,x_e,iar,dar,KX,car,far,mar,$6,$_e,gar,har,ZX,par,uar,_ar,k6,k_e,bar,Far,ez,Tar,Mar,Ear,S6,S_e,Car,war,oz,Aar,yar,Lar,R6,R_e,xar,$ar,rz,kar,Sar,Rar,Bs,B_e,Bar,Par,tz,Iar,qar,az,Nar,jar,Dar,B6,P_e,Gar,Oar,nz,Var,Xar,zar,P6,I_e,Qar,War,sz,Har,Uar,Jar,I6,q_e,Yar,Kar,lz,Zar,enr,onr,q6,N_e,rnr,tnr,iz,anr,nnr,snr,N6,j_e,lnr,inr,dz,dnr,cnr,fnr,j6,D_e,mnr,gnr,cz,hnr,pnr,unr,D6,G_e,_nr,bnr,fz,vnr,Fnr,Tnr,G6,O_e,Mnr,Enr,mz,Cnr,wnr,Anr,O6,V_e,ynr,Lnr,gz,xnr,$nr,knr,V6,X_e,Snr,Rnr,hz,Bnr,Pnr,Inr,X6,z_e,qnr,Nnr,pz,jnr,Dnr,Gnr,z6,Q_e,Onr,Vnr,uz,Xnr,znr,Qnr,Q6,W_e,Wnr,Hnr,_z,Unr,Jnr,Ynr,W6,H_e,Knr,Znr,bz,esr,osr,rsr,H6,U_e,tsr,asr,vz,nsr,ssr,lsr,U6,J_e,isr,dsr,Fz,csr,fsr,msr,J6,Y_e,gsr,hsr,Tz,psr,usr,_sr,Y6,K_e,bsr,vsr,Mz,Fsr,Tsr,Msr,K6,Z_e,Esr,Csr,Ez,wsr,Asr,ysr,Z6,e1e,Lsr,xsr,Cz,$sr,ksr,Ssr,eT,o1e,Rsr,Bsr,wz,Psr,Isr,qsr,oT,r1e,Nsr,jsr,Az,Dsr,Gsr,Osr,rT,t1e,Vsr,Xsr,yz,zsr,Qsr,Wsr,tT,a1e,Hsr,Usr,Lz,Jsr,Ysr,Ksr,aT,n1e,Zsr,elr,xz,olr,rlr,tlr,nT,s1e,alr,nlr,$z,slr,llr,ilr,sT,l1e,dlr,clr,kz,flr,mlr,glr,lT,hIe,Dd,iT,i1e,Ly,hlr,d1e,plr,pIe,Ko,xy,ulr,Gd,_lr,Sz,blr,vlr,Rz,Flr,Tlr,Mlr,$y,Elr,c1e,Clr,wlr,Alr,At,ky,ylr,f1e,Llr,xlr,Od,$lr,m1e,klr,Slr,Bz,Rlr,Blr,Plr,dT,Ilr,Ar,Sy,qlr,g1e,Nlr,jlr,Za,Dlr,h1e,Glr,Olr,p1e,Vlr,Xlr,u1e,zlr,Qlr,Wlr,ne,cT,_1e,Hlr,Ulr,Pz,Jlr,Ylr,Klr,fT,b1e,Zlr,eir,Iz,oir,rir,tir,mT,v1e,air,nir,qz,sir,lir,iir,gT,F1e,dir,cir,Nz,fir,mir,gir,hT,T1e,hir,pir,jz,uir,_ir,bir,pT,M1e,vir,Fir,Dz,Tir,Mir,Eir,uT,E1e,Cir,wir,Gz,Air,yir,Lir,_T,C1e,xir,$ir,Oz,kir,Sir,Rir,bT,w1e,Bir,Pir,Vz,Iir,qir,Nir,vT,A1e,jir,Dir,Xz,Gir,Oir,Vir,FT,y1e,Xir,zir,zz,Qir,Wir,Hir,TT,L1e,Uir,Jir,Qz,Yir,Kir,Zir,MT,x1e,edr,odr,Wz,rdr,tdr,adr,ET,$1e,ndr,sdr,Hz,ldr,idr,ddr,CT,k1e,cdr,fdr,Uz,mdr,gdr,hdr,wT,S1e,pdr,udr,Jz,_dr,bdr,vdr,AT,R1e,Fdr,Tdr,Yz,Mdr,Edr,Cdr,yT,B1e,wdr,Adr,Kz,ydr,Ldr,xdr,LT,P1e,$dr,kdr,Zz,Sdr,Rdr,Bdr,xT,I1e,Pdr,Idr,eQ,qdr,Ndr,jdr,$T,q1e,Ddr,Gdr,oQ,Odr,Vdr,Xdr,kT,N1e,zdr,Qdr,rQ,Wdr,Hdr,Udr,ST,j1e,Jdr,Ydr,tQ,Kdr,Zdr,ecr,RT,uIe,Vd,BT,D1e,Ry,ocr,G1e,rcr,_Ie,Zo,By,tcr,Xd,acr,aQ,ncr,scr,nQ,lcr,icr,dcr,Py,ccr,O1e,fcr,mcr,gcr,yt,Iy,hcr,V1e,pcr,ucr,zd,_cr,X1e,bcr,vcr,sQ,Fcr,Tcr,Mcr,PT,Ecr,yr,qy,Ccr,z1e,wcr,Acr,en,ycr,Q1e,Lcr,xcr,W1e,$cr,kcr,H1e,Scr,Rcr,Bcr,Te,IT,U1e,Pcr,Icr,lQ,qcr,Ncr,jcr,qT,J1e,Dcr,Gcr,iQ,Ocr,Vcr,Xcr,NT,Y1e,zcr,Qcr,dQ,Wcr,Hcr,Ucr,jT,K1e,Jcr,Ycr,cQ,Kcr,Zcr,efr,DT,Z1e,ofr,rfr,fQ,tfr,afr,nfr,GT,ebe,sfr,lfr,mQ,ifr,dfr,cfr,OT,obe,ffr,mfr,gQ,gfr,hfr,pfr,VT,rbe,ufr,_fr,hQ,bfr,vfr,Ffr,XT,tbe,Tfr,Mfr,pQ,Efr,Cfr,wfr,zT,abe,Afr,yfr,uQ,Lfr,xfr,$fr,QT,nbe,kfr,Sfr,_Q,Rfr,Bfr,Pfr,WT,sbe,Ifr,qfr,bQ,Nfr,jfr,Dfr,HT,bIe,Qd,UT,lbe,Ny,Gfr,ibe,Ofr,vIe,er,jy,Vfr,Wd,Xfr,vQ,zfr,Qfr,FQ,Wfr,Hfr,Ufr,Dy,Jfr,dbe,Yfr,Kfr,Zfr,Lt,Gy,emr,cbe,omr,rmr,Hd,tmr,fbe,amr,nmr,TQ,smr,lmr,imr,JT,dmr,Lr,Oy,cmr,mbe,fmr,mmr,on,gmr,gbe,hmr,pmr,hbe,umr,_mr,pbe,bmr,vmr,Fmr,Ud,YT,ube,Tmr,Mmr,MQ,Emr,Cmr,wmr,KT,_be,Amr,ymr,EQ,Lmr,xmr,$mr,ZT,bbe,kmr,Smr,CQ,Rmr,Bmr,Pmr,e7,FIe,Jd,o7,vbe,Vy,Imr,Fbe,qmr,TIe,or,Xy,Nmr,Yd,jmr,wQ,Dmr,Gmr,AQ,Omr,Vmr,Xmr,zy,zmr,Tbe,Qmr,Wmr,Hmr,xt,Qy,Umr,Mbe,Jmr,Ymr,Kd,Kmr,Ebe,Zmr,egr,yQ,ogr,rgr,tgr,r7,agr,xr,Wy,ngr,Cbe,sgr,lgr,rn,igr,wbe,dgr,cgr,Abe,fgr,mgr,ybe,ggr,hgr,pgr,ie,t7,Lbe,ugr,_gr,LQ,bgr,vgr,Fgr,a7,xbe,Tgr,Mgr,xQ,Egr,Cgr,wgr,n7,$be,Agr,ygr,$Q,Lgr,xgr,$gr,s7,kbe,kgr,Sgr,kQ,Rgr,Bgr,Pgr,l7,Sbe,Igr,qgr,SQ,Ngr,jgr,Dgr,i7,Rbe,Ggr,Ogr,RQ,Vgr,Xgr,zgr,d7,Bbe,Qgr,Wgr,BQ,Hgr,Ugr,Jgr,c7,Pbe,Ygr,Kgr,PQ,Zgr,ehr,ohr,f7,Ibe,rhr,thr,IQ,ahr,nhr,shr,m7,qbe,lhr,ihr,qQ,dhr,chr,fhr,g7,Nbe,mhr,ghr,NQ,hhr,phr,uhr,h7,jbe,_hr,bhr,jQ,vhr,Fhr,Thr,p7,Dbe,Mhr,Ehr,DQ,Chr,whr,Ahr,u7,Gbe,yhr,Lhr,GQ,xhr,$hr,khr,_7,Obe,Shr,Rhr,OQ,Bhr,Phr,Ihr,b7,Vbe,qhr,Nhr,VQ,jhr,Dhr,Ghr,v7,Xbe,Ohr,Vhr,XQ,Xhr,zhr,Qhr,F7,zbe,Whr,Hhr,zQ,Uhr,Jhr,Yhr,T7,Qbe,Khr,Zhr,QQ,epr,opr,rpr,M7,Wbe,tpr,apr,WQ,npr,spr,lpr,E7,MIe,Zd,C7,Hbe,Hy,ipr,Ube,dpr,EIe,rr,Uy,cpr,ec,fpr,HQ,mpr,gpr,UQ,hpr,ppr,upr,Jy,_pr,Jbe,bpr,vpr,Fpr,$t,Yy,Tpr,Ybe,Mpr,Epr,oc,Cpr,Kbe,wpr,Apr,JQ,ypr,Lpr,xpr,w7,$pr,$r,Ky,kpr,Zbe,Spr,Rpr,tn,Bpr,e2e,Ppr,Ipr,o2e,qpr,Npr,r2e,jpr,Dpr,Gpr,ye,A7,t2e,Opr,Vpr,YQ,Xpr,zpr,Qpr,y7,a2e,Wpr,Hpr,KQ,Upr,Jpr,Ypr,L7,n2e,Kpr,Zpr,ZQ,eur,our,rur,x7,s2e,tur,aur,eW,nur,sur,lur,$7,l2e,iur,dur,oW,cur,fur,mur,k7,i2e,gur,hur,rW,pur,uur,_ur,S7,d2e,bur,vur,tW,Fur,Tur,Mur,R7,c2e,Eur,Cur,aW,wur,Aur,yur,B7,f2e,Lur,xur,nW,$ur,kur,Sur,P7,m2e,Rur,Bur,sW,Pur,Iur,qur,I7,CIe,rc,q7,g2e,Zy,Nur,h2e,jur,wIe,tr,eL,Dur,tc,Gur,lW,Our,Vur,iW,Xur,zur,Qur,oL,Wur,p2e,Hur,Uur,Jur,kt,rL,Yur,u2e,Kur,Zur,ac,e_r,_2e,o_r,r_r,dW,t_r,a_r,n_r,N7,s_r,kr,tL,l_r,b2e,i_r,d_r,an,c_r,v2e,f_r,m_r,F2e,g_r,h_r,T2e,p_r,u_r,__r,Z,j7,M2e,b_r,v_r,cW,F_r,T_r,M_r,D7,E2e,E_r,C_r,fW,w_r,A_r,y_r,G7,C2e,L_r,x_r,mW,$_r,k_r,S_r,O7,w2e,R_r,B_r,gW,P_r,I_r,q_r,V7,A2e,N_r,j_r,hW,D_r,G_r,O_r,X7,y2e,V_r,X_r,pW,z_r,Q_r,W_r,z7,L2e,H_r,U_r,uW,J_r,Y_r,K_r,Q7,x2e,Z_r,e1r,_W,o1r,r1r,t1r,W7,$2e,a1r,n1r,bW,s1r,l1r,i1r,H7,k2e,d1r,c1r,vW,f1r,m1r,g1r,U7,S2e,h1r,p1r,FW,u1r,_1r,b1r,J7,R2e,v1r,F1r,TW,T1r,M1r,E1r,Y7,B2e,C1r,w1r,MW,A1r,y1r,L1r,K7,P2e,x1r,$1r,EW,k1r,S1r,R1r,Z7,I2e,B1r,P1r,CW,I1r,q1r,N1r,e9,q2e,j1r,D1r,wW,G1r,O1r,V1r,o9,N2e,X1r,z1r,AW,Q1r,W1r,H1r,r9,j2e,U1r,J1r,yW,Y1r,K1r,Z1r,t9,D2e,ebr,obr,LW,rbr,tbr,abr,a9,G2e,nbr,sbr,xW,lbr,ibr,dbr,n9,O2e,cbr,fbr,$W,mbr,gbr,hbr,s9,V2e,pbr,ubr,kW,_br,bbr,vbr,l9,X2e,Fbr,Tbr,SW,Mbr,Ebr,Cbr,i9,z2e,wbr,Abr,RW,ybr,Lbr,xbr,d9,Q2e,$br,kbr,BW,Sbr,Rbr,Bbr,c9,W2e,Pbr,Ibr,PW,qbr,Nbr,jbr,f9,AIe,nc,m9,H2e,aL,Dbr,U2e,Gbr,yIe,ar,nL,Obr,sc,Vbr,IW,Xbr,zbr,qW,Qbr,Wbr,Hbr,sL,Ubr,J2e,Jbr,Ybr,Kbr,St,lL,Zbr,Y2e,e2r,o2r,lc,r2r,K2e,t2r,a2r,NW,n2r,s2r,l2r,g9,i2r,Sr,iL,d2r,Z2e,c2r,f2r,nn,m2r,eve,g2r,h2r,ove,p2r,u2r,rve,_2r,b2r,v2r,pe,h9,tve,F2r,T2r,jW,M2r,E2r,C2r,p9,ave,w2r,A2r,DW,y2r,L2r,x2r,u9,nve,$2r,k2r,GW,S2r,R2r,B2r,_9,sve,P2r,I2r,OW,q2r,N2r,j2r,b9,lve,D2r,G2r,VW,O2r,V2r,X2r,v9,ive,z2r,Q2r,XW,W2r,H2r,U2r,F9,dve,J2r,Y2r,zW,K2r,Z2r,evr,T9,cve,ovr,rvr,QW,tvr,avr,nvr,M9,fve,svr,lvr,WW,ivr,dvr,cvr,E9,mve,fvr,mvr,HW,gvr,hvr,pvr,C9,gve,uvr,_vr,UW,bvr,vvr,Fvr,w9,hve,Tvr,Mvr,JW,Evr,Cvr,wvr,A9,pve,Avr,yvr,YW,Lvr,xvr,$vr,y9,uve,kvr,Svr,KW,Rvr,Bvr,Pvr,L9,_ve,Ivr,qvr,ZW,Nvr,jvr,Dvr,x9,bve,Gvr,Ovr,eH,Vvr,Xvr,zvr,$9,vve,Qvr,Wvr,oH,Hvr,Uvr,Jvr,k9,LIe,ic,S9,Fve,dL,Yvr,Tve,Kvr,xIe,nr,cL,Zvr,dc,eFr,rH,oFr,rFr,tH,tFr,aFr,nFr,fL,sFr,Mve,lFr,iFr,dFr,Rt,mL,cFr,Eve,fFr,mFr,cc,gFr,Cve,hFr,pFr,aH,uFr,_Fr,bFr,R9,vFr,Rr,gL,FFr,wve,TFr,MFr,sn,EFr,Ave,CFr,wFr,yve,AFr,yFr,Lve,LFr,xFr,$Fr,hL,B9,xve,kFr,SFr,nH,RFr,BFr,PFr,P9,$ve,IFr,qFr,sH,NFr,jFr,DFr,I9,$Ie,fc,q9,kve,pL,GFr,Sve,OFr,kIe,sr,uL,VFr,mc,XFr,lH,zFr,QFr,iH,WFr,HFr,UFr,_L,JFr,Rve,YFr,KFr,ZFr,Bt,bL,e0r,Bve,o0r,r0r,gc,t0r,Pve,a0r,n0r,dH,s0r,l0r,i0r,N9,d0r,Br,vL,c0r,Ive,f0r,m0r,ln,g0r,qve,h0r,p0r,Nve,u0r,_0r,jve,b0r,v0r,F0r,Dve,j9,Gve,T0r,M0r,cH,E0r,C0r,w0r,D9,SIe,hc,G9,Ove,FL,A0r,Vve,y0r,RIe,lr,TL,L0r,pc,x0r,fH,$0r,k0r,mH,S0r,R0r,B0r,ML,P0r,Xve,I0r,q0r,N0r,Pt,EL,j0r,zve,D0r,G0r,uc,O0r,Qve,V0r,X0r,gH,z0r,Q0r,W0r,O9,H0r,Pr,CL,U0r,Wve,J0r,Y0r,dn,K0r,Hve,Z0r,e6r,Uve,o6r,r6r,Jve,t6r,a6r,n6r,de,V9,Yve,s6r,l6r,hH,i6r,d6r,c6r,X9,Kve,f6r,m6r,pH,g6r,h6r,p6r,z9,Zve,u6r,_6r,uH,b6r,v6r,F6r,Q9,eFe,T6r,M6r,_H,E6r,C6r,w6r,W9,oFe,A6r,y6r,bH,L6r,x6r,$6r,H9,rFe,k6r,S6r,vH,R6r,B6r,P6r,U9,tFe,I6r,q6r,FH,N6r,j6r,D6r,J9,aFe,G6r,O6r,TH,V6r,X6r,z6r,Y9,nFe,Q6r,W6r,MH,H6r,U6r,J6r,K9,sFe,Y6r,K6r,EH,Z6r,eTr,oTr,Z9,lFe,rTr,tTr,CH,aTr,nTr,sTr,eM,iFe,lTr,iTr,wH,dTr,cTr,fTr,oM,dFe,mTr,gTr,AH,hTr,pTr,uTr,rM,cFe,_Tr,bTr,yH,vTr,FTr,TTr,tM,fFe,MTr,ETr,LH,CTr,wTr,ATr,aM,mFe,yTr,LTr,xH,xTr,$Tr,kTr,nM,gFe,STr,RTr,$H,BTr,PTr,ITr,sM,hFe,qTr,NTr,kH,jTr,DTr,GTr,lM,pFe,OTr,VTr,SH,XTr,zTr,QTr,iM,uFe,WTr,HTr,RH,UTr,JTr,YTr,dM,BIe,_c,cM,_Fe,wL,KTr,bFe,ZTr,PIe,ir,AL,e7r,bc,o7r,BH,r7r,t7r,PH,a7r,n7r,s7r,yL,l7r,vFe,i7r,d7r,c7r,It,LL,f7r,FFe,m7r,g7r,vc,h7r,TFe,p7r,u7r,IH,_7r,b7r,v7r,fM,F7r,Ir,xL,T7r,MFe,M7r,E7r,cn,C7r,EFe,w7r,A7r,CFe,y7r,L7r,wFe,x7r,$7r,k7r,ce,mM,AFe,S7r,R7r,qH,B7r,P7r,I7r,gM,yFe,q7r,N7r,NH,j7r,D7r,G7r,hM,LFe,O7r,V7r,jH,X7r,z7r,Q7r,pM,xFe,W7r,H7r,DH,U7r,J7r,Y7r,uM,$Fe,K7r,Z7r,GH,e9r,o9r,r9r,_M,kFe,t9r,a9r,OH,n9r,s9r,l9r,bM,SFe,i9r,d9r,VH,c9r,f9r,m9r,vM,RFe,g9r,h9r,XH,p9r,u9r,_9r,FM,BFe,b9r,v9r,zH,F9r,T9r,M9r,TM,PFe,E9r,C9r,QH,w9r,A9r,y9r,MM,IFe,L9r,x9r,WH,$9r,k9r,S9r,EM,qFe,R9r,B9r,HH,P9r,I9r,q9r,CM,NFe,N9r,j9r,UH,D9r,G9r,O9r,wM,jFe,V9r,X9r,JH,z9r,Q9r,W9r,AM,DFe,H9r,U9r,YH,J9r,Y9r,K9r,yM,GFe,Z9r,eMr,KH,oMr,rMr,tMr,LM,OFe,aMr,nMr,ZH,sMr,lMr,iMr,xM,VFe,dMr,cMr,eU,fMr,mMr,gMr,$M,XFe,hMr,pMr,oU,uMr,_Mr,bMr,kM,zFe,vMr,FMr,rU,TMr,MMr,EMr,SM,IIe,Fc,RM,QFe,$L,CMr,WFe,wMr,qIe,dr,kL,AMr,Tc,yMr,tU,LMr,xMr,aU,$Mr,kMr,SMr,SL,RMr,HFe,BMr,PMr,IMr,qt,RL,qMr,UFe,NMr,jMr,Mc,DMr,JFe,GMr,OMr,nU,VMr,XMr,zMr,BM,QMr,qr,BL,WMr,YFe,HMr,UMr,fn,JMr,KFe,YMr,KMr,ZFe,ZMr,e4r,e0e,o4r,r4r,t4r,o0e,PM,r0e,a4r,n4r,sU,s4r,l4r,i4r,IM,NIe,Ec,qM,t0e,PL,d4r,a0e,c4r,jIe,cr,IL,f4r,Cc,m4r,lU,g4r,h4r,iU,p4r,u4r,_4r,qL,b4r,n0e,v4r,F4r,T4r,Nt,NL,M4r,s0e,E4r,C4r,wc,w4r,l0e,A4r,y4r,dU,L4r,x4r,$4r,NM,k4r,Nr,jL,S4r,i0e,R4r,B4r,mn,P4r,d0e,I4r,q4r,c0e,N4r,j4r,f0e,D4r,G4r,O4r,m0e,jM,g0e,V4r,X4r,cU,z4r,Q4r,W4r,DM,DIe,Ac,GM,h0e,DL,H4r,p0e,U4r,GIe,fr,GL,J4r,yc,Y4r,fU,K4r,Z4r,mU,eEr,oEr,rEr,OL,tEr,u0e,aEr,nEr,sEr,jt,VL,lEr,_0e,iEr,dEr,Lc,cEr,b0e,fEr,mEr,gU,gEr,hEr,pEr,OM,uEr,jr,XL,_Er,v0e,bEr,vEr,gn,FEr,F0e,TEr,MEr,T0e,EEr,CEr,M0e,wEr,AEr,yEr,oe,VM,E0e,LEr,xEr,hU,$Er,kEr,SEr,XM,C0e,REr,BEr,pU,PEr,IEr,qEr,zM,w0e,NEr,jEr,uU,DEr,GEr,OEr,QM,A0e,VEr,XEr,_U,zEr,QEr,WEr,WM,y0e,HEr,UEr,bU,JEr,YEr,KEr,HM,L0e,ZEr,e5r,vU,o5r,r5r,t5r,UM,x0e,a5r,n5r,FU,s5r,l5r,i5r,JM,$0e,d5r,c5r,TU,f5r,m5r,g5r,YM,k0e,h5r,p5r,MU,u5r,_5r,b5r,KM,S0e,v5r,F5r,EU,T5r,M5r,E5r,ZM,R0e,C5r,w5r,CU,A5r,y5r,L5r,e4,B0e,x5r,$5r,wU,k5r,S5r,R5r,o4,P0e,B5r,P5r,AU,I5r,q5r,N5r,r4,I0e,j5r,D5r,yU,G5r,O5r,V5r,t4,q0e,X5r,z5r,LU,Q5r,W5r,H5r,a4,N0e,U5r,J5r,xU,Y5r,K5r,Z5r,n4,j0e,eCr,oCr,$U,rCr,tCr,aCr,s4,D0e,nCr,sCr,kU,lCr,iCr,dCr,l4,G0e,cCr,fCr,SU,mCr,gCr,hCr,i4,O0e,pCr,uCr,RU,_Cr,bCr,vCr,d4,V0e,FCr,TCr,BU,MCr,ECr,CCr,c4,X0e,wCr,ACr,PU,yCr,LCr,xCr,f4,z0e,$Cr,kCr,IU,SCr,RCr,BCr,m4,Q0e,PCr,ICr,qU,qCr,NCr,jCr,g4,W0e,DCr,GCr,NU,OCr,VCr,XCr,h4,OIe,xc,p4,H0e,zL,zCr,U0e,QCr,VIe,mr,QL,WCr,$c,HCr,jU,UCr,JCr,DU,YCr,KCr,ZCr,WL,e3r,J0e,o3r,r3r,t3r,Dt,HL,a3r,Y0e,n3r,s3r,kc,l3r,K0e,i3r,d3r,GU,c3r,f3r,m3r,u4,g3r,Dr,UL,h3r,Z0e,p3r,u3r,hn,_3r,e6e,b3r,v3r,o6e,F3r,T3r,r6e,M3r,E3r,C3r,ke,_4,t6e,w3r,A3r,OU,y3r,L3r,x3r,b4,a6e,$3r,k3r,VU,S3r,R3r,B3r,v4,n6e,P3r,I3r,XU,q3r,N3r,j3r,F4,s6e,D3r,G3r,zU,O3r,V3r,X3r,T4,l6e,z3r,Q3r,QU,W3r,H3r,U3r,M4,i6e,J3r,Y3r,WU,K3r,Z3r,ewr,E4,d6e,owr,rwr,HU,twr,awr,nwr,C4,c6e,swr,lwr,UU,iwr,dwr,cwr,w4,f6e,fwr,mwr,JU,gwr,hwr,pwr,A4,XIe,Sc,y4,m6e,JL,uwr,g6e,_wr,zIe,gr,YL,bwr,Rc,vwr,YU,Fwr,Twr,KU,Mwr,Ewr,Cwr,KL,wwr,h6e,Awr,ywr,Lwr,Gt,ZL,xwr,p6e,$wr,kwr,Bc,Swr,u6e,Rwr,Bwr,ZU,Pwr,Iwr,qwr,L4,Nwr,Gr,e8,jwr,_6e,Dwr,Gwr,pn,Owr,b6e,Vwr,Xwr,v6e,zwr,Qwr,F6e,Wwr,Hwr,Uwr,Me,x4,T6e,Jwr,Ywr,eJ,Kwr,Zwr,eAr,$4,M6e,oAr,rAr,oJ,tAr,aAr,nAr,k4,E6e,sAr,lAr,rJ,iAr,dAr,cAr,S4,C6e,fAr,mAr,tJ,gAr,hAr,pAr,R4,w6e,uAr,_Ar,aJ,bAr,vAr,FAr,B4,A6e,TAr,MAr,nJ,EAr,CAr,wAr,P4,y6e,AAr,yAr,sJ,LAr,xAr,$Ar,I4,L6e,kAr,SAr,lJ,RAr,BAr,PAr,q4,x6e,IAr,qAr,iJ,NAr,jAr,DAr,N4,$6e,GAr,OAr,dJ,VAr,XAr,zAr,j4,k6e,QAr,WAr,cJ,HAr,UAr,JAr,D4,S6e,YAr,KAr,fJ,ZAr,eyr,oyr,G4,QIe,Pc,O4,R6e,o8,ryr,B6e,tyr,WIe,hr,r8,ayr,Ic,nyr,mJ,syr,lyr,gJ,iyr,dyr,cyr,t8,fyr,P6e,myr,gyr,hyr,Ot,a8,pyr,I6e,uyr,_yr,qc,byr,q6e,vyr,Fyr,hJ,Tyr,Myr,Eyr,V4,Cyr,Or,n8,wyr,N6e,Ayr,yyr,un,Lyr,j6e,xyr,$yr,D6e,kyr,Syr,G6e,Ryr,Byr,Pyr,Le,X4,O6e,Iyr,qyr,pJ,Nyr,jyr,Dyr,z4,V6e,Gyr,Oyr,uJ,Vyr,Xyr,zyr,Q4,X6e,Qyr,Wyr,_J,Hyr,Uyr,Jyr,W4,z6e,Yyr,Kyr,bJ,Zyr,eLr,oLr,H4,Q6e,rLr,tLr,vJ,aLr,nLr,sLr,U4,W6e,lLr,iLr,FJ,dLr,cLr,fLr,J4,H6e,mLr,gLr,TJ,hLr,pLr,uLr,Y4,U6e,_Lr,bLr,MJ,vLr,FLr,TLr,K4,J6e,MLr,ELr,EJ,CLr,wLr,ALr,Z4,Y6e,yLr,LLr,CJ,xLr,$Lr,kLr,eE,HIe,Nc,oE,K6e,s8,SLr,Z6e,RLr,UIe,pr,l8,BLr,jc,PLr,wJ,ILr,qLr,AJ,NLr,jLr,DLr,i8,GLr,eTe,OLr,VLr,XLr,Vt,d8,zLr,oTe,QLr,WLr,Dc,HLr,rTe,ULr,JLr,yJ,YLr,KLr,ZLr,rE,e8r,Vr,c8,o8r,tTe,r8r,t8r,_n,a8r,aTe,n8r,s8r,nTe,l8r,i8r,sTe,d8r,c8r,f8r,Se,tE,lTe,m8r,g8r,LJ,h8r,p8r,u8r,aE,iTe,_8r,b8r,xJ,v8r,F8r,T8r,nE,dTe,M8r,E8r,$J,C8r,w8r,A8r,sE,cTe,y8r,L8r,kJ,x8r,$8r,k8r,lE,fTe,S8r,R8r,SJ,B8r,P8r,I8r,iE,mTe,q8r,N8r,RJ,j8r,D8r,G8r,dE,gTe,O8r,V8r,BJ,X8r,z8r,Q8r,cE,hTe,W8r,H8r,PJ,U8r,J8r,Y8r,fE,pTe,K8r,Z8r,IJ,exr,oxr,rxr,mE,JIe,Gc,gE,uTe,f8,txr,_Te,axr,YIe,ur,m8,nxr,Oc,sxr,qJ,lxr,ixr,NJ,dxr,cxr,fxr,g8,mxr,bTe,gxr,hxr,pxr,Xt,h8,uxr,vTe,_xr,bxr,Vc,vxr,FTe,Fxr,Txr,jJ,Mxr,Exr,Cxr,hE,wxr,Xr,p8,Axr,TTe,yxr,Lxr,bn,xxr,MTe,$xr,kxr,ETe,Sxr,Rxr,CTe,Bxr,Pxr,Ixr,xe,pE,wTe,qxr,Nxr,DJ,jxr,Dxr,Gxr,uE,ATe,Oxr,Vxr,GJ,Xxr,zxr,Qxr,_E,yTe,Wxr,Hxr,OJ,Uxr,Jxr,Yxr,bE,LTe,Kxr,Zxr,VJ,e$r,o$r,r$r,vE,xTe,t$r,a$r,XJ,n$r,s$r,l$r,FE,$Te,i$r,d$r,zJ,c$r,f$r,m$r,TE,kTe,g$r,h$r,QJ,p$r,u$r,_$r,ME,STe,b$r,v$r,WJ,F$r,T$r,M$r,EE,RTe,E$r,C$r,HJ,w$r,A$r,y$r,CE,BTe,L$r,x$r,UJ,$$r,k$r,S$r,wE,KIe,Xc,AE,PTe,u8,R$r,ITe,B$r,ZIe,_r,_8,P$r,zc,I$r,JJ,q$r,N$r,YJ,j$r,D$r,G$r,b8,O$r,qTe,V$r,X$r,z$r,zt,v8,Q$r,NTe,W$r,H$r,Qc,U$r,jTe,J$r,Y$r,KJ,K$r,Z$r,ekr,yE,okr,zr,F8,rkr,DTe,tkr,akr,vn,nkr,GTe,skr,lkr,OTe,ikr,dkr,VTe,ckr,fkr,mkr,$e,LE,XTe,gkr,hkr,ZJ,pkr,ukr,_kr,xE,zTe,bkr,vkr,eY,Fkr,Tkr,Mkr,$E,QTe,Ekr,Ckr,oY,wkr,Akr,ykr,kE,WTe,Lkr,xkr,rY,$kr,kkr,Skr,SE,HTe,Rkr,Bkr,tY,Pkr,Ikr,qkr,RE,UTe,Nkr,jkr,aY,Dkr,Gkr,Okr,BE,JTe,Vkr,Xkr,nY,zkr,Qkr,Wkr,PE,YTe,Hkr,Ukr,sY,Jkr,Ykr,Kkr,IE,KTe,Zkr,eSr,lY,oSr,rSr,tSr,qE,ZTe,aSr,nSr,iY,sSr,lSr,iSr,NE,eqe,Wc,jE,e7e,T8,dSr,o7e,cSr,oqe,br,M8,fSr,Hc,mSr,dY,gSr,hSr,cY,pSr,uSr,_Sr,E8,bSr,r7e,vSr,FSr,TSr,Qt,C8,MSr,t7e,ESr,CSr,Uc,wSr,a7e,ASr,ySr,fY,LSr,xSr,$Sr,DE,kSr,Qr,w8,SSr,n7e,RSr,BSr,Fn,PSr,s7e,ISr,qSr,l7e,NSr,jSr,i7e,DSr,GSr,OSr,De,GE,d7e,VSr,XSr,mY,zSr,QSr,WSr,OE,c7e,HSr,USr,gY,JSr,YSr,KSr,VE,f7e,ZSr,eRr,hY,oRr,rRr,tRr,XE,m7e,aRr,nRr,pY,sRr,lRr,iRr,zE,g7e,dRr,cRr,uY,fRr,mRr,gRr,QE,h7e,hRr,pRr,_Y,uRr,_Rr,bRr,WE,p7e,vRr,FRr,bY,TRr,MRr,ERr,HE,u7e,CRr,wRr,vY,ARr,yRr,LRr,UE,rqe,Jc,JE,_7e,A8,xRr,b7e,$Rr,tqe,vr,y8,kRr,Yc,SRr,FY,RRr,BRr,TY,PRr,IRr,qRr,L8,NRr,v7e,jRr,DRr,GRr,Wt,x8,ORr,F7e,VRr,XRr,Kc,zRr,T7e,QRr,WRr,MY,HRr,URr,JRr,YE,YRr,Wr,$8,KRr,M7e,ZRr,eBr,Tn,oBr,E7e,rBr,tBr,C7e,aBr,nBr,w7e,sBr,lBr,iBr,Ge,KE,A7e,dBr,cBr,EY,fBr,mBr,gBr,ZE,y7e,hBr,pBr,CY,uBr,_Br,bBr,e5,L7e,vBr,FBr,wY,TBr,MBr,EBr,o5,x7e,CBr,wBr,AY,ABr,yBr,LBr,r5,$7e,xBr,$Br,yY,kBr,SBr,RBr,t5,k7e,BBr,PBr,LY,IBr,qBr,NBr,a5,S7e,jBr,DBr,xY,GBr,OBr,VBr,n5,R7e,XBr,zBr,$Y,QBr,WBr,HBr,s5,aqe,Zc,l5,B7e,k8,UBr,P7e,JBr,nqe,Fr,S8,YBr,ef,KBr,kY,ZBr,ePr,SY,oPr,rPr,tPr,R8,aPr,I7e,nPr,sPr,lPr,Ht,B8,iPr,q7e,dPr,cPr,of,fPr,N7e,mPr,gPr,RY,hPr,pPr,uPr,i5,_Pr,Hr,P8,bPr,j7e,vPr,FPr,Mn,TPr,D7e,MPr,EPr,G7e,CPr,wPr,O7e,APr,yPr,LPr,V7e,d5,X7e,xPr,$Pr,BY,kPr,SPr,RPr,c5,sqe,rf,f5,z7e,I8,BPr,Q7e,PPr,lqe,Tr,q8,IPr,tf,qPr,PY,NPr,jPr,IY,DPr,GPr,OPr,N8,VPr,W7e,XPr,zPr,QPr,Ut,j8,WPr,H7e,HPr,UPr,af,JPr,U7e,YPr,KPr,qY,ZPr,eIr,oIr,m5,rIr,Ur,D8,tIr,J7e,aIr,nIr,En,sIr,Y7e,lIr,iIr,K7e,dIr,cIr,Z7e,fIr,mIr,gIr,G8,g5,e9e,hIr,pIr,NY,uIr,_Ir,bIr,h5,o9e,vIr,FIr,jY,TIr,MIr,EIr,p5,iqe,nf,u5,r9e,O8,CIr,t9e,wIr,dqe,Mr,V8,AIr,sf,yIr,DY,LIr,xIr,GY,$Ir,kIr,SIr,X8,RIr,a9e,BIr,PIr,IIr,Jt,z8,qIr,n9e,NIr,jIr,lf,DIr,s9e,GIr,OIr,OY,VIr,XIr,zIr,_5,QIr,Jr,Q8,WIr,l9e,HIr,UIr,Cn,JIr,i9e,YIr,KIr,d9e,ZIr,eqr,c9e,oqr,rqr,tqr,f9e,b5,m9e,aqr,nqr,VY,sqr,lqr,iqr,v5,cqe;return d=new ee({}),Ma=new B({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),O3=new ee({}),V3=new B({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),_f=new dqr({props:{warning:!0,$$slots:{default:[TCt]},$$scope:{ctx:A}}}),X3=new ee({}),z3=new R({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/configuration_auto.py#L563"}}),H3=new R({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/configuration_auto.py#L586"}}),hg=new P({props:{anchor:"transformers.AutoConfig.from_pretrained.example",$$slots:{default:[MCt]},$$scope:{ctx:A}}}),U3=new R({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/configuration_auto.py#L708"}}),J3=new ee({}),Y3=new R({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/tokenization_auto.py#L377"}}),ew=new R({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16907/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/tokenization_auto.py#L391"}}),Qg=new P({props:{anchor:"transformers.AutoTokenizer.from_pretrained.example",$$slots:{default:[ECt]},$$scope:{ctx:A}}}),ow=new R({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/tokenization_auto.py#L587"}}),rw=new ee({}),tw=new R({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/feature_extraction_auto.py#L177"}}),sw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16907/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/feature_extraction_auto.py#L191"}}),vh=new dqr({props:{$$slots:{default:[CCt]},$$scope:{ctx:A}}}),Fh=new P({props:{anchor:"transformers.AutoFeatureExtractor.from_pretrained.example",$$slots:{default:[wCt]},$$scope:{ctx:A}}}),lw=new R({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/feature_extraction_auto.py#L318"}}),iw=new ee({}),dw=new R({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/processing_auto.py#L76"}}),mw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/processing_auto.py#L90"}}),qh=new dqr({props:{$$slots:{default:[ACt]},$$scope:{ctx:A}}}),Nh=new P({props:{anchor:"transformers.AutoProcessor.from_pretrained.example",$$slots:{default:[yCt]},$$scope:{ctx:A}}}),gw=new R({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/processing_auto.py#L243"}}),hw=new ee({}),pw=new R({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L717"}}),_w=new R({props:{name:"from_config",anchor:"transformers.AutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/dpt#transformers.DPTModel">DPTModel</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionModel">Data2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig">DecisionTransformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/decision_transformer#transformers.DecisionTransformerModel">DecisionTransformerModel</a> (Decision Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/regnet#transformers.RegNetModel">RegNetModel</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/yolos#transformers.YolosModel">YolosModel</a> (YOLOS model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),Gh=new P({props:{anchor:"transformers.AutoModel.from_config.example",$$slots:{default:[LCt]},$$scope:{ctx:A}}}),bw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModel.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModel.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),xu=new P({props:{anchor:"transformers.AutoModel.from_pretrained.example",$$slots:{default:[xCt]},$$scope:{ctx:A}}}),vw=new ee({}),Fw=new R({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L724"}}),Mw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),ku=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_config.example",$$slots:{default:[$Ct]},$$scope:{ctx:A}}}),Ew=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),b_=new P({props:{anchor:"transformers.AutoModelForPreTraining.from_pretrained.example",$$slots:{default:[kCt]},$$scope:{ctx:A}}}),Cw=new ee({}),ww=new R({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L739"}}),yw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),F_=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_config.example",$$slots:{default:[SCt]},$$scope:{ctx:A}}}),Lw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),t1=new P({props:{anchor:"transformers.AutoModelForCausalLM.from_pretrained.example",$$slots:{default:[RCt]},$$scope:{ctx:A}}}),xw=new ee({}),$w=new R({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L746"}}),Sw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),n1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_config.example",$$slots:{default:[BCt]},$$scope:{ctx:A}}}),Rw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),O1=new P({props:{anchor:"transformers.AutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[PCt]},$$scope:{ctx:A}}}),Bw=new ee({}),Pw=new R({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L753"}}),qw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),X1=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[ICt]},$$scope:{ctx:A}}}),Nw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),db=new P({props:{anchor:"transformers.AutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[qCt]},$$scope:{ctx:A}}}),jw=new ee({}),Dw=new R({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L762"}}),Ow=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),fb=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_config.example",$$slots:{default:[NCt]},$$scope:{ctx:A}}}),Vw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),s2=new P({props:{anchor:"transformers.AutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[jCt]},$$scope:{ctx:A}}}),Xw=new ee({}),zw=new R({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L796"}}),Ww=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice">DebertaV2ForMultipleChoice</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),i2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_config.example",$$slots:{default:[DCt]},$$scope:{ctx:A}}}),Hw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),j2=new P({props:{anchor:"transformers.AutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[GCt]},$$scope:{ctx:A}}}),Uw=new ee({}),Jw=new R({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L803"}}),Kw=new R({props:{name:"from_config",anchor:"transformers.AutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),G2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[OCt]},$$scope:{ctx:A}}}),Zw=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),H2=new P({props:{anchor:"transformers.AutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[VCt]},$$scope:{ctx:A}}}),eA=new ee({}),oA=new R({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L789"}}),tA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),J2=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_config.example",$$slots:{default:[XCt]},$$scope:{ctx:A}}}),aA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),kv=new P({props:{anchor:"transformers.AutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[zCt]},$$scope:{ctx:A}}}),nA=new ee({}),sA=new R({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L771"}}),iA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),Rv=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_config.example",$$slots:{default:[QCt]},$$scope:{ctx:A}}}),dA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),FF=new P({props:{anchor:"transformers.AutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[WCt]},$$scope:{ctx:A}}}),cA=new ee({}),fA=new R({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L778"}}),gA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),MF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[HCt]},$$scope:{ctx:A}}}),hA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),wF=new P({props:{anchor:"transformers.AutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[UCt]},$$scope:{ctx:A}}}),pA=new ee({}),uA=new R({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L812"}}),bA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification">Data2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/regnet#transformers.RegNetConfig">RegNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/regnet#transformers.RegNetForImageClassification">RegNetForImageClassification</a> (RegNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),yF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_config.example",$$slots:{default:[JCt]},$$scope:{ctx:A}}}),vA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),DF=new P({props:{anchor:"transformers.AutoModelForImageClassification.from_pretrained.example",$$slots:{default:[YCt]},$$scope:{ctx:A}}}),FA=new ee({}),TA=new R({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L851"}}),EA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),OF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_config.example",$$slots:{default:[KCt]},$$scope:{ctx:A}}}),CA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),zF=new P({props:{anchor:"transformers.AutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[ZCt]},$$scope:{ctx:A}}}),wA=new ee({}),AA=new R({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L858"}}),LA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),WF=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_config.example",$$slots:{default:[e3t]},$$scope:{ctx:A}}}),xA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),t0=new P({props:{anchor:"transformers.AutoModelForAudioClassification.from_pretrained.example",$$slots:{default:[o3t]},$$scope:{ctx:A}}}),$A=new ee({}),kA=new R({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L881"}}),RA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioFrameClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),n0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_config.example",$$slots:{default:[r3t]},$$scope:{ctx:A}}}),BA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),f0=new P({props:{anchor:"transformers.AutoModelForAudioFrameClassification.from_pretrained.example",$$slots:{default:[t3t]},$$scope:{ctx:A}}}),PA=new ee({}),IA=new R({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L865"}}),NA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForCTC.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),g0=new P({props:{anchor:"transformers.AutoModelForCTC.from_config.example",$$slots:{default:[a3t]},$$scope:{ctx:A}}}),jA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForCTC.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForCTC.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForCTC.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForCTC.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForCTC.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForCTC.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForCTC.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForCTC.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForCTC.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForCTC.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForCTC.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForCTC.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForCTC.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),E0=new P({props:{anchor:"transformers.AutoModelForCTC.from_pretrained.example",$$slots:{default:[n3t]},$$scope:{ctx:A}}}),DA=new ee({}),GA=new R({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L872"}}),VA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),w0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[s3t]},$$scope:{ctx:A}}}),XA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),x0=new P({props:{anchor:"transformers.AutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[l3t]},$$scope:{ctx:A}}}),QA=new ee({}),WA=new R({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L890"}}),UA=new R({props:{name:"from_config",anchor:"transformers.AutoModelForAudioXVector.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),k0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_config.example",$$slots:{default:[i3t]},$$scope:{ctx:A}}}),JA=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForAudioXVector.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),q0=new P({props:{anchor:"transformers.AutoModelForAudioXVector.from_pretrained.example",$$slots:{default:[d3t]},$$scope:{ctx:A}}}),YA=new ee({}),KA=new R({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L897"}}),ey=new R({props:{name:"from_config",anchor:"transformers.AutoModelForMaskedImageModeling.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),j0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_config.example",$$slots:{default:[c3t]},$$scope:{ctx:A}}}),oy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),X0=new P({props:{anchor:"transformers.AutoModelForMaskedImageModeling.from_pretrained.example",$$slots:{default:[f3t]},$$scope:{ctx:A}}}),ry=new ee({}),ty=new R({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L844"}}),ny=new R({props:{name:"from_config",anchor:"transformers.AutoModelForObjectDetection.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/yolos#transformers.YolosConfig">YolosConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/yolos#transformers.YolosForObjectDetection">YolosForObjectDetection</a> (YOLOS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),Q0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_config.example",$$slots:{default:[m3t]},$$scope:{ctx:A}}}),sy=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForObjectDetection.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),J0=new P({props:{anchor:"transformers.AutoModelForObjectDetection.from_pretrained.example",$$slots:{default:[g3t]},$$scope:{ctx:A}}}),iy=new ee({}),dy=new R({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L819"}}),fy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForImageSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),K0=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_config.example",$$slots:{default:[h3t]},$$scope:{ctx:A}}}),my=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForImageSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),o6=new P({props:{anchor:"transformers.AutoModelForImageSegmentation.from_pretrained.example",$$slots:{default:[p3t]},$$scope:{ctx:A}}}),gy=new ee({}),hy=new R({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L826"}}),uy=new R({props:{name:"from_config",anchor:"transformers.AutoModelForSemanticSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/dpt#transformers.DPTConfig">DPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/dpt#transformers.DPTForSemanticSegmentation">DPTForSemanticSegmentation</a> (DPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation">Data2VecVisionForSemanticSegmentation</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),t6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_config.example",$$slots:{default:[u3t]},$$scope:{ctx:A}}}),_y=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),d6=new P({props:{anchor:"transformers.AutoModelForSemanticSegmentation.from_pretrained.example",$$slots:{default:[_3t]},$$scope:{ctx:A}}}),by=new ee({}),vy=new R({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_auto.py#L835"}}),Ty=new R({props:{name:"from_config",anchor:"transformers.AutoModelForInstanceSegmentation.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),f6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_config.example",$$slots:{default:[b3t]},$$scope:{ctx:A}}}),My=new R({props:{name:"from_pretrained",anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),h6=new P({props:{anchor:"transformers.AutoModelForInstanceSegmentation.from_pretrained.example",$$slots:{default:[v3t]},$$scope:{ctx:A}}}),Ey=new ee({}),Cy=new R({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L383"}}),Ay=new R({props:{name:"from_config",anchor:"transformers.TFAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.TFData2VecVisionModel">TFData2VecVisionModel</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.TFGPTJModel">TFGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.TFViTMAEModel">TFViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),u6=new P({props:{anchor:"transformers.TFAutoModel.from_config.example",$$slots:{default:[F3t]},$$scope:{ctx:A}}}),yy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),lT=new P({props:{anchor:"transformers.TFAutoModel.from_pretrained.example",$$slots:{default:[T3t]},$$scope:{ctx:A}}}),Ly=new ee({}),xy=new R({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L390"}}),ky=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining">TFViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),dT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_config.example",$$slots:{default:[M3t]},$$scope:{ctx:A}}}),Sy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),RT=new P({props:{anchor:"transformers.TFAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[E3t]},$$scope:{ctx:A}}}),Ry=new ee({}),By=new R({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L405"}}),Iy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.TFGPTJForCausalLM">TFGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),PT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_config.example",$$slots:{default:[C3t]},$$scope:{ctx:A}}}),qy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),HT=new P({props:{anchor:"transformers.TFAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[w3t]},$$scope:{ctx:A}}}),Ny=new ee({}),jy=new R({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L412"}}),Gy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionConfig">Data2VecVisionConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification">TFData2VecVisionForImageClassification</a> (Data2VecVision model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),JT=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_config.example",$$slots:{default:[A3t]},$$scope:{ctx:A}}}),Oy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),e7=new P({props:{anchor:"transformers.TFAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[y3t]},$$scope:{ctx:A}}}),Vy=new ee({}),Xy=new R({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L428"}}),Qy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),r7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_config.example",$$slots:{default:[L3t]},$$scope:{ctx:A}}}),Wy=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),E7=new P({props:{anchor:"transformers.TFAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[x3t]},$$scope:{ctx:A}}}),Hy=new ee({}),Uy=new R({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L435"}}),Yy=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),w7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[$3t]},$$scope:{ctx:A}}}),Ky=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),I7=new P({props:{anchor:"transformers.TFAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[k3t]},$$scope:{ctx:A}}}),Zy=new ee({}),eL=new R({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L444"}}),rL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification">TFGPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),N7=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_config.example",$$slots:{default:[S3t]},$$scope:{ctx:A}}}),tL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),f9=new P({props:{anchor:"transformers.TFAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[R3t]},$$scope:{ctx:A}}}),aL=new ee({}),nL=new R({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L480"}}),lL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),g9=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_config.example",$$slots:{default:[B3t]},$$scope:{ctx:A}}}),iL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),k9=new P({props:{anchor:"transformers.TFAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[P3t]},$$scope:{ctx:A}}}),dL=new ee({}),cL=new R({props:{name:"class transformers.TFAutoModelForNextSentencePrediction",anchor:"transformers.TFAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L487"}}),mL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForNextSentencePrediction">TFBertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction">TFMobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),R9=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[I3t]},$$scope:{ctx:A}}}),gL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),I9=new P({props:{anchor:"transformers.TFAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[q3t]},$$scope:{ctx:A}}}),pL=new ee({}),uL=new R({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),bL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),N9=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_config.example",$$slots:{default:[N3t]},$$scope:{ctx:A}}}),vL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),D9=new P({props:{anchor:"transformers.TFAutoModelForTableQuestionAnswering.from_pretrained.example",$$slots:{default:[j3t]},$$scope:{ctx:A}}}),FL=new ee({}),TL=new R({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L471"}}),EL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),O9=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_config.example",$$slots:{default:[D3t]},$$scope:{ctx:A}}}),CL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),dM=new P({props:{anchor:"transformers.TFAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[G3t]},$$scope:{ctx:A}}}),wL=new ee({}),AL=new R({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L453"}}),LL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering">TFGPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),fM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[O3t]},$$scope:{ctx:A}}}),xL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),SM=new P({props:{anchor:"transformers.TFAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[V3t]},$$scope:{ctx:A}}}),$L=new ee({}),kL=new R({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L421"}}),RL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),BM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_config.example",$$slots:{default:[X3t]},$$scope:{ctx:A}}}),BL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),IM=new P({props:{anchor:"transformers.TFAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[z3t]},$$scope:{ctx:A}}}),PL=new ee({}),IL=new R({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_tf_auto.py#L496"}}),NL=new R({props:{name:"from_config",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),NM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_config.example",$$slots:{default:[Q3t]},$$scope:{ctx:A}}}),jL=new R({props:{name:"from_pretrained",anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),DM=new P({props:{anchor:"transformers.TFAutoModelForSpeechSeq2Seq.from_pretrained.example",$$slots:{default:[W3t]},$$scope:{ctx:A}}}),DL=new ee({}),GL=new R({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L241"}}),VL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModel.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),OM=new P({props:{anchor:"transformers.FlaxAutoModel.from_config.example",$$slots:{default:[H3t]},$$scope:{ctx:A}}}),XL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModel.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModel.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModel.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModel.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModel.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModel.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModel.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModel.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModel.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModel.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModel.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModel.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),h4=new P({props:{anchor:"transformers.FlaxAutoModel.from_pretrained.example",$$slots:{default:[U3t]},$$scope:{ctx:A}}}),zL=new ee({}),QL=new R({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L255"}}),HL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForCausalLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForCausalLM">FlaxBertForCausalLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM">FlaxBigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForCausalLM">FlaxElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM">FlaxRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),u4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_config.example",$$slots:{default:[J3t]},$$scope:{ctx:A}}}),UL=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),A4=new P({props:{anchor:"transformers.FlaxAutoModelForCausalLM.from_pretrained.example",$$slots:{default:[Y3t]},$$scope:{ctx:A}}}),JL=new ee({}),YL=new R({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L248"}}),ZL=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForPreTraining.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),L4=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_config.example",$$slots:{default:[K3t]},$$scope:{ctx:A}}}),e8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),G4=new P({props:{anchor:"transformers.FlaxAutoModelForPreTraining.from_pretrained.example",$$slots:{default:[Z3t]},$$scope:{ctx:A}}}),o8=new ee({}),r8=new R({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L262"}}),a8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMaskedLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),V4=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_config.example",$$slots:{default:[ewt]},$$scope:{ctx:A}}}),n8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),eE=new P({props:{anchor:"transformers.FlaxAutoModelForMaskedLM.from_pretrained.example",$$slots:{default:[owt]},$$scope:{ctx:A}}}),s8=new ee({}),l8=new R({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L269"}}),d8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),rE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_config.example",$$slots:{default:[rwt]},$$scope:{ctx:A}}}),c8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),mE=new P({props:{anchor:"transformers.FlaxAutoModelForSeq2SeqLM.from_pretrained.example",$$slots:{default:[twt]},$$scope:{ctx:A}}}),f8=new ee({}),m8=new R({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L278"}}),h8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),hE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_config.example",$$slots:{default:[awt]},$$scope:{ctx:A}}}),p8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),wE=new P({props:{anchor:"transformers.FlaxAutoModelForSequenceClassification.from_pretrained.example",$$slots:{default:[nwt]},$$scope:{ctx:A}}}),u8=new ee({}),_8=new R({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L287"}}),v8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),yE=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_config.example",$$slots:{default:[swt]},$$scope:{ctx:A}}}),F8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),NE=new P({props:{anchor:"transformers.FlaxAutoModelForQuestionAnswering.from_pretrained.example",$$slots:{default:[lwt]},$$scope:{ctx:A}}}),T8=new ee({}),M8=new R({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L294"}}),C8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForTokenClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),DE=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_config.example",$$slots:{default:[iwt]},$$scope:{ctx:A}}}),w8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),UE=new P({props:{anchor:"transformers.FlaxAutoModelForTokenClassification.from_pretrained.example",$$slots:{default:[dwt]},$$scope:{ctx:A}}}),A8=new ee({}),y8=new R({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L303"}}),x8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),YE=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_config.example",$$slots:{default:[cwt]},$$scope:{ctx:A}}}),$8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),s5=new P({props:{anchor:"transformers.FlaxAutoModelForMultipleChoice.from_pretrained.example",$$slots:{default:[fwt]},$$scope:{ctx:A}}}),k8=new ee({}),S8=new R({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L310"}}),B8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),i5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_config.example",$$slots:{default:[mwt]},$$scope:{ctx:A}}}),P8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),c5=new P({props:{anchor:"transformers.FlaxAutoModelForNextSentencePrediction.from_pretrained.example",$$slots:{default:[gwt]},$$scope:{ctx:A}}}),I8=new ee({}),q8=new R({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L319"}}),j8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForImageClassification.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),m5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_config.example",$$slots:{default:[hwt]},$$scope:{ctx:A}}}),D8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),p5=new P({props:{anchor:"transformers.FlaxAutoModelForImageClassification.from_pretrained.example",$$slots:{default:[pwt]},$$scope:{ctx:A}}}),O8=new ee({}),V8=new R({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/modeling_flax_auto.py#L328"}}),z8=new R({props:{name:"from_config",anchor:"transformers.FlaxAutoModelForVision2Seq.from_config",parameters:[{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L389"}}),_5=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_config.example",$$slots:{default:[uwt]},$$scope:{ctx:A}}}),Q8=new R({props:{name:"from_pretrained",anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],parametersDescription:[{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16907/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16907/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}],source:"https://github.com/huggingface/transformers/blob/vr_16907/src/transformers/models/auto/auto_factory.py#L417"}}),v5=new P({props:{anchor:"transformers.FlaxAutoModelForVision2Seq.from_pretrained.example",$$slots:{default:[_wt]},$$scope:{ctx:A}}}),{c(){g=a("meta"),v=l(),p=a("h1"),m=a("a"),u=a("span"),F(d.$$.fragment),h=l(),Mo=a("span"),li=o("Auto Classes"),mf=l(),et=a("p"),ii=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=a("code"),N3=o("from_pretrained()"),gf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),qe=l(),Xe=a("p"),ci=o("Instantiating one of "),An=a("a"),j3=o("AutoConfig"),yn=o(", "),Ln=a("a"),D3=o("AutoModel"),fi=o(`, and
`),xn=a("a"),G3=o("AutoTokenizer"),mi=o(" will directly create a class of the relevant architecture. For instance"),hf=l(),F(Ma.$$.fragment),ze=l(),Ae=a("p"),n$=o("will create a model that is an instance of "),gi=a("a"),s$=o("BertModel"),l$=o("."),Eo=l(),Ea=a("p"),i$=o("There is one class of "),pf=a("code"),d$=o("AutoModel"),bje=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),lPe=l(),hi=a("h2"),uf=a("a"),qZ=a("span"),F(O3.$$.fragment),vje=l(),NZ=a("span"),Fje=o("Extending the Auto Classes"),iPe=l(),$n=a("p"),Tje=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jZ=a("code"),Mje=o("NewModel"),Eje=o(", make sure you have a "),DZ=a("code"),Cje=o("NewModelConfig"),wje=o(` then you can add those to the auto
classes like this:`),dPe=l(),F(V3.$$.fragment),cPe=l(),c$=a("p"),Aje=o("You will then be able to use the auto classes like you would usually do!"),fPe=l(),F(_f.$$.fragment),mPe=l(),pi=a("h2"),bf=a("a"),GZ=a("span"),F(X3.$$.fragment),yje=l(),OZ=a("span"),Lje=o("AutoConfig"),gPe=l(),Co=a("div"),F(z3.$$.fragment),xje=l(),Q3=a("p"),$je=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f$=a("a"),kje=o("from_pretrained()"),Sje=o(" class method."),Rje=l(),W3=a("p"),Bje=o("This class cannot be instantiated directly using "),VZ=a("code"),Pje=o("__init__()"),Ije=o(" (throws an error)."),qje=l(),Er=a("div"),F(H3.$$.fragment),Nje=l(),XZ=a("p"),jje=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),Dje=l(),ui=a("p"),Gje=o("The configuration class to instantiate is selected based on the "),zZ=a("code"),Oje=o("model_type"),Vje=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QZ=a("code"),Xje=o("pretrained_model_name_or_path"),zje=o(":"),Qje=l(),y=a("ul"),vf=a("li"),WZ=a("strong"),Wje=o("albert"),Hje=o(" \u2014 "),m$=a("a"),Uje=o("AlbertConfig"),Jje=o(" (ALBERT model)"),Yje=l(),Ff=a("li"),HZ=a("strong"),Kje=o("bart"),Zje=o(" \u2014 "),g$=a("a"),eDe=o("BartConfig"),oDe=o(" (BART model)"),rDe=l(),Tf=a("li"),UZ=a("strong"),tDe=o("beit"),aDe=o(" \u2014 "),h$=a("a"),nDe=o("BeitConfig"),sDe=o(" (BEiT model)"),lDe=l(),Mf=a("li"),JZ=a("strong"),iDe=o("bert"),dDe=o(" \u2014 "),p$=a("a"),cDe=o("BertConfig"),fDe=o(" (BERT model)"),mDe=l(),Ef=a("li"),YZ=a("strong"),gDe=o("bert-generation"),hDe=o(" \u2014 "),u$=a("a"),pDe=o("BertGenerationConfig"),uDe=o(" (Bert Generation model)"),_De=l(),Cf=a("li"),KZ=a("strong"),bDe=o("big_bird"),vDe=o(" \u2014 "),_$=a("a"),FDe=o("BigBirdConfig"),TDe=o(" (BigBird model)"),MDe=l(),wf=a("li"),ZZ=a("strong"),EDe=o("bigbird_pegasus"),CDe=o(" \u2014 "),b$=a("a"),wDe=o("BigBirdPegasusConfig"),ADe=o(" (BigBirdPegasus model)"),yDe=l(),Af=a("li"),eee=a("strong"),LDe=o("blenderbot"),xDe=o(" \u2014 "),v$=a("a"),$De=o("BlenderbotConfig"),kDe=o(" (Blenderbot model)"),SDe=l(),yf=a("li"),oee=a("strong"),RDe=o("blenderbot-small"),BDe=o(" \u2014 "),F$=a("a"),PDe=o("BlenderbotSmallConfig"),IDe=o(" (BlenderbotSmall model)"),qDe=l(),Lf=a("li"),ree=a("strong"),NDe=o("camembert"),jDe=o(" \u2014 "),T$=a("a"),DDe=o("CamembertConfig"),GDe=o(" (CamemBERT model)"),ODe=l(),xf=a("li"),tee=a("strong"),VDe=o("canine"),XDe=o(" \u2014 "),M$=a("a"),zDe=o("CanineConfig"),QDe=o(" (Canine model)"),WDe=l(),$f=a("li"),aee=a("strong"),HDe=o("clip"),UDe=o(" \u2014 "),E$=a("a"),JDe=o("CLIPConfig"),YDe=o(" (CLIP model)"),KDe=l(),kf=a("li"),nee=a("strong"),ZDe=o("convbert"),eGe=o(" \u2014 "),C$=a("a"),oGe=o("ConvBertConfig"),rGe=o(" (ConvBERT model)"),tGe=l(),Sf=a("li"),see=a("strong"),aGe=o("convnext"),nGe=o(" \u2014 "),w$=a("a"),sGe=o("ConvNextConfig"),lGe=o(" (ConvNext model)"),iGe=l(),Rf=a("li"),lee=a("strong"),dGe=o("ctrl"),cGe=o(" \u2014 "),A$=a("a"),fGe=o("CTRLConfig"),mGe=o(" (CTRL model)"),gGe=l(),Bf=a("li"),iee=a("strong"),hGe=o("data2vec-audio"),pGe=o(" \u2014 "),y$=a("a"),uGe=o("Data2VecAudioConfig"),_Ge=o(" (Data2VecAudio model)"),bGe=l(),Pf=a("li"),dee=a("strong"),vGe=o("data2vec-text"),FGe=o(" \u2014 "),L$=a("a"),TGe=o("Data2VecTextConfig"),MGe=o(" (Data2VecText model)"),EGe=l(),If=a("li"),cee=a("strong"),CGe=o("data2vec-vision"),wGe=o(" \u2014 "),x$=a("a"),AGe=o("Data2VecVisionConfig"),yGe=o(" (Data2VecVision model)"),LGe=l(),qf=a("li"),fee=a("strong"),xGe=o("deberta"),$Ge=o(" \u2014 "),$$=a("a"),kGe=o("DebertaConfig"),SGe=o(" (DeBERTa model)"),RGe=l(),Nf=a("li"),mee=a("strong"),BGe=o("deberta-v2"),PGe=o(" \u2014 "),k$=a("a"),IGe=o("DebertaV2Config"),qGe=o(" (DeBERTa-v2 model)"),NGe=l(),jf=a("li"),gee=a("strong"),jGe=o("decision_transformer"),DGe=o(" \u2014 "),S$=a("a"),GGe=o("DecisionTransformerConfig"),OGe=o(" (Decision Transformer model)"),VGe=l(),Df=a("li"),hee=a("strong"),XGe=o("deit"),zGe=o(" \u2014 "),R$=a("a"),QGe=o("DeiTConfig"),WGe=o(" (DeiT model)"),HGe=l(),Gf=a("li"),pee=a("strong"),UGe=o("detr"),JGe=o(" \u2014 "),B$=a("a"),YGe=o("DetrConfig"),KGe=o(" (DETR model)"),ZGe=l(),Of=a("li"),uee=a("strong"),eOe=o("distilbert"),oOe=o(" \u2014 "),P$=a("a"),rOe=o("DistilBertConfig"),tOe=o(" (DistilBERT model)"),aOe=l(),Vf=a("li"),_ee=a("strong"),nOe=o("dpr"),sOe=o(" \u2014 "),I$=a("a"),lOe=o("DPRConfig"),iOe=o(" (DPR model)"),dOe=l(),Xf=a("li"),bee=a("strong"),cOe=o("dpt"),fOe=o(" \u2014 "),q$=a("a"),mOe=o("DPTConfig"),gOe=o(" (DPT model)"),hOe=l(),zf=a("li"),vee=a("strong"),pOe=o("electra"),uOe=o(" \u2014 "),N$=a("a"),_Oe=o("ElectraConfig"),bOe=o(" (ELECTRA model)"),vOe=l(),Qf=a("li"),Fee=a("strong"),FOe=o("encoder-decoder"),TOe=o(" \u2014 "),j$=a("a"),MOe=o("EncoderDecoderConfig"),EOe=o(" (Encoder decoder model)"),COe=l(),Wf=a("li"),Tee=a("strong"),wOe=o("flaubert"),AOe=o(" \u2014 "),D$=a("a"),yOe=o("FlaubertConfig"),LOe=o(" (FlauBERT model)"),xOe=l(),Hf=a("li"),Mee=a("strong"),$Oe=o("fnet"),kOe=o(" \u2014 "),G$=a("a"),SOe=o("FNetConfig"),ROe=o(" (FNet model)"),BOe=l(),Uf=a("li"),Eee=a("strong"),POe=o("fsmt"),IOe=o(" \u2014 "),O$=a("a"),qOe=o("FSMTConfig"),NOe=o(" (FairSeq Machine-Translation model)"),jOe=l(),Jf=a("li"),Cee=a("strong"),DOe=o("funnel"),GOe=o(" \u2014 "),V$=a("a"),OOe=o("FunnelConfig"),VOe=o(" (Funnel Transformer model)"),XOe=l(),Yf=a("li"),wee=a("strong"),zOe=o("glpn"),QOe=o(" \u2014 "),X$=a("a"),WOe=o("GLPNConfig"),HOe=o(" (GLPN model)"),UOe=l(),Kf=a("li"),Aee=a("strong"),JOe=o("gpt2"),YOe=o(" \u2014 "),z$=a("a"),KOe=o("GPT2Config"),ZOe=o(" (OpenAI GPT-2 model)"),eVe=l(),Zf=a("li"),yee=a("strong"),oVe=o("gpt_neo"),rVe=o(" \u2014 "),Q$=a("a"),tVe=o("GPTNeoConfig"),aVe=o(" (GPT Neo model)"),nVe=l(),em=a("li"),Lee=a("strong"),sVe=o("gptj"),lVe=o(" \u2014 "),W$=a("a"),iVe=o("GPTJConfig"),dVe=o(" (GPT-J model)"),cVe=l(),om=a("li"),xee=a("strong"),fVe=o("hubert"),mVe=o(" \u2014 "),H$=a("a"),gVe=o("HubertConfig"),hVe=o(" (Hubert model)"),pVe=l(),rm=a("li"),$ee=a("strong"),uVe=o("ibert"),_Ve=o(" \u2014 "),U$=a("a"),bVe=o("IBertConfig"),vVe=o(" (I-BERT model)"),FVe=l(),tm=a("li"),kee=a("strong"),TVe=o("imagegpt"),MVe=o(" \u2014 "),J$=a("a"),EVe=o("ImageGPTConfig"),CVe=o(" (ImageGPT model)"),wVe=l(),am=a("li"),See=a("strong"),AVe=o("layoutlm"),yVe=o(" \u2014 "),Y$=a("a"),LVe=o("LayoutLMConfig"),xVe=o(" (LayoutLM model)"),$Ve=l(),nm=a("li"),Ree=a("strong"),kVe=o("layoutlmv2"),SVe=o(" \u2014 "),K$=a("a"),RVe=o("LayoutLMv2Config"),BVe=o(" (LayoutLMv2 model)"),PVe=l(),sm=a("li"),Bee=a("strong"),IVe=o("led"),qVe=o(" \u2014 "),Z$=a("a"),NVe=o("LEDConfig"),jVe=o(" (LED model)"),DVe=l(),lm=a("li"),Pee=a("strong"),GVe=o("longformer"),OVe=o(" \u2014 "),ek=a("a"),VVe=o("LongformerConfig"),XVe=o(" (Longformer model)"),zVe=l(),im=a("li"),Iee=a("strong"),QVe=o("luke"),WVe=o(" \u2014 "),ok=a("a"),HVe=o("LukeConfig"),UVe=o(" (LUKE model)"),JVe=l(),dm=a("li"),qee=a("strong"),YVe=o("lxmert"),KVe=o(" \u2014 "),rk=a("a"),ZVe=o("LxmertConfig"),eXe=o(" (LXMERT model)"),oXe=l(),cm=a("li"),Nee=a("strong"),rXe=o("m2m_100"),tXe=o(" \u2014 "),tk=a("a"),aXe=o("M2M100Config"),nXe=o(" (M2M100 model)"),sXe=l(),fm=a("li"),jee=a("strong"),lXe=o("marian"),iXe=o(" \u2014 "),ak=a("a"),dXe=o("MarianConfig"),cXe=o(" (Marian model)"),fXe=l(),mm=a("li"),Dee=a("strong"),mXe=o("maskformer"),gXe=o(" \u2014 "),nk=a("a"),hXe=o("MaskFormerConfig"),pXe=o(" (MaskFormer model)"),uXe=l(),gm=a("li"),Gee=a("strong"),_Xe=o("mbart"),bXe=o(" \u2014 "),sk=a("a"),vXe=o("MBartConfig"),FXe=o(" (mBART model)"),TXe=l(),hm=a("li"),Oee=a("strong"),MXe=o("megatron-bert"),EXe=o(" \u2014 "),lk=a("a"),CXe=o("MegatronBertConfig"),wXe=o(" (MegatronBert model)"),AXe=l(),pm=a("li"),Vee=a("strong"),yXe=o("mobilebert"),LXe=o(" \u2014 "),ik=a("a"),xXe=o("MobileBertConfig"),$Xe=o(" (MobileBERT model)"),kXe=l(),um=a("li"),Xee=a("strong"),SXe=o("mpnet"),RXe=o(" \u2014 "),dk=a("a"),BXe=o("MPNetConfig"),PXe=o(" (MPNet model)"),IXe=l(),_m=a("li"),zee=a("strong"),qXe=o("mt5"),NXe=o(" \u2014 "),ck=a("a"),jXe=o("MT5Config"),DXe=o(" (mT5 model)"),GXe=l(),bm=a("li"),Qee=a("strong"),OXe=o("nystromformer"),VXe=o(" \u2014 "),fk=a("a"),XXe=o("NystromformerConfig"),zXe=o(" (Nystromformer model)"),QXe=l(),vm=a("li"),Wee=a("strong"),WXe=o("openai-gpt"),HXe=o(" \u2014 "),mk=a("a"),UXe=o("OpenAIGPTConfig"),JXe=o(" (OpenAI GPT model)"),YXe=l(),Fm=a("li"),Hee=a("strong"),KXe=o("pegasus"),ZXe=o(" \u2014 "),gk=a("a"),eze=o("PegasusConfig"),oze=o(" (Pegasus model)"),rze=l(),Tm=a("li"),Uee=a("strong"),tze=o("perceiver"),aze=o(" \u2014 "),hk=a("a"),nze=o("PerceiverConfig"),sze=o(" (Perceiver model)"),lze=l(),Mm=a("li"),Jee=a("strong"),ize=o("plbart"),dze=o(" \u2014 "),pk=a("a"),cze=o("PLBartConfig"),fze=o(" (PLBart model)"),mze=l(),Em=a("li"),Yee=a("strong"),gze=o("poolformer"),hze=o(" \u2014 "),uk=a("a"),pze=o("PoolFormerConfig"),uze=o(" (PoolFormer model)"),_ze=l(),Cm=a("li"),Kee=a("strong"),bze=o("prophetnet"),vze=o(" \u2014 "),_k=a("a"),Fze=o("ProphetNetConfig"),Tze=o(" (ProphetNet model)"),Mze=l(),wm=a("li"),Zee=a("strong"),Eze=o("qdqbert"),Cze=o(" \u2014 "),bk=a("a"),wze=o("QDQBertConfig"),Aze=o(" (QDQBert model)"),yze=l(),Am=a("li"),eoe=a("strong"),Lze=o("rag"),xze=o(" \u2014 "),vk=a("a"),$ze=o("RagConfig"),kze=o(" (RAG model)"),Sze=l(),ym=a("li"),ooe=a("strong"),Rze=o("realm"),Bze=o(" \u2014 "),Fk=a("a"),Pze=o("RealmConfig"),Ize=o(" (Realm model)"),qze=l(),Lm=a("li"),roe=a("strong"),Nze=o("reformer"),jze=o(" \u2014 "),Tk=a("a"),Dze=o("ReformerConfig"),Gze=o(" (Reformer model)"),Oze=l(),xm=a("li"),toe=a("strong"),Vze=o("regnet"),Xze=o(" \u2014 "),Mk=a("a"),zze=o("RegNetConfig"),Qze=o(" (RegNet model)"),Wze=l(),$m=a("li"),aoe=a("strong"),Hze=o("rembert"),Uze=o(" \u2014 "),Ek=a("a"),Jze=o("RemBertConfig"),Yze=o(" (RemBERT model)"),Kze=l(),km=a("li"),noe=a("strong"),Zze=o("resnet"),eQe=o(" \u2014 "),Ck=a("a"),oQe=o("ResNetConfig"),rQe=o(" (ResNet model)"),tQe=l(),Sm=a("li"),soe=a("strong"),aQe=o("retribert"),nQe=o(" \u2014 "),wk=a("a"),sQe=o("RetriBertConfig"),lQe=o(" (RetriBERT model)"),iQe=l(),Rm=a("li"),loe=a("strong"),dQe=o("roberta"),cQe=o(" \u2014 "),Ak=a("a"),fQe=o("RobertaConfig"),mQe=o(" (RoBERTa model)"),gQe=l(),Bm=a("li"),ioe=a("strong"),hQe=o("roformer"),pQe=o(" \u2014 "),yk=a("a"),uQe=o("RoFormerConfig"),_Qe=o(" (RoFormer model)"),bQe=l(),Pm=a("li"),doe=a("strong"),vQe=o("segformer"),FQe=o(" \u2014 "),Lk=a("a"),TQe=o("SegformerConfig"),MQe=o(" (SegFormer model)"),EQe=l(),Im=a("li"),coe=a("strong"),CQe=o("sew"),wQe=o(" \u2014 "),xk=a("a"),AQe=o("SEWConfig"),yQe=o(" (SEW model)"),LQe=l(),qm=a("li"),foe=a("strong"),xQe=o("sew-d"),$Qe=o(" \u2014 "),$k=a("a"),kQe=o("SEWDConfig"),SQe=o(" (SEW-D model)"),RQe=l(),Nm=a("li"),moe=a("strong"),BQe=o("speech-encoder-decoder"),PQe=o(" \u2014 "),kk=a("a"),IQe=o("SpeechEncoderDecoderConfig"),qQe=o(" (Speech Encoder decoder model)"),NQe=l(),jm=a("li"),goe=a("strong"),jQe=o("speech_to_text"),DQe=o(" \u2014 "),Sk=a("a"),GQe=o("Speech2TextConfig"),OQe=o(" (Speech2Text model)"),VQe=l(),Dm=a("li"),hoe=a("strong"),XQe=o("speech_to_text_2"),zQe=o(" \u2014 "),Rk=a("a"),QQe=o("Speech2Text2Config"),WQe=o(" (Speech2Text2 model)"),HQe=l(),Gm=a("li"),poe=a("strong"),UQe=o("splinter"),JQe=o(" \u2014 "),Bk=a("a"),YQe=o("SplinterConfig"),KQe=o(" (Splinter model)"),ZQe=l(),Om=a("li"),uoe=a("strong"),eWe=o("squeezebert"),oWe=o(" \u2014 "),Pk=a("a"),rWe=o("SqueezeBertConfig"),tWe=o(" (SqueezeBERT model)"),aWe=l(),Vm=a("li"),_oe=a("strong"),nWe=o("swin"),sWe=o(" \u2014 "),Ik=a("a"),lWe=o("SwinConfig"),iWe=o(" (Swin model)"),dWe=l(),Xm=a("li"),boe=a("strong"),cWe=o("t5"),fWe=o(" \u2014 "),qk=a("a"),mWe=o("T5Config"),gWe=o(" (T5 model)"),hWe=l(),zm=a("li"),voe=a("strong"),pWe=o("tapas"),uWe=o(" \u2014 "),Nk=a("a"),_We=o("TapasConfig"),bWe=o(" (TAPAS model)"),vWe=l(),Qm=a("li"),Foe=a("strong"),FWe=o("tapex"),TWe=o(" \u2014 "),jk=a("a"),MWe=o("BartConfig"),EWe=o(" (TAPEX model)"),CWe=l(),Wm=a("li"),Toe=a("strong"),wWe=o("transfo-xl"),AWe=o(" \u2014 "),Dk=a("a"),yWe=o("TransfoXLConfig"),LWe=o(" (Transformer-XL model)"),xWe=l(),Hm=a("li"),Moe=a("strong"),$We=o("trocr"),kWe=o(" \u2014 "),Gk=a("a"),SWe=o("TrOCRConfig"),RWe=o(" (TrOCR model)"),BWe=l(),Um=a("li"),Eoe=a("strong"),PWe=o("unispeech"),IWe=o(" \u2014 "),Ok=a("a"),qWe=o("UniSpeechConfig"),NWe=o(" (UniSpeech model)"),jWe=l(),Jm=a("li"),Coe=a("strong"),DWe=o("unispeech-sat"),GWe=o(" \u2014 "),Vk=a("a"),OWe=o("UniSpeechSatConfig"),VWe=o(" (UniSpeechSat model)"),XWe=l(),Ym=a("li"),woe=a("strong"),zWe=o("van"),QWe=o(" \u2014 "),Xk=a("a"),WWe=o("VanConfig"),HWe=o(" (VAN model)"),UWe=l(),Km=a("li"),Aoe=a("strong"),JWe=o("vilt"),YWe=o(" \u2014 "),zk=a("a"),KWe=o("ViltConfig"),ZWe=o(" (ViLT model)"),eHe=l(),Zm=a("li"),yoe=a("strong"),oHe=o("vision-encoder-decoder"),rHe=o(" \u2014 "),Qk=a("a"),tHe=o("VisionEncoderDecoderConfig"),aHe=o(" (Vision Encoder decoder model)"),nHe=l(),eg=a("li"),Loe=a("strong"),sHe=o("vision-text-dual-encoder"),lHe=o(" \u2014 "),Wk=a("a"),iHe=o("VisionTextDualEncoderConfig"),dHe=o(" (VisionTextDualEncoder model)"),cHe=l(),og=a("li"),xoe=a("strong"),fHe=o("visual_bert"),mHe=o(" \u2014 "),Hk=a("a"),gHe=o("VisualBertConfig"),hHe=o(" (VisualBert model)"),pHe=l(),rg=a("li"),$oe=a("strong"),uHe=o("vit"),_He=o(" \u2014 "),Uk=a("a"),bHe=o("ViTConfig"),vHe=o(" (ViT model)"),FHe=l(),tg=a("li"),koe=a("strong"),THe=o("vit_mae"),MHe=o(" \u2014 "),Jk=a("a"),EHe=o("ViTMAEConfig"),CHe=o(" (ViTMAE model)"),wHe=l(),ag=a("li"),Soe=a("strong"),AHe=o("wav2vec2"),yHe=o(" \u2014 "),Yk=a("a"),LHe=o("Wav2Vec2Config"),xHe=o(" (Wav2Vec2 model)"),$He=l(),ng=a("li"),Roe=a("strong"),kHe=o("wavlm"),SHe=o(" \u2014 "),Kk=a("a"),RHe=o("WavLMConfig"),BHe=o(" (WavLM model)"),PHe=l(),sg=a("li"),Boe=a("strong"),IHe=o("xglm"),qHe=o(" \u2014 "),Zk=a("a"),NHe=o("XGLMConfig"),jHe=o(" (XGLM model)"),DHe=l(),lg=a("li"),Poe=a("strong"),GHe=o("xlm"),OHe=o(" \u2014 "),eS=a("a"),VHe=o("XLMConfig"),XHe=o(" (XLM model)"),zHe=l(),ig=a("li"),Ioe=a("strong"),QHe=o("xlm-prophetnet"),WHe=o(" \u2014 "),oS=a("a"),HHe=o("XLMProphetNetConfig"),UHe=o(" (XLMProphetNet model)"),JHe=l(),dg=a("li"),qoe=a("strong"),YHe=o("xlm-roberta"),KHe=o(" \u2014 "),rS=a("a"),ZHe=o("XLMRobertaConfig"),eUe=o(" (XLM-RoBERTa model)"),oUe=l(),cg=a("li"),Noe=a("strong"),rUe=o("xlm-roberta-xl"),tUe=o(" \u2014 "),tS=a("a"),aUe=o("XLMRobertaXLConfig"),nUe=o(" (XLM-RoBERTa-XL model)"),sUe=l(),fg=a("li"),joe=a("strong"),lUe=o("xlnet"),iUe=o(" \u2014 "),aS=a("a"),dUe=o("XLNetConfig"),cUe=o(" (XLNet model)"),fUe=l(),mg=a("li"),Doe=a("strong"),mUe=o("yolos"),gUe=o(" \u2014 "),nS=a("a"),hUe=o("YolosConfig"),pUe=o(" (YOLOS model)"),uUe=l(),gg=a("li"),Goe=a("strong"),_Ue=o("yoso"),bUe=o(" \u2014 "),sS=a("a"),vUe=o("YosoConfig"),FUe=o(" (YOSO model)"),TUe=l(),F(hg.$$.fragment),MUe=l(),pg=a("div"),F(U3.$$.fragment),EUe=l(),Ooe=a("p"),CUe=o("Register a new configuration for this class."),hPe=l(),_i=a("h2"),ug=a("a"),Voe=a("span"),F(J3.$$.fragment),wUe=l(),Xoe=a("span"),AUe=o("AutoTokenizer"),pPe=l(),wo=a("div"),F(Y3.$$.fragment),yUe=l(),K3=a("p"),LUe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lS=a("a"),xUe=o("AutoTokenizer.from_pretrained()"),$Ue=o(" class method."),kUe=l(),Z3=a("p"),SUe=o("This class cannot be instantiated directly using "),zoe=a("code"),RUe=o("__init__()"),BUe=o(" (throws an error)."),PUe=l(),Cr=a("div"),F(ew.$$.fragment),IUe=l(),Qoe=a("p"),qUe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),NUe=l(),Ca=a("p"),jUe=o("The tokenizer class to instantiate is selected based on the "),Woe=a("code"),DUe=o("model_type"),GUe=o(` property of the config object (either
passed as an argument or loaded from `),Hoe=a("code"),OUe=o("pretrained_model_name_or_path"),VUe=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=a("code"),XUe=o("pretrained_model_name_or_path"),zUe=o(":"),QUe=l(),k=a("ul"),kn=a("li"),Joe=a("strong"),WUe=o("albert"),HUe=o(" \u2014 "),iS=a("a"),UUe=o("AlbertTokenizer"),JUe=o(" or "),dS=a("a"),YUe=o("AlbertTokenizerFast"),KUe=o(" (ALBERT model)"),ZUe=l(),Sn=a("li"),Yoe=a("strong"),eJe=o("bart"),oJe=o(" \u2014 "),cS=a("a"),rJe=o("BartTokenizer"),tJe=o(" or "),fS=a("a"),aJe=o("BartTokenizerFast"),nJe=o(" (BART model)"),sJe=l(),Rn=a("li"),Koe=a("strong"),lJe=o("barthez"),iJe=o(" \u2014 "),mS=a("a"),dJe=o("BarthezTokenizer"),cJe=o(" or "),gS=a("a"),fJe=o("BarthezTokenizerFast"),mJe=o(" (BARThez model)"),gJe=l(),_g=a("li"),Zoe=a("strong"),hJe=o("bartpho"),pJe=o(" \u2014 "),hS=a("a"),uJe=o("BartphoTokenizer"),_Je=o(" (BARTpho model)"),bJe=l(),Bn=a("li"),ere=a("strong"),vJe=o("bert"),FJe=o(" \u2014 "),pS=a("a"),TJe=o("BertTokenizer"),MJe=o(" or "),uS=a("a"),EJe=o("BertTokenizerFast"),CJe=o(" (BERT model)"),wJe=l(),bg=a("li"),ore=a("strong"),AJe=o("bert-generation"),yJe=o(" \u2014 "),_S=a("a"),LJe=o("BertGenerationTokenizer"),xJe=o(" (Bert Generation model)"),$Je=l(),vg=a("li"),rre=a("strong"),kJe=o("bert-japanese"),SJe=o(" \u2014 "),bS=a("a"),RJe=o("BertJapaneseTokenizer"),BJe=o(" (BertJapanese model)"),PJe=l(),Fg=a("li"),tre=a("strong"),IJe=o("bertweet"),qJe=o(" \u2014 "),vS=a("a"),NJe=o("BertweetTokenizer"),jJe=o(" (Bertweet model)"),DJe=l(),Pn=a("li"),are=a("strong"),GJe=o("big_bird"),OJe=o(" \u2014 "),FS=a("a"),VJe=o("BigBirdTokenizer"),XJe=o(" or "),TS=a("a"),zJe=o("BigBirdTokenizerFast"),QJe=o(" (BigBird model)"),WJe=l(),In=a("li"),nre=a("strong"),HJe=o("bigbird_pegasus"),UJe=o(" \u2014 "),MS=a("a"),JJe=o("PegasusTokenizer"),YJe=o(" or "),ES=a("a"),KJe=o("PegasusTokenizerFast"),ZJe=o(" (BigBirdPegasus model)"),eYe=l(),qn=a("li"),sre=a("strong"),oYe=o("blenderbot"),rYe=o(" \u2014 "),CS=a("a"),tYe=o("BlenderbotTokenizer"),aYe=o(" or "),wS=a("a"),nYe=o("BlenderbotTokenizerFast"),sYe=o(" (Blenderbot model)"),lYe=l(),Tg=a("li"),lre=a("strong"),iYe=o("blenderbot-small"),dYe=o(" \u2014 "),AS=a("a"),cYe=o("BlenderbotSmallTokenizer"),fYe=o(" (BlenderbotSmall model)"),mYe=l(),Mg=a("li"),ire=a("strong"),gYe=o("byt5"),hYe=o(" \u2014 "),yS=a("a"),pYe=o("ByT5Tokenizer"),uYe=o(" (ByT5 model)"),_Ye=l(),Nn=a("li"),dre=a("strong"),bYe=o("camembert"),vYe=o(" \u2014 "),LS=a("a"),FYe=o("CamembertTokenizer"),TYe=o(" or "),xS=a("a"),MYe=o("CamembertTokenizerFast"),EYe=o(" (CamemBERT model)"),CYe=l(),Eg=a("li"),cre=a("strong"),wYe=o("canine"),AYe=o(" \u2014 "),$S=a("a"),yYe=o("CanineTokenizer"),LYe=o(" (Canine model)"),xYe=l(),jn=a("li"),fre=a("strong"),$Ye=o("clip"),kYe=o(" \u2014 "),kS=a("a"),SYe=o("CLIPTokenizer"),RYe=o(" or "),SS=a("a"),BYe=o("CLIPTokenizerFast"),PYe=o(" (CLIP model)"),IYe=l(),Dn=a("li"),mre=a("strong"),qYe=o("convbert"),NYe=o(" \u2014 "),RS=a("a"),jYe=o("ConvBertTokenizer"),DYe=o(" or "),BS=a("a"),GYe=o("ConvBertTokenizerFast"),OYe=o(" (ConvBERT model)"),VYe=l(),Gn=a("li"),gre=a("strong"),XYe=o("cpm"),zYe=o(" \u2014 "),PS=a("a"),QYe=o("CpmTokenizer"),WYe=o(" or "),IS=a("a"),HYe=o("CpmTokenizerFast"),UYe=o(" (CPM model)"),JYe=l(),Cg=a("li"),hre=a("strong"),YYe=o("ctrl"),KYe=o(" \u2014 "),qS=a("a"),ZYe=o("CTRLTokenizer"),eKe=o(" (CTRL model)"),oKe=l(),On=a("li"),pre=a("strong"),rKe=o("data2vec-text"),tKe=o(" \u2014 "),NS=a("a"),aKe=o("RobertaTokenizer"),nKe=o(" or "),jS=a("a"),sKe=o("RobertaTokenizerFast"),lKe=o(" (Data2VecText model)"),iKe=l(),Vn=a("li"),ure=a("strong"),dKe=o("deberta"),cKe=o(" \u2014 "),DS=a("a"),fKe=o("DebertaTokenizer"),mKe=o(" or "),GS=a("a"),gKe=o("DebertaTokenizerFast"),hKe=o(" (DeBERTa model)"),pKe=l(),Xn=a("li"),_re=a("strong"),uKe=o("deberta-v2"),_Ke=o(" \u2014 "),OS=a("a"),bKe=o("DebertaV2Tokenizer"),vKe=o(" or "),VS=a("a"),FKe=o("DebertaV2TokenizerFast"),TKe=o(" (DeBERTa-v2 model)"),MKe=l(),zn=a("li"),bre=a("strong"),EKe=o("distilbert"),CKe=o(" \u2014 "),XS=a("a"),wKe=o("DistilBertTokenizer"),AKe=o(" or "),zS=a("a"),yKe=o("DistilBertTokenizerFast"),LKe=o(" (DistilBERT model)"),xKe=l(),Qn=a("li"),vre=a("strong"),$Ke=o("dpr"),kKe=o(" \u2014 "),QS=a("a"),SKe=o("DPRQuestionEncoderTokenizer"),RKe=o(" or "),WS=a("a"),BKe=o("DPRQuestionEncoderTokenizerFast"),PKe=o(" (DPR model)"),IKe=l(),Wn=a("li"),Fre=a("strong"),qKe=o("electra"),NKe=o(" \u2014 "),HS=a("a"),jKe=o("ElectraTokenizer"),DKe=o(" or "),US=a("a"),GKe=o("ElectraTokenizerFast"),OKe=o(" (ELECTRA model)"),VKe=l(),wg=a("li"),Tre=a("strong"),XKe=o("flaubert"),zKe=o(" \u2014 "),JS=a("a"),QKe=o("FlaubertTokenizer"),WKe=o(" (FlauBERT model)"),HKe=l(),Hn=a("li"),Mre=a("strong"),UKe=o("fnet"),JKe=o(" \u2014 "),YS=a("a"),YKe=o("FNetTokenizer"),KKe=o(" or "),KS=a("a"),ZKe=o("FNetTokenizerFast"),eZe=o(" (FNet model)"),oZe=l(),Ag=a("li"),Ere=a("strong"),rZe=o("fsmt"),tZe=o(" \u2014 "),ZS=a("a"),aZe=o("FSMTTokenizer"),nZe=o(" (FairSeq Machine-Translation model)"),sZe=l(),Un=a("li"),Cre=a("strong"),lZe=o("funnel"),iZe=o(" \u2014 "),eR=a("a"),dZe=o("FunnelTokenizer"),cZe=o(" or "),oR=a("a"),fZe=o("FunnelTokenizerFast"),mZe=o(" (Funnel Transformer model)"),gZe=l(),Jn=a("li"),wre=a("strong"),hZe=o("gpt2"),pZe=o(" \u2014 "),rR=a("a"),uZe=o("GPT2Tokenizer"),_Ze=o(" or "),tR=a("a"),bZe=o("GPT2TokenizerFast"),vZe=o(" (OpenAI GPT-2 model)"),FZe=l(),Yn=a("li"),Are=a("strong"),TZe=o("gpt_neo"),MZe=o(" \u2014 "),aR=a("a"),EZe=o("GPT2Tokenizer"),CZe=o(" or "),nR=a("a"),wZe=o("GPT2TokenizerFast"),AZe=o(" (GPT Neo model)"),yZe=l(),Kn=a("li"),yre=a("strong"),LZe=o("gptj"),xZe=o(" \u2014 "),sR=a("a"),$Ze=o("GPT2Tokenizer"),kZe=o(" or "),lR=a("a"),SZe=o("GPT2TokenizerFast"),RZe=o(" (GPT-J model)"),BZe=l(),Zn=a("li"),Lre=a("strong"),PZe=o("herbert"),IZe=o(" \u2014 "),iR=a("a"),qZe=o("HerbertTokenizer"),NZe=o(" or "),dR=a("a"),jZe=o("HerbertTokenizerFast"),DZe=o(" (HerBERT model)"),GZe=l(),yg=a("li"),xre=a("strong"),OZe=o("hubert"),VZe=o(" \u2014 "),cR=a("a"),XZe=o("Wav2Vec2CTCTokenizer"),zZe=o(" (Hubert model)"),QZe=l(),es=a("li"),$re=a("strong"),WZe=o("ibert"),HZe=o(" \u2014 "),fR=a("a"),UZe=o("RobertaTokenizer"),JZe=o(" or "),mR=a("a"),YZe=o("RobertaTokenizerFast"),KZe=o(" (I-BERT model)"),ZZe=l(),os=a("li"),kre=a("strong"),eeo=o("layoutlm"),oeo=o(" \u2014 "),gR=a("a"),reo=o("LayoutLMTokenizer"),teo=o(" or "),hR=a("a"),aeo=o("LayoutLMTokenizerFast"),neo=o(" (LayoutLM model)"),seo=l(),rs=a("li"),Sre=a("strong"),leo=o("layoutlmv2"),ieo=o(" \u2014 "),pR=a("a"),deo=o("LayoutLMv2Tokenizer"),ceo=o(" or "),uR=a("a"),feo=o("LayoutLMv2TokenizerFast"),meo=o(" (LayoutLMv2 model)"),geo=l(),ts=a("li"),Rre=a("strong"),heo=o("layoutxlm"),peo=o(" \u2014 "),_R=a("a"),ueo=o("LayoutXLMTokenizer"),_eo=o(" or "),bR=a("a"),beo=o("LayoutXLMTokenizerFast"),veo=o(" (LayoutXLM model)"),Feo=l(),as=a("li"),Bre=a("strong"),Teo=o("led"),Meo=o(" \u2014 "),vR=a("a"),Eeo=o("LEDTokenizer"),Ceo=o(" or "),FR=a("a"),weo=o("LEDTokenizerFast"),Aeo=o(" (LED model)"),yeo=l(),ns=a("li"),Pre=a("strong"),Leo=o("longformer"),xeo=o(" \u2014 "),TR=a("a"),$eo=o("LongformerTokenizer"),keo=o(" or "),MR=a("a"),Seo=o("LongformerTokenizerFast"),Reo=o(" (Longformer model)"),Beo=l(),Lg=a("li"),Ire=a("strong"),Peo=o("luke"),Ieo=o(" \u2014 "),ER=a("a"),qeo=o("LukeTokenizer"),Neo=o(" (LUKE model)"),jeo=l(),ss=a("li"),qre=a("strong"),Deo=o("lxmert"),Geo=o(" \u2014 "),CR=a("a"),Oeo=o("LxmertTokenizer"),Veo=o(" or "),wR=a("a"),Xeo=o("LxmertTokenizerFast"),zeo=o(" (LXMERT model)"),Qeo=l(),xg=a("li"),Nre=a("strong"),Weo=o("m2m_100"),Heo=o(" \u2014 "),AR=a("a"),Ueo=o("M2M100Tokenizer"),Jeo=o(" (M2M100 model)"),Yeo=l(),$g=a("li"),jre=a("strong"),Keo=o("marian"),Zeo=o(" \u2014 "),yR=a("a"),eoo=o("MarianTokenizer"),ooo=o(" (Marian model)"),roo=l(),ls=a("li"),Dre=a("strong"),too=o("mbart"),aoo=o(" \u2014 "),LR=a("a"),noo=o("MBartTokenizer"),soo=o(" or "),xR=a("a"),loo=o("MBartTokenizerFast"),ioo=o(" (mBART model)"),doo=l(),is=a("li"),Gre=a("strong"),coo=o("mbart50"),foo=o(" \u2014 "),$R=a("a"),moo=o("MBart50Tokenizer"),goo=o(" or "),kR=a("a"),hoo=o("MBart50TokenizerFast"),poo=o(" (mBART-50 model)"),uoo=l(),ds=a("li"),Ore=a("strong"),_oo=o("megatron-bert"),boo=o(" \u2014 "),SR=a("a"),voo=o("BertTokenizer"),Foo=o(" or "),RR=a("a"),Too=o("BertTokenizerFast"),Moo=o(" (MegatronBert model)"),Eoo=l(),kg=a("li"),Vre=a("strong"),Coo=o("mluke"),woo=o(" \u2014 "),BR=a("a"),Aoo=o("MLukeTokenizer"),yoo=o(" (mLUKE model)"),Loo=l(),cs=a("li"),Xre=a("strong"),xoo=o("mobilebert"),$oo=o(" \u2014 "),PR=a("a"),koo=o("MobileBertTokenizer"),Soo=o(" or "),IR=a("a"),Roo=o("MobileBertTokenizerFast"),Boo=o(" (MobileBERT model)"),Poo=l(),fs=a("li"),zre=a("strong"),Ioo=o("mpnet"),qoo=o(" \u2014 "),qR=a("a"),Noo=o("MPNetTokenizer"),joo=o(" or "),NR=a("a"),Doo=o("MPNetTokenizerFast"),Goo=o(" (MPNet model)"),Ooo=l(),ms=a("li"),Qre=a("strong"),Voo=o("mt5"),Xoo=o(" \u2014 "),jR=a("a"),zoo=o("MT5Tokenizer"),Qoo=o(" or "),DR=a("a"),Woo=o("MT5TokenizerFast"),Hoo=o(" (mT5 model)"),Uoo=l(),gs=a("li"),Wre=a("strong"),Joo=o("nystromformer"),Yoo=o(" \u2014 "),GR=a("a"),Koo=o("AlbertTokenizer"),Zoo=o(" or "),OR=a("a"),ero=o("AlbertTokenizerFast"),oro=o(" (Nystromformer model)"),rro=l(),hs=a("li"),Hre=a("strong"),tro=o("openai-gpt"),aro=o(" \u2014 "),VR=a("a"),nro=o("OpenAIGPTTokenizer"),sro=o(" or "),XR=a("a"),lro=o("OpenAIGPTTokenizerFast"),iro=o(" (OpenAI GPT model)"),dro=l(),ps=a("li"),Ure=a("strong"),cro=o("pegasus"),fro=o(" \u2014 "),zR=a("a"),mro=o("PegasusTokenizer"),gro=o(" or "),QR=a("a"),hro=o("PegasusTokenizerFast"),pro=o(" (Pegasus model)"),uro=l(),Sg=a("li"),Jre=a("strong"),_ro=o("perceiver"),bro=o(" \u2014 "),WR=a("a"),vro=o("PerceiverTokenizer"),Fro=o(" (Perceiver model)"),Tro=l(),Rg=a("li"),Yre=a("strong"),Mro=o("phobert"),Ero=o(" \u2014 "),HR=a("a"),Cro=o("PhobertTokenizer"),wro=o(" (PhoBERT model)"),Aro=l(),Bg=a("li"),Kre=a("strong"),yro=o("plbart"),Lro=o(" \u2014 "),UR=a("a"),xro=o("PLBartTokenizer"),$ro=o(" (PLBart model)"),kro=l(),Pg=a("li"),Zre=a("strong"),Sro=o("prophetnet"),Rro=o(" \u2014 "),JR=a("a"),Bro=o("ProphetNetTokenizer"),Pro=o(" (ProphetNet model)"),Iro=l(),us=a("li"),ete=a("strong"),qro=o("qdqbert"),Nro=o(" \u2014 "),YR=a("a"),jro=o("BertTokenizer"),Dro=o(" or "),KR=a("a"),Gro=o("BertTokenizerFast"),Oro=o(" (QDQBert model)"),Vro=l(),Ig=a("li"),ote=a("strong"),Xro=o("rag"),zro=o(" \u2014 "),ZR=a("a"),Qro=o("RagTokenizer"),Wro=o(" (RAG model)"),Hro=l(),_s=a("li"),rte=a("strong"),Uro=o("realm"),Jro=o(" \u2014 "),eB=a("a"),Yro=o("RealmTokenizer"),Kro=o(" or "),oB=a("a"),Zro=o("RealmTokenizerFast"),eto=o(" (Realm model)"),oto=l(),bs=a("li"),tte=a("strong"),rto=o("reformer"),tto=o(" \u2014 "),rB=a("a"),ato=o("ReformerTokenizer"),nto=o(" or "),tB=a("a"),sto=o("ReformerTokenizerFast"),lto=o(" (Reformer model)"),ito=l(),vs=a("li"),ate=a("strong"),dto=o("rembert"),cto=o(" \u2014 "),aB=a("a"),fto=o("RemBertTokenizer"),mto=o(" or "),nB=a("a"),gto=o("RemBertTokenizerFast"),hto=o(" (RemBERT model)"),pto=l(),Fs=a("li"),nte=a("strong"),uto=o("retribert"),_to=o(" \u2014 "),sB=a("a"),bto=o("RetriBertTokenizer"),vto=o(" or "),lB=a("a"),Fto=o("RetriBertTokenizerFast"),Tto=o(" (RetriBERT model)"),Mto=l(),Ts=a("li"),ste=a("strong"),Eto=o("roberta"),Cto=o(" \u2014 "),iB=a("a"),wto=o("RobertaTokenizer"),Ato=o(" or "),dB=a("a"),yto=o("RobertaTokenizerFast"),Lto=o(" (RoBERTa model)"),xto=l(),Ms=a("li"),lte=a("strong"),$to=o("roformer"),kto=o(" \u2014 "),cB=a("a"),Sto=o("RoFormerTokenizer"),Rto=o(" or "),fB=a("a"),Bto=o("RoFormerTokenizerFast"),Pto=o(" (RoFormer model)"),Ito=l(),qg=a("li"),ite=a("strong"),qto=o("speech_to_text"),Nto=o(" \u2014 "),mB=a("a"),jto=o("Speech2TextTokenizer"),Dto=o(" (Speech2Text model)"),Gto=l(),Ng=a("li"),dte=a("strong"),Oto=o("speech_to_text_2"),Vto=o(" \u2014 "),gB=a("a"),Xto=o("Speech2Text2Tokenizer"),zto=o(" (Speech2Text2 model)"),Qto=l(),Es=a("li"),cte=a("strong"),Wto=o("splinter"),Hto=o(" \u2014 "),hB=a("a"),Uto=o("SplinterTokenizer"),Jto=o(" or "),pB=a("a"),Yto=o("SplinterTokenizerFast"),Kto=o(" (Splinter model)"),Zto=l(),Cs=a("li"),fte=a("strong"),eao=o("squeezebert"),oao=o(" \u2014 "),uB=a("a"),rao=o("SqueezeBertTokenizer"),tao=o(" or "),_B=a("a"),aao=o("SqueezeBertTokenizerFast"),nao=o(" (SqueezeBERT model)"),sao=l(),ws=a("li"),mte=a("strong"),lao=o("t5"),iao=o(" \u2014 "),bB=a("a"),dao=o("T5Tokenizer"),cao=o(" or "),vB=a("a"),fao=o("T5TokenizerFast"),mao=o(" (T5 model)"),gao=l(),jg=a("li"),gte=a("strong"),hao=o("tapas"),pao=o(" \u2014 "),FB=a("a"),uao=o("TapasTokenizer"),_ao=o(" (TAPAS model)"),bao=l(),Dg=a("li"),hte=a("strong"),vao=o("tapex"),Fao=o(" \u2014 "),TB=a("a"),Tao=o("TapexTokenizer"),Mao=o(" (TAPEX model)"),Eao=l(),Gg=a("li"),pte=a("strong"),Cao=o("transfo-xl"),wao=o(" \u2014 "),MB=a("a"),Aao=o("TransfoXLTokenizer"),yao=o(" (Transformer-XL model)"),Lao=l(),As=a("li"),ute=a("strong"),xao=o("visual_bert"),$ao=o(" \u2014 "),EB=a("a"),kao=o("BertTokenizer"),Sao=o(" or "),CB=a("a"),Rao=o("BertTokenizerFast"),Bao=o(" (VisualBert model)"),Pao=l(),Og=a("li"),_te=a("strong"),Iao=o("wav2vec2"),qao=o(" \u2014 "),wB=a("a"),Nao=o("Wav2Vec2CTCTokenizer"),jao=o(" (Wav2Vec2 model)"),Dao=l(),Vg=a("li"),bte=a("strong"),Gao=o("wav2vec2_phoneme"),Oao=o(" \u2014 "),AB=a("a"),Vao=o("Wav2Vec2PhonemeCTCTokenizer"),Xao=o(" (Wav2Vec2Phoneme model)"),zao=l(),ys=a("li"),vte=a("strong"),Qao=o("xglm"),Wao=o(" \u2014 "),yB=a("a"),Hao=o("XGLMTokenizer"),Uao=o(" or "),LB=a("a"),Jao=o("XGLMTokenizerFast"),Yao=o(" (XGLM model)"),Kao=l(),Xg=a("li"),Fte=a("strong"),Zao=o("xlm"),eno=o(" \u2014 "),xB=a("a"),ono=o("XLMTokenizer"),rno=o(" (XLM model)"),tno=l(),zg=a("li"),Tte=a("strong"),ano=o("xlm-prophetnet"),nno=o(" \u2014 "),$B=a("a"),sno=o("XLMProphetNetTokenizer"),lno=o(" (XLMProphetNet model)"),ino=l(),Ls=a("li"),Mte=a("strong"),dno=o("xlm-roberta"),cno=o(" \u2014 "),kB=a("a"),fno=o("XLMRobertaTokenizer"),mno=o(" or "),SB=a("a"),gno=o("XLMRobertaTokenizerFast"),hno=o(" (XLM-RoBERTa model)"),pno=l(),xs=a("li"),Ete=a("strong"),uno=o("xlm-roberta-xl"),_no=o(" \u2014 "),RB=a("a"),bno=o("RobertaTokenizer"),vno=o(" or "),BB=a("a"),Fno=o("RobertaTokenizerFast"),Tno=o(" (XLM-RoBERTa-XL model)"),Mno=l(),$s=a("li"),Cte=a("strong"),Eno=o("xlnet"),Cno=o(" \u2014 "),PB=a("a"),wno=o("XLNetTokenizer"),Ano=o(" or "),IB=a("a"),yno=o("XLNetTokenizerFast"),Lno=o(" (XLNet model)"),xno=l(),ks=a("li"),wte=a("strong"),$no=o("yoso"),kno=o(" \u2014 "),qB=a("a"),Sno=o("AlbertTokenizer"),Rno=o(" or "),NB=a("a"),Bno=o("AlbertTokenizerFast"),Pno=o(" (YOSO model)"),Ino=l(),F(Qg.$$.fragment),qno=l(),Wg=a("div"),F(ow.$$.fragment),Nno=l(),Ate=a("p"),jno=o("Register a new tokenizer in this mapping."),uPe=l(),bi=a("h2"),Hg=a("a"),yte=a("span"),F(rw.$$.fragment),Dno=l(),Lte=a("span"),Gno=o("AutoFeatureExtractor"),_Pe=l(),Ao=a("div"),F(tw.$$.fragment),Ono=l(),aw=a("p"),Vno=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jB=a("a"),Xno=o("AutoFeatureExtractor.from_pretrained()"),zno=o(" class method."),Qno=l(),nw=a("p"),Wno=o("This class cannot be instantiated directly using "),xte=a("code"),Hno=o("__init__()"),Uno=o(" (throws an error)."),Jno=l(),Qe=a("div"),F(sw.$$.fragment),Yno=l(),$te=a("p"),Kno=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),Zno=l(),wa=a("p"),eso=o("The feature extractor class to instantiate is selected based on the "),kte=a("code"),oso=o("model_type"),rso=o(` property of the config object
(either passed as an argument or loaded from `),Ste=a("code"),tso=o("pretrained_model_name_or_path"),aso=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rte=a("code"),nso=o("pretrained_model_name_or_path"),sso=o(":"),lso=l(),te=a("ul"),Ug=a("li"),Bte=a("strong"),iso=o("beit"),dso=o(" \u2014 "),DB=a("a"),cso=o("BeitFeatureExtractor"),fso=o(" (BEiT model)"),mso=l(),Jg=a("li"),Pte=a("strong"),gso=o("clip"),hso=o(" \u2014 "),GB=a("a"),pso=o("CLIPFeatureExtractor"),uso=o(" (CLIP model)"),_so=l(),Yg=a("li"),Ite=a("strong"),bso=o("convnext"),vso=o(" \u2014 "),OB=a("a"),Fso=o("ConvNextFeatureExtractor"),Tso=o(" (ConvNext model)"),Mso=l(),Kg=a("li"),qte=a("strong"),Eso=o("data2vec-audio"),Cso=o(" \u2014 "),VB=a("a"),wso=o("Wav2Vec2FeatureExtractor"),Aso=o(" (Data2VecAudio model)"),yso=l(),Zg=a("li"),Nte=a("strong"),Lso=o("data2vec-vision"),xso=o(" \u2014 "),XB=a("a"),$so=o("BeitFeatureExtractor"),kso=o(" (Data2VecVision model)"),Sso=l(),eh=a("li"),jte=a("strong"),Rso=o("deit"),Bso=o(" \u2014 "),zB=a("a"),Pso=o("DeiTFeatureExtractor"),Iso=o(" (DeiT model)"),qso=l(),oh=a("li"),Dte=a("strong"),Nso=o("detr"),jso=o(" \u2014 "),QB=a("a"),Dso=o("DetrFeatureExtractor"),Gso=o(" (DETR model)"),Oso=l(),rh=a("li"),Gte=a("strong"),Vso=o("dpt"),Xso=o(" \u2014 "),WB=a("a"),zso=o("DPTFeatureExtractor"),Qso=o(" (DPT model)"),Wso=l(),th=a("li"),Ote=a("strong"),Hso=o("glpn"),Uso=o(" \u2014 "),HB=a("a"),Jso=o("GLPNFeatureExtractor"),Yso=o(" (GLPN model)"),Kso=l(),ah=a("li"),Vte=a("strong"),Zso=o("hubert"),elo=o(" \u2014 "),UB=a("a"),olo=o("Wav2Vec2FeatureExtractor"),rlo=o(" (Hubert model)"),tlo=l(),nh=a("li"),Xte=a("strong"),alo=o("layoutlmv2"),nlo=o(" \u2014 "),JB=a("a"),slo=o("LayoutLMv2FeatureExtractor"),llo=o(" (LayoutLMv2 model)"),ilo=l(),sh=a("li"),zte=a("strong"),dlo=o("maskformer"),clo=o(" \u2014 "),YB=a("a"),flo=o("MaskFormerFeatureExtractor"),mlo=o(" (MaskFormer model)"),glo=l(),lh=a("li"),Qte=a("strong"),hlo=o("perceiver"),plo=o(" \u2014 "),KB=a("a"),ulo=o("PerceiverFeatureExtractor"),_lo=o(" (Perceiver model)"),blo=l(),ih=a("li"),Wte=a("strong"),vlo=o("poolformer"),Flo=o(" \u2014 "),ZB=a("a"),Tlo=o("PoolFormerFeatureExtractor"),Mlo=o(" (PoolFormer model)"),Elo=l(),dh=a("li"),Hte=a("strong"),Clo=o("regnet"),wlo=o(" \u2014 "),eP=a("a"),Alo=o("ConvNextFeatureExtractor"),ylo=o(" (RegNet model)"),Llo=l(),ch=a("li"),Ute=a("strong"),xlo=o("resnet"),$lo=o(" \u2014 "),oP=a("a"),klo=o("ConvNextFeatureExtractor"),Slo=o(" (ResNet model)"),Rlo=l(),fh=a("li"),Jte=a("strong"),Blo=o("segformer"),Plo=o(" \u2014 "),rP=a("a"),Ilo=o("SegformerFeatureExtractor"),qlo=o(" (SegFormer model)"),Nlo=l(),mh=a("li"),Yte=a("strong"),jlo=o("speech_to_text"),Dlo=o(" \u2014 "),tP=a("a"),Glo=o("Speech2TextFeatureExtractor"),Olo=o(" (Speech2Text model)"),Vlo=l(),gh=a("li"),Kte=a("strong"),Xlo=o("swin"),zlo=o(" \u2014 "),aP=a("a"),Qlo=o("ViTFeatureExtractor"),Wlo=o(" (Swin model)"),Hlo=l(),hh=a("li"),Zte=a("strong"),Ulo=o("van"),Jlo=o(" \u2014 "),nP=a("a"),Ylo=o("ConvNextFeatureExtractor"),Klo=o(" (VAN model)"),Zlo=l(),ph=a("li"),eae=a("strong"),eio=o("vit"),oio=o(" \u2014 "),sP=a("a"),rio=o("ViTFeatureExtractor"),tio=o(" (ViT model)"),aio=l(),uh=a("li"),oae=a("strong"),nio=o("vit_mae"),sio=o(" \u2014 "),lP=a("a"),lio=o("ViTFeatureExtractor"),iio=o(" (ViTMAE model)"),dio=l(),_h=a("li"),rae=a("strong"),cio=o("wav2vec2"),fio=o(" \u2014 "),iP=a("a"),mio=o("Wav2Vec2FeatureExtractor"),gio=o(" (Wav2Vec2 model)"),hio=l(),bh=a("li"),tae=a("strong"),pio=o("yolos"),uio=o(" \u2014 "),dP=a("a"),_io=o("YolosFeatureExtractor"),bio=o(" (YOLOS model)"),vio=l(),F(vh.$$.fragment),Fio=l(),F(Fh.$$.fragment),Tio=l(),Th=a("div"),F(lw.$$.fragment),Mio=l(),aae=a("p"),Eio=o("Register a new feature extractor for this class."),bPe=l(),vi=a("h2"),Mh=a("a"),nae=a("span"),F(iw.$$.fragment),Cio=l(),sae=a("span"),wio=o("AutoProcessor"),vPe=l(),yo=a("div"),F(dw.$$.fragment),Aio=l(),cw=a("p"),yio=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cP=a("a"),Lio=o("AutoProcessor.from_pretrained()"),xio=o(" class method."),$io=l(),fw=a("p"),kio=o("This class cannot be instantiated directly using "),lae=a("code"),Sio=o("__init__()"),Rio=o(" (throws an error)."),Bio=l(),We=a("div"),F(mw.$$.fragment),Pio=l(),iae=a("p"),Iio=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),qio=l(),Fi=a("p"),Nio=o("The processor class to instantiate is selected based on the "),dae=a("code"),jio=o("model_type"),Dio=o(` property of the config object (either
passed as an argument or loaded from `),cae=a("code"),Gio=o("pretrained_model_name_or_path"),Oio=o(" if possible):"),Vio=l(),be=a("ul"),Eh=a("li"),fae=a("strong"),Xio=o("clip"),zio=o(" \u2014 "),fP=a("a"),Qio=o("CLIPProcessor"),Wio=o(" (CLIP model)"),Hio=l(),Ch=a("li"),mae=a("strong"),Uio=o("layoutlmv2"),Jio=o(" \u2014 "),mP=a("a"),Yio=o("LayoutLMv2Processor"),Kio=o(" (LayoutLMv2 model)"),Zio=l(),wh=a("li"),gae=a("strong"),edo=o("layoutxlm"),odo=o(" \u2014 "),gP=a("a"),rdo=o("LayoutXLMProcessor"),tdo=o(" (LayoutXLM model)"),ado=l(),Ah=a("li"),hae=a("strong"),ndo=o("sew"),sdo=o(" \u2014 "),hP=a("a"),ldo=o("Wav2Vec2Processor"),ido=o(" (SEW model)"),ddo=l(),yh=a("li"),pae=a("strong"),cdo=o("sew-d"),fdo=o(" \u2014 "),pP=a("a"),mdo=o("Wav2Vec2Processor"),gdo=o(" (SEW-D model)"),hdo=l(),Lh=a("li"),uae=a("strong"),pdo=o("speech_to_text"),udo=o(" \u2014 "),uP=a("a"),_do=o("Speech2TextProcessor"),bdo=o(" (Speech2Text model)"),vdo=l(),xh=a("li"),_ae=a("strong"),Fdo=o("speech_to_text_2"),Tdo=o(" \u2014 "),_P=a("a"),Mdo=o("Speech2Text2Processor"),Edo=o(" (Speech2Text2 model)"),Cdo=l(),$h=a("li"),bae=a("strong"),wdo=o("trocr"),Ado=o(" \u2014 "),bP=a("a"),ydo=o("TrOCRProcessor"),Ldo=o(" (TrOCR model)"),xdo=l(),kh=a("li"),vae=a("strong"),$do=o("unispeech"),kdo=o(" \u2014 "),vP=a("a"),Sdo=o("Wav2Vec2Processor"),Rdo=o(" (UniSpeech model)"),Bdo=l(),Sh=a("li"),Fae=a("strong"),Pdo=o("unispeech-sat"),Ido=o(" \u2014 "),FP=a("a"),qdo=o("Wav2Vec2Processor"),Ndo=o(" (UniSpeechSat model)"),jdo=l(),Rh=a("li"),Tae=a("strong"),Ddo=o("vilt"),Gdo=o(" \u2014 "),TP=a("a"),Odo=o("ViltProcessor"),Vdo=o(" (ViLT model)"),Xdo=l(),Bh=a("li"),Mae=a("strong"),zdo=o("vision-text-dual-encoder"),Qdo=o(" \u2014 "),MP=a("a"),Wdo=o("VisionTextDualEncoderProcessor"),Hdo=o(" (VisionTextDualEncoder model)"),Udo=l(),Ph=a("li"),Eae=a("strong"),Jdo=o("wav2vec2"),Ydo=o(" \u2014 "),EP=a("a"),Kdo=o("Wav2Vec2Processor"),Zdo=o(" (Wav2Vec2 model)"),eco=l(),Ih=a("li"),Cae=a("strong"),oco=o("wavlm"),rco=o(" \u2014 "),CP=a("a"),tco=o("Wav2Vec2Processor"),aco=o(" (WavLM model)"),nco=l(),F(qh.$$.fragment),sco=l(),F(Nh.$$.fragment),lco=l(),jh=a("div"),F(gw.$$.fragment),ico=l(),wae=a("p"),dco=o("Register a new processor for this class."),FPe=l(),Ti=a("h2"),Dh=a("a"),Aae=a("span"),F(hw.$$.fragment),cco=l(),yae=a("span"),fco=o("AutoModel"),TPe=l(),Lo=a("div"),F(pw.$$.fragment),mco=l(),Mi=a("p"),gco=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wP=a("a"),hco=o("from_pretrained()"),pco=o(" class method or the "),AP=a("a"),uco=o("from_config()"),_co=o(` class
method.`),bco=l(),uw=a("p"),vco=o("This class cannot be instantiated directly using "),Lae=a("code"),Fco=o("__init__()"),Tco=o(" (throws an error)."),Mco=l(),ot=a("div"),F(_w.$$.fragment),Eco=l(),xae=a("p"),Cco=o("Instantiates one of the base model classes of the library from a configuration."),wco=l(),Ei=a("p"),Aco=o(`Note:
Loading a model from its configuration file does `),$ae=a("strong"),yco=o("not"),Lco=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yP=a("a"),xco=o("from_pretrained()"),$co=o(" to load the model weights."),kco=l(),F(Gh.$$.fragment),Sco=l(),He=a("div"),F(bw.$$.fragment),Rco=l(),kae=a("p"),Bco=o("Instantiate one of the base model classes of the library from a pretrained model."),Pco=l(),Aa=a("p"),Ico=o("The model class to instantiate is selected based on the "),Sae=a("code"),qco=o("model_type"),Nco=o(` property of the config object (either
passed as an argument or loaded from `),Rae=a("code"),jco=o("pretrained_model_name_or_path"),Dco=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=a("code"),Gco=o("pretrained_model_name_or_path"),Oco=o(":"),Vco=l(),x=a("ul"),Oh=a("li"),Pae=a("strong"),Xco=o("albert"),zco=o(" \u2014 "),LP=a("a"),Qco=o("AlbertModel"),Wco=o(" (ALBERT model)"),Hco=l(),Vh=a("li"),Iae=a("strong"),Uco=o("bart"),Jco=o(" \u2014 "),xP=a("a"),Yco=o("BartModel"),Kco=o(" (BART model)"),Zco=l(),Xh=a("li"),qae=a("strong"),efo=o("beit"),ofo=o(" \u2014 "),$P=a("a"),rfo=o("BeitModel"),tfo=o(" (BEiT model)"),afo=l(),zh=a("li"),Nae=a("strong"),nfo=o("bert"),sfo=o(" \u2014 "),kP=a("a"),lfo=o("BertModel"),ifo=o(" (BERT model)"),dfo=l(),Qh=a("li"),jae=a("strong"),cfo=o("bert-generation"),ffo=o(" \u2014 "),SP=a("a"),mfo=o("BertGenerationEncoder"),gfo=o(" (Bert Generation model)"),hfo=l(),Wh=a("li"),Dae=a("strong"),pfo=o("big_bird"),ufo=o(" \u2014 "),RP=a("a"),_fo=o("BigBirdModel"),bfo=o(" (BigBird model)"),vfo=l(),Hh=a("li"),Gae=a("strong"),Ffo=o("bigbird_pegasus"),Tfo=o(" \u2014 "),BP=a("a"),Mfo=o("BigBirdPegasusModel"),Efo=o(" (BigBirdPegasus model)"),Cfo=l(),Uh=a("li"),Oae=a("strong"),wfo=o("blenderbot"),Afo=o(" \u2014 "),PP=a("a"),yfo=o("BlenderbotModel"),Lfo=o(" (Blenderbot model)"),xfo=l(),Jh=a("li"),Vae=a("strong"),$fo=o("blenderbot-small"),kfo=o(" \u2014 "),IP=a("a"),Sfo=o("BlenderbotSmallModel"),Rfo=o(" (BlenderbotSmall model)"),Bfo=l(),Yh=a("li"),Xae=a("strong"),Pfo=o("camembert"),Ifo=o(" \u2014 "),qP=a("a"),qfo=o("CamembertModel"),Nfo=o(" (CamemBERT model)"),jfo=l(),Kh=a("li"),zae=a("strong"),Dfo=o("canine"),Gfo=o(" \u2014 "),NP=a("a"),Ofo=o("CanineModel"),Vfo=o(" (Canine model)"),Xfo=l(),Zh=a("li"),Qae=a("strong"),zfo=o("clip"),Qfo=o(" \u2014 "),jP=a("a"),Wfo=o("CLIPModel"),Hfo=o(" (CLIP model)"),Ufo=l(),ep=a("li"),Wae=a("strong"),Jfo=o("convbert"),Yfo=o(" \u2014 "),DP=a("a"),Kfo=o("ConvBertModel"),Zfo=o(" (ConvBERT model)"),emo=l(),op=a("li"),Hae=a("strong"),omo=o("convnext"),rmo=o(" \u2014 "),GP=a("a"),tmo=o("ConvNextModel"),amo=o(" (ConvNext model)"),nmo=l(),rp=a("li"),Uae=a("strong"),smo=o("ctrl"),lmo=o(" \u2014 "),OP=a("a"),imo=o("CTRLModel"),dmo=o(" (CTRL model)"),cmo=l(),tp=a("li"),Jae=a("strong"),fmo=o("data2vec-audio"),mmo=o(" \u2014 "),VP=a("a"),gmo=o("Data2VecAudioModel"),hmo=o(" (Data2VecAudio model)"),pmo=l(),ap=a("li"),Yae=a("strong"),umo=o("data2vec-text"),_mo=o(" \u2014 "),XP=a("a"),bmo=o("Data2VecTextModel"),vmo=o(" (Data2VecText model)"),Fmo=l(),np=a("li"),Kae=a("strong"),Tmo=o("data2vec-vision"),Mmo=o(" \u2014 "),zP=a("a"),Emo=o("Data2VecVisionModel"),Cmo=o(" (Data2VecVision model)"),wmo=l(),sp=a("li"),Zae=a("strong"),Amo=o("deberta"),ymo=o(" \u2014 "),QP=a("a"),Lmo=o("DebertaModel"),xmo=o(" (DeBERTa model)"),$mo=l(),lp=a("li"),ene=a("strong"),kmo=o("deberta-v2"),Smo=o(" \u2014 "),WP=a("a"),Rmo=o("DebertaV2Model"),Bmo=o(" (DeBERTa-v2 model)"),Pmo=l(),ip=a("li"),one=a("strong"),Imo=o("decision_transformer"),qmo=o(" \u2014 "),HP=a("a"),Nmo=o("DecisionTransformerModel"),jmo=o(" (Decision Transformer model)"),Dmo=l(),dp=a("li"),rne=a("strong"),Gmo=o("deit"),Omo=o(" \u2014 "),UP=a("a"),Vmo=o("DeiTModel"),Xmo=o(" (DeiT model)"),zmo=l(),cp=a("li"),tne=a("strong"),Qmo=o("detr"),Wmo=o(" \u2014 "),JP=a("a"),Hmo=o("DetrModel"),Umo=o(" (DETR model)"),Jmo=l(),fp=a("li"),ane=a("strong"),Ymo=o("distilbert"),Kmo=o(" \u2014 "),YP=a("a"),Zmo=o("DistilBertModel"),ego=o(" (DistilBERT model)"),ogo=l(),mp=a("li"),nne=a("strong"),rgo=o("dpr"),tgo=o(" \u2014 "),KP=a("a"),ago=o("DPRQuestionEncoder"),ngo=o(" (DPR model)"),sgo=l(),gp=a("li"),sne=a("strong"),lgo=o("dpt"),igo=o(" \u2014 "),ZP=a("a"),dgo=o("DPTModel"),cgo=o(" (DPT model)"),fgo=l(),hp=a("li"),lne=a("strong"),mgo=o("electra"),ggo=o(" \u2014 "),eI=a("a"),hgo=o("ElectraModel"),pgo=o(" (ELECTRA model)"),ugo=l(),pp=a("li"),ine=a("strong"),_go=o("flaubert"),bgo=o(" \u2014 "),oI=a("a"),vgo=o("FlaubertModel"),Fgo=o(" (FlauBERT model)"),Tgo=l(),up=a("li"),dne=a("strong"),Mgo=o("fnet"),Ego=o(" \u2014 "),rI=a("a"),Cgo=o("FNetModel"),wgo=o(" (FNet model)"),Ago=l(),_p=a("li"),cne=a("strong"),ygo=o("fsmt"),Lgo=o(" \u2014 "),tI=a("a"),xgo=o("FSMTModel"),$go=o(" (FairSeq Machine-Translation model)"),kgo=l(),Ss=a("li"),fne=a("strong"),Sgo=o("funnel"),Rgo=o(" \u2014 "),aI=a("a"),Bgo=o("FunnelModel"),Pgo=o(" or "),nI=a("a"),Igo=o("FunnelBaseModel"),qgo=o(" (Funnel Transformer model)"),Ngo=l(),bp=a("li"),mne=a("strong"),jgo=o("glpn"),Dgo=o(" \u2014 "),sI=a("a"),Ggo=o("GLPNModel"),Ogo=o(" (GLPN model)"),Vgo=l(),vp=a("li"),gne=a("strong"),Xgo=o("gpt2"),zgo=o(" \u2014 "),lI=a("a"),Qgo=o("GPT2Model"),Wgo=o(" (OpenAI GPT-2 model)"),Hgo=l(),Fp=a("li"),hne=a("strong"),Ugo=o("gpt_neo"),Jgo=o(" \u2014 "),iI=a("a"),Ygo=o("GPTNeoModel"),Kgo=o(" (GPT Neo model)"),Zgo=l(),Tp=a("li"),pne=a("strong"),eho=o("gptj"),oho=o(" \u2014 "),dI=a("a"),rho=o("GPTJModel"),tho=o(" (GPT-J model)"),aho=l(),Mp=a("li"),une=a("strong"),nho=o("hubert"),sho=o(" \u2014 "),cI=a("a"),lho=o("HubertModel"),iho=o(" (Hubert model)"),dho=l(),Ep=a("li"),_ne=a("strong"),cho=o("ibert"),fho=o(" \u2014 "),fI=a("a"),mho=o("IBertModel"),gho=o(" (I-BERT model)"),hho=l(),Cp=a("li"),bne=a("strong"),pho=o("imagegpt"),uho=o(" \u2014 "),mI=a("a"),_ho=o("ImageGPTModel"),bho=o(" (ImageGPT model)"),vho=l(),wp=a("li"),vne=a("strong"),Fho=o("layoutlm"),Tho=o(" \u2014 "),gI=a("a"),Mho=o("LayoutLMModel"),Eho=o(" (LayoutLM model)"),Cho=l(),Ap=a("li"),Fne=a("strong"),who=o("layoutlmv2"),Aho=o(" \u2014 "),hI=a("a"),yho=o("LayoutLMv2Model"),Lho=o(" (LayoutLMv2 model)"),xho=l(),yp=a("li"),Tne=a("strong"),$ho=o("led"),kho=o(" \u2014 "),pI=a("a"),Sho=o("LEDModel"),Rho=o(" (LED model)"),Bho=l(),Lp=a("li"),Mne=a("strong"),Pho=o("longformer"),Iho=o(" \u2014 "),uI=a("a"),qho=o("LongformerModel"),Nho=o(" (Longformer model)"),jho=l(),xp=a("li"),Ene=a("strong"),Dho=o("luke"),Gho=o(" \u2014 "),_I=a("a"),Oho=o("LukeModel"),Vho=o(" (LUKE model)"),Xho=l(),$p=a("li"),Cne=a("strong"),zho=o("lxmert"),Qho=o(" \u2014 "),bI=a("a"),Who=o("LxmertModel"),Hho=o(" (LXMERT model)"),Uho=l(),kp=a("li"),wne=a("strong"),Jho=o("m2m_100"),Yho=o(" \u2014 "),vI=a("a"),Kho=o("M2M100Model"),Zho=o(" (M2M100 model)"),epo=l(),Sp=a("li"),Ane=a("strong"),opo=o("marian"),rpo=o(" \u2014 "),FI=a("a"),tpo=o("MarianModel"),apo=o(" (Marian model)"),npo=l(),Rp=a("li"),yne=a("strong"),spo=o("maskformer"),lpo=o(" \u2014 "),TI=a("a"),ipo=o("MaskFormerModel"),dpo=o(" (MaskFormer model)"),cpo=l(),Bp=a("li"),Lne=a("strong"),fpo=o("mbart"),mpo=o(" \u2014 "),MI=a("a"),gpo=o("MBartModel"),hpo=o(" (mBART model)"),ppo=l(),Pp=a("li"),xne=a("strong"),upo=o("megatron-bert"),_po=o(" \u2014 "),EI=a("a"),bpo=o("MegatronBertModel"),vpo=o(" (MegatronBert model)"),Fpo=l(),Ip=a("li"),$ne=a("strong"),Tpo=o("mobilebert"),Mpo=o(" \u2014 "),CI=a("a"),Epo=o("MobileBertModel"),Cpo=o(" (MobileBERT model)"),wpo=l(),qp=a("li"),kne=a("strong"),Apo=o("mpnet"),ypo=o(" \u2014 "),wI=a("a"),Lpo=o("MPNetModel"),xpo=o(" (MPNet model)"),$po=l(),Np=a("li"),Sne=a("strong"),kpo=o("mt5"),Spo=o(" \u2014 "),AI=a("a"),Rpo=o("MT5Model"),Bpo=o(" (mT5 model)"),Ppo=l(),jp=a("li"),Rne=a("strong"),Ipo=o("nystromformer"),qpo=o(" \u2014 "),yI=a("a"),Npo=o("NystromformerModel"),jpo=o(" (Nystromformer model)"),Dpo=l(),Dp=a("li"),Bne=a("strong"),Gpo=o("openai-gpt"),Opo=o(" \u2014 "),LI=a("a"),Vpo=o("OpenAIGPTModel"),Xpo=o(" (OpenAI GPT model)"),zpo=l(),Gp=a("li"),Pne=a("strong"),Qpo=o("pegasus"),Wpo=o(" \u2014 "),xI=a("a"),Hpo=o("PegasusModel"),Upo=o(" (Pegasus model)"),Jpo=l(),Op=a("li"),Ine=a("strong"),Ypo=o("perceiver"),Kpo=o(" \u2014 "),$I=a("a"),Zpo=o("PerceiverModel"),euo=o(" (Perceiver model)"),ouo=l(),Vp=a("li"),qne=a("strong"),ruo=o("plbart"),tuo=o(" \u2014 "),kI=a("a"),auo=o("PLBartModel"),nuo=o(" (PLBart model)"),suo=l(),Xp=a("li"),Nne=a("strong"),luo=o("poolformer"),iuo=o(" \u2014 "),SI=a("a"),duo=o("PoolFormerModel"),cuo=o(" (PoolFormer model)"),fuo=l(),zp=a("li"),jne=a("strong"),muo=o("prophetnet"),guo=o(" \u2014 "),RI=a("a"),huo=o("ProphetNetModel"),puo=o(" (ProphetNet model)"),uuo=l(),Qp=a("li"),Dne=a("strong"),_uo=o("qdqbert"),buo=o(" \u2014 "),BI=a("a"),vuo=o("QDQBertModel"),Fuo=o(" (QDQBert model)"),Tuo=l(),Wp=a("li"),Gne=a("strong"),Muo=o("reformer"),Euo=o(" \u2014 "),PI=a("a"),Cuo=o("ReformerModel"),wuo=o(" (Reformer model)"),Auo=l(),Hp=a("li"),One=a("strong"),yuo=o("regnet"),Luo=o(" \u2014 "),II=a("a"),xuo=o("RegNetModel"),$uo=o(" (RegNet model)"),kuo=l(),Up=a("li"),Vne=a("strong"),Suo=o("rembert"),Ruo=o(" \u2014 "),qI=a("a"),Buo=o("RemBertModel"),Puo=o(" (RemBERT model)"),Iuo=l(),Jp=a("li"),Xne=a("strong"),quo=o("resnet"),Nuo=o(" \u2014 "),NI=a("a"),juo=o("ResNetModel"),Duo=o(" (ResNet model)"),Guo=l(),Yp=a("li"),zne=a("strong"),Ouo=o("retribert"),Vuo=o(" \u2014 "),jI=a("a"),Xuo=o("RetriBertModel"),zuo=o(" (RetriBERT model)"),Quo=l(),Kp=a("li"),Qne=a("strong"),Wuo=o("roberta"),Huo=o(" \u2014 "),DI=a("a"),Uuo=o("RobertaModel"),Juo=o(" (RoBERTa model)"),Yuo=l(),Zp=a("li"),Wne=a("strong"),Kuo=o("roformer"),Zuo=o(" \u2014 "),GI=a("a"),e_o=o("RoFormerModel"),o_o=o(" (RoFormer model)"),r_o=l(),eu=a("li"),Hne=a("strong"),t_o=o("segformer"),a_o=o(" \u2014 "),OI=a("a"),n_o=o("SegformerModel"),s_o=o(" (SegFormer model)"),l_o=l(),ou=a("li"),Une=a("strong"),i_o=o("sew"),d_o=o(" \u2014 "),VI=a("a"),c_o=o("SEWModel"),f_o=o(" (SEW model)"),m_o=l(),ru=a("li"),Jne=a("strong"),g_o=o("sew-d"),h_o=o(" \u2014 "),XI=a("a"),p_o=o("SEWDModel"),u_o=o(" (SEW-D model)"),__o=l(),tu=a("li"),Yne=a("strong"),b_o=o("speech_to_text"),v_o=o(" \u2014 "),zI=a("a"),F_o=o("Speech2TextModel"),T_o=o(" (Speech2Text model)"),M_o=l(),au=a("li"),Kne=a("strong"),E_o=o("splinter"),C_o=o(" \u2014 "),QI=a("a"),w_o=o("SplinterModel"),A_o=o(" (Splinter model)"),y_o=l(),nu=a("li"),Zne=a("strong"),L_o=o("squeezebert"),x_o=o(" \u2014 "),WI=a("a"),$_o=o("SqueezeBertModel"),k_o=o(" (SqueezeBERT model)"),S_o=l(),su=a("li"),ese=a("strong"),R_o=o("swin"),B_o=o(" \u2014 "),HI=a("a"),P_o=o("SwinModel"),I_o=o(" (Swin model)"),q_o=l(),lu=a("li"),ose=a("strong"),N_o=o("t5"),j_o=o(" \u2014 "),UI=a("a"),D_o=o("T5Model"),G_o=o(" (T5 model)"),O_o=l(),iu=a("li"),rse=a("strong"),V_o=o("tapas"),X_o=o(" \u2014 "),JI=a("a"),z_o=o("TapasModel"),Q_o=o(" (TAPAS model)"),W_o=l(),du=a("li"),tse=a("strong"),H_o=o("transfo-xl"),U_o=o(" \u2014 "),YI=a("a"),J_o=o("TransfoXLModel"),Y_o=o(" (Transformer-XL model)"),K_o=l(),cu=a("li"),ase=a("strong"),Z_o=o("unispeech"),e1o=o(" \u2014 "),KI=a("a"),o1o=o("UniSpeechModel"),r1o=o(" (UniSpeech model)"),t1o=l(),fu=a("li"),nse=a("strong"),a1o=o("unispeech-sat"),n1o=o(" \u2014 "),ZI=a("a"),s1o=o("UniSpeechSatModel"),l1o=o(" (UniSpeechSat model)"),i1o=l(),mu=a("li"),sse=a("strong"),d1o=o("van"),c1o=o(" \u2014 "),eq=a("a"),f1o=o("VanModel"),m1o=o(" (VAN model)"),g1o=l(),gu=a("li"),lse=a("strong"),h1o=o("vilt"),p1o=o(" \u2014 "),oq=a("a"),u1o=o("ViltModel"),_1o=o(" (ViLT model)"),b1o=l(),hu=a("li"),ise=a("strong"),v1o=o("vision-text-dual-encoder"),F1o=o(" \u2014 "),rq=a("a"),T1o=o("VisionTextDualEncoderModel"),M1o=o(" (VisionTextDualEncoder model)"),E1o=l(),pu=a("li"),dse=a("strong"),C1o=o("visual_bert"),w1o=o(" \u2014 "),tq=a("a"),A1o=o("VisualBertModel"),y1o=o(" (VisualBert model)"),L1o=l(),uu=a("li"),cse=a("strong"),x1o=o("vit"),$1o=o(" \u2014 "),aq=a("a"),k1o=o("ViTModel"),S1o=o(" (ViT model)"),R1o=l(),_u=a("li"),fse=a("strong"),B1o=o("vit_mae"),P1o=o(" \u2014 "),nq=a("a"),I1o=o("ViTMAEModel"),q1o=o(" (ViTMAE model)"),N1o=l(),bu=a("li"),mse=a("strong"),j1o=o("wav2vec2"),D1o=o(" \u2014 "),sq=a("a"),G1o=o("Wav2Vec2Model"),O1o=o(" (Wav2Vec2 model)"),V1o=l(),vu=a("li"),gse=a("strong"),X1o=o("wavlm"),z1o=o(" \u2014 "),lq=a("a"),Q1o=o("WavLMModel"),W1o=o(" (WavLM model)"),H1o=l(),Fu=a("li"),hse=a("strong"),U1o=o("xglm"),J1o=o(" \u2014 "),iq=a("a"),Y1o=o("XGLMModel"),K1o=o(" (XGLM model)"),Z1o=l(),Tu=a("li"),pse=a("strong"),ebo=o("xlm"),obo=o(" \u2014 "),dq=a("a"),rbo=o("XLMModel"),tbo=o(" (XLM model)"),abo=l(),Mu=a("li"),use=a("strong"),nbo=o("xlm-prophetnet"),sbo=o(" \u2014 "),cq=a("a"),lbo=o("XLMProphetNetModel"),ibo=o(" (XLMProphetNet model)"),dbo=l(),Eu=a("li"),_se=a("strong"),cbo=o("xlm-roberta"),fbo=o(" \u2014 "),fq=a("a"),mbo=o("XLMRobertaModel"),gbo=o(" (XLM-RoBERTa model)"),hbo=l(),Cu=a("li"),bse=a("strong"),pbo=o("xlm-roberta-xl"),ubo=o(" \u2014 "),mq=a("a"),_bo=o("XLMRobertaXLModel"),bbo=o(" (XLM-RoBERTa-XL model)"),vbo=l(),wu=a("li"),vse=a("strong"),Fbo=o("xlnet"),Tbo=o(" \u2014 "),gq=a("a"),Mbo=o("XLNetModel"),Ebo=o(" (XLNet model)"),Cbo=l(),Au=a("li"),Fse=a("strong"),wbo=o("yolos"),Abo=o(" \u2014 "),hq=a("a"),ybo=o("YolosModel"),Lbo=o(" (YOLOS model)"),xbo=l(),yu=a("li"),Tse=a("strong"),$bo=o("yoso"),kbo=o(" \u2014 "),pq=a("a"),Sbo=o("YosoModel"),Rbo=o(" (YOSO model)"),Bbo=l(),Lu=a("p"),Pbo=o("The model is set in evaluation mode by default using "),Mse=a("code"),Ibo=o("model.eval()"),qbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=a("code"),Nbo=o("model.train()"),jbo=l(),F(xu.$$.fragment),MPe=l(),Ci=a("h2"),$u=a("a"),Cse=a("span"),F(vw.$$.fragment),Dbo=l(),wse=a("span"),Gbo=o("AutoModelForPreTraining"),EPe=l(),xo=a("div"),F(Fw.$$.fragment),Obo=l(),wi=a("p"),Vbo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uq=a("a"),Xbo=o("from_pretrained()"),zbo=o(" class method or the "),_q=a("a"),Qbo=o("from_config()"),Wbo=o(` class
method.`),Hbo=l(),Tw=a("p"),Ubo=o("This class cannot be instantiated directly using "),Ase=a("code"),Jbo=o("__init__()"),Ybo=o(" (throws an error)."),Kbo=l(),rt=a("div"),F(Mw.$$.fragment),Zbo=l(),yse=a("p"),e2o=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),o2o=l(),Ai=a("p"),r2o=o(`Note:
Loading a model from its configuration file does `),Lse=a("strong"),t2o=o("not"),a2o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),bq=a("a"),n2o=o("from_pretrained()"),s2o=o(" to load the model weights."),l2o=l(),F(ku.$$.fragment),i2o=l(),Ue=a("div"),F(Ew.$$.fragment),d2o=l(),xse=a("p"),c2o=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),f2o=l(),ya=a("p"),m2o=o("The model class to instantiate is selected based on the "),$se=a("code"),g2o=o("model_type"),h2o=o(` property of the config object (either
passed as an argument or loaded from `),kse=a("code"),p2o=o("pretrained_model_name_or_path"),u2o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=a("code"),_2o=o("pretrained_model_name_or_path"),b2o=o(":"),v2o=l(),G=a("ul"),Su=a("li"),Rse=a("strong"),F2o=o("albert"),T2o=o(" \u2014 "),vq=a("a"),M2o=o("AlbertForPreTraining"),E2o=o(" (ALBERT model)"),C2o=l(),Ru=a("li"),Bse=a("strong"),w2o=o("bart"),A2o=o(" \u2014 "),Fq=a("a"),y2o=o("BartForConditionalGeneration"),L2o=o(" (BART model)"),x2o=l(),Bu=a("li"),Pse=a("strong"),$2o=o("bert"),k2o=o(" \u2014 "),Tq=a("a"),S2o=o("BertForPreTraining"),R2o=o(" (BERT model)"),B2o=l(),Pu=a("li"),Ise=a("strong"),P2o=o("big_bird"),I2o=o(" \u2014 "),Mq=a("a"),q2o=o("BigBirdForPreTraining"),N2o=o(" (BigBird model)"),j2o=l(),Iu=a("li"),qse=a("strong"),D2o=o("camembert"),G2o=o(" \u2014 "),Eq=a("a"),O2o=o("CamembertForMaskedLM"),V2o=o(" (CamemBERT model)"),X2o=l(),qu=a("li"),Nse=a("strong"),z2o=o("ctrl"),Q2o=o(" \u2014 "),Cq=a("a"),W2o=o("CTRLLMHeadModel"),H2o=o(" (CTRL model)"),U2o=l(),Nu=a("li"),jse=a("strong"),J2o=o("data2vec-text"),Y2o=o(" \u2014 "),wq=a("a"),K2o=o("Data2VecTextForMaskedLM"),Z2o=o(" (Data2VecText model)"),evo=l(),ju=a("li"),Dse=a("strong"),ovo=o("deberta"),rvo=o(" \u2014 "),Aq=a("a"),tvo=o("DebertaForMaskedLM"),avo=o(" (DeBERTa model)"),nvo=l(),Du=a("li"),Gse=a("strong"),svo=o("deberta-v2"),lvo=o(" \u2014 "),yq=a("a"),ivo=o("DebertaV2ForMaskedLM"),dvo=o(" (DeBERTa-v2 model)"),cvo=l(),Gu=a("li"),Ose=a("strong"),fvo=o("distilbert"),mvo=o(" \u2014 "),Lq=a("a"),gvo=o("DistilBertForMaskedLM"),hvo=o(" (DistilBERT model)"),pvo=l(),Ou=a("li"),Vse=a("strong"),uvo=o("electra"),_vo=o(" \u2014 "),xq=a("a"),bvo=o("ElectraForPreTraining"),vvo=o(" (ELECTRA model)"),Fvo=l(),Vu=a("li"),Xse=a("strong"),Tvo=o("flaubert"),Mvo=o(" \u2014 "),$q=a("a"),Evo=o("FlaubertWithLMHeadModel"),Cvo=o(" (FlauBERT model)"),wvo=l(),Xu=a("li"),zse=a("strong"),Avo=o("fnet"),yvo=o(" \u2014 "),kq=a("a"),Lvo=o("FNetForPreTraining"),xvo=o(" (FNet model)"),$vo=l(),zu=a("li"),Qse=a("strong"),kvo=o("fsmt"),Svo=o(" \u2014 "),Sq=a("a"),Rvo=o("FSMTForConditionalGeneration"),Bvo=o(" (FairSeq Machine-Translation model)"),Pvo=l(),Qu=a("li"),Wse=a("strong"),Ivo=o("funnel"),qvo=o(" \u2014 "),Rq=a("a"),Nvo=o("FunnelForPreTraining"),jvo=o(" (Funnel Transformer model)"),Dvo=l(),Wu=a("li"),Hse=a("strong"),Gvo=o("gpt2"),Ovo=o(" \u2014 "),Bq=a("a"),Vvo=o("GPT2LMHeadModel"),Xvo=o(" (OpenAI GPT-2 model)"),zvo=l(),Hu=a("li"),Use=a("strong"),Qvo=o("ibert"),Wvo=o(" \u2014 "),Pq=a("a"),Hvo=o("IBertForMaskedLM"),Uvo=o(" (I-BERT model)"),Jvo=l(),Uu=a("li"),Jse=a("strong"),Yvo=o("layoutlm"),Kvo=o(" \u2014 "),Iq=a("a"),Zvo=o("LayoutLMForMaskedLM"),eFo=o(" (LayoutLM model)"),oFo=l(),Ju=a("li"),Yse=a("strong"),rFo=o("longformer"),tFo=o(" \u2014 "),qq=a("a"),aFo=o("LongformerForMaskedLM"),nFo=o(" (Longformer model)"),sFo=l(),Yu=a("li"),Kse=a("strong"),lFo=o("lxmert"),iFo=o(" \u2014 "),Nq=a("a"),dFo=o("LxmertForPreTraining"),cFo=o(" (LXMERT model)"),fFo=l(),Ku=a("li"),Zse=a("strong"),mFo=o("megatron-bert"),gFo=o(" \u2014 "),jq=a("a"),hFo=o("MegatronBertForPreTraining"),pFo=o(" (MegatronBert model)"),uFo=l(),Zu=a("li"),ele=a("strong"),_Fo=o("mobilebert"),bFo=o(" \u2014 "),Dq=a("a"),vFo=o("MobileBertForPreTraining"),FFo=o(" (MobileBERT model)"),TFo=l(),e_=a("li"),ole=a("strong"),MFo=o("mpnet"),EFo=o(" \u2014 "),Gq=a("a"),CFo=o("MPNetForMaskedLM"),wFo=o(" (MPNet model)"),AFo=l(),o_=a("li"),rle=a("strong"),yFo=o("openai-gpt"),LFo=o(" \u2014 "),Oq=a("a"),xFo=o("OpenAIGPTLMHeadModel"),$Fo=o(" (OpenAI GPT model)"),kFo=l(),r_=a("li"),tle=a("strong"),SFo=o("retribert"),RFo=o(" \u2014 "),Vq=a("a"),BFo=o("RetriBertModel"),PFo=o(" (RetriBERT model)"),IFo=l(),t_=a("li"),ale=a("strong"),qFo=o("roberta"),NFo=o(" \u2014 "),Xq=a("a"),jFo=o("RobertaForMaskedLM"),DFo=o(" (RoBERTa model)"),GFo=l(),a_=a("li"),nle=a("strong"),OFo=o("squeezebert"),VFo=o(" \u2014 "),zq=a("a"),XFo=o("SqueezeBertForMaskedLM"),zFo=o(" (SqueezeBERT model)"),QFo=l(),n_=a("li"),sle=a("strong"),WFo=o("t5"),HFo=o(" \u2014 "),Qq=a("a"),UFo=o("T5ForConditionalGeneration"),JFo=o(" (T5 model)"),YFo=l(),s_=a("li"),lle=a("strong"),KFo=o("tapas"),ZFo=o(" \u2014 "),Wq=a("a"),e0o=o("TapasForMaskedLM"),o0o=o(" (TAPAS model)"),r0o=l(),l_=a("li"),ile=a("strong"),t0o=o("transfo-xl"),a0o=o(" \u2014 "),Hq=a("a"),n0o=o("TransfoXLLMHeadModel"),s0o=o(" (Transformer-XL model)"),l0o=l(),i_=a("li"),dle=a("strong"),i0o=o("unispeech"),d0o=o(" \u2014 "),Uq=a("a"),c0o=o("UniSpeechForPreTraining"),f0o=o(" (UniSpeech model)"),m0o=l(),d_=a("li"),cle=a("strong"),g0o=o("unispeech-sat"),h0o=o(" \u2014 "),Jq=a("a"),p0o=o("UniSpeechSatForPreTraining"),u0o=o(" (UniSpeechSat model)"),_0o=l(),c_=a("li"),fle=a("strong"),b0o=o("visual_bert"),v0o=o(" \u2014 "),Yq=a("a"),F0o=o("VisualBertForPreTraining"),T0o=o(" (VisualBert model)"),M0o=l(),f_=a("li"),mle=a("strong"),E0o=o("vit_mae"),C0o=o(" \u2014 "),Kq=a("a"),w0o=o("ViTMAEForPreTraining"),A0o=o(" (ViTMAE model)"),y0o=l(),m_=a("li"),gle=a("strong"),L0o=o("wav2vec2"),x0o=o(" \u2014 "),Zq=a("a"),$0o=o("Wav2Vec2ForPreTraining"),k0o=o(" (Wav2Vec2 model)"),S0o=l(),g_=a("li"),hle=a("strong"),R0o=o("xlm"),B0o=o(" \u2014 "),eN=a("a"),P0o=o("XLMWithLMHeadModel"),I0o=o(" (XLM model)"),q0o=l(),h_=a("li"),ple=a("strong"),N0o=o("xlm-roberta"),j0o=o(" \u2014 "),oN=a("a"),D0o=o("XLMRobertaForMaskedLM"),G0o=o(" (XLM-RoBERTa model)"),O0o=l(),p_=a("li"),ule=a("strong"),V0o=o("xlm-roberta-xl"),X0o=o(" \u2014 "),rN=a("a"),z0o=o("XLMRobertaXLForMaskedLM"),Q0o=o(" (XLM-RoBERTa-XL model)"),W0o=l(),u_=a("li"),_le=a("strong"),H0o=o("xlnet"),U0o=o(" \u2014 "),tN=a("a"),J0o=o("XLNetLMHeadModel"),Y0o=o(" (XLNet model)"),K0o=l(),__=a("p"),Z0o=o("The model is set in evaluation mode by default using "),ble=a("code"),e6o=o("model.eval()"),o6o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=a("code"),r6o=o("model.train()"),t6o=l(),F(b_.$$.fragment),CPe=l(),yi=a("h2"),v_=a("a"),Fle=a("span"),F(Cw.$$.fragment),a6o=l(),Tle=a("span"),n6o=o("AutoModelForCausalLM"),wPe=l(),$o=a("div"),F(ww.$$.fragment),s6o=l(),Li=a("p"),l6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aN=a("a"),i6o=o("from_pretrained()"),d6o=o(" class method or the "),nN=a("a"),c6o=o("from_config()"),f6o=o(` class
method.`),m6o=l(),Aw=a("p"),g6o=o("This class cannot be instantiated directly using "),Mle=a("code"),h6o=o("__init__()"),p6o=o(" (throws an error)."),u6o=l(),tt=a("div"),F(yw.$$.fragment),_6o=l(),Ele=a("p"),b6o=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),v6o=l(),xi=a("p"),F6o=o(`Note:
Loading a model from its configuration file does `),Cle=a("strong"),T6o=o("not"),M6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=a("a"),E6o=o("from_pretrained()"),C6o=o(" to load the model weights."),w6o=l(),F(F_.$$.fragment),A6o=l(),Je=a("div"),F(Lw.$$.fragment),y6o=l(),wle=a("p"),L6o=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),x6o=l(),La=a("p"),$6o=o("The model class to instantiate is selected based on the "),Ale=a("code"),k6o=o("model_type"),S6o=o(` property of the config object (either
passed as an argument or loaded from `),yle=a("code"),R6o=o("pretrained_model_name_or_path"),B6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=a("code"),P6o=o("pretrained_model_name_or_path"),I6o=o(":"),q6o=l(),z=a("ul"),T_=a("li"),xle=a("strong"),N6o=o("bart"),j6o=o(" \u2014 "),lN=a("a"),D6o=o("BartForCausalLM"),G6o=o(" (BART model)"),O6o=l(),M_=a("li"),$le=a("strong"),V6o=o("bert"),X6o=o(" \u2014 "),iN=a("a"),z6o=o("BertLMHeadModel"),Q6o=o(" (BERT model)"),W6o=l(),E_=a("li"),kle=a("strong"),H6o=o("bert-generation"),U6o=o(" \u2014 "),dN=a("a"),J6o=o("BertGenerationDecoder"),Y6o=o(" (Bert Generation model)"),K6o=l(),C_=a("li"),Sle=a("strong"),Z6o=o("big_bird"),eTo=o(" \u2014 "),cN=a("a"),oTo=o("BigBirdForCausalLM"),rTo=o(" (BigBird model)"),tTo=l(),w_=a("li"),Rle=a("strong"),aTo=o("bigbird_pegasus"),nTo=o(" \u2014 "),fN=a("a"),sTo=o("BigBirdPegasusForCausalLM"),lTo=o(" (BigBirdPegasus model)"),iTo=l(),A_=a("li"),Ble=a("strong"),dTo=o("blenderbot"),cTo=o(" \u2014 "),mN=a("a"),fTo=o("BlenderbotForCausalLM"),mTo=o(" (Blenderbot model)"),gTo=l(),y_=a("li"),Ple=a("strong"),hTo=o("blenderbot-small"),pTo=o(" \u2014 "),gN=a("a"),uTo=o("BlenderbotSmallForCausalLM"),_To=o(" (BlenderbotSmall model)"),bTo=l(),L_=a("li"),Ile=a("strong"),vTo=o("camembert"),FTo=o(" \u2014 "),hN=a("a"),TTo=o("CamembertForCausalLM"),MTo=o(" (CamemBERT model)"),ETo=l(),x_=a("li"),qle=a("strong"),CTo=o("ctrl"),wTo=o(" \u2014 "),pN=a("a"),ATo=o("CTRLLMHeadModel"),yTo=o(" (CTRL model)"),LTo=l(),$_=a("li"),Nle=a("strong"),xTo=o("data2vec-text"),$To=o(" \u2014 "),uN=a("a"),kTo=o("Data2VecTextForCausalLM"),STo=o(" (Data2VecText model)"),RTo=l(),k_=a("li"),jle=a("strong"),BTo=o("electra"),PTo=o(" \u2014 "),_N=a("a"),ITo=o("ElectraForCausalLM"),qTo=o(" (ELECTRA model)"),NTo=l(),S_=a("li"),Dle=a("strong"),jTo=o("gpt2"),DTo=o(" \u2014 "),bN=a("a"),GTo=o("GPT2LMHeadModel"),OTo=o(" (OpenAI GPT-2 model)"),VTo=l(),R_=a("li"),Gle=a("strong"),XTo=o("gpt_neo"),zTo=o(" \u2014 "),vN=a("a"),QTo=o("GPTNeoForCausalLM"),WTo=o(" (GPT Neo model)"),HTo=l(),B_=a("li"),Ole=a("strong"),UTo=o("gptj"),JTo=o(" \u2014 "),FN=a("a"),YTo=o("GPTJForCausalLM"),KTo=o(" (GPT-J model)"),ZTo=l(),P_=a("li"),Vle=a("strong"),e7o=o("marian"),o7o=o(" \u2014 "),TN=a("a"),r7o=o("MarianForCausalLM"),t7o=o(" (Marian model)"),a7o=l(),I_=a("li"),Xle=a("strong"),n7o=o("mbart"),s7o=o(" \u2014 "),MN=a("a"),l7o=o("MBartForCausalLM"),i7o=o(" (mBART model)"),d7o=l(),q_=a("li"),zle=a("strong"),c7o=o("megatron-bert"),f7o=o(" \u2014 "),EN=a("a"),m7o=o("MegatronBertForCausalLM"),g7o=o(" (MegatronBert model)"),h7o=l(),N_=a("li"),Qle=a("strong"),p7o=o("openai-gpt"),u7o=o(" \u2014 "),CN=a("a"),_7o=o("OpenAIGPTLMHeadModel"),b7o=o(" (OpenAI GPT model)"),v7o=l(),j_=a("li"),Wle=a("strong"),F7o=o("pegasus"),T7o=o(" \u2014 "),wN=a("a"),M7o=o("PegasusForCausalLM"),E7o=o(" (Pegasus model)"),C7o=l(),D_=a("li"),Hle=a("strong"),w7o=o("plbart"),A7o=o(" \u2014 "),AN=a("a"),y7o=o("PLBartForCausalLM"),L7o=o(" (PLBart model)"),x7o=l(),G_=a("li"),Ule=a("strong"),$7o=o("prophetnet"),k7o=o(" \u2014 "),yN=a("a"),S7o=o("ProphetNetForCausalLM"),R7o=o(" (ProphetNet model)"),B7o=l(),O_=a("li"),Jle=a("strong"),P7o=o("qdqbert"),I7o=o(" \u2014 "),LN=a("a"),q7o=o("QDQBertLMHeadModel"),N7o=o(" (QDQBert model)"),j7o=l(),V_=a("li"),Yle=a("strong"),D7o=o("reformer"),G7o=o(" \u2014 "),xN=a("a"),O7o=o("ReformerModelWithLMHead"),V7o=o(" (Reformer model)"),X7o=l(),X_=a("li"),Kle=a("strong"),z7o=o("rembert"),Q7o=o(" \u2014 "),$N=a("a"),W7o=o("RemBertForCausalLM"),H7o=o(" (RemBERT model)"),U7o=l(),z_=a("li"),Zle=a("strong"),J7o=o("roberta"),Y7o=o(" \u2014 "),kN=a("a"),K7o=o("RobertaForCausalLM"),Z7o=o(" (RoBERTa model)"),e9o=l(),Q_=a("li"),eie=a("strong"),o9o=o("roformer"),r9o=o(" \u2014 "),SN=a("a"),t9o=o("RoFormerForCausalLM"),a9o=o(" (RoFormer model)"),n9o=l(),W_=a("li"),oie=a("strong"),s9o=o("speech_to_text_2"),l9o=o(" \u2014 "),RN=a("a"),i9o=o("Speech2Text2ForCausalLM"),d9o=o(" (Speech2Text2 model)"),c9o=l(),H_=a("li"),rie=a("strong"),f9o=o("transfo-xl"),m9o=o(" \u2014 "),BN=a("a"),g9o=o("TransfoXLLMHeadModel"),h9o=o(" (Transformer-XL model)"),p9o=l(),U_=a("li"),tie=a("strong"),u9o=o("trocr"),_9o=o(" \u2014 "),PN=a("a"),b9o=o("TrOCRForCausalLM"),v9o=o(" (TrOCR model)"),F9o=l(),J_=a("li"),aie=a("strong"),T9o=o("xglm"),M9o=o(" \u2014 "),IN=a("a"),E9o=o("XGLMForCausalLM"),C9o=o(" (XGLM model)"),w9o=l(),Y_=a("li"),nie=a("strong"),A9o=o("xlm"),y9o=o(" \u2014 "),qN=a("a"),L9o=o("XLMWithLMHeadModel"),x9o=o(" (XLM model)"),$9o=l(),K_=a("li"),sie=a("strong"),k9o=o("xlm-prophetnet"),S9o=o(" \u2014 "),NN=a("a"),R9o=o("XLMProphetNetForCausalLM"),B9o=o(" (XLMProphetNet model)"),P9o=l(),Z_=a("li"),lie=a("strong"),I9o=o("xlm-roberta"),q9o=o(" \u2014 "),jN=a("a"),N9o=o("XLMRobertaForCausalLM"),j9o=o(" (XLM-RoBERTa model)"),D9o=l(),e1=a("li"),iie=a("strong"),G9o=o("xlm-roberta-xl"),O9o=o(" \u2014 "),DN=a("a"),V9o=o("XLMRobertaXLForCausalLM"),X9o=o(" (XLM-RoBERTa-XL model)"),z9o=l(),o1=a("li"),die=a("strong"),Q9o=o("xlnet"),W9o=o(" \u2014 "),GN=a("a"),H9o=o("XLNetLMHeadModel"),U9o=o(" (XLNet model)"),J9o=l(),r1=a("p"),Y9o=o("The model is set in evaluation mode by default using "),cie=a("code"),K9o=o("model.eval()"),Z9o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=a("code"),eMo=o("model.train()"),oMo=l(),F(t1.$$.fragment),APe=l(),$i=a("h2"),a1=a("a"),mie=a("span"),F(xw.$$.fragment),rMo=l(),gie=a("span"),tMo=o("AutoModelForMaskedLM"),yPe=l(),ko=a("div"),F($w.$$.fragment),aMo=l(),ki=a("p"),nMo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ON=a("a"),sMo=o("from_pretrained()"),lMo=o(" class method or the "),VN=a("a"),iMo=o("from_config()"),dMo=o(` class
method.`),cMo=l(),kw=a("p"),fMo=o("This class cannot be instantiated directly using "),hie=a("code"),mMo=o("__init__()"),gMo=o(" (throws an error)."),hMo=l(),at=a("div"),F(Sw.$$.fragment),pMo=l(),pie=a("p"),uMo=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Mo=l(),Si=a("p"),bMo=o(`Note:
Loading a model from its configuration file does `),uie=a("strong"),vMo=o("not"),FMo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=a("a"),TMo=o("from_pretrained()"),MMo=o(" to load the model weights."),EMo=l(),F(n1.$$.fragment),CMo=l(),Ye=a("div"),F(Rw.$$.fragment),wMo=l(),_ie=a("p"),AMo=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yMo=l(),xa=a("p"),LMo=o("The model class to instantiate is selected based on the "),bie=a("code"),xMo=o("model_type"),$Mo=o(` property of the config object (either
passed as an argument or loaded from `),vie=a("code"),kMo=o("pretrained_model_name_or_path"),SMo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=a("code"),RMo=o("pretrained_model_name_or_path"),BMo=o(":"),PMo=l(),Q=a("ul"),s1=a("li"),Tie=a("strong"),IMo=o("albert"),qMo=o(" \u2014 "),zN=a("a"),NMo=o("AlbertForMaskedLM"),jMo=o(" (ALBERT model)"),DMo=l(),l1=a("li"),Mie=a("strong"),GMo=o("bart"),OMo=o(" \u2014 "),QN=a("a"),VMo=o("BartForConditionalGeneration"),XMo=o(" (BART model)"),zMo=l(),i1=a("li"),Eie=a("strong"),QMo=o("bert"),WMo=o(" \u2014 "),WN=a("a"),HMo=o("BertForMaskedLM"),UMo=o(" (BERT model)"),JMo=l(),d1=a("li"),Cie=a("strong"),YMo=o("big_bird"),KMo=o(" \u2014 "),HN=a("a"),ZMo=o("BigBirdForMaskedLM"),e4o=o(" (BigBird model)"),o4o=l(),c1=a("li"),wie=a("strong"),r4o=o("camembert"),t4o=o(" \u2014 "),UN=a("a"),a4o=o("CamembertForMaskedLM"),n4o=o(" (CamemBERT model)"),s4o=l(),f1=a("li"),Aie=a("strong"),l4o=o("convbert"),i4o=o(" \u2014 "),JN=a("a"),d4o=o("ConvBertForMaskedLM"),c4o=o(" (ConvBERT model)"),f4o=l(),m1=a("li"),yie=a("strong"),m4o=o("data2vec-text"),g4o=o(" \u2014 "),YN=a("a"),h4o=o("Data2VecTextForMaskedLM"),p4o=o(" (Data2VecText model)"),u4o=l(),g1=a("li"),Lie=a("strong"),_4o=o("deberta"),b4o=o(" \u2014 "),KN=a("a"),v4o=o("DebertaForMaskedLM"),F4o=o(" (DeBERTa model)"),T4o=l(),h1=a("li"),xie=a("strong"),M4o=o("deberta-v2"),E4o=o(" \u2014 "),ZN=a("a"),C4o=o("DebertaV2ForMaskedLM"),w4o=o(" (DeBERTa-v2 model)"),A4o=l(),p1=a("li"),$ie=a("strong"),y4o=o("distilbert"),L4o=o(" \u2014 "),ej=a("a"),x4o=o("DistilBertForMaskedLM"),$4o=o(" (DistilBERT model)"),k4o=l(),u1=a("li"),kie=a("strong"),S4o=o("electra"),R4o=o(" \u2014 "),oj=a("a"),B4o=o("ElectraForMaskedLM"),P4o=o(" (ELECTRA model)"),I4o=l(),_1=a("li"),Sie=a("strong"),q4o=o("flaubert"),N4o=o(" \u2014 "),rj=a("a"),j4o=o("FlaubertWithLMHeadModel"),D4o=o(" (FlauBERT model)"),G4o=l(),b1=a("li"),Rie=a("strong"),O4o=o("fnet"),V4o=o(" \u2014 "),tj=a("a"),X4o=o("FNetForMaskedLM"),z4o=o(" (FNet model)"),Q4o=l(),v1=a("li"),Bie=a("strong"),W4o=o("funnel"),H4o=o(" \u2014 "),aj=a("a"),U4o=o("FunnelForMaskedLM"),J4o=o(" (Funnel Transformer model)"),Y4o=l(),F1=a("li"),Pie=a("strong"),K4o=o("ibert"),Z4o=o(" \u2014 "),nj=a("a"),eEo=o("IBertForMaskedLM"),oEo=o(" (I-BERT model)"),rEo=l(),T1=a("li"),Iie=a("strong"),tEo=o("layoutlm"),aEo=o(" \u2014 "),sj=a("a"),nEo=o("LayoutLMForMaskedLM"),sEo=o(" (LayoutLM model)"),lEo=l(),M1=a("li"),qie=a("strong"),iEo=o("longformer"),dEo=o(" \u2014 "),lj=a("a"),cEo=o("LongformerForMaskedLM"),fEo=o(" (Longformer model)"),mEo=l(),E1=a("li"),Nie=a("strong"),gEo=o("mbart"),hEo=o(" \u2014 "),ij=a("a"),pEo=o("MBartForConditionalGeneration"),uEo=o(" (mBART model)"),_Eo=l(),C1=a("li"),jie=a("strong"),bEo=o("megatron-bert"),vEo=o(" \u2014 "),dj=a("a"),FEo=o("MegatronBertForMaskedLM"),TEo=o(" (MegatronBert model)"),MEo=l(),w1=a("li"),Die=a("strong"),EEo=o("mobilebert"),CEo=o(" \u2014 "),cj=a("a"),wEo=o("MobileBertForMaskedLM"),AEo=o(" (MobileBERT model)"),yEo=l(),A1=a("li"),Gie=a("strong"),LEo=o("mpnet"),xEo=o(" \u2014 "),fj=a("a"),$Eo=o("MPNetForMaskedLM"),kEo=o(" (MPNet model)"),SEo=l(),y1=a("li"),Oie=a("strong"),REo=o("nystromformer"),BEo=o(" \u2014 "),mj=a("a"),PEo=o("NystromformerForMaskedLM"),IEo=o(" (Nystromformer model)"),qEo=l(),L1=a("li"),Vie=a("strong"),NEo=o("perceiver"),jEo=o(" \u2014 "),gj=a("a"),DEo=o("PerceiverForMaskedLM"),GEo=o(" (Perceiver model)"),OEo=l(),x1=a("li"),Xie=a("strong"),VEo=o("qdqbert"),XEo=o(" \u2014 "),hj=a("a"),zEo=o("QDQBertForMaskedLM"),QEo=o(" (QDQBert model)"),WEo=l(),$1=a("li"),zie=a("strong"),HEo=o("reformer"),UEo=o(" \u2014 "),pj=a("a"),JEo=o("ReformerForMaskedLM"),YEo=o(" (Reformer model)"),KEo=l(),k1=a("li"),Qie=a("strong"),ZEo=o("rembert"),e5o=o(" \u2014 "),uj=a("a"),o5o=o("RemBertForMaskedLM"),r5o=o(" (RemBERT model)"),t5o=l(),S1=a("li"),Wie=a("strong"),a5o=o("roberta"),n5o=o(" \u2014 "),_j=a("a"),s5o=o("RobertaForMaskedLM"),l5o=o(" (RoBERTa model)"),i5o=l(),R1=a("li"),Hie=a("strong"),d5o=o("roformer"),c5o=o(" \u2014 "),bj=a("a"),f5o=o("RoFormerForMaskedLM"),m5o=o(" (RoFormer model)"),g5o=l(),B1=a("li"),Uie=a("strong"),h5o=o("squeezebert"),p5o=o(" \u2014 "),vj=a("a"),u5o=o("SqueezeBertForMaskedLM"),_5o=o(" (SqueezeBERT model)"),b5o=l(),P1=a("li"),Jie=a("strong"),v5o=o("tapas"),F5o=o(" \u2014 "),Fj=a("a"),T5o=o("TapasForMaskedLM"),M5o=o(" (TAPAS model)"),E5o=l(),I1=a("li"),Yie=a("strong"),C5o=o("wav2vec2"),w5o=o(" \u2014 "),Kie=a("code"),A5o=o("Wav2Vec2ForMaskedLM"),y5o=o(" (Wav2Vec2 model)"),L5o=l(),q1=a("li"),Zie=a("strong"),x5o=o("xlm"),$5o=o(" \u2014 "),Tj=a("a"),k5o=o("XLMWithLMHeadModel"),S5o=o(" (XLM model)"),R5o=l(),N1=a("li"),ede=a("strong"),B5o=o("xlm-roberta"),P5o=o(" \u2014 "),Mj=a("a"),I5o=o("XLMRobertaForMaskedLM"),q5o=o(" (XLM-RoBERTa model)"),N5o=l(),j1=a("li"),ode=a("strong"),j5o=o("xlm-roberta-xl"),D5o=o(" \u2014 "),Ej=a("a"),G5o=o("XLMRobertaXLForMaskedLM"),O5o=o(" (XLM-RoBERTa-XL model)"),V5o=l(),D1=a("li"),rde=a("strong"),X5o=o("yoso"),z5o=o(" \u2014 "),Cj=a("a"),Q5o=o("YosoForMaskedLM"),W5o=o(" (YOSO model)"),H5o=l(),G1=a("p"),U5o=o("The model is set in evaluation mode by default using "),tde=a("code"),J5o=o("model.eval()"),Y5o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=a("code"),K5o=o("model.train()"),Z5o=l(),F(O1.$$.fragment),LPe=l(),Ri=a("h2"),V1=a("a"),nde=a("span"),F(Bw.$$.fragment),eCo=l(),sde=a("span"),oCo=o("AutoModelForSeq2SeqLM"),xPe=l(),So=a("div"),F(Pw.$$.fragment),rCo=l(),Bi=a("p"),tCo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wj=a("a"),aCo=o("from_pretrained()"),nCo=o(" class method or the "),Aj=a("a"),sCo=o("from_config()"),lCo=o(` class
method.`),iCo=l(),Iw=a("p"),dCo=o("This class cannot be instantiated directly using "),lde=a("code"),cCo=o("__init__()"),fCo=o(" (throws an error)."),mCo=l(),nt=a("div"),F(qw.$$.fragment),gCo=l(),ide=a("p"),hCo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),pCo=l(),Pi=a("p"),uCo=o(`Note:
Loading a model from its configuration file does `),dde=a("strong"),_Co=o("not"),bCo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=a("a"),vCo=o("from_pretrained()"),FCo=o(" to load the model weights."),TCo=l(),F(X1.$$.fragment),MCo=l(),Ke=a("div"),F(Nw.$$.fragment),ECo=l(),cde=a("p"),CCo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),wCo=l(),$a=a("p"),ACo=o("The model class to instantiate is selected based on the "),fde=a("code"),yCo=o("model_type"),LCo=o(` property of the config object (either
passed as an argument or loaded from `),mde=a("code"),xCo=o("pretrained_model_name_or_path"),$Co=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=a("code"),kCo=o("pretrained_model_name_or_path"),SCo=o(":"),RCo=l(),he=a("ul"),z1=a("li"),hde=a("strong"),BCo=o("bart"),PCo=o(" \u2014 "),Lj=a("a"),ICo=o("BartForConditionalGeneration"),qCo=o(" (BART model)"),NCo=l(),Q1=a("li"),pde=a("strong"),jCo=o("bigbird_pegasus"),DCo=o(" \u2014 "),xj=a("a"),GCo=o("BigBirdPegasusForConditionalGeneration"),OCo=o(" (BigBirdPegasus model)"),VCo=l(),W1=a("li"),ude=a("strong"),XCo=o("blenderbot"),zCo=o(" \u2014 "),$j=a("a"),QCo=o("BlenderbotForConditionalGeneration"),WCo=o(" (Blenderbot model)"),HCo=l(),H1=a("li"),_de=a("strong"),UCo=o("blenderbot-small"),JCo=o(" \u2014 "),kj=a("a"),YCo=o("BlenderbotSmallForConditionalGeneration"),KCo=o(" (BlenderbotSmall model)"),ZCo=l(),U1=a("li"),bde=a("strong"),e3o=o("encoder-decoder"),o3o=o(" \u2014 "),Sj=a("a"),r3o=o("EncoderDecoderModel"),t3o=o(" (Encoder decoder model)"),a3o=l(),J1=a("li"),vde=a("strong"),n3o=o("fsmt"),s3o=o(" \u2014 "),Rj=a("a"),l3o=o("FSMTForConditionalGeneration"),i3o=o(" (FairSeq Machine-Translation model)"),d3o=l(),Y1=a("li"),Fde=a("strong"),c3o=o("led"),f3o=o(" \u2014 "),Bj=a("a"),m3o=o("LEDForConditionalGeneration"),g3o=o(" (LED model)"),h3o=l(),K1=a("li"),Tde=a("strong"),p3o=o("m2m_100"),u3o=o(" \u2014 "),Pj=a("a"),_3o=o("M2M100ForConditionalGeneration"),b3o=o(" (M2M100 model)"),v3o=l(),Z1=a("li"),Mde=a("strong"),F3o=o("marian"),T3o=o(" \u2014 "),Ij=a("a"),M3o=o("MarianMTModel"),E3o=o(" (Marian model)"),C3o=l(),eb=a("li"),Ede=a("strong"),w3o=o("mbart"),A3o=o(" \u2014 "),qj=a("a"),y3o=o("MBartForConditionalGeneration"),L3o=o(" (mBART model)"),x3o=l(),ob=a("li"),Cde=a("strong"),$3o=o("mt5"),k3o=o(" \u2014 "),Nj=a("a"),S3o=o("MT5ForConditionalGeneration"),R3o=o(" (mT5 model)"),B3o=l(),rb=a("li"),wde=a("strong"),P3o=o("pegasus"),I3o=o(" \u2014 "),jj=a("a"),q3o=o("PegasusForConditionalGeneration"),N3o=o(" (Pegasus model)"),j3o=l(),tb=a("li"),Ade=a("strong"),D3o=o("plbart"),G3o=o(" \u2014 "),Dj=a("a"),O3o=o("PLBartForConditionalGeneration"),V3o=o(" (PLBart model)"),X3o=l(),ab=a("li"),yde=a("strong"),z3o=o("prophetnet"),Q3o=o(" \u2014 "),Gj=a("a"),W3o=o("ProphetNetForConditionalGeneration"),H3o=o(" (ProphetNet model)"),U3o=l(),nb=a("li"),Lde=a("strong"),J3o=o("t5"),Y3o=o(" \u2014 "),Oj=a("a"),K3o=o("T5ForConditionalGeneration"),Z3o=o(" (T5 model)"),ewo=l(),sb=a("li"),xde=a("strong"),owo=o("tapex"),rwo=o(" \u2014 "),Vj=a("a"),two=o("BartForConditionalGeneration"),awo=o(" (TAPEX model)"),nwo=l(),lb=a("li"),$de=a("strong"),swo=o("xlm-prophetnet"),lwo=o(" \u2014 "),Xj=a("a"),iwo=o("XLMProphetNetForConditionalGeneration"),dwo=o(" (XLMProphetNet model)"),cwo=l(),ib=a("p"),fwo=o("The model is set in evaluation mode by default using "),kde=a("code"),mwo=o("model.eval()"),gwo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=a("code"),hwo=o("model.train()"),pwo=l(),F(db.$$.fragment),$Pe=l(),Ii=a("h2"),cb=a("a"),Rde=a("span"),F(jw.$$.fragment),uwo=l(),Bde=a("span"),_wo=o("AutoModelForSequenceClassification"),kPe=l(),Ro=a("div"),F(Dw.$$.fragment),bwo=l(),qi=a("p"),vwo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zj=a("a"),Fwo=o("from_pretrained()"),Two=o(" class method or the "),Qj=a("a"),Mwo=o("from_config()"),Ewo=o(` class
method.`),Cwo=l(),Gw=a("p"),wwo=o("This class cannot be instantiated directly using "),Pde=a("code"),Awo=o("__init__()"),ywo=o(" (throws an error)."),Lwo=l(),st=a("div"),F(Ow.$$.fragment),xwo=l(),Ide=a("p"),$wo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kwo=l(),Ni=a("p"),Swo=o(`Note:
Loading a model from its configuration file does `),qde=a("strong"),Rwo=o("not"),Bwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=a("a"),Pwo=o("from_pretrained()"),Iwo=o(" to load the model weights."),qwo=l(),F(fb.$$.fragment),Nwo=l(),Ze=a("div"),F(Vw.$$.fragment),jwo=l(),Nde=a("p"),Dwo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Gwo=l(),ka=a("p"),Owo=o("The model class to instantiate is selected based on the "),jde=a("code"),Vwo=o("model_type"),Xwo=o(` property of the config object (either
passed as an argument or loaded from `),Dde=a("code"),zwo=o("pretrained_model_name_or_path"),Qwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=a("code"),Wwo=o("pretrained_model_name_or_path"),Hwo=o(":"),Uwo=l(),q=a("ul"),mb=a("li"),Ode=a("strong"),Jwo=o("albert"),Ywo=o(" \u2014 "),Hj=a("a"),Kwo=o("AlbertForSequenceClassification"),Zwo=o(" (ALBERT model)"),eAo=l(),gb=a("li"),Vde=a("strong"),oAo=o("bart"),rAo=o(" \u2014 "),Uj=a("a"),tAo=o("BartForSequenceClassification"),aAo=o(" (BART model)"),nAo=l(),hb=a("li"),Xde=a("strong"),sAo=o("bert"),lAo=o(" \u2014 "),Jj=a("a"),iAo=o("BertForSequenceClassification"),dAo=o(" (BERT model)"),cAo=l(),pb=a("li"),zde=a("strong"),fAo=o("big_bird"),mAo=o(" \u2014 "),Yj=a("a"),gAo=o("BigBirdForSequenceClassification"),hAo=o(" (BigBird model)"),pAo=l(),ub=a("li"),Qde=a("strong"),uAo=o("bigbird_pegasus"),_Ao=o(" \u2014 "),Kj=a("a"),bAo=o("BigBirdPegasusForSequenceClassification"),vAo=o(" (BigBirdPegasus model)"),FAo=l(),_b=a("li"),Wde=a("strong"),TAo=o("camembert"),MAo=o(" \u2014 "),Zj=a("a"),EAo=o("CamembertForSequenceClassification"),CAo=o(" (CamemBERT model)"),wAo=l(),bb=a("li"),Hde=a("strong"),AAo=o("canine"),yAo=o(" \u2014 "),eD=a("a"),LAo=o("CanineForSequenceClassification"),xAo=o(" (Canine model)"),$Ao=l(),vb=a("li"),Ude=a("strong"),kAo=o("convbert"),SAo=o(" \u2014 "),oD=a("a"),RAo=o("ConvBertForSequenceClassification"),BAo=o(" (ConvBERT model)"),PAo=l(),Fb=a("li"),Jde=a("strong"),IAo=o("ctrl"),qAo=o(" \u2014 "),rD=a("a"),NAo=o("CTRLForSequenceClassification"),jAo=o(" (CTRL model)"),DAo=l(),Tb=a("li"),Yde=a("strong"),GAo=o("data2vec-text"),OAo=o(" \u2014 "),tD=a("a"),VAo=o("Data2VecTextForSequenceClassification"),XAo=o(" (Data2VecText model)"),zAo=l(),Mb=a("li"),Kde=a("strong"),QAo=o("deberta"),WAo=o(" \u2014 "),aD=a("a"),HAo=o("DebertaForSequenceClassification"),UAo=o(" (DeBERTa model)"),JAo=l(),Eb=a("li"),Zde=a("strong"),YAo=o("deberta-v2"),KAo=o(" \u2014 "),nD=a("a"),ZAo=o("DebertaV2ForSequenceClassification"),eyo=o(" (DeBERTa-v2 model)"),oyo=l(),Cb=a("li"),ece=a("strong"),ryo=o("distilbert"),tyo=o(" \u2014 "),sD=a("a"),ayo=o("DistilBertForSequenceClassification"),nyo=o(" (DistilBERT model)"),syo=l(),wb=a("li"),oce=a("strong"),lyo=o("electra"),iyo=o(" \u2014 "),lD=a("a"),dyo=o("ElectraForSequenceClassification"),cyo=o(" (ELECTRA model)"),fyo=l(),Ab=a("li"),rce=a("strong"),myo=o("flaubert"),gyo=o(" \u2014 "),iD=a("a"),hyo=o("FlaubertForSequenceClassification"),pyo=o(" (FlauBERT model)"),uyo=l(),yb=a("li"),tce=a("strong"),_yo=o("fnet"),byo=o(" \u2014 "),dD=a("a"),vyo=o("FNetForSequenceClassification"),Fyo=o(" (FNet model)"),Tyo=l(),Lb=a("li"),ace=a("strong"),Myo=o("funnel"),Eyo=o(" \u2014 "),cD=a("a"),Cyo=o("FunnelForSequenceClassification"),wyo=o(" (Funnel Transformer model)"),Ayo=l(),xb=a("li"),nce=a("strong"),yyo=o("gpt2"),Lyo=o(" \u2014 "),fD=a("a"),xyo=o("GPT2ForSequenceClassification"),$yo=o(" (OpenAI GPT-2 model)"),kyo=l(),$b=a("li"),sce=a("strong"),Syo=o("gpt_neo"),Ryo=o(" \u2014 "),mD=a("a"),Byo=o("GPTNeoForSequenceClassification"),Pyo=o(" (GPT Neo model)"),Iyo=l(),kb=a("li"),lce=a("strong"),qyo=o("gptj"),Nyo=o(" \u2014 "),gD=a("a"),jyo=o("GPTJForSequenceClassification"),Dyo=o(" (GPT-J model)"),Gyo=l(),Sb=a("li"),ice=a("strong"),Oyo=o("ibert"),Vyo=o(" \u2014 "),hD=a("a"),Xyo=o("IBertForSequenceClassification"),zyo=o(" (I-BERT model)"),Qyo=l(),Rb=a("li"),dce=a("strong"),Wyo=o("layoutlm"),Hyo=o(" \u2014 "),pD=a("a"),Uyo=o("LayoutLMForSequenceClassification"),Jyo=o(" (LayoutLM model)"),Yyo=l(),Bb=a("li"),cce=a("strong"),Kyo=o("layoutlmv2"),Zyo=o(" \u2014 "),uD=a("a"),eLo=o("LayoutLMv2ForSequenceClassification"),oLo=o(" (LayoutLMv2 model)"),rLo=l(),Pb=a("li"),fce=a("strong"),tLo=o("led"),aLo=o(" \u2014 "),_D=a("a"),nLo=o("LEDForSequenceClassification"),sLo=o(" (LED model)"),lLo=l(),Ib=a("li"),mce=a("strong"),iLo=o("longformer"),dLo=o(" \u2014 "),bD=a("a"),cLo=o("LongformerForSequenceClassification"),fLo=o(" (Longformer model)"),mLo=l(),qb=a("li"),gce=a("strong"),gLo=o("mbart"),hLo=o(" \u2014 "),vD=a("a"),pLo=o("MBartForSequenceClassification"),uLo=o(" (mBART model)"),_Lo=l(),Nb=a("li"),hce=a("strong"),bLo=o("megatron-bert"),vLo=o(" \u2014 "),FD=a("a"),FLo=o("MegatronBertForSequenceClassification"),TLo=o(" (MegatronBert model)"),MLo=l(),jb=a("li"),pce=a("strong"),ELo=o("mobilebert"),CLo=o(" \u2014 "),TD=a("a"),wLo=o("MobileBertForSequenceClassification"),ALo=o(" (MobileBERT model)"),yLo=l(),Db=a("li"),uce=a("strong"),LLo=o("mpnet"),xLo=o(" \u2014 "),MD=a("a"),$Lo=o("MPNetForSequenceClassification"),kLo=o(" (MPNet model)"),SLo=l(),Gb=a("li"),_ce=a("strong"),RLo=o("nystromformer"),BLo=o(" \u2014 "),ED=a("a"),PLo=o("NystromformerForSequenceClassification"),ILo=o(" (Nystromformer model)"),qLo=l(),Ob=a("li"),bce=a("strong"),NLo=o("openai-gpt"),jLo=o(" \u2014 "),CD=a("a"),DLo=o("OpenAIGPTForSequenceClassification"),GLo=o(" (OpenAI GPT model)"),OLo=l(),Vb=a("li"),vce=a("strong"),VLo=o("perceiver"),XLo=o(" \u2014 "),wD=a("a"),zLo=o("PerceiverForSequenceClassification"),QLo=o(" (Perceiver model)"),WLo=l(),Xb=a("li"),Fce=a("strong"),HLo=o("plbart"),ULo=o(" \u2014 "),AD=a("a"),JLo=o("PLBartForSequenceClassification"),YLo=o(" (PLBart model)"),KLo=l(),zb=a("li"),Tce=a("strong"),ZLo=o("qdqbert"),e8o=o(" \u2014 "),yD=a("a"),o8o=o("QDQBertForSequenceClassification"),r8o=o(" (QDQBert model)"),t8o=l(),Qb=a("li"),Mce=a("strong"),a8o=o("reformer"),n8o=o(" \u2014 "),LD=a("a"),s8o=o("ReformerForSequenceClassification"),l8o=o(" (Reformer model)"),i8o=l(),Wb=a("li"),Ece=a("strong"),d8o=o("rembert"),c8o=o(" \u2014 "),xD=a("a"),f8o=o("RemBertForSequenceClassification"),m8o=o(" (RemBERT model)"),g8o=l(),Hb=a("li"),Cce=a("strong"),h8o=o("roberta"),p8o=o(" \u2014 "),$D=a("a"),u8o=o("RobertaForSequenceClassification"),_8o=o(" (RoBERTa model)"),b8o=l(),Ub=a("li"),wce=a("strong"),v8o=o("roformer"),F8o=o(" \u2014 "),kD=a("a"),T8o=o("RoFormerForSequenceClassification"),M8o=o(" (RoFormer model)"),E8o=l(),Jb=a("li"),Ace=a("strong"),C8o=o("squeezebert"),w8o=o(" \u2014 "),SD=a("a"),A8o=o("SqueezeBertForSequenceClassification"),y8o=o(" (SqueezeBERT model)"),L8o=l(),Yb=a("li"),yce=a("strong"),x8o=o("tapas"),$8o=o(" \u2014 "),RD=a("a"),k8o=o("TapasForSequenceClassification"),S8o=o(" (TAPAS model)"),R8o=l(),Kb=a("li"),Lce=a("strong"),B8o=o("tapex"),P8o=o(" \u2014 "),BD=a("a"),I8o=o("BartForSequenceClassification"),q8o=o(" (TAPEX model)"),N8o=l(),Zb=a("li"),xce=a("strong"),j8o=o("transfo-xl"),D8o=o(" \u2014 "),PD=a("a"),G8o=o("TransfoXLForSequenceClassification"),O8o=o(" (Transformer-XL model)"),V8o=l(),e2=a("li"),$ce=a("strong"),X8o=o("xlm"),z8o=o(" \u2014 "),ID=a("a"),Q8o=o("XLMForSequenceClassification"),W8o=o(" (XLM model)"),H8o=l(),o2=a("li"),kce=a("strong"),U8o=o("xlm-roberta"),J8o=o(" \u2014 "),qD=a("a"),Y8o=o("XLMRobertaForSequenceClassification"),K8o=o(" (XLM-RoBERTa model)"),Z8o=l(),r2=a("li"),Sce=a("strong"),exo=o("xlm-roberta-xl"),oxo=o(" \u2014 "),ND=a("a"),rxo=o("XLMRobertaXLForSequenceClassification"),txo=o(" (XLM-RoBERTa-XL model)"),axo=l(),t2=a("li"),Rce=a("strong"),nxo=o("xlnet"),sxo=o(" \u2014 "),jD=a("a"),lxo=o("XLNetForSequenceClassification"),ixo=o(" (XLNet model)"),dxo=l(),a2=a("li"),Bce=a("strong"),cxo=o("yoso"),fxo=o(" \u2014 "),DD=a("a"),mxo=o("YosoForSequenceClassification"),gxo=o(" (YOSO model)"),hxo=l(),n2=a("p"),pxo=o("The model is set in evaluation mode by default using "),Pce=a("code"),uxo=o("model.eval()"),_xo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=a("code"),bxo=o("model.train()"),vxo=l(),F(s2.$$.fragment),SPe=l(),ji=a("h2"),l2=a("a"),qce=a("span"),F(Xw.$$.fragment),Fxo=l(),Nce=a("span"),Txo=o("AutoModelForMultipleChoice"),RPe=l(),Bo=a("div"),F(zw.$$.fragment),Mxo=l(),Di=a("p"),Exo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GD=a("a"),Cxo=o("from_pretrained()"),wxo=o(" class method or the "),OD=a("a"),Axo=o("from_config()"),yxo=o(` class
method.`),Lxo=l(),Qw=a("p"),xxo=o("This class cannot be instantiated directly using "),jce=a("code"),$xo=o("__init__()"),kxo=o(" (throws an error)."),Sxo=l(),lt=a("div"),F(Ww.$$.fragment),Rxo=l(),Dce=a("p"),Bxo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Pxo=l(),Gi=a("p"),Ixo=o(`Note:
Loading a model from its configuration file does `),Gce=a("strong"),qxo=o("not"),Nxo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=a("a"),jxo=o("from_pretrained()"),Dxo=o(" to load the model weights."),Gxo=l(),F(i2.$$.fragment),Oxo=l(),eo=a("div"),F(Hw.$$.fragment),Vxo=l(),Oce=a("p"),Xxo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zxo=l(),Sa=a("p"),Qxo=o("The model class to instantiate is selected based on the "),Vce=a("code"),Wxo=o("model_type"),Hxo=o(` property of the config object (either
passed as an argument or loaded from `),Xce=a("code"),Uxo=o("pretrained_model_name_or_path"),Jxo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=a("code"),Yxo=o("pretrained_model_name_or_path"),Kxo=o(":"),Zxo=l(),Y=a("ul"),d2=a("li"),Qce=a("strong"),e$o=o("albert"),o$o=o(" \u2014 "),XD=a("a"),r$o=o("AlbertForMultipleChoice"),t$o=o(" (ALBERT model)"),a$o=l(),c2=a("li"),Wce=a("strong"),n$o=o("bert"),s$o=o(" \u2014 "),zD=a("a"),l$o=o("BertForMultipleChoice"),i$o=o(" (BERT model)"),d$o=l(),f2=a("li"),Hce=a("strong"),c$o=o("big_bird"),f$o=o(" \u2014 "),QD=a("a"),m$o=o("BigBirdForMultipleChoice"),g$o=o(" (BigBird model)"),h$o=l(),m2=a("li"),Uce=a("strong"),p$o=o("camembert"),u$o=o(" \u2014 "),WD=a("a"),_$o=o("CamembertForMultipleChoice"),b$o=o(" (CamemBERT model)"),v$o=l(),g2=a("li"),Jce=a("strong"),F$o=o("canine"),T$o=o(" \u2014 "),HD=a("a"),M$o=o("CanineForMultipleChoice"),E$o=o(" (Canine model)"),C$o=l(),h2=a("li"),Yce=a("strong"),w$o=o("convbert"),A$o=o(" \u2014 "),UD=a("a"),y$o=o("ConvBertForMultipleChoice"),L$o=o(" (ConvBERT model)"),x$o=l(),p2=a("li"),Kce=a("strong"),$$o=o("data2vec-text"),k$o=o(" \u2014 "),JD=a("a"),S$o=o("Data2VecTextForMultipleChoice"),R$o=o(" (Data2VecText model)"),B$o=l(),u2=a("li"),Zce=a("strong"),P$o=o("deberta-v2"),I$o=o(" \u2014 "),YD=a("a"),q$o=o("DebertaV2ForMultipleChoice"),N$o=o(" (DeBERTa-v2 model)"),j$o=l(),_2=a("li"),efe=a("strong"),D$o=o("distilbert"),G$o=o(" \u2014 "),KD=a("a"),O$o=o("DistilBertForMultipleChoice"),V$o=o(" (DistilBERT model)"),X$o=l(),b2=a("li"),ofe=a("strong"),z$o=o("electra"),Q$o=o(" \u2014 "),ZD=a("a"),W$o=o("ElectraForMultipleChoice"),H$o=o(" (ELECTRA model)"),U$o=l(),v2=a("li"),rfe=a("strong"),J$o=o("flaubert"),Y$o=o(" \u2014 "),eG=a("a"),K$o=o("FlaubertForMultipleChoice"),Z$o=o(" (FlauBERT model)"),eko=l(),F2=a("li"),tfe=a("strong"),oko=o("fnet"),rko=o(" \u2014 "),oG=a("a"),tko=o("FNetForMultipleChoice"),ako=o(" (FNet model)"),nko=l(),T2=a("li"),afe=a("strong"),sko=o("funnel"),lko=o(" \u2014 "),rG=a("a"),iko=o("FunnelForMultipleChoice"),dko=o(" (Funnel Transformer model)"),cko=l(),M2=a("li"),nfe=a("strong"),fko=o("ibert"),mko=o(" \u2014 "),tG=a("a"),gko=o("IBertForMultipleChoice"),hko=o(" (I-BERT model)"),pko=l(),E2=a("li"),sfe=a("strong"),uko=o("longformer"),_ko=o(" \u2014 "),aG=a("a"),bko=o("LongformerForMultipleChoice"),vko=o(" (Longformer model)"),Fko=l(),C2=a("li"),lfe=a("strong"),Tko=o("megatron-bert"),Mko=o(" \u2014 "),nG=a("a"),Eko=o("MegatronBertForMultipleChoice"),Cko=o(" (MegatronBert model)"),wko=l(),w2=a("li"),ife=a("strong"),Ako=o("mobilebert"),yko=o(" \u2014 "),sG=a("a"),Lko=o("MobileBertForMultipleChoice"),xko=o(" (MobileBERT model)"),$ko=l(),A2=a("li"),dfe=a("strong"),kko=o("mpnet"),Sko=o(" \u2014 "),lG=a("a"),Rko=o("MPNetForMultipleChoice"),Bko=o(" (MPNet model)"),Pko=l(),y2=a("li"),cfe=a("strong"),Iko=o("nystromformer"),qko=o(" \u2014 "),iG=a("a"),Nko=o("NystromformerForMultipleChoice"),jko=o(" (Nystromformer model)"),Dko=l(),L2=a("li"),ffe=a("strong"),Gko=o("qdqbert"),Oko=o(" \u2014 "),dG=a("a"),Vko=o("QDQBertForMultipleChoice"),Xko=o(" (QDQBert model)"),zko=l(),x2=a("li"),mfe=a("strong"),Qko=o("rembert"),Wko=o(" \u2014 "),cG=a("a"),Hko=o("RemBertForMultipleChoice"),Uko=o(" (RemBERT model)"),Jko=l(),$2=a("li"),gfe=a("strong"),Yko=o("roberta"),Kko=o(" \u2014 "),fG=a("a"),Zko=o("RobertaForMultipleChoice"),eSo=o(" (RoBERTa model)"),oSo=l(),k2=a("li"),hfe=a("strong"),rSo=o("roformer"),tSo=o(" \u2014 "),mG=a("a"),aSo=o("RoFormerForMultipleChoice"),nSo=o(" (RoFormer model)"),sSo=l(),S2=a("li"),pfe=a("strong"),lSo=o("squeezebert"),iSo=o(" \u2014 "),gG=a("a"),dSo=o("SqueezeBertForMultipleChoice"),cSo=o(" (SqueezeBERT model)"),fSo=l(),R2=a("li"),ufe=a("strong"),mSo=o("xlm"),gSo=o(" \u2014 "),hG=a("a"),hSo=o("XLMForMultipleChoice"),pSo=o(" (XLM model)"),uSo=l(),B2=a("li"),_fe=a("strong"),_So=o("xlm-roberta"),bSo=o(" \u2014 "),pG=a("a"),vSo=o("XLMRobertaForMultipleChoice"),FSo=o(" (XLM-RoBERTa model)"),TSo=l(),P2=a("li"),bfe=a("strong"),MSo=o("xlm-roberta-xl"),ESo=o(" \u2014 "),uG=a("a"),CSo=o("XLMRobertaXLForMultipleChoice"),wSo=o(" (XLM-RoBERTa-XL model)"),ASo=l(),I2=a("li"),vfe=a("strong"),ySo=o("xlnet"),LSo=o(" \u2014 "),_G=a("a"),xSo=o("XLNetForMultipleChoice"),$So=o(" (XLNet model)"),kSo=l(),q2=a("li"),Ffe=a("strong"),SSo=o("yoso"),RSo=o(" \u2014 "),bG=a("a"),BSo=o("YosoForMultipleChoice"),PSo=o(" (YOSO model)"),ISo=l(),N2=a("p"),qSo=o("The model is set in evaluation mode by default using "),Tfe=a("code"),NSo=o("model.eval()"),jSo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=a("code"),DSo=o("model.train()"),GSo=l(),F(j2.$$.fragment),BPe=l(),Oi=a("h2"),D2=a("a"),Efe=a("span"),F(Uw.$$.fragment),OSo=l(),Cfe=a("span"),VSo=o("AutoModelForNextSentencePrediction"),PPe=l(),Po=a("div"),F(Jw.$$.fragment),XSo=l(),Vi=a("p"),zSo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vG=a("a"),QSo=o("from_pretrained()"),WSo=o(" class method or the "),FG=a("a"),HSo=o("from_config()"),USo=o(` class
method.`),JSo=l(),Yw=a("p"),YSo=o("This class cannot be instantiated directly using "),wfe=a("code"),KSo=o("__init__()"),ZSo=o(" (throws an error)."),eRo=l(),it=a("div"),F(Kw.$$.fragment),oRo=l(),Afe=a("p"),rRo=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),tRo=l(),Xi=a("p"),aRo=o(`Note:
Loading a model from its configuration file does `),yfe=a("strong"),nRo=o("not"),sRo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=a("a"),lRo=o("from_pretrained()"),iRo=o(" to load the model weights."),dRo=l(),F(G2.$$.fragment),cRo=l(),oo=a("div"),F(Zw.$$.fragment),fRo=l(),Lfe=a("p"),mRo=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),gRo=l(),Ra=a("p"),hRo=o("The model class to instantiate is selected based on the "),xfe=a("code"),pRo=o("model_type"),uRo=o(` property of the config object (either
passed as an argument or loaded from `),$fe=a("code"),_Ro=o("pretrained_model_name_or_path"),bRo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=a("code"),vRo=o("pretrained_model_name_or_path"),FRo=o(":"),TRo=l(),Yr=a("ul"),O2=a("li"),Sfe=a("strong"),MRo=o("bert"),ERo=o(" \u2014 "),MG=a("a"),CRo=o("BertForNextSentencePrediction"),wRo=o(" (BERT model)"),ARo=l(),V2=a("li"),Rfe=a("strong"),yRo=o("fnet"),LRo=o(" \u2014 "),EG=a("a"),xRo=o("FNetForNextSentencePrediction"),$Ro=o(" (FNet model)"),kRo=l(),X2=a("li"),Bfe=a("strong"),SRo=o("megatron-bert"),RRo=o(" \u2014 "),CG=a("a"),BRo=o("MegatronBertForNextSentencePrediction"),PRo=o(" (MegatronBert model)"),IRo=l(),z2=a("li"),Pfe=a("strong"),qRo=o("mobilebert"),NRo=o(" \u2014 "),wG=a("a"),jRo=o("MobileBertForNextSentencePrediction"),DRo=o(" (MobileBERT model)"),GRo=l(),Q2=a("li"),Ife=a("strong"),ORo=o("qdqbert"),VRo=o(" \u2014 "),AG=a("a"),XRo=o("QDQBertForNextSentencePrediction"),zRo=o(" (QDQBert model)"),QRo=l(),W2=a("p"),WRo=o("The model is set in evaluation mode by default using "),qfe=a("code"),HRo=o("model.eval()"),URo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=a("code"),JRo=o("model.train()"),YRo=l(),F(H2.$$.fragment),IPe=l(),zi=a("h2"),U2=a("a"),jfe=a("span"),F(eA.$$.fragment),KRo=l(),Dfe=a("span"),ZRo=o("AutoModelForTokenClassification"),qPe=l(),Io=a("div"),F(oA.$$.fragment),eBo=l(),Qi=a("p"),oBo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yG=a("a"),rBo=o("from_pretrained()"),tBo=o(" class method or the "),LG=a("a"),aBo=o("from_config()"),nBo=o(` class
method.`),sBo=l(),rA=a("p"),lBo=o("This class cannot be instantiated directly using "),Gfe=a("code"),iBo=o("__init__()"),dBo=o(" (throws an error)."),cBo=l(),dt=a("div"),F(tA.$$.fragment),fBo=l(),Ofe=a("p"),mBo=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),gBo=l(),Wi=a("p"),hBo=o(`Note:
Loading a model from its configuration file does `),Vfe=a("strong"),pBo=o("not"),uBo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=a("a"),_Bo=o("from_pretrained()"),bBo=o(" to load the model weights."),vBo=l(),F(J2.$$.fragment),FBo=l(),ro=a("div"),F(aA.$$.fragment),TBo=l(),Xfe=a("p"),MBo=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),EBo=l(),Ba=a("p"),CBo=o("The model class to instantiate is selected based on the "),zfe=a("code"),wBo=o("model_type"),ABo=o(` property of the config object (either
passed as an argument or loaded from `),Qfe=a("code"),yBo=o("pretrained_model_name_or_path"),LBo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wfe=a("code"),xBo=o("pretrained_model_name_or_path"),$Bo=o(":"),kBo=l(),U=a("ul"),Y2=a("li"),Hfe=a("strong"),SBo=o("albert"),RBo=o(" \u2014 "),$G=a("a"),BBo=o("AlbertForTokenClassification"),PBo=o(" (ALBERT model)"),IBo=l(),K2=a("li"),Ufe=a("strong"),qBo=o("bert"),NBo=o(" \u2014 "),kG=a("a"),jBo=o("BertForTokenClassification"),DBo=o(" (BERT model)"),GBo=l(),Z2=a("li"),Jfe=a("strong"),OBo=o("big_bird"),VBo=o(" \u2014 "),SG=a("a"),XBo=o("BigBirdForTokenClassification"),zBo=o(" (BigBird model)"),QBo=l(),ev=a("li"),Yfe=a("strong"),WBo=o("camembert"),HBo=o(" \u2014 "),RG=a("a"),UBo=o("CamembertForTokenClassification"),JBo=o(" (CamemBERT model)"),YBo=l(),ov=a("li"),Kfe=a("strong"),KBo=o("canine"),ZBo=o(" \u2014 "),BG=a("a"),ePo=o("CanineForTokenClassification"),oPo=o(" (Canine model)"),rPo=l(),rv=a("li"),Zfe=a("strong"),tPo=o("convbert"),aPo=o(" \u2014 "),PG=a("a"),nPo=o("ConvBertForTokenClassification"),sPo=o(" (ConvBERT model)"),lPo=l(),tv=a("li"),eme=a("strong"),iPo=o("data2vec-text"),dPo=o(" \u2014 "),IG=a("a"),cPo=o("Data2VecTextForTokenClassification"),fPo=o(" (Data2VecText model)"),mPo=l(),av=a("li"),ome=a("strong"),gPo=o("deberta"),hPo=o(" \u2014 "),qG=a("a"),pPo=o("DebertaForTokenClassification"),uPo=o(" (DeBERTa model)"),_Po=l(),nv=a("li"),rme=a("strong"),bPo=o("deberta-v2"),vPo=o(" \u2014 "),NG=a("a"),FPo=o("DebertaV2ForTokenClassification"),TPo=o(" (DeBERTa-v2 model)"),MPo=l(),sv=a("li"),tme=a("strong"),EPo=o("distilbert"),CPo=o(" \u2014 "),jG=a("a"),wPo=o("DistilBertForTokenClassification"),APo=o(" (DistilBERT model)"),yPo=l(),lv=a("li"),ame=a("strong"),LPo=o("electra"),xPo=o(" \u2014 "),DG=a("a"),$Po=o("ElectraForTokenClassification"),kPo=o(" (ELECTRA model)"),SPo=l(),iv=a("li"),nme=a("strong"),RPo=o("flaubert"),BPo=o(" \u2014 "),GG=a("a"),PPo=o("FlaubertForTokenClassification"),IPo=o(" (FlauBERT model)"),qPo=l(),dv=a("li"),sme=a("strong"),NPo=o("fnet"),jPo=o(" \u2014 "),OG=a("a"),DPo=o("FNetForTokenClassification"),GPo=o(" (FNet model)"),OPo=l(),cv=a("li"),lme=a("strong"),VPo=o("funnel"),XPo=o(" \u2014 "),VG=a("a"),zPo=o("FunnelForTokenClassification"),QPo=o(" (Funnel Transformer model)"),WPo=l(),fv=a("li"),ime=a("strong"),HPo=o("gpt2"),UPo=o(" \u2014 "),XG=a("a"),JPo=o("GPT2ForTokenClassification"),YPo=o(" (OpenAI GPT-2 model)"),KPo=l(),mv=a("li"),dme=a("strong"),ZPo=o("ibert"),eIo=o(" \u2014 "),zG=a("a"),oIo=o("IBertForTokenClassification"),rIo=o(" (I-BERT model)"),tIo=l(),gv=a("li"),cme=a("strong"),aIo=o("layoutlm"),nIo=o(" \u2014 "),QG=a("a"),sIo=o("LayoutLMForTokenClassification"),lIo=o(" (LayoutLM model)"),iIo=l(),hv=a("li"),fme=a("strong"),dIo=o("layoutlmv2"),cIo=o(" \u2014 "),WG=a("a"),fIo=o("LayoutLMv2ForTokenClassification"),mIo=o(" (LayoutLMv2 model)"),gIo=l(),pv=a("li"),mme=a("strong"),hIo=o("longformer"),pIo=o(" \u2014 "),HG=a("a"),uIo=o("LongformerForTokenClassification"),_Io=o(" (Longformer model)"),bIo=l(),uv=a("li"),gme=a("strong"),vIo=o("megatron-bert"),FIo=o(" \u2014 "),UG=a("a"),TIo=o("MegatronBertForTokenClassification"),MIo=o(" (MegatronBert model)"),EIo=l(),_v=a("li"),hme=a("strong"),CIo=o("mobilebert"),wIo=o(" \u2014 "),JG=a("a"),AIo=o("MobileBertForTokenClassification"),yIo=o(" (MobileBERT model)"),LIo=l(),bv=a("li"),pme=a("strong"),xIo=o("mpnet"),$Io=o(" \u2014 "),YG=a("a"),kIo=o("MPNetForTokenClassification"),SIo=o(" (MPNet model)"),RIo=l(),vv=a("li"),ume=a("strong"),BIo=o("nystromformer"),PIo=o(" \u2014 "),KG=a("a"),IIo=o("NystromformerForTokenClassification"),qIo=o(" (Nystromformer model)"),NIo=l(),Fv=a("li"),_me=a("strong"),jIo=o("qdqbert"),DIo=o(" \u2014 "),ZG=a("a"),GIo=o("QDQBertForTokenClassification"),OIo=o(" (QDQBert model)"),VIo=l(),Tv=a("li"),bme=a("strong"),XIo=o("rembert"),zIo=o(" \u2014 "),eO=a("a"),QIo=o("RemBertForTokenClassification"),WIo=o(" (RemBERT model)"),HIo=l(),Mv=a("li"),vme=a("strong"),UIo=o("roberta"),JIo=o(" \u2014 "),oO=a("a"),YIo=o("RobertaForTokenClassification"),KIo=o(" (RoBERTa model)"),ZIo=l(),Ev=a("li"),Fme=a("strong"),eqo=o("roformer"),oqo=o(" \u2014 "),rO=a("a"),rqo=o("RoFormerForTokenClassification"),tqo=o(" (RoFormer model)"),aqo=l(),Cv=a("li"),Tme=a("strong"),nqo=o("squeezebert"),sqo=o(" \u2014 "),tO=a("a"),lqo=o("SqueezeBertForTokenClassification"),iqo=o(" (SqueezeBERT model)"),dqo=l(),wv=a("li"),Mme=a("strong"),cqo=o("xlm"),fqo=o(" \u2014 "),aO=a("a"),mqo=o("XLMForTokenClassification"),gqo=o(" (XLM model)"),hqo=l(),Av=a("li"),Eme=a("strong"),pqo=o("xlm-roberta"),uqo=o(" \u2014 "),nO=a("a"),_qo=o("XLMRobertaForTokenClassification"),bqo=o(" (XLM-RoBERTa model)"),vqo=l(),yv=a("li"),Cme=a("strong"),Fqo=o("xlm-roberta-xl"),Tqo=o(" \u2014 "),sO=a("a"),Mqo=o("XLMRobertaXLForTokenClassification"),Eqo=o(" (XLM-RoBERTa-XL model)"),Cqo=l(),Lv=a("li"),wme=a("strong"),wqo=o("xlnet"),Aqo=o(" \u2014 "),lO=a("a"),yqo=o("XLNetForTokenClassification"),Lqo=o(" (XLNet model)"),xqo=l(),xv=a("li"),Ame=a("strong"),$qo=o("yoso"),kqo=o(" \u2014 "),iO=a("a"),Sqo=o("YosoForTokenClassification"),Rqo=o(" (YOSO model)"),Bqo=l(),$v=a("p"),Pqo=o("The model is set in evaluation mode by default using "),yme=a("code"),Iqo=o("model.eval()"),qqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=a("code"),Nqo=o("model.train()"),jqo=l(),F(kv.$$.fragment),NPe=l(),Hi=a("h2"),Sv=a("a"),xme=a("span"),F(nA.$$.fragment),Dqo=l(),$me=a("span"),Gqo=o("AutoModelForQuestionAnswering"),jPe=l(),qo=a("div"),F(sA.$$.fragment),Oqo=l(),Ui=a("p"),Vqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dO=a("a"),Xqo=o("from_pretrained()"),zqo=o(" class method or the "),cO=a("a"),Qqo=o("from_config()"),Wqo=o(` class
method.`),Hqo=l(),lA=a("p"),Uqo=o("This class cannot be instantiated directly using "),kme=a("code"),Jqo=o("__init__()"),Yqo=o(" (throws an error)."),Kqo=l(),ct=a("div"),F(iA.$$.fragment),Zqo=l(),Sme=a("p"),eNo=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),oNo=l(),Ji=a("p"),rNo=o(`Note:
Loading a model from its configuration file does `),Rme=a("strong"),tNo=o("not"),aNo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=a("a"),nNo=o("from_pretrained()"),sNo=o(" to load the model weights."),lNo=l(),F(Rv.$$.fragment),iNo=l(),to=a("div"),F(dA.$$.fragment),dNo=l(),Bme=a("p"),cNo=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),fNo=l(),Pa=a("p"),mNo=o("The model class to instantiate is selected based on the "),Pme=a("code"),gNo=o("model_type"),hNo=o(` property of the config object (either
passed as an argument or loaded from `),Ime=a("code"),pNo=o("pretrained_model_name_or_path"),uNo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=a("code"),_No=o("pretrained_model_name_or_path"),bNo=o(":"),vNo=l(),O=a("ul"),Bv=a("li"),Nme=a("strong"),FNo=o("albert"),TNo=o(" \u2014 "),mO=a("a"),MNo=o("AlbertForQuestionAnswering"),ENo=o(" (ALBERT model)"),CNo=l(),Pv=a("li"),jme=a("strong"),wNo=o("bart"),ANo=o(" \u2014 "),gO=a("a"),yNo=o("BartForQuestionAnswering"),LNo=o(" (BART model)"),xNo=l(),Iv=a("li"),Dme=a("strong"),$No=o("bert"),kNo=o(" \u2014 "),hO=a("a"),SNo=o("BertForQuestionAnswering"),RNo=o(" (BERT model)"),BNo=l(),qv=a("li"),Gme=a("strong"),PNo=o("big_bird"),INo=o(" \u2014 "),pO=a("a"),qNo=o("BigBirdForQuestionAnswering"),NNo=o(" (BigBird model)"),jNo=l(),Nv=a("li"),Ome=a("strong"),DNo=o("bigbird_pegasus"),GNo=o(" \u2014 "),uO=a("a"),ONo=o("BigBirdPegasusForQuestionAnswering"),VNo=o(" (BigBirdPegasus model)"),XNo=l(),jv=a("li"),Vme=a("strong"),zNo=o("camembert"),QNo=o(" \u2014 "),_O=a("a"),WNo=o("CamembertForQuestionAnswering"),HNo=o(" (CamemBERT model)"),UNo=l(),Dv=a("li"),Xme=a("strong"),JNo=o("canine"),YNo=o(" \u2014 "),bO=a("a"),KNo=o("CanineForQuestionAnswering"),ZNo=o(" (Canine model)"),ejo=l(),Gv=a("li"),zme=a("strong"),ojo=o("convbert"),rjo=o(" \u2014 "),vO=a("a"),tjo=o("ConvBertForQuestionAnswering"),ajo=o(" (ConvBERT model)"),njo=l(),Ov=a("li"),Qme=a("strong"),sjo=o("data2vec-text"),ljo=o(" \u2014 "),FO=a("a"),ijo=o("Data2VecTextForQuestionAnswering"),djo=o(" (Data2VecText model)"),cjo=l(),Vv=a("li"),Wme=a("strong"),fjo=o("deberta"),mjo=o(" \u2014 "),TO=a("a"),gjo=o("DebertaForQuestionAnswering"),hjo=o(" (DeBERTa model)"),pjo=l(),Xv=a("li"),Hme=a("strong"),ujo=o("deberta-v2"),_jo=o(" \u2014 "),MO=a("a"),bjo=o("DebertaV2ForQuestionAnswering"),vjo=o(" (DeBERTa-v2 model)"),Fjo=l(),zv=a("li"),Ume=a("strong"),Tjo=o("distilbert"),Mjo=o(" \u2014 "),EO=a("a"),Ejo=o("DistilBertForQuestionAnswering"),Cjo=o(" (DistilBERT model)"),wjo=l(),Qv=a("li"),Jme=a("strong"),Ajo=o("electra"),yjo=o(" \u2014 "),CO=a("a"),Ljo=o("ElectraForQuestionAnswering"),xjo=o(" (ELECTRA model)"),$jo=l(),Wv=a("li"),Yme=a("strong"),kjo=o("flaubert"),Sjo=o(" \u2014 "),wO=a("a"),Rjo=o("FlaubertForQuestionAnsweringSimple"),Bjo=o(" (FlauBERT model)"),Pjo=l(),Hv=a("li"),Kme=a("strong"),Ijo=o("fnet"),qjo=o(" \u2014 "),AO=a("a"),Njo=o("FNetForQuestionAnswering"),jjo=o(" (FNet model)"),Djo=l(),Uv=a("li"),Zme=a("strong"),Gjo=o("funnel"),Ojo=o(" \u2014 "),yO=a("a"),Vjo=o("FunnelForQuestionAnswering"),Xjo=o(" (Funnel Transformer model)"),zjo=l(),Jv=a("li"),ege=a("strong"),Qjo=o("gptj"),Wjo=o(" \u2014 "),LO=a("a"),Hjo=o("GPTJForQuestionAnswering"),Ujo=o(" (GPT-J model)"),Jjo=l(),Yv=a("li"),oge=a("strong"),Yjo=o("ibert"),Kjo=o(" \u2014 "),xO=a("a"),Zjo=o("IBertForQuestionAnswering"),eDo=o(" (I-BERT model)"),oDo=l(),Kv=a("li"),rge=a("strong"),rDo=o("layoutlmv2"),tDo=o(" \u2014 "),$O=a("a"),aDo=o("LayoutLMv2ForQuestionAnswering"),nDo=o(" (LayoutLMv2 model)"),sDo=l(),Zv=a("li"),tge=a("strong"),lDo=o("led"),iDo=o(" \u2014 "),kO=a("a"),dDo=o("LEDForQuestionAnswering"),cDo=o(" (LED model)"),fDo=l(),eF=a("li"),age=a("strong"),mDo=o("longformer"),gDo=o(" \u2014 "),SO=a("a"),hDo=o("LongformerForQuestionAnswering"),pDo=o(" (Longformer model)"),uDo=l(),oF=a("li"),nge=a("strong"),_Do=o("lxmert"),bDo=o(" \u2014 "),RO=a("a"),vDo=o("LxmertForQuestionAnswering"),FDo=o(" (LXMERT model)"),TDo=l(),rF=a("li"),sge=a("strong"),MDo=o("mbart"),EDo=o(" \u2014 "),BO=a("a"),CDo=o("MBartForQuestionAnswering"),wDo=o(" (mBART model)"),ADo=l(),tF=a("li"),lge=a("strong"),yDo=o("megatron-bert"),LDo=o(" \u2014 "),PO=a("a"),xDo=o("MegatronBertForQuestionAnswering"),$Do=o(" (MegatronBert model)"),kDo=l(),aF=a("li"),ige=a("strong"),SDo=o("mobilebert"),RDo=o(" \u2014 "),IO=a("a"),BDo=o("MobileBertForQuestionAnswering"),PDo=o(" (MobileBERT model)"),IDo=l(),nF=a("li"),dge=a("strong"),qDo=o("mpnet"),NDo=o(" \u2014 "),qO=a("a"),jDo=o("MPNetForQuestionAnswering"),DDo=o(" (MPNet model)"),GDo=l(),sF=a("li"),cge=a("strong"),ODo=o("nystromformer"),VDo=o(" \u2014 "),NO=a("a"),XDo=o("NystromformerForQuestionAnswering"),zDo=o(" (Nystromformer model)"),QDo=l(),lF=a("li"),fge=a("strong"),WDo=o("qdqbert"),HDo=o(" \u2014 "),jO=a("a"),UDo=o("QDQBertForQuestionAnswering"),JDo=o(" (QDQBert model)"),YDo=l(),iF=a("li"),mge=a("strong"),KDo=o("reformer"),ZDo=o(" \u2014 "),DO=a("a"),eGo=o("ReformerForQuestionAnswering"),oGo=o(" (Reformer model)"),rGo=l(),dF=a("li"),gge=a("strong"),tGo=o("rembert"),aGo=o(" \u2014 "),GO=a("a"),nGo=o("RemBertForQuestionAnswering"),sGo=o(" (RemBERT model)"),lGo=l(),cF=a("li"),hge=a("strong"),iGo=o("roberta"),dGo=o(" \u2014 "),OO=a("a"),cGo=o("RobertaForQuestionAnswering"),fGo=o(" (RoBERTa model)"),mGo=l(),fF=a("li"),pge=a("strong"),gGo=o("roformer"),hGo=o(" \u2014 "),VO=a("a"),pGo=o("RoFormerForQuestionAnswering"),uGo=o(" (RoFormer model)"),_Go=l(),mF=a("li"),uge=a("strong"),bGo=o("splinter"),vGo=o(" \u2014 "),XO=a("a"),FGo=o("SplinterForQuestionAnswering"),TGo=o(" (Splinter model)"),MGo=l(),gF=a("li"),_ge=a("strong"),EGo=o("squeezebert"),CGo=o(" \u2014 "),zO=a("a"),wGo=o("SqueezeBertForQuestionAnswering"),AGo=o(" (SqueezeBERT model)"),yGo=l(),hF=a("li"),bge=a("strong"),LGo=o("xlm"),xGo=o(" \u2014 "),QO=a("a"),$Go=o("XLMForQuestionAnsweringSimple"),kGo=o(" (XLM model)"),SGo=l(),pF=a("li"),vge=a("strong"),RGo=o("xlm-roberta"),BGo=o(" \u2014 "),WO=a("a"),PGo=o("XLMRobertaForQuestionAnswering"),IGo=o(" (XLM-RoBERTa model)"),qGo=l(),uF=a("li"),Fge=a("strong"),NGo=o("xlm-roberta-xl"),jGo=o(" \u2014 "),HO=a("a"),DGo=o("XLMRobertaXLForQuestionAnswering"),GGo=o(" (XLM-RoBERTa-XL model)"),OGo=l(),_F=a("li"),Tge=a("strong"),VGo=o("xlnet"),XGo=o(" \u2014 "),UO=a("a"),zGo=o("XLNetForQuestionAnsweringSimple"),QGo=o(" (XLNet model)"),WGo=l(),bF=a("li"),Mge=a("strong"),HGo=o("yoso"),UGo=o(" \u2014 "),JO=a("a"),JGo=o("YosoForQuestionAnswering"),YGo=o(" (YOSO model)"),KGo=l(),vF=a("p"),ZGo=o("The model is set in evaluation mode by default using "),Ege=a("code"),eOo=o("model.eval()"),oOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=a("code"),rOo=o("model.train()"),tOo=l(),F(FF.$$.fragment),DPe=l(),Yi=a("h2"),TF=a("a"),wge=a("span"),F(cA.$$.fragment),aOo=l(),Age=a("span"),nOo=o("AutoModelForTableQuestionAnswering"),GPe=l(),No=a("div"),F(fA.$$.fragment),sOo=l(),Ki=a("p"),lOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YO=a("a"),iOo=o("from_pretrained()"),dOo=o(" class method or the "),KO=a("a"),cOo=o("from_config()"),fOo=o(` class
method.`),mOo=l(),mA=a("p"),gOo=o("This class cannot be instantiated directly using "),yge=a("code"),hOo=o("__init__()"),pOo=o(" (throws an error)."),uOo=l(),ft=a("div"),F(gA.$$.fragment),_Oo=l(),Lge=a("p"),bOo=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),vOo=l(),Zi=a("p"),FOo=o(`Note:
Loading a model from its configuration file does `),xge=a("strong"),TOo=o("not"),MOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=a("a"),EOo=o("from_pretrained()"),COo=o(" to load the model weights."),wOo=l(),F(MF.$$.fragment),AOo=l(),ao=a("div"),F(hA.$$.fragment),yOo=l(),$ge=a("p"),LOo=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),xOo=l(),Ia=a("p"),$Oo=o("The model class to instantiate is selected based on the "),kge=a("code"),kOo=o("model_type"),SOo=o(` property of the config object (either
passed as an argument or loaded from `),Sge=a("code"),ROo=o("pretrained_model_name_or_path"),BOo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=a("code"),POo=o("pretrained_model_name_or_path"),IOo=o(":"),qOo=l(),Bge=a("ul"),EF=a("li"),Pge=a("strong"),NOo=o("tapas"),jOo=o(" \u2014 "),eV=a("a"),DOo=o("TapasForQuestionAnswering"),GOo=o(" (TAPAS model)"),OOo=l(),CF=a("p"),VOo=o("The model is set in evaluation mode by default using "),Ige=a("code"),XOo=o("model.eval()"),zOo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=a("code"),QOo=o("model.train()"),WOo=l(),F(wF.$$.fragment),OPe=l(),ed=a("h2"),AF=a("a"),Nge=a("span"),F(pA.$$.fragment),HOo=l(),jge=a("span"),UOo=o("AutoModelForImageClassification"),VPe=l(),jo=a("div"),F(uA.$$.fragment),JOo=l(),od=a("p"),YOo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oV=a("a"),KOo=o("from_pretrained()"),ZOo=o(" class method or the "),rV=a("a"),eVo=o("from_config()"),oVo=o(` class
method.`),rVo=l(),_A=a("p"),tVo=o("This class cannot be instantiated directly using "),Dge=a("code"),aVo=o("__init__()"),nVo=o(" (throws an error)."),sVo=l(),mt=a("div"),F(bA.$$.fragment),lVo=l(),Gge=a("p"),iVo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),dVo=l(),rd=a("p"),cVo=o(`Note:
Loading a model from its configuration file does `),Oge=a("strong"),fVo=o("not"),mVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=a("a"),gVo=o("from_pretrained()"),hVo=o(" to load the model weights."),pVo=l(),F(yF.$$.fragment),uVo=l(),no=a("div"),F(vA.$$.fragment),_Vo=l(),Vge=a("p"),bVo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),vVo=l(),qa=a("p"),FVo=o("The model class to instantiate is selected based on the "),Xge=a("code"),TVo=o("model_type"),MVo=o(` property of the config object (either
passed as an argument or loaded from `),zge=a("code"),EVo=o("pretrained_model_name_or_path"),CVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),wVo=o("pretrained_model_name_or_path"),AVo=o(":"),yVo=l(),ve=a("ul"),LF=a("li"),Wge=a("strong"),LVo=o("beit"),xVo=o(" \u2014 "),aV=a("a"),$Vo=o("BeitForImageClassification"),kVo=o(" (BEiT model)"),SVo=l(),xF=a("li"),Hge=a("strong"),RVo=o("convnext"),BVo=o(" \u2014 "),nV=a("a"),PVo=o("ConvNextForImageClassification"),IVo=o(" (ConvNext model)"),qVo=l(),$F=a("li"),Uge=a("strong"),NVo=o("data2vec-vision"),jVo=o(" \u2014 "),sV=a("a"),DVo=o("Data2VecVisionForImageClassification"),GVo=o(" (Data2VecVision model)"),OVo=l(),Rs=a("li"),Jge=a("strong"),VVo=o("deit"),XVo=o(" \u2014 "),lV=a("a"),zVo=o("DeiTForImageClassification"),QVo=o(" or "),iV=a("a"),WVo=o("DeiTForImageClassificationWithTeacher"),HVo=o(" (DeiT model)"),UVo=l(),kF=a("li"),Yge=a("strong"),JVo=o("imagegpt"),YVo=o(" \u2014 "),dV=a("a"),KVo=o("ImageGPTForImageClassification"),ZVo=o(" (ImageGPT model)"),eXo=l(),gt=a("li"),Kge=a("strong"),oXo=o("perceiver"),rXo=o(" \u2014 "),cV=a("a"),tXo=o("PerceiverForImageClassificationLearned"),aXo=o(" or "),fV=a("a"),nXo=o("PerceiverForImageClassificationFourier"),sXo=o(" or "),mV=a("a"),lXo=o("PerceiverForImageClassificationConvProcessing"),iXo=o(" (Perceiver model)"),dXo=l(),SF=a("li"),Zge=a("strong"),cXo=o("poolformer"),fXo=o(" \u2014 "),gV=a("a"),mXo=o("PoolFormerForImageClassification"),gXo=o(" (PoolFormer model)"),hXo=l(),RF=a("li"),ehe=a("strong"),pXo=o("regnet"),uXo=o(" \u2014 "),hV=a("a"),_Xo=o("RegNetForImageClassification"),bXo=o(" (RegNet model)"),vXo=l(),BF=a("li"),ohe=a("strong"),FXo=o("resnet"),TXo=o(" \u2014 "),pV=a("a"),MXo=o("ResNetForImageClassification"),EXo=o(" (ResNet model)"),CXo=l(),PF=a("li"),rhe=a("strong"),wXo=o("segformer"),AXo=o(" \u2014 "),uV=a("a"),yXo=o("SegformerForImageClassification"),LXo=o(" (SegFormer model)"),xXo=l(),IF=a("li"),the=a("strong"),$Xo=o("swin"),kXo=o(" \u2014 "),_V=a("a"),SXo=o("SwinForImageClassification"),RXo=o(" (Swin model)"),BXo=l(),qF=a("li"),ahe=a("strong"),PXo=o("van"),IXo=o(" \u2014 "),bV=a("a"),qXo=o("VanForImageClassification"),NXo=o(" (VAN model)"),jXo=l(),NF=a("li"),nhe=a("strong"),DXo=o("vit"),GXo=o(" \u2014 "),vV=a("a"),OXo=o("ViTForImageClassification"),VXo=o(" (ViT model)"),XXo=l(),jF=a("p"),zXo=o("The model is set in evaluation mode by default using "),she=a("code"),QXo=o("model.eval()"),WXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=a("code"),HXo=o("model.train()"),UXo=l(),F(DF.$$.fragment),XPe=l(),td=a("h2"),GF=a("a"),ihe=a("span"),F(FA.$$.fragment),JXo=l(),dhe=a("span"),YXo=o("AutoModelForVision2Seq"),zPe=l(),Do=a("div"),F(TA.$$.fragment),KXo=l(),ad=a("p"),ZXo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FV=a("a"),ezo=o("from_pretrained()"),ozo=o(" class method or the "),TV=a("a"),rzo=o("from_config()"),tzo=o(` class
method.`),azo=l(),MA=a("p"),nzo=o("This class cannot be instantiated directly using "),che=a("code"),szo=o("__init__()"),lzo=o(" (throws an error)."),izo=l(),ht=a("div"),F(EA.$$.fragment),dzo=l(),fhe=a("p"),czo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),fzo=l(),nd=a("p"),mzo=o(`Note:
Loading a model from its configuration file does `),mhe=a("strong"),gzo=o("not"),hzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=a("a"),pzo=o("from_pretrained()"),uzo=o(" to load the model weights."),_zo=l(),F(OF.$$.fragment),bzo=l(),so=a("div"),F(CA.$$.fragment),vzo=l(),ghe=a("p"),Fzo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Tzo=l(),Na=a("p"),Mzo=o("The model class to instantiate is selected based on the "),hhe=a("code"),Ezo=o("model_type"),Czo=o(` property of the config object (either
passed as an argument or loaded from `),phe=a("code"),wzo=o("pretrained_model_name_or_path"),Azo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=a("code"),yzo=o("pretrained_model_name_or_path"),Lzo=o(":"),xzo=l(),_he=a("ul"),VF=a("li"),bhe=a("strong"),$zo=o("vision-encoder-decoder"),kzo=o(" \u2014 "),EV=a("a"),Szo=o("VisionEncoderDecoderModel"),Rzo=o(" (Vision Encoder decoder model)"),Bzo=l(),XF=a("p"),Pzo=o("The model is set in evaluation mode by default using "),vhe=a("code"),Izo=o("model.eval()"),qzo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=a("code"),Nzo=o("model.train()"),jzo=l(),F(zF.$$.fragment),QPe=l(),sd=a("h2"),QF=a("a"),The=a("span"),F(wA.$$.fragment),Dzo=l(),Mhe=a("span"),Gzo=o("AutoModelForAudioClassification"),WPe=l(),Go=a("div"),F(AA.$$.fragment),Ozo=l(),ld=a("p"),Vzo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CV=a("a"),Xzo=o("from_pretrained()"),zzo=o(" class method or the "),wV=a("a"),Qzo=o("from_config()"),Wzo=o(` class
method.`),Hzo=l(),yA=a("p"),Uzo=o("This class cannot be instantiated directly using "),Ehe=a("code"),Jzo=o("__init__()"),Yzo=o(" (throws an error)."),Kzo=l(),pt=a("div"),F(LA.$$.fragment),Zzo=l(),Che=a("p"),eQo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),oQo=l(),id=a("p"),rQo=o(`Note:
Loading a model from its configuration file does `),whe=a("strong"),tQo=o("not"),aQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=a("a"),nQo=o("from_pretrained()"),sQo=o(" to load the model weights."),lQo=l(),F(WF.$$.fragment),iQo=l(),lo=a("div"),F(xA.$$.fragment),dQo=l(),Ahe=a("p"),cQo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),fQo=l(),ja=a("p"),mQo=o("The model class to instantiate is selected based on the "),yhe=a("code"),gQo=o("model_type"),hQo=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),pQo=o("pretrained_model_name_or_path"),uQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=a("code"),_Qo=o("pretrained_model_name_or_path"),bQo=o(":"),vQo=l(),Ne=a("ul"),HF=a("li"),$he=a("strong"),FQo=o("data2vec-audio"),TQo=o(" \u2014 "),yV=a("a"),MQo=o("Data2VecAudioForSequenceClassification"),EQo=o(" (Data2VecAudio model)"),CQo=l(),UF=a("li"),khe=a("strong"),wQo=o("hubert"),AQo=o(" \u2014 "),LV=a("a"),yQo=o("HubertForSequenceClassification"),LQo=o(" (Hubert model)"),xQo=l(),JF=a("li"),She=a("strong"),$Qo=o("sew"),kQo=o(" \u2014 "),xV=a("a"),SQo=o("SEWForSequenceClassification"),RQo=o(" (SEW model)"),BQo=l(),YF=a("li"),Rhe=a("strong"),PQo=o("sew-d"),IQo=o(" \u2014 "),$V=a("a"),qQo=o("SEWDForSequenceClassification"),NQo=o(" (SEW-D model)"),jQo=l(),KF=a("li"),Bhe=a("strong"),DQo=o("unispeech"),GQo=o(" \u2014 "),kV=a("a"),OQo=o("UniSpeechForSequenceClassification"),VQo=o(" (UniSpeech model)"),XQo=l(),ZF=a("li"),Phe=a("strong"),zQo=o("unispeech-sat"),QQo=o(" \u2014 "),SV=a("a"),WQo=o("UniSpeechSatForSequenceClassification"),HQo=o(" (UniSpeechSat model)"),UQo=l(),e0=a("li"),Ihe=a("strong"),JQo=o("wav2vec2"),YQo=o(" \u2014 "),RV=a("a"),KQo=o("Wav2Vec2ForSequenceClassification"),ZQo=o(" (Wav2Vec2 model)"),eWo=l(),o0=a("li"),qhe=a("strong"),oWo=o("wavlm"),rWo=o(" \u2014 "),BV=a("a"),tWo=o("WavLMForSequenceClassification"),aWo=o(" (WavLM model)"),nWo=l(),r0=a("p"),sWo=o("The model is set in evaluation mode by default using "),Nhe=a("code"),lWo=o("model.eval()"),iWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=a("code"),dWo=o("model.train()"),cWo=l(),F(t0.$$.fragment),HPe=l(),dd=a("h2"),a0=a("a"),Dhe=a("span"),F($A.$$.fragment),fWo=l(),Ghe=a("span"),mWo=o("AutoModelForAudioFrameClassification"),UPe=l(),Oo=a("div"),F(kA.$$.fragment),gWo=l(),cd=a("p"),hWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),PV=a("a"),pWo=o("from_pretrained()"),uWo=o(" class method or the "),IV=a("a"),_Wo=o("from_config()"),bWo=o(` class
method.`),vWo=l(),SA=a("p"),FWo=o("This class cannot be instantiated directly using "),Ohe=a("code"),TWo=o("__init__()"),MWo=o(" (throws an error)."),EWo=l(),ut=a("div"),F(RA.$$.fragment),CWo=l(),Vhe=a("p"),wWo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),AWo=l(),fd=a("p"),yWo=o(`Note:
Loading a model from its configuration file does `),Xhe=a("strong"),LWo=o("not"),xWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=a("a"),$Wo=o("from_pretrained()"),kWo=o(" to load the model weights."),SWo=l(),F(n0.$$.fragment),RWo=l(),io=a("div"),F(BA.$$.fragment),BWo=l(),zhe=a("p"),PWo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),IWo=l(),Da=a("p"),qWo=o("The model class to instantiate is selected based on the "),Qhe=a("code"),NWo=o("model_type"),jWo=o(` property of the config object (either
passed as an argument or loaded from `),Whe=a("code"),DWo=o("pretrained_model_name_or_path"),GWo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=a("code"),OWo=o("pretrained_model_name_or_path"),VWo=o(":"),XWo=l(),Ga=a("ul"),s0=a("li"),Uhe=a("strong"),zWo=o("data2vec-audio"),QWo=o(" \u2014 "),NV=a("a"),WWo=o("Data2VecAudioForAudioFrameClassification"),HWo=o(" (Data2VecAudio model)"),UWo=l(),l0=a("li"),Jhe=a("strong"),JWo=o("unispeech-sat"),YWo=o(" \u2014 "),jV=a("a"),KWo=o("UniSpeechSatForAudioFrameClassification"),ZWo=o(" (UniSpeechSat model)"),eHo=l(),i0=a("li"),Yhe=a("strong"),oHo=o("wav2vec2"),rHo=o(" \u2014 "),DV=a("a"),tHo=o("Wav2Vec2ForAudioFrameClassification"),aHo=o(" (Wav2Vec2 model)"),nHo=l(),d0=a("li"),Khe=a("strong"),sHo=o("wavlm"),lHo=o(" \u2014 "),GV=a("a"),iHo=o("WavLMForAudioFrameClassification"),dHo=o(" (WavLM model)"),cHo=l(),c0=a("p"),fHo=o("The model is set in evaluation mode by default using "),Zhe=a("code"),mHo=o("model.eval()"),gHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=a("code"),hHo=o("model.train()"),pHo=l(),F(f0.$$.fragment),JPe=l(),md=a("h2"),m0=a("a"),ope=a("span"),F(PA.$$.fragment),uHo=l(),rpe=a("span"),_Ho=o("AutoModelForCTC"),YPe=l(),Vo=a("div"),F(IA.$$.fragment),bHo=l(),gd=a("p"),vHo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),OV=a("a"),FHo=o("from_pretrained()"),THo=o(" class method or the "),VV=a("a"),MHo=o("from_config()"),EHo=o(` class
method.`),CHo=l(),qA=a("p"),wHo=o("This class cannot be instantiated directly using "),tpe=a("code"),AHo=o("__init__()"),yHo=o(" (throws an error)."),LHo=l(),_t=a("div"),F(NA.$$.fragment),xHo=l(),ape=a("p"),$Ho=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),kHo=l(),hd=a("p"),SHo=o(`Note:
Loading a model from its configuration file does `),npe=a("strong"),RHo=o("not"),BHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=a("a"),PHo=o("from_pretrained()"),IHo=o(" to load the model weights."),qHo=l(),F(g0.$$.fragment),NHo=l(),co=a("div"),F(jA.$$.fragment),jHo=l(),spe=a("p"),DHo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),GHo=l(),Oa=a("p"),OHo=o("The model class to instantiate is selected based on the "),lpe=a("code"),VHo=o("model_type"),XHo=o(` property of the config object (either
passed as an argument or loaded from `),ipe=a("code"),zHo=o("pretrained_model_name_or_path"),QHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=a("code"),WHo=o("pretrained_model_name_or_path"),HHo=o(":"),UHo=l(),je=a("ul"),h0=a("li"),cpe=a("strong"),JHo=o("data2vec-audio"),YHo=o(" \u2014 "),zV=a("a"),KHo=o("Data2VecAudioForCTC"),ZHo=o(" (Data2VecAudio model)"),eUo=l(),p0=a("li"),fpe=a("strong"),oUo=o("hubert"),rUo=o(" \u2014 "),QV=a("a"),tUo=o("HubertForCTC"),aUo=o(" (Hubert model)"),nUo=l(),u0=a("li"),mpe=a("strong"),sUo=o("sew"),lUo=o(" \u2014 "),WV=a("a"),iUo=o("SEWForCTC"),dUo=o(" (SEW model)"),cUo=l(),_0=a("li"),gpe=a("strong"),fUo=o("sew-d"),mUo=o(" \u2014 "),HV=a("a"),gUo=o("SEWDForCTC"),hUo=o(" (SEW-D model)"),pUo=l(),b0=a("li"),hpe=a("strong"),uUo=o("unispeech"),_Uo=o(" \u2014 "),UV=a("a"),bUo=o("UniSpeechForCTC"),vUo=o(" (UniSpeech model)"),FUo=l(),v0=a("li"),ppe=a("strong"),TUo=o("unispeech-sat"),MUo=o(" \u2014 "),JV=a("a"),EUo=o("UniSpeechSatForCTC"),CUo=o(" (UniSpeechSat model)"),wUo=l(),F0=a("li"),upe=a("strong"),AUo=o("wav2vec2"),yUo=o(" \u2014 "),YV=a("a"),LUo=o("Wav2Vec2ForCTC"),xUo=o(" (Wav2Vec2 model)"),$Uo=l(),T0=a("li"),_pe=a("strong"),kUo=o("wavlm"),SUo=o(" \u2014 "),KV=a("a"),RUo=o("WavLMForCTC"),BUo=o(" (WavLM model)"),PUo=l(),M0=a("p"),IUo=o("The model is set in evaluation mode by default using "),bpe=a("code"),qUo=o("model.eval()"),NUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=a("code"),jUo=o("model.train()"),DUo=l(),F(E0.$$.fragment),KPe=l(),pd=a("h2"),C0=a("a"),Fpe=a("span"),F(DA.$$.fragment),GUo=l(),Tpe=a("span"),OUo=o("AutoModelForSpeechSeq2Seq"),ZPe=l(),Xo=a("div"),F(GA.$$.fragment),VUo=l(),ud=a("p"),XUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZV=a("a"),zUo=o("from_pretrained()"),QUo=o(" class method or the "),eX=a("a"),WUo=o("from_config()"),HUo=o(` class
method.`),UUo=l(),OA=a("p"),JUo=o("This class cannot be instantiated directly using "),Mpe=a("code"),YUo=o("__init__()"),KUo=o(" (throws an error)."),ZUo=l(),bt=a("div"),F(VA.$$.fragment),eJo=l(),Epe=a("p"),oJo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),rJo=l(),_d=a("p"),tJo=o(`Note:
Loading a model from its configuration file does `),Cpe=a("strong"),aJo=o("not"),nJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=a("a"),sJo=o("from_pretrained()"),lJo=o(" to load the model weights."),iJo=l(),F(w0.$$.fragment),dJo=l(),fo=a("div"),F(XA.$$.fragment),cJo=l(),wpe=a("p"),fJo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mJo=l(),Va=a("p"),gJo=o("The model class to instantiate is selected based on the "),Ape=a("code"),hJo=o("model_type"),pJo=o(` property of the config object (either
passed as an argument or loaded from `),ype=a("code"),uJo=o("pretrained_model_name_or_path"),_Jo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=a("code"),bJo=o("pretrained_model_name_or_path"),vJo=o(":"),FJo=l(),zA=a("ul"),A0=a("li"),xpe=a("strong"),TJo=o("speech-encoder-decoder"),MJo=o(" \u2014 "),rX=a("a"),EJo=o("SpeechEncoderDecoderModel"),CJo=o(" (Speech Encoder decoder model)"),wJo=l(),y0=a("li"),$pe=a("strong"),AJo=o("speech_to_text"),yJo=o(" \u2014 "),tX=a("a"),LJo=o("Speech2TextForConditionalGeneration"),xJo=o(" (Speech2Text model)"),$Jo=l(),L0=a("p"),kJo=o("The model is set in evaluation mode by default using "),kpe=a("code"),SJo=o("model.eval()"),RJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=a("code"),BJo=o("model.train()"),PJo=l(),F(x0.$$.fragment),eIe=l(),bd=a("h2"),$0=a("a"),Rpe=a("span"),F(QA.$$.fragment),IJo=l(),Bpe=a("span"),qJo=o("AutoModelForAudioXVector"),oIe=l(),zo=a("div"),F(WA.$$.fragment),NJo=l(),vd=a("p"),jJo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aX=a("a"),DJo=o("from_pretrained()"),GJo=o(" class method or the "),nX=a("a"),OJo=o("from_config()"),VJo=o(` class
method.`),XJo=l(),HA=a("p"),zJo=o("This class cannot be instantiated directly using "),Ppe=a("code"),QJo=o("__init__()"),WJo=o(" (throws an error)."),HJo=l(),vt=a("div"),F(UA.$$.fragment),UJo=l(),Ipe=a("p"),JJo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),YJo=l(),Fd=a("p"),KJo=o(`Note:
Loading a model from its configuration file does `),qpe=a("strong"),ZJo=o("not"),eYo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=a("a"),oYo=o("from_pretrained()"),rYo=o(" to load the model weights."),tYo=l(),F(k0.$$.fragment),aYo=l(),mo=a("div"),F(JA.$$.fragment),nYo=l(),Npe=a("p"),sYo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),lYo=l(),Xa=a("p"),iYo=o("The model class to instantiate is selected based on the "),jpe=a("code"),dYo=o("model_type"),cYo=o(` property of the config object (either
passed as an argument or loaded from `),Dpe=a("code"),fYo=o("pretrained_model_name_or_path"),mYo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=a("code"),gYo=o("pretrained_model_name_or_path"),hYo=o(":"),pYo=l(),za=a("ul"),S0=a("li"),Ope=a("strong"),uYo=o("data2vec-audio"),_Yo=o(" \u2014 "),lX=a("a"),bYo=o("Data2VecAudioForXVector"),vYo=o(" (Data2VecAudio model)"),FYo=l(),R0=a("li"),Vpe=a("strong"),TYo=o("unispeech-sat"),MYo=o(" \u2014 "),iX=a("a"),EYo=o("UniSpeechSatForXVector"),CYo=o(" (UniSpeechSat model)"),wYo=l(),B0=a("li"),Xpe=a("strong"),AYo=o("wav2vec2"),yYo=o(" \u2014 "),dX=a("a"),LYo=o("Wav2Vec2ForXVector"),xYo=o(" (Wav2Vec2 model)"),$Yo=l(),P0=a("li"),zpe=a("strong"),kYo=o("wavlm"),SYo=o(" \u2014 "),cX=a("a"),RYo=o("WavLMForXVector"),BYo=o(" (WavLM model)"),PYo=l(),I0=a("p"),IYo=o("The model is set in evaluation mode by default using "),Qpe=a("code"),qYo=o("model.eval()"),NYo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=a("code"),jYo=o("model.train()"),DYo=l(),F(q0.$$.fragment),rIe=l(),Td=a("h2"),N0=a("a"),Hpe=a("span"),F(YA.$$.fragment),GYo=l(),Upe=a("span"),OYo=o("AutoModelForMaskedImageModeling"),tIe=l(),Qo=a("div"),F(KA.$$.fragment),VYo=l(),Md=a("p"),XYo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fX=a("a"),zYo=o("from_pretrained()"),QYo=o(" class method or the "),mX=a("a"),WYo=o("from_config()"),HYo=o(` class
method.`),UYo=l(),ZA=a("p"),JYo=o("This class cannot be instantiated directly using "),Jpe=a("code"),YYo=o("__init__()"),KYo=o(" (throws an error)."),ZYo=l(),Ft=a("div"),F(ey.$$.fragment),eKo=l(),Ype=a("p"),oKo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),rKo=l(),Ed=a("p"),tKo=o(`Note:
Loading a model from its configuration file does `),Kpe=a("strong"),aKo=o("not"),nKo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=a("a"),sKo=o("from_pretrained()"),lKo=o(" to load the model weights."),iKo=l(),F(j0.$$.fragment),dKo=l(),go=a("div"),F(oy.$$.fragment),cKo=l(),Zpe=a("p"),fKo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),mKo=l(),Qa=a("p"),gKo=o("The model class to instantiate is selected based on the "),eue=a("code"),hKo=o("model_type"),pKo=o(` property of the config object (either
passed as an argument or loaded from `),oue=a("code"),uKo=o("pretrained_model_name_or_path"),_Ko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=a("code"),bKo=o("pretrained_model_name_or_path"),vKo=o(":"),FKo=l(),Cd=a("ul"),D0=a("li"),tue=a("strong"),TKo=o("deit"),MKo=o(" \u2014 "),hX=a("a"),EKo=o("DeiTForMaskedImageModeling"),CKo=o(" (DeiT model)"),wKo=l(),G0=a("li"),aue=a("strong"),AKo=o("swin"),yKo=o(" \u2014 "),pX=a("a"),LKo=o("SwinForMaskedImageModeling"),xKo=o(" (Swin model)"),$Ko=l(),O0=a("li"),nue=a("strong"),kKo=o("vit"),SKo=o(" \u2014 "),uX=a("a"),RKo=o("ViTForMaskedImageModeling"),BKo=o(" (ViT model)"),PKo=l(),V0=a("p"),IKo=o("The model is set in evaluation mode by default using "),sue=a("code"),qKo=o("model.eval()"),NKo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=a("code"),jKo=o("model.train()"),DKo=l(),F(X0.$$.fragment),aIe=l(),wd=a("h2"),z0=a("a"),iue=a("span"),F(ry.$$.fragment),GKo=l(),due=a("span"),OKo=o("AutoModelForObjectDetection"),nIe=l(),Wo=a("div"),F(ty.$$.fragment),VKo=l(),Ad=a("p"),XKo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_X=a("a"),zKo=o("from_pretrained()"),QKo=o(" class method or the "),bX=a("a"),WKo=o("from_config()"),HKo=o(` class
method.`),UKo=l(),ay=a("p"),JKo=o("This class cannot be instantiated directly using "),cue=a("code"),YKo=o("__init__()"),KKo=o(" (throws an error)."),ZKo=l(),Tt=a("div"),F(ny.$$.fragment),eZo=l(),fue=a("p"),oZo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),rZo=l(),yd=a("p"),tZo=o(`Note:
Loading a model from its configuration file does `),mue=a("strong"),aZo=o("not"),nZo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=a("a"),sZo=o("from_pretrained()"),lZo=o(" to load the model weights."),iZo=l(),F(Q0.$$.fragment),dZo=l(),ho=a("div"),F(sy.$$.fragment),cZo=l(),gue=a("p"),fZo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),mZo=l(),Wa=a("p"),gZo=o("The model class to instantiate is selected based on the "),hue=a("code"),hZo=o("model_type"),pZo=o(` property of the config object (either
passed as an argument or loaded from `),pue=a("code"),uZo=o("pretrained_model_name_or_path"),_Zo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=a("code"),bZo=o("pretrained_model_name_or_path"),vZo=o(":"),FZo=l(),ly=a("ul"),W0=a("li"),_ue=a("strong"),TZo=o("detr"),MZo=o(" \u2014 "),FX=a("a"),EZo=o("DetrForObjectDetection"),CZo=o(" (DETR model)"),wZo=l(),H0=a("li"),bue=a("strong"),AZo=o("yolos"),yZo=o(" \u2014 "),TX=a("a"),LZo=o("YolosForObjectDetection"),xZo=o(" (YOLOS model)"),$Zo=l(),U0=a("p"),kZo=o("The model is set in evaluation mode by default using "),vue=a("code"),SZo=o("model.eval()"),RZo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=a("code"),BZo=o("model.train()"),PZo=l(),F(J0.$$.fragment),sIe=l(),Ld=a("h2"),Y0=a("a"),Tue=a("span"),F(iy.$$.fragment),IZo=l(),Mue=a("span"),qZo=o("AutoModelForImageSegmentation"),lIe=l(),Ho=a("div"),F(dy.$$.fragment),NZo=l(),xd=a("p"),jZo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MX=a("a"),DZo=o("from_pretrained()"),GZo=o(" class method or the "),EX=a("a"),OZo=o("from_config()"),VZo=o(` class
method.`),XZo=l(),cy=a("p"),zZo=o("This class cannot be instantiated directly using "),Eue=a("code"),QZo=o("__init__()"),WZo=o(" (throws an error)."),HZo=l(),Mt=a("div"),F(fy.$$.fragment),UZo=l(),Cue=a("p"),JZo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),YZo=l(),$d=a("p"),KZo=o(`Note:
Loading a model from its configuration file does `),wue=a("strong"),ZZo=o("not"),eer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=a("a"),oer=o("from_pretrained()"),rer=o(" to load the model weights."),ter=l(),F(K0.$$.fragment),aer=l(),po=a("div"),F(my.$$.fragment),ner=l(),Aue=a("p"),ser=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),ler=l(),Ha=a("p"),ier=o("The model class to instantiate is selected based on the "),yue=a("code"),der=o("model_type"),cer=o(` property of the config object (either
passed as an argument or loaded from `),Lue=a("code"),fer=o("pretrained_model_name_or_path"),mer=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=a("code"),ger=o("pretrained_model_name_or_path"),her=o(":"),per=l(),$ue=a("ul"),Z0=a("li"),kue=a("strong"),uer=o("detr"),_er=o(" \u2014 "),wX=a("a"),ber=o("DetrForSegmentation"),ver=o(" (DETR model)"),Fer=l(),e6=a("p"),Ter=o("The model is set in evaluation mode by default using "),Sue=a("code"),Mer=o("model.eval()"),Eer=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=a("code"),Cer=o("model.train()"),wer=l(),F(o6.$$.fragment),iIe=l(),kd=a("h2"),r6=a("a"),Bue=a("span"),F(gy.$$.fragment),Aer=l(),Pue=a("span"),yer=o("AutoModelForSemanticSegmentation"),dIe=l(),Uo=a("div"),F(hy.$$.fragment),Ler=l(),Sd=a("p"),xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AX=a("a"),$er=o("from_pretrained()"),ker=o(" class method or the "),yX=a("a"),Ser=o("from_config()"),Rer=o(` class
method.`),Ber=l(),py=a("p"),Per=o("This class cannot be instantiated directly using "),Iue=a("code"),Ier=o("__init__()"),qer=o(" (throws an error)."),Ner=l(),Et=a("div"),F(uy.$$.fragment),jer=l(),que=a("p"),Der=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ger=l(),Rd=a("p"),Oer=o(`Note:
Loading a model from its configuration file does `),Nue=a("strong"),Ver=o("not"),Xer=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=a("a"),zer=o("from_pretrained()"),Qer=o(" to load the model weights."),Wer=l(),F(t6.$$.fragment),Her=l(),uo=a("div"),F(_y.$$.fragment),Uer=l(),jue=a("p"),Jer=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),Yer=l(),Ua=a("p"),Ker=o("The model class to instantiate is selected based on the "),Due=a("code"),Zer=o("model_type"),eor=o(` property of the config object (either
passed as an argument or loaded from `),Gue=a("code"),oor=o("pretrained_model_name_or_path"),ror=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=a("code"),tor=o("pretrained_model_name_or_path"),aor=o(":"),nor=l(),Ja=a("ul"),a6=a("li"),Vue=a("strong"),sor=o("beit"),lor=o(" \u2014 "),xX=a("a"),ior=o("BeitForSemanticSegmentation"),dor=o(" (BEiT model)"),cor=l(),n6=a("li"),Xue=a("strong"),mor=o("data2vec-vision"),gor=o(" \u2014 "),$X=a("a"),hor=o("Data2VecVisionForSemanticSegmentation"),por=o(" (Data2VecVision model)"),uor=l(),s6=a("li"),zue=a("strong"),_or=o("dpt"),bor=o(" \u2014 "),kX=a("a"),vor=o("DPTForSemanticSegmentation"),For=o(" (DPT model)"),Tor=l(),l6=a("li"),Que=a("strong"),Mor=o("segformer"),Eor=o(" \u2014 "),SX=a("a"),Cor=o("SegformerForSemanticSegmentation"),wor=o(" (SegFormer model)"),Aor=l(),i6=a("p"),yor=o("The model is set in evaluation mode by default using "),Wue=a("code"),Lor=o("model.eval()"),xor=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=a("code"),$or=o("model.train()"),kor=l(),F(d6.$$.fragment),cIe=l(),Bd=a("h2"),c6=a("a"),Uue=a("span"),F(by.$$.fragment),Sor=l(),Jue=a("span"),Ror=o("AutoModelForInstanceSegmentation"),fIe=l(),Jo=a("div"),F(vy.$$.fragment),Bor=l(),Pd=a("p"),Por=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RX=a("a"),Ior=o("from_pretrained()"),qor=o(" class method or the "),BX=a("a"),Nor=o("from_config()"),jor=o(` class
method.`),Dor=l(),Fy=a("p"),Gor=o("This class cannot be instantiated directly using "),Yue=a("code"),Oor=o("__init__()"),Vor=o(" (throws an error)."),Xor=l(),Ct=a("div"),F(Ty.$$.fragment),zor=l(),Kue=a("p"),Qor=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Wor=l(),Id=a("p"),Hor=o(`Note:
Loading a model from its configuration file does `),Zue=a("strong"),Uor=o("not"),Jor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=a("a"),Yor=o("from_pretrained()"),Kor=o(" to load the model weights."),Zor=l(),F(f6.$$.fragment),err=l(),_o=a("div"),F(My.$$.fragment),orr=l(),e_e=a("p"),rrr=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),trr=l(),Ya=a("p"),arr=o("The model class to instantiate is selected based on the "),o_e=a("code"),nrr=o("model_type"),srr=o(` property of the config object (either
passed as an argument or loaded from `),r_e=a("code"),lrr=o("pretrained_model_name_or_path"),irr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=a("code"),drr=o("pretrained_model_name_or_path"),crr=o(":"),frr=l(),a_e=a("ul"),m6=a("li"),n_e=a("strong"),mrr=o("maskformer"),grr=o(" \u2014 "),IX=a("a"),hrr=o("MaskFormerForInstanceSegmentation"),prr=o(" (MaskFormer model)"),urr=l(),g6=a("p"),_rr=o("The model is set in evaluation mode by default using "),s_e=a("code"),brr=o("model.eval()"),vrr=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=a("code"),Frr=o("model.train()"),Trr=l(),F(h6.$$.fragment),mIe=l(),qd=a("h2"),p6=a("a"),i_e=a("span"),F(Ey.$$.fragment),Mrr=l(),d_e=a("span"),Err=o("TFAutoModel"),gIe=l(),Yo=a("div"),F(Cy.$$.fragment),Crr=l(),Nd=a("p"),wrr=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qX=a("a"),Arr=o("from_pretrained()"),yrr=o(" class method or the "),NX=a("a"),Lrr=o("from_config()"),xrr=o(` class
method.`),$rr=l(),wy=a("p"),krr=o("This class cannot be instantiated directly using "),c_e=a("code"),Srr=o("__init__()"),Rrr=o(" (throws an error)."),Brr=l(),wt=a("div"),F(Ay.$$.fragment),Prr=l(),f_e=a("p"),Irr=o("Instantiates one of the base model classes of the library from a configuration."),qrr=l(),jd=a("p"),Nrr=o(`Note:
Loading a model from its configuration file does `),m_e=a("strong"),jrr=o("not"),Drr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=a("a"),Grr=o("from_pretrained()"),Orr=o(" to load the model weights."),Vrr=l(),F(u6.$$.fragment),Xrr=l(),wr=a("div"),F(yy.$$.fragment),zrr=l(),g_e=a("p"),Qrr=o("Instantiate one of the base model classes of the library from a pretrained model."),Wrr=l(),Ka=a("p"),Hrr=o("The model class to instantiate is selected based on the "),h_e=a("code"),Urr=o("model_type"),Jrr=o(` property of the config object (either
passed as an argument or loaded from `),p_e=a("code"),Yrr=o("pretrained_model_name_or_path"),Krr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=a("code"),Zrr=o("pretrained_model_name_or_path"),etr=o(":"),otr=l(),j=a("ul"),_6=a("li"),__e=a("strong"),rtr=o("albert"),ttr=o(" \u2014 "),DX=a("a"),atr=o("TFAlbertModel"),ntr=o(" (ALBERT model)"),str=l(),b6=a("li"),b_e=a("strong"),ltr=o("bart"),itr=o(" \u2014 "),GX=a("a"),dtr=o("TFBartModel"),ctr=o(" (BART model)"),ftr=l(),v6=a("li"),v_e=a("strong"),mtr=o("bert"),gtr=o(" \u2014 "),OX=a("a"),htr=o("TFBertModel"),ptr=o(" (BERT model)"),utr=l(),F6=a("li"),F_e=a("strong"),_tr=o("blenderbot"),btr=o(" \u2014 "),VX=a("a"),vtr=o("TFBlenderbotModel"),Ftr=o(" (Blenderbot model)"),Ttr=l(),T6=a("li"),T_e=a("strong"),Mtr=o("blenderbot-small"),Etr=o(" \u2014 "),XX=a("a"),Ctr=o("TFBlenderbotSmallModel"),wtr=o(" (BlenderbotSmall model)"),Atr=l(),M6=a("li"),M_e=a("strong"),ytr=o("camembert"),Ltr=o(" \u2014 "),zX=a("a"),xtr=o("TFCamembertModel"),$tr=o(" (CamemBERT model)"),ktr=l(),E6=a("li"),E_e=a("strong"),Str=o("clip"),Rtr=o(" \u2014 "),QX=a("a"),Btr=o("TFCLIPModel"),Ptr=o(" (CLIP model)"),Itr=l(),C6=a("li"),C_e=a("strong"),qtr=o("convbert"),Ntr=o(" \u2014 "),WX=a("a"),jtr=o("TFConvBertModel"),Dtr=o(" (ConvBERT model)"),Gtr=l(),w6=a("li"),w_e=a("strong"),Otr=o("convnext"),Vtr=o(" \u2014 "),HX=a("a"),Xtr=o("TFConvNextModel"),ztr=o(" (ConvNext model)"),Qtr=l(),A6=a("li"),A_e=a("strong"),Wtr=o("ctrl"),Htr=o(" \u2014 "),UX=a("a"),Utr=o("TFCTRLModel"),Jtr=o(" (CTRL model)"),Ytr=l(),y6=a("li"),y_e=a("strong"),Ktr=o("data2vec-vision"),Ztr=o(" \u2014 "),JX=a("a"),ear=o("TFData2VecVisionModel"),oar=o(" (Data2VecVision model)"),rar=l(),L6=a("li"),L_e=a("strong"),tar=o("deberta"),aar=o(" \u2014 "),YX=a("a"),nar=o("TFDebertaModel"),sar=o(" (DeBERTa model)"),lar=l(),x6=a("li"),x_e=a("strong"),iar=o("deberta-v2"),dar=o(" \u2014 "),KX=a("a"),car=o("TFDebertaV2Model"),far=o(" (DeBERTa-v2 model)"),mar=l(),$6=a("li"),$_e=a("strong"),gar=o("distilbert"),har=o(" \u2014 "),ZX=a("a"),par=o("TFDistilBertModel"),uar=o(" (DistilBERT model)"),_ar=l(),k6=a("li"),k_e=a("strong"),bar=o("dpr"),Far=o(" \u2014 "),ez=a("a"),Tar=o("TFDPRQuestionEncoder"),Mar=o(" (DPR model)"),Ear=l(),S6=a("li"),S_e=a("strong"),Car=o("electra"),war=o(" \u2014 "),oz=a("a"),Aar=o("TFElectraModel"),yar=o(" (ELECTRA model)"),Lar=l(),R6=a("li"),R_e=a("strong"),xar=o("flaubert"),$ar=o(" \u2014 "),rz=a("a"),kar=o("TFFlaubertModel"),Sar=o(" (FlauBERT model)"),Rar=l(),Bs=a("li"),B_e=a("strong"),Bar=o("funnel"),Par=o(" \u2014 "),tz=a("a"),Iar=o("TFFunnelModel"),qar=o(" or "),az=a("a"),Nar=o("TFFunnelBaseModel"),jar=o(" (Funnel Transformer model)"),Dar=l(),B6=a("li"),P_e=a("strong"),Gar=o("gpt2"),Oar=o(" \u2014 "),nz=a("a"),Var=o("TFGPT2Model"),Xar=o(" (OpenAI GPT-2 model)"),zar=l(),P6=a("li"),I_e=a("strong"),Qar=o("gptj"),War=o(" \u2014 "),sz=a("a"),Har=o("TFGPTJModel"),Uar=o(" (GPT-J model)"),Jar=l(),I6=a("li"),q_e=a("strong"),Yar=o("hubert"),Kar=o(" \u2014 "),lz=a("a"),Zar=o("TFHubertModel"),enr=o(" (Hubert model)"),onr=l(),q6=a("li"),N_e=a("strong"),rnr=o("layoutlm"),tnr=o(" \u2014 "),iz=a("a"),anr=o("TFLayoutLMModel"),nnr=o(" (LayoutLM model)"),snr=l(),N6=a("li"),j_e=a("strong"),lnr=o("led"),inr=o(" \u2014 "),dz=a("a"),dnr=o("TFLEDModel"),cnr=o(" (LED model)"),fnr=l(),j6=a("li"),D_e=a("strong"),mnr=o("longformer"),gnr=o(" \u2014 "),cz=a("a"),hnr=o("TFLongformerModel"),pnr=o(" (Longformer model)"),unr=l(),D6=a("li"),G_e=a("strong"),_nr=o("lxmert"),bnr=o(" \u2014 "),fz=a("a"),vnr=o("TFLxmertModel"),Fnr=o(" (LXMERT model)"),Tnr=l(),G6=a("li"),O_e=a("strong"),Mnr=o("marian"),Enr=o(" \u2014 "),mz=a("a"),Cnr=o("TFMarianModel"),wnr=o(" (Marian model)"),Anr=l(),O6=a("li"),V_e=a("strong"),ynr=o("mbart"),Lnr=o(" \u2014 "),gz=a("a"),xnr=o("TFMBartModel"),$nr=o(" (mBART model)"),knr=l(),V6=a("li"),X_e=a("strong"),Snr=o("mobilebert"),Rnr=o(" \u2014 "),hz=a("a"),Bnr=o("TFMobileBertModel"),Pnr=o(" (MobileBERT model)"),Inr=l(),X6=a("li"),z_e=a("strong"),qnr=o("mpnet"),Nnr=o(" \u2014 "),pz=a("a"),jnr=o("TFMPNetModel"),Dnr=o(" (MPNet model)"),Gnr=l(),z6=a("li"),Q_e=a("strong"),Onr=o("mt5"),Vnr=o(" \u2014 "),uz=a("a"),Xnr=o("TFMT5Model"),znr=o(" (mT5 model)"),Qnr=l(),Q6=a("li"),W_e=a("strong"),Wnr=o("openai-gpt"),Hnr=o(" \u2014 "),_z=a("a"),Unr=o("TFOpenAIGPTModel"),Jnr=o(" (OpenAI GPT model)"),Ynr=l(),W6=a("li"),H_e=a("strong"),Knr=o("pegasus"),Znr=o(" \u2014 "),bz=a("a"),esr=o("TFPegasusModel"),osr=o(" (Pegasus model)"),rsr=l(),H6=a("li"),U_e=a("strong"),tsr=o("rembert"),asr=o(" \u2014 "),vz=a("a"),nsr=o("TFRemBertModel"),ssr=o(" (RemBERT model)"),lsr=l(),U6=a("li"),J_e=a("strong"),isr=o("roberta"),dsr=o(" \u2014 "),Fz=a("a"),csr=o("TFRobertaModel"),fsr=o(" (RoBERTa model)"),msr=l(),J6=a("li"),Y_e=a("strong"),gsr=o("roformer"),hsr=o(" \u2014 "),Tz=a("a"),psr=o("TFRoFormerModel"),usr=o(" (RoFormer model)"),_sr=l(),Y6=a("li"),K_e=a("strong"),bsr=o("speech_to_text"),vsr=o(" \u2014 "),Mz=a("a"),Fsr=o("TFSpeech2TextModel"),Tsr=o(" (Speech2Text model)"),Msr=l(),K6=a("li"),Z_e=a("strong"),Esr=o("t5"),Csr=o(" \u2014 "),Ez=a("a"),wsr=o("TFT5Model"),Asr=o(" (T5 model)"),ysr=l(),Z6=a("li"),e1e=a("strong"),Lsr=o("tapas"),xsr=o(" \u2014 "),Cz=a("a"),$sr=o("TFTapasModel"),ksr=o(" (TAPAS model)"),Ssr=l(),eT=a("li"),o1e=a("strong"),Rsr=o("transfo-xl"),Bsr=o(" \u2014 "),wz=a("a"),Psr=o("TFTransfoXLModel"),Isr=o(" (Transformer-XL model)"),qsr=l(),oT=a("li"),r1e=a("strong"),Nsr=o("vit"),jsr=o(" \u2014 "),Az=a("a"),Dsr=o("TFViTModel"),Gsr=o(" (ViT model)"),Osr=l(),rT=a("li"),t1e=a("strong"),Vsr=o("vit_mae"),Xsr=o(" \u2014 "),yz=a("a"),zsr=o("TFViTMAEModel"),Qsr=o(" (ViTMAE model)"),Wsr=l(),tT=a("li"),a1e=a("strong"),Hsr=o("wav2vec2"),Usr=o(" \u2014 "),Lz=a("a"),Jsr=o("TFWav2Vec2Model"),Ysr=o(" (Wav2Vec2 model)"),Ksr=l(),aT=a("li"),n1e=a("strong"),Zsr=o("xlm"),elr=o(" \u2014 "),xz=a("a"),olr=o("TFXLMModel"),rlr=o(" (XLM model)"),tlr=l(),nT=a("li"),s1e=a("strong"),alr=o("xlm-roberta"),nlr=o(" \u2014 "),$z=a("a"),slr=o("TFXLMRobertaModel"),llr=o(" (XLM-RoBERTa model)"),ilr=l(),sT=a("li"),l1e=a("strong"),dlr=o("xlnet"),clr=o(" \u2014 "),kz=a("a"),flr=o("TFXLNetModel"),mlr=o(" (XLNet model)"),glr=l(),F(lT.$$.fragment),hIe=l(),Dd=a("h2"),iT=a("a"),i1e=a("span"),F(Ly.$$.fragment),hlr=l(),d1e=a("span"),plr=o("TFAutoModelForPreTraining"),pIe=l(),Ko=a("div"),F(xy.$$.fragment),ulr=l(),Gd=a("p"),_lr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sz=a("a"),blr=o("from_pretrained()"),vlr=o(" class method or the "),Rz=a("a"),Flr=o("from_config()"),Tlr=o(` class
method.`),Mlr=l(),$y=a("p"),Elr=o("This class cannot be instantiated directly using "),c1e=a("code"),Clr=o("__init__()"),wlr=o(" (throws an error)."),Alr=l(),At=a("div"),F(ky.$$.fragment),ylr=l(),f1e=a("p"),Llr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),xlr=l(),Od=a("p"),$lr=o(`Note:
Loading a model from its configuration file does `),m1e=a("strong"),klr=o("not"),Slr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=a("a"),Rlr=o("from_pretrained()"),Blr=o(" to load the model weights."),Plr=l(),F(dT.$$.fragment),Ilr=l(),Ar=a("div"),F(Sy.$$.fragment),qlr=l(),g1e=a("p"),Nlr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jlr=l(),Za=a("p"),Dlr=o("The model class to instantiate is selected based on the "),h1e=a("code"),Glr=o("model_type"),Olr=o(` property of the config object (either
passed as an argument or loaded from `),p1e=a("code"),Vlr=o("pretrained_model_name_or_path"),Xlr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=a("code"),zlr=o("pretrained_model_name_or_path"),Qlr=o(":"),Wlr=l(),ne=a("ul"),cT=a("li"),_1e=a("strong"),Hlr=o("albert"),Ulr=o(" \u2014 "),Pz=a("a"),Jlr=o("TFAlbertForPreTraining"),Ylr=o(" (ALBERT model)"),Klr=l(),fT=a("li"),b1e=a("strong"),Zlr=o("bart"),eir=o(" \u2014 "),Iz=a("a"),oir=o("TFBartForConditionalGeneration"),rir=o(" (BART model)"),tir=l(),mT=a("li"),v1e=a("strong"),air=o("bert"),nir=o(" \u2014 "),qz=a("a"),sir=o("TFBertForPreTraining"),lir=o(" (BERT model)"),iir=l(),gT=a("li"),F1e=a("strong"),dir=o("camembert"),cir=o(" \u2014 "),Nz=a("a"),fir=o("TFCamembertForMaskedLM"),mir=o(" (CamemBERT model)"),gir=l(),hT=a("li"),T1e=a("strong"),hir=o("ctrl"),pir=o(" \u2014 "),jz=a("a"),uir=o("TFCTRLLMHeadModel"),_ir=o(" (CTRL model)"),bir=l(),pT=a("li"),M1e=a("strong"),vir=o("distilbert"),Fir=o(" \u2014 "),Dz=a("a"),Tir=o("TFDistilBertForMaskedLM"),Mir=o(" (DistilBERT model)"),Eir=l(),uT=a("li"),E1e=a("strong"),Cir=o("electra"),wir=o(" \u2014 "),Gz=a("a"),Air=o("TFElectraForPreTraining"),yir=o(" (ELECTRA model)"),Lir=l(),_T=a("li"),C1e=a("strong"),xir=o("flaubert"),$ir=o(" \u2014 "),Oz=a("a"),kir=o("TFFlaubertWithLMHeadModel"),Sir=o(" (FlauBERT model)"),Rir=l(),bT=a("li"),w1e=a("strong"),Bir=o("funnel"),Pir=o(" \u2014 "),Vz=a("a"),Iir=o("TFFunnelForPreTraining"),qir=o(" (Funnel Transformer model)"),Nir=l(),vT=a("li"),A1e=a("strong"),jir=o("gpt2"),Dir=o(" \u2014 "),Xz=a("a"),Gir=o("TFGPT2LMHeadModel"),Oir=o(" (OpenAI GPT-2 model)"),Vir=l(),FT=a("li"),y1e=a("strong"),Xir=o("layoutlm"),zir=o(" \u2014 "),zz=a("a"),Qir=o("TFLayoutLMForMaskedLM"),Wir=o(" (LayoutLM model)"),Hir=l(),TT=a("li"),L1e=a("strong"),Uir=o("lxmert"),Jir=o(" \u2014 "),Qz=a("a"),Yir=o("TFLxmertForPreTraining"),Kir=o(" (LXMERT model)"),Zir=l(),MT=a("li"),x1e=a("strong"),edr=o("mobilebert"),odr=o(" \u2014 "),Wz=a("a"),rdr=o("TFMobileBertForPreTraining"),tdr=o(" (MobileBERT model)"),adr=l(),ET=a("li"),$1e=a("strong"),ndr=o("mpnet"),sdr=o(" \u2014 "),Hz=a("a"),ldr=o("TFMPNetForMaskedLM"),idr=o(" (MPNet model)"),ddr=l(),CT=a("li"),k1e=a("strong"),cdr=o("openai-gpt"),fdr=o(" \u2014 "),Uz=a("a"),mdr=o("TFOpenAIGPTLMHeadModel"),gdr=o(" (OpenAI GPT model)"),hdr=l(),wT=a("li"),S1e=a("strong"),pdr=o("roberta"),udr=o(" \u2014 "),Jz=a("a"),_dr=o("TFRobertaForMaskedLM"),bdr=o(" (RoBERTa model)"),vdr=l(),AT=a("li"),R1e=a("strong"),Fdr=o("t5"),Tdr=o(" \u2014 "),Yz=a("a"),Mdr=o("TFT5ForConditionalGeneration"),Edr=o(" (T5 model)"),Cdr=l(),yT=a("li"),B1e=a("strong"),wdr=o("tapas"),Adr=o(" \u2014 "),Kz=a("a"),ydr=o("TFTapasForMaskedLM"),Ldr=o(" (TAPAS model)"),xdr=l(),LT=a("li"),P1e=a("strong"),$dr=o("transfo-xl"),kdr=o(" \u2014 "),Zz=a("a"),Sdr=o("TFTransfoXLLMHeadModel"),Rdr=o(" (Transformer-XL model)"),Bdr=l(),xT=a("li"),I1e=a("strong"),Pdr=o("vit_mae"),Idr=o(" \u2014 "),eQ=a("a"),qdr=o("TFViTMAEForPreTraining"),Ndr=o(" (ViTMAE model)"),jdr=l(),$T=a("li"),q1e=a("strong"),Ddr=o("xlm"),Gdr=o(" \u2014 "),oQ=a("a"),Odr=o("TFXLMWithLMHeadModel"),Vdr=o(" (XLM model)"),Xdr=l(),kT=a("li"),N1e=a("strong"),zdr=o("xlm-roberta"),Qdr=o(" \u2014 "),rQ=a("a"),Wdr=o("TFXLMRobertaForMaskedLM"),Hdr=o(" (XLM-RoBERTa model)"),Udr=l(),ST=a("li"),j1e=a("strong"),Jdr=o("xlnet"),Ydr=o(" \u2014 "),tQ=a("a"),Kdr=o("TFXLNetLMHeadModel"),Zdr=o(" (XLNet model)"),ecr=l(),F(RT.$$.fragment),uIe=l(),Vd=a("h2"),BT=a("a"),D1e=a("span"),F(Ry.$$.fragment),ocr=l(),G1e=a("span"),rcr=o("TFAutoModelForCausalLM"),_Ie=l(),Zo=a("div"),F(By.$$.fragment),tcr=l(),Xd=a("p"),acr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aQ=a("a"),ncr=o("from_pretrained()"),scr=o(" class method or the "),nQ=a("a"),lcr=o("from_config()"),icr=o(` class
method.`),dcr=l(),Py=a("p"),ccr=o("This class cannot be instantiated directly using "),O1e=a("code"),fcr=o("__init__()"),mcr=o(" (throws an error)."),gcr=l(),yt=a("div"),F(Iy.$$.fragment),hcr=l(),V1e=a("p"),pcr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),ucr=l(),zd=a("p"),_cr=o(`Note:
Loading a model from its configuration file does `),X1e=a("strong"),bcr=o("not"),vcr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=a("a"),Fcr=o("from_pretrained()"),Tcr=o(" to load the model weights."),Mcr=l(),F(PT.$$.fragment),Ecr=l(),yr=a("div"),F(qy.$$.fragment),Ccr=l(),z1e=a("p"),wcr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Acr=l(),en=a("p"),ycr=o("The model class to instantiate is selected based on the "),Q1e=a("code"),Lcr=o("model_type"),xcr=o(` property of the config object (either
passed as an argument or loaded from `),W1e=a("code"),$cr=o("pretrained_model_name_or_path"),kcr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=a("code"),Scr=o("pretrained_model_name_or_path"),Rcr=o(":"),Bcr=l(),Te=a("ul"),IT=a("li"),U1e=a("strong"),Pcr=o("bert"),Icr=o(" \u2014 "),lQ=a("a"),qcr=o("TFBertLMHeadModel"),Ncr=o(" (BERT model)"),jcr=l(),qT=a("li"),J1e=a("strong"),Dcr=o("camembert"),Gcr=o(" \u2014 "),iQ=a("a"),Ocr=o("TFCamembertForCausalLM"),Vcr=o(" (CamemBERT model)"),Xcr=l(),NT=a("li"),Y1e=a("strong"),zcr=o("ctrl"),Qcr=o(" \u2014 "),dQ=a("a"),Wcr=o("TFCTRLLMHeadModel"),Hcr=o(" (CTRL model)"),Ucr=l(),jT=a("li"),K1e=a("strong"),Jcr=o("gpt2"),Ycr=o(" \u2014 "),cQ=a("a"),Kcr=o("TFGPT2LMHeadModel"),Zcr=o(" (OpenAI GPT-2 model)"),efr=l(),DT=a("li"),Z1e=a("strong"),ofr=o("gptj"),rfr=o(" \u2014 "),fQ=a("a"),tfr=o("TFGPTJForCausalLM"),afr=o(" (GPT-J model)"),nfr=l(),GT=a("li"),ebe=a("strong"),sfr=o("openai-gpt"),lfr=o(" \u2014 "),mQ=a("a"),ifr=o("TFOpenAIGPTLMHeadModel"),dfr=o(" (OpenAI GPT model)"),cfr=l(),OT=a("li"),obe=a("strong"),ffr=o("rembert"),mfr=o(" \u2014 "),gQ=a("a"),gfr=o("TFRemBertForCausalLM"),hfr=o(" (RemBERT model)"),pfr=l(),VT=a("li"),rbe=a("strong"),ufr=o("roberta"),_fr=o(" \u2014 "),hQ=a("a"),bfr=o("TFRobertaForCausalLM"),vfr=o(" (RoBERTa model)"),Ffr=l(),XT=a("li"),tbe=a("strong"),Tfr=o("roformer"),Mfr=o(" \u2014 "),pQ=a("a"),Efr=o("TFRoFormerForCausalLM"),Cfr=o(" (RoFormer model)"),wfr=l(),zT=a("li"),abe=a("strong"),Afr=o("transfo-xl"),yfr=o(" \u2014 "),uQ=a("a"),Lfr=o("TFTransfoXLLMHeadModel"),xfr=o(" (Transformer-XL model)"),$fr=l(),QT=a("li"),nbe=a("strong"),kfr=o("xlm"),Sfr=o(" \u2014 "),_Q=a("a"),Rfr=o("TFXLMWithLMHeadModel"),Bfr=o(" (XLM model)"),Pfr=l(),WT=a("li"),sbe=a("strong"),Ifr=o("xlnet"),qfr=o(" \u2014 "),bQ=a("a"),Nfr=o("TFXLNetLMHeadModel"),jfr=o(" (XLNet model)"),Dfr=l(),F(HT.$$.fragment),bIe=l(),Qd=a("h2"),UT=a("a"),lbe=a("span"),F(Ny.$$.fragment),Gfr=l(),ibe=a("span"),Ofr=o("TFAutoModelForImageClassification"),vIe=l(),er=a("div"),F(jy.$$.fragment),Vfr=l(),Wd=a("p"),Xfr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vQ=a("a"),zfr=o("from_pretrained()"),Qfr=o(" class method or the "),FQ=a("a"),Wfr=o("from_config()"),Hfr=o(` class
method.`),Ufr=l(),Dy=a("p"),Jfr=o("This class cannot be instantiated directly using "),dbe=a("code"),Yfr=o("__init__()"),Kfr=o(" (throws an error)."),Zfr=l(),Lt=a("div"),F(Gy.$$.fragment),emr=l(),cbe=a("p"),omr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),rmr=l(),Hd=a("p"),tmr=o(`Note:
Loading a model from its configuration file does `),fbe=a("strong"),amr=o("not"),nmr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=a("a"),smr=o("from_pretrained()"),lmr=o(" to load the model weights."),imr=l(),F(JT.$$.fragment),dmr=l(),Lr=a("div"),F(Oy.$$.fragment),cmr=l(),mbe=a("p"),fmr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),mmr=l(),on=a("p"),gmr=o("The model class to instantiate is selected based on the "),gbe=a("code"),hmr=o("model_type"),pmr=o(` property of the config object (either
passed as an argument or loaded from `),hbe=a("code"),umr=o("pretrained_model_name_or_path"),_mr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=a("code"),bmr=o("pretrained_model_name_or_path"),vmr=o(":"),Fmr=l(),Ud=a("ul"),YT=a("li"),ube=a("strong"),Tmr=o("convnext"),Mmr=o(" \u2014 "),MQ=a("a"),Emr=o("TFConvNextForImageClassification"),Cmr=o(" (ConvNext model)"),wmr=l(),KT=a("li"),_be=a("strong"),Amr=o("data2vec-vision"),ymr=o(" \u2014 "),EQ=a("a"),Lmr=o("TFData2VecVisionForImageClassification"),xmr=o(" (Data2VecVision model)"),$mr=l(),ZT=a("li"),bbe=a("strong"),kmr=o("vit"),Smr=o(" \u2014 "),CQ=a("a"),Rmr=o("TFViTForImageClassification"),Bmr=o(" (ViT model)"),Pmr=l(),F(e7.$$.fragment),FIe=l(),Jd=a("h2"),o7=a("a"),vbe=a("span"),F(Vy.$$.fragment),Imr=l(),Fbe=a("span"),qmr=o("TFAutoModelForMaskedLM"),TIe=l(),or=a("div"),F(Xy.$$.fragment),Nmr=l(),Yd=a("p"),jmr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wQ=a("a"),Dmr=o("from_pretrained()"),Gmr=o(" class method or the "),AQ=a("a"),Omr=o("from_config()"),Vmr=o(` class
method.`),Xmr=l(),zy=a("p"),zmr=o("This class cannot be instantiated directly using "),Tbe=a("code"),Qmr=o("__init__()"),Wmr=o(" (throws an error)."),Hmr=l(),xt=a("div"),F(Qy.$$.fragment),Umr=l(),Mbe=a("p"),Jmr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Ymr=l(),Kd=a("p"),Kmr=o(`Note:
Loading a model from its configuration file does `),Ebe=a("strong"),Zmr=o("not"),egr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=a("a"),ogr=o("from_pretrained()"),rgr=o(" to load the model weights."),tgr=l(),F(r7.$$.fragment),agr=l(),xr=a("div"),F(Wy.$$.fragment),ngr=l(),Cbe=a("p"),sgr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),lgr=l(),rn=a("p"),igr=o("The model class to instantiate is selected based on the "),wbe=a("code"),dgr=o("model_type"),cgr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),fgr=o("pretrained_model_name_or_path"),mgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=a("code"),ggr=o("pretrained_model_name_or_path"),hgr=o(":"),pgr=l(),ie=a("ul"),t7=a("li"),Lbe=a("strong"),ugr=o("albert"),_gr=o(" \u2014 "),LQ=a("a"),bgr=o("TFAlbertForMaskedLM"),vgr=o(" (ALBERT model)"),Fgr=l(),a7=a("li"),xbe=a("strong"),Tgr=o("bert"),Mgr=o(" \u2014 "),xQ=a("a"),Egr=o("TFBertForMaskedLM"),Cgr=o(" (BERT model)"),wgr=l(),n7=a("li"),$be=a("strong"),Agr=o("camembert"),ygr=o(" \u2014 "),$Q=a("a"),Lgr=o("TFCamembertForMaskedLM"),xgr=o(" (CamemBERT model)"),$gr=l(),s7=a("li"),kbe=a("strong"),kgr=o("convbert"),Sgr=o(" \u2014 "),kQ=a("a"),Rgr=o("TFConvBertForMaskedLM"),Bgr=o(" (ConvBERT model)"),Pgr=l(),l7=a("li"),Sbe=a("strong"),Igr=o("deberta"),qgr=o(" \u2014 "),SQ=a("a"),Ngr=o("TFDebertaForMaskedLM"),jgr=o(" (DeBERTa model)"),Dgr=l(),i7=a("li"),Rbe=a("strong"),Ggr=o("deberta-v2"),Ogr=o(" \u2014 "),RQ=a("a"),Vgr=o("TFDebertaV2ForMaskedLM"),Xgr=o(" (DeBERTa-v2 model)"),zgr=l(),d7=a("li"),Bbe=a("strong"),Qgr=o("distilbert"),Wgr=o(" \u2014 "),BQ=a("a"),Hgr=o("TFDistilBertForMaskedLM"),Ugr=o(" (DistilBERT model)"),Jgr=l(),c7=a("li"),Pbe=a("strong"),Ygr=o("electra"),Kgr=o(" \u2014 "),PQ=a("a"),Zgr=o("TFElectraForMaskedLM"),ehr=o(" (ELECTRA model)"),ohr=l(),f7=a("li"),Ibe=a("strong"),rhr=o("flaubert"),thr=o(" \u2014 "),IQ=a("a"),ahr=o("TFFlaubertWithLMHeadModel"),nhr=o(" (FlauBERT model)"),shr=l(),m7=a("li"),qbe=a("strong"),lhr=o("funnel"),ihr=o(" \u2014 "),qQ=a("a"),dhr=o("TFFunnelForMaskedLM"),chr=o(" (Funnel Transformer model)"),fhr=l(),g7=a("li"),Nbe=a("strong"),mhr=o("layoutlm"),ghr=o(" \u2014 "),NQ=a("a"),hhr=o("TFLayoutLMForMaskedLM"),phr=o(" (LayoutLM model)"),uhr=l(),h7=a("li"),jbe=a("strong"),_hr=o("longformer"),bhr=o(" \u2014 "),jQ=a("a"),vhr=o("TFLongformerForMaskedLM"),Fhr=o(" (Longformer model)"),Thr=l(),p7=a("li"),Dbe=a("strong"),Mhr=o("mobilebert"),Ehr=o(" \u2014 "),DQ=a("a"),Chr=o("TFMobileBertForMaskedLM"),whr=o(" (MobileBERT model)"),Ahr=l(),u7=a("li"),Gbe=a("strong"),yhr=o("mpnet"),Lhr=o(" \u2014 "),GQ=a("a"),xhr=o("TFMPNetForMaskedLM"),$hr=o(" (MPNet model)"),khr=l(),_7=a("li"),Obe=a("strong"),Shr=o("rembert"),Rhr=o(" \u2014 "),OQ=a("a"),Bhr=o("TFRemBertForMaskedLM"),Phr=o(" (RemBERT model)"),Ihr=l(),b7=a("li"),Vbe=a("strong"),qhr=o("roberta"),Nhr=o(" \u2014 "),VQ=a("a"),jhr=o("TFRobertaForMaskedLM"),Dhr=o(" (RoBERTa model)"),Ghr=l(),v7=a("li"),Xbe=a("strong"),Ohr=o("roformer"),Vhr=o(" \u2014 "),XQ=a("a"),Xhr=o("TFRoFormerForMaskedLM"),zhr=o(" (RoFormer model)"),Qhr=l(),F7=a("li"),zbe=a("strong"),Whr=o("tapas"),Hhr=o(" \u2014 "),zQ=a("a"),Uhr=o("TFTapasForMaskedLM"),Jhr=o(" (TAPAS model)"),Yhr=l(),T7=a("li"),Qbe=a("strong"),Khr=o("xlm"),Zhr=o(" \u2014 "),QQ=a("a"),epr=o("TFXLMWithLMHeadModel"),opr=o(" (XLM model)"),rpr=l(),M7=a("li"),Wbe=a("strong"),tpr=o("xlm-roberta"),apr=o(" \u2014 "),WQ=a("a"),npr=o("TFXLMRobertaForMaskedLM"),spr=o(" (XLM-RoBERTa model)"),lpr=l(),F(E7.$$.fragment),MIe=l(),Zd=a("h2"),C7=a("a"),Hbe=a("span"),F(Hy.$$.fragment),ipr=l(),Ube=a("span"),dpr=o("TFAutoModelForSeq2SeqLM"),EIe=l(),rr=a("div"),F(Uy.$$.fragment),cpr=l(),ec=a("p"),fpr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HQ=a("a"),mpr=o("from_pretrained()"),gpr=o(" class method or the "),UQ=a("a"),hpr=o("from_config()"),ppr=o(` class
method.`),upr=l(),Jy=a("p"),_pr=o("This class cannot be instantiated directly using "),Jbe=a("code"),bpr=o("__init__()"),vpr=o(" (throws an error)."),Fpr=l(),$t=a("div"),F(Yy.$$.fragment),Tpr=l(),Ybe=a("p"),Mpr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Epr=l(),oc=a("p"),Cpr=o(`Note:
Loading a model from its configuration file does `),Kbe=a("strong"),wpr=o("not"),Apr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=a("a"),ypr=o("from_pretrained()"),Lpr=o(" to load the model weights."),xpr=l(),F(w7.$$.fragment),$pr=l(),$r=a("div"),F(Ky.$$.fragment),kpr=l(),Zbe=a("p"),Spr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Rpr=l(),tn=a("p"),Bpr=o("The model class to instantiate is selected based on the "),e2e=a("code"),Ppr=o("model_type"),Ipr=o(` property of the config object (either
passed as an argument or loaded from `),o2e=a("code"),qpr=o("pretrained_model_name_or_path"),Npr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=a("code"),jpr=o("pretrained_model_name_or_path"),Dpr=o(":"),Gpr=l(),ye=a("ul"),A7=a("li"),t2e=a("strong"),Opr=o("bart"),Vpr=o(" \u2014 "),YQ=a("a"),Xpr=o("TFBartForConditionalGeneration"),zpr=o(" (BART model)"),Qpr=l(),y7=a("li"),a2e=a("strong"),Wpr=o("blenderbot"),Hpr=o(" \u2014 "),KQ=a("a"),Upr=o("TFBlenderbotForConditionalGeneration"),Jpr=o(" (Blenderbot model)"),Ypr=l(),L7=a("li"),n2e=a("strong"),Kpr=o("blenderbot-small"),Zpr=o(" \u2014 "),ZQ=a("a"),eur=o("TFBlenderbotSmallForConditionalGeneration"),our=o(" (BlenderbotSmall model)"),rur=l(),x7=a("li"),s2e=a("strong"),tur=o("encoder-decoder"),aur=o(" \u2014 "),eW=a("a"),nur=o("TFEncoderDecoderModel"),sur=o(" (Encoder decoder model)"),lur=l(),$7=a("li"),l2e=a("strong"),iur=o("led"),dur=o(" \u2014 "),oW=a("a"),cur=o("TFLEDForConditionalGeneration"),fur=o(" (LED model)"),mur=l(),k7=a("li"),i2e=a("strong"),gur=o("marian"),hur=o(" \u2014 "),rW=a("a"),pur=o("TFMarianMTModel"),uur=o(" (Marian model)"),_ur=l(),S7=a("li"),d2e=a("strong"),bur=o("mbart"),vur=o(" \u2014 "),tW=a("a"),Fur=o("TFMBartForConditionalGeneration"),Tur=o(" (mBART model)"),Mur=l(),R7=a("li"),c2e=a("strong"),Eur=o("mt5"),Cur=o(" \u2014 "),aW=a("a"),wur=o("TFMT5ForConditionalGeneration"),Aur=o(" (mT5 model)"),yur=l(),B7=a("li"),f2e=a("strong"),Lur=o("pegasus"),xur=o(" \u2014 "),nW=a("a"),$ur=o("TFPegasusForConditionalGeneration"),kur=o(" (Pegasus model)"),Sur=l(),P7=a("li"),m2e=a("strong"),Rur=o("t5"),Bur=o(" \u2014 "),sW=a("a"),Pur=o("TFT5ForConditionalGeneration"),Iur=o(" (T5 model)"),qur=l(),F(I7.$$.fragment),CIe=l(),rc=a("h2"),q7=a("a"),g2e=a("span"),F(Zy.$$.fragment),Nur=l(),h2e=a("span"),jur=o("TFAutoModelForSequenceClassification"),wIe=l(),tr=a("div"),F(eL.$$.fragment),Dur=l(),tc=a("p"),Gur=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lW=a("a"),Our=o("from_pretrained()"),Vur=o(" class method or the "),iW=a("a"),Xur=o("from_config()"),zur=o(` class
method.`),Qur=l(),oL=a("p"),Wur=o("This class cannot be instantiated directly using "),p2e=a("code"),Hur=o("__init__()"),Uur=o(" (throws an error)."),Jur=l(),kt=a("div"),F(rL.$$.fragment),Yur=l(),u2e=a("p"),Kur=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zur=l(),ac=a("p"),e_r=o(`Note:
Loading a model from its configuration file does `),_2e=a("strong"),o_r=o("not"),r_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=a("a"),t_r=o("from_pretrained()"),a_r=o(" to load the model weights."),n_r=l(),F(N7.$$.fragment),s_r=l(),kr=a("div"),F(tL.$$.fragment),l_r=l(),b2e=a("p"),i_r=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),d_r=l(),an=a("p"),c_r=o("The model class to instantiate is selected based on the "),v2e=a("code"),f_r=o("model_type"),m_r=o(` property of the config object (either
passed as an argument or loaded from `),F2e=a("code"),g_r=o("pretrained_model_name_or_path"),h_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=a("code"),p_r=o("pretrained_model_name_or_path"),u_r=o(":"),__r=l(),Z=a("ul"),j7=a("li"),M2e=a("strong"),b_r=o("albert"),v_r=o(" \u2014 "),cW=a("a"),F_r=o("TFAlbertForSequenceClassification"),T_r=o(" (ALBERT model)"),M_r=l(),D7=a("li"),E2e=a("strong"),E_r=o("bert"),C_r=o(" \u2014 "),fW=a("a"),w_r=o("TFBertForSequenceClassification"),A_r=o(" (BERT model)"),y_r=l(),G7=a("li"),C2e=a("strong"),L_r=o("camembert"),x_r=o(" \u2014 "),mW=a("a"),$_r=o("TFCamembertForSequenceClassification"),k_r=o(" (CamemBERT model)"),S_r=l(),O7=a("li"),w2e=a("strong"),R_r=o("convbert"),B_r=o(" \u2014 "),gW=a("a"),P_r=o("TFConvBertForSequenceClassification"),I_r=o(" (ConvBERT model)"),q_r=l(),V7=a("li"),A2e=a("strong"),N_r=o("ctrl"),j_r=o(" \u2014 "),hW=a("a"),D_r=o("TFCTRLForSequenceClassification"),G_r=o(" (CTRL model)"),O_r=l(),X7=a("li"),y2e=a("strong"),V_r=o("deberta"),X_r=o(" \u2014 "),pW=a("a"),z_r=o("TFDebertaForSequenceClassification"),Q_r=o(" (DeBERTa model)"),W_r=l(),z7=a("li"),L2e=a("strong"),H_r=o("deberta-v2"),U_r=o(" \u2014 "),uW=a("a"),J_r=o("TFDebertaV2ForSequenceClassification"),Y_r=o(" (DeBERTa-v2 model)"),K_r=l(),Q7=a("li"),x2e=a("strong"),Z_r=o("distilbert"),e1r=o(" \u2014 "),_W=a("a"),o1r=o("TFDistilBertForSequenceClassification"),r1r=o(" (DistilBERT model)"),t1r=l(),W7=a("li"),$2e=a("strong"),a1r=o("electra"),n1r=o(" \u2014 "),bW=a("a"),s1r=o("TFElectraForSequenceClassification"),l1r=o(" (ELECTRA model)"),i1r=l(),H7=a("li"),k2e=a("strong"),d1r=o("flaubert"),c1r=o(" \u2014 "),vW=a("a"),f1r=o("TFFlaubertForSequenceClassification"),m1r=o(" (FlauBERT model)"),g1r=l(),U7=a("li"),S2e=a("strong"),h1r=o("funnel"),p1r=o(" \u2014 "),FW=a("a"),u1r=o("TFFunnelForSequenceClassification"),_1r=o(" (Funnel Transformer model)"),b1r=l(),J7=a("li"),R2e=a("strong"),v1r=o("gpt2"),F1r=o(" \u2014 "),TW=a("a"),T1r=o("TFGPT2ForSequenceClassification"),M1r=o(" (OpenAI GPT-2 model)"),E1r=l(),Y7=a("li"),B2e=a("strong"),C1r=o("gptj"),w1r=o(" \u2014 "),MW=a("a"),A1r=o("TFGPTJForSequenceClassification"),y1r=o(" (GPT-J model)"),L1r=l(),K7=a("li"),P2e=a("strong"),x1r=o("layoutlm"),$1r=o(" \u2014 "),EW=a("a"),k1r=o("TFLayoutLMForSequenceClassification"),S1r=o(" (LayoutLM model)"),R1r=l(),Z7=a("li"),I2e=a("strong"),B1r=o("longformer"),P1r=o(" \u2014 "),CW=a("a"),I1r=o("TFLongformerForSequenceClassification"),q1r=o(" (Longformer model)"),N1r=l(),e9=a("li"),q2e=a("strong"),j1r=o("mobilebert"),D1r=o(" \u2014 "),wW=a("a"),G1r=o("TFMobileBertForSequenceClassification"),O1r=o(" (MobileBERT model)"),V1r=l(),o9=a("li"),N2e=a("strong"),X1r=o("mpnet"),z1r=o(" \u2014 "),AW=a("a"),Q1r=o("TFMPNetForSequenceClassification"),W1r=o(" (MPNet model)"),H1r=l(),r9=a("li"),j2e=a("strong"),U1r=o("openai-gpt"),J1r=o(" \u2014 "),yW=a("a"),Y1r=o("TFOpenAIGPTForSequenceClassification"),K1r=o(" (OpenAI GPT model)"),Z1r=l(),t9=a("li"),D2e=a("strong"),ebr=o("rembert"),obr=o(" \u2014 "),LW=a("a"),rbr=o("TFRemBertForSequenceClassification"),tbr=o(" (RemBERT model)"),abr=l(),a9=a("li"),G2e=a("strong"),nbr=o("roberta"),sbr=o(" \u2014 "),xW=a("a"),lbr=o("TFRobertaForSequenceClassification"),ibr=o(" (RoBERTa model)"),dbr=l(),n9=a("li"),O2e=a("strong"),cbr=o("roformer"),fbr=o(" \u2014 "),$W=a("a"),mbr=o("TFRoFormerForSequenceClassification"),gbr=o(" (RoFormer model)"),hbr=l(),s9=a("li"),V2e=a("strong"),pbr=o("tapas"),ubr=o(" \u2014 "),kW=a("a"),_br=o("TFTapasForSequenceClassification"),bbr=o(" (TAPAS model)"),vbr=l(),l9=a("li"),X2e=a("strong"),Fbr=o("transfo-xl"),Tbr=o(" \u2014 "),SW=a("a"),Mbr=o("TFTransfoXLForSequenceClassification"),Ebr=o(" (Transformer-XL model)"),Cbr=l(),i9=a("li"),z2e=a("strong"),wbr=o("xlm"),Abr=o(" \u2014 "),RW=a("a"),ybr=o("TFXLMForSequenceClassification"),Lbr=o(" (XLM model)"),xbr=l(),d9=a("li"),Q2e=a("strong"),$br=o("xlm-roberta"),kbr=o(" \u2014 "),BW=a("a"),Sbr=o("TFXLMRobertaForSequenceClassification"),Rbr=o(" (XLM-RoBERTa model)"),Bbr=l(),c9=a("li"),W2e=a("strong"),Pbr=o("xlnet"),Ibr=o(" \u2014 "),PW=a("a"),qbr=o("TFXLNetForSequenceClassification"),Nbr=o(" (XLNet model)"),jbr=l(),F(f9.$$.fragment),AIe=l(),nc=a("h2"),m9=a("a"),H2e=a("span"),F(aL.$$.fragment),Dbr=l(),U2e=a("span"),Gbr=o("TFAutoModelForMultipleChoice"),yIe=l(),ar=a("div"),F(nL.$$.fragment),Obr=l(),sc=a("p"),Vbr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=a("a"),Xbr=o("from_pretrained()"),zbr=o(" class method or the "),qW=a("a"),Qbr=o("from_config()"),Wbr=o(` class
method.`),Hbr=l(),sL=a("p"),Ubr=o("This class cannot be instantiated directly using "),J2e=a("code"),Jbr=o("__init__()"),Ybr=o(" (throws an error)."),Kbr=l(),St=a("div"),F(lL.$$.fragment),Zbr=l(),Y2e=a("p"),e2r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),o2r=l(),lc=a("p"),r2r=o(`Note:
Loading a model from its configuration file does `),K2e=a("strong"),t2r=o("not"),a2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=a("a"),n2r=o("from_pretrained()"),s2r=o(" to load the model weights."),l2r=l(),F(g9.$$.fragment),i2r=l(),Sr=a("div"),F(iL.$$.fragment),d2r=l(),Z2e=a("p"),c2r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),f2r=l(),nn=a("p"),m2r=o("The model class to instantiate is selected based on the "),eve=a("code"),g2r=o("model_type"),h2r=o(` property of the config object (either
passed as an argument or loaded from `),ove=a("code"),p2r=o("pretrained_model_name_or_path"),u2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=a("code"),_2r=o("pretrained_model_name_or_path"),b2r=o(":"),v2r=l(),pe=a("ul"),h9=a("li"),tve=a("strong"),F2r=o("albert"),T2r=o(" \u2014 "),jW=a("a"),M2r=o("TFAlbertForMultipleChoice"),E2r=o(" (ALBERT model)"),C2r=l(),p9=a("li"),ave=a("strong"),w2r=o("bert"),A2r=o(" \u2014 "),DW=a("a"),y2r=o("TFBertForMultipleChoice"),L2r=o(" (BERT model)"),x2r=l(),u9=a("li"),nve=a("strong"),$2r=o("camembert"),k2r=o(" \u2014 "),GW=a("a"),S2r=o("TFCamembertForMultipleChoice"),R2r=o(" (CamemBERT model)"),B2r=l(),_9=a("li"),sve=a("strong"),P2r=o("convbert"),I2r=o(" \u2014 "),OW=a("a"),q2r=o("TFConvBertForMultipleChoice"),N2r=o(" (ConvBERT model)"),j2r=l(),b9=a("li"),lve=a("strong"),D2r=o("distilbert"),G2r=o(" \u2014 "),VW=a("a"),O2r=o("TFDistilBertForMultipleChoice"),V2r=o(" (DistilBERT model)"),X2r=l(),v9=a("li"),ive=a("strong"),z2r=o("electra"),Q2r=o(" \u2014 "),XW=a("a"),W2r=o("TFElectraForMultipleChoice"),H2r=o(" (ELECTRA model)"),U2r=l(),F9=a("li"),dve=a("strong"),J2r=o("flaubert"),Y2r=o(" \u2014 "),zW=a("a"),K2r=o("TFFlaubertForMultipleChoice"),Z2r=o(" (FlauBERT model)"),evr=l(),T9=a("li"),cve=a("strong"),ovr=o("funnel"),rvr=o(" \u2014 "),QW=a("a"),tvr=o("TFFunnelForMultipleChoice"),avr=o(" (Funnel Transformer model)"),nvr=l(),M9=a("li"),fve=a("strong"),svr=o("longformer"),lvr=o(" \u2014 "),WW=a("a"),ivr=o("TFLongformerForMultipleChoice"),dvr=o(" (Longformer model)"),cvr=l(),E9=a("li"),mve=a("strong"),fvr=o("mobilebert"),mvr=o(" \u2014 "),HW=a("a"),gvr=o("TFMobileBertForMultipleChoice"),hvr=o(" (MobileBERT model)"),pvr=l(),C9=a("li"),gve=a("strong"),uvr=o("mpnet"),_vr=o(" \u2014 "),UW=a("a"),bvr=o("TFMPNetForMultipleChoice"),vvr=o(" (MPNet model)"),Fvr=l(),w9=a("li"),hve=a("strong"),Tvr=o("rembert"),Mvr=o(" \u2014 "),JW=a("a"),Evr=o("TFRemBertForMultipleChoice"),Cvr=o(" (RemBERT model)"),wvr=l(),A9=a("li"),pve=a("strong"),Avr=o("roberta"),yvr=o(" \u2014 "),YW=a("a"),Lvr=o("TFRobertaForMultipleChoice"),xvr=o(" (RoBERTa model)"),$vr=l(),y9=a("li"),uve=a("strong"),kvr=o("roformer"),Svr=o(" \u2014 "),KW=a("a"),Rvr=o("TFRoFormerForMultipleChoice"),Bvr=o(" (RoFormer model)"),Pvr=l(),L9=a("li"),_ve=a("strong"),Ivr=o("xlm"),qvr=o(" \u2014 "),ZW=a("a"),Nvr=o("TFXLMForMultipleChoice"),jvr=o(" (XLM model)"),Dvr=l(),x9=a("li"),bve=a("strong"),Gvr=o("xlm-roberta"),Ovr=o(" \u2014 "),eH=a("a"),Vvr=o("TFXLMRobertaForMultipleChoice"),Xvr=o(" (XLM-RoBERTa model)"),zvr=l(),$9=a("li"),vve=a("strong"),Qvr=o("xlnet"),Wvr=o(" \u2014 "),oH=a("a"),Hvr=o("TFXLNetForMultipleChoice"),Uvr=o(" (XLNet model)"),Jvr=l(),F(k9.$$.fragment),LIe=l(),ic=a("h2"),S9=a("a"),Fve=a("span"),F(dL.$$.fragment),Yvr=l(),Tve=a("span"),Kvr=o("TFAutoModelForNextSentencePrediction"),xIe=l(),nr=a("div"),F(cL.$$.fragment),Zvr=l(),dc=a("p"),eFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rH=a("a"),oFr=o("from_pretrained()"),rFr=o(" class method or the "),tH=a("a"),tFr=o("from_config()"),aFr=o(` class
method.`),nFr=l(),fL=a("p"),sFr=o("This class cannot be instantiated directly using "),Mve=a("code"),lFr=o("__init__()"),iFr=o(" (throws an error)."),dFr=l(),Rt=a("div"),F(mL.$$.fragment),cFr=l(),Eve=a("p"),fFr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),mFr=l(),cc=a("p"),gFr=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),hFr=o("not"),pFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=a("a"),uFr=o("from_pretrained()"),_Fr=o(" to load the model weights."),bFr=l(),F(R9.$$.fragment),vFr=l(),Rr=a("div"),F(gL.$$.fragment),FFr=l(),wve=a("p"),TFr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),MFr=l(),sn=a("p"),EFr=o("The model class to instantiate is selected based on the "),Ave=a("code"),CFr=o("model_type"),wFr=o(` property of the config object (either
passed as an argument or loaded from `),yve=a("code"),AFr=o("pretrained_model_name_or_path"),yFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),LFr=o("pretrained_model_name_or_path"),xFr=o(":"),$Fr=l(),hL=a("ul"),B9=a("li"),xve=a("strong"),kFr=o("bert"),SFr=o(" \u2014 "),nH=a("a"),RFr=o("TFBertForNextSentencePrediction"),BFr=o(" (BERT model)"),PFr=l(),P9=a("li"),$ve=a("strong"),IFr=o("mobilebert"),qFr=o(" \u2014 "),sH=a("a"),NFr=o("TFMobileBertForNextSentencePrediction"),jFr=o(" (MobileBERT model)"),DFr=l(),F(I9.$$.fragment),$Ie=l(),fc=a("h2"),q9=a("a"),kve=a("span"),F(pL.$$.fragment),GFr=l(),Sve=a("span"),OFr=o("TFAutoModelForTableQuestionAnswering"),kIe=l(),sr=a("div"),F(uL.$$.fragment),VFr=l(),mc=a("p"),XFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lH=a("a"),zFr=o("from_pretrained()"),QFr=o(" class method or the "),iH=a("a"),WFr=o("from_config()"),HFr=o(` class
method.`),UFr=l(),_L=a("p"),JFr=o("This class cannot be instantiated directly using "),Rve=a("code"),YFr=o("__init__()"),KFr=o(" (throws an error)."),ZFr=l(),Bt=a("div"),F(bL.$$.fragment),e0r=l(),Bve=a("p"),o0r=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),r0r=l(),gc=a("p"),t0r=o(`Note:
Loading a model from its configuration file does `),Pve=a("strong"),a0r=o("not"),n0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=a("a"),s0r=o("from_pretrained()"),l0r=o(" to load the model weights."),i0r=l(),F(N9.$$.fragment),d0r=l(),Br=a("div"),F(vL.$$.fragment),c0r=l(),Ive=a("p"),f0r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),m0r=l(),ln=a("p"),g0r=o("The model class to instantiate is selected based on the "),qve=a("code"),h0r=o("model_type"),p0r=o(` property of the config object (either
passed as an argument or loaded from `),Nve=a("code"),u0r=o("pretrained_model_name_or_path"),_0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=a("code"),b0r=o("pretrained_model_name_or_path"),v0r=o(":"),F0r=l(),Dve=a("ul"),j9=a("li"),Gve=a("strong"),T0r=o("tapas"),M0r=o(" \u2014 "),cH=a("a"),E0r=o("TFTapasForQuestionAnswering"),C0r=o(" (TAPAS model)"),w0r=l(),F(D9.$$.fragment),SIe=l(),hc=a("h2"),G9=a("a"),Ove=a("span"),F(FL.$$.fragment),A0r=l(),Vve=a("span"),y0r=o("TFAutoModelForTokenClassification"),RIe=l(),lr=a("div"),F(TL.$$.fragment),L0r=l(),pc=a("p"),x0r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=a("a"),$0r=o("from_pretrained()"),k0r=o(" class method or the "),mH=a("a"),S0r=o("from_config()"),R0r=o(` class
method.`),B0r=l(),ML=a("p"),P0r=o("This class cannot be instantiated directly using "),Xve=a("code"),I0r=o("__init__()"),q0r=o(" (throws an error)."),N0r=l(),Pt=a("div"),F(EL.$$.fragment),j0r=l(),zve=a("p"),D0r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),G0r=l(),uc=a("p"),O0r=o(`Note:
Loading a model from its configuration file does `),Qve=a("strong"),V0r=o("not"),X0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=a("a"),z0r=o("from_pretrained()"),Q0r=o(" to load the model weights."),W0r=l(),F(O9.$$.fragment),H0r=l(),Pr=a("div"),F(CL.$$.fragment),U0r=l(),Wve=a("p"),J0r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Y0r=l(),dn=a("p"),K0r=o("The model class to instantiate is selected based on the "),Hve=a("code"),Z0r=o("model_type"),e6r=o(` property of the config object (either
passed as an argument or loaded from `),Uve=a("code"),o6r=o("pretrained_model_name_or_path"),r6r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=a("code"),t6r=o("pretrained_model_name_or_path"),a6r=o(":"),n6r=l(),de=a("ul"),V9=a("li"),Yve=a("strong"),s6r=o("albert"),l6r=o(" \u2014 "),hH=a("a"),i6r=o("TFAlbertForTokenClassification"),d6r=o(" (ALBERT model)"),c6r=l(),X9=a("li"),Kve=a("strong"),f6r=o("bert"),m6r=o(" \u2014 "),pH=a("a"),g6r=o("TFBertForTokenClassification"),h6r=o(" (BERT model)"),p6r=l(),z9=a("li"),Zve=a("strong"),u6r=o("camembert"),_6r=o(" \u2014 "),uH=a("a"),b6r=o("TFCamembertForTokenClassification"),v6r=o(" (CamemBERT model)"),F6r=l(),Q9=a("li"),eFe=a("strong"),T6r=o("convbert"),M6r=o(" \u2014 "),_H=a("a"),E6r=o("TFConvBertForTokenClassification"),C6r=o(" (ConvBERT model)"),w6r=l(),W9=a("li"),oFe=a("strong"),A6r=o("deberta"),y6r=o(" \u2014 "),bH=a("a"),L6r=o("TFDebertaForTokenClassification"),x6r=o(" (DeBERTa model)"),$6r=l(),H9=a("li"),rFe=a("strong"),k6r=o("deberta-v2"),S6r=o(" \u2014 "),vH=a("a"),R6r=o("TFDebertaV2ForTokenClassification"),B6r=o(" (DeBERTa-v2 model)"),P6r=l(),U9=a("li"),tFe=a("strong"),I6r=o("distilbert"),q6r=o(" \u2014 "),FH=a("a"),N6r=o("TFDistilBertForTokenClassification"),j6r=o(" (DistilBERT model)"),D6r=l(),J9=a("li"),aFe=a("strong"),G6r=o("electra"),O6r=o(" \u2014 "),TH=a("a"),V6r=o("TFElectraForTokenClassification"),X6r=o(" (ELECTRA model)"),z6r=l(),Y9=a("li"),nFe=a("strong"),Q6r=o("flaubert"),W6r=o(" \u2014 "),MH=a("a"),H6r=o("TFFlaubertForTokenClassification"),U6r=o(" (FlauBERT model)"),J6r=l(),K9=a("li"),sFe=a("strong"),Y6r=o("funnel"),K6r=o(" \u2014 "),EH=a("a"),Z6r=o("TFFunnelForTokenClassification"),eTr=o(" (Funnel Transformer model)"),oTr=l(),Z9=a("li"),lFe=a("strong"),rTr=o("layoutlm"),tTr=o(" \u2014 "),CH=a("a"),aTr=o("TFLayoutLMForTokenClassification"),nTr=o(" (LayoutLM model)"),sTr=l(),eM=a("li"),iFe=a("strong"),lTr=o("longformer"),iTr=o(" \u2014 "),wH=a("a"),dTr=o("TFLongformerForTokenClassification"),cTr=o(" (Longformer model)"),fTr=l(),oM=a("li"),dFe=a("strong"),mTr=o("mobilebert"),gTr=o(" \u2014 "),AH=a("a"),hTr=o("TFMobileBertForTokenClassification"),pTr=o(" (MobileBERT model)"),uTr=l(),rM=a("li"),cFe=a("strong"),_Tr=o("mpnet"),bTr=o(" \u2014 "),yH=a("a"),vTr=o("TFMPNetForTokenClassification"),FTr=o(" (MPNet model)"),TTr=l(),tM=a("li"),fFe=a("strong"),MTr=o("rembert"),ETr=o(" \u2014 "),LH=a("a"),CTr=o("TFRemBertForTokenClassification"),wTr=o(" (RemBERT model)"),ATr=l(),aM=a("li"),mFe=a("strong"),yTr=o("roberta"),LTr=o(" \u2014 "),xH=a("a"),xTr=o("TFRobertaForTokenClassification"),$Tr=o(" (RoBERTa model)"),kTr=l(),nM=a("li"),gFe=a("strong"),STr=o("roformer"),RTr=o(" \u2014 "),$H=a("a"),BTr=o("TFRoFormerForTokenClassification"),PTr=o(" (RoFormer model)"),ITr=l(),sM=a("li"),hFe=a("strong"),qTr=o("xlm"),NTr=o(" \u2014 "),kH=a("a"),jTr=o("TFXLMForTokenClassification"),DTr=o(" (XLM model)"),GTr=l(),lM=a("li"),pFe=a("strong"),OTr=o("xlm-roberta"),VTr=o(" \u2014 "),SH=a("a"),XTr=o("TFXLMRobertaForTokenClassification"),zTr=o(" (XLM-RoBERTa model)"),QTr=l(),iM=a("li"),uFe=a("strong"),WTr=o("xlnet"),HTr=o(" \u2014 "),RH=a("a"),UTr=o("TFXLNetForTokenClassification"),JTr=o(" (XLNet model)"),YTr=l(),F(dM.$$.fragment),BIe=l(),_c=a("h2"),cM=a("a"),_Fe=a("span"),F(wL.$$.fragment),KTr=l(),bFe=a("span"),ZTr=o("TFAutoModelForQuestionAnswering"),PIe=l(),ir=a("div"),F(AL.$$.fragment),e7r=l(),bc=a("p"),o7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BH=a("a"),r7r=o("from_pretrained()"),t7r=o(" class method or the "),PH=a("a"),a7r=o("from_config()"),n7r=o(` class
method.`),s7r=l(),yL=a("p"),l7r=o("This class cannot be instantiated directly using "),vFe=a("code"),i7r=o("__init__()"),d7r=o(" (throws an error)."),c7r=l(),It=a("div"),F(LL.$$.fragment),f7r=l(),FFe=a("p"),m7r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g7r=l(),vc=a("p"),h7r=o(`Note:
Loading a model from its configuration file does `),TFe=a("strong"),p7r=o("not"),u7r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=a("a"),_7r=o("from_pretrained()"),b7r=o(" to load the model weights."),v7r=l(),F(fM.$$.fragment),F7r=l(),Ir=a("div"),F(xL.$$.fragment),T7r=l(),MFe=a("p"),M7r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),E7r=l(),cn=a("p"),C7r=o("The model class to instantiate is selected based on the "),EFe=a("code"),w7r=o("model_type"),A7r=o(` property of the config object (either
passed as an argument or loaded from `),CFe=a("code"),y7r=o("pretrained_model_name_or_path"),L7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=a("code"),x7r=o("pretrained_model_name_or_path"),$7r=o(":"),k7r=l(),ce=a("ul"),mM=a("li"),AFe=a("strong"),S7r=o("albert"),R7r=o(" \u2014 "),qH=a("a"),B7r=o("TFAlbertForQuestionAnswering"),P7r=o(" (ALBERT model)"),I7r=l(),gM=a("li"),yFe=a("strong"),q7r=o("bert"),N7r=o(" \u2014 "),NH=a("a"),j7r=o("TFBertForQuestionAnswering"),D7r=o(" (BERT model)"),G7r=l(),hM=a("li"),LFe=a("strong"),O7r=o("camembert"),V7r=o(" \u2014 "),jH=a("a"),X7r=o("TFCamembertForQuestionAnswering"),z7r=o(" (CamemBERT model)"),Q7r=l(),pM=a("li"),xFe=a("strong"),W7r=o("convbert"),H7r=o(" \u2014 "),DH=a("a"),U7r=o("TFConvBertForQuestionAnswering"),J7r=o(" (ConvBERT model)"),Y7r=l(),uM=a("li"),$Fe=a("strong"),K7r=o("deberta"),Z7r=o(" \u2014 "),GH=a("a"),e9r=o("TFDebertaForQuestionAnswering"),o9r=o(" (DeBERTa model)"),r9r=l(),_M=a("li"),kFe=a("strong"),t9r=o("deberta-v2"),a9r=o(" \u2014 "),OH=a("a"),n9r=o("TFDebertaV2ForQuestionAnswering"),s9r=o(" (DeBERTa-v2 model)"),l9r=l(),bM=a("li"),SFe=a("strong"),i9r=o("distilbert"),d9r=o(" \u2014 "),VH=a("a"),c9r=o("TFDistilBertForQuestionAnswering"),f9r=o(" (DistilBERT model)"),m9r=l(),vM=a("li"),RFe=a("strong"),g9r=o("electra"),h9r=o(" \u2014 "),XH=a("a"),p9r=o("TFElectraForQuestionAnswering"),u9r=o(" (ELECTRA model)"),_9r=l(),FM=a("li"),BFe=a("strong"),b9r=o("flaubert"),v9r=o(" \u2014 "),zH=a("a"),F9r=o("TFFlaubertForQuestionAnsweringSimple"),T9r=o(" (FlauBERT model)"),M9r=l(),TM=a("li"),PFe=a("strong"),E9r=o("funnel"),C9r=o(" \u2014 "),QH=a("a"),w9r=o("TFFunnelForQuestionAnswering"),A9r=o(" (Funnel Transformer model)"),y9r=l(),MM=a("li"),IFe=a("strong"),L9r=o("gptj"),x9r=o(" \u2014 "),WH=a("a"),$9r=o("TFGPTJForQuestionAnswering"),k9r=o(" (GPT-J model)"),S9r=l(),EM=a("li"),qFe=a("strong"),R9r=o("longformer"),B9r=o(" \u2014 "),HH=a("a"),P9r=o("TFLongformerForQuestionAnswering"),I9r=o(" (Longformer model)"),q9r=l(),CM=a("li"),NFe=a("strong"),N9r=o("mobilebert"),j9r=o(" \u2014 "),UH=a("a"),D9r=o("TFMobileBertForQuestionAnswering"),G9r=o(" (MobileBERT model)"),O9r=l(),wM=a("li"),jFe=a("strong"),V9r=o("mpnet"),X9r=o(" \u2014 "),JH=a("a"),z9r=o("TFMPNetForQuestionAnswering"),Q9r=o(" (MPNet model)"),W9r=l(),AM=a("li"),DFe=a("strong"),H9r=o("rembert"),U9r=o(" \u2014 "),YH=a("a"),J9r=o("TFRemBertForQuestionAnswering"),Y9r=o(" (RemBERT model)"),K9r=l(),yM=a("li"),GFe=a("strong"),Z9r=o("roberta"),eMr=o(" \u2014 "),KH=a("a"),oMr=o("TFRobertaForQuestionAnswering"),rMr=o(" (RoBERTa model)"),tMr=l(),LM=a("li"),OFe=a("strong"),aMr=o("roformer"),nMr=o(" \u2014 "),ZH=a("a"),sMr=o("TFRoFormerForQuestionAnswering"),lMr=o(" (RoFormer model)"),iMr=l(),xM=a("li"),VFe=a("strong"),dMr=o("xlm"),cMr=o(" \u2014 "),eU=a("a"),fMr=o("TFXLMForQuestionAnsweringSimple"),mMr=o(" (XLM model)"),gMr=l(),$M=a("li"),XFe=a("strong"),hMr=o("xlm-roberta"),pMr=o(" \u2014 "),oU=a("a"),uMr=o("TFXLMRobertaForQuestionAnswering"),_Mr=o(" (XLM-RoBERTa model)"),bMr=l(),kM=a("li"),zFe=a("strong"),vMr=o("xlnet"),FMr=o(" \u2014 "),rU=a("a"),TMr=o("TFXLNetForQuestionAnsweringSimple"),MMr=o(" (XLNet model)"),EMr=l(),F(SM.$$.fragment),IIe=l(),Fc=a("h2"),RM=a("a"),QFe=a("span"),F($L.$$.fragment),CMr=l(),WFe=a("span"),wMr=o("TFAutoModelForVision2Seq"),qIe=l(),dr=a("div"),F(kL.$$.fragment),AMr=l(),Tc=a("p"),yMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tU=a("a"),LMr=o("from_pretrained()"),xMr=o(" class method or the "),aU=a("a"),$Mr=o("from_config()"),kMr=o(` class
method.`),SMr=l(),SL=a("p"),RMr=o("This class cannot be instantiated directly using "),HFe=a("code"),BMr=o("__init__()"),PMr=o(" (throws an error)."),IMr=l(),qt=a("div"),F(RL.$$.fragment),qMr=l(),UFe=a("p"),NMr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jMr=l(),Mc=a("p"),DMr=o(`Note:
Loading a model from its configuration file does `),JFe=a("strong"),GMr=o("not"),OMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=a("a"),VMr=o("from_pretrained()"),XMr=o(" to load the model weights."),zMr=l(),F(BM.$$.fragment),QMr=l(),qr=a("div"),F(BL.$$.fragment),WMr=l(),YFe=a("p"),HMr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UMr=l(),fn=a("p"),JMr=o("The model class to instantiate is selected based on the "),KFe=a("code"),YMr=o("model_type"),KMr=o(` property of the config object (either
passed as an argument or loaded from `),ZFe=a("code"),ZMr=o("pretrained_model_name_or_path"),e4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=a("code"),o4r=o("pretrained_model_name_or_path"),r4r=o(":"),t4r=l(),o0e=a("ul"),PM=a("li"),r0e=a("strong"),a4r=o("vision-encoder-decoder"),n4r=o(" \u2014 "),sU=a("a"),s4r=o("TFVisionEncoderDecoderModel"),l4r=o(" (Vision Encoder decoder model)"),i4r=l(),F(IM.$$.fragment),NIe=l(),Ec=a("h2"),qM=a("a"),t0e=a("span"),F(PL.$$.fragment),d4r=l(),a0e=a("span"),c4r=o("TFAutoModelForSpeechSeq2Seq"),jIe=l(),cr=a("div"),F(IL.$$.fragment),f4r=l(),Cc=a("p"),m4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lU=a("a"),g4r=o("from_pretrained()"),h4r=o(" class method or the "),iU=a("a"),p4r=o("from_config()"),u4r=o(` class
method.`),_4r=l(),qL=a("p"),b4r=o("This class cannot be instantiated directly using "),n0e=a("code"),v4r=o("__init__()"),F4r=o(" (throws an error)."),T4r=l(),Nt=a("div"),F(NL.$$.fragment),M4r=l(),s0e=a("p"),E4r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),C4r=l(),wc=a("p"),w4r=o(`Note:
Loading a model from its configuration file does `),l0e=a("strong"),A4r=o("not"),y4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=a("a"),L4r=o("from_pretrained()"),x4r=o(" to load the model weights."),$4r=l(),F(NM.$$.fragment),k4r=l(),Nr=a("div"),F(jL.$$.fragment),S4r=l(),i0e=a("p"),R4r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),B4r=l(),mn=a("p"),P4r=o("The model class to instantiate is selected based on the "),d0e=a("code"),I4r=o("model_type"),q4r=o(` property of the config object (either
passed as an argument or loaded from `),c0e=a("code"),N4r=o("pretrained_model_name_or_path"),j4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=a("code"),D4r=o("pretrained_model_name_or_path"),G4r=o(":"),O4r=l(),m0e=a("ul"),jM=a("li"),g0e=a("strong"),V4r=o("speech_to_text"),X4r=o(" \u2014 "),cU=a("a"),z4r=o("TFSpeech2TextForConditionalGeneration"),Q4r=o(" (Speech2Text model)"),W4r=l(),F(DM.$$.fragment),DIe=l(),Ac=a("h2"),GM=a("a"),h0e=a("span"),F(DL.$$.fragment),H4r=l(),p0e=a("span"),U4r=o("FlaxAutoModel"),GIe=l(),fr=a("div"),F(GL.$$.fragment),J4r=l(),yc=a("p"),Y4r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fU=a("a"),K4r=o("from_pretrained()"),Z4r=o(" class method or the "),mU=a("a"),eEr=o("from_config()"),oEr=o(` class
method.`),rEr=l(),OL=a("p"),tEr=o("This class cannot be instantiated directly using "),u0e=a("code"),aEr=o("__init__()"),nEr=o(" (throws an error)."),sEr=l(),jt=a("div"),F(VL.$$.fragment),lEr=l(),_0e=a("p"),iEr=o("Instantiates one of the base model classes of the library from a configuration."),dEr=l(),Lc=a("p"),cEr=o(`Note:
Loading a model from its configuration file does `),b0e=a("strong"),fEr=o("not"),mEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=a("a"),gEr=o("from_pretrained()"),hEr=o(" to load the model weights."),pEr=l(),F(OM.$$.fragment),uEr=l(),jr=a("div"),F(XL.$$.fragment),_Er=l(),v0e=a("p"),bEr=o("Instantiate one of the base model classes of the library from a pretrained model."),vEr=l(),gn=a("p"),FEr=o("The model class to instantiate is selected based on the "),F0e=a("code"),TEr=o("model_type"),MEr=o(` property of the config object (either
passed as an argument or loaded from `),T0e=a("code"),EEr=o("pretrained_model_name_or_path"),CEr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=a("code"),wEr=o("pretrained_model_name_or_path"),AEr=o(":"),yEr=l(),oe=a("ul"),VM=a("li"),E0e=a("strong"),LEr=o("albert"),xEr=o(" \u2014 "),hU=a("a"),$Er=o("FlaxAlbertModel"),kEr=o(" (ALBERT model)"),SEr=l(),XM=a("li"),C0e=a("strong"),REr=o("bart"),BEr=o(" \u2014 "),pU=a("a"),PEr=o("FlaxBartModel"),IEr=o(" (BART model)"),qEr=l(),zM=a("li"),w0e=a("strong"),NEr=o("beit"),jEr=o(" \u2014 "),uU=a("a"),DEr=o("FlaxBeitModel"),GEr=o(" (BEiT model)"),OEr=l(),QM=a("li"),A0e=a("strong"),VEr=o("bert"),XEr=o(" \u2014 "),_U=a("a"),zEr=o("FlaxBertModel"),QEr=o(" (BERT model)"),WEr=l(),WM=a("li"),y0e=a("strong"),HEr=o("big_bird"),UEr=o(" \u2014 "),bU=a("a"),JEr=o("FlaxBigBirdModel"),YEr=o(" (BigBird model)"),KEr=l(),HM=a("li"),L0e=a("strong"),ZEr=o("blenderbot"),e5r=o(" \u2014 "),vU=a("a"),o5r=o("FlaxBlenderbotModel"),r5r=o(" (Blenderbot model)"),t5r=l(),UM=a("li"),x0e=a("strong"),a5r=o("blenderbot-small"),n5r=o(" \u2014 "),FU=a("a"),s5r=o("FlaxBlenderbotSmallModel"),l5r=o(" (BlenderbotSmall model)"),i5r=l(),JM=a("li"),$0e=a("strong"),d5r=o("clip"),c5r=o(" \u2014 "),TU=a("a"),f5r=o("FlaxCLIPModel"),m5r=o(" (CLIP model)"),g5r=l(),YM=a("li"),k0e=a("strong"),h5r=o("distilbert"),p5r=o(" \u2014 "),MU=a("a"),u5r=o("FlaxDistilBertModel"),_5r=o(" (DistilBERT model)"),b5r=l(),KM=a("li"),S0e=a("strong"),v5r=o("electra"),F5r=o(" \u2014 "),EU=a("a"),T5r=o("FlaxElectraModel"),M5r=o(" (ELECTRA model)"),E5r=l(),ZM=a("li"),R0e=a("strong"),C5r=o("gpt2"),w5r=o(" \u2014 "),CU=a("a"),A5r=o("FlaxGPT2Model"),y5r=o(" (OpenAI GPT-2 model)"),L5r=l(),e4=a("li"),B0e=a("strong"),x5r=o("gpt_neo"),$5r=o(" \u2014 "),wU=a("a"),k5r=o("FlaxGPTNeoModel"),S5r=o(" (GPT Neo model)"),R5r=l(),o4=a("li"),P0e=a("strong"),B5r=o("gptj"),P5r=o(" \u2014 "),AU=a("a"),I5r=o("FlaxGPTJModel"),q5r=o(" (GPT-J model)"),N5r=l(),r4=a("li"),I0e=a("strong"),j5r=o("marian"),D5r=o(" \u2014 "),yU=a("a"),G5r=o("FlaxMarianModel"),O5r=o(" (Marian model)"),V5r=l(),t4=a("li"),q0e=a("strong"),X5r=o("mbart"),z5r=o(" \u2014 "),LU=a("a"),Q5r=o("FlaxMBartModel"),W5r=o(" (mBART model)"),H5r=l(),a4=a("li"),N0e=a("strong"),U5r=o("mt5"),J5r=o(" \u2014 "),xU=a("a"),Y5r=o("FlaxMT5Model"),K5r=o(" (mT5 model)"),Z5r=l(),n4=a("li"),j0e=a("strong"),eCr=o("pegasus"),oCr=o(" \u2014 "),$U=a("a"),rCr=o("FlaxPegasusModel"),tCr=o(" (Pegasus model)"),aCr=l(),s4=a("li"),D0e=a("strong"),nCr=o("roberta"),sCr=o(" \u2014 "),kU=a("a"),lCr=o("FlaxRobertaModel"),iCr=o(" (RoBERTa model)"),dCr=l(),l4=a("li"),G0e=a("strong"),cCr=o("roformer"),fCr=o(" \u2014 "),SU=a("a"),mCr=o("FlaxRoFormerModel"),gCr=o(" (RoFormer model)"),hCr=l(),i4=a("li"),O0e=a("strong"),pCr=o("t5"),uCr=o(" \u2014 "),RU=a("a"),_Cr=o("FlaxT5Model"),bCr=o(" (T5 model)"),vCr=l(),d4=a("li"),V0e=a("strong"),FCr=o("vision-text-dual-encoder"),TCr=o(" \u2014 "),BU=a("a"),MCr=o("FlaxVisionTextDualEncoderModel"),ECr=o(" (VisionTextDualEncoder model)"),CCr=l(),c4=a("li"),X0e=a("strong"),wCr=o("vit"),ACr=o(" \u2014 "),PU=a("a"),yCr=o("FlaxViTModel"),LCr=o(" (ViT model)"),xCr=l(),f4=a("li"),z0e=a("strong"),$Cr=o("wav2vec2"),kCr=o(" \u2014 "),IU=a("a"),SCr=o("FlaxWav2Vec2Model"),RCr=o(" (Wav2Vec2 model)"),BCr=l(),m4=a("li"),Q0e=a("strong"),PCr=o("xglm"),ICr=o(" \u2014 "),qU=a("a"),qCr=o("FlaxXGLMModel"),NCr=o(" (XGLM model)"),jCr=l(),g4=a("li"),W0e=a("strong"),DCr=o("xlm-roberta"),GCr=o(" \u2014 "),NU=a("a"),OCr=o("FlaxXLMRobertaModel"),VCr=o(" (XLM-RoBERTa model)"),XCr=l(),F(h4.$$.fragment),OIe=l(),xc=a("h2"),p4=a("a"),H0e=a("span"),F(zL.$$.fragment),zCr=l(),U0e=a("span"),QCr=o("FlaxAutoModelForCausalLM"),VIe=l(),mr=a("div"),F(QL.$$.fragment),WCr=l(),$c=a("p"),HCr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=a("a"),UCr=o("from_pretrained()"),JCr=o(" class method or the "),DU=a("a"),YCr=o("from_config()"),KCr=o(` class
method.`),ZCr=l(),WL=a("p"),e3r=o("This class cannot be instantiated directly using "),J0e=a("code"),o3r=o("__init__()"),r3r=o(" (throws an error)."),t3r=l(),Dt=a("div"),F(HL.$$.fragment),a3r=l(),Y0e=a("p"),n3r=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),s3r=l(),kc=a("p"),l3r=o(`Note:
Loading a model from its configuration file does `),K0e=a("strong"),i3r=o("not"),d3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=a("a"),c3r=o("from_pretrained()"),f3r=o(" to load the model weights."),m3r=l(),F(u4.$$.fragment),g3r=l(),Dr=a("div"),F(UL.$$.fragment),h3r=l(),Z0e=a("p"),p3r=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),u3r=l(),hn=a("p"),_3r=o("The model class to instantiate is selected based on the "),e6e=a("code"),b3r=o("model_type"),v3r=o(` property of the config object (either
passed as an argument or loaded from `),o6e=a("code"),F3r=o("pretrained_model_name_or_path"),T3r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=a("code"),M3r=o("pretrained_model_name_or_path"),E3r=o(":"),C3r=l(),ke=a("ul"),_4=a("li"),t6e=a("strong"),w3r=o("bart"),A3r=o(" \u2014 "),OU=a("a"),y3r=o("FlaxBartForCausalLM"),L3r=o(" (BART model)"),x3r=l(),b4=a("li"),a6e=a("strong"),$3r=o("bert"),k3r=o(" \u2014 "),VU=a("a"),S3r=o("FlaxBertForCausalLM"),R3r=o(" (BERT model)"),B3r=l(),v4=a("li"),n6e=a("strong"),P3r=o("big_bird"),I3r=o(" \u2014 "),XU=a("a"),q3r=o("FlaxBigBirdForCausalLM"),N3r=o(" (BigBird model)"),j3r=l(),F4=a("li"),s6e=a("strong"),D3r=o("electra"),G3r=o(" \u2014 "),zU=a("a"),O3r=o("FlaxElectraForCausalLM"),V3r=o(" (ELECTRA model)"),X3r=l(),T4=a("li"),l6e=a("strong"),z3r=o("gpt2"),Q3r=o(" \u2014 "),QU=a("a"),W3r=o("FlaxGPT2LMHeadModel"),H3r=o(" (OpenAI GPT-2 model)"),U3r=l(),M4=a("li"),i6e=a("strong"),J3r=o("gpt_neo"),Y3r=o(" \u2014 "),WU=a("a"),K3r=o("FlaxGPTNeoForCausalLM"),Z3r=o(" (GPT Neo model)"),ewr=l(),E4=a("li"),d6e=a("strong"),owr=o("gptj"),rwr=o(" \u2014 "),HU=a("a"),twr=o("FlaxGPTJForCausalLM"),awr=o(" (GPT-J model)"),nwr=l(),C4=a("li"),c6e=a("strong"),swr=o("roberta"),lwr=o(" \u2014 "),UU=a("a"),iwr=o("FlaxRobertaForCausalLM"),dwr=o(" (RoBERTa model)"),cwr=l(),w4=a("li"),f6e=a("strong"),fwr=o("xglm"),mwr=o(" \u2014 "),JU=a("a"),gwr=o("FlaxXGLMForCausalLM"),hwr=o(" (XGLM model)"),pwr=l(),F(A4.$$.fragment),XIe=l(),Sc=a("h2"),y4=a("a"),m6e=a("span"),F(JL.$$.fragment),uwr=l(),g6e=a("span"),_wr=o("FlaxAutoModelForPreTraining"),zIe=l(),gr=a("div"),F(YL.$$.fragment),bwr=l(),Rc=a("p"),vwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YU=a("a"),Fwr=o("from_pretrained()"),Twr=o(" class method or the "),KU=a("a"),Mwr=o("from_config()"),Ewr=o(` class
method.`),Cwr=l(),KL=a("p"),wwr=o("This class cannot be instantiated directly using "),h6e=a("code"),Awr=o("__init__()"),ywr=o(" (throws an error)."),Lwr=l(),Gt=a("div"),F(ZL.$$.fragment),xwr=l(),p6e=a("p"),$wr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),kwr=l(),Bc=a("p"),Swr=o(`Note:
Loading a model from its configuration file does `),u6e=a("strong"),Rwr=o("not"),Bwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=a("a"),Pwr=o("from_pretrained()"),Iwr=o(" to load the model weights."),qwr=l(),F(L4.$$.fragment),Nwr=l(),Gr=a("div"),F(e8.$$.fragment),jwr=l(),_6e=a("p"),Dwr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Gwr=l(),pn=a("p"),Owr=o("The model class to instantiate is selected based on the "),b6e=a("code"),Vwr=o("model_type"),Xwr=o(` property of the config object (either
passed as an argument or loaded from `),v6e=a("code"),zwr=o("pretrained_model_name_or_path"),Qwr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=a("code"),Wwr=o("pretrained_model_name_or_path"),Hwr=o(":"),Uwr=l(),Me=a("ul"),x4=a("li"),T6e=a("strong"),Jwr=o("albert"),Ywr=o(" \u2014 "),eJ=a("a"),Kwr=o("FlaxAlbertForPreTraining"),Zwr=o(" (ALBERT model)"),eAr=l(),$4=a("li"),M6e=a("strong"),oAr=o("bart"),rAr=o(" \u2014 "),oJ=a("a"),tAr=o("FlaxBartForConditionalGeneration"),aAr=o(" (BART model)"),nAr=l(),k4=a("li"),E6e=a("strong"),sAr=o("bert"),lAr=o(" \u2014 "),rJ=a("a"),iAr=o("FlaxBertForPreTraining"),dAr=o(" (BERT model)"),cAr=l(),S4=a("li"),C6e=a("strong"),fAr=o("big_bird"),mAr=o(" \u2014 "),tJ=a("a"),gAr=o("FlaxBigBirdForPreTraining"),hAr=o(" (BigBird model)"),pAr=l(),R4=a("li"),w6e=a("strong"),uAr=o("electra"),_Ar=o(" \u2014 "),aJ=a("a"),bAr=o("FlaxElectraForPreTraining"),vAr=o(" (ELECTRA model)"),FAr=l(),B4=a("li"),A6e=a("strong"),TAr=o("mbart"),MAr=o(" \u2014 "),nJ=a("a"),EAr=o("FlaxMBartForConditionalGeneration"),CAr=o(" (mBART model)"),wAr=l(),P4=a("li"),y6e=a("strong"),AAr=o("mt5"),yAr=o(" \u2014 "),sJ=a("a"),LAr=o("FlaxMT5ForConditionalGeneration"),xAr=o(" (mT5 model)"),$Ar=l(),I4=a("li"),L6e=a("strong"),kAr=o("roberta"),SAr=o(" \u2014 "),lJ=a("a"),RAr=o("FlaxRobertaForMaskedLM"),BAr=o(" (RoBERTa model)"),PAr=l(),q4=a("li"),x6e=a("strong"),IAr=o("roformer"),qAr=o(" \u2014 "),iJ=a("a"),NAr=o("FlaxRoFormerForMaskedLM"),jAr=o(" (RoFormer model)"),DAr=l(),N4=a("li"),$6e=a("strong"),GAr=o("t5"),OAr=o(" \u2014 "),dJ=a("a"),VAr=o("FlaxT5ForConditionalGeneration"),XAr=o(" (T5 model)"),zAr=l(),j4=a("li"),k6e=a("strong"),QAr=o("wav2vec2"),WAr=o(" \u2014 "),cJ=a("a"),HAr=o("FlaxWav2Vec2ForPreTraining"),UAr=o(" (Wav2Vec2 model)"),JAr=l(),D4=a("li"),S6e=a("strong"),YAr=o("xlm-roberta"),KAr=o(" \u2014 "),fJ=a("a"),ZAr=o("FlaxXLMRobertaForMaskedLM"),eyr=o(" (XLM-RoBERTa model)"),oyr=l(),F(G4.$$.fragment),QIe=l(),Pc=a("h2"),O4=a("a"),R6e=a("span"),F(o8.$$.fragment),ryr=l(),B6e=a("span"),tyr=o("FlaxAutoModelForMaskedLM"),WIe=l(),hr=a("div"),F(r8.$$.fragment),ayr=l(),Ic=a("p"),nyr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mJ=a("a"),syr=o("from_pretrained()"),lyr=o(" class method or the "),gJ=a("a"),iyr=o("from_config()"),dyr=o(` class
method.`),cyr=l(),t8=a("p"),fyr=o("This class cannot be instantiated directly using "),P6e=a("code"),myr=o("__init__()"),gyr=o(" (throws an error)."),hyr=l(),Ot=a("div"),F(a8.$$.fragment),pyr=l(),I6e=a("p"),uyr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_yr=l(),qc=a("p"),byr=o(`Note:
Loading a model from its configuration file does `),q6e=a("strong"),vyr=o("not"),Fyr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=a("a"),Tyr=o("from_pretrained()"),Myr=o(" to load the model weights."),Eyr=l(),F(V4.$$.fragment),Cyr=l(),Or=a("div"),F(n8.$$.fragment),wyr=l(),N6e=a("p"),Ayr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),yyr=l(),un=a("p"),Lyr=o("The model class to instantiate is selected based on the "),j6e=a("code"),xyr=o("model_type"),$yr=o(` property of the config object (either
passed as an argument or loaded from `),D6e=a("code"),kyr=o("pretrained_model_name_or_path"),Syr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=a("code"),Ryr=o("pretrained_model_name_or_path"),Byr=o(":"),Pyr=l(),Le=a("ul"),X4=a("li"),O6e=a("strong"),Iyr=o("albert"),qyr=o(" \u2014 "),pJ=a("a"),Nyr=o("FlaxAlbertForMaskedLM"),jyr=o(" (ALBERT model)"),Dyr=l(),z4=a("li"),V6e=a("strong"),Gyr=o("bart"),Oyr=o(" \u2014 "),uJ=a("a"),Vyr=o("FlaxBartForConditionalGeneration"),Xyr=o(" (BART model)"),zyr=l(),Q4=a("li"),X6e=a("strong"),Qyr=o("bert"),Wyr=o(" \u2014 "),_J=a("a"),Hyr=o("FlaxBertForMaskedLM"),Uyr=o(" (BERT model)"),Jyr=l(),W4=a("li"),z6e=a("strong"),Yyr=o("big_bird"),Kyr=o(" \u2014 "),bJ=a("a"),Zyr=o("FlaxBigBirdForMaskedLM"),eLr=o(" (BigBird model)"),oLr=l(),H4=a("li"),Q6e=a("strong"),rLr=o("distilbert"),tLr=o(" \u2014 "),vJ=a("a"),aLr=o("FlaxDistilBertForMaskedLM"),nLr=o(" (DistilBERT model)"),sLr=l(),U4=a("li"),W6e=a("strong"),lLr=o("electra"),iLr=o(" \u2014 "),FJ=a("a"),dLr=o("FlaxElectraForMaskedLM"),cLr=o(" (ELECTRA model)"),fLr=l(),J4=a("li"),H6e=a("strong"),mLr=o("mbart"),gLr=o(" \u2014 "),TJ=a("a"),hLr=o("FlaxMBartForConditionalGeneration"),pLr=o(" (mBART model)"),uLr=l(),Y4=a("li"),U6e=a("strong"),_Lr=o("roberta"),bLr=o(" \u2014 "),MJ=a("a"),vLr=o("FlaxRobertaForMaskedLM"),FLr=o(" (RoBERTa model)"),TLr=l(),K4=a("li"),J6e=a("strong"),MLr=o("roformer"),ELr=o(" \u2014 "),EJ=a("a"),CLr=o("FlaxRoFormerForMaskedLM"),wLr=o(" (RoFormer model)"),ALr=l(),Z4=a("li"),Y6e=a("strong"),yLr=o("xlm-roberta"),LLr=o(" \u2014 "),CJ=a("a"),xLr=o("FlaxXLMRobertaForMaskedLM"),$Lr=o(" (XLM-RoBERTa model)"),kLr=l(),F(eE.$$.fragment),HIe=l(),Nc=a("h2"),oE=a("a"),K6e=a("span"),F(s8.$$.fragment),SLr=l(),Z6e=a("span"),RLr=o("FlaxAutoModelForSeq2SeqLM"),UIe=l(),pr=a("div"),F(l8.$$.fragment),BLr=l(),jc=a("p"),PLr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wJ=a("a"),ILr=o("from_pretrained()"),qLr=o(" class method or the "),AJ=a("a"),NLr=o("from_config()"),jLr=o(` class
method.`),DLr=l(),i8=a("p"),GLr=o("This class cannot be instantiated directly using "),eTe=a("code"),OLr=o("__init__()"),VLr=o(" (throws an error)."),XLr=l(),Vt=a("div"),F(d8.$$.fragment),zLr=l(),oTe=a("p"),QLr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WLr=l(),Dc=a("p"),HLr=o(`Note:
Loading a model from its configuration file does `),rTe=a("strong"),ULr=o("not"),JLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=a("a"),YLr=o("from_pretrained()"),KLr=o(" to load the model weights."),ZLr=l(),F(rE.$$.fragment),e8r=l(),Vr=a("div"),F(c8.$$.fragment),o8r=l(),tTe=a("p"),r8r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),t8r=l(),_n=a("p"),a8r=o("The model class to instantiate is selected based on the "),aTe=a("code"),n8r=o("model_type"),s8r=o(` property of the config object (either
passed as an argument or loaded from `),nTe=a("code"),l8r=o("pretrained_model_name_or_path"),i8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=a("code"),d8r=o("pretrained_model_name_or_path"),c8r=o(":"),f8r=l(),Se=a("ul"),tE=a("li"),lTe=a("strong"),m8r=o("bart"),g8r=o(" \u2014 "),LJ=a("a"),h8r=o("FlaxBartForConditionalGeneration"),p8r=o(" (BART model)"),u8r=l(),aE=a("li"),iTe=a("strong"),_8r=o("blenderbot"),b8r=o(" \u2014 "),xJ=a("a"),v8r=o("FlaxBlenderbotForConditionalGeneration"),F8r=o(" (Blenderbot model)"),T8r=l(),nE=a("li"),dTe=a("strong"),M8r=o("blenderbot-small"),E8r=o(" \u2014 "),$J=a("a"),C8r=o("FlaxBlenderbotSmallForConditionalGeneration"),w8r=o(" (BlenderbotSmall model)"),A8r=l(),sE=a("li"),cTe=a("strong"),y8r=o("encoder-decoder"),L8r=o(" \u2014 "),kJ=a("a"),x8r=o("FlaxEncoderDecoderModel"),$8r=o(" (Encoder decoder model)"),k8r=l(),lE=a("li"),fTe=a("strong"),S8r=o("marian"),R8r=o(" \u2014 "),SJ=a("a"),B8r=o("FlaxMarianMTModel"),P8r=o(" (Marian model)"),I8r=l(),iE=a("li"),mTe=a("strong"),q8r=o("mbart"),N8r=o(" \u2014 "),RJ=a("a"),j8r=o("FlaxMBartForConditionalGeneration"),D8r=o(" (mBART model)"),G8r=l(),dE=a("li"),gTe=a("strong"),O8r=o("mt5"),V8r=o(" \u2014 "),BJ=a("a"),X8r=o("FlaxMT5ForConditionalGeneration"),z8r=o(" (mT5 model)"),Q8r=l(),cE=a("li"),hTe=a("strong"),W8r=o("pegasus"),H8r=o(" \u2014 "),PJ=a("a"),U8r=o("FlaxPegasusForConditionalGeneration"),J8r=o(" (Pegasus model)"),Y8r=l(),fE=a("li"),pTe=a("strong"),K8r=o("t5"),Z8r=o(" \u2014 "),IJ=a("a"),exr=o("FlaxT5ForConditionalGeneration"),oxr=o(" (T5 model)"),rxr=l(),F(mE.$$.fragment),JIe=l(),Gc=a("h2"),gE=a("a"),uTe=a("span"),F(f8.$$.fragment),txr=l(),_Te=a("span"),axr=o("FlaxAutoModelForSequenceClassification"),YIe=l(),ur=a("div"),F(m8.$$.fragment),nxr=l(),Oc=a("p"),sxr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qJ=a("a"),lxr=o("from_pretrained()"),ixr=o(" class method or the "),NJ=a("a"),dxr=o("from_config()"),cxr=o(` class
method.`),fxr=l(),g8=a("p"),mxr=o("This class cannot be instantiated directly using "),bTe=a("code"),gxr=o("__init__()"),hxr=o(" (throws an error)."),pxr=l(),Xt=a("div"),F(h8.$$.fragment),uxr=l(),vTe=a("p"),_xr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),bxr=l(),Vc=a("p"),vxr=o(`Note:
Loading a model from its configuration file does `),FTe=a("strong"),Fxr=o("not"),Txr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=a("a"),Mxr=o("from_pretrained()"),Exr=o(" to load the model weights."),Cxr=l(),F(hE.$$.fragment),wxr=l(),Xr=a("div"),F(p8.$$.fragment),Axr=l(),TTe=a("p"),yxr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Lxr=l(),bn=a("p"),xxr=o("The model class to instantiate is selected based on the "),MTe=a("code"),$xr=o("model_type"),kxr=o(` property of the config object (either
passed as an argument or loaded from `),ETe=a("code"),Sxr=o("pretrained_model_name_or_path"),Rxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=a("code"),Bxr=o("pretrained_model_name_or_path"),Pxr=o(":"),Ixr=l(),xe=a("ul"),pE=a("li"),wTe=a("strong"),qxr=o("albert"),Nxr=o(" \u2014 "),DJ=a("a"),jxr=o("FlaxAlbertForSequenceClassification"),Dxr=o(" (ALBERT model)"),Gxr=l(),uE=a("li"),ATe=a("strong"),Oxr=o("bart"),Vxr=o(" \u2014 "),GJ=a("a"),Xxr=o("FlaxBartForSequenceClassification"),zxr=o(" (BART model)"),Qxr=l(),_E=a("li"),yTe=a("strong"),Wxr=o("bert"),Hxr=o(" \u2014 "),OJ=a("a"),Uxr=o("FlaxBertForSequenceClassification"),Jxr=o(" (BERT model)"),Yxr=l(),bE=a("li"),LTe=a("strong"),Kxr=o("big_bird"),Zxr=o(" \u2014 "),VJ=a("a"),e$r=o("FlaxBigBirdForSequenceClassification"),o$r=o(" (BigBird model)"),r$r=l(),vE=a("li"),xTe=a("strong"),t$r=o("distilbert"),a$r=o(" \u2014 "),XJ=a("a"),n$r=o("FlaxDistilBertForSequenceClassification"),s$r=o(" (DistilBERT model)"),l$r=l(),FE=a("li"),$Te=a("strong"),i$r=o("electra"),d$r=o(" \u2014 "),zJ=a("a"),c$r=o("FlaxElectraForSequenceClassification"),f$r=o(" (ELECTRA model)"),m$r=l(),TE=a("li"),kTe=a("strong"),g$r=o("mbart"),h$r=o(" \u2014 "),QJ=a("a"),p$r=o("FlaxMBartForSequenceClassification"),u$r=o(" (mBART model)"),_$r=l(),ME=a("li"),STe=a("strong"),b$r=o("roberta"),v$r=o(" \u2014 "),WJ=a("a"),F$r=o("FlaxRobertaForSequenceClassification"),T$r=o(" (RoBERTa model)"),M$r=l(),EE=a("li"),RTe=a("strong"),E$r=o("roformer"),C$r=o(" \u2014 "),HJ=a("a"),w$r=o("FlaxRoFormerForSequenceClassification"),A$r=o(" (RoFormer model)"),y$r=l(),CE=a("li"),BTe=a("strong"),L$r=o("xlm-roberta"),x$r=o(" \u2014 "),UJ=a("a"),$$r=o("FlaxXLMRobertaForSequenceClassification"),k$r=o(" (XLM-RoBERTa model)"),S$r=l(),F(wE.$$.fragment),KIe=l(),Xc=a("h2"),AE=a("a"),PTe=a("span"),F(u8.$$.fragment),R$r=l(),ITe=a("span"),B$r=o("FlaxAutoModelForQuestionAnswering"),ZIe=l(),_r=a("div"),F(_8.$$.fragment),P$r=l(),zc=a("p"),I$r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JJ=a("a"),q$r=o("from_pretrained()"),N$r=o(" class method or the "),YJ=a("a"),j$r=o("from_config()"),D$r=o(` class
method.`),G$r=l(),b8=a("p"),O$r=o("This class cannot be instantiated directly using "),qTe=a("code"),V$r=o("__init__()"),X$r=o(" (throws an error)."),z$r=l(),zt=a("div"),F(v8.$$.fragment),Q$r=l(),NTe=a("p"),W$r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),H$r=l(),Qc=a("p"),U$r=o(`Note:
Loading a model from its configuration file does `),jTe=a("strong"),J$r=o("not"),Y$r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=a("a"),K$r=o("from_pretrained()"),Z$r=o(" to load the model weights."),ekr=l(),F(yE.$$.fragment),okr=l(),zr=a("div"),F(F8.$$.fragment),rkr=l(),DTe=a("p"),tkr=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),akr=l(),vn=a("p"),nkr=o("The model class to instantiate is selected based on the "),GTe=a("code"),skr=o("model_type"),lkr=o(` property of the config object (either
passed as an argument or loaded from `),OTe=a("code"),ikr=o("pretrained_model_name_or_path"),dkr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=a("code"),ckr=o("pretrained_model_name_or_path"),fkr=o(":"),mkr=l(),$e=a("ul"),LE=a("li"),XTe=a("strong"),gkr=o("albert"),hkr=o(" \u2014 "),ZJ=a("a"),pkr=o("FlaxAlbertForQuestionAnswering"),ukr=o(" (ALBERT model)"),_kr=l(),xE=a("li"),zTe=a("strong"),bkr=o("bart"),vkr=o(" \u2014 "),eY=a("a"),Fkr=o("FlaxBartForQuestionAnswering"),Tkr=o(" (BART model)"),Mkr=l(),$E=a("li"),QTe=a("strong"),Ekr=o("bert"),Ckr=o(" \u2014 "),oY=a("a"),wkr=o("FlaxBertForQuestionAnswering"),Akr=o(" (BERT model)"),ykr=l(),kE=a("li"),WTe=a("strong"),Lkr=o("big_bird"),xkr=o(" \u2014 "),rY=a("a"),$kr=o("FlaxBigBirdForQuestionAnswering"),kkr=o(" (BigBird model)"),Skr=l(),SE=a("li"),HTe=a("strong"),Rkr=o("distilbert"),Bkr=o(" \u2014 "),tY=a("a"),Pkr=o("FlaxDistilBertForQuestionAnswering"),Ikr=o(" (DistilBERT model)"),qkr=l(),RE=a("li"),UTe=a("strong"),Nkr=o("electra"),jkr=o(" \u2014 "),aY=a("a"),Dkr=o("FlaxElectraForQuestionAnswering"),Gkr=o(" (ELECTRA model)"),Okr=l(),BE=a("li"),JTe=a("strong"),Vkr=o("mbart"),Xkr=o(" \u2014 "),nY=a("a"),zkr=o("FlaxMBartForQuestionAnswering"),Qkr=o(" (mBART model)"),Wkr=l(),PE=a("li"),YTe=a("strong"),Hkr=o("roberta"),Ukr=o(" \u2014 "),sY=a("a"),Jkr=o("FlaxRobertaForQuestionAnswering"),Ykr=o(" (RoBERTa model)"),Kkr=l(),IE=a("li"),KTe=a("strong"),Zkr=o("roformer"),eSr=o(" \u2014 "),lY=a("a"),oSr=o("FlaxRoFormerForQuestionAnswering"),rSr=o(" (RoFormer model)"),tSr=l(),qE=a("li"),ZTe=a("strong"),aSr=o("xlm-roberta"),nSr=o(" \u2014 "),iY=a("a"),sSr=o("FlaxXLMRobertaForQuestionAnswering"),lSr=o(" (XLM-RoBERTa model)"),iSr=l(),F(NE.$$.fragment),eqe=l(),Wc=a("h2"),jE=a("a"),e7e=a("span"),F(T8.$$.fragment),dSr=l(),o7e=a("span"),cSr=o("FlaxAutoModelForTokenClassification"),oqe=l(),br=a("div"),F(M8.$$.fragment),fSr=l(),Hc=a("p"),mSr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dY=a("a"),gSr=o("from_pretrained()"),hSr=o(" class method or the "),cY=a("a"),pSr=o("from_config()"),uSr=o(` class
method.`),_Sr=l(),E8=a("p"),bSr=o("This class cannot be instantiated directly using "),r7e=a("code"),vSr=o("__init__()"),FSr=o(" (throws an error)."),TSr=l(),Qt=a("div"),F(C8.$$.fragment),MSr=l(),t7e=a("p"),ESr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),CSr=l(),Uc=a("p"),wSr=o(`Note:
Loading a model from its configuration file does `),a7e=a("strong"),ASr=o("not"),ySr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=a("a"),LSr=o("from_pretrained()"),xSr=o(" to load the model weights."),$Sr=l(),F(DE.$$.fragment),kSr=l(),Qr=a("div"),F(w8.$$.fragment),SSr=l(),n7e=a("p"),RSr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),BSr=l(),Fn=a("p"),PSr=o("The model class to instantiate is selected based on the "),s7e=a("code"),ISr=o("model_type"),qSr=o(` property of the config object (either
passed as an argument or loaded from `),l7e=a("code"),NSr=o("pretrained_model_name_or_path"),jSr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=a("code"),DSr=o("pretrained_model_name_or_path"),GSr=o(":"),OSr=l(),De=a("ul"),GE=a("li"),d7e=a("strong"),VSr=o("albert"),XSr=o(" \u2014 "),mY=a("a"),zSr=o("FlaxAlbertForTokenClassification"),QSr=o(" (ALBERT model)"),WSr=l(),OE=a("li"),c7e=a("strong"),HSr=o("bert"),USr=o(" \u2014 "),gY=a("a"),JSr=o("FlaxBertForTokenClassification"),YSr=o(" (BERT model)"),KSr=l(),VE=a("li"),f7e=a("strong"),ZSr=o("big_bird"),eRr=o(" \u2014 "),hY=a("a"),oRr=o("FlaxBigBirdForTokenClassification"),rRr=o(" (BigBird model)"),tRr=l(),XE=a("li"),m7e=a("strong"),aRr=o("distilbert"),nRr=o(" \u2014 "),pY=a("a"),sRr=o("FlaxDistilBertForTokenClassification"),lRr=o(" (DistilBERT model)"),iRr=l(),zE=a("li"),g7e=a("strong"),dRr=o("electra"),cRr=o(" \u2014 "),uY=a("a"),fRr=o("FlaxElectraForTokenClassification"),mRr=o(" (ELECTRA model)"),gRr=l(),QE=a("li"),h7e=a("strong"),hRr=o("roberta"),pRr=o(" \u2014 "),_Y=a("a"),uRr=o("FlaxRobertaForTokenClassification"),_Rr=o(" (RoBERTa model)"),bRr=l(),WE=a("li"),p7e=a("strong"),vRr=o("roformer"),FRr=o(" \u2014 "),bY=a("a"),TRr=o("FlaxRoFormerForTokenClassification"),MRr=o(" (RoFormer model)"),ERr=l(),HE=a("li"),u7e=a("strong"),CRr=o("xlm-roberta"),wRr=o(" \u2014 "),vY=a("a"),ARr=o("FlaxXLMRobertaForTokenClassification"),yRr=o(" (XLM-RoBERTa model)"),LRr=l(),F(UE.$$.fragment),rqe=l(),Jc=a("h2"),JE=a("a"),_7e=a("span"),F(A8.$$.fragment),xRr=l(),b7e=a("span"),$Rr=o("FlaxAutoModelForMultipleChoice"),tqe=l(),vr=a("div"),F(y8.$$.fragment),kRr=l(),Yc=a("p"),SRr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FY=a("a"),RRr=o("from_pretrained()"),BRr=o(" class method or the "),TY=a("a"),PRr=o("from_config()"),IRr=o(` class
method.`),qRr=l(),L8=a("p"),NRr=o("This class cannot be instantiated directly using "),v7e=a("code"),jRr=o("__init__()"),DRr=o(" (throws an error)."),GRr=l(),Wt=a("div"),F(x8.$$.fragment),ORr=l(),F7e=a("p"),VRr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),XRr=l(),Kc=a("p"),zRr=o(`Note:
Loading a model from its configuration file does `),T7e=a("strong"),QRr=o("not"),WRr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=a("a"),HRr=o("from_pretrained()"),URr=o(" to load the model weights."),JRr=l(),F(YE.$$.fragment),YRr=l(),Wr=a("div"),F($8.$$.fragment),KRr=l(),M7e=a("p"),ZRr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),eBr=l(),Tn=a("p"),oBr=o("The model class to instantiate is selected based on the "),E7e=a("code"),rBr=o("model_type"),tBr=o(` property of the config object (either
passed as an argument or loaded from `),C7e=a("code"),aBr=o("pretrained_model_name_or_path"),nBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=a("code"),sBr=o("pretrained_model_name_or_path"),lBr=o(":"),iBr=l(),Ge=a("ul"),KE=a("li"),A7e=a("strong"),dBr=o("albert"),cBr=o(" \u2014 "),EY=a("a"),fBr=o("FlaxAlbertForMultipleChoice"),mBr=o(" (ALBERT model)"),gBr=l(),ZE=a("li"),y7e=a("strong"),hBr=o("bert"),pBr=o(" \u2014 "),CY=a("a"),uBr=o("FlaxBertForMultipleChoice"),_Br=o(" (BERT model)"),bBr=l(),e5=a("li"),L7e=a("strong"),vBr=o("big_bird"),FBr=o(" \u2014 "),wY=a("a"),TBr=o("FlaxBigBirdForMultipleChoice"),MBr=o(" (BigBird model)"),EBr=l(),o5=a("li"),x7e=a("strong"),CBr=o("distilbert"),wBr=o(" \u2014 "),AY=a("a"),ABr=o("FlaxDistilBertForMultipleChoice"),yBr=o(" (DistilBERT model)"),LBr=l(),r5=a("li"),$7e=a("strong"),xBr=o("electra"),$Br=o(" \u2014 "),yY=a("a"),kBr=o("FlaxElectraForMultipleChoice"),SBr=o(" (ELECTRA model)"),RBr=l(),t5=a("li"),k7e=a("strong"),BBr=o("roberta"),PBr=o(" \u2014 "),LY=a("a"),IBr=o("FlaxRobertaForMultipleChoice"),qBr=o(" (RoBERTa model)"),NBr=l(),a5=a("li"),S7e=a("strong"),jBr=o("roformer"),DBr=o(" \u2014 "),xY=a("a"),GBr=o("FlaxRoFormerForMultipleChoice"),OBr=o(" (RoFormer model)"),VBr=l(),n5=a("li"),R7e=a("strong"),XBr=o("xlm-roberta"),zBr=o(" \u2014 "),$Y=a("a"),QBr=o("FlaxXLMRobertaForMultipleChoice"),WBr=o(" (XLM-RoBERTa model)"),HBr=l(),F(s5.$$.fragment),aqe=l(),Zc=a("h2"),l5=a("a"),B7e=a("span"),F(k8.$$.fragment),UBr=l(),P7e=a("span"),JBr=o("FlaxAutoModelForNextSentencePrediction"),nqe=l(),Fr=a("div"),F(S8.$$.fragment),YBr=l(),ef=a("p"),KBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kY=a("a"),ZBr=o("from_pretrained()"),ePr=o(" class method or the "),SY=a("a"),oPr=o("from_config()"),rPr=o(` class
method.`),tPr=l(),R8=a("p"),aPr=o("This class cannot be instantiated directly using "),I7e=a("code"),nPr=o("__init__()"),sPr=o(" (throws an error)."),lPr=l(),Ht=a("div"),F(B8.$$.fragment),iPr=l(),q7e=a("p"),dPr=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),cPr=l(),of=a("p"),fPr=o(`Note:
Loading a model from its configuration file does `),N7e=a("strong"),mPr=o("not"),gPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=a("a"),hPr=o("from_pretrained()"),pPr=o(" to load the model weights."),uPr=l(),F(i5.$$.fragment),_Pr=l(),Hr=a("div"),F(P8.$$.fragment),bPr=l(),j7e=a("p"),vPr=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),FPr=l(),Mn=a("p"),TPr=o("The model class to instantiate is selected based on the "),D7e=a("code"),MPr=o("model_type"),EPr=o(` property of the config object (either
passed as an argument or loaded from `),G7e=a("code"),CPr=o("pretrained_model_name_or_path"),wPr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=a("code"),APr=o("pretrained_model_name_or_path"),yPr=o(":"),LPr=l(),V7e=a("ul"),d5=a("li"),X7e=a("strong"),xPr=o("bert"),$Pr=o(" \u2014 "),BY=a("a"),kPr=o("FlaxBertForNextSentencePrediction"),SPr=o(" (BERT model)"),RPr=l(),F(c5.$$.fragment),sqe=l(),rf=a("h2"),f5=a("a"),z7e=a("span"),F(I8.$$.fragment),BPr=l(),Q7e=a("span"),PPr=o("FlaxAutoModelForImageClassification"),lqe=l(),Tr=a("div"),F(q8.$$.fragment),IPr=l(),tf=a("p"),qPr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PY=a("a"),NPr=o("from_pretrained()"),jPr=o(" class method or the "),IY=a("a"),DPr=o("from_config()"),GPr=o(` class
method.`),OPr=l(),N8=a("p"),VPr=o("This class cannot be instantiated directly using "),W7e=a("code"),XPr=o("__init__()"),zPr=o(" (throws an error)."),QPr=l(),Ut=a("div"),F(j8.$$.fragment),WPr=l(),H7e=a("p"),HPr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),UPr=l(),af=a("p"),JPr=o(`Note:
Loading a model from its configuration file does `),U7e=a("strong"),YPr=o("not"),KPr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=a("a"),ZPr=o("from_pretrained()"),eIr=o(" to load the model weights."),oIr=l(),F(m5.$$.fragment),rIr=l(),Ur=a("div"),F(D8.$$.fragment),tIr=l(),J7e=a("p"),aIr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),nIr=l(),En=a("p"),sIr=o("The model class to instantiate is selected based on the "),Y7e=a("code"),lIr=o("model_type"),iIr=o(` property of the config object (either
passed as an argument or loaded from `),K7e=a("code"),dIr=o("pretrained_model_name_or_path"),cIr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=a("code"),fIr=o("pretrained_model_name_or_path"),mIr=o(":"),gIr=l(),G8=a("ul"),g5=a("li"),e9e=a("strong"),hIr=o("beit"),pIr=o(" \u2014 "),NY=a("a"),uIr=o("FlaxBeitForImageClassification"),_Ir=o(" (BEiT model)"),bIr=l(),h5=a("li"),o9e=a("strong"),vIr=o("vit"),FIr=o(" \u2014 "),jY=a("a"),TIr=o("FlaxViTForImageClassification"),MIr=o(" (ViT model)"),EIr=l(),F(p5.$$.fragment),iqe=l(),nf=a("h2"),u5=a("a"),r9e=a("span"),F(O8.$$.fragment),CIr=l(),t9e=a("span"),wIr=o("FlaxAutoModelForVision2Seq"),dqe=l(),Mr=a("div"),F(V8.$$.fragment),AIr=l(),sf=a("p"),yIr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DY=a("a"),LIr=o("from_pretrained()"),xIr=o(" class method or the "),GY=a("a"),$Ir=o("from_config()"),kIr=o(` class
method.`),SIr=l(),X8=a("p"),RIr=o("This class cannot be instantiated directly using "),a9e=a("code"),BIr=o("__init__()"),PIr=o(" (throws an error)."),IIr=l(),Jt=a("div"),F(z8.$$.fragment),qIr=l(),n9e=a("p"),NIr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),jIr=l(),lf=a("p"),DIr=o(`Note:
Loading a model from its configuration file does `),s9e=a("strong"),GIr=o("not"),OIr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=a("a"),VIr=o("from_pretrained()"),XIr=o(" to load the model weights."),zIr=l(),F(_5.$$.fragment),QIr=l(),Jr=a("div"),F(Q8.$$.fragment),WIr=l(),l9e=a("p"),HIr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),UIr=l(),Cn=a("p"),JIr=o("The model class to instantiate is selected based on the "),i9e=a("code"),YIr=o("model_type"),KIr=o(` property of the config object (either
passed as an argument or loaded from `),d9e=a("code"),ZIr=o("pretrained_model_name_or_path"),eqr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=a("code"),oqr=o("pretrained_model_name_or_path"),rqr=o(":"),tqr=l(),f9e=a("ul"),b5=a("li"),m9e=a("strong"),aqr=o("vision-encoder-decoder"),nqr=o(" \u2014 "),VY=a("a"),sqr=o("FlaxVisionEncoderDecoderModel"),lqr=o(" (Vision Encoder decoder model)"),iqr=l(),F(v5.$$.fragment),this.h()},l(f){const _=vCt('[data-svelte="svelte-1phssyn"]',document.head);g=n(_,"META",{name:!0,content:!0}),_.forEach(t),v=i(f),p=n(f,"H1",{class:!0});var W8=s(p);m=n(W8,"A",{id:!0,class:!0,href:!0});var g9e=s(m);u=n(g9e,"SPAN",{});var h9e=s(u);T(d.$$.fragment,h9e),h9e.forEach(t),g9e.forEach(t),h=i(W8),Mo=n(W8,"SPAN",{});var p9e=s(Mo);li=r(p9e,"Auto Classes"),p9e.forEach(t),W8.forEach(t),mf=i(f),et=n(f,"P",{});var H8=s(et);ii=r(H8,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),di=n(H8,"CODE",{});var u9e=s(di);N3=r(u9e,"from_pretrained()"),u9e.forEach(t),gf=r(H8,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),H8.forEach(t),qe=i(f),Xe=n(f,"P",{});var wn=s(Xe);ci=r(wn,"Instantiating one of "),An=n(wn,"A",{href:!0});var _9e=s(An);j3=r(_9e,"AutoConfig"),_9e.forEach(t),yn=r(wn,", "),Ln=n(wn,"A",{href:!0});var b9e=s(Ln);D3=r(b9e,"AutoModel"),b9e.forEach(t),fi=r(wn,`, and
`),xn=n(wn,"A",{href:!0});var v9e=s(xn);G3=r(v9e,"AutoTokenizer"),v9e.forEach(t),mi=r(wn," will directly create a class of the relevant architecture. For instance"),wn.forEach(t),hf=i(f),T(Ma.$$.fragment,f),ze=i(f),Ae=n(f,"P",{});var U8=s(Ae);n$=r(U8,"will create a model that is an instance of "),gi=n(U8,"A",{href:!0});var F9e=s(gi);s$=r(F9e,"BertModel"),F9e.forEach(t),l$=r(U8,"."),U8.forEach(t),Eo=i(f),Ea=n(f,"P",{});var J8=s(Ea);i$=r(J8,"There is one class of "),pf=n(J8,"CODE",{});var T9e=s(pf);d$=r(T9e,"AutoModel"),T9e.forEach(t),bje=r(J8," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),J8.forEach(t),lPe=i(f),hi=n(f,"H2",{class:!0});var Y8=s(hi);uf=n(Y8,"A",{id:!0,class:!0,href:!0});var M9e=s(uf);qZ=n(M9e,"SPAN",{});var E9e=s(qZ);T(O3.$$.fragment,E9e),E9e.forEach(t),M9e.forEach(t),vje=i(Y8),NZ=n(Y8,"SPAN",{});var C9e=s(NZ);Fje=r(C9e,"Extending the Auto Classes"),C9e.forEach(t),Y8.forEach(t),iPe=i(f),$n=n(f,"P",{});var df=s($n);Tje=r(df,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),jZ=n(df,"CODE",{});var w9e=s(jZ);Mje=r(w9e,"NewModel"),w9e.forEach(t),Eje=r(df,", make sure you have a "),DZ=n(df,"CODE",{});var A9e=s(DZ);Cje=r(A9e,"NewModelConfig"),A9e.forEach(t),wje=r(df,` then you can add those to the auto
classes like this:`),df.forEach(t),dPe=i(f),T(V3.$$.fragment,f),cPe=i(f),c$=n(f,"P",{});var y9e=s(c$);Aje=r(y9e,"You will then be able to use the auto classes like you would usually do!"),y9e.forEach(t),fPe=i(f),T(_f.$$.fragment,f),mPe=i(f),pi=n(f,"H2",{class:!0});var K8=s(pi);bf=n(K8,"A",{id:!0,class:!0,href:!0});var L9e=s(bf);GZ=n(L9e,"SPAN",{});var x9e=s(GZ);T(X3.$$.fragment,x9e),x9e.forEach(t),L9e.forEach(t),yje=i(K8),OZ=n(K8,"SPAN",{});var $9e=s(OZ);Lje=r($9e,"AutoConfig"),$9e.forEach(t),K8.forEach(t),gPe=i(f),Co=n(f,"DIV",{class:!0});var Kr=s(Co);T(z3.$$.fragment,Kr),xje=i(Kr),Q3=n(Kr,"P",{});var Z8=s(Q3);$je=r(Z8,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),f$=n(Z8,"A",{href:!0});var k9e=s(f$);kje=r(k9e,"from_pretrained()"),k9e.forEach(t),Sje=r(Z8," class method."),Z8.forEach(t),Rje=i(Kr),W3=n(Kr,"P",{});var ex=s(W3);Bje=r(ex,"This class cannot be instantiated directly using "),VZ=n(ex,"CODE",{});var S9e=s(VZ);Pje=r(S9e,"__init__()"),S9e.forEach(t),Ije=r(ex," (throws an error)."),ex.forEach(t),qje=i(Kr),Er=n(Kr,"DIV",{class:!0});var Zr=s(Er);T(H3.$$.fragment,Zr),Nje=i(Zr),XZ=n(Zr,"P",{});var R9e=s(XZ);jje=r(R9e,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),R9e.forEach(t),Dje=i(Zr),ui=n(Zr,"P",{});var cf=s(ui);Gje=r(cf,"The configuration class to instantiate is selected based on the "),zZ=n(cf,"CODE",{});var B9e=s(zZ);Oje=r(B9e,"model_type"),B9e.forEach(t),Vje=r(cf,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),QZ=n(cf,"CODE",{});var P9e=s(QZ);Xje=r(P9e,"pretrained_model_name_or_path"),P9e.forEach(t),zje=r(cf,":"),cf.forEach(t),Qje=i(Zr),y=n(Zr,"UL",{});var L=s(y);vf=n(L,"LI",{});var F5=s(vf);WZ=n(F5,"STRONG",{});var I9e=s(WZ);Wje=r(I9e,"albert"),I9e.forEach(t),Hje=r(F5," \u2014 "),m$=n(F5,"A",{href:!0});var q9e=s(m$);Uje=r(q9e,"AlbertConfig"),q9e.forEach(t),Jje=r(F5," (ALBERT model)"),F5.forEach(t),Yje=i(L),Ff=n(L,"LI",{});var T5=s(Ff);HZ=n(T5,"STRONG",{});var N9e=s(HZ);Kje=r(N9e,"bart"),N9e.forEach(t),Zje=r(T5," \u2014 "),g$=n(T5,"A",{href:!0});var j9e=s(g$);eDe=r(j9e,"BartConfig"),j9e.forEach(t),oDe=r(T5," (BART model)"),T5.forEach(t),rDe=i(L),Tf=n(L,"LI",{});var M5=s(Tf);UZ=n(M5,"STRONG",{});var D9e=s(UZ);tDe=r(D9e,"beit"),D9e.forEach(t),aDe=r(M5," \u2014 "),h$=n(M5,"A",{href:!0});var G9e=s(h$);nDe=r(G9e,"BeitConfig"),G9e.forEach(t),sDe=r(M5," (BEiT model)"),M5.forEach(t),lDe=i(L),Mf=n(L,"LI",{});var E5=s(Mf);JZ=n(E5,"STRONG",{});var O9e=s(JZ);iDe=r(O9e,"bert"),O9e.forEach(t),dDe=r(E5," \u2014 "),p$=n(E5,"A",{href:!0});var V9e=s(p$);cDe=r(V9e,"BertConfig"),V9e.forEach(t),fDe=r(E5," (BERT model)"),E5.forEach(t),mDe=i(L),Ef=n(L,"LI",{});var C5=s(Ef);YZ=n(C5,"STRONG",{});var X9e=s(YZ);gDe=r(X9e,"bert-generation"),X9e.forEach(t),hDe=r(C5," \u2014 "),u$=n(C5,"A",{href:!0});var z9e=s(u$);pDe=r(z9e,"BertGenerationConfig"),z9e.forEach(t),uDe=r(C5," (Bert Generation model)"),C5.forEach(t),_De=i(L),Cf=n(L,"LI",{});var w5=s(Cf);KZ=n(w5,"STRONG",{});var Q9e=s(KZ);bDe=r(Q9e,"big_bird"),Q9e.forEach(t),vDe=r(w5," \u2014 "),_$=n(w5,"A",{href:!0});var W9e=s(_$);FDe=r(W9e,"BigBirdConfig"),W9e.forEach(t),TDe=r(w5," (BigBird model)"),w5.forEach(t),MDe=i(L),wf=n(L,"LI",{});var A5=s(wf);ZZ=n(A5,"STRONG",{});var H9e=s(ZZ);EDe=r(H9e,"bigbird_pegasus"),H9e.forEach(t),CDe=r(A5," \u2014 "),b$=n(A5,"A",{href:!0});var U9e=s(b$);wDe=r(U9e,"BigBirdPegasusConfig"),U9e.forEach(t),ADe=r(A5," (BigBirdPegasus model)"),A5.forEach(t),yDe=i(L),Af=n(L,"LI",{});var y5=s(Af);eee=n(y5,"STRONG",{});var J9e=s(eee);LDe=r(J9e,"blenderbot"),J9e.forEach(t),xDe=r(y5," \u2014 "),v$=n(y5,"A",{href:!0});var Y9e=s(v$);$De=r(Y9e,"BlenderbotConfig"),Y9e.forEach(t),kDe=r(y5," (Blenderbot model)"),y5.forEach(t),SDe=i(L),yf=n(L,"LI",{});var L5=s(yf);oee=n(L5,"STRONG",{});var K9e=s(oee);RDe=r(K9e,"blenderbot-small"),K9e.forEach(t),BDe=r(L5," \u2014 "),F$=n(L5,"A",{href:!0});var Z9e=s(F$);PDe=r(Z9e,"BlenderbotSmallConfig"),Z9e.forEach(t),IDe=r(L5," (BlenderbotSmall model)"),L5.forEach(t),qDe=i(L),Lf=n(L,"LI",{});var x5=s(Lf);ree=n(x5,"STRONG",{});var eMe=s(ree);NDe=r(eMe,"camembert"),eMe.forEach(t),jDe=r(x5," \u2014 "),T$=n(x5,"A",{href:!0});var oMe=s(T$);DDe=r(oMe,"CamembertConfig"),oMe.forEach(t),GDe=r(x5," (CamemBERT model)"),x5.forEach(t),ODe=i(L),xf=n(L,"LI",{});var $5=s(xf);tee=n($5,"STRONG",{});var rMe=s(tee);VDe=r(rMe,"canine"),rMe.forEach(t),XDe=r($5," \u2014 "),M$=n($5,"A",{href:!0});var tMe=s(M$);zDe=r(tMe,"CanineConfig"),tMe.forEach(t),QDe=r($5," (Canine model)"),$5.forEach(t),WDe=i(L),$f=n(L,"LI",{});var k5=s($f);aee=n(k5,"STRONG",{});var aMe=s(aee);HDe=r(aMe,"clip"),aMe.forEach(t),UDe=r(k5," \u2014 "),E$=n(k5,"A",{href:!0});var nMe=s(E$);JDe=r(nMe,"CLIPConfig"),nMe.forEach(t),YDe=r(k5," (CLIP model)"),k5.forEach(t),KDe=i(L),kf=n(L,"LI",{});var S5=s(kf);nee=n(S5,"STRONG",{});var sMe=s(nee);ZDe=r(sMe,"convbert"),sMe.forEach(t),eGe=r(S5," \u2014 "),C$=n(S5,"A",{href:!0});var lMe=s(C$);oGe=r(lMe,"ConvBertConfig"),lMe.forEach(t),rGe=r(S5," (ConvBERT model)"),S5.forEach(t),tGe=i(L),Sf=n(L,"LI",{});var R5=s(Sf);see=n(R5,"STRONG",{});var iMe=s(see);aGe=r(iMe,"convnext"),iMe.forEach(t),nGe=r(R5," \u2014 "),w$=n(R5,"A",{href:!0});var dMe=s(w$);sGe=r(dMe,"ConvNextConfig"),dMe.forEach(t),lGe=r(R5," (ConvNext model)"),R5.forEach(t),iGe=i(L),Rf=n(L,"LI",{});var B5=s(Rf);lee=n(B5,"STRONG",{});var cMe=s(lee);dGe=r(cMe,"ctrl"),cMe.forEach(t),cGe=r(B5," \u2014 "),A$=n(B5,"A",{href:!0});var fMe=s(A$);fGe=r(fMe,"CTRLConfig"),fMe.forEach(t),mGe=r(B5," (CTRL model)"),B5.forEach(t),gGe=i(L),Bf=n(L,"LI",{});var P5=s(Bf);iee=n(P5,"STRONG",{});var mMe=s(iee);hGe=r(mMe,"data2vec-audio"),mMe.forEach(t),pGe=r(P5," \u2014 "),y$=n(P5,"A",{href:!0});var gMe=s(y$);uGe=r(gMe,"Data2VecAudioConfig"),gMe.forEach(t),_Ge=r(P5," (Data2VecAudio model)"),P5.forEach(t),bGe=i(L),Pf=n(L,"LI",{});var I5=s(Pf);dee=n(I5,"STRONG",{});var hMe=s(dee);vGe=r(hMe,"data2vec-text"),hMe.forEach(t),FGe=r(I5," \u2014 "),L$=n(I5,"A",{href:!0});var pMe=s(L$);TGe=r(pMe,"Data2VecTextConfig"),pMe.forEach(t),MGe=r(I5," (Data2VecText model)"),I5.forEach(t),EGe=i(L),If=n(L,"LI",{});var q5=s(If);cee=n(q5,"STRONG",{});var uMe=s(cee);CGe=r(uMe,"data2vec-vision"),uMe.forEach(t),wGe=r(q5," \u2014 "),x$=n(q5,"A",{href:!0});var _Me=s(x$);AGe=r(_Me,"Data2VecVisionConfig"),_Me.forEach(t),yGe=r(q5," (Data2VecVision model)"),q5.forEach(t),LGe=i(L),qf=n(L,"LI",{});var N5=s(qf);fee=n(N5,"STRONG",{});var bMe=s(fee);xGe=r(bMe,"deberta"),bMe.forEach(t),$Ge=r(N5," \u2014 "),$$=n(N5,"A",{href:!0});var vMe=s($$);kGe=r(vMe,"DebertaConfig"),vMe.forEach(t),SGe=r(N5," (DeBERTa model)"),N5.forEach(t),RGe=i(L),Nf=n(L,"LI",{});var j5=s(Nf);mee=n(j5,"STRONG",{});var FMe=s(mee);BGe=r(FMe,"deberta-v2"),FMe.forEach(t),PGe=r(j5," \u2014 "),k$=n(j5,"A",{href:!0});var TMe=s(k$);IGe=r(TMe,"DebertaV2Config"),TMe.forEach(t),qGe=r(j5," (DeBERTa-v2 model)"),j5.forEach(t),NGe=i(L),jf=n(L,"LI",{});var D5=s(jf);gee=n(D5,"STRONG",{});var MMe=s(gee);jGe=r(MMe,"decision_transformer"),MMe.forEach(t),DGe=r(D5," \u2014 "),S$=n(D5,"A",{href:!0});var EMe=s(S$);GGe=r(EMe,"DecisionTransformerConfig"),EMe.forEach(t),OGe=r(D5," (Decision Transformer model)"),D5.forEach(t),VGe=i(L),Df=n(L,"LI",{});var G5=s(Df);hee=n(G5,"STRONG",{});var CMe=s(hee);XGe=r(CMe,"deit"),CMe.forEach(t),zGe=r(G5," \u2014 "),R$=n(G5,"A",{href:!0});var wMe=s(R$);QGe=r(wMe,"DeiTConfig"),wMe.forEach(t),WGe=r(G5," (DeiT model)"),G5.forEach(t),HGe=i(L),Gf=n(L,"LI",{});var O5=s(Gf);pee=n(O5,"STRONG",{});var AMe=s(pee);UGe=r(AMe,"detr"),AMe.forEach(t),JGe=r(O5," \u2014 "),B$=n(O5,"A",{href:!0});var cqr=s(B$);YGe=r(cqr,"DetrConfig"),cqr.forEach(t),KGe=r(O5," (DETR model)"),O5.forEach(t),ZGe=i(L),Of=n(L,"LI",{});var yMe=s(Of);uee=n(yMe,"STRONG",{});var fqr=s(uee);eOe=r(fqr,"distilbert"),fqr.forEach(t),oOe=r(yMe," \u2014 "),P$=n(yMe,"A",{href:!0});var mqr=s(P$);rOe=r(mqr,"DistilBertConfig"),mqr.forEach(t),tOe=r(yMe," (DistilBERT model)"),yMe.forEach(t),aOe=i(L),Vf=n(L,"LI",{});var LMe=s(Vf);_ee=n(LMe,"STRONG",{});var gqr=s(_ee);nOe=r(gqr,"dpr"),gqr.forEach(t),sOe=r(LMe," \u2014 "),I$=n(LMe,"A",{href:!0});var hqr=s(I$);lOe=r(hqr,"DPRConfig"),hqr.forEach(t),iOe=r(LMe," (DPR model)"),LMe.forEach(t),dOe=i(L),Xf=n(L,"LI",{});var xMe=s(Xf);bee=n(xMe,"STRONG",{});var pqr=s(bee);cOe=r(pqr,"dpt"),pqr.forEach(t),fOe=r(xMe," \u2014 "),q$=n(xMe,"A",{href:!0});var uqr=s(q$);mOe=r(uqr,"DPTConfig"),uqr.forEach(t),gOe=r(xMe," (DPT model)"),xMe.forEach(t),hOe=i(L),zf=n(L,"LI",{});var $Me=s(zf);vee=n($Me,"STRONG",{});var _qr=s(vee);pOe=r(_qr,"electra"),_qr.forEach(t),uOe=r($Me," \u2014 "),N$=n($Me,"A",{href:!0});var bqr=s(N$);_Oe=r(bqr,"ElectraConfig"),bqr.forEach(t),bOe=r($Me," (ELECTRA model)"),$Me.forEach(t),vOe=i(L),Qf=n(L,"LI",{});var kMe=s(Qf);Fee=n(kMe,"STRONG",{});var vqr=s(Fee);FOe=r(vqr,"encoder-decoder"),vqr.forEach(t),TOe=r(kMe," \u2014 "),j$=n(kMe,"A",{href:!0});var Fqr=s(j$);MOe=r(Fqr,"EncoderDecoderConfig"),Fqr.forEach(t),EOe=r(kMe," (Encoder decoder model)"),kMe.forEach(t),COe=i(L),Wf=n(L,"LI",{});var SMe=s(Wf);Tee=n(SMe,"STRONG",{});var Tqr=s(Tee);wOe=r(Tqr,"flaubert"),Tqr.forEach(t),AOe=r(SMe," \u2014 "),D$=n(SMe,"A",{href:!0});var Mqr=s(D$);yOe=r(Mqr,"FlaubertConfig"),Mqr.forEach(t),LOe=r(SMe," (FlauBERT model)"),SMe.forEach(t),xOe=i(L),Hf=n(L,"LI",{});var RMe=s(Hf);Mee=n(RMe,"STRONG",{});var Eqr=s(Mee);$Oe=r(Eqr,"fnet"),Eqr.forEach(t),kOe=r(RMe," \u2014 "),G$=n(RMe,"A",{href:!0});var Cqr=s(G$);SOe=r(Cqr,"FNetConfig"),Cqr.forEach(t),ROe=r(RMe," (FNet model)"),RMe.forEach(t),BOe=i(L),Uf=n(L,"LI",{});var BMe=s(Uf);Eee=n(BMe,"STRONG",{});var wqr=s(Eee);POe=r(wqr,"fsmt"),wqr.forEach(t),IOe=r(BMe," \u2014 "),O$=n(BMe,"A",{href:!0});var Aqr=s(O$);qOe=r(Aqr,"FSMTConfig"),Aqr.forEach(t),NOe=r(BMe," (FairSeq Machine-Translation model)"),BMe.forEach(t),jOe=i(L),Jf=n(L,"LI",{});var PMe=s(Jf);Cee=n(PMe,"STRONG",{});var yqr=s(Cee);DOe=r(yqr,"funnel"),yqr.forEach(t),GOe=r(PMe," \u2014 "),V$=n(PMe,"A",{href:!0});var Lqr=s(V$);OOe=r(Lqr,"FunnelConfig"),Lqr.forEach(t),VOe=r(PMe," (Funnel Transformer model)"),PMe.forEach(t),XOe=i(L),Yf=n(L,"LI",{});var IMe=s(Yf);wee=n(IMe,"STRONG",{});var xqr=s(wee);zOe=r(xqr,"glpn"),xqr.forEach(t),QOe=r(IMe," \u2014 "),X$=n(IMe,"A",{href:!0});var $qr=s(X$);WOe=r($qr,"GLPNConfig"),$qr.forEach(t),HOe=r(IMe," (GLPN model)"),IMe.forEach(t),UOe=i(L),Kf=n(L,"LI",{});var qMe=s(Kf);Aee=n(qMe,"STRONG",{});var kqr=s(Aee);JOe=r(kqr,"gpt2"),kqr.forEach(t),YOe=r(qMe," \u2014 "),z$=n(qMe,"A",{href:!0});var Sqr=s(z$);KOe=r(Sqr,"GPT2Config"),Sqr.forEach(t),ZOe=r(qMe," (OpenAI GPT-2 model)"),qMe.forEach(t),eVe=i(L),Zf=n(L,"LI",{});var NMe=s(Zf);yee=n(NMe,"STRONG",{});var Rqr=s(yee);oVe=r(Rqr,"gpt_neo"),Rqr.forEach(t),rVe=r(NMe," \u2014 "),Q$=n(NMe,"A",{href:!0});var Bqr=s(Q$);tVe=r(Bqr,"GPTNeoConfig"),Bqr.forEach(t),aVe=r(NMe," (GPT Neo model)"),NMe.forEach(t),nVe=i(L),em=n(L,"LI",{});var jMe=s(em);Lee=n(jMe,"STRONG",{});var Pqr=s(Lee);sVe=r(Pqr,"gptj"),Pqr.forEach(t),lVe=r(jMe," \u2014 "),W$=n(jMe,"A",{href:!0});var Iqr=s(W$);iVe=r(Iqr,"GPTJConfig"),Iqr.forEach(t),dVe=r(jMe," (GPT-J model)"),jMe.forEach(t),cVe=i(L),om=n(L,"LI",{});var DMe=s(om);xee=n(DMe,"STRONG",{});var qqr=s(xee);fVe=r(qqr,"hubert"),qqr.forEach(t),mVe=r(DMe," \u2014 "),H$=n(DMe,"A",{href:!0});var Nqr=s(H$);gVe=r(Nqr,"HubertConfig"),Nqr.forEach(t),hVe=r(DMe," (Hubert model)"),DMe.forEach(t),pVe=i(L),rm=n(L,"LI",{});var GMe=s(rm);$ee=n(GMe,"STRONG",{});var jqr=s($ee);uVe=r(jqr,"ibert"),jqr.forEach(t),_Ve=r(GMe," \u2014 "),U$=n(GMe,"A",{href:!0});var Dqr=s(U$);bVe=r(Dqr,"IBertConfig"),Dqr.forEach(t),vVe=r(GMe," (I-BERT model)"),GMe.forEach(t),FVe=i(L),tm=n(L,"LI",{});var OMe=s(tm);kee=n(OMe,"STRONG",{});var Gqr=s(kee);TVe=r(Gqr,"imagegpt"),Gqr.forEach(t),MVe=r(OMe," \u2014 "),J$=n(OMe,"A",{href:!0});var Oqr=s(J$);EVe=r(Oqr,"ImageGPTConfig"),Oqr.forEach(t),CVe=r(OMe," (ImageGPT model)"),OMe.forEach(t),wVe=i(L),am=n(L,"LI",{});var VMe=s(am);See=n(VMe,"STRONG",{});var Vqr=s(See);AVe=r(Vqr,"layoutlm"),Vqr.forEach(t),yVe=r(VMe," \u2014 "),Y$=n(VMe,"A",{href:!0});var Xqr=s(Y$);LVe=r(Xqr,"LayoutLMConfig"),Xqr.forEach(t),xVe=r(VMe," (LayoutLM model)"),VMe.forEach(t),$Ve=i(L),nm=n(L,"LI",{});var XMe=s(nm);Ree=n(XMe,"STRONG",{});var zqr=s(Ree);kVe=r(zqr,"layoutlmv2"),zqr.forEach(t),SVe=r(XMe," \u2014 "),K$=n(XMe,"A",{href:!0});var Qqr=s(K$);RVe=r(Qqr,"LayoutLMv2Config"),Qqr.forEach(t),BVe=r(XMe," (LayoutLMv2 model)"),XMe.forEach(t),PVe=i(L),sm=n(L,"LI",{});var zMe=s(sm);Bee=n(zMe,"STRONG",{});var Wqr=s(Bee);IVe=r(Wqr,"led"),Wqr.forEach(t),qVe=r(zMe," \u2014 "),Z$=n(zMe,"A",{href:!0});var Hqr=s(Z$);NVe=r(Hqr,"LEDConfig"),Hqr.forEach(t),jVe=r(zMe," (LED model)"),zMe.forEach(t),DVe=i(L),lm=n(L,"LI",{});var QMe=s(lm);Pee=n(QMe,"STRONG",{});var Uqr=s(Pee);GVe=r(Uqr,"longformer"),Uqr.forEach(t),OVe=r(QMe," \u2014 "),ek=n(QMe,"A",{href:!0});var Jqr=s(ek);VVe=r(Jqr,"LongformerConfig"),Jqr.forEach(t),XVe=r(QMe," (Longformer model)"),QMe.forEach(t),zVe=i(L),im=n(L,"LI",{});var WMe=s(im);Iee=n(WMe,"STRONG",{});var Yqr=s(Iee);QVe=r(Yqr,"luke"),Yqr.forEach(t),WVe=r(WMe," \u2014 "),ok=n(WMe,"A",{href:!0});var Kqr=s(ok);HVe=r(Kqr,"LukeConfig"),Kqr.forEach(t),UVe=r(WMe," (LUKE model)"),WMe.forEach(t),JVe=i(L),dm=n(L,"LI",{});var HMe=s(dm);qee=n(HMe,"STRONG",{});var Zqr=s(qee);YVe=r(Zqr,"lxmert"),Zqr.forEach(t),KVe=r(HMe," \u2014 "),rk=n(HMe,"A",{href:!0});var eNr=s(rk);ZVe=r(eNr,"LxmertConfig"),eNr.forEach(t),eXe=r(HMe," (LXMERT model)"),HMe.forEach(t),oXe=i(L),cm=n(L,"LI",{});var UMe=s(cm);Nee=n(UMe,"STRONG",{});var oNr=s(Nee);rXe=r(oNr,"m2m_100"),oNr.forEach(t),tXe=r(UMe," \u2014 "),tk=n(UMe,"A",{href:!0});var rNr=s(tk);aXe=r(rNr,"M2M100Config"),rNr.forEach(t),nXe=r(UMe," (M2M100 model)"),UMe.forEach(t),sXe=i(L),fm=n(L,"LI",{});var JMe=s(fm);jee=n(JMe,"STRONG",{});var tNr=s(jee);lXe=r(tNr,"marian"),tNr.forEach(t),iXe=r(JMe," \u2014 "),ak=n(JMe,"A",{href:!0});var aNr=s(ak);dXe=r(aNr,"MarianConfig"),aNr.forEach(t),cXe=r(JMe," (Marian model)"),JMe.forEach(t),fXe=i(L),mm=n(L,"LI",{});var YMe=s(mm);Dee=n(YMe,"STRONG",{});var nNr=s(Dee);mXe=r(nNr,"maskformer"),nNr.forEach(t),gXe=r(YMe," \u2014 "),nk=n(YMe,"A",{href:!0});var sNr=s(nk);hXe=r(sNr,"MaskFormerConfig"),sNr.forEach(t),pXe=r(YMe," (MaskFormer model)"),YMe.forEach(t),uXe=i(L),gm=n(L,"LI",{});var KMe=s(gm);Gee=n(KMe,"STRONG",{});var lNr=s(Gee);_Xe=r(lNr,"mbart"),lNr.forEach(t),bXe=r(KMe," \u2014 "),sk=n(KMe,"A",{href:!0});var iNr=s(sk);vXe=r(iNr,"MBartConfig"),iNr.forEach(t),FXe=r(KMe," (mBART model)"),KMe.forEach(t),TXe=i(L),hm=n(L,"LI",{});var ZMe=s(hm);Oee=n(ZMe,"STRONG",{});var dNr=s(Oee);MXe=r(dNr,"megatron-bert"),dNr.forEach(t),EXe=r(ZMe," \u2014 "),lk=n(ZMe,"A",{href:!0});var cNr=s(lk);CXe=r(cNr,"MegatronBertConfig"),cNr.forEach(t),wXe=r(ZMe," (MegatronBert model)"),ZMe.forEach(t),AXe=i(L),pm=n(L,"LI",{});var e4e=s(pm);Vee=n(e4e,"STRONG",{});var fNr=s(Vee);yXe=r(fNr,"mobilebert"),fNr.forEach(t),LXe=r(e4e," \u2014 "),ik=n(e4e,"A",{href:!0});var mNr=s(ik);xXe=r(mNr,"MobileBertConfig"),mNr.forEach(t),$Xe=r(e4e," (MobileBERT model)"),e4e.forEach(t),kXe=i(L),um=n(L,"LI",{});var o4e=s(um);Xee=n(o4e,"STRONG",{});var gNr=s(Xee);SXe=r(gNr,"mpnet"),gNr.forEach(t),RXe=r(o4e," \u2014 "),dk=n(o4e,"A",{href:!0});var hNr=s(dk);BXe=r(hNr,"MPNetConfig"),hNr.forEach(t),PXe=r(o4e," (MPNet model)"),o4e.forEach(t),IXe=i(L),_m=n(L,"LI",{});var r4e=s(_m);zee=n(r4e,"STRONG",{});var pNr=s(zee);qXe=r(pNr,"mt5"),pNr.forEach(t),NXe=r(r4e," \u2014 "),ck=n(r4e,"A",{href:!0});var uNr=s(ck);jXe=r(uNr,"MT5Config"),uNr.forEach(t),DXe=r(r4e," (mT5 model)"),r4e.forEach(t),GXe=i(L),bm=n(L,"LI",{});var t4e=s(bm);Qee=n(t4e,"STRONG",{});var _Nr=s(Qee);OXe=r(_Nr,"nystromformer"),_Nr.forEach(t),VXe=r(t4e," \u2014 "),fk=n(t4e,"A",{href:!0});var bNr=s(fk);XXe=r(bNr,"NystromformerConfig"),bNr.forEach(t),zXe=r(t4e," (Nystromformer model)"),t4e.forEach(t),QXe=i(L),vm=n(L,"LI",{});var a4e=s(vm);Wee=n(a4e,"STRONG",{});var vNr=s(Wee);WXe=r(vNr,"openai-gpt"),vNr.forEach(t),HXe=r(a4e," \u2014 "),mk=n(a4e,"A",{href:!0});var FNr=s(mk);UXe=r(FNr,"OpenAIGPTConfig"),FNr.forEach(t),JXe=r(a4e," (OpenAI GPT model)"),a4e.forEach(t),YXe=i(L),Fm=n(L,"LI",{});var n4e=s(Fm);Hee=n(n4e,"STRONG",{});var TNr=s(Hee);KXe=r(TNr,"pegasus"),TNr.forEach(t),ZXe=r(n4e," \u2014 "),gk=n(n4e,"A",{href:!0});var MNr=s(gk);eze=r(MNr,"PegasusConfig"),MNr.forEach(t),oze=r(n4e," (Pegasus model)"),n4e.forEach(t),rze=i(L),Tm=n(L,"LI",{});var s4e=s(Tm);Uee=n(s4e,"STRONG",{});var ENr=s(Uee);tze=r(ENr,"perceiver"),ENr.forEach(t),aze=r(s4e," \u2014 "),hk=n(s4e,"A",{href:!0});var CNr=s(hk);nze=r(CNr,"PerceiverConfig"),CNr.forEach(t),sze=r(s4e," (Perceiver model)"),s4e.forEach(t),lze=i(L),Mm=n(L,"LI",{});var l4e=s(Mm);Jee=n(l4e,"STRONG",{});var wNr=s(Jee);ize=r(wNr,"plbart"),wNr.forEach(t),dze=r(l4e," \u2014 "),pk=n(l4e,"A",{href:!0});var ANr=s(pk);cze=r(ANr,"PLBartConfig"),ANr.forEach(t),fze=r(l4e," (PLBart model)"),l4e.forEach(t),mze=i(L),Em=n(L,"LI",{});var i4e=s(Em);Yee=n(i4e,"STRONG",{});var yNr=s(Yee);gze=r(yNr,"poolformer"),yNr.forEach(t),hze=r(i4e," \u2014 "),uk=n(i4e,"A",{href:!0});var LNr=s(uk);pze=r(LNr,"PoolFormerConfig"),LNr.forEach(t),uze=r(i4e," (PoolFormer model)"),i4e.forEach(t),_ze=i(L),Cm=n(L,"LI",{});var d4e=s(Cm);Kee=n(d4e,"STRONG",{});var xNr=s(Kee);bze=r(xNr,"prophetnet"),xNr.forEach(t),vze=r(d4e," \u2014 "),_k=n(d4e,"A",{href:!0});var $Nr=s(_k);Fze=r($Nr,"ProphetNetConfig"),$Nr.forEach(t),Tze=r(d4e," (ProphetNet model)"),d4e.forEach(t),Mze=i(L),wm=n(L,"LI",{});var c4e=s(wm);Zee=n(c4e,"STRONG",{});var kNr=s(Zee);Eze=r(kNr,"qdqbert"),kNr.forEach(t),Cze=r(c4e," \u2014 "),bk=n(c4e,"A",{href:!0});var SNr=s(bk);wze=r(SNr,"QDQBertConfig"),SNr.forEach(t),Aze=r(c4e," (QDQBert model)"),c4e.forEach(t),yze=i(L),Am=n(L,"LI",{});var f4e=s(Am);eoe=n(f4e,"STRONG",{});var RNr=s(eoe);Lze=r(RNr,"rag"),RNr.forEach(t),xze=r(f4e," \u2014 "),vk=n(f4e,"A",{href:!0});var BNr=s(vk);$ze=r(BNr,"RagConfig"),BNr.forEach(t),kze=r(f4e," (RAG model)"),f4e.forEach(t),Sze=i(L),ym=n(L,"LI",{});var m4e=s(ym);ooe=n(m4e,"STRONG",{});var PNr=s(ooe);Rze=r(PNr,"realm"),PNr.forEach(t),Bze=r(m4e," \u2014 "),Fk=n(m4e,"A",{href:!0});var INr=s(Fk);Pze=r(INr,"RealmConfig"),INr.forEach(t),Ize=r(m4e," (Realm model)"),m4e.forEach(t),qze=i(L),Lm=n(L,"LI",{});var g4e=s(Lm);roe=n(g4e,"STRONG",{});var qNr=s(roe);Nze=r(qNr,"reformer"),qNr.forEach(t),jze=r(g4e," \u2014 "),Tk=n(g4e,"A",{href:!0});var NNr=s(Tk);Dze=r(NNr,"ReformerConfig"),NNr.forEach(t),Gze=r(g4e," (Reformer model)"),g4e.forEach(t),Oze=i(L),xm=n(L,"LI",{});var h4e=s(xm);toe=n(h4e,"STRONG",{});var jNr=s(toe);Vze=r(jNr,"regnet"),jNr.forEach(t),Xze=r(h4e," \u2014 "),Mk=n(h4e,"A",{href:!0});var DNr=s(Mk);zze=r(DNr,"RegNetConfig"),DNr.forEach(t),Qze=r(h4e," (RegNet model)"),h4e.forEach(t),Wze=i(L),$m=n(L,"LI",{});var p4e=s($m);aoe=n(p4e,"STRONG",{});var GNr=s(aoe);Hze=r(GNr,"rembert"),GNr.forEach(t),Uze=r(p4e," \u2014 "),Ek=n(p4e,"A",{href:!0});var ONr=s(Ek);Jze=r(ONr,"RemBertConfig"),ONr.forEach(t),Yze=r(p4e," (RemBERT model)"),p4e.forEach(t),Kze=i(L),km=n(L,"LI",{});var u4e=s(km);noe=n(u4e,"STRONG",{});var VNr=s(noe);Zze=r(VNr,"resnet"),VNr.forEach(t),eQe=r(u4e," \u2014 "),Ck=n(u4e,"A",{href:!0});var XNr=s(Ck);oQe=r(XNr,"ResNetConfig"),XNr.forEach(t),rQe=r(u4e," (ResNet model)"),u4e.forEach(t),tQe=i(L),Sm=n(L,"LI",{});var _4e=s(Sm);soe=n(_4e,"STRONG",{});var zNr=s(soe);aQe=r(zNr,"retribert"),zNr.forEach(t),nQe=r(_4e," \u2014 "),wk=n(_4e,"A",{href:!0});var QNr=s(wk);sQe=r(QNr,"RetriBertConfig"),QNr.forEach(t),lQe=r(_4e," (RetriBERT model)"),_4e.forEach(t),iQe=i(L),Rm=n(L,"LI",{});var b4e=s(Rm);loe=n(b4e,"STRONG",{});var WNr=s(loe);dQe=r(WNr,"roberta"),WNr.forEach(t),cQe=r(b4e," \u2014 "),Ak=n(b4e,"A",{href:!0});var HNr=s(Ak);fQe=r(HNr,"RobertaConfig"),HNr.forEach(t),mQe=r(b4e," (RoBERTa model)"),b4e.forEach(t),gQe=i(L),Bm=n(L,"LI",{});var v4e=s(Bm);ioe=n(v4e,"STRONG",{});var UNr=s(ioe);hQe=r(UNr,"roformer"),UNr.forEach(t),pQe=r(v4e," \u2014 "),yk=n(v4e,"A",{href:!0});var JNr=s(yk);uQe=r(JNr,"RoFormerConfig"),JNr.forEach(t),_Qe=r(v4e," (RoFormer model)"),v4e.forEach(t),bQe=i(L),Pm=n(L,"LI",{});var F4e=s(Pm);doe=n(F4e,"STRONG",{});var YNr=s(doe);vQe=r(YNr,"segformer"),YNr.forEach(t),FQe=r(F4e," \u2014 "),Lk=n(F4e,"A",{href:!0});var KNr=s(Lk);TQe=r(KNr,"SegformerConfig"),KNr.forEach(t),MQe=r(F4e," (SegFormer model)"),F4e.forEach(t),EQe=i(L),Im=n(L,"LI",{});var T4e=s(Im);coe=n(T4e,"STRONG",{});var ZNr=s(coe);CQe=r(ZNr,"sew"),ZNr.forEach(t),wQe=r(T4e," \u2014 "),xk=n(T4e,"A",{href:!0});var ejr=s(xk);AQe=r(ejr,"SEWConfig"),ejr.forEach(t),yQe=r(T4e," (SEW model)"),T4e.forEach(t),LQe=i(L),qm=n(L,"LI",{});var M4e=s(qm);foe=n(M4e,"STRONG",{});var ojr=s(foe);xQe=r(ojr,"sew-d"),ojr.forEach(t),$Qe=r(M4e," \u2014 "),$k=n(M4e,"A",{href:!0});var rjr=s($k);kQe=r(rjr,"SEWDConfig"),rjr.forEach(t),SQe=r(M4e," (SEW-D model)"),M4e.forEach(t),RQe=i(L),Nm=n(L,"LI",{});var E4e=s(Nm);moe=n(E4e,"STRONG",{});var tjr=s(moe);BQe=r(tjr,"speech-encoder-decoder"),tjr.forEach(t),PQe=r(E4e," \u2014 "),kk=n(E4e,"A",{href:!0});var ajr=s(kk);IQe=r(ajr,"SpeechEncoderDecoderConfig"),ajr.forEach(t),qQe=r(E4e," (Speech Encoder decoder model)"),E4e.forEach(t),NQe=i(L),jm=n(L,"LI",{});var C4e=s(jm);goe=n(C4e,"STRONG",{});var njr=s(goe);jQe=r(njr,"speech_to_text"),njr.forEach(t),DQe=r(C4e," \u2014 "),Sk=n(C4e,"A",{href:!0});var sjr=s(Sk);GQe=r(sjr,"Speech2TextConfig"),sjr.forEach(t),OQe=r(C4e," (Speech2Text model)"),C4e.forEach(t),VQe=i(L),Dm=n(L,"LI",{});var w4e=s(Dm);hoe=n(w4e,"STRONG",{});var ljr=s(hoe);XQe=r(ljr,"speech_to_text_2"),ljr.forEach(t),zQe=r(w4e," \u2014 "),Rk=n(w4e,"A",{href:!0});var ijr=s(Rk);QQe=r(ijr,"Speech2Text2Config"),ijr.forEach(t),WQe=r(w4e," (Speech2Text2 model)"),w4e.forEach(t),HQe=i(L),Gm=n(L,"LI",{});var A4e=s(Gm);poe=n(A4e,"STRONG",{});var djr=s(poe);UQe=r(djr,"splinter"),djr.forEach(t),JQe=r(A4e," \u2014 "),Bk=n(A4e,"A",{href:!0});var cjr=s(Bk);YQe=r(cjr,"SplinterConfig"),cjr.forEach(t),KQe=r(A4e," (Splinter model)"),A4e.forEach(t),ZQe=i(L),Om=n(L,"LI",{});var y4e=s(Om);uoe=n(y4e,"STRONG",{});var fjr=s(uoe);eWe=r(fjr,"squeezebert"),fjr.forEach(t),oWe=r(y4e," \u2014 "),Pk=n(y4e,"A",{href:!0});var mjr=s(Pk);rWe=r(mjr,"SqueezeBertConfig"),mjr.forEach(t),tWe=r(y4e," (SqueezeBERT model)"),y4e.forEach(t),aWe=i(L),Vm=n(L,"LI",{});var L4e=s(Vm);_oe=n(L4e,"STRONG",{});var gjr=s(_oe);nWe=r(gjr,"swin"),gjr.forEach(t),sWe=r(L4e," \u2014 "),Ik=n(L4e,"A",{href:!0});var hjr=s(Ik);lWe=r(hjr,"SwinConfig"),hjr.forEach(t),iWe=r(L4e," (Swin model)"),L4e.forEach(t),dWe=i(L),Xm=n(L,"LI",{});var x4e=s(Xm);boe=n(x4e,"STRONG",{});var pjr=s(boe);cWe=r(pjr,"t5"),pjr.forEach(t),fWe=r(x4e," \u2014 "),qk=n(x4e,"A",{href:!0});var ujr=s(qk);mWe=r(ujr,"T5Config"),ujr.forEach(t),gWe=r(x4e," (T5 model)"),x4e.forEach(t),hWe=i(L),zm=n(L,"LI",{});var $4e=s(zm);voe=n($4e,"STRONG",{});var _jr=s(voe);pWe=r(_jr,"tapas"),_jr.forEach(t),uWe=r($4e," \u2014 "),Nk=n($4e,"A",{href:!0});var bjr=s(Nk);_We=r(bjr,"TapasConfig"),bjr.forEach(t),bWe=r($4e," (TAPAS model)"),$4e.forEach(t),vWe=i(L),Qm=n(L,"LI",{});var k4e=s(Qm);Foe=n(k4e,"STRONG",{});var vjr=s(Foe);FWe=r(vjr,"tapex"),vjr.forEach(t),TWe=r(k4e," \u2014 "),jk=n(k4e,"A",{href:!0});var Fjr=s(jk);MWe=r(Fjr,"BartConfig"),Fjr.forEach(t),EWe=r(k4e," (TAPEX model)"),k4e.forEach(t),CWe=i(L),Wm=n(L,"LI",{});var S4e=s(Wm);Toe=n(S4e,"STRONG",{});var Tjr=s(Toe);wWe=r(Tjr,"transfo-xl"),Tjr.forEach(t),AWe=r(S4e," \u2014 "),Dk=n(S4e,"A",{href:!0});var Mjr=s(Dk);yWe=r(Mjr,"TransfoXLConfig"),Mjr.forEach(t),LWe=r(S4e," (Transformer-XL model)"),S4e.forEach(t),xWe=i(L),Hm=n(L,"LI",{});var R4e=s(Hm);Moe=n(R4e,"STRONG",{});var Ejr=s(Moe);$We=r(Ejr,"trocr"),Ejr.forEach(t),kWe=r(R4e," \u2014 "),Gk=n(R4e,"A",{href:!0});var Cjr=s(Gk);SWe=r(Cjr,"TrOCRConfig"),Cjr.forEach(t),RWe=r(R4e," (TrOCR model)"),R4e.forEach(t),BWe=i(L),Um=n(L,"LI",{});var B4e=s(Um);Eoe=n(B4e,"STRONG",{});var wjr=s(Eoe);PWe=r(wjr,"unispeech"),wjr.forEach(t),IWe=r(B4e," \u2014 "),Ok=n(B4e,"A",{href:!0});var Ajr=s(Ok);qWe=r(Ajr,"UniSpeechConfig"),Ajr.forEach(t),NWe=r(B4e," (UniSpeech model)"),B4e.forEach(t),jWe=i(L),Jm=n(L,"LI",{});var P4e=s(Jm);Coe=n(P4e,"STRONG",{});var yjr=s(Coe);DWe=r(yjr,"unispeech-sat"),yjr.forEach(t),GWe=r(P4e," \u2014 "),Vk=n(P4e,"A",{href:!0});var Ljr=s(Vk);OWe=r(Ljr,"UniSpeechSatConfig"),Ljr.forEach(t),VWe=r(P4e," (UniSpeechSat model)"),P4e.forEach(t),XWe=i(L),Ym=n(L,"LI",{});var I4e=s(Ym);woe=n(I4e,"STRONG",{});var xjr=s(woe);zWe=r(xjr,"van"),xjr.forEach(t),QWe=r(I4e," \u2014 "),Xk=n(I4e,"A",{href:!0});var $jr=s(Xk);WWe=r($jr,"VanConfig"),$jr.forEach(t),HWe=r(I4e," (VAN model)"),I4e.forEach(t),UWe=i(L),Km=n(L,"LI",{});var q4e=s(Km);Aoe=n(q4e,"STRONG",{});var kjr=s(Aoe);JWe=r(kjr,"vilt"),kjr.forEach(t),YWe=r(q4e," \u2014 "),zk=n(q4e,"A",{href:!0});var Sjr=s(zk);KWe=r(Sjr,"ViltConfig"),Sjr.forEach(t),ZWe=r(q4e," (ViLT model)"),q4e.forEach(t),eHe=i(L),Zm=n(L,"LI",{});var N4e=s(Zm);yoe=n(N4e,"STRONG",{});var Rjr=s(yoe);oHe=r(Rjr,"vision-encoder-decoder"),Rjr.forEach(t),rHe=r(N4e," \u2014 "),Qk=n(N4e,"A",{href:!0});var Bjr=s(Qk);tHe=r(Bjr,"VisionEncoderDecoderConfig"),Bjr.forEach(t),aHe=r(N4e," (Vision Encoder decoder model)"),N4e.forEach(t),nHe=i(L),eg=n(L,"LI",{});var j4e=s(eg);Loe=n(j4e,"STRONG",{});var Pjr=s(Loe);sHe=r(Pjr,"vision-text-dual-encoder"),Pjr.forEach(t),lHe=r(j4e," \u2014 "),Wk=n(j4e,"A",{href:!0});var Ijr=s(Wk);iHe=r(Ijr,"VisionTextDualEncoderConfig"),Ijr.forEach(t),dHe=r(j4e," (VisionTextDualEncoder model)"),j4e.forEach(t),cHe=i(L),og=n(L,"LI",{});var D4e=s(og);xoe=n(D4e,"STRONG",{});var qjr=s(xoe);fHe=r(qjr,"visual_bert"),qjr.forEach(t),mHe=r(D4e," \u2014 "),Hk=n(D4e,"A",{href:!0});var Njr=s(Hk);gHe=r(Njr,"VisualBertConfig"),Njr.forEach(t),hHe=r(D4e," (VisualBert model)"),D4e.forEach(t),pHe=i(L),rg=n(L,"LI",{});var G4e=s(rg);$oe=n(G4e,"STRONG",{});var jjr=s($oe);uHe=r(jjr,"vit"),jjr.forEach(t),_He=r(G4e," \u2014 "),Uk=n(G4e,"A",{href:!0});var Djr=s(Uk);bHe=r(Djr,"ViTConfig"),Djr.forEach(t),vHe=r(G4e," (ViT model)"),G4e.forEach(t),FHe=i(L),tg=n(L,"LI",{});var O4e=s(tg);koe=n(O4e,"STRONG",{});var Gjr=s(koe);THe=r(Gjr,"vit_mae"),Gjr.forEach(t),MHe=r(O4e," \u2014 "),Jk=n(O4e,"A",{href:!0});var Ojr=s(Jk);EHe=r(Ojr,"ViTMAEConfig"),Ojr.forEach(t),CHe=r(O4e," (ViTMAE model)"),O4e.forEach(t),wHe=i(L),ag=n(L,"LI",{});var V4e=s(ag);Soe=n(V4e,"STRONG",{});var Vjr=s(Soe);AHe=r(Vjr,"wav2vec2"),Vjr.forEach(t),yHe=r(V4e," \u2014 "),Yk=n(V4e,"A",{href:!0});var Xjr=s(Yk);LHe=r(Xjr,"Wav2Vec2Config"),Xjr.forEach(t),xHe=r(V4e," (Wav2Vec2 model)"),V4e.forEach(t),$He=i(L),ng=n(L,"LI",{});var X4e=s(ng);Roe=n(X4e,"STRONG",{});var zjr=s(Roe);kHe=r(zjr,"wavlm"),zjr.forEach(t),SHe=r(X4e," \u2014 "),Kk=n(X4e,"A",{href:!0});var Qjr=s(Kk);RHe=r(Qjr,"WavLMConfig"),Qjr.forEach(t),BHe=r(X4e," (WavLM model)"),X4e.forEach(t),PHe=i(L),sg=n(L,"LI",{});var z4e=s(sg);Boe=n(z4e,"STRONG",{});var Wjr=s(Boe);IHe=r(Wjr,"xglm"),Wjr.forEach(t),qHe=r(z4e," \u2014 "),Zk=n(z4e,"A",{href:!0});var Hjr=s(Zk);NHe=r(Hjr,"XGLMConfig"),Hjr.forEach(t),jHe=r(z4e," (XGLM model)"),z4e.forEach(t),DHe=i(L),lg=n(L,"LI",{});var Q4e=s(lg);Poe=n(Q4e,"STRONG",{});var Ujr=s(Poe);GHe=r(Ujr,"xlm"),Ujr.forEach(t),OHe=r(Q4e," \u2014 "),eS=n(Q4e,"A",{href:!0});var Jjr=s(eS);VHe=r(Jjr,"XLMConfig"),Jjr.forEach(t),XHe=r(Q4e," (XLM model)"),Q4e.forEach(t),zHe=i(L),ig=n(L,"LI",{});var W4e=s(ig);Ioe=n(W4e,"STRONG",{});var Yjr=s(Ioe);QHe=r(Yjr,"xlm-prophetnet"),Yjr.forEach(t),WHe=r(W4e," \u2014 "),oS=n(W4e,"A",{href:!0});var Kjr=s(oS);HHe=r(Kjr,"XLMProphetNetConfig"),Kjr.forEach(t),UHe=r(W4e," (XLMProphetNet model)"),W4e.forEach(t),JHe=i(L),dg=n(L,"LI",{});var H4e=s(dg);qoe=n(H4e,"STRONG",{});var Zjr=s(qoe);YHe=r(Zjr,"xlm-roberta"),Zjr.forEach(t),KHe=r(H4e," \u2014 "),rS=n(H4e,"A",{href:!0});var eDr=s(rS);ZHe=r(eDr,"XLMRobertaConfig"),eDr.forEach(t),eUe=r(H4e," (XLM-RoBERTa model)"),H4e.forEach(t),oUe=i(L),cg=n(L,"LI",{});var U4e=s(cg);Noe=n(U4e,"STRONG",{});var oDr=s(Noe);rUe=r(oDr,"xlm-roberta-xl"),oDr.forEach(t),tUe=r(U4e," \u2014 "),tS=n(U4e,"A",{href:!0});var rDr=s(tS);aUe=r(rDr,"XLMRobertaXLConfig"),rDr.forEach(t),nUe=r(U4e," (XLM-RoBERTa-XL model)"),U4e.forEach(t),sUe=i(L),fg=n(L,"LI",{});var J4e=s(fg);joe=n(J4e,"STRONG",{});var tDr=s(joe);lUe=r(tDr,"xlnet"),tDr.forEach(t),iUe=r(J4e," \u2014 "),aS=n(J4e,"A",{href:!0});var aDr=s(aS);dUe=r(aDr,"XLNetConfig"),aDr.forEach(t),cUe=r(J4e," (XLNet model)"),J4e.forEach(t),fUe=i(L),mg=n(L,"LI",{});var Y4e=s(mg);Doe=n(Y4e,"STRONG",{});var nDr=s(Doe);mUe=r(nDr,"yolos"),nDr.forEach(t),gUe=r(Y4e," \u2014 "),nS=n(Y4e,"A",{href:!0});var sDr=s(nS);hUe=r(sDr,"YolosConfig"),sDr.forEach(t),pUe=r(Y4e," (YOLOS model)"),Y4e.forEach(t),uUe=i(L),gg=n(L,"LI",{});var K4e=s(gg);Goe=n(K4e,"STRONG",{});var lDr=s(Goe);_Ue=r(lDr,"yoso"),lDr.forEach(t),bUe=r(K4e," \u2014 "),sS=n(K4e,"A",{href:!0});var iDr=s(sS);vUe=r(iDr,"YosoConfig"),iDr.forEach(t),FUe=r(K4e," (YOSO model)"),K4e.forEach(t),L.forEach(t),TUe=i(Zr),T(hg.$$.fragment,Zr),Zr.forEach(t),MUe=i(Kr),pg=n(Kr,"DIV",{class:!0});var fqe=s(pg);T(U3.$$.fragment,fqe),EUe=i(fqe),Ooe=n(fqe,"P",{});var dDr=s(Ooe);CUe=r(dDr,"Register a new configuration for this class."),dDr.forEach(t),fqe.forEach(t),Kr.forEach(t),hPe=i(f),_i=n(f,"H2",{class:!0});var mqe=s(_i);ug=n(mqe,"A",{id:!0,class:!0,href:!0});var cDr=s(ug);Voe=n(cDr,"SPAN",{});var fDr=s(Voe);T(J3.$$.fragment,fDr),fDr.forEach(t),cDr.forEach(t),wUe=i(mqe),Xoe=n(mqe,"SPAN",{});var mDr=s(Xoe);AUe=r(mDr,"AutoTokenizer"),mDr.forEach(t),mqe.forEach(t),pPe=i(f),wo=n(f,"DIV",{class:!0});var Ps=s(wo);T(Y3.$$.fragment,Ps),yUe=i(Ps),K3=n(Ps,"P",{});var gqe=s(K3);LUe=r(gqe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),lS=n(gqe,"A",{href:!0});var gDr=s(lS);xUe=r(gDr,"AutoTokenizer.from_pretrained()"),gDr.forEach(t),$Ue=r(gqe," class method."),gqe.forEach(t),kUe=i(Ps),Z3=n(Ps,"P",{});var hqe=s(Z3);SUe=r(hqe,"This class cannot be instantiated directly using "),zoe=n(hqe,"CODE",{});var hDr=s(zoe);RUe=r(hDr,"__init__()"),hDr.forEach(t),BUe=r(hqe," (throws an error)."),hqe.forEach(t),PUe=i(Ps),Cr=n(Ps,"DIV",{class:!0});var Is=s(Cr);T(ew.$$.fragment,Is),IUe=i(Is),Qoe=n(Is,"P",{});var pDr=s(Qoe);qUe=r(pDr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),pDr.forEach(t),NUe=i(Is),Ca=n(Is,"P",{});var V5=s(Ca);jUe=r(V5,"The tokenizer class to instantiate is selected based on the "),Woe=n(V5,"CODE",{});var uDr=s(Woe);DUe=r(uDr,"model_type"),uDr.forEach(t),GUe=r(V5,` property of the config object (either
passed as an argument or loaded from `),Hoe=n(V5,"CODE",{});var _Dr=s(Hoe);OUe=r(_Dr,"pretrained_model_name_or_path"),_Dr.forEach(t),VUe=r(V5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Uoe=n(V5,"CODE",{});var bDr=s(Uoe);XUe=r(bDr,"pretrained_model_name_or_path"),bDr.forEach(t),zUe=r(V5,":"),V5.forEach(t),QUe=i(Is),k=n(Is,"UL",{});var S=s(k);kn=n(S,"LI",{});var ox=s(kn);Joe=n(ox,"STRONG",{});var vDr=s(Joe);WUe=r(vDr,"albert"),vDr.forEach(t),HUe=r(ox," \u2014 "),iS=n(ox,"A",{href:!0});var FDr=s(iS);UUe=r(FDr,"AlbertTokenizer"),FDr.forEach(t),JUe=r(ox," or "),dS=n(ox,"A",{href:!0});var TDr=s(dS);YUe=r(TDr,"AlbertTokenizerFast"),TDr.forEach(t),KUe=r(ox," (ALBERT model)"),ox.forEach(t),ZUe=i(S),Sn=n(S,"LI",{});var rx=s(Sn);Yoe=n(rx,"STRONG",{});var MDr=s(Yoe);eJe=r(MDr,"bart"),MDr.forEach(t),oJe=r(rx," \u2014 "),cS=n(rx,"A",{href:!0});var EDr=s(cS);rJe=r(EDr,"BartTokenizer"),EDr.forEach(t),tJe=r(rx," or "),fS=n(rx,"A",{href:!0});var CDr=s(fS);aJe=r(CDr,"BartTokenizerFast"),CDr.forEach(t),nJe=r(rx," (BART model)"),rx.forEach(t),sJe=i(S),Rn=n(S,"LI",{});var tx=s(Rn);Koe=n(tx,"STRONG",{});var wDr=s(Koe);lJe=r(wDr,"barthez"),wDr.forEach(t),iJe=r(tx," \u2014 "),mS=n(tx,"A",{href:!0});var ADr=s(mS);dJe=r(ADr,"BarthezTokenizer"),ADr.forEach(t),cJe=r(tx," or "),gS=n(tx,"A",{href:!0});var yDr=s(gS);fJe=r(yDr,"BarthezTokenizerFast"),yDr.forEach(t),mJe=r(tx," (BARThez model)"),tx.forEach(t),gJe=i(S),_g=n(S,"LI",{});var Z4e=s(_g);Zoe=n(Z4e,"STRONG",{});var LDr=s(Zoe);hJe=r(LDr,"bartpho"),LDr.forEach(t),pJe=r(Z4e," \u2014 "),hS=n(Z4e,"A",{href:!0});var xDr=s(hS);uJe=r(xDr,"BartphoTokenizer"),xDr.forEach(t),_Je=r(Z4e," (BARTpho model)"),Z4e.forEach(t),bJe=i(S),Bn=n(S,"LI",{});var ax=s(Bn);ere=n(ax,"STRONG",{});var $Dr=s(ere);vJe=r($Dr,"bert"),$Dr.forEach(t),FJe=r(ax," \u2014 "),pS=n(ax,"A",{href:!0});var kDr=s(pS);TJe=r(kDr,"BertTokenizer"),kDr.forEach(t),MJe=r(ax," or "),uS=n(ax,"A",{href:!0});var SDr=s(uS);EJe=r(SDr,"BertTokenizerFast"),SDr.forEach(t),CJe=r(ax," (BERT model)"),ax.forEach(t),wJe=i(S),bg=n(S,"LI",{});var eEe=s(bg);ore=n(eEe,"STRONG",{});var RDr=s(ore);AJe=r(RDr,"bert-generation"),RDr.forEach(t),yJe=r(eEe," \u2014 "),_S=n(eEe,"A",{href:!0});var BDr=s(_S);LJe=r(BDr,"BertGenerationTokenizer"),BDr.forEach(t),xJe=r(eEe," (Bert Generation model)"),eEe.forEach(t),$Je=i(S),vg=n(S,"LI",{});var oEe=s(vg);rre=n(oEe,"STRONG",{});var PDr=s(rre);kJe=r(PDr,"bert-japanese"),PDr.forEach(t),SJe=r(oEe," \u2014 "),bS=n(oEe,"A",{href:!0});var IDr=s(bS);RJe=r(IDr,"BertJapaneseTokenizer"),IDr.forEach(t),BJe=r(oEe," (BertJapanese model)"),oEe.forEach(t),PJe=i(S),Fg=n(S,"LI",{});var rEe=s(Fg);tre=n(rEe,"STRONG",{});var qDr=s(tre);IJe=r(qDr,"bertweet"),qDr.forEach(t),qJe=r(rEe," \u2014 "),vS=n(rEe,"A",{href:!0});var NDr=s(vS);NJe=r(NDr,"BertweetTokenizer"),NDr.forEach(t),jJe=r(rEe," (Bertweet model)"),rEe.forEach(t),DJe=i(S),Pn=n(S,"LI",{});var nx=s(Pn);are=n(nx,"STRONG",{});var jDr=s(are);GJe=r(jDr,"big_bird"),jDr.forEach(t),OJe=r(nx," \u2014 "),FS=n(nx,"A",{href:!0});var DDr=s(FS);VJe=r(DDr,"BigBirdTokenizer"),DDr.forEach(t),XJe=r(nx," or "),TS=n(nx,"A",{href:!0});var GDr=s(TS);zJe=r(GDr,"BigBirdTokenizerFast"),GDr.forEach(t),QJe=r(nx," (BigBird model)"),nx.forEach(t),WJe=i(S),In=n(S,"LI",{});var sx=s(In);nre=n(sx,"STRONG",{});var ODr=s(nre);HJe=r(ODr,"bigbird_pegasus"),ODr.forEach(t),UJe=r(sx," \u2014 "),MS=n(sx,"A",{href:!0});var VDr=s(MS);JJe=r(VDr,"PegasusTokenizer"),VDr.forEach(t),YJe=r(sx," or "),ES=n(sx,"A",{href:!0});var XDr=s(ES);KJe=r(XDr,"PegasusTokenizerFast"),XDr.forEach(t),ZJe=r(sx," (BigBirdPegasus model)"),sx.forEach(t),eYe=i(S),qn=n(S,"LI",{});var lx=s(qn);sre=n(lx,"STRONG",{});var zDr=s(sre);oYe=r(zDr,"blenderbot"),zDr.forEach(t),rYe=r(lx," \u2014 "),CS=n(lx,"A",{href:!0});var QDr=s(CS);tYe=r(QDr,"BlenderbotTokenizer"),QDr.forEach(t),aYe=r(lx," or "),wS=n(lx,"A",{href:!0});var WDr=s(wS);nYe=r(WDr,"BlenderbotTokenizerFast"),WDr.forEach(t),sYe=r(lx," (Blenderbot model)"),lx.forEach(t),lYe=i(S),Tg=n(S,"LI",{});var tEe=s(Tg);lre=n(tEe,"STRONG",{});var HDr=s(lre);iYe=r(HDr,"blenderbot-small"),HDr.forEach(t),dYe=r(tEe," \u2014 "),AS=n(tEe,"A",{href:!0});var UDr=s(AS);cYe=r(UDr,"BlenderbotSmallTokenizer"),UDr.forEach(t),fYe=r(tEe," (BlenderbotSmall model)"),tEe.forEach(t),mYe=i(S),Mg=n(S,"LI",{});var aEe=s(Mg);ire=n(aEe,"STRONG",{});var JDr=s(ire);gYe=r(JDr,"byt5"),JDr.forEach(t),hYe=r(aEe," \u2014 "),yS=n(aEe,"A",{href:!0});var YDr=s(yS);pYe=r(YDr,"ByT5Tokenizer"),YDr.forEach(t),uYe=r(aEe," (ByT5 model)"),aEe.forEach(t),_Ye=i(S),Nn=n(S,"LI",{});var ix=s(Nn);dre=n(ix,"STRONG",{});var KDr=s(dre);bYe=r(KDr,"camembert"),KDr.forEach(t),vYe=r(ix," \u2014 "),LS=n(ix,"A",{href:!0});var ZDr=s(LS);FYe=r(ZDr,"CamembertTokenizer"),ZDr.forEach(t),TYe=r(ix," or "),xS=n(ix,"A",{href:!0});var eGr=s(xS);MYe=r(eGr,"CamembertTokenizerFast"),eGr.forEach(t),EYe=r(ix," (CamemBERT model)"),ix.forEach(t),CYe=i(S),Eg=n(S,"LI",{});var nEe=s(Eg);cre=n(nEe,"STRONG",{});var oGr=s(cre);wYe=r(oGr,"canine"),oGr.forEach(t),AYe=r(nEe," \u2014 "),$S=n(nEe,"A",{href:!0});var rGr=s($S);yYe=r(rGr,"CanineTokenizer"),rGr.forEach(t),LYe=r(nEe," (Canine model)"),nEe.forEach(t),xYe=i(S),jn=n(S,"LI",{});var dx=s(jn);fre=n(dx,"STRONG",{});var tGr=s(fre);$Ye=r(tGr,"clip"),tGr.forEach(t),kYe=r(dx," \u2014 "),kS=n(dx,"A",{href:!0});var aGr=s(kS);SYe=r(aGr,"CLIPTokenizer"),aGr.forEach(t),RYe=r(dx," or "),SS=n(dx,"A",{href:!0});var nGr=s(SS);BYe=r(nGr,"CLIPTokenizerFast"),nGr.forEach(t),PYe=r(dx," (CLIP model)"),dx.forEach(t),IYe=i(S),Dn=n(S,"LI",{});var cx=s(Dn);mre=n(cx,"STRONG",{});var sGr=s(mre);qYe=r(sGr,"convbert"),sGr.forEach(t),NYe=r(cx," \u2014 "),RS=n(cx,"A",{href:!0});var lGr=s(RS);jYe=r(lGr,"ConvBertTokenizer"),lGr.forEach(t),DYe=r(cx," or "),BS=n(cx,"A",{href:!0});var iGr=s(BS);GYe=r(iGr,"ConvBertTokenizerFast"),iGr.forEach(t),OYe=r(cx," (ConvBERT model)"),cx.forEach(t),VYe=i(S),Gn=n(S,"LI",{});var fx=s(Gn);gre=n(fx,"STRONG",{});var dGr=s(gre);XYe=r(dGr,"cpm"),dGr.forEach(t),zYe=r(fx," \u2014 "),PS=n(fx,"A",{href:!0});var cGr=s(PS);QYe=r(cGr,"CpmTokenizer"),cGr.forEach(t),WYe=r(fx," or "),IS=n(fx,"A",{href:!0});var fGr=s(IS);HYe=r(fGr,"CpmTokenizerFast"),fGr.forEach(t),UYe=r(fx," (CPM model)"),fx.forEach(t),JYe=i(S),Cg=n(S,"LI",{});var sEe=s(Cg);hre=n(sEe,"STRONG",{});var mGr=s(hre);YYe=r(mGr,"ctrl"),mGr.forEach(t),KYe=r(sEe," \u2014 "),qS=n(sEe,"A",{href:!0});var gGr=s(qS);ZYe=r(gGr,"CTRLTokenizer"),gGr.forEach(t),eKe=r(sEe," (CTRL model)"),sEe.forEach(t),oKe=i(S),On=n(S,"LI",{});var mx=s(On);pre=n(mx,"STRONG",{});var hGr=s(pre);rKe=r(hGr,"data2vec-text"),hGr.forEach(t),tKe=r(mx," \u2014 "),NS=n(mx,"A",{href:!0});var pGr=s(NS);aKe=r(pGr,"RobertaTokenizer"),pGr.forEach(t),nKe=r(mx," or "),jS=n(mx,"A",{href:!0});var uGr=s(jS);sKe=r(uGr,"RobertaTokenizerFast"),uGr.forEach(t),lKe=r(mx," (Data2VecText model)"),mx.forEach(t),iKe=i(S),Vn=n(S,"LI",{});var gx=s(Vn);ure=n(gx,"STRONG",{});var _Gr=s(ure);dKe=r(_Gr,"deberta"),_Gr.forEach(t),cKe=r(gx," \u2014 "),DS=n(gx,"A",{href:!0});var bGr=s(DS);fKe=r(bGr,"DebertaTokenizer"),bGr.forEach(t),mKe=r(gx," or "),GS=n(gx,"A",{href:!0});var vGr=s(GS);gKe=r(vGr,"DebertaTokenizerFast"),vGr.forEach(t),hKe=r(gx," (DeBERTa model)"),gx.forEach(t),pKe=i(S),Xn=n(S,"LI",{});var hx=s(Xn);_re=n(hx,"STRONG",{});var FGr=s(_re);uKe=r(FGr,"deberta-v2"),FGr.forEach(t),_Ke=r(hx," \u2014 "),OS=n(hx,"A",{href:!0});var TGr=s(OS);bKe=r(TGr,"DebertaV2Tokenizer"),TGr.forEach(t),vKe=r(hx," or "),VS=n(hx,"A",{href:!0});var MGr=s(VS);FKe=r(MGr,"DebertaV2TokenizerFast"),MGr.forEach(t),TKe=r(hx," (DeBERTa-v2 model)"),hx.forEach(t),MKe=i(S),zn=n(S,"LI",{});var px=s(zn);bre=n(px,"STRONG",{});var EGr=s(bre);EKe=r(EGr,"distilbert"),EGr.forEach(t),CKe=r(px," \u2014 "),XS=n(px,"A",{href:!0});var CGr=s(XS);wKe=r(CGr,"DistilBertTokenizer"),CGr.forEach(t),AKe=r(px," or "),zS=n(px,"A",{href:!0});var wGr=s(zS);yKe=r(wGr,"DistilBertTokenizerFast"),wGr.forEach(t),LKe=r(px," (DistilBERT model)"),px.forEach(t),xKe=i(S),Qn=n(S,"LI",{});var ux=s(Qn);vre=n(ux,"STRONG",{});var AGr=s(vre);$Ke=r(AGr,"dpr"),AGr.forEach(t),kKe=r(ux," \u2014 "),QS=n(ux,"A",{href:!0});var yGr=s(QS);SKe=r(yGr,"DPRQuestionEncoderTokenizer"),yGr.forEach(t),RKe=r(ux," or "),WS=n(ux,"A",{href:!0});var LGr=s(WS);BKe=r(LGr,"DPRQuestionEncoderTokenizerFast"),LGr.forEach(t),PKe=r(ux," (DPR model)"),ux.forEach(t),IKe=i(S),Wn=n(S,"LI",{});var _x=s(Wn);Fre=n(_x,"STRONG",{});var xGr=s(Fre);qKe=r(xGr,"electra"),xGr.forEach(t),NKe=r(_x," \u2014 "),HS=n(_x,"A",{href:!0});var $Gr=s(HS);jKe=r($Gr,"ElectraTokenizer"),$Gr.forEach(t),DKe=r(_x," or "),US=n(_x,"A",{href:!0});var kGr=s(US);GKe=r(kGr,"ElectraTokenizerFast"),kGr.forEach(t),OKe=r(_x," (ELECTRA model)"),_x.forEach(t),VKe=i(S),wg=n(S,"LI",{});var lEe=s(wg);Tre=n(lEe,"STRONG",{});var SGr=s(Tre);XKe=r(SGr,"flaubert"),SGr.forEach(t),zKe=r(lEe," \u2014 "),JS=n(lEe,"A",{href:!0});var RGr=s(JS);QKe=r(RGr,"FlaubertTokenizer"),RGr.forEach(t),WKe=r(lEe," (FlauBERT model)"),lEe.forEach(t),HKe=i(S),Hn=n(S,"LI",{});var bx=s(Hn);Mre=n(bx,"STRONG",{});var BGr=s(Mre);UKe=r(BGr,"fnet"),BGr.forEach(t),JKe=r(bx," \u2014 "),YS=n(bx,"A",{href:!0});var PGr=s(YS);YKe=r(PGr,"FNetTokenizer"),PGr.forEach(t),KKe=r(bx," or "),KS=n(bx,"A",{href:!0});var IGr=s(KS);ZKe=r(IGr,"FNetTokenizerFast"),IGr.forEach(t),eZe=r(bx," (FNet model)"),bx.forEach(t),oZe=i(S),Ag=n(S,"LI",{});var iEe=s(Ag);Ere=n(iEe,"STRONG",{});var qGr=s(Ere);rZe=r(qGr,"fsmt"),qGr.forEach(t),tZe=r(iEe," \u2014 "),ZS=n(iEe,"A",{href:!0});var NGr=s(ZS);aZe=r(NGr,"FSMTTokenizer"),NGr.forEach(t),nZe=r(iEe," (FairSeq Machine-Translation model)"),iEe.forEach(t),sZe=i(S),Un=n(S,"LI",{});var vx=s(Un);Cre=n(vx,"STRONG",{});var jGr=s(Cre);lZe=r(jGr,"funnel"),jGr.forEach(t),iZe=r(vx," \u2014 "),eR=n(vx,"A",{href:!0});var DGr=s(eR);dZe=r(DGr,"FunnelTokenizer"),DGr.forEach(t),cZe=r(vx," or "),oR=n(vx,"A",{href:!0});var GGr=s(oR);fZe=r(GGr,"FunnelTokenizerFast"),GGr.forEach(t),mZe=r(vx," (Funnel Transformer model)"),vx.forEach(t),gZe=i(S),Jn=n(S,"LI",{});var Fx=s(Jn);wre=n(Fx,"STRONG",{});var OGr=s(wre);hZe=r(OGr,"gpt2"),OGr.forEach(t),pZe=r(Fx," \u2014 "),rR=n(Fx,"A",{href:!0});var VGr=s(rR);uZe=r(VGr,"GPT2Tokenizer"),VGr.forEach(t),_Ze=r(Fx," or "),tR=n(Fx,"A",{href:!0});var XGr=s(tR);bZe=r(XGr,"GPT2TokenizerFast"),XGr.forEach(t),vZe=r(Fx," (OpenAI GPT-2 model)"),Fx.forEach(t),FZe=i(S),Yn=n(S,"LI",{});var Tx=s(Yn);Are=n(Tx,"STRONG",{});var zGr=s(Are);TZe=r(zGr,"gpt_neo"),zGr.forEach(t),MZe=r(Tx," \u2014 "),aR=n(Tx,"A",{href:!0});var QGr=s(aR);EZe=r(QGr,"GPT2Tokenizer"),QGr.forEach(t),CZe=r(Tx," or "),nR=n(Tx,"A",{href:!0});var WGr=s(nR);wZe=r(WGr,"GPT2TokenizerFast"),WGr.forEach(t),AZe=r(Tx," (GPT Neo model)"),Tx.forEach(t),yZe=i(S),Kn=n(S,"LI",{});var Mx=s(Kn);yre=n(Mx,"STRONG",{});var HGr=s(yre);LZe=r(HGr,"gptj"),HGr.forEach(t),xZe=r(Mx," \u2014 "),sR=n(Mx,"A",{href:!0});var UGr=s(sR);$Ze=r(UGr,"GPT2Tokenizer"),UGr.forEach(t),kZe=r(Mx," or "),lR=n(Mx,"A",{href:!0});var JGr=s(lR);SZe=r(JGr,"GPT2TokenizerFast"),JGr.forEach(t),RZe=r(Mx," (GPT-J model)"),Mx.forEach(t),BZe=i(S),Zn=n(S,"LI",{});var Ex=s(Zn);Lre=n(Ex,"STRONG",{});var YGr=s(Lre);PZe=r(YGr,"herbert"),YGr.forEach(t),IZe=r(Ex," \u2014 "),iR=n(Ex,"A",{href:!0});var KGr=s(iR);qZe=r(KGr,"HerbertTokenizer"),KGr.forEach(t),NZe=r(Ex," or "),dR=n(Ex,"A",{href:!0});var ZGr=s(dR);jZe=r(ZGr,"HerbertTokenizerFast"),ZGr.forEach(t),DZe=r(Ex," (HerBERT model)"),Ex.forEach(t),GZe=i(S),yg=n(S,"LI",{});var dEe=s(yg);xre=n(dEe,"STRONG",{});var eOr=s(xre);OZe=r(eOr,"hubert"),eOr.forEach(t),VZe=r(dEe," \u2014 "),cR=n(dEe,"A",{href:!0});var oOr=s(cR);XZe=r(oOr,"Wav2Vec2CTCTokenizer"),oOr.forEach(t),zZe=r(dEe," (Hubert model)"),dEe.forEach(t),QZe=i(S),es=n(S,"LI",{});var Cx=s(es);$re=n(Cx,"STRONG",{});var rOr=s($re);WZe=r(rOr,"ibert"),rOr.forEach(t),HZe=r(Cx," \u2014 "),fR=n(Cx,"A",{href:!0});var tOr=s(fR);UZe=r(tOr,"RobertaTokenizer"),tOr.forEach(t),JZe=r(Cx," or "),mR=n(Cx,"A",{href:!0});var aOr=s(mR);YZe=r(aOr,"RobertaTokenizerFast"),aOr.forEach(t),KZe=r(Cx," (I-BERT model)"),Cx.forEach(t),ZZe=i(S),os=n(S,"LI",{});var wx=s(os);kre=n(wx,"STRONG",{});var nOr=s(kre);eeo=r(nOr,"layoutlm"),nOr.forEach(t),oeo=r(wx," \u2014 "),gR=n(wx,"A",{href:!0});var sOr=s(gR);reo=r(sOr,"LayoutLMTokenizer"),sOr.forEach(t),teo=r(wx," or "),hR=n(wx,"A",{href:!0});var lOr=s(hR);aeo=r(lOr,"LayoutLMTokenizerFast"),lOr.forEach(t),neo=r(wx," (LayoutLM model)"),wx.forEach(t),seo=i(S),rs=n(S,"LI",{});var Ax=s(rs);Sre=n(Ax,"STRONG",{});var iOr=s(Sre);leo=r(iOr,"layoutlmv2"),iOr.forEach(t),ieo=r(Ax," \u2014 "),pR=n(Ax,"A",{href:!0});var dOr=s(pR);deo=r(dOr,"LayoutLMv2Tokenizer"),dOr.forEach(t),ceo=r(Ax," or "),uR=n(Ax,"A",{href:!0});var cOr=s(uR);feo=r(cOr,"LayoutLMv2TokenizerFast"),cOr.forEach(t),meo=r(Ax," (LayoutLMv2 model)"),Ax.forEach(t),geo=i(S),ts=n(S,"LI",{});var yx=s(ts);Rre=n(yx,"STRONG",{});var fOr=s(Rre);heo=r(fOr,"layoutxlm"),fOr.forEach(t),peo=r(yx," \u2014 "),_R=n(yx,"A",{href:!0});var mOr=s(_R);ueo=r(mOr,"LayoutXLMTokenizer"),mOr.forEach(t),_eo=r(yx," or "),bR=n(yx,"A",{href:!0});var gOr=s(bR);beo=r(gOr,"LayoutXLMTokenizerFast"),gOr.forEach(t),veo=r(yx," (LayoutXLM model)"),yx.forEach(t),Feo=i(S),as=n(S,"LI",{});var Lx=s(as);Bre=n(Lx,"STRONG",{});var hOr=s(Bre);Teo=r(hOr,"led"),hOr.forEach(t),Meo=r(Lx," \u2014 "),vR=n(Lx,"A",{href:!0});var pOr=s(vR);Eeo=r(pOr,"LEDTokenizer"),pOr.forEach(t),Ceo=r(Lx," or "),FR=n(Lx,"A",{href:!0});var uOr=s(FR);weo=r(uOr,"LEDTokenizerFast"),uOr.forEach(t),Aeo=r(Lx," (LED model)"),Lx.forEach(t),yeo=i(S),ns=n(S,"LI",{});var xx=s(ns);Pre=n(xx,"STRONG",{});var _Or=s(Pre);Leo=r(_Or,"longformer"),_Or.forEach(t),xeo=r(xx," \u2014 "),TR=n(xx,"A",{href:!0});var bOr=s(TR);$eo=r(bOr,"LongformerTokenizer"),bOr.forEach(t),keo=r(xx," or "),MR=n(xx,"A",{href:!0});var vOr=s(MR);Seo=r(vOr,"LongformerTokenizerFast"),vOr.forEach(t),Reo=r(xx," (Longformer model)"),xx.forEach(t),Beo=i(S),Lg=n(S,"LI",{});var cEe=s(Lg);Ire=n(cEe,"STRONG",{});var FOr=s(Ire);Peo=r(FOr,"luke"),FOr.forEach(t),Ieo=r(cEe," \u2014 "),ER=n(cEe,"A",{href:!0});var TOr=s(ER);qeo=r(TOr,"LukeTokenizer"),TOr.forEach(t),Neo=r(cEe," (LUKE model)"),cEe.forEach(t),jeo=i(S),ss=n(S,"LI",{});var $x=s(ss);qre=n($x,"STRONG",{});var MOr=s(qre);Deo=r(MOr,"lxmert"),MOr.forEach(t),Geo=r($x," \u2014 "),CR=n($x,"A",{href:!0});var EOr=s(CR);Oeo=r(EOr,"LxmertTokenizer"),EOr.forEach(t),Veo=r($x," or "),wR=n($x,"A",{href:!0});var COr=s(wR);Xeo=r(COr,"LxmertTokenizerFast"),COr.forEach(t),zeo=r($x," (LXMERT model)"),$x.forEach(t),Qeo=i(S),xg=n(S,"LI",{});var fEe=s(xg);Nre=n(fEe,"STRONG",{});var wOr=s(Nre);Weo=r(wOr,"m2m_100"),wOr.forEach(t),Heo=r(fEe," \u2014 "),AR=n(fEe,"A",{href:!0});var AOr=s(AR);Ueo=r(AOr,"M2M100Tokenizer"),AOr.forEach(t),Jeo=r(fEe," (M2M100 model)"),fEe.forEach(t),Yeo=i(S),$g=n(S,"LI",{});var mEe=s($g);jre=n(mEe,"STRONG",{});var yOr=s(jre);Keo=r(yOr,"marian"),yOr.forEach(t),Zeo=r(mEe," \u2014 "),yR=n(mEe,"A",{href:!0});var LOr=s(yR);eoo=r(LOr,"MarianTokenizer"),LOr.forEach(t),ooo=r(mEe," (Marian model)"),mEe.forEach(t),roo=i(S),ls=n(S,"LI",{});var kx=s(ls);Dre=n(kx,"STRONG",{});var xOr=s(Dre);too=r(xOr,"mbart"),xOr.forEach(t),aoo=r(kx," \u2014 "),LR=n(kx,"A",{href:!0});var $Or=s(LR);noo=r($Or,"MBartTokenizer"),$Or.forEach(t),soo=r(kx," or "),xR=n(kx,"A",{href:!0});var kOr=s(xR);loo=r(kOr,"MBartTokenizerFast"),kOr.forEach(t),ioo=r(kx," (mBART model)"),kx.forEach(t),doo=i(S),is=n(S,"LI",{});var Sx=s(is);Gre=n(Sx,"STRONG",{});var SOr=s(Gre);coo=r(SOr,"mbart50"),SOr.forEach(t),foo=r(Sx," \u2014 "),$R=n(Sx,"A",{href:!0});var ROr=s($R);moo=r(ROr,"MBart50Tokenizer"),ROr.forEach(t),goo=r(Sx," or "),kR=n(Sx,"A",{href:!0});var BOr=s(kR);hoo=r(BOr,"MBart50TokenizerFast"),BOr.forEach(t),poo=r(Sx," (mBART-50 model)"),Sx.forEach(t),uoo=i(S),ds=n(S,"LI",{});var Rx=s(ds);Ore=n(Rx,"STRONG",{});var POr=s(Ore);_oo=r(POr,"megatron-bert"),POr.forEach(t),boo=r(Rx," \u2014 "),SR=n(Rx,"A",{href:!0});var IOr=s(SR);voo=r(IOr,"BertTokenizer"),IOr.forEach(t),Foo=r(Rx," or "),RR=n(Rx,"A",{href:!0});var qOr=s(RR);Too=r(qOr,"BertTokenizerFast"),qOr.forEach(t),Moo=r(Rx," (MegatronBert model)"),Rx.forEach(t),Eoo=i(S),kg=n(S,"LI",{});var gEe=s(kg);Vre=n(gEe,"STRONG",{});var NOr=s(Vre);Coo=r(NOr,"mluke"),NOr.forEach(t),woo=r(gEe," \u2014 "),BR=n(gEe,"A",{href:!0});var jOr=s(BR);Aoo=r(jOr,"MLukeTokenizer"),jOr.forEach(t),yoo=r(gEe," (mLUKE model)"),gEe.forEach(t),Loo=i(S),cs=n(S,"LI",{});var Bx=s(cs);Xre=n(Bx,"STRONG",{});var DOr=s(Xre);xoo=r(DOr,"mobilebert"),DOr.forEach(t),$oo=r(Bx," \u2014 "),PR=n(Bx,"A",{href:!0});var GOr=s(PR);koo=r(GOr,"MobileBertTokenizer"),GOr.forEach(t),Soo=r(Bx," or "),IR=n(Bx,"A",{href:!0});var OOr=s(IR);Roo=r(OOr,"MobileBertTokenizerFast"),OOr.forEach(t),Boo=r(Bx," (MobileBERT model)"),Bx.forEach(t),Poo=i(S),fs=n(S,"LI",{});var Px=s(fs);zre=n(Px,"STRONG",{});var VOr=s(zre);Ioo=r(VOr,"mpnet"),VOr.forEach(t),qoo=r(Px," \u2014 "),qR=n(Px,"A",{href:!0});var XOr=s(qR);Noo=r(XOr,"MPNetTokenizer"),XOr.forEach(t),joo=r(Px," or "),NR=n(Px,"A",{href:!0});var zOr=s(NR);Doo=r(zOr,"MPNetTokenizerFast"),zOr.forEach(t),Goo=r(Px," (MPNet model)"),Px.forEach(t),Ooo=i(S),ms=n(S,"LI",{});var Ix=s(ms);Qre=n(Ix,"STRONG",{});var QOr=s(Qre);Voo=r(QOr,"mt5"),QOr.forEach(t),Xoo=r(Ix," \u2014 "),jR=n(Ix,"A",{href:!0});var WOr=s(jR);zoo=r(WOr,"MT5Tokenizer"),WOr.forEach(t),Qoo=r(Ix," or "),DR=n(Ix,"A",{href:!0});var HOr=s(DR);Woo=r(HOr,"MT5TokenizerFast"),HOr.forEach(t),Hoo=r(Ix," (mT5 model)"),Ix.forEach(t),Uoo=i(S),gs=n(S,"LI",{});var qx=s(gs);Wre=n(qx,"STRONG",{});var UOr=s(Wre);Joo=r(UOr,"nystromformer"),UOr.forEach(t),Yoo=r(qx," \u2014 "),GR=n(qx,"A",{href:!0});var JOr=s(GR);Koo=r(JOr,"AlbertTokenizer"),JOr.forEach(t),Zoo=r(qx," or "),OR=n(qx,"A",{href:!0});var YOr=s(OR);ero=r(YOr,"AlbertTokenizerFast"),YOr.forEach(t),oro=r(qx," (Nystromformer model)"),qx.forEach(t),rro=i(S),hs=n(S,"LI",{});var Nx=s(hs);Hre=n(Nx,"STRONG",{});var KOr=s(Hre);tro=r(KOr,"openai-gpt"),KOr.forEach(t),aro=r(Nx," \u2014 "),VR=n(Nx,"A",{href:!0});var ZOr=s(VR);nro=r(ZOr,"OpenAIGPTTokenizer"),ZOr.forEach(t),sro=r(Nx," or "),XR=n(Nx,"A",{href:!0});var eVr=s(XR);lro=r(eVr,"OpenAIGPTTokenizerFast"),eVr.forEach(t),iro=r(Nx," (OpenAI GPT model)"),Nx.forEach(t),dro=i(S),ps=n(S,"LI",{});var jx=s(ps);Ure=n(jx,"STRONG",{});var oVr=s(Ure);cro=r(oVr,"pegasus"),oVr.forEach(t),fro=r(jx," \u2014 "),zR=n(jx,"A",{href:!0});var rVr=s(zR);mro=r(rVr,"PegasusTokenizer"),rVr.forEach(t),gro=r(jx," or "),QR=n(jx,"A",{href:!0});var tVr=s(QR);hro=r(tVr,"PegasusTokenizerFast"),tVr.forEach(t),pro=r(jx," (Pegasus model)"),jx.forEach(t),uro=i(S),Sg=n(S,"LI",{});var hEe=s(Sg);Jre=n(hEe,"STRONG",{});var aVr=s(Jre);_ro=r(aVr,"perceiver"),aVr.forEach(t),bro=r(hEe," \u2014 "),WR=n(hEe,"A",{href:!0});var nVr=s(WR);vro=r(nVr,"PerceiverTokenizer"),nVr.forEach(t),Fro=r(hEe," (Perceiver model)"),hEe.forEach(t),Tro=i(S),Rg=n(S,"LI",{});var pEe=s(Rg);Yre=n(pEe,"STRONG",{});var sVr=s(Yre);Mro=r(sVr,"phobert"),sVr.forEach(t),Ero=r(pEe," \u2014 "),HR=n(pEe,"A",{href:!0});var lVr=s(HR);Cro=r(lVr,"PhobertTokenizer"),lVr.forEach(t),wro=r(pEe," (PhoBERT model)"),pEe.forEach(t),Aro=i(S),Bg=n(S,"LI",{});var uEe=s(Bg);Kre=n(uEe,"STRONG",{});var iVr=s(Kre);yro=r(iVr,"plbart"),iVr.forEach(t),Lro=r(uEe," \u2014 "),UR=n(uEe,"A",{href:!0});var dVr=s(UR);xro=r(dVr,"PLBartTokenizer"),dVr.forEach(t),$ro=r(uEe," (PLBart model)"),uEe.forEach(t),kro=i(S),Pg=n(S,"LI",{});var _Ee=s(Pg);Zre=n(_Ee,"STRONG",{});var cVr=s(Zre);Sro=r(cVr,"prophetnet"),cVr.forEach(t),Rro=r(_Ee," \u2014 "),JR=n(_Ee,"A",{href:!0});var fVr=s(JR);Bro=r(fVr,"ProphetNetTokenizer"),fVr.forEach(t),Pro=r(_Ee," (ProphetNet model)"),_Ee.forEach(t),Iro=i(S),us=n(S,"LI",{});var Dx=s(us);ete=n(Dx,"STRONG",{});var mVr=s(ete);qro=r(mVr,"qdqbert"),mVr.forEach(t),Nro=r(Dx," \u2014 "),YR=n(Dx,"A",{href:!0});var gVr=s(YR);jro=r(gVr,"BertTokenizer"),gVr.forEach(t),Dro=r(Dx," or "),KR=n(Dx,"A",{href:!0});var hVr=s(KR);Gro=r(hVr,"BertTokenizerFast"),hVr.forEach(t),Oro=r(Dx," (QDQBert model)"),Dx.forEach(t),Vro=i(S),Ig=n(S,"LI",{});var bEe=s(Ig);ote=n(bEe,"STRONG",{});var pVr=s(ote);Xro=r(pVr,"rag"),pVr.forEach(t),zro=r(bEe," \u2014 "),ZR=n(bEe,"A",{href:!0});var uVr=s(ZR);Qro=r(uVr,"RagTokenizer"),uVr.forEach(t),Wro=r(bEe," (RAG model)"),bEe.forEach(t),Hro=i(S),_s=n(S,"LI",{});var Gx=s(_s);rte=n(Gx,"STRONG",{});var _Vr=s(rte);Uro=r(_Vr,"realm"),_Vr.forEach(t),Jro=r(Gx," \u2014 "),eB=n(Gx,"A",{href:!0});var bVr=s(eB);Yro=r(bVr,"RealmTokenizer"),bVr.forEach(t),Kro=r(Gx," or "),oB=n(Gx,"A",{href:!0});var vVr=s(oB);Zro=r(vVr,"RealmTokenizerFast"),vVr.forEach(t),eto=r(Gx," (Realm model)"),Gx.forEach(t),oto=i(S),bs=n(S,"LI",{});var Ox=s(bs);tte=n(Ox,"STRONG",{});var FVr=s(tte);rto=r(FVr,"reformer"),FVr.forEach(t),tto=r(Ox," \u2014 "),rB=n(Ox,"A",{href:!0});var TVr=s(rB);ato=r(TVr,"ReformerTokenizer"),TVr.forEach(t),nto=r(Ox," or "),tB=n(Ox,"A",{href:!0});var MVr=s(tB);sto=r(MVr,"ReformerTokenizerFast"),MVr.forEach(t),lto=r(Ox," (Reformer model)"),Ox.forEach(t),ito=i(S),vs=n(S,"LI",{});var Vx=s(vs);ate=n(Vx,"STRONG",{});var EVr=s(ate);dto=r(EVr,"rembert"),EVr.forEach(t),cto=r(Vx," \u2014 "),aB=n(Vx,"A",{href:!0});var CVr=s(aB);fto=r(CVr,"RemBertTokenizer"),CVr.forEach(t),mto=r(Vx," or "),nB=n(Vx,"A",{href:!0});var wVr=s(nB);gto=r(wVr,"RemBertTokenizerFast"),wVr.forEach(t),hto=r(Vx," (RemBERT model)"),Vx.forEach(t),pto=i(S),Fs=n(S,"LI",{});var Xx=s(Fs);nte=n(Xx,"STRONG",{});var AVr=s(nte);uto=r(AVr,"retribert"),AVr.forEach(t),_to=r(Xx," \u2014 "),sB=n(Xx,"A",{href:!0});var yVr=s(sB);bto=r(yVr,"RetriBertTokenizer"),yVr.forEach(t),vto=r(Xx," or "),lB=n(Xx,"A",{href:!0});var LVr=s(lB);Fto=r(LVr,"RetriBertTokenizerFast"),LVr.forEach(t),Tto=r(Xx," (RetriBERT model)"),Xx.forEach(t),Mto=i(S),Ts=n(S,"LI",{});var zx=s(Ts);ste=n(zx,"STRONG",{});var xVr=s(ste);Eto=r(xVr,"roberta"),xVr.forEach(t),Cto=r(zx," \u2014 "),iB=n(zx,"A",{href:!0});var $Vr=s(iB);wto=r($Vr,"RobertaTokenizer"),$Vr.forEach(t),Ato=r(zx," or "),dB=n(zx,"A",{href:!0});var kVr=s(dB);yto=r(kVr,"RobertaTokenizerFast"),kVr.forEach(t),Lto=r(zx," (RoBERTa model)"),zx.forEach(t),xto=i(S),Ms=n(S,"LI",{});var Qx=s(Ms);lte=n(Qx,"STRONG",{});var SVr=s(lte);$to=r(SVr,"roformer"),SVr.forEach(t),kto=r(Qx," \u2014 "),cB=n(Qx,"A",{href:!0});var RVr=s(cB);Sto=r(RVr,"RoFormerTokenizer"),RVr.forEach(t),Rto=r(Qx," or "),fB=n(Qx,"A",{href:!0});var BVr=s(fB);Bto=r(BVr,"RoFormerTokenizerFast"),BVr.forEach(t),Pto=r(Qx," (RoFormer model)"),Qx.forEach(t),Ito=i(S),qg=n(S,"LI",{});var vEe=s(qg);ite=n(vEe,"STRONG",{});var PVr=s(ite);qto=r(PVr,"speech_to_text"),PVr.forEach(t),Nto=r(vEe," \u2014 "),mB=n(vEe,"A",{href:!0});var IVr=s(mB);jto=r(IVr,"Speech2TextTokenizer"),IVr.forEach(t),Dto=r(vEe," (Speech2Text model)"),vEe.forEach(t),Gto=i(S),Ng=n(S,"LI",{});var FEe=s(Ng);dte=n(FEe,"STRONG",{});var qVr=s(dte);Oto=r(qVr,"speech_to_text_2"),qVr.forEach(t),Vto=r(FEe," \u2014 "),gB=n(FEe,"A",{href:!0});var NVr=s(gB);Xto=r(NVr,"Speech2Text2Tokenizer"),NVr.forEach(t),zto=r(FEe," (Speech2Text2 model)"),FEe.forEach(t),Qto=i(S),Es=n(S,"LI",{});var Wx=s(Es);cte=n(Wx,"STRONG",{});var jVr=s(cte);Wto=r(jVr,"splinter"),jVr.forEach(t),Hto=r(Wx," \u2014 "),hB=n(Wx,"A",{href:!0});var DVr=s(hB);Uto=r(DVr,"SplinterTokenizer"),DVr.forEach(t),Jto=r(Wx," or "),pB=n(Wx,"A",{href:!0});var GVr=s(pB);Yto=r(GVr,"SplinterTokenizerFast"),GVr.forEach(t),Kto=r(Wx," (Splinter model)"),Wx.forEach(t),Zto=i(S),Cs=n(S,"LI",{});var Hx=s(Cs);fte=n(Hx,"STRONG",{});var OVr=s(fte);eao=r(OVr,"squeezebert"),OVr.forEach(t),oao=r(Hx," \u2014 "),uB=n(Hx,"A",{href:!0});var VVr=s(uB);rao=r(VVr,"SqueezeBertTokenizer"),VVr.forEach(t),tao=r(Hx," or "),_B=n(Hx,"A",{href:!0});var XVr=s(_B);aao=r(XVr,"SqueezeBertTokenizerFast"),XVr.forEach(t),nao=r(Hx," (SqueezeBERT model)"),Hx.forEach(t),sao=i(S),ws=n(S,"LI",{});var Ux=s(ws);mte=n(Ux,"STRONG",{});var zVr=s(mte);lao=r(zVr,"t5"),zVr.forEach(t),iao=r(Ux," \u2014 "),bB=n(Ux,"A",{href:!0});var QVr=s(bB);dao=r(QVr,"T5Tokenizer"),QVr.forEach(t),cao=r(Ux," or "),vB=n(Ux,"A",{href:!0});var WVr=s(vB);fao=r(WVr,"T5TokenizerFast"),WVr.forEach(t),mao=r(Ux," (T5 model)"),Ux.forEach(t),gao=i(S),jg=n(S,"LI",{});var TEe=s(jg);gte=n(TEe,"STRONG",{});var HVr=s(gte);hao=r(HVr,"tapas"),HVr.forEach(t),pao=r(TEe," \u2014 "),FB=n(TEe,"A",{href:!0});var UVr=s(FB);uao=r(UVr,"TapasTokenizer"),UVr.forEach(t),_ao=r(TEe," (TAPAS model)"),TEe.forEach(t),bao=i(S),Dg=n(S,"LI",{});var MEe=s(Dg);hte=n(MEe,"STRONG",{});var JVr=s(hte);vao=r(JVr,"tapex"),JVr.forEach(t),Fao=r(MEe," \u2014 "),TB=n(MEe,"A",{href:!0});var YVr=s(TB);Tao=r(YVr,"TapexTokenizer"),YVr.forEach(t),Mao=r(MEe," (TAPEX model)"),MEe.forEach(t),Eao=i(S),Gg=n(S,"LI",{});var EEe=s(Gg);pte=n(EEe,"STRONG",{});var KVr=s(pte);Cao=r(KVr,"transfo-xl"),KVr.forEach(t),wao=r(EEe," \u2014 "),MB=n(EEe,"A",{href:!0});var ZVr=s(MB);Aao=r(ZVr,"TransfoXLTokenizer"),ZVr.forEach(t),yao=r(EEe," (Transformer-XL model)"),EEe.forEach(t),Lao=i(S),As=n(S,"LI",{});var Jx=s(As);ute=n(Jx,"STRONG",{});var eXr=s(ute);xao=r(eXr,"visual_bert"),eXr.forEach(t),$ao=r(Jx," \u2014 "),EB=n(Jx,"A",{href:!0});var oXr=s(EB);kao=r(oXr,"BertTokenizer"),oXr.forEach(t),Sao=r(Jx," or "),CB=n(Jx,"A",{href:!0});var rXr=s(CB);Rao=r(rXr,"BertTokenizerFast"),rXr.forEach(t),Bao=r(Jx," (VisualBert model)"),Jx.forEach(t),Pao=i(S),Og=n(S,"LI",{});var CEe=s(Og);_te=n(CEe,"STRONG",{});var tXr=s(_te);Iao=r(tXr,"wav2vec2"),tXr.forEach(t),qao=r(CEe," \u2014 "),wB=n(CEe,"A",{href:!0});var aXr=s(wB);Nao=r(aXr,"Wav2Vec2CTCTokenizer"),aXr.forEach(t),jao=r(CEe," (Wav2Vec2 model)"),CEe.forEach(t),Dao=i(S),Vg=n(S,"LI",{});var wEe=s(Vg);bte=n(wEe,"STRONG",{});var nXr=s(bte);Gao=r(nXr,"wav2vec2_phoneme"),nXr.forEach(t),Oao=r(wEe," \u2014 "),AB=n(wEe,"A",{href:!0});var sXr=s(AB);Vao=r(sXr,"Wav2Vec2PhonemeCTCTokenizer"),sXr.forEach(t),Xao=r(wEe," (Wav2Vec2Phoneme model)"),wEe.forEach(t),zao=i(S),ys=n(S,"LI",{});var Yx=s(ys);vte=n(Yx,"STRONG",{});var lXr=s(vte);Qao=r(lXr,"xglm"),lXr.forEach(t),Wao=r(Yx," \u2014 "),yB=n(Yx,"A",{href:!0});var iXr=s(yB);Hao=r(iXr,"XGLMTokenizer"),iXr.forEach(t),Uao=r(Yx," or "),LB=n(Yx,"A",{href:!0});var dXr=s(LB);Jao=r(dXr,"XGLMTokenizerFast"),dXr.forEach(t),Yao=r(Yx," (XGLM model)"),Yx.forEach(t),Kao=i(S),Xg=n(S,"LI",{});var AEe=s(Xg);Fte=n(AEe,"STRONG",{});var cXr=s(Fte);Zao=r(cXr,"xlm"),cXr.forEach(t),eno=r(AEe," \u2014 "),xB=n(AEe,"A",{href:!0});var fXr=s(xB);ono=r(fXr,"XLMTokenizer"),fXr.forEach(t),rno=r(AEe," (XLM model)"),AEe.forEach(t),tno=i(S),zg=n(S,"LI",{});var yEe=s(zg);Tte=n(yEe,"STRONG",{});var mXr=s(Tte);ano=r(mXr,"xlm-prophetnet"),mXr.forEach(t),nno=r(yEe," \u2014 "),$B=n(yEe,"A",{href:!0});var gXr=s($B);sno=r(gXr,"XLMProphetNetTokenizer"),gXr.forEach(t),lno=r(yEe," (XLMProphetNet model)"),yEe.forEach(t),ino=i(S),Ls=n(S,"LI",{});var Kx=s(Ls);Mte=n(Kx,"STRONG",{});var hXr=s(Mte);dno=r(hXr,"xlm-roberta"),hXr.forEach(t),cno=r(Kx," \u2014 "),kB=n(Kx,"A",{href:!0});var pXr=s(kB);fno=r(pXr,"XLMRobertaTokenizer"),pXr.forEach(t),mno=r(Kx," or "),SB=n(Kx,"A",{href:!0});var uXr=s(SB);gno=r(uXr,"XLMRobertaTokenizerFast"),uXr.forEach(t),hno=r(Kx," (XLM-RoBERTa model)"),Kx.forEach(t),pno=i(S),xs=n(S,"LI",{});var Zx=s(xs);Ete=n(Zx,"STRONG",{});var _Xr=s(Ete);uno=r(_Xr,"xlm-roberta-xl"),_Xr.forEach(t),_no=r(Zx," \u2014 "),RB=n(Zx,"A",{href:!0});var bXr=s(RB);bno=r(bXr,"RobertaTokenizer"),bXr.forEach(t),vno=r(Zx," or "),BB=n(Zx,"A",{href:!0});var vXr=s(BB);Fno=r(vXr,"RobertaTokenizerFast"),vXr.forEach(t),Tno=r(Zx," (XLM-RoBERTa-XL model)"),Zx.forEach(t),Mno=i(S),$s=n(S,"LI",{});var e$=s($s);Cte=n(e$,"STRONG",{});var FXr=s(Cte);Eno=r(FXr,"xlnet"),FXr.forEach(t),Cno=r(e$," \u2014 "),PB=n(e$,"A",{href:!0});var TXr=s(PB);wno=r(TXr,"XLNetTokenizer"),TXr.forEach(t),Ano=r(e$," or "),IB=n(e$,"A",{href:!0});var MXr=s(IB);yno=r(MXr,"XLNetTokenizerFast"),MXr.forEach(t),Lno=r(e$," (XLNet model)"),e$.forEach(t),xno=i(S),ks=n(S,"LI",{});var o$=s(ks);wte=n(o$,"STRONG",{});var EXr=s(wte);$no=r(EXr,"yoso"),EXr.forEach(t),kno=r(o$," \u2014 "),qB=n(o$,"A",{href:!0});var CXr=s(qB);Sno=r(CXr,"AlbertTokenizer"),CXr.forEach(t),Rno=r(o$," or "),NB=n(o$,"A",{href:!0});var wXr=s(NB);Bno=r(wXr,"AlbertTokenizerFast"),wXr.forEach(t),Pno=r(o$," (YOSO model)"),o$.forEach(t),S.forEach(t),Ino=i(Is),T(Qg.$$.fragment,Is),Is.forEach(t),qno=i(Ps),Wg=n(Ps,"DIV",{class:!0});var pqe=s(Wg);T(ow.$$.fragment,pqe),Nno=i(pqe),Ate=n(pqe,"P",{});var AXr=s(Ate);jno=r(AXr,"Register a new tokenizer in this mapping."),AXr.forEach(t),pqe.forEach(t),Ps.forEach(t),uPe=i(f),bi=n(f,"H2",{class:!0});var uqe=s(bi);Hg=n(uqe,"A",{id:!0,class:!0,href:!0});var yXr=s(Hg);yte=n(yXr,"SPAN",{});var LXr=s(yte);T(rw.$$.fragment,LXr),LXr.forEach(t),yXr.forEach(t),Dno=i(uqe),Lte=n(uqe,"SPAN",{});var xXr=s(Lte);Gno=r(xXr,"AutoFeatureExtractor"),xXr.forEach(t),uqe.forEach(t),_Pe=i(f),Ao=n(f,"DIV",{class:!0});var qs=s(Ao);T(tw.$$.fragment,qs),Ono=i(qs),aw=n(qs,"P",{});var _qe=s(aw);Vno=r(_qe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),jB=n(_qe,"A",{href:!0});var $Xr=s(jB);Xno=r($Xr,"AutoFeatureExtractor.from_pretrained()"),$Xr.forEach(t),zno=r(_qe," class method."),_qe.forEach(t),Qno=i(qs),nw=n(qs,"P",{});var bqe=s(nw);Wno=r(bqe,"This class cannot be instantiated directly using "),xte=n(bqe,"CODE",{});var kXr=s(xte);Hno=r(kXr,"__init__()"),kXr.forEach(t),Uno=r(bqe," (throws an error)."),bqe.forEach(t),Jno=i(qs),Qe=n(qs,"DIV",{class:!0});var Yt=s(Qe);T(sw.$$.fragment,Yt),Yno=i(Yt),$te=n(Yt,"P",{});var SXr=s($te);Kno=r(SXr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),SXr.forEach(t),Zno=i(Yt),wa=n(Yt,"P",{});var X5=s(wa);eso=r(X5,"The feature extractor class to instantiate is selected based on the "),kte=n(X5,"CODE",{});var RXr=s(kte);oso=r(RXr,"model_type"),RXr.forEach(t),rso=r(X5,` property of the config object
(either passed as an argument or loaded from `),Ste=n(X5,"CODE",{});var BXr=s(Ste);tso=r(BXr,"pretrained_model_name_or_path"),BXr.forEach(t),aso=r(X5,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),Rte=n(X5,"CODE",{});var PXr=s(Rte);nso=r(PXr,"pretrained_model_name_or_path"),PXr.forEach(t),sso=r(X5,":"),X5.forEach(t),lso=i(Yt),te=n(Yt,"UL",{});var se=s(te);Ug=n(se,"LI",{});var LEe=s(Ug);Bte=n(LEe,"STRONG",{});var IXr=s(Bte);iso=r(IXr,"beit"),IXr.forEach(t),dso=r(LEe," \u2014 "),DB=n(LEe,"A",{href:!0});var qXr=s(DB);cso=r(qXr,"BeitFeatureExtractor"),qXr.forEach(t),fso=r(LEe," (BEiT model)"),LEe.forEach(t),mso=i(se),Jg=n(se,"LI",{});var xEe=s(Jg);Pte=n(xEe,"STRONG",{});var NXr=s(Pte);gso=r(NXr,"clip"),NXr.forEach(t),hso=r(xEe," \u2014 "),GB=n(xEe,"A",{href:!0});var jXr=s(GB);pso=r(jXr,"CLIPFeatureExtractor"),jXr.forEach(t),uso=r(xEe," (CLIP model)"),xEe.forEach(t),_so=i(se),Yg=n(se,"LI",{});var $Ee=s(Yg);Ite=n($Ee,"STRONG",{});var DXr=s(Ite);bso=r(DXr,"convnext"),DXr.forEach(t),vso=r($Ee," \u2014 "),OB=n($Ee,"A",{href:!0});var GXr=s(OB);Fso=r(GXr,"ConvNextFeatureExtractor"),GXr.forEach(t),Tso=r($Ee," (ConvNext model)"),$Ee.forEach(t),Mso=i(se),Kg=n(se,"LI",{});var kEe=s(Kg);qte=n(kEe,"STRONG",{});var OXr=s(qte);Eso=r(OXr,"data2vec-audio"),OXr.forEach(t),Cso=r(kEe," \u2014 "),VB=n(kEe,"A",{href:!0});var VXr=s(VB);wso=r(VXr,"Wav2Vec2FeatureExtractor"),VXr.forEach(t),Aso=r(kEe," (Data2VecAudio model)"),kEe.forEach(t),yso=i(se),Zg=n(se,"LI",{});var SEe=s(Zg);Nte=n(SEe,"STRONG",{});var XXr=s(Nte);Lso=r(XXr,"data2vec-vision"),XXr.forEach(t),xso=r(SEe," \u2014 "),XB=n(SEe,"A",{href:!0});var zXr=s(XB);$so=r(zXr,"BeitFeatureExtractor"),zXr.forEach(t),kso=r(SEe," (Data2VecVision model)"),SEe.forEach(t),Sso=i(se),eh=n(se,"LI",{});var REe=s(eh);jte=n(REe,"STRONG",{});var QXr=s(jte);Rso=r(QXr,"deit"),QXr.forEach(t),Bso=r(REe," \u2014 "),zB=n(REe,"A",{href:!0});var WXr=s(zB);Pso=r(WXr,"DeiTFeatureExtractor"),WXr.forEach(t),Iso=r(REe," (DeiT model)"),REe.forEach(t),qso=i(se),oh=n(se,"LI",{});var BEe=s(oh);Dte=n(BEe,"STRONG",{});var HXr=s(Dte);Nso=r(HXr,"detr"),HXr.forEach(t),jso=r(BEe," \u2014 "),QB=n(BEe,"A",{href:!0});var UXr=s(QB);Dso=r(UXr,"DetrFeatureExtractor"),UXr.forEach(t),Gso=r(BEe," (DETR model)"),BEe.forEach(t),Oso=i(se),rh=n(se,"LI",{});var PEe=s(rh);Gte=n(PEe,"STRONG",{});var JXr=s(Gte);Vso=r(JXr,"dpt"),JXr.forEach(t),Xso=r(PEe," \u2014 "),WB=n(PEe,"A",{href:!0});var YXr=s(WB);zso=r(YXr,"DPTFeatureExtractor"),YXr.forEach(t),Qso=r(PEe," (DPT model)"),PEe.forEach(t),Wso=i(se),th=n(se,"LI",{});var IEe=s(th);Ote=n(IEe,"STRONG",{});var KXr=s(Ote);Hso=r(KXr,"glpn"),KXr.forEach(t),Uso=r(IEe," \u2014 "),HB=n(IEe,"A",{href:!0});var ZXr=s(HB);Jso=r(ZXr,"GLPNFeatureExtractor"),ZXr.forEach(t),Yso=r(IEe," (GLPN model)"),IEe.forEach(t),Kso=i(se),ah=n(se,"LI",{});var qEe=s(ah);Vte=n(qEe,"STRONG",{});var ezr=s(Vte);Zso=r(ezr,"hubert"),ezr.forEach(t),elo=r(qEe," \u2014 "),UB=n(qEe,"A",{href:!0});var ozr=s(UB);olo=r(ozr,"Wav2Vec2FeatureExtractor"),ozr.forEach(t),rlo=r(qEe," (Hubert model)"),qEe.forEach(t),tlo=i(se),nh=n(se,"LI",{});var NEe=s(nh);Xte=n(NEe,"STRONG",{});var rzr=s(Xte);alo=r(rzr,"layoutlmv2"),rzr.forEach(t),nlo=r(NEe," \u2014 "),JB=n(NEe,"A",{href:!0});var tzr=s(JB);slo=r(tzr,"LayoutLMv2FeatureExtractor"),tzr.forEach(t),llo=r(NEe," (LayoutLMv2 model)"),NEe.forEach(t),ilo=i(se),sh=n(se,"LI",{});var jEe=s(sh);zte=n(jEe,"STRONG",{});var azr=s(zte);dlo=r(azr,"maskformer"),azr.forEach(t),clo=r(jEe," \u2014 "),YB=n(jEe,"A",{href:!0});var nzr=s(YB);flo=r(nzr,"MaskFormerFeatureExtractor"),nzr.forEach(t),mlo=r(jEe," (MaskFormer model)"),jEe.forEach(t),glo=i(se),lh=n(se,"LI",{});var DEe=s(lh);Qte=n(DEe,"STRONG",{});var szr=s(Qte);hlo=r(szr,"perceiver"),szr.forEach(t),plo=r(DEe," \u2014 "),KB=n(DEe,"A",{href:!0});var lzr=s(KB);ulo=r(lzr,"PerceiverFeatureExtractor"),lzr.forEach(t),_lo=r(DEe," (Perceiver model)"),DEe.forEach(t),blo=i(se),ih=n(se,"LI",{});var GEe=s(ih);Wte=n(GEe,"STRONG",{});var izr=s(Wte);vlo=r(izr,"poolformer"),izr.forEach(t),Flo=r(GEe," \u2014 "),ZB=n(GEe,"A",{href:!0});var dzr=s(ZB);Tlo=r(dzr,"PoolFormerFeatureExtractor"),dzr.forEach(t),Mlo=r(GEe," (PoolFormer model)"),GEe.forEach(t),Elo=i(se),dh=n(se,"LI",{});var OEe=s(dh);Hte=n(OEe,"STRONG",{});var czr=s(Hte);Clo=r(czr,"regnet"),czr.forEach(t),wlo=r(OEe," \u2014 "),eP=n(OEe,"A",{href:!0});var fzr=s(eP);Alo=r(fzr,"ConvNextFeatureExtractor"),fzr.forEach(t),ylo=r(OEe," (RegNet model)"),OEe.forEach(t),Llo=i(se),ch=n(se,"LI",{});var VEe=s(ch);Ute=n(VEe,"STRONG",{});var mzr=s(Ute);xlo=r(mzr,"resnet"),mzr.forEach(t),$lo=r(VEe," \u2014 "),oP=n(VEe,"A",{href:!0});var gzr=s(oP);klo=r(gzr,"ConvNextFeatureExtractor"),gzr.forEach(t),Slo=r(VEe," (ResNet model)"),VEe.forEach(t),Rlo=i(se),fh=n(se,"LI",{});var XEe=s(fh);Jte=n(XEe,"STRONG",{});var hzr=s(Jte);Blo=r(hzr,"segformer"),hzr.forEach(t),Plo=r(XEe," \u2014 "),rP=n(XEe,"A",{href:!0});var pzr=s(rP);Ilo=r(pzr,"SegformerFeatureExtractor"),pzr.forEach(t),qlo=r(XEe," (SegFormer model)"),XEe.forEach(t),Nlo=i(se),mh=n(se,"LI",{});var zEe=s(mh);Yte=n(zEe,"STRONG",{});var uzr=s(Yte);jlo=r(uzr,"speech_to_text"),uzr.forEach(t),Dlo=r(zEe," \u2014 "),tP=n(zEe,"A",{href:!0});var _zr=s(tP);Glo=r(_zr,"Speech2TextFeatureExtractor"),_zr.forEach(t),Olo=r(zEe," (Speech2Text model)"),zEe.forEach(t),Vlo=i(se),gh=n(se,"LI",{});var QEe=s(gh);Kte=n(QEe,"STRONG",{});var bzr=s(Kte);Xlo=r(bzr,"swin"),bzr.forEach(t),zlo=r(QEe," \u2014 "),aP=n(QEe,"A",{href:!0});var vzr=s(aP);Qlo=r(vzr,"ViTFeatureExtractor"),vzr.forEach(t),Wlo=r(QEe," (Swin model)"),QEe.forEach(t),Hlo=i(se),hh=n(se,"LI",{});var WEe=s(hh);Zte=n(WEe,"STRONG",{});var Fzr=s(Zte);Ulo=r(Fzr,"van"),Fzr.forEach(t),Jlo=r(WEe," \u2014 "),nP=n(WEe,"A",{href:!0});var Tzr=s(nP);Ylo=r(Tzr,"ConvNextFeatureExtractor"),Tzr.forEach(t),Klo=r(WEe," (VAN model)"),WEe.forEach(t),Zlo=i(se),ph=n(se,"LI",{});var HEe=s(ph);eae=n(HEe,"STRONG",{});var Mzr=s(eae);eio=r(Mzr,"vit"),Mzr.forEach(t),oio=r(HEe," \u2014 "),sP=n(HEe,"A",{href:!0});var Ezr=s(sP);rio=r(Ezr,"ViTFeatureExtractor"),Ezr.forEach(t),tio=r(HEe," (ViT model)"),HEe.forEach(t),aio=i(se),uh=n(se,"LI",{});var UEe=s(uh);oae=n(UEe,"STRONG",{});var Czr=s(oae);nio=r(Czr,"vit_mae"),Czr.forEach(t),sio=r(UEe," \u2014 "),lP=n(UEe,"A",{href:!0});var wzr=s(lP);lio=r(wzr,"ViTFeatureExtractor"),wzr.forEach(t),iio=r(UEe," (ViTMAE model)"),UEe.forEach(t),dio=i(se),_h=n(se,"LI",{});var JEe=s(_h);rae=n(JEe,"STRONG",{});var Azr=s(rae);cio=r(Azr,"wav2vec2"),Azr.forEach(t),fio=r(JEe," \u2014 "),iP=n(JEe,"A",{href:!0});var yzr=s(iP);mio=r(yzr,"Wav2Vec2FeatureExtractor"),yzr.forEach(t),gio=r(JEe," (Wav2Vec2 model)"),JEe.forEach(t),hio=i(se),bh=n(se,"LI",{});var YEe=s(bh);tae=n(YEe,"STRONG",{});var Lzr=s(tae);pio=r(Lzr,"yolos"),Lzr.forEach(t),uio=r(YEe," \u2014 "),dP=n(YEe,"A",{href:!0});var xzr=s(dP);_io=r(xzr,"YolosFeatureExtractor"),xzr.forEach(t),bio=r(YEe," (YOLOS model)"),YEe.forEach(t),se.forEach(t),vio=i(Yt),T(vh.$$.fragment,Yt),Fio=i(Yt),T(Fh.$$.fragment,Yt),Yt.forEach(t),Tio=i(qs),Th=n(qs,"DIV",{class:!0});var vqe=s(Th);T(lw.$$.fragment,vqe),Mio=i(vqe),aae=n(vqe,"P",{});var $zr=s(aae);Eio=r($zr,"Register a new feature extractor for this class."),$zr.forEach(t),vqe.forEach(t),qs.forEach(t),bPe=i(f),vi=n(f,"H2",{class:!0});var Fqe=s(vi);Mh=n(Fqe,"A",{id:!0,class:!0,href:!0});var kzr=s(Mh);nae=n(kzr,"SPAN",{});var Szr=s(nae);T(iw.$$.fragment,Szr),Szr.forEach(t),kzr.forEach(t),Cio=i(Fqe),sae=n(Fqe,"SPAN",{});var Rzr=s(sae);wio=r(Rzr,"AutoProcessor"),Rzr.forEach(t),Fqe.forEach(t),vPe=i(f),yo=n(f,"DIV",{class:!0});var Ns=s(yo);T(dw.$$.fragment,Ns),Aio=i(Ns),cw=n(Ns,"P",{});var Tqe=s(cw);yio=r(Tqe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),cP=n(Tqe,"A",{href:!0});var Bzr=s(cP);Lio=r(Bzr,"AutoProcessor.from_pretrained()"),Bzr.forEach(t),xio=r(Tqe," class method."),Tqe.forEach(t),$io=i(Ns),fw=n(Ns,"P",{});var Mqe=s(fw);kio=r(Mqe,"This class cannot be instantiated directly using "),lae=n(Mqe,"CODE",{});var Pzr=s(lae);Sio=r(Pzr,"__init__()"),Pzr.forEach(t),Rio=r(Mqe," (throws an error)."),Mqe.forEach(t),Bio=i(Ns),We=n(Ns,"DIV",{class:!0});var Kt=s(We);T(mw.$$.fragment,Kt),Pio=i(Kt),iae=n(Kt,"P",{});var Izr=s(iae);Iio=r(Izr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Izr.forEach(t),qio=i(Kt),Fi=n(Kt,"P",{});var XY=s(Fi);Nio=r(XY,"The processor class to instantiate is selected based on the "),dae=n(XY,"CODE",{});var qzr=s(dae);jio=r(qzr,"model_type"),qzr.forEach(t),Dio=r(XY,` property of the config object (either
passed as an argument or loaded from `),cae=n(XY,"CODE",{});var Nzr=s(cae);Gio=r(Nzr,"pretrained_model_name_or_path"),Nzr.forEach(t),Oio=r(XY," if possible):"),XY.forEach(t),Vio=i(Kt),be=n(Kt,"UL",{});var Fe=s(be);Eh=n(Fe,"LI",{});var KEe=s(Eh);fae=n(KEe,"STRONG",{});var jzr=s(fae);Xio=r(jzr,"clip"),jzr.forEach(t),zio=r(KEe," \u2014 "),fP=n(KEe,"A",{href:!0});var Dzr=s(fP);Qio=r(Dzr,"CLIPProcessor"),Dzr.forEach(t),Wio=r(KEe," (CLIP model)"),KEe.forEach(t),Hio=i(Fe),Ch=n(Fe,"LI",{});var ZEe=s(Ch);mae=n(ZEe,"STRONG",{});var Gzr=s(mae);Uio=r(Gzr,"layoutlmv2"),Gzr.forEach(t),Jio=r(ZEe," \u2014 "),mP=n(ZEe,"A",{href:!0});var Ozr=s(mP);Yio=r(Ozr,"LayoutLMv2Processor"),Ozr.forEach(t),Kio=r(ZEe," (LayoutLMv2 model)"),ZEe.forEach(t),Zio=i(Fe),wh=n(Fe,"LI",{});var e5e=s(wh);gae=n(e5e,"STRONG",{});var Vzr=s(gae);edo=r(Vzr,"layoutxlm"),Vzr.forEach(t),odo=r(e5e," \u2014 "),gP=n(e5e,"A",{href:!0});var Xzr=s(gP);rdo=r(Xzr,"LayoutXLMProcessor"),Xzr.forEach(t),tdo=r(e5e," (LayoutXLM model)"),e5e.forEach(t),ado=i(Fe),Ah=n(Fe,"LI",{});var o5e=s(Ah);hae=n(o5e,"STRONG",{});var zzr=s(hae);ndo=r(zzr,"sew"),zzr.forEach(t),sdo=r(o5e," \u2014 "),hP=n(o5e,"A",{href:!0});var Qzr=s(hP);ldo=r(Qzr,"Wav2Vec2Processor"),Qzr.forEach(t),ido=r(o5e," (SEW model)"),o5e.forEach(t),ddo=i(Fe),yh=n(Fe,"LI",{});var r5e=s(yh);pae=n(r5e,"STRONG",{});var Wzr=s(pae);cdo=r(Wzr,"sew-d"),Wzr.forEach(t),fdo=r(r5e," \u2014 "),pP=n(r5e,"A",{href:!0});var Hzr=s(pP);mdo=r(Hzr,"Wav2Vec2Processor"),Hzr.forEach(t),gdo=r(r5e," (SEW-D model)"),r5e.forEach(t),hdo=i(Fe),Lh=n(Fe,"LI",{});var t5e=s(Lh);uae=n(t5e,"STRONG",{});var Uzr=s(uae);pdo=r(Uzr,"speech_to_text"),Uzr.forEach(t),udo=r(t5e," \u2014 "),uP=n(t5e,"A",{href:!0});var Jzr=s(uP);_do=r(Jzr,"Speech2TextProcessor"),Jzr.forEach(t),bdo=r(t5e," (Speech2Text model)"),t5e.forEach(t),vdo=i(Fe),xh=n(Fe,"LI",{});var a5e=s(xh);_ae=n(a5e,"STRONG",{});var Yzr=s(_ae);Fdo=r(Yzr,"speech_to_text_2"),Yzr.forEach(t),Tdo=r(a5e," \u2014 "),_P=n(a5e,"A",{href:!0});var Kzr=s(_P);Mdo=r(Kzr,"Speech2Text2Processor"),Kzr.forEach(t),Edo=r(a5e," (Speech2Text2 model)"),a5e.forEach(t),Cdo=i(Fe),$h=n(Fe,"LI",{});var n5e=s($h);bae=n(n5e,"STRONG",{});var Zzr=s(bae);wdo=r(Zzr,"trocr"),Zzr.forEach(t),Ado=r(n5e," \u2014 "),bP=n(n5e,"A",{href:!0});var eQr=s(bP);ydo=r(eQr,"TrOCRProcessor"),eQr.forEach(t),Ldo=r(n5e," (TrOCR model)"),n5e.forEach(t),xdo=i(Fe),kh=n(Fe,"LI",{});var s5e=s(kh);vae=n(s5e,"STRONG",{});var oQr=s(vae);$do=r(oQr,"unispeech"),oQr.forEach(t),kdo=r(s5e," \u2014 "),vP=n(s5e,"A",{href:!0});var rQr=s(vP);Sdo=r(rQr,"Wav2Vec2Processor"),rQr.forEach(t),Rdo=r(s5e," (UniSpeech model)"),s5e.forEach(t),Bdo=i(Fe),Sh=n(Fe,"LI",{});var l5e=s(Sh);Fae=n(l5e,"STRONG",{});var tQr=s(Fae);Pdo=r(tQr,"unispeech-sat"),tQr.forEach(t),Ido=r(l5e," \u2014 "),FP=n(l5e,"A",{href:!0});var aQr=s(FP);qdo=r(aQr,"Wav2Vec2Processor"),aQr.forEach(t),Ndo=r(l5e," (UniSpeechSat model)"),l5e.forEach(t),jdo=i(Fe),Rh=n(Fe,"LI",{});var i5e=s(Rh);Tae=n(i5e,"STRONG",{});var nQr=s(Tae);Ddo=r(nQr,"vilt"),nQr.forEach(t),Gdo=r(i5e," \u2014 "),TP=n(i5e,"A",{href:!0});var sQr=s(TP);Odo=r(sQr,"ViltProcessor"),sQr.forEach(t),Vdo=r(i5e," (ViLT model)"),i5e.forEach(t),Xdo=i(Fe),Bh=n(Fe,"LI",{});var d5e=s(Bh);Mae=n(d5e,"STRONG",{});var lQr=s(Mae);zdo=r(lQr,"vision-text-dual-encoder"),lQr.forEach(t),Qdo=r(d5e," \u2014 "),MP=n(d5e,"A",{href:!0});var iQr=s(MP);Wdo=r(iQr,"VisionTextDualEncoderProcessor"),iQr.forEach(t),Hdo=r(d5e," (VisionTextDualEncoder model)"),d5e.forEach(t),Udo=i(Fe),Ph=n(Fe,"LI",{});var c5e=s(Ph);Eae=n(c5e,"STRONG",{});var dQr=s(Eae);Jdo=r(dQr,"wav2vec2"),dQr.forEach(t),Ydo=r(c5e," \u2014 "),EP=n(c5e,"A",{href:!0});var cQr=s(EP);Kdo=r(cQr,"Wav2Vec2Processor"),cQr.forEach(t),Zdo=r(c5e," (Wav2Vec2 model)"),c5e.forEach(t),eco=i(Fe),Ih=n(Fe,"LI",{});var f5e=s(Ih);Cae=n(f5e,"STRONG",{});var fQr=s(Cae);oco=r(fQr,"wavlm"),fQr.forEach(t),rco=r(f5e," \u2014 "),CP=n(f5e,"A",{href:!0});var mQr=s(CP);tco=r(mQr,"Wav2Vec2Processor"),mQr.forEach(t),aco=r(f5e," (WavLM model)"),f5e.forEach(t),Fe.forEach(t),nco=i(Kt),T(qh.$$.fragment,Kt),sco=i(Kt),T(Nh.$$.fragment,Kt),Kt.forEach(t),lco=i(Ns),jh=n(Ns,"DIV",{class:!0});var Eqe=s(jh);T(gw.$$.fragment,Eqe),ico=i(Eqe),wae=n(Eqe,"P",{});var gQr=s(wae);dco=r(gQr,"Register a new processor for this class."),gQr.forEach(t),Eqe.forEach(t),Ns.forEach(t),FPe=i(f),Ti=n(f,"H2",{class:!0});var Cqe=s(Ti);Dh=n(Cqe,"A",{id:!0,class:!0,href:!0});var hQr=s(Dh);Aae=n(hQr,"SPAN",{});var pQr=s(Aae);T(hw.$$.fragment,pQr),pQr.forEach(t),hQr.forEach(t),cco=i(Cqe),yae=n(Cqe,"SPAN",{});var uQr=s(yae);fco=r(uQr,"AutoModel"),uQr.forEach(t),Cqe.forEach(t),TPe=i(f),Lo=n(f,"DIV",{class:!0});var js=s(Lo);T(pw.$$.fragment,js),mco=i(js),Mi=n(js,"P",{});var zY=s(Mi);gco=r(zY,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),wP=n(zY,"A",{href:!0});var _Qr=s(wP);hco=r(_Qr,"from_pretrained()"),_Qr.forEach(t),pco=r(zY," class method or the "),AP=n(zY,"A",{href:!0});var bQr=s(AP);uco=r(bQr,"from_config()"),bQr.forEach(t),_co=r(zY,` class
method.`),zY.forEach(t),bco=i(js),uw=n(js,"P",{});var wqe=s(uw);vco=r(wqe,"This class cannot be instantiated directly using "),Lae=n(wqe,"CODE",{});var vQr=s(Lae);Fco=r(vQr,"__init__()"),vQr.forEach(t),Tco=r(wqe," (throws an error)."),wqe.forEach(t),Mco=i(js),ot=n(js,"DIV",{class:!0});var z5=s(ot);T(_w.$$.fragment,z5),Eco=i(z5),xae=n(z5,"P",{});var FQr=s(xae);Cco=r(FQr,"Instantiates one of the base model classes of the library from a configuration."),FQr.forEach(t),wco=i(z5),Ei=n(z5,"P",{});var QY=s(Ei);Aco=r(QY,`Note:
Loading a model from its configuration file does `),$ae=n(QY,"STRONG",{});var TQr=s($ae);yco=r(TQr,"not"),TQr.forEach(t),Lco=r(QY,` load the model weights. It only affects the
model\u2019s configuration. Use `),yP=n(QY,"A",{href:!0});var MQr=s(yP);xco=r(MQr,"from_pretrained()"),MQr.forEach(t),$co=r(QY," to load the model weights."),QY.forEach(t),kco=i(z5),T(Gh.$$.fragment,z5),z5.forEach(t),Sco=i(js),He=n(js,"DIV",{class:!0});var Zt=s(He);T(bw.$$.fragment,Zt),Rco=i(Zt),kae=n(Zt,"P",{});var EQr=s(kae);Bco=r(EQr,"Instantiate one of the base model classes of the library from a pretrained model."),EQr.forEach(t),Pco=i(Zt),Aa=n(Zt,"P",{});var Q5=s(Aa);Ico=r(Q5,"The model class to instantiate is selected based on the "),Sae=n(Q5,"CODE",{});var CQr=s(Sae);qco=r(CQr,"model_type"),CQr.forEach(t),Nco=r(Q5,` property of the config object (either
passed as an argument or loaded from `),Rae=n(Q5,"CODE",{});var wQr=s(Rae);jco=r(wQr,"pretrained_model_name_or_path"),wQr.forEach(t),Dco=r(Q5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bae=n(Q5,"CODE",{});var AQr=s(Bae);Gco=r(AQr,"pretrained_model_name_or_path"),AQr.forEach(t),Oco=r(Q5,":"),Q5.forEach(t),Vco=i(Zt),x=n(Zt,"UL",{});var $=s(x);Oh=n($,"LI",{});var m5e=s(Oh);Pae=n(m5e,"STRONG",{});var yQr=s(Pae);Xco=r(yQr,"albert"),yQr.forEach(t),zco=r(m5e," \u2014 "),LP=n(m5e,"A",{href:!0});var LQr=s(LP);Qco=r(LQr,"AlbertModel"),LQr.forEach(t),Wco=r(m5e," (ALBERT model)"),m5e.forEach(t),Hco=i($),Vh=n($,"LI",{});var g5e=s(Vh);Iae=n(g5e,"STRONG",{});var xQr=s(Iae);Uco=r(xQr,"bart"),xQr.forEach(t),Jco=r(g5e," \u2014 "),xP=n(g5e,"A",{href:!0});var $Qr=s(xP);Yco=r($Qr,"BartModel"),$Qr.forEach(t),Kco=r(g5e," (BART model)"),g5e.forEach(t),Zco=i($),Xh=n($,"LI",{});var h5e=s(Xh);qae=n(h5e,"STRONG",{});var kQr=s(qae);efo=r(kQr,"beit"),kQr.forEach(t),ofo=r(h5e," \u2014 "),$P=n(h5e,"A",{href:!0});var SQr=s($P);rfo=r(SQr,"BeitModel"),SQr.forEach(t),tfo=r(h5e," (BEiT model)"),h5e.forEach(t),afo=i($),zh=n($,"LI",{});var p5e=s(zh);Nae=n(p5e,"STRONG",{});var RQr=s(Nae);nfo=r(RQr,"bert"),RQr.forEach(t),sfo=r(p5e," \u2014 "),kP=n(p5e,"A",{href:!0});var BQr=s(kP);lfo=r(BQr,"BertModel"),BQr.forEach(t),ifo=r(p5e," (BERT model)"),p5e.forEach(t),dfo=i($),Qh=n($,"LI",{});var u5e=s(Qh);jae=n(u5e,"STRONG",{});var PQr=s(jae);cfo=r(PQr,"bert-generation"),PQr.forEach(t),ffo=r(u5e," \u2014 "),SP=n(u5e,"A",{href:!0});var IQr=s(SP);mfo=r(IQr,"BertGenerationEncoder"),IQr.forEach(t),gfo=r(u5e," (Bert Generation model)"),u5e.forEach(t),hfo=i($),Wh=n($,"LI",{});var _5e=s(Wh);Dae=n(_5e,"STRONG",{});var qQr=s(Dae);pfo=r(qQr,"big_bird"),qQr.forEach(t),ufo=r(_5e," \u2014 "),RP=n(_5e,"A",{href:!0});var NQr=s(RP);_fo=r(NQr,"BigBirdModel"),NQr.forEach(t),bfo=r(_5e," (BigBird model)"),_5e.forEach(t),vfo=i($),Hh=n($,"LI",{});var b5e=s(Hh);Gae=n(b5e,"STRONG",{});var jQr=s(Gae);Ffo=r(jQr,"bigbird_pegasus"),jQr.forEach(t),Tfo=r(b5e," \u2014 "),BP=n(b5e,"A",{href:!0});var DQr=s(BP);Mfo=r(DQr,"BigBirdPegasusModel"),DQr.forEach(t),Efo=r(b5e," (BigBirdPegasus model)"),b5e.forEach(t),Cfo=i($),Uh=n($,"LI",{});var v5e=s(Uh);Oae=n(v5e,"STRONG",{});var GQr=s(Oae);wfo=r(GQr,"blenderbot"),GQr.forEach(t),Afo=r(v5e," \u2014 "),PP=n(v5e,"A",{href:!0});var OQr=s(PP);yfo=r(OQr,"BlenderbotModel"),OQr.forEach(t),Lfo=r(v5e," (Blenderbot model)"),v5e.forEach(t),xfo=i($),Jh=n($,"LI",{});var F5e=s(Jh);Vae=n(F5e,"STRONG",{});var VQr=s(Vae);$fo=r(VQr,"blenderbot-small"),VQr.forEach(t),kfo=r(F5e," \u2014 "),IP=n(F5e,"A",{href:!0});var XQr=s(IP);Sfo=r(XQr,"BlenderbotSmallModel"),XQr.forEach(t),Rfo=r(F5e," (BlenderbotSmall model)"),F5e.forEach(t),Bfo=i($),Yh=n($,"LI",{});var T5e=s(Yh);Xae=n(T5e,"STRONG",{});var zQr=s(Xae);Pfo=r(zQr,"camembert"),zQr.forEach(t),Ifo=r(T5e," \u2014 "),qP=n(T5e,"A",{href:!0});var QQr=s(qP);qfo=r(QQr,"CamembertModel"),QQr.forEach(t),Nfo=r(T5e," (CamemBERT model)"),T5e.forEach(t),jfo=i($),Kh=n($,"LI",{});var M5e=s(Kh);zae=n(M5e,"STRONG",{});var WQr=s(zae);Dfo=r(WQr,"canine"),WQr.forEach(t),Gfo=r(M5e," \u2014 "),NP=n(M5e,"A",{href:!0});var HQr=s(NP);Ofo=r(HQr,"CanineModel"),HQr.forEach(t),Vfo=r(M5e," (Canine model)"),M5e.forEach(t),Xfo=i($),Zh=n($,"LI",{});var E5e=s(Zh);Qae=n(E5e,"STRONG",{});var UQr=s(Qae);zfo=r(UQr,"clip"),UQr.forEach(t),Qfo=r(E5e," \u2014 "),jP=n(E5e,"A",{href:!0});var JQr=s(jP);Wfo=r(JQr,"CLIPModel"),JQr.forEach(t),Hfo=r(E5e," (CLIP model)"),E5e.forEach(t),Ufo=i($),ep=n($,"LI",{});var C5e=s(ep);Wae=n(C5e,"STRONG",{});var YQr=s(Wae);Jfo=r(YQr,"convbert"),YQr.forEach(t),Yfo=r(C5e," \u2014 "),DP=n(C5e,"A",{href:!0});var KQr=s(DP);Kfo=r(KQr,"ConvBertModel"),KQr.forEach(t),Zfo=r(C5e," (ConvBERT model)"),C5e.forEach(t),emo=i($),op=n($,"LI",{});var w5e=s(op);Hae=n(w5e,"STRONG",{});var ZQr=s(Hae);omo=r(ZQr,"convnext"),ZQr.forEach(t),rmo=r(w5e," \u2014 "),GP=n(w5e,"A",{href:!0});var eWr=s(GP);tmo=r(eWr,"ConvNextModel"),eWr.forEach(t),amo=r(w5e," (ConvNext model)"),w5e.forEach(t),nmo=i($),rp=n($,"LI",{});var A5e=s(rp);Uae=n(A5e,"STRONG",{});var oWr=s(Uae);smo=r(oWr,"ctrl"),oWr.forEach(t),lmo=r(A5e," \u2014 "),OP=n(A5e,"A",{href:!0});var rWr=s(OP);imo=r(rWr,"CTRLModel"),rWr.forEach(t),dmo=r(A5e," (CTRL model)"),A5e.forEach(t),cmo=i($),tp=n($,"LI",{});var y5e=s(tp);Jae=n(y5e,"STRONG",{});var tWr=s(Jae);fmo=r(tWr,"data2vec-audio"),tWr.forEach(t),mmo=r(y5e," \u2014 "),VP=n(y5e,"A",{href:!0});var aWr=s(VP);gmo=r(aWr,"Data2VecAudioModel"),aWr.forEach(t),hmo=r(y5e," (Data2VecAudio model)"),y5e.forEach(t),pmo=i($),ap=n($,"LI",{});var L5e=s(ap);Yae=n(L5e,"STRONG",{});var nWr=s(Yae);umo=r(nWr,"data2vec-text"),nWr.forEach(t),_mo=r(L5e," \u2014 "),XP=n(L5e,"A",{href:!0});var sWr=s(XP);bmo=r(sWr,"Data2VecTextModel"),sWr.forEach(t),vmo=r(L5e," (Data2VecText model)"),L5e.forEach(t),Fmo=i($),np=n($,"LI",{});var x5e=s(np);Kae=n(x5e,"STRONG",{});var lWr=s(Kae);Tmo=r(lWr,"data2vec-vision"),lWr.forEach(t),Mmo=r(x5e," \u2014 "),zP=n(x5e,"A",{href:!0});var iWr=s(zP);Emo=r(iWr,"Data2VecVisionModel"),iWr.forEach(t),Cmo=r(x5e," (Data2VecVision model)"),x5e.forEach(t),wmo=i($),sp=n($,"LI",{});var $5e=s(sp);Zae=n($5e,"STRONG",{});var dWr=s(Zae);Amo=r(dWr,"deberta"),dWr.forEach(t),ymo=r($5e," \u2014 "),QP=n($5e,"A",{href:!0});var cWr=s(QP);Lmo=r(cWr,"DebertaModel"),cWr.forEach(t),xmo=r($5e," (DeBERTa model)"),$5e.forEach(t),$mo=i($),lp=n($,"LI",{});var k5e=s(lp);ene=n(k5e,"STRONG",{});var fWr=s(ene);kmo=r(fWr,"deberta-v2"),fWr.forEach(t),Smo=r(k5e," \u2014 "),WP=n(k5e,"A",{href:!0});var mWr=s(WP);Rmo=r(mWr,"DebertaV2Model"),mWr.forEach(t),Bmo=r(k5e," (DeBERTa-v2 model)"),k5e.forEach(t),Pmo=i($),ip=n($,"LI",{});var S5e=s(ip);one=n(S5e,"STRONG",{});var gWr=s(one);Imo=r(gWr,"decision_transformer"),gWr.forEach(t),qmo=r(S5e," \u2014 "),HP=n(S5e,"A",{href:!0});var hWr=s(HP);Nmo=r(hWr,"DecisionTransformerModel"),hWr.forEach(t),jmo=r(S5e," (Decision Transformer model)"),S5e.forEach(t),Dmo=i($),dp=n($,"LI",{});var R5e=s(dp);rne=n(R5e,"STRONG",{});var pWr=s(rne);Gmo=r(pWr,"deit"),pWr.forEach(t),Omo=r(R5e," \u2014 "),UP=n(R5e,"A",{href:!0});var uWr=s(UP);Vmo=r(uWr,"DeiTModel"),uWr.forEach(t),Xmo=r(R5e," (DeiT model)"),R5e.forEach(t),zmo=i($),cp=n($,"LI",{});var B5e=s(cp);tne=n(B5e,"STRONG",{});var _Wr=s(tne);Qmo=r(_Wr,"detr"),_Wr.forEach(t),Wmo=r(B5e," \u2014 "),JP=n(B5e,"A",{href:!0});var bWr=s(JP);Hmo=r(bWr,"DetrModel"),bWr.forEach(t),Umo=r(B5e," (DETR model)"),B5e.forEach(t),Jmo=i($),fp=n($,"LI",{});var P5e=s(fp);ane=n(P5e,"STRONG",{});var vWr=s(ane);Ymo=r(vWr,"distilbert"),vWr.forEach(t),Kmo=r(P5e," \u2014 "),YP=n(P5e,"A",{href:!0});var FWr=s(YP);Zmo=r(FWr,"DistilBertModel"),FWr.forEach(t),ego=r(P5e," (DistilBERT model)"),P5e.forEach(t),ogo=i($),mp=n($,"LI",{});var I5e=s(mp);nne=n(I5e,"STRONG",{});var TWr=s(nne);rgo=r(TWr,"dpr"),TWr.forEach(t),tgo=r(I5e," \u2014 "),KP=n(I5e,"A",{href:!0});var MWr=s(KP);ago=r(MWr,"DPRQuestionEncoder"),MWr.forEach(t),ngo=r(I5e," (DPR model)"),I5e.forEach(t),sgo=i($),gp=n($,"LI",{});var q5e=s(gp);sne=n(q5e,"STRONG",{});var EWr=s(sne);lgo=r(EWr,"dpt"),EWr.forEach(t),igo=r(q5e," \u2014 "),ZP=n(q5e,"A",{href:!0});var CWr=s(ZP);dgo=r(CWr,"DPTModel"),CWr.forEach(t),cgo=r(q5e," (DPT model)"),q5e.forEach(t),fgo=i($),hp=n($,"LI",{});var N5e=s(hp);lne=n(N5e,"STRONG",{});var wWr=s(lne);mgo=r(wWr,"electra"),wWr.forEach(t),ggo=r(N5e," \u2014 "),eI=n(N5e,"A",{href:!0});var AWr=s(eI);hgo=r(AWr,"ElectraModel"),AWr.forEach(t),pgo=r(N5e," (ELECTRA model)"),N5e.forEach(t),ugo=i($),pp=n($,"LI",{});var j5e=s(pp);ine=n(j5e,"STRONG",{});var yWr=s(ine);_go=r(yWr,"flaubert"),yWr.forEach(t),bgo=r(j5e," \u2014 "),oI=n(j5e,"A",{href:!0});var LWr=s(oI);vgo=r(LWr,"FlaubertModel"),LWr.forEach(t),Fgo=r(j5e," (FlauBERT model)"),j5e.forEach(t),Tgo=i($),up=n($,"LI",{});var D5e=s(up);dne=n(D5e,"STRONG",{});var xWr=s(dne);Mgo=r(xWr,"fnet"),xWr.forEach(t),Ego=r(D5e," \u2014 "),rI=n(D5e,"A",{href:!0});var $Wr=s(rI);Cgo=r($Wr,"FNetModel"),$Wr.forEach(t),wgo=r(D5e," (FNet model)"),D5e.forEach(t),Ago=i($),_p=n($,"LI",{});var G5e=s(_p);cne=n(G5e,"STRONG",{});var kWr=s(cne);ygo=r(kWr,"fsmt"),kWr.forEach(t),Lgo=r(G5e," \u2014 "),tI=n(G5e,"A",{href:!0});var SWr=s(tI);xgo=r(SWr,"FSMTModel"),SWr.forEach(t),$go=r(G5e," (FairSeq Machine-Translation model)"),G5e.forEach(t),kgo=i($),Ss=n($,"LI",{});var r$=s(Ss);fne=n(r$,"STRONG",{});var RWr=s(fne);Sgo=r(RWr,"funnel"),RWr.forEach(t),Rgo=r(r$," \u2014 "),aI=n(r$,"A",{href:!0});var BWr=s(aI);Bgo=r(BWr,"FunnelModel"),BWr.forEach(t),Pgo=r(r$," or "),nI=n(r$,"A",{href:!0});var PWr=s(nI);Igo=r(PWr,"FunnelBaseModel"),PWr.forEach(t),qgo=r(r$," (Funnel Transformer model)"),r$.forEach(t),Ngo=i($),bp=n($,"LI",{});var O5e=s(bp);mne=n(O5e,"STRONG",{});var IWr=s(mne);jgo=r(IWr,"glpn"),IWr.forEach(t),Dgo=r(O5e," \u2014 "),sI=n(O5e,"A",{href:!0});var qWr=s(sI);Ggo=r(qWr,"GLPNModel"),qWr.forEach(t),Ogo=r(O5e," (GLPN model)"),O5e.forEach(t),Vgo=i($),vp=n($,"LI",{});var V5e=s(vp);gne=n(V5e,"STRONG",{});var NWr=s(gne);Xgo=r(NWr,"gpt2"),NWr.forEach(t),zgo=r(V5e," \u2014 "),lI=n(V5e,"A",{href:!0});var jWr=s(lI);Qgo=r(jWr,"GPT2Model"),jWr.forEach(t),Wgo=r(V5e," (OpenAI GPT-2 model)"),V5e.forEach(t),Hgo=i($),Fp=n($,"LI",{});var X5e=s(Fp);hne=n(X5e,"STRONG",{});var DWr=s(hne);Ugo=r(DWr,"gpt_neo"),DWr.forEach(t),Jgo=r(X5e," \u2014 "),iI=n(X5e,"A",{href:!0});var GWr=s(iI);Ygo=r(GWr,"GPTNeoModel"),GWr.forEach(t),Kgo=r(X5e," (GPT Neo model)"),X5e.forEach(t),Zgo=i($),Tp=n($,"LI",{});var z5e=s(Tp);pne=n(z5e,"STRONG",{});var OWr=s(pne);eho=r(OWr,"gptj"),OWr.forEach(t),oho=r(z5e," \u2014 "),dI=n(z5e,"A",{href:!0});var VWr=s(dI);rho=r(VWr,"GPTJModel"),VWr.forEach(t),tho=r(z5e," (GPT-J model)"),z5e.forEach(t),aho=i($),Mp=n($,"LI",{});var Q5e=s(Mp);une=n(Q5e,"STRONG",{});var XWr=s(une);nho=r(XWr,"hubert"),XWr.forEach(t),sho=r(Q5e," \u2014 "),cI=n(Q5e,"A",{href:!0});var zWr=s(cI);lho=r(zWr,"HubertModel"),zWr.forEach(t),iho=r(Q5e," (Hubert model)"),Q5e.forEach(t),dho=i($),Ep=n($,"LI",{});var W5e=s(Ep);_ne=n(W5e,"STRONG",{});var QWr=s(_ne);cho=r(QWr,"ibert"),QWr.forEach(t),fho=r(W5e," \u2014 "),fI=n(W5e,"A",{href:!0});var WWr=s(fI);mho=r(WWr,"IBertModel"),WWr.forEach(t),gho=r(W5e," (I-BERT model)"),W5e.forEach(t),hho=i($),Cp=n($,"LI",{});var H5e=s(Cp);bne=n(H5e,"STRONG",{});var HWr=s(bne);pho=r(HWr,"imagegpt"),HWr.forEach(t),uho=r(H5e," \u2014 "),mI=n(H5e,"A",{href:!0});var UWr=s(mI);_ho=r(UWr,"ImageGPTModel"),UWr.forEach(t),bho=r(H5e," (ImageGPT model)"),H5e.forEach(t),vho=i($),wp=n($,"LI",{});var U5e=s(wp);vne=n(U5e,"STRONG",{});var JWr=s(vne);Fho=r(JWr,"layoutlm"),JWr.forEach(t),Tho=r(U5e," \u2014 "),gI=n(U5e,"A",{href:!0});var YWr=s(gI);Mho=r(YWr,"LayoutLMModel"),YWr.forEach(t),Eho=r(U5e," (LayoutLM model)"),U5e.forEach(t),Cho=i($),Ap=n($,"LI",{});var J5e=s(Ap);Fne=n(J5e,"STRONG",{});var KWr=s(Fne);who=r(KWr,"layoutlmv2"),KWr.forEach(t),Aho=r(J5e," \u2014 "),hI=n(J5e,"A",{href:!0});var ZWr=s(hI);yho=r(ZWr,"LayoutLMv2Model"),ZWr.forEach(t),Lho=r(J5e," (LayoutLMv2 model)"),J5e.forEach(t),xho=i($),yp=n($,"LI",{});var Y5e=s(yp);Tne=n(Y5e,"STRONG",{});var eHr=s(Tne);$ho=r(eHr,"led"),eHr.forEach(t),kho=r(Y5e," \u2014 "),pI=n(Y5e,"A",{href:!0});var oHr=s(pI);Sho=r(oHr,"LEDModel"),oHr.forEach(t),Rho=r(Y5e," (LED model)"),Y5e.forEach(t),Bho=i($),Lp=n($,"LI",{});var K5e=s(Lp);Mne=n(K5e,"STRONG",{});var rHr=s(Mne);Pho=r(rHr,"longformer"),rHr.forEach(t),Iho=r(K5e," \u2014 "),uI=n(K5e,"A",{href:!0});var tHr=s(uI);qho=r(tHr,"LongformerModel"),tHr.forEach(t),Nho=r(K5e," (Longformer model)"),K5e.forEach(t),jho=i($),xp=n($,"LI",{});var Z5e=s(xp);Ene=n(Z5e,"STRONG",{});var aHr=s(Ene);Dho=r(aHr,"luke"),aHr.forEach(t),Gho=r(Z5e," \u2014 "),_I=n(Z5e,"A",{href:!0});var nHr=s(_I);Oho=r(nHr,"LukeModel"),nHr.forEach(t),Vho=r(Z5e," (LUKE model)"),Z5e.forEach(t),Xho=i($),$p=n($,"LI",{});var eCe=s($p);Cne=n(eCe,"STRONG",{});var sHr=s(Cne);zho=r(sHr,"lxmert"),sHr.forEach(t),Qho=r(eCe," \u2014 "),bI=n(eCe,"A",{href:!0});var lHr=s(bI);Who=r(lHr,"LxmertModel"),lHr.forEach(t),Hho=r(eCe," (LXMERT model)"),eCe.forEach(t),Uho=i($),kp=n($,"LI",{});var oCe=s(kp);wne=n(oCe,"STRONG",{});var iHr=s(wne);Jho=r(iHr,"m2m_100"),iHr.forEach(t),Yho=r(oCe," \u2014 "),vI=n(oCe,"A",{href:!0});var dHr=s(vI);Kho=r(dHr,"M2M100Model"),dHr.forEach(t),Zho=r(oCe," (M2M100 model)"),oCe.forEach(t),epo=i($),Sp=n($,"LI",{});var rCe=s(Sp);Ane=n(rCe,"STRONG",{});var cHr=s(Ane);opo=r(cHr,"marian"),cHr.forEach(t),rpo=r(rCe," \u2014 "),FI=n(rCe,"A",{href:!0});var fHr=s(FI);tpo=r(fHr,"MarianModel"),fHr.forEach(t),apo=r(rCe," (Marian model)"),rCe.forEach(t),npo=i($),Rp=n($,"LI",{});var tCe=s(Rp);yne=n(tCe,"STRONG",{});var mHr=s(yne);spo=r(mHr,"maskformer"),mHr.forEach(t),lpo=r(tCe," \u2014 "),TI=n(tCe,"A",{href:!0});var gHr=s(TI);ipo=r(gHr,"MaskFormerModel"),gHr.forEach(t),dpo=r(tCe," (MaskFormer model)"),tCe.forEach(t),cpo=i($),Bp=n($,"LI",{});var aCe=s(Bp);Lne=n(aCe,"STRONG",{});var hHr=s(Lne);fpo=r(hHr,"mbart"),hHr.forEach(t),mpo=r(aCe," \u2014 "),MI=n(aCe,"A",{href:!0});var pHr=s(MI);gpo=r(pHr,"MBartModel"),pHr.forEach(t),hpo=r(aCe," (mBART model)"),aCe.forEach(t),ppo=i($),Pp=n($,"LI",{});var nCe=s(Pp);xne=n(nCe,"STRONG",{});var uHr=s(xne);upo=r(uHr,"megatron-bert"),uHr.forEach(t),_po=r(nCe," \u2014 "),EI=n(nCe,"A",{href:!0});var _Hr=s(EI);bpo=r(_Hr,"MegatronBertModel"),_Hr.forEach(t),vpo=r(nCe," (MegatronBert model)"),nCe.forEach(t),Fpo=i($),Ip=n($,"LI",{});var sCe=s(Ip);$ne=n(sCe,"STRONG",{});var bHr=s($ne);Tpo=r(bHr,"mobilebert"),bHr.forEach(t),Mpo=r(sCe," \u2014 "),CI=n(sCe,"A",{href:!0});var vHr=s(CI);Epo=r(vHr,"MobileBertModel"),vHr.forEach(t),Cpo=r(sCe," (MobileBERT model)"),sCe.forEach(t),wpo=i($),qp=n($,"LI",{});var lCe=s(qp);kne=n(lCe,"STRONG",{});var FHr=s(kne);Apo=r(FHr,"mpnet"),FHr.forEach(t),ypo=r(lCe," \u2014 "),wI=n(lCe,"A",{href:!0});var THr=s(wI);Lpo=r(THr,"MPNetModel"),THr.forEach(t),xpo=r(lCe," (MPNet model)"),lCe.forEach(t),$po=i($),Np=n($,"LI",{});var iCe=s(Np);Sne=n(iCe,"STRONG",{});var MHr=s(Sne);kpo=r(MHr,"mt5"),MHr.forEach(t),Spo=r(iCe," \u2014 "),AI=n(iCe,"A",{href:!0});var EHr=s(AI);Rpo=r(EHr,"MT5Model"),EHr.forEach(t),Bpo=r(iCe," (mT5 model)"),iCe.forEach(t),Ppo=i($),jp=n($,"LI",{});var dCe=s(jp);Rne=n(dCe,"STRONG",{});var CHr=s(Rne);Ipo=r(CHr,"nystromformer"),CHr.forEach(t),qpo=r(dCe," \u2014 "),yI=n(dCe,"A",{href:!0});var wHr=s(yI);Npo=r(wHr,"NystromformerModel"),wHr.forEach(t),jpo=r(dCe," (Nystromformer model)"),dCe.forEach(t),Dpo=i($),Dp=n($,"LI",{});var cCe=s(Dp);Bne=n(cCe,"STRONG",{});var AHr=s(Bne);Gpo=r(AHr,"openai-gpt"),AHr.forEach(t),Opo=r(cCe," \u2014 "),LI=n(cCe,"A",{href:!0});var yHr=s(LI);Vpo=r(yHr,"OpenAIGPTModel"),yHr.forEach(t),Xpo=r(cCe," (OpenAI GPT model)"),cCe.forEach(t),zpo=i($),Gp=n($,"LI",{});var fCe=s(Gp);Pne=n(fCe,"STRONG",{});var LHr=s(Pne);Qpo=r(LHr,"pegasus"),LHr.forEach(t),Wpo=r(fCe," \u2014 "),xI=n(fCe,"A",{href:!0});var xHr=s(xI);Hpo=r(xHr,"PegasusModel"),xHr.forEach(t),Upo=r(fCe," (Pegasus model)"),fCe.forEach(t),Jpo=i($),Op=n($,"LI",{});var mCe=s(Op);Ine=n(mCe,"STRONG",{});var $Hr=s(Ine);Ypo=r($Hr,"perceiver"),$Hr.forEach(t),Kpo=r(mCe," \u2014 "),$I=n(mCe,"A",{href:!0});var kHr=s($I);Zpo=r(kHr,"PerceiverModel"),kHr.forEach(t),euo=r(mCe," (Perceiver model)"),mCe.forEach(t),ouo=i($),Vp=n($,"LI",{});var gCe=s(Vp);qne=n(gCe,"STRONG",{});var SHr=s(qne);ruo=r(SHr,"plbart"),SHr.forEach(t),tuo=r(gCe," \u2014 "),kI=n(gCe,"A",{href:!0});var RHr=s(kI);auo=r(RHr,"PLBartModel"),RHr.forEach(t),nuo=r(gCe," (PLBart model)"),gCe.forEach(t),suo=i($),Xp=n($,"LI",{});var hCe=s(Xp);Nne=n(hCe,"STRONG",{});var BHr=s(Nne);luo=r(BHr,"poolformer"),BHr.forEach(t),iuo=r(hCe," \u2014 "),SI=n(hCe,"A",{href:!0});var PHr=s(SI);duo=r(PHr,"PoolFormerModel"),PHr.forEach(t),cuo=r(hCe," (PoolFormer model)"),hCe.forEach(t),fuo=i($),zp=n($,"LI",{});var pCe=s(zp);jne=n(pCe,"STRONG",{});var IHr=s(jne);muo=r(IHr,"prophetnet"),IHr.forEach(t),guo=r(pCe," \u2014 "),RI=n(pCe,"A",{href:!0});var qHr=s(RI);huo=r(qHr,"ProphetNetModel"),qHr.forEach(t),puo=r(pCe," (ProphetNet model)"),pCe.forEach(t),uuo=i($),Qp=n($,"LI",{});var uCe=s(Qp);Dne=n(uCe,"STRONG",{});var NHr=s(Dne);_uo=r(NHr,"qdqbert"),NHr.forEach(t),buo=r(uCe," \u2014 "),BI=n(uCe,"A",{href:!0});var jHr=s(BI);vuo=r(jHr,"QDQBertModel"),jHr.forEach(t),Fuo=r(uCe," (QDQBert model)"),uCe.forEach(t),Tuo=i($),Wp=n($,"LI",{});var _Ce=s(Wp);Gne=n(_Ce,"STRONG",{});var DHr=s(Gne);Muo=r(DHr,"reformer"),DHr.forEach(t),Euo=r(_Ce," \u2014 "),PI=n(_Ce,"A",{href:!0});var GHr=s(PI);Cuo=r(GHr,"ReformerModel"),GHr.forEach(t),wuo=r(_Ce," (Reformer model)"),_Ce.forEach(t),Auo=i($),Hp=n($,"LI",{});var bCe=s(Hp);One=n(bCe,"STRONG",{});var OHr=s(One);yuo=r(OHr,"regnet"),OHr.forEach(t),Luo=r(bCe," \u2014 "),II=n(bCe,"A",{href:!0});var VHr=s(II);xuo=r(VHr,"RegNetModel"),VHr.forEach(t),$uo=r(bCe," (RegNet model)"),bCe.forEach(t),kuo=i($),Up=n($,"LI",{});var vCe=s(Up);Vne=n(vCe,"STRONG",{});var XHr=s(Vne);Suo=r(XHr,"rembert"),XHr.forEach(t),Ruo=r(vCe," \u2014 "),qI=n(vCe,"A",{href:!0});var zHr=s(qI);Buo=r(zHr,"RemBertModel"),zHr.forEach(t),Puo=r(vCe," (RemBERT model)"),vCe.forEach(t),Iuo=i($),Jp=n($,"LI",{});var FCe=s(Jp);Xne=n(FCe,"STRONG",{});var QHr=s(Xne);quo=r(QHr,"resnet"),QHr.forEach(t),Nuo=r(FCe," \u2014 "),NI=n(FCe,"A",{href:!0});var WHr=s(NI);juo=r(WHr,"ResNetModel"),WHr.forEach(t),Duo=r(FCe," (ResNet model)"),FCe.forEach(t),Guo=i($),Yp=n($,"LI",{});var TCe=s(Yp);zne=n(TCe,"STRONG",{});var HHr=s(zne);Ouo=r(HHr,"retribert"),HHr.forEach(t),Vuo=r(TCe," \u2014 "),jI=n(TCe,"A",{href:!0});var UHr=s(jI);Xuo=r(UHr,"RetriBertModel"),UHr.forEach(t),zuo=r(TCe," (RetriBERT model)"),TCe.forEach(t),Quo=i($),Kp=n($,"LI",{});var MCe=s(Kp);Qne=n(MCe,"STRONG",{});var JHr=s(Qne);Wuo=r(JHr,"roberta"),JHr.forEach(t),Huo=r(MCe," \u2014 "),DI=n(MCe,"A",{href:!0});var YHr=s(DI);Uuo=r(YHr,"RobertaModel"),YHr.forEach(t),Juo=r(MCe," (RoBERTa model)"),MCe.forEach(t),Yuo=i($),Zp=n($,"LI",{});var ECe=s(Zp);Wne=n(ECe,"STRONG",{});var KHr=s(Wne);Kuo=r(KHr,"roformer"),KHr.forEach(t),Zuo=r(ECe," \u2014 "),GI=n(ECe,"A",{href:!0});var ZHr=s(GI);e_o=r(ZHr,"RoFormerModel"),ZHr.forEach(t),o_o=r(ECe," (RoFormer model)"),ECe.forEach(t),r_o=i($),eu=n($,"LI",{});var CCe=s(eu);Hne=n(CCe,"STRONG",{});var eUr=s(Hne);t_o=r(eUr,"segformer"),eUr.forEach(t),a_o=r(CCe," \u2014 "),OI=n(CCe,"A",{href:!0});var oUr=s(OI);n_o=r(oUr,"SegformerModel"),oUr.forEach(t),s_o=r(CCe," (SegFormer model)"),CCe.forEach(t),l_o=i($),ou=n($,"LI",{});var wCe=s(ou);Une=n(wCe,"STRONG",{});var rUr=s(Une);i_o=r(rUr,"sew"),rUr.forEach(t),d_o=r(wCe," \u2014 "),VI=n(wCe,"A",{href:!0});var tUr=s(VI);c_o=r(tUr,"SEWModel"),tUr.forEach(t),f_o=r(wCe," (SEW model)"),wCe.forEach(t),m_o=i($),ru=n($,"LI",{});var ACe=s(ru);Jne=n(ACe,"STRONG",{});var aUr=s(Jne);g_o=r(aUr,"sew-d"),aUr.forEach(t),h_o=r(ACe," \u2014 "),XI=n(ACe,"A",{href:!0});var nUr=s(XI);p_o=r(nUr,"SEWDModel"),nUr.forEach(t),u_o=r(ACe," (SEW-D model)"),ACe.forEach(t),__o=i($),tu=n($,"LI",{});var yCe=s(tu);Yne=n(yCe,"STRONG",{});var sUr=s(Yne);b_o=r(sUr,"speech_to_text"),sUr.forEach(t),v_o=r(yCe," \u2014 "),zI=n(yCe,"A",{href:!0});var lUr=s(zI);F_o=r(lUr,"Speech2TextModel"),lUr.forEach(t),T_o=r(yCe," (Speech2Text model)"),yCe.forEach(t),M_o=i($),au=n($,"LI",{});var LCe=s(au);Kne=n(LCe,"STRONG",{});var iUr=s(Kne);E_o=r(iUr,"splinter"),iUr.forEach(t),C_o=r(LCe," \u2014 "),QI=n(LCe,"A",{href:!0});var dUr=s(QI);w_o=r(dUr,"SplinterModel"),dUr.forEach(t),A_o=r(LCe," (Splinter model)"),LCe.forEach(t),y_o=i($),nu=n($,"LI",{});var xCe=s(nu);Zne=n(xCe,"STRONG",{});var cUr=s(Zne);L_o=r(cUr,"squeezebert"),cUr.forEach(t),x_o=r(xCe," \u2014 "),WI=n(xCe,"A",{href:!0});var fUr=s(WI);$_o=r(fUr,"SqueezeBertModel"),fUr.forEach(t),k_o=r(xCe," (SqueezeBERT model)"),xCe.forEach(t),S_o=i($),su=n($,"LI",{});var $Ce=s(su);ese=n($Ce,"STRONG",{});var mUr=s(ese);R_o=r(mUr,"swin"),mUr.forEach(t),B_o=r($Ce," \u2014 "),HI=n($Ce,"A",{href:!0});var gUr=s(HI);P_o=r(gUr,"SwinModel"),gUr.forEach(t),I_o=r($Ce," (Swin model)"),$Ce.forEach(t),q_o=i($),lu=n($,"LI",{});var kCe=s(lu);ose=n(kCe,"STRONG",{});var hUr=s(ose);N_o=r(hUr,"t5"),hUr.forEach(t),j_o=r(kCe," \u2014 "),UI=n(kCe,"A",{href:!0});var pUr=s(UI);D_o=r(pUr,"T5Model"),pUr.forEach(t),G_o=r(kCe," (T5 model)"),kCe.forEach(t),O_o=i($),iu=n($,"LI",{});var SCe=s(iu);rse=n(SCe,"STRONG",{});var uUr=s(rse);V_o=r(uUr,"tapas"),uUr.forEach(t),X_o=r(SCe," \u2014 "),JI=n(SCe,"A",{href:!0});var _Ur=s(JI);z_o=r(_Ur,"TapasModel"),_Ur.forEach(t),Q_o=r(SCe," (TAPAS model)"),SCe.forEach(t),W_o=i($),du=n($,"LI",{});var RCe=s(du);tse=n(RCe,"STRONG",{});var bUr=s(tse);H_o=r(bUr,"transfo-xl"),bUr.forEach(t),U_o=r(RCe," \u2014 "),YI=n(RCe,"A",{href:!0});var vUr=s(YI);J_o=r(vUr,"TransfoXLModel"),vUr.forEach(t),Y_o=r(RCe," (Transformer-XL model)"),RCe.forEach(t),K_o=i($),cu=n($,"LI",{});var BCe=s(cu);ase=n(BCe,"STRONG",{});var FUr=s(ase);Z_o=r(FUr,"unispeech"),FUr.forEach(t),e1o=r(BCe," \u2014 "),KI=n(BCe,"A",{href:!0});var TUr=s(KI);o1o=r(TUr,"UniSpeechModel"),TUr.forEach(t),r1o=r(BCe," (UniSpeech model)"),BCe.forEach(t),t1o=i($),fu=n($,"LI",{});var PCe=s(fu);nse=n(PCe,"STRONG",{});var MUr=s(nse);a1o=r(MUr,"unispeech-sat"),MUr.forEach(t),n1o=r(PCe," \u2014 "),ZI=n(PCe,"A",{href:!0});var EUr=s(ZI);s1o=r(EUr,"UniSpeechSatModel"),EUr.forEach(t),l1o=r(PCe," (UniSpeechSat model)"),PCe.forEach(t),i1o=i($),mu=n($,"LI",{});var ICe=s(mu);sse=n(ICe,"STRONG",{});var CUr=s(sse);d1o=r(CUr,"van"),CUr.forEach(t),c1o=r(ICe," \u2014 "),eq=n(ICe,"A",{href:!0});var wUr=s(eq);f1o=r(wUr,"VanModel"),wUr.forEach(t),m1o=r(ICe," (VAN model)"),ICe.forEach(t),g1o=i($),gu=n($,"LI",{});var qCe=s(gu);lse=n(qCe,"STRONG",{});var AUr=s(lse);h1o=r(AUr,"vilt"),AUr.forEach(t),p1o=r(qCe," \u2014 "),oq=n(qCe,"A",{href:!0});var yUr=s(oq);u1o=r(yUr,"ViltModel"),yUr.forEach(t),_1o=r(qCe," (ViLT model)"),qCe.forEach(t),b1o=i($),hu=n($,"LI",{});var NCe=s(hu);ise=n(NCe,"STRONG",{});var LUr=s(ise);v1o=r(LUr,"vision-text-dual-encoder"),LUr.forEach(t),F1o=r(NCe," \u2014 "),rq=n(NCe,"A",{href:!0});var xUr=s(rq);T1o=r(xUr,"VisionTextDualEncoderModel"),xUr.forEach(t),M1o=r(NCe," (VisionTextDualEncoder model)"),NCe.forEach(t),E1o=i($),pu=n($,"LI",{});var jCe=s(pu);dse=n(jCe,"STRONG",{});var $Ur=s(dse);C1o=r($Ur,"visual_bert"),$Ur.forEach(t),w1o=r(jCe," \u2014 "),tq=n(jCe,"A",{href:!0});var kUr=s(tq);A1o=r(kUr,"VisualBertModel"),kUr.forEach(t),y1o=r(jCe," (VisualBert model)"),jCe.forEach(t),L1o=i($),uu=n($,"LI",{});var DCe=s(uu);cse=n(DCe,"STRONG",{});var SUr=s(cse);x1o=r(SUr,"vit"),SUr.forEach(t),$1o=r(DCe," \u2014 "),aq=n(DCe,"A",{href:!0});var RUr=s(aq);k1o=r(RUr,"ViTModel"),RUr.forEach(t),S1o=r(DCe," (ViT model)"),DCe.forEach(t),R1o=i($),_u=n($,"LI",{});var GCe=s(_u);fse=n(GCe,"STRONG",{});var BUr=s(fse);B1o=r(BUr,"vit_mae"),BUr.forEach(t),P1o=r(GCe," \u2014 "),nq=n(GCe,"A",{href:!0});var PUr=s(nq);I1o=r(PUr,"ViTMAEModel"),PUr.forEach(t),q1o=r(GCe," (ViTMAE model)"),GCe.forEach(t),N1o=i($),bu=n($,"LI",{});var OCe=s(bu);mse=n(OCe,"STRONG",{});var IUr=s(mse);j1o=r(IUr,"wav2vec2"),IUr.forEach(t),D1o=r(OCe," \u2014 "),sq=n(OCe,"A",{href:!0});var qUr=s(sq);G1o=r(qUr,"Wav2Vec2Model"),qUr.forEach(t),O1o=r(OCe," (Wav2Vec2 model)"),OCe.forEach(t),V1o=i($),vu=n($,"LI",{});var VCe=s(vu);gse=n(VCe,"STRONG",{});var NUr=s(gse);X1o=r(NUr,"wavlm"),NUr.forEach(t),z1o=r(VCe," \u2014 "),lq=n(VCe,"A",{href:!0});var jUr=s(lq);Q1o=r(jUr,"WavLMModel"),jUr.forEach(t),W1o=r(VCe," (WavLM model)"),VCe.forEach(t),H1o=i($),Fu=n($,"LI",{});var XCe=s(Fu);hse=n(XCe,"STRONG",{});var DUr=s(hse);U1o=r(DUr,"xglm"),DUr.forEach(t),J1o=r(XCe," \u2014 "),iq=n(XCe,"A",{href:!0});var GUr=s(iq);Y1o=r(GUr,"XGLMModel"),GUr.forEach(t),K1o=r(XCe," (XGLM model)"),XCe.forEach(t),Z1o=i($),Tu=n($,"LI",{});var zCe=s(Tu);pse=n(zCe,"STRONG",{});var OUr=s(pse);ebo=r(OUr,"xlm"),OUr.forEach(t),obo=r(zCe," \u2014 "),dq=n(zCe,"A",{href:!0});var VUr=s(dq);rbo=r(VUr,"XLMModel"),VUr.forEach(t),tbo=r(zCe," (XLM model)"),zCe.forEach(t),abo=i($),Mu=n($,"LI",{});var QCe=s(Mu);use=n(QCe,"STRONG",{});var XUr=s(use);nbo=r(XUr,"xlm-prophetnet"),XUr.forEach(t),sbo=r(QCe," \u2014 "),cq=n(QCe,"A",{href:!0});var zUr=s(cq);lbo=r(zUr,"XLMProphetNetModel"),zUr.forEach(t),ibo=r(QCe," (XLMProphetNet model)"),QCe.forEach(t),dbo=i($),Eu=n($,"LI",{});var WCe=s(Eu);_se=n(WCe,"STRONG",{});var QUr=s(_se);cbo=r(QUr,"xlm-roberta"),QUr.forEach(t),fbo=r(WCe," \u2014 "),fq=n(WCe,"A",{href:!0});var WUr=s(fq);mbo=r(WUr,"XLMRobertaModel"),WUr.forEach(t),gbo=r(WCe," (XLM-RoBERTa model)"),WCe.forEach(t),hbo=i($),Cu=n($,"LI",{});var HCe=s(Cu);bse=n(HCe,"STRONG",{});var HUr=s(bse);pbo=r(HUr,"xlm-roberta-xl"),HUr.forEach(t),ubo=r(HCe," \u2014 "),mq=n(HCe,"A",{href:!0});var UUr=s(mq);_bo=r(UUr,"XLMRobertaXLModel"),UUr.forEach(t),bbo=r(HCe," (XLM-RoBERTa-XL model)"),HCe.forEach(t),vbo=i($),wu=n($,"LI",{});var UCe=s(wu);vse=n(UCe,"STRONG",{});var JUr=s(vse);Fbo=r(JUr,"xlnet"),JUr.forEach(t),Tbo=r(UCe," \u2014 "),gq=n(UCe,"A",{href:!0});var YUr=s(gq);Mbo=r(YUr,"XLNetModel"),YUr.forEach(t),Ebo=r(UCe," (XLNet model)"),UCe.forEach(t),Cbo=i($),Au=n($,"LI",{});var JCe=s(Au);Fse=n(JCe,"STRONG",{});var KUr=s(Fse);wbo=r(KUr,"yolos"),KUr.forEach(t),Abo=r(JCe," \u2014 "),hq=n(JCe,"A",{href:!0});var ZUr=s(hq);ybo=r(ZUr,"YolosModel"),ZUr.forEach(t),Lbo=r(JCe," (YOLOS model)"),JCe.forEach(t),xbo=i($),yu=n($,"LI",{});var YCe=s(yu);Tse=n(YCe,"STRONG",{});var eJr=s(Tse);$bo=r(eJr,"yoso"),eJr.forEach(t),kbo=r(YCe," \u2014 "),pq=n(YCe,"A",{href:!0});var oJr=s(pq);Sbo=r(oJr,"YosoModel"),oJr.forEach(t),Rbo=r(YCe," (YOSO model)"),YCe.forEach(t),$.forEach(t),Bbo=i(Zt),Lu=n(Zt,"P",{});var KCe=s(Lu);Pbo=r(KCe,"The model is set in evaluation mode by default using "),Mse=n(KCe,"CODE",{});var rJr=s(Mse);Ibo=r(rJr,"model.eval()"),rJr.forEach(t),qbo=r(KCe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ese=n(KCe,"CODE",{});var tJr=s(Ese);Nbo=r(tJr,"model.train()"),tJr.forEach(t),KCe.forEach(t),jbo=i(Zt),T(xu.$$.fragment,Zt),Zt.forEach(t),js.forEach(t),MPe=i(f),Ci=n(f,"H2",{class:!0});var Aqe=s(Ci);$u=n(Aqe,"A",{id:!0,class:!0,href:!0});var aJr=s($u);Cse=n(aJr,"SPAN",{});var nJr=s(Cse);T(vw.$$.fragment,nJr),nJr.forEach(t),aJr.forEach(t),Dbo=i(Aqe),wse=n(Aqe,"SPAN",{});var sJr=s(wse);Gbo=r(sJr,"AutoModelForPreTraining"),sJr.forEach(t),Aqe.forEach(t),EPe=i(f),xo=n(f,"DIV",{class:!0});var Ds=s(xo);T(Fw.$$.fragment,Ds),Obo=i(Ds),wi=n(Ds,"P",{});var WY=s(wi);Vbo=r(WY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),uq=n(WY,"A",{href:!0});var lJr=s(uq);Xbo=r(lJr,"from_pretrained()"),lJr.forEach(t),zbo=r(WY," class method or the "),_q=n(WY,"A",{href:!0});var iJr=s(_q);Qbo=r(iJr,"from_config()"),iJr.forEach(t),Wbo=r(WY,` class
method.`),WY.forEach(t),Hbo=i(Ds),Tw=n(Ds,"P",{});var yqe=s(Tw);Ubo=r(yqe,"This class cannot be instantiated directly using "),Ase=n(yqe,"CODE",{});var dJr=s(Ase);Jbo=r(dJr,"__init__()"),dJr.forEach(t),Ybo=r(yqe," (throws an error)."),yqe.forEach(t),Kbo=i(Ds),rt=n(Ds,"DIV",{class:!0});var W5=s(rt);T(Mw.$$.fragment,W5),Zbo=i(W5),yse=n(W5,"P",{});var cJr=s(yse);e2o=r(cJr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),cJr.forEach(t),o2o=i(W5),Ai=n(W5,"P",{});var HY=s(Ai);r2o=r(HY,`Note:
Loading a model from its configuration file does `),Lse=n(HY,"STRONG",{});var fJr=s(Lse);t2o=r(fJr,"not"),fJr.forEach(t),a2o=r(HY,` load the model weights. It only affects the
model\u2019s configuration. Use `),bq=n(HY,"A",{href:!0});var mJr=s(bq);n2o=r(mJr,"from_pretrained()"),mJr.forEach(t),s2o=r(HY," to load the model weights."),HY.forEach(t),l2o=i(W5),T(ku.$$.fragment,W5),W5.forEach(t),i2o=i(Ds),Ue=n(Ds,"DIV",{class:!0});var ea=s(Ue);T(Ew.$$.fragment,ea),d2o=i(ea),xse=n(ea,"P",{});var gJr=s(xse);c2o=r(gJr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),gJr.forEach(t),f2o=i(ea),ya=n(ea,"P",{});var H5=s(ya);m2o=r(H5,"The model class to instantiate is selected based on the "),$se=n(H5,"CODE",{});var hJr=s($se);g2o=r(hJr,"model_type"),hJr.forEach(t),h2o=r(H5,` property of the config object (either
passed as an argument or loaded from `),kse=n(H5,"CODE",{});var pJr=s(kse);p2o=r(pJr,"pretrained_model_name_or_path"),pJr.forEach(t),u2o=r(H5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Sse=n(H5,"CODE",{});var uJr=s(Sse);_2o=r(uJr,"pretrained_model_name_or_path"),uJr.forEach(t),b2o=r(H5,":"),H5.forEach(t),v2o=i(ea),G=n(ea,"UL",{});var V=s(G);Su=n(V,"LI",{});var ZCe=s(Su);Rse=n(ZCe,"STRONG",{});var _Jr=s(Rse);F2o=r(_Jr,"albert"),_Jr.forEach(t),T2o=r(ZCe," \u2014 "),vq=n(ZCe,"A",{href:!0});var bJr=s(vq);M2o=r(bJr,"AlbertForPreTraining"),bJr.forEach(t),E2o=r(ZCe," (ALBERT model)"),ZCe.forEach(t),C2o=i(V),Ru=n(V,"LI",{});var e3e=s(Ru);Bse=n(e3e,"STRONG",{});var vJr=s(Bse);w2o=r(vJr,"bart"),vJr.forEach(t),A2o=r(e3e," \u2014 "),Fq=n(e3e,"A",{href:!0});var FJr=s(Fq);y2o=r(FJr,"BartForConditionalGeneration"),FJr.forEach(t),L2o=r(e3e," (BART model)"),e3e.forEach(t),x2o=i(V),Bu=n(V,"LI",{});var o3e=s(Bu);Pse=n(o3e,"STRONG",{});var TJr=s(Pse);$2o=r(TJr,"bert"),TJr.forEach(t),k2o=r(o3e," \u2014 "),Tq=n(o3e,"A",{href:!0});var MJr=s(Tq);S2o=r(MJr,"BertForPreTraining"),MJr.forEach(t),R2o=r(o3e," (BERT model)"),o3e.forEach(t),B2o=i(V),Pu=n(V,"LI",{});var r3e=s(Pu);Ise=n(r3e,"STRONG",{});var EJr=s(Ise);P2o=r(EJr,"big_bird"),EJr.forEach(t),I2o=r(r3e," \u2014 "),Mq=n(r3e,"A",{href:!0});var CJr=s(Mq);q2o=r(CJr,"BigBirdForPreTraining"),CJr.forEach(t),N2o=r(r3e," (BigBird model)"),r3e.forEach(t),j2o=i(V),Iu=n(V,"LI",{});var t3e=s(Iu);qse=n(t3e,"STRONG",{});var wJr=s(qse);D2o=r(wJr,"camembert"),wJr.forEach(t),G2o=r(t3e," \u2014 "),Eq=n(t3e,"A",{href:!0});var AJr=s(Eq);O2o=r(AJr,"CamembertForMaskedLM"),AJr.forEach(t),V2o=r(t3e," (CamemBERT model)"),t3e.forEach(t),X2o=i(V),qu=n(V,"LI",{});var a3e=s(qu);Nse=n(a3e,"STRONG",{});var yJr=s(Nse);z2o=r(yJr,"ctrl"),yJr.forEach(t),Q2o=r(a3e," \u2014 "),Cq=n(a3e,"A",{href:!0});var LJr=s(Cq);W2o=r(LJr,"CTRLLMHeadModel"),LJr.forEach(t),H2o=r(a3e," (CTRL model)"),a3e.forEach(t),U2o=i(V),Nu=n(V,"LI",{});var n3e=s(Nu);jse=n(n3e,"STRONG",{});var xJr=s(jse);J2o=r(xJr,"data2vec-text"),xJr.forEach(t),Y2o=r(n3e," \u2014 "),wq=n(n3e,"A",{href:!0});var $Jr=s(wq);K2o=r($Jr,"Data2VecTextForMaskedLM"),$Jr.forEach(t),Z2o=r(n3e," (Data2VecText model)"),n3e.forEach(t),evo=i(V),ju=n(V,"LI",{});var s3e=s(ju);Dse=n(s3e,"STRONG",{});var kJr=s(Dse);ovo=r(kJr,"deberta"),kJr.forEach(t),rvo=r(s3e," \u2014 "),Aq=n(s3e,"A",{href:!0});var SJr=s(Aq);tvo=r(SJr,"DebertaForMaskedLM"),SJr.forEach(t),avo=r(s3e," (DeBERTa model)"),s3e.forEach(t),nvo=i(V),Du=n(V,"LI",{});var l3e=s(Du);Gse=n(l3e,"STRONG",{});var RJr=s(Gse);svo=r(RJr,"deberta-v2"),RJr.forEach(t),lvo=r(l3e," \u2014 "),yq=n(l3e,"A",{href:!0});var BJr=s(yq);ivo=r(BJr,"DebertaV2ForMaskedLM"),BJr.forEach(t),dvo=r(l3e," (DeBERTa-v2 model)"),l3e.forEach(t),cvo=i(V),Gu=n(V,"LI",{});var i3e=s(Gu);Ose=n(i3e,"STRONG",{});var PJr=s(Ose);fvo=r(PJr,"distilbert"),PJr.forEach(t),mvo=r(i3e," \u2014 "),Lq=n(i3e,"A",{href:!0});var IJr=s(Lq);gvo=r(IJr,"DistilBertForMaskedLM"),IJr.forEach(t),hvo=r(i3e," (DistilBERT model)"),i3e.forEach(t),pvo=i(V),Ou=n(V,"LI",{});var d3e=s(Ou);Vse=n(d3e,"STRONG",{});var qJr=s(Vse);uvo=r(qJr,"electra"),qJr.forEach(t),_vo=r(d3e," \u2014 "),xq=n(d3e,"A",{href:!0});var NJr=s(xq);bvo=r(NJr,"ElectraForPreTraining"),NJr.forEach(t),vvo=r(d3e," (ELECTRA model)"),d3e.forEach(t),Fvo=i(V),Vu=n(V,"LI",{});var c3e=s(Vu);Xse=n(c3e,"STRONG",{});var jJr=s(Xse);Tvo=r(jJr,"flaubert"),jJr.forEach(t),Mvo=r(c3e," \u2014 "),$q=n(c3e,"A",{href:!0});var DJr=s($q);Evo=r(DJr,"FlaubertWithLMHeadModel"),DJr.forEach(t),Cvo=r(c3e," (FlauBERT model)"),c3e.forEach(t),wvo=i(V),Xu=n(V,"LI",{});var f3e=s(Xu);zse=n(f3e,"STRONG",{});var GJr=s(zse);Avo=r(GJr,"fnet"),GJr.forEach(t),yvo=r(f3e," \u2014 "),kq=n(f3e,"A",{href:!0});var OJr=s(kq);Lvo=r(OJr,"FNetForPreTraining"),OJr.forEach(t),xvo=r(f3e," (FNet model)"),f3e.forEach(t),$vo=i(V),zu=n(V,"LI",{});var m3e=s(zu);Qse=n(m3e,"STRONG",{});var VJr=s(Qse);kvo=r(VJr,"fsmt"),VJr.forEach(t),Svo=r(m3e," \u2014 "),Sq=n(m3e,"A",{href:!0});var XJr=s(Sq);Rvo=r(XJr,"FSMTForConditionalGeneration"),XJr.forEach(t),Bvo=r(m3e," (FairSeq Machine-Translation model)"),m3e.forEach(t),Pvo=i(V),Qu=n(V,"LI",{});var g3e=s(Qu);Wse=n(g3e,"STRONG",{});var zJr=s(Wse);Ivo=r(zJr,"funnel"),zJr.forEach(t),qvo=r(g3e," \u2014 "),Rq=n(g3e,"A",{href:!0});var QJr=s(Rq);Nvo=r(QJr,"FunnelForPreTraining"),QJr.forEach(t),jvo=r(g3e," (Funnel Transformer model)"),g3e.forEach(t),Dvo=i(V),Wu=n(V,"LI",{});var h3e=s(Wu);Hse=n(h3e,"STRONG",{});var WJr=s(Hse);Gvo=r(WJr,"gpt2"),WJr.forEach(t),Ovo=r(h3e," \u2014 "),Bq=n(h3e,"A",{href:!0});var HJr=s(Bq);Vvo=r(HJr,"GPT2LMHeadModel"),HJr.forEach(t),Xvo=r(h3e," (OpenAI GPT-2 model)"),h3e.forEach(t),zvo=i(V),Hu=n(V,"LI",{});var p3e=s(Hu);Use=n(p3e,"STRONG",{});var UJr=s(Use);Qvo=r(UJr,"ibert"),UJr.forEach(t),Wvo=r(p3e," \u2014 "),Pq=n(p3e,"A",{href:!0});var JJr=s(Pq);Hvo=r(JJr,"IBertForMaskedLM"),JJr.forEach(t),Uvo=r(p3e," (I-BERT model)"),p3e.forEach(t),Jvo=i(V),Uu=n(V,"LI",{});var u3e=s(Uu);Jse=n(u3e,"STRONG",{});var YJr=s(Jse);Yvo=r(YJr,"layoutlm"),YJr.forEach(t),Kvo=r(u3e," \u2014 "),Iq=n(u3e,"A",{href:!0});var KJr=s(Iq);Zvo=r(KJr,"LayoutLMForMaskedLM"),KJr.forEach(t),eFo=r(u3e," (LayoutLM model)"),u3e.forEach(t),oFo=i(V),Ju=n(V,"LI",{});var _3e=s(Ju);Yse=n(_3e,"STRONG",{});var ZJr=s(Yse);rFo=r(ZJr,"longformer"),ZJr.forEach(t),tFo=r(_3e," \u2014 "),qq=n(_3e,"A",{href:!0});var eYr=s(qq);aFo=r(eYr,"LongformerForMaskedLM"),eYr.forEach(t),nFo=r(_3e," (Longformer model)"),_3e.forEach(t),sFo=i(V),Yu=n(V,"LI",{});var b3e=s(Yu);Kse=n(b3e,"STRONG",{});var oYr=s(Kse);lFo=r(oYr,"lxmert"),oYr.forEach(t),iFo=r(b3e," \u2014 "),Nq=n(b3e,"A",{href:!0});var rYr=s(Nq);dFo=r(rYr,"LxmertForPreTraining"),rYr.forEach(t),cFo=r(b3e," (LXMERT model)"),b3e.forEach(t),fFo=i(V),Ku=n(V,"LI",{});var v3e=s(Ku);Zse=n(v3e,"STRONG",{});var tYr=s(Zse);mFo=r(tYr,"megatron-bert"),tYr.forEach(t),gFo=r(v3e," \u2014 "),jq=n(v3e,"A",{href:!0});var aYr=s(jq);hFo=r(aYr,"MegatronBertForPreTraining"),aYr.forEach(t),pFo=r(v3e," (MegatronBert model)"),v3e.forEach(t),uFo=i(V),Zu=n(V,"LI",{});var F3e=s(Zu);ele=n(F3e,"STRONG",{});var nYr=s(ele);_Fo=r(nYr,"mobilebert"),nYr.forEach(t),bFo=r(F3e," \u2014 "),Dq=n(F3e,"A",{href:!0});var sYr=s(Dq);vFo=r(sYr,"MobileBertForPreTraining"),sYr.forEach(t),FFo=r(F3e," (MobileBERT model)"),F3e.forEach(t),TFo=i(V),e_=n(V,"LI",{});var T3e=s(e_);ole=n(T3e,"STRONG",{});var lYr=s(ole);MFo=r(lYr,"mpnet"),lYr.forEach(t),EFo=r(T3e," \u2014 "),Gq=n(T3e,"A",{href:!0});var iYr=s(Gq);CFo=r(iYr,"MPNetForMaskedLM"),iYr.forEach(t),wFo=r(T3e," (MPNet model)"),T3e.forEach(t),AFo=i(V),o_=n(V,"LI",{});var M3e=s(o_);rle=n(M3e,"STRONG",{});var dYr=s(rle);yFo=r(dYr,"openai-gpt"),dYr.forEach(t),LFo=r(M3e," \u2014 "),Oq=n(M3e,"A",{href:!0});var cYr=s(Oq);xFo=r(cYr,"OpenAIGPTLMHeadModel"),cYr.forEach(t),$Fo=r(M3e," (OpenAI GPT model)"),M3e.forEach(t),kFo=i(V),r_=n(V,"LI",{});var E3e=s(r_);tle=n(E3e,"STRONG",{});var fYr=s(tle);SFo=r(fYr,"retribert"),fYr.forEach(t),RFo=r(E3e," \u2014 "),Vq=n(E3e,"A",{href:!0});var mYr=s(Vq);BFo=r(mYr,"RetriBertModel"),mYr.forEach(t),PFo=r(E3e," (RetriBERT model)"),E3e.forEach(t),IFo=i(V),t_=n(V,"LI",{});var C3e=s(t_);ale=n(C3e,"STRONG",{});var gYr=s(ale);qFo=r(gYr,"roberta"),gYr.forEach(t),NFo=r(C3e," \u2014 "),Xq=n(C3e,"A",{href:!0});var hYr=s(Xq);jFo=r(hYr,"RobertaForMaskedLM"),hYr.forEach(t),DFo=r(C3e," (RoBERTa model)"),C3e.forEach(t),GFo=i(V),a_=n(V,"LI",{});var w3e=s(a_);nle=n(w3e,"STRONG",{});var pYr=s(nle);OFo=r(pYr,"squeezebert"),pYr.forEach(t),VFo=r(w3e," \u2014 "),zq=n(w3e,"A",{href:!0});var uYr=s(zq);XFo=r(uYr,"SqueezeBertForMaskedLM"),uYr.forEach(t),zFo=r(w3e," (SqueezeBERT model)"),w3e.forEach(t),QFo=i(V),n_=n(V,"LI",{});var A3e=s(n_);sle=n(A3e,"STRONG",{});var _Yr=s(sle);WFo=r(_Yr,"t5"),_Yr.forEach(t),HFo=r(A3e," \u2014 "),Qq=n(A3e,"A",{href:!0});var bYr=s(Qq);UFo=r(bYr,"T5ForConditionalGeneration"),bYr.forEach(t),JFo=r(A3e," (T5 model)"),A3e.forEach(t),YFo=i(V),s_=n(V,"LI",{});var y3e=s(s_);lle=n(y3e,"STRONG",{});var vYr=s(lle);KFo=r(vYr,"tapas"),vYr.forEach(t),ZFo=r(y3e," \u2014 "),Wq=n(y3e,"A",{href:!0});var FYr=s(Wq);e0o=r(FYr,"TapasForMaskedLM"),FYr.forEach(t),o0o=r(y3e," (TAPAS model)"),y3e.forEach(t),r0o=i(V),l_=n(V,"LI",{});var L3e=s(l_);ile=n(L3e,"STRONG",{});var TYr=s(ile);t0o=r(TYr,"transfo-xl"),TYr.forEach(t),a0o=r(L3e," \u2014 "),Hq=n(L3e,"A",{href:!0});var MYr=s(Hq);n0o=r(MYr,"TransfoXLLMHeadModel"),MYr.forEach(t),s0o=r(L3e," (Transformer-XL model)"),L3e.forEach(t),l0o=i(V),i_=n(V,"LI",{});var x3e=s(i_);dle=n(x3e,"STRONG",{});var EYr=s(dle);i0o=r(EYr,"unispeech"),EYr.forEach(t),d0o=r(x3e," \u2014 "),Uq=n(x3e,"A",{href:!0});var CYr=s(Uq);c0o=r(CYr,"UniSpeechForPreTraining"),CYr.forEach(t),f0o=r(x3e," (UniSpeech model)"),x3e.forEach(t),m0o=i(V),d_=n(V,"LI",{});var $3e=s(d_);cle=n($3e,"STRONG",{});var wYr=s(cle);g0o=r(wYr,"unispeech-sat"),wYr.forEach(t),h0o=r($3e," \u2014 "),Jq=n($3e,"A",{href:!0});var AYr=s(Jq);p0o=r(AYr,"UniSpeechSatForPreTraining"),AYr.forEach(t),u0o=r($3e," (UniSpeechSat model)"),$3e.forEach(t),_0o=i(V),c_=n(V,"LI",{});var k3e=s(c_);fle=n(k3e,"STRONG",{});var yYr=s(fle);b0o=r(yYr,"visual_bert"),yYr.forEach(t),v0o=r(k3e," \u2014 "),Yq=n(k3e,"A",{href:!0});var LYr=s(Yq);F0o=r(LYr,"VisualBertForPreTraining"),LYr.forEach(t),T0o=r(k3e," (VisualBert model)"),k3e.forEach(t),M0o=i(V),f_=n(V,"LI",{});var S3e=s(f_);mle=n(S3e,"STRONG",{});var xYr=s(mle);E0o=r(xYr,"vit_mae"),xYr.forEach(t),C0o=r(S3e," \u2014 "),Kq=n(S3e,"A",{href:!0});var $Yr=s(Kq);w0o=r($Yr,"ViTMAEForPreTraining"),$Yr.forEach(t),A0o=r(S3e," (ViTMAE model)"),S3e.forEach(t),y0o=i(V),m_=n(V,"LI",{});var R3e=s(m_);gle=n(R3e,"STRONG",{});var kYr=s(gle);L0o=r(kYr,"wav2vec2"),kYr.forEach(t),x0o=r(R3e," \u2014 "),Zq=n(R3e,"A",{href:!0});var SYr=s(Zq);$0o=r(SYr,"Wav2Vec2ForPreTraining"),SYr.forEach(t),k0o=r(R3e," (Wav2Vec2 model)"),R3e.forEach(t),S0o=i(V),g_=n(V,"LI",{});var B3e=s(g_);hle=n(B3e,"STRONG",{});var RYr=s(hle);R0o=r(RYr,"xlm"),RYr.forEach(t),B0o=r(B3e," \u2014 "),eN=n(B3e,"A",{href:!0});var BYr=s(eN);P0o=r(BYr,"XLMWithLMHeadModel"),BYr.forEach(t),I0o=r(B3e," (XLM model)"),B3e.forEach(t),q0o=i(V),h_=n(V,"LI",{});var P3e=s(h_);ple=n(P3e,"STRONG",{});var PYr=s(ple);N0o=r(PYr,"xlm-roberta"),PYr.forEach(t),j0o=r(P3e," \u2014 "),oN=n(P3e,"A",{href:!0});var IYr=s(oN);D0o=r(IYr,"XLMRobertaForMaskedLM"),IYr.forEach(t),G0o=r(P3e," (XLM-RoBERTa model)"),P3e.forEach(t),O0o=i(V),p_=n(V,"LI",{});var I3e=s(p_);ule=n(I3e,"STRONG",{});var qYr=s(ule);V0o=r(qYr,"xlm-roberta-xl"),qYr.forEach(t),X0o=r(I3e," \u2014 "),rN=n(I3e,"A",{href:!0});var NYr=s(rN);z0o=r(NYr,"XLMRobertaXLForMaskedLM"),NYr.forEach(t),Q0o=r(I3e," (XLM-RoBERTa-XL model)"),I3e.forEach(t),W0o=i(V),u_=n(V,"LI",{});var q3e=s(u_);_le=n(q3e,"STRONG",{});var jYr=s(_le);H0o=r(jYr,"xlnet"),jYr.forEach(t),U0o=r(q3e," \u2014 "),tN=n(q3e,"A",{href:!0});var DYr=s(tN);J0o=r(DYr,"XLNetLMHeadModel"),DYr.forEach(t),Y0o=r(q3e," (XLNet model)"),q3e.forEach(t),V.forEach(t),K0o=i(ea),__=n(ea,"P",{});var N3e=s(__);Z0o=r(N3e,"The model is set in evaluation mode by default using "),ble=n(N3e,"CODE",{});var GYr=s(ble);e6o=r(GYr,"model.eval()"),GYr.forEach(t),o6o=r(N3e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vle=n(N3e,"CODE",{});var OYr=s(vle);r6o=r(OYr,"model.train()"),OYr.forEach(t),N3e.forEach(t),t6o=i(ea),T(b_.$$.fragment,ea),ea.forEach(t),Ds.forEach(t),CPe=i(f),yi=n(f,"H2",{class:!0});var Lqe=s(yi);v_=n(Lqe,"A",{id:!0,class:!0,href:!0});var VYr=s(v_);Fle=n(VYr,"SPAN",{});var XYr=s(Fle);T(Cw.$$.fragment,XYr),XYr.forEach(t),VYr.forEach(t),a6o=i(Lqe),Tle=n(Lqe,"SPAN",{});var zYr=s(Tle);n6o=r(zYr,"AutoModelForCausalLM"),zYr.forEach(t),Lqe.forEach(t),wPe=i(f),$o=n(f,"DIV",{class:!0});var Gs=s($o);T(ww.$$.fragment,Gs),s6o=i(Gs),Li=n(Gs,"P",{});var UY=s(Li);l6o=r(UY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aN=n(UY,"A",{href:!0});var QYr=s(aN);i6o=r(QYr,"from_pretrained()"),QYr.forEach(t),d6o=r(UY," class method or the "),nN=n(UY,"A",{href:!0});var WYr=s(nN);c6o=r(WYr,"from_config()"),WYr.forEach(t),f6o=r(UY,` class
method.`),UY.forEach(t),m6o=i(Gs),Aw=n(Gs,"P",{});var xqe=s(Aw);g6o=r(xqe,"This class cannot be instantiated directly using "),Mle=n(xqe,"CODE",{});var HYr=s(Mle);h6o=r(HYr,"__init__()"),HYr.forEach(t),p6o=r(xqe," (throws an error)."),xqe.forEach(t),u6o=i(Gs),tt=n(Gs,"DIV",{class:!0});var U5=s(tt);T(yw.$$.fragment,U5),_6o=i(U5),Ele=n(U5,"P",{});var UYr=s(Ele);b6o=r(UYr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),UYr.forEach(t),v6o=i(U5),xi=n(U5,"P",{});var JY=s(xi);F6o=r(JY,`Note:
Loading a model from its configuration file does `),Cle=n(JY,"STRONG",{});var JYr=s(Cle);T6o=r(JYr,"not"),JYr.forEach(t),M6o=r(JY,` load the model weights. It only affects the
model\u2019s configuration. Use `),sN=n(JY,"A",{href:!0});var YYr=s(sN);E6o=r(YYr,"from_pretrained()"),YYr.forEach(t),C6o=r(JY," to load the model weights."),JY.forEach(t),w6o=i(U5),T(F_.$$.fragment,U5),U5.forEach(t),A6o=i(Gs),Je=n(Gs,"DIV",{class:!0});var oa=s(Je);T(Lw.$$.fragment,oa),y6o=i(oa),wle=n(oa,"P",{});var KYr=s(wle);L6o=r(KYr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),KYr.forEach(t),x6o=i(oa),La=n(oa,"P",{});var J5=s(La);$6o=r(J5,"The model class to instantiate is selected based on the "),Ale=n(J5,"CODE",{});var ZYr=s(Ale);k6o=r(ZYr,"model_type"),ZYr.forEach(t),S6o=r(J5,` property of the config object (either
passed as an argument or loaded from `),yle=n(J5,"CODE",{});var eKr=s(yle);R6o=r(eKr,"pretrained_model_name_or_path"),eKr.forEach(t),B6o=r(J5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lle=n(J5,"CODE",{});var oKr=s(Lle);P6o=r(oKr,"pretrained_model_name_or_path"),oKr.forEach(t),I6o=r(J5,":"),J5.forEach(t),q6o=i(oa),z=n(oa,"UL",{});var W=s(z);T_=n(W,"LI",{});var j3e=s(T_);xle=n(j3e,"STRONG",{});var rKr=s(xle);N6o=r(rKr,"bart"),rKr.forEach(t),j6o=r(j3e," \u2014 "),lN=n(j3e,"A",{href:!0});var tKr=s(lN);D6o=r(tKr,"BartForCausalLM"),tKr.forEach(t),G6o=r(j3e," (BART model)"),j3e.forEach(t),O6o=i(W),M_=n(W,"LI",{});var D3e=s(M_);$le=n(D3e,"STRONG",{});var aKr=s($le);V6o=r(aKr,"bert"),aKr.forEach(t),X6o=r(D3e," \u2014 "),iN=n(D3e,"A",{href:!0});var nKr=s(iN);z6o=r(nKr,"BertLMHeadModel"),nKr.forEach(t),Q6o=r(D3e," (BERT model)"),D3e.forEach(t),W6o=i(W),E_=n(W,"LI",{});var G3e=s(E_);kle=n(G3e,"STRONG",{});var sKr=s(kle);H6o=r(sKr,"bert-generation"),sKr.forEach(t),U6o=r(G3e," \u2014 "),dN=n(G3e,"A",{href:!0});var lKr=s(dN);J6o=r(lKr,"BertGenerationDecoder"),lKr.forEach(t),Y6o=r(G3e," (Bert Generation model)"),G3e.forEach(t),K6o=i(W),C_=n(W,"LI",{});var O3e=s(C_);Sle=n(O3e,"STRONG",{});var iKr=s(Sle);Z6o=r(iKr,"big_bird"),iKr.forEach(t),eTo=r(O3e," \u2014 "),cN=n(O3e,"A",{href:!0});var dKr=s(cN);oTo=r(dKr,"BigBirdForCausalLM"),dKr.forEach(t),rTo=r(O3e," (BigBird model)"),O3e.forEach(t),tTo=i(W),w_=n(W,"LI",{});var V3e=s(w_);Rle=n(V3e,"STRONG",{});var cKr=s(Rle);aTo=r(cKr,"bigbird_pegasus"),cKr.forEach(t),nTo=r(V3e," \u2014 "),fN=n(V3e,"A",{href:!0});var fKr=s(fN);sTo=r(fKr,"BigBirdPegasusForCausalLM"),fKr.forEach(t),lTo=r(V3e," (BigBirdPegasus model)"),V3e.forEach(t),iTo=i(W),A_=n(W,"LI",{});var X3e=s(A_);Ble=n(X3e,"STRONG",{});var mKr=s(Ble);dTo=r(mKr,"blenderbot"),mKr.forEach(t),cTo=r(X3e," \u2014 "),mN=n(X3e,"A",{href:!0});var gKr=s(mN);fTo=r(gKr,"BlenderbotForCausalLM"),gKr.forEach(t),mTo=r(X3e," (Blenderbot model)"),X3e.forEach(t),gTo=i(W),y_=n(W,"LI",{});var z3e=s(y_);Ple=n(z3e,"STRONG",{});var hKr=s(Ple);hTo=r(hKr,"blenderbot-small"),hKr.forEach(t),pTo=r(z3e," \u2014 "),gN=n(z3e,"A",{href:!0});var pKr=s(gN);uTo=r(pKr,"BlenderbotSmallForCausalLM"),pKr.forEach(t),_To=r(z3e," (BlenderbotSmall model)"),z3e.forEach(t),bTo=i(W),L_=n(W,"LI",{});var Q3e=s(L_);Ile=n(Q3e,"STRONG",{});var uKr=s(Ile);vTo=r(uKr,"camembert"),uKr.forEach(t),FTo=r(Q3e," \u2014 "),hN=n(Q3e,"A",{href:!0});var _Kr=s(hN);TTo=r(_Kr,"CamembertForCausalLM"),_Kr.forEach(t),MTo=r(Q3e," (CamemBERT model)"),Q3e.forEach(t),ETo=i(W),x_=n(W,"LI",{});var W3e=s(x_);qle=n(W3e,"STRONG",{});var bKr=s(qle);CTo=r(bKr,"ctrl"),bKr.forEach(t),wTo=r(W3e," \u2014 "),pN=n(W3e,"A",{href:!0});var vKr=s(pN);ATo=r(vKr,"CTRLLMHeadModel"),vKr.forEach(t),yTo=r(W3e," (CTRL model)"),W3e.forEach(t),LTo=i(W),$_=n(W,"LI",{});var H3e=s($_);Nle=n(H3e,"STRONG",{});var FKr=s(Nle);xTo=r(FKr,"data2vec-text"),FKr.forEach(t),$To=r(H3e," \u2014 "),uN=n(H3e,"A",{href:!0});var TKr=s(uN);kTo=r(TKr,"Data2VecTextForCausalLM"),TKr.forEach(t),STo=r(H3e," (Data2VecText model)"),H3e.forEach(t),RTo=i(W),k_=n(W,"LI",{});var U3e=s(k_);jle=n(U3e,"STRONG",{});var MKr=s(jle);BTo=r(MKr,"electra"),MKr.forEach(t),PTo=r(U3e," \u2014 "),_N=n(U3e,"A",{href:!0});var EKr=s(_N);ITo=r(EKr,"ElectraForCausalLM"),EKr.forEach(t),qTo=r(U3e," (ELECTRA model)"),U3e.forEach(t),NTo=i(W),S_=n(W,"LI",{});var J3e=s(S_);Dle=n(J3e,"STRONG",{});var CKr=s(Dle);jTo=r(CKr,"gpt2"),CKr.forEach(t),DTo=r(J3e," \u2014 "),bN=n(J3e,"A",{href:!0});var wKr=s(bN);GTo=r(wKr,"GPT2LMHeadModel"),wKr.forEach(t),OTo=r(J3e," (OpenAI GPT-2 model)"),J3e.forEach(t),VTo=i(W),R_=n(W,"LI",{});var Y3e=s(R_);Gle=n(Y3e,"STRONG",{});var AKr=s(Gle);XTo=r(AKr,"gpt_neo"),AKr.forEach(t),zTo=r(Y3e," \u2014 "),vN=n(Y3e,"A",{href:!0});var yKr=s(vN);QTo=r(yKr,"GPTNeoForCausalLM"),yKr.forEach(t),WTo=r(Y3e," (GPT Neo model)"),Y3e.forEach(t),HTo=i(W),B_=n(W,"LI",{});var K3e=s(B_);Ole=n(K3e,"STRONG",{});var LKr=s(Ole);UTo=r(LKr,"gptj"),LKr.forEach(t),JTo=r(K3e," \u2014 "),FN=n(K3e,"A",{href:!0});var xKr=s(FN);YTo=r(xKr,"GPTJForCausalLM"),xKr.forEach(t),KTo=r(K3e," (GPT-J model)"),K3e.forEach(t),ZTo=i(W),P_=n(W,"LI",{});var Z3e=s(P_);Vle=n(Z3e,"STRONG",{});var $Kr=s(Vle);e7o=r($Kr,"marian"),$Kr.forEach(t),o7o=r(Z3e," \u2014 "),TN=n(Z3e,"A",{href:!0});var kKr=s(TN);r7o=r(kKr,"MarianForCausalLM"),kKr.forEach(t),t7o=r(Z3e," (Marian model)"),Z3e.forEach(t),a7o=i(W),I_=n(W,"LI",{});var ewe=s(I_);Xle=n(ewe,"STRONG",{});var SKr=s(Xle);n7o=r(SKr,"mbart"),SKr.forEach(t),s7o=r(ewe," \u2014 "),MN=n(ewe,"A",{href:!0});var RKr=s(MN);l7o=r(RKr,"MBartForCausalLM"),RKr.forEach(t),i7o=r(ewe," (mBART model)"),ewe.forEach(t),d7o=i(W),q_=n(W,"LI",{});var owe=s(q_);zle=n(owe,"STRONG",{});var BKr=s(zle);c7o=r(BKr,"megatron-bert"),BKr.forEach(t),f7o=r(owe," \u2014 "),EN=n(owe,"A",{href:!0});var PKr=s(EN);m7o=r(PKr,"MegatronBertForCausalLM"),PKr.forEach(t),g7o=r(owe," (MegatronBert model)"),owe.forEach(t),h7o=i(W),N_=n(W,"LI",{});var rwe=s(N_);Qle=n(rwe,"STRONG",{});var IKr=s(Qle);p7o=r(IKr,"openai-gpt"),IKr.forEach(t),u7o=r(rwe," \u2014 "),CN=n(rwe,"A",{href:!0});var qKr=s(CN);_7o=r(qKr,"OpenAIGPTLMHeadModel"),qKr.forEach(t),b7o=r(rwe," (OpenAI GPT model)"),rwe.forEach(t),v7o=i(W),j_=n(W,"LI",{});var twe=s(j_);Wle=n(twe,"STRONG",{});var NKr=s(Wle);F7o=r(NKr,"pegasus"),NKr.forEach(t),T7o=r(twe," \u2014 "),wN=n(twe,"A",{href:!0});var jKr=s(wN);M7o=r(jKr,"PegasusForCausalLM"),jKr.forEach(t),E7o=r(twe," (Pegasus model)"),twe.forEach(t),C7o=i(W),D_=n(W,"LI",{});var awe=s(D_);Hle=n(awe,"STRONG",{});var DKr=s(Hle);w7o=r(DKr,"plbart"),DKr.forEach(t),A7o=r(awe," \u2014 "),AN=n(awe,"A",{href:!0});var GKr=s(AN);y7o=r(GKr,"PLBartForCausalLM"),GKr.forEach(t),L7o=r(awe," (PLBart model)"),awe.forEach(t),x7o=i(W),G_=n(W,"LI",{});var nwe=s(G_);Ule=n(nwe,"STRONG",{});var OKr=s(Ule);$7o=r(OKr,"prophetnet"),OKr.forEach(t),k7o=r(nwe," \u2014 "),yN=n(nwe,"A",{href:!0});var VKr=s(yN);S7o=r(VKr,"ProphetNetForCausalLM"),VKr.forEach(t),R7o=r(nwe," (ProphetNet model)"),nwe.forEach(t),B7o=i(W),O_=n(W,"LI",{});var swe=s(O_);Jle=n(swe,"STRONG",{});var XKr=s(Jle);P7o=r(XKr,"qdqbert"),XKr.forEach(t),I7o=r(swe," \u2014 "),LN=n(swe,"A",{href:!0});var zKr=s(LN);q7o=r(zKr,"QDQBertLMHeadModel"),zKr.forEach(t),N7o=r(swe," (QDQBert model)"),swe.forEach(t),j7o=i(W),V_=n(W,"LI",{});var lwe=s(V_);Yle=n(lwe,"STRONG",{});var QKr=s(Yle);D7o=r(QKr,"reformer"),QKr.forEach(t),G7o=r(lwe," \u2014 "),xN=n(lwe,"A",{href:!0});var WKr=s(xN);O7o=r(WKr,"ReformerModelWithLMHead"),WKr.forEach(t),V7o=r(lwe," (Reformer model)"),lwe.forEach(t),X7o=i(W),X_=n(W,"LI",{});var iwe=s(X_);Kle=n(iwe,"STRONG",{});var HKr=s(Kle);z7o=r(HKr,"rembert"),HKr.forEach(t),Q7o=r(iwe," \u2014 "),$N=n(iwe,"A",{href:!0});var UKr=s($N);W7o=r(UKr,"RemBertForCausalLM"),UKr.forEach(t),H7o=r(iwe," (RemBERT model)"),iwe.forEach(t),U7o=i(W),z_=n(W,"LI",{});var dwe=s(z_);Zle=n(dwe,"STRONG",{});var JKr=s(Zle);J7o=r(JKr,"roberta"),JKr.forEach(t),Y7o=r(dwe," \u2014 "),kN=n(dwe,"A",{href:!0});var YKr=s(kN);K7o=r(YKr,"RobertaForCausalLM"),YKr.forEach(t),Z7o=r(dwe," (RoBERTa model)"),dwe.forEach(t),e9o=i(W),Q_=n(W,"LI",{});var cwe=s(Q_);eie=n(cwe,"STRONG",{});var KKr=s(eie);o9o=r(KKr,"roformer"),KKr.forEach(t),r9o=r(cwe," \u2014 "),SN=n(cwe,"A",{href:!0});var ZKr=s(SN);t9o=r(ZKr,"RoFormerForCausalLM"),ZKr.forEach(t),a9o=r(cwe," (RoFormer model)"),cwe.forEach(t),n9o=i(W),W_=n(W,"LI",{});var fwe=s(W_);oie=n(fwe,"STRONG",{});var eZr=s(oie);s9o=r(eZr,"speech_to_text_2"),eZr.forEach(t),l9o=r(fwe," \u2014 "),RN=n(fwe,"A",{href:!0});var oZr=s(RN);i9o=r(oZr,"Speech2Text2ForCausalLM"),oZr.forEach(t),d9o=r(fwe," (Speech2Text2 model)"),fwe.forEach(t),c9o=i(W),H_=n(W,"LI",{});var mwe=s(H_);rie=n(mwe,"STRONG",{});var rZr=s(rie);f9o=r(rZr,"transfo-xl"),rZr.forEach(t),m9o=r(mwe," \u2014 "),BN=n(mwe,"A",{href:!0});var tZr=s(BN);g9o=r(tZr,"TransfoXLLMHeadModel"),tZr.forEach(t),h9o=r(mwe," (Transformer-XL model)"),mwe.forEach(t),p9o=i(W),U_=n(W,"LI",{});var gwe=s(U_);tie=n(gwe,"STRONG",{});var aZr=s(tie);u9o=r(aZr,"trocr"),aZr.forEach(t),_9o=r(gwe," \u2014 "),PN=n(gwe,"A",{href:!0});var nZr=s(PN);b9o=r(nZr,"TrOCRForCausalLM"),nZr.forEach(t),v9o=r(gwe," (TrOCR model)"),gwe.forEach(t),F9o=i(W),J_=n(W,"LI",{});var hwe=s(J_);aie=n(hwe,"STRONG",{});var sZr=s(aie);T9o=r(sZr,"xglm"),sZr.forEach(t),M9o=r(hwe," \u2014 "),IN=n(hwe,"A",{href:!0});var lZr=s(IN);E9o=r(lZr,"XGLMForCausalLM"),lZr.forEach(t),C9o=r(hwe," (XGLM model)"),hwe.forEach(t),w9o=i(W),Y_=n(W,"LI",{});var pwe=s(Y_);nie=n(pwe,"STRONG",{});var iZr=s(nie);A9o=r(iZr,"xlm"),iZr.forEach(t),y9o=r(pwe," \u2014 "),qN=n(pwe,"A",{href:!0});var dZr=s(qN);L9o=r(dZr,"XLMWithLMHeadModel"),dZr.forEach(t),x9o=r(pwe," (XLM model)"),pwe.forEach(t),$9o=i(W),K_=n(W,"LI",{});var uwe=s(K_);sie=n(uwe,"STRONG",{});var cZr=s(sie);k9o=r(cZr,"xlm-prophetnet"),cZr.forEach(t),S9o=r(uwe," \u2014 "),NN=n(uwe,"A",{href:!0});var fZr=s(NN);R9o=r(fZr,"XLMProphetNetForCausalLM"),fZr.forEach(t),B9o=r(uwe," (XLMProphetNet model)"),uwe.forEach(t),P9o=i(W),Z_=n(W,"LI",{});var _we=s(Z_);lie=n(_we,"STRONG",{});var mZr=s(lie);I9o=r(mZr,"xlm-roberta"),mZr.forEach(t),q9o=r(_we," \u2014 "),jN=n(_we,"A",{href:!0});var gZr=s(jN);N9o=r(gZr,"XLMRobertaForCausalLM"),gZr.forEach(t),j9o=r(_we," (XLM-RoBERTa model)"),_we.forEach(t),D9o=i(W),e1=n(W,"LI",{});var bwe=s(e1);iie=n(bwe,"STRONG",{});var hZr=s(iie);G9o=r(hZr,"xlm-roberta-xl"),hZr.forEach(t),O9o=r(bwe," \u2014 "),DN=n(bwe,"A",{href:!0});var pZr=s(DN);V9o=r(pZr,"XLMRobertaXLForCausalLM"),pZr.forEach(t),X9o=r(bwe," (XLM-RoBERTa-XL model)"),bwe.forEach(t),z9o=i(W),o1=n(W,"LI",{});var vwe=s(o1);die=n(vwe,"STRONG",{});var uZr=s(die);Q9o=r(uZr,"xlnet"),uZr.forEach(t),W9o=r(vwe," \u2014 "),GN=n(vwe,"A",{href:!0});var _Zr=s(GN);H9o=r(_Zr,"XLNetLMHeadModel"),_Zr.forEach(t),U9o=r(vwe," (XLNet model)"),vwe.forEach(t),W.forEach(t),J9o=i(oa),r1=n(oa,"P",{});var Fwe=s(r1);Y9o=r(Fwe,"The model is set in evaluation mode by default using "),cie=n(Fwe,"CODE",{});var bZr=s(cie);K9o=r(bZr,"model.eval()"),bZr.forEach(t),Z9o=r(Fwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),fie=n(Fwe,"CODE",{});var vZr=s(fie);eMo=r(vZr,"model.train()"),vZr.forEach(t),Fwe.forEach(t),oMo=i(oa),T(t1.$$.fragment,oa),oa.forEach(t),Gs.forEach(t),APe=i(f),$i=n(f,"H2",{class:!0});var $qe=s($i);a1=n($qe,"A",{id:!0,class:!0,href:!0});var FZr=s(a1);mie=n(FZr,"SPAN",{});var TZr=s(mie);T(xw.$$.fragment,TZr),TZr.forEach(t),FZr.forEach(t),rMo=i($qe),gie=n($qe,"SPAN",{});var MZr=s(gie);tMo=r(MZr,"AutoModelForMaskedLM"),MZr.forEach(t),$qe.forEach(t),yPe=i(f),ko=n(f,"DIV",{class:!0});var Os=s(ko);T($w.$$.fragment,Os),aMo=i(Os),ki=n(Os,"P",{});var YY=s(ki);nMo=r(YY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ON=n(YY,"A",{href:!0});var EZr=s(ON);sMo=r(EZr,"from_pretrained()"),EZr.forEach(t),lMo=r(YY," class method or the "),VN=n(YY,"A",{href:!0});var CZr=s(VN);iMo=r(CZr,"from_config()"),CZr.forEach(t),dMo=r(YY,` class
method.`),YY.forEach(t),cMo=i(Os),kw=n(Os,"P",{});var kqe=s(kw);fMo=r(kqe,"This class cannot be instantiated directly using "),hie=n(kqe,"CODE",{});var wZr=s(hie);mMo=r(wZr,"__init__()"),wZr.forEach(t),gMo=r(kqe," (throws an error)."),kqe.forEach(t),hMo=i(Os),at=n(Os,"DIV",{class:!0});var Y5=s(at);T(Sw.$$.fragment,Y5),pMo=i(Y5),pie=n(Y5,"P",{});var AZr=s(pie);uMo=r(AZr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),AZr.forEach(t),_Mo=i(Y5),Si=n(Y5,"P",{});var KY=s(Si);bMo=r(KY,`Note:
Loading a model from its configuration file does `),uie=n(KY,"STRONG",{});var yZr=s(uie);vMo=r(yZr,"not"),yZr.forEach(t),FMo=r(KY,` load the model weights. It only affects the
model\u2019s configuration. Use `),XN=n(KY,"A",{href:!0});var LZr=s(XN);TMo=r(LZr,"from_pretrained()"),LZr.forEach(t),MMo=r(KY," to load the model weights."),KY.forEach(t),EMo=i(Y5),T(n1.$$.fragment,Y5),Y5.forEach(t),CMo=i(Os),Ye=n(Os,"DIV",{class:!0});var ra=s(Ye);T(Rw.$$.fragment,ra),wMo=i(ra),_ie=n(ra,"P",{});var xZr=s(_ie);AMo=r(xZr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),xZr.forEach(t),yMo=i(ra),xa=n(ra,"P",{});var K5=s(xa);LMo=r(K5,"The model class to instantiate is selected based on the "),bie=n(K5,"CODE",{});var $Zr=s(bie);xMo=r($Zr,"model_type"),$Zr.forEach(t),$Mo=r(K5,` property of the config object (either
passed as an argument or loaded from `),vie=n(K5,"CODE",{});var kZr=s(vie);kMo=r(kZr,"pretrained_model_name_or_path"),kZr.forEach(t),SMo=r(K5,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Fie=n(K5,"CODE",{});var SZr=s(Fie);RMo=r(SZr,"pretrained_model_name_or_path"),SZr.forEach(t),BMo=r(K5,":"),K5.forEach(t),PMo=i(ra),Q=n(ra,"UL",{});var H=s(Q);s1=n(H,"LI",{});var Twe=s(s1);Tie=n(Twe,"STRONG",{});var RZr=s(Tie);IMo=r(RZr,"albert"),RZr.forEach(t),qMo=r(Twe," \u2014 "),zN=n(Twe,"A",{href:!0});var BZr=s(zN);NMo=r(BZr,"AlbertForMaskedLM"),BZr.forEach(t),jMo=r(Twe," (ALBERT model)"),Twe.forEach(t),DMo=i(H),l1=n(H,"LI",{});var Mwe=s(l1);Mie=n(Mwe,"STRONG",{});var PZr=s(Mie);GMo=r(PZr,"bart"),PZr.forEach(t),OMo=r(Mwe," \u2014 "),QN=n(Mwe,"A",{href:!0});var IZr=s(QN);VMo=r(IZr,"BartForConditionalGeneration"),IZr.forEach(t),XMo=r(Mwe," (BART model)"),Mwe.forEach(t),zMo=i(H),i1=n(H,"LI",{});var Ewe=s(i1);Eie=n(Ewe,"STRONG",{});var qZr=s(Eie);QMo=r(qZr,"bert"),qZr.forEach(t),WMo=r(Ewe," \u2014 "),WN=n(Ewe,"A",{href:!0});var NZr=s(WN);HMo=r(NZr,"BertForMaskedLM"),NZr.forEach(t),UMo=r(Ewe," (BERT model)"),Ewe.forEach(t),JMo=i(H),d1=n(H,"LI",{});var Cwe=s(d1);Cie=n(Cwe,"STRONG",{});var jZr=s(Cie);YMo=r(jZr,"big_bird"),jZr.forEach(t),KMo=r(Cwe," \u2014 "),HN=n(Cwe,"A",{href:!0});var DZr=s(HN);ZMo=r(DZr,"BigBirdForMaskedLM"),DZr.forEach(t),e4o=r(Cwe," (BigBird model)"),Cwe.forEach(t),o4o=i(H),c1=n(H,"LI",{});var wwe=s(c1);wie=n(wwe,"STRONG",{});var GZr=s(wie);r4o=r(GZr,"camembert"),GZr.forEach(t),t4o=r(wwe," \u2014 "),UN=n(wwe,"A",{href:!0});var OZr=s(UN);a4o=r(OZr,"CamembertForMaskedLM"),OZr.forEach(t),n4o=r(wwe," (CamemBERT model)"),wwe.forEach(t),s4o=i(H),f1=n(H,"LI",{});var Awe=s(f1);Aie=n(Awe,"STRONG",{});var VZr=s(Aie);l4o=r(VZr,"convbert"),VZr.forEach(t),i4o=r(Awe," \u2014 "),JN=n(Awe,"A",{href:!0});var XZr=s(JN);d4o=r(XZr,"ConvBertForMaskedLM"),XZr.forEach(t),c4o=r(Awe," (ConvBERT model)"),Awe.forEach(t),f4o=i(H),m1=n(H,"LI",{});var ywe=s(m1);yie=n(ywe,"STRONG",{});var zZr=s(yie);m4o=r(zZr,"data2vec-text"),zZr.forEach(t),g4o=r(ywe," \u2014 "),YN=n(ywe,"A",{href:!0});var QZr=s(YN);h4o=r(QZr,"Data2VecTextForMaskedLM"),QZr.forEach(t),p4o=r(ywe," (Data2VecText model)"),ywe.forEach(t),u4o=i(H),g1=n(H,"LI",{});var Lwe=s(g1);Lie=n(Lwe,"STRONG",{});var WZr=s(Lie);_4o=r(WZr,"deberta"),WZr.forEach(t),b4o=r(Lwe," \u2014 "),KN=n(Lwe,"A",{href:!0});var HZr=s(KN);v4o=r(HZr,"DebertaForMaskedLM"),HZr.forEach(t),F4o=r(Lwe," (DeBERTa model)"),Lwe.forEach(t),T4o=i(H),h1=n(H,"LI",{});var xwe=s(h1);xie=n(xwe,"STRONG",{});var UZr=s(xie);M4o=r(UZr,"deberta-v2"),UZr.forEach(t),E4o=r(xwe," \u2014 "),ZN=n(xwe,"A",{href:!0});var JZr=s(ZN);C4o=r(JZr,"DebertaV2ForMaskedLM"),JZr.forEach(t),w4o=r(xwe," (DeBERTa-v2 model)"),xwe.forEach(t),A4o=i(H),p1=n(H,"LI",{});var $we=s(p1);$ie=n($we,"STRONG",{});var YZr=s($ie);y4o=r(YZr,"distilbert"),YZr.forEach(t),L4o=r($we," \u2014 "),ej=n($we,"A",{href:!0});var KZr=s(ej);x4o=r(KZr,"DistilBertForMaskedLM"),KZr.forEach(t),$4o=r($we," (DistilBERT model)"),$we.forEach(t),k4o=i(H),u1=n(H,"LI",{});var kwe=s(u1);kie=n(kwe,"STRONG",{});var ZZr=s(kie);S4o=r(ZZr,"electra"),ZZr.forEach(t),R4o=r(kwe," \u2014 "),oj=n(kwe,"A",{href:!0});var eet=s(oj);B4o=r(eet,"ElectraForMaskedLM"),eet.forEach(t),P4o=r(kwe," (ELECTRA model)"),kwe.forEach(t),I4o=i(H),_1=n(H,"LI",{});var Swe=s(_1);Sie=n(Swe,"STRONG",{});var oet=s(Sie);q4o=r(oet,"flaubert"),oet.forEach(t),N4o=r(Swe," \u2014 "),rj=n(Swe,"A",{href:!0});var ret=s(rj);j4o=r(ret,"FlaubertWithLMHeadModel"),ret.forEach(t),D4o=r(Swe," (FlauBERT model)"),Swe.forEach(t),G4o=i(H),b1=n(H,"LI",{});var Rwe=s(b1);Rie=n(Rwe,"STRONG",{});var tet=s(Rie);O4o=r(tet,"fnet"),tet.forEach(t),V4o=r(Rwe," \u2014 "),tj=n(Rwe,"A",{href:!0});var aet=s(tj);X4o=r(aet,"FNetForMaskedLM"),aet.forEach(t),z4o=r(Rwe," (FNet model)"),Rwe.forEach(t),Q4o=i(H),v1=n(H,"LI",{});var Bwe=s(v1);Bie=n(Bwe,"STRONG",{});var net=s(Bie);W4o=r(net,"funnel"),net.forEach(t),H4o=r(Bwe," \u2014 "),aj=n(Bwe,"A",{href:!0});var set=s(aj);U4o=r(set,"FunnelForMaskedLM"),set.forEach(t),J4o=r(Bwe," (Funnel Transformer model)"),Bwe.forEach(t),Y4o=i(H),F1=n(H,"LI",{});var Pwe=s(F1);Pie=n(Pwe,"STRONG",{});var iet=s(Pie);K4o=r(iet,"ibert"),iet.forEach(t),Z4o=r(Pwe," \u2014 "),nj=n(Pwe,"A",{href:!0});var det=s(nj);eEo=r(det,"IBertForMaskedLM"),det.forEach(t),oEo=r(Pwe," (I-BERT model)"),Pwe.forEach(t),rEo=i(H),T1=n(H,"LI",{});var Iwe=s(T1);Iie=n(Iwe,"STRONG",{});var cet=s(Iie);tEo=r(cet,"layoutlm"),cet.forEach(t),aEo=r(Iwe," \u2014 "),sj=n(Iwe,"A",{href:!0});var fet=s(sj);nEo=r(fet,"LayoutLMForMaskedLM"),fet.forEach(t),sEo=r(Iwe," (LayoutLM model)"),Iwe.forEach(t),lEo=i(H),M1=n(H,"LI",{});var qwe=s(M1);qie=n(qwe,"STRONG",{});var met=s(qie);iEo=r(met,"longformer"),met.forEach(t),dEo=r(qwe," \u2014 "),lj=n(qwe,"A",{href:!0});var get=s(lj);cEo=r(get,"LongformerForMaskedLM"),get.forEach(t),fEo=r(qwe," (Longformer model)"),qwe.forEach(t),mEo=i(H),E1=n(H,"LI",{});var Nwe=s(E1);Nie=n(Nwe,"STRONG",{});var het=s(Nie);gEo=r(het,"mbart"),het.forEach(t),hEo=r(Nwe," \u2014 "),ij=n(Nwe,"A",{href:!0});var pet=s(ij);pEo=r(pet,"MBartForConditionalGeneration"),pet.forEach(t),uEo=r(Nwe," (mBART model)"),Nwe.forEach(t),_Eo=i(H),C1=n(H,"LI",{});var jwe=s(C1);jie=n(jwe,"STRONG",{});var uet=s(jie);bEo=r(uet,"megatron-bert"),uet.forEach(t),vEo=r(jwe," \u2014 "),dj=n(jwe,"A",{href:!0});var _et=s(dj);FEo=r(_et,"MegatronBertForMaskedLM"),_et.forEach(t),TEo=r(jwe," (MegatronBert model)"),jwe.forEach(t),MEo=i(H),w1=n(H,"LI",{});var Dwe=s(w1);Die=n(Dwe,"STRONG",{});var bet=s(Die);EEo=r(bet,"mobilebert"),bet.forEach(t),CEo=r(Dwe," \u2014 "),cj=n(Dwe,"A",{href:!0});var vet=s(cj);wEo=r(vet,"MobileBertForMaskedLM"),vet.forEach(t),AEo=r(Dwe," (MobileBERT model)"),Dwe.forEach(t),yEo=i(H),A1=n(H,"LI",{});var Gwe=s(A1);Gie=n(Gwe,"STRONG",{});var Fet=s(Gie);LEo=r(Fet,"mpnet"),Fet.forEach(t),xEo=r(Gwe," \u2014 "),fj=n(Gwe,"A",{href:!0});var Tet=s(fj);$Eo=r(Tet,"MPNetForMaskedLM"),Tet.forEach(t),kEo=r(Gwe," (MPNet model)"),Gwe.forEach(t),SEo=i(H),y1=n(H,"LI",{});var Owe=s(y1);Oie=n(Owe,"STRONG",{});var Met=s(Oie);REo=r(Met,"nystromformer"),Met.forEach(t),BEo=r(Owe," \u2014 "),mj=n(Owe,"A",{href:!0});var Eet=s(mj);PEo=r(Eet,"NystromformerForMaskedLM"),Eet.forEach(t),IEo=r(Owe," (Nystromformer model)"),Owe.forEach(t),qEo=i(H),L1=n(H,"LI",{});var Vwe=s(L1);Vie=n(Vwe,"STRONG",{});var Cet=s(Vie);NEo=r(Cet,"perceiver"),Cet.forEach(t),jEo=r(Vwe," \u2014 "),gj=n(Vwe,"A",{href:!0});var wet=s(gj);DEo=r(wet,"PerceiverForMaskedLM"),wet.forEach(t),GEo=r(Vwe," (Perceiver model)"),Vwe.forEach(t),OEo=i(H),x1=n(H,"LI",{});var Xwe=s(x1);Xie=n(Xwe,"STRONG",{});var Aet=s(Xie);VEo=r(Aet,"qdqbert"),Aet.forEach(t),XEo=r(Xwe," \u2014 "),hj=n(Xwe,"A",{href:!0});var yet=s(hj);zEo=r(yet,"QDQBertForMaskedLM"),yet.forEach(t),QEo=r(Xwe," (QDQBert model)"),Xwe.forEach(t),WEo=i(H),$1=n(H,"LI",{});var zwe=s($1);zie=n(zwe,"STRONG",{});var Let=s(zie);HEo=r(Let,"reformer"),Let.forEach(t),UEo=r(zwe," \u2014 "),pj=n(zwe,"A",{href:!0});var xet=s(pj);JEo=r(xet,"ReformerForMaskedLM"),xet.forEach(t),YEo=r(zwe," (Reformer model)"),zwe.forEach(t),KEo=i(H),k1=n(H,"LI",{});var Qwe=s(k1);Qie=n(Qwe,"STRONG",{});var $et=s(Qie);ZEo=r($et,"rembert"),$et.forEach(t),e5o=r(Qwe," \u2014 "),uj=n(Qwe,"A",{href:!0});var ket=s(uj);o5o=r(ket,"RemBertForMaskedLM"),ket.forEach(t),r5o=r(Qwe," (RemBERT model)"),Qwe.forEach(t),t5o=i(H),S1=n(H,"LI",{});var Wwe=s(S1);Wie=n(Wwe,"STRONG",{});var Set=s(Wie);a5o=r(Set,"roberta"),Set.forEach(t),n5o=r(Wwe," \u2014 "),_j=n(Wwe,"A",{href:!0});var Ret=s(_j);s5o=r(Ret,"RobertaForMaskedLM"),Ret.forEach(t),l5o=r(Wwe," (RoBERTa model)"),Wwe.forEach(t),i5o=i(H),R1=n(H,"LI",{});var Hwe=s(R1);Hie=n(Hwe,"STRONG",{});var Bet=s(Hie);d5o=r(Bet,"roformer"),Bet.forEach(t),c5o=r(Hwe," \u2014 "),bj=n(Hwe,"A",{href:!0});var Pet=s(bj);f5o=r(Pet,"RoFormerForMaskedLM"),Pet.forEach(t),m5o=r(Hwe," (RoFormer model)"),Hwe.forEach(t),g5o=i(H),B1=n(H,"LI",{});var Uwe=s(B1);Uie=n(Uwe,"STRONG",{});var Iet=s(Uie);h5o=r(Iet,"squeezebert"),Iet.forEach(t),p5o=r(Uwe," \u2014 "),vj=n(Uwe,"A",{href:!0});var qet=s(vj);u5o=r(qet,"SqueezeBertForMaskedLM"),qet.forEach(t),_5o=r(Uwe," (SqueezeBERT model)"),Uwe.forEach(t),b5o=i(H),P1=n(H,"LI",{});var Jwe=s(P1);Jie=n(Jwe,"STRONG",{});var Net=s(Jie);v5o=r(Net,"tapas"),Net.forEach(t),F5o=r(Jwe," \u2014 "),Fj=n(Jwe,"A",{href:!0});var jet=s(Fj);T5o=r(jet,"TapasForMaskedLM"),jet.forEach(t),M5o=r(Jwe," (TAPAS model)"),Jwe.forEach(t),E5o=i(H),I1=n(H,"LI",{});var Ywe=s(I1);Yie=n(Ywe,"STRONG",{});var Det=s(Yie);C5o=r(Det,"wav2vec2"),Det.forEach(t),w5o=r(Ywe," \u2014 "),Kie=n(Ywe,"CODE",{});var Get=s(Kie);A5o=r(Get,"Wav2Vec2ForMaskedLM"),Get.forEach(t),y5o=r(Ywe," (Wav2Vec2 model)"),Ywe.forEach(t),L5o=i(H),q1=n(H,"LI",{});var Kwe=s(q1);Zie=n(Kwe,"STRONG",{});var Oet=s(Zie);x5o=r(Oet,"xlm"),Oet.forEach(t),$5o=r(Kwe," \u2014 "),Tj=n(Kwe,"A",{href:!0});var Vet=s(Tj);k5o=r(Vet,"XLMWithLMHeadModel"),Vet.forEach(t),S5o=r(Kwe," (XLM model)"),Kwe.forEach(t),R5o=i(H),N1=n(H,"LI",{});var Zwe=s(N1);ede=n(Zwe,"STRONG",{});var Xet=s(ede);B5o=r(Xet,"xlm-roberta"),Xet.forEach(t),P5o=r(Zwe," \u2014 "),Mj=n(Zwe,"A",{href:!0});var zet=s(Mj);I5o=r(zet,"XLMRobertaForMaskedLM"),zet.forEach(t),q5o=r(Zwe," (XLM-RoBERTa model)"),Zwe.forEach(t),N5o=i(H),j1=n(H,"LI",{});var eAe=s(j1);ode=n(eAe,"STRONG",{});var Qet=s(ode);j5o=r(Qet,"xlm-roberta-xl"),Qet.forEach(t),D5o=r(eAe," \u2014 "),Ej=n(eAe,"A",{href:!0});var Wet=s(Ej);G5o=r(Wet,"XLMRobertaXLForMaskedLM"),Wet.forEach(t),O5o=r(eAe," (XLM-RoBERTa-XL model)"),eAe.forEach(t),V5o=i(H),D1=n(H,"LI",{});var oAe=s(D1);rde=n(oAe,"STRONG",{});var Het=s(rde);X5o=r(Het,"yoso"),Het.forEach(t),z5o=r(oAe," \u2014 "),Cj=n(oAe,"A",{href:!0});var Uet=s(Cj);Q5o=r(Uet,"YosoForMaskedLM"),Uet.forEach(t),W5o=r(oAe," (YOSO model)"),oAe.forEach(t),H.forEach(t),H5o=i(ra),G1=n(ra,"P",{});var rAe=s(G1);U5o=r(rAe,"The model is set in evaluation mode by default using "),tde=n(rAe,"CODE",{});var Jet=s(tde);J5o=r(Jet,"model.eval()"),Jet.forEach(t),Y5o=r(rAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),ade=n(rAe,"CODE",{});var Yet=s(ade);K5o=r(Yet,"model.train()"),Yet.forEach(t),rAe.forEach(t),Z5o=i(ra),T(O1.$$.fragment,ra),ra.forEach(t),Os.forEach(t),LPe=i(f),Ri=n(f,"H2",{class:!0});var Sqe=s(Ri);V1=n(Sqe,"A",{id:!0,class:!0,href:!0});var Ket=s(V1);nde=n(Ket,"SPAN",{});var Zet=s(nde);T(Bw.$$.fragment,Zet),Zet.forEach(t),Ket.forEach(t),eCo=i(Sqe),sde=n(Sqe,"SPAN",{});var eot=s(sde);oCo=r(eot,"AutoModelForSeq2SeqLM"),eot.forEach(t),Sqe.forEach(t),xPe=i(f),So=n(f,"DIV",{class:!0});var Vs=s(So);T(Pw.$$.fragment,Vs),rCo=i(Vs),Bi=n(Vs,"P",{});var ZY=s(Bi);tCo=r(ZY,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wj=n(ZY,"A",{href:!0});var oot=s(wj);aCo=r(oot,"from_pretrained()"),oot.forEach(t),nCo=r(ZY," class method or the "),Aj=n(ZY,"A",{href:!0});var rot=s(Aj);sCo=r(rot,"from_config()"),rot.forEach(t),lCo=r(ZY,` class
method.`),ZY.forEach(t),iCo=i(Vs),Iw=n(Vs,"P",{});var Rqe=s(Iw);dCo=r(Rqe,"This class cannot be instantiated directly using "),lde=n(Rqe,"CODE",{});var tot=s(lde);cCo=r(tot,"__init__()"),tot.forEach(t),fCo=r(Rqe," (throws an error)."),Rqe.forEach(t),mCo=i(Vs),nt=n(Vs,"DIV",{class:!0});var Z5=s(nt);T(qw.$$.fragment,Z5),gCo=i(Z5),ide=n(Z5,"P",{});var aot=s(ide);hCo=r(aot,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),aot.forEach(t),pCo=i(Z5),Pi=n(Z5,"P",{});var eK=s(Pi);uCo=r(eK,`Note:
Loading a model from its configuration file does `),dde=n(eK,"STRONG",{});var not=s(dde);_Co=r(not,"not"),not.forEach(t),bCo=r(eK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yj=n(eK,"A",{href:!0});var sot=s(yj);vCo=r(sot,"from_pretrained()"),sot.forEach(t),FCo=r(eK," to load the model weights."),eK.forEach(t),TCo=i(Z5),T(X1.$$.fragment,Z5),Z5.forEach(t),MCo=i(Vs),Ke=n(Vs,"DIV",{class:!0});var ta=s(Ke);T(Nw.$$.fragment,ta),ECo=i(ta),cde=n(ta,"P",{});var lot=s(cde);CCo=r(lot,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),lot.forEach(t),wCo=i(ta),$a=n(ta,"P",{});var eC=s($a);ACo=r(eC,"The model class to instantiate is selected based on the "),fde=n(eC,"CODE",{});var iot=s(fde);yCo=r(iot,"model_type"),iot.forEach(t),LCo=r(eC,` property of the config object (either
passed as an argument or loaded from `),mde=n(eC,"CODE",{});var dot=s(mde);xCo=r(dot,"pretrained_model_name_or_path"),dot.forEach(t),$Co=r(eC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),gde=n(eC,"CODE",{});var cot=s(gde);kCo=r(cot,"pretrained_model_name_or_path"),cot.forEach(t),SCo=r(eC,":"),eC.forEach(t),RCo=i(ta),he=n(ta,"UL",{});var ue=s(he);z1=n(ue,"LI",{});var tAe=s(z1);hde=n(tAe,"STRONG",{});var fot=s(hde);BCo=r(fot,"bart"),fot.forEach(t),PCo=r(tAe," \u2014 "),Lj=n(tAe,"A",{href:!0});var mot=s(Lj);ICo=r(mot,"BartForConditionalGeneration"),mot.forEach(t),qCo=r(tAe," (BART model)"),tAe.forEach(t),NCo=i(ue),Q1=n(ue,"LI",{});var aAe=s(Q1);pde=n(aAe,"STRONG",{});var got=s(pde);jCo=r(got,"bigbird_pegasus"),got.forEach(t),DCo=r(aAe," \u2014 "),xj=n(aAe,"A",{href:!0});var hot=s(xj);GCo=r(hot,"BigBirdPegasusForConditionalGeneration"),hot.forEach(t),OCo=r(aAe," (BigBirdPegasus model)"),aAe.forEach(t),VCo=i(ue),W1=n(ue,"LI",{});var nAe=s(W1);ude=n(nAe,"STRONG",{});var pot=s(ude);XCo=r(pot,"blenderbot"),pot.forEach(t),zCo=r(nAe," \u2014 "),$j=n(nAe,"A",{href:!0});var uot=s($j);QCo=r(uot,"BlenderbotForConditionalGeneration"),uot.forEach(t),WCo=r(nAe," (Blenderbot model)"),nAe.forEach(t),HCo=i(ue),H1=n(ue,"LI",{});var sAe=s(H1);_de=n(sAe,"STRONG",{});var _ot=s(_de);UCo=r(_ot,"blenderbot-small"),_ot.forEach(t),JCo=r(sAe," \u2014 "),kj=n(sAe,"A",{href:!0});var bot=s(kj);YCo=r(bot,"BlenderbotSmallForConditionalGeneration"),bot.forEach(t),KCo=r(sAe," (BlenderbotSmall model)"),sAe.forEach(t),ZCo=i(ue),U1=n(ue,"LI",{});var lAe=s(U1);bde=n(lAe,"STRONG",{});var vot=s(bde);e3o=r(vot,"encoder-decoder"),vot.forEach(t),o3o=r(lAe," \u2014 "),Sj=n(lAe,"A",{href:!0});var Fot=s(Sj);r3o=r(Fot,"EncoderDecoderModel"),Fot.forEach(t),t3o=r(lAe," (Encoder decoder model)"),lAe.forEach(t),a3o=i(ue),J1=n(ue,"LI",{});var iAe=s(J1);vde=n(iAe,"STRONG",{});var Tot=s(vde);n3o=r(Tot,"fsmt"),Tot.forEach(t),s3o=r(iAe," \u2014 "),Rj=n(iAe,"A",{href:!0});var Mot=s(Rj);l3o=r(Mot,"FSMTForConditionalGeneration"),Mot.forEach(t),i3o=r(iAe," (FairSeq Machine-Translation model)"),iAe.forEach(t),d3o=i(ue),Y1=n(ue,"LI",{});var dAe=s(Y1);Fde=n(dAe,"STRONG",{});var Eot=s(Fde);c3o=r(Eot,"led"),Eot.forEach(t),f3o=r(dAe," \u2014 "),Bj=n(dAe,"A",{href:!0});var Cot=s(Bj);m3o=r(Cot,"LEDForConditionalGeneration"),Cot.forEach(t),g3o=r(dAe," (LED model)"),dAe.forEach(t),h3o=i(ue),K1=n(ue,"LI",{});var cAe=s(K1);Tde=n(cAe,"STRONG",{});var wot=s(Tde);p3o=r(wot,"m2m_100"),wot.forEach(t),u3o=r(cAe," \u2014 "),Pj=n(cAe,"A",{href:!0});var Aot=s(Pj);_3o=r(Aot,"M2M100ForConditionalGeneration"),Aot.forEach(t),b3o=r(cAe," (M2M100 model)"),cAe.forEach(t),v3o=i(ue),Z1=n(ue,"LI",{});var fAe=s(Z1);Mde=n(fAe,"STRONG",{});var yot=s(Mde);F3o=r(yot,"marian"),yot.forEach(t),T3o=r(fAe," \u2014 "),Ij=n(fAe,"A",{href:!0});var Lot=s(Ij);M3o=r(Lot,"MarianMTModel"),Lot.forEach(t),E3o=r(fAe," (Marian model)"),fAe.forEach(t),C3o=i(ue),eb=n(ue,"LI",{});var mAe=s(eb);Ede=n(mAe,"STRONG",{});var xot=s(Ede);w3o=r(xot,"mbart"),xot.forEach(t),A3o=r(mAe," \u2014 "),qj=n(mAe,"A",{href:!0});var $ot=s(qj);y3o=r($ot,"MBartForConditionalGeneration"),$ot.forEach(t),L3o=r(mAe," (mBART model)"),mAe.forEach(t),x3o=i(ue),ob=n(ue,"LI",{});var gAe=s(ob);Cde=n(gAe,"STRONG",{});var kot=s(Cde);$3o=r(kot,"mt5"),kot.forEach(t),k3o=r(gAe," \u2014 "),Nj=n(gAe,"A",{href:!0});var Sot=s(Nj);S3o=r(Sot,"MT5ForConditionalGeneration"),Sot.forEach(t),R3o=r(gAe," (mT5 model)"),gAe.forEach(t),B3o=i(ue),rb=n(ue,"LI",{});var hAe=s(rb);wde=n(hAe,"STRONG",{});var Rot=s(wde);P3o=r(Rot,"pegasus"),Rot.forEach(t),I3o=r(hAe," \u2014 "),jj=n(hAe,"A",{href:!0});var Bot=s(jj);q3o=r(Bot,"PegasusForConditionalGeneration"),Bot.forEach(t),N3o=r(hAe," (Pegasus model)"),hAe.forEach(t),j3o=i(ue),tb=n(ue,"LI",{});var pAe=s(tb);Ade=n(pAe,"STRONG",{});var Pot=s(Ade);D3o=r(Pot,"plbart"),Pot.forEach(t),G3o=r(pAe," \u2014 "),Dj=n(pAe,"A",{href:!0});var Iot=s(Dj);O3o=r(Iot,"PLBartForConditionalGeneration"),Iot.forEach(t),V3o=r(pAe," (PLBart model)"),pAe.forEach(t),X3o=i(ue),ab=n(ue,"LI",{});var uAe=s(ab);yde=n(uAe,"STRONG",{});var qot=s(yde);z3o=r(qot,"prophetnet"),qot.forEach(t),Q3o=r(uAe," \u2014 "),Gj=n(uAe,"A",{href:!0});var Not=s(Gj);W3o=r(Not,"ProphetNetForConditionalGeneration"),Not.forEach(t),H3o=r(uAe," (ProphetNet model)"),uAe.forEach(t),U3o=i(ue),nb=n(ue,"LI",{});var _Ae=s(nb);Lde=n(_Ae,"STRONG",{});var jot=s(Lde);J3o=r(jot,"t5"),jot.forEach(t),Y3o=r(_Ae," \u2014 "),Oj=n(_Ae,"A",{href:!0});var Dot=s(Oj);K3o=r(Dot,"T5ForConditionalGeneration"),Dot.forEach(t),Z3o=r(_Ae," (T5 model)"),_Ae.forEach(t),ewo=i(ue),sb=n(ue,"LI",{});var bAe=s(sb);xde=n(bAe,"STRONG",{});var Got=s(xde);owo=r(Got,"tapex"),Got.forEach(t),rwo=r(bAe," \u2014 "),Vj=n(bAe,"A",{href:!0});var Oot=s(Vj);two=r(Oot,"BartForConditionalGeneration"),Oot.forEach(t),awo=r(bAe," (TAPEX model)"),bAe.forEach(t),nwo=i(ue),lb=n(ue,"LI",{});var vAe=s(lb);$de=n(vAe,"STRONG",{});var Vot=s($de);swo=r(Vot,"xlm-prophetnet"),Vot.forEach(t),lwo=r(vAe," \u2014 "),Xj=n(vAe,"A",{href:!0});var Xot=s(Xj);iwo=r(Xot,"XLMProphetNetForConditionalGeneration"),Xot.forEach(t),dwo=r(vAe," (XLMProphetNet model)"),vAe.forEach(t),ue.forEach(t),cwo=i(ta),ib=n(ta,"P",{});var FAe=s(ib);fwo=r(FAe,"The model is set in evaluation mode by default using "),kde=n(FAe,"CODE",{});var zot=s(kde);mwo=r(zot,"model.eval()"),zot.forEach(t),gwo=r(FAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Sde=n(FAe,"CODE",{});var Qot=s(Sde);hwo=r(Qot,"model.train()"),Qot.forEach(t),FAe.forEach(t),pwo=i(ta),T(db.$$.fragment,ta),ta.forEach(t),Vs.forEach(t),$Pe=i(f),Ii=n(f,"H2",{class:!0});var Bqe=s(Ii);cb=n(Bqe,"A",{id:!0,class:!0,href:!0});var Wot=s(cb);Rde=n(Wot,"SPAN",{});var Hot=s(Rde);T(jw.$$.fragment,Hot),Hot.forEach(t),Wot.forEach(t),uwo=i(Bqe),Bde=n(Bqe,"SPAN",{});var Uot=s(Bde);_wo=r(Uot,"AutoModelForSequenceClassification"),Uot.forEach(t),Bqe.forEach(t),kPe=i(f),Ro=n(f,"DIV",{class:!0});var Xs=s(Ro);T(Dw.$$.fragment,Xs),bwo=i(Xs),qi=n(Xs,"P",{});var oK=s(qi);vwo=r(oK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),zj=n(oK,"A",{href:!0});var Jot=s(zj);Fwo=r(Jot,"from_pretrained()"),Jot.forEach(t),Two=r(oK," class method or the "),Qj=n(oK,"A",{href:!0});var Yot=s(Qj);Mwo=r(Yot,"from_config()"),Yot.forEach(t),Ewo=r(oK,` class
method.`),oK.forEach(t),Cwo=i(Xs),Gw=n(Xs,"P",{});var Pqe=s(Gw);wwo=r(Pqe,"This class cannot be instantiated directly using "),Pde=n(Pqe,"CODE",{});var Kot=s(Pde);Awo=r(Kot,"__init__()"),Kot.forEach(t),ywo=r(Pqe," (throws an error)."),Pqe.forEach(t),Lwo=i(Xs),st=n(Xs,"DIV",{class:!0});var oC=s(st);T(Ow.$$.fragment,oC),xwo=i(oC),Ide=n(oC,"P",{});var Zot=s(Ide);$wo=r(Zot,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Zot.forEach(t),kwo=i(oC),Ni=n(oC,"P",{});var rK=s(Ni);Swo=r(rK,`Note:
Loading a model from its configuration file does `),qde=n(rK,"STRONG",{});var ert=s(qde);Rwo=r(ert,"not"),ert.forEach(t),Bwo=r(rK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Wj=n(rK,"A",{href:!0});var ort=s(Wj);Pwo=r(ort,"from_pretrained()"),ort.forEach(t),Iwo=r(rK," to load the model weights."),rK.forEach(t),qwo=i(oC),T(fb.$$.fragment,oC),oC.forEach(t),Nwo=i(Xs),Ze=n(Xs,"DIV",{class:!0});var aa=s(Ze);T(Vw.$$.fragment,aa),jwo=i(aa),Nde=n(aa,"P",{});var rrt=s(Nde);Dwo=r(rrt,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),rrt.forEach(t),Gwo=i(aa),ka=n(aa,"P",{});var rC=s(ka);Owo=r(rC,"The model class to instantiate is selected based on the "),jde=n(rC,"CODE",{});var trt=s(jde);Vwo=r(trt,"model_type"),trt.forEach(t),Xwo=r(rC,` property of the config object (either
passed as an argument or loaded from `),Dde=n(rC,"CODE",{});var art=s(Dde);zwo=r(art,"pretrained_model_name_or_path"),art.forEach(t),Qwo=r(rC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gde=n(rC,"CODE",{});var nrt=s(Gde);Wwo=r(nrt,"pretrained_model_name_or_path"),nrt.forEach(t),Hwo=r(rC,":"),rC.forEach(t),Uwo=i(aa),q=n(aa,"UL",{});var N=s(q);mb=n(N,"LI",{});var TAe=s(mb);Ode=n(TAe,"STRONG",{});var srt=s(Ode);Jwo=r(srt,"albert"),srt.forEach(t),Ywo=r(TAe," \u2014 "),Hj=n(TAe,"A",{href:!0});var lrt=s(Hj);Kwo=r(lrt,"AlbertForSequenceClassification"),lrt.forEach(t),Zwo=r(TAe," (ALBERT model)"),TAe.forEach(t),eAo=i(N),gb=n(N,"LI",{});var MAe=s(gb);Vde=n(MAe,"STRONG",{});var irt=s(Vde);oAo=r(irt,"bart"),irt.forEach(t),rAo=r(MAe," \u2014 "),Uj=n(MAe,"A",{href:!0});var drt=s(Uj);tAo=r(drt,"BartForSequenceClassification"),drt.forEach(t),aAo=r(MAe," (BART model)"),MAe.forEach(t),nAo=i(N),hb=n(N,"LI",{});var EAe=s(hb);Xde=n(EAe,"STRONG",{});var crt=s(Xde);sAo=r(crt,"bert"),crt.forEach(t),lAo=r(EAe," \u2014 "),Jj=n(EAe,"A",{href:!0});var frt=s(Jj);iAo=r(frt,"BertForSequenceClassification"),frt.forEach(t),dAo=r(EAe," (BERT model)"),EAe.forEach(t),cAo=i(N),pb=n(N,"LI",{});var CAe=s(pb);zde=n(CAe,"STRONG",{});var mrt=s(zde);fAo=r(mrt,"big_bird"),mrt.forEach(t),mAo=r(CAe," \u2014 "),Yj=n(CAe,"A",{href:!0});var grt=s(Yj);gAo=r(grt,"BigBirdForSequenceClassification"),grt.forEach(t),hAo=r(CAe," (BigBird model)"),CAe.forEach(t),pAo=i(N),ub=n(N,"LI",{});var wAe=s(ub);Qde=n(wAe,"STRONG",{});var hrt=s(Qde);uAo=r(hrt,"bigbird_pegasus"),hrt.forEach(t),_Ao=r(wAe," \u2014 "),Kj=n(wAe,"A",{href:!0});var prt=s(Kj);bAo=r(prt,"BigBirdPegasusForSequenceClassification"),prt.forEach(t),vAo=r(wAe," (BigBirdPegasus model)"),wAe.forEach(t),FAo=i(N),_b=n(N,"LI",{});var AAe=s(_b);Wde=n(AAe,"STRONG",{});var urt=s(Wde);TAo=r(urt,"camembert"),urt.forEach(t),MAo=r(AAe," \u2014 "),Zj=n(AAe,"A",{href:!0});var _rt=s(Zj);EAo=r(_rt,"CamembertForSequenceClassification"),_rt.forEach(t),CAo=r(AAe," (CamemBERT model)"),AAe.forEach(t),wAo=i(N),bb=n(N,"LI",{});var yAe=s(bb);Hde=n(yAe,"STRONG",{});var brt=s(Hde);AAo=r(brt,"canine"),brt.forEach(t),yAo=r(yAe," \u2014 "),eD=n(yAe,"A",{href:!0});var vrt=s(eD);LAo=r(vrt,"CanineForSequenceClassification"),vrt.forEach(t),xAo=r(yAe," (Canine model)"),yAe.forEach(t),$Ao=i(N),vb=n(N,"LI",{});var LAe=s(vb);Ude=n(LAe,"STRONG",{});var Frt=s(Ude);kAo=r(Frt,"convbert"),Frt.forEach(t),SAo=r(LAe," \u2014 "),oD=n(LAe,"A",{href:!0});var Trt=s(oD);RAo=r(Trt,"ConvBertForSequenceClassification"),Trt.forEach(t),BAo=r(LAe," (ConvBERT model)"),LAe.forEach(t),PAo=i(N),Fb=n(N,"LI",{});var xAe=s(Fb);Jde=n(xAe,"STRONG",{});var Mrt=s(Jde);IAo=r(Mrt,"ctrl"),Mrt.forEach(t),qAo=r(xAe," \u2014 "),rD=n(xAe,"A",{href:!0});var Ert=s(rD);NAo=r(Ert,"CTRLForSequenceClassification"),Ert.forEach(t),jAo=r(xAe," (CTRL model)"),xAe.forEach(t),DAo=i(N),Tb=n(N,"LI",{});var $Ae=s(Tb);Yde=n($Ae,"STRONG",{});var Crt=s(Yde);GAo=r(Crt,"data2vec-text"),Crt.forEach(t),OAo=r($Ae," \u2014 "),tD=n($Ae,"A",{href:!0});var wrt=s(tD);VAo=r(wrt,"Data2VecTextForSequenceClassification"),wrt.forEach(t),XAo=r($Ae," (Data2VecText model)"),$Ae.forEach(t),zAo=i(N),Mb=n(N,"LI",{});var kAe=s(Mb);Kde=n(kAe,"STRONG",{});var Art=s(Kde);QAo=r(Art,"deberta"),Art.forEach(t),WAo=r(kAe," \u2014 "),aD=n(kAe,"A",{href:!0});var yrt=s(aD);HAo=r(yrt,"DebertaForSequenceClassification"),yrt.forEach(t),UAo=r(kAe," (DeBERTa model)"),kAe.forEach(t),JAo=i(N),Eb=n(N,"LI",{});var SAe=s(Eb);Zde=n(SAe,"STRONG",{});var Lrt=s(Zde);YAo=r(Lrt,"deberta-v2"),Lrt.forEach(t),KAo=r(SAe," \u2014 "),nD=n(SAe,"A",{href:!0});var xrt=s(nD);ZAo=r(xrt,"DebertaV2ForSequenceClassification"),xrt.forEach(t),eyo=r(SAe," (DeBERTa-v2 model)"),SAe.forEach(t),oyo=i(N),Cb=n(N,"LI",{});var RAe=s(Cb);ece=n(RAe,"STRONG",{});var $rt=s(ece);ryo=r($rt,"distilbert"),$rt.forEach(t),tyo=r(RAe," \u2014 "),sD=n(RAe,"A",{href:!0});var krt=s(sD);ayo=r(krt,"DistilBertForSequenceClassification"),krt.forEach(t),nyo=r(RAe," (DistilBERT model)"),RAe.forEach(t),syo=i(N),wb=n(N,"LI",{});var BAe=s(wb);oce=n(BAe,"STRONG",{});var Srt=s(oce);lyo=r(Srt,"electra"),Srt.forEach(t),iyo=r(BAe," \u2014 "),lD=n(BAe,"A",{href:!0});var Rrt=s(lD);dyo=r(Rrt,"ElectraForSequenceClassification"),Rrt.forEach(t),cyo=r(BAe," (ELECTRA model)"),BAe.forEach(t),fyo=i(N),Ab=n(N,"LI",{});var PAe=s(Ab);rce=n(PAe,"STRONG",{});var Brt=s(rce);myo=r(Brt,"flaubert"),Brt.forEach(t),gyo=r(PAe," \u2014 "),iD=n(PAe,"A",{href:!0});var Prt=s(iD);hyo=r(Prt,"FlaubertForSequenceClassification"),Prt.forEach(t),pyo=r(PAe," (FlauBERT model)"),PAe.forEach(t),uyo=i(N),yb=n(N,"LI",{});var IAe=s(yb);tce=n(IAe,"STRONG",{});var Irt=s(tce);_yo=r(Irt,"fnet"),Irt.forEach(t),byo=r(IAe," \u2014 "),dD=n(IAe,"A",{href:!0});var qrt=s(dD);vyo=r(qrt,"FNetForSequenceClassification"),qrt.forEach(t),Fyo=r(IAe," (FNet model)"),IAe.forEach(t),Tyo=i(N),Lb=n(N,"LI",{});var qAe=s(Lb);ace=n(qAe,"STRONG",{});var Nrt=s(ace);Myo=r(Nrt,"funnel"),Nrt.forEach(t),Eyo=r(qAe," \u2014 "),cD=n(qAe,"A",{href:!0});var jrt=s(cD);Cyo=r(jrt,"FunnelForSequenceClassification"),jrt.forEach(t),wyo=r(qAe," (Funnel Transformer model)"),qAe.forEach(t),Ayo=i(N),xb=n(N,"LI",{});var NAe=s(xb);nce=n(NAe,"STRONG",{});var Drt=s(nce);yyo=r(Drt,"gpt2"),Drt.forEach(t),Lyo=r(NAe," \u2014 "),fD=n(NAe,"A",{href:!0});var Grt=s(fD);xyo=r(Grt,"GPT2ForSequenceClassification"),Grt.forEach(t),$yo=r(NAe," (OpenAI GPT-2 model)"),NAe.forEach(t),kyo=i(N),$b=n(N,"LI",{});var jAe=s($b);sce=n(jAe,"STRONG",{});var Ort=s(sce);Syo=r(Ort,"gpt_neo"),Ort.forEach(t),Ryo=r(jAe," \u2014 "),mD=n(jAe,"A",{href:!0});var Vrt=s(mD);Byo=r(Vrt,"GPTNeoForSequenceClassification"),Vrt.forEach(t),Pyo=r(jAe," (GPT Neo model)"),jAe.forEach(t),Iyo=i(N),kb=n(N,"LI",{});var DAe=s(kb);lce=n(DAe,"STRONG",{});var Xrt=s(lce);qyo=r(Xrt,"gptj"),Xrt.forEach(t),Nyo=r(DAe," \u2014 "),gD=n(DAe,"A",{href:!0});var zrt=s(gD);jyo=r(zrt,"GPTJForSequenceClassification"),zrt.forEach(t),Dyo=r(DAe," (GPT-J model)"),DAe.forEach(t),Gyo=i(N),Sb=n(N,"LI",{});var GAe=s(Sb);ice=n(GAe,"STRONG",{});var Qrt=s(ice);Oyo=r(Qrt,"ibert"),Qrt.forEach(t),Vyo=r(GAe," \u2014 "),hD=n(GAe,"A",{href:!0});var Wrt=s(hD);Xyo=r(Wrt,"IBertForSequenceClassification"),Wrt.forEach(t),zyo=r(GAe," (I-BERT model)"),GAe.forEach(t),Qyo=i(N),Rb=n(N,"LI",{});var OAe=s(Rb);dce=n(OAe,"STRONG",{});var Hrt=s(dce);Wyo=r(Hrt,"layoutlm"),Hrt.forEach(t),Hyo=r(OAe," \u2014 "),pD=n(OAe,"A",{href:!0});var Urt=s(pD);Uyo=r(Urt,"LayoutLMForSequenceClassification"),Urt.forEach(t),Jyo=r(OAe," (LayoutLM model)"),OAe.forEach(t),Yyo=i(N),Bb=n(N,"LI",{});var VAe=s(Bb);cce=n(VAe,"STRONG",{});var Jrt=s(cce);Kyo=r(Jrt,"layoutlmv2"),Jrt.forEach(t),Zyo=r(VAe," \u2014 "),uD=n(VAe,"A",{href:!0});var Yrt=s(uD);eLo=r(Yrt,"LayoutLMv2ForSequenceClassification"),Yrt.forEach(t),oLo=r(VAe," (LayoutLMv2 model)"),VAe.forEach(t),rLo=i(N),Pb=n(N,"LI",{});var XAe=s(Pb);fce=n(XAe,"STRONG",{});var Krt=s(fce);tLo=r(Krt,"led"),Krt.forEach(t),aLo=r(XAe," \u2014 "),_D=n(XAe,"A",{href:!0});var Zrt=s(_D);nLo=r(Zrt,"LEDForSequenceClassification"),Zrt.forEach(t),sLo=r(XAe," (LED model)"),XAe.forEach(t),lLo=i(N),Ib=n(N,"LI",{});var zAe=s(Ib);mce=n(zAe,"STRONG",{});var ett=s(mce);iLo=r(ett,"longformer"),ett.forEach(t),dLo=r(zAe," \u2014 "),bD=n(zAe,"A",{href:!0});var ott=s(bD);cLo=r(ott,"LongformerForSequenceClassification"),ott.forEach(t),fLo=r(zAe," (Longformer model)"),zAe.forEach(t),mLo=i(N),qb=n(N,"LI",{});var QAe=s(qb);gce=n(QAe,"STRONG",{});var rtt=s(gce);gLo=r(rtt,"mbart"),rtt.forEach(t),hLo=r(QAe," \u2014 "),vD=n(QAe,"A",{href:!0});var ttt=s(vD);pLo=r(ttt,"MBartForSequenceClassification"),ttt.forEach(t),uLo=r(QAe," (mBART model)"),QAe.forEach(t),_Lo=i(N),Nb=n(N,"LI",{});var WAe=s(Nb);hce=n(WAe,"STRONG",{});var att=s(hce);bLo=r(att,"megatron-bert"),att.forEach(t),vLo=r(WAe," \u2014 "),FD=n(WAe,"A",{href:!0});var ntt=s(FD);FLo=r(ntt,"MegatronBertForSequenceClassification"),ntt.forEach(t),TLo=r(WAe," (MegatronBert model)"),WAe.forEach(t),MLo=i(N),jb=n(N,"LI",{});var HAe=s(jb);pce=n(HAe,"STRONG",{});var stt=s(pce);ELo=r(stt,"mobilebert"),stt.forEach(t),CLo=r(HAe," \u2014 "),TD=n(HAe,"A",{href:!0});var ltt=s(TD);wLo=r(ltt,"MobileBertForSequenceClassification"),ltt.forEach(t),ALo=r(HAe," (MobileBERT model)"),HAe.forEach(t),yLo=i(N),Db=n(N,"LI",{});var UAe=s(Db);uce=n(UAe,"STRONG",{});var itt=s(uce);LLo=r(itt,"mpnet"),itt.forEach(t),xLo=r(UAe," \u2014 "),MD=n(UAe,"A",{href:!0});var dtt=s(MD);$Lo=r(dtt,"MPNetForSequenceClassification"),dtt.forEach(t),kLo=r(UAe," (MPNet model)"),UAe.forEach(t),SLo=i(N),Gb=n(N,"LI",{});var JAe=s(Gb);_ce=n(JAe,"STRONG",{});var ctt=s(_ce);RLo=r(ctt,"nystromformer"),ctt.forEach(t),BLo=r(JAe," \u2014 "),ED=n(JAe,"A",{href:!0});var ftt=s(ED);PLo=r(ftt,"NystromformerForSequenceClassification"),ftt.forEach(t),ILo=r(JAe," (Nystromformer model)"),JAe.forEach(t),qLo=i(N),Ob=n(N,"LI",{});var YAe=s(Ob);bce=n(YAe,"STRONG",{});var mtt=s(bce);NLo=r(mtt,"openai-gpt"),mtt.forEach(t),jLo=r(YAe," \u2014 "),CD=n(YAe,"A",{href:!0});var gtt=s(CD);DLo=r(gtt,"OpenAIGPTForSequenceClassification"),gtt.forEach(t),GLo=r(YAe," (OpenAI GPT model)"),YAe.forEach(t),OLo=i(N),Vb=n(N,"LI",{});var KAe=s(Vb);vce=n(KAe,"STRONG",{});var htt=s(vce);VLo=r(htt,"perceiver"),htt.forEach(t),XLo=r(KAe," \u2014 "),wD=n(KAe,"A",{href:!0});var ptt=s(wD);zLo=r(ptt,"PerceiverForSequenceClassification"),ptt.forEach(t),QLo=r(KAe," (Perceiver model)"),KAe.forEach(t),WLo=i(N),Xb=n(N,"LI",{});var ZAe=s(Xb);Fce=n(ZAe,"STRONG",{});var utt=s(Fce);HLo=r(utt,"plbart"),utt.forEach(t),ULo=r(ZAe," \u2014 "),AD=n(ZAe,"A",{href:!0});var _tt=s(AD);JLo=r(_tt,"PLBartForSequenceClassification"),_tt.forEach(t),YLo=r(ZAe," (PLBart model)"),ZAe.forEach(t),KLo=i(N),zb=n(N,"LI",{});var eye=s(zb);Tce=n(eye,"STRONG",{});var btt=s(Tce);ZLo=r(btt,"qdqbert"),btt.forEach(t),e8o=r(eye," \u2014 "),yD=n(eye,"A",{href:!0});var vtt=s(yD);o8o=r(vtt,"QDQBertForSequenceClassification"),vtt.forEach(t),r8o=r(eye," (QDQBert model)"),eye.forEach(t),t8o=i(N),Qb=n(N,"LI",{});var oye=s(Qb);Mce=n(oye,"STRONG",{});var Ftt=s(Mce);a8o=r(Ftt,"reformer"),Ftt.forEach(t),n8o=r(oye," \u2014 "),LD=n(oye,"A",{href:!0});var Ttt=s(LD);s8o=r(Ttt,"ReformerForSequenceClassification"),Ttt.forEach(t),l8o=r(oye," (Reformer model)"),oye.forEach(t),i8o=i(N),Wb=n(N,"LI",{});var rye=s(Wb);Ece=n(rye,"STRONG",{});var Mtt=s(Ece);d8o=r(Mtt,"rembert"),Mtt.forEach(t),c8o=r(rye," \u2014 "),xD=n(rye,"A",{href:!0});var Ett=s(xD);f8o=r(Ett,"RemBertForSequenceClassification"),Ett.forEach(t),m8o=r(rye," (RemBERT model)"),rye.forEach(t),g8o=i(N),Hb=n(N,"LI",{});var tye=s(Hb);Cce=n(tye,"STRONG",{});var Ctt=s(Cce);h8o=r(Ctt,"roberta"),Ctt.forEach(t),p8o=r(tye," \u2014 "),$D=n(tye,"A",{href:!0});var wtt=s($D);u8o=r(wtt,"RobertaForSequenceClassification"),wtt.forEach(t),_8o=r(tye," (RoBERTa model)"),tye.forEach(t),b8o=i(N),Ub=n(N,"LI",{});var aye=s(Ub);wce=n(aye,"STRONG",{});var Att=s(wce);v8o=r(Att,"roformer"),Att.forEach(t),F8o=r(aye," \u2014 "),kD=n(aye,"A",{href:!0});var ytt=s(kD);T8o=r(ytt,"RoFormerForSequenceClassification"),ytt.forEach(t),M8o=r(aye," (RoFormer model)"),aye.forEach(t),E8o=i(N),Jb=n(N,"LI",{});var nye=s(Jb);Ace=n(nye,"STRONG",{});var Ltt=s(Ace);C8o=r(Ltt,"squeezebert"),Ltt.forEach(t),w8o=r(nye," \u2014 "),SD=n(nye,"A",{href:!0});var xtt=s(SD);A8o=r(xtt,"SqueezeBertForSequenceClassification"),xtt.forEach(t),y8o=r(nye," (SqueezeBERT model)"),nye.forEach(t),L8o=i(N),Yb=n(N,"LI",{});var sye=s(Yb);yce=n(sye,"STRONG",{});var $tt=s(yce);x8o=r($tt,"tapas"),$tt.forEach(t),$8o=r(sye," \u2014 "),RD=n(sye,"A",{href:!0});var ktt=s(RD);k8o=r(ktt,"TapasForSequenceClassification"),ktt.forEach(t),S8o=r(sye," (TAPAS model)"),sye.forEach(t),R8o=i(N),Kb=n(N,"LI",{});var lye=s(Kb);Lce=n(lye,"STRONG",{});var Stt=s(Lce);B8o=r(Stt,"tapex"),Stt.forEach(t),P8o=r(lye," \u2014 "),BD=n(lye,"A",{href:!0});var Rtt=s(BD);I8o=r(Rtt,"BartForSequenceClassification"),Rtt.forEach(t),q8o=r(lye," (TAPEX model)"),lye.forEach(t),N8o=i(N),Zb=n(N,"LI",{});var iye=s(Zb);xce=n(iye,"STRONG",{});var Btt=s(xce);j8o=r(Btt,"transfo-xl"),Btt.forEach(t),D8o=r(iye," \u2014 "),PD=n(iye,"A",{href:!0});var Ptt=s(PD);G8o=r(Ptt,"TransfoXLForSequenceClassification"),Ptt.forEach(t),O8o=r(iye," (Transformer-XL model)"),iye.forEach(t),V8o=i(N),e2=n(N,"LI",{});var dye=s(e2);$ce=n(dye,"STRONG",{});var Itt=s($ce);X8o=r(Itt,"xlm"),Itt.forEach(t),z8o=r(dye," \u2014 "),ID=n(dye,"A",{href:!0});var qtt=s(ID);Q8o=r(qtt,"XLMForSequenceClassification"),qtt.forEach(t),W8o=r(dye," (XLM model)"),dye.forEach(t),H8o=i(N),o2=n(N,"LI",{});var cye=s(o2);kce=n(cye,"STRONG",{});var Ntt=s(kce);U8o=r(Ntt,"xlm-roberta"),Ntt.forEach(t),J8o=r(cye," \u2014 "),qD=n(cye,"A",{href:!0});var jtt=s(qD);Y8o=r(jtt,"XLMRobertaForSequenceClassification"),jtt.forEach(t),K8o=r(cye," (XLM-RoBERTa model)"),cye.forEach(t),Z8o=i(N),r2=n(N,"LI",{});var fye=s(r2);Sce=n(fye,"STRONG",{});var Dtt=s(Sce);exo=r(Dtt,"xlm-roberta-xl"),Dtt.forEach(t),oxo=r(fye," \u2014 "),ND=n(fye,"A",{href:!0});var Gtt=s(ND);rxo=r(Gtt,"XLMRobertaXLForSequenceClassification"),Gtt.forEach(t),txo=r(fye," (XLM-RoBERTa-XL model)"),fye.forEach(t),axo=i(N),t2=n(N,"LI",{});var mye=s(t2);Rce=n(mye,"STRONG",{});var Ott=s(Rce);nxo=r(Ott,"xlnet"),Ott.forEach(t),sxo=r(mye," \u2014 "),jD=n(mye,"A",{href:!0});var Vtt=s(jD);lxo=r(Vtt,"XLNetForSequenceClassification"),Vtt.forEach(t),ixo=r(mye," (XLNet model)"),mye.forEach(t),dxo=i(N),a2=n(N,"LI",{});var gye=s(a2);Bce=n(gye,"STRONG",{});var Xtt=s(Bce);cxo=r(Xtt,"yoso"),Xtt.forEach(t),fxo=r(gye," \u2014 "),DD=n(gye,"A",{href:!0});var ztt=s(DD);mxo=r(ztt,"YosoForSequenceClassification"),ztt.forEach(t),gxo=r(gye," (YOSO model)"),gye.forEach(t),N.forEach(t),hxo=i(aa),n2=n(aa,"P",{});var hye=s(n2);pxo=r(hye,"The model is set in evaluation mode by default using "),Pce=n(hye,"CODE",{});var Qtt=s(Pce);uxo=r(Qtt,"model.eval()"),Qtt.forEach(t),_xo=r(hye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ice=n(hye,"CODE",{});var Wtt=s(Ice);bxo=r(Wtt,"model.train()"),Wtt.forEach(t),hye.forEach(t),vxo=i(aa),T(s2.$$.fragment,aa),aa.forEach(t),Xs.forEach(t),SPe=i(f),ji=n(f,"H2",{class:!0});var Iqe=s(ji);l2=n(Iqe,"A",{id:!0,class:!0,href:!0});var Htt=s(l2);qce=n(Htt,"SPAN",{});var Utt=s(qce);T(Xw.$$.fragment,Utt),Utt.forEach(t),Htt.forEach(t),Fxo=i(Iqe),Nce=n(Iqe,"SPAN",{});var Jtt=s(Nce);Txo=r(Jtt,"AutoModelForMultipleChoice"),Jtt.forEach(t),Iqe.forEach(t),RPe=i(f),Bo=n(f,"DIV",{class:!0});var zs=s(Bo);T(zw.$$.fragment,zs),Mxo=i(zs),Di=n(zs,"P",{});var tK=s(Di);Exo=r(tK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),GD=n(tK,"A",{href:!0});var Ytt=s(GD);Cxo=r(Ytt,"from_pretrained()"),Ytt.forEach(t),wxo=r(tK," class method or the "),OD=n(tK,"A",{href:!0});var Ktt=s(OD);Axo=r(Ktt,"from_config()"),Ktt.forEach(t),yxo=r(tK,` class
method.`),tK.forEach(t),Lxo=i(zs),Qw=n(zs,"P",{});var qqe=s(Qw);xxo=r(qqe,"This class cannot be instantiated directly using "),jce=n(qqe,"CODE",{});var Ztt=s(jce);$xo=r(Ztt,"__init__()"),Ztt.forEach(t),kxo=r(qqe," (throws an error)."),qqe.forEach(t),Sxo=i(zs),lt=n(zs,"DIV",{class:!0});var tC=s(lt);T(Ww.$$.fragment,tC),Rxo=i(tC),Dce=n(tC,"P",{});var eat=s(Dce);Bxo=r(eat,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),eat.forEach(t),Pxo=i(tC),Gi=n(tC,"P",{});var aK=s(Gi);Ixo=r(aK,`Note:
Loading a model from its configuration file does `),Gce=n(aK,"STRONG",{});var oat=s(Gce);qxo=r(oat,"not"),oat.forEach(t),Nxo=r(aK,` load the model weights. It only affects the
model\u2019s configuration. Use `),VD=n(aK,"A",{href:!0});var rat=s(VD);jxo=r(rat,"from_pretrained()"),rat.forEach(t),Dxo=r(aK," to load the model weights."),aK.forEach(t),Gxo=i(tC),T(i2.$$.fragment,tC),tC.forEach(t),Oxo=i(zs),eo=n(zs,"DIV",{class:!0});var na=s(eo);T(Hw.$$.fragment,na),Vxo=i(na),Oce=n(na,"P",{});var tat=s(Oce);Xxo=r(tat,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),tat.forEach(t),zxo=i(na),Sa=n(na,"P",{});var aC=s(Sa);Qxo=r(aC,"The model class to instantiate is selected based on the "),Vce=n(aC,"CODE",{});var aat=s(Vce);Wxo=r(aat,"model_type"),aat.forEach(t),Hxo=r(aC,` property of the config object (either
passed as an argument or loaded from `),Xce=n(aC,"CODE",{});var nat=s(Xce);Uxo=r(nat,"pretrained_model_name_or_path"),nat.forEach(t),Jxo=r(aC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zce=n(aC,"CODE",{});var sat=s(zce);Yxo=r(sat,"pretrained_model_name_or_path"),sat.forEach(t),Kxo=r(aC,":"),aC.forEach(t),Zxo=i(na),Y=n(na,"UL",{});var K=s(Y);d2=n(K,"LI",{});var pye=s(d2);Qce=n(pye,"STRONG",{});var lat=s(Qce);e$o=r(lat,"albert"),lat.forEach(t),o$o=r(pye," \u2014 "),XD=n(pye,"A",{href:!0});var iat=s(XD);r$o=r(iat,"AlbertForMultipleChoice"),iat.forEach(t),t$o=r(pye," (ALBERT model)"),pye.forEach(t),a$o=i(K),c2=n(K,"LI",{});var uye=s(c2);Wce=n(uye,"STRONG",{});var dat=s(Wce);n$o=r(dat,"bert"),dat.forEach(t),s$o=r(uye," \u2014 "),zD=n(uye,"A",{href:!0});var cat=s(zD);l$o=r(cat,"BertForMultipleChoice"),cat.forEach(t),i$o=r(uye," (BERT model)"),uye.forEach(t),d$o=i(K),f2=n(K,"LI",{});var _ye=s(f2);Hce=n(_ye,"STRONG",{});var fat=s(Hce);c$o=r(fat,"big_bird"),fat.forEach(t),f$o=r(_ye," \u2014 "),QD=n(_ye,"A",{href:!0});var mat=s(QD);m$o=r(mat,"BigBirdForMultipleChoice"),mat.forEach(t),g$o=r(_ye," (BigBird model)"),_ye.forEach(t),h$o=i(K),m2=n(K,"LI",{});var bye=s(m2);Uce=n(bye,"STRONG",{});var gat=s(Uce);p$o=r(gat,"camembert"),gat.forEach(t),u$o=r(bye," \u2014 "),WD=n(bye,"A",{href:!0});var hat=s(WD);_$o=r(hat,"CamembertForMultipleChoice"),hat.forEach(t),b$o=r(bye," (CamemBERT model)"),bye.forEach(t),v$o=i(K),g2=n(K,"LI",{});var vye=s(g2);Jce=n(vye,"STRONG",{});var pat=s(Jce);F$o=r(pat,"canine"),pat.forEach(t),T$o=r(vye," \u2014 "),HD=n(vye,"A",{href:!0});var uat=s(HD);M$o=r(uat,"CanineForMultipleChoice"),uat.forEach(t),E$o=r(vye," (Canine model)"),vye.forEach(t),C$o=i(K),h2=n(K,"LI",{});var Fye=s(h2);Yce=n(Fye,"STRONG",{});var _at=s(Yce);w$o=r(_at,"convbert"),_at.forEach(t),A$o=r(Fye," \u2014 "),UD=n(Fye,"A",{href:!0});var bat=s(UD);y$o=r(bat,"ConvBertForMultipleChoice"),bat.forEach(t),L$o=r(Fye," (ConvBERT model)"),Fye.forEach(t),x$o=i(K),p2=n(K,"LI",{});var Tye=s(p2);Kce=n(Tye,"STRONG",{});var vat=s(Kce);$$o=r(vat,"data2vec-text"),vat.forEach(t),k$o=r(Tye," \u2014 "),JD=n(Tye,"A",{href:!0});var Fat=s(JD);S$o=r(Fat,"Data2VecTextForMultipleChoice"),Fat.forEach(t),R$o=r(Tye," (Data2VecText model)"),Tye.forEach(t),B$o=i(K),u2=n(K,"LI",{});var Mye=s(u2);Zce=n(Mye,"STRONG",{});var Tat=s(Zce);P$o=r(Tat,"deberta-v2"),Tat.forEach(t),I$o=r(Mye," \u2014 "),YD=n(Mye,"A",{href:!0});var Mat=s(YD);q$o=r(Mat,"DebertaV2ForMultipleChoice"),Mat.forEach(t),N$o=r(Mye," (DeBERTa-v2 model)"),Mye.forEach(t),j$o=i(K),_2=n(K,"LI",{});var Eye=s(_2);efe=n(Eye,"STRONG",{});var Eat=s(efe);D$o=r(Eat,"distilbert"),Eat.forEach(t),G$o=r(Eye," \u2014 "),KD=n(Eye,"A",{href:!0});var Cat=s(KD);O$o=r(Cat,"DistilBertForMultipleChoice"),Cat.forEach(t),V$o=r(Eye," (DistilBERT model)"),Eye.forEach(t),X$o=i(K),b2=n(K,"LI",{});var Cye=s(b2);ofe=n(Cye,"STRONG",{});var wat=s(ofe);z$o=r(wat,"electra"),wat.forEach(t),Q$o=r(Cye," \u2014 "),ZD=n(Cye,"A",{href:!0});var Aat=s(ZD);W$o=r(Aat,"ElectraForMultipleChoice"),Aat.forEach(t),H$o=r(Cye," (ELECTRA model)"),Cye.forEach(t),U$o=i(K),v2=n(K,"LI",{});var wye=s(v2);rfe=n(wye,"STRONG",{});var yat=s(rfe);J$o=r(yat,"flaubert"),yat.forEach(t),Y$o=r(wye," \u2014 "),eG=n(wye,"A",{href:!0});var Lat=s(eG);K$o=r(Lat,"FlaubertForMultipleChoice"),Lat.forEach(t),Z$o=r(wye," (FlauBERT model)"),wye.forEach(t),eko=i(K),F2=n(K,"LI",{});var Aye=s(F2);tfe=n(Aye,"STRONG",{});var xat=s(tfe);oko=r(xat,"fnet"),xat.forEach(t),rko=r(Aye," \u2014 "),oG=n(Aye,"A",{href:!0});var $at=s(oG);tko=r($at,"FNetForMultipleChoice"),$at.forEach(t),ako=r(Aye," (FNet model)"),Aye.forEach(t),nko=i(K),T2=n(K,"LI",{});var yye=s(T2);afe=n(yye,"STRONG",{});var kat=s(afe);sko=r(kat,"funnel"),kat.forEach(t),lko=r(yye," \u2014 "),rG=n(yye,"A",{href:!0});var Sat=s(rG);iko=r(Sat,"FunnelForMultipleChoice"),Sat.forEach(t),dko=r(yye," (Funnel Transformer model)"),yye.forEach(t),cko=i(K),M2=n(K,"LI",{});var Lye=s(M2);nfe=n(Lye,"STRONG",{});var Rat=s(nfe);fko=r(Rat,"ibert"),Rat.forEach(t),mko=r(Lye," \u2014 "),tG=n(Lye,"A",{href:!0});var Bat=s(tG);gko=r(Bat,"IBertForMultipleChoice"),Bat.forEach(t),hko=r(Lye," (I-BERT model)"),Lye.forEach(t),pko=i(K),E2=n(K,"LI",{});var xye=s(E2);sfe=n(xye,"STRONG",{});var Pat=s(sfe);uko=r(Pat,"longformer"),Pat.forEach(t),_ko=r(xye," \u2014 "),aG=n(xye,"A",{href:!0});var Iat=s(aG);bko=r(Iat,"LongformerForMultipleChoice"),Iat.forEach(t),vko=r(xye," (Longformer model)"),xye.forEach(t),Fko=i(K),C2=n(K,"LI",{});var $ye=s(C2);lfe=n($ye,"STRONG",{});var qat=s(lfe);Tko=r(qat,"megatron-bert"),qat.forEach(t),Mko=r($ye," \u2014 "),nG=n($ye,"A",{href:!0});var Nat=s(nG);Eko=r(Nat,"MegatronBertForMultipleChoice"),Nat.forEach(t),Cko=r($ye," (MegatronBert model)"),$ye.forEach(t),wko=i(K),w2=n(K,"LI",{});var kye=s(w2);ife=n(kye,"STRONG",{});var jat=s(ife);Ako=r(jat,"mobilebert"),jat.forEach(t),yko=r(kye," \u2014 "),sG=n(kye,"A",{href:!0});var Dat=s(sG);Lko=r(Dat,"MobileBertForMultipleChoice"),Dat.forEach(t),xko=r(kye," (MobileBERT model)"),kye.forEach(t),$ko=i(K),A2=n(K,"LI",{});var Sye=s(A2);dfe=n(Sye,"STRONG",{});var Gat=s(dfe);kko=r(Gat,"mpnet"),Gat.forEach(t),Sko=r(Sye," \u2014 "),lG=n(Sye,"A",{href:!0});var Oat=s(lG);Rko=r(Oat,"MPNetForMultipleChoice"),Oat.forEach(t),Bko=r(Sye," (MPNet model)"),Sye.forEach(t),Pko=i(K),y2=n(K,"LI",{});var Rye=s(y2);cfe=n(Rye,"STRONG",{});var Vat=s(cfe);Iko=r(Vat,"nystromformer"),Vat.forEach(t),qko=r(Rye," \u2014 "),iG=n(Rye,"A",{href:!0});var Xat=s(iG);Nko=r(Xat,"NystromformerForMultipleChoice"),Xat.forEach(t),jko=r(Rye," (Nystromformer model)"),Rye.forEach(t),Dko=i(K),L2=n(K,"LI",{});var Bye=s(L2);ffe=n(Bye,"STRONG",{});var zat=s(ffe);Gko=r(zat,"qdqbert"),zat.forEach(t),Oko=r(Bye," \u2014 "),dG=n(Bye,"A",{href:!0});var Qat=s(dG);Vko=r(Qat,"QDQBertForMultipleChoice"),Qat.forEach(t),Xko=r(Bye," (QDQBert model)"),Bye.forEach(t),zko=i(K),x2=n(K,"LI",{});var Pye=s(x2);mfe=n(Pye,"STRONG",{});var Wat=s(mfe);Qko=r(Wat,"rembert"),Wat.forEach(t),Wko=r(Pye," \u2014 "),cG=n(Pye,"A",{href:!0});var Hat=s(cG);Hko=r(Hat,"RemBertForMultipleChoice"),Hat.forEach(t),Uko=r(Pye," (RemBERT model)"),Pye.forEach(t),Jko=i(K),$2=n(K,"LI",{});var Iye=s($2);gfe=n(Iye,"STRONG",{});var Uat=s(gfe);Yko=r(Uat,"roberta"),Uat.forEach(t),Kko=r(Iye," \u2014 "),fG=n(Iye,"A",{href:!0});var Jat=s(fG);Zko=r(Jat,"RobertaForMultipleChoice"),Jat.forEach(t),eSo=r(Iye," (RoBERTa model)"),Iye.forEach(t),oSo=i(K),k2=n(K,"LI",{});var qye=s(k2);hfe=n(qye,"STRONG",{});var Yat=s(hfe);rSo=r(Yat,"roformer"),Yat.forEach(t),tSo=r(qye," \u2014 "),mG=n(qye,"A",{href:!0});var Kat=s(mG);aSo=r(Kat,"RoFormerForMultipleChoice"),Kat.forEach(t),nSo=r(qye," (RoFormer model)"),qye.forEach(t),sSo=i(K),S2=n(K,"LI",{});var Nye=s(S2);pfe=n(Nye,"STRONG",{});var Zat=s(pfe);lSo=r(Zat,"squeezebert"),Zat.forEach(t),iSo=r(Nye," \u2014 "),gG=n(Nye,"A",{href:!0});var ent=s(gG);dSo=r(ent,"SqueezeBertForMultipleChoice"),ent.forEach(t),cSo=r(Nye," (SqueezeBERT model)"),Nye.forEach(t),fSo=i(K),R2=n(K,"LI",{});var jye=s(R2);ufe=n(jye,"STRONG",{});var ont=s(ufe);mSo=r(ont,"xlm"),ont.forEach(t),gSo=r(jye," \u2014 "),hG=n(jye,"A",{href:!0});var rnt=s(hG);hSo=r(rnt,"XLMForMultipleChoice"),rnt.forEach(t),pSo=r(jye," (XLM model)"),jye.forEach(t),uSo=i(K),B2=n(K,"LI",{});var Dye=s(B2);_fe=n(Dye,"STRONG",{});var tnt=s(_fe);_So=r(tnt,"xlm-roberta"),tnt.forEach(t),bSo=r(Dye," \u2014 "),pG=n(Dye,"A",{href:!0});var ant=s(pG);vSo=r(ant,"XLMRobertaForMultipleChoice"),ant.forEach(t),FSo=r(Dye," (XLM-RoBERTa model)"),Dye.forEach(t),TSo=i(K),P2=n(K,"LI",{});var Gye=s(P2);bfe=n(Gye,"STRONG",{});var nnt=s(bfe);MSo=r(nnt,"xlm-roberta-xl"),nnt.forEach(t),ESo=r(Gye," \u2014 "),uG=n(Gye,"A",{href:!0});var snt=s(uG);CSo=r(snt,"XLMRobertaXLForMultipleChoice"),snt.forEach(t),wSo=r(Gye," (XLM-RoBERTa-XL model)"),Gye.forEach(t),ASo=i(K),I2=n(K,"LI",{});var Oye=s(I2);vfe=n(Oye,"STRONG",{});var lnt=s(vfe);ySo=r(lnt,"xlnet"),lnt.forEach(t),LSo=r(Oye," \u2014 "),_G=n(Oye,"A",{href:!0});var int=s(_G);xSo=r(int,"XLNetForMultipleChoice"),int.forEach(t),$So=r(Oye," (XLNet model)"),Oye.forEach(t),kSo=i(K),q2=n(K,"LI",{});var Vye=s(q2);Ffe=n(Vye,"STRONG",{});var dnt=s(Ffe);SSo=r(dnt,"yoso"),dnt.forEach(t),RSo=r(Vye," \u2014 "),bG=n(Vye,"A",{href:!0});var cnt=s(bG);BSo=r(cnt,"YosoForMultipleChoice"),cnt.forEach(t),PSo=r(Vye," (YOSO model)"),Vye.forEach(t),K.forEach(t),ISo=i(na),N2=n(na,"P",{});var Xye=s(N2);qSo=r(Xye,"The model is set in evaluation mode by default using "),Tfe=n(Xye,"CODE",{});var fnt=s(Tfe);NSo=r(fnt,"model.eval()"),fnt.forEach(t),jSo=r(Xye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Mfe=n(Xye,"CODE",{});var mnt=s(Mfe);DSo=r(mnt,"model.train()"),mnt.forEach(t),Xye.forEach(t),GSo=i(na),T(j2.$$.fragment,na),na.forEach(t),zs.forEach(t),BPe=i(f),Oi=n(f,"H2",{class:!0});var Nqe=s(Oi);D2=n(Nqe,"A",{id:!0,class:!0,href:!0});var gnt=s(D2);Efe=n(gnt,"SPAN",{});var hnt=s(Efe);T(Uw.$$.fragment,hnt),hnt.forEach(t),gnt.forEach(t),OSo=i(Nqe),Cfe=n(Nqe,"SPAN",{});var pnt=s(Cfe);VSo=r(pnt,"AutoModelForNextSentencePrediction"),pnt.forEach(t),Nqe.forEach(t),PPe=i(f),Po=n(f,"DIV",{class:!0});var Qs=s(Po);T(Jw.$$.fragment,Qs),XSo=i(Qs),Vi=n(Qs,"P",{});var nK=s(Vi);zSo=r(nK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),vG=n(nK,"A",{href:!0});var unt=s(vG);QSo=r(unt,"from_pretrained()"),unt.forEach(t),WSo=r(nK," class method or the "),FG=n(nK,"A",{href:!0});var _nt=s(FG);HSo=r(_nt,"from_config()"),_nt.forEach(t),USo=r(nK,` class
method.`),nK.forEach(t),JSo=i(Qs),Yw=n(Qs,"P",{});var jqe=s(Yw);YSo=r(jqe,"This class cannot be instantiated directly using "),wfe=n(jqe,"CODE",{});var bnt=s(wfe);KSo=r(bnt,"__init__()"),bnt.forEach(t),ZSo=r(jqe," (throws an error)."),jqe.forEach(t),eRo=i(Qs),it=n(Qs,"DIV",{class:!0});var nC=s(it);T(Kw.$$.fragment,nC),oRo=i(nC),Afe=n(nC,"P",{});var vnt=s(Afe);rRo=r(vnt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),vnt.forEach(t),tRo=i(nC),Xi=n(nC,"P",{});var sK=s(Xi);aRo=r(sK,`Note:
Loading a model from its configuration file does `),yfe=n(sK,"STRONG",{});var Fnt=s(yfe);nRo=r(Fnt,"not"),Fnt.forEach(t),sRo=r(sK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TG=n(sK,"A",{href:!0});var Tnt=s(TG);lRo=r(Tnt,"from_pretrained()"),Tnt.forEach(t),iRo=r(sK," to load the model weights."),sK.forEach(t),dRo=i(nC),T(G2.$$.fragment,nC),nC.forEach(t),cRo=i(Qs),oo=n(Qs,"DIV",{class:!0});var sa=s(oo);T(Zw.$$.fragment,sa),fRo=i(sa),Lfe=n(sa,"P",{});var Mnt=s(Lfe);mRo=r(Mnt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),Mnt.forEach(t),gRo=i(sa),Ra=n(sa,"P",{});var sC=s(Ra);hRo=r(sC,"The model class to instantiate is selected based on the "),xfe=n(sC,"CODE",{});var Ent=s(xfe);pRo=r(Ent,"model_type"),Ent.forEach(t),uRo=r(sC,` property of the config object (either
passed as an argument or loaded from `),$fe=n(sC,"CODE",{});var Cnt=s($fe);_Ro=r(Cnt,"pretrained_model_name_or_path"),Cnt.forEach(t),bRo=r(sC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),kfe=n(sC,"CODE",{});var wnt=s(kfe);vRo=r(wnt,"pretrained_model_name_or_path"),wnt.forEach(t),FRo=r(sC,":"),sC.forEach(t),TRo=i(sa),Yr=n(sa,"UL",{});var Ws=s(Yr);O2=n(Ws,"LI",{});var zye=s(O2);Sfe=n(zye,"STRONG",{});var Ant=s(Sfe);MRo=r(Ant,"bert"),Ant.forEach(t),ERo=r(zye," \u2014 "),MG=n(zye,"A",{href:!0});var ynt=s(MG);CRo=r(ynt,"BertForNextSentencePrediction"),ynt.forEach(t),wRo=r(zye," (BERT model)"),zye.forEach(t),ARo=i(Ws),V2=n(Ws,"LI",{});var Qye=s(V2);Rfe=n(Qye,"STRONG",{});var Lnt=s(Rfe);yRo=r(Lnt,"fnet"),Lnt.forEach(t),LRo=r(Qye," \u2014 "),EG=n(Qye,"A",{href:!0});var xnt=s(EG);xRo=r(xnt,"FNetForNextSentencePrediction"),xnt.forEach(t),$Ro=r(Qye," (FNet model)"),Qye.forEach(t),kRo=i(Ws),X2=n(Ws,"LI",{});var Wye=s(X2);Bfe=n(Wye,"STRONG",{});var $nt=s(Bfe);SRo=r($nt,"megatron-bert"),$nt.forEach(t),RRo=r(Wye," \u2014 "),CG=n(Wye,"A",{href:!0});var knt=s(CG);BRo=r(knt,"MegatronBertForNextSentencePrediction"),knt.forEach(t),PRo=r(Wye," (MegatronBert model)"),Wye.forEach(t),IRo=i(Ws),z2=n(Ws,"LI",{});var Hye=s(z2);Pfe=n(Hye,"STRONG",{});var Snt=s(Pfe);qRo=r(Snt,"mobilebert"),Snt.forEach(t),NRo=r(Hye," \u2014 "),wG=n(Hye,"A",{href:!0});var Rnt=s(wG);jRo=r(Rnt,"MobileBertForNextSentencePrediction"),Rnt.forEach(t),DRo=r(Hye," (MobileBERT model)"),Hye.forEach(t),GRo=i(Ws),Q2=n(Ws,"LI",{});var Uye=s(Q2);Ife=n(Uye,"STRONG",{});var Bnt=s(Ife);ORo=r(Bnt,"qdqbert"),Bnt.forEach(t),VRo=r(Uye," \u2014 "),AG=n(Uye,"A",{href:!0});var Pnt=s(AG);XRo=r(Pnt,"QDQBertForNextSentencePrediction"),Pnt.forEach(t),zRo=r(Uye," (QDQBert model)"),Uye.forEach(t),Ws.forEach(t),QRo=i(sa),W2=n(sa,"P",{});var Jye=s(W2);WRo=r(Jye,"The model is set in evaluation mode by default using "),qfe=n(Jye,"CODE",{});var Int=s(qfe);HRo=r(Int,"model.eval()"),Int.forEach(t),URo=r(Jye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Nfe=n(Jye,"CODE",{});var qnt=s(Nfe);JRo=r(qnt,"model.train()"),qnt.forEach(t),Jye.forEach(t),YRo=i(sa),T(H2.$$.fragment,sa),sa.forEach(t),Qs.forEach(t),IPe=i(f),zi=n(f,"H2",{class:!0});var Dqe=s(zi);U2=n(Dqe,"A",{id:!0,class:!0,href:!0});var Nnt=s(U2);jfe=n(Nnt,"SPAN",{});var jnt=s(jfe);T(eA.$$.fragment,jnt),jnt.forEach(t),Nnt.forEach(t),KRo=i(Dqe),Dfe=n(Dqe,"SPAN",{});var Dnt=s(Dfe);ZRo=r(Dnt,"AutoModelForTokenClassification"),Dnt.forEach(t),Dqe.forEach(t),qPe=i(f),Io=n(f,"DIV",{class:!0});var Hs=s(Io);T(oA.$$.fragment,Hs),eBo=i(Hs),Qi=n(Hs,"P",{});var lK=s(Qi);oBo=r(lK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),yG=n(lK,"A",{href:!0});var Gnt=s(yG);rBo=r(Gnt,"from_pretrained()"),Gnt.forEach(t),tBo=r(lK," class method or the "),LG=n(lK,"A",{href:!0});var Ont=s(LG);aBo=r(Ont,"from_config()"),Ont.forEach(t),nBo=r(lK,` class
method.`),lK.forEach(t),sBo=i(Hs),rA=n(Hs,"P",{});var Gqe=s(rA);lBo=r(Gqe,"This class cannot be instantiated directly using "),Gfe=n(Gqe,"CODE",{});var Vnt=s(Gfe);iBo=r(Vnt,"__init__()"),Vnt.forEach(t),dBo=r(Gqe," (throws an error)."),Gqe.forEach(t),cBo=i(Hs),dt=n(Hs,"DIV",{class:!0});var lC=s(dt);T(tA.$$.fragment,lC),fBo=i(lC),Ofe=n(lC,"P",{});var Xnt=s(Ofe);mBo=r(Xnt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Xnt.forEach(t),gBo=i(lC),Wi=n(lC,"P",{});var iK=s(Wi);hBo=r(iK,`Note:
Loading a model from its configuration file does `),Vfe=n(iK,"STRONG",{});var znt=s(Vfe);pBo=r(znt,"not"),znt.forEach(t),uBo=r(iK,` load the model weights. It only affects the
model\u2019s configuration. Use `),xG=n(iK,"A",{href:!0});var Qnt=s(xG);_Bo=r(Qnt,"from_pretrained()"),Qnt.forEach(t),bBo=r(iK," to load the model weights."),iK.forEach(t),vBo=i(lC),T(J2.$$.fragment,lC),lC.forEach(t),FBo=i(Hs),ro=n(Hs,"DIV",{class:!0});var la=s(ro);T(aA.$$.fragment,la),TBo=i(la),Xfe=n(la,"P",{});var Wnt=s(Xfe);MBo=r(Wnt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),Wnt.forEach(t),EBo=i(la),Ba=n(la,"P",{});var iC=s(Ba);CBo=r(iC,"The model class to instantiate is selected based on the "),zfe=n(iC,"CODE",{});var Hnt=s(zfe);wBo=r(Hnt,"model_type"),Hnt.forEach(t),ABo=r(iC,` property of the config object (either
passed as an argument or loaded from `),Qfe=n(iC,"CODE",{});var Unt=s(Qfe);yBo=r(Unt,"pretrained_model_name_or_path"),Unt.forEach(t),LBo=r(iC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wfe=n(iC,"CODE",{});var Jnt=s(Wfe);xBo=r(Jnt,"pretrained_model_name_or_path"),Jnt.forEach(t),$Bo=r(iC,":"),iC.forEach(t),kBo=i(la),U=n(la,"UL",{});var J=s(U);Y2=n(J,"LI",{});var Yye=s(Y2);Hfe=n(Yye,"STRONG",{});var Ynt=s(Hfe);SBo=r(Ynt,"albert"),Ynt.forEach(t),RBo=r(Yye," \u2014 "),$G=n(Yye,"A",{href:!0});var Knt=s($G);BBo=r(Knt,"AlbertForTokenClassification"),Knt.forEach(t),PBo=r(Yye," (ALBERT model)"),Yye.forEach(t),IBo=i(J),K2=n(J,"LI",{});var Kye=s(K2);Ufe=n(Kye,"STRONG",{});var Znt=s(Ufe);qBo=r(Znt,"bert"),Znt.forEach(t),NBo=r(Kye," \u2014 "),kG=n(Kye,"A",{href:!0});var est=s(kG);jBo=r(est,"BertForTokenClassification"),est.forEach(t),DBo=r(Kye," (BERT model)"),Kye.forEach(t),GBo=i(J),Z2=n(J,"LI",{});var Zye=s(Z2);Jfe=n(Zye,"STRONG",{});var ost=s(Jfe);OBo=r(ost,"big_bird"),ost.forEach(t),VBo=r(Zye," \u2014 "),SG=n(Zye,"A",{href:!0});var rst=s(SG);XBo=r(rst,"BigBirdForTokenClassification"),rst.forEach(t),zBo=r(Zye," (BigBird model)"),Zye.forEach(t),QBo=i(J),ev=n(J,"LI",{});var eLe=s(ev);Yfe=n(eLe,"STRONG",{});var tst=s(Yfe);WBo=r(tst,"camembert"),tst.forEach(t),HBo=r(eLe," \u2014 "),RG=n(eLe,"A",{href:!0});var ast=s(RG);UBo=r(ast,"CamembertForTokenClassification"),ast.forEach(t),JBo=r(eLe," (CamemBERT model)"),eLe.forEach(t),YBo=i(J),ov=n(J,"LI",{});var oLe=s(ov);Kfe=n(oLe,"STRONG",{});var nst=s(Kfe);KBo=r(nst,"canine"),nst.forEach(t),ZBo=r(oLe," \u2014 "),BG=n(oLe,"A",{href:!0});var sst=s(BG);ePo=r(sst,"CanineForTokenClassification"),sst.forEach(t),oPo=r(oLe," (Canine model)"),oLe.forEach(t),rPo=i(J),rv=n(J,"LI",{});var rLe=s(rv);Zfe=n(rLe,"STRONG",{});var lst=s(Zfe);tPo=r(lst,"convbert"),lst.forEach(t),aPo=r(rLe," \u2014 "),PG=n(rLe,"A",{href:!0});var ist=s(PG);nPo=r(ist,"ConvBertForTokenClassification"),ist.forEach(t),sPo=r(rLe," (ConvBERT model)"),rLe.forEach(t),lPo=i(J),tv=n(J,"LI",{});var tLe=s(tv);eme=n(tLe,"STRONG",{});var dst=s(eme);iPo=r(dst,"data2vec-text"),dst.forEach(t),dPo=r(tLe," \u2014 "),IG=n(tLe,"A",{href:!0});var cst=s(IG);cPo=r(cst,"Data2VecTextForTokenClassification"),cst.forEach(t),fPo=r(tLe," (Data2VecText model)"),tLe.forEach(t),mPo=i(J),av=n(J,"LI",{});var aLe=s(av);ome=n(aLe,"STRONG",{});var fst=s(ome);gPo=r(fst,"deberta"),fst.forEach(t),hPo=r(aLe," \u2014 "),qG=n(aLe,"A",{href:!0});var mst=s(qG);pPo=r(mst,"DebertaForTokenClassification"),mst.forEach(t),uPo=r(aLe," (DeBERTa model)"),aLe.forEach(t),_Po=i(J),nv=n(J,"LI",{});var nLe=s(nv);rme=n(nLe,"STRONG",{});var gst=s(rme);bPo=r(gst,"deberta-v2"),gst.forEach(t),vPo=r(nLe," \u2014 "),NG=n(nLe,"A",{href:!0});var hst=s(NG);FPo=r(hst,"DebertaV2ForTokenClassification"),hst.forEach(t),TPo=r(nLe," (DeBERTa-v2 model)"),nLe.forEach(t),MPo=i(J),sv=n(J,"LI",{});var sLe=s(sv);tme=n(sLe,"STRONG",{});var pst=s(tme);EPo=r(pst,"distilbert"),pst.forEach(t),CPo=r(sLe," \u2014 "),jG=n(sLe,"A",{href:!0});var ust=s(jG);wPo=r(ust,"DistilBertForTokenClassification"),ust.forEach(t),APo=r(sLe," (DistilBERT model)"),sLe.forEach(t),yPo=i(J),lv=n(J,"LI",{});var lLe=s(lv);ame=n(lLe,"STRONG",{});var _st=s(ame);LPo=r(_st,"electra"),_st.forEach(t),xPo=r(lLe," \u2014 "),DG=n(lLe,"A",{href:!0});var bst=s(DG);$Po=r(bst,"ElectraForTokenClassification"),bst.forEach(t),kPo=r(lLe," (ELECTRA model)"),lLe.forEach(t),SPo=i(J),iv=n(J,"LI",{});var iLe=s(iv);nme=n(iLe,"STRONG",{});var vst=s(nme);RPo=r(vst,"flaubert"),vst.forEach(t),BPo=r(iLe," \u2014 "),GG=n(iLe,"A",{href:!0});var Fst=s(GG);PPo=r(Fst,"FlaubertForTokenClassification"),Fst.forEach(t),IPo=r(iLe," (FlauBERT model)"),iLe.forEach(t),qPo=i(J),dv=n(J,"LI",{});var dLe=s(dv);sme=n(dLe,"STRONG",{});var Tst=s(sme);NPo=r(Tst,"fnet"),Tst.forEach(t),jPo=r(dLe," \u2014 "),OG=n(dLe,"A",{href:!0});var Mst=s(OG);DPo=r(Mst,"FNetForTokenClassification"),Mst.forEach(t),GPo=r(dLe," (FNet model)"),dLe.forEach(t),OPo=i(J),cv=n(J,"LI",{});var cLe=s(cv);lme=n(cLe,"STRONG",{});var Est=s(lme);VPo=r(Est,"funnel"),Est.forEach(t),XPo=r(cLe," \u2014 "),VG=n(cLe,"A",{href:!0});var Cst=s(VG);zPo=r(Cst,"FunnelForTokenClassification"),Cst.forEach(t),QPo=r(cLe," (Funnel Transformer model)"),cLe.forEach(t),WPo=i(J),fv=n(J,"LI",{});var fLe=s(fv);ime=n(fLe,"STRONG",{});var wst=s(ime);HPo=r(wst,"gpt2"),wst.forEach(t),UPo=r(fLe," \u2014 "),XG=n(fLe,"A",{href:!0});var Ast=s(XG);JPo=r(Ast,"GPT2ForTokenClassification"),Ast.forEach(t),YPo=r(fLe," (OpenAI GPT-2 model)"),fLe.forEach(t),KPo=i(J),mv=n(J,"LI",{});var mLe=s(mv);dme=n(mLe,"STRONG",{});var yst=s(dme);ZPo=r(yst,"ibert"),yst.forEach(t),eIo=r(mLe," \u2014 "),zG=n(mLe,"A",{href:!0});var Lst=s(zG);oIo=r(Lst,"IBertForTokenClassification"),Lst.forEach(t),rIo=r(mLe," (I-BERT model)"),mLe.forEach(t),tIo=i(J),gv=n(J,"LI",{});var gLe=s(gv);cme=n(gLe,"STRONG",{});var xst=s(cme);aIo=r(xst,"layoutlm"),xst.forEach(t),nIo=r(gLe," \u2014 "),QG=n(gLe,"A",{href:!0});var $st=s(QG);sIo=r($st,"LayoutLMForTokenClassification"),$st.forEach(t),lIo=r(gLe," (LayoutLM model)"),gLe.forEach(t),iIo=i(J),hv=n(J,"LI",{});var hLe=s(hv);fme=n(hLe,"STRONG",{});var kst=s(fme);dIo=r(kst,"layoutlmv2"),kst.forEach(t),cIo=r(hLe," \u2014 "),WG=n(hLe,"A",{href:!0});var Sst=s(WG);fIo=r(Sst,"LayoutLMv2ForTokenClassification"),Sst.forEach(t),mIo=r(hLe," (LayoutLMv2 model)"),hLe.forEach(t),gIo=i(J),pv=n(J,"LI",{});var pLe=s(pv);mme=n(pLe,"STRONG",{});var Rst=s(mme);hIo=r(Rst,"longformer"),Rst.forEach(t),pIo=r(pLe," \u2014 "),HG=n(pLe,"A",{href:!0});var Bst=s(HG);uIo=r(Bst,"LongformerForTokenClassification"),Bst.forEach(t),_Io=r(pLe," (Longformer model)"),pLe.forEach(t),bIo=i(J),uv=n(J,"LI",{});var uLe=s(uv);gme=n(uLe,"STRONG",{});var Pst=s(gme);vIo=r(Pst,"megatron-bert"),Pst.forEach(t),FIo=r(uLe," \u2014 "),UG=n(uLe,"A",{href:!0});var Ist=s(UG);TIo=r(Ist,"MegatronBertForTokenClassification"),Ist.forEach(t),MIo=r(uLe," (MegatronBert model)"),uLe.forEach(t),EIo=i(J),_v=n(J,"LI",{});var _Le=s(_v);hme=n(_Le,"STRONG",{});var qst=s(hme);CIo=r(qst,"mobilebert"),qst.forEach(t),wIo=r(_Le," \u2014 "),JG=n(_Le,"A",{href:!0});var Nst=s(JG);AIo=r(Nst,"MobileBertForTokenClassification"),Nst.forEach(t),yIo=r(_Le," (MobileBERT model)"),_Le.forEach(t),LIo=i(J),bv=n(J,"LI",{});var bLe=s(bv);pme=n(bLe,"STRONG",{});var jst=s(pme);xIo=r(jst,"mpnet"),jst.forEach(t),$Io=r(bLe," \u2014 "),YG=n(bLe,"A",{href:!0});var Dst=s(YG);kIo=r(Dst,"MPNetForTokenClassification"),Dst.forEach(t),SIo=r(bLe," (MPNet model)"),bLe.forEach(t),RIo=i(J),vv=n(J,"LI",{});var vLe=s(vv);ume=n(vLe,"STRONG",{});var Gst=s(ume);BIo=r(Gst,"nystromformer"),Gst.forEach(t),PIo=r(vLe," \u2014 "),KG=n(vLe,"A",{href:!0});var Ost=s(KG);IIo=r(Ost,"NystromformerForTokenClassification"),Ost.forEach(t),qIo=r(vLe," (Nystromformer model)"),vLe.forEach(t),NIo=i(J),Fv=n(J,"LI",{});var FLe=s(Fv);_me=n(FLe,"STRONG",{});var Vst=s(_me);jIo=r(Vst,"qdqbert"),Vst.forEach(t),DIo=r(FLe," \u2014 "),ZG=n(FLe,"A",{href:!0});var Xst=s(ZG);GIo=r(Xst,"QDQBertForTokenClassification"),Xst.forEach(t),OIo=r(FLe," (QDQBert model)"),FLe.forEach(t),VIo=i(J),Tv=n(J,"LI",{});var TLe=s(Tv);bme=n(TLe,"STRONG",{});var zst=s(bme);XIo=r(zst,"rembert"),zst.forEach(t),zIo=r(TLe," \u2014 "),eO=n(TLe,"A",{href:!0});var Qst=s(eO);QIo=r(Qst,"RemBertForTokenClassification"),Qst.forEach(t),WIo=r(TLe," (RemBERT model)"),TLe.forEach(t),HIo=i(J),Mv=n(J,"LI",{});var MLe=s(Mv);vme=n(MLe,"STRONG",{});var Wst=s(vme);UIo=r(Wst,"roberta"),Wst.forEach(t),JIo=r(MLe," \u2014 "),oO=n(MLe,"A",{href:!0});var Hst=s(oO);YIo=r(Hst,"RobertaForTokenClassification"),Hst.forEach(t),KIo=r(MLe," (RoBERTa model)"),MLe.forEach(t),ZIo=i(J),Ev=n(J,"LI",{});var ELe=s(Ev);Fme=n(ELe,"STRONG",{});var Ust=s(Fme);eqo=r(Ust,"roformer"),Ust.forEach(t),oqo=r(ELe," \u2014 "),rO=n(ELe,"A",{href:!0});var Jst=s(rO);rqo=r(Jst,"RoFormerForTokenClassification"),Jst.forEach(t),tqo=r(ELe," (RoFormer model)"),ELe.forEach(t),aqo=i(J),Cv=n(J,"LI",{});var CLe=s(Cv);Tme=n(CLe,"STRONG",{});var Yst=s(Tme);nqo=r(Yst,"squeezebert"),Yst.forEach(t),sqo=r(CLe," \u2014 "),tO=n(CLe,"A",{href:!0});var Kst=s(tO);lqo=r(Kst,"SqueezeBertForTokenClassification"),Kst.forEach(t),iqo=r(CLe," (SqueezeBERT model)"),CLe.forEach(t),dqo=i(J),wv=n(J,"LI",{});var wLe=s(wv);Mme=n(wLe,"STRONG",{});var Zst=s(Mme);cqo=r(Zst,"xlm"),Zst.forEach(t),fqo=r(wLe," \u2014 "),aO=n(wLe,"A",{href:!0});var elt=s(aO);mqo=r(elt,"XLMForTokenClassification"),elt.forEach(t),gqo=r(wLe," (XLM model)"),wLe.forEach(t),hqo=i(J),Av=n(J,"LI",{});var ALe=s(Av);Eme=n(ALe,"STRONG",{});var olt=s(Eme);pqo=r(olt,"xlm-roberta"),olt.forEach(t),uqo=r(ALe," \u2014 "),nO=n(ALe,"A",{href:!0});var rlt=s(nO);_qo=r(rlt,"XLMRobertaForTokenClassification"),rlt.forEach(t),bqo=r(ALe," (XLM-RoBERTa model)"),ALe.forEach(t),vqo=i(J),yv=n(J,"LI",{});var yLe=s(yv);Cme=n(yLe,"STRONG",{});var tlt=s(Cme);Fqo=r(tlt,"xlm-roberta-xl"),tlt.forEach(t),Tqo=r(yLe," \u2014 "),sO=n(yLe,"A",{href:!0});var alt=s(sO);Mqo=r(alt,"XLMRobertaXLForTokenClassification"),alt.forEach(t),Eqo=r(yLe," (XLM-RoBERTa-XL model)"),yLe.forEach(t),Cqo=i(J),Lv=n(J,"LI",{});var LLe=s(Lv);wme=n(LLe,"STRONG",{});var nlt=s(wme);wqo=r(nlt,"xlnet"),nlt.forEach(t),Aqo=r(LLe," \u2014 "),lO=n(LLe,"A",{href:!0});var slt=s(lO);yqo=r(slt,"XLNetForTokenClassification"),slt.forEach(t),Lqo=r(LLe," (XLNet model)"),LLe.forEach(t),xqo=i(J),xv=n(J,"LI",{});var xLe=s(xv);Ame=n(xLe,"STRONG",{});var llt=s(Ame);$qo=r(llt,"yoso"),llt.forEach(t),kqo=r(xLe," \u2014 "),iO=n(xLe,"A",{href:!0});var ilt=s(iO);Sqo=r(ilt,"YosoForTokenClassification"),ilt.forEach(t),Rqo=r(xLe," (YOSO model)"),xLe.forEach(t),J.forEach(t),Bqo=i(la),$v=n(la,"P",{});var $Le=s($v);Pqo=r($Le,"The model is set in evaluation mode by default using "),yme=n($Le,"CODE",{});var dlt=s(yme);Iqo=r(dlt,"model.eval()"),dlt.forEach(t),qqo=r($Le,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lme=n($Le,"CODE",{});var clt=s(Lme);Nqo=r(clt,"model.train()"),clt.forEach(t),$Le.forEach(t),jqo=i(la),T(kv.$$.fragment,la),la.forEach(t),Hs.forEach(t),NPe=i(f),Hi=n(f,"H2",{class:!0});var Oqe=s(Hi);Sv=n(Oqe,"A",{id:!0,class:!0,href:!0});var flt=s(Sv);xme=n(flt,"SPAN",{});var mlt=s(xme);T(nA.$$.fragment,mlt),mlt.forEach(t),flt.forEach(t),Dqo=i(Oqe),$me=n(Oqe,"SPAN",{});var glt=s($me);Gqo=r(glt,"AutoModelForQuestionAnswering"),glt.forEach(t),Oqe.forEach(t),jPe=i(f),qo=n(f,"DIV",{class:!0});var Us=s(qo);T(sA.$$.fragment,Us),Oqo=i(Us),Ui=n(Us,"P",{});var dK=s(Ui);Vqo=r(dK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),dO=n(dK,"A",{href:!0});var hlt=s(dO);Xqo=r(hlt,"from_pretrained()"),hlt.forEach(t),zqo=r(dK," class method or the "),cO=n(dK,"A",{href:!0});var plt=s(cO);Qqo=r(plt,"from_config()"),plt.forEach(t),Wqo=r(dK,` class
method.`),dK.forEach(t),Hqo=i(Us),lA=n(Us,"P",{});var Vqe=s(lA);Uqo=r(Vqe,"This class cannot be instantiated directly using "),kme=n(Vqe,"CODE",{});var ult=s(kme);Jqo=r(ult,"__init__()"),ult.forEach(t),Yqo=r(Vqe," (throws an error)."),Vqe.forEach(t),Kqo=i(Us),ct=n(Us,"DIV",{class:!0});var dC=s(ct);T(iA.$$.fragment,dC),Zqo=i(dC),Sme=n(dC,"P",{});var _lt=s(Sme);eNo=r(_lt,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),_lt.forEach(t),oNo=i(dC),Ji=n(dC,"P",{});var cK=s(Ji);rNo=r(cK,`Note:
Loading a model from its configuration file does `),Rme=n(cK,"STRONG",{});var blt=s(Rme);tNo=r(blt,"not"),blt.forEach(t),aNo=r(cK,` load the model weights. It only affects the
model\u2019s configuration. Use `),fO=n(cK,"A",{href:!0});var vlt=s(fO);nNo=r(vlt,"from_pretrained()"),vlt.forEach(t),sNo=r(cK," to load the model weights."),cK.forEach(t),lNo=i(dC),T(Rv.$$.fragment,dC),dC.forEach(t),iNo=i(Us),to=n(Us,"DIV",{class:!0});var ia=s(to);T(dA.$$.fragment,ia),dNo=i(ia),Bme=n(ia,"P",{});var Flt=s(Bme);cNo=r(Flt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Flt.forEach(t),fNo=i(ia),Pa=n(ia,"P",{});var cC=s(Pa);mNo=r(cC,"The model class to instantiate is selected based on the "),Pme=n(cC,"CODE",{});var Tlt=s(Pme);gNo=r(Tlt,"model_type"),Tlt.forEach(t),hNo=r(cC,` property of the config object (either
passed as an argument or loaded from `),Ime=n(cC,"CODE",{});var Mlt=s(Ime);pNo=r(Mlt,"pretrained_model_name_or_path"),Mlt.forEach(t),uNo=r(cC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qme=n(cC,"CODE",{});var Elt=s(qme);_No=r(Elt,"pretrained_model_name_or_path"),Elt.forEach(t),bNo=r(cC,":"),cC.forEach(t),vNo=i(ia),O=n(ia,"UL",{});var X=s(O);Bv=n(X,"LI",{});var kLe=s(Bv);Nme=n(kLe,"STRONG",{});var Clt=s(Nme);FNo=r(Clt,"albert"),Clt.forEach(t),TNo=r(kLe," \u2014 "),mO=n(kLe,"A",{href:!0});var wlt=s(mO);MNo=r(wlt,"AlbertForQuestionAnswering"),wlt.forEach(t),ENo=r(kLe," (ALBERT model)"),kLe.forEach(t),CNo=i(X),Pv=n(X,"LI",{});var SLe=s(Pv);jme=n(SLe,"STRONG",{});var Alt=s(jme);wNo=r(Alt,"bart"),Alt.forEach(t),ANo=r(SLe," \u2014 "),gO=n(SLe,"A",{href:!0});var ylt=s(gO);yNo=r(ylt,"BartForQuestionAnswering"),ylt.forEach(t),LNo=r(SLe," (BART model)"),SLe.forEach(t),xNo=i(X),Iv=n(X,"LI",{});var RLe=s(Iv);Dme=n(RLe,"STRONG",{});var Llt=s(Dme);$No=r(Llt,"bert"),Llt.forEach(t),kNo=r(RLe," \u2014 "),hO=n(RLe,"A",{href:!0});var xlt=s(hO);SNo=r(xlt,"BertForQuestionAnswering"),xlt.forEach(t),RNo=r(RLe," (BERT model)"),RLe.forEach(t),BNo=i(X),qv=n(X,"LI",{});var BLe=s(qv);Gme=n(BLe,"STRONG",{});var $lt=s(Gme);PNo=r($lt,"big_bird"),$lt.forEach(t),INo=r(BLe," \u2014 "),pO=n(BLe,"A",{href:!0});var klt=s(pO);qNo=r(klt,"BigBirdForQuestionAnswering"),klt.forEach(t),NNo=r(BLe," (BigBird model)"),BLe.forEach(t),jNo=i(X),Nv=n(X,"LI",{});var PLe=s(Nv);Ome=n(PLe,"STRONG",{});var Slt=s(Ome);DNo=r(Slt,"bigbird_pegasus"),Slt.forEach(t),GNo=r(PLe," \u2014 "),uO=n(PLe,"A",{href:!0});var Rlt=s(uO);ONo=r(Rlt,"BigBirdPegasusForQuestionAnswering"),Rlt.forEach(t),VNo=r(PLe," (BigBirdPegasus model)"),PLe.forEach(t),XNo=i(X),jv=n(X,"LI",{});var ILe=s(jv);Vme=n(ILe,"STRONG",{});var Blt=s(Vme);zNo=r(Blt,"camembert"),Blt.forEach(t),QNo=r(ILe," \u2014 "),_O=n(ILe,"A",{href:!0});var Plt=s(_O);WNo=r(Plt,"CamembertForQuestionAnswering"),Plt.forEach(t),HNo=r(ILe," (CamemBERT model)"),ILe.forEach(t),UNo=i(X),Dv=n(X,"LI",{});var qLe=s(Dv);Xme=n(qLe,"STRONG",{});var Ilt=s(Xme);JNo=r(Ilt,"canine"),Ilt.forEach(t),YNo=r(qLe," \u2014 "),bO=n(qLe,"A",{href:!0});var qlt=s(bO);KNo=r(qlt,"CanineForQuestionAnswering"),qlt.forEach(t),ZNo=r(qLe," (Canine model)"),qLe.forEach(t),ejo=i(X),Gv=n(X,"LI",{});var NLe=s(Gv);zme=n(NLe,"STRONG",{});var Nlt=s(zme);ojo=r(Nlt,"convbert"),Nlt.forEach(t),rjo=r(NLe," \u2014 "),vO=n(NLe,"A",{href:!0});var jlt=s(vO);tjo=r(jlt,"ConvBertForQuestionAnswering"),jlt.forEach(t),ajo=r(NLe," (ConvBERT model)"),NLe.forEach(t),njo=i(X),Ov=n(X,"LI",{});var jLe=s(Ov);Qme=n(jLe,"STRONG",{});var Dlt=s(Qme);sjo=r(Dlt,"data2vec-text"),Dlt.forEach(t),ljo=r(jLe," \u2014 "),FO=n(jLe,"A",{href:!0});var Glt=s(FO);ijo=r(Glt,"Data2VecTextForQuestionAnswering"),Glt.forEach(t),djo=r(jLe," (Data2VecText model)"),jLe.forEach(t),cjo=i(X),Vv=n(X,"LI",{});var DLe=s(Vv);Wme=n(DLe,"STRONG",{});var Olt=s(Wme);fjo=r(Olt,"deberta"),Olt.forEach(t),mjo=r(DLe," \u2014 "),TO=n(DLe,"A",{href:!0});var Vlt=s(TO);gjo=r(Vlt,"DebertaForQuestionAnswering"),Vlt.forEach(t),hjo=r(DLe," (DeBERTa model)"),DLe.forEach(t),pjo=i(X),Xv=n(X,"LI",{});var GLe=s(Xv);Hme=n(GLe,"STRONG",{});var Xlt=s(Hme);ujo=r(Xlt,"deberta-v2"),Xlt.forEach(t),_jo=r(GLe," \u2014 "),MO=n(GLe,"A",{href:!0});var zlt=s(MO);bjo=r(zlt,"DebertaV2ForQuestionAnswering"),zlt.forEach(t),vjo=r(GLe," (DeBERTa-v2 model)"),GLe.forEach(t),Fjo=i(X),zv=n(X,"LI",{});var OLe=s(zv);Ume=n(OLe,"STRONG",{});var Qlt=s(Ume);Tjo=r(Qlt,"distilbert"),Qlt.forEach(t),Mjo=r(OLe," \u2014 "),EO=n(OLe,"A",{href:!0});var Wlt=s(EO);Ejo=r(Wlt,"DistilBertForQuestionAnswering"),Wlt.forEach(t),Cjo=r(OLe," (DistilBERT model)"),OLe.forEach(t),wjo=i(X),Qv=n(X,"LI",{});var VLe=s(Qv);Jme=n(VLe,"STRONG",{});var Hlt=s(Jme);Ajo=r(Hlt,"electra"),Hlt.forEach(t),yjo=r(VLe," \u2014 "),CO=n(VLe,"A",{href:!0});var Ult=s(CO);Ljo=r(Ult,"ElectraForQuestionAnswering"),Ult.forEach(t),xjo=r(VLe," (ELECTRA model)"),VLe.forEach(t),$jo=i(X),Wv=n(X,"LI",{});var XLe=s(Wv);Yme=n(XLe,"STRONG",{});var Jlt=s(Yme);kjo=r(Jlt,"flaubert"),Jlt.forEach(t),Sjo=r(XLe," \u2014 "),wO=n(XLe,"A",{href:!0});var Ylt=s(wO);Rjo=r(Ylt,"FlaubertForQuestionAnsweringSimple"),Ylt.forEach(t),Bjo=r(XLe," (FlauBERT model)"),XLe.forEach(t),Pjo=i(X),Hv=n(X,"LI",{});var zLe=s(Hv);Kme=n(zLe,"STRONG",{});var Klt=s(Kme);Ijo=r(Klt,"fnet"),Klt.forEach(t),qjo=r(zLe," \u2014 "),AO=n(zLe,"A",{href:!0});var Zlt=s(AO);Njo=r(Zlt,"FNetForQuestionAnswering"),Zlt.forEach(t),jjo=r(zLe," (FNet model)"),zLe.forEach(t),Djo=i(X),Uv=n(X,"LI",{});var QLe=s(Uv);Zme=n(QLe,"STRONG",{});var eit=s(Zme);Gjo=r(eit,"funnel"),eit.forEach(t),Ojo=r(QLe," \u2014 "),yO=n(QLe,"A",{href:!0});var oit=s(yO);Vjo=r(oit,"FunnelForQuestionAnswering"),oit.forEach(t),Xjo=r(QLe," (Funnel Transformer model)"),QLe.forEach(t),zjo=i(X),Jv=n(X,"LI",{});var WLe=s(Jv);ege=n(WLe,"STRONG",{});var rit=s(ege);Qjo=r(rit,"gptj"),rit.forEach(t),Wjo=r(WLe," \u2014 "),LO=n(WLe,"A",{href:!0});var tit=s(LO);Hjo=r(tit,"GPTJForQuestionAnswering"),tit.forEach(t),Ujo=r(WLe," (GPT-J model)"),WLe.forEach(t),Jjo=i(X),Yv=n(X,"LI",{});var HLe=s(Yv);oge=n(HLe,"STRONG",{});var ait=s(oge);Yjo=r(ait,"ibert"),ait.forEach(t),Kjo=r(HLe," \u2014 "),xO=n(HLe,"A",{href:!0});var nit=s(xO);Zjo=r(nit,"IBertForQuestionAnswering"),nit.forEach(t),eDo=r(HLe," (I-BERT model)"),HLe.forEach(t),oDo=i(X),Kv=n(X,"LI",{});var ULe=s(Kv);rge=n(ULe,"STRONG",{});var sit=s(rge);rDo=r(sit,"layoutlmv2"),sit.forEach(t),tDo=r(ULe," \u2014 "),$O=n(ULe,"A",{href:!0});var lit=s($O);aDo=r(lit,"LayoutLMv2ForQuestionAnswering"),lit.forEach(t),nDo=r(ULe," (LayoutLMv2 model)"),ULe.forEach(t),sDo=i(X),Zv=n(X,"LI",{});var JLe=s(Zv);tge=n(JLe,"STRONG",{});var iit=s(tge);lDo=r(iit,"led"),iit.forEach(t),iDo=r(JLe," \u2014 "),kO=n(JLe,"A",{href:!0});var dit=s(kO);dDo=r(dit,"LEDForQuestionAnswering"),dit.forEach(t),cDo=r(JLe," (LED model)"),JLe.forEach(t),fDo=i(X),eF=n(X,"LI",{});var YLe=s(eF);age=n(YLe,"STRONG",{});var cit=s(age);mDo=r(cit,"longformer"),cit.forEach(t),gDo=r(YLe," \u2014 "),SO=n(YLe,"A",{href:!0});var fit=s(SO);hDo=r(fit,"LongformerForQuestionAnswering"),fit.forEach(t),pDo=r(YLe," (Longformer model)"),YLe.forEach(t),uDo=i(X),oF=n(X,"LI",{});var KLe=s(oF);nge=n(KLe,"STRONG",{});var mit=s(nge);_Do=r(mit,"lxmert"),mit.forEach(t),bDo=r(KLe," \u2014 "),RO=n(KLe,"A",{href:!0});var git=s(RO);vDo=r(git,"LxmertForQuestionAnswering"),git.forEach(t),FDo=r(KLe," (LXMERT model)"),KLe.forEach(t),TDo=i(X),rF=n(X,"LI",{});var ZLe=s(rF);sge=n(ZLe,"STRONG",{});var hit=s(sge);MDo=r(hit,"mbart"),hit.forEach(t),EDo=r(ZLe," \u2014 "),BO=n(ZLe,"A",{href:!0});var pit=s(BO);CDo=r(pit,"MBartForQuestionAnswering"),pit.forEach(t),wDo=r(ZLe," (mBART model)"),ZLe.forEach(t),ADo=i(X),tF=n(X,"LI",{});var e8e=s(tF);lge=n(e8e,"STRONG",{});var uit=s(lge);yDo=r(uit,"megatron-bert"),uit.forEach(t),LDo=r(e8e," \u2014 "),PO=n(e8e,"A",{href:!0});var _it=s(PO);xDo=r(_it,"MegatronBertForQuestionAnswering"),_it.forEach(t),$Do=r(e8e," (MegatronBert model)"),e8e.forEach(t),kDo=i(X),aF=n(X,"LI",{});var o8e=s(aF);ige=n(o8e,"STRONG",{});var bit=s(ige);SDo=r(bit,"mobilebert"),bit.forEach(t),RDo=r(o8e," \u2014 "),IO=n(o8e,"A",{href:!0});var vit=s(IO);BDo=r(vit,"MobileBertForQuestionAnswering"),vit.forEach(t),PDo=r(o8e," (MobileBERT model)"),o8e.forEach(t),IDo=i(X),nF=n(X,"LI",{});var r8e=s(nF);dge=n(r8e,"STRONG",{});var Fit=s(dge);qDo=r(Fit,"mpnet"),Fit.forEach(t),NDo=r(r8e," \u2014 "),qO=n(r8e,"A",{href:!0});var Tit=s(qO);jDo=r(Tit,"MPNetForQuestionAnswering"),Tit.forEach(t),DDo=r(r8e," (MPNet model)"),r8e.forEach(t),GDo=i(X),sF=n(X,"LI",{});var t8e=s(sF);cge=n(t8e,"STRONG",{});var Mit=s(cge);ODo=r(Mit,"nystromformer"),Mit.forEach(t),VDo=r(t8e," \u2014 "),NO=n(t8e,"A",{href:!0});var Eit=s(NO);XDo=r(Eit,"NystromformerForQuestionAnswering"),Eit.forEach(t),zDo=r(t8e," (Nystromformer model)"),t8e.forEach(t),QDo=i(X),lF=n(X,"LI",{});var a8e=s(lF);fge=n(a8e,"STRONG",{});var Cit=s(fge);WDo=r(Cit,"qdqbert"),Cit.forEach(t),HDo=r(a8e," \u2014 "),jO=n(a8e,"A",{href:!0});var wit=s(jO);UDo=r(wit,"QDQBertForQuestionAnswering"),wit.forEach(t),JDo=r(a8e," (QDQBert model)"),a8e.forEach(t),YDo=i(X),iF=n(X,"LI",{});var n8e=s(iF);mge=n(n8e,"STRONG",{});var Ait=s(mge);KDo=r(Ait,"reformer"),Ait.forEach(t),ZDo=r(n8e," \u2014 "),DO=n(n8e,"A",{href:!0});var yit=s(DO);eGo=r(yit,"ReformerForQuestionAnswering"),yit.forEach(t),oGo=r(n8e," (Reformer model)"),n8e.forEach(t),rGo=i(X),dF=n(X,"LI",{});var s8e=s(dF);gge=n(s8e,"STRONG",{});var Lit=s(gge);tGo=r(Lit,"rembert"),Lit.forEach(t),aGo=r(s8e," \u2014 "),GO=n(s8e,"A",{href:!0});var xit=s(GO);nGo=r(xit,"RemBertForQuestionAnswering"),xit.forEach(t),sGo=r(s8e," (RemBERT model)"),s8e.forEach(t),lGo=i(X),cF=n(X,"LI",{});var l8e=s(cF);hge=n(l8e,"STRONG",{});var $it=s(hge);iGo=r($it,"roberta"),$it.forEach(t),dGo=r(l8e," \u2014 "),OO=n(l8e,"A",{href:!0});var kit=s(OO);cGo=r(kit,"RobertaForQuestionAnswering"),kit.forEach(t),fGo=r(l8e," (RoBERTa model)"),l8e.forEach(t),mGo=i(X),fF=n(X,"LI",{});var i8e=s(fF);pge=n(i8e,"STRONG",{});var Sit=s(pge);gGo=r(Sit,"roformer"),Sit.forEach(t),hGo=r(i8e," \u2014 "),VO=n(i8e,"A",{href:!0});var Rit=s(VO);pGo=r(Rit,"RoFormerForQuestionAnswering"),Rit.forEach(t),uGo=r(i8e," (RoFormer model)"),i8e.forEach(t),_Go=i(X),mF=n(X,"LI",{});var d8e=s(mF);uge=n(d8e,"STRONG",{});var Bit=s(uge);bGo=r(Bit,"splinter"),Bit.forEach(t),vGo=r(d8e," \u2014 "),XO=n(d8e,"A",{href:!0});var Pit=s(XO);FGo=r(Pit,"SplinterForQuestionAnswering"),Pit.forEach(t),TGo=r(d8e," (Splinter model)"),d8e.forEach(t),MGo=i(X),gF=n(X,"LI",{});var c8e=s(gF);_ge=n(c8e,"STRONG",{});var Iit=s(_ge);EGo=r(Iit,"squeezebert"),Iit.forEach(t),CGo=r(c8e," \u2014 "),zO=n(c8e,"A",{href:!0});var qit=s(zO);wGo=r(qit,"SqueezeBertForQuestionAnswering"),qit.forEach(t),AGo=r(c8e," (SqueezeBERT model)"),c8e.forEach(t),yGo=i(X),hF=n(X,"LI",{});var f8e=s(hF);bge=n(f8e,"STRONG",{});var Nit=s(bge);LGo=r(Nit,"xlm"),Nit.forEach(t),xGo=r(f8e," \u2014 "),QO=n(f8e,"A",{href:!0});var jit=s(QO);$Go=r(jit,"XLMForQuestionAnsweringSimple"),jit.forEach(t),kGo=r(f8e," (XLM model)"),f8e.forEach(t),SGo=i(X),pF=n(X,"LI",{});var m8e=s(pF);vge=n(m8e,"STRONG",{});var Dit=s(vge);RGo=r(Dit,"xlm-roberta"),Dit.forEach(t),BGo=r(m8e," \u2014 "),WO=n(m8e,"A",{href:!0});var Git=s(WO);PGo=r(Git,"XLMRobertaForQuestionAnswering"),Git.forEach(t),IGo=r(m8e," (XLM-RoBERTa model)"),m8e.forEach(t),qGo=i(X),uF=n(X,"LI",{});var g8e=s(uF);Fge=n(g8e,"STRONG",{});var Oit=s(Fge);NGo=r(Oit,"xlm-roberta-xl"),Oit.forEach(t),jGo=r(g8e," \u2014 "),HO=n(g8e,"A",{href:!0});var Vit=s(HO);DGo=r(Vit,"XLMRobertaXLForQuestionAnswering"),Vit.forEach(t),GGo=r(g8e," (XLM-RoBERTa-XL model)"),g8e.forEach(t),OGo=i(X),_F=n(X,"LI",{});var h8e=s(_F);Tge=n(h8e,"STRONG",{});var Xit=s(Tge);VGo=r(Xit,"xlnet"),Xit.forEach(t),XGo=r(h8e," \u2014 "),UO=n(h8e,"A",{href:!0});var zit=s(UO);zGo=r(zit,"XLNetForQuestionAnsweringSimple"),zit.forEach(t),QGo=r(h8e," (XLNet model)"),h8e.forEach(t),WGo=i(X),bF=n(X,"LI",{});var p8e=s(bF);Mge=n(p8e,"STRONG",{});var Qit=s(Mge);HGo=r(Qit,"yoso"),Qit.forEach(t),UGo=r(p8e," \u2014 "),JO=n(p8e,"A",{href:!0});var Wit=s(JO);JGo=r(Wit,"YosoForQuestionAnswering"),Wit.forEach(t),YGo=r(p8e," (YOSO model)"),p8e.forEach(t),X.forEach(t),KGo=i(ia),vF=n(ia,"P",{});var u8e=s(vF);ZGo=r(u8e,"The model is set in evaluation mode by default using "),Ege=n(u8e,"CODE",{});var Hit=s(Ege);eOo=r(Hit,"model.eval()"),Hit.forEach(t),oOo=r(u8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Cge=n(u8e,"CODE",{});var Uit=s(Cge);rOo=r(Uit,"model.train()"),Uit.forEach(t),u8e.forEach(t),tOo=i(ia),T(FF.$$.fragment,ia),ia.forEach(t),Us.forEach(t),DPe=i(f),Yi=n(f,"H2",{class:!0});var Xqe=s(Yi);TF=n(Xqe,"A",{id:!0,class:!0,href:!0});var Jit=s(TF);wge=n(Jit,"SPAN",{});var Yit=s(wge);T(cA.$$.fragment,Yit),Yit.forEach(t),Jit.forEach(t),aOo=i(Xqe),Age=n(Xqe,"SPAN",{});var Kit=s(Age);nOo=r(Kit,"AutoModelForTableQuestionAnswering"),Kit.forEach(t),Xqe.forEach(t),GPe=i(f),No=n(f,"DIV",{class:!0});var Js=s(No);T(fA.$$.fragment,Js),sOo=i(Js),Ki=n(Js,"P",{});var fK=s(Ki);lOo=r(fK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),YO=n(fK,"A",{href:!0});var Zit=s(YO);iOo=r(Zit,"from_pretrained()"),Zit.forEach(t),dOo=r(fK," class method or the "),KO=n(fK,"A",{href:!0});var edt=s(KO);cOo=r(edt,"from_config()"),edt.forEach(t),fOo=r(fK,` class
method.`),fK.forEach(t),mOo=i(Js),mA=n(Js,"P",{});var zqe=s(mA);gOo=r(zqe,"This class cannot be instantiated directly using "),yge=n(zqe,"CODE",{});var odt=s(yge);hOo=r(odt,"__init__()"),odt.forEach(t),pOo=r(zqe," (throws an error)."),zqe.forEach(t),uOo=i(Js),ft=n(Js,"DIV",{class:!0});var fC=s(ft);T(gA.$$.fragment,fC),_Oo=i(fC),Lge=n(fC,"P",{});var rdt=s(Lge);bOo=r(rdt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),rdt.forEach(t),vOo=i(fC),Zi=n(fC,"P",{});var mK=s(Zi);FOo=r(mK,`Note:
Loading a model from its configuration file does `),xge=n(mK,"STRONG",{});var tdt=s(xge);TOo=r(tdt,"not"),tdt.forEach(t),MOo=r(mK,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZO=n(mK,"A",{href:!0});var adt=s(ZO);EOo=r(adt,"from_pretrained()"),adt.forEach(t),COo=r(mK," to load the model weights."),mK.forEach(t),wOo=i(fC),T(MF.$$.fragment,fC),fC.forEach(t),AOo=i(Js),ao=n(Js,"DIV",{class:!0});var da=s(ao);T(hA.$$.fragment,da),yOo=i(da),$ge=n(da,"P",{});var ndt=s($ge);LOo=r(ndt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ndt.forEach(t),xOo=i(da),Ia=n(da,"P",{});var mC=s(Ia);$Oo=r(mC,"The model class to instantiate is selected based on the "),kge=n(mC,"CODE",{});var sdt=s(kge);kOo=r(sdt,"model_type"),sdt.forEach(t),SOo=r(mC,` property of the config object (either
passed as an argument or loaded from `),Sge=n(mC,"CODE",{});var ldt=s(Sge);ROo=r(ldt,"pretrained_model_name_or_path"),ldt.forEach(t),BOo=r(mC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Rge=n(mC,"CODE",{});var idt=s(Rge);POo=r(idt,"pretrained_model_name_or_path"),idt.forEach(t),IOo=r(mC,":"),mC.forEach(t),qOo=i(da),Bge=n(da,"UL",{});var ddt=s(Bge);EF=n(ddt,"LI",{});var _8e=s(EF);Pge=n(_8e,"STRONG",{});var cdt=s(Pge);NOo=r(cdt,"tapas"),cdt.forEach(t),jOo=r(_8e," \u2014 "),eV=n(_8e,"A",{href:!0});var fdt=s(eV);DOo=r(fdt,"TapasForQuestionAnswering"),fdt.forEach(t),GOo=r(_8e," (TAPAS model)"),_8e.forEach(t),ddt.forEach(t),OOo=i(da),CF=n(da,"P",{});var b8e=s(CF);VOo=r(b8e,"The model is set in evaluation mode by default using "),Ige=n(b8e,"CODE",{});var mdt=s(Ige);XOo=r(mdt,"model.eval()"),mdt.forEach(t),zOo=r(b8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qge=n(b8e,"CODE",{});var gdt=s(qge);QOo=r(gdt,"model.train()"),gdt.forEach(t),b8e.forEach(t),WOo=i(da),T(wF.$$.fragment,da),da.forEach(t),Js.forEach(t),OPe=i(f),ed=n(f,"H2",{class:!0});var Qqe=s(ed);AF=n(Qqe,"A",{id:!0,class:!0,href:!0});var hdt=s(AF);Nge=n(hdt,"SPAN",{});var pdt=s(Nge);T(pA.$$.fragment,pdt),pdt.forEach(t),hdt.forEach(t),HOo=i(Qqe),jge=n(Qqe,"SPAN",{});var udt=s(jge);UOo=r(udt,"AutoModelForImageClassification"),udt.forEach(t),Qqe.forEach(t),VPe=i(f),jo=n(f,"DIV",{class:!0});var Ys=s(jo);T(uA.$$.fragment,Ys),JOo=i(Ys),od=n(Ys,"P",{});var gK=s(od);YOo=r(gK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),oV=n(gK,"A",{href:!0});var _dt=s(oV);KOo=r(_dt,"from_pretrained()"),_dt.forEach(t),ZOo=r(gK," class method or the "),rV=n(gK,"A",{href:!0});var bdt=s(rV);eVo=r(bdt,"from_config()"),bdt.forEach(t),oVo=r(gK,` class
method.`),gK.forEach(t),rVo=i(Ys),_A=n(Ys,"P",{});var Wqe=s(_A);tVo=r(Wqe,"This class cannot be instantiated directly using "),Dge=n(Wqe,"CODE",{});var vdt=s(Dge);aVo=r(vdt,"__init__()"),vdt.forEach(t),nVo=r(Wqe," (throws an error)."),Wqe.forEach(t),sVo=i(Ys),mt=n(Ys,"DIV",{class:!0});var gC=s(mt);T(bA.$$.fragment,gC),lVo=i(gC),Gge=n(gC,"P",{});var Fdt=s(Gge);iVo=r(Fdt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Fdt.forEach(t),dVo=i(gC),rd=n(gC,"P",{});var hK=s(rd);cVo=r(hK,`Note:
Loading a model from its configuration file does `),Oge=n(hK,"STRONG",{});var Tdt=s(Oge);fVo=r(Tdt,"not"),Tdt.forEach(t),mVo=r(hK,` load the model weights. It only affects the
model\u2019s configuration. Use `),tV=n(hK,"A",{href:!0});var Mdt=s(tV);gVo=r(Mdt,"from_pretrained()"),Mdt.forEach(t),hVo=r(hK," to load the model weights."),hK.forEach(t),pVo=i(gC),T(yF.$$.fragment,gC),gC.forEach(t),uVo=i(Ys),no=n(Ys,"DIV",{class:!0});var ca=s(no);T(vA.$$.fragment,ca),_Vo=i(ca),Vge=n(ca,"P",{});var Edt=s(Vge);bVo=r(Edt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Edt.forEach(t),vVo=i(ca),qa=n(ca,"P",{});var hC=s(qa);FVo=r(hC,"The model class to instantiate is selected based on the "),Xge=n(hC,"CODE",{});var Cdt=s(Xge);TVo=r(Cdt,"model_type"),Cdt.forEach(t),MVo=r(hC,` property of the config object (either
passed as an argument or loaded from `),zge=n(hC,"CODE",{});var wdt=s(zge);EVo=r(wdt,"pretrained_model_name_or_path"),wdt.forEach(t),CVo=r(hC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(hC,"CODE",{});var Adt=s(Qge);wVo=r(Adt,"pretrained_model_name_or_path"),Adt.forEach(t),AVo=r(hC,":"),hC.forEach(t),yVo=i(ca),ve=n(ca,"UL",{});var Ee=s(ve);LF=n(Ee,"LI",{});var v8e=s(LF);Wge=n(v8e,"STRONG",{});var ydt=s(Wge);LVo=r(ydt,"beit"),ydt.forEach(t),xVo=r(v8e," \u2014 "),aV=n(v8e,"A",{href:!0});var Ldt=s(aV);$Vo=r(Ldt,"BeitForImageClassification"),Ldt.forEach(t),kVo=r(v8e," (BEiT model)"),v8e.forEach(t),SVo=i(Ee),xF=n(Ee,"LI",{});var F8e=s(xF);Hge=n(F8e,"STRONG",{});var xdt=s(Hge);RVo=r(xdt,"convnext"),xdt.forEach(t),BVo=r(F8e," \u2014 "),nV=n(F8e,"A",{href:!0});var $dt=s(nV);PVo=r($dt,"ConvNextForImageClassification"),$dt.forEach(t),IVo=r(F8e," (ConvNext model)"),F8e.forEach(t),qVo=i(Ee),$F=n(Ee,"LI",{});var T8e=s($F);Uge=n(T8e,"STRONG",{});var kdt=s(Uge);NVo=r(kdt,"data2vec-vision"),kdt.forEach(t),jVo=r(T8e," \u2014 "),sV=n(T8e,"A",{href:!0});var Sdt=s(sV);DVo=r(Sdt,"Data2VecVisionForImageClassification"),Sdt.forEach(t),GVo=r(T8e," (Data2VecVision model)"),T8e.forEach(t),OVo=i(Ee),Rs=n(Ee,"LI",{});var t$=s(Rs);Jge=n(t$,"STRONG",{});var Rdt=s(Jge);VVo=r(Rdt,"deit"),Rdt.forEach(t),XVo=r(t$," \u2014 "),lV=n(t$,"A",{href:!0});var Bdt=s(lV);zVo=r(Bdt,"DeiTForImageClassification"),Bdt.forEach(t),QVo=r(t$," or "),iV=n(t$,"A",{href:!0});var Pdt=s(iV);WVo=r(Pdt,"DeiTForImageClassificationWithTeacher"),Pdt.forEach(t),HVo=r(t$," (DeiT model)"),t$.forEach(t),UVo=i(Ee),kF=n(Ee,"LI",{});var M8e=s(kF);Yge=n(M8e,"STRONG",{});var Idt=s(Yge);JVo=r(Idt,"imagegpt"),Idt.forEach(t),YVo=r(M8e," \u2014 "),dV=n(M8e,"A",{href:!0});var qdt=s(dV);KVo=r(qdt,"ImageGPTForImageClassification"),qdt.forEach(t),ZVo=r(M8e," (ImageGPT model)"),M8e.forEach(t),eXo=i(Ee),gt=n(Ee,"LI",{});var ff=s(gt);Kge=n(ff,"STRONG",{});var Ndt=s(Kge);oXo=r(Ndt,"perceiver"),Ndt.forEach(t),rXo=r(ff," \u2014 "),cV=n(ff,"A",{href:!0});var jdt=s(cV);tXo=r(jdt,"PerceiverForImageClassificationLearned"),jdt.forEach(t),aXo=r(ff," or "),fV=n(ff,"A",{href:!0});var Ddt=s(fV);nXo=r(Ddt,"PerceiverForImageClassificationFourier"),Ddt.forEach(t),sXo=r(ff," or "),mV=n(ff,"A",{href:!0});var Gdt=s(mV);lXo=r(Gdt,"PerceiverForImageClassificationConvProcessing"),Gdt.forEach(t),iXo=r(ff," (Perceiver model)"),ff.forEach(t),dXo=i(Ee),SF=n(Ee,"LI",{});var E8e=s(SF);Zge=n(E8e,"STRONG",{});var Odt=s(Zge);cXo=r(Odt,"poolformer"),Odt.forEach(t),fXo=r(E8e," \u2014 "),gV=n(E8e,"A",{href:!0});var Vdt=s(gV);mXo=r(Vdt,"PoolFormerForImageClassification"),Vdt.forEach(t),gXo=r(E8e," (PoolFormer model)"),E8e.forEach(t),hXo=i(Ee),RF=n(Ee,"LI",{});var C8e=s(RF);ehe=n(C8e,"STRONG",{});var Xdt=s(ehe);pXo=r(Xdt,"regnet"),Xdt.forEach(t),uXo=r(C8e," \u2014 "),hV=n(C8e,"A",{href:!0});var zdt=s(hV);_Xo=r(zdt,"RegNetForImageClassification"),zdt.forEach(t),bXo=r(C8e," (RegNet model)"),C8e.forEach(t),vXo=i(Ee),BF=n(Ee,"LI",{});var w8e=s(BF);ohe=n(w8e,"STRONG",{});var Qdt=s(ohe);FXo=r(Qdt,"resnet"),Qdt.forEach(t),TXo=r(w8e," \u2014 "),pV=n(w8e,"A",{href:!0});var Wdt=s(pV);MXo=r(Wdt,"ResNetForImageClassification"),Wdt.forEach(t),EXo=r(w8e," (ResNet model)"),w8e.forEach(t),CXo=i(Ee),PF=n(Ee,"LI",{});var A8e=s(PF);rhe=n(A8e,"STRONG",{});var Hdt=s(rhe);wXo=r(Hdt,"segformer"),Hdt.forEach(t),AXo=r(A8e," \u2014 "),uV=n(A8e,"A",{href:!0});var Udt=s(uV);yXo=r(Udt,"SegformerForImageClassification"),Udt.forEach(t),LXo=r(A8e," (SegFormer model)"),A8e.forEach(t),xXo=i(Ee),IF=n(Ee,"LI",{});var y8e=s(IF);the=n(y8e,"STRONG",{});var Jdt=s(the);$Xo=r(Jdt,"swin"),Jdt.forEach(t),kXo=r(y8e," \u2014 "),_V=n(y8e,"A",{href:!0});var Ydt=s(_V);SXo=r(Ydt,"SwinForImageClassification"),Ydt.forEach(t),RXo=r(y8e," (Swin model)"),y8e.forEach(t),BXo=i(Ee),qF=n(Ee,"LI",{});var L8e=s(qF);ahe=n(L8e,"STRONG",{});var Kdt=s(ahe);PXo=r(Kdt,"van"),Kdt.forEach(t),IXo=r(L8e," \u2014 "),bV=n(L8e,"A",{href:!0});var Zdt=s(bV);qXo=r(Zdt,"VanForImageClassification"),Zdt.forEach(t),NXo=r(L8e," (VAN model)"),L8e.forEach(t),jXo=i(Ee),NF=n(Ee,"LI",{});var x8e=s(NF);nhe=n(x8e,"STRONG",{});var ect=s(nhe);DXo=r(ect,"vit"),ect.forEach(t),GXo=r(x8e," \u2014 "),vV=n(x8e,"A",{href:!0});var oct=s(vV);OXo=r(oct,"ViTForImageClassification"),oct.forEach(t),VXo=r(x8e," (ViT model)"),x8e.forEach(t),Ee.forEach(t),XXo=i(ca),jF=n(ca,"P",{});var $8e=s(jF);zXo=r($8e,"The model is set in evaluation mode by default using "),she=n($8e,"CODE",{});var rct=s(she);QXo=r(rct,"model.eval()"),rct.forEach(t),WXo=r($8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lhe=n($8e,"CODE",{});var tct=s(lhe);HXo=r(tct,"model.train()"),tct.forEach(t),$8e.forEach(t),UXo=i(ca),T(DF.$$.fragment,ca),ca.forEach(t),Ys.forEach(t),XPe=i(f),td=n(f,"H2",{class:!0});var Hqe=s(td);GF=n(Hqe,"A",{id:!0,class:!0,href:!0});var act=s(GF);ihe=n(act,"SPAN",{});var nct=s(ihe);T(FA.$$.fragment,nct),nct.forEach(t),act.forEach(t),JXo=i(Hqe),dhe=n(Hqe,"SPAN",{});var sct=s(dhe);YXo=r(sct,"AutoModelForVision2Seq"),sct.forEach(t),Hqe.forEach(t),zPe=i(f),Do=n(f,"DIV",{class:!0});var Ks=s(Do);T(TA.$$.fragment,Ks),KXo=i(Ks),ad=n(Ks,"P",{});var pK=s(ad);ZXo=r(pK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),FV=n(pK,"A",{href:!0});var lct=s(FV);ezo=r(lct,"from_pretrained()"),lct.forEach(t),ozo=r(pK," class method or the "),TV=n(pK,"A",{href:!0});var ict=s(TV);rzo=r(ict,"from_config()"),ict.forEach(t),tzo=r(pK,` class
method.`),pK.forEach(t),azo=i(Ks),MA=n(Ks,"P",{});var Uqe=s(MA);nzo=r(Uqe,"This class cannot be instantiated directly using "),che=n(Uqe,"CODE",{});var dct=s(che);szo=r(dct,"__init__()"),dct.forEach(t),lzo=r(Uqe," (throws an error)."),Uqe.forEach(t),izo=i(Ks),ht=n(Ks,"DIV",{class:!0});var pC=s(ht);T(EA.$$.fragment,pC),dzo=i(pC),fhe=n(pC,"P",{});var cct=s(fhe);czo=r(cct,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),cct.forEach(t),fzo=i(pC),nd=n(pC,"P",{});var uK=s(nd);mzo=r(uK,`Note:
Loading a model from its configuration file does `),mhe=n(uK,"STRONG",{});var fct=s(mhe);gzo=r(fct,"not"),fct.forEach(t),hzo=r(uK,` load the model weights. It only affects the
model\u2019s configuration. Use `),MV=n(uK,"A",{href:!0});var mct=s(MV);pzo=r(mct,"from_pretrained()"),mct.forEach(t),uzo=r(uK," to load the model weights."),uK.forEach(t),_zo=i(pC),T(OF.$$.fragment,pC),pC.forEach(t),bzo=i(Ks),so=n(Ks,"DIV",{class:!0});var fa=s(so);T(CA.$$.fragment,fa),vzo=i(fa),ghe=n(fa,"P",{});var gct=s(ghe);Fzo=r(gct,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),gct.forEach(t),Tzo=i(fa),Na=n(fa,"P",{});var uC=s(Na);Mzo=r(uC,"The model class to instantiate is selected based on the "),hhe=n(uC,"CODE",{});var hct=s(hhe);Ezo=r(hct,"model_type"),hct.forEach(t),Czo=r(uC,` property of the config object (either
passed as an argument or loaded from `),phe=n(uC,"CODE",{});var pct=s(phe);wzo=r(pct,"pretrained_model_name_or_path"),pct.forEach(t),Azo=r(uC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uhe=n(uC,"CODE",{});var uct=s(uhe);yzo=r(uct,"pretrained_model_name_or_path"),uct.forEach(t),Lzo=r(uC,":"),uC.forEach(t),xzo=i(fa),_he=n(fa,"UL",{});var _ct=s(_he);VF=n(_ct,"LI",{});var k8e=s(VF);bhe=n(k8e,"STRONG",{});var bct=s(bhe);$zo=r(bct,"vision-encoder-decoder"),bct.forEach(t),kzo=r(k8e," \u2014 "),EV=n(k8e,"A",{href:!0});var vct=s(EV);Szo=r(vct,"VisionEncoderDecoderModel"),vct.forEach(t),Rzo=r(k8e," (Vision Encoder decoder model)"),k8e.forEach(t),_ct.forEach(t),Bzo=i(fa),XF=n(fa,"P",{});var S8e=s(XF);Pzo=r(S8e,"The model is set in evaluation mode by default using "),vhe=n(S8e,"CODE",{});var Fct=s(vhe);Izo=r(Fct,"model.eval()"),Fct.forEach(t),qzo=r(S8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fhe=n(S8e,"CODE",{});var Tct=s(Fhe);Nzo=r(Tct,"model.train()"),Tct.forEach(t),S8e.forEach(t),jzo=i(fa),T(zF.$$.fragment,fa),fa.forEach(t),Ks.forEach(t),QPe=i(f),sd=n(f,"H2",{class:!0});var Jqe=s(sd);QF=n(Jqe,"A",{id:!0,class:!0,href:!0});var Mct=s(QF);The=n(Mct,"SPAN",{});var Ect=s(The);T(wA.$$.fragment,Ect),Ect.forEach(t),Mct.forEach(t),Dzo=i(Jqe),Mhe=n(Jqe,"SPAN",{});var Cct=s(Mhe);Gzo=r(Cct,"AutoModelForAudioClassification"),Cct.forEach(t),Jqe.forEach(t),WPe=i(f),Go=n(f,"DIV",{class:!0});var Zs=s(Go);T(AA.$$.fragment,Zs),Ozo=i(Zs),ld=n(Zs,"P",{});var _K=s(ld);Vzo=r(_K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),CV=n(_K,"A",{href:!0});var wct=s(CV);Xzo=r(wct,"from_pretrained()"),wct.forEach(t),zzo=r(_K," class method or the "),wV=n(_K,"A",{href:!0});var Act=s(wV);Qzo=r(Act,"from_config()"),Act.forEach(t),Wzo=r(_K,` class
method.`),_K.forEach(t),Hzo=i(Zs),yA=n(Zs,"P",{});var Yqe=s(yA);Uzo=r(Yqe,"This class cannot be instantiated directly using "),Ehe=n(Yqe,"CODE",{});var yct=s(Ehe);Jzo=r(yct,"__init__()"),yct.forEach(t),Yzo=r(Yqe," (throws an error)."),Yqe.forEach(t),Kzo=i(Zs),pt=n(Zs,"DIV",{class:!0});var _C=s(pt);T(LA.$$.fragment,_C),Zzo=i(_C),Che=n(_C,"P",{});var Lct=s(Che);eQo=r(Lct,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),Lct.forEach(t),oQo=i(_C),id=n(_C,"P",{});var bK=s(id);rQo=r(bK,`Note:
Loading a model from its configuration file does `),whe=n(bK,"STRONG",{});var xct=s(whe);tQo=r(xct,"not"),xct.forEach(t),aQo=r(bK,` load the model weights. It only affects the
model\u2019s configuration. Use `),AV=n(bK,"A",{href:!0});var $ct=s(AV);nQo=r($ct,"from_pretrained()"),$ct.forEach(t),sQo=r(bK," to load the model weights."),bK.forEach(t),lQo=i(_C),T(WF.$$.fragment,_C),_C.forEach(t),iQo=i(Zs),lo=n(Zs,"DIV",{class:!0});var ma=s(lo);T(xA.$$.fragment,ma),dQo=i(ma),Ahe=n(ma,"P",{});var kct=s(Ahe);cQo=r(kct,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),kct.forEach(t),fQo=i(ma),ja=n(ma,"P",{});var bC=s(ja);mQo=r(bC,"The model class to instantiate is selected based on the "),yhe=n(bC,"CODE",{});var Sct=s(yhe);gQo=r(Sct,"model_type"),Sct.forEach(t),hQo=r(bC,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(bC,"CODE",{});var Rct=s(Lhe);pQo=r(Rct,"pretrained_model_name_or_path"),Rct.forEach(t),uQo=r(bC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xhe=n(bC,"CODE",{});var Bct=s(xhe);_Qo=r(Bct,"pretrained_model_name_or_path"),Bct.forEach(t),bQo=r(bC,":"),bC.forEach(t),vQo=i(ma),Ne=n(ma,"UL",{});var bo=s(Ne);HF=n(bo,"LI",{});var R8e=s(HF);$he=n(R8e,"STRONG",{});var Pct=s($he);FQo=r(Pct,"data2vec-audio"),Pct.forEach(t),TQo=r(R8e," \u2014 "),yV=n(R8e,"A",{href:!0});var Ict=s(yV);MQo=r(Ict,"Data2VecAudioForSequenceClassification"),Ict.forEach(t),EQo=r(R8e," (Data2VecAudio model)"),R8e.forEach(t),CQo=i(bo),UF=n(bo,"LI",{});var B8e=s(UF);khe=n(B8e,"STRONG",{});var qct=s(khe);wQo=r(qct,"hubert"),qct.forEach(t),AQo=r(B8e," \u2014 "),LV=n(B8e,"A",{href:!0});var Nct=s(LV);yQo=r(Nct,"HubertForSequenceClassification"),Nct.forEach(t),LQo=r(B8e," (Hubert model)"),B8e.forEach(t),xQo=i(bo),JF=n(bo,"LI",{});var P8e=s(JF);She=n(P8e,"STRONG",{});var jct=s(She);$Qo=r(jct,"sew"),jct.forEach(t),kQo=r(P8e," \u2014 "),xV=n(P8e,"A",{href:!0});var Dct=s(xV);SQo=r(Dct,"SEWForSequenceClassification"),Dct.forEach(t),RQo=r(P8e," (SEW model)"),P8e.forEach(t),BQo=i(bo),YF=n(bo,"LI",{});var I8e=s(YF);Rhe=n(I8e,"STRONG",{});var Gct=s(Rhe);PQo=r(Gct,"sew-d"),Gct.forEach(t),IQo=r(I8e," \u2014 "),$V=n(I8e,"A",{href:!0});var Oct=s($V);qQo=r(Oct,"SEWDForSequenceClassification"),Oct.forEach(t),NQo=r(I8e," (SEW-D model)"),I8e.forEach(t),jQo=i(bo),KF=n(bo,"LI",{});var q8e=s(KF);Bhe=n(q8e,"STRONG",{});var Vct=s(Bhe);DQo=r(Vct,"unispeech"),Vct.forEach(t),GQo=r(q8e," \u2014 "),kV=n(q8e,"A",{href:!0});var Xct=s(kV);OQo=r(Xct,"UniSpeechForSequenceClassification"),Xct.forEach(t),VQo=r(q8e," (UniSpeech model)"),q8e.forEach(t),XQo=i(bo),ZF=n(bo,"LI",{});var N8e=s(ZF);Phe=n(N8e,"STRONG",{});var zct=s(Phe);zQo=r(zct,"unispeech-sat"),zct.forEach(t),QQo=r(N8e," \u2014 "),SV=n(N8e,"A",{href:!0});var Qct=s(SV);WQo=r(Qct,"UniSpeechSatForSequenceClassification"),Qct.forEach(t),HQo=r(N8e," (UniSpeechSat model)"),N8e.forEach(t),UQo=i(bo),e0=n(bo,"LI",{});var j8e=s(e0);Ihe=n(j8e,"STRONG",{});var Wct=s(Ihe);JQo=r(Wct,"wav2vec2"),Wct.forEach(t),YQo=r(j8e," \u2014 "),RV=n(j8e,"A",{href:!0});var Hct=s(RV);KQo=r(Hct,"Wav2Vec2ForSequenceClassification"),Hct.forEach(t),ZQo=r(j8e," (Wav2Vec2 model)"),j8e.forEach(t),eWo=i(bo),o0=n(bo,"LI",{});var D8e=s(o0);qhe=n(D8e,"STRONG",{});var Uct=s(qhe);oWo=r(Uct,"wavlm"),Uct.forEach(t),rWo=r(D8e," \u2014 "),BV=n(D8e,"A",{href:!0});var Jct=s(BV);tWo=r(Jct,"WavLMForSequenceClassification"),Jct.forEach(t),aWo=r(D8e," (WavLM model)"),D8e.forEach(t),bo.forEach(t),nWo=i(ma),r0=n(ma,"P",{});var G8e=s(r0);sWo=r(G8e,"The model is set in evaluation mode by default using "),Nhe=n(G8e,"CODE",{});var Yct=s(Nhe);lWo=r(Yct,"model.eval()"),Yct.forEach(t),iWo=r(G8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),jhe=n(G8e,"CODE",{});var Kct=s(jhe);dWo=r(Kct,"model.train()"),Kct.forEach(t),G8e.forEach(t),cWo=i(ma),T(t0.$$.fragment,ma),ma.forEach(t),Zs.forEach(t),HPe=i(f),dd=n(f,"H2",{class:!0});var Kqe=s(dd);a0=n(Kqe,"A",{id:!0,class:!0,href:!0});var Zct=s(a0);Dhe=n(Zct,"SPAN",{});var eft=s(Dhe);T($A.$$.fragment,eft),eft.forEach(t),Zct.forEach(t),fWo=i(Kqe),Ghe=n(Kqe,"SPAN",{});var oft=s(Ghe);mWo=r(oft,"AutoModelForAudioFrameClassification"),oft.forEach(t),Kqe.forEach(t),UPe=i(f),Oo=n(f,"DIV",{class:!0});var el=s(Oo);T(kA.$$.fragment,el),gWo=i(el),cd=n(el,"P",{});var vK=s(cd);hWo=r(vK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),PV=n(vK,"A",{href:!0});var rft=s(PV);pWo=r(rft,"from_pretrained()"),rft.forEach(t),uWo=r(vK," class method or the "),IV=n(vK,"A",{href:!0});var tft=s(IV);_Wo=r(tft,"from_config()"),tft.forEach(t),bWo=r(vK,` class
method.`),vK.forEach(t),vWo=i(el),SA=n(el,"P",{});var Zqe=s(SA);FWo=r(Zqe,"This class cannot be instantiated directly using "),Ohe=n(Zqe,"CODE",{});var aft=s(Ohe);TWo=r(aft,"__init__()"),aft.forEach(t),MWo=r(Zqe," (throws an error)."),Zqe.forEach(t),EWo=i(el),ut=n(el,"DIV",{class:!0});var vC=s(ut);T(RA.$$.fragment,vC),CWo=i(vC),Vhe=n(vC,"P",{});var nft=s(Vhe);wWo=r(nft,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),nft.forEach(t),AWo=i(vC),fd=n(vC,"P",{});var FK=s(fd);yWo=r(FK,`Note:
Loading a model from its configuration file does `),Xhe=n(FK,"STRONG",{});var sft=s(Xhe);LWo=r(sft,"not"),sft.forEach(t),xWo=r(FK,` load the model weights. It only affects the
model\u2019s configuration. Use `),qV=n(FK,"A",{href:!0});var lft=s(qV);$Wo=r(lft,"from_pretrained()"),lft.forEach(t),kWo=r(FK," to load the model weights."),FK.forEach(t),SWo=i(vC),T(n0.$$.fragment,vC),vC.forEach(t),RWo=i(el),io=n(el,"DIV",{class:!0});var ga=s(io);T(BA.$$.fragment,ga),BWo=i(ga),zhe=n(ga,"P",{});var ift=s(zhe);PWo=r(ift,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),ift.forEach(t),IWo=i(ga),Da=n(ga,"P",{});var FC=s(Da);qWo=r(FC,"The model class to instantiate is selected based on the "),Qhe=n(FC,"CODE",{});var dft=s(Qhe);NWo=r(dft,"model_type"),dft.forEach(t),jWo=r(FC,` property of the config object (either
passed as an argument or loaded from `),Whe=n(FC,"CODE",{});var cft=s(Whe);DWo=r(cft,"pretrained_model_name_or_path"),cft.forEach(t),GWo=r(FC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hhe=n(FC,"CODE",{});var fft=s(Hhe);OWo=r(fft,"pretrained_model_name_or_path"),fft.forEach(t),VWo=r(FC,":"),FC.forEach(t),XWo=i(ga),Ga=n(ga,"UL",{});var TC=s(Ga);s0=n(TC,"LI",{});var O8e=s(s0);Uhe=n(O8e,"STRONG",{});var mft=s(Uhe);zWo=r(mft,"data2vec-audio"),mft.forEach(t),QWo=r(O8e," \u2014 "),NV=n(O8e,"A",{href:!0});var gft=s(NV);WWo=r(gft,"Data2VecAudioForAudioFrameClassification"),gft.forEach(t),HWo=r(O8e," (Data2VecAudio model)"),O8e.forEach(t),UWo=i(TC),l0=n(TC,"LI",{});var V8e=s(l0);Jhe=n(V8e,"STRONG",{});var hft=s(Jhe);JWo=r(hft,"unispeech-sat"),hft.forEach(t),YWo=r(V8e," \u2014 "),jV=n(V8e,"A",{href:!0});var pft=s(jV);KWo=r(pft,"UniSpeechSatForAudioFrameClassification"),pft.forEach(t),ZWo=r(V8e," (UniSpeechSat model)"),V8e.forEach(t),eHo=i(TC),i0=n(TC,"LI",{});var X8e=s(i0);Yhe=n(X8e,"STRONG",{});var uft=s(Yhe);oHo=r(uft,"wav2vec2"),uft.forEach(t),rHo=r(X8e," \u2014 "),DV=n(X8e,"A",{href:!0});var _ft=s(DV);tHo=r(_ft,"Wav2Vec2ForAudioFrameClassification"),_ft.forEach(t),aHo=r(X8e," (Wav2Vec2 model)"),X8e.forEach(t),nHo=i(TC),d0=n(TC,"LI",{});var z8e=s(d0);Khe=n(z8e,"STRONG",{});var bft=s(Khe);sHo=r(bft,"wavlm"),bft.forEach(t),lHo=r(z8e," \u2014 "),GV=n(z8e,"A",{href:!0});var vft=s(GV);iHo=r(vft,"WavLMForAudioFrameClassification"),vft.forEach(t),dHo=r(z8e," (WavLM model)"),z8e.forEach(t),TC.forEach(t),cHo=i(ga),c0=n(ga,"P",{});var Q8e=s(c0);fHo=r(Q8e,"The model is set in evaluation mode by default using "),Zhe=n(Q8e,"CODE",{});var Fft=s(Zhe);mHo=r(Fft,"model.eval()"),Fft.forEach(t),gHo=r(Q8e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),epe=n(Q8e,"CODE",{});var Tft=s(epe);hHo=r(Tft,"model.train()"),Tft.forEach(t),Q8e.forEach(t),pHo=i(ga),T(f0.$$.fragment,ga),ga.forEach(t),el.forEach(t),JPe=i(f),md=n(f,"H2",{class:!0});var eNe=s(md);m0=n(eNe,"A",{id:!0,class:!0,href:!0});var Mft=s(m0);ope=n(Mft,"SPAN",{});var Eft=s(ope);T(PA.$$.fragment,Eft),Eft.forEach(t),Mft.forEach(t),uHo=i(eNe),rpe=n(eNe,"SPAN",{});var Cft=s(rpe);_Ho=r(Cft,"AutoModelForCTC"),Cft.forEach(t),eNe.forEach(t),YPe=i(f),Vo=n(f,"DIV",{class:!0});var ol=s(Vo);T(IA.$$.fragment,ol),bHo=i(ol),gd=n(ol,"P",{});var TK=s(gd);vHo=r(TK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),OV=n(TK,"A",{href:!0});var wft=s(OV);FHo=r(wft,"from_pretrained()"),wft.forEach(t),THo=r(TK," class method or the "),VV=n(TK,"A",{href:!0});var Aft=s(VV);MHo=r(Aft,"from_config()"),Aft.forEach(t),EHo=r(TK,` class
method.`),TK.forEach(t),CHo=i(ol),qA=n(ol,"P",{});var oNe=s(qA);wHo=r(oNe,"This class cannot be instantiated directly using "),tpe=n(oNe,"CODE",{});var yft=s(tpe);AHo=r(yft,"__init__()"),yft.forEach(t),yHo=r(oNe," (throws an error)."),oNe.forEach(t),LHo=i(ol),_t=n(ol,"DIV",{class:!0});var MC=s(_t);T(NA.$$.fragment,MC),xHo=i(MC),ape=n(MC,"P",{});var Lft=s(ape);$Ho=r(Lft,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Lft.forEach(t),kHo=i(MC),hd=n(MC,"P",{});var MK=s(hd);SHo=r(MK,`Note:
Loading a model from its configuration file does `),npe=n(MK,"STRONG",{});var xft=s(npe);RHo=r(xft,"not"),xft.forEach(t),BHo=r(MK,` load the model weights. It only affects the
model\u2019s configuration. Use `),XV=n(MK,"A",{href:!0});var $ft=s(XV);PHo=r($ft,"from_pretrained()"),$ft.forEach(t),IHo=r(MK," to load the model weights."),MK.forEach(t),qHo=i(MC),T(g0.$$.fragment,MC),MC.forEach(t),NHo=i(ol),co=n(ol,"DIV",{class:!0});var ha=s(co);T(jA.$$.fragment,ha),jHo=i(ha),spe=n(ha,"P",{});var kft=s(spe);DHo=r(kft,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),kft.forEach(t),GHo=i(ha),Oa=n(ha,"P",{});var EC=s(Oa);OHo=r(EC,"The model class to instantiate is selected based on the "),lpe=n(EC,"CODE",{});var Sft=s(lpe);VHo=r(Sft,"model_type"),Sft.forEach(t),XHo=r(EC,` property of the config object (either
passed as an argument or loaded from `),ipe=n(EC,"CODE",{});var Rft=s(ipe);zHo=r(Rft,"pretrained_model_name_or_path"),Rft.forEach(t),QHo=r(EC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dpe=n(EC,"CODE",{});var Bft=s(dpe);WHo=r(Bft,"pretrained_model_name_or_path"),Bft.forEach(t),HHo=r(EC,":"),EC.forEach(t),UHo=i(ha),je=n(ha,"UL",{});var vo=s(je);h0=n(vo,"LI",{});var W8e=s(h0);cpe=n(W8e,"STRONG",{});var Pft=s(cpe);JHo=r(Pft,"data2vec-audio"),Pft.forEach(t),YHo=r(W8e," \u2014 "),zV=n(W8e,"A",{href:!0});var Ift=s(zV);KHo=r(Ift,"Data2VecAudioForCTC"),Ift.forEach(t),ZHo=r(W8e," (Data2VecAudio model)"),W8e.forEach(t),eUo=i(vo),p0=n(vo,"LI",{});var H8e=s(p0);fpe=n(H8e,"STRONG",{});var qft=s(fpe);oUo=r(qft,"hubert"),qft.forEach(t),rUo=r(H8e," \u2014 "),QV=n(H8e,"A",{href:!0});var Nft=s(QV);tUo=r(Nft,"HubertForCTC"),Nft.forEach(t),aUo=r(H8e," (Hubert model)"),H8e.forEach(t),nUo=i(vo),u0=n(vo,"LI",{});var U8e=s(u0);mpe=n(U8e,"STRONG",{});var jft=s(mpe);sUo=r(jft,"sew"),jft.forEach(t),lUo=r(U8e," \u2014 "),WV=n(U8e,"A",{href:!0});var Dft=s(WV);iUo=r(Dft,"SEWForCTC"),Dft.forEach(t),dUo=r(U8e," (SEW model)"),U8e.forEach(t),cUo=i(vo),_0=n(vo,"LI",{});var J8e=s(_0);gpe=n(J8e,"STRONG",{});var Gft=s(gpe);fUo=r(Gft,"sew-d"),Gft.forEach(t),mUo=r(J8e," \u2014 "),HV=n(J8e,"A",{href:!0});var Oft=s(HV);gUo=r(Oft,"SEWDForCTC"),Oft.forEach(t),hUo=r(J8e," (SEW-D model)"),J8e.forEach(t),pUo=i(vo),b0=n(vo,"LI",{});var Y8e=s(b0);hpe=n(Y8e,"STRONG",{});var Vft=s(hpe);uUo=r(Vft,"unispeech"),Vft.forEach(t),_Uo=r(Y8e," \u2014 "),UV=n(Y8e,"A",{href:!0});var Xft=s(UV);bUo=r(Xft,"UniSpeechForCTC"),Xft.forEach(t),vUo=r(Y8e," (UniSpeech model)"),Y8e.forEach(t),FUo=i(vo),v0=n(vo,"LI",{});var K8e=s(v0);ppe=n(K8e,"STRONG",{});var zft=s(ppe);TUo=r(zft,"unispeech-sat"),zft.forEach(t),MUo=r(K8e," \u2014 "),JV=n(K8e,"A",{href:!0});var Qft=s(JV);EUo=r(Qft,"UniSpeechSatForCTC"),Qft.forEach(t),CUo=r(K8e," (UniSpeechSat model)"),K8e.forEach(t),wUo=i(vo),F0=n(vo,"LI",{});var Z8e=s(F0);upe=n(Z8e,"STRONG",{});var Wft=s(upe);AUo=r(Wft,"wav2vec2"),Wft.forEach(t),yUo=r(Z8e," \u2014 "),YV=n(Z8e,"A",{href:!0});var Hft=s(YV);LUo=r(Hft,"Wav2Vec2ForCTC"),Hft.forEach(t),xUo=r(Z8e," (Wav2Vec2 model)"),Z8e.forEach(t),$Uo=i(vo),T0=n(vo,"LI",{});var exe=s(T0);_pe=n(exe,"STRONG",{});var Uft=s(_pe);kUo=r(Uft,"wavlm"),Uft.forEach(t),SUo=r(exe," \u2014 "),KV=n(exe,"A",{href:!0});var Jft=s(KV);RUo=r(Jft,"WavLMForCTC"),Jft.forEach(t),BUo=r(exe," (WavLM model)"),exe.forEach(t),vo.forEach(t),PUo=i(ha),M0=n(ha,"P",{});var oxe=s(M0);IUo=r(oxe,"The model is set in evaluation mode by default using "),bpe=n(oxe,"CODE",{});var Yft=s(bpe);qUo=r(Yft,"model.eval()"),Yft.forEach(t),NUo=r(oxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),vpe=n(oxe,"CODE",{});var Kft=s(vpe);jUo=r(Kft,"model.train()"),Kft.forEach(t),oxe.forEach(t),DUo=i(ha),T(E0.$$.fragment,ha),ha.forEach(t),ol.forEach(t),KPe=i(f),pd=n(f,"H2",{class:!0});var rNe=s(pd);C0=n(rNe,"A",{id:!0,class:!0,href:!0});var Zft=s(C0);Fpe=n(Zft,"SPAN",{});var emt=s(Fpe);T(DA.$$.fragment,emt),emt.forEach(t),Zft.forEach(t),GUo=i(rNe),Tpe=n(rNe,"SPAN",{});var omt=s(Tpe);OUo=r(omt,"AutoModelForSpeechSeq2Seq"),omt.forEach(t),rNe.forEach(t),ZPe=i(f),Xo=n(f,"DIV",{class:!0});var rl=s(Xo);T(GA.$$.fragment,rl),VUo=i(rl),ud=n(rl,"P",{});var EK=s(ud);XUo=r(EK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),ZV=n(EK,"A",{href:!0});var rmt=s(ZV);zUo=r(rmt,"from_pretrained()"),rmt.forEach(t),QUo=r(EK," class method or the "),eX=n(EK,"A",{href:!0});var tmt=s(eX);WUo=r(tmt,"from_config()"),tmt.forEach(t),HUo=r(EK,` class
method.`),EK.forEach(t),UUo=i(rl),OA=n(rl,"P",{});var tNe=s(OA);JUo=r(tNe,"This class cannot be instantiated directly using "),Mpe=n(tNe,"CODE",{});var amt=s(Mpe);YUo=r(amt,"__init__()"),amt.forEach(t),KUo=r(tNe," (throws an error)."),tNe.forEach(t),ZUo=i(rl),bt=n(rl,"DIV",{class:!0});var CC=s(bt);T(VA.$$.fragment,CC),eJo=i(CC),Epe=n(CC,"P",{});var nmt=s(Epe);oJo=r(nmt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),nmt.forEach(t),rJo=i(CC),_d=n(CC,"P",{});var CK=s(_d);tJo=r(CK,`Note:
Loading a model from its configuration file does `),Cpe=n(CK,"STRONG",{});var smt=s(Cpe);aJo=r(smt,"not"),smt.forEach(t),nJo=r(CK,` load the model weights. It only affects the
model\u2019s configuration. Use `),oX=n(CK,"A",{href:!0});var lmt=s(oX);sJo=r(lmt,"from_pretrained()"),lmt.forEach(t),lJo=r(CK," to load the model weights."),CK.forEach(t),iJo=i(CC),T(w0.$$.fragment,CC),CC.forEach(t),dJo=i(rl),fo=n(rl,"DIV",{class:!0});var pa=s(fo);T(XA.$$.fragment,pa),cJo=i(pa),wpe=n(pa,"P",{});var imt=s(wpe);fJo=r(imt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),imt.forEach(t),mJo=i(pa),Va=n(pa,"P",{});var wC=s(Va);gJo=r(wC,"The model class to instantiate is selected based on the "),Ape=n(wC,"CODE",{});var dmt=s(Ape);hJo=r(dmt,"model_type"),dmt.forEach(t),pJo=r(wC,` property of the config object (either
passed as an argument or loaded from `),ype=n(wC,"CODE",{});var cmt=s(ype);uJo=r(cmt,"pretrained_model_name_or_path"),cmt.forEach(t),_Jo=r(wC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lpe=n(wC,"CODE",{});var fmt=s(Lpe);bJo=r(fmt,"pretrained_model_name_or_path"),fmt.forEach(t),vJo=r(wC,":"),wC.forEach(t),FJo=i(pa),zA=n(pa,"UL",{});var aNe=s(zA);A0=n(aNe,"LI",{});var rxe=s(A0);xpe=n(rxe,"STRONG",{});var mmt=s(xpe);TJo=r(mmt,"speech-encoder-decoder"),mmt.forEach(t),MJo=r(rxe," \u2014 "),rX=n(rxe,"A",{href:!0});var gmt=s(rX);EJo=r(gmt,"SpeechEncoderDecoderModel"),gmt.forEach(t),CJo=r(rxe," (Speech Encoder decoder model)"),rxe.forEach(t),wJo=i(aNe),y0=n(aNe,"LI",{});var txe=s(y0);$pe=n(txe,"STRONG",{});var hmt=s($pe);AJo=r(hmt,"speech_to_text"),hmt.forEach(t),yJo=r(txe," \u2014 "),tX=n(txe,"A",{href:!0});var pmt=s(tX);LJo=r(pmt,"Speech2TextForConditionalGeneration"),pmt.forEach(t),xJo=r(txe," (Speech2Text model)"),txe.forEach(t),aNe.forEach(t),$Jo=i(pa),L0=n(pa,"P",{});var axe=s(L0);kJo=r(axe,"The model is set in evaluation mode by default using "),kpe=n(axe,"CODE",{});var umt=s(kpe);SJo=r(umt,"model.eval()"),umt.forEach(t),RJo=r(axe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Spe=n(axe,"CODE",{});var _mt=s(Spe);BJo=r(_mt,"model.train()"),_mt.forEach(t),axe.forEach(t),PJo=i(pa),T(x0.$$.fragment,pa),pa.forEach(t),rl.forEach(t),eIe=i(f),bd=n(f,"H2",{class:!0});var nNe=s(bd);$0=n(nNe,"A",{id:!0,class:!0,href:!0});var bmt=s($0);Rpe=n(bmt,"SPAN",{});var vmt=s(Rpe);T(QA.$$.fragment,vmt),vmt.forEach(t),bmt.forEach(t),IJo=i(nNe),Bpe=n(nNe,"SPAN",{});var Fmt=s(Bpe);qJo=r(Fmt,"AutoModelForAudioXVector"),Fmt.forEach(t),nNe.forEach(t),oIe=i(f),zo=n(f,"DIV",{class:!0});var tl=s(zo);T(WA.$$.fragment,tl),NJo=i(tl),vd=n(tl,"P",{});var wK=s(vd);jJo=r(wK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),aX=n(wK,"A",{href:!0});var Tmt=s(aX);DJo=r(Tmt,"from_pretrained()"),Tmt.forEach(t),GJo=r(wK," class method or the "),nX=n(wK,"A",{href:!0});var Mmt=s(nX);OJo=r(Mmt,"from_config()"),Mmt.forEach(t),VJo=r(wK,` class
method.`),wK.forEach(t),XJo=i(tl),HA=n(tl,"P",{});var sNe=s(HA);zJo=r(sNe,"This class cannot be instantiated directly using "),Ppe=n(sNe,"CODE",{});var Emt=s(Ppe);QJo=r(Emt,"__init__()"),Emt.forEach(t),WJo=r(sNe," (throws an error)."),sNe.forEach(t),HJo=i(tl),vt=n(tl,"DIV",{class:!0});var AC=s(vt);T(UA.$$.fragment,AC),UJo=i(AC),Ipe=n(AC,"P",{});var Cmt=s(Ipe);JJo=r(Cmt,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Cmt.forEach(t),YJo=i(AC),Fd=n(AC,"P",{});var AK=s(Fd);KJo=r(AK,`Note:
Loading a model from its configuration file does `),qpe=n(AK,"STRONG",{});var wmt=s(qpe);ZJo=r(wmt,"not"),wmt.forEach(t),eYo=r(AK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sX=n(AK,"A",{href:!0});var Amt=s(sX);oYo=r(Amt,"from_pretrained()"),Amt.forEach(t),rYo=r(AK," to load the model weights."),AK.forEach(t),tYo=i(AC),T(k0.$$.fragment,AC),AC.forEach(t),aYo=i(tl),mo=n(tl,"DIV",{class:!0});var ua=s(mo);T(JA.$$.fragment,ua),nYo=i(ua),Npe=n(ua,"P",{});var ymt=s(Npe);sYo=r(ymt,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),ymt.forEach(t),lYo=i(ua),Xa=n(ua,"P",{});var yC=s(Xa);iYo=r(yC,"The model class to instantiate is selected based on the "),jpe=n(yC,"CODE",{});var Lmt=s(jpe);dYo=r(Lmt,"model_type"),Lmt.forEach(t),cYo=r(yC,` property of the config object (either
passed as an argument or loaded from `),Dpe=n(yC,"CODE",{});var xmt=s(Dpe);fYo=r(xmt,"pretrained_model_name_or_path"),xmt.forEach(t),mYo=r(yC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Gpe=n(yC,"CODE",{});var $mt=s(Gpe);gYo=r($mt,"pretrained_model_name_or_path"),$mt.forEach(t),hYo=r(yC,":"),yC.forEach(t),pYo=i(ua),za=n(ua,"UL",{});var LC=s(za);S0=n(LC,"LI",{});var nxe=s(S0);Ope=n(nxe,"STRONG",{});var kmt=s(Ope);uYo=r(kmt,"data2vec-audio"),kmt.forEach(t),_Yo=r(nxe," \u2014 "),lX=n(nxe,"A",{href:!0});var Smt=s(lX);bYo=r(Smt,"Data2VecAudioForXVector"),Smt.forEach(t),vYo=r(nxe," (Data2VecAudio model)"),nxe.forEach(t),FYo=i(LC),R0=n(LC,"LI",{});var sxe=s(R0);Vpe=n(sxe,"STRONG",{});var Rmt=s(Vpe);TYo=r(Rmt,"unispeech-sat"),Rmt.forEach(t),MYo=r(sxe," \u2014 "),iX=n(sxe,"A",{href:!0});var Bmt=s(iX);EYo=r(Bmt,"UniSpeechSatForXVector"),Bmt.forEach(t),CYo=r(sxe," (UniSpeechSat model)"),sxe.forEach(t),wYo=i(LC),B0=n(LC,"LI",{});var lxe=s(B0);Xpe=n(lxe,"STRONG",{});var Pmt=s(Xpe);AYo=r(Pmt,"wav2vec2"),Pmt.forEach(t),yYo=r(lxe," \u2014 "),dX=n(lxe,"A",{href:!0});var Imt=s(dX);LYo=r(Imt,"Wav2Vec2ForXVector"),Imt.forEach(t),xYo=r(lxe," (Wav2Vec2 model)"),lxe.forEach(t),$Yo=i(LC),P0=n(LC,"LI",{});var ixe=s(P0);zpe=n(ixe,"STRONG",{});var qmt=s(zpe);kYo=r(qmt,"wavlm"),qmt.forEach(t),SYo=r(ixe," \u2014 "),cX=n(ixe,"A",{href:!0});var Nmt=s(cX);RYo=r(Nmt,"WavLMForXVector"),Nmt.forEach(t),BYo=r(ixe," (WavLM model)"),ixe.forEach(t),LC.forEach(t),PYo=i(ua),I0=n(ua,"P",{});var dxe=s(I0);IYo=r(dxe,"The model is set in evaluation mode by default using "),Qpe=n(dxe,"CODE",{});var jmt=s(Qpe);qYo=r(jmt,"model.eval()"),jmt.forEach(t),NYo=r(dxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Wpe=n(dxe,"CODE",{});var Dmt=s(Wpe);jYo=r(Dmt,"model.train()"),Dmt.forEach(t),dxe.forEach(t),DYo=i(ua),T(q0.$$.fragment,ua),ua.forEach(t),tl.forEach(t),rIe=i(f),Td=n(f,"H2",{class:!0});var lNe=s(Td);N0=n(lNe,"A",{id:!0,class:!0,href:!0});var Gmt=s(N0);Hpe=n(Gmt,"SPAN",{});var Omt=s(Hpe);T(YA.$$.fragment,Omt),Omt.forEach(t),Gmt.forEach(t),GYo=i(lNe),Upe=n(lNe,"SPAN",{});var Vmt=s(Upe);OYo=r(Vmt,"AutoModelForMaskedImageModeling"),Vmt.forEach(t),lNe.forEach(t),tIe=i(f),Qo=n(f,"DIV",{class:!0});var al=s(Qo);T(KA.$$.fragment,al),VYo=i(al),Md=n(al,"P",{});var yK=s(Md);XYo=r(yK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),fX=n(yK,"A",{href:!0});var Xmt=s(fX);zYo=r(Xmt,"from_pretrained()"),Xmt.forEach(t),QYo=r(yK," class method or the "),mX=n(yK,"A",{href:!0});var zmt=s(mX);WYo=r(zmt,"from_config()"),zmt.forEach(t),HYo=r(yK,` class
method.`),yK.forEach(t),UYo=i(al),ZA=n(al,"P",{});var iNe=s(ZA);JYo=r(iNe,"This class cannot be instantiated directly using "),Jpe=n(iNe,"CODE",{});var Qmt=s(Jpe);YYo=r(Qmt,"__init__()"),Qmt.forEach(t),KYo=r(iNe," (throws an error)."),iNe.forEach(t),ZYo=i(al),Ft=n(al,"DIV",{class:!0});var xC=s(Ft);T(ey.$$.fragment,xC),eKo=i(xC),Ype=n(xC,"P",{});var Wmt=s(Ype);oKo=r(Wmt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Wmt.forEach(t),rKo=i(xC),Ed=n(xC,"P",{});var LK=s(Ed);tKo=r(LK,`Note:
Loading a model from its configuration file does `),Kpe=n(LK,"STRONG",{});var Hmt=s(Kpe);aKo=r(Hmt,"not"),Hmt.forEach(t),nKo=r(LK,` load the model weights. It only affects the
model\u2019s configuration. Use `),gX=n(LK,"A",{href:!0});var Umt=s(gX);sKo=r(Umt,"from_pretrained()"),Umt.forEach(t),lKo=r(LK," to load the model weights."),LK.forEach(t),iKo=i(xC),T(j0.$$.fragment,xC),xC.forEach(t),dKo=i(al),go=n(al,"DIV",{class:!0});var _a=s(go);T(oy.$$.fragment,_a),cKo=i(_a),Zpe=n(_a,"P",{});var Jmt=s(Zpe);fKo=r(Jmt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Jmt.forEach(t),mKo=i(_a),Qa=n(_a,"P",{});var $C=s(Qa);gKo=r($C,"The model class to instantiate is selected based on the "),eue=n($C,"CODE",{});var Ymt=s(eue);hKo=r(Ymt,"model_type"),Ymt.forEach(t),pKo=r($C,` property of the config object (either
passed as an argument or loaded from `),oue=n($C,"CODE",{});var Kmt=s(oue);uKo=r(Kmt,"pretrained_model_name_or_path"),Kmt.forEach(t),_Ko=r($C,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rue=n($C,"CODE",{});var Zmt=s(rue);bKo=r(Zmt,"pretrained_model_name_or_path"),Zmt.forEach(t),vKo=r($C,":"),$C.forEach(t),FKo=i(_a),Cd=n(_a,"UL",{});var xK=s(Cd);D0=n(xK,"LI",{});var cxe=s(D0);tue=n(cxe,"STRONG",{});var egt=s(tue);TKo=r(egt,"deit"),egt.forEach(t),MKo=r(cxe," \u2014 "),hX=n(cxe,"A",{href:!0});var ogt=s(hX);EKo=r(ogt,"DeiTForMaskedImageModeling"),ogt.forEach(t),CKo=r(cxe," (DeiT model)"),cxe.forEach(t),wKo=i(xK),G0=n(xK,"LI",{});var fxe=s(G0);aue=n(fxe,"STRONG",{});var rgt=s(aue);AKo=r(rgt,"swin"),rgt.forEach(t),yKo=r(fxe," \u2014 "),pX=n(fxe,"A",{href:!0});var tgt=s(pX);LKo=r(tgt,"SwinForMaskedImageModeling"),tgt.forEach(t),xKo=r(fxe," (Swin model)"),fxe.forEach(t),$Ko=i(xK),O0=n(xK,"LI",{});var mxe=s(O0);nue=n(mxe,"STRONG",{});var agt=s(nue);kKo=r(agt,"vit"),agt.forEach(t),SKo=r(mxe," \u2014 "),uX=n(mxe,"A",{href:!0});var ngt=s(uX);RKo=r(ngt,"ViTForMaskedImageModeling"),ngt.forEach(t),BKo=r(mxe," (ViT model)"),mxe.forEach(t),xK.forEach(t),PKo=i(_a),V0=n(_a,"P",{});var gxe=s(V0);IKo=r(gxe,"The model is set in evaluation mode by default using "),sue=n(gxe,"CODE",{});var sgt=s(sue);qKo=r(sgt,"model.eval()"),sgt.forEach(t),NKo=r(gxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),lue=n(gxe,"CODE",{});var lgt=s(lue);jKo=r(lgt,"model.train()"),lgt.forEach(t),gxe.forEach(t),DKo=i(_a),T(X0.$$.fragment,_a),_a.forEach(t),al.forEach(t),aIe=i(f),wd=n(f,"H2",{class:!0});var dNe=s(wd);z0=n(dNe,"A",{id:!0,class:!0,href:!0});var igt=s(z0);iue=n(igt,"SPAN",{});var dgt=s(iue);T(ry.$$.fragment,dgt),dgt.forEach(t),igt.forEach(t),GKo=i(dNe),due=n(dNe,"SPAN",{});var cgt=s(due);OKo=r(cgt,"AutoModelForObjectDetection"),cgt.forEach(t),dNe.forEach(t),nIe=i(f),Wo=n(f,"DIV",{class:!0});var nl=s(Wo);T(ty.$$.fragment,nl),VKo=i(nl),Ad=n(nl,"P",{});var $K=s(Ad);XKo=r($K,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),_X=n($K,"A",{href:!0});var fgt=s(_X);zKo=r(fgt,"from_pretrained()"),fgt.forEach(t),QKo=r($K," class method or the "),bX=n($K,"A",{href:!0});var mgt=s(bX);WKo=r(mgt,"from_config()"),mgt.forEach(t),HKo=r($K,` class
method.`),$K.forEach(t),UKo=i(nl),ay=n(nl,"P",{});var cNe=s(ay);JKo=r(cNe,"This class cannot be instantiated directly using "),cue=n(cNe,"CODE",{});var ggt=s(cue);YKo=r(ggt,"__init__()"),ggt.forEach(t),KKo=r(cNe," (throws an error)."),cNe.forEach(t),ZKo=i(nl),Tt=n(nl,"DIV",{class:!0});var kC=s(Tt);T(ny.$$.fragment,kC),eZo=i(kC),fue=n(kC,"P",{});var hgt=s(fue);oZo=r(hgt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),hgt.forEach(t),rZo=i(kC),yd=n(kC,"P",{});var kK=s(yd);tZo=r(kK,`Note:
Loading a model from its configuration file does `),mue=n(kK,"STRONG",{});var pgt=s(mue);aZo=r(pgt,"not"),pgt.forEach(t),nZo=r(kK,` load the model weights. It only affects the
model\u2019s configuration. Use `),vX=n(kK,"A",{href:!0});var ugt=s(vX);sZo=r(ugt,"from_pretrained()"),ugt.forEach(t),lZo=r(kK," to load the model weights."),kK.forEach(t),iZo=i(kC),T(Q0.$$.fragment,kC),kC.forEach(t),dZo=i(nl),ho=n(nl,"DIV",{class:!0});var ba=s(ho);T(sy.$$.fragment,ba),cZo=i(ba),gue=n(ba,"P",{});var _gt=s(gue);fZo=r(_gt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),_gt.forEach(t),mZo=i(ba),Wa=n(ba,"P",{});var SC=s(Wa);gZo=r(SC,"The model class to instantiate is selected based on the "),hue=n(SC,"CODE",{});var bgt=s(hue);hZo=r(bgt,"model_type"),bgt.forEach(t),pZo=r(SC,` property of the config object (either
passed as an argument or loaded from `),pue=n(SC,"CODE",{});var vgt=s(pue);uZo=r(vgt,"pretrained_model_name_or_path"),vgt.forEach(t),_Zo=r(SC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),uue=n(SC,"CODE",{});var Fgt=s(uue);bZo=r(Fgt,"pretrained_model_name_or_path"),Fgt.forEach(t),vZo=r(SC,":"),SC.forEach(t),FZo=i(ba),ly=n(ba,"UL",{});var fNe=s(ly);W0=n(fNe,"LI",{});var hxe=s(W0);_ue=n(hxe,"STRONG",{});var Tgt=s(_ue);TZo=r(Tgt,"detr"),Tgt.forEach(t),MZo=r(hxe," \u2014 "),FX=n(hxe,"A",{href:!0});var Mgt=s(FX);EZo=r(Mgt,"DetrForObjectDetection"),Mgt.forEach(t),CZo=r(hxe," (DETR model)"),hxe.forEach(t),wZo=i(fNe),H0=n(fNe,"LI",{});var pxe=s(H0);bue=n(pxe,"STRONG",{});var Egt=s(bue);AZo=r(Egt,"yolos"),Egt.forEach(t),yZo=r(pxe," \u2014 "),TX=n(pxe,"A",{href:!0});var Cgt=s(TX);LZo=r(Cgt,"YolosForObjectDetection"),Cgt.forEach(t),xZo=r(pxe," (YOLOS model)"),pxe.forEach(t),fNe.forEach(t),$Zo=i(ba),U0=n(ba,"P",{});var uxe=s(U0);kZo=r(uxe,"The model is set in evaluation mode by default using "),vue=n(uxe,"CODE",{});var wgt=s(vue);SZo=r(wgt,"model.eval()"),wgt.forEach(t),RZo=r(uxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Fue=n(uxe,"CODE",{});var Agt=s(Fue);BZo=r(Agt,"model.train()"),Agt.forEach(t),uxe.forEach(t),PZo=i(ba),T(J0.$$.fragment,ba),ba.forEach(t),nl.forEach(t),sIe=i(f),Ld=n(f,"H2",{class:!0});var mNe=s(Ld);Y0=n(mNe,"A",{id:!0,class:!0,href:!0});var ygt=s(Y0);Tue=n(ygt,"SPAN",{});var Lgt=s(Tue);T(iy.$$.fragment,Lgt),Lgt.forEach(t),ygt.forEach(t),IZo=i(mNe),Mue=n(mNe,"SPAN",{});var xgt=s(Mue);qZo=r(xgt,"AutoModelForImageSegmentation"),xgt.forEach(t),mNe.forEach(t),lIe=i(f),Ho=n(f,"DIV",{class:!0});var sl=s(Ho);T(dy.$$.fragment,sl),NZo=i(sl),xd=n(sl,"P",{});var SK=s(xd);jZo=r(SK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),MX=n(SK,"A",{href:!0});var $gt=s(MX);DZo=r($gt,"from_pretrained()"),$gt.forEach(t),GZo=r(SK," class method or the "),EX=n(SK,"A",{href:!0});var kgt=s(EX);OZo=r(kgt,"from_config()"),kgt.forEach(t),VZo=r(SK,` class
method.`),SK.forEach(t),XZo=i(sl),cy=n(sl,"P",{});var gNe=s(cy);zZo=r(gNe,"This class cannot be instantiated directly using "),Eue=n(gNe,"CODE",{});var Sgt=s(Eue);QZo=r(Sgt,"__init__()"),Sgt.forEach(t),WZo=r(gNe," (throws an error)."),gNe.forEach(t),HZo=i(sl),Mt=n(sl,"DIV",{class:!0});var RC=s(Mt);T(fy.$$.fragment,RC),UZo=i(RC),Cue=n(RC,"P",{});var Rgt=s(Cue);JZo=r(Rgt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Rgt.forEach(t),YZo=i(RC),$d=n(RC,"P",{});var RK=s($d);KZo=r(RK,`Note:
Loading a model from its configuration file does `),wue=n(RK,"STRONG",{});var Bgt=s(wue);ZZo=r(Bgt,"not"),Bgt.forEach(t),eer=r(RK,` load the model weights. It only affects the
model\u2019s configuration. Use `),CX=n(RK,"A",{href:!0});var Pgt=s(CX);oer=r(Pgt,"from_pretrained()"),Pgt.forEach(t),rer=r(RK," to load the model weights."),RK.forEach(t),ter=i(RC),T(K0.$$.fragment,RC),RC.forEach(t),aer=i(sl),po=n(sl,"DIV",{class:!0});var va=s(po);T(my.$$.fragment,va),ner=i(va),Aue=n(va,"P",{});var Igt=s(Aue);ser=r(Igt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Igt.forEach(t),ler=i(va),Ha=n(va,"P",{});var BC=s(Ha);ier=r(BC,"The model class to instantiate is selected based on the "),yue=n(BC,"CODE",{});var qgt=s(yue);der=r(qgt,"model_type"),qgt.forEach(t),cer=r(BC,` property of the config object (either
passed as an argument or loaded from `),Lue=n(BC,"CODE",{});var Ngt=s(Lue);fer=r(Ngt,"pretrained_model_name_or_path"),Ngt.forEach(t),mer=r(BC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),xue=n(BC,"CODE",{});var jgt=s(xue);ger=r(jgt,"pretrained_model_name_or_path"),jgt.forEach(t),her=r(BC,":"),BC.forEach(t),per=i(va),$ue=n(va,"UL",{});var Dgt=s($ue);Z0=n(Dgt,"LI",{});var _xe=s(Z0);kue=n(_xe,"STRONG",{});var Ggt=s(kue);uer=r(Ggt,"detr"),Ggt.forEach(t),_er=r(_xe," \u2014 "),wX=n(_xe,"A",{href:!0});var Ogt=s(wX);ber=r(Ogt,"DetrForSegmentation"),Ogt.forEach(t),ver=r(_xe," (DETR model)"),_xe.forEach(t),Dgt.forEach(t),Fer=i(va),e6=n(va,"P",{});var bxe=s(e6);Ter=r(bxe,"The model is set in evaluation mode by default using "),Sue=n(bxe,"CODE",{});var Vgt=s(Sue);Mer=r(Vgt,"model.eval()"),Vgt.forEach(t),Eer=r(bxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rue=n(bxe,"CODE",{});var Xgt=s(Rue);Cer=r(Xgt,"model.train()"),Xgt.forEach(t),bxe.forEach(t),wer=i(va),T(o6.$$.fragment,va),va.forEach(t),sl.forEach(t),iIe=i(f),kd=n(f,"H2",{class:!0});var hNe=s(kd);r6=n(hNe,"A",{id:!0,class:!0,href:!0});var zgt=s(r6);Bue=n(zgt,"SPAN",{});var Qgt=s(Bue);T(gy.$$.fragment,Qgt),Qgt.forEach(t),zgt.forEach(t),Aer=i(hNe),Pue=n(hNe,"SPAN",{});var Wgt=s(Pue);yer=r(Wgt,"AutoModelForSemanticSegmentation"),Wgt.forEach(t),hNe.forEach(t),dIe=i(f),Uo=n(f,"DIV",{class:!0});var ll=s(Uo);T(hy.$$.fragment,ll),Ler=i(ll),Sd=n(ll,"P",{});var BK=s(Sd);xer=r(BK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),AX=n(BK,"A",{href:!0});var Hgt=s(AX);$er=r(Hgt,"from_pretrained()"),Hgt.forEach(t),ker=r(BK," class method or the "),yX=n(BK,"A",{href:!0});var Ugt=s(yX);Ser=r(Ugt,"from_config()"),Ugt.forEach(t),Rer=r(BK,` class
method.`),BK.forEach(t),Ber=i(ll),py=n(ll,"P",{});var pNe=s(py);Per=r(pNe,"This class cannot be instantiated directly using "),Iue=n(pNe,"CODE",{});var Jgt=s(Iue);Ier=r(Jgt,"__init__()"),Jgt.forEach(t),qer=r(pNe," (throws an error)."),pNe.forEach(t),Ner=i(ll),Et=n(ll,"DIV",{class:!0});var PC=s(Et);T(uy.$$.fragment,PC),jer=i(PC),que=n(PC,"P",{});var Ygt=s(que);Der=r(Ygt,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),Ygt.forEach(t),Ger=i(PC),Rd=n(PC,"P",{});var PK=s(Rd);Oer=r(PK,`Note:
Loading a model from its configuration file does `),Nue=n(PK,"STRONG",{});var Kgt=s(Nue);Ver=r(Kgt,"not"),Kgt.forEach(t),Xer=r(PK,` load the model weights. It only affects the
model\u2019s configuration. Use `),LX=n(PK,"A",{href:!0});var Zgt=s(LX);zer=r(Zgt,"from_pretrained()"),Zgt.forEach(t),Qer=r(PK," to load the model weights."),PK.forEach(t),Wer=i(PC),T(t6.$$.fragment,PC),PC.forEach(t),Her=i(ll),uo=n(ll,"DIV",{class:!0});var Fa=s(uo);T(_y.$$.fragment,Fa),Uer=i(Fa),jue=n(Fa,"P",{});var eht=s(jue);Jer=r(eht,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),eht.forEach(t),Yer=i(Fa),Ua=n(Fa,"P",{});var IC=s(Ua);Ker=r(IC,"The model class to instantiate is selected based on the "),Due=n(IC,"CODE",{});var oht=s(Due);Zer=r(oht,"model_type"),oht.forEach(t),eor=r(IC,` property of the config object (either
passed as an argument or loaded from `),Gue=n(IC,"CODE",{});var rht=s(Gue);oor=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),ror=r(IC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oue=n(IC,"CODE",{});var tht=s(Oue);tor=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),aor=r(IC,":"),IC.forEach(t),nor=i(Fa),Ja=n(Fa,"UL",{});var qC=s(Ja);a6=n(qC,"LI",{});var vxe=s(a6);Vue=n(vxe,"STRONG",{});var aht=s(Vue);sor=r(aht,"beit"),aht.forEach(t),lor=r(vxe," \u2014 "),xX=n(vxe,"A",{href:!0});var nht=s(xX);ior=r(nht,"BeitForSemanticSegmentation"),nht.forEach(t),dor=r(vxe," (BEiT model)"),vxe.forEach(t),cor=i(qC),n6=n(qC,"LI",{});var Fxe=s(n6);Xue=n(Fxe,"STRONG",{});var sht=s(Xue);mor=r(sht,"data2vec-vision"),sht.forEach(t),gor=r(Fxe," \u2014 "),$X=n(Fxe,"A",{href:!0});var lht=s($X);hor=r(lht,"Data2VecVisionForSemanticSegmentation"),lht.forEach(t),por=r(Fxe," (Data2VecVision model)"),Fxe.forEach(t),uor=i(qC),s6=n(qC,"LI",{});var Txe=s(s6);zue=n(Txe,"STRONG",{});var iht=s(zue);_or=r(iht,"dpt"),iht.forEach(t),bor=r(Txe," \u2014 "),kX=n(Txe,"A",{href:!0});var dht=s(kX);vor=r(dht,"DPTForSemanticSegmentation"),dht.forEach(t),For=r(Txe," (DPT model)"),Txe.forEach(t),Tor=i(qC),l6=n(qC,"LI",{});var Mxe=s(l6);Que=n(Mxe,"STRONG",{});var cht=s(Que);Mor=r(cht,"segformer"),cht.forEach(t),Eor=r(Mxe," \u2014 "),SX=n(Mxe,"A",{href:!0});var fht=s(SX);Cor=r(fht,"SegformerForSemanticSegmentation"),fht.forEach(t),wor=r(Mxe," (SegFormer model)"),Mxe.forEach(t),qC.forEach(t),Aor=i(Fa),i6=n(Fa,"P",{});var Exe=s(i6);yor=r(Exe,"The model is set in evaluation mode by default using "),Wue=n(Exe,"CODE",{});var mht=s(Wue);Lor=r(mht,"model.eval()"),mht.forEach(t),xor=r(Exe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hue=n(Exe,"CODE",{});var ght=s(Hue);$or=r(ght,"model.train()"),ght.forEach(t),Exe.forEach(t),kor=i(Fa),T(d6.$$.fragment,Fa),Fa.forEach(t),ll.forEach(t),cIe=i(f),Bd=n(f,"H2",{class:!0});var uNe=s(Bd);c6=n(uNe,"A",{id:!0,class:!0,href:!0});var hht=s(c6);Uue=n(hht,"SPAN",{});var pht=s(Uue);T(by.$$.fragment,pht),pht.forEach(t),hht.forEach(t),Sor=i(uNe),Jue=n(uNe,"SPAN",{});var uht=s(Jue);Ror=r(uht,"AutoModelForInstanceSegmentation"),uht.forEach(t),uNe.forEach(t),fIe=i(f),Jo=n(f,"DIV",{class:!0});var il=s(Jo);T(vy.$$.fragment,il),Bor=i(il),Pd=n(il,"P",{});var IK=s(Pd);Por=r(IK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),RX=n(IK,"A",{href:!0});var _ht=s(RX);Ior=r(_ht,"from_pretrained()"),_ht.forEach(t),qor=r(IK," class method or the "),BX=n(IK,"A",{href:!0});var bht=s(BX);Nor=r(bht,"from_config()"),bht.forEach(t),jor=r(IK,` class
method.`),IK.forEach(t),Dor=i(il),Fy=n(il,"P",{});var _Ne=s(Fy);Gor=r(_Ne,"This class cannot be instantiated directly using "),Yue=n(_Ne,"CODE",{});var vht=s(Yue);Oor=r(vht,"__init__()"),vht.forEach(t),Vor=r(_Ne," (throws an error)."),_Ne.forEach(t),Xor=i(il),Ct=n(il,"DIV",{class:!0});var NC=s(Ct);T(Ty.$$.fragment,NC),zor=i(NC),Kue=n(NC,"P",{});var Fht=s(Kue);Qor=r(Fht,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),Fht.forEach(t),Wor=i(NC),Id=n(NC,"P",{});var qK=s(Id);Hor=r(qK,`Note:
Loading a model from its configuration file does `),Zue=n(qK,"STRONG",{});var Tht=s(Zue);Uor=r(Tht,"not"),Tht.forEach(t),Jor=r(qK,` load the model weights. It only affects the
model\u2019s configuration. Use `),PX=n(qK,"A",{href:!0});var Mht=s(PX);Yor=r(Mht,"from_pretrained()"),Mht.forEach(t),Kor=r(qK," to load the model weights."),qK.forEach(t),Zor=i(NC),T(f6.$$.fragment,NC),NC.forEach(t),err=i(il),_o=n(il,"DIV",{class:!0});var Ta=s(_o);T(My.$$.fragment,Ta),orr=i(Ta),e_e=n(Ta,"P",{});var Eht=s(e_e);rrr=r(Eht,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Eht.forEach(t),trr=i(Ta),Ya=n(Ta,"P",{});var jC=s(Ya);arr=r(jC,"The model class to instantiate is selected based on the "),o_e=n(jC,"CODE",{});var Cht=s(o_e);nrr=r(Cht,"model_type"),Cht.forEach(t),srr=r(jC,` property of the config object (either
passed as an argument or loaded from `),r_e=n(jC,"CODE",{});var wht=s(r_e);lrr=r(wht,"pretrained_model_name_or_path"),wht.forEach(t),irr=r(jC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),t_e=n(jC,"CODE",{});var Aht=s(t_e);drr=r(Aht,"pretrained_model_name_or_path"),Aht.forEach(t),crr=r(jC,":"),jC.forEach(t),frr=i(Ta),a_e=n(Ta,"UL",{});var yht=s(a_e);m6=n(yht,"LI",{});var Cxe=s(m6);n_e=n(Cxe,"STRONG",{});var Lht=s(n_e);mrr=r(Lht,"maskformer"),Lht.forEach(t),grr=r(Cxe," \u2014 "),IX=n(Cxe,"A",{href:!0});var xht=s(IX);hrr=r(xht,"MaskFormerForInstanceSegmentation"),xht.forEach(t),prr=r(Cxe," (MaskFormer model)"),Cxe.forEach(t),yht.forEach(t),urr=i(Ta),g6=n(Ta,"P",{});var wxe=s(g6);_rr=r(wxe,"The model is set in evaluation mode by default using "),s_e=n(wxe,"CODE",{});var $ht=s(s_e);brr=r($ht,"model.eval()"),$ht.forEach(t),vrr=r(wxe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),l_e=n(wxe,"CODE",{});var kht=s(l_e);Frr=r(kht,"model.train()"),kht.forEach(t),wxe.forEach(t),Trr=i(Ta),T(h6.$$.fragment,Ta),Ta.forEach(t),il.forEach(t),mIe=i(f),qd=n(f,"H2",{class:!0});var bNe=s(qd);p6=n(bNe,"A",{id:!0,class:!0,href:!0});var Sht=s(p6);i_e=n(Sht,"SPAN",{});var Rht=s(i_e);T(Ey.$$.fragment,Rht),Rht.forEach(t),Sht.forEach(t),Mrr=i(bNe),d_e=n(bNe,"SPAN",{});var Bht=s(d_e);Err=r(Bht,"TFAutoModel"),Bht.forEach(t),bNe.forEach(t),gIe=i(f),Yo=n(f,"DIV",{class:!0});var dl=s(Yo);T(Cy.$$.fragment,dl),Crr=i(dl),Nd=n(dl,"P",{});var NK=s(Nd);wrr=r(NK,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),qX=n(NK,"A",{href:!0});var Pht=s(qX);Arr=r(Pht,"from_pretrained()"),Pht.forEach(t),yrr=r(NK," class method or the "),NX=n(NK,"A",{href:!0});var Iht=s(NX);Lrr=r(Iht,"from_config()"),Iht.forEach(t),xrr=r(NK,` class
method.`),NK.forEach(t),$rr=i(dl),wy=n(dl,"P",{});var vNe=s(wy);krr=r(vNe,"This class cannot be instantiated directly using "),c_e=n(vNe,"CODE",{});var qht=s(c_e);Srr=r(qht,"__init__()"),qht.forEach(t),Rrr=r(vNe," (throws an error)."),vNe.forEach(t),Brr=i(dl),wt=n(dl,"DIV",{class:!0});var DC=s(wt);T(Ay.$$.fragment,DC),Prr=i(DC),f_e=n(DC,"P",{});var Nht=s(f_e);Irr=r(Nht,"Instantiates one of the base model classes of the library from a configuration."),Nht.forEach(t),qrr=i(DC),jd=n(DC,"P",{});var jK=s(jd);Nrr=r(jK,`Note:
Loading a model from its configuration file does `),m_e=n(jK,"STRONG",{});var jht=s(m_e);jrr=r(jht,"not"),jht.forEach(t),Drr=r(jK,` load the model weights. It only affects the
model\u2019s configuration. Use `),jX=n(jK,"A",{href:!0});var Dht=s(jX);Grr=r(Dht,"from_pretrained()"),Dht.forEach(t),Orr=r(jK," to load the model weights."),jK.forEach(t),Vrr=i(DC),T(u6.$$.fragment,DC),DC.forEach(t),Xrr=i(dl),wr=n(dl,"DIV",{class:!0});var cl=s(wr);T(yy.$$.fragment,cl),zrr=i(cl),g_e=n(cl,"P",{});var Ght=s(g_e);Qrr=r(Ght,"Instantiate one of the base model classes of the library from a pretrained model."),Ght.forEach(t),Wrr=i(cl),Ka=n(cl,"P",{});var GC=s(Ka);Hrr=r(GC,"The model class to instantiate is selected based on the "),h_e=n(GC,"CODE",{});var Oht=s(h_e);Urr=r(Oht,"model_type"),Oht.forEach(t),Jrr=r(GC,` property of the config object (either
passed as an argument or loaded from `),p_e=n(GC,"CODE",{});var Vht=s(p_e);Yrr=r(Vht,"pretrained_model_name_or_path"),Vht.forEach(t),Krr=r(GC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u_e=n(GC,"CODE",{});var Xht=s(u_e);Zrr=r(Xht,"pretrained_model_name_or_path"),Xht.forEach(t),etr=r(GC,":"),GC.forEach(t),otr=i(cl),j=n(cl,"UL",{});var D=s(j);_6=n(D,"LI",{});var Axe=s(_6);__e=n(Axe,"STRONG",{});var zht=s(__e);rtr=r(zht,"albert"),zht.forEach(t),ttr=r(Axe," \u2014 "),DX=n(Axe,"A",{href:!0});var Qht=s(DX);atr=r(Qht,"TFAlbertModel"),Qht.forEach(t),ntr=r(Axe," (ALBERT model)"),Axe.forEach(t),str=i(D),b6=n(D,"LI",{});var yxe=s(b6);b_e=n(yxe,"STRONG",{});var Wht=s(b_e);ltr=r(Wht,"bart"),Wht.forEach(t),itr=r(yxe," \u2014 "),GX=n(yxe,"A",{href:!0});var Hht=s(GX);dtr=r(Hht,"TFBartModel"),Hht.forEach(t),ctr=r(yxe," (BART model)"),yxe.forEach(t),ftr=i(D),v6=n(D,"LI",{});var Lxe=s(v6);v_e=n(Lxe,"STRONG",{});var Uht=s(v_e);mtr=r(Uht,"bert"),Uht.forEach(t),gtr=r(Lxe," \u2014 "),OX=n(Lxe,"A",{href:!0});var Jht=s(OX);htr=r(Jht,"TFBertModel"),Jht.forEach(t),ptr=r(Lxe," (BERT model)"),Lxe.forEach(t),utr=i(D),F6=n(D,"LI",{});var xxe=s(F6);F_e=n(xxe,"STRONG",{});var Yht=s(F_e);_tr=r(Yht,"blenderbot"),Yht.forEach(t),btr=r(xxe," \u2014 "),VX=n(xxe,"A",{href:!0});var Kht=s(VX);vtr=r(Kht,"TFBlenderbotModel"),Kht.forEach(t),Ftr=r(xxe," (Blenderbot model)"),xxe.forEach(t),Ttr=i(D),T6=n(D,"LI",{});var $xe=s(T6);T_e=n($xe,"STRONG",{});var Zht=s(T_e);Mtr=r(Zht,"blenderbot-small"),Zht.forEach(t),Etr=r($xe," \u2014 "),XX=n($xe,"A",{href:!0});var ept=s(XX);Ctr=r(ept,"TFBlenderbotSmallModel"),ept.forEach(t),wtr=r($xe," (BlenderbotSmall model)"),$xe.forEach(t),Atr=i(D),M6=n(D,"LI",{});var kxe=s(M6);M_e=n(kxe,"STRONG",{});var opt=s(M_e);ytr=r(opt,"camembert"),opt.forEach(t),Ltr=r(kxe," \u2014 "),zX=n(kxe,"A",{href:!0});var rpt=s(zX);xtr=r(rpt,"TFCamembertModel"),rpt.forEach(t),$tr=r(kxe," (CamemBERT model)"),kxe.forEach(t),ktr=i(D),E6=n(D,"LI",{});var Sxe=s(E6);E_e=n(Sxe,"STRONG",{});var tpt=s(E_e);Str=r(tpt,"clip"),tpt.forEach(t),Rtr=r(Sxe," \u2014 "),QX=n(Sxe,"A",{href:!0});var apt=s(QX);Btr=r(apt,"TFCLIPModel"),apt.forEach(t),Ptr=r(Sxe," (CLIP model)"),Sxe.forEach(t),Itr=i(D),C6=n(D,"LI",{});var Rxe=s(C6);C_e=n(Rxe,"STRONG",{});var npt=s(C_e);qtr=r(npt,"convbert"),npt.forEach(t),Ntr=r(Rxe," \u2014 "),WX=n(Rxe,"A",{href:!0});var spt=s(WX);jtr=r(spt,"TFConvBertModel"),spt.forEach(t),Dtr=r(Rxe," (ConvBERT model)"),Rxe.forEach(t),Gtr=i(D),w6=n(D,"LI",{});var Bxe=s(w6);w_e=n(Bxe,"STRONG",{});var lpt=s(w_e);Otr=r(lpt,"convnext"),lpt.forEach(t),Vtr=r(Bxe," \u2014 "),HX=n(Bxe,"A",{href:!0});var ipt=s(HX);Xtr=r(ipt,"TFConvNextModel"),ipt.forEach(t),ztr=r(Bxe," (ConvNext model)"),Bxe.forEach(t),Qtr=i(D),A6=n(D,"LI",{});var Pxe=s(A6);A_e=n(Pxe,"STRONG",{});var dpt=s(A_e);Wtr=r(dpt,"ctrl"),dpt.forEach(t),Htr=r(Pxe," \u2014 "),UX=n(Pxe,"A",{href:!0});var cpt=s(UX);Utr=r(cpt,"TFCTRLModel"),cpt.forEach(t),Jtr=r(Pxe," (CTRL model)"),Pxe.forEach(t),Ytr=i(D),y6=n(D,"LI",{});var Ixe=s(y6);y_e=n(Ixe,"STRONG",{});var fpt=s(y_e);Ktr=r(fpt,"data2vec-vision"),fpt.forEach(t),Ztr=r(Ixe," \u2014 "),JX=n(Ixe,"A",{href:!0});var mpt=s(JX);ear=r(mpt,"TFData2VecVisionModel"),mpt.forEach(t),oar=r(Ixe," (Data2VecVision model)"),Ixe.forEach(t),rar=i(D),L6=n(D,"LI",{});var qxe=s(L6);L_e=n(qxe,"STRONG",{});var gpt=s(L_e);tar=r(gpt,"deberta"),gpt.forEach(t),aar=r(qxe," \u2014 "),YX=n(qxe,"A",{href:!0});var hpt=s(YX);nar=r(hpt,"TFDebertaModel"),hpt.forEach(t),sar=r(qxe," (DeBERTa model)"),qxe.forEach(t),lar=i(D),x6=n(D,"LI",{});var Nxe=s(x6);x_e=n(Nxe,"STRONG",{});var ppt=s(x_e);iar=r(ppt,"deberta-v2"),ppt.forEach(t),dar=r(Nxe," \u2014 "),KX=n(Nxe,"A",{href:!0});var upt=s(KX);car=r(upt,"TFDebertaV2Model"),upt.forEach(t),far=r(Nxe," (DeBERTa-v2 model)"),Nxe.forEach(t),mar=i(D),$6=n(D,"LI",{});var jxe=s($6);$_e=n(jxe,"STRONG",{});var _pt=s($_e);gar=r(_pt,"distilbert"),_pt.forEach(t),har=r(jxe," \u2014 "),ZX=n(jxe,"A",{href:!0});var bpt=s(ZX);par=r(bpt,"TFDistilBertModel"),bpt.forEach(t),uar=r(jxe," (DistilBERT model)"),jxe.forEach(t),_ar=i(D),k6=n(D,"LI",{});var Dxe=s(k6);k_e=n(Dxe,"STRONG",{});var vpt=s(k_e);bar=r(vpt,"dpr"),vpt.forEach(t),Far=r(Dxe," \u2014 "),ez=n(Dxe,"A",{href:!0});var Fpt=s(ez);Tar=r(Fpt,"TFDPRQuestionEncoder"),Fpt.forEach(t),Mar=r(Dxe," (DPR model)"),Dxe.forEach(t),Ear=i(D),S6=n(D,"LI",{});var Gxe=s(S6);S_e=n(Gxe,"STRONG",{});var Tpt=s(S_e);Car=r(Tpt,"electra"),Tpt.forEach(t),war=r(Gxe," \u2014 "),oz=n(Gxe,"A",{href:!0});var Mpt=s(oz);Aar=r(Mpt,"TFElectraModel"),Mpt.forEach(t),yar=r(Gxe," (ELECTRA model)"),Gxe.forEach(t),Lar=i(D),R6=n(D,"LI",{});var Oxe=s(R6);R_e=n(Oxe,"STRONG",{});var Ept=s(R_e);xar=r(Ept,"flaubert"),Ept.forEach(t),$ar=r(Oxe," \u2014 "),rz=n(Oxe,"A",{href:!0});var Cpt=s(rz);kar=r(Cpt,"TFFlaubertModel"),Cpt.forEach(t),Sar=r(Oxe," (FlauBERT model)"),Oxe.forEach(t),Rar=i(D),Bs=n(D,"LI",{});var a$=s(Bs);B_e=n(a$,"STRONG",{});var wpt=s(B_e);Bar=r(wpt,"funnel"),wpt.forEach(t),Par=r(a$," \u2014 "),tz=n(a$,"A",{href:!0});var Apt=s(tz);Iar=r(Apt,"TFFunnelModel"),Apt.forEach(t),qar=r(a$," or "),az=n(a$,"A",{href:!0});var ypt=s(az);Nar=r(ypt,"TFFunnelBaseModel"),ypt.forEach(t),jar=r(a$," (Funnel Transformer model)"),a$.forEach(t),Dar=i(D),B6=n(D,"LI",{});var Vxe=s(B6);P_e=n(Vxe,"STRONG",{});var Lpt=s(P_e);Gar=r(Lpt,"gpt2"),Lpt.forEach(t),Oar=r(Vxe," \u2014 "),nz=n(Vxe,"A",{href:!0});var xpt=s(nz);Var=r(xpt,"TFGPT2Model"),xpt.forEach(t),Xar=r(Vxe," (OpenAI GPT-2 model)"),Vxe.forEach(t),zar=i(D),P6=n(D,"LI",{});var Xxe=s(P6);I_e=n(Xxe,"STRONG",{});var $pt=s(I_e);Qar=r($pt,"gptj"),$pt.forEach(t),War=r(Xxe," \u2014 "),sz=n(Xxe,"A",{href:!0});var kpt=s(sz);Har=r(kpt,"TFGPTJModel"),kpt.forEach(t),Uar=r(Xxe," (GPT-J model)"),Xxe.forEach(t),Jar=i(D),I6=n(D,"LI",{});var zxe=s(I6);q_e=n(zxe,"STRONG",{});var Spt=s(q_e);Yar=r(Spt,"hubert"),Spt.forEach(t),Kar=r(zxe," \u2014 "),lz=n(zxe,"A",{href:!0});var Rpt=s(lz);Zar=r(Rpt,"TFHubertModel"),Rpt.forEach(t),enr=r(zxe," (Hubert model)"),zxe.forEach(t),onr=i(D),q6=n(D,"LI",{});var Qxe=s(q6);N_e=n(Qxe,"STRONG",{});var Bpt=s(N_e);rnr=r(Bpt,"layoutlm"),Bpt.forEach(t),tnr=r(Qxe," \u2014 "),iz=n(Qxe,"A",{href:!0});var Ppt=s(iz);anr=r(Ppt,"TFLayoutLMModel"),Ppt.forEach(t),nnr=r(Qxe," (LayoutLM model)"),Qxe.forEach(t),snr=i(D),N6=n(D,"LI",{});var Wxe=s(N6);j_e=n(Wxe,"STRONG",{});var Ipt=s(j_e);lnr=r(Ipt,"led"),Ipt.forEach(t),inr=r(Wxe," \u2014 "),dz=n(Wxe,"A",{href:!0});var qpt=s(dz);dnr=r(qpt,"TFLEDModel"),qpt.forEach(t),cnr=r(Wxe," (LED model)"),Wxe.forEach(t),fnr=i(D),j6=n(D,"LI",{});var Hxe=s(j6);D_e=n(Hxe,"STRONG",{});var Npt=s(D_e);mnr=r(Npt,"longformer"),Npt.forEach(t),gnr=r(Hxe," \u2014 "),cz=n(Hxe,"A",{href:!0});var jpt=s(cz);hnr=r(jpt,"TFLongformerModel"),jpt.forEach(t),pnr=r(Hxe," (Longformer model)"),Hxe.forEach(t),unr=i(D),D6=n(D,"LI",{});var Uxe=s(D6);G_e=n(Uxe,"STRONG",{});var Dpt=s(G_e);_nr=r(Dpt,"lxmert"),Dpt.forEach(t),bnr=r(Uxe," \u2014 "),fz=n(Uxe,"A",{href:!0});var Gpt=s(fz);vnr=r(Gpt,"TFLxmertModel"),Gpt.forEach(t),Fnr=r(Uxe," (LXMERT model)"),Uxe.forEach(t),Tnr=i(D),G6=n(D,"LI",{});var Jxe=s(G6);O_e=n(Jxe,"STRONG",{});var Opt=s(O_e);Mnr=r(Opt,"marian"),Opt.forEach(t),Enr=r(Jxe," \u2014 "),mz=n(Jxe,"A",{href:!0});var Vpt=s(mz);Cnr=r(Vpt,"TFMarianModel"),Vpt.forEach(t),wnr=r(Jxe," (Marian model)"),Jxe.forEach(t),Anr=i(D),O6=n(D,"LI",{});var Yxe=s(O6);V_e=n(Yxe,"STRONG",{});var Xpt=s(V_e);ynr=r(Xpt,"mbart"),Xpt.forEach(t),Lnr=r(Yxe," \u2014 "),gz=n(Yxe,"A",{href:!0});var zpt=s(gz);xnr=r(zpt,"TFMBartModel"),zpt.forEach(t),$nr=r(Yxe," (mBART model)"),Yxe.forEach(t),knr=i(D),V6=n(D,"LI",{});var Kxe=s(V6);X_e=n(Kxe,"STRONG",{});var Qpt=s(X_e);Snr=r(Qpt,"mobilebert"),Qpt.forEach(t),Rnr=r(Kxe," \u2014 "),hz=n(Kxe,"A",{href:!0});var Wpt=s(hz);Bnr=r(Wpt,"TFMobileBertModel"),Wpt.forEach(t),Pnr=r(Kxe," (MobileBERT model)"),Kxe.forEach(t),Inr=i(D),X6=n(D,"LI",{});var Zxe=s(X6);z_e=n(Zxe,"STRONG",{});var Hpt=s(z_e);qnr=r(Hpt,"mpnet"),Hpt.forEach(t),Nnr=r(Zxe," \u2014 "),pz=n(Zxe,"A",{href:!0});var Upt=s(pz);jnr=r(Upt,"TFMPNetModel"),Upt.forEach(t),Dnr=r(Zxe," (MPNet model)"),Zxe.forEach(t),Gnr=i(D),z6=n(D,"LI",{});var e$e=s(z6);Q_e=n(e$e,"STRONG",{});var Jpt=s(Q_e);Onr=r(Jpt,"mt5"),Jpt.forEach(t),Vnr=r(e$e," \u2014 "),uz=n(e$e,"A",{href:!0});var Ypt=s(uz);Xnr=r(Ypt,"TFMT5Model"),Ypt.forEach(t),znr=r(e$e," (mT5 model)"),e$e.forEach(t),Qnr=i(D),Q6=n(D,"LI",{});var o$e=s(Q6);W_e=n(o$e,"STRONG",{});var Kpt=s(W_e);Wnr=r(Kpt,"openai-gpt"),Kpt.forEach(t),Hnr=r(o$e," \u2014 "),_z=n(o$e,"A",{href:!0});var Zpt=s(_z);Unr=r(Zpt,"TFOpenAIGPTModel"),Zpt.forEach(t),Jnr=r(o$e," (OpenAI GPT model)"),o$e.forEach(t),Ynr=i(D),W6=n(D,"LI",{});var r$e=s(W6);H_e=n(r$e,"STRONG",{});var eut=s(H_e);Knr=r(eut,"pegasus"),eut.forEach(t),Znr=r(r$e," \u2014 "),bz=n(r$e,"A",{href:!0});var out=s(bz);esr=r(out,"TFPegasusModel"),out.forEach(t),osr=r(r$e," (Pegasus model)"),r$e.forEach(t),rsr=i(D),H6=n(D,"LI",{});var t$e=s(H6);U_e=n(t$e,"STRONG",{});var rut=s(U_e);tsr=r(rut,"rembert"),rut.forEach(t),asr=r(t$e," \u2014 "),vz=n(t$e,"A",{href:!0});var tut=s(vz);nsr=r(tut,"TFRemBertModel"),tut.forEach(t),ssr=r(t$e," (RemBERT model)"),t$e.forEach(t),lsr=i(D),U6=n(D,"LI",{});var a$e=s(U6);J_e=n(a$e,"STRONG",{});var aut=s(J_e);isr=r(aut,"roberta"),aut.forEach(t),dsr=r(a$e," \u2014 "),Fz=n(a$e,"A",{href:!0});var nut=s(Fz);csr=r(nut,"TFRobertaModel"),nut.forEach(t),fsr=r(a$e," (RoBERTa model)"),a$e.forEach(t),msr=i(D),J6=n(D,"LI",{});var n$e=s(J6);Y_e=n(n$e,"STRONG",{});var sut=s(Y_e);gsr=r(sut,"roformer"),sut.forEach(t),hsr=r(n$e," \u2014 "),Tz=n(n$e,"A",{href:!0});var lut=s(Tz);psr=r(lut,"TFRoFormerModel"),lut.forEach(t),usr=r(n$e," (RoFormer model)"),n$e.forEach(t),_sr=i(D),Y6=n(D,"LI",{});var s$e=s(Y6);K_e=n(s$e,"STRONG",{});var iut=s(K_e);bsr=r(iut,"speech_to_text"),iut.forEach(t),vsr=r(s$e," \u2014 "),Mz=n(s$e,"A",{href:!0});var dut=s(Mz);Fsr=r(dut,"TFSpeech2TextModel"),dut.forEach(t),Tsr=r(s$e," (Speech2Text model)"),s$e.forEach(t),Msr=i(D),K6=n(D,"LI",{});var l$e=s(K6);Z_e=n(l$e,"STRONG",{});var cut=s(Z_e);Esr=r(cut,"t5"),cut.forEach(t),Csr=r(l$e," \u2014 "),Ez=n(l$e,"A",{href:!0});var fut=s(Ez);wsr=r(fut,"TFT5Model"),fut.forEach(t),Asr=r(l$e," (T5 model)"),l$e.forEach(t),ysr=i(D),Z6=n(D,"LI",{});var i$e=s(Z6);e1e=n(i$e,"STRONG",{});var mut=s(e1e);Lsr=r(mut,"tapas"),mut.forEach(t),xsr=r(i$e," \u2014 "),Cz=n(i$e,"A",{href:!0});var gut=s(Cz);$sr=r(gut,"TFTapasModel"),gut.forEach(t),ksr=r(i$e," (TAPAS model)"),i$e.forEach(t),Ssr=i(D),eT=n(D,"LI",{});var d$e=s(eT);o1e=n(d$e,"STRONG",{});var hut=s(o1e);Rsr=r(hut,"transfo-xl"),hut.forEach(t),Bsr=r(d$e," \u2014 "),wz=n(d$e,"A",{href:!0});var put=s(wz);Psr=r(put,"TFTransfoXLModel"),put.forEach(t),Isr=r(d$e," (Transformer-XL model)"),d$e.forEach(t),qsr=i(D),oT=n(D,"LI",{});var c$e=s(oT);r1e=n(c$e,"STRONG",{});var uut=s(r1e);Nsr=r(uut,"vit"),uut.forEach(t),jsr=r(c$e," \u2014 "),Az=n(c$e,"A",{href:!0});var _ut=s(Az);Dsr=r(_ut,"TFViTModel"),_ut.forEach(t),Gsr=r(c$e," (ViT model)"),c$e.forEach(t),Osr=i(D),rT=n(D,"LI",{});var f$e=s(rT);t1e=n(f$e,"STRONG",{});var but=s(t1e);Vsr=r(but,"vit_mae"),but.forEach(t),Xsr=r(f$e," \u2014 "),yz=n(f$e,"A",{href:!0});var vut=s(yz);zsr=r(vut,"TFViTMAEModel"),vut.forEach(t),Qsr=r(f$e," (ViTMAE model)"),f$e.forEach(t),Wsr=i(D),tT=n(D,"LI",{});var m$e=s(tT);a1e=n(m$e,"STRONG",{});var Fut=s(a1e);Hsr=r(Fut,"wav2vec2"),Fut.forEach(t),Usr=r(m$e," \u2014 "),Lz=n(m$e,"A",{href:!0});var Tut=s(Lz);Jsr=r(Tut,"TFWav2Vec2Model"),Tut.forEach(t),Ysr=r(m$e," (Wav2Vec2 model)"),m$e.forEach(t),Ksr=i(D),aT=n(D,"LI",{});var g$e=s(aT);n1e=n(g$e,"STRONG",{});var Mut=s(n1e);Zsr=r(Mut,"xlm"),Mut.forEach(t),elr=r(g$e," \u2014 "),xz=n(g$e,"A",{href:!0});var Eut=s(xz);olr=r(Eut,"TFXLMModel"),Eut.forEach(t),rlr=r(g$e," (XLM model)"),g$e.forEach(t),tlr=i(D),nT=n(D,"LI",{});var h$e=s(nT);s1e=n(h$e,"STRONG",{});var Cut=s(s1e);alr=r(Cut,"xlm-roberta"),Cut.forEach(t),nlr=r(h$e," \u2014 "),$z=n(h$e,"A",{href:!0});var wut=s($z);slr=r(wut,"TFXLMRobertaModel"),wut.forEach(t),llr=r(h$e," (XLM-RoBERTa model)"),h$e.forEach(t),ilr=i(D),sT=n(D,"LI",{});var p$e=s(sT);l1e=n(p$e,"STRONG",{});var Aut=s(l1e);dlr=r(Aut,"xlnet"),Aut.forEach(t),clr=r(p$e," \u2014 "),kz=n(p$e,"A",{href:!0});var yut=s(kz);flr=r(yut,"TFXLNetModel"),yut.forEach(t),mlr=r(p$e," (XLNet model)"),p$e.forEach(t),D.forEach(t),glr=i(cl),T(lT.$$.fragment,cl),cl.forEach(t),dl.forEach(t),hIe=i(f),Dd=n(f,"H2",{class:!0});var FNe=s(Dd);iT=n(FNe,"A",{id:!0,class:!0,href:!0});var Lut=s(iT);i1e=n(Lut,"SPAN",{});var xut=s(i1e);T(Ly.$$.fragment,xut),xut.forEach(t),Lut.forEach(t),hlr=i(FNe),d1e=n(FNe,"SPAN",{});var $ut=s(d1e);plr=r($ut,"TFAutoModelForPreTraining"),$ut.forEach(t),FNe.forEach(t),pIe=i(f),Ko=n(f,"DIV",{class:!0});var fl=s(Ko);T(xy.$$.fragment,fl),ulr=i(fl),Gd=n(fl,"P",{});var DK=s(Gd);_lr=r(DK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Sz=n(DK,"A",{href:!0});var kut=s(Sz);blr=r(kut,"from_pretrained()"),kut.forEach(t),vlr=r(DK," class method or the "),Rz=n(DK,"A",{href:!0});var Sut=s(Rz);Flr=r(Sut,"from_config()"),Sut.forEach(t),Tlr=r(DK,` class
method.`),DK.forEach(t),Mlr=i(fl),$y=n(fl,"P",{});var TNe=s($y);Elr=r(TNe,"This class cannot be instantiated directly using "),c1e=n(TNe,"CODE",{});var Rut=s(c1e);Clr=r(Rut,"__init__()"),Rut.forEach(t),wlr=r(TNe," (throws an error)."),TNe.forEach(t),Alr=i(fl),At=n(fl,"DIV",{class:!0});var OC=s(At);T(ky.$$.fragment,OC),ylr=i(OC),f1e=n(OC,"P",{});var But=s(f1e);Llr=r(But,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),But.forEach(t),xlr=i(OC),Od=n(OC,"P",{});var GK=s(Od);$lr=r(GK,`Note:
Loading a model from its configuration file does `),m1e=n(GK,"STRONG",{});var Put=s(m1e);klr=r(Put,"not"),Put.forEach(t),Slr=r(GK,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bz=n(GK,"A",{href:!0});var Iut=s(Bz);Rlr=r(Iut,"from_pretrained()"),Iut.forEach(t),Blr=r(GK," to load the model weights."),GK.forEach(t),Plr=i(OC),T(dT.$$.fragment,OC),OC.forEach(t),Ilr=i(fl),Ar=n(fl,"DIV",{class:!0});var ml=s(Ar);T(Sy.$$.fragment,ml),qlr=i(ml),g1e=n(ml,"P",{});var qut=s(g1e);Nlr=r(qut,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),qut.forEach(t),jlr=i(ml),Za=n(ml,"P",{});var VC=s(Za);Dlr=r(VC,"The model class to instantiate is selected based on the "),h1e=n(VC,"CODE",{});var Nut=s(h1e);Glr=r(Nut,"model_type"),Nut.forEach(t),Olr=r(VC,` property of the config object (either
passed as an argument or loaded from `),p1e=n(VC,"CODE",{});var jut=s(p1e);Vlr=r(jut,"pretrained_model_name_or_path"),jut.forEach(t),Xlr=r(VC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),u1e=n(VC,"CODE",{});var Dut=s(u1e);zlr=r(Dut,"pretrained_model_name_or_path"),Dut.forEach(t),Qlr=r(VC,":"),VC.forEach(t),Wlr=i(ml),ne=n(ml,"UL",{});var le=s(ne);cT=n(le,"LI",{});var u$e=s(cT);_1e=n(u$e,"STRONG",{});var Gut=s(_1e);Hlr=r(Gut,"albert"),Gut.forEach(t),Ulr=r(u$e," \u2014 "),Pz=n(u$e,"A",{href:!0});var Out=s(Pz);Jlr=r(Out,"TFAlbertForPreTraining"),Out.forEach(t),Ylr=r(u$e," (ALBERT model)"),u$e.forEach(t),Klr=i(le),fT=n(le,"LI",{});var _$e=s(fT);b1e=n(_$e,"STRONG",{});var Vut=s(b1e);Zlr=r(Vut,"bart"),Vut.forEach(t),eir=r(_$e," \u2014 "),Iz=n(_$e,"A",{href:!0});var Xut=s(Iz);oir=r(Xut,"TFBartForConditionalGeneration"),Xut.forEach(t),rir=r(_$e," (BART model)"),_$e.forEach(t),tir=i(le),mT=n(le,"LI",{});var b$e=s(mT);v1e=n(b$e,"STRONG",{});var zut=s(v1e);air=r(zut,"bert"),zut.forEach(t),nir=r(b$e," \u2014 "),qz=n(b$e,"A",{href:!0});var Qut=s(qz);sir=r(Qut,"TFBertForPreTraining"),Qut.forEach(t),lir=r(b$e," (BERT model)"),b$e.forEach(t),iir=i(le),gT=n(le,"LI",{});var v$e=s(gT);F1e=n(v$e,"STRONG",{});var Wut=s(F1e);dir=r(Wut,"camembert"),Wut.forEach(t),cir=r(v$e," \u2014 "),Nz=n(v$e,"A",{href:!0});var Hut=s(Nz);fir=r(Hut,"TFCamembertForMaskedLM"),Hut.forEach(t),mir=r(v$e," (CamemBERT model)"),v$e.forEach(t),gir=i(le),hT=n(le,"LI",{});var F$e=s(hT);T1e=n(F$e,"STRONG",{});var Uut=s(T1e);hir=r(Uut,"ctrl"),Uut.forEach(t),pir=r(F$e," \u2014 "),jz=n(F$e,"A",{href:!0});var Jut=s(jz);uir=r(Jut,"TFCTRLLMHeadModel"),Jut.forEach(t),_ir=r(F$e," (CTRL model)"),F$e.forEach(t),bir=i(le),pT=n(le,"LI",{});var T$e=s(pT);M1e=n(T$e,"STRONG",{});var Yut=s(M1e);vir=r(Yut,"distilbert"),Yut.forEach(t),Fir=r(T$e," \u2014 "),Dz=n(T$e,"A",{href:!0});var Kut=s(Dz);Tir=r(Kut,"TFDistilBertForMaskedLM"),Kut.forEach(t),Mir=r(T$e," (DistilBERT model)"),T$e.forEach(t),Eir=i(le),uT=n(le,"LI",{});var M$e=s(uT);E1e=n(M$e,"STRONG",{});var Zut=s(E1e);Cir=r(Zut,"electra"),Zut.forEach(t),wir=r(M$e," \u2014 "),Gz=n(M$e,"A",{href:!0});var e_t=s(Gz);Air=r(e_t,"TFElectraForPreTraining"),e_t.forEach(t),yir=r(M$e," (ELECTRA model)"),M$e.forEach(t),Lir=i(le),_T=n(le,"LI",{});var E$e=s(_T);C1e=n(E$e,"STRONG",{});var o_t=s(C1e);xir=r(o_t,"flaubert"),o_t.forEach(t),$ir=r(E$e," \u2014 "),Oz=n(E$e,"A",{href:!0});var r_t=s(Oz);kir=r(r_t,"TFFlaubertWithLMHeadModel"),r_t.forEach(t),Sir=r(E$e," (FlauBERT model)"),E$e.forEach(t),Rir=i(le),bT=n(le,"LI",{});var C$e=s(bT);w1e=n(C$e,"STRONG",{});var t_t=s(w1e);Bir=r(t_t,"funnel"),t_t.forEach(t),Pir=r(C$e," \u2014 "),Vz=n(C$e,"A",{href:!0});var a_t=s(Vz);Iir=r(a_t,"TFFunnelForPreTraining"),a_t.forEach(t),qir=r(C$e," (Funnel Transformer model)"),C$e.forEach(t),Nir=i(le),vT=n(le,"LI",{});var w$e=s(vT);A1e=n(w$e,"STRONG",{});var n_t=s(A1e);jir=r(n_t,"gpt2"),n_t.forEach(t),Dir=r(w$e," \u2014 "),Xz=n(w$e,"A",{href:!0});var s_t=s(Xz);Gir=r(s_t,"TFGPT2LMHeadModel"),s_t.forEach(t),Oir=r(w$e," (OpenAI GPT-2 model)"),w$e.forEach(t),Vir=i(le),FT=n(le,"LI",{});var A$e=s(FT);y1e=n(A$e,"STRONG",{});var l_t=s(y1e);Xir=r(l_t,"layoutlm"),l_t.forEach(t),zir=r(A$e," \u2014 "),zz=n(A$e,"A",{href:!0});var i_t=s(zz);Qir=r(i_t,"TFLayoutLMForMaskedLM"),i_t.forEach(t),Wir=r(A$e," (LayoutLM model)"),A$e.forEach(t),Hir=i(le),TT=n(le,"LI",{});var y$e=s(TT);L1e=n(y$e,"STRONG",{});var d_t=s(L1e);Uir=r(d_t,"lxmert"),d_t.forEach(t),Jir=r(y$e," \u2014 "),Qz=n(y$e,"A",{href:!0});var c_t=s(Qz);Yir=r(c_t,"TFLxmertForPreTraining"),c_t.forEach(t),Kir=r(y$e," (LXMERT model)"),y$e.forEach(t),Zir=i(le),MT=n(le,"LI",{});var L$e=s(MT);x1e=n(L$e,"STRONG",{});var f_t=s(x1e);edr=r(f_t,"mobilebert"),f_t.forEach(t),odr=r(L$e," \u2014 "),Wz=n(L$e,"A",{href:!0});var m_t=s(Wz);rdr=r(m_t,"TFMobileBertForPreTraining"),m_t.forEach(t),tdr=r(L$e," (MobileBERT model)"),L$e.forEach(t),adr=i(le),ET=n(le,"LI",{});var x$e=s(ET);$1e=n(x$e,"STRONG",{});var g_t=s($1e);ndr=r(g_t,"mpnet"),g_t.forEach(t),sdr=r(x$e," \u2014 "),Hz=n(x$e,"A",{href:!0});var h_t=s(Hz);ldr=r(h_t,"TFMPNetForMaskedLM"),h_t.forEach(t),idr=r(x$e," (MPNet model)"),x$e.forEach(t),ddr=i(le),CT=n(le,"LI",{});var $$e=s(CT);k1e=n($$e,"STRONG",{});var p_t=s(k1e);cdr=r(p_t,"openai-gpt"),p_t.forEach(t),fdr=r($$e," \u2014 "),Uz=n($$e,"A",{href:!0});var u_t=s(Uz);mdr=r(u_t,"TFOpenAIGPTLMHeadModel"),u_t.forEach(t),gdr=r($$e," (OpenAI GPT model)"),$$e.forEach(t),hdr=i(le),wT=n(le,"LI",{});var k$e=s(wT);S1e=n(k$e,"STRONG",{});var __t=s(S1e);pdr=r(__t,"roberta"),__t.forEach(t),udr=r(k$e," \u2014 "),Jz=n(k$e,"A",{href:!0});var b_t=s(Jz);_dr=r(b_t,"TFRobertaForMaskedLM"),b_t.forEach(t),bdr=r(k$e," (RoBERTa model)"),k$e.forEach(t),vdr=i(le),AT=n(le,"LI",{});var S$e=s(AT);R1e=n(S$e,"STRONG",{});var v_t=s(R1e);Fdr=r(v_t,"t5"),v_t.forEach(t),Tdr=r(S$e," \u2014 "),Yz=n(S$e,"A",{href:!0});var F_t=s(Yz);Mdr=r(F_t,"TFT5ForConditionalGeneration"),F_t.forEach(t),Edr=r(S$e," (T5 model)"),S$e.forEach(t),Cdr=i(le),yT=n(le,"LI",{});var R$e=s(yT);B1e=n(R$e,"STRONG",{});var T_t=s(B1e);wdr=r(T_t,"tapas"),T_t.forEach(t),Adr=r(R$e," \u2014 "),Kz=n(R$e,"A",{href:!0});var M_t=s(Kz);ydr=r(M_t,"TFTapasForMaskedLM"),M_t.forEach(t),Ldr=r(R$e," (TAPAS model)"),R$e.forEach(t),xdr=i(le),LT=n(le,"LI",{});var B$e=s(LT);P1e=n(B$e,"STRONG",{});var E_t=s(P1e);$dr=r(E_t,"transfo-xl"),E_t.forEach(t),kdr=r(B$e," \u2014 "),Zz=n(B$e,"A",{href:!0});var C_t=s(Zz);Sdr=r(C_t,"TFTransfoXLLMHeadModel"),C_t.forEach(t),Rdr=r(B$e," (Transformer-XL model)"),B$e.forEach(t),Bdr=i(le),xT=n(le,"LI",{});var P$e=s(xT);I1e=n(P$e,"STRONG",{});var w_t=s(I1e);Pdr=r(w_t,"vit_mae"),w_t.forEach(t),Idr=r(P$e," \u2014 "),eQ=n(P$e,"A",{href:!0});var A_t=s(eQ);qdr=r(A_t,"TFViTMAEForPreTraining"),A_t.forEach(t),Ndr=r(P$e," (ViTMAE model)"),P$e.forEach(t),jdr=i(le),$T=n(le,"LI",{});var I$e=s($T);q1e=n(I$e,"STRONG",{});var y_t=s(q1e);Ddr=r(y_t,"xlm"),y_t.forEach(t),Gdr=r(I$e," \u2014 "),oQ=n(I$e,"A",{href:!0});var L_t=s(oQ);Odr=r(L_t,"TFXLMWithLMHeadModel"),L_t.forEach(t),Vdr=r(I$e," (XLM model)"),I$e.forEach(t),Xdr=i(le),kT=n(le,"LI",{});var q$e=s(kT);N1e=n(q$e,"STRONG",{});var x_t=s(N1e);zdr=r(x_t,"xlm-roberta"),x_t.forEach(t),Qdr=r(q$e," \u2014 "),rQ=n(q$e,"A",{href:!0});var $_t=s(rQ);Wdr=r($_t,"TFXLMRobertaForMaskedLM"),$_t.forEach(t),Hdr=r(q$e," (XLM-RoBERTa model)"),q$e.forEach(t),Udr=i(le),ST=n(le,"LI",{});var N$e=s(ST);j1e=n(N$e,"STRONG",{});var k_t=s(j1e);Jdr=r(k_t,"xlnet"),k_t.forEach(t),Ydr=r(N$e," \u2014 "),tQ=n(N$e,"A",{href:!0});var S_t=s(tQ);Kdr=r(S_t,"TFXLNetLMHeadModel"),S_t.forEach(t),Zdr=r(N$e," (XLNet model)"),N$e.forEach(t),le.forEach(t),ecr=i(ml),T(RT.$$.fragment,ml),ml.forEach(t),fl.forEach(t),uIe=i(f),Vd=n(f,"H2",{class:!0});var MNe=s(Vd);BT=n(MNe,"A",{id:!0,class:!0,href:!0});var R_t=s(BT);D1e=n(R_t,"SPAN",{});var B_t=s(D1e);T(Ry.$$.fragment,B_t),B_t.forEach(t),R_t.forEach(t),ocr=i(MNe),G1e=n(MNe,"SPAN",{});var P_t=s(G1e);rcr=r(P_t,"TFAutoModelForCausalLM"),P_t.forEach(t),MNe.forEach(t),_Ie=i(f),Zo=n(f,"DIV",{class:!0});var gl=s(Zo);T(By.$$.fragment,gl),tcr=i(gl),Xd=n(gl,"P",{});var OK=s(Xd);acr=r(OK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),aQ=n(OK,"A",{href:!0});var I_t=s(aQ);ncr=r(I_t,"from_pretrained()"),I_t.forEach(t),scr=r(OK," class method or the "),nQ=n(OK,"A",{href:!0});var q_t=s(nQ);lcr=r(q_t,"from_config()"),q_t.forEach(t),icr=r(OK,` class
method.`),OK.forEach(t),dcr=i(gl),Py=n(gl,"P",{});var ENe=s(Py);ccr=r(ENe,"This class cannot be instantiated directly using "),O1e=n(ENe,"CODE",{});var N_t=s(O1e);fcr=r(N_t,"__init__()"),N_t.forEach(t),mcr=r(ENe," (throws an error)."),ENe.forEach(t),gcr=i(gl),yt=n(gl,"DIV",{class:!0});var XC=s(yt);T(Iy.$$.fragment,XC),hcr=i(XC),V1e=n(XC,"P",{});var j_t=s(V1e);pcr=r(j_t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),j_t.forEach(t),ucr=i(XC),zd=n(XC,"P",{});var VK=s(zd);_cr=r(VK,`Note:
Loading a model from its configuration file does `),X1e=n(VK,"STRONG",{});var D_t=s(X1e);bcr=r(D_t,"not"),D_t.forEach(t),vcr=r(VK,` load the model weights. It only affects the
model\u2019s configuration. Use `),sQ=n(VK,"A",{href:!0});var G_t=s(sQ);Fcr=r(G_t,"from_pretrained()"),G_t.forEach(t),Tcr=r(VK," to load the model weights."),VK.forEach(t),Mcr=i(XC),T(PT.$$.fragment,XC),XC.forEach(t),Ecr=i(gl),yr=n(gl,"DIV",{class:!0});var hl=s(yr);T(qy.$$.fragment,hl),Ccr=i(hl),z1e=n(hl,"P",{});var O_t=s(z1e);wcr=r(O_t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),O_t.forEach(t),Acr=i(hl),en=n(hl,"P",{});var zC=s(en);ycr=r(zC,"The model class to instantiate is selected based on the "),Q1e=n(zC,"CODE",{});var V_t=s(Q1e);Lcr=r(V_t,"model_type"),V_t.forEach(t),xcr=r(zC,` property of the config object (either
passed as an argument or loaded from `),W1e=n(zC,"CODE",{});var X_t=s(W1e);$cr=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),kcr=r(zC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),H1e=n(zC,"CODE",{});var z_t=s(H1e);Scr=r(z_t,"pretrained_model_name_or_path"),z_t.forEach(t),Rcr=r(zC,":"),zC.forEach(t),Bcr=i(hl),Te=n(hl,"UL",{});var Ce=s(Te);IT=n(Ce,"LI",{});var j$e=s(IT);U1e=n(j$e,"STRONG",{});var Q_t=s(U1e);Pcr=r(Q_t,"bert"),Q_t.forEach(t),Icr=r(j$e," \u2014 "),lQ=n(j$e,"A",{href:!0});var W_t=s(lQ);qcr=r(W_t,"TFBertLMHeadModel"),W_t.forEach(t),Ncr=r(j$e," (BERT model)"),j$e.forEach(t),jcr=i(Ce),qT=n(Ce,"LI",{});var D$e=s(qT);J1e=n(D$e,"STRONG",{});var H_t=s(J1e);Dcr=r(H_t,"camembert"),H_t.forEach(t),Gcr=r(D$e," \u2014 "),iQ=n(D$e,"A",{href:!0});var U_t=s(iQ);Ocr=r(U_t,"TFCamembertForCausalLM"),U_t.forEach(t),Vcr=r(D$e," (CamemBERT model)"),D$e.forEach(t),Xcr=i(Ce),NT=n(Ce,"LI",{});var G$e=s(NT);Y1e=n(G$e,"STRONG",{});var J_t=s(Y1e);zcr=r(J_t,"ctrl"),J_t.forEach(t),Qcr=r(G$e," \u2014 "),dQ=n(G$e,"A",{href:!0});var Y_t=s(dQ);Wcr=r(Y_t,"TFCTRLLMHeadModel"),Y_t.forEach(t),Hcr=r(G$e," (CTRL model)"),G$e.forEach(t),Ucr=i(Ce),jT=n(Ce,"LI",{});var O$e=s(jT);K1e=n(O$e,"STRONG",{});var K_t=s(K1e);Jcr=r(K_t,"gpt2"),K_t.forEach(t),Ycr=r(O$e," \u2014 "),cQ=n(O$e,"A",{href:!0});var Z_t=s(cQ);Kcr=r(Z_t,"TFGPT2LMHeadModel"),Z_t.forEach(t),Zcr=r(O$e," (OpenAI GPT-2 model)"),O$e.forEach(t),efr=i(Ce),DT=n(Ce,"LI",{});var V$e=s(DT);Z1e=n(V$e,"STRONG",{});var e1t=s(Z1e);ofr=r(e1t,"gptj"),e1t.forEach(t),rfr=r(V$e," \u2014 "),fQ=n(V$e,"A",{href:!0});var o1t=s(fQ);tfr=r(o1t,"TFGPTJForCausalLM"),o1t.forEach(t),afr=r(V$e," (GPT-J model)"),V$e.forEach(t),nfr=i(Ce),GT=n(Ce,"LI",{});var X$e=s(GT);ebe=n(X$e,"STRONG",{});var r1t=s(ebe);sfr=r(r1t,"openai-gpt"),r1t.forEach(t),lfr=r(X$e," \u2014 "),mQ=n(X$e,"A",{href:!0});var t1t=s(mQ);ifr=r(t1t,"TFOpenAIGPTLMHeadModel"),t1t.forEach(t),dfr=r(X$e," (OpenAI GPT model)"),X$e.forEach(t),cfr=i(Ce),OT=n(Ce,"LI",{});var z$e=s(OT);obe=n(z$e,"STRONG",{});var a1t=s(obe);ffr=r(a1t,"rembert"),a1t.forEach(t),mfr=r(z$e," \u2014 "),gQ=n(z$e,"A",{href:!0});var n1t=s(gQ);gfr=r(n1t,"TFRemBertForCausalLM"),n1t.forEach(t),hfr=r(z$e," (RemBERT model)"),z$e.forEach(t),pfr=i(Ce),VT=n(Ce,"LI",{});var Q$e=s(VT);rbe=n(Q$e,"STRONG",{});var s1t=s(rbe);ufr=r(s1t,"roberta"),s1t.forEach(t),_fr=r(Q$e," \u2014 "),hQ=n(Q$e,"A",{href:!0});var l1t=s(hQ);bfr=r(l1t,"TFRobertaForCausalLM"),l1t.forEach(t),vfr=r(Q$e," (RoBERTa model)"),Q$e.forEach(t),Ffr=i(Ce),XT=n(Ce,"LI",{});var W$e=s(XT);tbe=n(W$e,"STRONG",{});var i1t=s(tbe);Tfr=r(i1t,"roformer"),i1t.forEach(t),Mfr=r(W$e," \u2014 "),pQ=n(W$e,"A",{href:!0});var d1t=s(pQ);Efr=r(d1t,"TFRoFormerForCausalLM"),d1t.forEach(t),Cfr=r(W$e," (RoFormer model)"),W$e.forEach(t),wfr=i(Ce),zT=n(Ce,"LI",{});var H$e=s(zT);abe=n(H$e,"STRONG",{});var c1t=s(abe);Afr=r(c1t,"transfo-xl"),c1t.forEach(t),yfr=r(H$e," \u2014 "),uQ=n(H$e,"A",{href:!0});var f1t=s(uQ);Lfr=r(f1t,"TFTransfoXLLMHeadModel"),f1t.forEach(t),xfr=r(H$e," (Transformer-XL model)"),H$e.forEach(t),$fr=i(Ce),QT=n(Ce,"LI",{});var U$e=s(QT);nbe=n(U$e,"STRONG",{});var m1t=s(nbe);kfr=r(m1t,"xlm"),m1t.forEach(t),Sfr=r(U$e," \u2014 "),_Q=n(U$e,"A",{href:!0});var g1t=s(_Q);Rfr=r(g1t,"TFXLMWithLMHeadModel"),g1t.forEach(t),Bfr=r(U$e," (XLM model)"),U$e.forEach(t),Pfr=i(Ce),WT=n(Ce,"LI",{});var J$e=s(WT);sbe=n(J$e,"STRONG",{});var h1t=s(sbe);Ifr=r(h1t,"xlnet"),h1t.forEach(t),qfr=r(J$e," \u2014 "),bQ=n(J$e,"A",{href:!0});var p1t=s(bQ);Nfr=r(p1t,"TFXLNetLMHeadModel"),p1t.forEach(t),jfr=r(J$e," (XLNet model)"),J$e.forEach(t),Ce.forEach(t),Dfr=i(hl),T(HT.$$.fragment,hl),hl.forEach(t),gl.forEach(t),bIe=i(f),Qd=n(f,"H2",{class:!0});var CNe=s(Qd);UT=n(CNe,"A",{id:!0,class:!0,href:!0});var u1t=s(UT);lbe=n(u1t,"SPAN",{});var _1t=s(lbe);T(Ny.$$.fragment,_1t),_1t.forEach(t),u1t.forEach(t),Gfr=i(CNe),ibe=n(CNe,"SPAN",{});var b1t=s(ibe);Ofr=r(b1t,"TFAutoModelForImageClassification"),b1t.forEach(t),CNe.forEach(t),vIe=i(f),er=n(f,"DIV",{class:!0});var pl=s(er);T(jy.$$.fragment,pl),Vfr=i(pl),Wd=n(pl,"P",{});var XK=s(Wd);Xfr=r(XK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),vQ=n(XK,"A",{href:!0});var v1t=s(vQ);zfr=r(v1t,"from_pretrained()"),v1t.forEach(t),Qfr=r(XK," class method or the "),FQ=n(XK,"A",{href:!0});var F1t=s(FQ);Wfr=r(F1t,"from_config()"),F1t.forEach(t),Hfr=r(XK,` class
method.`),XK.forEach(t),Ufr=i(pl),Dy=n(pl,"P",{});var wNe=s(Dy);Jfr=r(wNe,"This class cannot be instantiated directly using "),dbe=n(wNe,"CODE",{});var T1t=s(dbe);Yfr=r(T1t,"__init__()"),T1t.forEach(t),Kfr=r(wNe," (throws an error)."),wNe.forEach(t),Zfr=i(pl),Lt=n(pl,"DIV",{class:!0});var QC=s(Lt);T(Gy.$$.fragment,QC),emr=i(QC),cbe=n(QC,"P",{});var M1t=s(cbe);omr=r(M1t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),M1t.forEach(t),rmr=i(QC),Hd=n(QC,"P",{});var zK=s(Hd);tmr=r(zK,`Note:
Loading a model from its configuration file does `),fbe=n(zK,"STRONG",{});var E1t=s(fbe);amr=r(E1t,"not"),E1t.forEach(t),nmr=r(zK,` load the model weights. It only affects the
model\u2019s configuration. Use `),TQ=n(zK,"A",{href:!0});var C1t=s(TQ);smr=r(C1t,"from_pretrained()"),C1t.forEach(t),lmr=r(zK," to load the model weights."),zK.forEach(t),imr=i(QC),T(JT.$$.fragment,QC),QC.forEach(t),dmr=i(pl),Lr=n(pl,"DIV",{class:!0});var ul=s(Lr);T(Oy.$$.fragment,ul),cmr=i(ul),mbe=n(ul,"P",{});var w1t=s(mbe);fmr=r(w1t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),w1t.forEach(t),mmr=i(ul),on=n(ul,"P",{});var WC=s(on);gmr=r(WC,"The model class to instantiate is selected based on the "),gbe=n(WC,"CODE",{});var A1t=s(gbe);hmr=r(A1t,"model_type"),A1t.forEach(t),pmr=r(WC,` property of the config object (either
passed as an argument or loaded from `),hbe=n(WC,"CODE",{});var y1t=s(hbe);umr=r(y1t,"pretrained_model_name_or_path"),y1t.forEach(t),_mr=r(WC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),pbe=n(WC,"CODE",{});var L1t=s(pbe);bmr=r(L1t,"pretrained_model_name_or_path"),L1t.forEach(t),vmr=r(WC,":"),WC.forEach(t),Fmr=i(ul),Ud=n(ul,"UL",{});var QK=s(Ud);YT=n(QK,"LI",{});var Y$e=s(YT);ube=n(Y$e,"STRONG",{});var x1t=s(ube);Tmr=r(x1t,"convnext"),x1t.forEach(t),Mmr=r(Y$e," \u2014 "),MQ=n(Y$e,"A",{href:!0});var $1t=s(MQ);Emr=r($1t,"TFConvNextForImageClassification"),$1t.forEach(t),Cmr=r(Y$e," (ConvNext model)"),Y$e.forEach(t),wmr=i(QK),KT=n(QK,"LI",{});var K$e=s(KT);_be=n(K$e,"STRONG",{});var k1t=s(_be);Amr=r(k1t,"data2vec-vision"),k1t.forEach(t),ymr=r(K$e," \u2014 "),EQ=n(K$e,"A",{href:!0});var S1t=s(EQ);Lmr=r(S1t,"TFData2VecVisionForImageClassification"),S1t.forEach(t),xmr=r(K$e," (Data2VecVision model)"),K$e.forEach(t),$mr=i(QK),ZT=n(QK,"LI",{});var Z$e=s(ZT);bbe=n(Z$e,"STRONG",{});var R1t=s(bbe);kmr=r(R1t,"vit"),R1t.forEach(t),Smr=r(Z$e," \u2014 "),CQ=n(Z$e,"A",{href:!0});var B1t=s(CQ);Rmr=r(B1t,"TFViTForImageClassification"),B1t.forEach(t),Bmr=r(Z$e," (ViT model)"),Z$e.forEach(t),QK.forEach(t),Pmr=i(ul),T(e7.$$.fragment,ul),ul.forEach(t),pl.forEach(t),FIe=i(f),Jd=n(f,"H2",{class:!0});var ANe=s(Jd);o7=n(ANe,"A",{id:!0,class:!0,href:!0});var P1t=s(o7);vbe=n(P1t,"SPAN",{});var I1t=s(vbe);T(Vy.$$.fragment,I1t),I1t.forEach(t),P1t.forEach(t),Imr=i(ANe),Fbe=n(ANe,"SPAN",{});var q1t=s(Fbe);qmr=r(q1t,"TFAutoModelForMaskedLM"),q1t.forEach(t),ANe.forEach(t),TIe=i(f),or=n(f,"DIV",{class:!0});var _l=s(or);T(Xy.$$.fragment,_l),Nmr=i(_l),Yd=n(_l,"P",{});var WK=s(Yd);jmr=r(WK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),wQ=n(WK,"A",{href:!0});var N1t=s(wQ);Dmr=r(N1t,"from_pretrained()"),N1t.forEach(t),Gmr=r(WK," class method or the "),AQ=n(WK,"A",{href:!0});var j1t=s(AQ);Omr=r(j1t,"from_config()"),j1t.forEach(t),Vmr=r(WK,` class
method.`),WK.forEach(t),Xmr=i(_l),zy=n(_l,"P",{});var yNe=s(zy);zmr=r(yNe,"This class cannot be instantiated directly using "),Tbe=n(yNe,"CODE",{});var D1t=s(Tbe);Qmr=r(D1t,"__init__()"),D1t.forEach(t),Wmr=r(yNe," (throws an error)."),yNe.forEach(t),Hmr=i(_l),xt=n(_l,"DIV",{class:!0});var HC=s(xt);T(Qy.$$.fragment,HC),Umr=i(HC),Mbe=n(HC,"P",{});var G1t=s(Mbe);Jmr=r(G1t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),G1t.forEach(t),Ymr=i(HC),Kd=n(HC,"P",{});var HK=s(Kd);Kmr=r(HK,`Note:
Loading a model from its configuration file does `),Ebe=n(HK,"STRONG",{});var O1t=s(Ebe);Zmr=r(O1t,"not"),O1t.forEach(t),egr=r(HK,` load the model weights. It only affects the
model\u2019s configuration. Use `),yQ=n(HK,"A",{href:!0});var V1t=s(yQ);ogr=r(V1t,"from_pretrained()"),V1t.forEach(t),rgr=r(HK," to load the model weights."),HK.forEach(t),tgr=i(HC),T(r7.$$.fragment,HC),HC.forEach(t),agr=i(_l),xr=n(_l,"DIV",{class:!0});var bl=s(xr);T(Wy.$$.fragment,bl),ngr=i(bl),Cbe=n(bl,"P",{});var X1t=s(Cbe);sgr=r(X1t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),X1t.forEach(t),lgr=i(bl),rn=n(bl,"P",{});var UC=s(rn);igr=r(UC,"The model class to instantiate is selected based on the "),wbe=n(UC,"CODE",{});var z1t=s(wbe);dgr=r(z1t,"model_type"),z1t.forEach(t),cgr=r(UC,` property of the config object (either
passed as an argument or loaded from `),Abe=n(UC,"CODE",{});var Q1t=s(Abe);fgr=r(Q1t,"pretrained_model_name_or_path"),Q1t.forEach(t),mgr=r(UC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ybe=n(UC,"CODE",{});var W1t=s(ybe);ggr=r(W1t,"pretrained_model_name_or_path"),W1t.forEach(t),hgr=r(UC,":"),UC.forEach(t),pgr=i(bl),ie=n(bl,"UL",{});var fe=s(ie);t7=n(fe,"LI",{});var eke=s(t7);Lbe=n(eke,"STRONG",{});var H1t=s(Lbe);ugr=r(H1t,"albert"),H1t.forEach(t),_gr=r(eke," \u2014 "),LQ=n(eke,"A",{href:!0});var U1t=s(LQ);bgr=r(U1t,"TFAlbertForMaskedLM"),U1t.forEach(t),vgr=r(eke," (ALBERT model)"),eke.forEach(t),Fgr=i(fe),a7=n(fe,"LI",{});var oke=s(a7);xbe=n(oke,"STRONG",{});var J1t=s(xbe);Tgr=r(J1t,"bert"),J1t.forEach(t),Mgr=r(oke," \u2014 "),xQ=n(oke,"A",{href:!0});var Y1t=s(xQ);Egr=r(Y1t,"TFBertForMaskedLM"),Y1t.forEach(t),Cgr=r(oke," (BERT model)"),oke.forEach(t),wgr=i(fe),n7=n(fe,"LI",{});var rke=s(n7);$be=n(rke,"STRONG",{});var K1t=s($be);Agr=r(K1t,"camembert"),K1t.forEach(t),ygr=r(rke," \u2014 "),$Q=n(rke,"A",{href:!0});var Z1t=s($Q);Lgr=r(Z1t,"TFCamembertForMaskedLM"),Z1t.forEach(t),xgr=r(rke," (CamemBERT model)"),rke.forEach(t),$gr=i(fe),s7=n(fe,"LI",{});var tke=s(s7);kbe=n(tke,"STRONG",{});var ebt=s(kbe);kgr=r(ebt,"convbert"),ebt.forEach(t),Sgr=r(tke," \u2014 "),kQ=n(tke,"A",{href:!0});var obt=s(kQ);Rgr=r(obt,"TFConvBertForMaskedLM"),obt.forEach(t),Bgr=r(tke," (ConvBERT model)"),tke.forEach(t),Pgr=i(fe),l7=n(fe,"LI",{});var ake=s(l7);Sbe=n(ake,"STRONG",{});var rbt=s(Sbe);Igr=r(rbt,"deberta"),rbt.forEach(t),qgr=r(ake," \u2014 "),SQ=n(ake,"A",{href:!0});var tbt=s(SQ);Ngr=r(tbt,"TFDebertaForMaskedLM"),tbt.forEach(t),jgr=r(ake," (DeBERTa model)"),ake.forEach(t),Dgr=i(fe),i7=n(fe,"LI",{});var nke=s(i7);Rbe=n(nke,"STRONG",{});var abt=s(Rbe);Ggr=r(abt,"deberta-v2"),abt.forEach(t),Ogr=r(nke," \u2014 "),RQ=n(nke,"A",{href:!0});var nbt=s(RQ);Vgr=r(nbt,"TFDebertaV2ForMaskedLM"),nbt.forEach(t),Xgr=r(nke," (DeBERTa-v2 model)"),nke.forEach(t),zgr=i(fe),d7=n(fe,"LI",{});var ske=s(d7);Bbe=n(ske,"STRONG",{});var sbt=s(Bbe);Qgr=r(sbt,"distilbert"),sbt.forEach(t),Wgr=r(ske," \u2014 "),BQ=n(ske,"A",{href:!0});var lbt=s(BQ);Hgr=r(lbt,"TFDistilBertForMaskedLM"),lbt.forEach(t),Ugr=r(ske," (DistilBERT model)"),ske.forEach(t),Jgr=i(fe),c7=n(fe,"LI",{});var lke=s(c7);Pbe=n(lke,"STRONG",{});var ibt=s(Pbe);Ygr=r(ibt,"electra"),ibt.forEach(t),Kgr=r(lke," \u2014 "),PQ=n(lke,"A",{href:!0});var dbt=s(PQ);Zgr=r(dbt,"TFElectraForMaskedLM"),dbt.forEach(t),ehr=r(lke," (ELECTRA model)"),lke.forEach(t),ohr=i(fe),f7=n(fe,"LI",{});var ike=s(f7);Ibe=n(ike,"STRONG",{});var cbt=s(Ibe);rhr=r(cbt,"flaubert"),cbt.forEach(t),thr=r(ike," \u2014 "),IQ=n(ike,"A",{href:!0});var fbt=s(IQ);ahr=r(fbt,"TFFlaubertWithLMHeadModel"),fbt.forEach(t),nhr=r(ike," (FlauBERT model)"),ike.forEach(t),shr=i(fe),m7=n(fe,"LI",{});var dke=s(m7);qbe=n(dke,"STRONG",{});var mbt=s(qbe);lhr=r(mbt,"funnel"),mbt.forEach(t),ihr=r(dke," \u2014 "),qQ=n(dke,"A",{href:!0});var gbt=s(qQ);dhr=r(gbt,"TFFunnelForMaskedLM"),gbt.forEach(t),chr=r(dke," (Funnel Transformer model)"),dke.forEach(t),fhr=i(fe),g7=n(fe,"LI",{});var cke=s(g7);Nbe=n(cke,"STRONG",{});var hbt=s(Nbe);mhr=r(hbt,"layoutlm"),hbt.forEach(t),ghr=r(cke," \u2014 "),NQ=n(cke,"A",{href:!0});var pbt=s(NQ);hhr=r(pbt,"TFLayoutLMForMaskedLM"),pbt.forEach(t),phr=r(cke," (LayoutLM model)"),cke.forEach(t),uhr=i(fe),h7=n(fe,"LI",{});var fke=s(h7);jbe=n(fke,"STRONG",{});var ubt=s(jbe);_hr=r(ubt,"longformer"),ubt.forEach(t),bhr=r(fke," \u2014 "),jQ=n(fke,"A",{href:!0});var _bt=s(jQ);vhr=r(_bt,"TFLongformerForMaskedLM"),_bt.forEach(t),Fhr=r(fke," (Longformer model)"),fke.forEach(t),Thr=i(fe),p7=n(fe,"LI",{});var mke=s(p7);Dbe=n(mke,"STRONG",{});var bbt=s(Dbe);Mhr=r(bbt,"mobilebert"),bbt.forEach(t),Ehr=r(mke," \u2014 "),DQ=n(mke,"A",{href:!0});var vbt=s(DQ);Chr=r(vbt,"TFMobileBertForMaskedLM"),vbt.forEach(t),whr=r(mke," (MobileBERT model)"),mke.forEach(t),Ahr=i(fe),u7=n(fe,"LI",{});var gke=s(u7);Gbe=n(gke,"STRONG",{});var Fbt=s(Gbe);yhr=r(Fbt,"mpnet"),Fbt.forEach(t),Lhr=r(gke," \u2014 "),GQ=n(gke,"A",{href:!0});var Tbt=s(GQ);xhr=r(Tbt,"TFMPNetForMaskedLM"),Tbt.forEach(t),$hr=r(gke," (MPNet model)"),gke.forEach(t),khr=i(fe),_7=n(fe,"LI",{});var hke=s(_7);Obe=n(hke,"STRONG",{});var Mbt=s(Obe);Shr=r(Mbt,"rembert"),Mbt.forEach(t),Rhr=r(hke," \u2014 "),OQ=n(hke,"A",{href:!0});var Ebt=s(OQ);Bhr=r(Ebt,"TFRemBertForMaskedLM"),Ebt.forEach(t),Phr=r(hke," (RemBERT model)"),hke.forEach(t),Ihr=i(fe),b7=n(fe,"LI",{});var pke=s(b7);Vbe=n(pke,"STRONG",{});var Cbt=s(Vbe);qhr=r(Cbt,"roberta"),Cbt.forEach(t),Nhr=r(pke," \u2014 "),VQ=n(pke,"A",{href:!0});var wbt=s(VQ);jhr=r(wbt,"TFRobertaForMaskedLM"),wbt.forEach(t),Dhr=r(pke," (RoBERTa model)"),pke.forEach(t),Ghr=i(fe),v7=n(fe,"LI",{});var uke=s(v7);Xbe=n(uke,"STRONG",{});var Abt=s(Xbe);Ohr=r(Abt,"roformer"),Abt.forEach(t),Vhr=r(uke," \u2014 "),XQ=n(uke,"A",{href:!0});var ybt=s(XQ);Xhr=r(ybt,"TFRoFormerForMaskedLM"),ybt.forEach(t),zhr=r(uke," (RoFormer model)"),uke.forEach(t),Qhr=i(fe),F7=n(fe,"LI",{});var _ke=s(F7);zbe=n(_ke,"STRONG",{});var Lbt=s(zbe);Whr=r(Lbt,"tapas"),Lbt.forEach(t),Hhr=r(_ke," \u2014 "),zQ=n(_ke,"A",{href:!0});var xbt=s(zQ);Uhr=r(xbt,"TFTapasForMaskedLM"),xbt.forEach(t),Jhr=r(_ke," (TAPAS model)"),_ke.forEach(t),Yhr=i(fe),T7=n(fe,"LI",{});var bke=s(T7);Qbe=n(bke,"STRONG",{});var $bt=s(Qbe);Khr=r($bt,"xlm"),$bt.forEach(t),Zhr=r(bke," \u2014 "),QQ=n(bke,"A",{href:!0});var kbt=s(QQ);epr=r(kbt,"TFXLMWithLMHeadModel"),kbt.forEach(t),opr=r(bke," (XLM model)"),bke.forEach(t),rpr=i(fe),M7=n(fe,"LI",{});var vke=s(M7);Wbe=n(vke,"STRONG",{});var Sbt=s(Wbe);tpr=r(Sbt,"xlm-roberta"),Sbt.forEach(t),apr=r(vke," \u2014 "),WQ=n(vke,"A",{href:!0});var Rbt=s(WQ);npr=r(Rbt,"TFXLMRobertaForMaskedLM"),Rbt.forEach(t),spr=r(vke," (XLM-RoBERTa model)"),vke.forEach(t),fe.forEach(t),lpr=i(bl),T(E7.$$.fragment,bl),bl.forEach(t),_l.forEach(t),MIe=i(f),Zd=n(f,"H2",{class:!0});var LNe=s(Zd);C7=n(LNe,"A",{id:!0,class:!0,href:!0});var Bbt=s(C7);Hbe=n(Bbt,"SPAN",{});var Pbt=s(Hbe);T(Hy.$$.fragment,Pbt),Pbt.forEach(t),Bbt.forEach(t),ipr=i(LNe),Ube=n(LNe,"SPAN",{});var Ibt=s(Ube);dpr=r(Ibt,"TFAutoModelForSeq2SeqLM"),Ibt.forEach(t),LNe.forEach(t),EIe=i(f),rr=n(f,"DIV",{class:!0});var vl=s(rr);T(Uy.$$.fragment,vl),cpr=i(vl),ec=n(vl,"P",{});var UK=s(ec);fpr=r(UK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),HQ=n(UK,"A",{href:!0});var qbt=s(HQ);mpr=r(qbt,"from_pretrained()"),qbt.forEach(t),gpr=r(UK," class method or the "),UQ=n(UK,"A",{href:!0});var Nbt=s(UQ);hpr=r(Nbt,"from_config()"),Nbt.forEach(t),ppr=r(UK,` class
method.`),UK.forEach(t),upr=i(vl),Jy=n(vl,"P",{});var xNe=s(Jy);_pr=r(xNe,"This class cannot be instantiated directly using "),Jbe=n(xNe,"CODE",{});var jbt=s(Jbe);bpr=r(jbt,"__init__()"),jbt.forEach(t),vpr=r(xNe," (throws an error)."),xNe.forEach(t),Fpr=i(vl),$t=n(vl,"DIV",{class:!0});var JC=s($t);T(Yy.$$.fragment,JC),Tpr=i(JC),Ybe=n(JC,"P",{});var Dbt=s(Ybe);Mpr=r(Dbt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Dbt.forEach(t),Epr=i(JC),oc=n(JC,"P",{});var JK=s(oc);Cpr=r(JK,`Note:
Loading a model from its configuration file does `),Kbe=n(JK,"STRONG",{});var Gbt=s(Kbe);wpr=r(Gbt,"not"),Gbt.forEach(t),Apr=r(JK,` load the model weights. It only affects the
model\u2019s configuration. Use `),JQ=n(JK,"A",{href:!0});var Obt=s(JQ);ypr=r(Obt,"from_pretrained()"),Obt.forEach(t),Lpr=r(JK," to load the model weights."),JK.forEach(t),xpr=i(JC),T(w7.$$.fragment,JC),JC.forEach(t),$pr=i(vl),$r=n(vl,"DIV",{class:!0});var Fl=s($r);T(Ky.$$.fragment,Fl),kpr=i(Fl),Zbe=n(Fl,"P",{});var Vbt=s(Zbe);Spr=r(Vbt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),Vbt.forEach(t),Rpr=i(Fl),tn=n(Fl,"P",{});var YC=s(tn);Bpr=r(YC,"The model class to instantiate is selected based on the "),e2e=n(YC,"CODE",{});var Xbt=s(e2e);Ppr=r(Xbt,"model_type"),Xbt.forEach(t),Ipr=r(YC,` property of the config object (either
passed as an argument or loaded from `),o2e=n(YC,"CODE",{});var zbt=s(o2e);qpr=r(zbt,"pretrained_model_name_or_path"),zbt.forEach(t),Npr=r(YC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r2e=n(YC,"CODE",{});var Qbt=s(r2e);jpr=r(Qbt,"pretrained_model_name_or_path"),Qbt.forEach(t),Dpr=r(YC,":"),YC.forEach(t),Gpr=i(Fl),ye=n(Fl,"UL",{});var Re=s(ye);A7=n(Re,"LI",{});var Fke=s(A7);t2e=n(Fke,"STRONG",{});var Wbt=s(t2e);Opr=r(Wbt,"bart"),Wbt.forEach(t),Vpr=r(Fke," \u2014 "),YQ=n(Fke,"A",{href:!0});var Hbt=s(YQ);Xpr=r(Hbt,"TFBartForConditionalGeneration"),Hbt.forEach(t),zpr=r(Fke," (BART model)"),Fke.forEach(t),Qpr=i(Re),y7=n(Re,"LI",{});var Tke=s(y7);a2e=n(Tke,"STRONG",{});var Ubt=s(a2e);Wpr=r(Ubt,"blenderbot"),Ubt.forEach(t),Hpr=r(Tke," \u2014 "),KQ=n(Tke,"A",{href:!0});var Jbt=s(KQ);Upr=r(Jbt,"TFBlenderbotForConditionalGeneration"),Jbt.forEach(t),Jpr=r(Tke," (Blenderbot model)"),Tke.forEach(t),Ypr=i(Re),L7=n(Re,"LI",{});var Mke=s(L7);n2e=n(Mke,"STRONG",{});var Ybt=s(n2e);Kpr=r(Ybt,"blenderbot-small"),Ybt.forEach(t),Zpr=r(Mke," \u2014 "),ZQ=n(Mke,"A",{href:!0});var Kbt=s(ZQ);eur=r(Kbt,"TFBlenderbotSmallForConditionalGeneration"),Kbt.forEach(t),our=r(Mke," (BlenderbotSmall model)"),Mke.forEach(t),rur=i(Re),x7=n(Re,"LI",{});var Eke=s(x7);s2e=n(Eke,"STRONG",{});var Zbt=s(s2e);tur=r(Zbt,"encoder-decoder"),Zbt.forEach(t),aur=r(Eke," \u2014 "),eW=n(Eke,"A",{href:!0});var e2t=s(eW);nur=r(e2t,"TFEncoderDecoderModel"),e2t.forEach(t),sur=r(Eke," (Encoder decoder model)"),Eke.forEach(t),lur=i(Re),$7=n(Re,"LI",{});var Cke=s($7);l2e=n(Cke,"STRONG",{});var o2t=s(l2e);iur=r(o2t,"led"),o2t.forEach(t),dur=r(Cke," \u2014 "),oW=n(Cke,"A",{href:!0});var r2t=s(oW);cur=r(r2t,"TFLEDForConditionalGeneration"),r2t.forEach(t),fur=r(Cke," (LED model)"),Cke.forEach(t),mur=i(Re),k7=n(Re,"LI",{});var wke=s(k7);i2e=n(wke,"STRONG",{});var t2t=s(i2e);gur=r(t2t,"marian"),t2t.forEach(t),hur=r(wke," \u2014 "),rW=n(wke,"A",{href:!0});var a2t=s(rW);pur=r(a2t,"TFMarianMTModel"),a2t.forEach(t),uur=r(wke," (Marian model)"),wke.forEach(t),_ur=i(Re),S7=n(Re,"LI",{});var Ake=s(S7);d2e=n(Ake,"STRONG",{});var n2t=s(d2e);bur=r(n2t,"mbart"),n2t.forEach(t),vur=r(Ake," \u2014 "),tW=n(Ake,"A",{href:!0});var s2t=s(tW);Fur=r(s2t,"TFMBartForConditionalGeneration"),s2t.forEach(t),Tur=r(Ake," (mBART model)"),Ake.forEach(t),Mur=i(Re),R7=n(Re,"LI",{});var yke=s(R7);c2e=n(yke,"STRONG",{});var l2t=s(c2e);Eur=r(l2t,"mt5"),l2t.forEach(t),Cur=r(yke," \u2014 "),aW=n(yke,"A",{href:!0});var i2t=s(aW);wur=r(i2t,"TFMT5ForConditionalGeneration"),i2t.forEach(t),Aur=r(yke," (mT5 model)"),yke.forEach(t),yur=i(Re),B7=n(Re,"LI",{});var Lke=s(B7);f2e=n(Lke,"STRONG",{});var d2t=s(f2e);Lur=r(d2t,"pegasus"),d2t.forEach(t),xur=r(Lke," \u2014 "),nW=n(Lke,"A",{href:!0});var c2t=s(nW);$ur=r(c2t,"TFPegasusForConditionalGeneration"),c2t.forEach(t),kur=r(Lke," (Pegasus model)"),Lke.forEach(t),Sur=i(Re),P7=n(Re,"LI",{});var xke=s(P7);m2e=n(xke,"STRONG",{});var f2t=s(m2e);Rur=r(f2t,"t5"),f2t.forEach(t),Bur=r(xke," \u2014 "),sW=n(xke,"A",{href:!0});var m2t=s(sW);Pur=r(m2t,"TFT5ForConditionalGeneration"),m2t.forEach(t),Iur=r(xke," (T5 model)"),xke.forEach(t),Re.forEach(t),qur=i(Fl),T(I7.$$.fragment,Fl),Fl.forEach(t),vl.forEach(t),CIe=i(f),rc=n(f,"H2",{class:!0});var $Ne=s(rc);q7=n($Ne,"A",{id:!0,class:!0,href:!0});var g2t=s(q7);g2e=n(g2t,"SPAN",{});var h2t=s(g2e);T(Zy.$$.fragment,h2t),h2t.forEach(t),g2t.forEach(t),Nur=i($Ne),h2e=n($Ne,"SPAN",{});var p2t=s(h2e);jur=r(p2t,"TFAutoModelForSequenceClassification"),p2t.forEach(t),$Ne.forEach(t),wIe=i(f),tr=n(f,"DIV",{class:!0});var Tl=s(tr);T(eL.$$.fragment,Tl),Dur=i(Tl),tc=n(Tl,"P",{});var YK=s(tc);Gur=r(YK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),lW=n(YK,"A",{href:!0});var u2t=s(lW);Our=r(u2t,"from_pretrained()"),u2t.forEach(t),Vur=r(YK," class method or the "),iW=n(YK,"A",{href:!0});var _2t=s(iW);Xur=r(_2t,"from_config()"),_2t.forEach(t),zur=r(YK,` class
method.`),YK.forEach(t),Qur=i(Tl),oL=n(Tl,"P",{});var kNe=s(oL);Wur=r(kNe,"This class cannot be instantiated directly using "),p2e=n(kNe,"CODE",{});var b2t=s(p2e);Hur=r(b2t,"__init__()"),b2t.forEach(t),Uur=r(kNe," (throws an error)."),kNe.forEach(t),Jur=i(Tl),kt=n(Tl,"DIV",{class:!0});var KC=s(kt);T(rL.$$.fragment,KC),Yur=i(KC),u2e=n(KC,"P",{});var v2t=s(u2e);Kur=r(v2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),v2t.forEach(t),Zur=i(KC),ac=n(KC,"P",{});var KK=s(ac);e_r=r(KK,`Note:
Loading a model from its configuration file does `),_2e=n(KK,"STRONG",{});var F2t=s(_2e);o_r=r(F2t,"not"),F2t.forEach(t),r_r=r(KK,` load the model weights. It only affects the
model\u2019s configuration. Use `),dW=n(KK,"A",{href:!0});var T2t=s(dW);t_r=r(T2t,"from_pretrained()"),T2t.forEach(t),a_r=r(KK," to load the model weights."),KK.forEach(t),n_r=i(KC),T(N7.$$.fragment,KC),KC.forEach(t),s_r=i(Tl),kr=n(Tl,"DIV",{class:!0});var Ml=s(kr);T(tL.$$.fragment,Ml),l_r=i(Ml),b2e=n(Ml,"P",{});var M2t=s(b2e);i_r=r(M2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),M2t.forEach(t),d_r=i(Ml),an=n(Ml,"P",{});var ZC=s(an);c_r=r(ZC,"The model class to instantiate is selected based on the "),v2e=n(ZC,"CODE",{});var E2t=s(v2e);f_r=r(E2t,"model_type"),E2t.forEach(t),m_r=r(ZC,` property of the config object (either
passed as an argument or loaded from `),F2e=n(ZC,"CODE",{});var C2t=s(F2e);g_r=r(C2t,"pretrained_model_name_or_path"),C2t.forEach(t),h_r=r(ZC,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T2e=n(ZC,"CODE",{});var w2t=s(T2e);p_r=r(w2t,"pretrained_model_name_or_path"),w2t.forEach(t),u_r=r(ZC,":"),ZC.forEach(t),__r=i(Ml),Z=n(Ml,"UL",{});var re=s(Z);j7=n(re,"LI",{});var $ke=s(j7);M2e=n($ke,"STRONG",{});var A2t=s(M2e);b_r=r(A2t,"albert"),A2t.forEach(t),v_r=r($ke," \u2014 "),cW=n($ke,"A",{href:!0});var y2t=s(cW);F_r=r(y2t,"TFAlbertForSequenceClassification"),y2t.forEach(t),T_r=r($ke," (ALBERT model)"),$ke.forEach(t),M_r=i(re),D7=n(re,"LI",{});var kke=s(D7);E2e=n(kke,"STRONG",{});var L2t=s(E2e);E_r=r(L2t,"bert"),L2t.forEach(t),C_r=r(kke," \u2014 "),fW=n(kke,"A",{href:!0});var x2t=s(fW);w_r=r(x2t,"TFBertForSequenceClassification"),x2t.forEach(t),A_r=r(kke," (BERT model)"),kke.forEach(t),y_r=i(re),G7=n(re,"LI",{});var Ske=s(G7);C2e=n(Ske,"STRONG",{});var $2t=s(C2e);L_r=r($2t,"camembert"),$2t.forEach(t),x_r=r(Ske," \u2014 "),mW=n(Ske,"A",{href:!0});var k2t=s(mW);$_r=r(k2t,"TFCamembertForSequenceClassification"),k2t.forEach(t),k_r=r(Ske," (CamemBERT model)"),Ske.forEach(t),S_r=i(re),O7=n(re,"LI",{});var Rke=s(O7);w2e=n(Rke,"STRONG",{});var S2t=s(w2e);R_r=r(S2t,"convbert"),S2t.forEach(t),B_r=r(Rke," \u2014 "),gW=n(Rke,"A",{href:!0});var R2t=s(gW);P_r=r(R2t,"TFConvBertForSequenceClassification"),R2t.forEach(t),I_r=r(Rke," (ConvBERT model)"),Rke.forEach(t),q_r=i(re),V7=n(re,"LI",{});var Bke=s(V7);A2e=n(Bke,"STRONG",{});var B2t=s(A2e);N_r=r(B2t,"ctrl"),B2t.forEach(t),j_r=r(Bke," \u2014 "),hW=n(Bke,"A",{href:!0});var P2t=s(hW);D_r=r(P2t,"TFCTRLForSequenceClassification"),P2t.forEach(t),G_r=r(Bke," (CTRL model)"),Bke.forEach(t),O_r=i(re),X7=n(re,"LI",{});var Pke=s(X7);y2e=n(Pke,"STRONG",{});var I2t=s(y2e);V_r=r(I2t,"deberta"),I2t.forEach(t),X_r=r(Pke," \u2014 "),pW=n(Pke,"A",{href:!0});var q2t=s(pW);z_r=r(q2t,"TFDebertaForSequenceClassification"),q2t.forEach(t),Q_r=r(Pke," (DeBERTa model)"),Pke.forEach(t),W_r=i(re),z7=n(re,"LI",{});var Ike=s(z7);L2e=n(Ike,"STRONG",{});var N2t=s(L2e);H_r=r(N2t,"deberta-v2"),N2t.forEach(t),U_r=r(Ike," \u2014 "),uW=n(Ike,"A",{href:!0});var j2t=s(uW);J_r=r(j2t,"TFDebertaV2ForSequenceClassification"),j2t.forEach(t),Y_r=r(Ike," (DeBERTa-v2 model)"),Ike.forEach(t),K_r=i(re),Q7=n(re,"LI",{});var qke=s(Q7);x2e=n(qke,"STRONG",{});var D2t=s(x2e);Z_r=r(D2t,"distilbert"),D2t.forEach(t),e1r=r(qke," \u2014 "),_W=n(qke,"A",{href:!0});var G2t=s(_W);o1r=r(G2t,"TFDistilBertForSequenceClassification"),G2t.forEach(t),r1r=r(qke," (DistilBERT model)"),qke.forEach(t),t1r=i(re),W7=n(re,"LI",{});var Nke=s(W7);$2e=n(Nke,"STRONG",{});var O2t=s($2e);a1r=r(O2t,"electra"),O2t.forEach(t),n1r=r(Nke," \u2014 "),bW=n(Nke,"A",{href:!0});var V2t=s(bW);s1r=r(V2t,"TFElectraForSequenceClassification"),V2t.forEach(t),l1r=r(Nke," (ELECTRA model)"),Nke.forEach(t),i1r=i(re),H7=n(re,"LI",{});var jke=s(H7);k2e=n(jke,"STRONG",{});var X2t=s(k2e);d1r=r(X2t,"flaubert"),X2t.forEach(t),c1r=r(jke," \u2014 "),vW=n(jke,"A",{href:!0});var z2t=s(vW);f1r=r(z2t,"TFFlaubertForSequenceClassification"),z2t.forEach(t),m1r=r(jke," (FlauBERT model)"),jke.forEach(t),g1r=i(re),U7=n(re,"LI",{});var Dke=s(U7);S2e=n(Dke,"STRONG",{});var Q2t=s(S2e);h1r=r(Q2t,"funnel"),Q2t.forEach(t),p1r=r(Dke," \u2014 "),FW=n(Dke,"A",{href:!0});var W2t=s(FW);u1r=r(W2t,"TFFunnelForSequenceClassification"),W2t.forEach(t),_1r=r(Dke," (Funnel Transformer model)"),Dke.forEach(t),b1r=i(re),J7=n(re,"LI",{});var Gke=s(J7);R2e=n(Gke,"STRONG",{});var H2t=s(R2e);v1r=r(H2t,"gpt2"),H2t.forEach(t),F1r=r(Gke," \u2014 "),TW=n(Gke,"A",{href:!0});var U2t=s(TW);T1r=r(U2t,"TFGPT2ForSequenceClassification"),U2t.forEach(t),M1r=r(Gke," (OpenAI GPT-2 model)"),Gke.forEach(t),E1r=i(re),Y7=n(re,"LI",{});var Oke=s(Y7);B2e=n(Oke,"STRONG",{});var J2t=s(B2e);C1r=r(J2t,"gptj"),J2t.forEach(t),w1r=r(Oke," \u2014 "),MW=n(Oke,"A",{href:!0});var Y2t=s(MW);A1r=r(Y2t,"TFGPTJForSequenceClassification"),Y2t.forEach(t),y1r=r(Oke," (GPT-J model)"),Oke.forEach(t),L1r=i(re),K7=n(re,"LI",{});var Vke=s(K7);P2e=n(Vke,"STRONG",{});var K2t=s(P2e);x1r=r(K2t,"layoutlm"),K2t.forEach(t),$1r=r(Vke," \u2014 "),EW=n(Vke,"A",{href:!0});var Z2t=s(EW);k1r=r(Z2t,"TFLayoutLMForSequenceClassification"),Z2t.forEach(t),S1r=r(Vke," (LayoutLM model)"),Vke.forEach(t),R1r=i(re),Z7=n(re,"LI",{});var Xke=s(Z7);I2e=n(Xke,"STRONG",{});var evt=s(I2e);B1r=r(evt,"longformer"),evt.forEach(t),P1r=r(Xke," \u2014 "),CW=n(Xke,"A",{href:!0});var ovt=s(CW);I1r=r(ovt,"TFLongformerForSequenceClassification"),ovt.forEach(t),q1r=r(Xke," (Longformer model)"),Xke.forEach(t),N1r=i(re),e9=n(re,"LI",{});var zke=s(e9);q2e=n(zke,"STRONG",{});var rvt=s(q2e);j1r=r(rvt,"mobilebert"),rvt.forEach(t),D1r=r(zke," \u2014 "),wW=n(zke,"A",{href:!0});var tvt=s(wW);G1r=r(tvt,"TFMobileBertForSequenceClassification"),tvt.forEach(t),O1r=r(zke," (MobileBERT model)"),zke.forEach(t),V1r=i(re),o9=n(re,"LI",{});var Qke=s(o9);N2e=n(Qke,"STRONG",{});var avt=s(N2e);X1r=r(avt,"mpnet"),avt.forEach(t),z1r=r(Qke," \u2014 "),AW=n(Qke,"A",{href:!0});var nvt=s(AW);Q1r=r(nvt,"TFMPNetForSequenceClassification"),nvt.forEach(t),W1r=r(Qke," (MPNet model)"),Qke.forEach(t),H1r=i(re),r9=n(re,"LI",{});var Wke=s(r9);j2e=n(Wke,"STRONG",{});var svt=s(j2e);U1r=r(svt,"openai-gpt"),svt.forEach(t),J1r=r(Wke," \u2014 "),yW=n(Wke,"A",{href:!0});var lvt=s(yW);Y1r=r(lvt,"TFOpenAIGPTForSequenceClassification"),lvt.forEach(t),K1r=r(Wke," (OpenAI GPT model)"),Wke.forEach(t),Z1r=i(re),t9=n(re,"LI",{});var Hke=s(t9);D2e=n(Hke,"STRONG",{});var ivt=s(D2e);ebr=r(ivt,"rembert"),ivt.forEach(t),obr=r(Hke," \u2014 "),LW=n(Hke,"A",{href:!0});var dvt=s(LW);rbr=r(dvt,"TFRemBertForSequenceClassification"),dvt.forEach(t),tbr=r(Hke," (RemBERT model)"),Hke.forEach(t),abr=i(re),a9=n(re,"LI",{});var Uke=s(a9);G2e=n(Uke,"STRONG",{});var cvt=s(G2e);nbr=r(cvt,"roberta"),cvt.forEach(t),sbr=r(Uke," \u2014 "),xW=n(Uke,"A",{href:!0});var fvt=s(xW);lbr=r(fvt,"TFRobertaForSequenceClassification"),fvt.forEach(t),ibr=r(Uke," (RoBERTa model)"),Uke.forEach(t),dbr=i(re),n9=n(re,"LI",{});var Jke=s(n9);O2e=n(Jke,"STRONG",{});var mvt=s(O2e);cbr=r(mvt,"roformer"),mvt.forEach(t),fbr=r(Jke," \u2014 "),$W=n(Jke,"A",{href:!0});var gvt=s($W);mbr=r(gvt,"TFRoFormerForSequenceClassification"),gvt.forEach(t),gbr=r(Jke," (RoFormer model)"),Jke.forEach(t),hbr=i(re),s9=n(re,"LI",{});var Yke=s(s9);V2e=n(Yke,"STRONG",{});var hvt=s(V2e);pbr=r(hvt,"tapas"),hvt.forEach(t),ubr=r(Yke," \u2014 "),kW=n(Yke,"A",{href:!0});var pvt=s(kW);_br=r(pvt,"TFTapasForSequenceClassification"),pvt.forEach(t),bbr=r(Yke," (TAPAS model)"),Yke.forEach(t),vbr=i(re),l9=n(re,"LI",{});var Kke=s(l9);X2e=n(Kke,"STRONG",{});var uvt=s(X2e);Fbr=r(uvt,"transfo-xl"),uvt.forEach(t),Tbr=r(Kke," \u2014 "),SW=n(Kke,"A",{href:!0});var _vt=s(SW);Mbr=r(_vt,"TFTransfoXLForSequenceClassification"),_vt.forEach(t),Ebr=r(Kke," (Transformer-XL model)"),Kke.forEach(t),Cbr=i(re),i9=n(re,"LI",{});var Zke=s(i9);z2e=n(Zke,"STRONG",{});var bvt=s(z2e);wbr=r(bvt,"xlm"),bvt.forEach(t),Abr=r(Zke," \u2014 "),RW=n(Zke,"A",{href:!0});var vvt=s(RW);ybr=r(vvt,"TFXLMForSequenceClassification"),vvt.forEach(t),Lbr=r(Zke," (XLM model)"),Zke.forEach(t),xbr=i(re),d9=n(re,"LI",{});var eSe=s(d9);Q2e=n(eSe,"STRONG",{});var Fvt=s(Q2e);$br=r(Fvt,"xlm-roberta"),Fvt.forEach(t),kbr=r(eSe," \u2014 "),BW=n(eSe,"A",{href:!0});var Tvt=s(BW);Sbr=r(Tvt,"TFXLMRobertaForSequenceClassification"),Tvt.forEach(t),Rbr=r(eSe," (XLM-RoBERTa model)"),eSe.forEach(t),Bbr=i(re),c9=n(re,"LI",{});var oSe=s(c9);W2e=n(oSe,"STRONG",{});var Mvt=s(W2e);Pbr=r(Mvt,"xlnet"),Mvt.forEach(t),Ibr=r(oSe," \u2014 "),PW=n(oSe,"A",{href:!0});var Evt=s(PW);qbr=r(Evt,"TFXLNetForSequenceClassification"),Evt.forEach(t),Nbr=r(oSe," (XLNet model)"),oSe.forEach(t),re.forEach(t),jbr=i(Ml),T(f9.$$.fragment,Ml),Ml.forEach(t),Tl.forEach(t),AIe=i(f),nc=n(f,"H2",{class:!0});var SNe=s(nc);m9=n(SNe,"A",{id:!0,class:!0,href:!0});var Cvt=s(m9);H2e=n(Cvt,"SPAN",{});var wvt=s(H2e);T(aL.$$.fragment,wvt),wvt.forEach(t),Cvt.forEach(t),Dbr=i(SNe),U2e=n(SNe,"SPAN",{});var Avt=s(U2e);Gbr=r(Avt,"TFAutoModelForMultipleChoice"),Avt.forEach(t),SNe.forEach(t),yIe=i(f),ar=n(f,"DIV",{class:!0});var El=s(ar);T(nL.$$.fragment,El),Obr=i(El),sc=n(El,"P",{});var ZK=s(sc);Vbr=r(ZK,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),IW=n(ZK,"A",{href:!0});var yvt=s(IW);Xbr=r(yvt,"from_pretrained()"),yvt.forEach(t),zbr=r(ZK," class method or the "),qW=n(ZK,"A",{href:!0});var Lvt=s(qW);Qbr=r(Lvt,"from_config()"),Lvt.forEach(t),Wbr=r(ZK,` class
method.`),ZK.forEach(t),Hbr=i(El),sL=n(El,"P",{});var RNe=s(sL);Ubr=r(RNe,"This class cannot be instantiated directly using "),J2e=n(RNe,"CODE",{});var xvt=s(J2e);Jbr=r(xvt,"__init__()"),xvt.forEach(t),Ybr=r(RNe," (throws an error)."),RNe.forEach(t),Kbr=i(El),St=n(El,"DIV",{class:!0});var e3=s(St);T(lL.$$.fragment,e3),Zbr=i(e3),Y2e=n(e3,"P",{});var $vt=s(Y2e);e2r=r($vt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),$vt.forEach(t),o2r=i(e3),lc=n(e3,"P",{});var eZ=s(lc);r2r=r(eZ,`Note:
Loading a model from its configuration file does `),K2e=n(eZ,"STRONG",{});var kvt=s(K2e);t2r=r(kvt,"not"),kvt.forEach(t),a2r=r(eZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),NW=n(eZ,"A",{href:!0});var Svt=s(NW);n2r=r(Svt,"from_pretrained()"),Svt.forEach(t),s2r=r(eZ," to load the model weights."),eZ.forEach(t),l2r=i(e3),T(g9.$$.fragment,e3),e3.forEach(t),i2r=i(El),Sr=n(El,"DIV",{class:!0});var Cl=s(Sr);T(iL.$$.fragment,Cl),d2r=i(Cl),Z2e=n(Cl,"P",{});var Rvt=s(Z2e);c2r=r(Rvt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Rvt.forEach(t),f2r=i(Cl),nn=n(Cl,"P",{});var o3=s(nn);m2r=r(o3,"The model class to instantiate is selected based on the "),eve=n(o3,"CODE",{});var Bvt=s(eve);g2r=r(Bvt,"model_type"),Bvt.forEach(t),h2r=r(o3,` property of the config object (either
passed as an argument or loaded from `),ove=n(o3,"CODE",{});var Pvt=s(ove);p2r=r(Pvt,"pretrained_model_name_or_path"),Pvt.forEach(t),u2r=r(o3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),rve=n(o3,"CODE",{});var Ivt=s(rve);_2r=r(Ivt,"pretrained_model_name_or_path"),Ivt.forEach(t),b2r=r(o3,":"),o3.forEach(t),v2r=i(Cl),pe=n(Cl,"UL",{});var _e=s(pe);h9=n(_e,"LI",{});var rSe=s(h9);tve=n(rSe,"STRONG",{});var qvt=s(tve);F2r=r(qvt,"albert"),qvt.forEach(t),T2r=r(rSe," \u2014 "),jW=n(rSe,"A",{href:!0});var Nvt=s(jW);M2r=r(Nvt,"TFAlbertForMultipleChoice"),Nvt.forEach(t),E2r=r(rSe," (ALBERT model)"),rSe.forEach(t),C2r=i(_e),p9=n(_e,"LI",{});var tSe=s(p9);ave=n(tSe,"STRONG",{});var jvt=s(ave);w2r=r(jvt,"bert"),jvt.forEach(t),A2r=r(tSe," \u2014 "),DW=n(tSe,"A",{href:!0});var Dvt=s(DW);y2r=r(Dvt,"TFBertForMultipleChoice"),Dvt.forEach(t),L2r=r(tSe," (BERT model)"),tSe.forEach(t),x2r=i(_e),u9=n(_e,"LI",{});var aSe=s(u9);nve=n(aSe,"STRONG",{});var Gvt=s(nve);$2r=r(Gvt,"camembert"),Gvt.forEach(t),k2r=r(aSe," \u2014 "),GW=n(aSe,"A",{href:!0});var Ovt=s(GW);S2r=r(Ovt,"TFCamembertForMultipleChoice"),Ovt.forEach(t),R2r=r(aSe," (CamemBERT model)"),aSe.forEach(t),B2r=i(_e),_9=n(_e,"LI",{});var nSe=s(_9);sve=n(nSe,"STRONG",{});var Vvt=s(sve);P2r=r(Vvt,"convbert"),Vvt.forEach(t),I2r=r(nSe," \u2014 "),OW=n(nSe,"A",{href:!0});var Xvt=s(OW);q2r=r(Xvt,"TFConvBertForMultipleChoice"),Xvt.forEach(t),N2r=r(nSe," (ConvBERT model)"),nSe.forEach(t),j2r=i(_e),b9=n(_e,"LI",{});var sSe=s(b9);lve=n(sSe,"STRONG",{});var zvt=s(lve);D2r=r(zvt,"distilbert"),zvt.forEach(t),G2r=r(sSe," \u2014 "),VW=n(sSe,"A",{href:!0});var Qvt=s(VW);O2r=r(Qvt,"TFDistilBertForMultipleChoice"),Qvt.forEach(t),V2r=r(sSe," (DistilBERT model)"),sSe.forEach(t),X2r=i(_e),v9=n(_e,"LI",{});var lSe=s(v9);ive=n(lSe,"STRONG",{});var Wvt=s(ive);z2r=r(Wvt,"electra"),Wvt.forEach(t),Q2r=r(lSe," \u2014 "),XW=n(lSe,"A",{href:!0});var Hvt=s(XW);W2r=r(Hvt,"TFElectraForMultipleChoice"),Hvt.forEach(t),H2r=r(lSe," (ELECTRA model)"),lSe.forEach(t),U2r=i(_e),F9=n(_e,"LI",{});var iSe=s(F9);dve=n(iSe,"STRONG",{});var Uvt=s(dve);J2r=r(Uvt,"flaubert"),Uvt.forEach(t),Y2r=r(iSe," \u2014 "),zW=n(iSe,"A",{href:!0});var Jvt=s(zW);K2r=r(Jvt,"TFFlaubertForMultipleChoice"),Jvt.forEach(t),Z2r=r(iSe," (FlauBERT model)"),iSe.forEach(t),evr=i(_e),T9=n(_e,"LI",{});var dSe=s(T9);cve=n(dSe,"STRONG",{});var Yvt=s(cve);ovr=r(Yvt,"funnel"),Yvt.forEach(t),rvr=r(dSe," \u2014 "),QW=n(dSe,"A",{href:!0});var Kvt=s(QW);tvr=r(Kvt,"TFFunnelForMultipleChoice"),Kvt.forEach(t),avr=r(dSe," (Funnel Transformer model)"),dSe.forEach(t),nvr=i(_e),M9=n(_e,"LI",{});var cSe=s(M9);fve=n(cSe,"STRONG",{});var Zvt=s(fve);svr=r(Zvt,"longformer"),Zvt.forEach(t),lvr=r(cSe," \u2014 "),WW=n(cSe,"A",{href:!0});var eFt=s(WW);ivr=r(eFt,"TFLongformerForMultipleChoice"),eFt.forEach(t),dvr=r(cSe," (Longformer model)"),cSe.forEach(t),cvr=i(_e),E9=n(_e,"LI",{});var fSe=s(E9);mve=n(fSe,"STRONG",{});var oFt=s(mve);fvr=r(oFt,"mobilebert"),oFt.forEach(t),mvr=r(fSe," \u2014 "),HW=n(fSe,"A",{href:!0});var rFt=s(HW);gvr=r(rFt,"TFMobileBertForMultipleChoice"),rFt.forEach(t),hvr=r(fSe," (MobileBERT model)"),fSe.forEach(t),pvr=i(_e),C9=n(_e,"LI",{});var mSe=s(C9);gve=n(mSe,"STRONG",{});var tFt=s(gve);uvr=r(tFt,"mpnet"),tFt.forEach(t),_vr=r(mSe," \u2014 "),UW=n(mSe,"A",{href:!0});var aFt=s(UW);bvr=r(aFt,"TFMPNetForMultipleChoice"),aFt.forEach(t),vvr=r(mSe," (MPNet model)"),mSe.forEach(t),Fvr=i(_e),w9=n(_e,"LI",{});var gSe=s(w9);hve=n(gSe,"STRONG",{});var nFt=s(hve);Tvr=r(nFt,"rembert"),nFt.forEach(t),Mvr=r(gSe," \u2014 "),JW=n(gSe,"A",{href:!0});var sFt=s(JW);Evr=r(sFt,"TFRemBertForMultipleChoice"),sFt.forEach(t),Cvr=r(gSe," (RemBERT model)"),gSe.forEach(t),wvr=i(_e),A9=n(_e,"LI",{});var hSe=s(A9);pve=n(hSe,"STRONG",{});var lFt=s(pve);Avr=r(lFt,"roberta"),lFt.forEach(t),yvr=r(hSe," \u2014 "),YW=n(hSe,"A",{href:!0});var iFt=s(YW);Lvr=r(iFt,"TFRobertaForMultipleChoice"),iFt.forEach(t),xvr=r(hSe," (RoBERTa model)"),hSe.forEach(t),$vr=i(_e),y9=n(_e,"LI",{});var pSe=s(y9);uve=n(pSe,"STRONG",{});var dFt=s(uve);kvr=r(dFt,"roformer"),dFt.forEach(t),Svr=r(pSe," \u2014 "),KW=n(pSe,"A",{href:!0});var cFt=s(KW);Rvr=r(cFt,"TFRoFormerForMultipleChoice"),cFt.forEach(t),Bvr=r(pSe," (RoFormer model)"),pSe.forEach(t),Pvr=i(_e),L9=n(_e,"LI",{});var uSe=s(L9);_ve=n(uSe,"STRONG",{});var fFt=s(_ve);Ivr=r(fFt,"xlm"),fFt.forEach(t),qvr=r(uSe," \u2014 "),ZW=n(uSe,"A",{href:!0});var mFt=s(ZW);Nvr=r(mFt,"TFXLMForMultipleChoice"),mFt.forEach(t),jvr=r(uSe," (XLM model)"),uSe.forEach(t),Dvr=i(_e),x9=n(_e,"LI",{});var _Se=s(x9);bve=n(_Se,"STRONG",{});var gFt=s(bve);Gvr=r(gFt,"xlm-roberta"),gFt.forEach(t),Ovr=r(_Se," \u2014 "),eH=n(_Se,"A",{href:!0});var hFt=s(eH);Vvr=r(hFt,"TFXLMRobertaForMultipleChoice"),hFt.forEach(t),Xvr=r(_Se," (XLM-RoBERTa model)"),_Se.forEach(t),zvr=i(_e),$9=n(_e,"LI",{});var bSe=s($9);vve=n(bSe,"STRONG",{});var pFt=s(vve);Qvr=r(pFt,"xlnet"),pFt.forEach(t),Wvr=r(bSe," \u2014 "),oH=n(bSe,"A",{href:!0});var uFt=s(oH);Hvr=r(uFt,"TFXLNetForMultipleChoice"),uFt.forEach(t),Uvr=r(bSe," (XLNet model)"),bSe.forEach(t),_e.forEach(t),Jvr=i(Cl),T(k9.$$.fragment,Cl),Cl.forEach(t),El.forEach(t),LIe=i(f),ic=n(f,"H2",{class:!0});var BNe=s(ic);S9=n(BNe,"A",{id:!0,class:!0,href:!0});var _Ft=s(S9);Fve=n(_Ft,"SPAN",{});var bFt=s(Fve);T(dL.$$.fragment,bFt),bFt.forEach(t),_Ft.forEach(t),Yvr=i(BNe),Tve=n(BNe,"SPAN",{});var vFt=s(Tve);Kvr=r(vFt,"TFAutoModelForNextSentencePrediction"),vFt.forEach(t),BNe.forEach(t),xIe=i(f),nr=n(f,"DIV",{class:!0});var wl=s(nr);T(cL.$$.fragment,wl),Zvr=i(wl),dc=n(wl,"P",{});var oZ=s(dc);eFr=r(oZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),rH=n(oZ,"A",{href:!0});var FFt=s(rH);oFr=r(FFt,"from_pretrained()"),FFt.forEach(t),rFr=r(oZ," class method or the "),tH=n(oZ,"A",{href:!0});var TFt=s(tH);tFr=r(TFt,"from_config()"),TFt.forEach(t),aFr=r(oZ,` class
method.`),oZ.forEach(t),nFr=i(wl),fL=n(wl,"P",{});var PNe=s(fL);sFr=r(PNe,"This class cannot be instantiated directly using "),Mve=n(PNe,"CODE",{});var MFt=s(Mve);lFr=r(MFt,"__init__()"),MFt.forEach(t),iFr=r(PNe," (throws an error)."),PNe.forEach(t),dFr=i(wl),Rt=n(wl,"DIV",{class:!0});var r3=s(Rt);T(mL.$$.fragment,r3),cFr=i(r3),Eve=n(r3,"P",{});var EFt=s(Eve);fFr=r(EFt,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),EFt.forEach(t),mFr=i(r3),cc=n(r3,"P",{});var rZ=s(cc);gFr=r(rZ,`Note:
Loading a model from its configuration file does `),Cve=n(rZ,"STRONG",{});var CFt=s(Cve);hFr=r(CFt,"not"),CFt.forEach(t),pFr=r(rZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),aH=n(rZ,"A",{href:!0});var wFt=s(aH);uFr=r(wFt,"from_pretrained()"),wFt.forEach(t),_Fr=r(rZ," to load the model weights."),rZ.forEach(t),bFr=i(r3),T(R9.$$.fragment,r3),r3.forEach(t),vFr=i(wl),Rr=n(wl,"DIV",{class:!0});var Al=s(Rr);T(gL.$$.fragment,Al),FFr=i(Al),wve=n(Al,"P",{});var AFt=s(wve);TFr=r(AFt,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),AFt.forEach(t),MFr=i(Al),sn=n(Al,"P",{});var t3=s(sn);EFr=r(t3,"The model class to instantiate is selected based on the "),Ave=n(t3,"CODE",{});var yFt=s(Ave);CFr=r(yFt,"model_type"),yFt.forEach(t),wFr=r(t3,` property of the config object (either
passed as an argument or loaded from `),yve=n(t3,"CODE",{});var LFt=s(yve);AFr=r(LFt,"pretrained_model_name_or_path"),LFt.forEach(t),yFr=r(t3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(t3,"CODE",{});var xFt=s(Lve);LFr=r(xFt,"pretrained_model_name_or_path"),xFt.forEach(t),xFr=r(t3,":"),t3.forEach(t),$Fr=i(Al),hL=n(Al,"UL",{});var INe=s(hL);B9=n(INe,"LI",{});var vSe=s(B9);xve=n(vSe,"STRONG",{});var $Ft=s(xve);kFr=r($Ft,"bert"),$Ft.forEach(t),SFr=r(vSe," \u2014 "),nH=n(vSe,"A",{href:!0});var kFt=s(nH);RFr=r(kFt,"TFBertForNextSentencePrediction"),kFt.forEach(t),BFr=r(vSe," (BERT model)"),vSe.forEach(t),PFr=i(INe),P9=n(INe,"LI",{});var FSe=s(P9);$ve=n(FSe,"STRONG",{});var SFt=s($ve);IFr=r(SFt,"mobilebert"),SFt.forEach(t),qFr=r(FSe," \u2014 "),sH=n(FSe,"A",{href:!0});var RFt=s(sH);NFr=r(RFt,"TFMobileBertForNextSentencePrediction"),RFt.forEach(t),jFr=r(FSe," (MobileBERT model)"),FSe.forEach(t),INe.forEach(t),DFr=i(Al),T(I9.$$.fragment,Al),Al.forEach(t),wl.forEach(t),$Ie=i(f),fc=n(f,"H2",{class:!0});var qNe=s(fc);q9=n(qNe,"A",{id:!0,class:!0,href:!0});var BFt=s(q9);kve=n(BFt,"SPAN",{});var PFt=s(kve);T(pL.$$.fragment,PFt),PFt.forEach(t),BFt.forEach(t),GFr=i(qNe),Sve=n(qNe,"SPAN",{});var IFt=s(Sve);OFr=r(IFt,"TFAutoModelForTableQuestionAnswering"),IFt.forEach(t),qNe.forEach(t),kIe=i(f),sr=n(f,"DIV",{class:!0});var yl=s(sr);T(uL.$$.fragment,yl),VFr=i(yl),mc=n(yl,"P",{});var tZ=s(mc);XFr=r(tZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),lH=n(tZ,"A",{href:!0});var qFt=s(lH);zFr=r(qFt,"from_pretrained()"),qFt.forEach(t),QFr=r(tZ," class method or the "),iH=n(tZ,"A",{href:!0});var NFt=s(iH);WFr=r(NFt,"from_config()"),NFt.forEach(t),HFr=r(tZ,` class
method.`),tZ.forEach(t),UFr=i(yl),_L=n(yl,"P",{});var NNe=s(_L);JFr=r(NNe,"This class cannot be instantiated directly using "),Rve=n(NNe,"CODE",{});var jFt=s(Rve);YFr=r(jFt,"__init__()"),jFt.forEach(t),KFr=r(NNe," (throws an error)."),NNe.forEach(t),ZFr=i(yl),Bt=n(yl,"DIV",{class:!0});var a3=s(Bt);T(bL.$$.fragment,a3),e0r=i(a3),Bve=n(a3,"P",{});var DFt=s(Bve);o0r=r(DFt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),DFt.forEach(t),r0r=i(a3),gc=n(a3,"P",{});var aZ=s(gc);t0r=r(aZ,`Note:
Loading a model from its configuration file does `),Pve=n(aZ,"STRONG",{});var GFt=s(Pve);a0r=r(GFt,"not"),GFt.forEach(t),n0r=r(aZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dH=n(aZ,"A",{href:!0});var OFt=s(dH);s0r=r(OFt,"from_pretrained()"),OFt.forEach(t),l0r=r(aZ," to load the model weights."),aZ.forEach(t),i0r=i(a3),T(N9.$$.fragment,a3),a3.forEach(t),d0r=i(yl),Br=n(yl,"DIV",{class:!0});var Ll=s(Br);T(vL.$$.fragment,Ll),c0r=i(Ll),Ive=n(Ll,"P",{});var VFt=s(Ive);f0r=r(VFt,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),VFt.forEach(t),m0r=i(Ll),ln=n(Ll,"P",{});var n3=s(ln);g0r=r(n3,"The model class to instantiate is selected based on the "),qve=n(n3,"CODE",{});var XFt=s(qve);h0r=r(XFt,"model_type"),XFt.forEach(t),p0r=r(n3,` property of the config object (either
passed as an argument or loaded from `),Nve=n(n3,"CODE",{});var zFt=s(Nve);u0r=r(zFt,"pretrained_model_name_or_path"),zFt.forEach(t),_0r=r(n3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jve=n(n3,"CODE",{});var QFt=s(jve);b0r=r(QFt,"pretrained_model_name_or_path"),QFt.forEach(t),v0r=r(n3,":"),n3.forEach(t),F0r=i(Ll),Dve=n(Ll,"UL",{});var WFt=s(Dve);j9=n(WFt,"LI",{});var TSe=s(j9);Gve=n(TSe,"STRONG",{});var HFt=s(Gve);T0r=r(HFt,"tapas"),HFt.forEach(t),M0r=r(TSe," \u2014 "),cH=n(TSe,"A",{href:!0});var UFt=s(cH);E0r=r(UFt,"TFTapasForQuestionAnswering"),UFt.forEach(t),C0r=r(TSe," (TAPAS model)"),TSe.forEach(t),WFt.forEach(t),w0r=i(Ll),T(D9.$$.fragment,Ll),Ll.forEach(t),yl.forEach(t),SIe=i(f),hc=n(f,"H2",{class:!0});var jNe=s(hc);G9=n(jNe,"A",{id:!0,class:!0,href:!0});var JFt=s(G9);Ove=n(JFt,"SPAN",{});var YFt=s(Ove);T(FL.$$.fragment,YFt),YFt.forEach(t),JFt.forEach(t),A0r=i(jNe),Vve=n(jNe,"SPAN",{});var KFt=s(Vve);y0r=r(KFt,"TFAutoModelForTokenClassification"),KFt.forEach(t),jNe.forEach(t),RIe=i(f),lr=n(f,"DIV",{class:!0});var xl=s(lr);T(TL.$$.fragment,xl),L0r=i(xl),pc=n(xl,"P",{});var nZ=s(pc);x0r=r(nZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),fH=n(nZ,"A",{href:!0});var ZFt=s(fH);$0r=r(ZFt,"from_pretrained()"),ZFt.forEach(t),k0r=r(nZ," class method or the "),mH=n(nZ,"A",{href:!0});var e0t=s(mH);S0r=r(e0t,"from_config()"),e0t.forEach(t),R0r=r(nZ,` class
method.`),nZ.forEach(t),B0r=i(xl),ML=n(xl,"P",{});var DNe=s(ML);P0r=r(DNe,"This class cannot be instantiated directly using "),Xve=n(DNe,"CODE",{});var o0t=s(Xve);I0r=r(o0t,"__init__()"),o0t.forEach(t),q0r=r(DNe," (throws an error)."),DNe.forEach(t),N0r=i(xl),Pt=n(xl,"DIV",{class:!0});var s3=s(Pt);T(EL.$$.fragment,s3),j0r=i(s3),zve=n(s3,"P",{});var r0t=s(zve);D0r=r(r0t,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),r0t.forEach(t),G0r=i(s3),uc=n(s3,"P",{});var sZ=s(uc);O0r=r(sZ,`Note:
Loading a model from its configuration file does `),Qve=n(sZ,"STRONG",{});var t0t=s(Qve);V0r=r(t0t,"not"),t0t.forEach(t),X0r=r(sZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gH=n(sZ,"A",{href:!0});var a0t=s(gH);z0r=r(a0t,"from_pretrained()"),a0t.forEach(t),Q0r=r(sZ," to load the model weights."),sZ.forEach(t),W0r=i(s3),T(O9.$$.fragment,s3),s3.forEach(t),H0r=i(xl),Pr=n(xl,"DIV",{class:!0});var $l=s(Pr);T(CL.$$.fragment,$l),U0r=i($l),Wve=n($l,"P",{});var n0t=s(Wve);J0r=r(n0t,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),n0t.forEach(t),Y0r=i($l),dn=n($l,"P",{});var l3=s(dn);K0r=r(l3,"The model class to instantiate is selected based on the "),Hve=n(l3,"CODE",{});var s0t=s(Hve);Z0r=r(s0t,"model_type"),s0t.forEach(t),e6r=r(l3,` property of the config object (either
passed as an argument or loaded from `),Uve=n(l3,"CODE",{});var l0t=s(Uve);o6r=r(l0t,"pretrained_model_name_or_path"),l0t.forEach(t),r6r=r(l3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jve=n(l3,"CODE",{});var i0t=s(Jve);t6r=r(i0t,"pretrained_model_name_or_path"),i0t.forEach(t),a6r=r(l3,":"),l3.forEach(t),n6r=i($l),de=n($l,"UL",{});var me=s(de);V9=n(me,"LI",{});var MSe=s(V9);Yve=n(MSe,"STRONG",{});var d0t=s(Yve);s6r=r(d0t,"albert"),d0t.forEach(t),l6r=r(MSe," \u2014 "),hH=n(MSe,"A",{href:!0});var c0t=s(hH);i6r=r(c0t,"TFAlbertForTokenClassification"),c0t.forEach(t),d6r=r(MSe," (ALBERT model)"),MSe.forEach(t),c6r=i(me),X9=n(me,"LI",{});var ESe=s(X9);Kve=n(ESe,"STRONG",{});var f0t=s(Kve);f6r=r(f0t,"bert"),f0t.forEach(t),m6r=r(ESe," \u2014 "),pH=n(ESe,"A",{href:!0});var m0t=s(pH);g6r=r(m0t,"TFBertForTokenClassification"),m0t.forEach(t),h6r=r(ESe," (BERT model)"),ESe.forEach(t),p6r=i(me),z9=n(me,"LI",{});var CSe=s(z9);Zve=n(CSe,"STRONG",{});var g0t=s(Zve);u6r=r(g0t,"camembert"),g0t.forEach(t),_6r=r(CSe," \u2014 "),uH=n(CSe,"A",{href:!0});var h0t=s(uH);b6r=r(h0t,"TFCamembertForTokenClassification"),h0t.forEach(t),v6r=r(CSe," (CamemBERT model)"),CSe.forEach(t),F6r=i(me),Q9=n(me,"LI",{});var wSe=s(Q9);eFe=n(wSe,"STRONG",{});var p0t=s(eFe);T6r=r(p0t,"convbert"),p0t.forEach(t),M6r=r(wSe," \u2014 "),_H=n(wSe,"A",{href:!0});var u0t=s(_H);E6r=r(u0t,"TFConvBertForTokenClassification"),u0t.forEach(t),C6r=r(wSe," (ConvBERT model)"),wSe.forEach(t),w6r=i(me),W9=n(me,"LI",{});var ASe=s(W9);oFe=n(ASe,"STRONG",{});var _0t=s(oFe);A6r=r(_0t,"deberta"),_0t.forEach(t),y6r=r(ASe," \u2014 "),bH=n(ASe,"A",{href:!0});var b0t=s(bH);L6r=r(b0t,"TFDebertaForTokenClassification"),b0t.forEach(t),x6r=r(ASe," (DeBERTa model)"),ASe.forEach(t),$6r=i(me),H9=n(me,"LI",{});var ySe=s(H9);rFe=n(ySe,"STRONG",{});var v0t=s(rFe);k6r=r(v0t,"deberta-v2"),v0t.forEach(t),S6r=r(ySe," \u2014 "),vH=n(ySe,"A",{href:!0});var F0t=s(vH);R6r=r(F0t,"TFDebertaV2ForTokenClassification"),F0t.forEach(t),B6r=r(ySe," (DeBERTa-v2 model)"),ySe.forEach(t),P6r=i(me),U9=n(me,"LI",{});var LSe=s(U9);tFe=n(LSe,"STRONG",{});var T0t=s(tFe);I6r=r(T0t,"distilbert"),T0t.forEach(t),q6r=r(LSe," \u2014 "),FH=n(LSe,"A",{href:!0});var M0t=s(FH);N6r=r(M0t,"TFDistilBertForTokenClassification"),M0t.forEach(t),j6r=r(LSe," (DistilBERT model)"),LSe.forEach(t),D6r=i(me),J9=n(me,"LI",{});var xSe=s(J9);aFe=n(xSe,"STRONG",{});var E0t=s(aFe);G6r=r(E0t,"electra"),E0t.forEach(t),O6r=r(xSe," \u2014 "),TH=n(xSe,"A",{href:!0});var C0t=s(TH);V6r=r(C0t,"TFElectraForTokenClassification"),C0t.forEach(t),X6r=r(xSe," (ELECTRA model)"),xSe.forEach(t),z6r=i(me),Y9=n(me,"LI",{});var $Se=s(Y9);nFe=n($Se,"STRONG",{});var w0t=s(nFe);Q6r=r(w0t,"flaubert"),w0t.forEach(t),W6r=r($Se," \u2014 "),MH=n($Se,"A",{href:!0});var A0t=s(MH);H6r=r(A0t,"TFFlaubertForTokenClassification"),A0t.forEach(t),U6r=r($Se," (FlauBERT model)"),$Se.forEach(t),J6r=i(me),K9=n(me,"LI",{});var kSe=s(K9);sFe=n(kSe,"STRONG",{});var y0t=s(sFe);Y6r=r(y0t,"funnel"),y0t.forEach(t),K6r=r(kSe," \u2014 "),EH=n(kSe,"A",{href:!0});var L0t=s(EH);Z6r=r(L0t,"TFFunnelForTokenClassification"),L0t.forEach(t),eTr=r(kSe," (Funnel Transformer model)"),kSe.forEach(t),oTr=i(me),Z9=n(me,"LI",{});var SSe=s(Z9);lFe=n(SSe,"STRONG",{});var x0t=s(lFe);rTr=r(x0t,"layoutlm"),x0t.forEach(t),tTr=r(SSe," \u2014 "),CH=n(SSe,"A",{href:!0});var $0t=s(CH);aTr=r($0t,"TFLayoutLMForTokenClassification"),$0t.forEach(t),nTr=r(SSe," (LayoutLM model)"),SSe.forEach(t),sTr=i(me),eM=n(me,"LI",{});var RSe=s(eM);iFe=n(RSe,"STRONG",{});var k0t=s(iFe);lTr=r(k0t,"longformer"),k0t.forEach(t),iTr=r(RSe," \u2014 "),wH=n(RSe,"A",{href:!0});var S0t=s(wH);dTr=r(S0t,"TFLongformerForTokenClassification"),S0t.forEach(t),cTr=r(RSe," (Longformer model)"),RSe.forEach(t),fTr=i(me),oM=n(me,"LI",{});var BSe=s(oM);dFe=n(BSe,"STRONG",{});var R0t=s(dFe);mTr=r(R0t,"mobilebert"),R0t.forEach(t),gTr=r(BSe," \u2014 "),AH=n(BSe,"A",{href:!0});var B0t=s(AH);hTr=r(B0t,"TFMobileBertForTokenClassification"),B0t.forEach(t),pTr=r(BSe," (MobileBERT model)"),BSe.forEach(t),uTr=i(me),rM=n(me,"LI",{});var PSe=s(rM);cFe=n(PSe,"STRONG",{});var P0t=s(cFe);_Tr=r(P0t,"mpnet"),P0t.forEach(t),bTr=r(PSe," \u2014 "),yH=n(PSe,"A",{href:!0});var I0t=s(yH);vTr=r(I0t,"TFMPNetForTokenClassification"),I0t.forEach(t),FTr=r(PSe," (MPNet model)"),PSe.forEach(t),TTr=i(me),tM=n(me,"LI",{});var ISe=s(tM);fFe=n(ISe,"STRONG",{});var q0t=s(fFe);MTr=r(q0t,"rembert"),q0t.forEach(t),ETr=r(ISe," \u2014 "),LH=n(ISe,"A",{href:!0});var N0t=s(LH);CTr=r(N0t,"TFRemBertForTokenClassification"),N0t.forEach(t),wTr=r(ISe," (RemBERT model)"),ISe.forEach(t),ATr=i(me),aM=n(me,"LI",{});var qSe=s(aM);mFe=n(qSe,"STRONG",{});var j0t=s(mFe);yTr=r(j0t,"roberta"),j0t.forEach(t),LTr=r(qSe," \u2014 "),xH=n(qSe,"A",{href:!0});var D0t=s(xH);xTr=r(D0t,"TFRobertaForTokenClassification"),D0t.forEach(t),$Tr=r(qSe," (RoBERTa model)"),qSe.forEach(t),kTr=i(me),nM=n(me,"LI",{});var NSe=s(nM);gFe=n(NSe,"STRONG",{});var G0t=s(gFe);STr=r(G0t,"roformer"),G0t.forEach(t),RTr=r(NSe," \u2014 "),$H=n(NSe,"A",{href:!0});var O0t=s($H);BTr=r(O0t,"TFRoFormerForTokenClassification"),O0t.forEach(t),PTr=r(NSe," (RoFormer model)"),NSe.forEach(t),ITr=i(me),sM=n(me,"LI",{});var jSe=s(sM);hFe=n(jSe,"STRONG",{});var V0t=s(hFe);qTr=r(V0t,"xlm"),V0t.forEach(t),NTr=r(jSe," \u2014 "),kH=n(jSe,"A",{href:!0});var X0t=s(kH);jTr=r(X0t,"TFXLMForTokenClassification"),X0t.forEach(t),DTr=r(jSe," (XLM model)"),jSe.forEach(t),GTr=i(me),lM=n(me,"LI",{});var DSe=s(lM);pFe=n(DSe,"STRONG",{});var z0t=s(pFe);OTr=r(z0t,"xlm-roberta"),z0t.forEach(t),VTr=r(DSe," \u2014 "),SH=n(DSe,"A",{href:!0});var Q0t=s(SH);XTr=r(Q0t,"TFXLMRobertaForTokenClassification"),Q0t.forEach(t),zTr=r(DSe," (XLM-RoBERTa model)"),DSe.forEach(t),QTr=i(me),iM=n(me,"LI",{});var GSe=s(iM);uFe=n(GSe,"STRONG",{});var W0t=s(uFe);WTr=r(W0t,"xlnet"),W0t.forEach(t),HTr=r(GSe," \u2014 "),RH=n(GSe,"A",{href:!0});var H0t=s(RH);UTr=r(H0t,"TFXLNetForTokenClassification"),H0t.forEach(t),JTr=r(GSe," (XLNet model)"),GSe.forEach(t),me.forEach(t),YTr=i($l),T(dM.$$.fragment,$l),$l.forEach(t),xl.forEach(t),BIe=i(f),_c=n(f,"H2",{class:!0});var GNe=s(_c);cM=n(GNe,"A",{id:!0,class:!0,href:!0});var U0t=s(cM);_Fe=n(U0t,"SPAN",{});var J0t=s(_Fe);T(wL.$$.fragment,J0t),J0t.forEach(t),U0t.forEach(t),KTr=i(GNe),bFe=n(GNe,"SPAN",{});var Y0t=s(bFe);ZTr=r(Y0t,"TFAutoModelForQuestionAnswering"),Y0t.forEach(t),GNe.forEach(t),PIe=i(f),ir=n(f,"DIV",{class:!0});var kl=s(ir);T(AL.$$.fragment,kl),e7r=i(kl),bc=n(kl,"P",{});var lZ=s(bc);o7r=r(lZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),BH=n(lZ,"A",{href:!0});var K0t=s(BH);r7r=r(K0t,"from_pretrained()"),K0t.forEach(t),t7r=r(lZ," class method or the "),PH=n(lZ,"A",{href:!0});var Z0t=s(PH);a7r=r(Z0t,"from_config()"),Z0t.forEach(t),n7r=r(lZ,` class
method.`),lZ.forEach(t),s7r=i(kl),yL=n(kl,"P",{});var ONe=s(yL);l7r=r(ONe,"This class cannot be instantiated directly using "),vFe=n(ONe,"CODE",{});var e6t=s(vFe);i7r=r(e6t,"__init__()"),e6t.forEach(t),d7r=r(ONe," (throws an error)."),ONe.forEach(t),c7r=i(kl),It=n(kl,"DIV",{class:!0});var i3=s(It);T(LL.$$.fragment,i3),f7r=i(i3),FFe=n(i3,"P",{});var o6t=s(FFe);m7r=r(o6t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),o6t.forEach(t),g7r=i(i3),vc=n(i3,"P",{});var iZ=s(vc);h7r=r(iZ,`Note:
Loading a model from its configuration file does `),TFe=n(iZ,"STRONG",{});var r6t=s(TFe);p7r=r(r6t,"not"),r6t.forEach(t),u7r=r(iZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),IH=n(iZ,"A",{href:!0});var t6t=s(IH);_7r=r(t6t,"from_pretrained()"),t6t.forEach(t),b7r=r(iZ," to load the model weights."),iZ.forEach(t),v7r=i(i3),T(fM.$$.fragment,i3),i3.forEach(t),F7r=i(kl),Ir=n(kl,"DIV",{class:!0});var Sl=s(Ir);T(xL.$$.fragment,Sl),T7r=i(Sl),MFe=n(Sl,"P",{});var a6t=s(MFe);M7r=r(a6t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),a6t.forEach(t),E7r=i(Sl),cn=n(Sl,"P",{});var d3=s(cn);C7r=r(d3,"The model class to instantiate is selected based on the "),EFe=n(d3,"CODE",{});var n6t=s(EFe);w7r=r(n6t,"model_type"),n6t.forEach(t),A7r=r(d3,` property of the config object (either
passed as an argument or loaded from `),CFe=n(d3,"CODE",{});var s6t=s(CFe);y7r=r(s6t,"pretrained_model_name_or_path"),s6t.forEach(t),L7r=r(d3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),wFe=n(d3,"CODE",{});var l6t=s(wFe);x7r=r(l6t,"pretrained_model_name_or_path"),l6t.forEach(t),$7r=r(d3,":"),d3.forEach(t),k7r=i(Sl),ce=n(Sl,"UL",{});var ge=s(ce);mM=n(ge,"LI",{});var OSe=s(mM);AFe=n(OSe,"STRONG",{});var i6t=s(AFe);S7r=r(i6t,"albert"),i6t.forEach(t),R7r=r(OSe," \u2014 "),qH=n(OSe,"A",{href:!0});var d6t=s(qH);B7r=r(d6t,"TFAlbertForQuestionAnswering"),d6t.forEach(t),P7r=r(OSe," (ALBERT model)"),OSe.forEach(t),I7r=i(ge),gM=n(ge,"LI",{});var VSe=s(gM);yFe=n(VSe,"STRONG",{});var c6t=s(yFe);q7r=r(c6t,"bert"),c6t.forEach(t),N7r=r(VSe," \u2014 "),NH=n(VSe,"A",{href:!0});var f6t=s(NH);j7r=r(f6t,"TFBertForQuestionAnswering"),f6t.forEach(t),D7r=r(VSe," (BERT model)"),VSe.forEach(t),G7r=i(ge),hM=n(ge,"LI",{});var XSe=s(hM);LFe=n(XSe,"STRONG",{});var m6t=s(LFe);O7r=r(m6t,"camembert"),m6t.forEach(t),V7r=r(XSe," \u2014 "),jH=n(XSe,"A",{href:!0});var g6t=s(jH);X7r=r(g6t,"TFCamembertForQuestionAnswering"),g6t.forEach(t),z7r=r(XSe," (CamemBERT model)"),XSe.forEach(t),Q7r=i(ge),pM=n(ge,"LI",{});var zSe=s(pM);xFe=n(zSe,"STRONG",{});var h6t=s(xFe);W7r=r(h6t,"convbert"),h6t.forEach(t),H7r=r(zSe," \u2014 "),DH=n(zSe,"A",{href:!0});var p6t=s(DH);U7r=r(p6t,"TFConvBertForQuestionAnswering"),p6t.forEach(t),J7r=r(zSe," (ConvBERT model)"),zSe.forEach(t),Y7r=i(ge),uM=n(ge,"LI",{});var QSe=s(uM);$Fe=n(QSe,"STRONG",{});var u6t=s($Fe);K7r=r(u6t,"deberta"),u6t.forEach(t),Z7r=r(QSe," \u2014 "),GH=n(QSe,"A",{href:!0});var _6t=s(GH);e9r=r(_6t,"TFDebertaForQuestionAnswering"),_6t.forEach(t),o9r=r(QSe," (DeBERTa model)"),QSe.forEach(t),r9r=i(ge),_M=n(ge,"LI",{});var WSe=s(_M);kFe=n(WSe,"STRONG",{});var b6t=s(kFe);t9r=r(b6t,"deberta-v2"),b6t.forEach(t),a9r=r(WSe," \u2014 "),OH=n(WSe,"A",{href:!0});var v6t=s(OH);n9r=r(v6t,"TFDebertaV2ForQuestionAnswering"),v6t.forEach(t),s9r=r(WSe," (DeBERTa-v2 model)"),WSe.forEach(t),l9r=i(ge),bM=n(ge,"LI",{});var HSe=s(bM);SFe=n(HSe,"STRONG",{});var F6t=s(SFe);i9r=r(F6t,"distilbert"),F6t.forEach(t),d9r=r(HSe," \u2014 "),VH=n(HSe,"A",{href:!0});var T6t=s(VH);c9r=r(T6t,"TFDistilBertForQuestionAnswering"),T6t.forEach(t),f9r=r(HSe," (DistilBERT model)"),HSe.forEach(t),m9r=i(ge),vM=n(ge,"LI",{});var USe=s(vM);RFe=n(USe,"STRONG",{});var M6t=s(RFe);g9r=r(M6t,"electra"),M6t.forEach(t),h9r=r(USe," \u2014 "),XH=n(USe,"A",{href:!0});var E6t=s(XH);p9r=r(E6t,"TFElectraForQuestionAnswering"),E6t.forEach(t),u9r=r(USe," (ELECTRA model)"),USe.forEach(t),_9r=i(ge),FM=n(ge,"LI",{});var JSe=s(FM);BFe=n(JSe,"STRONG",{});var C6t=s(BFe);b9r=r(C6t,"flaubert"),C6t.forEach(t),v9r=r(JSe," \u2014 "),zH=n(JSe,"A",{href:!0});var w6t=s(zH);F9r=r(w6t,"TFFlaubertForQuestionAnsweringSimple"),w6t.forEach(t),T9r=r(JSe," (FlauBERT model)"),JSe.forEach(t),M9r=i(ge),TM=n(ge,"LI",{});var YSe=s(TM);PFe=n(YSe,"STRONG",{});var A6t=s(PFe);E9r=r(A6t,"funnel"),A6t.forEach(t),C9r=r(YSe," \u2014 "),QH=n(YSe,"A",{href:!0});var y6t=s(QH);w9r=r(y6t,"TFFunnelForQuestionAnswering"),y6t.forEach(t),A9r=r(YSe," (Funnel Transformer model)"),YSe.forEach(t),y9r=i(ge),MM=n(ge,"LI",{});var KSe=s(MM);IFe=n(KSe,"STRONG",{});var L6t=s(IFe);L9r=r(L6t,"gptj"),L6t.forEach(t),x9r=r(KSe," \u2014 "),WH=n(KSe,"A",{href:!0});var x6t=s(WH);$9r=r(x6t,"TFGPTJForQuestionAnswering"),x6t.forEach(t),k9r=r(KSe," (GPT-J model)"),KSe.forEach(t),S9r=i(ge),EM=n(ge,"LI",{});var ZSe=s(EM);qFe=n(ZSe,"STRONG",{});var $6t=s(qFe);R9r=r($6t,"longformer"),$6t.forEach(t),B9r=r(ZSe," \u2014 "),HH=n(ZSe,"A",{href:!0});var k6t=s(HH);P9r=r(k6t,"TFLongformerForQuestionAnswering"),k6t.forEach(t),I9r=r(ZSe," (Longformer model)"),ZSe.forEach(t),q9r=i(ge),CM=n(ge,"LI",{});var eRe=s(CM);NFe=n(eRe,"STRONG",{});var S6t=s(NFe);N9r=r(S6t,"mobilebert"),S6t.forEach(t),j9r=r(eRe," \u2014 "),UH=n(eRe,"A",{href:!0});var R6t=s(UH);D9r=r(R6t,"TFMobileBertForQuestionAnswering"),R6t.forEach(t),G9r=r(eRe," (MobileBERT model)"),eRe.forEach(t),O9r=i(ge),wM=n(ge,"LI",{});var oRe=s(wM);jFe=n(oRe,"STRONG",{});var B6t=s(jFe);V9r=r(B6t,"mpnet"),B6t.forEach(t),X9r=r(oRe," \u2014 "),JH=n(oRe,"A",{href:!0});var P6t=s(JH);z9r=r(P6t,"TFMPNetForQuestionAnswering"),P6t.forEach(t),Q9r=r(oRe," (MPNet model)"),oRe.forEach(t),W9r=i(ge),AM=n(ge,"LI",{});var rRe=s(AM);DFe=n(rRe,"STRONG",{});var I6t=s(DFe);H9r=r(I6t,"rembert"),I6t.forEach(t),U9r=r(rRe," \u2014 "),YH=n(rRe,"A",{href:!0});var q6t=s(YH);J9r=r(q6t,"TFRemBertForQuestionAnswering"),q6t.forEach(t),Y9r=r(rRe," (RemBERT model)"),rRe.forEach(t),K9r=i(ge),yM=n(ge,"LI",{});var tRe=s(yM);GFe=n(tRe,"STRONG",{});var N6t=s(GFe);Z9r=r(N6t,"roberta"),N6t.forEach(t),eMr=r(tRe," \u2014 "),KH=n(tRe,"A",{href:!0});var j6t=s(KH);oMr=r(j6t,"TFRobertaForQuestionAnswering"),j6t.forEach(t),rMr=r(tRe," (RoBERTa model)"),tRe.forEach(t),tMr=i(ge),LM=n(ge,"LI",{});var aRe=s(LM);OFe=n(aRe,"STRONG",{});var D6t=s(OFe);aMr=r(D6t,"roformer"),D6t.forEach(t),nMr=r(aRe," \u2014 "),ZH=n(aRe,"A",{href:!0});var G6t=s(ZH);sMr=r(G6t,"TFRoFormerForQuestionAnswering"),G6t.forEach(t),lMr=r(aRe," (RoFormer model)"),aRe.forEach(t),iMr=i(ge),xM=n(ge,"LI",{});var nRe=s(xM);VFe=n(nRe,"STRONG",{});var O6t=s(VFe);dMr=r(O6t,"xlm"),O6t.forEach(t),cMr=r(nRe," \u2014 "),eU=n(nRe,"A",{href:!0});var V6t=s(eU);fMr=r(V6t,"TFXLMForQuestionAnsweringSimple"),V6t.forEach(t),mMr=r(nRe," (XLM model)"),nRe.forEach(t),gMr=i(ge),$M=n(ge,"LI",{});var sRe=s($M);XFe=n(sRe,"STRONG",{});var X6t=s(XFe);hMr=r(X6t,"xlm-roberta"),X6t.forEach(t),pMr=r(sRe," \u2014 "),oU=n(sRe,"A",{href:!0});var z6t=s(oU);uMr=r(z6t,"TFXLMRobertaForQuestionAnswering"),z6t.forEach(t),_Mr=r(sRe," (XLM-RoBERTa model)"),sRe.forEach(t),bMr=i(ge),kM=n(ge,"LI",{});var lRe=s(kM);zFe=n(lRe,"STRONG",{});var Q6t=s(zFe);vMr=r(Q6t,"xlnet"),Q6t.forEach(t),FMr=r(lRe," \u2014 "),rU=n(lRe,"A",{href:!0});var W6t=s(rU);TMr=r(W6t,"TFXLNetForQuestionAnsweringSimple"),W6t.forEach(t),MMr=r(lRe," (XLNet model)"),lRe.forEach(t),ge.forEach(t),EMr=i(Sl),T(SM.$$.fragment,Sl),Sl.forEach(t),kl.forEach(t),IIe=i(f),Fc=n(f,"H2",{class:!0});var VNe=s(Fc);RM=n(VNe,"A",{id:!0,class:!0,href:!0});var H6t=s(RM);QFe=n(H6t,"SPAN",{});var U6t=s(QFe);T($L.$$.fragment,U6t),U6t.forEach(t),H6t.forEach(t),CMr=i(VNe),WFe=n(VNe,"SPAN",{});var J6t=s(WFe);wMr=r(J6t,"TFAutoModelForVision2Seq"),J6t.forEach(t),VNe.forEach(t),qIe=i(f),dr=n(f,"DIV",{class:!0});var Rl=s(dr);T(kL.$$.fragment,Rl),AMr=i(Rl),Tc=n(Rl,"P",{});var dZ=s(Tc);yMr=r(dZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),tU=n(dZ,"A",{href:!0});var Y6t=s(tU);LMr=r(Y6t,"from_pretrained()"),Y6t.forEach(t),xMr=r(dZ," class method or the "),aU=n(dZ,"A",{href:!0});var K6t=s(aU);$Mr=r(K6t,"from_config()"),K6t.forEach(t),kMr=r(dZ,` class
method.`),dZ.forEach(t),SMr=i(Rl),SL=n(Rl,"P",{});var XNe=s(SL);RMr=r(XNe,"This class cannot be instantiated directly using "),HFe=n(XNe,"CODE",{});var Z6t=s(HFe);BMr=r(Z6t,"__init__()"),Z6t.forEach(t),PMr=r(XNe," (throws an error)."),XNe.forEach(t),IMr=i(Rl),qt=n(Rl,"DIV",{class:!0});var c3=s(qt);T(RL.$$.fragment,c3),qMr=i(c3),UFe=n(c3,"P",{});var eTt=s(UFe);NMr=r(eTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),eTt.forEach(t),jMr=i(c3),Mc=n(c3,"P",{});var cZ=s(Mc);DMr=r(cZ,`Note:
Loading a model from its configuration file does `),JFe=n(cZ,"STRONG",{});var oTt=s(JFe);GMr=r(oTt,"not"),oTt.forEach(t),OMr=r(cZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),nU=n(cZ,"A",{href:!0});var rTt=s(nU);VMr=r(rTt,"from_pretrained()"),rTt.forEach(t),XMr=r(cZ," to load the model weights."),cZ.forEach(t),zMr=i(c3),T(BM.$$.fragment,c3),c3.forEach(t),QMr=i(Rl),qr=n(Rl,"DIV",{class:!0});var Bl=s(qr);T(BL.$$.fragment,Bl),WMr=i(Bl),YFe=n(Bl,"P",{});var tTt=s(YFe);HMr=r(tTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),tTt.forEach(t),UMr=i(Bl),fn=n(Bl,"P",{});var f3=s(fn);JMr=r(f3,"The model class to instantiate is selected based on the "),KFe=n(f3,"CODE",{});var aTt=s(KFe);YMr=r(aTt,"model_type"),aTt.forEach(t),KMr=r(f3,` property of the config object (either
passed as an argument or loaded from `),ZFe=n(f3,"CODE",{});var nTt=s(ZFe);ZMr=r(nTt,"pretrained_model_name_or_path"),nTt.forEach(t),e4r=r(f3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),e0e=n(f3,"CODE",{});var sTt=s(e0e);o4r=r(sTt,"pretrained_model_name_or_path"),sTt.forEach(t),r4r=r(f3,":"),f3.forEach(t),t4r=i(Bl),o0e=n(Bl,"UL",{});var lTt=s(o0e);PM=n(lTt,"LI",{});var iRe=s(PM);r0e=n(iRe,"STRONG",{});var iTt=s(r0e);a4r=r(iTt,"vision-encoder-decoder"),iTt.forEach(t),n4r=r(iRe," \u2014 "),sU=n(iRe,"A",{href:!0});var dTt=s(sU);s4r=r(dTt,"TFVisionEncoderDecoderModel"),dTt.forEach(t),l4r=r(iRe," (Vision Encoder decoder model)"),iRe.forEach(t),lTt.forEach(t),i4r=i(Bl),T(IM.$$.fragment,Bl),Bl.forEach(t),Rl.forEach(t),NIe=i(f),Ec=n(f,"H2",{class:!0});var zNe=s(Ec);qM=n(zNe,"A",{id:!0,class:!0,href:!0});var cTt=s(qM);t0e=n(cTt,"SPAN",{});var fTt=s(t0e);T(PL.$$.fragment,fTt),fTt.forEach(t),cTt.forEach(t),d4r=i(zNe),a0e=n(zNe,"SPAN",{});var mTt=s(a0e);c4r=r(mTt,"TFAutoModelForSpeechSeq2Seq"),mTt.forEach(t),zNe.forEach(t),jIe=i(f),cr=n(f,"DIV",{class:!0});var Pl=s(cr);T(IL.$$.fragment,Pl),f4r=i(Pl),Cc=n(Pl,"P",{});var fZ=s(Cc);m4r=r(fZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),lU=n(fZ,"A",{href:!0});var gTt=s(lU);g4r=r(gTt,"from_pretrained()"),gTt.forEach(t),h4r=r(fZ," class method or the "),iU=n(fZ,"A",{href:!0});var hTt=s(iU);p4r=r(hTt,"from_config()"),hTt.forEach(t),u4r=r(fZ,` class
method.`),fZ.forEach(t),_4r=i(Pl),qL=n(Pl,"P",{});var QNe=s(qL);b4r=r(QNe,"This class cannot be instantiated directly using "),n0e=n(QNe,"CODE",{});var pTt=s(n0e);v4r=r(pTt,"__init__()"),pTt.forEach(t),F4r=r(QNe," (throws an error)."),QNe.forEach(t),T4r=i(Pl),Nt=n(Pl,"DIV",{class:!0});var m3=s(Nt);T(NL.$$.fragment,m3),M4r=i(m3),s0e=n(m3,"P",{});var uTt=s(s0e);E4r=r(uTt,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),uTt.forEach(t),C4r=i(m3),wc=n(m3,"P",{});var mZ=s(wc);w4r=r(mZ,`Note:
Loading a model from its configuration file does `),l0e=n(mZ,"STRONG",{});var _Tt=s(l0e);A4r=r(_Tt,"not"),_Tt.forEach(t),y4r=r(mZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),dU=n(mZ,"A",{href:!0});var bTt=s(dU);L4r=r(bTt,"from_pretrained()"),bTt.forEach(t),x4r=r(mZ," to load the model weights."),mZ.forEach(t),$4r=i(m3),T(NM.$$.fragment,m3),m3.forEach(t),k4r=i(Pl),Nr=n(Pl,"DIV",{class:!0});var Il=s(Nr);T(jL.$$.fragment,Il),S4r=i(Il),i0e=n(Il,"P",{});var vTt=s(i0e);R4r=r(vTt,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),vTt.forEach(t),B4r=i(Il),mn=n(Il,"P",{});var g3=s(mn);P4r=r(g3,"The model class to instantiate is selected based on the "),d0e=n(g3,"CODE",{});var FTt=s(d0e);I4r=r(FTt,"model_type"),FTt.forEach(t),q4r=r(g3,` property of the config object (either
passed as an argument or loaded from `),c0e=n(g3,"CODE",{});var TTt=s(c0e);N4r=r(TTt,"pretrained_model_name_or_path"),TTt.forEach(t),j4r=r(g3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f0e=n(g3,"CODE",{});var MTt=s(f0e);D4r=r(MTt,"pretrained_model_name_or_path"),MTt.forEach(t),G4r=r(g3,":"),g3.forEach(t),O4r=i(Il),m0e=n(Il,"UL",{});var ETt=s(m0e);jM=n(ETt,"LI",{});var dRe=s(jM);g0e=n(dRe,"STRONG",{});var CTt=s(g0e);V4r=r(CTt,"speech_to_text"),CTt.forEach(t),X4r=r(dRe," \u2014 "),cU=n(dRe,"A",{href:!0});var wTt=s(cU);z4r=r(wTt,"TFSpeech2TextForConditionalGeneration"),wTt.forEach(t),Q4r=r(dRe," (Speech2Text model)"),dRe.forEach(t),ETt.forEach(t),W4r=i(Il),T(DM.$$.fragment,Il),Il.forEach(t),Pl.forEach(t),DIe=i(f),Ac=n(f,"H2",{class:!0});var WNe=s(Ac);GM=n(WNe,"A",{id:!0,class:!0,href:!0});var ATt=s(GM);h0e=n(ATt,"SPAN",{});var yTt=s(h0e);T(DL.$$.fragment,yTt),yTt.forEach(t),ATt.forEach(t),H4r=i(WNe),p0e=n(WNe,"SPAN",{});var LTt=s(p0e);U4r=r(LTt,"FlaxAutoModel"),LTt.forEach(t),WNe.forEach(t),GIe=i(f),fr=n(f,"DIV",{class:!0});var ql=s(fr);T(GL.$$.fragment,ql),J4r=i(ql),yc=n(ql,"P",{});var gZ=s(yc);Y4r=r(gZ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),fU=n(gZ,"A",{href:!0});var xTt=s(fU);K4r=r(xTt,"from_pretrained()"),xTt.forEach(t),Z4r=r(gZ," class method or the "),mU=n(gZ,"A",{href:!0});var $Tt=s(mU);eEr=r($Tt,"from_config()"),$Tt.forEach(t),oEr=r(gZ,` class
method.`),gZ.forEach(t),rEr=i(ql),OL=n(ql,"P",{});var HNe=s(OL);tEr=r(HNe,"This class cannot be instantiated directly using "),u0e=n(HNe,"CODE",{});var kTt=s(u0e);aEr=r(kTt,"__init__()"),kTt.forEach(t),nEr=r(HNe," (throws an error)."),HNe.forEach(t),sEr=i(ql),jt=n(ql,"DIV",{class:!0});var h3=s(jt);T(VL.$$.fragment,h3),lEr=i(h3),_0e=n(h3,"P",{});var STt=s(_0e);iEr=r(STt,"Instantiates one of the base model classes of the library from a configuration."),STt.forEach(t),dEr=i(h3),Lc=n(h3,"P",{});var hZ=s(Lc);cEr=r(hZ,`Note:
Loading a model from its configuration file does `),b0e=n(hZ,"STRONG",{});var RTt=s(b0e);fEr=r(RTt,"not"),RTt.forEach(t),mEr=r(hZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),gU=n(hZ,"A",{href:!0});var BTt=s(gU);gEr=r(BTt,"from_pretrained()"),BTt.forEach(t),hEr=r(hZ," to load the model weights."),hZ.forEach(t),pEr=i(h3),T(OM.$$.fragment,h3),h3.forEach(t),uEr=i(ql),jr=n(ql,"DIV",{class:!0});var Nl=s(jr);T(XL.$$.fragment,Nl),_Er=i(Nl),v0e=n(Nl,"P",{});var PTt=s(v0e);bEr=r(PTt,"Instantiate one of the base model classes of the library from a pretrained model."),PTt.forEach(t),vEr=i(Nl),gn=n(Nl,"P",{});var p3=s(gn);FEr=r(p3,"The model class to instantiate is selected based on the "),F0e=n(p3,"CODE",{});var ITt=s(F0e);TEr=r(ITt,"model_type"),ITt.forEach(t),MEr=r(p3,` property of the config object (either
passed as an argument or loaded from `),T0e=n(p3,"CODE",{});var qTt=s(T0e);EEr=r(qTt,"pretrained_model_name_or_path"),qTt.forEach(t),CEr=r(p3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),M0e=n(p3,"CODE",{});var NTt=s(M0e);wEr=r(NTt,"pretrained_model_name_or_path"),NTt.forEach(t),AEr=r(p3,":"),p3.forEach(t),yEr=i(Nl),oe=n(Nl,"UL",{});var ae=s(oe);VM=n(ae,"LI",{});var cRe=s(VM);E0e=n(cRe,"STRONG",{});var jTt=s(E0e);LEr=r(jTt,"albert"),jTt.forEach(t),xEr=r(cRe," \u2014 "),hU=n(cRe,"A",{href:!0});var DTt=s(hU);$Er=r(DTt,"FlaxAlbertModel"),DTt.forEach(t),kEr=r(cRe," (ALBERT model)"),cRe.forEach(t),SEr=i(ae),XM=n(ae,"LI",{});var fRe=s(XM);C0e=n(fRe,"STRONG",{});var GTt=s(C0e);REr=r(GTt,"bart"),GTt.forEach(t),BEr=r(fRe," \u2014 "),pU=n(fRe,"A",{href:!0});var OTt=s(pU);PEr=r(OTt,"FlaxBartModel"),OTt.forEach(t),IEr=r(fRe," (BART model)"),fRe.forEach(t),qEr=i(ae),zM=n(ae,"LI",{});var mRe=s(zM);w0e=n(mRe,"STRONG",{});var VTt=s(w0e);NEr=r(VTt,"beit"),VTt.forEach(t),jEr=r(mRe," \u2014 "),uU=n(mRe,"A",{href:!0});var XTt=s(uU);DEr=r(XTt,"FlaxBeitModel"),XTt.forEach(t),GEr=r(mRe," (BEiT model)"),mRe.forEach(t),OEr=i(ae),QM=n(ae,"LI",{});var gRe=s(QM);A0e=n(gRe,"STRONG",{});var zTt=s(A0e);VEr=r(zTt,"bert"),zTt.forEach(t),XEr=r(gRe," \u2014 "),_U=n(gRe,"A",{href:!0});var QTt=s(_U);zEr=r(QTt,"FlaxBertModel"),QTt.forEach(t),QEr=r(gRe," (BERT model)"),gRe.forEach(t),WEr=i(ae),WM=n(ae,"LI",{});var hRe=s(WM);y0e=n(hRe,"STRONG",{});var WTt=s(y0e);HEr=r(WTt,"big_bird"),WTt.forEach(t),UEr=r(hRe," \u2014 "),bU=n(hRe,"A",{href:!0});var HTt=s(bU);JEr=r(HTt,"FlaxBigBirdModel"),HTt.forEach(t),YEr=r(hRe," (BigBird model)"),hRe.forEach(t),KEr=i(ae),HM=n(ae,"LI",{});var pRe=s(HM);L0e=n(pRe,"STRONG",{});var UTt=s(L0e);ZEr=r(UTt,"blenderbot"),UTt.forEach(t),e5r=r(pRe," \u2014 "),vU=n(pRe,"A",{href:!0});var JTt=s(vU);o5r=r(JTt,"FlaxBlenderbotModel"),JTt.forEach(t),r5r=r(pRe," (Blenderbot model)"),pRe.forEach(t),t5r=i(ae),UM=n(ae,"LI",{});var uRe=s(UM);x0e=n(uRe,"STRONG",{});var YTt=s(x0e);a5r=r(YTt,"blenderbot-small"),YTt.forEach(t),n5r=r(uRe," \u2014 "),FU=n(uRe,"A",{href:!0});var KTt=s(FU);s5r=r(KTt,"FlaxBlenderbotSmallModel"),KTt.forEach(t),l5r=r(uRe," (BlenderbotSmall model)"),uRe.forEach(t),i5r=i(ae),JM=n(ae,"LI",{});var _Re=s(JM);$0e=n(_Re,"STRONG",{});var ZTt=s($0e);d5r=r(ZTt,"clip"),ZTt.forEach(t),c5r=r(_Re," \u2014 "),TU=n(_Re,"A",{href:!0});var e7t=s(TU);f5r=r(e7t,"FlaxCLIPModel"),e7t.forEach(t),m5r=r(_Re," (CLIP model)"),_Re.forEach(t),g5r=i(ae),YM=n(ae,"LI",{});var bRe=s(YM);k0e=n(bRe,"STRONG",{});var o7t=s(k0e);h5r=r(o7t,"distilbert"),o7t.forEach(t),p5r=r(bRe," \u2014 "),MU=n(bRe,"A",{href:!0});var r7t=s(MU);u5r=r(r7t,"FlaxDistilBertModel"),r7t.forEach(t),_5r=r(bRe," (DistilBERT model)"),bRe.forEach(t),b5r=i(ae),KM=n(ae,"LI",{});var vRe=s(KM);S0e=n(vRe,"STRONG",{});var t7t=s(S0e);v5r=r(t7t,"electra"),t7t.forEach(t),F5r=r(vRe," \u2014 "),EU=n(vRe,"A",{href:!0});var a7t=s(EU);T5r=r(a7t,"FlaxElectraModel"),a7t.forEach(t),M5r=r(vRe," (ELECTRA model)"),vRe.forEach(t),E5r=i(ae),ZM=n(ae,"LI",{});var FRe=s(ZM);R0e=n(FRe,"STRONG",{});var n7t=s(R0e);C5r=r(n7t,"gpt2"),n7t.forEach(t),w5r=r(FRe," \u2014 "),CU=n(FRe,"A",{href:!0});var s7t=s(CU);A5r=r(s7t,"FlaxGPT2Model"),s7t.forEach(t),y5r=r(FRe," (OpenAI GPT-2 model)"),FRe.forEach(t),L5r=i(ae),e4=n(ae,"LI",{});var TRe=s(e4);B0e=n(TRe,"STRONG",{});var l7t=s(B0e);x5r=r(l7t,"gpt_neo"),l7t.forEach(t),$5r=r(TRe," \u2014 "),wU=n(TRe,"A",{href:!0});var i7t=s(wU);k5r=r(i7t,"FlaxGPTNeoModel"),i7t.forEach(t),S5r=r(TRe," (GPT Neo model)"),TRe.forEach(t),R5r=i(ae),o4=n(ae,"LI",{});var MRe=s(o4);P0e=n(MRe,"STRONG",{});var d7t=s(P0e);B5r=r(d7t,"gptj"),d7t.forEach(t),P5r=r(MRe," \u2014 "),AU=n(MRe,"A",{href:!0});var c7t=s(AU);I5r=r(c7t,"FlaxGPTJModel"),c7t.forEach(t),q5r=r(MRe," (GPT-J model)"),MRe.forEach(t),N5r=i(ae),r4=n(ae,"LI",{});var ERe=s(r4);I0e=n(ERe,"STRONG",{});var f7t=s(I0e);j5r=r(f7t,"marian"),f7t.forEach(t),D5r=r(ERe," \u2014 "),yU=n(ERe,"A",{href:!0});var m7t=s(yU);G5r=r(m7t,"FlaxMarianModel"),m7t.forEach(t),O5r=r(ERe," (Marian model)"),ERe.forEach(t),V5r=i(ae),t4=n(ae,"LI",{});var CRe=s(t4);q0e=n(CRe,"STRONG",{});var g7t=s(q0e);X5r=r(g7t,"mbart"),g7t.forEach(t),z5r=r(CRe," \u2014 "),LU=n(CRe,"A",{href:!0});var h7t=s(LU);Q5r=r(h7t,"FlaxMBartModel"),h7t.forEach(t),W5r=r(CRe," (mBART model)"),CRe.forEach(t),H5r=i(ae),a4=n(ae,"LI",{});var wRe=s(a4);N0e=n(wRe,"STRONG",{});var p7t=s(N0e);U5r=r(p7t,"mt5"),p7t.forEach(t),J5r=r(wRe," \u2014 "),xU=n(wRe,"A",{href:!0});var u7t=s(xU);Y5r=r(u7t,"FlaxMT5Model"),u7t.forEach(t),K5r=r(wRe," (mT5 model)"),wRe.forEach(t),Z5r=i(ae),n4=n(ae,"LI",{});var ARe=s(n4);j0e=n(ARe,"STRONG",{});var _7t=s(j0e);eCr=r(_7t,"pegasus"),_7t.forEach(t),oCr=r(ARe," \u2014 "),$U=n(ARe,"A",{href:!0});var b7t=s($U);rCr=r(b7t,"FlaxPegasusModel"),b7t.forEach(t),tCr=r(ARe," (Pegasus model)"),ARe.forEach(t),aCr=i(ae),s4=n(ae,"LI",{});var yRe=s(s4);D0e=n(yRe,"STRONG",{});var v7t=s(D0e);nCr=r(v7t,"roberta"),v7t.forEach(t),sCr=r(yRe," \u2014 "),kU=n(yRe,"A",{href:!0});var F7t=s(kU);lCr=r(F7t,"FlaxRobertaModel"),F7t.forEach(t),iCr=r(yRe," (RoBERTa model)"),yRe.forEach(t),dCr=i(ae),l4=n(ae,"LI",{});var LRe=s(l4);G0e=n(LRe,"STRONG",{});var T7t=s(G0e);cCr=r(T7t,"roformer"),T7t.forEach(t),fCr=r(LRe," \u2014 "),SU=n(LRe,"A",{href:!0});var M7t=s(SU);mCr=r(M7t,"FlaxRoFormerModel"),M7t.forEach(t),gCr=r(LRe," (RoFormer model)"),LRe.forEach(t),hCr=i(ae),i4=n(ae,"LI",{});var xRe=s(i4);O0e=n(xRe,"STRONG",{});var E7t=s(O0e);pCr=r(E7t,"t5"),E7t.forEach(t),uCr=r(xRe," \u2014 "),RU=n(xRe,"A",{href:!0});var C7t=s(RU);_Cr=r(C7t,"FlaxT5Model"),C7t.forEach(t),bCr=r(xRe," (T5 model)"),xRe.forEach(t),vCr=i(ae),d4=n(ae,"LI",{});var $Re=s(d4);V0e=n($Re,"STRONG",{});var w7t=s(V0e);FCr=r(w7t,"vision-text-dual-encoder"),w7t.forEach(t),TCr=r($Re," \u2014 "),BU=n($Re,"A",{href:!0});var A7t=s(BU);MCr=r(A7t,"FlaxVisionTextDualEncoderModel"),A7t.forEach(t),ECr=r($Re," (VisionTextDualEncoder model)"),$Re.forEach(t),CCr=i(ae),c4=n(ae,"LI",{});var kRe=s(c4);X0e=n(kRe,"STRONG",{});var y7t=s(X0e);wCr=r(y7t,"vit"),y7t.forEach(t),ACr=r(kRe," \u2014 "),PU=n(kRe,"A",{href:!0});var L7t=s(PU);yCr=r(L7t,"FlaxViTModel"),L7t.forEach(t),LCr=r(kRe," (ViT model)"),kRe.forEach(t),xCr=i(ae),f4=n(ae,"LI",{});var SRe=s(f4);z0e=n(SRe,"STRONG",{});var x7t=s(z0e);$Cr=r(x7t,"wav2vec2"),x7t.forEach(t),kCr=r(SRe," \u2014 "),IU=n(SRe,"A",{href:!0});var $7t=s(IU);SCr=r($7t,"FlaxWav2Vec2Model"),$7t.forEach(t),RCr=r(SRe," (Wav2Vec2 model)"),SRe.forEach(t),BCr=i(ae),m4=n(ae,"LI",{});var RRe=s(m4);Q0e=n(RRe,"STRONG",{});var k7t=s(Q0e);PCr=r(k7t,"xglm"),k7t.forEach(t),ICr=r(RRe," \u2014 "),qU=n(RRe,"A",{href:!0});var S7t=s(qU);qCr=r(S7t,"FlaxXGLMModel"),S7t.forEach(t),NCr=r(RRe," (XGLM model)"),RRe.forEach(t),jCr=i(ae),g4=n(ae,"LI",{});var BRe=s(g4);W0e=n(BRe,"STRONG",{});var R7t=s(W0e);DCr=r(R7t,"xlm-roberta"),R7t.forEach(t),GCr=r(BRe," \u2014 "),NU=n(BRe,"A",{href:!0});var B7t=s(NU);OCr=r(B7t,"FlaxXLMRobertaModel"),B7t.forEach(t),VCr=r(BRe," (XLM-RoBERTa model)"),BRe.forEach(t),ae.forEach(t),XCr=i(Nl),T(h4.$$.fragment,Nl),Nl.forEach(t),ql.forEach(t),OIe=i(f),xc=n(f,"H2",{class:!0});var UNe=s(xc);p4=n(UNe,"A",{id:!0,class:!0,href:!0});var P7t=s(p4);H0e=n(P7t,"SPAN",{});var I7t=s(H0e);T(zL.$$.fragment,I7t),I7t.forEach(t),P7t.forEach(t),zCr=i(UNe),U0e=n(UNe,"SPAN",{});var q7t=s(U0e);QCr=r(q7t,"FlaxAutoModelForCausalLM"),q7t.forEach(t),UNe.forEach(t),VIe=i(f),mr=n(f,"DIV",{class:!0});var jl=s(mr);T(QL.$$.fragment,jl),WCr=i(jl),$c=n(jl,"P",{});var pZ=s($c);HCr=r(pZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),jU=n(pZ,"A",{href:!0});var N7t=s(jU);UCr=r(N7t,"from_pretrained()"),N7t.forEach(t),JCr=r(pZ," class method or the "),DU=n(pZ,"A",{href:!0});var j7t=s(DU);YCr=r(j7t,"from_config()"),j7t.forEach(t),KCr=r(pZ,` class
method.`),pZ.forEach(t),ZCr=i(jl),WL=n(jl,"P",{});var JNe=s(WL);e3r=r(JNe,"This class cannot be instantiated directly using "),J0e=n(JNe,"CODE",{});var D7t=s(J0e);o3r=r(D7t,"__init__()"),D7t.forEach(t),r3r=r(JNe," (throws an error)."),JNe.forEach(t),t3r=i(jl),Dt=n(jl,"DIV",{class:!0});var u3=s(Dt);T(HL.$$.fragment,u3),a3r=i(u3),Y0e=n(u3,"P",{});var G7t=s(Y0e);n3r=r(G7t,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),G7t.forEach(t),s3r=i(u3),kc=n(u3,"P",{});var uZ=s(kc);l3r=r(uZ,`Note:
Loading a model from its configuration file does `),K0e=n(uZ,"STRONG",{});var O7t=s(K0e);i3r=r(O7t,"not"),O7t.forEach(t),d3r=r(uZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),GU=n(uZ,"A",{href:!0});var V7t=s(GU);c3r=r(V7t,"from_pretrained()"),V7t.forEach(t),f3r=r(uZ," to load the model weights."),uZ.forEach(t),m3r=i(u3),T(u4.$$.fragment,u3),u3.forEach(t),g3r=i(jl),Dr=n(jl,"DIV",{class:!0});var Dl=s(Dr);T(UL.$$.fragment,Dl),h3r=i(Dl),Z0e=n(Dl,"P",{});var X7t=s(Z0e);p3r=r(X7t,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),X7t.forEach(t),u3r=i(Dl),hn=n(Dl,"P",{});var _3=s(hn);_3r=r(_3,"The model class to instantiate is selected based on the "),e6e=n(_3,"CODE",{});var z7t=s(e6e);b3r=r(z7t,"model_type"),z7t.forEach(t),v3r=r(_3,` property of the config object (either
passed as an argument or loaded from `),o6e=n(_3,"CODE",{});var Q7t=s(o6e);F3r=r(Q7t,"pretrained_model_name_or_path"),Q7t.forEach(t),T3r=r(_3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),r6e=n(_3,"CODE",{});var W7t=s(r6e);M3r=r(W7t,"pretrained_model_name_or_path"),W7t.forEach(t),E3r=r(_3,":"),_3.forEach(t),C3r=i(Dl),ke=n(Dl,"UL",{});var Oe=s(ke);_4=n(Oe,"LI",{});var PRe=s(_4);t6e=n(PRe,"STRONG",{});var H7t=s(t6e);w3r=r(H7t,"bart"),H7t.forEach(t),A3r=r(PRe," \u2014 "),OU=n(PRe,"A",{href:!0});var U7t=s(OU);y3r=r(U7t,"FlaxBartForCausalLM"),U7t.forEach(t),L3r=r(PRe," (BART model)"),PRe.forEach(t),x3r=i(Oe),b4=n(Oe,"LI",{});var IRe=s(b4);a6e=n(IRe,"STRONG",{});var J7t=s(a6e);$3r=r(J7t,"bert"),J7t.forEach(t),k3r=r(IRe," \u2014 "),VU=n(IRe,"A",{href:!0});var Y7t=s(VU);S3r=r(Y7t,"FlaxBertForCausalLM"),Y7t.forEach(t),R3r=r(IRe," (BERT model)"),IRe.forEach(t),B3r=i(Oe),v4=n(Oe,"LI",{});var qRe=s(v4);n6e=n(qRe,"STRONG",{});var K7t=s(n6e);P3r=r(K7t,"big_bird"),K7t.forEach(t),I3r=r(qRe," \u2014 "),XU=n(qRe,"A",{href:!0});var Z7t=s(XU);q3r=r(Z7t,"FlaxBigBirdForCausalLM"),Z7t.forEach(t),N3r=r(qRe," (BigBird model)"),qRe.forEach(t),j3r=i(Oe),F4=n(Oe,"LI",{});var NRe=s(F4);s6e=n(NRe,"STRONG",{});var e9t=s(s6e);D3r=r(e9t,"electra"),e9t.forEach(t),G3r=r(NRe," \u2014 "),zU=n(NRe,"A",{href:!0});var o9t=s(zU);O3r=r(o9t,"FlaxElectraForCausalLM"),o9t.forEach(t),V3r=r(NRe," (ELECTRA model)"),NRe.forEach(t),X3r=i(Oe),T4=n(Oe,"LI",{});var jRe=s(T4);l6e=n(jRe,"STRONG",{});var r9t=s(l6e);z3r=r(r9t,"gpt2"),r9t.forEach(t),Q3r=r(jRe," \u2014 "),QU=n(jRe,"A",{href:!0});var t9t=s(QU);W3r=r(t9t,"FlaxGPT2LMHeadModel"),t9t.forEach(t),H3r=r(jRe," (OpenAI GPT-2 model)"),jRe.forEach(t),U3r=i(Oe),M4=n(Oe,"LI",{});var DRe=s(M4);i6e=n(DRe,"STRONG",{});var a9t=s(i6e);J3r=r(a9t,"gpt_neo"),a9t.forEach(t),Y3r=r(DRe," \u2014 "),WU=n(DRe,"A",{href:!0});var n9t=s(WU);K3r=r(n9t,"FlaxGPTNeoForCausalLM"),n9t.forEach(t),Z3r=r(DRe," (GPT Neo model)"),DRe.forEach(t),ewr=i(Oe),E4=n(Oe,"LI",{});var GRe=s(E4);d6e=n(GRe,"STRONG",{});var s9t=s(d6e);owr=r(s9t,"gptj"),s9t.forEach(t),rwr=r(GRe," \u2014 "),HU=n(GRe,"A",{href:!0});var l9t=s(HU);twr=r(l9t,"FlaxGPTJForCausalLM"),l9t.forEach(t),awr=r(GRe," (GPT-J model)"),GRe.forEach(t),nwr=i(Oe),C4=n(Oe,"LI",{});var ORe=s(C4);c6e=n(ORe,"STRONG",{});var i9t=s(c6e);swr=r(i9t,"roberta"),i9t.forEach(t),lwr=r(ORe," \u2014 "),UU=n(ORe,"A",{href:!0});var d9t=s(UU);iwr=r(d9t,"FlaxRobertaForCausalLM"),d9t.forEach(t),dwr=r(ORe," (RoBERTa model)"),ORe.forEach(t),cwr=i(Oe),w4=n(Oe,"LI",{});var VRe=s(w4);f6e=n(VRe,"STRONG",{});var c9t=s(f6e);fwr=r(c9t,"xglm"),c9t.forEach(t),mwr=r(VRe," \u2014 "),JU=n(VRe,"A",{href:!0});var f9t=s(JU);gwr=r(f9t,"FlaxXGLMForCausalLM"),f9t.forEach(t),hwr=r(VRe," (XGLM model)"),VRe.forEach(t),Oe.forEach(t),pwr=i(Dl),T(A4.$$.fragment,Dl),Dl.forEach(t),jl.forEach(t),XIe=i(f),Sc=n(f,"H2",{class:!0});var YNe=s(Sc);y4=n(YNe,"A",{id:!0,class:!0,href:!0});var m9t=s(y4);m6e=n(m9t,"SPAN",{});var g9t=s(m6e);T(JL.$$.fragment,g9t),g9t.forEach(t),m9t.forEach(t),uwr=i(YNe),g6e=n(YNe,"SPAN",{});var h9t=s(g6e);_wr=r(h9t,"FlaxAutoModelForPreTraining"),h9t.forEach(t),YNe.forEach(t),zIe=i(f),gr=n(f,"DIV",{class:!0});var Gl=s(gr);T(YL.$$.fragment,Gl),bwr=i(Gl),Rc=n(Gl,"P",{});var _Z=s(Rc);vwr=r(_Z,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),YU=n(_Z,"A",{href:!0});var p9t=s(YU);Fwr=r(p9t,"from_pretrained()"),p9t.forEach(t),Twr=r(_Z," class method or the "),KU=n(_Z,"A",{href:!0});var u9t=s(KU);Mwr=r(u9t,"from_config()"),u9t.forEach(t),Ewr=r(_Z,` class
method.`),_Z.forEach(t),Cwr=i(Gl),KL=n(Gl,"P",{});var KNe=s(KL);wwr=r(KNe,"This class cannot be instantiated directly using "),h6e=n(KNe,"CODE",{});var _9t=s(h6e);Awr=r(_9t,"__init__()"),_9t.forEach(t),ywr=r(KNe," (throws an error)."),KNe.forEach(t),Lwr=i(Gl),Gt=n(Gl,"DIV",{class:!0});var b3=s(Gt);T(ZL.$$.fragment,b3),xwr=i(b3),p6e=n(b3,"P",{});var b9t=s(p6e);$wr=r(b9t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),b9t.forEach(t),kwr=i(b3),Bc=n(b3,"P",{});var bZ=s(Bc);Swr=r(bZ,`Note:
Loading a model from its configuration file does `),u6e=n(bZ,"STRONG",{});var v9t=s(u6e);Rwr=r(v9t,"not"),v9t.forEach(t),Bwr=r(bZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),ZU=n(bZ,"A",{href:!0});var F9t=s(ZU);Pwr=r(F9t,"from_pretrained()"),F9t.forEach(t),Iwr=r(bZ," to load the model weights."),bZ.forEach(t),qwr=i(b3),T(L4.$$.fragment,b3),b3.forEach(t),Nwr=i(Gl),Gr=n(Gl,"DIV",{class:!0});var Ol=s(Gr);T(e8.$$.fragment,Ol),jwr=i(Ol),_6e=n(Ol,"P",{});var T9t=s(_6e);Dwr=r(T9t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),T9t.forEach(t),Gwr=i(Ol),pn=n(Ol,"P",{});var v3=s(pn);Owr=r(v3,"The model class to instantiate is selected based on the "),b6e=n(v3,"CODE",{});var M9t=s(b6e);Vwr=r(M9t,"model_type"),M9t.forEach(t),Xwr=r(v3,` property of the config object (either
passed as an argument or loaded from `),v6e=n(v3,"CODE",{});var E9t=s(v6e);zwr=r(E9t,"pretrained_model_name_or_path"),E9t.forEach(t),Qwr=r(v3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),F6e=n(v3,"CODE",{});var C9t=s(F6e);Wwr=r(C9t,"pretrained_model_name_or_path"),C9t.forEach(t),Hwr=r(v3,":"),v3.forEach(t),Uwr=i(Ol),Me=n(Ol,"UL",{});var we=s(Me);x4=n(we,"LI",{});var XRe=s(x4);T6e=n(XRe,"STRONG",{});var w9t=s(T6e);Jwr=r(w9t,"albert"),w9t.forEach(t),Ywr=r(XRe," \u2014 "),eJ=n(XRe,"A",{href:!0});var A9t=s(eJ);Kwr=r(A9t,"FlaxAlbertForPreTraining"),A9t.forEach(t),Zwr=r(XRe," (ALBERT model)"),XRe.forEach(t),eAr=i(we),$4=n(we,"LI",{});var zRe=s($4);M6e=n(zRe,"STRONG",{});var y9t=s(M6e);oAr=r(y9t,"bart"),y9t.forEach(t),rAr=r(zRe," \u2014 "),oJ=n(zRe,"A",{href:!0});var L9t=s(oJ);tAr=r(L9t,"FlaxBartForConditionalGeneration"),L9t.forEach(t),aAr=r(zRe," (BART model)"),zRe.forEach(t),nAr=i(we),k4=n(we,"LI",{});var QRe=s(k4);E6e=n(QRe,"STRONG",{});var x9t=s(E6e);sAr=r(x9t,"bert"),x9t.forEach(t),lAr=r(QRe," \u2014 "),rJ=n(QRe,"A",{href:!0});var $9t=s(rJ);iAr=r($9t,"FlaxBertForPreTraining"),$9t.forEach(t),dAr=r(QRe," (BERT model)"),QRe.forEach(t),cAr=i(we),S4=n(we,"LI",{});var WRe=s(S4);C6e=n(WRe,"STRONG",{});var k9t=s(C6e);fAr=r(k9t,"big_bird"),k9t.forEach(t),mAr=r(WRe," \u2014 "),tJ=n(WRe,"A",{href:!0});var S9t=s(tJ);gAr=r(S9t,"FlaxBigBirdForPreTraining"),S9t.forEach(t),hAr=r(WRe," (BigBird model)"),WRe.forEach(t),pAr=i(we),R4=n(we,"LI",{});var HRe=s(R4);w6e=n(HRe,"STRONG",{});var R9t=s(w6e);uAr=r(R9t,"electra"),R9t.forEach(t),_Ar=r(HRe," \u2014 "),aJ=n(HRe,"A",{href:!0});var B9t=s(aJ);bAr=r(B9t,"FlaxElectraForPreTraining"),B9t.forEach(t),vAr=r(HRe," (ELECTRA model)"),HRe.forEach(t),FAr=i(we),B4=n(we,"LI",{});var URe=s(B4);A6e=n(URe,"STRONG",{});var P9t=s(A6e);TAr=r(P9t,"mbart"),P9t.forEach(t),MAr=r(URe," \u2014 "),nJ=n(URe,"A",{href:!0});var I9t=s(nJ);EAr=r(I9t,"FlaxMBartForConditionalGeneration"),I9t.forEach(t),CAr=r(URe," (mBART model)"),URe.forEach(t),wAr=i(we),P4=n(we,"LI",{});var JRe=s(P4);y6e=n(JRe,"STRONG",{});var q9t=s(y6e);AAr=r(q9t,"mt5"),q9t.forEach(t),yAr=r(JRe," \u2014 "),sJ=n(JRe,"A",{href:!0});var N9t=s(sJ);LAr=r(N9t,"FlaxMT5ForConditionalGeneration"),N9t.forEach(t),xAr=r(JRe," (mT5 model)"),JRe.forEach(t),$Ar=i(we),I4=n(we,"LI",{});var YRe=s(I4);L6e=n(YRe,"STRONG",{});var j9t=s(L6e);kAr=r(j9t,"roberta"),j9t.forEach(t),SAr=r(YRe," \u2014 "),lJ=n(YRe,"A",{href:!0});var D9t=s(lJ);RAr=r(D9t,"FlaxRobertaForMaskedLM"),D9t.forEach(t),BAr=r(YRe," (RoBERTa model)"),YRe.forEach(t),PAr=i(we),q4=n(we,"LI",{});var KRe=s(q4);x6e=n(KRe,"STRONG",{});var G9t=s(x6e);IAr=r(G9t,"roformer"),G9t.forEach(t),qAr=r(KRe," \u2014 "),iJ=n(KRe,"A",{href:!0});var O9t=s(iJ);NAr=r(O9t,"FlaxRoFormerForMaskedLM"),O9t.forEach(t),jAr=r(KRe," (RoFormer model)"),KRe.forEach(t),DAr=i(we),N4=n(we,"LI",{});var ZRe=s(N4);$6e=n(ZRe,"STRONG",{});var V9t=s($6e);GAr=r(V9t,"t5"),V9t.forEach(t),OAr=r(ZRe," \u2014 "),dJ=n(ZRe,"A",{href:!0});var X9t=s(dJ);VAr=r(X9t,"FlaxT5ForConditionalGeneration"),X9t.forEach(t),XAr=r(ZRe," (T5 model)"),ZRe.forEach(t),zAr=i(we),j4=n(we,"LI",{});var eBe=s(j4);k6e=n(eBe,"STRONG",{});var z9t=s(k6e);QAr=r(z9t,"wav2vec2"),z9t.forEach(t),WAr=r(eBe," \u2014 "),cJ=n(eBe,"A",{href:!0});var Q9t=s(cJ);HAr=r(Q9t,"FlaxWav2Vec2ForPreTraining"),Q9t.forEach(t),UAr=r(eBe," (Wav2Vec2 model)"),eBe.forEach(t),JAr=i(we),D4=n(we,"LI",{});var oBe=s(D4);S6e=n(oBe,"STRONG",{});var W9t=s(S6e);YAr=r(W9t,"xlm-roberta"),W9t.forEach(t),KAr=r(oBe," \u2014 "),fJ=n(oBe,"A",{href:!0});var H9t=s(fJ);ZAr=r(H9t,"FlaxXLMRobertaForMaskedLM"),H9t.forEach(t),eyr=r(oBe," (XLM-RoBERTa model)"),oBe.forEach(t),we.forEach(t),oyr=i(Ol),T(G4.$$.fragment,Ol),Ol.forEach(t),Gl.forEach(t),QIe=i(f),Pc=n(f,"H2",{class:!0});var ZNe=s(Pc);O4=n(ZNe,"A",{id:!0,class:!0,href:!0});var U9t=s(O4);R6e=n(U9t,"SPAN",{});var J9t=s(R6e);T(o8.$$.fragment,J9t),J9t.forEach(t),U9t.forEach(t),ryr=i(ZNe),B6e=n(ZNe,"SPAN",{});var Y9t=s(B6e);tyr=r(Y9t,"FlaxAutoModelForMaskedLM"),Y9t.forEach(t),ZNe.forEach(t),WIe=i(f),hr=n(f,"DIV",{class:!0});var Vl=s(hr);T(r8.$$.fragment,Vl),ayr=i(Vl),Ic=n(Vl,"P",{});var vZ=s(Ic);nyr=r(vZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),mJ=n(vZ,"A",{href:!0});var K9t=s(mJ);syr=r(K9t,"from_pretrained()"),K9t.forEach(t),lyr=r(vZ," class method or the "),gJ=n(vZ,"A",{href:!0});var Z9t=s(gJ);iyr=r(Z9t,"from_config()"),Z9t.forEach(t),dyr=r(vZ,` class
method.`),vZ.forEach(t),cyr=i(Vl),t8=n(Vl,"P",{});var eje=s(t8);fyr=r(eje,"This class cannot be instantiated directly using "),P6e=n(eje,"CODE",{});var eMt=s(P6e);myr=r(eMt,"__init__()"),eMt.forEach(t),gyr=r(eje," (throws an error)."),eje.forEach(t),hyr=i(Vl),Ot=n(Vl,"DIV",{class:!0});var F3=s(Ot);T(a8.$$.fragment,F3),pyr=i(F3),I6e=n(F3,"P",{});var oMt=s(I6e);uyr=r(oMt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),oMt.forEach(t),_yr=i(F3),qc=n(F3,"P",{});var FZ=s(qc);byr=r(FZ,`Note:
Loading a model from its configuration file does `),q6e=n(FZ,"STRONG",{});var rMt=s(q6e);vyr=r(rMt,"not"),rMt.forEach(t),Fyr=r(FZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),hJ=n(FZ,"A",{href:!0});var tMt=s(hJ);Tyr=r(tMt,"from_pretrained()"),tMt.forEach(t),Myr=r(FZ," to load the model weights."),FZ.forEach(t),Eyr=i(F3),T(V4.$$.fragment,F3),F3.forEach(t),Cyr=i(Vl),Or=n(Vl,"DIV",{class:!0});var Xl=s(Or);T(n8.$$.fragment,Xl),wyr=i(Xl),N6e=n(Xl,"P",{});var aMt=s(N6e);Ayr=r(aMt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),aMt.forEach(t),yyr=i(Xl),un=n(Xl,"P",{});var T3=s(un);Lyr=r(T3,"The model class to instantiate is selected based on the "),j6e=n(T3,"CODE",{});var nMt=s(j6e);xyr=r(nMt,"model_type"),nMt.forEach(t),$yr=r(T3,` property of the config object (either
passed as an argument or loaded from `),D6e=n(T3,"CODE",{});var sMt=s(D6e);kyr=r(sMt,"pretrained_model_name_or_path"),sMt.forEach(t),Syr=r(T3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),G6e=n(T3,"CODE",{});var lMt=s(G6e);Ryr=r(lMt,"pretrained_model_name_or_path"),lMt.forEach(t),Byr=r(T3,":"),T3.forEach(t),Pyr=i(Xl),Le=n(Xl,"UL",{});var Be=s(Le);X4=n(Be,"LI",{});var rBe=s(X4);O6e=n(rBe,"STRONG",{});var iMt=s(O6e);Iyr=r(iMt,"albert"),iMt.forEach(t),qyr=r(rBe," \u2014 "),pJ=n(rBe,"A",{href:!0});var dMt=s(pJ);Nyr=r(dMt,"FlaxAlbertForMaskedLM"),dMt.forEach(t),jyr=r(rBe," (ALBERT model)"),rBe.forEach(t),Dyr=i(Be),z4=n(Be,"LI",{});var tBe=s(z4);V6e=n(tBe,"STRONG",{});var cMt=s(V6e);Gyr=r(cMt,"bart"),cMt.forEach(t),Oyr=r(tBe," \u2014 "),uJ=n(tBe,"A",{href:!0});var fMt=s(uJ);Vyr=r(fMt,"FlaxBartForConditionalGeneration"),fMt.forEach(t),Xyr=r(tBe," (BART model)"),tBe.forEach(t),zyr=i(Be),Q4=n(Be,"LI",{});var aBe=s(Q4);X6e=n(aBe,"STRONG",{});var mMt=s(X6e);Qyr=r(mMt,"bert"),mMt.forEach(t),Wyr=r(aBe," \u2014 "),_J=n(aBe,"A",{href:!0});var gMt=s(_J);Hyr=r(gMt,"FlaxBertForMaskedLM"),gMt.forEach(t),Uyr=r(aBe," (BERT model)"),aBe.forEach(t),Jyr=i(Be),W4=n(Be,"LI",{});var nBe=s(W4);z6e=n(nBe,"STRONG",{});var hMt=s(z6e);Yyr=r(hMt,"big_bird"),hMt.forEach(t),Kyr=r(nBe," \u2014 "),bJ=n(nBe,"A",{href:!0});var pMt=s(bJ);Zyr=r(pMt,"FlaxBigBirdForMaskedLM"),pMt.forEach(t),eLr=r(nBe," (BigBird model)"),nBe.forEach(t),oLr=i(Be),H4=n(Be,"LI",{});var sBe=s(H4);Q6e=n(sBe,"STRONG",{});var uMt=s(Q6e);rLr=r(uMt,"distilbert"),uMt.forEach(t),tLr=r(sBe," \u2014 "),vJ=n(sBe,"A",{href:!0});var _Mt=s(vJ);aLr=r(_Mt,"FlaxDistilBertForMaskedLM"),_Mt.forEach(t),nLr=r(sBe," (DistilBERT model)"),sBe.forEach(t),sLr=i(Be),U4=n(Be,"LI",{});var lBe=s(U4);W6e=n(lBe,"STRONG",{});var bMt=s(W6e);lLr=r(bMt,"electra"),bMt.forEach(t),iLr=r(lBe," \u2014 "),FJ=n(lBe,"A",{href:!0});var vMt=s(FJ);dLr=r(vMt,"FlaxElectraForMaskedLM"),vMt.forEach(t),cLr=r(lBe," (ELECTRA model)"),lBe.forEach(t),fLr=i(Be),J4=n(Be,"LI",{});var iBe=s(J4);H6e=n(iBe,"STRONG",{});var FMt=s(H6e);mLr=r(FMt,"mbart"),FMt.forEach(t),gLr=r(iBe," \u2014 "),TJ=n(iBe,"A",{href:!0});var TMt=s(TJ);hLr=r(TMt,"FlaxMBartForConditionalGeneration"),TMt.forEach(t),pLr=r(iBe," (mBART model)"),iBe.forEach(t),uLr=i(Be),Y4=n(Be,"LI",{});var dBe=s(Y4);U6e=n(dBe,"STRONG",{});var MMt=s(U6e);_Lr=r(MMt,"roberta"),MMt.forEach(t),bLr=r(dBe," \u2014 "),MJ=n(dBe,"A",{href:!0});var EMt=s(MJ);vLr=r(EMt,"FlaxRobertaForMaskedLM"),EMt.forEach(t),FLr=r(dBe," (RoBERTa model)"),dBe.forEach(t),TLr=i(Be),K4=n(Be,"LI",{});var cBe=s(K4);J6e=n(cBe,"STRONG",{});var CMt=s(J6e);MLr=r(CMt,"roformer"),CMt.forEach(t),ELr=r(cBe," \u2014 "),EJ=n(cBe,"A",{href:!0});var wMt=s(EJ);CLr=r(wMt,"FlaxRoFormerForMaskedLM"),wMt.forEach(t),wLr=r(cBe," (RoFormer model)"),cBe.forEach(t),ALr=i(Be),Z4=n(Be,"LI",{});var fBe=s(Z4);Y6e=n(fBe,"STRONG",{});var AMt=s(Y6e);yLr=r(AMt,"xlm-roberta"),AMt.forEach(t),LLr=r(fBe," \u2014 "),CJ=n(fBe,"A",{href:!0});var yMt=s(CJ);xLr=r(yMt,"FlaxXLMRobertaForMaskedLM"),yMt.forEach(t),$Lr=r(fBe," (XLM-RoBERTa model)"),fBe.forEach(t),Be.forEach(t),kLr=i(Xl),T(eE.$$.fragment,Xl),Xl.forEach(t),Vl.forEach(t),HIe=i(f),Nc=n(f,"H2",{class:!0});var oje=s(Nc);oE=n(oje,"A",{id:!0,class:!0,href:!0});var LMt=s(oE);K6e=n(LMt,"SPAN",{});var xMt=s(K6e);T(s8.$$.fragment,xMt),xMt.forEach(t),LMt.forEach(t),SLr=i(oje),Z6e=n(oje,"SPAN",{});var $Mt=s(Z6e);RLr=r($Mt,"FlaxAutoModelForSeq2SeqLM"),$Mt.forEach(t),oje.forEach(t),UIe=i(f),pr=n(f,"DIV",{class:!0});var zl=s(pr);T(l8.$$.fragment,zl),BLr=i(zl),jc=n(zl,"P",{});var TZ=s(jc);PLr=r(TZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),wJ=n(TZ,"A",{href:!0});var kMt=s(wJ);ILr=r(kMt,"from_pretrained()"),kMt.forEach(t),qLr=r(TZ," class method or the "),AJ=n(TZ,"A",{href:!0});var SMt=s(AJ);NLr=r(SMt,"from_config()"),SMt.forEach(t),jLr=r(TZ,` class
method.`),TZ.forEach(t),DLr=i(zl),i8=n(zl,"P",{});var rje=s(i8);GLr=r(rje,"This class cannot be instantiated directly using "),eTe=n(rje,"CODE",{});var RMt=s(eTe);OLr=r(RMt,"__init__()"),RMt.forEach(t),VLr=r(rje," (throws an error)."),rje.forEach(t),XLr=i(zl),Vt=n(zl,"DIV",{class:!0});var M3=s(Vt);T(d8.$$.fragment,M3),zLr=i(M3),oTe=n(M3,"P",{});var BMt=s(oTe);QLr=r(BMt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),BMt.forEach(t),WLr=i(M3),Dc=n(M3,"P",{});var MZ=s(Dc);HLr=r(MZ,`Note:
Loading a model from its configuration file does `),rTe=n(MZ,"STRONG",{});var PMt=s(rTe);ULr=r(PMt,"not"),PMt.forEach(t),JLr=r(MZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),yJ=n(MZ,"A",{href:!0});var IMt=s(yJ);YLr=r(IMt,"from_pretrained()"),IMt.forEach(t),KLr=r(MZ," to load the model weights."),MZ.forEach(t),ZLr=i(M3),T(rE.$$.fragment,M3),M3.forEach(t),e8r=i(zl),Vr=n(zl,"DIV",{class:!0});var Ql=s(Vr);T(c8.$$.fragment,Ql),o8r=i(Ql),tTe=n(Ql,"P",{});var qMt=s(tTe);r8r=r(qMt,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),qMt.forEach(t),t8r=i(Ql),_n=n(Ql,"P",{});var E3=s(_n);a8r=r(E3,"The model class to instantiate is selected based on the "),aTe=n(E3,"CODE",{});var NMt=s(aTe);n8r=r(NMt,"model_type"),NMt.forEach(t),s8r=r(E3,` property of the config object (either
passed as an argument or loaded from `),nTe=n(E3,"CODE",{});var jMt=s(nTe);l8r=r(jMt,"pretrained_model_name_or_path"),jMt.forEach(t),i8r=r(E3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),sTe=n(E3,"CODE",{});var DMt=s(sTe);d8r=r(DMt,"pretrained_model_name_or_path"),DMt.forEach(t),c8r=r(E3,":"),E3.forEach(t),f8r=i(Ql),Se=n(Ql,"UL",{});var Ve=s(Se);tE=n(Ve,"LI",{});var mBe=s(tE);lTe=n(mBe,"STRONG",{});var GMt=s(lTe);m8r=r(GMt,"bart"),GMt.forEach(t),g8r=r(mBe," \u2014 "),LJ=n(mBe,"A",{href:!0});var OMt=s(LJ);h8r=r(OMt,"FlaxBartForConditionalGeneration"),OMt.forEach(t),p8r=r(mBe," (BART model)"),mBe.forEach(t),u8r=i(Ve),aE=n(Ve,"LI",{});var gBe=s(aE);iTe=n(gBe,"STRONG",{});var VMt=s(iTe);_8r=r(VMt,"blenderbot"),VMt.forEach(t),b8r=r(gBe," \u2014 "),xJ=n(gBe,"A",{href:!0});var XMt=s(xJ);v8r=r(XMt,"FlaxBlenderbotForConditionalGeneration"),XMt.forEach(t),F8r=r(gBe," (Blenderbot model)"),gBe.forEach(t),T8r=i(Ve),nE=n(Ve,"LI",{});var hBe=s(nE);dTe=n(hBe,"STRONG",{});var zMt=s(dTe);M8r=r(zMt,"blenderbot-small"),zMt.forEach(t),E8r=r(hBe," \u2014 "),$J=n(hBe,"A",{href:!0});var QMt=s($J);C8r=r(QMt,"FlaxBlenderbotSmallForConditionalGeneration"),QMt.forEach(t),w8r=r(hBe," (BlenderbotSmall model)"),hBe.forEach(t),A8r=i(Ve),sE=n(Ve,"LI",{});var pBe=s(sE);cTe=n(pBe,"STRONG",{});var WMt=s(cTe);y8r=r(WMt,"encoder-decoder"),WMt.forEach(t),L8r=r(pBe," \u2014 "),kJ=n(pBe,"A",{href:!0});var HMt=s(kJ);x8r=r(HMt,"FlaxEncoderDecoderModel"),HMt.forEach(t),$8r=r(pBe," (Encoder decoder model)"),pBe.forEach(t),k8r=i(Ve),lE=n(Ve,"LI",{});var uBe=s(lE);fTe=n(uBe,"STRONG",{});var UMt=s(fTe);S8r=r(UMt,"marian"),UMt.forEach(t),R8r=r(uBe," \u2014 "),SJ=n(uBe,"A",{href:!0});var JMt=s(SJ);B8r=r(JMt,"FlaxMarianMTModel"),JMt.forEach(t),P8r=r(uBe," (Marian model)"),uBe.forEach(t),I8r=i(Ve),iE=n(Ve,"LI",{});var _Be=s(iE);mTe=n(_Be,"STRONG",{});var YMt=s(mTe);q8r=r(YMt,"mbart"),YMt.forEach(t),N8r=r(_Be," \u2014 "),RJ=n(_Be,"A",{href:!0});var KMt=s(RJ);j8r=r(KMt,"FlaxMBartForConditionalGeneration"),KMt.forEach(t),D8r=r(_Be," (mBART model)"),_Be.forEach(t),G8r=i(Ve),dE=n(Ve,"LI",{});var bBe=s(dE);gTe=n(bBe,"STRONG",{});var ZMt=s(gTe);O8r=r(ZMt,"mt5"),ZMt.forEach(t),V8r=r(bBe," \u2014 "),BJ=n(bBe,"A",{href:!0});var e4t=s(BJ);X8r=r(e4t,"FlaxMT5ForConditionalGeneration"),e4t.forEach(t),z8r=r(bBe," (mT5 model)"),bBe.forEach(t),Q8r=i(Ve),cE=n(Ve,"LI",{});var vBe=s(cE);hTe=n(vBe,"STRONG",{});var o4t=s(hTe);W8r=r(o4t,"pegasus"),o4t.forEach(t),H8r=r(vBe," \u2014 "),PJ=n(vBe,"A",{href:!0});var r4t=s(PJ);U8r=r(r4t,"FlaxPegasusForConditionalGeneration"),r4t.forEach(t),J8r=r(vBe," (Pegasus model)"),vBe.forEach(t),Y8r=i(Ve),fE=n(Ve,"LI",{});var FBe=s(fE);pTe=n(FBe,"STRONG",{});var t4t=s(pTe);K8r=r(t4t,"t5"),t4t.forEach(t),Z8r=r(FBe," \u2014 "),IJ=n(FBe,"A",{href:!0});var a4t=s(IJ);exr=r(a4t,"FlaxT5ForConditionalGeneration"),a4t.forEach(t),oxr=r(FBe," (T5 model)"),FBe.forEach(t),Ve.forEach(t),rxr=i(Ql),T(mE.$$.fragment,Ql),Ql.forEach(t),zl.forEach(t),JIe=i(f),Gc=n(f,"H2",{class:!0});var tje=s(Gc);gE=n(tje,"A",{id:!0,class:!0,href:!0});var n4t=s(gE);uTe=n(n4t,"SPAN",{});var s4t=s(uTe);T(f8.$$.fragment,s4t),s4t.forEach(t),n4t.forEach(t),txr=i(tje),_Te=n(tje,"SPAN",{});var l4t=s(_Te);axr=r(l4t,"FlaxAutoModelForSequenceClassification"),l4t.forEach(t),tje.forEach(t),YIe=i(f),ur=n(f,"DIV",{class:!0});var Wl=s(ur);T(m8.$$.fragment,Wl),nxr=i(Wl),Oc=n(Wl,"P",{});var EZ=s(Oc);sxr=r(EZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),qJ=n(EZ,"A",{href:!0});var i4t=s(qJ);lxr=r(i4t,"from_pretrained()"),i4t.forEach(t),ixr=r(EZ," class method or the "),NJ=n(EZ,"A",{href:!0});var d4t=s(NJ);dxr=r(d4t,"from_config()"),d4t.forEach(t),cxr=r(EZ,` class
method.`),EZ.forEach(t),fxr=i(Wl),g8=n(Wl,"P",{});var aje=s(g8);mxr=r(aje,"This class cannot be instantiated directly using "),bTe=n(aje,"CODE",{});var c4t=s(bTe);gxr=r(c4t,"__init__()"),c4t.forEach(t),hxr=r(aje," (throws an error)."),aje.forEach(t),pxr=i(Wl),Xt=n(Wl,"DIV",{class:!0});var C3=s(Xt);T(h8.$$.fragment,C3),uxr=i(C3),vTe=n(C3,"P",{});var f4t=s(vTe);_xr=r(f4t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),f4t.forEach(t),bxr=i(C3),Vc=n(C3,"P",{});var CZ=s(Vc);vxr=r(CZ,`Note:
Loading a model from its configuration file does `),FTe=n(CZ,"STRONG",{});var m4t=s(FTe);Fxr=r(m4t,"not"),m4t.forEach(t),Txr=r(CZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),jJ=n(CZ,"A",{href:!0});var g4t=s(jJ);Mxr=r(g4t,"from_pretrained()"),g4t.forEach(t),Exr=r(CZ," to load the model weights."),CZ.forEach(t),Cxr=i(C3),T(hE.$$.fragment,C3),C3.forEach(t),wxr=i(Wl),Xr=n(Wl,"DIV",{class:!0});var Hl=s(Xr);T(p8.$$.fragment,Hl),Axr=i(Hl),TTe=n(Hl,"P",{});var h4t=s(TTe);yxr=r(h4t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),h4t.forEach(t),Lxr=i(Hl),bn=n(Hl,"P",{});var w3=s(bn);xxr=r(w3,"The model class to instantiate is selected based on the "),MTe=n(w3,"CODE",{});var p4t=s(MTe);$xr=r(p4t,"model_type"),p4t.forEach(t),kxr=r(w3,` property of the config object (either
passed as an argument or loaded from `),ETe=n(w3,"CODE",{});var u4t=s(ETe);Sxr=r(u4t,"pretrained_model_name_or_path"),u4t.forEach(t),Rxr=r(w3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),CTe=n(w3,"CODE",{});var _4t=s(CTe);Bxr=r(_4t,"pretrained_model_name_or_path"),_4t.forEach(t),Pxr=r(w3,":"),w3.forEach(t),Ixr=i(Hl),xe=n(Hl,"UL",{});var Pe=s(xe);pE=n(Pe,"LI",{});var TBe=s(pE);wTe=n(TBe,"STRONG",{});var b4t=s(wTe);qxr=r(b4t,"albert"),b4t.forEach(t),Nxr=r(TBe," \u2014 "),DJ=n(TBe,"A",{href:!0});var v4t=s(DJ);jxr=r(v4t,"FlaxAlbertForSequenceClassification"),v4t.forEach(t),Dxr=r(TBe," (ALBERT model)"),TBe.forEach(t),Gxr=i(Pe),uE=n(Pe,"LI",{});var MBe=s(uE);ATe=n(MBe,"STRONG",{});var F4t=s(ATe);Oxr=r(F4t,"bart"),F4t.forEach(t),Vxr=r(MBe," \u2014 "),GJ=n(MBe,"A",{href:!0});var T4t=s(GJ);Xxr=r(T4t,"FlaxBartForSequenceClassification"),T4t.forEach(t),zxr=r(MBe," (BART model)"),MBe.forEach(t),Qxr=i(Pe),_E=n(Pe,"LI",{});var EBe=s(_E);yTe=n(EBe,"STRONG",{});var M4t=s(yTe);Wxr=r(M4t,"bert"),M4t.forEach(t),Hxr=r(EBe," \u2014 "),OJ=n(EBe,"A",{href:!0});var E4t=s(OJ);Uxr=r(E4t,"FlaxBertForSequenceClassification"),E4t.forEach(t),Jxr=r(EBe," (BERT model)"),EBe.forEach(t),Yxr=i(Pe),bE=n(Pe,"LI",{});var CBe=s(bE);LTe=n(CBe,"STRONG",{});var C4t=s(LTe);Kxr=r(C4t,"big_bird"),C4t.forEach(t),Zxr=r(CBe," \u2014 "),VJ=n(CBe,"A",{href:!0});var w4t=s(VJ);e$r=r(w4t,"FlaxBigBirdForSequenceClassification"),w4t.forEach(t),o$r=r(CBe," (BigBird model)"),CBe.forEach(t),r$r=i(Pe),vE=n(Pe,"LI",{});var wBe=s(vE);xTe=n(wBe,"STRONG",{});var A4t=s(xTe);t$r=r(A4t,"distilbert"),A4t.forEach(t),a$r=r(wBe," \u2014 "),XJ=n(wBe,"A",{href:!0});var y4t=s(XJ);n$r=r(y4t,"FlaxDistilBertForSequenceClassification"),y4t.forEach(t),s$r=r(wBe," (DistilBERT model)"),wBe.forEach(t),l$r=i(Pe),FE=n(Pe,"LI",{});var ABe=s(FE);$Te=n(ABe,"STRONG",{});var L4t=s($Te);i$r=r(L4t,"electra"),L4t.forEach(t),d$r=r(ABe," \u2014 "),zJ=n(ABe,"A",{href:!0});var x4t=s(zJ);c$r=r(x4t,"FlaxElectraForSequenceClassification"),x4t.forEach(t),f$r=r(ABe," (ELECTRA model)"),ABe.forEach(t),m$r=i(Pe),TE=n(Pe,"LI",{});var yBe=s(TE);kTe=n(yBe,"STRONG",{});var $4t=s(kTe);g$r=r($4t,"mbart"),$4t.forEach(t),h$r=r(yBe," \u2014 "),QJ=n(yBe,"A",{href:!0});var k4t=s(QJ);p$r=r(k4t,"FlaxMBartForSequenceClassification"),k4t.forEach(t),u$r=r(yBe," (mBART model)"),yBe.forEach(t),_$r=i(Pe),ME=n(Pe,"LI",{});var LBe=s(ME);STe=n(LBe,"STRONG",{});var S4t=s(STe);b$r=r(S4t,"roberta"),S4t.forEach(t),v$r=r(LBe," \u2014 "),WJ=n(LBe,"A",{href:!0});var R4t=s(WJ);F$r=r(R4t,"FlaxRobertaForSequenceClassification"),R4t.forEach(t),T$r=r(LBe," (RoBERTa model)"),LBe.forEach(t),M$r=i(Pe),EE=n(Pe,"LI",{});var xBe=s(EE);RTe=n(xBe,"STRONG",{});var B4t=s(RTe);E$r=r(B4t,"roformer"),B4t.forEach(t),C$r=r(xBe," \u2014 "),HJ=n(xBe,"A",{href:!0});var P4t=s(HJ);w$r=r(P4t,"FlaxRoFormerForSequenceClassification"),P4t.forEach(t),A$r=r(xBe," (RoFormer model)"),xBe.forEach(t),y$r=i(Pe),CE=n(Pe,"LI",{});var $Be=s(CE);BTe=n($Be,"STRONG",{});var I4t=s(BTe);L$r=r(I4t,"xlm-roberta"),I4t.forEach(t),x$r=r($Be," \u2014 "),UJ=n($Be,"A",{href:!0});var q4t=s(UJ);$$r=r(q4t,"FlaxXLMRobertaForSequenceClassification"),q4t.forEach(t),k$r=r($Be," (XLM-RoBERTa model)"),$Be.forEach(t),Pe.forEach(t),S$r=i(Hl),T(wE.$$.fragment,Hl),Hl.forEach(t),Wl.forEach(t),KIe=i(f),Xc=n(f,"H2",{class:!0});var nje=s(Xc);AE=n(nje,"A",{id:!0,class:!0,href:!0});var N4t=s(AE);PTe=n(N4t,"SPAN",{});var j4t=s(PTe);T(u8.$$.fragment,j4t),j4t.forEach(t),N4t.forEach(t),R$r=i(nje),ITe=n(nje,"SPAN",{});var D4t=s(ITe);B$r=r(D4t,"FlaxAutoModelForQuestionAnswering"),D4t.forEach(t),nje.forEach(t),ZIe=i(f),_r=n(f,"DIV",{class:!0});var Ul=s(_r);T(_8.$$.fragment,Ul),P$r=i(Ul),zc=n(Ul,"P",{});var wZ=s(zc);I$r=r(wZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),JJ=n(wZ,"A",{href:!0});var G4t=s(JJ);q$r=r(G4t,"from_pretrained()"),G4t.forEach(t),N$r=r(wZ," class method or the "),YJ=n(wZ,"A",{href:!0});var O4t=s(YJ);j$r=r(O4t,"from_config()"),O4t.forEach(t),D$r=r(wZ,` class
method.`),wZ.forEach(t),G$r=i(Ul),b8=n(Ul,"P",{});var sje=s(b8);O$r=r(sje,"This class cannot be instantiated directly using "),qTe=n(sje,"CODE",{});var V4t=s(qTe);V$r=r(V4t,"__init__()"),V4t.forEach(t),X$r=r(sje," (throws an error)."),sje.forEach(t),z$r=i(Ul),zt=n(Ul,"DIV",{class:!0});var A3=s(zt);T(v8.$$.fragment,A3),Q$r=i(A3),NTe=n(A3,"P",{});var X4t=s(NTe);W$r=r(X4t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),X4t.forEach(t),H$r=i(A3),Qc=n(A3,"P",{});var AZ=s(Qc);U$r=r(AZ,`Note:
Loading a model from its configuration file does `),jTe=n(AZ,"STRONG",{});var z4t=s(jTe);J$r=r(z4t,"not"),z4t.forEach(t),Y$r=r(AZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),KJ=n(AZ,"A",{href:!0});var Q4t=s(KJ);K$r=r(Q4t,"from_pretrained()"),Q4t.forEach(t),Z$r=r(AZ," to load the model weights."),AZ.forEach(t),ekr=i(A3),T(yE.$$.fragment,A3),A3.forEach(t),okr=i(Ul),zr=n(Ul,"DIV",{class:!0});var Jl=s(zr);T(F8.$$.fragment,Jl),rkr=i(Jl),DTe=n(Jl,"P",{});var W4t=s(DTe);tkr=r(W4t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),W4t.forEach(t),akr=i(Jl),vn=n(Jl,"P",{});var y3=s(vn);nkr=r(y3,"The model class to instantiate is selected based on the "),GTe=n(y3,"CODE",{});var H4t=s(GTe);skr=r(H4t,"model_type"),H4t.forEach(t),lkr=r(y3,` property of the config object (either
passed as an argument or loaded from `),OTe=n(y3,"CODE",{});var U4t=s(OTe);ikr=r(U4t,"pretrained_model_name_or_path"),U4t.forEach(t),dkr=r(y3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),VTe=n(y3,"CODE",{});var J4t=s(VTe);ckr=r(J4t,"pretrained_model_name_or_path"),J4t.forEach(t),fkr=r(y3,":"),y3.forEach(t),mkr=i(Jl),$e=n(Jl,"UL",{});var Ie=s($e);LE=n(Ie,"LI",{});var kBe=s(LE);XTe=n(kBe,"STRONG",{});var Y4t=s(XTe);gkr=r(Y4t,"albert"),Y4t.forEach(t),hkr=r(kBe," \u2014 "),ZJ=n(kBe,"A",{href:!0});var K4t=s(ZJ);pkr=r(K4t,"FlaxAlbertForQuestionAnswering"),K4t.forEach(t),ukr=r(kBe," (ALBERT model)"),kBe.forEach(t),_kr=i(Ie),xE=n(Ie,"LI",{});var SBe=s(xE);zTe=n(SBe,"STRONG",{});var Z4t=s(zTe);bkr=r(Z4t,"bart"),Z4t.forEach(t),vkr=r(SBe," \u2014 "),eY=n(SBe,"A",{href:!0});var eEt=s(eY);Fkr=r(eEt,"FlaxBartForQuestionAnswering"),eEt.forEach(t),Tkr=r(SBe," (BART model)"),SBe.forEach(t),Mkr=i(Ie),$E=n(Ie,"LI",{});var RBe=s($E);QTe=n(RBe,"STRONG",{});var oEt=s(QTe);Ekr=r(oEt,"bert"),oEt.forEach(t),Ckr=r(RBe," \u2014 "),oY=n(RBe,"A",{href:!0});var rEt=s(oY);wkr=r(rEt,"FlaxBertForQuestionAnswering"),rEt.forEach(t),Akr=r(RBe," (BERT model)"),RBe.forEach(t),ykr=i(Ie),kE=n(Ie,"LI",{});var BBe=s(kE);WTe=n(BBe,"STRONG",{});var tEt=s(WTe);Lkr=r(tEt,"big_bird"),tEt.forEach(t),xkr=r(BBe," \u2014 "),rY=n(BBe,"A",{href:!0});var aEt=s(rY);$kr=r(aEt,"FlaxBigBirdForQuestionAnswering"),aEt.forEach(t),kkr=r(BBe," (BigBird model)"),BBe.forEach(t),Skr=i(Ie),SE=n(Ie,"LI",{});var PBe=s(SE);HTe=n(PBe,"STRONG",{});var nEt=s(HTe);Rkr=r(nEt,"distilbert"),nEt.forEach(t),Bkr=r(PBe," \u2014 "),tY=n(PBe,"A",{href:!0});var sEt=s(tY);Pkr=r(sEt,"FlaxDistilBertForQuestionAnswering"),sEt.forEach(t),Ikr=r(PBe," (DistilBERT model)"),PBe.forEach(t),qkr=i(Ie),RE=n(Ie,"LI",{});var IBe=s(RE);UTe=n(IBe,"STRONG",{});var lEt=s(UTe);Nkr=r(lEt,"electra"),lEt.forEach(t),jkr=r(IBe," \u2014 "),aY=n(IBe,"A",{href:!0});var iEt=s(aY);Dkr=r(iEt,"FlaxElectraForQuestionAnswering"),iEt.forEach(t),Gkr=r(IBe," (ELECTRA model)"),IBe.forEach(t),Okr=i(Ie),BE=n(Ie,"LI",{});var qBe=s(BE);JTe=n(qBe,"STRONG",{});var dEt=s(JTe);Vkr=r(dEt,"mbart"),dEt.forEach(t),Xkr=r(qBe," \u2014 "),nY=n(qBe,"A",{href:!0});var cEt=s(nY);zkr=r(cEt,"FlaxMBartForQuestionAnswering"),cEt.forEach(t),Qkr=r(qBe," (mBART model)"),qBe.forEach(t),Wkr=i(Ie),PE=n(Ie,"LI",{});var NBe=s(PE);YTe=n(NBe,"STRONG",{});var fEt=s(YTe);Hkr=r(fEt,"roberta"),fEt.forEach(t),Ukr=r(NBe," \u2014 "),sY=n(NBe,"A",{href:!0});var mEt=s(sY);Jkr=r(mEt,"FlaxRobertaForQuestionAnswering"),mEt.forEach(t),Ykr=r(NBe," (RoBERTa model)"),NBe.forEach(t),Kkr=i(Ie),IE=n(Ie,"LI",{});var jBe=s(IE);KTe=n(jBe,"STRONG",{});var gEt=s(KTe);Zkr=r(gEt,"roformer"),gEt.forEach(t),eSr=r(jBe," \u2014 "),lY=n(jBe,"A",{href:!0});var hEt=s(lY);oSr=r(hEt,"FlaxRoFormerForQuestionAnswering"),hEt.forEach(t),rSr=r(jBe," (RoFormer model)"),jBe.forEach(t),tSr=i(Ie),qE=n(Ie,"LI",{});var DBe=s(qE);ZTe=n(DBe,"STRONG",{});var pEt=s(ZTe);aSr=r(pEt,"xlm-roberta"),pEt.forEach(t),nSr=r(DBe," \u2014 "),iY=n(DBe,"A",{href:!0});var uEt=s(iY);sSr=r(uEt,"FlaxXLMRobertaForQuestionAnswering"),uEt.forEach(t),lSr=r(DBe," (XLM-RoBERTa model)"),DBe.forEach(t),Ie.forEach(t),iSr=i(Jl),T(NE.$$.fragment,Jl),Jl.forEach(t),Ul.forEach(t),eqe=i(f),Wc=n(f,"H2",{class:!0});var lje=s(Wc);jE=n(lje,"A",{id:!0,class:!0,href:!0});var _Et=s(jE);e7e=n(_Et,"SPAN",{});var bEt=s(e7e);T(T8.$$.fragment,bEt),bEt.forEach(t),_Et.forEach(t),dSr=i(lje),o7e=n(lje,"SPAN",{});var vEt=s(o7e);cSr=r(vEt,"FlaxAutoModelForTokenClassification"),vEt.forEach(t),lje.forEach(t),oqe=i(f),br=n(f,"DIV",{class:!0});var Yl=s(br);T(M8.$$.fragment,Yl),fSr=i(Yl),Hc=n(Yl,"P",{});var yZ=s(Hc);mSr=r(yZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),dY=n(yZ,"A",{href:!0});var FEt=s(dY);gSr=r(FEt,"from_pretrained()"),FEt.forEach(t),hSr=r(yZ," class method or the "),cY=n(yZ,"A",{href:!0});var TEt=s(cY);pSr=r(TEt,"from_config()"),TEt.forEach(t),uSr=r(yZ,` class
method.`),yZ.forEach(t),_Sr=i(Yl),E8=n(Yl,"P",{});var ije=s(E8);bSr=r(ije,"This class cannot be instantiated directly using "),r7e=n(ije,"CODE",{});var MEt=s(r7e);vSr=r(MEt,"__init__()"),MEt.forEach(t),FSr=r(ije," (throws an error)."),ije.forEach(t),TSr=i(Yl),Qt=n(Yl,"DIV",{class:!0});var L3=s(Qt);T(C8.$$.fragment,L3),MSr=i(L3),t7e=n(L3,"P",{});var EEt=s(t7e);ESr=r(EEt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),EEt.forEach(t),CSr=i(L3),Uc=n(L3,"P",{});var LZ=s(Uc);wSr=r(LZ,`Note:
Loading a model from its configuration file does `),a7e=n(LZ,"STRONG",{});var CEt=s(a7e);ASr=r(CEt,"not"),CEt.forEach(t),ySr=r(LZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),fY=n(LZ,"A",{href:!0});var wEt=s(fY);LSr=r(wEt,"from_pretrained()"),wEt.forEach(t),xSr=r(LZ," to load the model weights."),LZ.forEach(t),$Sr=i(L3),T(DE.$$.fragment,L3),L3.forEach(t),kSr=i(Yl),Qr=n(Yl,"DIV",{class:!0});var Kl=s(Qr);T(w8.$$.fragment,Kl),SSr=i(Kl),n7e=n(Kl,"P",{});var AEt=s(n7e);RSr=r(AEt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),AEt.forEach(t),BSr=i(Kl),Fn=n(Kl,"P",{});var x3=s(Fn);PSr=r(x3,"The model class to instantiate is selected based on the "),s7e=n(x3,"CODE",{});var yEt=s(s7e);ISr=r(yEt,"model_type"),yEt.forEach(t),qSr=r(x3,` property of the config object (either
passed as an argument or loaded from `),l7e=n(x3,"CODE",{});var LEt=s(l7e);NSr=r(LEt,"pretrained_model_name_or_path"),LEt.forEach(t),jSr=r(x3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),i7e=n(x3,"CODE",{});var xEt=s(i7e);DSr=r(xEt,"pretrained_model_name_or_path"),xEt.forEach(t),GSr=r(x3,":"),x3.forEach(t),OSr=i(Kl),De=n(Kl,"UL",{});var Fo=s(De);GE=n(Fo,"LI",{});var GBe=s(GE);d7e=n(GBe,"STRONG",{});var $Et=s(d7e);VSr=r($Et,"albert"),$Et.forEach(t),XSr=r(GBe," \u2014 "),mY=n(GBe,"A",{href:!0});var kEt=s(mY);zSr=r(kEt,"FlaxAlbertForTokenClassification"),kEt.forEach(t),QSr=r(GBe," (ALBERT model)"),GBe.forEach(t),WSr=i(Fo),OE=n(Fo,"LI",{});var OBe=s(OE);c7e=n(OBe,"STRONG",{});var SEt=s(c7e);HSr=r(SEt,"bert"),SEt.forEach(t),USr=r(OBe," \u2014 "),gY=n(OBe,"A",{href:!0});var REt=s(gY);JSr=r(REt,"FlaxBertForTokenClassification"),REt.forEach(t),YSr=r(OBe," (BERT model)"),OBe.forEach(t),KSr=i(Fo),VE=n(Fo,"LI",{});var VBe=s(VE);f7e=n(VBe,"STRONG",{});var BEt=s(f7e);ZSr=r(BEt,"big_bird"),BEt.forEach(t),eRr=r(VBe," \u2014 "),hY=n(VBe,"A",{href:!0});var PEt=s(hY);oRr=r(PEt,"FlaxBigBirdForTokenClassification"),PEt.forEach(t),rRr=r(VBe," (BigBird model)"),VBe.forEach(t),tRr=i(Fo),XE=n(Fo,"LI",{});var XBe=s(XE);m7e=n(XBe,"STRONG",{});var IEt=s(m7e);aRr=r(IEt,"distilbert"),IEt.forEach(t),nRr=r(XBe," \u2014 "),pY=n(XBe,"A",{href:!0});var qEt=s(pY);sRr=r(qEt,"FlaxDistilBertForTokenClassification"),qEt.forEach(t),lRr=r(XBe," (DistilBERT model)"),XBe.forEach(t),iRr=i(Fo),zE=n(Fo,"LI",{});var zBe=s(zE);g7e=n(zBe,"STRONG",{});var NEt=s(g7e);dRr=r(NEt,"electra"),NEt.forEach(t),cRr=r(zBe," \u2014 "),uY=n(zBe,"A",{href:!0});var jEt=s(uY);fRr=r(jEt,"FlaxElectraForTokenClassification"),jEt.forEach(t),mRr=r(zBe," (ELECTRA model)"),zBe.forEach(t),gRr=i(Fo),QE=n(Fo,"LI",{});var QBe=s(QE);h7e=n(QBe,"STRONG",{});var DEt=s(h7e);hRr=r(DEt,"roberta"),DEt.forEach(t),pRr=r(QBe," \u2014 "),_Y=n(QBe,"A",{href:!0});var GEt=s(_Y);uRr=r(GEt,"FlaxRobertaForTokenClassification"),GEt.forEach(t),_Rr=r(QBe," (RoBERTa model)"),QBe.forEach(t),bRr=i(Fo),WE=n(Fo,"LI",{});var WBe=s(WE);p7e=n(WBe,"STRONG",{});var OEt=s(p7e);vRr=r(OEt,"roformer"),OEt.forEach(t),FRr=r(WBe," \u2014 "),bY=n(WBe,"A",{href:!0});var VEt=s(bY);TRr=r(VEt,"FlaxRoFormerForTokenClassification"),VEt.forEach(t),MRr=r(WBe," (RoFormer model)"),WBe.forEach(t),ERr=i(Fo),HE=n(Fo,"LI",{});var HBe=s(HE);u7e=n(HBe,"STRONG",{});var XEt=s(u7e);CRr=r(XEt,"xlm-roberta"),XEt.forEach(t),wRr=r(HBe," \u2014 "),vY=n(HBe,"A",{href:!0});var zEt=s(vY);ARr=r(zEt,"FlaxXLMRobertaForTokenClassification"),zEt.forEach(t),yRr=r(HBe," (XLM-RoBERTa model)"),HBe.forEach(t),Fo.forEach(t),LRr=i(Kl),T(UE.$$.fragment,Kl),Kl.forEach(t),Yl.forEach(t),rqe=i(f),Jc=n(f,"H2",{class:!0});var dje=s(Jc);JE=n(dje,"A",{id:!0,class:!0,href:!0});var QEt=s(JE);_7e=n(QEt,"SPAN",{});var WEt=s(_7e);T(A8.$$.fragment,WEt),WEt.forEach(t),QEt.forEach(t),xRr=i(dje),b7e=n(dje,"SPAN",{});var HEt=s(b7e);$Rr=r(HEt,"FlaxAutoModelForMultipleChoice"),HEt.forEach(t),dje.forEach(t),tqe=i(f),vr=n(f,"DIV",{class:!0});var Zl=s(vr);T(y8.$$.fragment,Zl),kRr=i(Zl),Yc=n(Zl,"P",{});var xZ=s(Yc);SRr=r(xZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),FY=n(xZ,"A",{href:!0});var UEt=s(FY);RRr=r(UEt,"from_pretrained()"),UEt.forEach(t),BRr=r(xZ," class method or the "),TY=n(xZ,"A",{href:!0});var JEt=s(TY);PRr=r(JEt,"from_config()"),JEt.forEach(t),IRr=r(xZ,` class
method.`),xZ.forEach(t),qRr=i(Zl),L8=n(Zl,"P",{});var cje=s(L8);NRr=r(cje,"This class cannot be instantiated directly using "),v7e=n(cje,"CODE",{});var YEt=s(v7e);jRr=r(YEt,"__init__()"),YEt.forEach(t),DRr=r(cje," (throws an error)."),cje.forEach(t),GRr=i(Zl),Wt=n(Zl,"DIV",{class:!0});var $3=s(Wt);T(x8.$$.fragment,$3),ORr=i($3),F7e=n($3,"P",{});var KEt=s(F7e);VRr=r(KEt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),KEt.forEach(t),XRr=i($3),Kc=n($3,"P",{});var $Z=s(Kc);zRr=r($Z,`Note:
Loading a model from its configuration file does `),T7e=n($Z,"STRONG",{});var ZEt=s(T7e);QRr=r(ZEt,"not"),ZEt.forEach(t),WRr=r($Z,` load the model weights. It only affects the
model\u2019s configuration. Use `),MY=n($Z,"A",{href:!0});var e5t=s(MY);HRr=r(e5t,"from_pretrained()"),e5t.forEach(t),URr=r($Z," to load the model weights."),$Z.forEach(t),JRr=i($3),T(YE.$$.fragment,$3),$3.forEach(t),YRr=i(Zl),Wr=n(Zl,"DIV",{class:!0});var ei=s(Wr);T($8.$$.fragment,ei),KRr=i(ei),M7e=n(ei,"P",{});var o5t=s(M7e);ZRr=r(o5t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),o5t.forEach(t),eBr=i(ei),Tn=n(ei,"P",{});var k3=s(Tn);oBr=r(k3,"The model class to instantiate is selected based on the "),E7e=n(k3,"CODE",{});var r5t=s(E7e);rBr=r(r5t,"model_type"),r5t.forEach(t),tBr=r(k3,` property of the config object (either
passed as an argument or loaded from `),C7e=n(k3,"CODE",{});var t5t=s(C7e);aBr=r(t5t,"pretrained_model_name_or_path"),t5t.forEach(t),nBr=r(k3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),w7e=n(k3,"CODE",{});var a5t=s(w7e);sBr=r(a5t,"pretrained_model_name_or_path"),a5t.forEach(t),lBr=r(k3,":"),k3.forEach(t),iBr=i(ei),Ge=n(ei,"UL",{});var To=s(Ge);KE=n(To,"LI",{});var UBe=s(KE);A7e=n(UBe,"STRONG",{});var n5t=s(A7e);dBr=r(n5t,"albert"),n5t.forEach(t),cBr=r(UBe," \u2014 "),EY=n(UBe,"A",{href:!0});var s5t=s(EY);fBr=r(s5t,"FlaxAlbertForMultipleChoice"),s5t.forEach(t),mBr=r(UBe," (ALBERT model)"),UBe.forEach(t),gBr=i(To),ZE=n(To,"LI",{});var JBe=s(ZE);y7e=n(JBe,"STRONG",{});var l5t=s(y7e);hBr=r(l5t,"bert"),l5t.forEach(t),pBr=r(JBe," \u2014 "),CY=n(JBe,"A",{href:!0});var i5t=s(CY);uBr=r(i5t,"FlaxBertForMultipleChoice"),i5t.forEach(t),_Br=r(JBe," (BERT model)"),JBe.forEach(t),bBr=i(To),e5=n(To,"LI",{});var YBe=s(e5);L7e=n(YBe,"STRONG",{});var d5t=s(L7e);vBr=r(d5t,"big_bird"),d5t.forEach(t),FBr=r(YBe," \u2014 "),wY=n(YBe,"A",{href:!0});var c5t=s(wY);TBr=r(c5t,"FlaxBigBirdForMultipleChoice"),c5t.forEach(t),MBr=r(YBe," (BigBird model)"),YBe.forEach(t),EBr=i(To),o5=n(To,"LI",{});var KBe=s(o5);x7e=n(KBe,"STRONG",{});var f5t=s(x7e);CBr=r(f5t,"distilbert"),f5t.forEach(t),wBr=r(KBe," \u2014 "),AY=n(KBe,"A",{href:!0});var m5t=s(AY);ABr=r(m5t,"FlaxDistilBertForMultipleChoice"),m5t.forEach(t),yBr=r(KBe," (DistilBERT model)"),KBe.forEach(t),LBr=i(To),r5=n(To,"LI",{});var ZBe=s(r5);$7e=n(ZBe,"STRONG",{});var g5t=s($7e);xBr=r(g5t,"electra"),g5t.forEach(t),$Br=r(ZBe," \u2014 "),yY=n(ZBe,"A",{href:!0});var h5t=s(yY);kBr=r(h5t,"FlaxElectraForMultipleChoice"),h5t.forEach(t),SBr=r(ZBe," (ELECTRA model)"),ZBe.forEach(t),RBr=i(To),t5=n(To,"LI",{});var ePe=s(t5);k7e=n(ePe,"STRONG",{});var p5t=s(k7e);BBr=r(p5t,"roberta"),p5t.forEach(t),PBr=r(ePe," \u2014 "),LY=n(ePe,"A",{href:!0});var u5t=s(LY);IBr=r(u5t,"FlaxRobertaForMultipleChoice"),u5t.forEach(t),qBr=r(ePe," (RoBERTa model)"),ePe.forEach(t),NBr=i(To),a5=n(To,"LI",{});var oPe=s(a5);S7e=n(oPe,"STRONG",{});var _5t=s(S7e);jBr=r(_5t,"roformer"),_5t.forEach(t),DBr=r(oPe," \u2014 "),xY=n(oPe,"A",{href:!0});var b5t=s(xY);GBr=r(b5t,"FlaxRoFormerForMultipleChoice"),b5t.forEach(t),OBr=r(oPe," (RoFormer model)"),oPe.forEach(t),VBr=i(To),n5=n(To,"LI",{});var rPe=s(n5);R7e=n(rPe,"STRONG",{});var v5t=s(R7e);XBr=r(v5t,"xlm-roberta"),v5t.forEach(t),zBr=r(rPe," \u2014 "),$Y=n(rPe,"A",{href:!0});var F5t=s($Y);QBr=r(F5t,"FlaxXLMRobertaForMultipleChoice"),F5t.forEach(t),WBr=r(rPe," (XLM-RoBERTa model)"),rPe.forEach(t),To.forEach(t),HBr=i(ei),T(s5.$$.fragment,ei),ei.forEach(t),Zl.forEach(t),aqe=i(f),Zc=n(f,"H2",{class:!0});var fje=s(Zc);l5=n(fje,"A",{id:!0,class:!0,href:!0});var T5t=s(l5);B7e=n(T5t,"SPAN",{});var M5t=s(B7e);T(k8.$$.fragment,M5t),M5t.forEach(t),T5t.forEach(t),UBr=i(fje),P7e=n(fje,"SPAN",{});var E5t=s(P7e);JBr=r(E5t,"FlaxAutoModelForNextSentencePrediction"),E5t.forEach(t),fje.forEach(t),nqe=i(f),Fr=n(f,"DIV",{class:!0});var oi=s(Fr);T(S8.$$.fragment,oi),YBr=i(oi),ef=n(oi,"P",{});var kZ=s(ef);KBr=r(kZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),kY=n(kZ,"A",{href:!0});var C5t=s(kY);ZBr=r(C5t,"from_pretrained()"),C5t.forEach(t),ePr=r(kZ," class method or the "),SY=n(kZ,"A",{href:!0});var w5t=s(SY);oPr=r(w5t,"from_config()"),w5t.forEach(t),rPr=r(kZ,` class
method.`),kZ.forEach(t),tPr=i(oi),R8=n(oi,"P",{});var mje=s(R8);aPr=r(mje,"This class cannot be instantiated directly using "),I7e=n(mje,"CODE",{});var A5t=s(I7e);nPr=r(A5t,"__init__()"),A5t.forEach(t),sPr=r(mje," (throws an error)."),mje.forEach(t),lPr=i(oi),Ht=n(oi,"DIV",{class:!0});var S3=s(Ht);T(B8.$$.fragment,S3),iPr=i(S3),q7e=n(S3,"P",{});var y5t=s(q7e);dPr=r(y5t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),y5t.forEach(t),cPr=i(S3),of=n(S3,"P",{});var SZ=s(of);fPr=r(SZ,`Note:
Loading a model from its configuration file does `),N7e=n(SZ,"STRONG",{});var L5t=s(N7e);mPr=r(L5t,"not"),L5t.forEach(t),gPr=r(SZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),RY=n(SZ,"A",{href:!0});var x5t=s(RY);hPr=r(x5t,"from_pretrained()"),x5t.forEach(t),pPr=r(SZ," to load the model weights."),SZ.forEach(t),uPr=i(S3),T(i5.$$.fragment,S3),S3.forEach(t),_Pr=i(oi),Hr=n(oi,"DIV",{class:!0});var ri=s(Hr);T(P8.$$.fragment,ri),bPr=i(ri),j7e=n(ri,"P",{});var $5t=s(j7e);vPr=r($5t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),$5t.forEach(t),FPr=i(ri),Mn=n(ri,"P",{});var R3=s(Mn);TPr=r(R3,"The model class to instantiate is selected based on the "),D7e=n(R3,"CODE",{});var k5t=s(D7e);MPr=r(k5t,"model_type"),k5t.forEach(t),EPr=r(R3,` property of the config object (either
passed as an argument or loaded from `),G7e=n(R3,"CODE",{});var S5t=s(G7e);CPr=r(S5t,"pretrained_model_name_or_path"),S5t.forEach(t),wPr=r(R3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),O7e=n(R3,"CODE",{});var R5t=s(O7e);APr=r(R5t,"pretrained_model_name_or_path"),R5t.forEach(t),yPr=r(R3,":"),R3.forEach(t),LPr=i(ri),V7e=n(ri,"UL",{});var B5t=s(V7e);d5=n(B5t,"LI",{});var tPe=s(d5);X7e=n(tPe,"STRONG",{});var P5t=s(X7e);xPr=r(P5t,"bert"),P5t.forEach(t),$Pr=r(tPe," \u2014 "),BY=n(tPe,"A",{href:!0});var I5t=s(BY);kPr=r(I5t,"FlaxBertForNextSentencePrediction"),I5t.forEach(t),SPr=r(tPe," (BERT model)"),tPe.forEach(t),B5t.forEach(t),RPr=i(ri),T(c5.$$.fragment,ri),ri.forEach(t),oi.forEach(t),sqe=i(f),rf=n(f,"H2",{class:!0});var gje=s(rf);f5=n(gje,"A",{id:!0,class:!0,href:!0});var q5t=s(f5);z7e=n(q5t,"SPAN",{});var N5t=s(z7e);T(I8.$$.fragment,N5t),N5t.forEach(t),q5t.forEach(t),BPr=i(gje),Q7e=n(gje,"SPAN",{});var j5t=s(Q7e);PPr=r(j5t,"FlaxAutoModelForImageClassification"),j5t.forEach(t),gje.forEach(t),lqe=i(f),Tr=n(f,"DIV",{class:!0});var ti=s(Tr);T(q8.$$.fragment,ti),IPr=i(ti),tf=n(ti,"P",{});var RZ=s(tf);qPr=r(RZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),PY=n(RZ,"A",{href:!0});var D5t=s(PY);NPr=r(D5t,"from_pretrained()"),D5t.forEach(t),jPr=r(RZ," class method or the "),IY=n(RZ,"A",{href:!0});var G5t=s(IY);DPr=r(G5t,"from_config()"),G5t.forEach(t),GPr=r(RZ,` class
method.`),RZ.forEach(t),OPr=i(ti),N8=n(ti,"P",{});var hje=s(N8);VPr=r(hje,"This class cannot be instantiated directly using "),W7e=n(hje,"CODE",{});var O5t=s(W7e);XPr=r(O5t,"__init__()"),O5t.forEach(t),zPr=r(hje," (throws an error)."),hje.forEach(t),QPr=i(ti),Ut=n(ti,"DIV",{class:!0});var B3=s(Ut);T(j8.$$.fragment,B3),WPr=i(B3),H7e=n(B3,"P",{});var V5t=s(H7e);HPr=r(V5t,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),V5t.forEach(t),UPr=i(B3),af=n(B3,"P",{});var BZ=s(af);JPr=r(BZ,`Note:
Loading a model from its configuration file does `),U7e=n(BZ,"STRONG",{});var X5t=s(U7e);YPr=r(X5t,"not"),X5t.forEach(t),KPr=r(BZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),qY=n(BZ,"A",{href:!0});var z5t=s(qY);ZPr=r(z5t,"from_pretrained()"),z5t.forEach(t),eIr=r(BZ," to load the model weights."),BZ.forEach(t),oIr=i(B3),T(m5.$$.fragment,B3),B3.forEach(t),rIr=i(ti),Ur=n(ti,"DIV",{class:!0});var ai=s(Ur);T(D8.$$.fragment,ai),tIr=i(ai),J7e=n(ai,"P",{});var Q5t=s(J7e);aIr=r(Q5t,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Q5t.forEach(t),nIr=i(ai),En=n(ai,"P",{});var P3=s(En);sIr=r(P3,"The model class to instantiate is selected based on the "),Y7e=n(P3,"CODE",{});var W5t=s(Y7e);lIr=r(W5t,"model_type"),W5t.forEach(t),iIr=r(P3,` property of the config object (either
passed as an argument or loaded from `),K7e=n(P3,"CODE",{});var H5t=s(K7e);dIr=r(H5t,"pretrained_model_name_or_path"),H5t.forEach(t),cIr=r(P3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Z7e=n(P3,"CODE",{});var U5t=s(Z7e);fIr=r(U5t,"pretrained_model_name_or_path"),U5t.forEach(t),mIr=r(P3,":"),P3.forEach(t),gIr=i(ai),G8=n(ai,"UL",{});var pje=s(G8);g5=n(pje,"LI",{});var aPe=s(g5);e9e=n(aPe,"STRONG",{});var J5t=s(e9e);hIr=r(J5t,"beit"),J5t.forEach(t),pIr=r(aPe," \u2014 "),NY=n(aPe,"A",{href:!0});var Y5t=s(NY);uIr=r(Y5t,"FlaxBeitForImageClassification"),Y5t.forEach(t),_Ir=r(aPe," (BEiT model)"),aPe.forEach(t),bIr=i(pje),h5=n(pje,"LI",{});var nPe=s(h5);o9e=n(nPe,"STRONG",{});var K5t=s(o9e);vIr=r(K5t,"vit"),K5t.forEach(t),FIr=r(nPe," \u2014 "),jY=n(nPe,"A",{href:!0});var Z5t=s(jY);TIr=r(Z5t,"FlaxViTForImageClassification"),Z5t.forEach(t),MIr=r(nPe," (ViT model)"),nPe.forEach(t),pje.forEach(t),EIr=i(ai),T(p5.$$.fragment,ai),ai.forEach(t),ti.forEach(t),iqe=i(f),nf=n(f,"H2",{class:!0});var uje=s(nf);u5=n(uje,"A",{id:!0,class:!0,href:!0});var eCt=s(u5);r9e=n(eCt,"SPAN",{});var oCt=s(r9e);T(O8.$$.fragment,oCt),oCt.forEach(t),eCt.forEach(t),CIr=i(uje),t9e=n(uje,"SPAN",{});var rCt=s(t9e);wIr=r(rCt,"FlaxAutoModelForVision2Seq"),rCt.forEach(t),uje.forEach(t),dqe=i(f),Mr=n(f,"DIV",{class:!0});var ni=s(Mr);T(V8.$$.fragment,ni),AIr=i(ni),sf=n(ni,"P",{});var PZ=s(sf);yIr=r(PZ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),DY=n(PZ,"A",{href:!0});var tCt=s(DY);LIr=r(tCt,"from_pretrained()"),tCt.forEach(t),xIr=r(PZ," class method or the "),GY=n(PZ,"A",{href:!0});var aCt=s(GY);$Ir=r(aCt,"from_config()"),aCt.forEach(t),kIr=r(PZ,` class
method.`),PZ.forEach(t),SIr=i(ni),X8=n(ni,"P",{});var _je=s(X8);RIr=r(_je,"This class cannot be instantiated directly using "),a9e=n(_je,"CODE",{});var nCt=s(a9e);BIr=r(nCt,"__init__()"),nCt.forEach(t),PIr=r(_je," (throws an error)."),_je.forEach(t),IIr=i(ni),Jt=n(ni,"DIV",{class:!0});var I3=s(Jt);T(z8.$$.fragment,I3),qIr=i(I3),n9e=n(I3,"P",{});var sCt=s(n9e);NIr=r(sCt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),sCt.forEach(t),jIr=i(I3),lf=n(I3,"P",{});var IZ=s(lf);DIr=r(IZ,`Note:
Loading a model from its configuration file does `),s9e=n(IZ,"STRONG",{});var lCt=s(s9e);GIr=r(lCt,"not"),lCt.forEach(t),OIr=r(IZ,` load the model weights. It only affects the
model\u2019s configuration. Use `),OY=n(IZ,"A",{href:!0});var iCt=s(OY);VIr=r(iCt,"from_pretrained()"),iCt.forEach(t),XIr=r(IZ," to load the model weights."),IZ.forEach(t),zIr=i(I3),T(_5.$$.fragment,I3),I3.forEach(t),QIr=i(ni),Jr=n(ni,"DIV",{class:!0});var si=s(Jr);T(Q8.$$.fragment,si),WIr=i(si),l9e=n(si,"P",{});var dCt=s(l9e);HIr=r(dCt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dCt.forEach(t),UIr=i(si),Cn=n(si,"P",{});var q3=s(Cn);JIr=r(q3,"The model class to instantiate is selected based on the "),i9e=n(q3,"CODE",{});var cCt=s(i9e);YIr=r(cCt,"model_type"),cCt.forEach(t),KIr=r(q3,` property of the config object (either
passed as an argument or loaded from `),d9e=n(q3,"CODE",{});var fCt=s(d9e);ZIr=r(fCt,"pretrained_model_name_or_path"),fCt.forEach(t),eqr=r(q3,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),c9e=n(q3,"CODE",{});var mCt=s(c9e);oqr=r(mCt,"pretrained_model_name_or_path"),mCt.forEach(t),rqr=r(q3,":"),q3.forEach(t),tqr=i(si),f9e=n(si,"UL",{});var gCt=s(f9e);b5=n(gCt,"LI",{});var sPe=s(b5);m9e=n(sPe,"STRONG",{});var hCt=s(m9e);aqr=r(hCt,"vision-encoder-decoder"),hCt.forEach(t),nqr=r(sPe," \u2014 "),VY=n(sPe,"A",{href:!0});var pCt=s(VY);sqr=r(pCt,"FlaxVisionEncoderDecoderModel"),pCt.forEach(t),lqr=r(sPe," (Vision Encoder decoder model)"),sPe.forEach(t),gCt.forEach(t),iqr=i(si),T(v5.$$.fragment,si),si.forEach(t),ni.forEach(t),this.h()},h(){c(g,"name","hf:doc:metadata"),c(g,"content",JSON.stringify(vwt)),c(m,"id","auto-classes"),c(m,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m,"href","#auto-classes"),c(p,"class","relative group"),c(An,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.AutoConfig"),c(Ln,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.AutoModel"),c(xn,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.AutoTokenizer"),c(gi,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertModel"),c(uf,"id","extending-the-auto-classes"),c(uf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(uf,"href","#extending-the-auto-classes"),c(hi,"class","relative group"),c(bf,"id","transformers.AutoConfig"),c(bf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(bf,"href","#transformers.AutoConfig"),c(pi,"class","relative group"),c(f$,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),c(m$,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertConfig"),c(g$,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig"),c(h$,"href","/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitConfig"),c(p$,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertConfig"),c(u$,"href","/docs/transformers/pr_16907/en/model_doc/bert-generation#transformers.BertGenerationConfig"),c(_$,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdConfig"),c(b$,"href","/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),c(v$,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotConfig"),c(F$,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),c(T$,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertConfig"),c(M$,"href","/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineConfig"),c(E$,"href","/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPConfig"),c(C$,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertConfig"),c(w$,"href","/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextConfig"),c(A$,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLConfig"),c(y$,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),c(L$,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextConfig"),c(x$,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionConfig"),c($$,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaConfig"),c(k$,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Config"),c(S$,"href","/docs/transformers/pr_16907/en/model_doc/decision_transformer#transformers.DecisionTransformerConfig"),c(R$,"href","/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTConfig"),c(B$,"href","/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrConfig"),c(P$,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertConfig"),c(I$,"href","/docs/transformers/pr_16907/en/model_doc/dpr#transformers.DPRConfig"),c(q$,"href","/docs/transformers/pr_16907/en/model_doc/dpt#transformers.DPTConfig"),c(N$,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraConfig"),c(j$,"href","/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),c(D$,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertConfig"),c(G$,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetConfig"),c(O$,"href","/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTConfig"),c(V$,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelConfig"),c(X$,"href","/docs/transformers/pr_16907/en/model_doc/glpn#transformers.GLPNConfig"),c(z$,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Config"),c(Q$,"href","/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),c(W$,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJConfig"),c(H$,"href","/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertConfig"),c(U$,"href","/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertConfig"),c(J$,"href","/docs/transformers/pr_16907/en/model_doc/imagegpt#transformers.ImageGPTConfig"),c(Y$,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMConfig"),c(K$,"href","/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),c(Z$,"href","/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDConfig"),c(ek,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerConfig"),c(ok,"href","/docs/transformers/pr_16907/en/model_doc/luke#transformers.LukeConfig"),c(rk,"href","/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertConfig"),c(tk,"href","/docs/transformers/pr_16907/en/model_doc/m2m_100#transformers.M2M100Config"),c(ak,"href","/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianConfig"),c(nk,"href","/docs/transformers/pr_16907/en/model_doc/maskformer#transformers.MaskFormerConfig"),c(sk,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartConfig"),c(lk,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),c(ik,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertConfig"),c(dk,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetConfig"),c(ck,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Config"),c(fk,"href","/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerConfig"),c(mk,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),c(gk,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusConfig"),c(hk,"href","/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverConfig"),c(pk,"href","/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartConfig"),c(uk,"href","/docs/transformers/pr_16907/en/model_doc/poolformer#transformers.PoolFormerConfig"),c(_k,"href","/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetConfig"),c(bk,"href","/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertConfig"),c(vk,"href","/docs/transformers/pr_16907/en/model_doc/rag#transformers.RagConfig"),c(Fk,"href","/docs/transformers/pr_16907/en/model_doc/realm#transformers.RealmConfig"),c(Tk,"href","/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerConfig"),c(Mk,"href","/docs/transformers/pr_16907/en/model_doc/regnet#transformers.RegNetConfig"),c(Ek,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertConfig"),c(Ck,"href","/docs/transformers/pr_16907/en/model_doc/resnet#transformers.ResNetConfig"),c(wk,"href","/docs/transformers/pr_16907/en/model_doc/retribert#transformers.RetriBertConfig"),c(Ak,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaConfig"),c(yk,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerConfig"),c(Lk,"href","/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerConfig"),c(xk,"href","/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWConfig"),c($k,"href","/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDConfig"),c(kk,"href","/docs/transformers/pr_16907/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),c(Sk,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),c(Rk,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),c(Bk,"href","/docs/transformers/pr_16907/en/model_doc/splinter#transformers.SplinterConfig"),c(Pk,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),c(Ik,"href","/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinConfig"),c(qk,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Config"),c(Nk,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasConfig"),c(jk,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartConfig"),c(Dk,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),c(Gk,"href","/docs/transformers/pr_16907/en/model_doc/trocr#transformers.TrOCRConfig"),c(Ok,"href","/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechConfig"),c(Vk,"href","/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),c(Xk,"href","/docs/transformers/pr_16907/en/model_doc/van#transformers.VanConfig"),c(zk,"href","/docs/transformers/pr_16907/en/model_doc/vilt#transformers.ViltConfig"),c(Qk,"href","/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),c(Wk,"href","/docs/transformers/pr_16907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),c(Hk,"href","/docs/transformers/pr_16907/en/model_doc/visual_bert#transformers.VisualBertConfig"),c(Uk,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTConfig"),c(Jk,"href","/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.ViTMAEConfig"),c(Yk,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),c(Kk,"href","/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMConfig"),c(Zk,"href","/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMConfig"),c(eS,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMConfig"),c(oS,"href","/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),c(rS,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),c(tS,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),c(aS,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetConfig"),c(nS,"href","/docs/transformers/pr_16907/en/model_doc/yolos#transformers.YolosConfig"),c(sS,"href","/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoConfig"),c(Er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ug,"id","transformers.AutoTokenizer"),c(ug,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(ug,"href","#transformers.AutoTokenizer"),c(_i,"class","relative group"),c(lS,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),c(iS,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertTokenizer"),c(dS,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(cS,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartTokenizer"),c(fS,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartTokenizerFast"),c(mS,"href","/docs/transformers/pr_16907/en/model_doc/barthez#transformers.BarthezTokenizer"),c(gS,"href","/docs/transformers/pr_16907/en/model_doc/barthez#transformers.BarthezTokenizerFast"),c(hS,"href","/docs/transformers/pr_16907/en/model_doc/bartpho#transformers.BartphoTokenizer"),c(pS,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertTokenizer"),c(uS,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertTokenizerFast"),c(_S,"href","/docs/transformers/pr_16907/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),c(bS,"href","/docs/transformers/pr_16907/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),c(vS,"href","/docs/transformers/pr_16907/en/model_doc/bertweet#transformers.BertweetTokenizer"),c(FS,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdTokenizer"),c(TS,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),c(MS,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(ES,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(CS,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),c(wS,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),c(AS,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),c(yS,"href","/docs/transformers/pr_16907/en/model_doc/byt5#transformers.ByT5Tokenizer"),c(LS,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertTokenizer"),c(xS,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertTokenizerFast"),c($S,"href","/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineTokenizer"),c(kS,"href","/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPTokenizer"),c(SS,"href","/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPTokenizerFast"),c(RS,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertTokenizer"),c(BS,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),c(PS,"href","/docs/transformers/pr_16907/en/model_doc/cpm#transformers.CpmTokenizer"),c(IS,"href","/docs/transformers/pr_16907/en/model_doc/cpm#transformers.CpmTokenizerFast"),c(qS,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLTokenizer"),c(NS,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaTokenizer"),c(jS,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(DS,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaTokenizer"),c(GS,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaTokenizerFast"),c(OS,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),c(VS,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2TokenizerFast"),c(XS,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertTokenizer"),c(zS,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),c(QS,"href","/docs/transformers/pr_16907/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),c(WS,"href","/docs/transformers/pr_16907/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),c(HS,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraTokenizer"),c(US,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraTokenizerFast"),c(JS,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertTokenizer"),c(YS,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetTokenizer"),c(KS,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetTokenizerFast"),c(ZS,"href","/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTTokenizer"),c(eR,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelTokenizer"),c(oR,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelTokenizerFast"),c(rR,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(tR,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(aR,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(nR,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(sR,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Tokenizer"),c(lR,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),c(iR,"href","/docs/transformers/pr_16907/en/model_doc/herbert#transformers.HerbertTokenizer"),c(dR,"href","/docs/transformers/pr_16907/en/model_doc/herbert#transformers.HerbertTokenizerFast"),c(cR,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(fR,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaTokenizer"),c(mR,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(gR,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),c(hR,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),c(pR,"href","/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),c(uR,"href","/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),c(_R,"href","/docs/transformers/pr_16907/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),c(bR,"href","/docs/transformers/pr_16907/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),c(vR,"href","/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDTokenizer"),c(FR,"href","/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDTokenizerFast"),c(TR,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerTokenizer"),c(MR,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerTokenizerFast"),c(ER,"href","/docs/transformers/pr_16907/en/model_doc/luke#transformers.LukeTokenizer"),c(CR,"href","/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertTokenizer"),c(wR,"href","/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),c(AR,"href","/docs/transformers/pr_16907/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),c(yR,"href","/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianTokenizer"),c(LR,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartTokenizer"),c(xR,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartTokenizerFast"),c($R,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBart50Tokenizer"),c(kR,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBart50TokenizerFast"),c(SR,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertTokenizer"),c(RR,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertTokenizerFast"),c(BR,"href","/docs/transformers/pr_16907/en/model_doc/mluke#transformers.MLukeTokenizer"),c(PR,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),c(IR,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),c(qR,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetTokenizer"),c(NR,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),c(jR,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.T5Tokenizer"),c(DR,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.T5TokenizerFast"),c(GR,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertTokenizer"),c(OR,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(VR,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),c(XR,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),c(zR,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusTokenizer"),c(QR,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),c(WR,"href","/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverTokenizer"),c(HR,"href","/docs/transformers/pr_16907/en/model_doc/phobert#transformers.PhobertTokenizer"),c(UR,"href","/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartTokenizer"),c(JR,"href","/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),c(YR,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertTokenizer"),c(KR,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertTokenizerFast"),c(ZR,"href","/docs/transformers/pr_16907/en/model_doc/rag#transformers.RagTokenizer"),c(eB,"href","/docs/transformers/pr_16907/en/model_doc/realm#transformers.RealmTokenizer"),c(oB,"href","/docs/transformers/pr_16907/en/model_doc/realm#transformers.RealmTokenizerFast"),c(rB,"href","/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerTokenizer"),c(tB,"href","/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerTokenizerFast"),c(aB,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertTokenizer"),c(nB,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertTokenizerFast"),c(sB,"href","/docs/transformers/pr_16907/en/model_doc/retribert#transformers.RetriBertTokenizer"),c(lB,"href","/docs/transformers/pr_16907/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),c(iB,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaTokenizer"),c(dB,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(cB,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerTokenizer"),c(fB,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),c(mB,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),c(gB,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),c(hB,"href","/docs/transformers/pr_16907/en/model_doc/splinter#transformers.SplinterTokenizer"),c(pB,"href","/docs/transformers/pr_16907/en/model_doc/splinter#transformers.SplinterTokenizerFast"),c(uB,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),c(_B,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),c(bB,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.T5Tokenizer"),c(vB,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.T5TokenizerFast"),c(FB,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasTokenizer"),c(TB,"href","/docs/transformers/pr_16907/en/model_doc/tapex#transformers.TapexTokenizer"),c(MB,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),c(EB,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertTokenizer"),c(CB,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertTokenizerFast"),c(wB,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),c(AB,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),c(yB,"href","/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMTokenizer"),c(LB,"href","/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMTokenizerFast"),c(xB,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMTokenizer"),c($B,"href","/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),c(kB,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),c(SB,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),c(RB,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaTokenizer"),c(BB,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaTokenizerFast"),c(PB,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetTokenizer"),c(IB,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),c(qB,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertTokenizer"),c(NB,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertTokenizerFast"),c(Cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wg,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hg,"id","transformers.AutoFeatureExtractor"),c(Hg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Hg,"href","#transformers.AutoFeatureExtractor"),c(bi,"class","relative group"),c(jB,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),c(DB,"href","/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(GB,"href","/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPFeatureExtractor"),c(OB,"href","/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(VB,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(XB,"href","/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitFeatureExtractor"),c(zB,"href","/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTFeatureExtractor"),c(QB,"href","/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrFeatureExtractor"),c(WB,"href","/docs/transformers/pr_16907/en/model_doc/dpt#transformers.DPTFeatureExtractor"),c(HB,"href","/docs/transformers/pr_16907/en/model_doc/glpn#transformers.GLPNFeatureExtractor"),c(UB,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(JB,"href","/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),c(YB,"href","/docs/transformers/pr_16907/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),c(KB,"href","/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),c(ZB,"href","/docs/transformers/pr_16907/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),c(eP,"href","/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(oP,"href","/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(rP,"href","/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),c(tP,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),c(aP,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(nP,"href","/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),c(sP,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(lP,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTFeatureExtractor"),c(iP,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),c(dP,"href","/docs/transformers/pr_16907/en/model_doc/yolos#transformers.YolosFeatureExtractor"),c(Qe,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Th,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mh,"id","transformers.AutoProcessor"),c(Mh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Mh,"href","#transformers.AutoProcessor"),c(vi,"class","relative group"),c(cP,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),c(fP,"href","/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPProcessor"),c(mP,"href","/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),c(gP,"href","/docs/transformers/pr_16907/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),c(hP,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(pP,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(uP,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),c(_P,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),c(bP,"href","/docs/transformers/pr_16907/en/model_doc/trocr#transformers.TrOCRProcessor"),c(vP,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(FP,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(TP,"href","/docs/transformers/pr_16907/en/model_doc/vilt#transformers.ViltProcessor"),c(MP,"href","/docs/transformers/pr_16907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),c(EP,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(CP,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),c(We,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jh,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Dh,"id","transformers.AutoModel"),c(Dh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Dh,"href","#transformers.AutoModel"),c(Ti,"class","relative group"),c(wP,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AP,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yP,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LP,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertModel"),c(xP,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartModel"),c($P,"href","/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitModel"),c(kP,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertModel"),c(SP,"href","/docs/transformers/pr_16907/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),c(RP,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdModel"),c(BP,"href","/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),c(PP,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotModel"),c(IP,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),c(qP,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertModel"),c(NP,"href","/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineModel"),c(jP,"href","/docs/transformers/pr_16907/en/model_doc/clip#transformers.CLIPModel"),c(DP,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertModel"),c(GP,"href","/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextModel"),c(OP,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLModel"),c(VP,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioModel"),c(XP,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextModel"),c(zP,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionModel"),c(QP,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaModel"),c(WP,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2Model"),c(HP,"href","/docs/transformers/pr_16907/en/model_doc/decision_transformer#transformers.DecisionTransformerModel"),c(UP,"href","/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTModel"),c(JP,"href","/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrModel"),c(YP,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertModel"),c(KP,"href","/docs/transformers/pr_16907/en/model_doc/dpr#transformers.DPRQuestionEncoder"),c(ZP,"href","/docs/transformers/pr_16907/en/model_doc/dpt#transformers.DPTModel"),c(eI,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraModel"),c(oI,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertModel"),c(rI,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetModel"),c(tI,"href","/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTModel"),c(aI,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelModel"),c(nI,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelBaseModel"),c(sI,"href","/docs/transformers/pr_16907/en/model_doc/glpn#transformers.GLPNModel"),c(lI,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2Model"),c(iI,"href","/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoModel"),c(dI,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJModel"),c(cI,"href","/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertModel"),c(fI,"href","/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertModel"),c(mI,"href","/docs/transformers/pr_16907/en/model_doc/imagegpt#transformers.ImageGPTModel"),c(gI,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMModel"),c(hI,"href","/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),c(pI,"href","/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDModel"),c(uI,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerModel"),c(_I,"href","/docs/transformers/pr_16907/en/model_doc/luke#transformers.LukeModel"),c(bI,"href","/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertModel"),c(vI,"href","/docs/transformers/pr_16907/en/model_doc/m2m_100#transformers.M2M100Model"),c(FI,"href","/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianModel"),c(TI,"href","/docs/transformers/pr_16907/en/model_doc/maskformer#transformers.MaskFormerModel"),c(MI,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartModel"),c(EI,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertModel"),c(CI,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertModel"),c(wI,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetModel"),c(AI,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5Model"),c(yI,"href","/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerModel"),c(LI,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),c(xI,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusModel"),c($I,"href","/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverModel"),c(kI,"href","/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartModel"),c(SI,"href","/docs/transformers/pr_16907/en/model_doc/poolformer#transformers.PoolFormerModel"),c(RI,"href","/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetModel"),c(BI,"href","/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertModel"),c(PI,"href","/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerModel"),c(II,"href","/docs/transformers/pr_16907/en/model_doc/regnet#transformers.RegNetModel"),c(qI,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertModel"),c(NI,"href","/docs/transformers/pr_16907/en/model_doc/resnet#transformers.ResNetModel"),c(jI,"href","/docs/transformers/pr_16907/en/model_doc/retribert#transformers.RetriBertModel"),c(DI,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaModel"),c(GI,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerModel"),c(OI,"href","/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerModel"),c(VI,"href","/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWModel"),c(XI,"href","/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDModel"),c(zI,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextModel"),c(QI,"href","/docs/transformers/pr_16907/en/model_doc/splinter#transformers.SplinterModel"),c(WI,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertModel"),c(HI,"href","/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinModel"),c(UI,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5Model"),c(JI,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasModel"),c(YI,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLModel"),c(KI,"href","/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechModel"),c(ZI,"href","/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),c(eq,"href","/docs/transformers/pr_16907/en/model_doc/van#transformers.VanModel"),c(oq,"href","/docs/transformers/pr_16907/en/model_doc/vilt#transformers.ViltModel"),c(rq,"href","/docs/transformers/pr_16907/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),c(tq,"href","/docs/transformers/pr_16907/en/model_doc/visual_bert#transformers.VisualBertModel"),c(aq,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTModel"),c(nq,"href","/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.ViTMAEModel"),c(sq,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),c(lq,"href","/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMModel"),c(iq,"href","/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMModel"),c(dq,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMModel"),c(cq,"href","/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),c(fq,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),c(mq,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),c(gq,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetModel"),c(hq,"href","/docs/transformers/pr_16907/en/model_doc/yolos#transformers.YolosModel"),c(pq,"href","/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoModel"),c(He,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($u,"id","transformers.AutoModelForPreTraining"),c($u,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($u,"href","#transformers.AutoModelForPreTraining"),c(Ci,"class","relative group"),c(uq,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_q,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(bq,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vq,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForPreTraining"),c(Fq,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Tq,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForPreTraining"),c(Mq,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),c(Eq,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(Cq,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(wq,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(Aq,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(yq,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(Lq,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(xq,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForPreTraining"),c($q,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(kq,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForPreTraining"),c(Sq,"href","/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Rq,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForPreTraining"),c(Bq,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(Pq,"href","/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(Iq,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(qq,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(Nq,"href","/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertForPreTraining"),c(jq,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),c(Dq,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),c(Gq,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(Oq,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(Vq,"href","/docs/transformers/pr_16907/en/model_doc/retribert#transformers.RetriBertModel"),c(Xq,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(zq,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Qq,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Wq,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Hq,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(Uq,"href","/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),c(Jq,"href","/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),c(Yq,"href","/docs/transformers/pr_16907/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),c(Kq,"href","/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),c(Zq,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),c(eN,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(oN,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(rN,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(tN,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Ue,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(v_,"id","transformers.AutoModelForCausalLM"),c(v_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(v_,"href","#transformers.AutoModelForCausalLM"),c(yi,"class","relative group"),c(aN,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nN,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sN,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lN,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForCausalLM"),c(iN,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertLMHeadModel"),c(dN,"href","/docs/transformers/pr_16907/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),c(cN,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),c(fN,"href","/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),c(mN,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),c(gN,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),c(hN,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForCausalLM"),c(pN,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),c(uN,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),c(_N,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForCausalLM"),c(bN,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),c(vN,"href","/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),c(FN,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJForCausalLM"),c(TN,"href","/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianForCausalLM"),c(MN,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForCausalLM"),c(EN,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),c(CN,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),c(wN,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusForCausalLM"),c(AN,"href","/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartForCausalLM"),c(yN,"href","/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),c(LN,"href","/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),c(xN,"href","/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),c($N,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForCausalLM"),c(kN,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForCausalLM"),c(SN,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForCausalLM"),c(RN,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),c(BN,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),c(PN,"href","/docs/transformers/pr_16907/en/model_doc/trocr#transformers.TrOCRForCausalLM"),c(IN,"href","/docs/transformers/pr_16907/en/model_doc/xglm#transformers.XGLMForCausalLM"),c(qN,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(NN,"href","/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),c(jN,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),c(DN,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),c(GN,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),c(Je,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a1,"id","transformers.AutoModelForMaskedLM"),c(a1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a1,"href","#transformers.AutoModelForMaskedLM"),c($i,"class","relative group"),c(ON,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VN,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XN,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(at,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zN,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForMaskedLM"),c(QN,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(WN,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForMaskedLM"),c(HN,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),c(UN,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForMaskedLM"),c(JN,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),c(YN,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),c(KN,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForMaskedLM"),c(ZN,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),c(ej,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),c(oj,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForMaskedLM"),c(rj,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),c(tj,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForMaskedLM"),c(aj,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForMaskedLM"),c(nj,"href","/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForMaskedLM"),c(sj,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),c(lj,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForMaskedLM"),c(ij,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(dj,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),c(cj,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),c(fj,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),c(mj,"href","/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),c(gj,"href","/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),c(hj,"href","/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),c(pj,"href","/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerForMaskedLM"),c(uj,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForMaskedLM"),c(_j,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForMaskedLM"),c(bj,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),c(vj,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),c(Fj,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasForMaskedLM"),c(Tj,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),c(Mj,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),c(Ej,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),c(Cj,"href","/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForMaskedLM"),c(Ye,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(V1,"id","transformers.AutoModelForSeq2SeqLM"),c(V1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(V1,"href","#transformers.AutoModelForSeq2SeqLM"),c(Ri,"class","relative group"),c(wj,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Aj,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yj,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Lj,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(xj,"href","/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),c($j,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),c(kj,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),c(Sj,"href","/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),c(Rj,"href","/docs/transformers/pr_16907/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),c(Bj,"href","/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDForConditionalGeneration"),c(Pj,"href","/docs/transformers/pr_16907/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),c(Ij,"href","/docs/transformers/pr_16907/en/model_doc/marian#transformers.MarianMTModel"),c(qj,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),c(Nj,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),c(jj,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),c(Dj,"href","/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),c(Gj,"href","/docs/transformers/pr_16907/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),c(Oj,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.T5ForConditionalGeneration"),c(Vj,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForConditionalGeneration"),c(Xj,"href","/docs/transformers/pr_16907/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),c(Ke,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(So,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cb,"id","transformers.AutoModelForSequenceClassification"),c(cb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cb,"href","#transformers.AutoModelForSequenceClassification"),c(Ii,"class","relative group"),c(zj,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qj,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Wj,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(st,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Hj,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForSequenceClassification"),c(Uj,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForSequenceClassification"),c(Jj,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForSequenceClassification"),c(Yj,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),c(Kj,"href","/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),c(Zj,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),c(eD,"href","/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineForSequenceClassification"),c(oD,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),c(rD,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),c(tD,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),c(aD,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),c(nD,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),c(sD,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),c(lD,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForSequenceClassification"),c(iD,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),c(dD,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForSequenceClassification"),c(cD,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),c(fD,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),c(mD,"href","/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),c(gD,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),c(hD,"href","/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForSequenceClassification"),c(pD,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),c(uD,"href","/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),c(_D,"href","/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDForSequenceClassification"),c(bD,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),c(vD,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForSequenceClassification"),c(FD,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),c(TD,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),c(MD,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),c(ED,"href","/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),c(CD,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),c(wD,"href","/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),c(AD,"href","/docs/transformers/pr_16907/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),c(yD,"href","/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),c(LD,"href","/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),c(xD,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),c($D,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),c(kD,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),c(SD,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),c(RD,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasForSequenceClassification"),c(BD,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForSequenceClassification"),c(PD,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),c(ID,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMForSequenceClassification"),c(qD,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),c(ND,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),c(jD,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),c(DD,"href","/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForSequenceClassification"),c(Ze,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l2,"id","transformers.AutoModelForMultipleChoice"),c(l2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l2,"href","#transformers.AutoModelForMultipleChoice"),c(ji,"class","relative group"),c(GD,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(OD,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(VD,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(XD,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForMultipleChoice"),c(zD,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForMultipleChoice"),c(QD,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),c(WD,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),c(HD,"href","/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineForMultipleChoice"),c(UD,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),c(JD,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),c(YD,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForMultipleChoice"),c(KD,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),c(ZD,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForMultipleChoice"),c(eG,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),c(oG,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForMultipleChoice"),c(rG,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),c(tG,"href","/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForMultipleChoice"),c(aG,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),c(nG,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),c(sG,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),c(lG,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),c(iG,"href","/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),c(dG,"href","/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),c(cG,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),c(fG,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),c(mG,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),c(gG,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),c(hG,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMForMultipleChoice"),c(pG,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),c(uG,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),c(_G,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),c(bG,"href","/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForMultipleChoice"),c(eo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Bo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(D2,"id","transformers.AutoModelForNextSentencePrediction"),c(D2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(D2,"href","#transformers.AutoModelForNextSentencePrediction"),c(Oi,"class","relative group"),c(vG,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FG,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TG,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(it,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MG,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForNextSentencePrediction"),c(EG,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),c(CG,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),c(wG,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),c(AG,"href","/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),c(oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(U2,"id","transformers.AutoModelForTokenClassification"),c(U2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(U2,"href","#transformers.AutoModelForTokenClassification"),c(zi,"class","relative group"),c(yG,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(LG,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(xG,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($G,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForTokenClassification"),c(kG,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForTokenClassification"),c(SG,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),c(RG,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForTokenClassification"),c(BG,"href","/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineForTokenClassification"),c(PG,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),c(IG,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),c(qG,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForTokenClassification"),c(NG,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),c(jG,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),c(DG,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForTokenClassification"),c(GG,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),c(OG,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForTokenClassification"),c(VG,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForTokenClassification"),c(XG,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),c(zG,"href","/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForTokenClassification"),c(QG,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),c(WG,"href","/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),c(HG,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForTokenClassification"),c(UG,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),c(JG,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),c(YG,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),c(KG,"href","/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),c(ZG,"href","/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),c(eO,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForTokenClassification"),c(oO,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForTokenClassification"),c(rO,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),c(tO,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),c(aO,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMForTokenClassification"),c(nO,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),c(sO,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),c(lO,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),c(iO,"href","/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForTokenClassification"),c(ro,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Sv,"id","transformers.AutoModelForQuestionAnswering"),c(Sv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Sv,"href","#transformers.AutoModelForQuestionAnswering"),c(Hi,"class","relative group"),c(dO,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cO,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fO,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mO,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),c(gO,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.BartForQuestionAnswering"),c(hO,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.BertForQuestionAnswering"),c(pO,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),c(uO,"href","/docs/transformers/pr_16907/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),c(_O,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),c(bO,"href","/docs/transformers/pr_16907/en/model_doc/canine#transformers.CanineForQuestionAnswering"),c(vO,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),c(FO,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),c(TO,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),c(MO,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),c(EO,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),c(CO,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),c(wO,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),c(AO,"href","/docs/transformers/pr_16907/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),c(yO,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),c(LO,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),c(xO,"href","/docs/transformers/pr_16907/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),c($O,"href","/docs/transformers/pr_16907/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),c(kO,"href","/docs/transformers/pr_16907/en/model_doc/led#transformers.LEDForQuestionAnswering"),c(SO,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),c(RO,"href","/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),c(BO,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),c(PO,"href","/docs/transformers/pr_16907/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),c(IO,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),c(qO,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),c(NO,"href","/docs/transformers/pr_16907/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),c(jO,"href","/docs/transformers/pr_16907/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),c(DO,"href","/docs/transformers/pr_16907/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),c(GO,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),c(OO,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),c(VO,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),c(XO,"href","/docs/transformers/pr_16907/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),c(zO,"href","/docs/transformers/pr_16907/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),c(QO,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),c(WO,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),c(HO,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),c(UO,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),c(JO,"href","/docs/transformers/pr_16907/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),c(to,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(TF,"id","transformers.AutoModelForTableQuestionAnswering"),c(TF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(TF,"href","#transformers.AutoModelForTableQuestionAnswering"),c(Yi,"class","relative group"),c(YO,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KO,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZO,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eV,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),c(ao,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(No,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AF,"id","transformers.AutoModelForImageClassification"),c(AF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AF,"href","#transformers.AutoModelForImageClassification"),c(ed,"class","relative group"),c(oV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(rV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(tV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(aV,"href","/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitForImageClassification"),c(nV,"href","/docs/transformers/pr_16907/en/model_doc/convnext#transformers.ConvNextForImageClassification"),c(sV,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionForImageClassification"),c(lV,"href","/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTForImageClassification"),c(iV,"href","/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),c(dV,"href","/docs/transformers/pr_16907/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),c(cV,"href","/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),c(fV,"href","/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),c(mV,"href","/docs/transformers/pr_16907/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),c(gV,"href","/docs/transformers/pr_16907/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),c(hV,"href","/docs/transformers/pr_16907/en/model_doc/regnet#transformers.RegNetForImageClassification"),c(pV,"href","/docs/transformers/pr_16907/en/model_doc/resnet#transformers.ResNetForImageClassification"),c(uV,"href","/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerForImageClassification"),c(_V,"href","/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinForImageClassification"),c(bV,"href","/docs/transformers/pr_16907/en/model_doc/van#transformers.VanForImageClassification"),c(vV,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTForImageClassification"),c(no,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GF,"id","transformers.AutoModelForVision2Seq"),c(GF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GF,"href","#transformers.AutoModelForVision2Seq"),c(td,"class","relative group"),c(FV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EV,"href","/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),c(so,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Do,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(QF,"id","transformers.AutoModelForAudioClassification"),c(QF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(QF,"href","#transformers.AutoModelForAudioClassification"),c(sd,"class","relative group"),c(CV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(AV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(yV,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),c(LV,"href","/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertForSequenceClassification"),c(xV,"href","/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWForSequenceClassification"),c($V,"href","/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),c(kV,"href","/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),c(SV,"href","/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),c(RV,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),c(BV,"href","/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),c(lo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(a0,"id","transformers.AutoModelForAudioFrameClassification"),c(a0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(a0,"href","#transformers.AutoModelForAudioFrameClassification"),c(dd,"class","relative group"),c(PV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NV,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),c(jV,"href","/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),c(DV,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),c(GV,"href","/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),c(io,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Oo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m0,"id","transformers.AutoModelForCTC"),c(m0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m0,"href","#transformers.AutoModelForCTC"),c(md,"class","relative group"),c(OV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(VV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(XV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(_t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zV,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),c(QV,"href","/docs/transformers/pr_16907/en/model_doc/hubert#transformers.HubertForCTC"),c(WV,"href","/docs/transformers/pr_16907/en/model_doc/sew#transformers.SEWForCTC"),c(HV,"href","/docs/transformers/pr_16907/en/model_doc/sew-d#transformers.SEWDForCTC"),c(UV,"href","/docs/transformers/pr_16907/en/model_doc/unispeech#transformers.UniSpeechForCTC"),c(JV,"href","/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),c(YV,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),c(KV,"href","/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMForCTC"),c(co,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Vo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C0,"id","transformers.AutoModelForSpeechSeq2Seq"),c(C0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C0,"href","#transformers.AutoModelForSpeechSeq2Seq"),c(pd,"class","relative group"),c(ZV,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(eX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(oX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rX,"href","/docs/transformers/pr_16907/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),c(tX,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),c(fo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Xo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c($0,"id","transformers.AutoModelForAudioXVector"),c($0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c($0,"href","#transformers.AutoModelForAudioXVector"),c(bd,"class","relative group"),c(aX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lX,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),c(iX,"href","/docs/transformers/pr_16907/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),c(dX,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),c(cX,"href","/docs/transformers/pr_16907/en/model_doc/wavlm#transformers.WavLMForXVector"),c(mo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(N0,"id","transformers.AutoModelForMaskedImageModeling"),c(N0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(N0,"href","#transformers.AutoModelForMaskedImageModeling"),c(Td,"class","relative group"),c(fX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ft,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hX,"href","/docs/transformers/pr_16907/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),c(pX,"href","/docs/transformers/pr_16907/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),c(uX,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),c(go,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Qo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(z0,"id","transformers.AutoModelForObjectDetection"),c(z0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(z0,"href","#transformers.AutoModelForObjectDetection"),c(wd,"class","relative group"),c(_X,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(bX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(vX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Tt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(FX,"href","/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrForObjectDetection"),c(TX,"href","/docs/transformers/pr_16907/en/model_doc/yolos#transformers.YolosForObjectDetection"),c(ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Wo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Y0,"id","transformers.AutoModelForImageSegmentation"),c(Y0,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(Y0,"href","#transformers.AutoModelForImageSegmentation"),c(Ld,"class","relative group"),c(MX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(EX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(CX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Mt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(wX,"href","/docs/transformers/pr_16907/en/model_doc/detr#transformers.DetrForSegmentation"),c(po,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ho,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(r6,"id","transformers.AutoModelForSemanticSegmentation"),c(r6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(r6,"href","#transformers.AutoModelForSemanticSegmentation"),c(kd,"class","relative group"),c(AX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(LX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Et,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(xX,"href","/docs/transformers/pr_16907/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),c($X,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.Data2VecVisionForSemanticSegmentation"),c(kX,"href","/docs/transformers/pr_16907/en/model_doc/dpt#transformers.DPTForSemanticSegmentation"),c(SX,"href","/docs/transformers/pr_16907/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),c(uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Uo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(c6,"id","transformers.AutoModelForInstanceSegmentation"),c(c6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(c6,"href","#transformers.AutoModelForInstanceSegmentation"),c(Bd,"class","relative group"),c(RX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(BX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(PX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ct,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(IX,"href","/docs/transformers/pr_16907/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),c(_o,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Jo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p6,"id","transformers.TFAutoModel"),c(p6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p6,"href","#transformers.TFAutoModel"),c(qd,"class","relative group"),c(qX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jX,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DX,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertModel"),c(GX,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.TFBartModel"),c(OX,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertModel"),c(VX,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),c(XX,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),c(zX,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertModel"),c(QX,"href","/docs/transformers/pr_16907/en/model_doc/clip#transformers.TFCLIPModel"),c(WX,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertModel"),c(HX,"href","/docs/transformers/pr_16907/en/model_doc/convnext#transformers.TFConvNextModel"),c(UX,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.TFCTRLModel"),c(JX,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.TFData2VecVisionModel"),c(YX,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaModel"),c(KX,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),c(ZX,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertModel"),c(ez,"href","/docs/transformers/pr_16907/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),c(oz,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraModel"),c(rz,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertModel"),c(tz,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelModel"),c(az,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelBaseModel"),c(nz,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.TFGPT2Model"),c(sz,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.TFGPTJModel"),c(lz,"href","/docs/transformers/pr_16907/en/model_doc/hubert#transformers.TFHubertModel"),c(iz,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),c(dz,"href","/docs/transformers/pr_16907/en/model_doc/led#transformers.TFLEDModel"),c(cz,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerModel"),c(fz,"href","/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.TFLxmertModel"),c(mz,"href","/docs/transformers/pr_16907/en/model_doc/marian#transformers.TFMarianModel"),c(gz,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.TFMBartModel"),c(hz,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertModel"),c(pz,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetModel"),c(uz,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.TFMT5Model"),c(_z,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),c(bz,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.TFPegasusModel"),c(vz,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertModel"),c(Fz,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaModel"),c(Tz,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerModel"),c(Mz,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),c(Ez,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.TFT5Model"),c(Cz,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasModel"),c(wz,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),c(Az,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.TFViTModel"),c(yz,"href","/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.TFViTMAEModel"),c(Lz,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),c(xz,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMModel"),c($z,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),c(kz,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetModel"),c(wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Yo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(iT,"id","transformers.TFAutoModelForPreTraining"),c(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(iT,"href","#transformers.TFAutoModelForPreTraining"),c(Dd,"class","relative group"),c(Sz,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rz,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(Bz,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(At,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Pz,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForPreTraining"),c(Iz,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(qz,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForPreTraining"),c(Nz,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(jz,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(Dz,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(Gz,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForPreTraining"),c(Oz,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(Vz,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),c(Xz,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(zz,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(Qz,"href","/docs/transformers/pr_16907/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),c(Wz,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),c(Hz,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(Uz,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(Jz,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(Yz,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c(Kz,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(Zz,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(eQ,"href","/docs/transformers/pr_16907/en/model_doc/vit_mae#transformers.TFViTMAEForPreTraining"),c(oQ,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(rQ,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(tQ,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(Ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Ko,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BT,"id","transformers.TFAutoModelForCausalLM"),c(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(BT,"href","#transformers.TFAutoModelForCausalLM"),c(Vd,"class","relative group"),c(aQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(nQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(sQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(yt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lQ,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertLMHeadModel"),c(iQ,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),c(dQ,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),c(cQ,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),c(fQ,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.TFGPTJForCausalLM"),c(mQ,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),c(gQ,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),c(hQ,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),c(pQ,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),c(uQ,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),c(_Q,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(bQ,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),c(yr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Zo,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(UT,"id","transformers.TFAutoModelForImageClassification"),c(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(UT,"href","#transformers.TFAutoModelForImageClassification"),c(Qd,"class","relative group"),c(vQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(FQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(TQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Lt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(MQ,"href","/docs/transformers/pr_16907/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),c(EQ,"href","/docs/transformers/pr_16907/en/model_doc/data2vec#transformers.TFData2VecVisionForImageClassification"),c(CQ,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.TFViTForImageClassification"),c(Lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(er,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(o7,"id","transformers.TFAutoModelForMaskedLM"),c(o7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(o7,"href","#transformers.TFAutoModelForMaskedLM"),c(Jd,"class","relative group"),c(wQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LQ,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),c(xQ,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForMaskedLM"),c($Q,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),c(kQ,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),c(SQ,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),c(RQ,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),c(BQ,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),c(PQ,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForMaskedLM"),c(IQ,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),c(qQ,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),c(NQ,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),c(jQ,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),c(DQ,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),c(GQ,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),c(OQ,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),c(VQ,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),c(XQ,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),c(zQ,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),c(QQ,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),c(WQ,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),c(xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(C7,"id","transformers.TFAutoModelForSeq2SeqLM"),c(C7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(C7,"href","#transformers.TFAutoModelForSeq2SeqLM"),c(Zd,"class","relative group"),c(HQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(UQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(JQ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c($t,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(YQ,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),c(KQ,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),c(ZQ,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),c(eW,"href","/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),c(oW,"href","/docs/transformers/pr_16907/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),c(rW,"href","/docs/transformers/pr_16907/en/model_doc/marian#transformers.TFMarianMTModel"),c(tW,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),c(aW,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),c(nW,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),c(sW,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),c($r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q7,"id","transformers.TFAutoModelForSequenceClassification"),c(q7,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q7,"href","#transformers.TFAutoModelForSequenceClassification"),c(rc,"class","relative group"),c(lW,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iW,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dW,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(kt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cW,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),c(fW,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForSequenceClassification"),c(mW,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),c(gW,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),c(hW,"href","/docs/transformers/pr_16907/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),c(pW,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),c(uW,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),c(_W,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),c(bW,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),c(vW,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),c(FW,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),c(TW,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),c(MW,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.TFGPTJForSequenceClassification"),c(EW,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),c(CW,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),c(wW,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),c(AW,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),c(yW,"href","/docs/transformers/pr_16907/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),c(LW,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),c(xW,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),c($W,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),c(kW,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),c(SW,"href","/docs/transformers/pr_16907/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),c(RW,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),c(BW,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),c(PW,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),c(kr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(m9,"id","transformers.TFAutoModelForMultipleChoice"),c(m9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(m9,"href","#transformers.TFAutoModelForMultipleChoice"),c(nc,"class","relative group"),c(IW,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qW,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(NW,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(St,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jW,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),c(DW,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForMultipleChoice"),c(GW,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),c(OW,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),c(VW,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),c(XW,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),c(zW,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),c(QW,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),c(WW,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),c(HW,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),c(UW,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),c(JW,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),c(YW,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),c(KW,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),c(ZW,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),c(eH,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),c(oH,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),c(Sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ar,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(S9,"id","transformers.TFAutoModelForNextSentencePrediction"),c(S9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(S9,"href","#transformers.TFAutoModelForNextSentencePrediction"),c(ic,"class","relative group"),c(rH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(tH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(aH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Rt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nH,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForNextSentencePrediction"),c(sH,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForNextSentencePrediction"),c(Rr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(q9,"id","transformers.TFAutoModelForTableQuestionAnswering"),c(q9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(q9,"href","#transformers.TFAutoModelForTableQuestionAnswering"),c(fc,"class","relative group"),c(lH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Bt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cH,"href","/docs/transformers/pr_16907/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),c(Br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(G9,"id","transformers.TFAutoModelForTokenClassification"),c(G9,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(G9,"href","#transformers.TFAutoModelForTokenClassification"),c(hc,"class","relative group"),c(fH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Pt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hH,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),c(pH,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForTokenClassification"),c(uH,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),c(_H,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),c(bH,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),c(vH,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),c(FH,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),c(TH,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForTokenClassification"),c(MH,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),c(EH,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),c(CH,"href","/docs/transformers/pr_16907/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),c(wH,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),c(AH,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),c(yH,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),c(LH,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),c(xH,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),c($H,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),c(kH,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),c(SH,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),c(RH,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),c(Pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(lr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cM,"id","transformers.TFAutoModelForQuestionAnswering"),c(cM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(cM,"href","#transformers.TFAutoModelForQuestionAnswering"),c(_c,"class","relative group"),c(BH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(PH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(IH,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(It,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qH,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),c(NH,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),c(jH,"href","/docs/transformers/pr_16907/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),c(DH,"href","/docs/transformers/pr_16907/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),c(GH,"href","/docs/transformers/pr_16907/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),c(OH,"href","/docs/transformers/pr_16907/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),c(VH,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),c(XH,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),c(zH,"href","/docs/transformers/pr_16907/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),c(QH,"href","/docs/transformers/pr_16907/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),c(WH,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.TFGPTJForQuestionAnswering"),c(HH,"href","/docs/transformers/pr_16907/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),c(UH,"href","/docs/transformers/pr_16907/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),c(JH,"href","/docs/transformers/pr_16907/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),c(YH,"href","/docs/transformers/pr_16907/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),c(KH,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),c(ZH,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),c(eU,"href","/docs/transformers/pr_16907/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),c(oU,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),c(rU,"href","/docs/transformers/pr_16907/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),c(Ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ir,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(RM,"id","transformers.TFAutoModelForVision2Seq"),c(RM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(RM,"href","#transformers.TFAutoModelForVision2Seq"),c(Fc,"class","relative group"),c(tU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(aU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(nU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(sU,"href","/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),c(qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(qM,"id","transformers.TFAutoModelForSpeechSeq2Seq"),c(qM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(qM,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),c(Ec,"class","relative group"),c(lU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(iU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(dU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Nt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cU,"href","/docs/transformers/pr_16907/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),c(Nr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(cr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(GM,"id","transformers.FlaxAutoModel"),c(GM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(GM,"href","#transformers.FlaxAutoModel"),c(Ac,"class","relative group"),c(fU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(mU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(gU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hU,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertModel"),c(pU,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartModel"),c(uU,"href","/docs/transformers/pr_16907/en/model_doc/beit#transformers.FlaxBeitModel"),c(_U,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertModel"),c(bU,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),c(vU,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),c(FU,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),c(TU,"href","/docs/transformers/pr_16907/en/model_doc/clip#transformers.FlaxCLIPModel"),c(MU,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),c(EU,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraModel"),c(CU,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.FlaxGPT2Model"),c(wU,"href","/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),c(AU,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.FlaxGPTJModel"),c(yU,"href","/docs/transformers/pr_16907/en/model_doc/marian#transformers.FlaxMarianModel"),c(LU,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartModel"),c(xU,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.FlaxMT5Model"),c($U,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.FlaxPegasusModel"),c(kU,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaModel"),c(SU,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerModel"),c(RU,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.FlaxT5Model"),c(BU,"href","/docs/transformers/pr_16907/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),c(PU,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.FlaxViTModel"),c(IU,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),c(qU,"href","/docs/transformers/pr_16907/en/model_doc/xglm#transformers.FlaxXGLMModel"),c(NU,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),c(jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(p4,"id","transformers.FlaxAutoModelForCausalLM"),c(p4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(p4,"href","#transformers.FlaxAutoModelForCausalLM"),c(xc,"class","relative group"),c(jU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(DU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(GU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Dt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(OU,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForCausalLM"),c(VU,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForCausalLM"),c(XU,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForCausalLM"),c(zU,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForCausalLM"),c(QU,"href","/docs/transformers/pr_16907/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),c(WU,"href","/docs/transformers/pr_16907/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),c(HU,"href","/docs/transformers/pr_16907/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),c(UU,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForCausalLM"),c(JU,"href","/docs/transformers/pr_16907/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),c(Dr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(y4,"id","transformers.FlaxAutoModelForPreTraining"),c(y4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(y4,"href","#transformers.FlaxAutoModelForPreTraining"),c(Sc,"class","relative group"),c(YU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(KU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(ZU,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Gt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(eJ,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),c(oJ,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(rJ,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForPreTraining"),c(tJ,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),c(aJ,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),c(nJ,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(sJ,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(lJ,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(iJ,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(dJ,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(cJ,"href","/docs/transformers/pr_16907/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),c(fJ,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(O4,"id","transformers.FlaxAutoModelForMaskedLM"),c(O4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(O4,"href","#transformers.FlaxAutoModelForMaskedLM"),c(Pc,"class","relative group"),c(mJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(gJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(hJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ot,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pJ,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),c(uJ,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(_J,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),c(bJ,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),c(vJ,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),c(FJ,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),c(TJ,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(MJ,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),c(EJ,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),c(CJ,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),c(Or,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(oE,"id","transformers.FlaxAutoModelForSeq2SeqLM"),c(oE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(oE,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),c(Nc,"class","relative group"),c(wJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(AJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(yJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Vt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(LJ,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),c(xJ,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),c($J,"href","/docs/transformers/pr_16907/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),c(kJ,"href","/docs/transformers/pr_16907/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),c(SJ,"href","/docs/transformers/pr_16907/en/model_doc/marian#transformers.FlaxMarianMTModel"),c(RJ,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),c(BJ,"href","/docs/transformers/pr_16907/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),c(PJ,"href","/docs/transformers/pr_16907/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),c(IJ,"href","/docs/transformers/pr_16907/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),c(Vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(pr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(gE,"id","transformers.FlaxAutoModelForSequenceClassification"),c(gE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(gE,"href","#transformers.FlaxAutoModelForSequenceClassification"),c(Gc,"class","relative group"),c(qJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(NJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(jJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Xt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(DJ,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),c(GJ,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),c(OJ,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),c(VJ,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),c(XJ,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),c(zJ,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),c(QJ,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),c(WJ,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),c(HJ,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),c(UJ,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),c(Xr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(AE,"id","transformers.FlaxAutoModelForQuestionAnswering"),c(AE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(AE,"href","#transformers.FlaxAutoModelForQuestionAnswering"),c(Xc,"class","relative group"),c(JJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(YJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(KJ,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(zt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(ZJ,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),c(eY,"href","/docs/transformers/pr_16907/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),c(oY,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),c(rY,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),c(tY,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),c(aY,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),c(nY,"href","/docs/transformers/pr_16907/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),c(sY,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),c(lY,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),c(iY,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),c(zr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(_r,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(jE,"id","transformers.FlaxAutoModelForTokenClassification"),c(jE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(jE,"href","#transformers.FlaxAutoModelForTokenClassification"),c(Wc,"class","relative group"),c(dY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(cY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(fY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Qt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(mY,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),c(gY,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),c(hY,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),c(pY,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),c(uY,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),c(_Y,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),c(bY,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),c(vY,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),c(Qr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(br,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(JE,"id","transformers.FlaxAutoModelForMultipleChoice"),c(JE,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(JE,"href","#transformers.FlaxAutoModelForMultipleChoice"),c(Jc,"class","relative group"),c(FY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(TY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(MY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Wt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(EY,"href","/docs/transformers/pr_16907/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),c(CY,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),c(wY,"href","/docs/transformers/pr_16907/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),c(AY,"href","/docs/transformers/pr_16907/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),c(yY,"href","/docs/transformers/pr_16907/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),c(LY,"href","/docs/transformers/pr_16907/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),c(xY,"href","/docs/transformers/pr_16907/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),c($Y,"href","/docs/transformers/pr_16907/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),c(Wr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(vr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(l5,"id","transformers.FlaxAutoModelForNextSentencePrediction"),c(l5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(l5,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),c(Zc,"class","relative group"),c(kY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(SY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(RY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ht,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(BY,"href","/docs/transformers/pr_16907/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),c(Hr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Fr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(f5,"id","transformers.FlaxAutoModelForImageClassification"),c(f5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(f5,"href","#transformers.FlaxAutoModelForImageClassification"),c(rf,"class","relative group"),c(PY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(IY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(qY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Ut,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(NY,"href","/docs/transformers/pr_16907/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),c(jY,"href","/docs/transformers/pr_16907/en/model_doc/vit#transformers.FlaxViTForImageClassification"),c(Ur,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Tr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(u5,"id","transformers.FlaxAutoModelForVision2Seq"),c(u5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),c(u5,"href","#transformers.FlaxAutoModelForVision2Seq"),c(nf,"class","relative group"),c(DY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(GY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_config"),c(OY,"href","/docs/transformers/pr_16907/en/model_doc/auto#transformers.FlaxAutoModelForVision2Seq.from_pretrained"),c(Jt,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(VY,"href","/docs/transformers/pr_16907/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),c(Jr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8"),c(Mr,"class","docstring border-l-2 border-t-2 pl-4 pt-3.5 border-gray-100 rounded-tl-xl mb-6 mt-8")},m(f,_){e(document.head,g),b(f,v,_),b(f,p,_),e(p,m),e(m,u),M(d,u,null),e(p,h),e(p,Mo),e(Mo,li),b(f,mf,_),b(f,et,_),e(et,ii),e(et,di),e(di,N3),e(et,gf),b(f,qe,_),b(f,Xe,_),e(Xe,ci),e(Xe,An),e(An,j3),e(Xe,yn),e(Xe,Ln),e(Ln,D3),e(Xe,fi),e(Xe,xn),e(xn,G3),e(Xe,mi),b(f,hf,_),M(Ma,f,_),b(f,ze,_),b(f,Ae,_),e(Ae,n$),e(Ae,gi),e(gi,s$),e(Ae,l$),b(f,Eo,_),b(f,Ea,_),e(Ea,i$),e(Ea,pf),e(pf,d$),e(Ea,bje),b(f,lPe,_),b(f,hi,_),e(hi,uf),e(uf,qZ),M(O3,qZ,null),e(hi,vje),e(hi,NZ),e(NZ,Fje),b(f,iPe,_),b(f,$n,_),e($n,Tje),e($n,jZ),e(jZ,Mje),e($n,Eje),e($n,DZ),e(DZ,Cje),e($n,wje),b(f,dPe,_),M(V3,f,_),b(f,cPe,_),b(f,c$,_),e(c$,Aje),b(f,fPe,_),M(_f,f,_),b(f,mPe,_),b(f,pi,_),e(pi,bf),e(bf,GZ),M(X3,GZ,null),e(pi,yje),e(pi,OZ),e(OZ,Lje),b(f,gPe,_),b(f,Co,_),M(z3,Co,null),e(Co,xje),e(Co,Q3),e(Q3,$je),e(Q3,f$),e(f$,kje),e(Q3,Sje),e(Co,Rje),e(Co,W3),e(W3,Bje),e(W3,VZ),e(VZ,Pje),e(W3,Ije),e(Co,qje),e(Co,Er),M(H3,Er,null),e(Er,Nje),e(Er,XZ),e(XZ,jje),e(Er,Dje),e(Er,ui),e(ui,Gje),e(ui,zZ),e(zZ,Oje),e(ui,Vje),e(ui,QZ),e(QZ,Xje),e(ui,zje),e(Er,Qje),e(Er,y),e(y,vf),e(vf,WZ),e(WZ,Wje),e(vf,Hje),e(vf,m$),e(m$,Uje),e(vf,Jje),e(y,Yje),e(y,Ff),e(Ff,HZ),e(HZ,Kje),e(Ff,Zje),e(Ff,g$),e(g$,eDe),e(Ff,oDe),e(y,rDe),e(y,Tf),e(Tf,UZ),e(UZ,tDe),e(Tf,aDe),e(Tf,h$),e(h$,nDe),e(Tf,sDe),e(y,lDe),e(y,Mf),e(Mf,JZ),e(JZ,iDe),e(Mf,dDe),e(Mf,p$),e(p$,cDe),e(Mf,fDe),e(y,mDe),e(y,Ef),e(Ef,YZ),e(YZ,gDe),e(Ef,hDe),e(Ef,u$),e(u$,pDe),e(Ef,uDe),e(y,_De),e(y,Cf),e(Cf,KZ),e(KZ,bDe),e(Cf,vDe),e(Cf,_$),e(_$,FDe),e(Cf,TDe),e(y,MDe),e(y,wf),e(wf,ZZ),e(ZZ,EDe),e(wf,CDe),e(wf,b$),e(b$,wDe),e(wf,ADe),e(y,yDe),e(y,Af),e(Af,eee),e(eee,LDe),e(Af,xDe),e(Af,v$),e(v$,$De),e(Af,kDe),e(y,SDe),e(y,yf),e(yf,oee),e(oee,RDe),e(yf,BDe),e(yf,F$),e(F$,PDe),e(yf,IDe),e(y,qDe),e(y,Lf),e(Lf,ree),e(ree,NDe),e(Lf,jDe),e(Lf,T$),e(T$,DDe),e(Lf,GDe),e(y,ODe),e(y,xf),e(xf,tee),e(tee,VDe),e(xf,XDe),e(xf,M$),e(M$,zDe),e(xf,QDe),e(y,WDe),e(y,$f),e($f,aee),e(aee,HDe),e($f,UDe),e($f,E$),e(E$,JDe),e($f,YDe),e(y,KDe),e(y,kf),e(kf,nee),e(nee,ZDe),e(kf,eGe),e(kf,C$),e(C$,oGe),e(kf,rGe),e(y,tGe),e(y,Sf),e(Sf,see),e(see,aGe),e(Sf,nGe),e(Sf,w$),e(w$,sGe),e(Sf,lGe),e(y,iGe),e(y,Rf),e(Rf,lee),e(lee,dGe),e(Rf,cGe),e(Rf,A$),e(A$,fGe),e(Rf,mGe),e(y,gGe),e(y,Bf),e(Bf,iee),e(iee,hGe),e(Bf,pGe),e(Bf,y$),e(y$,uGe),e(Bf,_Ge),e(y,bGe),e(y,Pf),e(Pf,dee),e(dee,vGe),e(Pf,FGe),e(Pf,L$),e(L$,TGe),e(Pf,MGe),e(y,EGe),e(y,If),e(If,cee),e(cee,CGe),e(If,wGe),e(If,x$),e(x$,AGe),e(If,yGe),e(y,LGe),e(y,qf),e(qf,fee),e(fee,xGe),e(qf,$Ge),e(qf,$$),e($$,kGe),e(qf,SGe),e(y,RGe),e(y,Nf),e(Nf,mee),e(mee,BGe),e(Nf,PGe),e(Nf,k$),e(k$,IGe),e(Nf,qGe),e(y,NGe),e(y,jf),e(jf,gee),e(gee,jGe),e(jf,DGe),e(jf,S$),e(S$,GGe),e(jf,OGe),e(y,VGe),e(y,Df),e(Df,hee),e(hee,XGe),e(Df,zGe),e(Df,R$),e(R$,QGe),e(Df,WGe),e(y,HGe),e(y,Gf),e(Gf,pee),e(pee,UGe),e(Gf,JGe),e(Gf,B$),e(B$,YGe),e(Gf,KGe),e(y,ZGe),e(y,Of),e(Of,uee),e(uee,eOe),e(Of,oOe),e(Of,P$),e(P$,rOe),e(Of,tOe),e(y,aOe),e(y,Vf),e(Vf,_ee),e(_ee,nOe),e(Vf,sOe),e(Vf,I$),e(I$,lOe),e(Vf,iOe),e(y,dOe),e(y,Xf),e(Xf,bee),e(bee,cOe),e(Xf,fOe),e(Xf,q$),e(q$,mOe),e(Xf,gOe),e(y,hOe),e(y,zf),e(zf,vee),e(vee,pOe),e(zf,uOe),e(zf,N$),e(N$,_Oe),e(zf,bOe),e(y,vOe),e(y,Qf),e(Qf,Fee),e(Fee,FOe),e(Qf,TOe),e(Qf,j$),e(j$,MOe),e(Qf,EOe),e(y,COe),e(y,Wf),e(Wf,Tee),e(Tee,wOe),e(Wf,AOe),e(Wf,D$),e(D$,yOe),e(Wf,LOe),e(y,xOe),e(y,Hf),e(Hf,Mee),e(Mee,$Oe),e(Hf,kOe),e(Hf,G$),e(G$,SOe),e(Hf,ROe),e(y,BOe),e(y,Uf),e(Uf,Eee),e(Eee,POe),e(Uf,IOe),e(Uf,O$),e(O$,qOe),e(Uf,NOe),e(y,jOe),e(y,Jf),e(Jf,Cee),e(Cee,DOe),e(Jf,GOe),e(Jf,V$),e(V$,OOe),e(Jf,VOe),e(y,XOe),e(y,Yf),e(Yf,wee),e(wee,zOe),e(Yf,QOe),e(Yf,X$),e(X$,WOe),e(Yf,HOe),e(y,UOe),e(y,Kf),e(Kf,Aee),e(Aee,JOe),e(Kf,YOe),e(Kf,z$),e(z$,KOe),e(Kf,ZOe),e(y,eVe),e(y,Zf),e(Zf,yee),e(yee,oVe),e(Zf,rVe),e(Zf,Q$),e(Q$,tVe),e(Zf,aVe),e(y,nVe),e(y,em),e(em,Lee),e(Lee,sVe),e(em,lVe),e(em,W$),e(W$,iVe),e(em,dVe),e(y,cVe),e(y,om),e(om,xee),e(xee,fVe),e(om,mVe),e(om,H$),e(H$,gVe),e(om,hVe),e(y,pVe),e(y,rm),e(rm,$ee),e($ee,uVe),e(rm,_Ve),e(rm,U$),e(U$,bVe),e(rm,vVe),e(y,FVe),e(y,tm),e(tm,kee),e(kee,TVe),e(tm,MVe),e(tm,J$),e(J$,EVe),e(tm,CVe),e(y,wVe),e(y,am),e(am,See),e(See,AVe),e(am,yVe),e(am,Y$),e(Y$,LVe),e(am,xVe),e(y,$Ve),e(y,nm),e(nm,Ree),e(Ree,kVe),e(nm,SVe),e(nm,K$),e(K$,RVe),e(nm,BVe),e(y,PVe),e(y,sm),e(sm,Bee),e(Bee,IVe),e(sm,qVe),e(sm,Z$),e(Z$,NVe),e(sm,jVe),e(y,DVe),e(y,lm),e(lm,Pee),e(Pee,GVe),e(lm,OVe),e(lm,ek),e(ek,VVe),e(lm,XVe),e(y,zVe),e(y,im),e(im,Iee),e(Iee,QVe),e(im,WVe),e(im,ok),e(ok,HVe),e(im,UVe),e(y,JVe),e(y,dm),e(dm,qee),e(qee,YVe),e(dm,KVe),e(dm,rk),e(rk,ZVe),e(dm,eXe),e(y,oXe),e(y,cm),e(cm,Nee),e(Nee,rXe),e(cm,tXe),e(cm,tk),e(tk,aXe),e(cm,nXe),e(y,sXe),e(y,fm),e(fm,jee),e(jee,lXe),e(fm,iXe),e(fm,ak),e(ak,dXe),e(fm,cXe),e(y,fXe),e(y,mm),e(mm,Dee),e(Dee,mXe),e(mm,gXe),e(mm,nk),e(nk,hXe),e(mm,pXe),e(y,uXe),e(y,gm),e(gm,Gee),e(Gee,_Xe),e(gm,bXe),e(gm,sk),e(sk,vXe),e(gm,FXe),e(y,TXe),e(y,hm),e(hm,Oee),e(Oee,MXe),e(hm,EXe),e(hm,lk),e(lk,CXe),e(hm,wXe),e(y,AXe),e(y,pm),e(pm,Vee),e(Vee,yXe),e(pm,LXe),e(pm,ik),e(ik,xXe),e(pm,$Xe),e(y,kXe),e(y,um),e(um,Xee),e(Xee,SXe),e(um,RXe),e(um,dk),e(dk,BXe),e(um,PXe),e(y,IXe),e(y,_m),e(_m,zee),e(zee,qXe),e(_m,NXe),e(_m,ck),e(ck,jXe),e(_m,DXe),e(y,GXe),e(y,bm),e(bm,Qee),e(Qee,OXe),e(bm,VXe),e(bm,fk),e(fk,XXe),e(bm,zXe),e(y,QXe),e(y,vm),e(vm,Wee),e(Wee,WXe),e(vm,HXe),e(vm,mk),e(mk,UXe),e(vm,JXe),e(y,YXe),e(y,Fm),e(Fm,Hee),e(Hee,KXe),e(Fm,ZXe),e(Fm,gk),e(gk,eze),e(Fm,oze),e(y,rze),e(y,Tm),e(Tm,Uee),e(Uee,tze),e(Tm,aze),e(Tm,hk),e(hk,nze),e(Tm,sze),e(y,lze),e(y,Mm),e(Mm,Jee),e(Jee,ize),e(Mm,dze),e(Mm,pk),e(pk,cze),e(Mm,fze),e(y,mze),e(y,Em),e(Em,Yee),e(Yee,gze),e(Em,hze),e(Em,uk),e(uk,pze),e(Em,uze),e(y,_ze),e(y,Cm),e(Cm,Kee),e(Kee,bze),e(Cm,vze),e(Cm,_k),e(_k,Fze),e(Cm,Tze),e(y,Mze),e(y,wm),e(wm,Zee),e(Zee,Eze),e(wm,Cze),e(wm,bk),e(bk,wze),e(wm,Aze),e(y,yze),e(y,Am),e(Am,eoe),e(eoe,Lze),e(Am,xze),e(Am,vk),e(vk,$ze),e(Am,kze),e(y,Sze),e(y,ym),e(ym,ooe),e(ooe,Rze),e(ym,Bze),e(ym,Fk),e(Fk,Pze),e(ym,Ize),e(y,qze),e(y,Lm),e(Lm,roe),e(roe,Nze),e(Lm,jze),e(Lm,Tk),e(Tk,Dze),e(Lm,Gze),e(y,Oze),e(y,xm),e(xm,toe),e(toe,Vze),e(xm,Xze),e(xm,Mk),e(Mk,zze),e(xm,Qze),e(y,Wze),e(y,$m),e($m,aoe),e(aoe,Hze),e($m,Uze),e($m,Ek),e(Ek,Jze),e($m,Yze),e(y,Kze),e(y,km),e(km,noe),e(noe,Zze),e(km,eQe),e(km,Ck),e(Ck,oQe),e(km,rQe),e(y,tQe),e(y,Sm),e(Sm,soe),e(soe,aQe),e(Sm,nQe),e(Sm,wk),e(wk,sQe),e(Sm,lQe),e(y,iQe),e(y,Rm),e(Rm,loe),e(loe,dQe),e(Rm,cQe),e(Rm,Ak),e(Ak,fQe),e(Rm,mQe),e(y,gQe),e(y,Bm),e(Bm,ioe),e(ioe,hQe),e(Bm,pQe),e(Bm,yk),e(yk,uQe),e(Bm,_Qe),e(y,bQe),e(y,Pm),e(Pm,doe),e(doe,vQe),e(Pm,FQe),e(Pm,Lk),e(Lk,TQe),e(Pm,MQe),e(y,EQe),e(y,Im),e(Im,coe),e(coe,CQe),e(Im,wQe),e(Im,xk),e(xk,AQe),e(Im,yQe),e(y,LQe),e(y,qm),e(qm,foe),e(foe,xQe),e(qm,$Qe),e(qm,$k),e($k,kQe),e(qm,SQe),e(y,RQe),e(y,Nm),e(Nm,moe),e(moe,BQe),e(Nm,PQe),e(Nm,kk),e(kk,IQe),e(Nm,qQe),e(y,NQe),e(y,jm),e(jm,goe),e(goe,jQe),e(jm,DQe),e(jm,Sk),e(Sk,GQe),e(jm,OQe),e(y,VQe),e(y,Dm),e(Dm,hoe),e(hoe,XQe),e(Dm,zQe),e(Dm,Rk),e(Rk,QQe),e(Dm,WQe),e(y,HQe),e(y,Gm),e(Gm,poe),e(poe,UQe),e(Gm,JQe),e(Gm,Bk),e(Bk,YQe),e(Gm,KQe),e(y,ZQe),e(y,Om),e(Om,uoe),e(uoe,eWe),e(Om,oWe),e(Om,Pk),e(Pk,rWe),e(Om,tWe),e(y,aWe),e(y,Vm),e(Vm,_oe),e(_oe,nWe),e(Vm,sWe),e(Vm,Ik),e(Ik,lWe),e(Vm,iWe),e(y,dWe),e(y,Xm),e(Xm,boe),e(boe,cWe),e(Xm,fWe),e(Xm,qk),e(qk,mWe),e(Xm,gWe),e(y,hWe),e(y,zm),e(zm,voe),e(voe,pWe),e(zm,uWe),e(zm,Nk),e(Nk,_We),e(zm,bWe),e(y,vWe),e(y,Qm),e(Qm,Foe),e(Foe,FWe),e(Qm,TWe),e(Qm,jk),e(jk,MWe),e(Qm,EWe),e(y,CWe),e(y,Wm),e(Wm,Toe),e(Toe,wWe),e(Wm,AWe),e(Wm,Dk),e(Dk,yWe),e(Wm,LWe),e(y,xWe),e(y,Hm),e(Hm,Moe),e(Moe,$We),e(Hm,kWe),e(Hm,Gk),e(Gk,SWe),e(Hm,RWe),e(y,BWe),e(y,Um),e(Um,Eoe),e(Eoe,PWe),e(Um,IWe),e(Um,Ok),e(Ok,qWe),e(Um,NWe),e(y,jWe),e(y,Jm),e(Jm,Coe),e(Coe,DWe),e(Jm,GWe),e(Jm,Vk),e(Vk,OWe),e(Jm,VWe),e(y,XWe),e(y,Ym),e(Ym,woe),e(woe,zWe),e(Ym,QWe),e(Ym,Xk),e(Xk,WWe),e(Ym,HWe),e(y,UWe),e(y,Km),e(Km,Aoe),e(Aoe,JWe),e(Km,YWe),e(Km,zk),e(zk,KWe),e(Km,ZWe),e(y,eHe),e(y,Zm),e(Zm,yoe),e(yoe,oHe),e(Zm,rHe),e(Zm,Qk),e(Qk,tHe),e(Zm,aHe),e(y,nHe),e(y,eg),e(eg,Loe),e(Loe,sHe),e(eg,lHe),e(eg,Wk),e(Wk,iHe),e(eg,dHe),e(y,cHe),e(y,og),e(og,xoe),e(xoe,fHe),e(og,mHe),e(og,Hk),e(Hk,gHe),e(og,hHe),e(y,pHe),e(y,rg),e(rg,$oe),e($oe,uHe),e(rg,_He),e(rg,Uk),e(Uk,bHe),e(rg,vHe),e(y,FHe),e(y,tg),e(tg,koe),e(koe,THe),e(tg,MHe),e(tg,Jk),e(Jk,EHe),e(tg,CHe),e(y,wHe),e(y,ag),e(ag,Soe),e(Soe,AHe),e(ag,yHe),e(ag,Yk),e(Yk,LHe),e(ag,xHe),e(y,$He),e(y,ng),e(ng,Roe),e(Roe,kHe),e(ng,SHe),e(ng,Kk),e(Kk,RHe),e(ng,BHe),e(y,PHe),e(y,sg),e(sg,Boe),e(Boe,IHe),e(sg,qHe),e(sg,Zk),e(Zk,NHe),e(sg,jHe),e(y,DHe),e(y,lg),e(lg,Poe),e(Poe,GHe),e(lg,OHe),e(lg,eS),e(eS,VHe),e(lg,XHe),e(y,zHe),e(y,ig),e(ig,Ioe),e(Ioe,QHe),e(ig,WHe),e(ig,oS),e(oS,HHe),e(ig,UHe),e(y,JHe),e(y,dg),e(dg,qoe),e(qoe,YHe),e(dg,KHe),e(dg,rS),e(rS,ZHe),e(dg,eUe),e(y,oUe),e(y,cg),e(cg,Noe),e(Noe,rUe),e(cg,tUe),e(cg,tS),e(tS,aUe),e(cg,nUe),e(y,sUe),e(y,fg),e(fg,joe),e(joe,lUe),e(fg,iUe),e(fg,aS),e(aS,dUe),e(fg,cUe),e(y,fUe),e(y,mg),e(mg,Doe),e(Doe,mUe),e(mg,gUe),e(mg,nS),e(nS,hUe),e(mg,pUe),e(y,uUe),e(y,gg),e(gg,Goe),e(Goe,_Ue),e(gg,bUe),e(gg,sS),e(sS,vUe),e(gg,FUe),e(Er,TUe),M(hg,Er,null),e(Co,MUe),e(Co,pg),M(U3,pg,null),e(pg,EUe),e(pg,Ooe),e(Ooe,CUe),b(f,hPe,_),b(f,_i,_),e(_i,ug),e(ug,Voe),M(J3,Voe,null),e(_i,wUe),e(_i,Xoe),e(Xoe,AUe),b(f,pPe,_),b(f,wo,_),M(Y3,wo,null),e(wo,yUe),e(wo,K3),e(K3,LUe),e(K3,lS),e(lS,xUe),e(K3,$Ue),e(wo,kUe),e(wo,Z3),e(Z3,SUe),e(Z3,zoe),e(zoe,RUe),e(Z3,BUe),e(wo,PUe),e(wo,Cr),M(ew,Cr,null),e(Cr,IUe),e(Cr,Qoe),e(Qoe,qUe),e(Cr,NUe),e(Cr,Ca),e(Ca,jUe),e(Ca,Woe),e(Woe,DUe),e(Ca,GUe),e(Ca,Hoe),e(Hoe,OUe),e(Ca,VUe),e(Ca,Uoe),e(Uoe,XUe),e(Ca,zUe),e(Cr,QUe),e(Cr,k),e(k,kn),e(kn,Joe),e(Joe,WUe),e(kn,HUe),e(kn,iS),e(iS,UUe),e(kn,JUe),e(kn,dS),e(dS,YUe),e(kn,KUe),e(k,ZUe),e(k,Sn),e(Sn,Yoe),e(Yoe,eJe),e(Sn,oJe),e(Sn,cS),e(cS,rJe),e(Sn,tJe),e(Sn,fS),e(fS,aJe),e(Sn,nJe),e(k,sJe),e(k,Rn),e(Rn,Koe),e(Koe,lJe),e(Rn,iJe),e(Rn,mS),e(mS,dJe),e(Rn,cJe),e(Rn,gS),e(gS,fJe),e(Rn,mJe),e(k,gJe),e(k,_g),e(_g,Zoe),e(Zoe,hJe),e(_g,pJe),e(_g,hS),e(hS,uJe),e(_g,_Je),e(k,bJe),e(k,Bn),e(Bn,ere),e(ere,vJe),e(Bn,FJe),e(Bn,pS),e(pS,TJe),e(Bn,MJe),e(Bn,uS),e(uS,EJe),e(Bn,CJe),e(k,wJe),e(k,bg),e(bg,ore),e(ore,AJe),e(bg,yJe),e(bg,_S),e(_S,LJe),e(bg,xJe),e(k,$Je),e(k,vg),e(vg,rre),e(rre,kJe),e(vg,SJe),e(vg,bS),e(bS,RJe),e(vg,BJe),e(k,PJe),e(k,Fg),e(Fg,tre),e(tre,IJe),e(Fg,qJe),e(Fg,vS),e(vS,NJe),e(Fg,jJe),e(k,DJe),e(k,Pn),e(Pn,are),e(are,GJe),e(Pn,OJe),e(Pn,FS),e(FS,VJe),e(Pn,XJe),e(Pn,TS),e(TS,zJe),e(Pn,QJe),e(k,WJe),e(k,In),e(In,nre),e(nre,HJe),e(In,UJe),e(In,MS),e(MS,JJe),e(In,YJe),e(In,ES),e(ES,KJe),e(In,ZJe),e(k,eYe),e(k,qn),e(qn,sre),e(sre,oYe),e(qn,rYe),e(qn,CS),e(CS,tYe),e(qn,aYe),e(qn,wS),e(wS,nYe),e(qn,sYe),e(k,lYe),e(k,Tg),e(Tg,lre),e(lre,iYe),e(Tg,dYe),e(Tg,AS),e(AS,cYe),e(Tg,fYe),e(k,mYe),e(k,Mg),e(Mg,ire),e(ire,gYe),e(Mg,hYe),e(Mg,yS),e(yS,pYe),e(Mg,uYe),e(k,_Ye),e(k,Nn),e(Nn,dre),e(dre,bYe),e(Nn,vYe),e(Nn,LS),e(LS,FYe),e(Nn,TYe),e(Nn,xS),e(xS,MYe),e(Nn,EYe),e(k,CYe),e(k,Eg),e(Eg,cre),e(cre,wYe),e(Eg,AYe),e(Eg,$S),e($S,yYe),e(Eg,LYe),e(k,xYe),e(k,jn),e(jn,fre),e(fre,$Ye),e(jn,kYe),e(jn,kS),e(kS,SYe),e(jn,RYe),e(jn,SS),e(SS,BYe),e(jn,PYe),e(k,IYe),e(k,Dn),e(Dn,mre),e(mre,qYe),e(Dn,NYe),e(Dn,RS),e(RS,jYe),e(Dn,DYe),e(Dn,BS),e(BS,GYe),e(Dn,OYe),e(k,VYe),e(k,Gn),e(Gn,gre),e(gre,XYe),e(Gn,zYe),e(Gn,PS),e(PS,QYe),e(Gn,WYe),e(Gn,IS),e(IS,HYe),e(Gn,UYe),e(k,JYe),e(k,Cg),e(Cg,hre),e(hre,YYe),e(Cg,KYe),e(Cg,qS),e(qS,ZYe),e(Cg,eKe),e(k,oKe),e(k,On),e(On,pre),e(pre,rKe),e(On,tKe),e(On,NS),e(NS,aKe),e(On,nKe),e(On,jS),e(jS,sKe),e(On,lKe),e(k,iKe),e(k,Vn),e(Vn,ure),e(ure,dKe),e(Vn,cKe),e(Vn,DS),e(DS,fKe),e(Vn,mKe),e(Vn,GS),e(GS,gKe),e(Vn,hKe),e(k,pKe),e(k,Xn),e(Xn,_re),e(_re,uKe),e(Xn,_Ke),e(Xn,OS),e(OS,bKe),e(Xn,vKe),e(Xn,VS),e(VS,FKe),e(Xn,TKe),e(k,MKe),e(k,zn),e(zn,bre),e(bre,EKe),e(zn,CKe),e(zn,XS),e(XS,wKe),e(zn,AKe),e(zn,zS),e(zS,yKe),e(zn,LKe),e(k,xKe),e(k,Qn),e(Qn,vre),e(vre,$Ke),e(Qn,kKe),e(Qn,QS),e(QS,SKe),e(Qn,RKe),e(Qn,WS),e(WS,BKe),e(Qn,PKe),e(k,IKe),e(k,Wn),e(Wn,Fre),e(Fre,qKe),e(Wn,NKe),e(Wn,HS),e(HS,jKe),e(Wn,DKe),e(Wn,US),e(US,GKe),e(Wn,OKe),e(k,VKe),e(k,wg),e(wg,Tre),e(Tre,XKe),e(wg,zKe),e(wg,JS),e(JS,QKe),e(wg,WKe),e(k,HKe),e(k,Hn),e(Hn,Mre),e(Mre,UKe),e(Hn,JKe),e(Hn,YS),e(YS,YKe),e(Hn,KKe),e(Hn,KS),e(KS,ZKe),e(Hn,eZe),e(k,oZe),e(k,Ag),e(Ag,Ere),e(Ere,rZe),e(Ag,tZe),e(Ag,ZS),e(ZS,aZe),e(Ag,nZe),e(k,sZe),e(k,Un),e(Un,Cre),e(Cre,lZe),e(Un,iZe),e(Un,eR),e(eR,dZe),e(Un,cZe),e(Un,oR),e(oR,fZe),e(Un,mZe),e(k,gZe),e(k,Jn),e(Jn,wre),e(wre,hZe),e(Jn,pZe),e(Jn,rR),e(rR,uZe),e(Jn,_Ze),e(Jn,tR),e(tR,bZe),e(Jn,vZe),e(k,FZe),e(k,Yn),e(Yn,Are),e(Are,TZe),e(Yn,MZe),e(Yn,aR),e(aR,EZe),e(Yn,CZe),e(Yn,nR),e(nR,wZe),e(Yn,AZe),e(k,yZe),e(k,Kn),e(Kn,yre),e(yre,LZe),e(Kn,xZe),e(Kn,sR),e(sR,$Ze),e(Kn,kZe),e(Kn,lR),e(lR,SZe),e(Kn,RZe),e(k,BZe),e(k,Zn),e(Zn,Lre),e(Lre,PZe),e(Zn,IZe),e(Zn,iR),e(iR,qZe),e(Zn,NZe),e(Zn,dR),e(dR,jZe),e(Zn,DZe),e(k,GZe),e(k,yg),e(yg,xre),e(xre,OZe),e(yg,VZe),e(yg,cR),e(cR,XZe),e(yg,zZe),e(k,QZe),e(k,es),e(es,$re),e($re,WZe),e(es,HZe),e(es,fR),e(fR,UZe),e(es,JZe),e(es,mR),e(mR,YZe),e(es,KZe),e(k,ZZe),e(k,os),e(os,kre),e(kre,eeo),e(os,oeo),e(os,gR),e(gR,reo),e(os,teo),e(os,hR),e(hR,aeo),e(os,neo),e(k,seo),e(k,rs),e(rs,Sre),e(Sre,leo),e(rs,ieo),e(rs,pR),e(pR,deo),e(rs,ceo),e(rs,uR),e(uR,feo),e(rs,meo),e(k,geo),e(k,ts),e(ts,Rre),e(Rre,heo),e(ts,peo),e(ts,_R),e(_R,ueo),e(ts,_eo),e(ts,bR),e(bR,beo),e(ts,veo),e(k,Feo),e(k,as),e(as,Bre),e(Bre,Teo),e(as,Meo),e(as,vR),e(vR,Eeo),e(as,Ceo),e(as,FR),e(FR,weo),e(as,Aeo),e(k,yeo),e(k,ns),e(ns,Pre),e(Pre,Leo),e(ns,xeo),e(ns,TR),e(TR,$eo),e(ns,keo),e(ns,MR),e(MR,Seo),e(ns,Reo),e(k,Beo),e(k,Lg),e(Lg,Ire),e(Ire,Peo),e(Lg,Ieo),e(Lg,ER),e(ER,qeo),e(Lg,Neo),e(k,jeo),e(k,ss),e(ss,qre),e(qre,Deo),e(ss,Geo),e(ss,CR),e(CR,Oeo),e(ss,Veo),e(ss,wR),e(wR,Xeo),e(ss,zeo),e(k,Qeo),e(k,xg),e(xg,Nre),e(Nre,Weo),e(xg,Heo),e(xg,AR),e(AR,Ueo),e(xg,Jeo),e(k,Yeo),e(k,$g),e($g,jre),e(jre,Keo),e($g,Zeo),e($g,yR),e(yR,eoo),e($g,ooo),e(k,roo),e(k,ls),e(ls,Dre),e(Dre,too),e(ls,aoo),e(ls,LR),e(LR,noo),e(ls,soo),e(ls,xR),e(xR,loo),e(ls,ioo),e(k,doo),e(k,is),e(is,Gre),e(Gre,coo),e(is,foo),e(is,$R),e($R,moo),e(is,goo),e(is,kR),e(kR,hoo),e(is,poo),e(k,uoo),e(k,ds),e(ds,Ore),e(Ore,_oo),e(ds,boo),e(ds,SR),e(SR,voo),e(ds,Foo),e(ds,RR),e(RR,Too),e(ds,Moo),e(k,Eoo),e(k,kg),e(kg,Vre),e(Vre,Coo),e(kg,woo),e(kg,BR),e(BR,Aoo),e(kg,yoo),e(k,Loo),e(k,cs),e(cs,Xre),e(Xre,xoo),e(cs,$oo),e(cs,PR),e(PR,koo),e(cs,Soo),e(cs,IR),e(IR,Roo),e(cs,Boo),e(k,Poo),e(k,fs),e(fs,zre),e(zre,Ioo),e(fs,qoo),e(fs,qR),e(qR,Noo),e(fs,joo),e(fs,NR),e(NR,Doo),e(fs,Goo),e(k,Ooo),e(k,ms),e(ms,Qre),e(Qre,Voo),e(ms,Xoo),e(ms,jR),e(jR,zoo),e(ms,Qoo),e(ms,DR),e(DR,Woo),e(ms,Hoo),e(k,Uoo),e(k,gs),e(gs,Wre),e(Wre,Joo),e(gs,Yoo),e(gs,GR),e(GR,Koo),e(gs,Zoo),e(gs,OR),e(OR,ero),e(gs,oro),e(k,rro),e(k,hs),e(hs,Hre),e(Hre,tro),e(hs,aro),e(hs,VR),e(VR,nro),e(hs,sro),e(hs,XR),e(XR,lro),e(hs,iro),e(k,dro),e(k,ps),e(ps,Ure),e(Ure,cro),e(ps,fro),e(ps,zR),e(zR,mro),e(ps,gro),e(ps,QR),e(QR,hro),e(ps,pro),e(k,uro),e(k,Sg),e(Sg,Jre),e(Jre,_ro),e(Sg,bro),e(Sg,WR),e(WR,vro),e(Sg,Fro),e(k,Tro),e(k,Rg),e(Rg,Yre),e(Yre,Mro),e(Rg,Ero),e(Rg,HR),e(HR,Cro),e(Rg,wro),e(k,Aro),e(k,Bg),e(Bg,Kre),e(Kre,yro),e(Bg,Lro),e(Bg,UR),e(UR,xro),e(Bg,$ro),e(k,kro),e(k,Pg),e(Pg,Zre),e(Zre,Sro),e(Pg,Rro),e(Pg,JR),e(JR,Bro),e(Pg,Pro),e(k,Iro),e(k,us),e(us,ete),e(ete,qro),e(us,Nro),e(us,YR),e(YR,jro),e(us,Dro),e(us,KR),e(KR,Gro),e(us,Oro),e(k,Vro),e(k,Ig),e(Ig,ote),e(ote,Xro),e(Ig,zro),e(Ig,ZR),e(ZR,Qro),e(Ig,Wro),e(k,Hro),e(k,_s),e(_s,rte),e(rte,Uro),e(_s,Jro),e(_s,eB),e(eB,Yro),e(_s,Kro),e(_s,oB),e(oB,Zro),e(_s,eto),e(k,oto),e(k,bs),e(bs,tte),e(tte,rto),e(bs,tto),e(bs,rB),e(rB,ato),e(bs,nto),e(bs,tB),e(tB,sto),e(bs,lto),e(k,ito),e(k,vs),e(vs,ate),e(ate,dto),e(vs,cto),e(vs,aB),e(aB,fto),e(vs,mto),e(vs,nB),e(nB,gto),e(vs,hto),e(k,pto),e(k,Fs),e(Fs,nte),e(nte,uto),e(Fs,_to),e(Fs,sB),e(sB,bto),e(Fs,vto),e(Fs,lB),e(lB,Fto),e(Fs,Tto),e(k,Mto),e(k,Ts),e(Ts,ste),e(ste,Eto),e(Ts,Cto),e(Ts,iB),e(iB,wto),e(Ts,Ato),e(Ts,dB),e(dB,yto),e(Ts,Lto),e(k,xto),e(k,Ms),e(Ms,lte),e(lte,$to),e(Ms,kto),e(Ms,cB),e(cB,Sto),e(Ms,Rto),e(Ms,fB),e(fB,Bto),e(Ms,Pto),e(k,Ito),e(k,qg),e(qg,ite),e(ite,qto),e(qg,Nto),e(qg,mB),e(mB,jto),e(qg,Dto),e(k,Gto),e(k,Ng),e(Ng,dte),e(dte,Oto),e(Ng,Vto),e(Ng,gB),e(gB,Xto),e(Ng,zto),e(k,Qto),e(k,Es),e(Es,cte),e(cte,Wto),e(Es,Hto),e(Es,hB),e(hB,Uto),e(Es,Jto),e(Es,pB),e(pB,Yto),e(Es,Kto),e(k,Zto),e(k,Cs),e(Cs,fte),e(fte,eao),e(Cs,oao),e(Cs,uB),e(uB,rao),e(Cs,tao),e(Cs,_B),e(_B,aao),e(Cs,nao),e(k,sao),e(k,ws),e(ws,mte),e(mte,lao),e(ws,iao),e(ws,bB),e(bB,dao),e(ws,cao),e(ws,vB),e(vB,fao),e(ws,mao),e(k,gao),e(k,jg),e(jg,gte),e(gte,hao),e(jg,pao),e(jg,FB),e(FB,uao),e(jg,_ao),e(k,bao),e(k,Dg),e(Dg,hte),e(hte,vao),e(Dg,Fao),e(Dg,TB),e(TB,Tao),e(Dg,Mao),e(k,Eao),e(k,Gg),e(Gg,pte),e(pte,Cao),e(Gg,wao),e(Gg,MB),e(MB,Aao),e(Gg,yao),e(k,Lao),e(k,As),e(As,ute),e(ute,xao),e(As,$ao),e(As,EB),e(EB,kao),e(As,Sao),e(As,CB),e(CB,Rao),e(As,Bao),e(k,Pao),e(k,Og),e(Og,_te),e(_te,Iao),e(Og,qao),e(Og,wB),e(wB,Nao),e(Og,jao),e(k,Dao),e(k,Vg),e(Vg,bte),e(bte,Gao),e(Vg,Oao),e(Vg,AB),e(AB,Vao),e(Vg,Xao),e(k,zao),e(k,ys),e(ys,vte),e(vte,Qao),e(ys,Wao),e(ys,yB),e(yB,Hao),e(ys,Uao),e(ys,LB),e(LB,Jao),e(ys,Yao),e(k,Kao),e(k,Xg),e(Xg,Fte),e(Fte,Zao),e(Xg,eno),e(Xg,xB),e(xB,ono),e(Xg,rno),e(k,tno),e(k,zg),e(zg,Tte),e(Tte,ano),e(zg,nno),e(zg,$B),e($B,sno),e(zg,lno),e(k,ino),e(k,Ls),e(Ls,Mte),e(Mte,dno),e(Ls,cno),e(Ls,kB),e(kB,fno),e(Ls,mno),e(Ls,SB),e(SB,gno),e(Ls,hno),e(k,pno),e(k,xs),e(xs,Ete),e(Ete,uno),e(xs,_no),e(xs,RB),e(RB,bno),e(xs,vno),e(xs,BB),e(BB,Fno),e(xs,Tno),e(k,Mno),e(k,$s),e($s,Cte),e(Cte,Eno),e($s,Cno),e($s,PB),e(PB,wno),e($s,Ano),e($s,IB),e(IB,yno),e($s,Lno),e(k,xno),e(k,ks),e(ks,wte),e(wte,$no),e(ks,kno),e(ks,qB),e(qB,Sno),e(ks,Rno),e(ks,NB),e(NB,Bno),e(ks,Pno),e(Cr,Ino),M(Qg,Cr,null),e(wo,qno),e(wo,Wg),M(ow,Wg,null),e(Wg,Nno),e(Wg,Ate),e(Ate,jno),b(f,uPe,_),b(f,bi,_),e(bi,Hg),e(Hg,yte),M(rw,yte,null),e(bi,Dno),e(bi,Lte),e(Lte,Gno),b(f,_Pe,_),b(f,Ao,_),M(tw,Ao,null),e(Ao,Ono),e(Ao,aw),e(aw,Vno),e(aw,jB),e(jB,Xno),e(aw,zno),e(Ao,Qno),e(Ao,nw),e(nw,Wno),e(nw,xte),e(xte,Hno),e(nw,Uno),e(Ao,Jno),e(Ao,Qe),M(sw,Qe,null),e(Qe,Yno),e(Qe,$te),e($te,Kno),e(Qe,Zno),e(Qe,wa),e(wa,eso),e(wa,kte),e(kte,oso),e(wa,rso),e(wa,Ste),e(Ste,tso),e(wa,aso),e(wa,Rte),e(Rte,nso),e(wa,sso),e(Qe,lso),e(Qe,te),e(te,Ug),e(Ug,Bte),e(Bte,iso),e(Ug,dso),e(Ug,DB),e(DB,cso),e(Ug,fso),e(te,mso),e(te,Jg),e(Jg,Pte),e(Pte,gso),e(Jg,hso),e(Jg,GB),e(GB,pso),e(Jg,uso),e(te,_so),e(te,Yg),e(Yg,Ite),e(Ite,bso),e(Yg,vso),e(Yg,OB),e(OB,Fso),e(Yg,Tso),e(te,Mso),e(te,Kg),e(Kg,qte),e(qte,Eso),e(Kg,Cso),e(Kg,VB),e(VB,wso),e(Kg,Aso),e(te,yso),e(te,Zg),e(Zg,Nte),e(Nte,Lso),e(Zg,xso),e(Zg,XB),e(XB,$so),e(Zg,kso),e(te,Sso),e(te,eh),e(eh,jte),e(jte,Rso),e(eh,Bso),e(eh,zB),e(zB,Pso),e(eh,Iso),e(te,qso),e(te,oh),e(oh,Dte),e(Dte,Nso),e(oh,jso),e(oh,QB),e(QB,Dso),e(oh,Gso),e(te,Oso),e(te,rh),e(rh,Gte),e(Gte,Vso),e(rh,Xso),e(rh,WB),e(WB,zso),e(rh,Qso),e(te,Wso),e(te,th),e(th,Ote),e(Ote,Hso),e(th,Uso),e(th,HB),e(HB,Jso),e(th,Yso),e(te,Kso),e(te,ah),e(ah,Vte),e(Vte,Zso),e(ah,elo),e(ah,UB),e(UB,olo),e(ah,rlo),e(te,tlo),e(te,nh),e(nh,Xte),e(Xte,alo),e(nh,nlo),e(nh,JB),e(JB,slo),e(nh,llo),e(te,ilo),e(te,sh),e(sh,zte),e(zte,dlo),e(sh,clo),e(sh,YB),e(YB,flo),e(sh,mlo),e(te,glo),e(te,lh),e(lh,Qte),e(Qte,hlo),e(lh,plo),e(lh,KB),e(KB,ulo),e(lh,_lo),e(te,blo),e(te,ih),e(ih,Wte),e(Wte,vlo),e(ih,Flo),e(ih,ZB),e(ZB,Tlo),e(ih,Mlo),e(te,Elo),e(te,dh),e(dh,Hte),e(Hte,Clo),e(dh,wlo),e(dh,eP),e(eP,Alo),e(dh,ylo),e(te,Llo),e(te,ch),e(ch,Ute),e(Ute,xlo),e(ch,$lo),e(ch,oP),e(oP,klo),e(ch,Slo),e(te,Rlo),e(te,fh),e(fh,Jte),e(Jte,Blo),e(fh,Plo),e(fh,rP),e(rP,Ilo),e(fh,qlo),e(te,Nlo),e(te,mh),e(mh,Yte),e(Yte,jlo),e(mh,Dlo),e(mh,tP),e(tP,Glo),e(mh,Olo),e(te,Vlo),e(te,gh),e(gh,Kte),e(Kte,Xlo),e(gh,zlo),e(gh,aP),e(aP,Qlo),e(gh,Wlo),e(te,Hlo),e(te,hh),e(hh,Zte),e(Zte,Ulo),e(hh,Jlo),e(hh,nP),e(nP,Ylo),e(hh,Klo),e(te,Zlo),e(te,ph),e(ph,eae),e(eae,eio),e(ph,oio),e(ph,sP),e(sP,rio),e(ph,tio),e(te,aio),e(te,uh),e(uh,oae),e(oae,nio),e(uh,sio),e(uh,lP),e(lP,lio),e(uh,iio),e(te,dio),e(te,_h),e(_h,rae),e(rae,cio),e(_h,fio),e(_h,iP),e(iP,mio),e(_h,gio),e(te,hio),e(te,bh),e(bh,tae),e(tae,pio),e(bh,uio),e(bh,dP),e(dP,_io),e(bh,bio),e(Qe,vio),M(vh,Qe,null),e(Qe,Fio),M(Fh,Qe,null),e(Ao,Tio),e(Ao,Th),M(lw,Th,null),e(Th,Mio),e(Th,aae),e(aae,Eio),b(f,bPe,_),b(f,vi,_),e(vi,Mh),e(Mh,nae),M(iw,nae,null),e(vi,Cio),e(vi,sae),e(sae,wio),b(f,vPe,_),b(f,yo,_),M(dw,yo,null),e(yo,Aio),e(yo,cw),e(cw,yio),e(cw,cP),e(cP,Lio),e(cw,xio),e(yo,$io),e(yo,fw),e(fw,kio),e(fw,lae),e(lae,Sio),e(fw,Rio),e(yo,Bio),e(yo,We),M(mw,We,null),e(We,Pio),e(We,iae),e(iae,Iio),e(We,qio),e(We,Fi),e(Fi,Nio),e(Fi,dae),e(dae,jio),e(Fi,Dio),e(Fi,cae),e(cae,Gio),e(Fi,Oio),e(We,Vio),e(We,be),e(be,Eh),e(Eh,fae),e(fae,Xio),e(Eh,zio),e(Eh,fP),e(fP,Qio),e(Eh,Wio),e(be,Hio),e(be,Ch),e(Ch,mae),e(mae,Uio),e(Ch,Jio),e(Ch,mP),e(mP,Yio),e(Ch,Kio),e(be,Zio),e(be,wh),e(wh,gae),e(gae,edo),e(wh,odo),e(wh,gP),e(gP,rdo),e(wh,tdo),e(be,ado),e(be,Ah),e(Ah,hae),e(hae,ndo),e(Ah,sdo),e(Ah,hP),e(hP,ldo),e(Ah,ido),e(be,ddo),e(be,yh),e(yh,pae),e(pae,cdo),e(yh,fdo),e(yh,pP),e(pP,mdo),e(yh,gdo),e(be,hdo),e(be,Lh),e(Lh,uae),e(uae,pdo),e(Lh,udo),e(Lh,uP),e(uP,_do),e(Lh,bdo),e(be,vdo),e(be,xh),e(xh,_ae),e(_ae,Fdo),e(xh,Tdo),e(xh,_P),e(_P,Mdo),e(xh,Edo),e(be,Cdo),e(be,$h),e($h,bae),e(bae,wdo),e($h,Ado),e($h,bP),e(bP,ydo),e($h,Ldo),e(be,xdo),e(be,kh),e(kh,vae),e(vae,$do),e(kh,kdo),e(kh,vP),e(vP,Sdo),e(kh,Rdo),e(be,Bdo),e(be,Sh),e(Sh,Fae),e(Fae,Pdo),e(Sh,Ido),e(Sh,FP),e(FP,qdo),e(Sh,Ndo),e(be,jdo),e(be,Rh),e(Rh,Tae),e(Tae,Ddo),e(Rh,Gdo),e(Rh,TP),e(TP,Odo),e(Rh,Vdo),e(be,Xdo),e(be,Bh),e(Bh,Mae),e(Mae,zdo),e(Bh,Qdo),e(Bh,MP),e(MP,Wdo),e(Bh,Hdo),e(be,Udo),e(be,Ph),e(Ph,Eae),e(Eae,Jdo),e(Ph,Ydo),e(Ph,EP),e(EP,Kdo),e(Ph,Zdo),e(be,eco),e(be,Ih),e(Ih,Cae),e(Cae,oco),e(Ih,rco),e(Ih,CP),e(CP,tco),e(Ih,aco),e(We,nco),M(qh,We,null),e(We,sco),M(Nh,We,null),e(yo,lco),e(yo,jh),M(gw,jh,null),e(jh,ico),e(jh,wae),e(wae,dco),b(f,FPe,_),b(f,Ti,_),e(Ti,Dh),e(Dh,Aae),M(hw,Aae,null),e(Ti,cco),e(Ti,yae),e(yae,fco),b(f,TPe,_),b(f,Lo,_),M(pw,Lo,null),e(Lo,mco),e(Lo,Mi),e(Mi,gco),e(Mi,wP),e(wP,hco),e(Mi,pco),e(Mi,AP),e(AP,uco),e(Mi,_co),e(Lo,bco),e(Lo,uw),e(uw,vco),e(uw,Lae),e(Lae,Fco),e(uw,Tco),e(Lo,Mco),e(Lo,ot),M(_w,ot,null),e(ot,Eco),e(ot,xae),e(xae,Cco),e(ot,wco),e(ot,Ei),e(Ei,Aco),e(Ei,$ae),e($ae,yco),e(Ei,Lco),e(Ei,yP),e(yP,xco),e(Ei,$co),e(ot,kco),M(Gh,ot,null),e(Lo,Sco),e(Lo,He),M(bw,He,null),e(He,Rco),e(He,kae),e(kae,Bco),e(He,Pco),e(He,Aa),e(Aa,Ico),e(Aa,Sae),e(Sae,qco),e(Aa,Nco),e(Aa,Rae),e(Rae,jco),e(Aa,Dco),e(Aa,Bae),e(Bae,Gco),e(Aa,Oco),e(He,Vco),e(He,x),e(x,Oh),e(Oh,Pae),e(Pae,Xco),e(Oh,zco),e(Oh,LP),e(LP,Qco),e(Oh,Wco),e(x,Hco),e(x,Vh),e(Vh,Iae),e(Iae,Uco),e(Vh,Jco),e(Vh,xP),e(xP,Yco),e(Vh,Kco),e(x,Zco),e(x,Xh),e(Xh,qae),e(qae,efo),e(Xh,ofo),e(Xh,$P),e($P,rfo),e(Xh,tfo),e(x,afo),e(x,zh),e(zh,Nae),e(Nae,nfo),e(zh,sfo),e(zh,kP),e(kP,lfo),e(zh,ifo),e(x,dfo),e(x,Qh),e(Qh,jae),e(jae,cfo),e(Qh,ffo),e(Qh,SP),e(SP,mfo),e(Qh,gfo),e(x,hfo),e(x,Wh),e(Wh,Dae),e(Dae,pfo),e(Wh,ufo),e(Wh,RP),e(RP,_fo),e(Wh,bfo),e(x,vfo),e(x,Hh),e(Hh,Gae),e(Gae,Ffo),e(Hh,Tfo),e(Hh,BP),e(BP,Mfo),e(Hh,Efo),e(x,Cfo),e(x,Uh),e(Uh,Oae),e(Oae,wfo),e(Uh,Afo),e(Uh,PP),e(PP,yfo),e(Uh,Lfo),e(x,xfo),e(x,Jh),e(Jh,Vae),e(Vae,$fo),e(Jh,kfo),e(Jh,IP),e(IP,Sfo),e(Jh,Rfo),e(x,Bfo),e(x,Yh),e(Yh,Xae),e(Xae,Pfo),e(Yh,Ifo),e(Yh,qP),e(qP,qfo),e(Yh,Nfo),e(x,jfo),e(x,Kh),e(Kh,zae),e(zae,Dfo),e(Kh,Gfo),e(Kh,NP),e(NP,Ofo),e(Kh,Vfo),e(x,Xfo),e(x,Zh),e(Zh,Qae),e(Qae,zfo),e(Zh,Qfo),e(Zh,jP),e(jP,Wfo),e(Zh,Hfo),e(x,Ufo),e(x,ep),e(ep,Wae),e(Wae,Jfo),e(ep,Yfo),e(ep,DP),e(DP,Kfo),e(ep,Zfo),e(x,emo),e(x,op),e(op,Hae),e(Hae,omo),e(op,rmo),e(op,GP),e(GP,tmo),e(op,amo),e(x,nmo),e(x,rp),e(rp,Uae),e(Uae,smo),e(rp,lmo),e(rp,OP),e(OP,imo),e(rp,dmo),e(x,cmo),e(x,tp),e(tp,Jae),e(Jae,fmo),e(tp,mmo),e(tp,VP),e(VP,gmo),e(tp,hmo),e(x,pmo),e(x,ap),e(ap,Yae),e(Yae,umo),e(ap,_mo),e(ap,XP),e(XP,bmo),e(ap,vmo),e(x,Fmo),e(x,np),e(np,Kae),e(Kae,Tmo),e(np,Mmo),e(np,zP),e(zP,Emo),e(np,Cmo),e(x,wmo),e(x,sp),e(sp,Zae),e(Zae,Amo),e(sp,ymo),e(sp,QP),e(QP,Lmo),e(sp,xmo),e(x,$mo),e(x,lp),e(lp,ene),e(ene,kmo),e(lp,Smo),e(lp,WP),e(WP,Rmo),e(lp,Bmo),e(x,Pmo),e(x,ip),e(ip,one),e(one,Imo),e(ip,qmo),e(ip,HP),e(HP,Nmo),e(ip,jmo),e(x,Dmo),e(x,dp),e(dp,rne),e(rne,Gmo),e(dp,Omo),e(dp,UP),e(UP,Vmo),e(dp,Xmo),e(x,zmo),e(x,cp),e(cp,tne),e(tne,Qmo),e(cp,Wmo),e(cp,JP),e(JP,Hmo),e(cp,Umo),e(x,Jmo),e(x,fp),e(fp,ane),e(ane,Ymo),e(fp,Kmo),e(fp,YP),e(YP,Zmo),e(fp,ego),e(x,ogo),e(x,mp),e(mp,nne),e(nne,rgo),e(mp,tgo),e(mp,KP),e(KP,ago),e(mp,ngo),e(x,sgo),e(x,gp),e(gp,sne),e(sne,lgo),e(gp,igo),e(gp,ZP),e(ZP,dgo),e(gp,cgo),e(x,fgo),e(x,hp),e(hp,lne),e(lne,mgo),e(hp,ggo),e(hp,eI),e(eI,hgo),e(hp,pgo),e(x,ugo),e(x,pp),e(pp,ine),e(ine,_go),e(pp,bgo),e(pp,oI),e(oI,vgo),e(pp,Fgo),e(x,Tgo),e(x,up),e(up,dne),e(dne,Mgo),e(up,Ego),e(up,rI),e(rI,Cgo),e(up,wgo),e(x,Ago),e(x,_p),e(_p,cne),e(cne,ygo),e(_p,Lgo),e(_p,tI),e(tI,xgo),e(_p,$go),e(x,kgo),e(x,Ss),e(Ss,fne),e(fne,Sgo),e(Ss,Rgo),e(Ss,aI),e(aI,Bgo),e(Ss,Pgo),e(Ss,nI),e(nI,Igo),e(Ss,qgo),e(x,Ngo),e(x,bp),e(bp,mne),e(mne,jgo),e(bp,Dgo),e(bp,sI),e(sI,Ggo),e(bp,Ogo),e(x,Vgo),e(x,vp),e(vp,gne),e(gne,Xgo),e(vp,zgo),e(vp,lI),e(lI,Qgo),e(vp,Wgo),e(x,Hgo),e(x,Fp),e(Fp,hne),e(hne,Ugo),e(Fp,Jgo),e(Fp,iI),e(iI,Ygo),e(Fp,Kgo),e(x,Zgo),e(x,Tp),e(Tp,pne),e(pne,eho),e(Tp,oho),e(Tp,dI),e(dI,rho),e(Tp,tho),e(x,aho),e(x,Mp),e(Mp,une),e(une,nho),e(Mp,sho),e(Mp,cI),e(cI,lho),e(Mp,iho),e(x,dho),e(x,Ep),e(Ep,_ne),e(_ne,cho),e(Ep,fho),e(Ep,fI),e(fI,mho),e(Ep,gho),e(x,hho),e(x,Cp),e(Cp,bne),e(bne,pho),e(Cp,uho),e(Cp,mI),e(mI,_ho),e(Cp,bho),e(x,vho),e(x,wp),e(wp,vne),e(vne,Fho),e(wp,Tho),e(wp,gI),e(gI,Mho),e(wp,Eho),e(x,Cho),e(x,Ap),e(Ap,Fne),e(Fne,who),e(Ap,Aho),e(Ap,hI),e(hI,yho),e(Ap,Lho),e(x,xho),e(x,yp),e(yp,Tne),e(Tne,$ho),e(yp,kho),e(yp,pI),e(pI,Sho),e(yp,Rho),e(x,Bho),e(x,Lp),e(Lp,Mne),e(Mne,Pho),e(Lp,Iho),e(Lp,uI),e(uI,qho),e(Lp,Nho),e(x,jho),e(x,xp),e(xp,Ene),e(Ene,Dho),e(xp,Gho),e(xp,_I),e(_I,Oho),e(xp,Vho),e(x,Xho),e(x,$p),e($p,Cne),e(Cne,zho),e($p,Qho),e($p,bI),e(bI,Who),e($p,Hho),e(x,Uho),e(x,kp),e(kp,wne),e(wne,Jho),e(kp,Yho),e(kp,vI),e(vI,Kho),e(kp,Zho),e(x,epo),e(x,Sp),e(Sp,Ane),e(Ane,opo),e(Sp,rpo),e(Sp,FI),e(FI,tpo),e(Sp,apo),e(x,npo),e(x,Rp),e(Rp,yne),e(yne,spo),e(Rp,lpo),e(Rp,TI),e(TI,ipo),e(Rp,dpo),e(x,cpo),e(x,Bp),e(Bp,Lne),e(Lne,fpo),e(Bp,mpo),e(Bp,MI),e(MI,gpo),e(Bp,hpo),e(x,ppo),e(x,Pp),e(Pp,xne),e(xne,upo),e(Pp,_po),e(Pp,EI),e(EI,bpo),e(Pp,vpo),e(x,Fpo),e(x,Ip),e(Ip,$ne),e($ne,Tpo),e(Ip,Mpo),e(Ip,CI),e(CI,Epo),e(Ip,Cpo),e(x,wpo),e(x,qp),e(qp,kne),e(kne,Apo),e(qp,ypo),e(qp,wI),e(wI,Lpo),e(qp,xpo),e(x,$po),e(x,Np),e(Np,Sne),e(Sne,kpo),e(Np,Spo),e(Np,AI),e(AI,Rpo),e(Np,Bpo),e(x,Ppo),e(x,jp),e(jp,Rne),e(Rne,Ipo),e(jp,qpo),e(jp,yI),e(yI,Npo),e(jp,jpo),e(x,Dpo),e(x,Dp),e(Dp,Bne),e(Bne,Gpo),e(Dp,Opo),e(Dp,LI),e(LI,Vpo),e(Dp,Xpo),e(x,zpo),e(x,Gp),e(Gp,Pne),e(Pne,Qpo),e(Gp,Wpo),e(Gp,xI),e(xI,Hpo),e(Gp,Upo),e(x,Jpo),e(x,Op),e(Op,Ine),e(Ine,Ypo),e(Op,Kpo),e(Op,$I),e($I,Zpo),e(Op,euo),e(x,ouo),e(x,Vp),e(Vp,qne),e(qne,ruo),e(Vp,tuo),e(Vp,kI),e(kI,auo),e(Vp,nuo),e(x,suo),e(x,Xp),e(Xp,Nne),e(Nne,luo),e(Xp,iuo),e(Xp,SI),e(SI,duo),e(Xp,cuo),e(x,fuo),e(x,zp),e(zp,jne),e(jne,muo),e(zp,guo),e(zp,RI),e(RI,huo),e(zp,puo),e(x,uuo),e(x,Qp),e(Qp,Dne),e(Dne,_uo),e(Qp,buo),e(Qp,BI),e(BI,vuo),e(Qp,Fuo),e(x,Tuo),e(x,Wp),e(Wp,Gne),e(Gne,Muo),e(Wp,Euo),e(Wp,PI),e(PI,Cuo),e(Wp,wuo),e(x,Auo),e(x,Hp),e(Hp,One),e(One,yuo),e(Hp,Luo),e(Hp,II),e(II,xuo),e(Hp,$uo),e(x,kuo),e(x,Up),e(Up,Vne),e(Vne,Suo),e(Up,Ruo),e(Up,qI),e(qI,Buo),e(Up,Puo),e(x,Iuo),e(x,Jp),e(Jp,Xne),e(Xne,quo),e(Jp,Nuo),e(Jp,NI),e(NI,juo),e(Jp,Duo),e(x,Guo),e(x,Yp),e(Yp,zne),e(zne,Ouo),e(Yp,Vuo),e(Yp,jI),e(jI,Xuo),e(Yp,zuo),e(x,Quo),e(x,Kp),e(Kp,Qne),e(Qne,Wuo),e(Kp,Huo),e(Kp,DI),e(DI,Uuo),e(Kp,Juo),e(x,Yuo),e(x,Zp),e(Zp,Wne),e(Wne,Kuo),e(Zp,Zuo),e(Zp,GI),e(GI,e_o),e(Zp,o_o),e(x,r_o),e(x,eu),e(eu,Hne),e(Hne,t_o),e(eu,a_o),e(eu,OI),e(OI,n_o),e(eu,s_o),e(x,l_o),e(x,ou),e(ou,Une),e(Une,i_o),e(ou,d_o),e(ou,VI),e(VI,c_o),e(ou,f_o),e(x,m_o),e(x,ru),e(ru,Jne),e(Jne,g_o),e(ru,h_o),e(ru,XI),e(XI,p_o),e(ru,u_o),e(x,__o),e(x,tu),e(tu,Yne),e(Yne,b_o),e(tu,v_o),e(tu,zI),e(zI,F_o),e(tu,T_o),e(x,M_o),e(x,au),e(au,Kne),e(Kne,E_o),e(au,C_o),e(au,QI),e(QI,w_o),e(au,A_o),e(x,y_o),e(x,nu),e(nu,Zne),e(Zne,L_o),e(nu,x_o),e(nu,WI),e(WI,$_o),e(nu,k_o),e(x,S_o),e(x,su),e(su,ese),e(ese,R_o),e(su,B_o),e(su,HI),e(HI,P_o),e(su,I_o),e(x,q_o),e(x,lu),e(lu,ose),e(ose,N_o),e(lu,j_o),e(lu,UI),e(UI,D_o),e(lu,G_o),e(x,O_o),e(x,iu),e(iu,rse),e(rse,V_o),e(iu,X_o),e(iu,JI),e(JI,z_o),e(iu,Q_o),e(x,W_o),e(x,du),e(du,tse),e(tse,H_o),e(du,U_o),e(du,YI),e(YI,J_o),e(du,Y_o),e(x,K_o),e(x,cu),e(cu,ase),e(ase,Z_o),e(cu,e1o),e(cu,KI),e(KI,o1o),e(cu,r1o),e(x,t1o),e(x,fu),e(fu,nse),e(nse,a1o),e(fu,n1o),e(fu,ZI),e(ZI,s1o),e(fu,l1o),e(x,i1o),e(x,mu),e(mu,sse),e(sse,d1o),e(mu,c1o),e(mu,eq),e(eq,f1o),e(mu,m1o),e(x,g1o),e(x,gu),e(gu,lse),e(lse,h1o),e(gu,p1o),e(gu,oq),e(oq,u1o),e(gu,_1o),e(x,b1o),e(x,hu),e(hu,ise),e(ise,v1o),e(hu,F1o),e(hu,rq),e(rq,T1o),e(hu,M1o),e(x,E1o),e(x,pu),e(pu,dse),e(dse,C1o),e(pu,w1o),e(pu,tq),e(tq,A1o),e(pu,y1o),e(x,L1o),e(x,uu),e(uu,cse),e(cse,x1o),e(uu,$1o),e(uu,aq),e(aq,k1o),e(uu,S1o),e(x,R1o),e(x,_u),e(_u,fse),e(fse,B1o),e(_u,P1o),e(_u,nq),e(nq,I1o),e(_u,q1o),e(x,N1o),e(x,bu),e(bu,mse),e(mse,j1o),e(bu,D1o),e(bu,sq),e(sq,G1o),e(bu,O1o),e(x,V1o),e(x,vu),e(vu,gse),e(gse,X1o),e(vu,z1o),e(vu,lq),e(lq,Q1o),e(vu,W1o),e(x,H1o),e(x,Fu),e(Fu,hse),e(hse,U1o),e(Fu,J1o),e(Fu,iq),e(iq,Y1o),e(Fu,K1o),e(x,Z1o),e(x,Tu),e(Tu,pse),e(pse,ebo),e(Tu,obo),e(Tu,dq),e(dq,rbo),e(Tu,tbo),e(x,abo),e(x,Mu),e(Mu,use),e(use,nbo),e(Mu,sbo),e(Mu,cq),e(cq,lbo),e(Mu,ibo),e(x,dbo),e(x,Eu),e(Eu,_se),e(_se,cbo),e(Eu,fbo),e(Eu,fq),e(fq,mbo),e(Eu,gbo),e(x,hbo),e(x,Cu),e(Cu,bse),e(bse,pbo),e(Cu,ubo),e(Cu,mq),e(mq,_bo),e(Cu,bbo),e(x,vbo),e(x,wu),e(wu,vse),e(vse,Fbo),e(wu,Tbo),e(wu,gq),e(gq,Mbo),e(wu,Ebo),e(x,Cbo),e(x,Au),e(Au,Fse),e(Fse,wbo),e(Au,Abo),e(Au,hq),e(hq,ybo),e(Au,Lbo),e(x,xbo),e(x,yu),e(yu,Tse),e(Tse,$bo),e(yu,kbo),e(yu,pq),e(pq,Sbo),e(yu,Rbo),e(He,Bbo),e(He,Lu),e(Lu,Pbo),e(Lu,Mse),e(Mse,Ibo),e(Lu,qbo),e(Lu,Ese),e(Ese,Nbo),e(He,jbo),M(xu,He,null),b(f,MPe,_),b(f,Ci,_),e(Ci,$u),e($u,Cse),M(vw,Cse,null),e(Ci,Dbo),e(Ci,wse),e(wse,Gbo),b(f,EPe,_),b(f,xo,_),M(Fw,xo,null),e(xo,Obo),e(xo,wi),e(wi,Vbo),e(wi,uq),e(uq,Xbo),e(wi,zbo),e(wi,_q),e(_q,Qbo),e(wi,Wbo),e(xo,Hbo),e(xo,Tw),e(Tw,Ubo),e(Tw,Ase),e(Ase,Jbo),e(Tw,Ybo),e(xo,Kbo),e(xo,rt),M(Mw,rt,null),e(rt,Zbo),e(rt,yse),e(yse,e2o),e(rt,o2o),e(rt,Ai),e(Ai,r2o),e(Ai,Lse),e(Lse,t2o),e(Ai,a2o),e(Ai,bq),e(bq,n2o),e(Ai,s2o),e(rt,l2o),M(ku,rt,null),e(xo,i2o),e(xo,Ue),M(Ew,Ue,null),e(Ue,d2o),e(Ue,xse),e(xse,c2o),e(Ue,f2o),e(Ue,ya),e(ya,m2o),e(ya,$se),e($se,g2o),e(ya,h2o),e(ya,kse),e(kse,p2o),e(ya,u2o),e(ya,Sse),e(Sse,_2o),e(ya,b2o),e(Ue,v2o),e(Ue,G),e(G,Su),e(Su,Rse),e(Rse,F2o),e(Su,T2o),e(Su,vq),e(vq,M2o),e(Su,E2o),e(G,C2o),e(G,Ru),e(Ru,Bse),e(Bse,w2o),e(Ru,A2o),e(Ru,Fq),e(Fq,y2o),e(Ru,L2o),e(G,x2o),e(G,Bu),e(Bu,Pse),e(Pse,$2o),e(Bu,k2o),e(Bu,Tq),e(Tq,S2o),e(Bu,R2o),e(G,B2o),e(G,Pu),e(Pu,Ise),e(Ise,P2o),e(Pu,I2o),e(Pu,Mq),e(Mq,q2o),e(Pu,N2o),e(G,j2o),e(G,Iu),e(Iu,qse),e(qse,D2o),e(Iu,G2o),e(Iu,Eq),e(Eq,O2o),e(Iu,V2o),e(G,X2o),e(G,qu),e(qu,Nse),e(Nse,z2o),e(qu,Q2o),e(qu,Cq),e(Cq,W2o),e(qu,H2o),e(G,U2o),e(G,Nu),e(Nu,jse),e(jse,J2o),e(Nu,Y2o),e(Nu,wq),e(wq,K2o),e(Nu,Z2o),e(G,evo),e(G,ju),e(ju,Dse),e(Dse,ovo),e(ju,rvo),e(ju,Aq),e(Aq,tvo),e(ju,avo),e(G,nvo),e(G,Du),e(Du,Gse),e(Gse,svo),e(Du,lvo),e(Du,yq),e(yq,ivo),e(Du,dvo),e(G,cvo),e(G,Gu),e(Gu,Ose),e(Ose,fvo),e(Gu,mvo),e(Gu,Lq),e(Lq,gvo),e(Gu,hvo),e(G,pvo),e(G,Ou),e(Ou,Vse),e(Vse,uvo),e(Ou,_vo),e(Ou,xq),e(xq,bvo),e(Ou,vvo),e(G,Fvo),e(G,Vu),e(Vu,Xse),e(Xse,Tvo),e(Vu,Mvo),e(Vu,$q),e($q,Evo),e(Vu,Cvo),e(G,wvo),e(G,Xu),e(Xu,zse),e(zse,Avo),e(Xu,yvo),e(Xu,kq),e(kq,Lvo),e(Xu,xvo),e(G,$vo),e(G,zu),e(zu,Qse),e(Qse,kvo),e(zu,Svo),e(zu,Sq),e(Sq,Rvo),e(zu,Bvo),e(G,Pvo),e(G,Qu),e(Qu,Wse),e(Wse,Ivo),e(Qu,qvo),e(Qu,Rq),e(Rq,Nvo),e(Qu,jvo),e(G,Dvo),e(G,Wu),e(Wu,Hse),e(Hse,Gvo),e(Wu,Ovo),e(Wu,Bq),e(Bq,Vvo),e(Wu,Xvo),e(G,zvo),e(G,Hu),e(Hu,Use),e(Use,Qvo),e(Hu,Wvo),e(Hu,Pq),e(Pq,Hvo),e(Hu,Uvo),e(G,Jvo),e(G,Uu),e(Uu,Jse),e(Jse,Yvo),e(Uu,Kvo),e(Uu,Iq),e(Iq,Zvo),e(Uu,eFo),e(G,oFo),e(G,Ju),e(Ju,Yse),e(Yse,rFo),e(Ju,tFo),e(Ju,qq),e(qq,aFo),e(Ju,nFo),e(G,sFo),e(G,Yu),e(Yu,Kse),e(Kse,lFo),e(Yu,iFo),e(Yu,Nq),e(Nq,dFo),e(Yu,cFo),e(G,fFo),e(G,Ku),e(Ku,Zse),e(Zse,mFo),e(Ku,gFo),e(Ku,jq),e(jq,hFo),e(Ku,pFo),e(G,uFo),e(G,Zu),e(Zu,ele),e(ele,_Fo),e(Zu,bFo),e(Zu,Dq),e(Dq,vFo),e(Zu,FFo),e(G,TFo),e(G,e_),e(e_,ole),e(ole,MFo),e(e_,EFo),e(e_,Gq),e(Gq,CFo),e(e_,wFo),e(G,AFo),e(G,o_),e(o_,rle),e(rle,yFo),e(o_,LFo),e(o_,Oq),e(Oq,xFo),e(o_,$Fo),e(G,kFo),e(G,r_),e(r_,tle),e(tle,SFo),e(r_,RFo),e(r_,Vq),e(Vq,BFo),e(r_,PFo),e(G,IFo),e(G,t_),e(t_,ale),e(ale,qFo),e(t_,NFo),e(t_,Xq),e(Xq,jFo),e(t_,DFo),e(G,GFo),e(G,a_),e(a_,nle),e(nle,OFo),e(a_,VFo),e(a_,zq),e(zq,XFo),e(a_,zFo),e(G,QFo),e(G,n_),e(n_,sle),e(sle,WFo),e(n_,HFo),e(n_,Qq),e(Qq,UFo),e(n_,JFo),e(G,YFo),e(G,s_),e(s_,lle),e(lle,KFo),e(s_,ZFo),e(s_,Wq),e(Wq,e0o),e(s_,o0o),e(G,r0o),e(G,l_),e(l_,ile),e(ile,t0o),e(l_,a0o),e(l_,Hq),e(Hq,n0o),e(l_,s0o),e(G,l0o),e(G,i_),e(i_,dle),e(dle,i0o),e(i_,d0o),e(i_,Uq),e(Uq,c0o),e(i_,f0o),e(G,m0o),e(G,d_),e(d_,cle),e(cle,g0o),e(d_,h0o),e(d_,Jq),e(Jq,p0o),e(d_,u0o),e(G,_0o),e(G,c_),e(c_,fle),e(fle,b0o),e(c_,v0o),e(c_,Yq),e(Yq,F0o),e(c_,T0o),e(G,M0o),e(G,f_),e(f_,mle),e(mle,E0o),e(f_,C0o),e(f_,Kq),e(Kq,w0o),e(f_,A0o),e(G,y0o),e(G,m_),e(m_,gle),e(gle,L0o),e(m_,x0o),e(m_,Zq),e(Zq,$0o),e(m_,k0o),e(G,S0o),e(G,g_),e(g_,hle),e(hle,R0o),e(g_,B0o),e(g_,eN),e(eN,P0o),e(g_,I0o),e(G,q0o),e(G,h_),e(h_,ple),e(ple,N0o),e(h_,j0o),e(h_,oN),e(oN,D0o),e(h_,G0o),e(G,O0o),e(G,p_),e(p_,ule),e(ule,V0o),e(p_,X0o),e(p_,rN),e(rN,z0o),e(p_,Q0o),e(G,W0o),e(G,u_),e(u_,_le),e(_le,H0o),e(u_,U0o),e(u_,tN),e(tN,J0o),e(u_,Y0o),e(Ue,K0o),e(Ue,__),e(__,Z0o),e(__,ble),e(ble,e6o),e(__,o6o),e(__,vle),e(vle,r6o),e(Ue,t6o),M(b_,Ue,null),b(f,CPe,_),b(f,yi,_),e(yi,v_),e(v_,Fle),M(Cw,Fle,null),e(yi,a6o),e(yi,Tle),e(Tle,n6o),b(f,wPe,_),b(f,$o,_),M(ww,$o,null),e($o,s6o),e($o,Li),e(Li,l6o),e(Li,aN),e(aN,i6o),e(Li,d6o),e(Li,nN),e(nN,c6o),e(Li,f6o),e($o,m6o),e($o,Aw),e(Aw,g6o),e(Aw,Mle),e(Mle,h6o),e(Aw,p6o),e($o,u6o),e($o,tt),M(yw,tt,null),e(tt,_6o),e(tt,Ele),e(Ele,b6o),e(tt,v6o),e(tt,xi),e(xi,F6o),e(xi,Cle),e(Cle,T6o),e(xi,M6o),e(xi,sN),e(sN,E6o),e(xi,C6o),e(tt,w6o),M(F_,tt,null),e($o,A6o),e($o,Je),M(Lw,Je,null),e(Je,y6o),e(Je,wle),e(wle,L6o),e(Je,x6o),e(Je,La),e(La,$6o),e(La,Ale),e(Ale,k6o),e(La,S6o),e(La,yle),e(yle,R6o),e(La,B6o),e(La,Lle),e(Lle,P6o),e(La,I6o),e(Je,q6o),e(Je,z),e(z,T_),e(T_,xle),e(xle,N6o),e(T_,j6o),e(T_,lN),e(lN,D6o),e(T_,G6o),e(z,O6o),e(z,M_),e(M_,$le),e($le,V6o),e(M_,X6o),e(M_,iN),e(iN,z6o),e(M_,Q6o),e(z,W6o),e(z,E_),e(E_,kle),e(kle,H6o),e(E_,U6o),e(E_,dN),e(dN,J6o),e(E_,Y6o),e(z,K6o),e(z,C_),e(C_,Sle),e(Sle,Z6o),e(C_,eTo),e(C_,cN),e(cN,oTo),e(C_,rTo),e(z,tTo),e(z,w_),e(w_,Rle),e(Rle,aTo),e(w_,nTo),e(w_,fN),e(fN,sTo),e(w_,lTo),e(z,iTo),e(z,A_),e(A_,Ble),e(Ble,dTo),e(A_,cTo),e(A_,mN),e(mN,fTo),e(A_,mTo),e(z,gTo),e(z,y_),e(y_,Ple),e(Ple,hTo),e(y_,pTo),e(y_,gN),e(gN,uTo),e(y_,_To),e(z,bTo),e(z,L_),e(L_,Ile),e(Ile,vTo),e(L_,FTo),e(L_,hN),e(hN,TTo),e(L_,MTo),e(z,ETo),e(z,x_),e(x_,qle),e(qle,CTo),e(x_,wTo),e(x_,pN),e(pN,ATo),e(x_,yTo),e(z,LTo),e(z,$_),e($_,Nle),e(Nle,xTo),e($_,$To),e($_,uN),e(uN,kTo),e($_,STo),e(z,RTo),e(z,k_),e(k_,jle),e(jle,BTo),e(k_,PTo),e(k_,_N),e(_N,ITo),e(k_,qTo),e(z,NTo),e(z,S_),e(S_,Dle),e(Dle,jTo),e(S_,DTo),e(S_,bN),e(bN,GTo),e(S_,OTo),e(z,VTo),e(z,R_),e(R_,Gle),e(Gle,XTo),e(R_,zTo),e(R_,vN),e(vN,QTo),e(R_,WTo),e(z,HTo),e(z,B_),e(B_,Ole),e(Ole,UTo),e(B_,JTo),e(B_,FN),e(FN,YTo),e(B_,KTo),e(z,ZTo),e(z,P_),e(P_,Vle),e(Vle,e7o),e(P_,o7o),e(P_,TN),e(TN,r7o),e(P_,t7o),e(z,a7o),e(z,I_),e(I_,Xle),e(Xle,n7o),e(I_,s7o),e(I_,MN),e(MN,l7o),e(I_,i7o),e(z,d7o),e(z,q_),e(q_,zle),e(zle,c7o),e(q_,f7o),e(q_,EN),e(EN,m7o),e(q_,g7o),e(z,h7o),e(z,N_),e(N_,Qle),e(Qle,p7o),e(N_,u7o),e(N_,CN),e(CN,_7o),e(N_,b7o),e(z,v7o),e(z,j_),e(j_,Wle),e(Wle,F7o),e(j_,T7o),e(j_,wN),e(wN,M7o),e(j_,E7o),e(z,C7o),e(z,D_),e(D_,Hle),e(Hle,w7o),e(D_,A7o),e(D_,AN),e(AN,y7o),e(D_,L7o),e(z,x7o),e(z,G_),e(G_,Ule),e(Ule,$7o),e(G_,k7o),e(G_,yN),e(yN,S7o),e(G_,R7o),e(z,B7o),e(z,O_),e(O_,Jle),e(Jle,P7o),e(O_,I7o),e(O_,LN),e(LN,q7o),e(O_,N7o),e(z,j7o),e(z,V_),e(V_,Yle),e(Yle,D7o),e(V_,G7o),e(V_,xN),e(xN,O7o),e(V_,V7o),e(z,X7o),e(z,X_),e(X_,Kle),e(Kle,z7o),e(X_,Q7o),e(X_,$N),e($N,W7o),e(X_,H7o),e(z,U7o),e(z,z_),e(z_,Zle),e(Zle,J7o),e(z_,Y7o),e(z_,kN),e(kN,K7o),e(z_,Z7o),e(z,e9o),e(z,Q_),e(Q_,eie),e(eie,o9o),e(Q_,r9o),e(Q_,SN),e(SN,t9o),e(Q_,a9o),e(z,n9o),e(z,W_),e(W_,oie),e(oie,s9o),e(W_,l9o),e(W_,RN),e(RN,i9o),e(W_,d9o),e(z,c9o),e(z,H_),e(H_,rie),e(rie,f9o),e(H_,m9o),e(H_,BN),e(BN,g9o),e(H_,h9o),e(z,p9o),e(z,U_),e(U_,tie),e(tie,u9o),e(U_,_9o),e(U_,PN),e(PN,b9o),e(U_,v9o),e(z,F9o),e(z,J_),e(J_,aie),e(aie,T9o),e(J_,M9o),e(J_,IN),e(IN,E9o),e(J_,C9o),e(z,w9o),e(z,Y_),e(Y_,nie),e(nie,A9o),e(Y_,y9o),e(Y_,qN),e(qN,L9o),e(Y_,x9o),e(z,$9o),e(z,K_),e(K_,sie),e(sie,k9o),e(K_,S9o),e(K_,NN),e(NN,R9o),e(K_,B9o),e(z,P9o),e(z,Z_),e(Z_,lie),e(lie,I9o),e(Z_,q9o),e(Z_,jN),e(jN,N9o),e(Z_,j9o),e(z,D9o),e(z,e1),e(e1,iie),e(iie,G9o),e(e1,O9o),e(e1,DN),e(DN,V9o),e(e1,X9o),e(z,z9o),e(z,o1),e(o1,die),e(die,Q9o),e(o1,W9o),e(o1,GN),e(GN,H9o),e(o1,U9o),e(Je,J9o),e(Je,r1),e(r1,Y9o),e(r1,cie),e(cie,K9o),e(r1,Z9o),e(r1,fie),e(fie,eMo),e(Je,oMo),M(t1,Je,null),b(f,APe,_),b(f,$i,_),e($i,a1),e(a1,mie),M(xw,mie,null),e($i,rMo),e($i,gie),e(gie,tMo),b(f,yPe,_),b(f,ko,_),M($w,ko,null),e(ko,aMo),e(ko,ki),e(ki,nMo),e(ki,ON),e(ON,sMo),e(ki,lMo),e(ki,VN),e(VN,iMo),e(ki,dMo),e(ko,cMo),e(ko,kw),e(kw,fMo),e(kw,hie),e(hie,mMo),e(kw,gMo),e(ko,hMo),e(ko,at),M(Sw,at,null),e(at,pMo),e(at,pie),e(pie,uMo),e(at,_Mo),e(at,Si),e(Si,bMo),e(Si,uie),e(uie,vMo),e(Si,FMo),e(Si,XN),e(XN,TMo),e(Si,MMo),e(at,EMo),M(n1,at,null),e(ko,CMo),e(ko,Ye),M(Rw,Ye,null),e(Ye,wMo),e(Ye,_ie),e(_ie,AMo),e(Ye,yMo),e(Ye,xa),e(xa,LMo),e(xa,bie),e(bie,xMo),e(xa,$Mo),e(xa,vie),e(vie,kMo),e(xa,SMo),e(xa,Fie),e(Fie,RMo),e(xa,BMo),e(Ye,PMo),e(Ye,Q),e(Q,s1),e(s1,Tie),e(Tie,IMo),e(s1,qMo),e(s1,zN),e(zN,NMo),e(s1,jMo),e(Q,DMo),e(Q,l1),e(l1,Mie),e(Mie,GMo),e(l1,OMo),e(l1,QN),e(QN,VMo),e(l1,XMo),e(Q,zMo),e(Q,i1),e(i1,Eie),e(Eie,QMo),e(i1,WMo),e(i1,WN),e(WN,HMo),e(i1,UMo),e(Q,JMo),e(Q,d1),e(d1,Cie),e(Cie,YMo),e(d1,KMo),e(d1,HN),e(HN,ZMo),e(d1,e4o),e(Q,o4o),e(Q,c1),e(c1,wie),e(wie,r4o),e(c1,t4o),e(c1,UN),e(UN,a4o),e(c1,n4o),e(Q,s4o),e(Q,f1),e(f1,Aie),e(Aie,l4o),e(f1,i4o),e(f1,JN),e(JN,d4o),e(f1,c4o),e(Q,f4o),e(Q,m1),e(m1,yie),e(yie,m4o),e(m1,g4o),e(m1,YN),e(YN,h4o),e(m1,p4o),e(Q,u4o),e(Q,g1),e(g1,Lie),e(Lie,_4o),e(g1,b4o),e(g1,KN),e(KN,v4o),e(g1,F4o),e(Q,T4o),e(Q,h1),e(h1,xie),e(xie,M4o),e(h1,E4o),e(h1,ZN),e(ZN,C4o),e(h1,w4o),e(Q,A4o),e(Q,p1),e(p1,$ie),e($ie,y4o),e(p1,L4o),e(p1,ej),e(ej,x4o),e(p1,$4o),e(Q,k4o),e(Q,u1),e(u1,kie),e(kie,S4o),e(u1,R4o),e(u1,oj),e(oj,B4o),e(u1,P4o),e(Q,I4o),e(Q,_1),e(_1,Sie),e(Sie,q4o),e(_1,N4o),e(_1,rj),e(rj,j4o),e(_1,D4o),e(Q,G4o),e(Q,b1),e(b1,Rie),e(Rie,O4o),e(b1,V4o),e(b1,tj),e(tj,X4o),e(b1,z4o),e(Q,Q4o),e(Q,v1),e(v1,Bie),e(Bie,W4o),e(v1,H4o),e(v1,aj),e(aj,U4o),e(v1,J4o),e(Q,Y4o),e(Q,F1),e(F1,Pie),e(Pie,K4o),e(F1,Z4o),e(F1,nj),e(nj,eEo),e(F1,oEo),e(Q,rEo),e(Q,T1),e(T1,Iie),e(Iie,tEo),e(T1,aEo),e(T1,sj),e(sj,nEo),e(T1,sEo),e(Q,lEo),e(Q,M1),e(M1,qie),e(qie,iEo),e(M1,dEo),e(M1,lj),e(lj,cEo),e(M1,fEo),e(Q,mEo),e(Q,E1),e(E1,Nie),e(Nie,gEo),e(E1,hEo),e(E1,ij),e(ij,pEo),e(E1,uEo),e(Q,_Eo),e(Q,C1),e(C1,jie),e(jie,bEo),e(C1,vEo),e(C1,dj),e(dj,FEo),e(C1,TEo),e(Q,MEo),e(Q,w1),e(w1,Die),e(Die,EEo),e(w1,CEo),e(w1,cj),e(cj,wEo),e(w1,AEo),e(Q,yEo),e(Q,A1),e(A1,Gie),e(Gie,LEo),e(A1,xEo),e(A1,fj),e(fj,$Eo),e(A1,kEo),e(Q,SEo),e(Q,y1),e(y1,Oie),e(Oie,REo),e(y1,BEo),e(y1,mj),e(mj,PEo),e(y1,IEo),e(Q,qEo),e(Q,L1),e(L1,Vie),e(Vie,NEo),e(L1,jEo),e(L1,gj),e(gj,DEo),e(L1,GEo),e(Q,OEo),e(Q,x1),e(x1,Xie),e(Xie,VEo),e(x1,XEo),e(x1,hj),e(hj,zEo),e(x1,QEo),e(Q,WEo),e(Q,$1),e($1,zie),e(zie,HEo),e($1,UEo),e($1,pj),e(pj,JEo),e($1,YEo),e(Q,KEo),e(Q,k1),e(k1,Qie),e(Qie,ZEo),e(k1,e5o),e(k1,uj),e(uj,o5o),e(k1,r5o),e(Q,t5o),e(Q,S1),e(S1,Wie),e(Wie,a5o),e(S1,n5o),e(S1,_j),e(_j,s5o),e(S1,l5o),e(Q,i5o),e(Q,R1),e(R1,Hie),e(Hie,d5o),e(R1,c5o),e(R1,bj),e(bj,f5o),e(R1,m5o),e(Q,g5o),e(Q,B1),e(B1,Uie),e(Uie,h5o),e(B1,p5o),e(B1,vj),e(vj,u5o),e(B1,_5o),e(Q,b5o),e(Q,P1),e(P1,Jie),e(Jie,v5o),e(P1,F5o),e(P1,Fj),e(Fj,T5o),e(P1,M5o),e(Q,E5o),e(Q,I1),e(I1,Yie),e(Yie,C5o),e(I1,w5o),e(I1,Kie),e(Kie,A5o),e(I1,y5o),e(Q,L5o),e(Q,q1),e(q1,Zie),e(Zie,x5o),e(q1,$5o),e(q1,Tj),e(Tj,k5o),e(q1,S5o),e(Q,R5o),e(Q,N1),e(N1,ede),e(ede,B5o),e(N1,P5o),e(N1,Mj),e(Mj,I5o),e(N1,q5o),e(Q,N5o),e(Q,j1),e(j1,ode),e(ode,j5o),e(j1,D5o),e(j1,Ej),e(Ej,G5o),e(j1,O5o),e(Q,V5o),e(Q,D1),e(D1,rde),e(rde,X5o),e(D1,z5o),e(D1,Cj),e(Cj,Q5o),e(D1,W5o),e(Ye,H5o),e(Ye,G1),e(G1,U5o),e(G1,tde),e(tde,J5o),e(G1,Y5o),e(G1,ade),e(ade,K5o),e(Ye,Z5o),M(O1,Ye,null),b(f,LPe,_),b(f,Ri,_),e(Ri,V1),e(V1,nde),M(Bw,nde,null),e(Ri,eCo),e(Ri,sde),e(sde,oCo),b(f,xPe,_),b(f,So,_),M(Pw,So,null),e(So,rCo),e(So,Bi),e(Bi,tCo),e(Bi,wj),e(wj,aCo),e(Bi,nCo),e(Bi,Aj),e(Aj,sCo),e(Bi,lCo),e(So,iCo),e(So,Iw),e(Iw,dCo),e(Iw,lde),e(lde,cCo),e(Iw,fCo),e(So,mCo),e(So,nt),M(qw,nt,null),e(nt,gCo),e(nt,ide),e(ide,hCo),e(nt,pCo),e(nt,Pi),e(Pi,uCo),e(Pi,dde),e(dde,_Co),e(Pi,bCo),e(Pi,yj),e(yj,vCo),e(Pi,FCo),e(nt,TCo),M(X1,nt,null),e(So,MCo),e(So,Ke),M(Nw,Ke,null),e(Ke,ECo),e(Ke,cde),e(cde,CCo),e(Ke,wCo),e(Ke,$a),e($a,ACo),e($a,fde),e(fde,yCo),e($a,LCo),e($a,mde),e(mde,xCo),e($a,$Co),e($a,gde),e(gde,kCo),e($a,SCo),e(Ke,RCo),e(Ke,he),e(he,z1),e(z1,hde),e(hde,BCo),e(z1,PCo),e(z1,Lj),e(Lj,ICo),e(z1,qCo),e(he,NCo),e(he,Q1),e(Q1,pde),e(pde,jCo),e(Q1,DCo),e(Q1,xj),e(xj,GCo),e(Q1,OCo),e(he,VCo),e(he,W1),e(W1,ude),e(ude,XCo),e(W1,zCo),e(W1,$j),e($j,QCo),e(W1,WCo),e(he,HCo),e(he,H1),e(H1,_de),e(_de,UCo),e(H1,JCo),e(H1,kj),e(kj,YCo),e(H1,KCo),e(he,ZCo),e(he,U1),e(U1,bde),e(bde,e3o),e(U1,o3o),e(U1,Sj),e(Sj,r3o),e(U1,t3o),e(he,a3o),e(he,J1),e(J1,vde),e(vde,n3o),e(J1,s3o),e(J1,Rj),e(Rj,l3o),e(J1,i3o),e(he,d3o),e(he,Y1),e(Y1,Fde),e(Fde,c3o),e(Y1,f3o),e(Y1,Bj),e(Bj,m3o),e(Y1,g3o),e(he,h3o),e(he,K1),e(K1,Tde),e(Tde,p3o),e(K1,u3o),e(K1,Pj),e(Pj,_3o),e(K1,b3o),e(he,v3o),e(he,Z1),e(Z1,Mde),e(Mde,F3o),e(Z1,T3o),e(Z1,Ij),e(Ij,M3o),e(Z1,E3o),e(he,C3o),e(he,eb),e(eb,Ede),e(Ede,w3o),e(eb,A3o),e(eb,qj),e(qj,y3o),e(eb,L3o),e(he,x3o),e(he,ob),e(ob,Cde),e(Cde,$3o),e(ob,k3o),e(ob,Nj),e(Nj,S3o),e(ob,R3o),e(he,B3o),e(he,rb),e(rb,wde),e(wde,P3o),e(rb,I3o),e(rb,jj),e(jj,q3o),e(rb,N3o),e(he,j3o),e(he,tb),e(tb,Ade),e(Ade,D3o),e(tb,G3o),e(tb,Dj),e(Dj,O3o),e(tb,V3o),e(he,X3o),e(he,ab),e(ab,yde),e(yde,z3o),e(ab,Q3o),e(ab,Gj),e(Gj,W3o),e(ab,H3o),e(he,U3o),e(he,nb),e(nb,Lde),e(Lde,J3o),e(nb,Y3o),e(nb,Oj),e(Oj,K3o),e(nb,Z3o),e(he,ewo),e(he,sb),e(sb,xde),e(xde,owo),e(sb,rwo),e(sb,Vj),e(Vj,two),e(sb,awo),e(he,nwo),e(he,lb),e(lb,$de),e($de,swo),e(lb,lwo),e(lb,Xj),e(Xj,iwo),e(lb,dwo),e(Ke,cwo),e(Ke,ib),e(ib,fwo),e(ib,kde),e(kde,mwo),e(ib,gwo),e(ib,Sde),e(Sde,hwo),e(Ke,pwo),M(db,Ke,null),b(f,$Pe,_),b(f,Ii,_),e(Ii,cb),e(cb,Rde),M(jw,Rde,null),e(Ii,uwo),e(Ii,Bde),e(Bde,_wo),b(f,kPe,_),b(f,Ro,_),M(Dw,Ro,null),e(Ro,bwo),e(Ro,qi),e(qi,vwo),e(qi,zj),e(zj,Fwo),e(qi,Two),e(qi,Qj),e(Qj,Mwo),e(qi,Ewo),e(Ro,Cwo),e(Ro,Gw),e(Gw,wwo),e(Gw,Pde),e(Pde,Awo),e(Gw,ywo),e(Ro,Lwo),e(Ro,st),M(Ow,st,null),e(st,xwo),e(st,Ide),e(Ide,$wo),e(st,kwo),e(st,Ni),e(Ni,Swo),e(Ni,qde),e(qde,Rwo),e(Ni,Bwo),e(Ni,Wj),e(Wj,Pwo),e(Ni,Iwo),e(st,qwo),M(fb,st,null),e(Ro,Nwo),e(Ro,Ze),M(Vw,Ze,null),e(Ze,jwo),e(Ze,Nde),e(Nde,Dwo),e(Ze,Gwo),e(Ze,ka),e(ka,Owo),e(ka,jde),e(jde,Vwo),e(ka,Xwo),e(ka,Dde),e(Dde,zwo),e(ka,Qwo),e(ka,Gde),e(Gde,Wwo),e(ka,Hwo),e(Ze,Uwo),e(Ze,q),e(q,mb),e(mb,Ode),e(Ode,Jwo),e(mb,Ywo),e(mb,Hj),e(Hj,Kwo),e(mb,Zwo),e(q,eAo),e(q,gb),e(gb,Vde),e(Vde,oAo),e(gb,rAo),e(gb,Uj),e(Uj,tAo),e(gb,aAo),e(q,nAo),e(q,hb),e(hb,Xde),e(Xde,sAo),e(hb,lAo),e(hb,Jj),e(Jj,iAo),e(hb,dAo),e(q,cAo),e(q,pb),e(pb,zde),e(zde,fAo),e(pb,mAo),e(pb,Yj),e(Yj,gAo),e(pb,hAo),e(q,pAo),e(q,ub),e(ub,Qde),e(Qde,uAo),e(ub,_Ao),e(ub,Kj),e(Kj,bAo),e(ub,vAo),e(q,FAo),e(q,_b),e(_b,Wde),e(Wde,TAo),e(_b,MAo),e(_b,Zj),e(Zj,EAo),e(_b,CAo),e(q,wAo),e(q,bb),e(bb,Hde),e(Hde,AAo),e(bb,yAo),e(bb,eD),e(eD,LAo),e(bb,xAo),e(q,$Ao),e(q,vb),e(vb,Ude),e(Ude,kAo),e(vb,SAo),e(vb,oD),e(oD,RAo),e(vb,BAo),e(q,PAo),e(q,Fb),e(Fb,Jde),e(Jde,IAo),e(Fb,qAo),e(Fb,rD),e(rD,NAo),e(Fb,jAo),e(q,DAo),e(q,Tb),e(Tb,Yde),e(Yde,GAo),e(Tb,OAo),e(Tb,tD),e(tD,VAo),e(Tb,XAo),e(q,zAo),e(q,Mb),e(Mb,Kde),e(Kde,QAo),e(Mb,WAo),e(Mb,aD),e(aD,HAo),e(Mb,UAo),e(q,JAo),e(q,Eb),e(Eb,Zde),e(Zde,YAo),e(Eb,KAo),e(Eb,nD),e(nD,ZAo),e(Eb,eyo),e(q,oyo),e(q,Cb),e(Cb,ece),e(ece,ryo),e(Cb,tyo),e(Cb,sD),e(sD,ayo),e(Cb,nyo),e(q,syo),e(q,wb),e(wb,oce),e(oce,lyo),e(wb,iyo),e(wb,lD),e(lD,dyo),e(wb,cyo),e(q,fyo),e(q,Ab),e(Ab,rce),e(rce,myo),e(Ab,gyo),e(Ab,iD),e(iD,hyo),e(Ab,pyo),e(q,uyo),e(q,yb),e(yb,tce),e(tce,_yo),e(yb,byo),e(yb,dD),e(dD,vyo),e(yb,Fyo),e(q,Tyo),e(q,Lb),e(Lb,ace),e(ace,Myo),e(Lb,Eyo),e(Lb,cD),e(cD,Cyo),e(Lb,wyo),e(q,Ayo),e(q,xb),e(xb,nce),e(nce,yyo),e(xb,Lyo),e(xb,fD),e(fD,xyo),e(xb,$yo),e(q,kyo),e(q,$b),e($b,sce),e(sce,Syo),e($b,Ryo),e($b,mD),e(mD,Byo),e($b,Pyo),e(q,Iyo),e(q,kb),e(kb,lce),e(lce,qyo),e(kb,Nyo),e(kb,gD),e(gD,jyo),e(kb,Dyo),e(q,Gyo),e(q,Sb),e(Sb,ice),e(ice,Oyo),e(Sb,Vyo),e(Sb,hD),e(hD,Xyo),e(Sb,zyo),e(q,Qyo),e(q,Rb),e(Rb,dce),e(dce,Wyo),e(Rb,Hyo),e(Rb,pD),e(pD,Uyo),e(Rb,Jyo),e(q,Yyo),e(q,Bb),e(Bb,cce),e(cce,Kyo),e(Bb,Zyo),e(Bb,uD),e(uD,eLo),e(Bb,oLo),e(q,rLo),e(q,Pb),e(Pb,fce),e(fce,tLo),e(Pb,aLo),e(Pb,_D),e(_D,nLo),e(Pb,sLo),e(q,lLo),e(q,Ib),e(Ib,mce),e(mce,iLo),e(Ib,dLo),e(Ib,bD),e(bD,cLo),e(Ib,fLo),e(q,mLo),e(q,qb),e(qb,gce),e(gce,gLo),e(qb,hLo),e(qb,vD),e(vD,pLo),e(qb,uLo),e(q,_Lo),e(q,Nb),e(Nb,hce),e(hce,bLo),e(Nb,vLo),e(Nb,FD),e(FD,FLo),e(Nb,TLo),e(q,MLo),e(q,jb),e(jb,pce),e(pce,ELo),e(jb,CLo),e(jb,TD),e(TD,wLo),e(jb,ALo),e(q,yLo),e(q,Db),e(Db,uce),e(uce,LLo),e(Db,xLo),e(Db,MD),e(MD,$Lo),e(Db,kLo),e(q,SLo),e(q,Gb),e(Gb,_ce),e(_ce,RLo),e(Gb,BLo),e(Gb,ED),e(ED,PLo),e(Gb,ILo),e(q,qLo),e(q,Ob),e(Ob,bce),e(bce,NLo),e(Ob,jLo),e(Ob,CD),e(CD,DLo),e(Ob,GLo),e(q,OLo),e(q,Vb),e(Vb,vce),e(vce,VLo),e(Vb,XLo),e(Vb,wD),e(wD,zLo),e(Vb,QLo),e(q,WLo),e(q,Xb),e(Xb,Fce),e(Fce,HLo),e(Xb,ULo),e(Xb,AD),e(AD,JLo),e(Xb,YLo),e(q,KLo),e(q,zb),e(zb,Tce),e(Tce,ZLo),e(zb,e8o),e(zb,yD),e(yD,o8o),e(zb,r8o),e(q,t8o),e(q,Qb),e(Qb,Mce),e(Mce,a8o),e(Qb,n8o),e(Qb,LD),e(LD,s8o),e(Qb,l8o),e(q,i8o),e(q,Wb),e(Wb,Ece),e(Ece,d8o),e(Wb,c8o),e(Wb,xD),e(xD,f8o),e(Wb,m8o),e(q,g8o),e(q,Hb),e(Hb,Cce),e(Cce,h8o),e(Hb,p8o),e(Hb,$D),e($D,u8o),e(Hb,_8o),e(q,b8o),e(q,Ub),e(Ub,wce),e(wce,v8o),e(Ub,F8o),e(Ub,kD),e(kD,T8o),e(Ub,M8o),e(q,E8o),e(q,Jb),e(Jb,Ace),e(Ace,C8o),e(Jb,w8o),e(Jb,SD),e(SD,A8o),e(Jb,y8o),e(q,L8o),e(q,Yb),e(Yb,yce),e(yce,x8o),e(Yb,$8o),e(Yb,RD),e(RD,k8o),e(Yb,S8o),e(q,R8o),e(q,Kb),e(Kb,Lce),e(Lce,B8o),e(Kb,P8o),e(Kb,BD),e(BD,I8o),e(Kb,q8o),e(q,N8o),e(q,Zb),e(Zb,xce),e(xce,j8o),e(Zb,D8o),e(Zb,PD),e(PD,G8o),e(Zb,O8o),e(q,V8o),e(q,e2),e(e2,$ce),e($ce,X8o),e(e2,z8o),e(e2,ID),e(ID,Q8o),e(e2,W8o),e(q,H8o),e(q,o2),e(o2,kce),e(kce,U8o),e(o2,J8o),e(o2,qD),e(qD,Y8o),e(o2,K8o),e(q,Z8o),e(q,r2),e(r2,Sce),e(Sce,exo),e(r2,oxo),e(r2,ND),e(ND,rxo),e(r2,txo),e(q,axo),e(q,t2),e(t2,Rce),e(Rce,nxo),e(t2,sxo),e(t2,jD),e(jD,lxo),e(t2,ixo),e(q,dxo),e(q,a2),e(a2,Bce),e(Bce,cxo),e(a2,fxo),e(a2,DD),e(DD,mxo),e(a2,gxo),e(Ze,hxo),e(Ze,n2),e(n2,pxo),e(n2,Pce),e(Pce,uxo),e(n2,_xo),e(n2,Ice),e(Ice,bxo),e(Ze,vxo),M(s2,Ze,null),b(f,SPe,_),b(f,ji,_),e(ji,l2),e(l2,qce),M(Xw,qce,null),e(ji,Fxo),e(ji,Nce),e(Nce,Txo),b(f,RPe,_),b(f,Bo,_),M(zw,Bo,null),e(Bo,Mxo),e(Bo,Di),e(Di,Exo),e(Di,GD),e(GD,Cxo),e(Di,wxo),e(Di,OD),e(OD,Axo),e(Di,yxo),e(Bo,Lxo),e(Bo,Qw),e(Qw,xxo),e(Qw,jce),e(jce,$xo),e(Qw,kxo),e(Bo,Sxo),e(Bo,lt),M(Ww,lt,null),e(lt,Rxo),e(lt,Dce),e(Dce,Bxo),e(lt,Pxo),e(lt,Gi),e(Gi,Ixo),e(Gi,Gce),e(Gce,qxo),e(Gi,Nxo),e(Gi,VD),e(VD,jxo),e(Gi,Dxo),e(lt,Gxo),M(i2,lt,null),e(Bo,Oxo),e(Bo,eo),M(Hw,eo,null),e(eo,Vxo),e(eo,Oce),e(Oce,Xxo),e(eo,zxo),e(eo,Sa),e(Sa,Qxo),e(Sa,Vce),e(Vce,Wxo),e(Sa,Hxo),e(Sa,Xce),e(Xce,Uxo),e(Sa,Jxo),e(Sa,zce),e(zce,Yxo),e(Sa,Kxo),e(eo,Zxo),e(eo,Y),e(Y,d2),e(d2,Qce),e(Qce,e$o),e(d2,o$o),e(d2,XD),e(XD,r$o),e(d2,t$o),e(Y,a$o),e(Y,c2),e(c2,Wce),e(Wce,n$o),e(c2,s$o),e(c2,zD),e(zD,l$o),e(c2,i$o),e(Y,d$o),e(Y,f2),e(f2,Hce),e(Hce,c$o),e(f2,f$o),e(f2,QD),e(QD,m$o),e(f2,g$o),e(Y,h$o),e(Y,m2),e(m2,Uce),e(Uce,p$o),e(m2,u$o),e(m2,WD),e(WD,_$o),e(m2,b$o),e(Y,v$o),e(Y,g2),e(g2,Jce),e(Jce,F$o),e(g2,T$o),e(g2,HD),e(HD,M$o),e(g2,E$o),e(Y,C$o),e(Y,h2),e(h2,Yce),e(Yce,w$o),e(h2,A$o),e(h2,UD),e(UD,y$o),e(h2,L$o),e(Y,x$o),e(Y,p2),e(p2,Kce),e(Kce,$$o),e(p2,k$o),e(p2,JD),e(JD,S$o),e(p2,R$o),e(Y,B$o),e(Y,u2),e(u2,Zce),e(Zce,P$o),e(u2,I$o),e(u2,YD),e(YD,q$o),e(u2,N$o),e(Y,j$o),e(Y,_2),e(_2,efe),e(efe,D$o),e(_2,G$o),e(_2,KD),e(KD,O$o),e(_2,V$o),e(Y,X$o),e(Y,b2),e(b2,ofe),e(ofe,z$o),e(b2,Q$o),e(b2,ZD),e(ZD,W$o),e(b2,H$o),e(Y,U$o),e(Y,v2),e(v2,rfe),e(rfe,J$o),e(v2,Y$o),e(v2,eG),e(eG,K$o),e(v2,Z$o),e(Y,eko),e(Y,F2),e(F2,tfe),e(tfe,oko),e(F2,rko),e(F2,oG),e(oG,tko),e(F2,ako),e(Y,nko),e(Y,T2),e(T2,afe),e(afe,sko),e(T2,lko),e(T2,rG),e(rG,iko),e(T2,dko),e(Y,cko),e(Y,M2),e(M2,nfe),e(nfe,fko),e(M2,mko),e(M2,tG),e(tG,gko),e(M2,hko),e(Y,pko),e(Y,E2),e(E2,sfe),e(sfe,uko),e(E2,_ko),e(E2,aG),e(aG,bko),e(E2,vko),e(Y,Fko),e(Y,C2),e(C2,lfe),e(lfe,Tko),e(C2,Mko),e(C2,nG),e(nG,Eko),e(C2,Cko),e(Y,wko),e(Y,w2),e(w2,ife),e(ife,Ako),e(w2,yko),e(w2,sG),e(sG,Lko),e(w2,xko),e(Y,$ko),e(Y,A2),e(A2,dfe),e(dfe,kko),e(A2,Sko),e(A2,lG),e(lG,Rko),e(A2,Bko),e(Y,Pko),e(Y,y2),e(y2,cfe),e(cfe,Iko),e(y2,qko),e(y2,iG),e(iG,Nko),e(y2,jko),e(Y,Dko),e(Y,L2),e(L2,ffe),e(ffe,Gko),e(L2,Oko),e(L2,dG),e(dG,Vko),e(L2,Xko),e(Y,zko),e(Y,x2),e(x2,mfe),e(mfe,Qko),e(x2,Wko),e(x2,cG),e(cG,Hko),e(x2,Uko),e(Y,Jko),e(Y,$2),e($2,gfe),e(gfe,Yko),e($2,Kko),e($2,fG),e(fG,Zko),e($2,eSo),e(Y,oSo),e(Y,k2),e(k2,hfe),e(hfe,rSo),e(k2,tSo),e(k2,mG),e(mG,aSo),e(k2,nSo),e(Y,sSo),e(Y,S2),e(S2,pfe),e(pfe,lSo),e(S2,iSo),e(S2,gG),e(gG,dSo),e(S2,cSo),e(Y,fSo),e(Y,R2),e(R2,ufe),e(ufe,mSo),e(R2,gSo),e(R2,hG),e(hG,hSo),e(R2,pSo),e(Y,uSo),e(Y,B2),e(B2,_fe),e(_fe,_So),e(B2,bSo),e(B2,pG),e(pG,vSo),e(B2,FSo),e(Y,TSo),e(Y,P2),e(P2,bfe),e(bfe,MSo),e(P2,ESo),e(P2,uG),e(uG,CSo),e(P2,wSo),e(Y,ASo),e(Y,I2),e(I2,vfe),e(vfe,ySo),e(I2,LSo),e(I2,_G),e(_G,xSo),e(I2,$So),e(Y,kSo),e(Y,q2),e(q2,Ffe),e(Ffe,SSo),e(q2,RSo),e(q2,bG),e(bG,BSo),e(q2,PSo),e(eo,ISo),e(eo,N2),e(N2,qSo),e(N2,Tfe),e(Tfe,NSo),e(N2,jSo),e(N2,Mfe),e(Mfe,DSo),e(eo,GSo),M(j2,eo,null),b(f,BPe,_),b(f,Oi,_),e(Oi,D2),e(D2,Efe),M(Uw,Efe,null),e(Oi,OSo),e(Oi,Cfe),e(Cfe,VSo),b(f,PPe,_),b(f,Po,_),M(Jw,Po,null),e(Po,XSo),e(Po,Vi),e(Vi,zSo),e(Vi,vG),e(vG,QSo),e(Vi,WSo),e(Vi,FG),e(FG,HSo),e(Vi,USo),e(Po,JSo),e(Po,Yw),e(Yw,YSo),e(Yw,wfe),e(wfe,KSo),e(Yw,ZSo),e(Po,eRo),e(Po,it),M(Kw,it,null),e(it,oRo),e(it,Afe),e(Afe,rRo),e(it,tRo),e(it,Xi),e(Xi,aRo),e(Xi,yfe),e(yfe,nRo),e(Xi,sRo),e(Xi,TG),e(TG,lRo),e(Xi,iRo),e(it,dRo),M(G2,it,null),e(Po,cRo),e(Po,oo),M(Zw,oo,null),e(oo,fRo),e(oo,Lfe),e(Lfe,mRo),e(oo,gRo),e(oo,Ra),e(Ra,hRo),e(Ra,xfe),e(xfe,pRo),e(Ra,uRo),e(Ra,$fe),e($fe,_Ro),e(Ra,bRo),e(Ra,kfe),e(kfe,vRo),e(Ra,FRo),e(oo,TRo),e(oo,Yr),e(Yr,O2),e(O2,Sfe),e(Sfe,MRo),e(O2,ERo),e(O2,MG),e(MG,CRo),e(O2,wRo),e(Yr,ARo),e(Yr,V2),e(V2,Rfe),e(Rfe,yRo),e(V2,LRo),e(V2,EG),e(EG,xRo),e(V2,$Ro),e(Yr,kRo),e(Yr,X2),e(X2,Bfe),e(Bfe,SRo),e(X2,RRo),e(X2,CG),e(CG,BRo),e(X2,PRo),e(Yr,IRo),e(Yr,z2),e(z2,Pfe),e(Pfe,qRo),e(z2,NRo),e(z2,wG),e(wG,jRo),e(z2,DRo),e(Yr,GRo),e(Yr,Q2),e(Q2,Ife),e(Ife,ORo),e(Q2,VRo),e(Q2,AG),e(AG,XRo),e(Q2,zRo),e(oo,QRo),e(oo,W2),e(W2,WRo),e(W2,qfe),e(qfe,HRo),e(W2,URo),e(W2,Nfe),e(Nfe,JRo),e(oo,YRo),M(H2,oo,null),b(f,IPe,_),b(f,zi,_),e(zi,U2),e(U2,jfe),M(eA,jfe,null),e(zi,KRo),e(zi,Dfe),e(Dfe,ZRo),b(f,qPe,_),b(f,Io,_),M(oA,Io,null),e(Io,eBo),e(Io,Qi),e(Qi,oBo),e(Qi,yG),e(yG,rBo),e(Qi,tBo),e(Qi,LG),e(LG,aBo),e(Qi,nBo),e(Io,sBo),e(Io,rA),e(rA,lBo),e(rA,Gfe),e(Gfe,iBo),e(rA,dBo),e(Io,cBo),e(Io,dt),M(tA,dt,null),e(dt,fBo),e(dt,Ofe),e(Ofe,mBo),e(dt,gBo),e(dt,Wi),e(Wi,hBo),e(Wi,Vfe),e(Vfe,pBo),e(Wi,uBo),e(Wi,xG),e(xG,_Bo),e(Wi,bBo),e(dt,vBo),M(J2,dt,null),e(Io,FBo),e(Io,ro),M(aA,ro,null),e(ro,TBo),e(ro,Xfe),e(Xfe,MBo),e(ro,EBo),e(ro,Ba),e(Ba,CBo),e(Ba,zfe),e(zfe,wBo),e(Ba,ABo),e(Ba,Qfe),e(Qfe,yBo),e(Ba,LBo),e(Ba,Wfe),e(Wfe,xBo),e(Ba,$Bo),e(ro,kBo),e(ro,U),e(U,Y2),e(Y2,Hfe),e(Hfe,SBo),e(Y2,RBo),e(Y2,$G),e($G,BBo),e(Y2,PBo),e(U,IBo),e(U,K2),e(K2,Ufe),e(Ufe,qBo),e(K2,NBo),e(K2,kG),e(kG,jBo),e(K2,DBo),e(U,GBo),e(U,Z2),e(Z2,Jfe),e(Jfe,OBo),e(Z2,VBo),e(Z2,SG),e(SG,XBo),e(Z2,zBo),e(U,QBo),e(U,ev),e(ev,Yfe),e(Yfe,WBo),e(ev,HBo),e(ev,RG),e(RG,UBo),e(ev,JBo),e(U,YBo),e(U,ov),e(ov,Kfe),e(Kfe,KBo),e(ov,ZBo),e(ov,BG),e(BG,ePo),e(ov,oPo),e(U,rPo),e(U,rv),e(rv,Zfe),e(Zfe,tPo),e(rv,aPo),e(rv,PG),e(PG,nPo),e(rv,sPo),e(U,lPo),e(U,tv),e(tv,eme),e(eme,iPo),e(tv,dPo),e(tv,IG),e(IG,cPo),e(tv,fPo),e(U,mPo),e(U,av),e(av,ome),e(ome,gPo),e(av,hPo),e(av,qG),e(qG,pPo),e(av,uPo),e(U,_Po),e(U,nv),e(nv,rme),e(rme,bPo),e(nv,vPo),e(nv,NG),e(NG,FPo),e(nv,TPo),e(U,MPo),e(U,sv),e(sv,tme),e(tme,EPo),e(sv,CPo),e(sv,jG),e(jG,wPo),e(sv,APo),e(U,yPo),e(U,lv),e(lv,ame),e(ame,LPo),e(lv,xPo),e(lv,DG),e(DG,$Po),e(lv,kPo),e(U,SPo),e(U,iv),e(iv,nme),e(nme,RPo),e(iv,BPo),e(iv,GG),e(GG,PPo),e(iv,IPo),e(U,qPo),e(U,dv),e(dv,sme),e(sme,NPo),e(dv,jPo),e(dv,OG),e(OG,DPo),e(dv,GPo),e(U,OPo),e(U,cv),e(cv,lme),e(lme,VPo),e(cv,XPo),e(cv,VG),e(VG,zPo),e(cv,QPo),e(U,WPo),e(U,fv),e(fv,ime),e(ime,HPo),e(fv,UPo),e(fv,XG),e(XG,JPo),e(fv,YPo),e(U,KPo),e(U,mv),e(mv,dme),e(dme,ZPo),e(mv,eIo),e(mv,zG),e(zG,oIo),e(mv,rIo),e(U,tIo),e(U,gv),e(gv,cme),e(cme,aIo),e(gv,nIo),e(gv,QG),e(QG,sIo),e(gv,lIo),e(U,iIo),e(U,hv),e(hv,fme),e(fme,dIo),e(hv,cIo),e(hv,WG),e(WG,fIo),e(hv,mIo),e(U,gIo),e(U,pv),e(pv,mme),e(mme,hIo),e(pv,pIo),e(pv,HG),e(HG,uIo),e(pv,_Io),e(U,bIo),e(U,uv),e(uv,gme),e(gme,vIo),e(uv,FIo),e(uv,UG),e(UG,TIo),e(uv,MIo),e(U,EIo),e(U,_v),e(_v,hme),e(hme,CIo),e(_v,wIo),e(_v,JG),e(JG,AIo),e(_v,yIo),e(U,LIo),e(U,bv),e(bv,pme),e(pme,xIo),e(bv,$Io),e(bv,YG),e(YG,kIo),e(bv,SIo),e(U,RIo),e(U,vv),e(vv,ume),e(ume,BIo),e(vv,PIo),e(vv,KG),e(KG,IIo),e(vv,qIo),e(U,NIo),e(U,Fv),e(Fv,_me),e(_me,jIo),e(Fv,DIo),e(Fv,ZG),e(ZG,GIo),e(Fv,OIo),e(U,VIo),e(U,Tv),e(Tv,bme),e(bme,XIo),e(Tv,zIo),e(Tv,eO),e(eO,QIo),e(Tv,WIo),e(U,HIo),e(U,Mv),e(Mv,vme),e(vme,UIo),e(Mv,JIo),e(Mv,oO),e(oO,YIo),e(Mv,KIo),e(U,ZIo),e(U,Ev),e(Ev,Fme),e(Fme,eqo),e(Ev,oqo),e(Ev,rO),e(rO,rqo),e(Ev,tqo),e(U,aqo),e(U,Cv),e(Cv,Tme),e(Tme,nqo),e(Cv,sqo),e(Cv,tO),e(tO,lqo),e(Cv,iqo),e(U,dqo),e(U,wv),e(wv,Mme),e(Mme,cqo),e(wv,fqo),e(wv,aO),e(aO,mqo),e(wv,gqo),e(U,hqo),e(U,Av),e(Av,Eme),e(Eme,pqo),e(Av,uqo),e(Av,nO),e(nO,_qo),e(Av,bqo),e(U,vqo),e(U,yv),e(yv,Cme),e(Cme,Fqo),e(yv,Tqo),e(yv,sO),e(sO,Mqo),e(yv,Eqo),e(U,Cqo),e(U,Lv),e(Lv,wme),e(wme,wqo),e(Lv,Aqo),e(Lv,lO),e(lO,yqo),e(Lv,Lqo),e(U,xqo),e(U,xv),e(xv,Ame),e(Ame,$qo),e(xv,kqo),e(xv,iO),e(iO,Sqo),e(xv,Rqo),e(ro,Bqo),e(ro,$v),e($v,Pqo),e($v,yme),e(yme,Iqo),e($v,qqo),e($v,Lme),e(Lme,Nqo),e(ro,jqo),M(kv,ro,null),b(f,NPe,_),b(f,Hi,_),e(Hi,Sv),e(Sv,xme),M(nA,xme,null),e(Hi,Dqo),e(Hi,$me),e($me,Gqo),b(f,jPe,_),b(f,qo,_),M(sA,qo,null),e(qo,Oqo),e(qo,Ui),e(Ui,Vqo),e(Ui,dO),e(dO,Xqo),e(Ui,zqo),e(Ui,cO),e(cO,Qqo),e(Ui,Wqo),e(qo,Hqo),e(qo,lA),e(lA,Uqo),e(lA,kme),e(kme,Jqo),e(lA,Yqo),e(qo,Kqo),e(qo,ct),M(iA,ct,null),e(ct,Zqo),e(ct,Sme),e(Sme,eNo),e(ct,oNo),e(ct,Ji),e(Ji,rNo),e(Ji,Rme),e(Rme,tNo),e(Ji,aNo),e(Ji,fO),e(fO,nNo),e(Ji,sNo),e(ct,lNo),M(Rv,ct,null),e(qo,iNo),e(qo,to),M(dA,to,null),e(to,dNo),e(to,Bme),e(Bme,cNo),e(to,fNo),e(to,Pa),e(Pa,mNo),e(Pa,Pme),e(Pme,gNo),e(Pa,hNo),e(Pa,Ime),e(Ime,pNo),e(Pa,uNo),e(Pa,qme),e(qme,_No),e(Pa,bNo),e(to,vNo),e(to,O),e(O,Bv),e(Bv,Nme),e(Nme,FNo),e(Bv,TNo),e(Bv,mO),e(mO,MNo),e(Bv,ENo),e(O,CNo),e(O,Pv),e(Pv,jme),e(jme,wNo),e(Pv,ANo),e(Pv,gO),e(gO,yNo),e(Pv,LNo),e(O,xNo),e(O,Iv),e(Iv,Dme),e(Dme,$No),e(Iv,kNo),e(Iv,hO),e(hO,SNo),e(Iv,RNo),e(O,BNo),e(O,qv),e(qv,Gme),e(Gme,PNo),e(qv,INo),e(qv,pO),e(pO,qNo),e(qv,NNo),e(O,jNo),e(O,Nv),e(Nv,Ome),e(Ome,DNo),e(Nv,GNo),e(Nv,uO),e(uO,ONo),e(Nv,VNo),e(O,XNo),e(O,jv),e(jv,Vme),e(Vme,zNo),e(jv,QNo),e(jv,_O),e(_O,WNo),e(jv,HNo),e(O,UNo),e(O,Dv),e(Dv,Xme),e(Xme,JNo),e(Dv,YNo),e(Dv,bO),e(bO,KNo),e(Dv,ZNo),e(O,ejo),e(O,Gv),e(Gv,zme),e(zme,ojo),e(Gv,rjo),e(Gv,vO),e(vO,tjo),e(Gv,ajo),e(O,njo),e(O,Ov),e(Ov,Qme),e(Qme,sjo),e(Ov,ljo),e(Ov,FO),e(FO,ijo),e(Ov,djo),e(O,cjo),e(O,Vv),e(Vv,Wme),e(Wme,fjo),e(Vv,mjo),e(Vv,TO),e(TO,gjo),e(Vv,hjo),e(O,pjo),e(O,Xv),e(Xv,Hme),e(Hme,ujo),e(Xv,_jo),e(Xv,MO),e(MO,bjo),e(Xv,vjo),e(O,Fjo),e(O,zv),e(zv,Ume),e(Ume,Tjo),e(zv,Mjo),e(zv,EO),e(EO,Ejo),e(zv,Cjo),e(O,wjo),e(O,Qv),e(Qv,Jme),e(Jme,Ajo),e(Qv,yjo),e(Qv,CO),e(CO,Ljo),e(Qv,xjo),e(O,$jo),e(O,Wv),e(Wv,Yme),e(Yme,kjo),e(Wv,Sjo),e(Wv,wO),e(wO,Rjo),e(Wv,Bjo),e(O,Pjo),e(O,Hv),e(Hv,Kme),e(Kme,Ijo),e(Hv,qjo),e(Hv,AO),e(AO,Njo),e(Hv,jjo),e(O,Djo),e(O,Uv),e(Uv,Zme),e(Zme,Gjo),e(Uv,Ojo),e(Uv,yO),e(yO,Vjo),e(Uv,Xjo),e(O,zjo),e(O,Jv),e(Jv,ege),e(ege,Qjo),e(Jv,Wjo),e(Jv,LO),e(LO,Hjo),e(Jv,Ujo),e(O,Jjo),e(O,Yv),e(Yv,oge),e(oge,Yjo),e(Yv,Kjo),e(Yv,xO),e(xO,Zjo),e(Yv,eDo),e(O,oDo),e(O,Kv),e(Kv,rge),e(rge,rDo),e(Kv,tDo),e(Kv,$O),e($O,aDo),e(Kv,nDo),e(O,sDo),e(O,Zv),e(Zv,tge),e(tge,lDo),e(Zv,iDo),e(Zv,kO),e(kO,dDo),e(Zv,cDo),e(O,fDo),e(O,eF),e(eF,age),e(age,mDo),e(eF,gDo),e(eF,SO),e(SO,hDo),e(eF,pDo),e(O,uDo),e(O,oF),e(oF,nge),e(nge,_Do),e(oF,bDo),e(oF,RO),e(RO,vDo),e(oF,FDo),e(O,TDo),e(O,rF),e(rF,sge),e(sge,MDo),e(rF,EDo),e(rF,BO),e(BO,CDo),e(rF,wDo),e(O,ADo),e(O,tF),e(tF,lge),e(lge,yDo),e(tF,LDo),e(tF,PO),e(PO,xDo),e(tF,$Do),e(O,kDo),e(O,aF),e(aF,ige),e(ige,SDo),e(aF,RDo),e(aF,IO),e(IO,BDo),e(aF,PDo),e(O,IDo),e(O,nF),e(nF,dge),e(dge,qDo),e(nF,NDo),e(nF,qO),e(qO,jDo),e(nF,DDo),e(O,GDo),e(O,sF),e(sF,cge),e(cge,ODo),e(sF,VDo),e(sF,NO),e(NO,XDo),e(sF,zDo),e(O,QDo),e(O,lF),e(lF,fge),e(fge,WDo),e(lF,HDo),e(lF,jO),e(jO,UDo),e(lF,JDo),e(O,YDo),e(O,iF),e(iF,mge),e(mge,KDo),e(iF,ZDo),e(iF,DO),e(DO,eGo),e(iF,oGo),e(O,rGo),e(O,dF),e(dF,gge),e(gge,tGo),e(dF,aGo),e(dF,GO),e(GO,nGo),e(dF,sGo),e(O,lGo),e(O,cF),e(cF,hge),e(hge,iGo),e(cF,dGo),e(cF,OO),e(OO,cGo),e(cF,fGo),e(O,mGo),e(O,fF),e(fF,pge),e(pge,gGo),e(fF,hGo),e(fF,VO),e(VO,pGo),e(fF,uGo),e(O,_Go),e(O,mF),e(mF,uge),e(uge,bGo),e(mF,vGo),e(mF,XO),e(XO,FGo),e(mF,TGo),e(O,MGo),e(O,gF),e(gF,_ge),e(_ge,EGo),e(gF,CGo),e(gF,zO),e(zO,wGo),e(gF,AGo),e(O,yGo),e(O,hF),e(hF,bge),e(bge,LGo),e(hF,xGo),e(hF,QO),e(QO,$Go),e(hF,kGo),e(O,SGo),e(O,pF),e(pF,vge),e(vge,RGo),e(pF,BGo),e(pF,WO),e(WO,PGo),e(pF,IGo),e(O,qGo),e(O,uF),e(uF,Fge),e(Fge,NGo),e(uF,jGo),e(uF,HO),e(HO,DGo),e(uF,GGo),e(O,OGo),e(O,_F),e(_F,Tge),e(Tge,VGo),e(_F,XGo),e(_F,UO),e(UO,zGo),e(_F,QGo),e(O,WGo),e(O,bF),e(bF,Mge),e(Mge,HGo),e(bF,UGo),e(bF,JO),e(JO,JGo),e(bF,YGo),e(to,KGo),e(to,vF),e(vF,ZGo),e(vF,Ege),e(Ege,eOo),e(vF,oOo),e(vF,Cge),e(Cge,rOo),e(to,tOo),M(FF,to,null),b(f,DPe,_),b(f,Yi,_),e(Yi,TF),e(TF,wge),M(cA,wge,null),e(Yi,aOo),e(Yi,Age),e(Age,nOo),b(f,GPe,_),b(f,No,_),M(fA,No,null),e(No,sOo),e(No,Ki),e(Ki,lOo),e(Ki,YO),e(YO,iOo),e(Ki,dOo),e(Ki,KO),e(KO,cOo),e(Ki,fOo),e(No,mOo),e(No,mA),e(mA,gOo),e(mA,yge),e(yge,hOo),e(mA,pOo),e(No,uOo),e(No,ft),M(gA,ft,null),e(ft,_Oo),e(ft,Lge),e(Lge,bOo),e(ft,vOo),e(ft,Zi),e(Zi,FOo),e(Zi,xge),e(xge,TOo),e(Zi,MOo),e(Zi,ZO),e(ZO,EOo),e(Zi,COo),e(ft,wOo),M(MF,ft,null),e(No,AOo),e(No,ao),M(hA,ao,null),e(ao,yOo),e(ao,$ge),e($ge,LOo),e(ao,xOo),e(ao,Ia),e(Ia,$Oo),e(Ia,kge),e(kge,kOo),e(Ia,SOo),e(Ia,Sge),e(Sge,ROo),e(Ia,BOo),e(Ia,Rge),e(Rge,POo),e(Ia,IOo),e(ao,qOo),e(ao,Bge),e(Bge,EF),e(EF,Pge),e(Pge,NOo),e(EF,jOo),e(EF,eV),e(eV,DOo),e(EF,GOo),e(ao,OOo),e(ao,CF),e(CF,VOo),e(CF,Ige),e(Ige,XOo),e(CF,zOo),e(CF,qge),e(qge,QOo),e(ao,WOo),M(wF,ao,null),b(f,OPe,_),b(f,ed,_),e(ed,AF),e(AF,Nge),M(pA,Nge,null),e(ed,HOo),e(ed,jge),e(jge,UOo),b(f,VPe,_),b(f,jo,_),M(uA,jo,null),e(jo,JOo),e(jo,od),e(od,YOo),e(od,oV),e(oV,KOo),e(od,ZOo),e(od,rV),e(rV,eVo),e(od,oVo),e(jo,rVo),e(jo,_A),e(_A,tVo),e(_A,Dge),e(Dge,aVo),e(_A,nVo),e(jo,sVo),e(jo,mt),M(bA,mt,null),e(mt,lVo),e(mt,Gge),e(Gge,iVo),e(mt,dVo),e(mt,rd),e(rd,cVo),e(rd,Oge),e(Oge,fVo),e(rd,mVo),e(rd,tV),e(tV,gVo),e(rd,hVo),e(mt,pVo),M(yF,mt,null),e(jo,uVo),e(jo,no),M(vA,no,null),e(no,_Vo),e(no,Vge),e(Vge,bVo),e(no,vVo),e(no,qa),e(qa,FVo),e(qa,Xge),e(Xge,TVo),e(qa,MVo),e(qa,zge),e(zge,EVo),e(qa,CVo),e(qa,Qge),e(Qge,wVo),e(qa,AVo),e(no,yVo),e(no,ve),e(ve,LF),e(LF,Wge),e(Wge,LVo),e(LF,xVo),e(LF,aV),e(aV,$Vo),e(LF,kVo),e(ve,SVo),e(ve,xF),e(xF,Hge),e(Hge,RVo),e(xF,BVo),e(xF,nV),e(nV,PVo),e(xF,IVo),e(ve,qVo),e(ve,$F),e($F,Uge),e(Uge,NVo),e($F,jVo),e($F,sV),e(sV,DVo),e($F,GVo),e(ve,OVo),e(ve,Rs),e(Rs,Jge),e(Jge,VVo),e(Rs,XVo),e(Rs,lV),e(lV,zVo),e(Rs,QVo),e(Rs,iV),e(iV,WVo),e(Rs,HVo),e(ve,UVo),e(ve,kF),e(kF,Yge),e(Yge,JVo),e(kF,YVo),e(kF,dV),e(dV,KVo),e(kF,ZVo),e(ve,eXo),e(ve,gt),e(gt,Kge),e(Kge,oXo),e(gt,rXo),e(gt,cV),e(cV,tXo),e(gt,aXo),e(gt,fV),e(fV,nXo),e(gt,sXo),e(gt,mV),e(mV,lXo),e(gt,iXo),e(ve,dXo),e(ve,SF),e(SF,Zge),e(Zge,cXo),e(SF,fXo),e(SF,gV),e(gV,mXo),e(SF,gXo),e(ve,hXo),e(ve,RF),e(RF,ehe),e(ehe,pXo),e(RF,uXo),e(RF,hV),e(hV,_Xo),e(RF,bXo),e(ve,vXo),e(ve,BF),e(BF,ohe),e(ohe,FXo),e(BF,TXo),e(BF,pV),e(pV,MXo),e(BF,EXo),e(ve,CXo),e(ve,PF),e(PF,rhe),e(rhe,wXo),e(PF,AXo),e(PF,uV),e(uV,yXo),e(PF,LXo),e(ve,xXo),e(ve,IF),e(IF,the),e(the,$Xo),e(IF,kXo),e(IF,_V),e(_V,SXo),e(IF,RXo),e(ve,BXo),e(ve,qF),e(qF,ahe),e(ahe,PXo),e(qF,IXo),e(qF,bV),e(bV,qXo),e(qF,NXo),e(ve,jXo),e(ve,NF),e(NF,nhe),e(nhe,DXo),e(NF,GXo),e(NF,vV),e(vV,OXo),e(NF,VXo),e(no,XXo),e(no,jF),e(jF,zXo),e(jF,she),e(she,QXo),e(jF,WXo),e(jF,lhe),e(lhe,HXo),e(no,UXo),M(DF,no,null),b(f,XPe,_),b(f,td,_),e(td,GF),e(GF,ihe),M(FA,ihe,null),e(td,JXo),e(td,dhe),e(dhe,YXo),b(f,zPe,_),b(f,Do,_),M(TA,Do,null),e(Do,KXo),e(Do,ad),e(ad,ZXo),e(ad,FV),e(FV,ezo),e(ad,ozo),e(ad,TV),e(TV,rzo),e(ad,tzo),e(Do,azo),e(Do,MA),e(MA,nzo),e(MA,che),e(che,szo),e(MA,lzo),e(Do,izo),e(Do,ht),M(EA,ht,null),e(ht,dzo),e(ht,fhe),e(fhe,czo),e(ht,fzo),e(ht,nd),e(nd,mzo),e(nd,mhe),e(mhe,gzo),e(nd,hzo),e(nd,MV),e(MV,pzo),e(nd,uzo),e(ht,_zo),M(OF,ht,null),e(Do,bzo),e(Do,so),M(CA,so,null),e(so,vzo),e(so,ghe),e(ghe,Fzo),e(so,Tzo),e(so,Na),e(Na,Mzo),e(Na,hhe),e(hhe,Ezo),e(Na,Czo),e(Na,phe),e(phe,wzo),e(Na,Azo),e(Na,uhe),e(uhe,yzo),e(Na,Lzo),e(so,xzo),e(so,_he),e(_he,VF),e(VF,bhe),e(bhe,$zo),e(VF,kzo),e(VF,EV),e(EV,Szo),e(VF,Rzo),e(so,Bzo),e(so,XF),e(XF,Pzo),e(XF,vhe),e(vhe,Izo),e(XF,qzo),e(XF,Fhe),e(Fhe,Nzo),e(so,jzo),M(zF,so,null),b(f,QPe,_),b(f,sd,_),e(sd,QF),e(QF,The),M(wA,The,null),e(sd,Dzo),e(sd,Mhe),e(Mhe,Gzo),b(f,WPe,_),b(f,Go,_),M(AA,Go,null),e(Go,Ozo),e(Go,ld),e(ld,Vzo),e(ld,CV),e(CV,Xzo),e(ld,zzo),e(ld,wV),e(wV,Qzo),e(ld,Wzo),e(Go,Hzo),e(Go,yA),e(yA,Uzo),e(yA,Ehe),e(Ehe,Jzo),e(yA,Yzo),e(Go,Kzo),e(Go,pt),M(LA,pt,null),e(pt,Zzo),e(pt,Che),e(Che,eQo),e(pt,oQo),e(pt,id),e(id,rQo),e(id,whe),e(whe,tQo),e(id,aQo),e(id,AV),e(AV,nQo),e(id,sQo),e(pt,lQo),M(WF,pt,null),e(Go,iQo),e(Go,lo),M(xA,lo,null),e(lo,dQo),e(lo,Ahe),e(Ahe,cQo),e(lo,fQo),e(lo,ja),e(ja,mQo),e(ja,yhe),e(yhe,gQo),e(ja,hQo),e(ja,Lhe),e(Lhe,pQo),e(ja,uQo),e(ja,xhe),e(xhe,_Qo),e(ja,bQo),e(lo,vQo),e(lo,Ne),e(Ne,HF),e(HF,$he),e($he,FQo),e(HF,TQo),e(HF,yV),e(yV,MQo),e(HF,EQo),e(Ne,CQo),e(Ne,UF),e(UF,khe),e(khe,wQo),e(UF,AQo),e(UF,LV),e(LV,yQo),e(UF,LQo),e(Ne,xQo),e(Ne,JF),e(JF,She),e(She,$Qo),e(JF,kQo),e(JF,xV),e(xV,SQo),e(JF,RQo),e(Ne,BQo),e(Ne,YF),e(YF,Rhe),e(Rhe,PQo),e(YF,IQo),e(YF,$V),e($V,qQo),e(YF,NQo),e(Ne,jQo),e(Ne,KF),e(KF,Bhe),e(Bhe,DQo),e(KF,GQo),e(KF,kV),e(kV,OQo),e(KF,VQo),e(Ne,XQo),e(Ne,ZF),e(ZF,Phe),e(Phe,zQo),e(ZF,QQo),e(ZF,SV),e(SV,WQo),e(ZF,HQo),e(Ne,UQo),e(Ne,e0),e(e0,Ihe),e(Ihe,JQo),e(e0,YQo),e(e0,RV),e(RV,KQo),e(e0,ZQo),e(Ne,eWo),e(Ne,o0),e(o0,qhe),e(qhe,oWo),e(o0,rWo),e(o0,BV),e(BV,tWo),e(o0,aWo),e(lo,nWo),e(lo,r0),e(r0,sWo),e(r0,Nhe),e(Nhe,lWo),e(r0,iWo),e(r0,jhe),e(jhe,dWo),e(lo,cWo),M(t0,lo,null),b(f,HPe,_),b(f,dd,_),e(dd,a0),e(a0,Dhe),M($A,Dhe,null),e(dd,fWo),e(dd,Ghe),e(Ghe,mWo),b(f,UPe,_),b(f,Oo,_),M(kA,Oo,null),e(Oo,gWo),e(Oo,cd),e(cd,hWo),e(cd,PV),e(PV,pWo),e(cd,uWo),e(cd,IV),e(IV,_Wo),e(cd,bWo),e(Oo,vWo),e(Oo,SA),e(SA,FWo),e(SA,Ohe),e(Ohe,TWo),e(SA,MWo),e(Oo,EWo),e(Oo,ut),M(RA,ut,null),e(ut,CWo),e(ut,Vhe),e(Vhe,wWo),e(ut,AWo),e(ut,fd),e(fd,yWo),e(fd,Xhe),e(Xhe,LWo),e(fd,xWo),e(fd,qV),e(qV,$Wo),e(fd,kWo),e(ut,SWo),M(n0,ut,null),e(Oo,RWo),e(Oo,io),M(BA,io,null),e(io,BWo),e(io,zhe),e(zhe,PWo),e(io,IWo),e(io,Da),e(Da,qWo),e(Da,Qhe),e(Qhe,NWo),e(Da,jWo),e(Da,Whe),e(Whe,DWo),e(Da,GWo),e(Da,Hhe),e(Hhe,OWo),e(Da,VWo),e(io,XWo),e(io,Ga),e(Ga,s0),e(s0,Uhe),e(Uhe,zWo),e(s0,QWo),e(s0,NV),e(NV,WWo),e(s0,HWo),e(Ga,UWo),e(Ga,l0),e(l0,Jhe),e(Jhe,JWo),e(l0,YWo),e(l0,jV),e(jV,KWo),e(l0,ZWo),e(Ga,eHo),e(Ga,i0),e(i0,Yhe),e(Yhe,oHo),e(i0,rHo),e(i0,DV),e(DV,tHo),e(i0,aHo),e(Ga,nHo),e(Ga,d0),e(d0,Khe),e(Khe,sHo),e(d0,lHo),e(d0,GV),e(GV,iHo),e(d0,dHo),e(io,cHo),e(io,c0),e(c0,fHo),e(c0,Zhe),e(Zhe,mHo),e(c0,gHo),e(c0,epe),e(epe,hHo),e(io,pHo),M(f0,io,null),b(f,JPe,_),b(f,md,_),e(md,m0),e(m0,ope),M(PA,ope,null),e(md,uHo),e(md,rpe),e(rpe,_Ho),b(f,YPe,_),b(f,Vo,_),M(IA,Vo,null),e(Vo,bHo),e(Vo,gd),e(gd,vHo),e(gd,OV),e(OV,FHo),e(gd,THo),e(gd,VV),e(VV,MHo),e(gd,EHo),e(Vo,CHo),e(Vo,qA),e(qA,wHo),e(qA,tpe),e(tpe,AHo),e(qA,yHo),e(Vo,LHo),e(Vo,_t),M(NA,_t,null),e(_t,xHo),e(_t,ape),e(ape,$Ho),e(_t,kHo),e(_t,hd),e(hd,SHo),e(hd,npe),e(npe,RHo),e(hd,BHo),e(hd,XV),e(XV,PHo),e(hd,IHo),e(_t,qHo),M(g0,_t,null),e(Vo,NHo),e(Vo,co),M(jA,co,null),e(co,jHo),e(co,spe),e(spe,DHo),e(co,GHo),e(co,Oa),e(Oa,OHo),e(Oa,lpe),e(lpe,VHo),e(Oa,XHo),e(Oa,ipe),e(ipe,zHo),e(Oa,QHo),e(Oa,dpe),e(dpe,WHo),e(Oa,HHo),e(co,UHo),e(co,je),e(je,h0),e(h0,cpe),e(cpe,JHo),e(h0,YHo),e(h0,zV),e(zV,KHo),e(h0,ZHo),e(je,eUo),e(je,p0),e(p0,fpe),e(fpe,oUo),e(p0,rUo),e(p0,QV),e(QV,tUo),e(p0,aUo),e(je,nUo),e(je,u0),e(u0,mpe),e(mpe,sUo),e(u0,lUo),e(u0,WV),e(WV,iUo),e(u0,dUo),e(je,cUo),e(je,_0),e(_0,gpe),e(gpe,fUo),e(_0,mUo),e(_0,HV),e(HV,gUo),e(_0,hUo),e(je,pUo),e(je,b0),e(b0,hpe),e(hpe,uUo),e(b0,_Uo),e(b0,UV),e(UV,bUo),e(b0,vUo),e(je,FUo),e(je,v0),e(v0,ppe),e(ppe,TUo),e(v0,MUo),e(v0,JV),e(JV,EUo),e(v0,CUo),e(je,wUo),e(je,F0),e(F0,upe),e(upe,AUo),e(F0,yUo),e(F0,YV),e(YV,LUo),e(F0,xUo),e(je,$Uo),e(je,T0),e(T0,_pe),e(_pe,kUo),e(T0,SUo),e(T0,KV),e(KV,RUo),e(T0,BUo),e(co,PUo),e(co,M0),e(M0,IUo),e(M0,bpe),e(bpe,qUo),e(M0,NUo),e(M0,vpe),e(vpe,jUo),e(co,DUo),M(E0,co,null),b(f,KPe,_),b(f,pd,_),e(pd,C0),e(C0,Fpe),M(DA,Fpe,null),e(pd,GUo),e(pd,Tpe),e(Tpe,OUo),b(f,ZPe,_),b(f,Xo,_),M(GA,Xo,null),e(Xo,VUo),e(Xo,ud),e(ud,XUo),e(ud,ZV),e(ZV,zUo),e(ud,QUo),e(ud,eX),e(eX,WUo),e(ud,HUo),e(Xo,UUo),e(Xo,OA),e(OA,JUo),e(OA,Mpe),e(Mpe,YUo),e(OA,KUo),e(Xo,ZUo),e(Xo,bt),M(VA,bt,null),e(bt,eJo),e(bt,Epe),e(Epe,oJo),e(bt,rJo),e(bt,_d),e(_d,tJo),e(_d,Cpe),e(Cpe,aJo),e(_d,nJo),e(_d,oX),e(oX,sJo),e(_d,lJo),e(bt,iJo),M(w0,bt,null),e(Xo,dJo),e(Xo,fo),M(XA,fo,null),e(fo,cJo),e(fo,wpe),e(wpe,fJo),e(fo,mJo),e(fo,Va),e(Va,gJo),e(Va,Ape),e(Ape,hJo),e(Va,pJo),e(Va,ype),e(ype,uJo),e(Va,_Jo),e(Va,Lpe),e(Lpe,bJo),e(Va,vJo),e(fo,FJo),e(fo,zA),e(zA,A0),e(A0,xpe),e(xpe,TJo),e(A0,MJo),e(A0,rX),e(rX,EJo),e(A0,CJo),e(zA,wJo),e(zA,y0),e(y0,$pe),e($pe,AJo),e(y0,yJo),e(y0,tX),e(tX,LJo),e(y0,xJo),e(fo,$Jo),e(fo,L0),e(L0,kJo),e(L0,kpe),e(kpe,SJo),e(L0,RJo),e(L0,Spe),e(Spe,BJo),e(fo,PJo),M(x0,fo,null),b(f,eIe,_),b(f,bd,_),e(bd,$0),e($0,Rpe),M(QA,Rpe,null),e(bd,IJo),e(bd,Bpe),e(Bpe,qJo),b(f,oIe,_),b(f,zo,_),M(WA,zo,null),e(zo,NJo),e(zo,vd),e(vd,jJo),e(vd,aX),e(aX,DJo),e(vd,GJo),e(vd,nX),e(nX,OJo),e(vd,VJo),e(zo,XJo),e(zo,HA),e(HA,zJo),e(HA,Ppe),e(Ppe,QJo),e(HA,WJo),e(zo,HJo),e(zo,vt),M(UA,vt,null),e(vt,UJo),e(vt,Ipe),e(Ipe,JJo),e(vt,YJo),e(vt,Fd),e(Fd,KJo),e(Fd,qpe),e(qpe,ZJo),e(Fd,eYo),e(Fd,sX),e(sX,oYo),e(Fd,rYo),e(vt,tYo),M(k0,vt,null),e(zo,aYo),e(zo,mo),M(JA,mo,null),e(mo,nYo),e(mo,Npe),e(Npe,sYo),e(mo,lYo),e(mo,Xa),e(Xa,iYo),e(Xa,jpe),e(jpe,dYo),e(Xa,cYo),e(Xa,Dpe),e(Dpe,fYo),e(Xa,mYo),e(Xa,Gpe),e(Gpe,gYo),e(Xa,hYo),e(mo,pYo),e(mo,za),e(za,S0),e(S0,Ope),e(Ope,uYo),e(S0,_Yo),e(S0,lX),e(lX,bYo),e(S0,vYo),e(za,FYo),e(za,R0),e(R0,Vpe),e(Vpe,TYo),e(R0,MYo),e(R0,iX),e(iX,EYo),e(R0,CYo),e(za,wYo),e(za,B0),e(B0,Xpe),e(Xpe,AYo),e(B0,yYo),e(B0,dX),e(dX,LYo),e(B0,xYo),e(za,$Yo),e(za,P0),e(P0,zpe),e(zpe,kYo),e(P0,SYo),e(P0,cX),e(cX,RYo),e(P0,BYo),e(mo,PYo),e(mo,I0),e(I0,IYo),e(I0,Qpe),e(Qpe,qYo),e(I0,NYo),e(I0,Wpe),e(Wpe,jYo),e(mo,DYo),M(q0,mo,null),b(f,rIe,_),b(f,Td,_),e(Td,N0),e(N0,Hpe),M(YA,Hpe,null),e(Td,GYo),e(Td,Upe),e(Upe,OYo),b(f,tIe,_),b(f,Qo,_),M(KA,Qo,null),e(Qo,VYo),e(Qo,Md),e(Md,XYo),e(Md,fX),e(fX,zYo),e(Md,QYo),e(Md,mX),e(mX,WYo),e(Md,HYo),e(Qo,UYo),e(Qo,ZA),e(ZA,JYo),e(ZA,Jpe),e(Jpe,YYo),e(ZA,KYo),e(Qo,ZYo),e(Qo,Ft),M(ey,Ft,null),e(Ft,eKo),e(Ft,Ype),e(Ype,oKo),e(Ft,rKo),e(Ft,Ed),e(Ed,tKo),e(Ed,Kpe),e(Kpe,aKo),e(Ed,nKo),e(Ed,gX),e(gX,sKo),e(Ed,lKo),e(Ft,iKo),M(j0,Ft,null),e(Qo,dKo),e(Qo,go),M(oy,go,null),e(go,cKo),e(go,Zpe),e(Zpe,fKo),e(go,mKo),e(go,Qa),e(Qa,gKo),e(Qa,eue),e(eue,hKo),e(Qa,pKo),e(Qa,oue),e(oue,uKo),e(Qa,_Ko),e(Qa,rue),e(rue,bKo),e(Qa,vKo),e(go,FKo),e(go,Cd),e(Cd,D0),e(D0,tue),e(tue,TKo),e(D0,MKo),e(D0,hX),e(hX,EKo),e(D0,CKo),e(Cd,wKo),e(Cd,G0),e(G0,aue),e(aue,AKo),e(G0,yKo),e(G0,pX),e(pX,LKo),e(G0,xKo),e(Cd,$Ko),e(Cd,O0),e(O0,nue),e(nue,kKo),e(O0,SKo),e(O0,uX),e(uX,RKo),e(O0,BKo),e(go,PKo),e(go,V0),e(V0,IKo),e(V0,sue),e(sue,qKo),e(V0,NKo),e(V0,lue),e(lue,jKo),e(go,DKo),M(X0,go,null),b(f,aIe,_),b(f,wd,_),e(wd,z0),e(z0,iue),M(ry,iue,null),e(wd,GKo),e(wd,due),e(due,OKo),b(f,nIe,_),b(f,Wo,_),M(ty,Wo,null),e(Wo,VKo),e(Wo,Ad),e(Ad,XKo),e(Ad,_X),e(_X,zKo),e(Ad,QKo),e(Ad,bX),e(bX,WKo),e(Ad,HKo),e(Wo,UKo),e(Wo,ay),e(ay,JKo),e(ay,cue),e(cue,YKo),e(ay,KKo),e(Wo,ZKo),e(Wo,Tt),M(ny,Tt,null),e(Tt,eZo),e(Tt,fue),e(fue,oZo),e(Tt,rZo),e(Tt,yd),e(yd,tZo),e(yd,mue),e(mue,aZo),e(yd,nZo),e(yd,vX),e(vX,sZo),e(yd,lZo),e(Tt,iZo),M(Q0,Tt,null),e(Wo,dZo),e(Wo,ho),M(sy,ho,null),e(ho,cZo),e(ho,gue),e(gue,fZo),e(ho,mZo),e(ho,Wa),e(Wa,gZo),e(Wa,hue),e(hue,hZo),e(Wa,pZo),e(Wa,pue),e(pue,uZo),e(Wa,_Zo),e(Wa,uue),e(uue,bZo),e(Wa,vZo),e(ho,FZo),e(ho,ly),e(ly,W0),e(W0,_ue),e(_ue,TZo),e(W0,MZo),e(W0,FX),e(FX,EZo),e(W0,CZo),e(ly,wZo),e(ly,H0),e(H0,bue),e(bue,AZo),e(H0,yZo),e(H0,TX),e(TX,LZo),e(H0,xZo),e(ho,$Zo),e(ho,U0),e(U0,kZo),e(U0,vue),e(vue,SZo),e(U0,RZo),e(U0,Fue),e(Fue,BZo),e(ho,PZo),M(J0,ho,null),b(f,sIe,_),b(f,Ld,_),e(Ld,Y0),e(Y0,Tue),M(iy,Tue,null),e(Ld,IZo),e(Ld,Mue),e(Mue,qZo),b(f,lIe,_),b(f,Ho,_),M(dy,Ho,null),e(Ho,NZo),e(Ho,xd),e(xd,jZo),e(xd,MX),e(MX,DZo),e(xd,GZo),e(xd,EX),e(EX,OZo),e(xd,VZo),e(Ho,XZo),e(Ho,cy),e(cy,zZo),e(cy,Eue),e(Eue,QZo),e(cy,WZo),e(Ho,HZo),e(Ho,Mt),M(fy,Mt,null),e(Mt,UZo),e(Mt,Cue),e(Cue,JZo),e(Mt,YZo),e(Mt,$d),e($d,KZo),e($d,wue),e(wue,ZZo),e($d,eer),e($d,CX),e(CX,oer),e($d,rer),e(Mt,ter),M(K0,Mt,null),e(Ho,aer),e(Ho,po),M(my,po,null),e(po,ner),e(po,Aue),e(Aue,ser),e(po,ler),e(po,Ha),e(Ha,ier),e(Ha,yue),e(yue,der),e(Ha,cer),e(Ha,Lue),e(Lue,fer),e(Ha,mer),e(Ha,xue),e(xue,ger),e(Ha,her),e(po,per),e(po,$ue),e($ue,Z0),e(Z0,kue),e(kue,uer),e(Z0,_er),e(Z0,wX),e(wX,ber),e(Z0,ver),e(po,Fer),e(po,e6),e(e6,Ter),e(e6,Sue),e(Sue,Mer),e(e6,Eer),e(e6,Rue),e(Rue,Cer),e(po,wer),M(o6,po,null),b(f,iIe,_),b(f,kd,_),e(kd,r6),e(r6,Bue),M(gy,Bue,null),e(kd,Aer),e(kd,Pue),e(Pue,yer),b(f,dIe,_),b(f,Uo,_),M(hy,Uo,null),e(Uo,Ler),e(Uo,Sd),e(Sd,xer),e(Sd,AX),e(AX,$er),e(Sd,ker),e(Sd,yX),e(yX,Ser),e(Sd,Rer),e(Uo,Ber),e(Uo,py),e(py,Per),e(py,Iue),e(Iue,Ier),e(py,qer),e(Uo,Ner),e(Uo,Et),M(uy,Et,null),e(Et,jer),e(Et,que),e(que,Der),e(Et,Ger),e(Et,Rd),e(Rd,Oer),e(Rd,Nue),e(Nue,Ver),e(Rd,Xer),e(Rd,LX),e(LX,zer),e(Rd,Qer),e(Et,Wer),M(t6,Et,null),e(Uo,Her),e(Uo,uo),M(_y,uo,null),e(uo,Uer),e(uo,jue),e(jue,Jer),e(uo,Yer),e(uo,Ua),e(Ua,Ker),e(Ua,Due),e(Due,Zer),e(Ua,eor),e(Ua,Gue),e(Gue,oor),e(Ua,ror),e(Ua,Oue),e(Oue,tor),e(Ua,aor),e(uo,nor),e(uo,Ja),e(Ja,a6),e(a6,Vue),e(Vue,sor),e(a6,lor),e(a6,xX),e(xX,ior),e(a6,dor),e(Ja,cor),e(Ja,n6),e(n6,Xue),e(Xue,mor),e(n6,gor),e(n6,$X),e($X,hor),e(n6,por),e(Ja,uor),e(Ja,s6),e(s6,zue),e(zue,_or),e(s6,bor),e(s6,kX),e(kX,vor),e(s6,For),e(Ja,Tor),e(Ja,l6),e(l6,Que),e(Que,Mor),e(l6,Eor),e(l6,SX),e(SX,Cor),e(l6,wor),e(uo,Aor),e(uo,i6),e(i6,yor),e(i6,Wue),e(Wue,Lor),e(i6,xor),e(i6,Hue),e(Hue,$or),e(uo,kor),M(d6,uo,null),b(f,cIe,_),b(f,Bd,_),e(Bd,c6),e(c6,Uue),M(by,Uue,null),e(Bd,Sor),e(Bd,Jue),e(Jue,Ror),b(f,fIe,_),b(f,Jo,_),M(vy,Jo,null),e(Jo,Bor),e(Jo,Pd),e(Pd,Por),e(Pd,RX),e(RX,Ior),e(Pd,qor),e(Pd,BX),e(BX,Nor),e(Pd,jor),e(Jo,Dor),e(Jo,Fy),e(Fy,Gor),e(Fy,Yue),e(Yue,Oor),e(Fy,Vor),e(Jo,Xor),e(Jo,Ct),M(Ty,Ct,null),e(Ct,zor),e(Ct,Kue),e(Kue,Qor),e(Ct,Wor),e(Ct,Id),e(Id,Hor),e(Id,Zue),e(Zue,Uor),e(Id,Jor),e(Id,PX),e(PX,Yor),e(Id,Kor),e(Ct,Zor),M(f6,Ct,null),e(Jo,err),e(Jo,_o),M(My,_o,null),e(_o,orr),e(_o,e_e),e(e_e,rrr),e(_o,trr),e(_o,Ya),e(Ya,arr),e(Ya,o_e),e(o_e,nrr),e(Ya,srr),e(Ya,r_e),e(r_e,lrr),e(Ya,irr),e(Ya,t_e),e(t_e,drr),e(Ya,crr),e(_o,frr),e(_o,a_e),e(a_e,m6),e(m6,n_e),e(n_e,mrr),e(m6,grr),e(m6,IX),e(IX,hrr),e(m6,prr),e(_o,urr),e(_o,g6),e(g6,_rr),e(g6,s_e),e(s_e,brr),e(g6,vrr),e(g6,l_e),e(l_e,Frr),e(_o,Trr),M(h6,_o,null),b(f,mIe,_),b(f,qd,_),e(qd,p6),e(p6,i_e),M(Ey,i_e,null),e(qd,Mrr),e(qd,d_e),e(d_e,Err),b(f,gIe,_),b(f,Yo,_),M(Cy,Yo,null),e(Yo,Crr),e(Yo,Nd),e(Nd,wrr),e(Nd,qX),e(qX,Arr),e(Nd,yrr),e(Nd,NX),e(NX,Lrr),e(Nd,xrr),e(Yo,$rr),e(Yo,wy),e(wy,krr),e(wy,c_e),e(c_e,Srr),e(wy,Rrr),e(Yo,Brr),e(Yo,wt),M(Ay,wt,null),e(wt,Prr),e(wt,f_e),e(f_e,Irr),e(wt,qrr),e(wt,jd),e(jd,Nrr),e(jd,m_e),e(m_e,jrr),e(jd,Drr),e(jd,jX),e(jX,Grr),e(jd,Orr),e(wt,Vrr),M(u6,wt,null),e(Yo,Xrr),e(Yo,wr),M(yy,wr,null),e(wr,zrr),e(wr,g_e),e(g_e,Qrr),e(wr,Wrr),e(wr,Ka),e(Ka,Hrr),e(Ka,h_e),e(h_e,Urr),e(Ka,Jrr),e(Ka,p_e),e(p_e,Yrr),e(Ka,Krr),e(Ka,u_e),e(u_e,Zrr),e(Ka,etr),e(wr,otr),e(wr,j),e(j,_6),e(_6,__e),e(__e,rtr),e(_6,ttr),e(_6,DX),e(DX,atr),e(_6,ntr),e(j,str),e(j,b6),e(b6,b_e),e(b_e,ltr),e(b6,itr),e(b6,GX),e(GX,dtr),e(b6,ctr),e(j,ftr),e(j,v6),e(v6,v_e),e(v_e,mtr),e(v6,gtr),e(v6,OX),e(OX,htr),e(v6,ptr),e(j,utr),e(j,F6),e(F6,F_e),e(F_e,_tr),e(F6,btr),e(F6,VX),e(VX,vtr),e(F6,Ftr),e(j,Ttr),e(j,T6),e(T6,T_e),e(T_e,Mtr),e(T6,Etr),e(T6,XX),e(XX,Ctr),e(T6,wtr),e(j,Atr),e(j,M6),e(M6,M_e),e(M_e,ytr),e(M6,Ltr),e(M6,zX),e(zX,xtr),e(M6,$tr),e(j,ktr),e(j,E6),e(E6,E_e),e(E_e,Str),e(E6,Rtr),e(E6,QX),e(QX,Btr),e(E6,Ptr),e(j,Itr),e(j,C6),e(C6,C_e),e(C_e,qtr),e(C6,Ntr),e(C6,WX),e(WX,jtr),e(C6,Dtr),e(j,Gtr),e(j,w6),e(w6,w_e),e(w_e,Otr),e(w6,Vtr),e(w6,HX),e(HX,Xtr),e(w6,ztr),e(j,Qtr),e(j,A6),e(A6,A_e),e(A_e,Wtr),e(A6,Htr),e(A6,UX),e(UX,Utr),e(A6,Jtr),e(j,Ytr),e(j,y6),e(y6,y_e),e(y_e,Ktr),e(y6,Ztr),e(y6,JX),e(JX,ear),e(y6,oar),e(j,rar),e(j,L6),e(L6,L_e),e(L_e,tar),e(L6,aar),e(L6,YX),e(YX,nar),e(L6,sar),e(j,lar),e(j,x6),e(x6,x_e),e(x_e,iar),e(x6,dar),e(x6,KX),e(KX,car),e(x6,far),e(j,mar),e(j,$6),e($6,$_e),e($_e,gar),e($6,har),e($6,ZX),e(ZX,par),e($6,uar),e(j,_ar),e(j,k6),e(k6,k_e),e(k_e,bar),e(k6,Far),e(k6,ez),e(ez,Tar),e(k6,Mar),e(j,Ear),e(j,S6),e(S6,S_e),e(S_e,Car),e(S6,war),e(S6,oz),e(oz,Aar),e(S6,yar),e(j,Lar),e(j,R6),e(R6,R_e),e(R_e,xar),e(R6,$ar),e(R6,rz),e(rz,kar),e(R6,Sar),e(j,Rar),e(j,Bs),e(Bs,B_e),e(B_e,Bar),e(Bs,Par),e(Bs,tz),e(tz,Iar),e(Bs,qar),e(Bs,az),e(az,Nar),e(Bs,jar),e(j,Dar),e(j,B6),e(B6,P_e),e(P_e,Gar),e(B6,Oar),e(B6,nz),e(nz,Var),e(B6,Xar),e(j,zar),e(j,P6),e(P6,I_e),e(I_e,Qar),e(P6,War),e(P6,sz),e(sz,Har),e(P6,Uar),e(j,Jar),e(j,I6),e(I6,q_e),e(q_e,Yar),e(I6,Kar),e(I6,lz),e(lz,Zar),e(I6,enr),e(j,onr),e(j,q6),e(q6,N_e),e(N_e,rnr),e(q6,tnr),e(q6,iz),e(iz,anr),e(q6,nnr),e(j,snr),e(j,N6),e(N6,j_e),e(j_e,lnr),e(N6,inr),e(N6,dz),e(dz,dnr),e(N6,cnr),e(j,fnr),e(j,j6),e(j6,D_e),e(D_e,mnr),e(j6,gnr),e(j6,cz),e(cz,hnr),e(j6,pnr),e(j,unr),e(j,D6),e(D6,G_e),e(G_e,_nr),e(D6,bnr),e(D6,fz),e(fz,vnr),e(D6,Fnr),e(j,Tnr),e(j,G6),e(G6,O_e),e(O_e,Mnr),e(G6,Enr),e(G6,mz),e(mz,Cnr),e(G6,wnr),e(j,Anr),e(j,O6),e(O6,V_e),e(V_e,ynr),e(O6,Lnr),e(O6,gz),e(gz,xnr),e(O6,$nr),e(j,knr),e(j,V6),e(V6,X_e),e(X_e,Snr),e(V6,Rnr),e(V6,hz),e(hz,Bnr),e(V6,Pnr),e(j,Inr),e(j,X6),e(X6,z_e),e(z_e,qnr),e(X6,Nnr),e(X6,pz),e(pz,jnr),e(X6,Dnr),e(j,Gnr),e(j,z6),e(z6,Q_e),e(Q_e,Onr),e(z6,Vnr),e(z6,uz),e(uz,Xnr),e(z6,znr),e(j,Qnr),e(j,Q6),e(Q6,W_e),e(W_e,Wnr),e(Q6,Hnr),e(Q6,_z),e(_z,Unr),e(Q6,Jnr),e(j,Ynr),e(j,W6),e(W6,H_e),e(H_e,Knr),e(W6,Znr),e(W6,bz),e(bz,esr),e(W6,osr),e(j,rsr),e(j,H6),e(H6,U_e),e(U_e,tsr),e(H6,asr),e(H6,vz),e(vz,nsr),e(H6,ssr),e(j,lsr),e(j,U6),e(U6,J_e),e(J_e,isr),e(U6,dsr),e(U6,Fz),e(Fz,csr),e(U6,fsr),e(j,msr),e(j,J6),e(J6,Y_e),e(Y_e,gsr),e(J6,hsr),e(J6,Tz),e(Tz,psr),e(J6,usr),e(j,_sr),e(j,Y6),e(Y6,K_e),e(K_e,bsr),e(Y6,vsr),e(Y6,Mz),e(Mz,Fsr),e(Y6,Tsr),e(j,Msr),e(j,K6),e(K6,Z_e),e(Z_e,Esr),e(K6,Csr),e(K6,Ez),e(Ez,wsr),e(K6,Asr),e(j,ysr),e(j,Z6),e(Z6,e1e),e(e1e,Lsr),e(Z6,xsr),e(Z6,Cz),e(Cz,$sr),e(Z6,ksr),e(j,Ssr),e(j,eT),e(eT,o1e),e(o1e,Rsr),e(eT,Bsr),e(eT,wz),e(wz,Psr),e(eT,Isr),e(j,qsr),e(j,oT),e(oT,r1e),e(r1e,Nsr),e(oT,jsr),e(oT,Az),e(Az,Dsr),e(oT,Gsr),e(j,Osr),e(j,rT),e(rT,t1e),e(t1e,Vsr),e(rT,Xsr),e(rT,yz),e(yz,zsr),e(rT,Qsr),e(j,Wsr),e(j,tT),e(tT,a1e),e(a1e,Hsr),e(tT,Usr),e(tT,Lz),e(Lz,Jsr),e(tT,Ysr),e(j,Ksr),e(j,aT),e(aT,n1e),e(n1e,Zsr),e(aT,elr),e(aT,xz),e(xz,olr),e(aT,rlr),e(j,tlr),e(j,nT),e(nT,s1e),e(s1e,alr),e(nT,nlr),e(nT,$z),e($z,slr),e(nT,llr),e(j,ilr),e(j,sT),e(sT,l1e),e(l1e,dlr),e(sT,clr),e(sT,kz),e(kz,flr),e(sT,mlr),e(wr,glr),M(lT,wr,null),b(f,hIe,_),b(f,Dd,_),e(Dd,iT),e(iT,i1e),M(Ly,i1e,null),e(Dd,hlr),e(Dd,d1e),e(d1e,plr),b(f,pIe,_),b(f,Ko,_),M(xy,Ko,null),e(Ko,ulr),e(Ko,Gd),e(Gd,_lr),e(Gd,Sz),e(Sz,blr),e(Gd,vlr),e(Gd,Rz),e(Rz,Flr),e(Gd,Tlr),e(Ko,Mlr),e(Ko,$y),e($y,Elr),e($y,c1e),e(c1e,Clr),e($y,wlr),e(Ko,Alr),e(Ko,At),M(ky,At,null),e(At,ylr),e(At,f1e),e(f1e,Llr),e(At,xlr),e(At,Od),e(Od,$lr),e(Od,m1e),e(m1e,klr),e(Od,Slr),e(Od,Bz),e(Bz,Rlr),e(Od,Blr),e(At,Plr),M(dT,At,null),e(Ko,Ilr),e(Ko,Ar),M(Sy,Ar,null),e(Ar,qlr),e(Ar,g1e),e(g1e,Nlr),e(Ar,jlr),e(Ar,Za),e(Za,Dlr),e(Za,h1e),e(h1e,Glr),e(Za,Olr),e(Za,p1e),e(p1e,Vlr),e(Za,Xlr),e(Za,u1e),e(u1e,zlr),e(Za,Qlr),e(Ar,Wlr),e(Ar,ne),e(ne,cT),e(cT,_1e),e(_1e,Hlr),e(cT,Ulr),e(cT,Pz),e(Pz,Jlr),e(cT,Ylr),e(ne,Klr),e(ne,fT),e(fT,b1e),e(b1e,Zlr),e(fT,eir),e(fT,Iz),e(Iz,oir),e(fT,rir),e(ne,tir),e(ne,mT),e(mT,v1e),e(v1e,air),e(mT,nir),e(mT,qz),e(qz,sir),e(mT,lir),e(ne,iir),e(ne,gT),e(gT,F1e),e(F1e,dir),e(gT,cir),e(gT,Nz),e(Nz,fir),e(gT,mir),e(ne,gir),e(ne,hT),e(hT,T1e),e(T1e,hir),e(hT,pir),e(hT,jz),e(jz,uir),e(hT,_ir),e(ne,bir),e(ne,pT),e(pT,M1e),e(M1e,vir),e(pT,Fir),e(pT,Dz),e(Dz,Tir),e(pT,Mir),e(ne,Eir),e(ne,uT),e(uT,E1e),e(E1e,Cir),e(uT,wir),e(uT,Gz),e(Gz,Air),e(uT,yir),e(ne,Lir),e(ne,_T),e(_T,C1e),e(C1e,xir),e(_T,$ir),e(_T,Oz),e(Oz,kir),e(_T,Sir),e(ne,Rir),e(ne,bT),e(bT,w1e),e(w1e,Bir),e(bT,Pir),e(bT,Vz),e(Vz,Iir),e(bT,qir),e(ne,Nir),e(ne,vT),e(vT,A1e),e(A1e,jir),e(vT,Dir),e(vT,Xz),e(Xz,Gir),e(vT,Oir),e(ne,Vir),e(ne,FT),e(FT,y1e),e(y1e,Xir),e(FT,zir),e(FT,zz),e(zz,Qir),e(FT,Wir),e(ne,Hir),e(ne,TT),e(TT,L1e),e(L1e,Uir),e(TT,Jir),e(TT,Qz),e(Qz,Yir),e(TT,Kir),e(ne,Zir),e(ne,MT),e(MT,x1e),e(x1e,edr),e(MT,odr),e(MT,Wz),e(Wz,rdr),e(MT,tdr),e(ne,adr),e(ne,ET),e(ET,$1e),e($1e,ndr),e(ET,sdr),e(ET,Hz),e(Hz,ldr),e(ET,idr),e(ne,ddr),e(ne,CT),e(CT,k1e),e(k1e,cdr),e(CT,fdr),e(CT,Uz),e(Uz,mdr),e(CT,gdr),e(ne,hdr),e(ne,wT),e(wT,S1e),e(S1e,pdr),e(wT,udr),e(wT,Jz),e(Jz,_dr),e(wT,bdr),e(ne,vdr),e(ne,AT),e(AT,R1e),e(R1e,Fdr),e(AT,Tdr),e(AT,Yz),e(Yz,Mdr),e(AT,Edr),e(ne,Cdr),e(ne,yT),e(yT,B1e),e(B1e,wdr),e(yT,Adr),e(yT,Kz),e(Kz,ydr),e(yT,Ldr),e(ne,xdr),e(ne,LT),e(LT,P1e),e(P1e,$dr),e(LT,kdr),e(LT,Zz),e(Zz,Sdr),e(LT,Rdr),e(ne,Bdr),e(ne,xT),e(xT,I1e),e(I1e,Pdr),e(xT,Idr),e(xT,eQ),e(eQ,qdr),e(xT,Ndr),e(ne,jdr),e(ne,$T),e($T,q1e),e(q1e,Ddr),e($T,Gdr),e($T,oQ),e(oQ,Odr),e($T,Vdr),e(ne,Xdr),e(ne,kT),e(kT,N1e),e(N1e,zdr),e(kT,Qdr),e(kT,rQ),e(rQ,Wdr),e(kT,Hdr),e(ne,Udr),e(ne,ST),e(ST,j1e),e(j1e,Jdr),e(ST,Ydr),e(ST,tQ),e(tQ,Kdr),e(ST,Zdr),e(Ar,ecr),M(RT,Ar,null),b(f,uIe,_),b(f,Vd,_),e(Vd,BT),e(BT,D1e),M(Ry,D1e,null),e(Vd,ocr),e(Vd,G1e),e(G1e,rcr),b(f,_Ie,_),b(f,Zo,_),M(By,Zo,null),e(Zo,tcr),e(Zo,Xd),e(Xd,acr),e(Xd,aQ),e(aQ,ncr),e(Xd,scr),e(Xd,nQ),e(nQ,lcr),e(Xd,icr),e(Zo,dcr),e(Zo,Py),e(Py,ccr),e(Py,O1e),e(O1e,fcr),e(Py,mcr),e(Zo,gcr),e(Zo,yt),M(Iy,yt,null),e(yt,hcr),e(yt,V1e),e(V1e,pcr),e(yt,ucr),e(yt,zd),e(zd,_cr),e(zd,X1e),e(X1e,bcr),e(zd,vcr),e(zd,sQ),e(sQ,Fcr),e(zd,Tcr),e(yt,Mcr),M(PT,yt,null),e(Zo,Ecr),e(Zo,yr),M(qy,yr,null),e(yr,Ccr),e(yr,z1e),e(z1e,wcr),e(yr,Acr),e(yr,en),e(en,ycr),e(en,Q1e),e(Q1e,Lcr),e(en,xcr),e(en,W1e),e(W1e,$cr),e(en,kcr),e(en,H1e),e(H1e,Scr),e(en,Rcr),e(yr,Bcr),e(yr,Te),e(Te,IT),e(IT,U1e),e(U1e,Pcr),e(IT,Icr),e(IT,lQ),e(lQ,qcr),e(IT,Ncr),e(Te,jcr),e(Te,qT),e(qT,J1e),e(J1e,Dcr),e(qT,Gcr),e(qT,iQ),e(iQ,Ocr),e(qT,Vcr),e(Te,Xcr),e(Te,NT),e(NT,Y1e),e(Y1e,zcr),e(NT,Qcr),e(NT,dQ),e(dQ,Wcr),e(NT,Hcr),e(Te,Ucr),e(Te,jT),e(jT,K1e),e(K1e,Jcr),e(jT,Ycr),e(jT,cQ),e(cQ,Kcr),e(jT,Zcr),e(Te,efr),e(Te,DT),e(DT,Z1e),e(Z1e,ofr),e(DT,rfr),e(DT,fQ),e(fQ,tfr),e(DT,afr),e(Te,nfr),e(Te,GT),e(GT,ebe),e(ebe,sfr),e(GT,lfr),e(GT,mQ),e(mQ,ifr),e(GT,dfr),e(Te,cfr),e(Te,OT),e(OT,obe),e(obe,ffr),e(OT,mfr),e(OT,gQ),e(gQ,gfr),e(OT,hfr),e(Te,pfr),e(Te,VT),e(VT,rbe),e(rbe,ufr),e(VT,_fr),e(VT,hQ),e(hQ,bfr),e(VT,vfr),e(Te,Ffr),e(Te,XT),e(XT,tbe),e(tbe,Tfr),e(XT,Mfr),e(XT,pQ),e(pQ,Efr),e(XT,Cfr),e(Te,wfr),e(Te,zT),e(zT,abe),e(abe,Afr),e(zT,yfr),e(zT,uQ),e(uQ,Lfr),e(zT,xfr),e(Te,$fr),e(Te,QT),e(QT,nbe),e(nbe,kfr),e(QT,Sfr),e(QT,_Q),e(_Q,Rfr),e(QT,Bfr),e(Te,Pfr),e(Te,WT),e(WT,sbe),e(sbe,Ifr),e(WT,qfr),e(WT,bQ),e(bQ,Nfr),e(WT,jfr),e(yr,Dfr),M(HT,yr,null),b(f,bIe,_),b(f,Qd,_),e(Qd,UT),e(UT,lbe),M(Ny,lbe,null),e(Qd,Gfr),e(Qd,ibe),e(ibe,Ofr),b(f,vIe,_),b(f,er,_),M(jy,er,null),e(er,Vfr),e(er,Wd),e(Wd,Xfr),e(Wd,vQ),e(vQ,zfr),e(Wd,Qfr),e(Wd,FQ),e(FQ,Wfr),e(Wd,Hfr),e(er,Ufr),e(er,Dy),e(Dy,Jfr),e(Dy,dbe),e(dbe,Yfr),e(Dy,Kfr),e(er,Zfr),e(er,Lt),M(Gy,Lt,null),e(Lt,emr),e(Lt,cbe),e(cbe,omr),e(Lt,rmr),e(Lt,Hd),e(Hd,tmr),e(Hd,fbe),e(fbe,amr),e(Hd,nmr),e(Hd,TQ),e(TQ,smr),e(Hd,lmr),e(Lt,imr),M(JT,Lt,null),e(er,dmr),e(er,Lr),M(Oy,Lr,null),e(Lr,cmr),e(Lr,mbe),e(mbe,fmr),e(Lr,mmr),e(Lr,on),e(on,gmr),e(on,gbe),e(gbe,hmr),e(on,pmr),e(on,hbe),e(hbe,umr),e(on,_mr),e(on,pbe),e(pbe,bmr),e(on,vmr),e(Lr,Fmr),e(Lr,Ud),e(Ud,YT),e(YT,ube),e(ube,Tmr),e(YT,Mmr),e(YT,MQ),e(MQ,Emr),e(YT,Cmr),e(Ud,wmr),e(Ud,KT),e(KT,_be),e(_be,Amr),e(KT,ymr),e(KT,EQ),e(EQ,Lmr),e(KT,xmr),e(Ud,$mr),e(Ud,ZT),e(ZT,bbe),e(bbe,kmr),e(ZT,Smr),e(ZT,CQ),e(CQ,Rmr),e(ZT,Bmr),e(Lr,Pmr),M(e7,Lr,null),b(f,FIe,_),b(f,Jd,_),e(Jd,o7),e(o7,vbe),M(Vy,vbe,null),e(Jd,Imr),e(Jd,Fbe),e(Fbe,qmr),b(f,TIe,_),b(f,or,_),M(Xy,or,null),e(or,Nmr),e(or,Yd),e(Yd,jmr),e(Yd,wQ),e(wQ,Dmr),e(Yd,Gmr),e(Yd,AQ),e(AQ,Omr),e(Yd,Vmr),e(or,Xmr),e(or,zy),e(zy,zmr),e(zy,Tbe),e(Tbe,Qmr),e(zy,Wmr),e(or,Hmr),e(or,xt),M(Qy,xt,null),e(xt,Umr),e(xt,Mbe),e(Mbe,Jmr),e(xt,Ymr),e(xt,Kd),e(Kd,Kmr),e(Kd,Ebe),e(Ebe,Zmr),e(Kd,egr),e(Kd,yQ),e(yQ,ogr),e(Kd,rgr),e(xt,tgr),M(r7,xt,null),e(or,agr),e(or,xr),M(Wy,xr,null),e(xr,ngr),e(xr,Cbe),e(Cbe,sgr),e(xr,lgr),e(xr,rn),e(rn,igr),e(rn,wbe),e(wbe,dgr),e(rn,cgr),e(rn,Abe),e(Abe,fgr),e(rn,mgr),e(rn,ybe),e(ybe,ggr),e(rn,hgr),e(xr,pgr),e(xr,ie),e(ie,t7),e(t7,Lbe),e(Lbe,ugr),e(t7,_gr),e(t7,LQ),e(LQ,bgr),e(t7,vgr),e(ie,Fgr),e(ie,a7),e(a7,xbe),e(xbe,Tgr),e(a7,Mgr),e(a7,xQ),e(xQ,Egr),e(a7,Cgr),e(ie,wgr),e(ie,n7),e(n7,$be),e($be,Agr),e(n7,ygr),e(n7,$Q),e($Q,Lgr),e(n7,xgr),e(ie,$gr),e(ie,s7),e(s7,kbe),e(kbe,kgr),e(s7,Sgr),e(s7,kQ),e(kQ,Rgr),e(s7,Bgr),e(ie,Pgr),e(ie,l7),e(l7,Sbe),e(Sbe,Igr),e(l7,qgr),e(l7,SQ),e(SQ,Ngr),e(l7,jgr),e(ie,Dgr),e(ie,i7),e(i7,Rbe),e(Rbe,Ggr),e(i7,Ogr),e(i7,RQ),e(RQ,Vgr),e(i7,Xgr),e(ie,zgr),e(ie,d7),e(d7,Bbe),e(Bbe,Qgr),e(d7,Wgr),e(d7,BQ),e(BQ,Hgr),e(d7,Ugr),e(ie,Jgr),e(ie,c7),e(c7,Pbe),e(Pbe,Ygr),e(c7,Kgr),e(c7,PQ),e(PQ,Zgr),e(c7,ehr),e(ie,ohr),e(ie,f7),e(f7,Ibe),e(Ibe,rhr),e(f7,thr),e(f7,IQ),e(IQ,ahr),e(f7,nhr),e(ie,shr),e(ie,m7),e(m7,qbe),e(qbe,lhr),e(m7,ihr),e(m7,qQ),e(qQ,dhr),e(m7,chr),e(ie,fhr),e(ie,g7),e(g7,Nbe),e(Nbe,mhr),e(g7,ghr),e(g7,NQ),e(NQ,hhr),e(g7,phr),e(ie,uhr),e(ie,h7),e(h7,jbe),e(jbe,_hr),e(h7,bhr),e(h7,jQ),e(jQ,vhr),e(h7,Fhr),e(ie,Thr),e(ie,p7),e(p7,Dbe),e(Dbe,Mhr),e(p7,Ehr),e(p7,DQ),e(DQ,Chr),e(p7,whr),e(ie,Ahr),e(ie,u7),e(u7,Gbe),e(Gbe,yhr),e(u7,Lhr),e(u7,GQ),e(GQ,xhr),e(u7,$hr),e(ie,khr),e(ie,_7),e(_7,Obe),e(Obe,Shr),e(_7,Rhr),e(_7,OQ),e(OQ,Bhr),e(_7,Phr),e(ie,Ihr),e(ie,b7),e(b7,Vbe),e(Vbe,qhr),e(b7,Nhr),e(b7,VQ),e(VQ,jhr),e(b7,Dhr),e(ie,Ghr),e(ie,v7),e(v7,Xbe),e(Xbe,Ohr),e(v7,Vhr),e(v7,XQ),e(XQ,Xhr),e(v7,zhr),e(ie,Qhr),e(ie,F7),e(F7,zbe),e(zbe,Whr),e(F7,Hhr),e(F7,zQ),e(zQ,Uhr),e(F7,Jhr),e(ie,Yhr),e(ie,T7),e(T7,Qbe),e(Qbe,Khr),e(T7,Zhr),e(T7,QQ),e(QQ,epr),e(T7,opr),e(ie,rpr),e(ie,M7),e(M7,Wbe),e(Wbe,tpr),e(M7,apr),e(M7,WQ),e(WQ,npr),e(M7,spr),e(xr,lpr),M(E7,xr,null),b(f,MIe,_),b(f,Zd,_),e(Zd,C7),e(C7,Hbe),M(Hy,Hbe,null),e(Zd,ipr),e(Zd,Ube),e(Ube,dpr),b(f,EIe,_),b(f,rr,_),M(Uy,rr,null),e(rr,cpr),e(rr,ec),e(ec,fpr),e(ec,HQ),e(HQ,mpr),e(ec,gpr),e(ec,UQ),e(UQ,hpr),e(ec,ppr),e(rr,upr),e(rr,Jy),e(Jy,_pr),e(Jy,Jbe),e(Jbe,bpr),e(Jy,vpr),e(rr,Fpr),e(rr,$t),M(Yy,$t,null),e($t,Tpr),e($t,Ybe),e(Ybe,Mpr),e($t,Epr),e($t,oc),e(oc,Cpr),e(oc,Kbe),e(Kbe,wpr),e(oc,Apr),e(oc,JQ),e(JQ,ypr),e(oc,Lpr),e($t,xpr),M(w7,$t,null),e(rr,$pr),e(rr,$r),M(Ky,$r,null),e($r,kpr),e($r,Zbe),e(Zbe,Spr),e($r,Rpr),e($r,tn),e(tn,Bpr),e(tn,e2e),e(e2e,Ppr),e(tn,Ipr),e(tn,o2e),e(o2e,qpr),e(tn,Npr),e(tn,r2e),e(r2e,jpr),e(tn,Dpr),e($r,Gpr),e($r,ye),e(ye,A7),e(A7,t2e),e(t2e,Opr),e(A7,Vpr),e(A7,YQ),e(YQ,Xpr),e(A7,zpr),e(ye,Qpr),e(ye,y7),e(y7,a2e),e(a2e,Wpr),e(y7,Hpr),e(y7,KQ),e(KQ,Upr),e(y7,Jpr),e(ye,Ypr),e(ye,L7),e(L7,n2e),e(n2e,Kpr),e(L7,Zpr),e(L7,ZQ),e(ZQ,eur),e(L7,our),e(ye,rur),e(ye,x7),e(x7,s2e),e(s2e,tur),e(x7,aur),e(x7,eW),e(eW,nur),e(x7,sur),e(ye,lur),e(ye,$7),e($7,l2e),e(l2e,iur),e($7,dur),e($7,oW),e(oW,cur),e($7,fur),e(ye,mur),e(ye,k7),e(k7,i2e),e(i2e,gur),e(k7,hur),e(k7,rW),e(rW,pur),e(k7,uur),e(ye,_ur),e(ye,S7),e(S7,d2e),e(d2e,bur),e(S7,vur),e(S7,tW),e(tW,Fur),e(S7,Tur),e(ye,Mur),e(ye,R7),e(R7,c2e),e(c2e,Eur),e(R7,Cur),e(R7,aW),e(aW,wur),e(R7,Aur),e(ye,yur),e(ye,B7),e(B7,f2e),e(f2e,Lur),e(B7,xur),e(B7,nW),e(nW,$ur),e(B7,kur),e(ye,Sur),e(ye,P7),e(P7,m2e),e(m2e,Rur),e(P7,Bur),e(P7,sW),e(sW,Pur),e(P7,Iur),e($r,qur),M(I7,$r,null),b(f,CIe,_),b(f,rc,_),e(rc,q7),e(q7,g2e),M(Zy,g2e,null),e(rc,Nur),e(rc,h2e),e(h2e,jur),b(f,wIe,_),b(f,tr,_),M(eL,tr,null),e(tr,Dur),e(tr,tc),e(tc,Gur),e(tc,lW),e(lW,Our),e(tc,Vur),e(tc,iW),e(iW,Xur),e(tc,zur),e(tr,Qur),e(tr,oL),e(oL,Wur),e(oL,p2e),e(p2e,Hur),e(oL,Uur),e(tr,Jur),e(tr,kt),M(rL,kt,null),e(kt,Yur),e(kt,u2e),e(u2e,Kur),e(kt,Zur),e(kt,ac),e(ac,e_r),e(ac,_2e),e(_2e,o_r),e(ac,r_r),e(ac,dW),e(dW,t_r),e(ac,a_r),e(kt,n_r),M(N7,kt,null),e(tr,s_r),e(tr,kr),M(tL,kr,null),e(kr,l_r),e(kr,b2e),e(b2e,i_r),e(kr,d_r),e(kr,an),e(an,c_r),e(an,v2e),e(v2e,f_r),e(an,m_r),e(an,F2e),e(F2e,g_r),e(an,h_r),e(an,T2e),e(T2e,p_r),e(an,u_r),e(kr,__r),e(kr,Z),e(Z,j7),e(j7,M2e),e(M2e,b_r),e(j7,v_r),e(j7,cW),e(cW,F_r),e(j7,T_r),e(Z,M_r),e(Z,D7),e(D7,E2e),e(E2e,E_r),e(D7,C_r),e(D7,fW),e(fW,w_r),e(D7,A_r),e(Z,y_r),e(Z,G7),e(G7,C2e),e(C2e,L_r),e(G7,x_r),e(G7,mW),e(mW,$_r),e(G7,k_r),e(Z,S_r),e(Z,O7),e(O7,w2e),e(w2e,R_r),e(O7,B_r),e(O7,gW),e(gW,P_r),e(O7,I_r),e(Z,q_r),e(Z,V7),e(V7,A2e),e(A2e,N_r),e(V7,j_r),e(V7,hW),e(hW,D_r),e(V7,G_r),e(Z,O_r),e(Z,X7),e(X7,y2e),e(y2e,V_r),e(X7,X_r),e(X7,pW),e(pW,z_r),e(X7,Q_r),e(Z,W_r),e(Z,z7),e(z7,L2e),e(L2e,H_r),e(z7,U_r),e(z7,uW),e(uW,J_r),e(z7,Y_r),e(Z,K_r),e(Z,Q7),e(Q7,x2e),e(x2e,Z_r),e(Q7,e1r),e(Q7,_W),e(_W,o1r),e(Q7,r1r),e(Z,t1r),e(Z,W7),e(W7,$2e),e($2e,a1r),e(W7,n1r),e(W7,bW),e(bW,s1r),e(W7,l1r),e(Z,i1r),e(Z,H7),e(H7,k2e),e(k2e,d1r),e(H7,c1r),e(H7,vW),e(vW,f1r),e(H7,m1r),e(Z,g1r),e(Z,U7),e(U7,S2e),e(S2e,h1r),e(U7,p1r),e(U7,FW),e(FW,u1r),e(U7,_1r),e(Z,b1r),e(Z,J7),e(J7,R2e),e(R2e,v1r),e(J7,F1r),e(J7,TW),e(TW,T1r),e(J7,M1r),e(Z,E1r),e(Z,Y7),e(Y7,B2e),e(B2e,C1r),e(Y7,w1r),e(Y7,MW),e(MW,A1r),e(Y7,y1r),e(Z,L1r),e(Z,K7),e(K7,P2e),e(P2e,x1r),e(K7,$1r),e(K7,EW),e(EW,k1r),e(K7,S1r),e(Z,R1r),e(Z,Z7),e(Z7,I2e),e(I2e,B1r),e(Z7,P1r),e(Z7,CW),e(CW,I1r),e(Z7,q1r),e(Z,N1r),e(Z,e9),e(e9,q2e),e(q2e,j1r),e(e9,D1r),e(e9,wW),e(wW,G1r),e(e9,O1r),e(Z,V1r),e(Z,o9),e(o9,N2e),e(N2e,X1r),e(o9,z1r),e(o9,AW),e(AW,Q1r),e(o9,W1r),e(Z,H1r),e(Z,r9),e(r9,j2e),e(j2e,U1r),e(r9,J1r),e(r9,yW),e(yW,Y1r),e(r9,K1r),e(Z,Z1r),e(Z,t9),e(t9,D2e),e(D2e,ebr),e(t9,obr),e(t9,LW),e(LW,rbr),e(t9,tbr),e(Z,abr),e(Z,a9),e(a9,G2e),e(G2e,nbr),e(a9,sbr),e(a9,xW),e(xW,lbr),e(a9,ibr),e(Z,dbr),e(Z,n9),e(n9,O2e),e(O2e,cbr),e(n9,fbr),e(n9,$W),e($W,mbr),e(n9,gbr),e(Z,hbr),e(Z,s9),e(s9,V2e),e(V2e,pbr),e(s9,ubr),e(s9,kW),e(kW,_br),e(s9,bbr),e(Z,vbr),e(Z,l9),e(l9,X2e),e(X2e,Fbr),e(l9,Tbr),e(l9,SW),e(SW,Mbr),e(l9,Ebr),e(Z,Cbr),e(Z,i9),e(i9,z2e),e(z2e,wbr),e(i9,Abr),e(i9,RW),e(RW,ybr),e(i9,Lbr),e(Z,xbr),e(Z,d9),e(d9,Q2e),e(Q2e,$br),e(d9,kbr),e(d9,BW),e(BW,Sbr),e(d9,Rbr),e(Z,Bbr),e(Z,c9),e(c9,W2e),e(W2e,Pbr),e(c9,Ibr),e(c9,PW),e(PW,qbr),e(c9,Nbr),e(kr,jbr),M(f9,kr,null),b(f,AIe,_),b(f,nc,_),e(nc,m9),e(m9,H2e),M(aL,H2e,null),e(nc,Dbr),e(nc,U2e),e(U2e,Gbr),b(f,yIe,_),b(f,ar,_),M(nL,ar,null),e(ar,Obr),e(ar,sc),e(sc,Vbr),e(sc,IW),e(IW,Xbr),e(sc,zbr),e(sc,qW),e(qW,Qbr),e(sc,Wbr),e(ar,Hbr),e(ar,sL),e(sL,Ubr),e(sL,J2e),e(J2e,Jbr),e(sL,Ybr),e(ar,Kbr),e(ar,St),M(lL,St,null),e(St,Zbr),e(St,Y2e),e(Y2e,e2r),e(St,o2r),e(St,lc),e(lc,r2r),e(lc,K2e),e(K2e,t2r),e(lc,a2r),e(lc,NW),e(NW,n2r),e(lc,s2r),e(St,l2r),M(g9,St,null),e(ar,i2r),e(ar,Sr),M(iL,Sr,null),e(Sr,d2r),e(Sr,Z2e),e(Z2e,c2r),e(Sr,f2r),e(Sr,nn),e(nn,m2r),e(nn,eve),e(eve,g2r),e(nn,h2r),e(nn,ove),e(ove,p2r),e(nn,u2r),e(nn,rve),e(rve,_2r),e(nn,b2r),e(Sr,v2r),e(Sr,pe),e(pe,h9),e(h9,tve),e(tve,F2r),e(h9,T2r),e(h9,jW),e(jW,M2r),e(h9,E2r),e(pe,C2r),e(pe,p9),e(p9,ave),e(ave,w2r),e(p9,A2r),e(p9,DW),e(DW,y2r),e(p9,L2r),e(pe,x2r),e(pe,u9),e(u9,nve),e(nve,$2r),e(u9,k2r),e(u9,GW),e(GW,S2r),e(u9,R2r),e(pe,B2r),e(pe,_9),e(_9,sve),e(sve,P2r),e(_9,I2r),e(_9,OW),e(OW,q2r),e(_9,N2r),e(pe,j2r),e(pe,b9),e(b9,lve),e(lve,D2r),e(b9,G2r),e(b9,VW),e(VW,O2r),e(b9,V2r),e(pe,X2r),e(pe,v9),e(v9,ive),e(ive,z2r),e(v9,Q2r),e(v9,XW),e(XW,W2r),e(v9,H2r),e(pe,U2r),e(pe,F9),e(F9,dve),e(dve,J2r),e(F9,Y2r),e(F9,zW),e(zW,K2r),e(F9,Z2r),e(pe,evr),e(pe,T9),e(T9,cve),e(cve,ovr),e(T9,rvr),e(T9,QW),e(QW,tvr),e(T9,avr),e(pe,nvr),e(pe,M9),e(M9,fve),e(fve,svr),e(M9,lvr),e(M9,WW),e(WW,ivr),e(M9,dvr),e(pe,cvr),e(pe,E9),e(E9,mve),e(mve,fvr),e(E9,mvr),e(E9,HW),e(HW,gvr),e(E9,hvr),e(pe,pvr),e(pe,C9),e(C9,gve),e(gve,uvr),e(C9,_vr),e(C9,UW),e(UW,bvr),e(C9,vvr),e(pe,Fvr),e(pe,w9),e(w9,hve),e(hve,Tvr),e(w9,Mvr),e(w9,JW),e(JW,Evr),e(w9,Cvr),e(pe,wvr),e(pe,A9),e(A9,pve),e(pve,Avr),e(A9,yvr),e(A9,YW),e(YW,Lvr),e(A9,xvr),e(pe,$vr),e(pe,y9),e(y9,uve),e(uve,kvr),e(y9,Svr),e(y9,KW),e(KW,Rvr),e(y9,Bvr),e(pe,Pvr),e(pe,L9),e(L9,_ve),e(_ve,Ivr),e(L9,qvr),e(L9,ZW),e(ZW,Nvr),e(L9,jvr),e(pe,Dvr),e(pe,x9),e(x9,bve),e(bve,Gvr),e(x9,Ovr),e(x9,eH),e(eH,Vvr),e(x9,Xvr),e(pe,zvr),e(pe,$9),e($9,vve),e(vve,Qvr),e($9,Wvr),e($9,oH),e(oH,Hvr),e($9,Uvr),e(Sr,Jvr),M(k9,Sr,null),b(f,LIe,_),b(f,ic,_),e(ic,S9),e(S9,Fve),M(dL,Fve,null),e(ic,Yvr),e(ic,Tve),e(Tve,Kvr),b(f,xIe,_),b(f,nr,_),M(cL,nr,null),e(nr,Zvr),e(nr,dc),e(dc,eFr),e(dc,rH),e(rH,oFr),e(dc,rFr),e(dc,tH),e(tH,tFr),e(dc,aFr),e(nr,nFr),e(nr,fL),e(fL,sFr),e(fL,Mve),e(Mve,lFr),e(fL,iFr),e(nr,dFr),e(nr,Rt),M(mL,Rt,null),e(Rt,cFr),e(Rt,Eve),e(Eve,fFr),e(Rt,mFr),e(Rt,cc),e(cc,gFr),e(cc,Cve),e(Cve,hFr),e(cc,pFr),e(cc,aH),e(aH,uFr),e(cc,_Fr),e(Rt,bFr),M(R9,Rt,null),e(nr,vFr),e(nr,Rr),M(gL,Rr,null),e(Rr,FFr),e(Rr,wve),e(wve,TFr),e(Rr,MFr),e(Rr,sn),e(sn,EFr),e(sn,Ave),e(Ave,CFr),e(sn,wFr),e(sn,yve),e(yve,AFr),e(sn,yFr),e(sn,Lve),e(Lve,LFr),e(sn,xFr),e(Rr,$Fr),e(Rr,hL),e(hL,B9),e(B9,xve),e(xve,kFr),e(B9,SFr),e(B9,nH),e(nH,RFr),e(B9,BFr),e(hL,PFr),e(hL,P9),e(P9,$ve),e($ve,IFr),e(P9,qFr),e(P9,sH),e(sH,NFr),e(P9,jFr),e(Rr,DFr),M(I9,Rr,null),b(f,$Ie,_),b(f,fc,_),e(fc,q9),e(q9,kve),M(pL,kve,null),e(fc,GFr),e(fc,Sve),e(Sve,OFr),b(f,kIe,_),b(f,sr,_),M(uL,sr,null),e(sr,VFr),e(sr,mc),e(mc,XFr),e(mc,lH),e(lH,zFr),e(mc,QFr),e(mc,iH),e(iH,WFr),e(mc,HFr),e(sr,UFr),e(sr,_L),e(_L,JFr),e(_L,Rve),e(Rve,YFr),e(_L,KFr),e(sr,ZFr),e(sr,Bt),M(bL,Bt,null),e(Bt,e0r),e(Bt,Bve),e(Bve,o0r),e(Bt,r0r),e(Bt,gc),e(gc,t0r),e(gc,Pve),e(Pve,a0r),e(gc,n0r),e(gc,dH),e(dH,s0r),e(gc,l0r),e(Bt,i0r),M(N9,Bt,null),e(sr,d0r),e(sr,Br),M(vL,Br,null),e(Br,c0r),e(Br,Ive),e(Ive,f0r),e(Br,m0r),e(Br,ln),e(ln,g0r),e(ln,qve),e(qve,h0r),e(ln,p0r),e(ln,Nve),e(Nve,u0r),e(ln,_0r),e(ln,jve),e(jve,b0r),e(ln,v0r),e(Br,F0r),e(Br,Dve),e(Dve,j9),e(j9,Gve),e(Gve,T0r),e(j9,M0r),e(j9,cH),e(cH,E0r),e(j9,C0r),e(Br,w0r),M(D9,Br,null),b(f,SIe,_),b(f,hc,_),e(hc,G9),e(G9,Ove),M(FL,Ove,null),e(hc,A0r),e(hc,Vve),e(Vve,y0r),b(f,RIe,_),b(f,lr,_),M(TL,lr,null),e(lr,L0r),e(lr,pc),e(pc,x0r),e(pc,fH),e(fH,$0r),e(pc,k0r),e(pc,mH),e(mH,S0r),e(pc,R0r),e(lr,B0r),e(lr,ML),e(ML,P0r),e(ML,Xve),e(Xve,I0r),e(ML,q0r),e(lr,N0r),e(lr,Pt),M(EL,Pt,null),e(Pt,j0r),e(Pt,zve),e(zve,D0r),e(Pt,G0r),e(Pt,uc),e(uc,O0r),e(uc,Qve),e(Qve,V0r),e(uc,X0r),e(uc,gH),e(gH,z0r),e(uc,Q0r),e(Pt,W0r),M(O9,Pt,null),e(lr,H0r),e(lr,Pr),M(CL,Pr,null),e(Pr,U0r),e(Pr,Wve),e(Wve,J0r),e(Pr,Y0r),e(Pr,dn),e(dn,K0r),e(dn,Hve),e(Hve,Z0r),e(dn,e6r),e(dn,Uve),e(Uve,o6r),e(dn,r6r),e(dn,Jve),e(Jve,t6r),e(dn,a6r),e(Pr,n6r),e(Pr,de),e(de,V9),e(V9,Yve),e(Yve,s6r),e(V9,l6r),e(V9,hH),e(hH,i6r),e(V9,d6r),e(de,c6r),e(de,X9),e(X9,Kve),e(Kve,f6r),e(X9,m6r),e(X9,pH),e(pH,g6r),e(X9,h6r),e(de,p6r),e(de,z9),e(z9,Zve),e(Zve,u6r),e(z9,_6r),e(z9,uH),e(uH,b6r),e(z9,v6r),e(de,F6r),e(de,Q9),e(Q9,eFe),e(eFe,T6r),e(Q9,M6r),e(Q9,_H),e(_H,E6r),e(Q9,C6r),e(de,w6r),e(de,W9),e(W9,oFe),e(oFe,A6r),e(W9,y6r),e(W9,bH),e(bH,L6r),e(W9,x6r),e(de,$6r),e(de,H9),e(H9,rFe),e(rFe,k6r),e(H9,S6r),e(H9,vH),e(vH,R6r),e(H9,B6r),e(de,P6r),e(de,U9),e(U9,tFe),e(tFe,I6r),e(U9,q6r),e(U9,FH),e(FH,N6r),e(U9,j6r),e(de,D6r),e(de,J9),e(J9,aFe),e(aFe,G6r),e(J9,O6r),e(J9,TH),e(TH,V6r),e(J9,X6r),e(de,z6r),e(de,Y9),e(Y9,nFe),e(nFe,Q6r),e(Y9,W6r),e(Y9,MH),e(MH,H6r),e(Y9,U6r),e(de,J6r),e(de,K9),e(K9,sFe),e(sFe,Y6r),e(K9,K6r),e(K9,EH),e(EH,Z6r),e(K9,eTr),e(de,oTr),e(de,Z9),e(Z9,lFe),e(lFe,rTr),e(Z9,tTr),e(Z9,CH),e(CH,aTr),e(Z9,nTr),e(de,sTr),e(de,eM),e(eM,iFe),e(iFe,lTr),e(eM,iTr),e(eM,wH),e(wH,dTr),e(eM,cTr),e(de,fTr),e(de,oM),e(oM,dFe),e(dFe,mTr),e(oM,gTr),e(oM,AH),e(AH,hTr),e(oM,pTr),e(de,uTr),e(de,rM),e(rM,cFe),e(cFe,_Tr),e(rM,bTr),e(rM,yH),e(yH,vTr),e(rM,FTr),e(de,TTr),e(de,tM),e(tM,fFe),e(fFe,MTr),e(tM,ETr),e(tM,LH),e(LH,CTr),e(tM,wTr),e(de,ATr),e(de,aM),e(aM,mFe),e(mFe,yTr),e(aM,LTr),e(aM,xH),e(xH,xTr),e(aM,$Tr),e(de,kTr),e(de,nM),e(nM,gFe),e(gFe,STr),e(nM,RTr),e(nM,$H),e($H,BTr),e(nM,PTr),e(de,ITr),e(de,sM),e(sM,hFe),e(hFe,qTr),e(sM,NTr),e(sM,kH),e(kH,jTr),e(sM,DTr),e(de,GTr),e(de,lM),e(lM,pFe),e(pFe,OTr),e(lM,VTr),e(lM,SH),e(SH,XTr),e(lM,zTr),e(de,QTr),e(de,iM),e(iM,uFe),e(uFe,WTr),e(iM,HTr),e(iM,RH),e(RH,UTr),e(iM,JTr),e(Pr,YTr),M(dM,Pr,null),b(f,BIe,_),b(f,_c,_),e(_c,cM),e(cM,_Fe),M(wL,_Fe,null),e(_c,KTr),e(_c,bFe),e(bFe,ZTr),b(f,PIe,_),b(f,ir,_),M(AL,ir,null),e(ir,e7r),e(ir,bc),e(bc,o7r),e(bc,BH),e(BH,r7r),e(bc,t7r),e(bc,PH),e(PH,a7r),e(bc,n7r),e(ir,s7r),e(ir,yL),e(yL,l7r),e(yL,vFe),e(vFe,i7r),e(yL,d7r),e(ir,c7r),e(ir,It),M(LL,It,null),e(It,f7r),e(It,FFe),e(FFe,m7r),e(It,g7r),e(It,vc),e(vc,h7r),e(vc,TFe),e(TFe,p7r),e(vc,u7r),e(vc,IH),e(IH,_7r),e(vc,b7r),e(It,v7r),M(fM,It,null),e(ir,F7r),e(ir,Ir),M(xL,Ir,null),e(Ir,T7r),e(Ir,MFe),e(MFe,M7r),e(Ir,E7r),e(Ir,cn),e(cn,C7r),e(cn,EFe),e(EFe,w7r),e(cn,A7r),e(cn,CFe),e(CFe,y7r),e(cn,L7r),e(cn,wFe),e(wFe,x7r),e(cn,$7r),e(Ir,k7r),e(Ir,ce),e(ce,mM),e(mM,AFe),e(AFe,S7r),e(mM,R7r),e(mM,qH),e(qH,B7r),e(mM,P7r),e(ce,I7r),e(ce,gM),e(gM,yFe),e(yFe,q7r),e(gM,N7r),e(gM,NH),e(NH,j7r),e(gM,D7r),e(ce,G7r),e(ce,hM),e(hM,LFe),e(LFe,O7r),e(hM,V7r),e(hM,jH),e(jH,X7r),e(hM,z7r),e(ce,Q7r),e(ce,pM),e(pM,xFe),e(xFe,W7r),e(pM,H7r),e(pM,DH),e(DH,U7r),e(pM,J7r),e(ce,Y7r),e(ce,uM),e(uM,$Fe),e($Fe,K7r),e(uM,Z7r),e(uM,GH),e(GH,e9r),e(uM,o9r),e(ce,r9r),e(ce,_M),e(_M,kFe),e(kFe,t9r),e(_M,a9r),e(_M,OH),e(OH,n9r),e(_M,s9r),e(ce,l9r),e(ce,bM),e(bM,SFe),e(SFe,i9r),e(bM,d9r),e(bM,VH),e(VH,c9r),e(bM,f9r),e(ce,m9r),e(ce,vM),e(vM,RFe),e(RFe,g9r),e(vM,h9r),e(vM,XH),e(XH,p9r),e(vM,u9r),e(ce,_9r),e(ce,FM),e(FM,BFe),e(BFe,b9r),e(FM,v9r),e(FM,zH),e(zH,F9r),e(FM,T9r),e(ce,M9r),e(ce,TM),e(TM,PFe),e(PFe,E9r),e(TM,C9r),e(TM,QH),e(QH,w9r),e(TM,A9r),e(ce,y9r),e(ce,MM),e(MM,IFe),e(IFe,L9r),e(MM,x9r),e(MM,WH),e(WH,$9r),e(MM,k9r),e(ce,S9r),e(ce,EM),e(EM,qFe),e(qFe,R9r),e(EM,B9r),e(EM,HH),e(HH,P9r),e(EM,I9r),e(ce,q9r),e(ce,CM),e(CM,NFe),e(NFe,N9r),e(CM,j9r),e(CM,UH),e(UH,D9r),e(CM,G9r),e(ce,O9r),e(ce,wM),e(wM,jFe),e(jFe,V9r),e(wM,X9r),e(wM,JH),e(JH,z9r),e(wM,Q9r),e(ce,W9r),e(ce,AM),e(AM,DFe),e(DFe,H9r),e(AM,U9r),e(AM,YH),e(YH,J9r),e(AM,Y9r),e(ce,K9r),e(ce,yM),e(yM,GFe),e(GFe,Z9r),e(yM,eMr),e(yM,KH),e(KH,oMr),e(yM,rMr),e(ce,tMr),e(ce,LM),e(LM,OFe),e(OFe,aMr),e(LM,nMr),e(LM,ZH),e(ZH,sMr),e(LM,lMr),e(ce,iMr),e(ce,xM),e(xM,VFe),e(VFe,dMr),e(xM,cMr),e(xM,eU),e(eU,fMr),e(xM,mMr),e(ce,gMr),e(ce,$M),e($M,XFe),e(XFe,hMr),e($M,pMr),e($M,oU),e(oU,uMr),e($M,_Mr),e(ce,bMr),e(ce,kM),e(kM,zFe),e(zFe,vMr),e(kM,FMr),e(kM,rU),e(rU,TMr),e(kM,MMr),e(Ir,EMr),M(SM,Ir,null),b(f,IIe,_),b(f,Fc,_),e(Fc,RM),e(RM,QFe),M($L,QFe,null),e(Fc,CMr),e(Fc,WFe),e(WFe,wMr),b(f,qIe,_),b(f,dr,_),M(kL,dr,null),e(dr,AMr),e(dr,Tc),e(Tc,yMr),e(Tc,tU),e(tU,LMr),e(Tc,xMr),e(Tc,aU),e(aU,$Mr),e(Tc,kMr),e(dr,SMr),e(dr,SL),e(SL,RMr),e(SL,HFe),e(HFe,BMr),e(SL,PMr),e(dr,IMr),e(dr,qt),M(RL,qt,null),e(qt,qMr),e(qt,UFe),e(UFe,NMr),e(qt,jMr),e(qt,Mc),e(Mc,DMr),e(Mc,JFe),e(JFe,GMr),e(Mc,OMr),e(Mc,nU),e(nU,VMr),e(Mc,XMr),e(qt,zMr),M(BM,qt,null),e(dr,QMr),e(dr,qr),M(BL,qr,null),e(qr,WMr),e(qr,YFe),e(YFe,HMr),e(qr,UMr),e(qr,fn),e(fn,JMr),e(fn,KFe),e(KFe,YMr),e(fn,KMr),e(fn,ZFe),e(ZFe,ZMr),e(fn,e4r),e(fn,e0e),e(e0e,o4r),e(fn,r4r),e(qr,t4r),e(qr,o0e),e(o0e,PM),e(PM,r0e),e(r0e,a4r),e(PM,n4r),e(PM,sU),e(sU,s4r),e(PM,l4r),e(qr,i4r),M(IM,qr,null),b(f,NIe,_),b(f,Ec,_),e(Ec,qM),e(qM,t0e),M(PL,t0e,null),e(Ec,d4r),e(Ec,a0e),e(a0e,c4r),b(f,jIe,_),b(f,cr,_),M(IL,cr,null),e(cr,f4r),e(cr,Cc),e(Cc,m4r),e(Cc,lU),e(lU,g4r),e(Cc,h4r),e(Cc,iU),e(iU,p4r),e(Cc,u4r),e(cr,_4r),e(cr,qL),e(qL,b4r),e(qL,n0e),e(n0e,v4r),e(qL,F4r),e(cr,T4r),e(cr,Nt),M(NL,Nt,null),e(Nt,M4r),e(Nt,s0e),e(s0e,E4r),e(Nt,C4r),e(Nt,wc),e(wc,w4r),e(wc,l0e),e(l0e,A4r),e(wc,y4r),e(wc,dU),e(dU,L4r),e(wc,x4r),e(Nt,$4r),M(NM,Nt,null),e(cr,k4r),e(cr,Nr),M(jL,Nr,null),e(Nr,S4r),e(Nr,i0e),e(i0e,R4r),e(Nr,B4r),e(Nr,mn),e(mn,P4r),e(mn,d0e),e(d0e,I4r),e(mn,q4r),e(mn,c0e),e(c0e,N4r),e(mn,j4r),e(mn,f0e),e(f0e,D4r),e(mn,G4r),e(Nr,O4r),e(Nr,m0e),e(m0e,jM),e(jM,g0e),e(g0e,V4r),e(jM,X4r),e(jM,cU),e(cU,z4r),e(jM,Q4r),e(Nr,W4r),M(DM,Nr,null),b(f,DIe,_),b(f,Ac,_),e(Ac,GM),e(GM,h0e),M(DL,h0e,null),e(Ac,H4r),e(Ac,p0e),e(p0e,U4r),b(f,GIe,_),b(f,fr,_),M(GL,fr,null),e(fr,J4r),e(fr,yc),e(yc,Y4r),e(yc,fU),e(fU,K4r),e(yc,Z4r),e(yc,mU),e(mU,eEr),e(yc,oEr),e(fr,rEr),e(fr,OL),e(OL,tEr),e(OL,u0e),e(u0e,aEr),e(OL,nEr),e(fr,sEr),e(fr,jt),M(VL,jt,null),e(jt,lEr),e(jt,_0e),e(_0e,iEr),e(jt,dEr),e(jt,Lc),e(Lc,cEr),e(Lc,b0e),e(b0e,fEr),e(Lc,mEr),e(Lc,gU),e(gU,gEr),e(Lc,hEr),e(jt,pEr),M(OM,jt,null),e(fr,uEr),e(fr,jr),M(XL,jr,null),e(jr,_Er),e(jr,v0e),e(v0e,bEr),e(jr,vEr),e(jr,gn),e(gn,FEr),e(gn,F0e),e(F0e,TEr),e(gn,MEr),e(gn,T0e),e(T0e,EEr),e(gn,CEr),e(gn,M0e),e(M0e,wEr),e(gn,AEr),e(jr,yEr),e(jr,oe),e(oe,VM),e(VM,E0e),e(E0e,LEr),e(VM,xEr),e(VM,hU),e(hU,$Er),e(VM,kEr),e(oe,SEr),e(oe,XM),e(XM,C0e),e(C0e,REr),e(XM,BEr),e(XM,pU),e(pU,PEr),e(XM,IEr),e(oe,qEr),e(oe,zM),e(zM,w0e),e(w0e,NEr),e(zM,jEr),e(zM,uU),e(uU,DEr),e(zM,GEr),e(oe,OEr),e(oe,QM),e(QM,A0e),e(A0e,VEr),e(QM,XEr),e(QM,_U),e(_U,zEr),e(QM,QEr),e(oe,WEr),e(oe,WM),e(WM,y0e),e(y0e,HEr),e(WM,UEr),e(WM,bU),e(bU,JEr),e(WM,YEr),e(oe,KEr),e(oe,HM),e(HM,L0e),e(L0e,ZEr),e(HM,e5r),e(HM,vU),e(vU,o5r),e(HM,r5r),e(oe,t5r),e(oe,UM),e(UM,x0e),e(x0e,a5r),e(UM,n5r),e(UM,FU),e(FU,s5r),e(UM,l5r),e(oe,i5r),e(oe,JM),e(JM,$0e),e($0e,d5r),e(JM,c5r),e(JM,TU),e(TU,f5r),e(JM,m5r),e(oe,g5r),e(oe,YM),e(YM,k0e),e(k0e,h5r),e(YM,p5r),e(YM,MU),e(MU,u5r),e(YM,_5r),e(oe,b5r),e(oe,KM),e(KM,S0e),e(S0e,v5r),e(KM,F5r),e(KM,EU),e(EU,T5r),e(KM,M5r),e(oe,E5r),e(oe,ZM),e(ZM,R0e),e(R0e,C5r),e(ZM,w5r),e(ZM,CU),e(CU,A5r),e(ZM,y5r),e(oe,L5r),e(oe,e4),e(e4,B0e),e(B0e,x5r),e(e4,$5r),e(e4,wU),e(wU,k5r),e(e4,S5r),e(oe,R5r),e(oe,o4),e(o4,P0e),e(P0e,B5r),e(o4,P5r),e(o4,AU),e(AU,I5r),e(o4,q5r),e(oe,N5r),e(oe,r4),e(r4,I0e),e(I0e,j5r),e(r4,D5r),e(r4,yU),e(yU,G5r),e(r4,O5r),e(oe,V5r),e(oe,t4),e(t4,q0e),e(q0e,X5r),e(t4,z5r),e(t4,LU),e(LU,Q5r),e(t4,W5r),e(oe,H5r),e(oe,a4),e(a4,N0e),e(N0e,U5r),e(a4,J5r),e(a4,xU),e(xU,Y5r),e(a4,K5r),e(oe,Z5r),e(oe,n4),e(n4,j0e),e(j0e,eCr),e(n4,oCr),e(n4,$U),e($U,rCr),e(n4,tCr),e(oe,aCr),e(oe,s4),e(s4,D0e),e(D0e,nCr),e(s4,sCr),e(s4,kU),e(kU,lCr),e(s4,iCr),e(oe,dCr),e(oe,l4),e(l4,G0e),e(G0e,cCr),e(l4,fCr),e(l4,SU),e(SU,mCr),e(l4,gCr),e(oe,hCr),e(oe,i4),e(i4,O0e),e(O0e,pCr),e(i4,uCr),e(i4,RU),e(RU,_Cr),e(i4,bCr),e(oe,vCr),e(oe,d4),e(d4,V0e),e(V0e,FCr),e(d4,TCr),e(d4,BU),e(BU,MCr),e(d4,ECr),e(oe,CCr),e(oe,c4),e(c4,X0e),e(X0e,wCr),e(c4,ACr),e(c4,PU),e(PU,yCr),e(c4,LCr),e(oe,xCr),e(oe,f4),e(f4,z0e),e(z0e,$Cr),e(f4,kCr),e(f4,IU),e(IU,SCr),e(f4,RCr),e(oe,BCr),e(oe,m4),e(m4,Q0e),e(Q0e,PCr),e(m4,ICr),e(m4,qU),e(qU,qCr),e(m4,NCr),e(oe,jCr),e(oe,g4),e(g4,W0e),e(W0e,DCr),e(g4,GCr),e(g4,NU),e(NU,OCr),e(g4,VCr),e(jr,XCr),M(h4,jr,null),b(f,OIe,_),b(f,xc,_),e(xc,p4),e(p4,H0e),M(zL,H0e,null),e(xc,zCr),e(xc,U0e),e(U0e,QCr),b(f,VIe,_),b(f,mr,_),M(QL,mr,null),e(mr,WCr),e(mr,$c),e($c,HCr),e($c,jU),e(jU,UCr),e($c,JCr),e($c,DU),e(DU,YCr),e($c,KCr),e(mr,ZCr),e(mr,WL),e(WL,e3r),e(WL,J0e),e(J0e,o3r),e(WL,r3r),e(mr,t3r),e(mr,Dt),M(HL,Dt,null),e(Dt,a3r),e(Dt,Y0e),e(Y0e,n3r),e(Dt,s3r),e(Dt,kc),e(kc,l3r),e(kc,K0e),e(K0e,i3r),e(kc,d3r),e(kc,GU),e(GU,c3r),e(kc,f3r),e(Dt,m3r),M(u4,Dt,null),e(mr,g3r),e(mr,Dr),M(UL,Dr,null),e(Dr,h3r),e(Dr,Z0e),e(Z0e,p3r),e(Dr,u3r),e(Dr,hn),e(hn,_3r),e(hn,e6e),e(e6e,b3r),e(hn,v3r),e(hn,o6e),e(o6e,F3r),e(hn,T3r),e(hn,r6e),e(r6e,M3r),e(hn,E3r),e(Dr,C3r),e(Dr,ke),e(ke,_4),e(_4,t6e),e(t6e,w3r),e(_4,A3r),e(_4,OU),e(OU,y3r),e(_4,L3r),e(ke,x3r),e(ke,b4),e(b4,a6e),e(a6e,$3r),e(b4,k3r),e(b4,VU),e(VU,S3r),e(b4,R3r),e(ke,B3r),e(ke,v4),e(v4,n6e),e(n6e,P3r),e(v4,I3r),e(v4,XU),e(XU,q3r),e(v4,N3r),e(ke,j3r),e(ke,F4),e(F4,s6e),e(s6e,D3r),e(F4,G3r),e(F4,zU),e(zU,O3r),e(F4,V3r),e(ke,X3r),e(ke,T4),e(T4,l6e),e(l6e,z3r),e(T4,Q3r),e(T4,QU),e(QU,W3r),e(T4,H3r),e(ke,U3r),e(ke,M4),e(M4,i6e),e(i6e,J3r),e(M4,Y3r),e(M4,WU),e(WU,K3r),e(M4,Z3r),e(ke,ewr),e(ke,E4),e(E4,d6e),e(d6e,owr),e(E4,rwr),e(E4,HU),e(HU,twr),e(E4,awr),e(ke,nwr),e(ke,C4),e(C4,c6e),e(c6e,swr),e(C4,lwr),e(C4,UU),e(UU,iwr),e(C4,dwr),e(ke,cwr),e(ke,w4),e(w4,f6e),e(f6e,fwr),e(w4,mwr),e(w4,JU),e(JU,gwr),e(w4,hwr),e(Dr,pwr),M(A4,Dr,null),b(f,XIe,_),b(f,Sc,_),e(Sc,y4),e(y4,m6e),M(JL,m6e,null),e(Sc,uwr),e(Sc,g6e),e(g6e,_wr),b(f,zIe,_),b(f,gr,_),M(YL,gr,null),e(gr,bwr),e(gr,Rc),e(Rc,vwr),e(Rc,YU),e(YU,Fwr),e(Rc,Twr),e(Rc,KU),e(KU,Mwr),e(Rc,Ewr),e(gr,Cwr),e(gr,KL),e(KL,wwr),e(KL,h6e),e(h6e,Awr),e(KL,ywr),e(gr,Lwr),e(gr,Gt),M(ZL,Gt,null),e(Gt,xwr),e(Gt,p6e),e(p6e,$wr),e(Gt,kwr),e(Gt,Bc),e(Bc,Swr),e(Bc,u6e),e(u6e,Rwr),e(Bc,Bwr),e(Bc,ZU),e(ZU,Pwr),e(Bc,Iwr),e(Gt,qwr),M(L4,Gt,null),e(gr,Nwr),e(gr,Gr),M(e8,Gr,null),e(Gr,jwr),e(Gr,_6e),e(_6e,Dwr),e(Gr,Gwr),e(Gr,pn),e(pn,Owr),e(pn,b6e),e(b6e,Vwr),e(pn,Xwr),e(pn,v6e),e(v6e,zwr),e(pn,Qwr),e(pn,F6e),e(F6e,Wwr),e(pn,Hwr),e(Gr,Uwr),e(Gr,Me),e(Me,x4),e(x4,T6e),e(T6e,Jwr),e(x4,Ywr),e(x4,eJ),e(eJ,Kwr),e(x4,Zwr),e(Me,eAr),e(Me,$4),e($4,M6e),e(M6e,oAr),e($4,rAr),e($4,oJ),e(oJ,tAr),e($4,aAr),e(Me,nAr),e(Me,k4),e(k4,E6e),e(E6e,sAr),e(k4,lAr),e(k4,rJ),e(rJ,iAr),e(k4,dAr),e(Me,cAr),e(Me,S4),e(S4,C6e),e(C6e,fAr),e(S4,mAr),e(S4,tJ),e(tJ,gAr),e(S4,hAr),e(Me,pAr),e(Me,R4),e(R4,w6e),e(w6e,uAr),e(R4,_Ar),e(R4,aJ),e(aJ,bAr),e(R4,vAr),e(Me,FAr),e(Me,B4),e(B4,A6e),e(A6e,TAr),e(B4,MAr),e(B4,nJ),e(nJ,EAr),e(B4,CAr),e(Me,wAr),e(Me,P4),e(P4,y6e),e(y6e,AAr),e(P4,yAr),e(P4,sJ),e(sJ,LAr),e(P4,xAr),e(Me,$Ar),e(Me,I4),e(I4,L6e),e(L6e,kAr),e(I4,SAr),e(I4,lJ),e(lJ,RAr),e(I4,BAr),e(Me,PAr),e(Me,q4),e(q4,x6e),e(x6e,IAr),e(q4,qAr),e(q4,iJ),e(iJ,NAr),e(q4,jAr),e(Me,DAr),e(Me,N4),e(N4,$6e),e($6e,GAr),e(N4,OAr),e(N4,dJ),e(dJ,VAr),e(N4,XAr),e(Me,zAr),e(Me,j4),e(j4,k6e),e(k6e,QAr),e(j4,WAr),e(j4,cJ),e(cJ,HAr),e(j4,UAr),e(Me,JAr),e(Me,D4),e(D4,S6e),e(S6e,YAr),e(D4,KAr),e(D4,fJ),e(fJ,ZAr),e(D4,eyr),e(Gr,oyr),M(G4,Gr,null),b(f,QIe,_),b(f,Pc,_),e(Pc,O4),e(O4,R6e),M(o8,R6e,null),e(Pc,ryr),e(Pc,B6e),e(B6e,tyr),b(f,WIe,_),b(f,hr,_),M(r8,hr,null),e(hr,ayr),e(hr,Ic),e(Ic,nyr),e(Ic,mJ),e(mJ,syr),e(Ic,lyr),e(Ic,gJ),e(gJ,iyr),e(Ic,dyr),e(hr,cyr),e(hr,t8),e(t8,fyr),e(t8,P6e),e(P6e,myr),e(t8,gyr),e(hr,hyr),e(hr,Ot),M(a8,Ot,null),e(Ot,pyr),e(Ot,I6e),e(I6e,uyr),e(Ot,_yr),e(Ot,qc),e(qc,byr),e(qc,q6e),e(q6e,vyr),e(qc,Fyr),e(qc,hJ),e(hJ,Tyr),e(qc,Myr),e(Ot,Eyr),M(V4,Ot,null),e(hr,Cyr),e(hr,Or),M(n8,Or,null),e(Or,wyr),e(Or,N6e),e(N6e,Ayr),e(Or,yyr),e(Or,un),e(un,Lyr),e(un,j6e),e(j6e,xyr),e(un,$yr),e(un,D6e),e(D6e,kyr),e(un,Syr),e(un,G6e),e(G6e,Ryr),e(un,Byr),e(Or,Pyr),e(Or,Le),e(Le,X4),e(X4,O6e),e(O6e,Iyr),e(X4,qyr),e(X4,pJ),e(pJ,Nyr),e(X4,jyr),e(Le,Dyr),e(Le,z4),e(z4,V6e),e(V6e,Gyr),e(z4,Oyr),e(z4,uJ),e(uJ,Vyr),e(z4,Xyr),e(Le,zyr),e(Le,Q4),e(Q4,X6e),e(X6e,Qyr),e(Q4,Wyr),e(Q4,_J),e(_J,Hyr),e(Q4,Uyr),e(Le,Jyr),e(Le,W4),e(W4,z6e),e(z6e,Yyr),e(W4,Kyr),e(W4,bJ),e(bJ,Zyr),e(W4,eLr),e(Le,oLr),e(Le,H4),e(H4,Q6e),e(Q6e,rLr),e(H4,tLr),e(H4,vJ),e(vJ,aLr),e(H4,nLr),e(Le,sLr),e(Le,U4),e(U4,W6e),e(W6e,lLr),e(U4,iLr),e(U4,FJ),e(FJ,dLr),e(U4,cLr),e(Le,fLr),e(Le,J4),e(J4,H6e),e(H6e,mLr),e(J4,gLr),e(J4,TJ),e(TJ,hLr),e(J4,pLr),e(Le,uLr),e(Le,Y4),e(Y4,U6e),e(U6e,_Lr),e(Y4,bLr),e(Y4,MJ),e(MJ,vLr),e(Y4,FLr),e(Le,TLr),e(Le,K4),e(K4,J6e),e(J6e,MLr),e(K4,ELr),e(K4,EJ),e(EJ,CLr),e(K4,wLr),e(Le,ALr),e(Le,Z4),e(Z4,Y6e),e(Y6e,yLr),e(Z4,LLr),e(Z4,CJ),e(CJ,xLr),e(Z4,$Lr),e(Or,kLr),M(eE,Or,null),b(f,HIe,_),b(f,Nc,_),e(Nc,oE),e(oE,K6e),M(s8,K6e,null),e(Nc,SLr),e(Nc,Z6e),e(Z6e,RLr),b(f,UIe,_),b(f,pr,_),M(l8,pr,null),e(pr,BLr),e(pr,jc),e(jc,PLr),e(jc,wJ),e(wJ,ILr),e(jc,qLr),e(jc,AJ),e(AJ,NLr),e(jc,jLr),e(pr,DLr),e(pr,i8),e(i8,GLr),e(i8,eTe),e(eTe,OLr),e(i8,VLr),e(pr,XLr),e(pr,Vt),M(d8,Vt,null),e(Vt,zLr),e(Vt,oTe),e(oTe,QLr),e(Vt,WLr),e(Vt,Dc),e(Dc,HLr),e(Dc,rTe),e(rTe,ULr),e(Dc,JLr),e(Dc,yJ),e(yJ,YLr),e(Dc,KLr),e(Vt,ZLr),M(rE,Vt,null),e(pr,e8r),e(pr,Vr),M(c8,Vr,null),e(Vr,o8r),e(Vr,tTe),e(tTe,r8r),e(Vr,t8r),e(Vr,_n),e(_n,a8r),e(_n,aTe),e(aTe,n8r),e(_n,s8r),e(_n,nTe),e(nTe,l8r),e(_n,i8r),e(_n,sTe),e(sTe,d8r),e(_n,c8r),e(Vr,f8r),e(Vr,Se),e(Se,tE),e(tE,lTe),e(lTe,m8r),e(tE,g8r),e(tE,LJ),e(LJ,h8r),e(tE,p8r),e(Se,u8r),e(Se,aE),e(aE,iTe),e(iTe,_8r),e(aE,b8r),e(aE,xJ),e(xJ,v8r),e(aE,F8r),e(Se,T8r),e(Se,nE),e(nE,dTe),e(dTe,M8r),e(nE,E8r),e(nE,$J),e($J,C8r),e(nE,w8r),e(Se,A8r),e(Se,sE),e(sE,cTe),e(cTe,y8r),e(sE,L8r),e(sE,kJ),e(kJ,x8r),e(sE,$8r),e(Se,k8r),e(Se,lE),e(lE,fTe),e(fTe,S8r),e(lE,R8r),e(lE,SJ),e(SJ,B8r),e(lE,P8r),e(Se,I8r),e(Se,iE),e(iE,mTe),e(mTe,q8r),e(iE,N8r),e(iE,RJ),e(RJ,j8r),e(iE,D8r),e(Se,G8r),e(Se,dE),e(dE,gTe),e(gTe,O8r),e(dE,V8r),e(dE,BJ),e(BJ,X8r),e(dE,z8r),e(Se,Q8r),e(Se,cE),e(cE,hTe),e(hTe,W8r),e(cE,H8r),e(cE,PJ),e(PJ,U8r),e(cE,J8r),e(Se,Y8r),e(Se,fE),e(fE,pTe),e(pTe,K8r),e(fE,Z8r),e(fE,IJ),e(IJ,exr),e(fE,oxr),e(Vr,rxr),M(mE,Vr,null),b(f,JIe,_),b(f,Gc,_),e(Gc,gE),e(gE,uTe),M(f8,uTe,null),e(Gc,txr),e(Gc,_Te),e(_Te,axr),b(f,YIe,_),b(f,ur,_),M(m8,ur,null),e(ur,nxr),e(ur,Oc),e(Oc,sxr),e(Oc,qJ),e(qJ,lxr),e(Oc,ixr),e(Oc,NJ),e(NJ,dxr),e(Oc,cxr),e(ur,fxr),e(ur,g8),e(g8,mxr),e(g8,bTe),e(bTe,gxr),e(g8,hxr),e(ur,pxr),e(ur,Xt),M(h8,Xt,null),e(Xt,uxr),e(Xt,vTe),e(vTe,_xr),e(Xt,bxr),e(Xt,Vc),e(Vc,vxr),e(Vc,FTe),e(FTe,Fxr),e(Vc,Txr),e(Vc,jJ),e(jJ,Mxr),e(Vc,Exr),e(Xt,Cxr),M(hE,Xt,null),e(ur,wxr),e(ur,Xr),M(p8,Xr,null),e(Xr,Axr),e(Xr,TTe),e(TTe,yxr),e(Xr,Lxr),e(Xr,bn),e(bn,xxr),e(bn,MTe),e(MTe,$xr),e(bn,kxr),e(bn,ETe),e(ETe,Sxr),e(bn,Rxr),e(bn,CTe),e(CTe,Bxr),e(bn,Pxr),e(Xr,Ixr),e(Xr,xe),e(xe,pE),e(pE,wTe),e(wTe,qxr),e(pE,Nxr),e(pE,DJ),e(DJ,jxr),e(pE,Dxr),e(xe,Gxr),e(xe,uE),e(uE,ATe),e(ATe,Oxr),e(uE,Vxr),e(uE,GJ),e(GJ,Xxr),e(uE,zxr),e(xe,Qxr),e(xe,_E),e(_E,yTe),e(yTe,Wxr),e(_E,Hxr),e(_E,OJ),e(OJ,Uxr),e(_E,Jxr),e(xe,Yxr),e(xe,bE),e(bE,LTe),e(LTe,Kxr),e(bE,Zxr),e(bE,VJ),e(VJ,e$r),e(bE,o$r),e(xe,r$r),e(xe,vE),e(vE,xTe),e(xTe,t$r),e(vE,a$r),e(vE,XJ),e(XJ,n$r),e(vE,s$r),e(xe,l$r),e(xe,FE),e(FE,$Te),e($Te,i$r),e(FE,d$r),e(FE,zJ),e(zJ,c$r),e(FE,f$r),e(xe,m$r),e(xe,TE),e(TE,kTe),e(kTe,g$r),e(TE,h$r),e(TE,QJ),e(QJ,p$r),e(TE,u$r),e(xe,_$r),e(xe,ME),e(ME,STe),e(STe,b$r),e(ME,v$r),e(ME,WJ),e(WJ,F$r),e(ME,T$r),e(xe,M$r),e(xe,EE),e(EE,RTe),e(RTe,E$r),e(EE,C$r),e(EE,HJ),e(HJ,w$r),e(EE,A$r),e(xe,y$r),e(xe,CE),e(CE,BTe),e(BTe,L$r),e(CE,x$r),e(CE,UJ),e(UJ,$$r),e(CE,k$r),e(Xr,S$r),M(wE,Xr,null),b(f,KIe,_),b(f,Xc,_),e(Xc,AE),e(AE,PTe),M(u8,PTe,null),e(Xc,R$r),e(Xc,ITe),e(ITe,B$r),b(f,ZIe,_),b(f,_r,_),M(_8,_r,null),e(_r,P$r),e(_r,zc),e(zc,I$r),e(zc,JJ),e(JJ,q$r),e(zc,N$r),e(zc,YJ),e(YJ,j$r),e(zc,D$r),e(_r,G$r),e(_r,b8),e(b8,O$r),e(b8,qTe),e(qTe,V$r),e(b8,X$r),e(_r,z$r),e(_r,zt),M(v8,zt,null),e(zt,Q$r),e(zt,NTe),e(NTe,W$r),e(zt,H$r),e(zt,Qc),e(Qc,U$r),e(Qc,jTe),e(jTe,J$r),e(Qc,Y$r),e(Qc,KJ),e(KJ,K$r),e(Qc,Z$r),e(zt,ekr),M(yE,zt,null),e(_r,okr),e(_r,zr),M(F8,zr,null),e(zr,rkr),e(zr,DTe),e(DTe,tkr),e(zr,akr),e(zr,vn),e(vn,nkr),e(vn,GTe),e(GTe,skr),e(vn,lkr),e(vn,OTe),e(OTe,ikr),e(vn,dkr),e(vn,VTe),e(VTe,ckr),e(vn,fkr),e(zr,mkr),e(zr,$e),e($e,LE),e(LE,XTe),e(XTe,gkr),e(LE,hkr),e(LE,ZJ),e(ZJ,pkr),e(LE,ukr),e($e,_kr),e($e,xE),e(xE,zTe),e(zTe,bkr),e(xE,vkr),e(xE,eY),e(eY,Fkr),e(xE,Tkr),e($e,Mkr),e($e,$E),e($E,QTe),e(QTe,Ekr),e($E,Ckr),e($E,oY),e(oY,wkr),e($E,Akr),e($e,ykr),e($e,kE),e(kE,WTe),e(WTe,Lkr),e(kE,xkr),e(kE,rY),e(rY,$kr),e(kE,kkr),e($e,Skr),e($e,SE),e(SE,HTe),e(HTe,Rkr),e(SE,Bkr),e(SE,tY),e(tY,Pkr),e(SE,Ikr),e($e,qkr),e($e,RE),e(RE,UTe),e(UTe,Nkr),e(RE,jkr),e(RE,aY),e(aY,Dkr),e(RE,Gkr),e($e,Okr),e($e,BE),e(BE,JTe),e(JTe,Vkr),e(BE,Xkr),e(BE,nY),e(nY,zkr),e(BE,Qkr),e($e,Wkr),e($e,PE),e(PE,YTe),e(YTe,Hkr),e(PE,Ukr),e(PE,sY),e(sY,Jkr),e(PE,Ykr),e($e,Kkr),e($e,IE),e(IE,KTe),e(KTe,Zkr),e(IE,eSr),e(IE,lY),e(lY,oSr),e(IE,rSr),e($e,tSr),e($e,qE),e(qE,ZTe),e(ZTe,aSr),e(qE,nSr),e(qE,iY),e(iY,sSr),e(qE,lSr),e(zr,iSr),M(NE,zr,null),b(f,eqe,_),b(f,Wc,_),e(Wc,jE),e(jE,e7e),M(T8,e7e,null),e(Wc,dSr),e(Wc,o7e),e(o7e,cSr),b(f,oqe,_),b(f,br,_),M(M8,br,null),e(br,fSr),e(br,Hc),e(Hc,mSr),e(Hc,dY),e(dY,gSr),e(Hc,hSr),e(Hc,cY),e(cY,pSr),e(Hc,uSr),e(br,_Sr),e(br,E8),e(E8,bSr),e(E8,r7e),e(r7e,vSr),e(E8,FSr),e(br,TSr),e(br,Qt),M(C8,Qt,null),e(Qt,MSr),e(Qt,t7e),e(t7e,ESr),e(Qt,CSr),e(Qt,Uc),e(Uc,wSr),e(Uc,a7e),e(a7e,ASr),e(Uc,ySr),e(Uc,fY),e(fY,LSr),e(Uc,xSr),e(Qt,$Sr),M(DE,Qt,null),e(br,kSr),e(br,Qr),M(w8,Qr,null),e(Qr,SSr),e(Qr,n7e),e(n7e,RSr),e(Qr,BSr),e(Qr,Fn),e(Fn,PSr),e(Fn,s7e),e(s7e,ISr),e(Fn,qSr),e(Fn,l7e),e(l7e,NSr),e(Fn,jSr),e(Fn,i7e),e(i7e,DSr),e(Fn,GSr),e(Qr,OSr),e(Qr,De),e(De,GE),e(GE,d7e),e(d7e,VSr),e(GE,XSr),e(GE,mY),e(mY,zSr),e(GE,QSr),e(De,WSr),e(De,OE),e(OE,c7e),e(c7e,HSr),e(OE,USr),e(OE,gY),e(gY,JSr),e(OE,YSr),e(De,KSr),e(De,VE),e(VE,f7e),e(f7e,ZSr),e(VE,eRr),e(VE,hY),e(hY,oRr),e(VE,rRr),e(De,tRr),e(De,XE),e(XE,m7e),e(m7e,aRr),e(XE,nRr),e(XE,pY),e(pY,sRr),e(XE,lRr),e(De,iRr),e(De,zE),e(zE,g7e),e(g7e,dRr),e(zE,cRr),e(zE,uY),e(uY,fRr),e(zE,mRr),e(De,gRr),e(De,QE),e(QE,h7e),e(h7e,hRr),e(QE,pRr),e(QE,_Y),e(_Y,uRr),e(QE,_Rr),e(De,bRr),e(De,WE),e(WE,p7e),e(p7e,vRr),e(WE,FRr),e(WE,bY),e(bY,TRr),e(WE,MRr),e(De,ERr),e(De,HE),e(HE,u7e),e(u7e,CRr),e(HE,wRr),e(HE,vY),e(vY,ARr),e(HE,yRr),e(Qr,LRr),M(UE,Qr,null),b(f,rqe,_),b(f,Jc,_),e(Jc,JE),e(JE,_7e),M(A8,_7e,null),e(Jc,xRr),e(Jc,b7e),e(b7e,$Rr),b(f,tqe,_),b(f,vr,_),M(y8,vr,null),e(vr,kRr),e(vr,Yc),e(Yc,SRr),e(Yc,FY),e(FY,RRr),e(Yc,BRr),e(Yc,TY),e(TY,PRr),e(Yc,IRr),e(vr,qRr),e(vr,L8),e(L8,NRr),e(L8,v7e),e(v7e,jRr),e(L8,DRr),e(vr,GRr),e(vr,Wt),M(x8,Wt,null),e(Wt,ORr),e(Wt,F7e),e(F7e,VRr),e(Wt,XRr),e(Wt,Kc),e(Kc,zRr),e(Kc,T7e),e(T7e,QRr),e(Kc,WRr),e(Kc,MY),e(MY,HRr),e(Kc,URr),e(Wt,JRr),M(YE,Wt,null),e(vr,YRr),e(vr,Wr),M($8,Wr,null),e(Wr,KRr),e(Wr,M7e),e(M7e,ZRr),e(Wr,eBr),e(Wr,Tn),e(Tn,oBr),e(Tn,E7e),e(E7e,rBr),e(Tn,tBr),e(Tn,C7e),e(C7e,aBr),e(Tn,nBr),e(Tn,w7e),e(w7e,sBr),e(Tn,lBr),e(Wr,iBr),e(Wr,Ge),e(Ge,KE),e(KE,A7e),e(A7e,dBr),e(KE,cBr),e(KE,EY),e(EY,fBr),e(KE,mBr),e(Ge,gBr),e(Ge,ZE),e(ZE,y7e),e(y7e,hBr),e(ZE,pBr),e(ZE,CY),e(CY,uBr),e(ZE,_Br),e(Ge,bBr),e(Ge,e5),e(e5,L7e),e(L7e,vBr),e(e5,FBr),e(e5,wY),e(wY,TBr),e(e5,MBr),e(Ge,EBr),e(Ge,o5),e(o5,x7e),e(x7e,CBr),e(o5,wBr),e(o5,AY),e(AY,ABr),e(o5,yBr),e(Ge,LBr),e(Ge,r5),e(r5,$7e),e($7e,xBr),e(r5,$Br),e(r5,yY),e(yY,kBr),e(r5,SBr),e(Ge,RBr),e(Ge,t5),e(t5,k7e),e(k7e,BBr),e(t5,PBr),e(t5,LY),e(LY,IBr),e(t5,qBr),e(Ge,NBr),e(Ge,a5),e(a5,S7e),e(S7e,jBr),e(a5,DBr),e(a5,xY),e(xY,GBr),e(a5,OBr),e(Ge,VBr),e(Ge,n5),e(n5,R7e),e(R7e,XBr),e(n5,zBr),e(n5,$Y),e($Y,QBr),e(n5,WBr),e(Wr,HBr),M(s5,Wr,null),b(f,aqe,_),b(f,Zc,_),e(Zc,l5),e(l5,B7e),M(k8,B7e,null),e(Zc,UBr),e(Zc,P7e),e(P7e,JBr),b(f,nqe,_),b(f,Fr,_),M(S8,Fr,null),e(Fr,YBr),e(Fr,ef),e(ef,KBr),e(ef,kY),e(kY,ZBr),e(ef,ePr),e(ef,SY),e(SY,oPr),e(ef,rPr),e(Fr,tPr),e(Fr,R8),e(R8,aPr),e(R8,I7e),e(I7e,nPr),e(R8,sPr),e(Fr,lPr),e(Fr,Ht),M(B8,Ht,null),e(Ht,iPr),e(Ht,q7e),e(q7e,dPr),e(Ht,cPr),e(Ht,of),e(of,fPr),e(of,N7e),e(N7e,mPr),e(of,gPr),e(of,RY),e(RY,hPr),e(of,pPr),e(Ht,uPr),M(i5,Ht,null),e(Fr,_Pr),e(Fr,Hr),M(P8,Hr,null),e(Hr,bPr),e(Hr,j7e),e(j7e,vPr),e(Hr,FPr),e(Hr,Mn),e(Mn,TPr),e(Mn,D7e),e(D7e,MPr),e(Mn,EPr),e(Mn,G7e),e(G7e,CPr),e(Mn,wPr),e(Mn,O7e),e(O7e,APr),e(Mn,yPr),e(Hr,LPr),e(Hr,V7e),e(V7e,d5),e(d5,X7e),e(X7e,xPr),e(d5,$Pr),e(d5,BY),e(BY,kPr),e(d5,SPr),e(Hr,RPr),M(c5,Hr,null),b(f,sqe,_),b(f,rf,_),e(rf,f5),e(f5,z7e),M(I8,z7e,null),e(rf,BPr),e(rf,Q7e),e(Q7e,PPr),b(f,lqe,_),b(f,Tr,_),M(q8,Tr,null),e(Tr,IPr),e(Tr,tf),e(tf,qPr),e(tf,PY),e(PY,NPr),e(tf,jPr),e(tf,IY),e(IY,DPr),e(tf,GPr),e(Tr,OPr),e(Tr,N8),e(N8,VPr),e(N8,W7e),e(W7e,XPr),e(N8,zPr),e(Tr,QPr),e(Tr,Ut),M(j8,Ut,null),e(Ut,WPr),e(Ut,H7e),e(H7e,HPr),e(Ut,UPr),e(Ut,af),e(af,JPr),e(af,U7e),e(U7e,YPr),e(af,KPr),e(af,qY),e(qY,ZPr),e(af,eIr),e(Ut,oIr),M(m5,Ut,null),e(Tr,rIr),e(Tr,Ur),M(D8,Ur,null),e(Ur,tIr),e(Ur,J7e),e(J7e,aIr),e(Ur,nIr),e(Ur,En),e(En,sIr),e(En,Y7e),e(Y7e,lIr),e(En,iIr),e(En,K7e),e(K7e,dIr),e(En,cIr),e(En,Z7e),e(Z7e,fIr),e(En,mIr),e(Ur,gIr),e(Ur,G8),e(G8,g5),e(g5,e9e),e(e9e,hIr),e(g5,pIr),e(g5,NY),e(NY,uIr),e(g5,_Ir),e(G8,bIr),e(G8,h5),e(h5,o9e),e(o9e,vIr),e(h5,FIr),e(h5,jY),e(jY,TIr),e(h5,MIr),e(Ur,EIr),M(p5,Ur,null),b(f,iqe,_),b(f,nf,_),e(nf,u5),e(u5,r9e),M(O8,r9e,null),e(nf,CIr),e(nf,t9e),e(t9e,wIr),b(f,dqe,_),b(f,Mr,_),M(V8,Mr,null),e(Mr,AIr),e(Mr,sf),e(sf,yIr),e(sf,DY),e(DY,LIr),e(sf,xIr),e(sf,GY),e(GY,$Ir),e(sf,kIr),e(Mr,SIr),e(Mr,X8),e(X8,RIr),e(X8,a9e),e(a9e,BIr),e(X8,PIr),e(Mr,IIr),e(Mr,Jt),M(z8,Jt,null),e(Jt,qIr),e(Jt,n9e),e(n9e,NIr),e(Jt,jIr),e(Jt,lf),e(lf,DIr),e(lf,s9e),e(s9e,GIr),e(lf,OIr),e(lf,OY),e(OY,VIr),e(lf,XIr),e(Jt,zIr),M(_5,Jt,null),e(Mr,QIr),e(Mr,Jr),M(Q8,Jr,null),e(Jr,WIr),e(Jr,l9e),e(l9e,HIr),e(Jr,UIr),e(Jr,Cn),e(Cn,JIr),e(Cn,i9e),e(i9e,YIr),e(Cn,KIr),e(Cn,d9e),e(d9e,ZIr),e(Cn,eqr),e(Cn,c9e),e(c9e,oqr),e(Cn,rqr),e(Jr,tqr),e(Jr,f9e),e(f9e,b5),e(b5,m9e),e(m9e,aqr),e(b5,nqr),e(b5,VY),e(VY,sqr),e(b5,lqr),e(Jr,iqr),M(v5,Jr,null),cqe=!0},p(f,[_]){const W8={};_&2&&(W8.$$scope={dirty:_,ctx:f}),_f.$set(W8);const g9e={};_&2&&(g9e.$$scope={dirty:_,ctx:f}),hg.$set(g9e);const h9e={};_&2&&(h9e.$$scope={dirty:_,ctx:f}),Qg.$set(h9e);const p9e={};_&2&&(p9e.$$scope={dirty:_,ctx:f}),vh.$set(p9e);const H8={};_&2&&(H8.$$scope={dirty:_,ctx:f}),Fh.$set(H8);const u9e={};_&2&&(u9e.$$scope={dirty:_,ctx:f}),qh.$set(u9e);const wn={};_&2&&(wn.$$scope={dirty:_,ctx:f}),Nh.$set(wn);const _9e={};_&2&&(_9e.$$scope={dirty:_,ctx:f}),Gh.$set(_9e);const b9e={};_&2&&(b9e.$$scope={dirty:_,ctx:f}),xu.$set(b9e);const v9e={};_&2&&(v9e.$$scope={dirty:_,ctx:f}),ku.$set(v9e);const U8={};_&2&&(U8.$$scope={dirty:_,ctx:f}),b_.$set(U8);const F9e={};_&2&&(F9e.$$scope={dirty:_,ctx:f}),F_.$set(F9e);const J8={};_&2&&(J8.$$scope={dirty:_,ctx:f}),t1.$set(J8);const T9e={};_&2&&(T9e.$$scope={dirty:_,ctx:f}),n1.$set(T9e);const Y8={};_&2&&(Y8.$$scope={dirty:_,ctx:f}),O1.$set(Y8);const M9e={};_&2&&(M9e.$$scope={dirty:_,ctx:f}),X1.$set(M9e);const E9e={};_&2&&(E9e.$$scope={dirty:_,ctx:f}),db.$set(E9e);const C9e={};_&2&&(C9e.$$scope={dirty:_,ctx:f}),fb.$set(C9e);const df={};_&2&&(df.$$scope={dirty:_,ctx:f}),s2.$set(df);const w9e={};_&2&&(w9e.$$scope={dirty:_,ctx:f}),i2.$set(w9e);const A9e={};_&2&&(A9e.$$scope={dirty:_,ctx:f}),j2.$set(A9e);const y9e={};_&2&&(y9e.$$scope={dirty:_,ctx:f}),G2.$set(y9e);const K8={};_&2&&(K8.$$scope={dirty:_,ctx:f}),H2.$set(K8);const L9e={};_&2&&(L9e.$$scope={dirty:_,ctx:f}),J2.$set(L9e);const x9e={};_&2&&(x9e.$$scope={dirty:_,ctx:f}),kv.$set(x9e);const $9e={};_&2&&($9e.$$scope={dirty:_,ctx:f}),Rv.$set($9e);const Kr={};_&2&&(Kr.$$scope={dirty:_,ctx:f}),FF.$set(Kr);const Z8={};_&2&&(Z8.$$scope={dirty:_,ctx:f}),MF.$set(Z8);const k9e={};_&2&&(k9e.$$scope={dirty:_,ctx:f}),wF.$set(k9e);const ex={};_&2&&(ex.$$scope={dirty:_,ctx:f}),yF.$set(ex);const S9e={};_&2&&(S9e.$$scope={dirty:_,ctx:f}),DF.$set(S9e);const Zr={};_&2&&(Zr.$$scope={dirty:_,ctx:f}),OF.$set(Zr);const R9e={};_&2&&(R9e.$$scope={dirty:_,ctx:f}),zF.$set(R9e);const cf={};_&2&&(cf.$$scope={dirty:_,ctx:f}),WF.$set(cf);const B9e={};_&2&&(B9e.$$scope={dirty:_,ctx:f}),t0.$set(B9e);const P9e={};_&2&&(P9e.$$scope={dirty:_,ctx:f}),n0.$set(P9e);const L={};_&2&&(L.$$scope={dirty:_,ctx:f}),f0.$set(L);const F5={};_&2&&(F5.$$scope={dirty:_,ctx:f}),g0.$set(F5);const I9e={};_&2&&(I9e.$$scope={dirty:_,ctx:f}),E0.$set(I9e);const q9e={};_&2&&(q9e.$$scope={dirty:_,ctx:f}),w0.$set(q9e);const T5={};_&2&&(T5.$$scope={dirty:_,ctx:f}),x0.$set(T5);const N9e={};_&2&&(N9e.$$scope={dirty:_,ctx:f}),k0.$set(N9e);const j9e={};_&2&&(j9e.$$scope={dirty:_,ctx:f}),q0.$set(j9e);const M5={};_&2&&(M5.$$scope={dirty:_,ctx:f}),j0.$set(M5);const D9e={};_&2&&(D9e.$$scope={dirty:_,ctx:f}),X0.$set(D9e);const G9e={};_&2&&(G9e.$$scope={dirty:_,ctx:f}),Q0.$set(G9e);const E5={};_&2&&(E5.$$scope={dirty:_,ctx:f}),J0.$set(E5);const O9e={};_&2&&(O9e.$$scope={dirty:_,ctx:f}),K0.$set(O9e);const V9e={};_&2&&(V9e.$$scope={dirty:_,ctx:f}),o6.$set(V9e);const C5={};_&2&&(C5.$$scope={dirty:_,ctx:f}),t6.$set(C5);const X9e={};_&2&&(X9e.$$scope={dirty:_,ctx:f}),d6.$set(X9e);const z9e={};_&2&&(z9e.$$scope={dirty:_,ctx:f}),f6.$set(z9e);const w5={};_&2&&(w5.$$scope={dirty:_,ctx:f}),h6.$set(w5);const Q9e={};_&2&&(Q9e.$$scope={dirty:_,ctx:f}),u6.$set(Q9e);const W9e={};_&2&&(W9e.$$scope={dirty:_,ctx:f}),lT.$set(W9e);const A5={};_&2&&(A5.$$scope={dirty:_,ctx:f}),dT.$set(A5);const H9e={};_&2&&(H9e.$$scope={dirty:_,ctx:f}),RT.$set(H9e);const U9e={};_&2&&(U9e.$$scope={dirty:_,ctx:f}),PT.$set(U9e);const y5={};_&2&&(y5.$$scope={dirty:_,ctx:f}),HT.$set(y5);const J9e={};_&2&&(J9e.$$scope={dirty:_,ctx:f}),JT.$set(J9e);const Y9e={};_&2&&(Y9e.$$scope={dirty:_,ctx:f}),e7.$set(Y9e);const L5={};_&2&&(L5.$$scope={dirty:_,ctx:f}),r7.$set(L5);const K9e={};_&2&&(K9e.$$scope={dirty:_,ctx:f}),E7.$set(K9e);const Z9e={};_&2&&(Z9e.$$scope={dirty:_,ctx:f}),w7.$set(Z9e);const x5={};_&2&&(x5.$$scope={dirty:_,ctx:f}),I7.$set(x5);const eMe={};_&2&&(eMe.$$scope={dirty:_,ctx:f}),N7.$set(eMe);const oMe={};_&2&&(oMe.$$scope={dirty:_,ctx:f}),f9.$set(oMe);const $5={};_&2&&($5.$$scope={dirty:_,ctx:f}),g9.$set($5);const rMe={};_&2&&(rMe.$$scope={dirty:_,ctx:f}),k9.$set(rMe);const tMe={};_&2&&(tMe.$$scope={dirty:_,ctx:f}),R9.$set(tMe);const k5={};_&2&&(k5.$$scope={dirty:_,ctx:f}),I9.$set(k5);const aMe={};_&2&&(aMe.$$scope={dirty:_,ctx:f}),N9.$set(aMe);const nMe={};_&2&&(nMe.$$scope={dirty:_,ctx:f}),D9.$set(nMe);const S5={};_&2&&(S5.$$scope={dirty:_,ctx:f}),O9.$set(S5);const sMe={};_&2&&(sMe.$$scope={dirty:_,ctx:f}),dM.$set(sMe);const lMe={};_&2&&(lMe.$$scope={dirty:_,ctx:f}),fM.$set(lMe);const R5={};_&2&&(R5.$$scope={dirty:_,ctx:f}),SM.$set(R5);const iMe={};_&2&&(iMe.$$scope={dirty:_,ctx:f}),BM.$set(iMe);const dMe={};_&2&&(dMe.$$scope={dirty:_,ctx:f}),IM.$set(dMe);const B5={};_&2&&(B5.$$scope={dirty:_,ctx:f}),NM.$set(B5);const cMe={};_&2&&(cMe.$$scope={dirty:_,ctx:f}),DM.$set(cMe);const fMe={};_&2&&(fMe.$$scope={dirty:_,ctx:f}),OM.$set(fMe);const P5={};_&2&&(P5.$$scope={dirty:_,ctx:f}),h4.$set(P5);const mMe={};_&2&&(mMe.$$scope={dirty:_,ctx:f}),u4.$set(mMe);const gMe={};_&2&&(gMe.$$scope={dirty:_,ctx:f}),A4.$set(gMe);const I5={};_&2&&(I5.$$scope={dirty:_,ctx:f}),L4.$set(I5);const hMe={};_&2&&(hMe.$$scope={dirty:_,ctx:f}),G4.$set(hMe);const pMe={};_&2&&(pMe.$$scope={dirty:_,ctx:f}),V4.$set(pMe);const q5={};_&2&&(q5.$$scope={dirty:_,ctx:f}),eE.$set(q5);const uMe={};_&2&&(uMe.$$scope={dirty:_,ctx:f}),rE.$set(uMe);const _Me={};_&2&&(_Me.$$scope={dirty:_,ctx:f}),mE.$set(_Me);const N5={};_&2&&(N5.$$scope={dirty:_,ctx:f}),hE.$set(N5);const bMe={};_&2&&(bMe.$$scope={dirty:_,ctx:f}),wE.$set(bMe);const vMe={};_&2&&(vMe.$$scope={dirty:_,ctx:f}),yE.$set(vMe);const j5={};_&2&&(j5.$$scope={dirty:_,ctx:f}),NE.$set(j5);const FMe={};_&2&&(FMe.$$scope={dirty:_,ctx:f}),DE.$set(FMe);const TMe={};_&2&&(TMe.$$scope={dirty:_,ctx:f}),UE.$set(TMe);const D5={};_&2&&(D5.$$scope={dirty:_,ctx:f}),YE.$set(D5);const MMe={};_&2&&(MMe.$$scope={dirty:_,ctx:f}),s5.$set(MMe);const EMe={};_&2&&(EMe.$$scope={dirty:_,ctx:f}),i5.$set(EMe);const G5={};_&2&&(G5.$$scope={dirty:_,ctx:f}),c5.$set(G5);const CMe={};_&2&&(CMe.$$scope={dirty:_,ctx:f}),m5.$set(CMe);const wMe={};_&2&&(wMe.$$scope={dirty:_,ctx:f}),p5.$set(wMe);const O5={};_&2&&(O5.$$scope={dirty:_,ctx:f}),_5.$set(O5);const AMe={};_&2&&(AMe.$$scope={dirty:_,ctx:f}),v5.$set(AMe)},i(f){cqe||(E(d.$$.fragment,f),E(Ma.$$.fragment,f),E(O3.$$.fragment,f),E(V3.$$.fragment,f),E(_f.$$.fragment,f),E(X3.$$.fragment,f),E(z3.$$.fragment,f),E(H3.$$.fragment,f),E(hg.$$.fragment,f),E(U3.$$.fragment,f),E(J3.$$.fragment,f),E(Y3.$$.fragment,f),E(ew.$$.fragment,f),E(Qg.$$.fragment,f),E(ow.$$.fragment,f),E(rw.$$.fragment,f),E(tw.$$.fragment,f),E(sw.$$.fragment,f),E(vh.$$.fragment,f),E(Fh.$$.fragment,f),E(lw.$$.fragment,f),E(iw.$$.fragment,f),E(dw.$$.fragment,f),E(mw.$$.fragment,f),E(qh.$$.fragment,f),E(Nh.$$.fragment,f),E(gw.$$.fragment,f),E(hw.$$.fragment,f),E(pw.$$.fragment,f),E(_w.$$.fragment,f),E(Gh.$$.fragment,f),E(bw.$$.fragment,f),E(xu.$$.fragment,f),E(vw.$$.fragment,f),E(Fw.$$.fragment,f),E(Mw.$$.fragment,f),E(ku.$$.fragment,f),E(Ew.$$.fragment,f),E(b_.$$.fragment,f),E(Cw.$$.fragment,f),E(ww.$$.fragment,f),E(yw.$$.fragment,f),E(F_.$$.fragment,f),E(Lw.$$.fragment,f),E(t1.$$.fragment,f),E(xw.$$.fragment,f),E($w.$$.fragment,f),E(Sw.$$.fragment,f),E(n1.$$.fragment,f),E(Rw.$$.fragment,f),E(O1.$$.fragment,f),E(Bw.$$.fragment,f),E(Pw.$$.fragment,f),E(qw.$$.fragment,f),E(X1.$$.fragment,f),E(Nw.$$.fragment,f),E(db.$$.fragment,f),E(jw.$$.fragment,f),E(Dw.$$.fragment,f),E(Ow.$$.fragment,f),E(fb.$$.fragment,f),E(Vw.$$.fragment,f),E(s2.$$.fragment,f),E(Xw.$$.fragment,f),E(zw.$$.fragment,f),E(Ww.$$.fragment,f),E(i2.$$.fragment,f),E(Hw.$$.fragment,f),E(j2.$$.fragment,f),E(Uw.$$.fragment,f),E(Jw.$$.fragment,f),E(Kw.$$.fragment,f),E(G2.$$.fragment,f),E(Zw.$$.fragment,f),E(H2.$$.fragment,f),E(eA.$$.fragment,f),E(oA.$$.fragment,f),E(tA.$$.fragment,f),E(J2.$$.fragment,f),E(aA.$$.fragment,f),E(kv.$$.fragment,f),E(nA.$$.fragment,f),E(sA.$$.fragment,f),E(iA.$$.fragment,f),E(Rv.$$.fragment,f),E(dA.$$.fragment,f),E(FF.$$.fragment,f),E(cA.$$.fragment,f),E(fA.$$.fragment,f),E(gA.$$.fragment,f),E(MF.$$.fragment,f),E(hA.$$.fragment,f),E(wF.$$.fragment,f),E(pA.$$.fragment,f),E(uA.$$.fragment,f),E(bA.$$.fragment,f),E(yF.$$.fragment,f),E(vA.$$.fragment,f),E(DF.$$.fragment,f),E(FA.$$.fragment,f),E(TA.$$.fragment,f),E(EA.$$.fragment,f),E(OF.$$.fragment,f),E(CA.$$.fragment,f),E(zF.$$.fragment,f),E(wA.$$.fragment,f),E(AA.$$.fragment,f),E(LA.$$.fragment,f),E(WF.$$.fragment,f),E(xA.$$.fragment,f),E(t0.$$.fragment,f),E($A.$$.fragment,f),E(kA.$$.fragment,f),E(RA.$$.fragment,f),E(n0.$$.fragment,f),E(BA.$$.fragment,f),E(f0.$$.fragment,f),E(PA.$$.fragment,f),E(IA.$$.fragment,f),E(NA.$$.fragment,f),E(g0.$$.fragment,f),E(jA.$$.fragment,f),E(E0.$$.fragment,f),E(DA.$$.fragment,f),E(GA.$$.fragment,f),E(VA.$$.fragment,f),E(w0.$$.fragment,f),E(XA.$$.fragment,f),E(x0.$$.fragment,f),E(QA.$$.fragment,f),E(WA.$$.fragment,f),E(UA.$$.fragment,f),E(k0.$$.fragment,f),E(JA.$$.fragment,f),E(q0.$$.fragment,f),E(YA.$$.fragment,f),E(KA.$$.fragment,f),E(ey.$$.fragment,f),E(j0.$$.fragment,f),E(oy.$$.fragment,f),E(X0.$$.fragment,f),E(ry.$$.fragment,f),E(ty.$$.fragment,f),E(ny.$$.fragment,f),E(Q0.$$.fragment,f),E(sy.$$.fragment,f),E(J0.$$.fragment,f),E(iy.$$.fragment,f),E(dy.$$.fragment,f),E(fy.$$.fragment,f),E(K0.$$.fragment,f),E(my.$$.fragment,f),E(o6.$$.fragment,f),E(gy.$$.fragment,f),E(hy.$$.fragment,f),E(uy.$$.fragment,f),E(t6.$$.fragment,f),E(_y.$$.fragment,f),E(d6.$$.fragment,f),E(by.$$.fragment,f),E(vy.$$.fragment,f),E(Ty.$$.fragment,f),E(f6.$$.fragment,f),E(My.$$.fragment,f),E(h6.$$.fragment,f),E(Ey.$$.fragment,f),E(Cy.$$.fragment,f),E(Ay.$$.fragment,f),E(u6.$$.fragment,f),E(yy.$$.fragment,f),E(lT.$$.fragment,f),E(Ly.$$.fragment,f),E(xy.$$.fragment,f),E(ky.$$.fragment,f),E(dT.$$.fragment,f),E(Sy.$$.fragment,f),E(RT.$$.fragment,f),E(Ry.$$.fragment,f),E(By.$$.fragment,f),E(Iy.$$.fragment,f),E(PT.$$.fragment,f),E(qy.$$.fragment,f),E(HT.$$.fragment,f),E(Ny.$$.fragment,f),E(jy.$$.fragment,f),E(Gy.$$.fragment,f),E(JT.$$.fragment,f),E(Oy.$$.fragment,f),E(e7.$$.fragment,f),E(Vy.$$.fragment,f),E(Xy.$$.fragment,f),E(Qy.$$.fragment,f),E(r7.$$.fragment,f),E(Wy.$$.fragment,f),E(E7.$$.fragment,f),E(Hy.$$.fragment,f),E(Uy.$$.fragment,f),E(Yy.$$.fragment,f),E(w7.$$.fragment,f),E(Ky.$$.fragment,f),E(I7.$$.fragment,f),E(Zy.$$.fragment,f),E(eL.$$.fragment,f),E(rL.$$.fragment,f),E(N7.$$.fragment,f),E(tL.$$.fragment,f),E(f9.$$.fragment,f),E(aL.$$.fragment,f),E(nL.$$.fragment,f),E(lL.$$.fragment,f),E(g9.$$.fragment,f),E(iL.$$.fragment,f),E(k9.$$.fragment,f),E(dL.$$.fragment,f),E(cL.$$.fragment,f),E(mL.$$.fragment,f),E(R9.$$.fragment,f),E(gL.$$.fragment,f),E(I9.$$.fragment,f),E(pL.$$.fragment,f),E(uL.$$.fragment,f),E(bL.$$.fragment,f),E(N9.$$.fragment,f),E(vL.$$.fragment,f),E(D9.$$.fragment,f),E(FL.$$.fragment,f),E(TL.$$.fragment,f),E(EL.$$.fragment,f),E(O9.$$.fragment,f),E(CL.$$.fragment,f),E(dM.$$.fragment,f),E(wL.$$.fragment,f),E(AL.$$.fragment,f),E(LL.$$.fragment,f),E(fM.$$.fragment,f),E(xL.$$.fragment,f),E(SM.$$.fragment,f),E($L.$$.fragment,f),E(kL.$$.fragment,f),E(RL.$$.fragment,f),E(BM.$$.fragment,f),E(BL.$$.fragment,f),E(IM.$$.fragment,f),E(PL.$$.fragment,f),E(IL.$$.fragment,f),E(NL.$$.fragment,f),E(NM.$$.fragment,f),E(jL.$$.fragment,f),E(DM.$$.fragment,f),E(DL.$$.fragment,f),E(GL.$$.fragment,f),E(VL.$$.fragment,f),E(OM.$$.fragment,f),E(XL.$$.fragment,f),E(h4.$$.fragment,f),E(zL.$$.fragment,f),E(QL.$$.fragment,f),E(HL.$$.fragment,f),E(u4.$$.fragment,f),E(UL.$$.fragment,f),E(A4.$$.fragment,f),E(JL.$$.fragment,f),E(YL.$$.fragment,f),E(ZL.$$.fragment,f),E(L4.$$.fragment,f),E(e8.$$.fragment,f),E(G4.$$.fragment,f),E(o8.$$.fragment,f),E(r8.$$.fragment,f),E(a8.$$.fragment,f),E(V4.$$.fragment,f),E(n8.$$.fragment,f),E(eE.$$.fragment,f),E(s8.$$.fragment,f),E(l8.$$.fragment,f),E(d8.$$.fragment,f),E(rE.$$.fragment,f),E(c8.$$.fragment,f),E(mE.$$.fragment,f),E(f8.$$.fragment,f),E(m8.$$.fragment,f),E(h8.$$.fragment,f),E(hE.$$.fragment,f),E(p8.$$.fragment,f),E(wE.$$.fragment,f),E(u8.$$.fragment,f),E(_8.$$.fragment,f),E(v8.$$.fragment,f),E(yE.$$.fragment,f),E(F8.$$.fragment,f),E(NE.$$.fragment,f),E(T8.$$.fragment,f),E(M8.$$.fragment,f),E(C8.$$.fragment,f),E(DE.$$.fragment,f),E(w8.$$.fragment,f),E(UE.$$.fragment,f),E(A8.$$.fragment,f),E(y8.$$.fragment,f),E(x8.$$.fragment,f),E(YE.$$.fragment,f),E($8.$$.fragment,f),E(s5.$$.fragment,f),E(k8.$$.fragment,f),E(S8.$$.fragment,f),E(B8.$$.fragment,f),E(i5.$$.fragment,f),E(P8.$$.fragment,f),E(c5.$$.fragment,f),E(I8.$$.fragment,f),E(q8.$$.fragment,f),E(j8.$$.fragment,f),E(m5.$$.fragment,f),E(D8.$$.fragment,f),E(p5.$$.fragment,f),E(O8.$$.fragment,f),E(V8.$$.fragment,f),E(z8.$$.fragment,f),E(_5.$$.fragment,f),E(Q8.$$.fragment,f),E(v5.$$.fragment,f),cqe=!0)},o(f){C(d.$$.fragment,f),C(Ma.$$.fragment,f),C(O3.$$.fragment,f),C(V3.$$.fragment,f),C(_f.$$.fragment,f),C(X3.$$.fragment,f),C(z3.$$.fragment,f),C(H3.$$.fragment,f),C(hg.$$.fragment,f),C(U3.$$.fragment,f),C(J3.$$.fragment,f),C(Y3.$$.fragment,f),C(ew.$$.fragment,f),C(Qg.$$.fragment,f),C(ow.$$.fragment,f),C(rw.$$.fragment,f),C(tw.$$.fragment,f),C(sw.$$.fragment,f),C(vh.$$.fragment,f),C(Fh.$$.fragment,f),C(lw.$$.fragment,f),C(iw.$$.fragment,f),C(dw.$$.fragment,f),C(mw.$$.fragment,f),C(qh.$$.fragment,f),C(Nh.$$.fragment,f),C(gw.$$.fragment,f),C(hw.$$.fragment,f),C(pw.$$.fragment,f),C(_w.$$.fragment,f),C(Gh.$$.fragment,f),C(bw.$$.fragment,f),C(xu.$$.fragment,f),C(vw.$$.fragment,f),C(Fw.$$.fragment,f),C(Mw.$$.fragment,f),C(ku.$$.fragment,f),C(Ew.$$.fragment,f),C(b_.$$.fragment,f),C(Cw.$$.fragment,f),C(ww.$$.fragment,f),C(yw.$$.fragment,f),C(F_.$$.fragment,f),C(Lw.$$.fragment,f),C(t1.$$.fragment,f),C(xw.$$.fragment,f),C($w.$$.fragment,f),C(Sw.$$.fragment,f),C(n1.$$.fragment,f),C(Rw.$$.fragment,f),C(O1.$$.fragment,f),C(Bw.$$.fragment,f),C(Pw.$$.fragment,f),C(qw.$$.fragment,f),C(X1.$$.fragment,f),C(Nw.$$.fragment,f),C(db.$$.fragment,f),C(jw.$$.fragment,f),C(Dw.$$.fragment,f),C(Ow.$$.fragment,f),C(fb.$$.fragment,f),C(Vw.$$.fragment,f),C(s2.$$.fragment,f),C(Xw.$$.fragment,f),C(zw.$$.fragment,f),C(Ww.$$.fragment,f),C(i2.$$.fragment,f),C(Hw.$$.fragment,f),C(j2.$$.fragment,f),C(Uw.$$.fragment,f),C(Jw.$$.fragment,f),C(Kw.$$.fragment,f),C(G2.$$.fragment,f),C(Zw.$$.fragment,f),C(H2.$$.fragment,f),C(eA.$$.fragment,f),C(oA.$$.fragment,f),C(tA.$$.fragment,f),C(J2.$$.fragment,f),C(aA.$$.fragment,f),C(kv.$$.fragment,f),C(nA.$$.fragment,f),C(sA.$$.fragment,f),C(iA.$$.fragment,f),C(Rv.$$.fragment,f),C(dA.$$.fragment,f),C(FF.$$.fragment,f),C(cA.$$.fragment,f),C(fA.$$.fragment,f),C(gA.$$.fragment,f),C(MF.$$.fragment,f),C(hA.$$.fragment,f),C(wF.$$.fragment,f),C(pA.$$.fragment,f),C(uA.$$.fragment,f),C(bA.$$.fragment,f),C(yF.$$.fragment,f),C(vA.$$.fragment,f),C(DF.$$.fragment,f),C(FA.$$.fragment,f),C(TA.$$.fragment,f),C(EA.$$.fragment,f),C(OF.$$.fragment,f),C(CA.$$.fragment,f),C(zF.$$.fragment,f),C(wA.$$.fragment,f),C(AA.$$.fragment,f),C(LA.$$.fragment,f),C(WF.$$.fragment,f),C(xA.$$.fragment,f),C(t0.$$.fragment,f),C($A.$$.fragment,f),C(kA.$$.fragment,f),C(RA.$$.fragment,f),C(n0.$$.fragment,f),C(BA.$$.fragment,f),C(f0.$$.fragment,f),C(PA.$$.fragment,f),C(IA.$$.fragment,f),C(NA.$$.fragment,f),C(g0.$$.fragment,f),C(jA.$$.fragment,f),C(E0.$$.fragment,f),C(DA.$$.fragment,f),C(GA.$$.fragment,f),C(VA.$$.fragment,f),C(w0.$$.fragment,f),C(XA.$$.fragment,f),C(x0.$$.fragment,f),C(QA.$$.fragment,f),C(WA.$$.fragment,f),C(UA.$$.fragment,f),C(k0.$$.fragment,f),C(JA.$$.fragment,f),C(q0.$$.fragment,f),C(YA.$$.fragment,f),C(KA.$$.fragment,f),C(ey.$$.fragment,f),C(j0.$$.fragment,f),C(oy.$$.fragment,f),C(X0.$$.fragment,f),C(ry.$$.fragment,f),C(ty.$$.fragment,f),C(ny.$$.fragment,f),C(Q0.$$.fragment,f),C(sy.$$.fragment,f),C(J0.$$.fragment,f),C(iy.$$.fragment,f),C(dy.$$.fragment,f),C(fy.$$.fragment,f),C(K0.$$.fragment,f),C(my.$$.fragment,f),C(o6.$$.fragment,f),C(gy.$$.fragment,f),C(hy.$$.fragment,f),C(uy.$$.fragment,f),C(t6.$$.fragment,f),C(_y.$$.fragment,f),C(d6.$$.fragment,f),C(by.$$.fragment,f),C(vy.$$.fragment,f),C(Ty.$$.fragment,f),C(f6.$$.fragment,f),C(My.$$.fragment,f),C(h6.$$.fragment,f),C(Ey.$$.fragment,f),C(Cy.$$.fragment,f),C(Ay.$$.fragment,f),C(u6.$$.fragment,f),C(yy.$$.fragment,f),C(lT.$$.fragment,f),C(Ly.$$.fragment,f),C(xy.$$.fragment,f),C(ky.$$.fragment,f),C(dT.$$.fragment,f),C(Sy.$$.fragment,f),C(RT.$$.fragment,f),C(Ry.$$.fragment,f),C(By.$$.fragment,f),C(Iy.$$.fragment,f),C(PT.$$.fragment,f),C(qy.$$.fragment,f),C(HT.$$.fragment,f),C(Ny.$$.fragment,f),C(jy.$$.fragment,f),C(Gy.$$.fragment,f),C(JT.$$.fragment,f),C(Oy.$$.fragment,f),C(e7.$$.fragment,f),C(Vy.$$.fragment,f),C(Xy.$$.fragment,f),C(Qy.$$.fragment,f),C(r7.$$.fragment,f),C(Wy.$$.fragment,f),C(E7.$$.fragment,f),C(Hy.$$.fragment,f),C(Uy.$$.fragment,f),C(Yy.$$.fragment,f),C(w7.$$.fragment,f),C(Ky.$$.fragment,f),C(I7.$$.fragment,f),C(Zy.$$.fragment,f),C(eL.$$.fragment,f),C(rL.$$.fragment,f),C(N7.$$.fragment,f),C(tL.$$.fragment,f),C(f9.$$.fragment,f),C(aL.$$.fragment,f),C(nL.$$.fragment,f),C(lL.$$.fragment,f),C(g9.$$.fragment,f),C(iL.$$.fragment,f),C(k9.$$.fragment,f),C(dL.$$.fragment,f),C(cL.$$.fragment,f),C(mL.$$.fragment,f),C(R9.$$.fragment,f),C(gL.$$.fragment,f),C(I9.$$.fragment,f),C(pL.$$.fragment,f),C(uL.$$.fragment,f),C(bL.$$.fragment,f),C(N9.$$.fragment,f),C(vL.$$.fragment,f),C(D9.$$.fragment,f),C(FL.$$.fragment,f),C(TL.$$.fragment,f),C(EL.$$.fragment,f),C(O9.$$.fragment,f),C(CL.$$.fragment,f),C(dM.$$.fragment,f),C(wL.$$.fragment,f),C(AL.$$.fragment,f),C(LL.$$.fragment,f),C(fM.$$.fragment,f),C(xL.$$.fragment,f),C(SM.$$.fragment,f),C($L.$$.fragment,f),C(kL.$$.fragment,f),C(RL.$$.fragment,f),C(BM.$$.fragment,f),C(BL.$$.fragment,f),C(IM.$$.fragment,f),C(PL.$$.fragment,f),C(IL.$$.fragment,f),C(NL.$$.fragment,f),C(NM.$$.fragment,f),C(jL.$$.fragment,f),C(DM.$$.fragment,f),C(DL.$$.fragment,f),C(GL.$$.fragment,f),C(VL.$$.fragment,f),C(OM.$$.fragment,f),C(XL.$$.fragment,f),C(h4.$$.fragment,f),C(zL.$$.fragment,f),C(QL.$$.fragment,f),C(HL.$$.fragment,f),C(u4.$$.fragment,f),C(UL.$$.fragment,f),C(A4.$$.fragment,f),C(JL.$$.fragment,f),C(YL.$$.fragment,f),C(ZL.$$.fragment,f),C(L4.$$.fragment,f),C(e8.$$.fragment,f),C(G4.$$.fragment,f),C(o8.$$.fragment,f),C(r8.$$.fragment,f),C(a8.$$.fragment,f),C(V4.$$.fragment,f),C(n8.$$.fragment,f),C(eE.$$.fragment,f),C(s8.$$.fragment,f),C(l8.$$.fragment,f),C(d8.$$.fragment,f),C(rE.$$.fragment,f),C(c8.$$.fragment,f),C(mE.$$.fragment,f),C(f8.$$.fragment,f),C(m8.$$.fragment,f),C(h8.$$.fragment,f),C(hE.$$.fragment,f),C(p8.$$.fragment,f),C(wE.$$.fragment,f),C(u8.$$.fragment,f),C(_8.$$.fragment,f),C(v8.$$.fragment,f),C(yE.$$.fragment,f),C(F8.$$.fragment,f),C(NE.$$.fragment,f),C(T8.$$.fragment,f),C(M8.$$.fragment,f),C(C8.$$.fragment,f),C(DE.$$.fragment,f),C(w8.$$.fragment,f),C(UE.$$.fragment,f),C(A8.$$.fragment,f),C(y8.$$.fragment,f),C(x8.$$.fragment,f),C(YE.$$.fragment,f),C($8.$$.fragment,f),C(s5.$$.fragment,f),C(k8.$$.fragment,f),C(S8.$$.fragment,f),C(B8.$$.fragment,f),C(i5.$$.fragment,f),C(P8.$$.fragment,f),C(c5.$$.fragment,f),C(I8.$$.fragment,f),C(q8.$$.fragment,f),C(j8.$$.fragment,f),C(m5.$$.fragment,f),C(D8.$$.fragment,f),C(p5.$$.fragment,f),C(O8.$$.fragment,f),C(V8.$$.fragment,f),C(z8.$$.fragment,f),C(_5.$$.fragment,f),C(Q8.$$.fragment,f),C(v5.$$.fragment,f),cqe=!1},d(f){t(g),f&&t(v),f&&t(p),w(d),f&&t(mf),f&&t(et),f&&t(qe),f&&t(Xe),f&&t(hf),w(Ma,f),f&&t(ze),f&&t(Ae),f&&t(Eo),f&&t(Ea),f&&t(lPe),f&&t(hi),w(O3),f&&t(iPe),f&&t($n),f&&t(dPe),w(V3,f),f&&t(cPe),f&&t(c$),f&&t(fPe),w(_f,f),f&&t(mPe),f&&t(pi),w(X3),f&&t(gPe),f&&t(Co),w(z3),w(H3),w(hg),w(U3),f&&t(hPe),f&&t(_i),w(J3),f&&t(pPe),f&&t(wo),w(Y3),w(ew),w(Qg),w(ow),f&&t(uPe),f&&t(bi),w(rw),f&&t(_Pe),f&&t(Ao),w(tw),w(sw),w(vh),w(Fh),w(lw),f&&t(bPe),f&&t(vi),w(iw),f&&t(vPe),f&&t(yo),w(dw),w(mw),w(qh),w(Nh),w(gw),f&&t(FPe),f&&t(Ti),w(hw),f&&t(TPe),f&&t(Lo),w(pw),w(_w),w(Gh),w(bw),w(xu),f&&t(MPe),f&&t(Ci),w(vw),f&&t(EPe),f&&t(xo),w(Fw),w(Mw),w(ku),w(Ew),w(b_),f&&t(CPe),f&&t(yi),w(Cw),f&&t(wPe),f&&t($o),w(ww),w(yw),w(F_),w(Lw),w(t1),f&&t(APe),f&&t($i),w(xw),f&&t(yPe),f&&t(ko),w($w),w(Sw),w(n1),w(Rw),w(O1),f&&t(LPe),f&&t(Ri),w(Bw),f&&t(xPe),f&&t(So),w(Pw),w(qw),w(X1),w(Nw),w(db),f&&t($Pe),f&&t(Ii),w(jw),f&&t(kPe),f&&t(Ro),w(Dw),w(Ow),w(fb),w(Vw),w(s2),f&&t(SPe),f&&t(ji),w(Xw),f&&t(RPe),f&&t(Bo),w(zw),w(Ww),w(i2),w(Hw),w(j2),f&&t(BPe),f&&t(Oi),w(Uw),f&&t(PPe),f&&t(Po),w(Jw),w(Kw),w(G2),w(Zw),w(H2),f&&t(IPe),f&&t(zi),w(eA),f&&t(qPe),f&&t(Io),w(oA),w(tA),w(J2),w(aA),w(kv),f&&t(NPe),f&&t(Hi),w(nA),f&&t(jPe),f&&t(qo),w(sA),w(iA),w(Rv),w(dA),w(FF),f&&t(DPe),f&&t(Yi),w(cA),f&&t(GPe),f&&t(No),w(fA),w(gA),w(MF),w(hA),w(wF),f&&t(OPe),f&&t(ed),w(pA),f&&t(VPe),f&&t(jo),w(uA),w(bA),w(yF),w(vA),w(DF),f&&t(XPe),f&&t(td),w(FA),f&&t(zPe),f&&t(Do),w(TA),w(EA),w(OF),w(CA),w(zF),f&&t(QPe),f&&t(sd),w(wA),f&&t(WPe),f&&t(Go),w(AA),w(LA),w(WF),w(xA),w(t0),f&&t(HPe),f&&t(dd),w($A),f&&t(UPe),f&&t(Oo),w(kA),w(RA),w(n0),w(BA),w(f0),f&&t(JPe),f&&t(md),w(PA),f&&t(YPe),f&&t(Vo),w(IA),w(NA),w(g0),w(jA),w(E0),f&&t(KPe),f&&t(pd),w(DA),f&&t(ZPe),f&&t(Xo),w(GA),w(VA),w(w0),w(XA),w(x0),f&&t(eIe),f&&t(bd),w(QA),f&&t(oIe),f&&t(zo),w(WA),w(UA),w(k0),w(JA),w(q0),f&&t(rIe),f&&t(Td),w(YA),f&&t(tIe),f&&t(Qo),w(KA),w(ey),w(j0),w(oy),w(X0),f&&t(aIe),f&&t(wd),w(ry),f&&t(nIe),f&&t(Wo),w(ty),w(ny),w(Q0),w(sy),w(J0),f&&t(sIe),f&&t(Ld),w(iy),f&&t(lIe),f&&t(Ho),w(dy),w(fy),w(K0),w(my),w(o6),f&&t(iIe),f&&t(kd),w(gy),f&&t(dIe),f&&t(Uo),w(hy),w(uy),w(t6),w(_y),w(d6),f&&t(cIe),f&&t(Bd),w(by),f&&t(fIe),f&&t(Jo),w(vy),w(Ty),w(f6),w(My),w(h6),f&&t(mIe),f&&t(qd),w(Ey),f&&t(gIe),f&&t(Yo),w(Cy),w(Ay),w(u6),w(yy),w(lT),f&&t(hIe),f&&t(Dd),w(Ly),f&&t(pIe),f&&t(Ko),w(xy),w(ky),w(dT),w(Sy),w(RT),f&&t(uIe),f&&t(Vd),w(Ry),f&&t(_Ie),f&&t(Zo),w(By),w(Iy),w(PT),w(qy),w(HT),f&&t(bIe),f&&t(Qd),w(Ny),f&&t(vIe),f&&t(er),w(jy),w(Gy),w(JT),w(Oy),w(e7),f&&t(FIe),f&&t(Jd),w(Vy),f&&t(TIe),f&&t(or),w(Xy),w(Qy),w(r7),w(Wy),w(E7),f&&t(MIe),f&&t(Zd),w(Hy),f&&t(EIe),f&&t(rr),w(Uy),w(Yy),w(w7),w(Ky),w(I7),f&&t(CIe),f&&t(rc),w(Zy),f&&t(wIe),f&&t(tr),w(eL),w(rL),w(N7),w(tL),w(f9),f&&t(AIe),f&&t(nc),w(aL),f&&t(yIe),f&&t(ar),w(nL),w(lL),w(g9),w(iL),w(k9),f&&t(LIe),f&&t(ic),w(dL),f&&t(xIe),f&&t(nr),w(cL),w(mL),w(R9),w(gL),w(I9),f&&t($Ie),f&&t(fc),w(pL),f&&t(kIe),f&&t(sr),w(uL),w(bL),w(N9),w(vL),w(D9),f&&t(SIe),f&&t(hc),w(FL),f&&t(RIe),f&&t(lr),w(TL),w(EL),w(O9),w(CL),w(dM),f&&t(BIe),f&&t(_c),w(wL),f&&t(PIe),f&&t(ir),w(AL),w(LL),w(fM),w(xL),w(SM),f&&t(IIe),f&&t(Fc),w($L),f&&t(qIe),f&&t(dr),w(kL),w(RL),w(BM),w(BL),w(IM),f&&t(NIe),f&&t(Ec),w(PL),f&&t(jIe),f&&t(cr),w(IL),w(NL),w(NM),w(jL),w(DM),f&&t(DIe),f&&t(Ac),w(DL),f&&t(GIe),f&&t(fr),w(GL),w(VL),w(OM),w(XL),w(h4),f&&t(OIe),f&&t(xc),w(zL),f&&t(VIe),f&&t(mr),w(QL),w(HL),w(u4),w(UL),w(A4),f&&t(XIe),f&&t(Sc),w(JL),f&&t(zIe),f&&t(gr),w(YL),w(ZL),w(L4),w(e8),w(G4),f&&t(QIe),f&&t(Pc),w(o8),f&&t(WIe),f&&t(hr),w(r8),w(a8),w(V4),w(n8),w(eE),f&&t(HIe),f&&t(Nc),w(s8),f&&t(UIe),f&&t(pr),w(l8),w(d8),w(rE),w(c8),w(mE),f&&t(JIe),f&&t(Gc),w(f8),f&&t(YIe),f&&t(ur),w(m8),w(h8),w(hE),w(p8),w(wE),f&&t(KIe),f&&t(Xc),w(u8),f&&t(ZIe),f&&t(_r),w(_8),w(v8),w(yE),w(F8),w(NE),f&&t(eqe),f&&t(Wc),w(T8),f&&t(oqe),f&&t(br),w(M8),w(C8),w(DE),w(w8),w(UE),f&&t(rqe),f&&t(Jc),w(A8),f&&t(tqe),f&&t(vr),w(y8),w(x8),w(YE),w($8),w(s5),f&&t(aqe),f&&t(Zc),w(k8),f&&t(nqe),f&&t(Fr),w(S8),w(B8),w(i5),w(P8),w(c5),f&&t(sqe),f&&t(rf),w(I8),f&&t(lqe),f&&t(Tr),w(q8),w(j8),w(m5),w(D8),w(p5),f&&t(iqe),f&&t(nf),w(O8),f&&t(dqe),f&&t(Mr),w(V8),w(z8),w(_5),w(Q8),w(v5)}}}const vwt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForNextSentencePrediction",title:"TFAutoModelForNextSentencePrediction"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function Fwt(A){return FCt(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class ywt extends uCt{constructor(g){super();_Ct(this,g,Fwt,bwt,bCt,{})}}export{ywt as default,vwt as metadata};
