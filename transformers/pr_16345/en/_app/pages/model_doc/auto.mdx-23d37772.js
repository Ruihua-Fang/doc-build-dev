import{S as NTt,i as jTt,s as DTt,e as a,k as l,w as f,t as o,M as qTt,c as n,d as t,m as i,a as s,x as m,h as r,b as d,F as e,g as b,y as g,q as h,o as p,B as _}from"../../chunks/vendor-6b77c823.js";import{T as Vxr}from"../../chunks/Tip-39098574.js";import{D as M}from"../../chunks/Docstring-abef54e3.js";import{C as w}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as X}from"../../chunks/IconCopyLink-7a11ce68.js";function GTt(Ii){let J,$e,de,pe,io,fe,Me,Vo,Ni,If,fa,ji,Di,tE,Nf,Be,co,qi,Gn,aE,On,Xn,nE,Gi,Vn,sE,Oi,jf,qa;return{c(){J=a("p"),$e=o("If your "),de=a("code"),pe=o("NewModelConfig"),io=o(" is a subclass of "),fe=a("code"),Me=o("PretrainedConfig"),Vo=o(`, make sure its
`),Ni=a("code"),If=o("model_type"),fa=o(" attribute is set to the same key you use when registering the config (here "),ji=a("code"),Di=o('"new-model"'),tE=o(")."),Nf=l(),Be=a("p"),co=o("Likewise, if your "),qi=a("code"),Gn=o("NewModel"),aE=o(" is a subclass of "),On=a("a"),Xn=o("PreTrainedModel"),nE=o(`, make sure its
`),Gi=a("code"),Vn=o("config_class"),sE=o(` attribute is set to the same class you use when registering the model (here
`),Oi=a("code"),jf=o("NewModelConfig"),qa=o(")."),this.h()},l(fo){J=n(fo,"P",{});var _e=s(J);$e=r(_e,"If your "),de=n(_e,"CODE",{});var J8=s(de);pe=r(J8,"NewModelConfig"),J8.forEach(t),io=r(_e," is a subclass of "),fe=n(_e,"CODE",{});var Xi=s(fe);Me=r(Xi,"PretrainedConfig"),Xi.forEach(t),Vo=r(_e,`, make sure its
`),Ni=n(_e,"CODE",{});var Y8=s(Ni);If=r(Y8,"model_type"),Y8.forEach(t),fa=r(_e," attribute is set to the same key you use when registering the config (here "),ji=n(_e,"CODE",{});var K8=s(ji);Di=r(K8,'"new-model"'),K8.forEach(t),tE=r(_e,")."),_e.forEach(t),Nf=i(fo),Be=n(fo,"P",{});var zo=s(Be);co=r(zo,"Likewise, if your "),qi=n(zo,"CODE",{});var Ga=s(qi);Gn=r(Ga,"NewModel"),Ga.forEach(t),aE=r(zo," is a subclass of "),On=n(zo,"A",{href:!0});var Z8=s(On);Xn=r(Z8,"PreTrainedModel"),Z8.forEach(t),nE=r(zo,`, make sure its
`),Gi=n(zo,"CODE",{});var Df=s(Gi);Vn=r(Df,"config_class"),Df.forEach(t),sE=r(zo,` attribute is set to the same class you use when registering the model (here
`),Oi=n(zo,"CODE",{});var e9=s(Oi);jf=r(e9,"NewModelConfig"),e9.forEach(t),qa=r(zo,")."),zo.forEach(t),this.h()},h(){d(On,"href","/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel")},m(fo,_e){b(fo,J,_e),e(J,$e),e(J,de),e(de,pe),e(J,io),e(J,fe),e(fe,Me),e(J,Vo),e(J,Ni),e(Ni,If),e(J,fa),e(J,ji),e(ji,Di),e(J,tE),b(fo,Nf,_e),b(fo,Be,_e),e(Be,co),e(Be,qi),e(qi,Gn),e(Be,aE),e(Be,On),e(On,Xn),e(Be,nE),e(Be,Gi),e(Gi,Vn),e(Be,sE),e(Be,Oi),e(Oi,jf),e(Be,qa)},d(fo){fo&&t(J),fo&&t(Nf),fo&&t(Be)}}}function OTt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function XTt(Ii){let J,$e,de,pe,io;return{c(){J=a("p"),$e=o("Passing "),de=a("code"),pe=o("use_auth_token=True"),io=o(" is required when you want to use a private model.")},l(fe){J=n(fe,"P",{});var Me=s(J);$e=r(Me,"Passing "),de=n(Me,"CODE",{});var Vo=s(de);pe=r(Vo,"use_auth_token=True"),Vo.forEach(t),io=r(Me," is required when you want to use a private model."),Me.forEach(t)},m(fe,Me){b(fe,J,Me),e(J,$e),e(J,de),e(de,pe),e(J,io)},d(fe){fe&&t(J)}}}function VTt(Ii){let J,$e,de,pe,io,fe,Me,Vo,Ni,If,fa,ji,Di,tE,Nf,Be,co,qi,Gn,aE,On,Xn,nE,Gi,Vn,sE,Oi,jf,qa,fo,_e,J8,Xi,Y8,K8,zo,Ga,Z8,Df,e9,s$e,Wxe,Vi,qf,PQ,lE,l$e,$Q,i$e,Qxe,zn,d$e,IQ,c$e,f$e,NQ,m$e,g$e,Hxe,iE,Uxe,o9,h$e,Jxe,Gf,Yxe,zi,Of,jQ,dE,p$e,DQ,_$e,Kxe,Wo,cE,u$e,fE,b$e,r9,v$e,T$e,F$e,mE,C$e,qQ,M$e,E$e,y$e,mo,gE,w$e,GQ,A$e,L$e,Wi,B$e,OQ,x$e,k$e,XQ,R$e,S$e,P$e,v,Xf,VQ,$$e,I$e,t9,N$e,j$e,D$e,Vf,zQ,q$e,G$e,a9,O$e,X$e,V$e,zf,WQ,z$e,W$e,n9,Q$e,H$e,U$e,Wf,QQ,J$e,Y$e,s9,K$e,Z$e,eIe,Qf,HQ,oIe,rIe,l9,tIe,aIe,nIe,Hf,UQ,sIe,lIe,i9,iIe,dIe,cIe,Uf,JQ,fIe,mIe,d9,gIe,hIe,pIe,Jf,YQ,_Ie,uIe,c9,bIe,vIe,TIe,Yf,KQ,FIe,CIe,f9,MIe,EIe,yIe,Kf,ZQ,wIe,AIe,m9,LIe,BIe,xIe,Zf,eH,kIe,RIe,g9,SIe,PIe,$Ie,em,oH,IIe,NIe,h9,jIe,DIe,qIe,om,rH,GIe,OIe,p9,XIe,VIe,zIe,rm,tH,WIe,QIe,_9,HIe,UIe,JIe,tm,aH,YIe,KIe,u9,ZIe,eNe,oNe,am,nH,rNe,tNe,b9,aNe,nNe,sNe,nm,sH,lNe,iNe,v9,dNe,cNe,fNe,sm,lH,mNe,gNe,T9,hNe,pNe,_Ne,lm,iH,uNe,bNe,F9,vNe,TNe,FNe,im,dH,CNe,MNe,C9,ENe,yNe,wNe,dm,cH,ANe,LNe,M9,BNe,xNe,kNe,cm,fH,RNe,SNe,E9,PNe,$Ne,INe,fm,mH,NNe,jNe,y9,DNe,qNe,GNe,mm,gH,ONe,XNe,w9,VNe,zNe,WNe,gm,hH,QNe,HNe,A9,UNe,JNe,YNe,hm,pH,KNe,ZNe,L9,eje,oje,rje,pm,_H,tje,aje,B9,nje,sje,lje,_m,uH,ije,dje,x9,cje,fje,mje,um,bH,gje,hje,k9,pje,_je,uje,bm,vH,bje,vje,R9,Tje,Fje,Cje,vm,TH,Mje,Eje,S9,yje,wje,Aje,Tm,FH,Lje,Bje,P9,xje,kje,Rje,Fm,CH,Sje,Pje,$9,$je,Ije,Nje,Cm,MH,jje,Dje,I9,qje,Gje,Oje,Mm,EH,Xje,Vje,N9,zje,Wje,Qje,Em,yH,Hje,Uje,j9,Jje,Yje,Kje,ym,wH,Zje,eDe,D9,oDe,rDe,tDe,wm,AH,aDe,nDe,q9,sDe,lDe,iDe,Am,LH,dDe,cDe,G9,fDe,mDe,gDe,Lm,BH,hDe,pDe,O9,_De,uDe,bDe,Bm,xH,vDe,TDe,X9,FDe,CDe,MDe,xm,kH,EDe,yDe,V9,wDe,ADe,LDe,km,RH,BDe,xDe,z9,kDe,RDe,SDe,Rm,SH,PDe,$De,W9,IDe,NDe,jDe,Sm,PH,DDe,qDe,Q9,GDe,ODe,XDe,Pm,$H,VDe,zDe,H9,WDe,QDe,HDe,$m,IH,UDe,JDe,U9,YDe,KDe,ZDe,Im,NH,eqe,oqe,J9,rqe,tqe,aqe,Nm,jH,nqe,sqe,Y9,lqe,iqe,dqe,jm,DH,cqe,fqe,K9,mqe,gqe,hqe,Dm,qH,pqe,_qe,Z9,uqe,bqe,vqe,qm,GH,Tqe,Fqe,eB,Cqe,Mqe,Eqe,Gm,OH,yqe,wqe,oB,Aqe,Lqe,Bqe,Om,XH,xqe,kqe,rB,Rqe,Sqe,Pqe,Xm,VH,$qe,Iqe,tB,Nqe,jqe,Dqe,Vm,zH,qqe,Gqe,aB,Oqe,Xqe,Vqe,zm,WH,zqe,Wqe,nB,Qqe,Hqe,Uqe,Wm,QH,Jqe,Yqe,sB,Kqe,Zqe,eGe,Qm,HH,oGe,rGe,lB,tGe,aGe,nGe,Hm,UH,sGe,lGe,iB,iGe,dGe,cGe,Um,JH,fGe,mGe,dB,gGe,hGe,pGe,Jm,YH,_Ge,uGe,cB,bGe,vGe,TGe,Ym,KH,FGe,CGe,fB,MGe,EGe,yGe,Km,ZH,wGe,AGe,mB,LGe,BGe,xGe,Zm,eU,kGe,RGe,gB,SGe,PGe,$Ge,eg,oU,IGe,NGe,hB,jGe,DGe,qGe,og,rU,GGe,OGe,pB,XGe,VGe,zGe,rg,tU,WGe,QGe,_B,HGe,UGe,JGe,tg,aU,YGe,KGe,uB,ZGe,eOe,oOe,ag,nU,rOe,tOe,bB,aOe,nOe,sOe,ng,sU,lOe,iOe,vB,dOe,cOe,fOe,sg,lU,mOe,gOe,TB,hOe,pOe,_Oe,lg,iU,uOe,bOe,FB,vOe,TOe,FOe,ig,dU,COe,MOe,CB,EOe,yOe,wOe,dg,cU,AOe,LOe,MB,BOe,xOe,kOe,cg,fU,ROe,SOe,EB,POe,$Oe,IOe,fg,mU,NOe,jOe,yB,DOe,qOe,GOe,mg,gU,OOe,XOe,wB,VOe,zOe,WOe,gg,hU,QOe,HOe,AB,UOe,JOe,YOe,hg,pU,KOe,ZOe,LB,eXe,oXe,rXe,pg,_U,tXe,aXe,BB,nXe,sXe,lXe,_g,uU,iXe,dXe,xB,cXe,fXe,mXe,ug,bU,gXe,hXe,kB,pXe,_Xe,uXe,bg,vU,bXe,vXe,RB,TXe,FXe,CXe,vg,TU,MXe,EXe,SB,yXe,wXe,AXe,Tg,FU,LXe,BXe,PB,xXe,kXe,RXe,Fg,CU,SXe,PXe,$B,$Xe,IXe,NXe,Cg,MU,jXe,DXe,IB,qXe,GXe,OXe,Mg,EU,XXe,VXe,NB,zXe,WXe,QXe,Eg,yU,HXe,UXe,jB,JXe,YXe,KXe,yg,wU,ZXe,eVe,DB,oVe,rVe,tVe,wg,AU,aVe,nVe,qB,sVe,lVe,iVe,Ag,LU,dVe,cVe,GB,fVe,mVe,gVe,Lg,BU,hVe,pVe,OB,_Ve,uVe,bVe,Bg,xU,vVe,TVe,XB,FVe,CVe,MVe,xg,kU,EVe,yVe,VB,wVe,AVe,LVe,kg,RU,BVe,xVe,zB,kVe,RVe,SVe,SU,PVe,$Ve,hE,IVe,Rg,pE,NVe,PU,jVe,Zxe,Qi,Sg,$U,_E,DVe,IU,qVe,eke,Qo,uE,GVe,bE,OVe,WB,XVe,VVe,zVe,vE,WVe,NU,QVe,HVe,UVe,go,TE,JVe,jU,YVe,KVe,Oa,ZVe,DU,eze,oze,qU,rze,tze,GU,aze,nze,sze,E,Wn,OU,lze,ize,QB,dze,cze,HB,fze,mze,gze,Qn,XU,hze,pze,UB,_ze,uze,JB,bze,vze,Tze,Hn,VU,Fze,Cze,YB,Mze,Eze,KB,yze,wze,Aze,Pg,zU,Lze,Bze,ZB,xze,kze,Rze,Un,WU,Sze,Pze,ex,$ze,Ize,ox,Nze,jze,Dze,$g,QU,qze,Gze,rx,Oze,Xze,Vze,Ig,HU,zze,Wze,tx,Qze,Hze,Uze,Ng,UU,Jze,Yze,ax,Kze,Zze,eWe,Jn,JU,oWe,rWe,nx,tWe,aWe,sx,nWe,sWe,lWe,Yn,YU,iWe,dWe,lx,cWe,fWe,ix,mWe,gWe,hWe,Kn,KU,pWe,_We,dx,uWe,bWe,cx,vWe,TWe,FWe,jg,ZU,CWe,MWe,fx,EWe,yWe,wWe,Dg,eJ,AWe,LWe,mx,BWe,xWe,kWe,Zn,oJ,RWe,SWe,gx,PWe,$We,hx,IWe,NWe,jWe,qg,rJ,DWe,qWe,px,GWe,OWe,XWe,es,tJ,VWe,zWe,_x,WWe,QWe,ux,HWe,UWe,JWe,os,aJ,YWe,KWe,bx,ZWe,eQe,vx,oQe,rQe,tQe,rs,nJ,aQe,nQe,Tx,sQe,lQe,sJ,iQe,dQe,cQe,Gg,lJ,fQe,mQe,Fx,gQe,hQe,pQe,ts,iJ,_Qe,uQe,Cx,bQe,vQe,Mx,TQe,FQe,CQe,Og,dJ,MQe,EQe,Ex,yQe,wQe,AQe,as,cJ,LQe,BQe,yx,xQe,kQe,wx,RQe,SQe,PQe,ns,fJ,$Qe,IQe,Ax,NQe,jQe,Lx,DQe,qQe,GQe,ss,mJ,OQe,XQe,Bx,VQe,zQe,xx,WQe,QQe,HQe,Xg,gJ,UQe,JQe,kx,YQe,KQe,ZQe,ls,hJ,eHe,oHe,Rx,rHe,tHe,Sx,aHe,nHe,sHe,Vg,pJ,lHe,iHe,Px,dHe,cHe,fHe,is,_J,mHe,gHe,$x,hHe,pHe,Ix,_He,uHe,bHe,ds,uJ,vHe,THe,Nx,FHe,CHe,jx,MHe,EHe,yHe,cs,bJ,wHe,AHe,Dx,LHe,BHe,qx,xHe,kHe,RHe,fs,vJ,SHe,PHe,Gx,$He,IHe,Ox,NHe,jHe,DHe,zg,TJ,qHe,GHe,Xx,OHe,XHe,VHe,ms,FJ,zHe,WHe,Vx,QHe,HHe,zx,UHe,JHe,YHe,gs,CJ,KHe,ZHe,Wx,eUe,oUe,Qx,rUe,tUe,aUe,hs,MJ,nUe,sUe,Hx,lUe,iUe,Ux,dUe,cUe,fUe,ps,EJ,mUe,gUe,Jx,hUe,pUe,Yx,_Ue,uUe,bUe,_s,yJ,vUe,TUe,Kx,FUe,CUe,Zx,MUe,EUe,yUe,us,wJ,wUe,AUe,ek,LUe,BUe,ok,xUe,kUe,RUe,Wg,AJ,SUe,PUe,rk,$Ue,IUe,NUe,bs,LJ,jUe,DUe,tk,qUe,GUe,ak,OUe,XUe,VUe,Qg,BJ,zUe,WUe,nk,QUe,HUe,UUe,Hg,xJ,JUe,YUe,sk,KUe,ZUe,eJe,vs,kJ,oJe,rJe,lk,tJe,aJe,ik,nJe,sJe,lJe,Ts,RJ,iJe,dJe,dk,cJe,fJe,ck,mJe,gJe,hJe,Ug,SJ,pJe,_Je,fk,uJe,bJe,vJe,Fs,PJ,TJe,FJe,mk,CJe,MJe,gk,EJe,yJe,wJe,Cs,$J,AJe,LJe,hk,BJe,xJe,pk,kJe,RJe,SJe,Ms,IJ,PJe,$Je,_k,IJe,NJe,uk,jJe,DJe,qJe,Es,NJ,GJe,OJe,bk,XJe,VJe,vk,zJe,WJe,QJe,ys,jJ,HJe,UJe,Tk,JJe,YJe,Fk,KJe,ZJe,eYe,Jg,DJ,oYe,rYe,Ck,tYe,aYe,nYe,Yg,qJ,sYe,lYe,Mk,iYe,dYe,cYe,Kg,GJ,fYe,mYe,Ek,gYe,hYe,pYe,Zg,OJ,_Ye,uYe,yk,bYe,vYe,TYe,ws,XJ,FYe,CYe,wk,MYe,EYe,Ak,yYe,wYe,AYe,eh,VJ,LYe,BYe,Lk,xYe,kYe,RYe,As,zJ,SYe,PYe,Bk,$Ye,IYe,xk,NYe,jYe,DYe,Ls,WJ,qYe,GYe,kk,OYe,XYe,Rk,VYe,zYe,WYe,Bs,QJ,QYe,HYe,Sk,UYe,JYe,Pk,YYe,KYe,ZYe,xs,HJ,eKe,oKe,$k,rKe,tKe,Ik,aKe,nKe,sKe,ks,UJ,lKe,iKe,Nk,dKe,cKe,jk,fKe,mKe,gKe,Rs,JJ,hKe,pKe,Dk,_Ke,uKe,qk,bKe,vKe,TKe,oh,YJ,FKe,CKe,Gk,MKe,EKe,yKe,rh,KJ,wKe,AKe,Ok,LKe,BKe,xKe,Ss,ZJ,kKe,RKe,Xk,SKe,PKe,Vk,$Ke,IKe,NKe,Ps,eY,jKe,DKe,zk,qKe,GKe,Wk,OKe,XKe,VKe,$s,oY,zKe,WKe,Qk,QKe,HKe,Hk,UKe,JKe,YKe,th,rY,KKe,ZKe,Uk,eZe,oZe,rZe,ah,tY,tZe,aZe,Jk,nZe,sZe,lZe,nh,aY,iZe,dZe,Yk,cZe,fZe,mZe,sh,nY,gZe,hZe,Kk,pZe,_Ze,uZe,Is,sY,bZe,vZe,Zk,TZe,FZe,eR,CZe,MZe,EZe,lh,lY,yZe,wZe,oR,AZe,LZe,BZe,ih,iY,xZe,kZe,rR,RZe,SZe,PZe,Ns,dY,$Ze,IZe,tR,NZe,jZe,aR,DZe,qZe,GZe,js,cY,OZe,XZe,nR,VZe,zZe,sR,WZe,QZe,HZe,fY,UZe,JZe,FE,YZe,dh,CE,KZe,mY,ZZe,oke,Hi,ch,gY,ME,eeo,hY,oeo,rke,Ho,EE,reo,yE,teo,lR,aeo,neo,seo,wE,leo,pY,ieo,deo,ceo,Ie,AE,feo,_Y,meo,geo,Xa,heo,uY,peo,_eo,bY,ueo,beo,vY,veo,Teo,Feo,re,fh,TY,Ceo,Meo,iR,Eeo,yeo,weo,mh,FY,Aeo,Leo,dR,Beo,xeo,keo,gh,CY,Reo,Seo,cR,Peo,$eo,Ieo,hh,MY,Neo,jeo,fR,Deo,qeo,Geo,ph,EY,Oeo,Xeo,mR,Veo,zeo,Weo,_h,yY,Qeo,Heo,gR,Ueo,Jeo,Yeo,uh,wY,Keo,Zeo,hR,eoo,ooo,roo,bh,AY,too,aoo,pR,noo,soo,loo,vh,LY,ioo,doo,_R,coo,foo,moo,Th,BY,goo,hoo,uR,poo,_oo,uoo,Fh,xY,boo,voo,bR,Too,Foo,Coo,Ch,kY,Moo,Eoo,vR,yoo,woo,Aoo,Mh,RY,Loo,Boo,TR,xoo,koo,Roo,Eh,SY,Soo,Poo,FR,$oo,Ioo,Noo,yh,PY,joo,Doo,CR,qoo,Goo,Ooo,wh,$Y,Xoo,Voo,MR,zoo,Woo,Qoo,Ah,IY,Hoo,Uoo,ER,Joo,Yoo,Koo,Lh,NY,Zoo,ero,yR,oro,rro,tro,Bh,aro,jY,nro,sro,LE,lro,xh,BE,iro,DY,dro,tke,Ui,kh,qY,xE,cro,GY,fro,ake,Uo,kE,mro,RE,gro,wR,hro,pro,_ro,SE,uro,OY,bro,vro,Tro,Ne,PE,Fro,XY,Cro,Mro,Ji,Ero,VY,yro,wro,zY,Aro,Lro,Bro,xe,Rh,WY,xro,kro,AR,Rro,Sro,Pro,Sh,QY,$ro,Iro,LR,Nro,jro,Dro,Ph,HY,qro,Gro,BR,Oro,Xro,Vro,$h,UY,zro,Wro,xR,Qro,Hro,Uro,Ih,JY,Jro,Yro,kR,Kro,Zro,eto,Nh,YY,oto,rto,RR,tto,ato,nto,jh,KY,sto,lto,SR,ito,dto,cto,Dh,ZY,fto,mto,PR,gto,hto,pto,qh,_to,eK,uto,bto,$E,vto,Gh,IE,Tto,oK,Fto,nke,Yi,Oh,rK,NE,Cto,tK,Mto,ske,Jo,jE,Eto,Ki,yto,aK,wto,Ato,nK,Lto,Bto,xto,DE,kto,sK,Rto,Sto,Pto,Vr,qE,$to,lK,Ito,Nto,Zi,jto,iK,Dto,qto,dK,Gto,Oto,Xto,cK,Vto,zto,GE,Wto,je,OE,Qto,fK,Hto,Uto,Va,Jto,mK,Yto,Kto,gK,Zto,eao,hK,oao,rao,tao,F,Xh,pK,aao,nao,$R,sao,lao,iao,Vh,_K,dao,cao,IR,fao,mao,gao,zh,uK,hao,pao,NR,_ao,uao,bao,Wh,bK,vao,Tao,jR,Fao,Cao,Mao,Qh,vK,Eao,yao,DR,wao,Aao,Lao,Hh,TK,Bao,xao,qR,kao,Rao,Sao,Uh,FK,Pao,$ao,GR,Iao,Nao,jao,Jh,CK,Dao,qao,OR,Gao,Oao,Xao,Yh,MK,Vao,zao,XR,Wao,Qao,Hao,Kh,EK,Uao,Jao,VR,Yao,Kao,Zao,Zh,yK,eno,ono,zR,rno,tno,ano,ep,wK,nno,sno,WR,lno,ino,dno,op,AK,cno,fno,QR,mno,gno,hno,rp,LK,pno,_no,HR,uno,bno,vno,tp,BK,Tno,Fno,UR,Cno,Mno,Eno,ap,xK,yno,wno,JR,Ano,Lno,Bno,np,kK,xno,kno,YR,Rno,Sno,Pno,sp,RK,$no,Ino,KR,Nno,jno,Dno,lp,SK,qno,Gno,ZR,Ono,Xno,Vno,ip,PK,zno,Wno,eS,Qno,Hno,Uno,dp,$K,Jno,Yno,oS,Kno,Zno,eso,cp,IK,oso,rso,rS,tso,aso,nso,fp,NK,sso,lso,tS,iso,dso,cso,mp,jK,fso,mso,aS,gso,hso,pso,gp,DK,_so,uso,nS,bso,vso,Tso,hp,qK,Fso,Cso,sS,Mso,Eso,yso,pp,GK,wso,Aso,lS,Lso,Bso,xso,Ds,OK,kso,Rso,iS,Sso,Pso,dS,$so,Iso,Nso,_p,XK,jso,Dso,cS,qso,Gso,Oso,up,VK,Xso,Vso,fS,zso,Wso,Qso,bp,zK,Hso,Uso,mS,Jso,Yso,Kso,vp,WK,Zso,elo,gS,olo,rlo,tlo,Tp,QK,alo,nlo,hS,slo,llo,ilo,Fp,HK,dlo,clo,pS,flo,mlo,glo,Cp,UK,hlo,plo,_S,_lo,ulo,blo,Mp,JK,vlo,Tlo,uS,Flo,Clo,Mlo,Ep,YK,Elo,ylo,bS,wlo,Alo,Llo,yp,KK,Blo,xlo,vS,klo,Rlo,Slo,wp,ZK,Plo,$lo,TS,Ilo,Nlo,jlo,Ap,eZ,Dlo,qlo,FS,Glo,Olo,Xlo,Lp,oZ,Vlo,zlo,CS,Wlo,Qlo,Hlo,Bp,rZ,Ulo,Jlo,MS,Ylo,Klo,Zlo,xp,tZ,eio,oio,ES,rio,tio,aio,kp,aZ,nio,sio,yS,lio,iio,dio,Rp,nZ,cio,fio,wS,mio,gio,hio,Sp,sZ,pio,_io,AS,uio,bio,vio,Pp,lZ,Tio,Fio,LS,Cio,Mio,Eio,$p,iZ,yio,wio,BS,Aio,Lio,Bio,Ip,dZ,xio,kio,xS,Rio,Sio,Pio,Np,cZ,$io,Iio,kS,Nio,jio,Dio,jp,fZ,qio,Gio,RS,Oio,Xio,Vio,Dp,mZ,zio,Wio,SS,Qio,Hio,Uio,qp,gZ,Jio,Yio,PS,Kio,Zio,edo,Gp,hZ,odo,rdo,$S,tdo,ado,ndo,Op,pZ,sdo,ldo,IS,ido,ddo,cdo,Xp,_Z,fdo,mdo,NS,gdo,hdo,pdo,Vp,uZ,_do,udo,jS,bdo,vdo,Tdo,zp,bZ,Fdo,Cdo,DS,Mdo,Edo,ydo,Wp,vZ,wdo,Ado,qS,Ldo,Bdo,xdo,Qp,TZ,kdo,Rdo,GS,Sdo,Pdo,$do,Hp,FZ,Ido,Ndo,OS,jdo,Ddo,qdo,Up,CZ,Gdo,Odo,XS,Xdo,Vdo,zdo,Jp,MZ,Wdo,Qdo,VS,Hdo,Udo,Jdo,Yp,EZ,Ydo,Kdo,zS,Zdo,eco,oco,Kp,yZ,rco,tco,WS,aco,nco,sco,Zp,wZ,lco,ico,QS,dco,cco,fco,e_,AZ,mco,gco,HS,hco,pco,_co,o_,LZ,uco,bco,US,vco,Tco,Fco,r_,BZ,Cco,Mco,JS,Eco,yco,wco,t_,xZ,Aco,Lco,YS,Bco,xco,kco,a_,kZ,Rco,Sco,KS,Pco,$co,Ico,n_,RZ,Nco,jco,ZS,Dco,qco,Gco,s_,SZ,Oco,Xco,eP,Vco,zco,Wco,l_,PZ,Qco,Hco,oP,Uco,Jco,Yco,i_,$Z,Kco,Zco,rP,efo,ofo,rfo,d_,IZ,tfo,afo,tP,nfo,sfo,lfo,c_,NZ,ifo,dfo,aP,cfo,ffo,mfo,f_,jZ,gfo,hfo,nP,pfo,_fo,ufo,m_,DZ,bfo,vfo,sP,Tfo,Ffo,Cfo,g_,qZ,Mfo,Efo,lP,yfo,wfo,Afo,h_,GZ,Lfo,Bfo,iP,xfo,kfo,Rfo,p_,OZ,Sfo,Pfo,dP,$fo,Ifo,Nfo,__,XZ,jfo,Dfo,cP,qfo,Gfo,Ofo,u_,VZ,Xfo,Vfo,fP,zfo,Wfo,Qfo,b_,zZ,Hfo,Ufo,mP,Jfo,Yfo,Kfo,v_,WZ,Zfo,emo,gP,omo,rmo,tmo,T_,QZ,amo,nmo,hP,smo,lmo,imo,F_,HZ,dmo,cmo,pP,fmo,mmo,gmo,C_,UZ,hmo,pmo,_P,_mo,umo,bmo,M_,JZ,vmo,Tmo,uP,Fmo,Cmo,Mmo,E_,Emo,YZ,ymo,wmo,KZ,Amo,Lmo,ZZ,Bmo,xmo,XE,lke,ed,y_,eee,VE,kmo,oee,Rmo,ike,Yo,zE,Smo,od,Pmo,ree,$mo,Imo,tee,Nmo,jmo,Dmo,WE,qmo,aee,Gmo,Omo,Xmo,zr,QE,Vmo,nee,zmo,Wmo,rd,Qmo,see,Hmo,Umo,lee,Jmo,Ymo,Kmo,iee,Zmo,ego,HE,ogo,De,UE,rgo,dee,tgo,ago,za,ngo,cee,sgo,lgo,fee,igo,dgo,mee,cgo,fgo,mgo,k,w_,gee,ggo,hgo,bP,pgo,_go,ugo,A_,hee,bgo,vgo,vP,Tgo,Fgo,Cgo,L_,pee,Mgo,Ego,TP,ygo,wgo,Ago,B_,_ee,Lgo,Bgo,FP,xgo,kgo,Rgo,x_,uee,Sgo,Pgo,CP,$go,Igo,Ngo,k_,bee,jgo,Dgo,MP,qgo,Ggo,Ogo,R_,vee,Xgo,Vgo,EP,zgo,Wgo,Qgo,S_,Tee,Hgo,Ugo,yP,Jgo,Ygo,Kgo,P_,Fee,Zgo,eho,wP,oho,rho,tho,$_,Cee,aho,nho,AP,sho,lho,iho,I_,Mee,dho,cho,LP,fho,mho,gho,N_,Eee,hho,pho,BP,_ho,uho,bho,j_,yee,vho,Tho,xP,Fho,Cho,Mho,D_,wee,Eho,yho,kP,who,Aho,Lho,q_,Aee,Bho,xho,RP,kho,Rho,Sho,G_,Lee,Pho,$ho,SP,Iho,Nho,jho,O_,Bee,Dho,qho,PP,Gho,Oho,Xho,X_,xee,Vho,zho,$P,Who,Qho,Hho,V_,kee,Uho,Jho,IP,Yho,Kho,Zho,z_,Ree,epo,opo,NP,rpo,tpo,apo,W_,See,npo,spo,jP,lpo,ipo,dpo,Q_,Pee,cpo,fpo,DP,mpo,gpo,hpo,H_,$ee,ppo,_po,qP,upo,bpo,vpo,U_,Iee,Tpo,Fpo,GP,Cpo,Mpo,Epo,J_,Nee,ypo,wpo,OP,Apo,Lpo,Bpo,Y_,jee,xpo,kpo,XP,Rpo,Spo,Ppo,K_,Dee,$po,Ipo,VP,Npo,jpo,Dpo,Z_,qee,qpo,Gpo,zP,Opo,Xpo,Vpo,eu,Gee,zpo,Wpo,WP,Qpo,Hpo,Upo,ou,Oee,Jpo,Ypo,QP,Kpo,Zpo,e_o,ru,Xee,o_o,r_o,HP,t_o,a_o,n_o,tu,Vee,s_o,l_o,UP,i_o,d_o,c_o,au,zee,f_o,m_o,JP,g_o,h_o,p_o,nu,Wee,__o,u_o,YP,b_o,v_o,T_o,su,Qee,F_o,C_o,KP,M_o,E_o,y_o,lu,Hee,w_o,A_o,ZP,L_o,B_o,x_o,iu,Uee,k_o,R_o,e$,S_o,P_o,$_o,du,Jee,I_o,N_o,o$,j_o,D_o,q_o,cu,Yee,G_o,O_o,r$,X_o,V_o,z_o,fu,W_o,Kee,Q_o,H_o,Zee,U_o,J_o,eoe,Y_o,K_o,JE,dke,td,mu,ooe,YE,Z_o,roe,euo,cke,Ko,KE,ouo,ad,ruo,toe,tuo,auo,aoe,nuo,suo,luo,ZE,iuo,noe,duo,cuo,fuo,Wr,ey,muo,soe,guo,huo,nd,puo,loe,_uo,uuo,ioe,buo,vuo,Tuo,doe,Fuo,Cuo,oy,Muo,qe,ry,Euo,coe,yuo,wuo,Wa,Auo,foe,Luo,Buo,moe,xuo,kuo,goe,Ruo,Suo,Puo,$,gu,hoe,$uo,Iuo,t$,Nuo,juo,Duo,hu,poe,quo,Guo,a$,Ouo,Xuo,Vuo,pu,_oe,zuo,Wuo,n$,Quo,Huo,Uuo,_u,uoe,Juo,Yuo,s$,Kuo,Zuo,e1o,uu,boe,o1o,r1o,l$,t1o,a1o,n1o,bu,voe,s1o,l1o,i$,i1o,d1o,c1o,vu,Toe,f1o,m1o,d$,g1o,h1o,p1o,Tu,Foe,_1o,u1o,c$,b1o,v1o,T1o,Fu,Coe,F1o,C1o,f$,M1o,E1o,y1o,Cu,Moe,w1o,A1o,m$,L1o,B1o,x1o,Mu,Eoe,k1o,R1o,g$,S1o,P1o,$1o,Eu,yoe,I1o,N1o,h$,j1o,D1o,q1o,yu,woe,G1o,O1o,p$,X1o,V1o,z1o,wu,Aoe,W1o,Q1o,_$,H1o,U1o,J1o,Au,Loe,Y1o,K1o,u$,Z1o,e4o,o4o,Lu,Boe,r4o,t4o,b$,a4o,n4o,s4o,Bu,xoe,l4o,i4o,v$,d4o,c4o,f4o,xu,koe,m4o,g4o,T$,h4o,p4o,_4o,ku,Roe,u4o,b4o,F$,v4o,T4o,F4o,Ru,Soe,C4o,M4o,C$,E4o,y4o,w4o,Su,Poe,A4o,L4o,M$,B4o,x4o,k4o,Pu,$oe,R4o,S4o,E$,P4o,$4o,I4o,$u,Ioe,N4o,j4o,y$,D4o,q4o,G4o,Iu,Noe,O4o,X4o,w$,V4o,z4o,W4o,Nu,joe,Q4o,H4o,A$,U4o,J4o,Y4o,ju,Doe,K4o,Z4o,L$,ebo,obo,rbo,Du,qoe,tbo,abo,B$,nbo,sbo,lbo,qu,Goe,ibo,dbo,x$,cbo,fbo,mbo,Gu,Ooe,gbo,hbo,k$,pbo,_bo,ubo,Ou,Xoe,bbo,vbo,R$,Tbo,Fbo,Cbo,Xu,Voe,Mbo,Ebo,S$,ybo,wbo,Abo,Vu,zoe,Lbo,Bbo,P$,xbo,kbo,Rbo,zu,Woe,Sbo,Pbo,$$,$bo,Ibo,Nbo,Wu,Qoe,jbo,Dbo,I$,qbo,Gbo,Obo,Qu,Hoe,Xbo,Vbo,N$,zbo,Wbo,Qbo,Hu,Hbo,Uoe,Ubo,Jbo,Joe,Ybo,Kbo,Yoe,Zbo,e3o,ty,fke,sd,Uu,Koe,ay,o3o,Zoe,r3o,mke,Zo,ny,t3o,ld,a3o,ere,n3o,s3o,ore,l3o,i3o,d3o,sy,c3o,rre,f3o,m3o,g3o,Qr,ly,h3o,tre,p3o,_3o,id,u3o,are,b3o,v3o,nre,T3o,F3o,C3o,sre,M3o,E3o,iy,y3o,Ge,dy,w3o,lre,A3o,L3o,Qa,B3o,ire,x3o,k3o,dre,R3o,S3o,cre,P3o,$3o,I3o,I,Ju,fre,N3o,j3o,j$,D3o,q3o,G3o,Yu,mre,O3o,X3o,D$,V3o,z3o,W3o,Ku,gre,Q3o,H3o,q$,U3o,J3o,Y3o,Zu,hre,K3o,Z3o,G$,e5o,o5o,r5o,e1,pre,t5o,a5o,O$,n5o,s5o,l5o,o1,_re,i5o,d5o,X$,c5o,f5o,m5o,r1,ure,g5o,h5o,V$,p5o,_5o,u5o,t1,bre,b5o,v5o,z$,T5o,F5o,C5o,a1,vre,M5o,E5o,W$,y5o,w5o,A5o,n1,Tre,L5o,B5o,Q$,x5o,k5o,R5o,s1,Fre,S5o,P5o,H$,$5o,I5o,N5o,l1,Cre,j5o,D5o,U$,q5o,G5o,O5o,i1,Mre,X5o,V5o,J$,z5o,W5o,Q5o,d1,Ere,H5o,U5o,Y$,J5o,Y5o,K5o,c1,yre,Z5o,e2o,K$,o2o,r2o,t2o,f1,wre,a2o,n2o,Z$,s2o,l2o,i2o,m1,Are,d2o,c2o,eI,f2o,m2o,g2o,g1,Lre,h2o,p2o,oI,_2o,u2o,b2o,h1,Bre,v2o,T2o,rI,F2o,C2o,M2o,p1,xre,E2o,y2o,tI,w2o,A2o,L2o,_1,kre,B2o,x2o,aI,k2o,R2o,S2o,u1,Rre,P2o,$2o,nI,I2o,N2o,j2o,b1,Sre,D2o,q2o,sI,G2o,O2o,X2o,v1,Pre,V2o,z2o,lI,W2o,Q2o,H2o,T1,$re,U2o,J2o,iI,Y2o,K2o,Z2o,F1,Ire,evo,ovo,dI,rvo,tvo,avo,C1,Nre,nvo,svo,cI,lvo,ivo,dvo,M1,jre,cvo,fvo,fI,mvo,gvo,hvo,E1,Dre,pvo,_vo,mI,uvo,bvo,vvo,y1,qre,Tvo,Fvo,gI,Cvo,Mvo,Evo,w1,Gre,yvo,wvo,Ore,Avo,Lvo,Bvo,A1,Xre,xvo,kvo,hI,Rvo,Svo,Pvo,L1,Vre,$vo,Ivo,pI,Nvo,jvo,Dvo,B1,zre,qvo,Gvo,_I,Ovo,Xvo,Vvo,x1,Wre,zvo,Wvo,uI,Qvo,Hvo,Uvo,k1,Jvo,Qre,Yvo,Kvo,Hre,Zvo,e6o,Ure,o6o,r6o,cy,gke,dd,R1,Jre,fy,t6o,Yre,a6o,hke,er,my,n6o,cd,s6o,Kre,l6o,i6o,Zre,d6o,c6o,f6o,gy,m6o,ete,g6o,h6o,p6o,Hr,hy,_6o,ote,u6o,b6o,fd,v6o,rte,T6o,F6o,tte,C6o,M6o,E6o,ate,y6o,w6o,py,A6o,Oe,_y,L6o,nte,B6o,x6o,Ha,k6o,ste,R6o,S6o,lte,P6o,$6o,ite,I6o,N6o,j6o,se,S1,dte,D6o,q6o,bI,G6o,O6o,X6o,P1,cte,V6o,z6o,vI,W6o,Q6o,H6o,$1,fte,U6o,J6o,TI,Y6o,K6o,Z6o,I1,mte,eTo,oTo,FI,rTo,tTo,aTo,N1,gte,nTo,sTo,CI,lTo,iTo,dTo,j1,hte,cTo,fTo,MI,mTo,gTo,hTo,D1,pte,pTo,_To,EI,uTo,bTo,vTo,q1,_te,TTo,FTo,yI,CTo,MTo,ETo,G1,ute,yTo,wTo,wI,ATo,LTo,BTo,O1,bte,xTo,kTo,AI,RTo,STo,PTo,X1,vte,$To,ITo,LI,NTo,jTo,DTo,V1,Tte,qTo,GTo,BI,OTo,XTo,VTo,z1,Fte,zTo,WTo,xI,QTo,HTo,UTo,W1,Cte,JTo,YTo,kI,KTo,ZTo,eFo,Q1,Mte,oFo,rFo,RI,tFo,aFo,nFo,H1,Ete,sFo,lFo,SI,iFo,dFo,cFo,U1,fFo,yte,mFo,gFo,wte,hFo,pFo,Ate,_Fo,uFo,uy,pke,md,J1,Lte,by,bFo,Bte,vFo,_ke,or,vy,TFo,gd,FFo,xte,CFo,MFo,kte,EFo,yFo,wFo,Ty,AFo,Rte,LFo,BFo,xFo,Ur,Fy,kFo,Ste,RFo,SFo,hd,PFo,Pte,$Fo,IFo,$te,NFo,jFo,DFo,Ite,qFo,GFo,Cy,OFo,Xe,My,XFo,Nte,VFo,zFo,Ua,WFo,jte,QFo,HFo,Dte,UFo,JFo,qte,YFo,KFo,ZFo,A,Y1,Gte,eCo,oCo,PI,rCo,tCo,aCo,K1,Ote,nCo,sCo,$I,lCo,iCo,dCo,Z1,Xte,cCo,fCo,II,mCo,gCo,hCo,e4,Vte,pCo,_Co,NI,uCo,bCo,vCo,o4,zte,TCo,FCo,jI,CCo,MCo,ECo,r4,Wte,yCo,wCo,DI,ACo,LCo,BCo,t4,Qte,xCo,kCo,qI,RCo,SCo,PCo,a4,Hte,$Co,ICo,GI,NCo,jCo,DCo,n4,Ute,qCo,GCo,OI,OCo,XCo,VCo,s4,Jte,zCo,WCo,XI,QCo,HCo,UCo,l4,Yte,JCo,YCo,VI,KCo,ZCo,eMo,i4,Kte,oMo,rMo,zI,tMo,aMo,nMo,d4,Zte,sMo,lMo,WI,iMo,dMo,cMo,c4,eae,fMo,mMo,QI,gMo,hMo,pMo,f4,oae,_Mo,uMo,HI,bMo,vMo,TMo,m4,rae,FMo,CMo,UI,MMo,EMo,yMo,g4,tae,wMo,AMo,JI,LMo,BMo,xMo,h4,aae,kMo,RMo,YI,SMo,PMo,$Mo,p4,nae,IMo,NMo,KI,jMo,DMo,qMo,_4,sae,GMo,OMo,ZI,XMo,VMo,zMo,u4,lae,WMo,QMo,eN,HMo,UMo,JMo,b4,iae,YMo,KMo,oN,ZMo,eEo,oEo,v4,dae,rEo,tEo,rN,aEo,nEo,sEo,T4,cae,lEo,iEo,tN,dEo,cEo,fEo,F4,fae,mEo,gEo,aN,hEo,pEo,_Eo,C4,mae,uEo,bEo,nN,vEo,TEo,FEo,M4,gae,CEo,MEo,sN,EEo,yEo,wEo,E4,hae,AEo,LEo,lN,BEo,xEo,kEo,y4,pae,REo,SEo,iN,PEo,$Eo,IEo,w4,_ae,NEo,jEo,dN,DEo,qEo,GEo,A4,uae,OEo,XEo,cN,VEo,zEo,WEo,L4,bae,QEo,HEo,fN,UEo,JEo,YEo,B4,vae,KEo,ZEo,mN,eyo,oyo,ryo,x4,Tae,tyo,ayo,gN,nyo,syo,lyo,k4,Fae,iyo,dyo,hN,cyo,fyo,myo,R4,Cae,gyo,hyo,pN,pyo,_yo,uyo,S4,Mae,byo,vyo,_N,Tyo,Fyo,Cyo,P4,Eae,Myo,Eyo,uN,yyo,wyo,Ayo,$4,yae,Lyo,Byo,bN,xyo,kyo,Ryo,I4,wae,Syo,Pyo,vN,$yo,Iyo,Nyo,N4,Aae,jyo,Dyo,TN,qyo,Gyo,Oyo,j4,Lae,Xyo,Vyo,FN,zyo,Wyo,Qyo,D4,Bae,Hyo,Uyo,CN,Jyo,Yyo,Kyo,q4,xae,Zyo,ewo,MN,owo,rwo,two,G4,kae,awo,nwo,EN,swo,lwo,iwo,O4,Rae,dwo,cwo,yN,fwo,mwo,gwo,X4,hwo,Sae,pwo,_wo,Pae,uwo,bwo,$ae,vwo,Two,Ey,uke,pd,V4,Iae,yy,Fwo,Nae,Cwo,bke,rr,wy,Mwo,_d,Ewo,jae,ywo,wwo,Dae,Awo,Lwo,Bwo,Ay,xwo,qae,kwo,Rwo,Swo,Jr,Ly,Pwo,Gae,$wo,Iwo,ud,Nwo,Oae,jwo,Dwo,Xae,qwo,Gwo,Owo,Vae,Xwo,Vwo,By,zwo,Ve,xy,Wwo,zae,Qwo,Hwo,Ja,Uwo,Wae,Jwo,Ywo,Qae,Kwo,Zwo,Hae,eAo,oAo,rAo,G,z4,Uae,tAo,aAo,wN,nAo,sAo,lAo,W4,Jae,iAo,dAo,AN,cAo,fAo,mAo,Q4,Yae,gAo,hAo,LN,pAo,_Ao,uAo,H4,Kae,bAo,vAo,BN,TAo,FAo,CAo,U4,Zae,MAo,EAo,xN,yAo,wAo,AAo,J4,ene,LAo,BAo,kN,xAo,kAo,RAo,Y4,one,SAo,PAo,RN,$Ao,IAo,NAo,K4,rne,jAo,DAo,SN,qAo,GAo,OAo,Z4,tne,XAo,VAo,PN,zAo,WAo,QAo,eb,ane,HAo,UAo,$N,JAo,YAo,KAo,ob,nne,ZAo,e0o,IN,o0o,r0o,t0o,rb,sne,a0o,n0o,NN,s0o,l0o,i0o,tb,lne,d0o,c0o,jN,f0o,m0o,g0o,ab,ine,h0o,p0o,DN,_0o,u0o,b0o,nb,dne,v0o,T0o,qN,F0o,C0o,M0o,sb,cne,E0o,y0o,GN,w0o,A0o,L0o,lb,fne,B0o,x0o,ON,k0o,R0o,S0o,ib,mne,P0o,$0o,XN,I0o,N0o,j0o,db,gne,D0o,q0o,VN,G0o,O0o,X0o,cb,hne,V0o,z0o,zN,W0o,Q0o,H0o,fb,pne,U0o,J0o,WN,Y0o,K0o,Z0o,mb,_ne,eLo,oLo,QN,rLo,tLo,aLo,gb,une,nLo,sLo,HN,lLo,iLo,dLo,hb,bne,cLo,fLo,UN,mLo,gLo,hLo,pb,vne,pLo,_Lo,JN,uLo,bLo,vLo,_b,Tne,TLo,FLo,YN,CLo,MLo,ELo,ub,Fne,yLo,wLo,KN,ALo,LLo,BLo,bb,Cne,xLo,kLo,ZN,RLo,SLo,PLo,vb,$Lo,Mne,ILo,NLo,Ene,jLo,DLo,yne,qLo,GLo,ky,vke,bd,Tb,wne,Ry,OLo,Ane,XLo,Tke,tr,Sy,VLo,vd,zLo,Lne,WLo,QLo,Bne,HLo,ULo,JLo,Py,YLo,xne,KLo,ZLo,e7o,Yr,$y,o7o,kne,r7o,t7o,Td,a7o,Rne,n7o,s7o,Sne,l7o,i7o,d7o,Pne,c7o,f7o,Iy,m7o,ze,Ny,g7o,$ne,h7o,p7o,Ya,_7o,Ine,u7o,b7o,Nne,v7o,T7o,jne,F7o,C7o,M7o,da,Fb,Dne,E7o,y7o,ej,w7o,A7o,L7o,Cb,qne,B7o,x7o,oj,k7o,R7o,S7o,Mb,Gne,P7o,$7o,rj,I7o,N7o,j7o,Eb,One,D7o,q7o,tj,G7o,O7o,X7o,yb,Xne,V7o,z7o,aj,W7o,Q7o,H7o,wb,U7o,Vne,J7o,Y7o,zne,K7o,Z7o,Wne,e8o,o8o,jy,Fke,Fd,Ab,Qne,Dy,r8o,Hne,t8o,Cke,ar,qy,a8o,Cd,n8o,Une,s8o,l8o,Jne,i8o,d8o,c8o,Gy,f8o,Yne,m8o,g8o,h8o,Kr,Oy,p8o,Kne,_8o,u8o,Md,b8o,Zne,v8o,T8o,ese,F8o,C8o,M8o,ose,E8o,y8o,Xy,w8o,We,Vy,A8o,rse,L8o,B8o,Ka,x8o,tse,k8o,R8o,ase,S8o,P8o,nse,$8o,I8o,N8o,D,Lb,sse,j8o,D8o,nj,q8o,G8o,O8o,Bb,lse,X8o,V8o,sj,z8o,W8o,Q8o,xb,ise,H8o,U8o,lj,J8o,Y8o,K8o,kb,dse,Z8o,e9o,ij,o9o,r9o,t9o,Rb,cse,a9o,n9o,dj,s9o,l9o,i9o,Sb,fse,d9o,c9o,cj,f9o,m9o,g9o,Pb,mse,h9o,p9o,fj,_9o,u9o,b9o,$b,gse,v9o,T9o,mj,F9o,C9o,M9o,Ib,hse,E9o,y9o,gj,w9o,A9o,L9o,Nb,pse,B9o,x9o,hj,k9o,R9o,S9o,jb,_se,P9o,$9o,pj,I9o,N9o,j9o,Db,use,D9o,q9o,_j,G9o,O9o,X9o,qb,bse,V9o,z9o,uj,W9o,Q9o,H9o,Gb,vse,U9o,J9o,bj,Y9o,K9o,Z9o,Ob,Tse,eBo,oBo,vj,rBo,tBo,aBo,Xb,Fse,nBo,sBo,Tj,lBo,iBo,dBo,Vb,Cse,cBo,fBo,Fj,mBo,gBo,hBo,zb,Mse,pBo,_Bo,Cj,uBo,bBo,vBo,Wb,Ese,TBo,FBo,Mj,CBo,MBo,EBo,Qb,yse,yBo,wBo,Ej,ABo,LBo,BBo,Hb,wse,xBo,kBo,yj,RBo,SBo,PBo,Ub,Ase,$Bo,IBo,wj,NBo,jBo,DBo,Jb,Lse,qBo,GBo,Aj,OBo,XBo,VBo,Yb,Bse,zBo,WBo,Lj,QBo,HBo,UBo,Kb,xse,JBo,YBo,Bj,KBo,ZBo,exo,Zb,kse,oxo,rxo,xj,txo,axo,nxo,e3,Rse,sxo,lxo,kj,ixo,dxo,cxo,o3,Sse,fxo,mxo,Rj,gxo,hxo,pxo,r3,Pse,_xo,uxo,Sj,bxo,vxo,Txo,t3,$se,Fxo,Cxo,Pj,Mxo,Exo,yxo,a3,Ise,wxo,Axo,$j,Lxo,Bxo,xxo,n3,Nse,kxo,Rxo,Ij,Sxo,Pxo,$xo,s3,jse,Ixo,Nxo,Nj,jxo,Dxo,qxo,l3,Gxo,Dse,Oxo,Xxo,qse,Vxo,zxo,Gse,Wxo,Qxo,zy,Mke,Ed,i3,Ose,Wy,Hxo,Xse,Uxo,Eke,nr,Qy,Jxo,yd,Yxo,Vse,Kxo,Zxo,zse,eko,oko,rko,Hy,tko,Wse,ako,nko,sko,Zr,Uy,lko,Qse,iko,dko,wd,cko,Hse,fko,mko,Use,gko,hko,pko,Jse,_ko,uko,Jy,bko,Qe,Yy,vko,Yse,Tko,Fko,Za,Cko,Kse,Mko,Eko,Zse,yko,wko,ele,Ako,Lko,Bko,R,d3,ole,xko,kko,jj,Rko,Sko,Pko,c3,rle,$ko,Iko,Dj,Nko,jko,Dko,f3,tle,qko,Gko,qj,Oko,Xko,Vko,m3,ale,zko,Wko,Gj,Qko,Hko,Uko,g3,nle,Jko,Yko,Oj,Kko,Zko,eRo,h3,sle,oRo,rRo,Xj,tRo,aRo,nRo,p3,lle,sRo,lRo,Vj,iRo,dRo,cRo,_3,ile,fRo,mRo,zj,gRo,hRo,pRo,u3,dle,_Ro,uRo,Wj,bRo,vRo,TRo,b3,cle,FRo,CRo,Qj,MRo,ERo,yRo,v3,fle,wRo,ARo,Hj,LRo,BRo,xRo,T3,mle,kRo,RRo,Uj,SRo,PRo,$Ro,F3,gle,IRo,NRo,Jj,jRo,DRo,qRo,C3,hle,GRo,ORo,Yj,XRo,VRo,zRo,M3,ple,WRo,QRo,Kj,HRo,URo,JRo,E3,_le,YRo,KRo,Zj,ZRo,eSo,oSo,y3,ule,rSo,tSo,eD,aSo,nSo,sSo,w3,ble,lSo,iSo,oD,dSo,cSo,fSo,A3,vle,mSo,gSo,rD,hSo,pSo,_So,L3,Tle,uSo,bSo,tD,vSo,TSo,FSo,B3,Fle,CSo,MSo,aD,ESo,ySo,wSo,x3,Cle,ASo,LSo,nD,BSo,xSo,kSo,k3,Mle,RSo,SSo,sD,PSo,$So,ISo,R3,Ele,NSo,jSo,lD,DSo,qSo,GSo,S3,yle,OSo,XSo,iD,VSo,zSo,WSo,P3,wle,QSo,HSo,dD,USo,JSo,YSo,$3,Ale,KSo,ZSo,cD,ePo,oPo,rPo,I3,Lle,tPo,aPo,fD,nPo,sPo,lPo,N3,Ble,iPo,dPo,mD,cPo,fPo,mPo,j3,xle,gPo,hPo,gD,pPo,_Po,uPo,D3,kle,bPo,vPo,hD,TPo,FPo,CPo,q3,Rle,MPo,EPo,pD,yPo,wPo,APo,G3,Sle,LPo,BPo,_D,xPo,kPo,RPo,O3,Ple,SPo,PPo,uD,$Po,IPo,NPo,X3,$le,jPo,DPo,bD,qPo,GPo,OPo,V3,Ile,XPo,VPo,vD,zPo,WPo,QPo,z3,Nle,HPo,UPo,TD,JPo,YPo,KPo,W3,jle,ZPo,e$o,FD,o$o,r$o,t$o,Q3,Dle,a$o,n$o,CD,s$o,l$o,i$o,H3,d$o,qle,c$o,f$o,Gle,m$o,g$o,Ole,h$o,p$o,Ky,yke,Ad,U3,Xle,Zy,_$o,Vle,u$o,wke,sr,ew,b$o,Ld,v$o,zle,T$o,F$o,Wle,C$o,M$o,E$o,ow,y$o,Qle,w$o,A$o,L$o,et,rw,B$o,Hle,x$o,k$o,Bd,R$o,Ule,S$o,P$o,Jle,$$o,I$o,N$o,Yle,j$o,D$o,tw,q$o,He,aw,G$o,Kle,O$o,X$o,en,V$o,Zle,z$o,W$o,eie,Q$o,H$o,oie,U$o,J$o,Y$o,rie,J3,tie,K$o,Z$o,MD,eIo,oIo,rIo,Y3,tIo,aie,aIo,nIo,nie,sIo,lIo,sie,iIo,dIo,nw,Ake,xd,K3,lie,sw,cIo,iie,fIo,Lke,lr,lw,mIo,kd,gIo,die,hIo,pIo,cie,_Io,uIo,bIo,iw,vIo,fie,TIo,FIo,CIo,ot,dw,MIo,mie,EIo,yIo,Rd,wIo,gie,AIo,LIo,hie,BIo,xIo,kIo,pie,RIo,SIo,cw,PIo,Ue,fw,$Io,_ie,IIo,NIo,on,jIo,uie,DIo,qIo,bie,GIo,OIo,vie,XIo,VIo,zIo,me,Z3,Tie,WIo,QIo,ED,HIo,UIo,JIo,e5,Fie,YIo,KIo,yD,ZIo,eNo,oNo,qs,Cie,rNo,tNo,wD,aNo,nNo,AD,sNo,lNo,iNo,o5,Mie,dNo,cNo,LD,fNo,mNo,gNo,ma,Eie,hNo,pNo,BD,_No,uNo,xD,bNo,vNo,kD,TNo,FNo,CNo,r5,yie,MNo,ENo,RD,yNo,wNo,ANo,t5,wie,LNo,BNo,SD,xNo,kNo,RNo,a5,Aie,SNo,PNo,PD,$No,INo,NNo,n5,Lie,jNo,DNo,$D,qNo,GNo,ONo,s5,Bie,XNo,VNo,ID,zNo,WNo,QNo,l5,xie,HNo,UNo,ND,JNo,YNo,KNo,i5,ZNo,kie,ejo,ojo,Rie,rjo,tjo,Sie,ajo,njo,mw,Bke,Sd,d5,Pie,gw,sjo,$ie,ljo,xke,ir,hw,ijo,Pd,djo,Iie,cjo,fjo,Nie,mjo,gjo,hjo,pw,pjo,jie,_jo,ujo,bjo,rt,_w,vjo,Die,Tjo,Fjo,$d,Cjo,qie,Mjo,Ejo,Gie,yjo,wjo,Ajo,Oie,Ljo,Bjo,uw,xjo,Je,bw,kjo,Xie,Rjo,Sjo,rn,Pjo,Vie,$jo,Ijo,zie,Njo,jjo,Wie,Djo,qjo,Gjo,Qie,c5,Hie,Ojo,Xjo,jD,Vjo,zjo,Wjo,f5,Qjo,Uie,Hjo,Ujo,Jie,Jjo,Yjo,Yie,Kjo,Zjo,vw,kke,Id,m5,Kie,Tw,eDo,Zie,oDo,Rke,dr,Fw,rDo,Nd,tDo,ede,aDo,nDo,ode,sDo,lDo,iDo,Cw,dDo,rde,cDo,fDo,mDo,tt,Mw,gDo,tde,hDo,pDo,jd,_Do,ade,uDo,bDo,nde,vDo,TDo,FDo,sde,CDo,MDo,Ew,EDo,Ye,yw,yDo,lde,wDo,ADo,tn,LDo,ide,BDo,xDo,dde,kDo,RDo,cde,SDo,PDo,$Do,ke,g5,fde,IDo,NDo,DD,jDo,DDo,qDo,h5,mde,GDo,ODo,qD,XDo,VDo,zDo,p5,gde,WDo,QDo,GD,HDo,UDo,JDo,_5,hde,YDo,KDo,OD,ZDo,eqo,oqo,u5,pde,rqo,tqo,XD,aqo,nqo,sqo,b5,_de,lqo,iqo,VD,dqo,cqo,fqo,v5,ude,mqo,gqo,zD,hqo,pqo,_qo,T5,bde,uqo,bqo,WD,vqo,Tqo,Fqo,F5,Cqo,vde,Mqo,Eqo,Tde,yqo,wqo,Fde,Aqo,Lqo,ww,Ske,Dd,C5,Cde,Aw,Bqo,Mde,xqo,Pke,cr,Lw,kqo,qd,Rqo,Ede,Sqo,Pqo,yde,$qo,Iqo,Nqo,Bw,jqo,wde,Dqo,qqo,Gqo,at,xw,Oqo,Ade,Xqo,Vqo,Gd,zqo,Lde,Wqo,Qqo,Bde,Hqo,Uqo,Jqo,xde,Yqo,Kqo,kw,Zqo,Ke,Rw,eGo,kde,oGo,rGo,an,tGo,Rde,aGo,nGo,Sde,sGo,lGo,Pde,iGo,dGo,cGo,nn,M5,$de,fGo,mGo,QD,gGo,hGo,pGo,E5,Ide,_Go,uGo,HD,bGo,vGo,TGo,y5,Nde,FGo,CGo,UD,MGo,EGo,yGo,w5,jde,wGo,AGo,JD,LGo,BGo,xGo,A5,kGo,Dde,RGo,SGo,qde,PGo,$Go,Gde,IGo,NGo,Sw,$ke,Od,L5,Ode,Pw,jGo,Xde,DGo,Ike,fr,$w,qGo,Xd,GGo,Vde,OGo,XGo,zde,VGo,zGo,WGo,Iw,QGo,Wde,HGo,UGo,JGo,nt,Nw,YGo,Qde,KGo,ZGo,Vd,eOo,Hde,oOo,rOo,Ude,tOo,aOo,nOo,Jde,sOo,lOo,jw,iOo,Ze,Dw,dOo,Yde,cOo,fOo,sn,mOo,Kde,gOo,hOo,Zde,pOo,_Oo,ece,uOo,bOo,vOo,Re,B5,oce,TOo,FOo,YD,COo,MOo,EOo,x5,rce,yOo,wOo,KD,AOo,LOo,BOo,k5,tce,xOo,kOo,ZD,ROo,SOo,POo,R5,ace,$Oo,IOo,eq,NOo,jOo,DOo,S5,nce,qOo,GOo,oq,OOo,XOo,VOo,P5,sce,zOo,WOo,rq,QOo,HOo,UOo,$5,lce,JOo,YOo,tq,KOo,ZOo,eXo,I5,ice,oXo,rXo,aq,tXo,aXo,nXo,N5,sXo,dce,lXo,iXo,cce,dXo,cXo,fce,fXo,mXo,qw,Nke,zd,j5,mce,Gw,gXo,gce,hXo,jke,mr,Ow,pXo,Wd,_Xo,hce,uXo,bXo,pce,vXo,TXo,FXo,Xw,CXo,_ce,MXo,EXo,yXo,st,Vw,wXo,uce,AXo,LXo,Qd,BXo,bce,xXo,kXo,vce,RXo,SXo,PXo,Tce,$Xo,IXo,zw,NXo,eo,Ww,jXo,Fce,DXo,qXo,ln,GXo,Cce,OXo,XXo,Mce,VXo,zXo,Ece,WXo,QXo,HXo,Qw,D5,yce,UXo,JXo,nq,YXo,KXo,ZXo,q5,wce,eVo,oVo,sq,rVo,tVo,aVo,G5,nVo,Ace,sVo,lVo,Lce,iVo,dVo,Bce,cVo,fVo,Hw,Dke,Hd,O5,xce,Uw,mVo,kce,gVo,qke,gr,Jw,hVo,Ud,pVo,Rce,_Vo,uVo,Sce,bVo,vVo,TVo,Yw,FVo,Pce,CVo,MVo,EVo,lt,Kw,yVo,$ce,wVo,AVo,Jd,LVo,Ice,BVo,xVo,Nce,kVo,RVo,SVo,jce,PVo,$Vo,Zw,IVo,oo,eA,NVo,Dce,jVo,DVo,dn,qVo,qce,GVo,OVo,Gce,XVo,VVo,Oce,zVo,WVo,QVo,cn,X5,Xce,HVo,UVo,lq,JVo,YVo,KVo,V5,Vce,ZVo,ezo,iq,ozo,rzo,tzo,z5,zce,azo,nzo,dq,szo,lzo,izo,W5,Wce,dzo,czo,cq,fzo,mzo,gzo,Q5,hzo,Qce,pzo,_zo,Hce,uzo,bzo,Uce,vzo,Tzo,oA,Gke,Yd,H5,Jce,rA,Fzo,Yce,Czo,Oke,hr,tA,Mzo,Kd,Ezo,Kce,yzo,wzo,Zce,Azo,Lzo,Bzo,aA,xzo,efe,kzo,Rzo,Szo,it,nA,Pzo,ofe,$zo,Izo,Zd,Nzo,rfe,jzo,Dzo,tfe,qzo,Gzo,Ozo,afe,Xzo,Vzo,sA,zzo,ro,lA,Wzo,nfe,Qzo,Hzo,fn,Uzo,sfe,Jzo,Yzo,lfe,Kzo,Zzo,ife,eWo,oWo,rWo,ec,U5,dfe,tWo,aWo,fq,nWo,sWo,lWo,J5,cfe,iWo,dWo,mq,cWo,fWo,mWo,Y5,ffe,gWo,hWo,gq,pWo,_Wo,uWo,K5,bWo,mfe,vWo,TWo,gfe,FWo,CWo,hfe,MWo,EWo,iA,Xke,oc,Z5,pfe,dA,yWo,_fe,wWo,Vke,pr,cA,AWo,rc,LWo,ufe,BWo,xWo,bfe,kWo,RWo,SWo,fA,PWo,vfe,$Wo,IWo,NWo,dt,mA,jWo,Tfe,DWo,qWo,tc,GWo,Ffe,OWo,XWo,Cfe,VWo,zWo,WWo,Mfe,QWo,HWo,gA,UWo,to,hA,JWo,Efe,YWo,KWo,mn,ZWo,yfe,eQo,oQo,wfe,rQo,tQo,Afe,aQo,nQo,sQo,Lfe,e2,Bfe,lQo,iQo,hq,dQo,cQo,fQo,o2,mQo,xfe,gQo,hQo,kfe,pQo,_Qo,Rfe,uQo,bQo,pA,zke,ac,r2,Sfe,_A,vQo,Pfe,TQo,Wke,_r,uA,FQo,nc,CQo,$fe,MQo,EQo,Ife,yQo,wQo,AQo,bA,LQo,Nfe,BQo,xQo,kQo,ct,vA,RQo,jfe,SQo,PQo,sc,$Qo,Dfe,IQo,NQo,qfe,jQo,DQo,qQo,Gfe,GQo,OQo,TA,XQo,ao,FA,VQo,Ofe,zQo,WQo,gn,QQo,Xfe,HQo,UQo,Vfe,JQo,YQo,zfe,KQo,ZQo,eHo,Wfe,t2,Qfe,oHo,rHo,pq,tHo,aHo,nHo,a2,sHo,Hfe,lHo,iHo,Ufe,dHo,cHo,Jfe,fHo,mHo,CA,Qke,lc,n2,Yfe,MA,gHo,Kfe,hHo,Hke,ur,EA,pHo,ic,_Ho,Zfe,uHo,bHo,eme,vHo,THo,FHo,yA,CHo,ome,MHo,EHo,yHo,ft,wA,wHo,rme,AHo,LHo,dc,BHo,tme,xHo,kHo,ame,RHo,SHo,PHo,nme,$Ho,IHo,AA,NHo,no,LA,jHo,sme,DHo,qHo,hn,GHo,lme,OHo,XHo,ime,VHo,zHo,dme,WHo,QHo,HHo,BA,s2,cme,UHo,JHo,_q,YHo,KHo,ZHo,l2,fme,eUo,oUo,uq,rUo,tUo,aUo,i2,nUo,mme,sUo,lUo,gme,iUo,dUo,hme,cUo,fUo,xA,Uke,cc,d2,pme,kA,mUo,_me,gUo,Jke,br,RA,hUo,fc,pUo,ume,_Uo,uUo,bme,bUo,vUo,TUo,SA,FUo,vme,CUo,MUo,EUo,mt,PA,yUo,Tme,wUo,AUo,mc,LUo,Fme,BUo,xUo,Cme,kUo,RUo,SUo,Mme,PUo,$Uo,$A,IUo,so,IA,NUo,Eme,jUo,DUo,pn,qUo,yme,GUo,OUo,wme,XUo,VUo,Ame,zUo,WUo,QUo,Lme,c2,Bme,HUo,UUo,bq,JUo,YUo,KUo,f2,ZUo,xme,eJo,oJo,kme,rJo,tJo,Rme,aJo,nJo,NA,Yke,gc,m2,Sme,jA,sJo,Pme,lJo,Kke,vr,DA,iJo,hc,dJo,$me,cJo,fJo,Ime,mJo,gJo,hJo,qA,pJo,Nme,_Jo,uJo,bJo,gt,GA,vJo,jme,TJo,FJo,pc,CJo,Dme,MJo,EJo,qme,yJo,wJo,AJo,Gme,LJo,BJo,OA,xJo,ho,XA,kJo,Ome,RJo,SJo,_n,PJo,Xme,$Jo,IJo,Vme,NJo,jJo,zme,DJo,qJo,GJo,B,g2,Wme,OJo,XJo,vq,VJo,zJo,WJo,h2,Qme,QJo,HJo,Tq,UJo,JJo,YJo,p2,Hme,KJo,ZJo,Fq,eYo,oYo,rYo,_2,Ume,tYo,aYo,Cq,nYo,sYo,lYo,u2,Jme,iYo,dYo,Mq,cYo,fYo,mYo,b2,Yme,gYo,hYo,Eq,pYo,_Yo,uYo,v2,Kme,bYo,vYo,yq,TYo,FYo,CYo,T2,Zme,MYo,EYo,wq,yYo,wYo,AYo,F2,ege,LYo,BYo,Aq,xYo,kYo,RYo,C2,oge,SYo,PYo,Lq,$Yo,IYo,NYo,M2,rge,jYo,DYo,Bq,qYo,GYo,OYo,E2,tge,XYo,VYo,xq,zYo,WYo,QYo,y2,age,HYo,UYo,kq,JYo,YYo,KYo,w2,nge,ZYo,eKo,Rq,oKo,rKo,tKo,A2,sge,aKo,nKo,Sq,sKo,lKo,iKo,L2,lge,dKo,cKo,Pq,fKo,mKo,gKo,Gs,ige,hKo,pKo,$q,_Ko,uKo,Iq,bKo,vKo,TKo,B2,dge,FKo,CKo,Nq,MKo,EKo,yKo,x2,cge,wKo,AKo,jq,LKo,BKo,xKo,k2,fge,kKo,RKo,Dq,SKo,PKo,$Ko,R2,mge,IKo,NKo,qq,jKo,DKo,qKo,S2,gge,GKo,OKo,Gq,XKo,VKo,zKo,P2,hge,WKo,QKo,Oq,HKo,UKo,JKo,$2,pge,YKo,KKo,Xq,ZKo,eZo,oZo,I2,_ge,rZo,tZo,Vq,aZo,nZo,sZo,N2,uge,lZo,iZo,zq,dZo,cZo,fZo,j2,bge,mZo,gZo,Wq,hZo,pZo,_Zo,D2,vge,uZo,bZo,Qq,vZo,TZo,FZo,q2,Tge,CZo,MZo,Hq,EZo,yZo,wZo,G2,Fge,AZo,LZo,Uq,BZo,xZo,kZo,O2,Cge,RZo,SZo,Jq,PZo,$Zo,IZo,X2,Mge,NZo,jZo,Yq,DZo,qZo,GZo,V2,Ege,OZo,XZo,Kq,VZo,zZo,WZo,z2,yge,QZo,HZo,Zq,UZo,JZo,YZo,W2,wge,KZo,ZZo,eG,eer,oer,rer,Q2,Age,ter,aer,oG,ner,ser,ler,H2,Lge,ier,der,rG,cer,fer,mer,U2,Bge,ger,her,tG,per,_er,uer,J2,xge,ber,ver,aG,Ter,Fer,Cer,Y2,kge,Mer,Eer,nG,yer,wer,Aer,K2,Rge,Ler,Ber,sG,xer,ker,Rer,Z2,Sge,Ser,Per,lG,$er,Ier,Ner,Pge,jer,Der,VA,Zke,_c,ev,$ge,zA,qer,Ige,Ger,eRe,Tr,WA,Oer,uc,Xer,Nge,Ver,zer,jge,Wer,Qer,Her,QA,Uer,Dge,Jer,Yer,Ker,ht,HA,Zer,qge,eor,oor,bc,ror,Gge,tor,aor,Oge,nor,sor,lor,Xge,ior,dor,UA,cor,po,JA,mor,Vge,gor,hor,un,por,zge,_or,uor,Wge,bor,vor,Qge,Tor,For,Cor,H,ov,Hge,Mor,Eor,iG,yor,wor,Aor,rv,Uge,Lor,Bor,dG,xor,kor,Ror,tv,Jge,Sor,Por,cG,$or,Ior,Nor,av,Yge,jor,Dor,fG,qor,Gor,Oor,nv,Kge,Xor,Vor,mG,zor,Wor,Qor,sv,Zge,Hor,Uor,gG,Jor,Yor,Kor,lv,ehe,Zor,err,hG,orr,rrr,trr,iv,ohe,arr,nrr,pG,srr,lrr,irr,dv,rhe,drr,crr,_G,frr,mrr,grr,cv,the,hrr,prr,uG,_rr,urr,brr,fv,ahe,vrr,Trr,bG,Frr,Crr,Mrr,mv,nhe,Err,yrr,vG,wrr,Arr,Lrr,gv,she,Brr,xrr,TG,krr,Rrr,Srr,hv,lhe,Prr,$rr,FG,Irr,Nrr,jrr,pv,ihe,Drr,qrr,CG,Grr,Orr,Xrr,_v,dhe,Vrr,zrr,MG,Wrr,Qrr,Hrr,uv,che,Urr,Jrr,EG,Yrr,Krr,Zrr,bv,fhe,etr,otr,yG,rtr,ttr,atr,vv,mhe,ntr,str,wG,ltr,itr,dtr,Tv,ghe,ctr,ftr,AG,mtr,gtr,htr,Fv,hhe,ptr,_tr,LG,utr,btr,vtr,Cv,phe,Ttr,Ftr,BG,Ctr,Mtr,Etr,_he,ytr,wtr,YA,oRe,vc,Mv,uhe,KA,Atr,bhe,Ltr,rRe,Fr,ZA,Btr,Tc,xtr,vhe,ktr,Rtr,The,Str,Ptr,$tr,e0,Itr,Fhe,Ntr,jtr,Dtr,pt,o0,qtr,Che,Gtr,Otr,Fc,Xtr,Mhe,Vtr,ztr,Ehe,Wtr,Qtr,Htr,yhe,Utr,Jtr,r0,Ytr,_o,t0,Ktr,whe,Ztr,ear,bn,oar,Ahe,rar,tar,Lhe,aar,nar,Bhe,sar,lar,iar,ge,Ev,xhe,dar,car,xG,far,mar,gar,yv,khe,har,par,kG,_ar,uar,bar,wv,Rhe,Tar,Far,RG,Car,Mar,Ear,Av,She,yar,war,SG,Aar,Lar,Bar,Lv,Phe,xar,kar,PG,Rar,Sar,Par,Bv,$he,$ar,Iar,$G,Nar,jar,Dar,xv,Ihe,qar,Gar,IG,Oar,Xar,Var,kv,Nhe,zar,War,NG,Qar,Har,Uar,Rv,jhe,Jar,Yar,jG,Kar,Zar,enr,Sv,Dhe,onr,rnr,DG,tnr,anr,nnr,Pv,qhe,snr,lnr,qG,inr,dnr,cnr,Ghe,fnr,mnr,a0,tRe,Cc,$v,Ohe,n0,gnr,Xhe,hnr,aRe,Cr,s0,pnr,Mc,_nr,Vhe,unr,bnr,zhe,vnr,Tnr,Fnr,l0,Cnr,Whe,Mnr,Enr,ynr,_t,i0,wnr,Qhe,Anr,Lnr,Ec,Bnr,Hhe,xnr,knr,Uhe,Rnr,Snr,Pnr,Jhe,$nr,Inr,d0,Nnr,uo,c0,jnr,Yhe,Dnr,qnr,vn,Gnr,Khe,Onr,Xnr,Zhe,Vnr,znr,epe,Wnr,Qnr,Hnr,f0,Iv,ope,Unr,Jnr,GG,Ynr,Knr,Znr,Nv,rpe,esr,osr,OG,rsr,tsr,asr,tpe,nsr,ssr,m0,nRe,yc,jv,ape,g0,lsr,npe,isr,sRe,Mr,h0,dsr,wc,csr,spe,fsr,msr,lpe,gsr,hsr,psr,p0,_sr,ipe,usr,bsr,vsr,ut,_0,Tsr,dpe,Fsr,Csr,Ac,Msr,cpe,Esr,ysr,fpe,wsr,Asr,Lsr,mpe,Bsr,xsr,u0,ksr,bo,b0,Rsr,gpe,Ssr,Psr,Tn,$sr,hpe,Isr,Nsr,ppe,jsr,Dsr,_pe,qsr,Gsr,Osr,Y,Dv,upe,Xsr,Vsr,XG,zsr,Wsr,Qsr,qv,bpe,Hsr,Usr,VG,Jsr,Ysr,Ksr,Gv,vpe,Zsr,elr,zG,olr,rlr,tlr,Ov,Tpe,alr,nlr,WG,slr,llr,ilr,Xv,Fpe,dlr,clr,QG,flr,mlr,glr,Vv,Cpe,hlr,plr,HG,_lr,ulr,blr,zv,Mpe,vlr,Tlr,UG,Flr,Clr,Mlr,Wv,Epe,Elr,ylr,JG,wlr,Alr,Llr,Qv,ype,Blr,xlr,YG,klr,Rlr,Slr,Hv,wpe,Plr,$lr,KG,Ilr,Nlr,jlr,Uv,Ape,Dlr,qlr,ZG,Glr,Olr,Xlr,Jv,Lpe,Vlr,zlr,eO,Wlr,Qlr,Hlr,Yv,Bpe,Ulr,Jlr,oO,Ylr,Klr,Zlr,Kv,xpe,eir,oir,rO,rir,tir,air,Zv,kpe,nir,sir,tO,lir,iir,dir,e6,Rpe,cir,fir,aO,mir,gir,hir,o6,Spe,pir,_ir,nO,uir,bir,vir,r6,Ppe,Tir,Fir,sO,Cir,Mir,Eir,t6,$pe,yir,wir,lO,Air,Lir,Bir,a6,Ipe,xir,kir,iO,Rir,Sir,Pir,Npe,$ir,Iir,v0,lRe,Lc,n6,jpe,T0,Nir,Dpe,jir,iRe,Er,F0,Dir,Bc,qir,qpe,Gir,Oir,Gpe,Xir,Vir,zir,C0,Wir,Ope,Qir,Hir,Uir,bt,M0,Jir,Xpe,Yir,Kir,xc,Zir,Vpe,edr,odr,zpe,rdr,tdr,adr,Wpe,ndr,sdr,E0,ldr,vo,y0,idr,Qpe,ddr,cdr,Fn,fdr,Hpe,mdr,gdr,Upe,hdr,pdr,Jpe,_dr,udr,bdr,ue,s6,Ype,vdr,Tdr,dO,Fdr,Cdr,Mdr,l6,Kpe,Edr,ydr,cO,wdr,Adr,Ldr,i6,Zpe,Bdr,xdr,fO,kdr,Rdr,Sdr,d6,e_e,Pdr,$dr,mO,Idr,Ndr,jdr,c6,o_e,Ddr,qdr,gO,Gdr,Odr,Xdr,f6,r_e,Vdr,zdr,hO,Wdr,Qdr,Hdr,m6,t_e,Udr,Jdr,pO,Ydr,Kdr,Zdr,g6,a_e,ecr,ocr,_O,rcr,tcr,acr,h6,n_e,ncr,scr,uO,lcr,icr,dcr,p6,s_e,ccr,fcr,bO,mcr,gcr,hcr,l_e,pcr,_cr,w0,dRe,kc,_6,i_e,A0,ucr,d_e,bcr,cRe,yr,L0,vcr,Rc,Tcr,c_e,Fcr,Ccr,f_e,Mcr,Ecr,ycr,B0,wcr,m_e,Acr,Lcr,Bcr,vt,x0,xcr,g_e,kcr,Rcr,Sc,Scr,h_e,Pcr,$cr,p_e,Icr,Ncr,jcr,__e,Dcr,qcr,k0,Gcr,To,R0,Ocr,u_e,Xcr,Vcr,Cn,zcr,b_e,Wcr,Qcr,v_e,Hcr,Ucr,T_e,Jcr,Ycr,Kcr,V,u6,F_e,Zcr,efr,vO,ofr,rfr,tfr,b6,C_e,afr,nfr,TO,sfr,lfr,ifr,v6,M_e,dfr,cfr,FO,ffr,mfr,gfr,T6,E_e,hfr,pfr,CO,_fr,ufr,bfr,F6,y_e,vfr,Tfr,MO,Ffr,Cfr,Mfr,C6,w_e,Efr,yfr,EO,wfr,Afr,Lfr,M6,A_e,Bfr,xfr,yO,kfr,Rfr,Sfr,E6,L_e,Pfr,$fr,wO,Ifr,Nfr,jfr,y6,B_e,Dfr,qfr,AO,Gfr,Ofr,Xfr,w6,x_e,Vfr,zfr,LO,Wfr,Qfr,Hfr,A6,k_e,Ufr,Jfr,BO,Yfr,Kfr,Zfr,L6,R_e,emr,omr,xO,rmr,tmr,amr,B6,S_e,nmr,smr,kO,lmr,imr,dmr,x6,P_e,cmr,fmr,RO,mmr,gmr,hmr,k6,$_e,pmr,_mr,SO,umr,bmr,vmr,R6,I_e,Tmr,Fmr,PO,Cmr,Mmr,Emr,S6,N_e,ymr,wmr,$O,Amr,Lmr,Bmr,P6,j_e,xmr,kmr,IO,Rmr,Smr,Pmr,$6,D_e,$mr,Imr,NO,Nmr,jmr,Dmr,I6,q_e,qmr,Gmr,jO,Omr,Xmr,Vmr,N6,G_e,zmr,Wmr,DO,Qmr,Hmr,Umr,j6,O_e,Jmr,Ymr,qO,Kmr,Zmr,egr,D6,X_e,ogr,rgr,GO,tgr,agr,ngr,q6,V_e,sgr,lgr,OO,igr,dgr,cgr,G6,z_e,fgr,mgr,XO,ggr,hgr,pgr,W_e,_gr,ugr,S0,fRe,Pc,O6,Q_e,P0,bgr,H_e,vgr,mRe,wr,$0,Tgr,$c,Fgr,U_e,Cgr,Mgr,J_e,Egr,ygr,wgr,I0,Agr,Y_e,Lgr,Bgr,xgr,Tt,N0,kgr,K_e,Rgr,Sgr,Ic,Pgr,Z_e,$gr,Igr,eue,Ngr,jgr,Dgr,oue,qgr,Ggr,j0,Ogr,Fo,D0,Xgr,rue,Vgr,zgr,Mn,Wgr,tue,Qgr,Hgr,aue,Ugr,Jgr,nue,Ygr,Kgr,Zgr,ae,X6,sue,ehr,ohr,VO,rhr,thr,ahr,V6,lue,nhr,shr,zO,lhr,ihr,dhr,z6,iue,chr,fhr,WO,mhr,ghr,hhr,W6,due,phr,_hr,QO,uhr,bhr,vhr,Q6,cue,Thr,Fhr,HO,Chr,Mhr,Ehr,H6,fue,yhr,whr,UO,Ahr,Lhr,Bhr,U6,mue,xhr,khr,JO,Rhr,Shr,Phr,J6,gue,$hr,Ihr,YO,Nhr,jhr,Dhr,Y6,hue,qhr,Ghr,KO,Ohr,Xhr,Vhr,K6,pue,zhr,Whr,ZO,Qhr,Hhr,Uhr,Z6,_ue,Jhr,Yhr,eX,Khr,Zhr,epr,eT,uue,opr,rpr,oX,tpr,apr,npr,oT,bue,spr,lpr,rX,ipr,dpr,cpr,rT,vue,fpr,mpr,tX,gpr,hpr,ppr,tT,Tue,_pr,upr,aX,bpr,vpr,Tpr,aT,Fue,Fpr,Cpr,nX,Mpr,Epr,ypr,nT,Cue,wpr,Apr,sX,Lpr,Bpr,xpr,Mue,kpr,Rpr,q0,gRe,Nc,sT,Eue,G0,Spr,yue,Ppr,hRe,Ar,O0,$pr,jc,Ipr,wue,Npr,jpr,Aue,Dpr,qpr,Gpr,X0,Opr,Lue,Xpr,Vpr,zpr,Ft,V0,Wpr,Bue,Qpr,Hpr,Dc,Upr,xue,Jpr,Ypr,kue,Kpr,Zpr,e_r,Rue,o_r,r_r,z0,t_r,Co,W0,a_r,Sue,n_r,s_r,En,l_r,Pue,i_r,d_r,$ue,c_r,f_r,Iue,m_r,g_r,h_r,Nue,lT,jue,p_r,__r,lX,u_r,b_r,v_r,Due,T_r,F_r,Q0,pRe,qc,iT,que,H0,C_r,Gue,M_r,_Re,Lr,U0,E_r,Gc,y_r,Oue,w_r,A_r,Xue,L_r,B_r,x_r,J0,k_r,Vue,R_r,S_r,P_r,Ct,Y0,$_r,zue,I_r,N_r,Oc,j_r,Wue,D_r,q_r,Que,G_r,O_r,X_r,Hue,V_r,z_r,K0,W_r,Mo,Z0,Q_r,Uue,H_r,U_r,yn,J_r,Jue,Y_r,K_r,Yue,Z_r,eur,Kue,our,rur,tur,K,dT,Zue,aur,nur,iX,sur,lur,iur,cT,e1e,dur,cur,dX,fur,mur,gur,fT,o1e,hur,pur,cX,_ur,uur,bur,mT,r1e,vur,Tur,fX,Fur,Cur,Mur,gT,t1e,Eur,yur,mX,wur,Aur,Lur,hT,a1e,Bur,xur,gX,kur,Rur,Sur,pT,n1e,Pur,$ur,hX,Iur,Nur,jur,_T,s1e,Dur,qur,pX,Gur,Our,Xur,uT,l1e,Vur,zur,_X,Wur,Qur,Hur,bT,i1e,Uur,Jur,uX,Yur,Kur,Zur,vT,d1e,e1r,o1r,bX,r1r,t1r,a1r,TT,c1e,n1r,s1r,vX,l1r,i1r,d1r,FT,f1e,c1r,f1r,TX,m1r,g1r,h1r,CT,m1e,p1r,_1r,FX,u1r,b1r,v1r,MT,g1e,T1r,F1r,CX,C1r,M1r,E1r,ET,h1e,y1r,w1r,MX,A1r,L1r,B1r,yT,p1e,x1r,k1r,EX,R1r,S1r,P1r,wT,_1e,$1r,I1r,yX,N1r,j1r,D1r,AT,u1e,q1r,G1r,wX,O1r,X1r,V1r,LT,b1e,z1r,W1r,AX,Q1r,H1r,U1r,v1e,J1r,Y1r,eL,uRe,Xc,BT,T1e,oL,K1r,F1e,Z1r,bRe,Br,rL,e4r,Vc,o4r,C1e,r4r,t4r,M1e,a4r,n4r,s4r,tL,l4r,E1e,i4r,d4r,c4r,Mt,aL,f4r,y1e,m4r,g4r,zc,h4r,w1e,p4r,_4r,A1e,u4r,b4r,v4r,L1e,T4r,F4r,nL,C4r,Eo,sL,M4r,B1e,E4r,y4r,wn,w4r,x1e,A4r,L4r,k1e,B4r,x4r,R1e,k4r,R4r,S4r,Z,xT,S1e,P4r,$4r,LX,I4r,N4r,j4r,kT,P1e,D4r,q4r,BX,G4r,O4r,X4r,RT,$1e,V4r,z4r,xX,W4r,Q4r,H4r,ST,I1e,U4r,J4r,kX,Y4r,K4r,Z4r,PT,N1e,ebr,obr,RX,rbr,tbr,abr,$T,j1e,nbr,sbr,SX,lbr,ibr,dbr,IT,D1e,cbr,fbr,PX,mbr,gbr,hbr,NT,q1e,pbr,_br,$X,ubr,bbr,vbr,jT,G1e,Tbr,Fbr,IX,Cbr,Mbr,Ebr,DT,O1e,ybr,wbr,NX,Abr,Lbr,Bbr,qT,X1e,xbr,kbr,jX,Rbr,Sbr,Pbr,GT,V1e,$br,Ibr,DX,Nbr,jbr,Dbr,OT,z1e,qbr,Gbr,qX,Obr,Xbr,Vbr,XT,W1e,zbr,Wbr,GX,Qbr,Hbr,Ubr,VT,Q1e,Jbr,Ybr,OX,Kbr,Zbr,e3r,zT,H1e,o3r,r3r,XX,t3r,a3r,n3r,WT,U1e,s3r,l3r,VX,i3r,d3r,c3r,QT,J1e,f3r,m3r,zX,g3r,h3r,p3r,HT,Y1e,_3r,u3r,WX,b3r,v3r,T3r,K1e,F3r,C3r,lL,vRe,Wc,UT,Z1e,iL,M3r,e4e,E3r,TRe,xr,dL,y3r,Qc,w3r,o4e,A3r,L3r,r4e,B3r,x3r,k3r,cL,R3r,t4e,S3r,P3r,$3r,Et,fL,I3r,a4e,N3r,j3r,Hc,D3r,n4e,q3r,G3r,s4e,O3r,X3r,V3r,l4e,z3r,W3r,mL,Q3r,yo,gL,H3r,i4e,U3r,J3r,An,Y3r,d4e,K3r,Z3r,c4e,e5r,o5r,f4e,r5r,t5r,a5r,m4e,JT,g4e,n5r,s5r,QX,l5r,i5r,d5r,h4e,c5r,f5r,hL,FRe,Uc,YT,p4e,pL,m5r,_4e,g5r,CRe,kr,_L,h5r,Jc,p5r,u4e,_5r,u5r,b4e,b5r,v5r,T5r,uL,F5r,v4e,C5r,M5r,E5r,yt,bL,y5r,T4e,w5r,A5r,Yc,L5r,F4e,B5r,x5r,C4e,k5r,R5r,S5r,M4e,P5r,$5r,vL,I5r,wo,TL,N5r,E4e,j5r,D5r,Ln,q5r,y4e,G5r,O5r,w4e,X5r,V5r,A4e,z5r,W5r,Q5r,L4e,KT,B4e,H5r,U5r,HX,J5r,Y5r,K5r,x4e,Z5r,e2r,FL,MRe,Kc,ZT,k4e,CL,o2r,R4e,r2r,ERe,Rr,ML,t2r,Zc,a2r,S4e,n2r,s2r,P4e,l2r,i2r,d2r,EL,c2r,$4e,f2r,m2r,g2r,wt,yL,h2r,I4e,p2r,_2r,ef,u2r,N4e,b2r,v2r,j4e,T2r,F2r,C2r,D4e,M2r,E2r,wL,y2r,Ao,AL,w2r,q4e,A2r,L2r,Bn,B2r,G4e,x2r,k2r,O4e,R2r,S2r,X4e,P2r,$2r,I2r,z,eF,V4e,N2r,j2r,UX,D2r,q2r,G2r,oF,z4e,O2r,X2r,JX,V2r,z2r,W2r,rF,W4e,Q2r,H2r,YX,U2r,J2r,Y2r,tF,Q4e,K2r,Z2r,KX,evr,ovr,rvr,aF,H4e,tvr,avr,ZX,nvr,svr,lvr,nF,U4e,ivr,dvr,eV,cvr,fvr,mvr,sF,J4e,gvr,hvr,oV,pvr,_vr,uvr,lF,Y4e,bvr,vvr,rV,Tvr,Fvr,Cvr,iF,K4e,Mvr,Evr,tV,yvr,wvr,Avr,dF,Z4e,Lvr,Bvr,aV,xvr,kvr,Rvr,cF,ebe,Svr,Pvr,nV,$vr,Ivr,Nvr,fF,obe,jvr,Dvr,sV,qvr,Gvr,Ovr,mF,rbe,Xvr,Vvr,lV,zvr,Wvr,Qvr,gF,tbe,Hvr,Uvr,iV,Jvr,Yvr,Kvr,hF,abe,Zvr,e6r,dV,o6r,r6r,t6r,pF,nbe,a6r,n6r,cV,s6r,l6r,i6r,_F,sbe,d6r,c6r,fV,f6r,m6r,g6r,uF,lbe,h6r,p6r,mV,_6r,u6r,b6r,bF,ibe,v6r,T6r,gV,F6r,C6r,M6r,vF,dbe,E6r,y6r,hV,w6r,A6r,L6r,TF,cbe,B6r,x6r,pV,k6r,R6r,S6r,FF,fbe,P6r,$6r,_V,I6r,N6r,j6r,CF,mbe,D6r,q6r,uV,G6r,O6r,X6r,MF,gbe,V6r,z6r,bV,W6r,Q6r,H6r,EF,hbe,U6r,J6r,vV,Y6r,K6r,Z6r,pbe,eTr,oTr,LL,yRe,of,yF,_be,BL,rTr,ube,tTr,wRe,Sr,xL,aTr,rf,nTr,bbe,sTr,lTr,vbe,iTr,dTr,cTr,kL,fTr,Tbe,mTr,gTr,hTr,At,RL,pTr,Fbe,_Tr,uTr,tf,bTr,Cbe,vTr,TTr,Mbe,FTr,CTr,MTr,Ebe,ETr,yTr,SL,wTr,Lo,PL,ATr,ybe,LTr,BTr,xn,xTr,wbe,kTr,RTr,Abe,STr,PTr,Lbe,$Tr,ITr,NTr,ca,wF,Bbe,jTr,DTr,TV,qTr,GTr,OTr,AF,xbe,XTr,VTr,FV,zTr,WTr,QTr,LF,kbe,HTr,UTr,CV,JTr,YTr,KTr,BF,Rbe,ZTr,eFr,MV,oFr,rFr,tFr,xF,Sbe,aFr,nFr,EV,sFr,lFr,iFr,Pbe,dFr,cFr,$L,ARe,af,kF,$be,IL,fFr,Ibe,mFr,LRe,Pr,NL,gFr,nf,hFr,Nbe,pFr,_Fr,jbe,uFr,bFr,vFr,jL,TFr,Dbe,FFr,CFr,MFr,Lt,DL,EFr,qbe,yFr,wFr,sf,AFr,Gbe,LFr,BFr,Obe,xFr,kFr,RFr,Xbe,SFr,PFr,qL,$Fr,Bo,GL,IFr,Vbe,NFr,jFr,kn,DFr,zbe,qFr,GFr,Wbe,OFr,XFr,Qbe,VFr,zFr,WFr,ce,RF,Hbe,QFr,HFr,yV,UFr,JFr,YFr,SF,Ube,KFr,ZFr,wV,eCr,oCr,rCr,PF,Jbe,tCr,aCr,AV,nCr,sCr,lCr,$F,Ybe,iCr,dCr,LV,cCr,fCr,mCr,IF,Kbe,gCr,hCr,BV,pCr,_Cr,uCr,NF,Zbe,bCr,vCr,xV,TCr,FCr,CCr,jF,e3e,MCr,ECr,kV,yCr,wCr,ACr,DF,o3e,LCr,BCr,RV,xCr,kCr,RCr,qF,r3e,SCr,PCr,SV,$Cr,ICr,NCr,GF,t3e,jCr,DCr,PV,qCr,GCr,OCr,OF,a3e,XCr,VCr,$V,zCr,WCr,QCr,XF,n3e,HCr,UCr,IV,JCr,YCr,KCr,s3e,ZCr,eMr,OL,BRe,lf,VF,l3e,XL,oMr,i3e,rMr,xRe,$r,VL,tMr,df,aMr,d3e,nMr,sMr,c3e,lMr,iMr,dMr,zL,cMr,f3e,fMr,mMr,gMr,Bt,WL,hMr,m3e,pMr,_Mr,cf,uMr,g3e,bMr,vMr,h3e,TMr,FMr,CMr,p3e,MMr,EMr,QL,yMr,xo,HL,wMr,_3e,AMr,LMr,Rn,BMr,u3e,xMr,kMr,b3e,RMr,SMr,v3e,PMr,$Mr,IMr,be,zF,T3e,NMr,jMr,NV,DMr,qMr,GMr,WF,F3e,OMr,XMr,jV,VMr,zMr,WMr,QF,C3e,QMr,HMr,DV,UMr,JMr,YMr,HF,M3e,KMr,ZMr,qV,eEr,oEr,rEr,UF,E3e,tEr,aEr,GV,nEr,sEr,lEr,JF,y3e,iEr,dEr,OV,cEr,fEr,mEr,YF,w3e,gEr,hEr,XV,pEr,_Er,uEr,KF,A3e,bEr,vEr,VV,TEr,FEr,CEr,ZF,L3e,MEr,EEr,zV,yEr,wEr,AEr,eC,B3e,LEr,BEr,WV,xEr,kEr,REr,x3e,SEr,PEr,UL,kRe,ff,oC,k3e,JL,$Er,R3e,IEr,RRe,Ir,YL,NEr,mf,jEr,S3e,DEr,qEr,P3e,GEr,OEr,XEr,KL,VEr,$3e,zEr,WEr,QEr,xt,ZL,HEr,I3e,UEr,JEr,gf,YEr,N3e,KEr,ZEr,j3e,eyr,oyr,ryr,D3e,tyr,ayr,e7,nyr,ko,o7,syr,q3e,lyr,iyr,Sn,dyr,G3e,cyr,fyr,O3e,myr,gyr,X3e,hyr,pyr,_yr,Ee,rC,V3e,uyr,byr,QV,vyr,Tyr,Fyr,tC,z3e,Cyr,Myr,HV,Eyr,yyr,wyr,aC,W3e,Ayr,Lyr,UV,Byr,xyr,kyr,nC,Q3e,Ryr,Syr,JV,Pyr,$yr,Iyr,sC,H3e,Nyr,jyr,YV,Dyr,qyr,Gyr,lC,U3e,Oyr,Xyr,KV,Vyr,zyr,Wyr,iC,J3e,Qyr,Hyr,ZV,Uyr,Jyr,Yyr,dC,Y3e,Kyr,Zyr,ez,ewr,owr,rwr,cC,K3e,twr,awr,oz,nwr,swr,lwr,Z3e,iwr,dwr,r7,SRe,hf,fC,e5e,t7,cwr,o5e,fwr,PRe,Nr,a7,mwr,pf,gwr,r5e,hwr,pwr,t5e,_wr,uwr,bwr,n7,vwr,a5e,Twr,Fwr,Cwr,kt,s7,Mwr,n5e,Ewr,ywr,_f,wwr,s5e,Awr,Lwr,l5e,Bwr,xwr,kwr,i5e,Rwr,Swr,l7,Pwr,Ro,i7,$wr,d5e,Iwr,Nwr,Pn,jwr,c5e,Dwr,qwr,f5e,Gwr,Owr,m5e,Xwr,Vwr,zwr,ve,mC,g5e,Wwr,Qwr,rz,Hwr,Uwr,Jwr,gC,h5e,Ywr,Kwr,tz,Zwr,eAr,oAr,hC,p5e,rAr,tAr,az,aAr,nAr,sAr,pC,_5e,lAr,iAr,nz,dAr,cAr,fAr,_C,u5e,mAr,gAr,sz,hAr,pAr,_Ar,uC,b5e,uAr,bAr,lz,vAr,TAr,FAr,bC,v5e,CAr,MAr,iz,EAr,yAr,wAr,vC,T5e,AAr,LAr,dz,BAr,xAr,kAr,TC,F5e,RAr,SAr,cz,PAr,$Ar,IAr,FC,C5e,NAr,jAr,fz,DAr,qAr,GAr,M5e,OAr,XAr,d7,$Re,uf,CC,E5e,c7,VAr,y5e,zAr,IRe,jr,f7,WAr,bf,QAr,w5e,HAr,UAr,A5e,JAr,YAr,KAr,m7,ZAr,L5e,e0r,o0r,r0r,Rt,g7,t0r,B5e,a0r,n0r,vf,s0r,x5e,l0r,i0r,k5e,d0r,c0r,f0r,R5e,m0r,g0r,h7,h0r,So,p7,p0r,S5e,_0r,u0r,$n,b0r,P5e,v0r,T0r,$5e,F0r,C0r,I5e,M0r,E0r,y0r,Te,MC,N5e,w0r,A0r,mz,L0r,B0r,x0r,EC,j5e,k0r,R0r,gz,S0r,P0r,$0r,yC,D5e,I0r,N0r,hz,j0r,D0r,q0r,wC,q5e,G0r,O0r,pz,X0r,V0r,z0r,AC,G5e,W0r,Q0r,_z,H0r,U0r,J0r,LC,O5e,Y0r,K0r,uz,Z0r,eLr,oLr,BC,X5e,rLr,tLr,bz,aLr,nLr,sLr,xC,V5e,lLr,iLr,vz,dLr,cLr,fLr,kC,z5e,mLr,gLr,Tz,hLr,pLr,_Lr,RC,W5e,uLr,bLr,Fz,vLr,TLr,FLr,Q5e,CLr,MLr,_7,NRe,Tf,SC,H5e,u7,ELr,U5e,yLr,jRe,Dr,b7,wLr,Ff,ALr,J5e,LLr,BLr,Y5e,xLr,kLr,RLr,v7,SLr,K5e,PLr,$Lr,ILr,St,T7,NLr,Z5e,jLr,DLr,Cf,qLr,e2e,GLr,OLr,o2e,XLr,VLr,zLr,r2e,WLr,QLr,F7,HLr,Po,C7,ULr,t2e,JLr,YLr,In,KLr,a2e,ZLr,e7r,n2e,o7r,r7r,s2e,t7r,a7r,n7r,Se,PC,l2e,s7r,l7r,Cz,i7r,d7r,c7r,$C,i2e,f7r,m7r,Mz,g7r,h7r,p7r,IC,d2e,_7r,u7r,Ez,b7r,v7r,T7r,NC,c2e,F7r,C7r,yz,M7r,E7r,y7r,jC,f2e,w7r,A7r,wz,L7r,B7r,x7r,DC,m2e,k7r,R7r,Az,S7r,P7r,$7r,qC,g2e,I7r,N7r,Lz,j7r,D7r,q7r,GC,h2e,G7r,O7r,Bz,X7r,V7r,z7r,p2e,W7r,Q7r,M7,DRe,Mf,OC,_2e,E7,H7r,u2e,U7r,qRe,qr,y7,J7r,Ef,Y7r,b2e,K7r,Z7r,v2e,e8r,o8r,r8r,w7,t8r,T2e,a8r,n8r,s8r,Pt,A7,l8r,F2e,i8r,d8r,yf,c8r,C2e,f8r,m8r,M2e,g8r,h8r,p8r,E2e,_8r,u8r,L7,b8r,$o,B7,v8r,y2e,T8r,F8r,Nn,C8r,w2e,M8r,E8r,A2e,y8r,w8r,L2e,A8r,L8r,B8r,Pe,XC,B2e,x8r,k8r,xz,R8r,S8r,P8r,VC,x2e,$8r,I8r,kz,N8r,j8r,D8r,zC,k2e,q8r,G8r,Rz,O8r,X8r,V8r,WC,R2e,z8r,W8r,Sz,Q8r,H8r,U8r,QC,S2e,J8r,Y8r,Pz,K8r,Z8r,e9r,HC,P2e,o9r,r9r,$z,t9r,a9r,n9r,UC,$2e,s9r,l9r,Iz,i9r,d9r,c9r,JC,I2e,f9r,m9r,Nz,g9r,h9r,p9r,N2e,_9r,u9r,x7,GRe,wf,YC,j2e,k7,b9r,D2e,v9r,ORe,Gr,R7,T9r,Af,F9r,q2e,C9r,M9r,G2e,E9r,y9r,w9r,S7,A9r,O2e,L9r,B9r,x9r,$t,P7,k9r,X2e,R9r,S9r,Lf,P9r,V2e,$9r,I9r,z2e,N9r,j9r,D9r,W2e,q9r,G9r,$7,O9r,Io,I7,X9r,Q2e,V9r,z9r,jn,W9r,H2e,Q9r,H9r,U2e,U9r,J9r,J2e,Y9r,K9r,Z9r,Y2e,KC,K2e,eBr,oBr,jz,rBr,tBr,aBr,Z2e,nBr,sBr,N7,XRe,Bf,ZC,eve,j7,lBr,ove,iBr,VRe,Or,D7,dBr,xf,cBr,rve,fBr,mBr,tve,gBr,hBr,pBr,q7,_Br,ave,uBr,bBr,vBr,It,G7,TBr,nve,FBr,CBr,kf,MBr,sve,EBr,yBr,lve,wBr,ABr,LBr,ive,BBr,xBr,O7,kBr,No,X7,RBr,dve,SBr,PBr,Dn,$Br,cve,IBr,NBr,fve,jBr,DBr,mve,qBr,GBr,OBr,V7,eM,gve,XBr,VBr,Dz,zBr,WBr,QBr,oM,hve,HBr,UBr,qz,JBr,YBr,KBr,pve,ZBr,exr,z7,zRe,Rf,rM,_ve,W7,oxr,uve,rxr,WRe,Xr,Q7,txr,Sf,axr,bve,nxr,sxr,vve,lxr,ixr,dxr,H7,cxr,Tve,fxr,mxr,gxr,Nt,U7,hxr,Fve,pxr,_xr,Pf,uxr,Cve,bxr,vxr,Mve,Txr,Fxr,Cxr,Eve,Mxr,Exr,J7,yxr,jo,Y7,wxr,yve,Axr,Lxr,qn,Bxr,wve,xxr,kxr,Ave,Rxr,Sxr,Lve,Pxr,$xr,Ixr,Bve,tM,xve,Nxr,jxr,Gz,Dxr,qxr,Gxr,kve,Oxr,Xxr,K7,QRe;return fe=new X({}),qa=new w({props:{code:'model = AutoModel.from_pretrained("bert-base-cased")',highlighted:'model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)'}}),lE=new X({}),iE=new w({props:{code:`from transformers import AutoConfig, AutoModel

AutoConfig.register("new-model", NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

AutoConfig.register(<span class="hljs-string">&quot;new-model&quot;</span>, NewModelConfig)
AutoModel.register(NewModelConfig, NewModel)`}}),Gf=new Vxr({props:{warning:"&lcub;true}",$$slots:{default:[GTt]},$$scope:{ctx:Ii}}}),dE=new X({}),cE=new M({props:{name:"class transformers.AutoConfig",anchor:"transformers.AutoConfig",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/configuration_auto.py#L536"}}),gE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoConfig.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/configuration_auto.py#L559",parametersDescription:[{anchor:"transformers.AutoConfig.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model configuration hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing a configuration file saved using the
<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.save_pretrained">save_pretrained()</a> method, or the <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> method,
e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a saved configuration JSON <em>file</em>, e.g.,
<code>./my_model_directory/configuration.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoConfig.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoConfig.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoConfig.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoConfig.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoConfig.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoConfig.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final configuration object.</p>
<p>If <code>True</code>, then this functions returns a <code>Tuple(config, unused_kwargs)</code> where <em>unused_kwargs</em> is a
dictionary consisting of the key/value pairs whose keys are not configuration attributes: i.e., the
part of <code>kwargs</code> which has not been used to update <code>config</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoConfig.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoConfig.from_pretrained.kwargs(additional",description:`<strong>kwargs(additional</strong> keyword arguments, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are configuration attributes will be used to override the loaded
values. Behavior concerning key/value pairs whose keys are <em>not</em> configuration attributes is controlled
by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs(additional"}]}}),hE=new w({props:{code:`from transformers import AutoConfig

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-uncased")

# Download configuration from huggingface.co (user-uploaded) and cache.
config = AutoConfig.from_pretrained("dbmdz/bert-base-german-cased")

# If configuration file is in a directory (e.g., was saved using *save_pretrained('./test/saved_model/')*).
config = AutoConfig.from_pretrained("./test/bert_saved_model/")

# Load a specific configuration file.
config = AutoConfig.from_pretrained("./test/bert_saved_model/my_configuration.json")

# Change some config attributes when loading a pretrained config.
config = AutoConfig.from_pretrained("bert-base-uncased", output_attentions=True, foo=False)
config.output_attentions

config, unused_kwargs = AutoConfig.from_pretrained(
    "bert-base-uncased", output_attentions=True, foo=False, return_unused_kwargs=True
)
config.output_attentions

config.unused_kwargs`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If configuration file is in a directory (e.g., was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*).</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Load a specific configuration file.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/my_configuration.json&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Change some config attributes when loading a pretrained config.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config, unused_kwargs = AutoConfig.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;bert-base-uncased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>, foo=<span class="hljs-literal">False</span>, return_unused_kwargs=<span class="hljs-literal">True</span>
<span class="hljs-meta">... </span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span>config.unused_kwargs
{<span class="hljs-string">&#x27;foo&#x27;</span>: <span class="hljs-literal">False</span>}`}}),pE=new M({props:{name:"register",anchor:"transformers.AutoConfig.register",parameters:[{name:"model_type",val:""},{name:"config",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/configuration_auto.py#L681",parametersDescription:[{anchor:"transformers.AutoConfig.register.model_type",description:"<strong>model_type</strong> (<code>str</code>) &#x2014; The model type like &#x201C;bert&#x201D; or &#x201C;gpt&#x201D;.",name:"model_type"},{anchor:"transformers.AutoConfig.register.config",description:'<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014; The config to register.',name:"config"}]}}),_E=new X({}),uE=new M({props:{name:"class transformers.AutoTokenizer",anchor:"transformers.AutoTokenizer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/tokenization_auto.py#L352"}}),TE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoTokenizer.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"*inputs",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/tokenization_auto.py#L366",parametersDescription:[{anchor:"transformers.AutoTokenizer.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a predefined tokenizer hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing vocabulary files required by the tokenizer, for instance saved
using the <a href="/docs/transformers/pr_16345/en/internal/tokenization_utils#transformers.PreTrainedTokenizerBase.save_pretrained">save_pretrained()</a> method, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a single saved vocabulary file if and only if the tokenizer only requires a
single vocabulary file (like Bert or XLNet), e.g.: <code>./my_model_directory/vocab.txt</code>. (Not
applicable to all derived classes)</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoTokenizer.from_pretrained.inputs",description:`<strong>inputs</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the Tokenizer <code>__init__()</code> method.`,name:"inputs"},{anchor:"transformers.AutoTokenizer.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
The configuration object used to dertermine the tokenizer class to instantiate.`,name:"config"},{anchor:"transformers.AutoTokenizer.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoTokenizer.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download the model weights and configuration files and override the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.AutoTokenizer.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoTokenizer.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoTokenizer.from_pretrained.subfolder",description:`<strong>subfolder</strong> (<code>str</code>, <em>optional</em>) &#x2014;
In case the relevant files are located inside a subfolder of the model repo on huggingface.co (e.g. for
facebook/rag-token-base), specify it here.`,name:"subfolder"},{anchor:"transformers.AutoTokenizer.from_pretrained.use_fast",description:`<strong>use_fast</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>True</code>) &#x2014;
Whether or not to try to load the fast version of the tokenizer.`,name:"use_fast"},{anchor:"transformers.AutoTokenizer.from_pretrained.tokenizer_type",description:`<strong>tokenizer_type</strong> (<code>str</code>, <em>optional</em>) &#x2014;
Tokenizer type to be loaded.`,name:"tokenizer_type"},{anchor:"transformers.AutoTokenizer.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoTokenizer.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Will be passed to the Tokenizer <code>__init__()</code> method. Can be used to set special tokens like
<code>bos_token</code>, <code>eos_token</code>, <code>unk_token</code>, <code>sep_token</code>, <code>pad_token</code>, <code>cls_token</code>, <code>mask_token</code>,
<code>additional_special_tokens</code>. See parameters in the <code>__init__()</code> for more details.`,name:"kwargs"}]}}),FE=new w({props:{code:`from transformers import AutoTokenizer

# Download vocabulary from huggingface.co and cache.
tokenizer = AutoTokenizer.from_pretrained("bert-base-uncased")

# Download vocabulary from huggingface.co (user-uploaded) and cache.
tokenizer = AutoTokenizer.from_pretrained("dbmdz/bert-base-german-cased")

# If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained('./test/saved_model/')*)
tokenizer = AutoTokenizer.from_pretrained("./test/bert_saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoTokenizer

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;bert-base-uncased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download vocabulary from huggingface.co (user-uploaded) and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;dbmdz/bert-base-german-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If vocabulary files are in a directory (e.g. tokenizer was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>tokenizer = AutoTokenizer.from_pretrained(<span class="hljs-string">&quot;./test/bert_saved_model/&quot;</span>)`}}),CE=new M({props:{name:"register",anchor:"transformers.AutoTokenizer.register",parameters:[{name:"config_class",val:""},{name:"slow_tokenizer_class",val:" = None"},{name:"fast_tokenizer_class",val:" = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/tokenization_auto.py#L562",parametersDescription:[{anchor:"transformers.AutoTokenizer.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizer</code>, <em>optional</em>) &#x2014;
The slow tokenizer to register.`,name:"slow_tokenizer_class"},{anchor:"transformers.AutoTokenizer.register.slow_tokenizer_class",description:`<strong>slow_tokenizer_class</strong> (<code>PretrainedTokenizerFast</code>, <em>optional</em>) &#x2014;
The fast tokenizer to register.`,name:"slow_tokenizer_class"}]}}),ME=new X({}),EE=new M({props:{name:"class transformers.AutoFeatureExtractor",anchor:"transformers.AutoFeatureExtractor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/feature_extraction_auto.py#L172"}}),AE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoFeatureExtractor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/feature_extraction_auto.py#L186",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a feature extractor file saved using the
<a href="/docs/transformers/pr_16345/en/main_classes/feature_extractor#transformers.FeatureExtractionMixin.save_pretrained">save_pretrained()</a> method, e.g.,
<code>./my_model_directory/</code>.</li>
<li>a path or url to a saved feature extractor JSON <em>file</em>, e.g.,
<code>./my_model_directory/preprocessor_config.json</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoFeatureExtractor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),Bh=new Vxr({props:{$$slots:{default:[OTt]},$$scope:{ctx:Ii}}}),LE=new w({props:{code:`from transformers import AutoFeatureExtractor

# Download feature extractor from huggingface.co and cache.
feature_extractor = AutoFeatureExtractor.from_pretrained("facebook/wav2vec2-base-960h")

# If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained('./test/saved_model/')*)
feature_extractor = AutoFeatureExtractor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoFeatureExtractor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download feature extractor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If feature extractor files are in a directory (e.g. feature extractor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>feature_extractor = AutoFeatureExtractor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),BE=new M({props:{name:"register",anchor:"transformers.AutoFeatureExtractor.register",parameters:[{name:"config_class",val:""},{name:"feature_extractor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/feature_extraction_auto.py#L313",parametersDescription:[{anchor:"transformers.AutoFeatureExtractor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoFeatureExtractor.register.feature_extractor_class",description:"<strong>feature_extractor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The feature extractor to register.",name:"feature_extractor_class"}]}}),xE=new X({}),kE=new M({props:{name:"class transformers.AutoProcessor",anchor:"transformers.AutoProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/processing_auto.py#L71"}}),PE=new M({props:{name:"from_pretrained",anchor:"transformers.AutoProcessor.from_pretrained",parameters:[{name:"pretrained_model_name_or_path",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/processing_auto.py#L85",parametersDescription:[{anchor:"transformers.AutoProcessor.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
This can be either:</p>
<ul>
<li>a string, the <em>model id</em> of a pretrained feature_extractor hosted inside a model repo on
huggingface.co. Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or
namespaced under a user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>a path to a <em>directory</em> containing a processor files saved using the <code>save_pretrained()</code> method,
e.g., <code>./my_model_directory/</code>.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.AutoProcessor.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model feature extractor should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.AutoProcessor.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force to (re-)download the feature extractor files and override the cached versions
if they exist.`,name:"force_download"},{anchor:"transformers.AutoProcessor.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received file. Attempts to resume the download if such a file
exists.`,name:"resume_download"},{anchor:"transformers.AutoProcessor.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}.</code> The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.AutoProcessor.from_pretrained.use_auth_token",description:`<strong>use_auth_token</strong> (<code>str</code> or <em>bool</em>, <em>optional</em>) &#x2014;
The token to use as HTTP bearer authorization for remote files. If <code>True</code>, will use the token generated
when running <code>transformers-cli login</code> (stored in <code>~/.huggingface</code>).`,name:"use_auth_token"},{anchor:"transformers.AutoProcessor.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.AutoProcessor.from_pretrained.return_unused_kwargs",description:`<strong>return_unused_kwargs</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
If <code>False</code>, then this function returns just the final feature extractor object. If <code>True</code>, then this
functions returns a <code>Tuple(feature_extractor, unused_kwargs)</code> where <em>unused_kwargs</em> is a dictionary
consisting of the key/value pairs whose keys are not feature extractor attributes: i.e., the part of
<code>kwargs</code> which has not been used to update <code>feature_extractor</code> and is otherwise ignored.`,name:"return_unused_kwargs"},{anchor:"transformers.AutoProcessor.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.AutoProcessor.from_pretrained.kwargs",description:`<strong>kwargs</strong> (<code>Dict[str, Any]</code>, <em>optional</em>) &#x2014;
The values in kwargs of any keys which are feature extractor attributes will be used to override the
loaded values. Behavior concerning key/value pairs whose keys are <em>not</em> feature extractor attributes is
controlled by the <code>return_unused_kwargs</code> keyword parameter.`,name:"kwargs"}]}}),qh=new Vxr({props:{$$slots:{default:[XTt]},$$scope:{ctx:Ii}}}),$E=new w({props:{code:`from transformers import AutoProcessor

# Download processor from huggingface.co and cache.
processor = AutoProcessor.from_pretrained("facebook/wav2vec2-base-960h")

# If processor files are in a directory (e.g. processor was saved using *save_pretrained('./test/saved_model/')*)
processor = AutoProcessor.from_pretrained("./test/saved_model/")`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoProcessor

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download processor from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;facebook/wav2vec2-base-960h&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># If processor files are in a directory (e.g. processor was saved using *save_pretrained(&#x27;./test/saved_model/&#x27;)*)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>processor = AutoProcessor.from_pretrained(<span class="hljs-string">&quot;./test/saved_model/&quot;</span>)`}}),IE=new M({props:{name:"register",anchor:"transformers.AutoProcessor.register",parameters:[{name:"config_class",val:""},{name:"processor_class",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/processing_auto.py#L238",parametersDescription:[{anchor:"transformers.AutoProcessor.register.config_class",description:`<strong>config_class</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The configuration corresponding to the model to register.`,name:"config_class"},{anchor:"transformers.AutoProcessor.register.processor_class",description:"<strong>processor_class</strong> (<code>FeatureExtractorMixin</code>) &#x2014; The processor to register.",name:"processor_class"}]}}),NE=new X({}),jE=new M({props:{name:"class transformers.AutoModel",anchor:"transformers.AutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L702"}}),qE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertModel">AlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartModel">BartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitModel">BeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertModel">BertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert-generation#transformers.BertGenerationEncoder">BertGenerationEncoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdModel">BigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel">BigBirdPegasusModel</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotModel">BlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel">BlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPModel">CLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLModel">CTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertModel">CamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineModel">CanineModel</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertModel">ConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextModel">ConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/dpr#transformers.DPRQuestionEncoder">DPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioModel">Data2VecAudioModel</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextModel">Data2VecTextModel</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaModel">DebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Model">DebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTModel">DeiTModel</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrModel">DetrModel</a> (DETR model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertModel">DistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraModel">ElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetModel">FNetModel</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTModel">FSMTModel</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertModel">FlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelModel">FunnelModel</a> or <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelBaseModel">FunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/glpn#transformers.GLPNConfig">GLPNConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/glpn#transformers.GLPNModel">GLPNModel</a> (GLPN model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Model">GPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJModel">GPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoModel">GPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertModel">HubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertModel">IBertModel</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/imagegpt#transformers.ImageGPTModel">ImageGPTModel</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDModel">LEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMModel">LayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model">LayoutLMv2Model</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerModel">LongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/luke#transformers.LukeConfig">LukeConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/luke#transformers.LukeModel">LukeModel</a> (LUKE model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertModel">LxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/m2m_100#transformers.M2M100Model">M2M100Model</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartModel">MBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetModel">MPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Model">MT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianModel">MarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/maskformer#transformers.MaskFormerModel">MaskFormerModel</a> (MaskFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertModel">MegatronBertModel</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertModel">MobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerModel">NystromformerModel</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTModel">OpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartModel">PLBartModel</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusModel">PegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverModel">PerceiverModel</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/poolformer#transformers.PoolFormerModel">PoolFormerModel</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetModel">ProphetNetModel</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertModel">QDQBertModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerModel">ReformerModel</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertModel">RemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/resnet#transformers.ResNetModel">ResNetModel</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerModel">RoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaModel">RobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWModel">SEWModel</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDModel">SEWDModel</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerModel">SegformerModel</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextModel">Speech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/splinter#transformers.SplinterModel">SplinterModel</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertModel">SqueezeBertModel</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinModel">SwinModel</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Model">T5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasModel">TapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLModel">TransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechModel">UniSpeechModel</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel">UniSpeechSatModel</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/van#transformers.VanModel">VanModel</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTModel">ViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vit_mae#transformers.ViTMAEModel">ViTMAEModel</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vilt#transformers.ViltConfig">ViltConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vilt#transformers.ViltModel">ViltModel</a> (ViLT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel">VisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/visual_bert#transformers.VisualBertModel">VisualBertModel</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Model">Wav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMModel">WavLMModel</a> (WavLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMModel">XGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMModel">XLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel">XLMProphetNetModel</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaModel">XLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel">XLMRobertaXLModel</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetModel">XLNetModel</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoModel">YosoModel</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),GE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_config(config)`}}),OE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),XE=new w({props:{code:`from transformers import AutoConfig, AutoModel

# Download model and configuration from huggingface.co and cache.
model = AutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModel.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),VE=new X({}),zE=new M({props:{name:"class transformers.AutoModelForPreTraining",anchor:"transformers.AutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L709"}}),QE=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForPreTraining">AlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForPreTraining">BertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForPreTraining">BigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForPreTraining">ElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForPreTraining">FNetForPreTraining</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForPreTraining">FunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertForPreTraining">LxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining">MegatronBertForPreTraining</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForPreTraining">MobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/retribert#transformers.RetriBertConfig">RetriBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/retribert#transformers.RetriBertModel">RetriBertModel</a> (RetriBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechForPreTraining">UniSpeechForPreTraining</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining">UniSpeechSatForPreTraining</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vit_mae#transformers.ViTMAEConfig">ViTMAEConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining">ViTMAEForPreTraining</a> (ViTMAE model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/visual_bert#transformers.VisualBertConfig">VisualBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/visual_bert#transformers.VisualBertForPreTraining">VisualBertForPreTraining</a> (VisualBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining">Wav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),HE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_config(config)`}}),UE=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),JE=new w({props:{code:`from transformers import AutoConfig, AutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = AutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForPreTraining.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),YE=new X({}),KE=new M({props:{name:"class transformers.AutoModelForCausalLM",anchor:"transformers.AutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L724"}}),ey=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForCausalLM">BartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertLMHeadModel">BertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert-generation#transformers.BertGenerationConfig">BertGenerationConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert-generation#transformers.BertGenerationDecoder">BertGenerationDecoder</a> (Bert Generation model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForCausalLM">BigBirdForCausalLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM">BigBirdPegasusForCausalLM</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM">BlenderbotForCausalLM</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM">BlenderbotSmallForCausalLM</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLLMHeadModel">CTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForCausalLM">CamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM">Data2VecTextForCausalLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForCausalLM">ElectraForCausalLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2LMHeadModel">GPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJForCausalLM">GPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM">GPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForCausalLM">MBartForCausalLM</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianForCausalLM">MarianForCausalLM</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM">MegatronBertForCausalLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel">OpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartForCausalLM">PLBartForCausalLM</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusForCausalLM">PegasusForCausalLM</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM">ProphetNetForCausalLM</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel">QDQBertLMHeadModel</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerModelWithLMHead">ReformerModelWithLMHead</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForCausalLM">RemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForCausalLM">RoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForCausalLM">RobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config">Speech2Text2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM">Speech2Text2ForCausalLM</a> (Speech2Text2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/trocr#transformers.TrOCRConfig">TrOCRConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/trocr#transformers.TrOCRForCausalLM">TrOCRForCausalLM</a> (TrOCR model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel">TransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMForCausalLM">XGLMForCausalLM</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM">XLMProphetNetForCausalLM</a> (XLMProphetNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM">XLMRobertaForCausalLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM">XLMRobertaXLForCausalLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetLMHeadModel">XLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),oy=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_config(config)`}}),ry=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ty=new w({props:{code:`from transformers import AutoConfig, AutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCausalLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),ay=new X({}),ny=new M({props:{name:"class transformers.AutoModelForMaskedLM",anchor:"transformers.AutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L731"}}),ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForMaskedLM">AlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForMaskedLM">BertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForMaskedLM">BigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForMaskedLM">CamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForMaskedLM">ConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM">Data2VecTextForMaskedLM</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForMaskedLM">DebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM">DebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForMaskedLM">DistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForMaskedLM">ElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForMaskedLM">FNetForMaskedLM</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel">FlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForMaskedLM">FunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForMaskedLM">IBertForMaskedLM</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM">LayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForMaskedLM">LongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForMaskedLM">MPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM">MegatronBertForMaskedLM</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM">MobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM">NystromformerForMaskedLM</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForMaskedLM">PerceiverForMaskedLM</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM">QDQBertForMaskedLM</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerForMaskedLM">ReformerForMaskedLM</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForMaskedLM">RemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForMaskedLM">RoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForMaskedLM">RobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM">SqueezeBertForMaskedLM</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasForMaskedLM">TapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <code>Wav2Vec2ForMaskedLM</code>(Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMWithLMHeadModel">XLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM">XLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM">XLMRobertaXLForMaskedLM</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForMaskedLM">YosoForMaskedLM</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_config(config)`}}),dy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedLM.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),fy=new X({}),my=new M({props:{name:"class transformers.AutoModelForSeq2SeqLM",anchor:"transformers.AutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L738"}}),hy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForConditionalGeneration">BartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration">BigBirdPegasusForConditionalGeneration</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration">BlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration">BlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel">EncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTConfig">FSMTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration">FSMTForConditionalGeneration</a> (FairSeq Machine-Translation model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDForConditionalGeneration">LEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/m2m_100#transformers.M2M100Config">M2M100Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration">M2M100ForConditionalGeneration</a> (M2M100 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForConditionalGeneration">MBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5ForConditionalGeneration">MT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianMTModel">MarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartForConditionalGeneration">PLBartForConditionalGeneration</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration">PegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetConfig">ProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration">ProphetNetForConditionalGeneration</a> (ProphetNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5ForConditionalGeneration">T5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig">XLMProphetNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration">XLMProphetNetForConditionalGeneration</a> (XLMProphetNet model)</li>
</ul>`,name:"config"}]}}),py=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = AutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_config(config)`}}),_y=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),uy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = AutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/t5_tf_model_config.json")
model = AutoModelForSeq2SeqLM.from_pretrained(
    "./tf_model/t5_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/t5_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/t5_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),by=new X({}),vy=new M({props:{name:"class transformers.AutoModelForSequenceClassification",anchor:"transformers.AutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L747"}}),Fy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForSequenceClassification">AlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForSequenceClassification">BartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForSequenceClassification">BertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification">BigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification">BigBirdPegasusForSequenceClassification</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLForSequenceClassification">CTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForSequenceClassification">CamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineForSequenceClassification">CanineForSequenceClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForSequenceClassification">ConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification">Data2VecTextForSequenceClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForSequenceClassification">DebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification">DebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification">DistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForSequenceClassification">ElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForSequenceClassification">FNetForSequenceClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification">FlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForSequenceClassification">FunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification">GPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJForSequenceClassification">GPTJForSequenceClassification</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification">GPTNeoForSequenceClassification</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForSequenceClassification">IBertForSequenceClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDForSequenceClassification">LEDForSequenceClassification</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification">LayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification">LayoutLMv2ForSequenceClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForSequenceClassification">LongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForSequenceClassification">MBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForSequenceClassification">MPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification">MegatronBertForSequenceClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification">MobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification">NystromformerForSequenceClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification">OpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartConfig">PLBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartForSequenceClassification">PLBartForSequenceClassification</a> (PLBart model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification">PerceiverForSequenceClassification</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification">QDQBertForSequenceClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerForSequenceClassification">ReformerForSequenceClassification</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForSequenceClassification">RemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForSequenceClassification">RoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForSequenceClassification">RobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification">SqueezeBertForSequenceClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasForSequenceClassification">TapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification">TransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMForSequenceClassification">XLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification">XLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification">XLMRobertaXLForSequenceClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetForSequenceClassification">XLNetForSequenceClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForSequenceClassification">YosoForSequenceClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Cy=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_config(config)`}}),My=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ey=new w({props:{code:`from transformers import AutoConfig, AutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSequenceClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),yy=new X({}),wy=new M({props:{name:"class transformers.AutoModelForMultipleChoice",anchor:"transformers.AutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L781"}}),Ly=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForMultipleChoice">AlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForMultipleChoice">BertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice">BigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForMultipleChoice">CamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineForMultipleChoice">CanineForMultipleChoice</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForMultipleChoice">ConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice">Data2VecTextForMultipleChoice</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice">DistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForMultipleChoice">ElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForMultipleChoice">FNetForMultipleChoice</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice">FlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForMultipleChoice">FunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForMultipleChoice">IBertForMultipleChoice</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForMultipleChoice">LongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForMultipleChoice">MPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice">MegatronBertForMultipleChoice</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice">MobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice">NystromformerForMultipleChoice</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice">QDQBertForMultipleChoice</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForMultipleChoice">RemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForMultipleChoice">RoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForMultipleChoice">RobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice">SqueezeBertForMultipleChoice</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMForMultipleChoice">XLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice">XLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice">XLMRobertaXLForMultipleChoice</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetForMultipleChoice">XLNetForMultipleChoice</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForMultipleChoice">YosoForMultipleChoice</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),By=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_config(config)`}}),xy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMultipleChoice.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Ry=new X({}),Sy=new M({props:{name:"class transformers.AutoModelForNextSentencePrediction",anchor:"transformers.AutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L788"}}),$y=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForNextSentencePrediction">BertForNextSentencePrediction</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForNextSentencePrediction">FNetForNextSentencePrediction</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction">MegatronBertForNextSentencePrediction</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction">MobileBertForNextSentencePrediction</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction">QDQBertForNextSentencePrediction</a> (QDQBert model)</li>
</ul>`,name:"config"}]}}),Iy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_config(config)`}}),Ny=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForNextSentencePrediction.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Dy=new X({}),qy=new M({props:{name:"class transformers.AutoModelForTokenClassification",anchor:"transformers.AutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L774"}}),Oy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForTokenClassification">AlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForTokenClassification">BertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForTokenClassification">BigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForTokenClassification">CamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineForTokenClassification">CanineForTokenClassification</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForTokenClassification">ConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification">Data2VecTextForTokenClassification</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForTokenClassification">DebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification">DebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForTokenClassification">DistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForTokenClassification">ElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForTokenClassification">FNetForTokenClassification</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertForTokenClassification">FlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForTokenClassification">FunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2ForTokenClassification">GPT2ForTokenClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForTokenClassification">IBertForTokenClassification</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification">LayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification">LayoutLMv2ForTokenClassification</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForTokenClassification">LongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForTokenClassification">MPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification">MegatronBertForTokenClassification</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification">MobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification">NystromformerForTokenClassification</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification">QDQBertForTokenClassification</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForTokenClassification">RemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForTokenClassification">RoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForTokenClassification">RobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification">SqueezeBertForTokenClassification</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMForTokenClassification">XLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification">XLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification">XLMRobertaXLForTokenClassification</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetForTokenClassification">XLNetForTokenClassification</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForTokenClassification">YosoForTokenClassification</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Xy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_config(config)`}}),Vy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),zy=new w({props:{code:`from transformers import AutoConfig, AutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForTokenClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Wy=new X({}),Qy=new M({props:{name:"class transformers.AutoModelForQuestionAnswering",anchor:"transformers.AutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L756"}}),Uy=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForQuestionAnswering">AlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForQuestionAnswering">BartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForQuestionAnswering">BertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering">BigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig">BigBirdPegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering">BigBirdPegasusForQuestionAnswering</a> (BigBirdPegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForQuestionAnswering">CamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineConfig">CanineConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineForQuestionAnswering">CanineForQuestionAnswering</a> (Canine model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering">ConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextConfig">Data2VecTextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering">Data2VecTextForQuestionAnswering</a> (Data2VecText model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForQuestionAnswering">DebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering">DebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering">DistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForQuestionAnswering">ElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetConfig">FNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForQuestionAnswering">FNetForQuestionAnswering</a> (FNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple">FlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForQuestionAnswering">FunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJForQuestionAnswering">GPTJForQuestionAnswering</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertConfig">IBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForQuestionAnswering">IBertForQuestionAnswering</a> (I-BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDForQuestionAnswering">LEDForQuestionAnswering</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config">LayoutLMv2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering">LayoutLMv2ForQuestionAnswering</a> (LayoutLMv2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForQuestionAnswering">LongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering">LxmertForQuestionAnswering</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForQuestionAnswering">MBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering">MPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig">MegatronBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering">MegatronBertForQuestionAnswering</a> (MegatronBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering">MobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerConfig">NystromformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering">NystromformerForQuestionAnswering</a> (Nystromformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertConfig">QDQBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering">QDQBertForQuestionAnswering</a> (QDQBert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerConfig">ReformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerForQuestionAnswering">ReformerForQuestionAnswering</a> (Reformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForQuestionAnswering">RemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering">RoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForQuestionAnswering">RobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/splinter#transformers.SplinterConfig">SplinterConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/splinter#transformers.SplinterForQuestionAnswering">SplinterForQuestionAnswering</a> (Splinter model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertConfig">SqueezeBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering">SqueezeBertForQuestionAnswering</a> (SqueezeBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple">XLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering">XLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig">XLMRobertaXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering">XLMRobertaXLForQuestionAnswering</a> (XLM-RoBERTa-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple">XLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoConfig">YosoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForQuestionAnswering">YosoForQuestionAnswering</a> (YOSO model)</li>
</ul>`,name:"config"}]}}),Jy=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_config(config)`}}),Yy=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Ky=new w({props:{code:`from transformers import AutoConfig, AutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForQuestionAnswering.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Zy=new X({}),ew=new M({props:{name:"class transformers.AutoModelForTableQuestionAnswering",anchor:"transformers.AutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L763"}}),rw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasForQuestionAnswering">TapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),tw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = AutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_config(config)`}}),aw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),nw=new w({props:{code:`from transformers import AutoConfig, AutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = AutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/tapas_tf_model_config.json")
model = AutoModelForTableQuestionAnswering.from_pretrained(
    "./tf_model/tapas_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/tapas_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/tapas_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),sw=new X({}),lw=new M({props:{name:"class transformers.AutoModelForImageClassification",anchor:"transformers.AutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L797"}}),dw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitForImageClassification">BeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextForImageClassification">ConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTForImageClassification">DeiTForImageClassification</a> or <a href="/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher">DeiTForImageClassificationWithTeacher</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/imagegpt#transformers.ImageGPTConfig">ImageGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification">ImageGPTForImageClassification</a> (ImageGPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverConfig">PerceiverConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned">PerceiverForImageClassificationLearned</a> or <a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier">PerceiverForImageClassificationFourier</a> or <a href="/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing">PerceiverForImageClassificationConvProcessing</a> (Perceiver model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/poolformer#transformers.PoolFormerConfig">PoolFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/poolformer#transformers.PoolFormerForImageClassification">PoolFormerForImageClassification</a> (PoolFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/resnet#transformers.ResNetConfig">ResNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/resnet#transformers.ResNetForImageClassification">ResNetForImageClassification</a> (ResNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerForImageClassification">SegformerForImageClassification</a> (SegFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinForImageClassification">SwinForImageClassification</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/van#transformers.VanConfig">VanConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/van#transformers.VanForImageClassification">VanForImageClassification</a> (VAN model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTForImageClassification">ViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),cw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_config(config)`}}),fw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),mw=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),gw=new X({}),hw=new M({props:{name:"class transformers.AutoModelForVision2Seq",anchor:"transformers.AutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L836"}}),_w=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel">VisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),uw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_config(config)`}}),bw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),vw=new w({props:{code:`from transformers import AutoConfig, AutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForVision2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Tw=new X({}),Fw=new M({props:{name:"class transformers.AutoModelForAudioClassification",anchor:"transformers.AutoModelForAudioClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L843"}}),Mw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification">Data2VecAudioForSequenceClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertForSequenceClassification">HubertForSequenceClassification</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWForSequenceClassification">SEWForSequenceClassification</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDForSequenceClassification">SEWDForSequenceClassification</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification">UniSpeechForSequenceClassification</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification">UniSpeechSatForSequenceClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification">Wav2Vec2ForSequenceClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMForSequenceClassification">WavLMForSequenceClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Ew=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_config(config)`}}),yw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),ww=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Aw=new X({}),Lw=new M({props:{name:"class transformers.AutoModelForAudioFrameClassification",anchor:"transformers.AutoModelForAudioFrameClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L866"}}),xw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification">Data2VecAudioForAudioFrameClassification</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification">UniSpeechSatForAudioFrameClassification</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification">Wav2Vec2ForAudioFrameClassification</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification">WavLMForAudioFrameClassification</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),kw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioFrameClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_config(config)`}}),Rw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Sw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioFrameClassification

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioFrameClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioFrameClassification.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioFrameClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioFrameClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Pw=new X({}),$w=new M({props:{name:"class transformers.AutoModelForCTC",anchor:"transformers.AutoModelForCTC",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L850"}}),Nw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioForCTC">Data2VecAudioForCTC</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertForCTC">HubertForCTC</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWConfig">SEWConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWForCTC">SEWForCTC</a> (SEW model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDConfig">SEWDConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDForCTC">SEWDForCTC</a> (SEW-D model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechConfig">UniSpeechConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechForCTC">UniSpeechForCTC</a> (UniSpeech model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC">UniSpeechSatForCTC</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC">Wav2Vec2ForCTC</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMForCTC">WavLMForCTC</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),jw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForCTC.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_config(config)`}}),Dw=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),qw=new w({props:{code:`from transformers import AutoConfig, AutoModelForCTC

# Download model and configuration from huggingface.co and cache.
model = AutoModelForCTC.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForCTC.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForCTC.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForCTC

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForCTC.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Gw=new X({}),Ow=new M({props:{name:"class transformers.AutoModelForSpeechSeq2Seq",anchor:"transformers.AutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L857"}}),Vw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration">Speech2TextForConditionalGeneration</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig">SpeechEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel">SpeechEncoderDecoderModel</a> (Speech Encoder decoder model)</li>
</ul>`,name:"config"}]}}),zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_config(config)`}}),Ww=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Hw=new w({props:{code:`from transformers import AutoConfig, AutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSpeechSeq2Seq.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),Uw=new X({}),Jw=new M({props:{name:"class transformers.AutoModelForAudioXVector",anchor:"transformers.AutoModelForAudioXVector",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L875"}}),Kw=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioConfig">Data2VecAudioConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioForXVector">Data2VecAudioForXVector</a> (Data2VecAudio model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig">UniSpeechSatConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector">UniSpeechSatForXVector</a> (UniSpeechSat model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector">Wav2Vec2ForXVector</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMConfig">WavLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMForXVector">WavLMForXVector</a> (WavLM model)</li>
</ul>`,name:"config"}]}}),Zw=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForAudioXVector.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_config(config)`}}),eA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),oA=new w({props:{code:`from transformers import AutoConfig, AutoModelForAudioXVector

# Download model and configuration from huggingface.co and cache.
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForAudioXVector.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForAudioXVector.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForAudioXVector

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForAudioXVector.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),rA=new X({}),tA=new M({props:{name:"class transformers.AutoModelForMaskedImageModeling",anchor:"transformers.AutoModelForMaskedImageModeling",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L882"}}),nA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTConfig">DeiTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTForMaskedImageModeling">DeiTForMaskedImageModeling</a> (DeiT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinConfig">SwinConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinForMaskedImageModeling">SwinForMaskedImageModeling</a> (Swin model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTForMaskedImageModeling">ViTForMaskedImageModeling</a> (ViT model)</li>
</ul>`,name:"config"}]}}),sA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForMaskedImageModeling.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_config(config)`}}),lA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),iA=new w({props:{code:`from transformers import AutoConfig, AutoModelForMaskedImageModeling

# Download model and configuration from huggingface.co and cache.
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForMaskedImageModeling.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForMaskedImageModeling.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForMaskedImageModeling

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForMaskedImageModeling.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),dA=new X({}),cA=new M({props:{name:"class transformers.AutoModelForObjectDetection",anchor:"transformers.AutoModelForObjectDetection",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L829"}}),mA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrForObjectDetection">DetrForObjectDetection</a> (DETR model)</li>
</ul>`,name:"config"}]}}),gA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForObjectDetection.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_config(config)`}}),hA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),pA=new w({props:{code:`from transformers import AutoConfig, AutoModelForObjectDetection

# Download model and configuration from huggingface.co and cache.
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForObjectDetection.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForObjectDetection.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForObjectDetection

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForObjectDetection.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),_A=new X({}),uA=new M({props:{name:"class transformers.AutoModelForImageSegmentation",anchor:"transformers.AutoModelForImageSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L804"}}),vA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrConfig">DetrConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrForSegmentation">DetrForSegmentation</a> (DETR model)</li>
</ul>`,name:"config"}]}}),TA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForImageSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_config(config)`}}),FA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),CA=new w({props:{code:`from transformers import AutoConfig, AutoModelForImageSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForImageSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForImageSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForImageSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForImageSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),MA=new X({}),EA=new M({props:{name:"class transformers.AutoModelForSemanticSegmentation",anchor:"transformers.AutoModelForSemanticSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L811"}}),wA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitForSemanticSegmentation">BeitForSemanticSegmentation</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerConfig">SegformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation">SegformerForSemanticSegmentation</a> (SegFormer model)</li>
</ul>`,name:"config"}]}}),AA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForSemanticSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_config(config)`}}),LA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),xA=new w({props:{code:`from transformers import AutoConfig, AutoModelForSemanticSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForSemanticSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForSemanticSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForSemanticSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForSemanticSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),kA=new X({}),RA=new M({props:{name:"class transformers.AutoModelForInstanceSegmentation",anchor:"transformers.AutoModelForInstanceSegmentation",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_auto.py#L820"}}),PA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/maskformer#transformers.MaskFormerConfig">MaskFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation">MaskFormerForInstanceSegmentation</a> (MaskFormer model)</li>
</ul>`,name:"config"}]}}),$A=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = AutoModelForInstanceSegmentation.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_config(config)`}}),IA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>tensorflow index checkpoint file</em> (e.g, <code>./tf_model/model.ckpt.index</code>). In
this case, <code>from_tf</code> should be set to <code>True</code> and a configuration object should be provided as
<code>config</code> argument. This loading path is slower than converting the TensorFlow checkpoint in a
PyTorch model using the provided conversion scripts and loading the PyTorch model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.state_dict",description:`<strong>state_dict</strong> (<em>Dict[str, torch.Tensor]</em>, <em>optional</em>) &#x2014;
A state dictionary to use instead of a state dictionary loaded from saved weights file.</p>
<p>This option can be used if you want to create a model from a pretrained configuration but load your own
weights. In this case though, you should check if using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.from_pretrained">from_pretrained()</a> is not a simpler option.`,name:"state_dict"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_tf",description:`<strong>from_tf</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a TensorFlow checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_tf"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),NA=new w({props:{code:`from transformers import AutoConfig, AutoModelForInstanceSegmentation

# Download model and configuration from huggingface.co and cache.
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased")

# Update configuration during loading
model = AutoModelForInstanceSegmentation.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a TF checkpoint file instead of a PyTorch model (slower)
config = AutoConfig.from_pretrained("./tf_model/bert_tf_model_config.json")
model = AutoModelForInstanceSegmentation.from_pretrained(
    "./tf_model/bert_tf_checkpoint.ckpt.index", from_tf=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, AutoModelForInstanceSegmentation

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a TF checkpoint file instead of a PyTorch model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./tf_model/bert_tf_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = AutoModelForInstanceSegmentation.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./tf_model/bert_tf_checkpoint.ckpt.index&quot;</span>, from_tf=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),jA=new X({}),DA=new M({props:{name:"class transformers.TFAutoModel",anchor:"transformers.TFAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L374"}}),GA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertModel">TFAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.TFBartModel">TFBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertModel">TFBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.TFBlenderbotModel">TFBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel">TFBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/clip#transformers.TFCLIPModel">TFCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.TFCTRLModel">TFCTRLModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertModel">TFCamembertModel</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertModel">TFConvBertModel</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convnext#transformers.TFConvNextModel">TFConvNextModel</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/dpr#transformers.DPRConfig">DPRConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/dpr#transformers.TFDPRQuestionEncoder">TFDPRQuestionEncoder</a> (DPR model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaModel">TFDebertaModel</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2Model">TFDebertaV2Model</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertModel">TFDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraModel">TFElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertModel">TFFlaubertModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelModel">TFFunnelModel</a> or <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelBaseModel">TFFunnelBaseModel</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.TFGPT2Model">TFGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertConfig">HubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/hubert#transformers.TFHubertModel">TFHubertModel</a> (Hubert model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.TFLEDModel">TFLEDModel</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMModel">TFLayoutLMModel</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerModel">TFLongformerModel</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.TFLxmertModel">TFLxmertModel</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.TFMBartModel">TFMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetModel">TFMPNetModel</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.TFMT5Model">TFMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.TFMarianModel">TFMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertModel">TFMobileBertModel</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel">TFOpenAIGPTModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.TFPegasusModel">TFPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertModel">TFRemBertModel</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerModel">TFRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaModel">TFRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel">TFSpeech2TextModel</a> (Speech2Text model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.TFT5Model">TFT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasModel">TFTapasModel</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TFTransfoXLModel">TFTransfoXLModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.TFViTModel">TFViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model">TFWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMModel">TFXLMModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel">TFXLMRobertaModel</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetModel">TFXLNetModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),OA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_config(config)`}}),XA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),VA=new w({props:{code:`from transformers import AutoConfig, TFAutoModel

# Download model and configuration from huggingface.co and cache.
model = TFAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),zA=new X({}),WA=new M({props:{name:"class transformers.TFAutoModelForPreTraining",anchor:"transformers.TFAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L381"}}),HA=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForPreTraining">TFAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForPreTraining">TFBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForPreTraining">TFElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForPreTraining">TFFunnelForPreTraining</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertConfig">LxmertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.TFLxmertForPreTraining">TFLxmertForPreTraining</a> (LXMERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining">TFMobileBertForPreTraining</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),UA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_config(config)`}}),JA=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),YA=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),KA=new X({}),ZA=new M({props:{name:"class transformers.TFAutoModelForCausalLM",anchor:"transformers.TFAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L396"}}),o0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertLMHeadModel">TFBertLMHeadModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel">TFCTRLLMHeadModel</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForCausalLM">TFCamembertForCausalLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel">TFGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel">TFOpenAIGPTLMHeadModel</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForCausalLM">TFRemBertForCausalLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForCausalLM">TFRoFormerForCausalLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForCausalLM">TFRobertaForCausalLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel">TFTransfoXLLMHeadModel</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel">TFXLNetLMHeadModel</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),r0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_config(config)`}}),t0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),a0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),n0=new X({}),s0=new M({props:{name:"class transformers.TFAutoModelForImageClassification",anchor:"transformers.TFAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L403"}}),i0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextConfig">ConvNextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convnext#transformers.TFConvNextForImageClassification">TFConvNextForImageClassification</a> (ConvNext model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.TFViTForImageClassification">TFViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),d0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_config(config)`}}),c0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),m0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),g0=new X({}),h0=new M({props:{name:"class transformers.TFAutoModelForMaskedLM",anchor:"transformers.TFAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L417"}}),_0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForMaskedLM">TFAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForMaskedLM">TFBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForMaskedLM">TFCamembertForMaskedLM</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForMaskedLM">TFConvBertForMaskedLM</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaForMaskedLM">TFDebertaForMaskedLM</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM">TFDebertaV2ForMaskedLM</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM">TFDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForMaskedLM">TFElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel">TFFlaubertWithLMHeadModel</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForMaskedLM">TFFunnelForMaskedLM</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM">TFLayoutLMForMaskedLM</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForMaskedLM">TFLongformerForMaskedLM</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM">TFMPNetForMaskedLM</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM">TFMobileBertForMaskedLM</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForMaskedLM">TFRemBertForMaskedLM</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM">TFRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForMaskedLM">TFRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasForMaskedLM">TFTapasForMaskedLM</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel">TFXLMWithLMHeadModel</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM">TFXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),u0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_config(config)`}}),b0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),v0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),T0=new X({}),F0=new M({props:{name:"class transformers.TFAutoModelForSeq2SeqLM",anchor:"transformers.TFAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L424"}}),M0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.TFBartForConditionalGeneration">TFBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration">TFBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration">TFBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel">TFEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDConfig">LEDConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/led#transformers.TFLEDForConditionalGeneration">TFLEDForConditionalGeneration</a> (LED model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration">TFMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration">TFMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.TFMarianMTModel">TFMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration">TFPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.TFT5ForConditionalGeneration">TFT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),E0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = TFAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_config(config)`}}),y0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),w0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = TFAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = TFAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),A0=new X({}),L0=new M({props:{name:"class transformers.TFAutoModelForSequenceClassification",anchor:"transformers.TFAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L433"}}),x0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForSequenceClassification">TFAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForSequenceClassification">TFBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLConfig">CTRLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification">TFCTRLForSequenceClassification</a> (CTRL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification">TFCamembertForSequenceClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification">TFConvBertForSequenceClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification">TFDebertaForSequenceClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification">TFDebertaV2ForSequenceClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification">TFDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForSequenceClassification">TFElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification">TFFlaubertForSequenceClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification">TFFunnelForSequenceClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification">TFGPT2ForSequenceClassification</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification">TFLayoutLMForSequenceClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification">TFLongformerForSequenceClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification">TFMPNetForSequenceClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification">TFMobileBertForSequenceClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig">OpenAIGPTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification">TFOpenAIGPTForSequenceClassification</a> (OpenAI GPT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification">TFRemBertForSequenceClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification">TFRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification">TFRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasForSequenceClassification">TFTapasForSequenceClassification</a> (TAPAS model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLConfig">TransfoXLConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification">TFTransfoXLForSequenceClassification</a> (Transformer-XL model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMForSequenceClassification">TFXLMForSequenceClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification">TFXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification">TFXLNetForSequenceClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),k0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_config(config)`}}),R0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),S0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),P0=new X({}),$0=new M({props:{name:"class transformers.TFAutoModelForMultipleChoice",anchor:"transformers.TFAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L469"}}),N0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForMultipleChoice">TFAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForMultipleChoice">TFBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice">TFCamembertForMultipleChoice</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice">TFConvBertForMultipleChoice</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice">TFDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForMultipleChoice">TFElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice">TFFlaubertForMultipleChoice</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice">TFFunnelForMultipleChoice</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice">TFLongformerForMultipleChoice</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice">TFMPNetForMultipleChoice</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice">TFMobileBertForMultipleChoice</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice">TFRemBertForMultipleChoice</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice">TFRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice">TFRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMForMultipleChoice">TFXLMForMultipleChoice</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice">TFXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice">TFXLNetForMultipleChoice</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),j0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_config(config)`}}),D0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),G0=new X({}),O0=new M({props:{name:"class transformers.TFAutoModelForTableQuestionAnswering",anchor:"transformers.TFAutoModelForTableQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L449"}}),V0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig">TapasConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering">TFTapasForQuestionAnswering</a> (TAPAS model)</li>
</ul>`,name:"config"}]}}),z0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("google/tapas-base-finetuned-wtq")
model = TFAutoModelForTableQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_config(config)`}}),W0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),Q0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTableQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq")

# Update configuration during loading
model = TFAutoModelForTableQuestionAnswering.from_pretrained("google/tapas-base-finetuned-wtq", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/tapas_pt_model_config.json")
model = TFAutoModelForTableQuestionAnswering.from_pretrained(
    "./pt_model/tapas_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTableQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;google/tapas-base-finetuned-wtq&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/tapas_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTableQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/tapas_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),H0=new X({}),U0=new M({props:{name:"class transformers.TFAutoModelForTokenClassification",anchor:"transformers.TFAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L460"}}),Y0=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForTokenClassification">TFAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForTokenClassification">TFBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForTokenClassification">TFCamembertForTokenClassification</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForTokenClassification">TFConvBertForTokenClassification</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaForTokenClassification">TFDebertaForTokenClassification</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification">TFDebertaV2ForTokenClassification</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification">TFDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForTokenClassification">TFElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification">TFFlaubertForTokenClassification</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForTokenClassification">TFFunnelForTokenClassification</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig">LayoutLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification">TFLayoutLMForTokenClassification</a> (LayoutLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForTokenClassification">TFLongformerForTokenClassification</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification">TFMPNetForTokenClassification</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification">TFMobileBertForTokenClassification</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForTokenClassification">TFRemBertForTokenClassification</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification">TFRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForTokenClassification">TFRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMForTokenClassification">TFXLMForTokenClassification</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification">TFXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification">TFXLNetForTokenClassification</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),K0=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_config(config)`}}),Z0=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),eL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),oL=new X({}),rL=new M({props:{name:"class transformers.TFAutoModelForQuestionAnswering",anchor:"transformers.TFAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L442"}}),aL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering">TFAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForQuestionAnswering">TFBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig">CamembertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering">TFCamembertForQuestionAnswering</a> (CamemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig">ConvBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering">TFConvBertForQuestionAnswering</a> (ConvBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig">DebertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering">TFDebertaForQuestionAnswering</a> (DeBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config">DebertaV2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering">TFDebertaV2ForQuestionAnswering</a> (DeBERTa-v2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering">TFDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForQuestionAnswering">TFElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig">FlaubertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple">TFFlaubertForQuestionAnsweringSimple</a> (FlauBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig">FunnelConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering">TFFunnelForQuestionAnswering</a> (Funnel Transformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig">LongformerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering">TFLongformerForQuestionAnswering</a> (Longformer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig">MPNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering">TFMPNetForQuestionAnswering</a> (MPNet model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig">MobileBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering">TFMobileBertForQuestionAnswering</a> (MobileBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig">RemBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering">TFRemBertForQuestionAnswering</a> (RemBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering">TFRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering">TFRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig">XLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple">TFXLMForQuestionAnsweringSimple</a> (XLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering">TFXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig">XLNetConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple">TFXLNetForQuestionAnsweringSimple</a> (XLNet model)</li>
</ul>`,name:"config"}]}}),nL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_config(config)`}}),sL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),lL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),iL=new X({}),dL=new M({props:{name:"class transformers.TFAutoModelForVision2Seq",anchor:"transformers.TFAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L410"}}),fL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel">TFVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),mL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_config(config)`}}),gL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),hL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),pL=new X({}),_L=new M({props:{name:"class transformers.TFAutoModelForSpeechSeq2Seq",anchor:"transformers.TFAutoModelForSpeechSeq2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_tf_auto.py#L485"}}),bL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextConfig">Speech2TextConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration">TFSpeech2TextForConditionalGeneration</a> (Speech2Text model)</li>
</ul>`,name:"config"}]}}),vL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = TFAutoModelForSpeechSeq2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_config(config)`}}),TL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),FL=new w({props:{code:`from transformers import AutoConfig, TFAutoModelForSpeechSeq2Seq

# Download model and configuration from huggingface.co and cache.
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = TFAutoModelForSpeechSeq2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, TFAutoModelForSpeechSeq2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = TFAutoModelForSpeechSeq2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),CL=new X({}),ML=new M({props:{name:"class transformers.FlaxAutoModel",anchor:"transformers.FlaxAutoModel",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L237"}}),yL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertModel">FlaxAlbertModel</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartModel">FlaxBartModel</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.FlaxBeitModel">FlaxBeitModel</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertModel">FlaxBertModel</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdModel">FlaxBigBirdModel</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel">FlaxBlenderbotModel</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel">FlaxBlenderbotSmallModel</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPConfig">CLIPConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/clip#transformers.FlaxCLIPModel">FlaxCLIPModel</a> (CLIP model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertModel">FlaxDistilBertModel</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraModel">FlaxElectraModel</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.FlaxGPT2Model">FlaxGPT2Model</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.FlaxGPTJModel">FlaxGPTJModel</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel">FlaxGPTNeoModel</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartModel">FlaxMBartModel</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.FlaxMT5Model">FlaxMT5Model</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.FlaxMarianModel">FlaxMarianModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.FlaxPegasusModel">FlaxPegasusModel</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerModel">FlaxRoFormerModel</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaModel">FlaxRobertaModel</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.FlaxT5Model">FlaxT5Model</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.FlaxViTModel">FlaxViTModel</a> (ViT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig">VisionTextDualEncoderConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel">FlaxVisionTextDualEncoderModel</a> (VisionTextDualEncoder model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model">FlaxWav2Vec2Model</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xglm#transformers.FlaxXGLMModel">FlaxXGLMModel</a> (XGLM model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel">FlaxXLMRobertaModel</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),wL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModel.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_config(config)`}}),AL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),LL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModel

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModel.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModel.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModel.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModel

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModel.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),BL=new X({}),xL=new M({props:{name:"class transformers.FlaxAutoModelForCausalLM",anchor:"transformers.FlaxAutoModelForCausalLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L251"}}),RL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForCausalLM">FlaxBartForCausalLM</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config">GPT2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel">FlaxGPT2LMHeadModel</a> (OpenAI GPT-2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJConfig">GPTJConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM">FlaxGPTJForCausalLM</a> (GPT-J model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoConfig">GPTNeoConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM">FlaxGPTNeoForCausalLM</a> (GPT Neo model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMConfig">XGLMConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM">FlaxXGLMForCausalLM</a> (XGLM model)</li>
</ul>`,name:"config"}]}}),SL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForCausalLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_config(config)`}}),PL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),$L=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForCausalLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForCausalLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForCausalLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForCausalLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForCausalLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),IL=new X({}),NL=new M({props:{name:"class transformers.FlaxAutoModelForPreTraining",anchor:"transformers.FlaxAutoModelForPreTraining",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L244"}}),DL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForPreTraining">FlaxAlbertForPreTraining</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForPreTraining">FlaxBertForPreTraining</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining">FlaxBigBirdForPreTraining</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForPreTraining">FlaxElectraForPreTraining</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config">Wav2Vec2Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining">FlaxWav2Vec2ForPreTraining</a> (Wav2Vec2 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),qL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForPreTraining.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_config(config)`}}),GL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),OL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForPreTraining

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForPreTraining.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForPreTraining.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForPreTraining

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForPreTraining.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),XL=new X({}),VL=new M({props:{name:"class transformers.FlaxAutoModelForMaskedLM",anchor:"transformers.FlaxAutoModelForMaskedLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L258"}}),WL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM">FlaxAlbertForMaskedLM</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForMaskedLM">FlaxBertForMaskedLM</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM">FlaxBigBirdForMaskedLM</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM">FlaxDistilBertForMaskedLM</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForMaskedLM">FlaxElectraForMaskedLM</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM">FlaxRoFormerForMaskedLM</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM">FlaxRobertaForMaskedLM</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM">FlaxXLMRobertaForMaskedLM</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),QL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMaskedLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_config(config)`}}),HL=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),UL=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMaskedLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMaskedLM.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMaskedLM.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMaskedLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMaskedLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),JL=new X({}),YL=new M({props:{name:"class transformers.FlaxAutoModelForSeq2SeqLM",anchor:"transformers.FlaxAutoModelForSeq2SeqLM",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L265"}}),ZL=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration">FlaxBartForConditionalGeneration</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotConfig">BlenderbotConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration">FlaxBlenderbotForConditionalGeneration</a> (Blenderbot model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig">BlenderbotSmallConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration">FlaxBlenderbotSmallForConditionalGeneration</a> (BlenderbotSmall model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig">EncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel">FlaxEncoderDecoderModel</a> (Encoder decoder model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration">FlaxMBartForConditionalGeneration</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Config">MT5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration">FlaxMT5ForConditionalGeneration</a> (mT5 model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianConfig">MarianConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/marian#transformers.FlaxMarianMTModel">FlaxMarianMTModel</a> (Marian model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusConfig">PegasusConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration">FlaxPegasusForConditionalGeneration</a> (Pegasus model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config">T5Config</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration">FlaxT5ForConditionalGeneration</a> (T5 model)</li>
</ul>`,name:"config"}]}}),e7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("t5-base")
model = FlaxAutoModelForSeq2SeqLM.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_config(config)`}}),o7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),r7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSeq2SeqLM

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base")

# Update configuration during loading
model = FlaxAutoModelForSeq2SeqLM.from_pretrained("t5-base", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/t5_pt_model_config.json")
model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
    "./pt_model/t5_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSeq2SeqLM

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(<span class="hljs-string">&quot;t5-base&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/t5_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSeq2SeqLM.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/t5_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),t7=new X({}),a7=new M({props:{name:"class transformers.FlaxAutoModelForSequenceClassification",anchor:"transformers.FlaxAutoModelForSequenceClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L274"}}),s7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification">FlaxAlbertForSequenceClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForSequenceClassification">FlaxBartForSequenceClassification</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForSequenceClassification">FlaxBertForSequenceClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification">FlaxBigBirdForSequenceClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification">FlaxDistilBertForSequenceClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification">FlaxElectraForSequenceClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification">FlaxMBartForSequenceClassification</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification">FlaxRoFormerForSequenceClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification">FlaxRobertaForSequenceClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification">FlaxXLMRobertaForSequenceClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),l7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForSequenceClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_config(config)`}}),i7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),d7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForSequenceClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForSequenceClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForSequenceClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForSequenceClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForSequenceClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),c7=new X({}),f7=new M({props:{name:"class transformers.FlaxAutoModelForQuestionAnswering",anchor:"transformers.FlaxAutoModelForQuestionAnswering",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L283"}}),g7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering">FlaxAlbertForQuestionAnswering</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig">BartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering">FlaxBartForQuestionAnswering</a> (BART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering">FlaxBertForQuestionAnswering</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering">FlaxBigBirdForQuestionAnswering</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering">FlaxDistilBertForQuestionAnswering</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering">FlaxElectraForQuestionAnswering</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig">MBartConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering">FlaxMBartForQuestionAnswering</a> (mBART model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering">FlaxRoFormerForQuestionAnswering</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering">FlaxRobertaForQuestionAnswering</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering">FlaxXLMRobertaForQuestionAnswering</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),h7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForQuestionAnswering.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_config(config)`}}),p7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),_7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForQuestionAnswering

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForQuestionAnswering.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForQuestionAnswering.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForQuestionAnswering

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForQuestionAnswering.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),u7=new X({}),b7=new M({props:{name:"class transformers.FlaxAutoModelForTokenClassification",anchor:"transformers.FlaxAutoModelForTokenClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L290"}}),T7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification">FlaxAlbertForTokenClassification</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForTokenClassification">FlaxBertForTokenClassification</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification">FlaxBigBirdForTokenClassification</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification">FlaxDistilBertForTokenClassification</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForTokenClassification">FlaxElectraForTokenClassification</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification">FlaxRoFormerForTokenClassification</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification">FlaxRobertaForTokenClassification</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification">FlaxXLMRobertaForTokenClassification</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),F7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForTokenClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_config(config)`}}),C7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),M7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForTokenClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForTokenClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForTokenClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForTokenClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForTokenClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),E7=new X({}),y7=new M({props:{name:"class transformers.FlaxAutoModelForMultipleChoice",anchor:"transformers.FlaxAutoModelForMultipleChoice",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L299"}}),A7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig">AlbertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice">FlaxAlbertForMultipleChoice</a> (ALBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForMultipleChoice">FlaxBertForMultipleChoice</a> (BERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig">BigBirdConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice">FlaxBigBirdForMultipleChoice</a> (BigBird model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig">DistilBertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice">FlaxDistilBertForMultipleChoice</a> (DistilBERT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig">ElectraConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice">FlaxElectraForMultipleChoice</a> (ELECTRA model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig">RoFormerConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice">FlaxRoFormerForMultipleChoice</a> (RoFormer model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig">RobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice">FlaxRobertaForMultipleChoice</a> (RoBERTa model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig">XLMRobertaConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice">FlaxXLMRobertaForMultipleChoice</a> (XLM-RoBERTa model)</li>
</ul>`,name:"config"}]}}),L7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForMultipleChoice.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_config(config)`}}),B7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),x7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForMultipleChoice

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForMultipleChoice.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForMultipleChoice.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForMultipleChoice

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForMultipleChoice.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),k7=new X({}),R7=new M({props:{name:"class transformers.FlaxAutoModelForNextSentencePrediction",anchor:"transformers.FlaxAutoModelForNextSentencePrediction",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L306"}}),P7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig">BertConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction">FlaxBertForNextSentencePrediction</a> (BERT model)</li>
</ul>`,name:"config"}]}}),$7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForNextSentencePrediction.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_config(config)`}}),I7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),N7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForNextSentencePrediction

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForNextSentencePrediction.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForNextSentencePrediction

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForNextSentencePrediction.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),j7=new X({}),D7=new M({props:{name:"class transformers.FlaxAutoModelForImageClassification",anchor:"transformers.FlaxAutoModelForImageClassification",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L315"}}),G7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitConfig">BeitConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/beit#transformers.FlaxBeitForImageClassification">FlaxBeitForImageClassification</a> (BEiT model)</li>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTConfig">ViTConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vit#transformers.FlaxViTForImageClassification">FlaxViTForImageClassification</a> (ViT model)</li>
</ul>`,name:"config"}]}}),O7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForImageClassification.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_config(config)`}}),X7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),z7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForImageClassification

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForImageClassification.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForImageClassification.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForImageClassification

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForImageClassification.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),W7=new X({}),Q7=new M({props:{name:"class transformers.FlaxAutoModelForVision2Seq",anchor:"transformers.FlaxAutoModelForVision2Seq",parameters:[{name:"*args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/modeling_flax_auto.py#L324"}}),U7=new M({props:{name:"from_config",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config",parameters:[{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L390",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_config.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>) &#x2014;
The model class to instantiate is selected based on the configuration class:</p>
<ul>
<li><a href="/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig">VisionEncoderDecoderConfig</a> configuration class: <a href="/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel">FlaxVisionEncoderDecoderModel</a> (Vision Encoder decoder model)</li>
</ul>`,name:"config"}]}}),J7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download configuration from huggingface.co and cache.
config = AutoConfig.from_pretrained("bert-base-cased")
model = FlaxAutoModelForVision2Seq.from_config(config)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_config(config)`}}),Y7=new M({props:{name:"from_pretrained",anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained",parameters:[{name:"*model_args",val:""},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16345/src/transformers/models/auto/auto_factory.py#L418",parametersDescription:[{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.pretrained_model_name_or_path",description:`<strong>pretrained_model_name_or_path</strong> (<code>str</code> or <code>os.PathLike</code>) &#x2014;
Can be either:</p>
<ul>
<li>A string, the <em>model id</em> of a pretrained model hosted inside a model repo on huggingface.co.
Valid model ids can be located at the root-level, like <code>bert-base-uncased</code>, or namespaced under a
user or organization name, like <code>dbmdz/bert-base-german-cased</code>.</li>
<li>A path to a <em>directory</em> containing model weights saved using
<a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a>, e.g., <code>./my_model_directory/</code>.</li>
<li>A path or url to a <em>PyTorch state_dict save file</em> (e.g, <code>./pt_model/pytorch_model.bin</code>). In this
case, <code>from_pt</code> should be set to <code>True</code> and a configuration object should be provided as <code>config</code>
argument. This loading path is slower than converting the PyTorch model in a TensorFlow model
using the provided conversion scripts and loading the TensorFlow model afterwards.</li>
</ul>`,name:"pretrained_model_name_or_path"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.model_args",description:`<strong>model_args</strong> (additional positional arguments, <em>optional</em>) &#x2014;
Will be passed along to the underlying model <code>__init__()</code> method.`,name:"model_args"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.config",description:`<strong>config</strong> (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig">PretrainedConfig</a>, <em>optional</em>) &#x2014;
Configuration for the model to use instead of an automatically loaded configuration. Configuration can
be automatically loaded when:</p>
<ul>
<li>The model is a model provided by the library (loaded with the <em>model id</em> string of a pretrained
model).</li>
<li>The model was saved using <a href="/docs/transformers/pr_16345/en/main_classes/model#transformers.PreTrainedModel.save_pretrained">save_pretrained()</a> and is reloaded by supplying the
save directory.</li>
<li>The model is loaded by supplying a local directory as <code>pretrained_model_name_or_path</code> and a
configuration JSON file named <em>config.json</em> is found in the directory.</li>
</ul>`,name:"config"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.cache_dir",description:`<strong>cache_dir</strong> (<code>str</code> or <code>os.PathLike</code>, <em>optional</em>) &#x2014;
Path to a directory in which a downloaded pretrained model configuration should be cached if the
standard cache should not be used.`,name:"cache_dir"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.from_pt",description:`<strong>from_pt</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Load the model weights from a PyTorch checkpoint save file (see docstring of
<code>pretrained_model_name_or_path</code> argument).`,name:"from_pt"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.force_download",description:`<strong>force_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to force the (re-)download of the model weights and configuration files, overriding the
cached versions if they exist.`,name:"force_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.resume_download",description:`<strong>resume_download</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to delete incompletely received files. Will attempt to resume the download if such a
file exists.`,name:"resume_download"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.proxies",description:`<strong>proxies</strong> (<code>Dict[str, str]</code>, <em>optional</em>) &#x2014;
A dictionary of proxy servers to use by protocol or endpoint, e.g., <code>{&apos;http&apos;: &apos;foo.bar:3128&apos;, &apos;http://hostname&apos;: &apos;foo.bar:4012&apos;}</code>. The proxies are used on each request.`,name:"proxies"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.output_loading_info(bool,",description:`<strong>output_loading_info(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether ot not to also return a dictionary containing missing keys, unexpected keys and error messages.`,name:"output_loading_info(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.local_files_only(bool,",description:`<strong>local_files_only(<code>bool</code>,</strong> <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to only look at local files (e.g., not try downloading the model).`,name:"local_files_only(bool,"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.revision",description:`<strong>revision</strong> (<code>str</code>, <em>optional</em>, defaults to <code>&quot;main&quot;</code>) &#x2014;
The specific model version to use. It can be a branch name, a tag name, or a commit id, since we use a
git-based system for storing models and other artifacts on huggingface.co, so <code>revision</code> can be any
identifier allowed by git.`,name:"revision"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.trust_remote_code",description:`<strong>trust_remote_code</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether or not to allow for custom models defined on the Hub in their own modeling files. This option
should only be set to <code>True</code> for repositories you trust and in which you have read the code, as it will
execute code present on the Hub on your local machine.`,name:"trust_remote_code"},{anchor:"transformers.models.auto.auto_factory._BaseAutoModelClass.from_pretrained.kwargs",description:`<strong>kwargs</strong> (additional keyword arguments, <em>optional</em>) &#x2014;
Can be used to update the configuration object (after it being loaded) and initiate the model (e.g.,
<code>output_attentions=True</code>). Behaves differently depending on whether a <code>config</code> is provided or
automatically loaded:</p>
<ul>
<li>If a configuration is provided with <code>config</code>, <code>**kwargs</code> will be directly passed to the
underlying model&#x2019;s <code>__init__</code> method (we assume all relevant updates to the configuration have
already been done)</li>
<li>If a configuration is not provided, <code>kwargs</code> will be first passed to the configuration class
initialization function (<a href="/docs/transformers/pr_16345/en/main_classes/configuration#transformers.PretrainedConfig.from_pretrained">from_pretrained()</a>). Each key of <code>kwargs</code> that
corresponds to a configuration attribute will be used to override said attribute with the
supplied <code>kwargs</code> value. Remaining keys that do not correspond to any configuration attribute
will be passed to the underlying model&#x2019;s <code>__init__</code> function.</li>
</ul>`,name:"kwargs"}]}}),K7=new w({props:{code:`from transformers import AutoConfig, FlaxAutoModelForVision2Seq

# Download model and configuration from huggingface.co and cache.
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased")

# Update configuration during loading
model = FlaxAutoModelForVision2Seq.from_pretrained("bert-base-cased", output_attentions=True)
model.config.output_attentions

# Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)
config = AutoConfig.from_pretrained("./pt_model/bert_pt_model_config.json")
model = FlaxAutoModelForVision2Seq.from_pretrained(
    "./pt_model/bert_pytorch_model.bin", from_pt=True, config=config
)`,highlighted:`<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> AutoConfig, FlaxAutoModelForVision2Seq

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Download model and configuration from huggingface.co and cache.</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>)

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Update configuration during loading</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(<span class="hljs-string">&quot;bert-base-cased&quot;</span>, output_attentions=<span class="hljs-literal">True</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model.config.output_attentions
<span class="hljs-literal">True</span>

<span class="hljs-meta">&gt;&gt;&gt; </span><span class="hljs-comment"># Loading from a PyTorch checkpoint file instead of a TensorFlow model (slower)</span>
<span class="hljs-meta">&gt;&gt;&gt; </span>config = AutoConfig.from_pretrained(<span class="hljs-string">&quot;./pt_model/bert_pt_model_config.json&quot;</span>)
<span class="hljs-meta">&gt;&gt;&gt; </span>model = FlaxAutoModelForVision2Seq.from_pretrained(
<span class="hljs-meta">... </span>    <span class="hljs-string">&quot;./pt_model/bert_pytorch_model.bin&quot;</span>, from_pt=<span class="hljs-literal">True</span>, config=config
<span class="hljs-meta">... </span>)`}}),{c(){J=a("meta"),$e=l(),de=a("h1"),pe=a("a"),io=a("span"),f(fe.$$.fragment),Me=l(),Vo=a("span"),Ni=o("Auto Classes"),If=l(),fa=a("p"),ji=o(`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=a("code"),tE=o("from_pretrained()"),Nf=o(` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),Be=l(),co=a("p"),qi=o("Instantiating one of "),Gn=a("a"),aE=o("AutoConfig"),On=o(", "),Xn=a("a"),nE=o("AutoModel"),Gi=o(`, and
`),Vn=a("a"),sE=o("AutoTokenizer"),Oi=o(" will directly create a class of the relevant architecture. For instance"),jf=l(),f(qa.$$.fragment),fo=l(),_e=a("p"),J8=o("will create a model that is an instance of "),Xi=a("a"),Y8=o("BertModel"),K8=o("."),zo=l(),Ga=a("p"),Z8=o("There is one class of "),Df=a("code"),e9=o("AutoModel"),s$e=o(" for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),Wxe=l(),Vi=a("h2"),qf=a("a"),PQ=a("span"),f(lE.$$.fragment),l$e=l(),$Q=a("span"),i$e=o("Extending the Auto Classes"),Qxe=l(),zn=a("p"),d$e=o(`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),IQ=a("code"),c$e=o("NewModel"),f$e=o(", make sure you have a "),NQ=a("code"),m$e=o("NewModelConfig"),g$e=o(` then you can add those to the auto
classes like this:`),Hxe=l(),f(iE.$$.fragment),Uxe=l(),o9=a("p"),h$e=o("You will then be able to use the auto classes like you would usually do!"),Jxe=l(),f(Gf.$$.fragment),Yxe=l(),zi=a("h2"),Of=a("a"),jQ=a("span"),f(dE.$$.fragment),p$e=l(),DQ=a("span"),_$e=o("AutoConfig"),Kxe=l(),Wo=a("div"),f(cE.$$.fragment),u$e=l(),fE=a("p"),b$e=o(`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),r9=a("a"),v$e=o("from_pretrained()"),T$e=o(" class method."),F$e=l(),mE=a("p"),C$e=o("This class cannot be instantiated directly using "),qQ=a("code"),M$e=o("__init__()"),E$e=o(" (throws an error)."),y$e=l(),mo=a("div"),f(gE.$$.fragment),w$e=l(),GQ=a("p"),A$e=o("Instantiate one of the configuration classes of the library from a pretrained model configuration."),L$e=l(),Wi=a("p"),B$e=o("The configuration class to instantiate is selected based on the "),OQ=a("code"),x$e=o("model_type"),k$e=o(` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XQ=a("code"),R$e=o("pretrained_model_name_or_path"),S$e=o(":"),P$e=l(),v=a("ul"),Xf=a("li"),VQ=a("strong"),$$e=o("albert"),I$e=o(" \u2014 "),t9=a("a"),N$e=o("AlbertConfig"),j$e=o(" (ALBERT model)"),D$e=l(),Vf=a("li"),zQ=a("strong"),q$e=o("bart"),G$e=o(" \u2014 "),a9=a("a"),O$e=o("BartConfig"),X$e=o(" (BART model)"),V$e=l(),zf=a("li"),WQ=a("strong"),z$e=o("beit"),W$e=o(" \u2014 "),n9=a("a"),Q$e=o("BeitConfig"),H$e=o(" (BEiT model)"),U$e=l(),Wf=a("li"),QQ=a("strong"),J$e=o("bert"),Y$e=o(" \u2014 "),s9=a("a"),K$e=o("BertConfig"),Z$e=o(" (BERT model)"),eIe=l(),Qf=a("li"),HQ=a("strong"),oIe=o("bert-generation"),rIe=o(" \u2014 "),l9=a("a"),tIe=o("BertGenerationConfig"),aIe=o(" (Bert Generation model)"),nIe=l(),Hf=a("li"),UQ=a("strong"),sIe=o("big_bird"),lIe=o(" \u2014 "),i9=a("a"),iIe=o("BigBirdConfig"),dIe=o(" (BigBird model)"),cIe=l(),Uf=a("li"),JQ=a("strong"),fIe=o("bigbird_pegasus"),mIe=o(" \u2014 "),d9=a("a"),gIe=o("BigBirdPegasusConfig"),hIe=o(" (BigBirdPegasus model)"),pIe=l(),Jf=a("li"),YQ=a("strong"),_Ie=o("blenderbot"),uIe=o(" \u2014 "),c9=a("a"),bIe=o("BlenderbotConfig"),vIe=o(" (Blenderbot model)"),TIe=l(),Yf=a("li"),KQ=a("strong"),FIe=o("blenderbot-small"),CIe=o(" \u2014 "),f9=a("a"),MIe=o("BlenderbotSmallConfig"),EIe=o(" (BlenderbotSmall model)"),yIe=l(),Kf=a("li"),ZQ=a("strong"),wIe=o("camembert"),AIe=o(" \u2014 "),m9=a("a"),LIe=o("CamembertConfig"),BIe=o(" (CamemBERT model)"),xIe=l(),Zf=a("li"),eH=a("strong"),kIe=o("canine"),RIe=o(" \u2014 "),g9=a("a"),SIe=o("CanineConfig"),PIe=o(" (Canine model)"),$Ie=l(),em=a("li"),oH=a("strong"),IIe=o("clip"),NIe=o(" \u2014 "),h9=a("a"),jIe=o("CLIPConfig"),DIe=o(" (CLIP model)"),qIe=l(),om=a("li"),rH=a("strong"),GIe=o("convbert"),OIe=o(" \u2014 "),p9=a("a"),XIe=o("ConvBertConfig"),VIe=o(" (ConvBERT model)"),zIe=l(),rm=a("li"),tH=a("strong"),WIe=o("convnext"),QIe=o(" \u2014 "),_9=a("a"),HIe=o("ConvNextConfig"),UIe=o(" (ConvNext model)"),JIe=l(),tm=a("li"),aH=a("strong"),YIe=o("ctrl"),KIe=o(" \u2014 "),u9=a("a"),ZIe=o("CTRLConfig"),eNe=o(" (CTRL model)"),oNe=l(),am=a("li"),nH=a("strong"),rNe=o("data2vec-audio"),tNe=o(" \u2014 "),b9=a("a"),aNe=o("Data2VecAudioConfig"),nNe=o(" (Data2VecAudio model)"),sNe=l(),nm=a("li"),sH=a("strong"),lNe=o("data2vec-text"),iNe=o(" \u2014 "),v9=a("a"),dNe=o("Data2VecTextConfig"),cNe=o(" (Data2VecText model)"),fNe=l(),sm=a("li"),lH=a("strong"),mNe=o("deberta"),gNe=o(" \u2014 "),T9=a("a"),hNe=o("DebertaConfig"),pNe=o(" (DeBERTa model)"),_Ne=l(),lm=a("li"),iH=a("strong"),uNe=o("deberta-v2"),bNe=o(" \u2014 "),F9=a("a"),vNe=o("DebertaV2Config"),TNe=o(" (DeBERTa-v2 model)"),FNe=l(),im=a("li"),dH=a("strong"),CNe=o("deit"),MNe=o(" \u2014 "),C9=a("a"),ENe=o("DeiTConfig"),yNe=o(" (DeiT model)"),wNe=l(),dm=a("li"),cH=a("strong"),ANe=o("detr"),LNe=o(" \u2014 "),M9=a("a"),BNe=o("DetrConfig"),xNe=o(" (DETR model)"),kNe=l(),cm=a("li"),fH=a("strong"),RNe=o("distilbert"),SNe=o(" \u2014 "),E9=a("a"),PNe=o("DistilBertConfig"),$Ne=o(" (DistilBERT model)"),INe=l(),fm=a("li"),mH=a("strong"),NNe=o("dpr"),jNe=o(" \u2014 "),y9=a("a"),DNe=o("DPRConfig"),qNe=o(" (DPR model)"),GNe=l(),mm=a("li"),gH=a("strong"),ONe=o("electra"),XNe=o(" \u2014 "),w9=a("a"),VNe=o("ElectraConfig"),zNe=o(" (ELECTRA model)"),WNe=l(),gm=a("li"),hH=a("strong"),QNe=o("encoder-decoder"),HNe=o(" \u2014 "),A9=a("a"),UNe=o("EncoderDecoderConfig"),JNe=o(" (Encoder decoder model)"),YNe=l(),hm=a("li"),pH=a("strong"),KNe=o("flaubert"),ZNe=o(" \u2014 "),L9=a("a"),eje=o("FlaubertConfig"),oje=o(" (FlauBERT model)"),rje=l(),pm=a("li"),_H=a("strong"),tje=o("fnet"),aje=o(" \u2014 "),B9=a("a"),nje=o("FNetConfig"),sje=o(" (FNet model)"),lje=l(),_m=a("li"),uH=a("strong"),ije=o("fsmt"),dje=o(" \u2014 "),x9=a("a"),cje=o("FSMTConfig"),fje=o(" (FairSeq Machine-Translation model)"),mje=l(),um=a("li"),bH=a("strong"),gje=o("funnel"),hje=o(" \u2014 "),k9=a("a"),pje=o("FunnelConfig"),_je=o(" (Funnel Transformer model)"),uje=l(),bm=a("li"),vH=a("strong"),bje=o("glpn"),vje=o(" \u2014 "),R9=a("a"),Tje=o("GLPNConfig"),Fje=o(" (GLPN model)"),Cje=l(),vm=a("li"),TH=a("strong"),Mje=o("gpt2"),Eje=o(" \u2014 "),S9=a("a"),yje=o("GPT2Config"),wje=o(" (OpenAI GPT-2 model)"),Aje=l(),Tm=a("li"),FH=a("strong"),Lje=o("gpt_neo"),Bje=o(" \u2014 "),P9=a("a"),xje=o("GPTNeoConfig"),kje=o(" (GPT Neo model)"),Rje=l(),Fm=a("li"),CH=a("strong"),Sje=o("gptj"),Pje=o(" \u2014 "),$9=a("a"),$je=o("GPTJConfig"),Ije=o(" (GPT-J model)"),Nje=l(),Cm=a("li"),MH=a("strong"),jje=o("hubert"),Dje=o(" \u2014 "),I9=a("a"),qje=o("HubertConfig"),Gje=o(" (Hubert model)"),Oje=l(),Mm=a("li"),EH=a("strong"),Xje=o("ibert"),Vje=o(" \u2014 "),N9=a("a"),zje=o("IBertConfig"),Wje=o(" (I-BERT model)"),Qje=l(),Em=a("li"),yH=a("strong"),Hje=o("imagegpt"),Uje=o(" \u2014 "),j9=a("a"),Jje=o("ImageGPTConfig"),Yje=o(" (ImageGPT model)"),Kje=l(),ym=a("li"),wH=a("strong"),Zje=o("layoutlm"),eDe=o(" \u2014 "),D9=a("a"),oDe=o("LayoutLMConfig"),rDe=o(" (LayoutLM model)"),tDe=l(),wm=a("li"),AH=a("strong"),aDe=o("layoutlmv2"),nDe=o(" \u2014 "),q9=a("a"),sDe=o("LayoutLMv2Config"),lDe=o(" (LayoutLMv2 model)"),iDe=l(),Am=a("li"),LH=a("strong"),dDe=o("led"),cDe=o(" \u2014 "),G9=a("a"),fDe=o("LEDConfig"),mDe=o(" (LED model)"),gDe=l(),Lm=a("li"),BH=a("strong"),hDe=o("longformer"),pDe=o(" \u2014 "),O9=a("a"),_De=o("LongformerConfig"),uDe=o(" (Longformer model)"),bDe=l(),Bm=a("li"),xH=a("strong"),vDe=o("luke"),TDe=o(" \u2014 "),X9=a("a"),FDe=o("LukeConfig"),CDe=o(" (LUKE model)"),MDe=l(),xm=a("li"),kH=a("strong"),EDe=o("lxmert"),yDe=o(" \u2014 "),V9=a("a"),wDe=o("LxmertConfig"),ADe=o(" (LXMERT model)"),LDe=l(),km=a("li"),RH=a("strong"),BDe=o("m2m_100"),xDe=o(" \u2014 "),z9=a("a"),kDe=o("M2M100Config"),RDe=o(" (M2M100 model)"),SDe=l(),Rm=a("li"),SH=a("strong"),PDe=o("marian"),$De=o(" \u2014 "),W9=a("a"),IDe=o("MarianConfig"),NDe=o(" (Marian model)"),jDe=l(),Sm=a("li"),PH=a("strong"),DDe=o("maskformer"),qDe=o(" \u2014 "),Q9=a("a"),GDe=o("MaskFormerConfig"),ODe=o(" (MaskFormer model)"),XDe=l(),Pm=a("li"),$H=a("strong"),VDe=o("mbart"),zDe=o(" \u2014 "),H9=a("a"),WDe=o("MBartConfig"),QDe=o(" (mBART model)"),HDe=l(),$m=a("li"),IH=a("strong"),UDe=o("megatron-bert"),JDe=o(" \u2014 "),U9=a("a"),YDe=o("MegatronBertConfig"),KDe=o(" (MegatronBert model)"),ZDe=l(),Im=a("li"),NH=a("strong"),eqe=o("mobilebert"),oqe=o(" \u2014 "),J9=a("a"),rqe=o("MobileBertConfig"),tqe=o(" (MobileBERT model)"),aqe=l(),Nm=a("li"),jH=a("strong"),nqe=o("mpnet"),sqe=o(" \u2014 "),Y9=a("a"),lqe=o("MPNetConfig"),iqe=o(" (MPNet model)"),dqe=l(),jm=a("li"),DH=a("strong"),cqe=o("mt5"),fqe=o(" \u2014 "),K9=a("a"),mqe=o("MT5Config"),gqe=o(" (mT5 model)"),hqe=l(),Dm=a("li"),qH=a("strong"),pqe=o("nystromformer"),_qe=o(" \u2014 "),Z9=a("a"),uqe=o("NystromformerConfig"),bqe=o(" (Nystromformer model)"),vqe=l(),qm=a("li"),GH=a("strong"),Tqe=o("openai-gpt"),Fqe=o(" \u2014 "),eB=a("a"),Cqe=o("OpenAIGPTConfig"),Mqe=o(" (OpenAI GPT model)"),Eqe=l(),Gm=a("li"),OH=a("strong"),yqe=o("pegasus"),wqe=o(" \u2014 "),oB=a("a"),Aqe=o("PegasusConfig"),Lqe=o(" (Pegasus model)"),Bqe=l(),Om=a("li"),XH=a("strong"),xqe=o("perceiver"),kqe=o(" \u2014 "),rB=a("a"),Rqe=o("PerceiverConfig"),Sqe=o(" (Perceiver model)"),Pqe=l(),Xm=a("li"),VH=a("strong"),$qe=o("plbart"),Iqe=o(" \u2014 "),tB=a("a"),Nqe=o("PLBartConfig"),jqe=o(" (PLBart model)"),Dqe=l(),Vm=a("li"),zH=a("strong"),qqe=o("poolformer"),Gqe=o(" \u2014 "),aB=a("a"),Oqe=o("PoolFormerConfig"),Xqe=o(" (PoolFormer model)"),Vqe=l(),zm=a("li"),WH=a("strong"),zqe=o("prophetnet"),Wqe=o(" \u2014 "),nB=a("a"),Qqe=o("ProphetNetConfig"),Hqe=o(" (ProphetNet model)"),Uqe=l(),Wm=a("li"),QH=a("strong"),Jqe=o("qdqbert"),Yqe=o(" \u2014 "),sB=a("a"),Kqe=o("QDQBertConfig"),Zqe=o(" (QDQBert model)"),eGe=l(),Qm=a("li"),HH=a("strong"),oGe=o("rag"),rGe=o(" \u2014 "),lB=a("a"),tGe=o("RagConfig"),aGe=o(" (RAG model)"),nGe=l(),Hm=a("li"),UH=a("strong"),sGe=o("realm"),lGe=o(" \u2014 "),iB=a("a"),iGe=o("RealmConfig"),dGe=o(" (Realm model)"),cGe=l(),Um=a("li"),JH=a("strong"),fGe=o("reformer"),mGe=o(" \u2014 "),dB=a("a"),gGe=o("ReformerConfig"),hGe=o(" (Reformer model)"),pGe=l(),Jm=a("li"),YH=a("strong"),_Ge=o("rembert"),uGe=o(" \u2014 "),cB=a("a"),bGe=o("RemBertConfig"),vGe=o(" (RemBERT model)"),TGe=l(),Ym=a("li"),KH=a("strong"),FGe=o("resnet"),CGe=o(" \u2014 "),fB=a("a"),MGe=o("ResNetConfig"),EGe=o(" (ResNet model)"),yGe=l(),Km=a("li"),ZH=a("strong"),wGe=o("retribert"),AGe=o(" \u2014 "),mB=a("a"),LGe=o("RetriBertConfig"),BGe=o(" (RetriBERT model)"),xGe=l(),Zm=a("li"),eU=a("strong"),kGe=o("roberta"),RGe=o(" \u2014 "),gB=a("a"),SGe=o("RobertaConfig"),PGe=o(" (RoBERTa model)"),$Ge=l(),eg=a("li"),oU=a("strong"),IGe=o("roformer"),NGe=o(" \u2014 "),hB=a("a"),jGe=o("RoFormerConfig"),DGe=o(" (RoFormer model)"),qGe=l(),og=a("li"),rU=a("strong"),GGe=o("segformer"),OGe=o(" \u2014 "),pB=a("a"),XGe=o("SegformerConfig"),VGe=o(" (SegFormer model)"),zGe=l(),rg=a("li"),tU=a("strong"),WGe=o("sew"),QGe=o(" \u2014 "),_B=a("a"),HGe=o("SEWConfig"),UGe=o(" (SEW model)"),JGe=l(),tg=a("li"),aU=a("strong"),YGe=o("sew-d"),KGe=o(" \u2014 "),uB=a("a"),ZGe=o("SEWDConfig"),eOe=o(" (SEW-D model)"),oOe=l(),ag=a("li"),nU=a("strong"),rOe=o("speech-encoder-decoder"),tOe=o(" \u2014 "),bB=a("a"),aOe=o("SpeechEncoderDecoderConfig"),nOe=o(" (Speech Encoder decoder model)"),sOe=l(),ng=a("li"),sU=a("strong"),lOe=o("speech_to_text"),iOe=o(" \u2014 "),vB=a("a"),dOe=o("Speech2TextConfig"),cOe=o(" (Speech2Text model)"),fOe=l(),sg=a("li"),lU=a("strong"),mOe=o("speech_to_text_2"),gOe=o(" \u2014 "),TB=a("a"),hOe=o("Speech2Text2Config"),pOe=o(" (Speech2Text2 model)"),_Oe=l(),lg=a("li"),iU=a("strong"),uOe=o("splinter"),bOe=o(" \u2014 "),FB=a("a"),vOe=o("SplinterConfig"),TOe=o(" (Splinter model)"),FOe=l(),ig=a("li"),dU=a("strong"),COe=o("squeezebert"),MOe=o(" \u2014 "),CB=a("a"),EOe=o("SqueezeBertConfig"),yOe=o(" (SqueezeBERT model)"),wOe=l(),dg=a("li"),cU=a("strong"),AOe=o("swin"),LOe=o(" \u2014 "),MB=a("a"),BOe=o("SwinConfig"),xOe=o(" (Swin model)"),kOe=l(),cg=a("li"),fU=a("strong"),ROe=o("t5"),SOe=o(" \u2014 "),EB=a("a"),POe=o("T5Config"),$Oe=o(" (T5 model)"),IOe=l(),fg=a("li"),mU=a("strong"),NOe=o("tapas"),jOe=o(" \u2014 "),yB=a("a"),DOe=o("TapasConfig"),qOe=o(" (TAPAS model)"),GOe=l(),mg=a("li"),gU=a("strong"),OOe=o("transfo-xl"),XOe=o(" \u2014 "),wB=a("a"),VOe=o("TransfoXLConfig"),zOe=o(" (Transformer-XL model)"),WOe=l(),gg=a("li"),hU=a("strong"),QOe=o("trocr"),HOe=o(" \u2014 "),AB=a("a"),UOe=o("TrOCRConfig"),JOe=o(" (TrOCR model)"),YOe=l(),hg=a("li"),pU=a("strong"),KOe=o("unispeech"),ZOe=o(" \u2014 "),LB=a("a"),eXe=o("UniSpeechConfig"),oXe=o(" (UniSpeech model)"),rXe=l(),pg=a("li"),_U=a("strong"),tXe=o("unispeech-sat"),aXe=o(" \u2014 "),BB=a("a"),nXe=o("UniSpeechSatConfig"),sXe=o(" (UniSpeechSat model)"),lXe=l(),_g=a("li"),uU=a("strong"),iXe=o("van"),dXe=o(" \u2014 "),xB=a("a"),cXe=o("VanConfig"),fXe=o(" (VAN model)"),mXe=l(),ug=a("li"),bU=a("strong"),gXe=o("vilt"),hXe=o(" \u2014 "),kB=a("a"),pXe=o("ViltConfig"),_Xe=o(" (ViLT model)"),uXe=l(),bg=a("li"),vU=a("strong"),bXe=o("vision-encoder-decoder"),vXe=o(" \u2014 "),RB=a("a"),TXe=o("VisionEncoderDecoderConfig"),FXe=o(" (Vision Encoder decoder model)"),CXe=l(),vg=a("li"),TU=a("strong"),MXe=o("vision-text-dual-encoder"),EXe=o(" \u2014 "),SB=a("a"),yXe=o("VisionTextDualEncoderConfig"),wXe=o(" (VisionTextDualEncoder model)"),AXe=l(),Tg=a("li"),FU=a("strong"),LXe=o("visual_bert"),BXe=o(" \u2014 "),PB=a("a"),xXe=o("VisualBertConfig"),kXe=o(" (VisualBert model)"),RXe=l(),Fg=a("li"),CU=a("strong"),SXe=o("vit"),PXe=o(" \u2014 "),$B=a("a"),$Xe=o("ViTConfig"),IXe=o(" (ViT model)"),NXe=l(),Cg=a("li"),MU=a("strong"),jXe=o("vit_mae"),DXe=o(" \u2014 "),IB=a("a"),qXe=o("ViTMAEConfig"),GXe=o(" (ViTMAE model)"),OXe=l(),Mg=a("li"),EU=a("strong"),XXe=o("wav2vec2"),VXe=o(" \u2014 "),NB=a("a"),zXe=o("Wav2Vec2Config"),WXe=o(" (Wav2Vec2 model)"),QXe=l(),Eg=a("li"),yU=a("strong"),HXe=o("wavlm"),UXe=o(" \u2014 "),jB=a("a"),JXe=o("WavLMConfig"),YXe=o(" (WavLM model)"),KXe=l(),yg=a("li"),wU=a("strong"),ZXe=o("xglm"),eVe=o(" \u2014 "),DB=a("a"),oVe=o("XGLMConfig"),rVe=o(" (XGLM model)"),tVe=l(),wg=a("li"),AU=a("strong"),aVe=o("xlm"),nVe=o(" \u2014 "),qB=a("a"),sVe=o("XLMConfig"),lVe=o(" (XLM model)"),iVe=l(),Ag=a("li"),LU=a("strong"),dVe=o("xlm-prophetnet"),cVe=o(" \u2014 "),GB=a("a"),fVe=o("XLMProphetNetConfig"),mVe=o(" (XLMProphetNet model)"),gVe=l(),Lg=a("li"),BU=a("strong"),hVe=o("xlm-roberta"),pVe=o(" \u2014 "),OB=a("a"),_Ve=o("XLMRobertaConfig"),uVe=o(" (XLM-RoBERTa model)"),bVe=l(),Bg=a("li"),xU=a("strong"),vVe=o("xlm-roberta-xl"),TVe=o(" \u2014 "),XB=a("a"),FVe=o("XLMRobertaXLConfig"),CVe=o(" (XLM-RoBERTa-XL model)"),MVe=l(),xg=a("li"),kU=a("strong"),EVe=o("xlnet"),yVe=o(" \u2014 "),VB=a("a"),wVe=o("XLNetConfig"),AVe=o(" (XLNet model)"),LVe=l(),kg=a("li"),RU=a("strong"),BVe=o("yoso"),xVe=o(" \u2014 "),zB=a("a"),kVe=o("YosoConfig"),RVe=o(" (YOSO model)"),SVe=l(),SU=a("p"),PVe=o("Examples:"),$Ve=l(),f(hE.$$.fragment),IVe=l(),Rg=a("div"),f(pE.$$.fragment),NVe=l(),PU=a("p"),jVe=o("Register a new configuration for this class."),Zxe=l(),Qi=a("h2"),Sg=a("a"),$U=a("span"),f(_E.$$.fragment),DVe=l(),IU=a("span"),qVe=o("AutoTokenizer"),eke=l(),Qo=a("div"),f(uE.$$.fragment),GVe=l(),bE=a("p"),OVe=o(`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WB=a("a"),XVe=o("AutoTokenizer.from_pretrained()"),VVe=o(" class method."),zVe=l(),vE=a("p"),WVe=o("This class cannot be instantiated directly using "),NU=a("code"),QVe=o("__init__()"),HVe=o(" (throws an error)."),UVe=l(),go=a("div"),f(TE.$$.fragment),JVe=l(),jU=a("p"),YVe=o("Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),KVe=l(),Oa=a("p"),ZVe=o("The tokenizer class to instantiate is selected based on the "),DU=a("code"),eze=o("model_type"),oze=o(` property of the config object (either
passed as an argument or loaded from `),qU=a("code"),rze=o("pretrained_model_name_or_path"),tze=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GU=a("code"),aze=o("pretrained_model_name_or_path"),nze=o(":"),sze=l(),E=a("ul"),Wn=a("li"),OU=a("strong"),lze=o("albert"),ize=o(" \u2014 "),QB=a("a"),dze=o("AlbertTokenizer"),cze=o(" or "),HB=a("a"),fze=o("AlbertTokenizerFast"),mze=o(" (ALBERT model)"),gze=l(),Qn=a("li"),XU=a("strong"),hze=o("bart"),pze=o(" \u2014 "),UB=a("a"),_ze=o("BartTokenizer"),uze=o(" or "),JB=a("a"),bze=o("BartTokenizerFast"),vze=o(" (BART model)"),Tze=l(),Hn=a("li"),VU=a("strong"),Fze=o("barthez"),Cze=o(" \u2014 "),YB=a("a"),Mze=o("BarthezTokenizer"),Eze=o(" or "),KB=a("a"),yze=o("BarthezTokenizerFast"),wze=o(" (BARThez model)"),Aze=l(),Pg=a("li"),zU=a("strong"),Lze=o("bartpho"),Bze=o(" \u2014 "),ZB=a("a"),xze=o("BartphoTokenizer"),kze=o(" (BARTpho model)"),Rze=l(),Un=a("li"),WU=a("strong"),Sze=o("bert"),Pze=o(" \u2014 "),ex=a("a"),$ze=o("BertTokenizer"),Ize=o(" or "),ox=a("a"),Nze=o("BertTokenizerFast"),jze=o(" (BERT model)"),Dze=l(),$g=a("li"),QU=a("strong"),qze=o("bert-generation"),Gze=o(" \u2014 "),rx=a("a"),Oze=o("BertGenerationTokenizer"),Xze=o(" (Bert Generation model)"),Vze=l(),Ig=a("li"),HU=a("strong"),zze=o("bert-japanese"),Wze=o(" \u2014 "),tx=a("a"),Qze=o("BertJapaneseTokenizer"),Hze=o(" (BertJapanese model)"),Uze=l(),Ng=a("li"),UU=a("strong"),Jze=o("bertweet"),Yze=o(" \u2014 "),ax=a("a"),Kze=o("BertweetTokenizer"),Zze=o(" (Bertweet model)"),eWe=l(),Jn=a("li"),JU=a("strong"),oWe=o("big_bird"),rWe=o(" \u2014 "),nx=a("a"),tWe=o("BigBirdTokenizer"),aWe=o(" or "),sx=a("a"),nWe=o("BigBirdTokenizerFast"),sWe=o(" (BigBird model)"),lWe=l(),Yn=a("li"),YU=a("strong"),iWe=o("bigbird_pegasus"),dWe=o(" \u2014 "),lx=a("a"),cWe=o("PegasusTokenizer"),fWe=o(" or "),ix=a("a"),mWe=o("PegasusTokenizerFast"),gWe=o(" (BigBirdPegasus model)"),hWe=l(),Kn=a("li"),KU=a("strong"),pWe=o("blenderbot"),_We=o(" \u2014 "),dx=a("a"),uWe=o("BlenderbotTokenizer"),bWe=o(" or "),cx=a("a"),vWe=o("BlenderbotTokenizerFast"),TWe=o(" (Blenderbot model)"),FWe=l(),jg=a("li"),ZU=a("strong"),CWe=o("blenderbot-small"),MWe=o(" \u2014 "),fx=a("a"),EWe=o("BlenderbotSmallTokenizer"),yWe=o(" (BlenderbotSmall model)"),wWe=l(),Dg=a("li"),eJ=a("strong"),AWe=o("byt5"),LWe=o(" \u2014 "),mx=a("a"),BWe=o("ByT5Tokenizer"),xWe=o(" (ByT5 model)"),kWe=l(),Zn=a("li"),oJ=a("strong"),RWe=o("camembert"),SWe=o(" \u2014 "),gx=a("a"),PWe=o("CamembertTokenizer"),$We=o(" or "),hx=a("a"),IWe=o("CamembertTokenizerFast"),NWe=o(" (CamemBERT model)"),jWe=l(),qg=a("li"),rJ=a("strong"),DWe=o("canine"),qWe=o(" \u2014 "),px=a("a"),GWe=o("CanineTokenizer"),OWe=o(" (Canine model)"),XWe=l(),es=a("li"),tJ=a("strong"),VWe=o("clip"),zWe=o(" \u2014 "),_x=a("a"),WWe=o("CLIPTokenizer"),QWe=o(" or "),ux=a("a"),HWe=o("CLIPTokenizerFast"),UWe=o(" (CLIP model)"),JWe=l(),os=a("li"),aJ=a("strong"),YWe=o("convbert"),KWe=o(" \u2014 "),bx=a("a"),ZWe=o("ConvBertTokenizer"),eQe=o(" or "),vx=a("a"),oQe=o("ConvBertTokenizerFast"),rQe=o(" (ConvBERT model)"),tQe=l(),rs=a("li"),nJ=a("strong"),aQe=o("cpm"),nQe=o(" \u2014 "),Tx=a("a"),sQe=o("CpmTokenizer"),lQe=o(" or "),sJ=a("code"),iQe=o("CpmTokenizerFast"),dQe=o(" (CPM model)"),cQe=l(),Gg=a("li"),lJ=a("strong"),fQe=o("ctrl"),mQe=o(" \u2014 "),Fx=a("a"),gQe=o("CTRLTokenizer"),hQe=o(" (CTRL model)"),pQe=l(),ts=a("li"),iJ=a("strong"),_Qe=o("deberta"),uQe=o(" \u2014 "),Cx=a("a"),bQe=o("DebertaTokenizer"),vQe=o(" or "),Mx=a("a"),TQe=o("DebertaTokenizerFast"),FQe=o(" (DeBERTa model)"),CQe=l(),Og=a("li"),dJ=a("strong"),MQe=o("deberta-v2"),EQe=o(" \u2014 "),Ex=a("a"),yQe=o("DebertaV2Tokenizer"),wQe=o(" (DeBERTa-v2 model)"),AQe=l(),as=a("li"),cJ=a("strong"),LQe=o("distilbert"),BQe=o(" \u2014 "),yx=a("a"),xQe=o("DistilBertTokenizer"),kQe=o(" or "),wx=a("a"),RQe=o("DistilBertTokenizerFast"),SQe=o(" (DistilBERT model)"),PQe=l(),ns=a("li"),fJ=a("strong"),$Qe=o("dpr"),IQe=o(" \u2014 "),Ax=a("a"),NQe=o("DPRQuestionEncoderTokenizer"),jQe=o(" or "),Lx=a("a"),DQe=o("DPRQuestionEncoderTokenizerFast"),qQe=o(" (DPR model)"),GQe=l(),ss=a("li"),mJ=a("strong"),OQe=o("electra"),XQe=o(" \u2014 "),Bx=a("a"),VQe=o("ElectraTokenizer"),zQe=o(" or "),xx=a("a"),WQe=o("ElectraTokenizerFast"),QQe=o(" (ELECTRA model)"),HQe=l(),Xg=a("li"),gJ=a("strong"),UQe=o("flaubert"),JQe=o(" \u2014 "),kx=a("a"),YQe=o("FlaubertTokenizer"),KQe=o(" (FlauBERT model)"),ZQe=l(),ls=a("li"),hJ=a("strong"),eHe=o("fnet"),oHe=o(" \u2014 "),Rx=a("a"),rHe=o("FNetTokenizer"),tHe=o(" or "),Sx=a("a"),aHe=o("FNetTokenizerFast"),nHe=o(" (FNet model)"),sHe=l(),Vg=a("li"),pJ=a("strong"),lHe=o("fsmt"),iHe=o(" \u2014 "),Px=a("a"),dHe=o("FSMTTokenizer"),cHe=o(" (FairSeq Machine-Translation model)"),fHe=l(),is=a("li"),_J=a("strong"),mHe=o("funnel"),gHe=o(" \u2014 "),$x=a("a"),hHe=o("FunnelTokenizer"),pHe=o(" or "),Ix=a("a"),_He=o("FunnelTokenizerFast"),uHe=o(" (Funnel Transformer model)"),bHe=l(),ds=a("li"),uJ=a("strong"),vHe=o("gpt2"),THe=o(" \u2014 "),Nx=a("a"),FHe=o("GPT2Tokenizer"),CHe=o(" or "),jx=a("a"),MHe=o("GPT2TokenizerFast"),EHe=o(" (OpenAI GPT-2 model)"),yHe=l(),cs=a("li"),bJ=a("strong"),wHe=o("gpt_neo"),AHe=o(" \u2014 "),Dx=a("a"),LHe=o("GPT2Tokenizer"),BHe=o(" or "),qx=a("a"),xHe=o("GPT2TokenizerFast"),kHe=o(" (GPT Neo model)"),RHe=l(),fs=a("li"),vJ=a("strong"),SHe=o("herbert"),PHe=o(" \u2014 "),Gx=a("a"),$He=o("HerbertTokenizer"),IHe=o(" or "),Ox=a("a"),NHe=o("HerbertTokenizerFast"),jHe=o(" (HerBERT model)"),DHe=l(),zg=a("li"),TJ=a("strong"),qHe=o("hubert"),GHe=o(" \u2014 "),Xx=a("a"),OHe=o("Wav2Vec2CTCTokenizer"),XHe=o(" (Hubert model)"),VHe=l(),ms=a("li"),FJ=a("strong"),zHe=o("ibert"),WHe=o(" \u2014 "),Vx=a("a"),QHe=o("RobertaTokenizer"),HHe=o(" or "),zx=a("a"),UHe=o("RobertaTokenizerFast"),JHe=o(" (I-BERT model)"),YHe=l(),gs=a("li"),CJ=a("strong"),KHe=o("layoutlm"),ZHe=o(" \u2014 "),Wx=a("a"),eUe=o("LayoutLMTokenizer"),oUe=o(" or "),Qx=a("a"),rUe=o("LayoutLMTokenizerFast"),tUe=o(" (LayoutLM model)"),aUe=l(),hs=a("li"),MJ=a("strong"),nUe=o("layoutlmv2"),sUe=o(" \u2014 "),Hx=a("a"),lUe=o("LayoutLMv2Tokenizer"),iUe=o(" or "),Ux=a("a"),dUe=o("LayoutLMv2TokenizerFast"),cUe=o(" (LayoutLMv2 model)"),fUe=l(),ps=a("li"),EJ=a("strong"),mUe=o("layoutxlm"),gUe=o(" \u2014 "),Jx=a("a"),hUe=o("LayoutXLMTokenizer"),pUe=o(" or "),Yx=a("a"),_Ue=o("LayoutXLMTokenizerFast"),uUe=o(" (LayoutXLM model)"),bUe=l(),_s=a("li"),yJ=a("strong"),vUe=o("led"),TUe=o(" \u2014 "),Kx=a("a"),FUe=o("LEDTokenizer"),CUe=o(" or "),Zx=a("a"),MUe=o("LEDTokenizerFast"),EUe=o(" (LED model)"),yUe=l(),us=a("li"),wJ=a("strong"),wUe=o("longformer"),AUe=o(" \u2014 "),ek=a("a"),LUe=o("LongformerTokenizer"),BUe=o(" or "),ok=a("a"),xUe=o("LongformerTokenizerFast"),kUe=o(" (Longformer model)"),RUe=l(),Wg=a("li"),AJ=a("strong"),SUe=o("luke"),PUe=o(" \u2014 "),rk=a("a"),$Ue=o("LukeTokenizer"),IUe=o(" (LUKE model)"),NUe=l(),bs=a("li"),LJ=a("strong"),jUe=o("lxmert"),DUe=o(" \u2014 "),tk=a("a"),qUe=o("LxmertTokenizer"),GUe=o(" or "),ak=a("a"),OUe=o("LxmertTokenizerFast"),XUe=o(" (LXMERT model)"),VUe=l(),Qg=a("li"),BJ=a("strong"),zUe=o("m2m_100"),WUe=o(" \u2014 "),nk=a("a"),QUe=o("M2M100Tokenizer"),HUe=o(" (M2M100 model)"),UUe=l(),Hg=a("li"),xJ=a("strong"),JUe=o("marian"),YUe=o(" \u2014 "),sk=a("a"),KUe=o("MarianTokenizer"),ZUe=o(" (Marian model)"),eJe=l(),vs=a("li"),kJ=a("strong"),oJe=o("mbart"),rJe=o(" \u2014 "),lk=a("a"),tJe=o("MBartTokenizer"),aJe=o(" or "),ik=a("a"),nJe=o("MBartTokenizerFast"),sJe=o(" (mBART model)"),lJe=l(),Ts=a("li"),RJ=a("strong"),iJe=o("mbart50"),dJe=o(" \u2014 "),dk=a("a"),cJe=o("MBart50Tokenizer"),fJe=o(" or "),ck=a("a"),mJe=o("MBart50TokenizerFast"),gJe=o(" (mBART-50 model)"),hJe=l(),Ug=a("li"),SJ=a("strong"),pJe=o("mluke"),_Je=o(" \u2014 "),fk=a("a"),uJe=o("MLukeTokenizer"),bJe=o(" (mLUKE model)"),vJe=l(),Fs=a("li"),PJ=a("strong"),TJe=o("mobilebert"),FJe=o(" \u2014 "),mk=a("a"),CJe=o("MobileBertTokenizer"),MJe=o(" or "),gk=a("a"),EJe=o("MobileBertTokenizerFast"),yJe=o(" (MobileBERT model)"),wJe=l(),Cs=a("li"),$J=a("strong"),AJe=o("mpnet"),LJe=o(" \u2014 "),hk=a("a"),BJe=o("MPNetTokenizer"),xJe=o(" or "),pk=a("a"),kJe=o("MPNetTokenizerFast"),RJe=o(" (MPNet model)"),SJe=l(),Ms=a("li"),IJ=a("strong"),PJe=o("mt5"),$Je=o(" \u2014 "),_k=a("a"),IJe=o("MT5Tokenizer"),NJe=o(" or "),uk=a("a"),jJe=o("MT5TokenizerFast"),DJe=o(" (mT5 model)"),qJe=l(),Es=a("li"),NJ=a("strong"),GJe=o("openai-gpt"),OJe=o(" \u2014 "),bk=a("a"),XJe=o("OpenAIGPTTokenizer"),VJe=o(" or "),vk=a("a"),zJe=o("OpenAIGPTTokenizerFast"),WJe=o(" (OpenAI GPT model)"),QJe=l(),ys=a("li"),jJ=a("strong"),HJe=o("pegasus"),UJe=o(" \u2014 "),Tk=a("a"),JJe=o("PegasusTokenizer"),YJe=o(" or "),Fk=a("a"),KJe=o("PegasusTokenizerFast"),ZJe=o(" (Pegasus model)"),eYe=l(),Jg=a("li"),DJ=a("strong"),oYe=o("perceiver"),rYe=o(" \u2014 "),Ck=a("a"),tYe=o("PerceiverTokenizer"),aYe=o(" (Perceiver model)"),nYe=l(),Yg=a("li"),qJ=a("strong"),sYe=o("phobert"),lYe=o(" \u2014 "),Mk=a("a"),iYe=o("PhobertTokenizer"),dYe=o(" (PhoBERT model)"),cYe=l(),Kg=a("li"),GJ=a("strong"),fYe=o("plbart"),mYe=o(" \u2014 "),Ek=a("a"),gYe=o("PLBartTokenizer"),hYe=o(" (PLBart model)"),pYe=l(),Zg=a("li"),OJ=a("strong"),_Ye=o("prophetnet"),uYe=o(" \u2014 "),yk=a("a"),bYe=o("ProphetNetTokenizer"),vYe=o(" (ProphetNet model)"),TYe=l(),ws=a("li"),XJ=a("strong"),FYe=o("qdqbert"),CYe=o(" \u2014 "),wk=a("a"),MYe=o("BertTokenizer"),EYe=o(" or "),Ak=a("a"),yYe=o("BertTokenizerFast"),wYe=o(" (QDQBert model)"),AYe=l(),eh=a("li"),VJ=a("strong"),LYe=o("rag"),BYe=o(" \u2014 "),Lk=a("a"),xYe=o("RagTokenizer"),kYe=o(" (RAG model)"),RYe=l(),As=a("li"),zJ=a("strong"),SYe=o("realm"),PYe=o(" \u2014 "),Bk=a("a"),$Ye=o("RealmTokenizer"),IYe=o(" or "),xk=a("a"),NYe=o("RealmTokenizerFast"),jYe=o(" (Realm model)"),DYe=l(),Ls=a("li"),WJ=a("strong"),qYe=o("reformer"),GYe=o(" \u2014 "),kk=a("a"),OYe=o("ReformerTokenizer"),XYe=o(" or "),Rk=a("a"),VYe=o("ReformerTokenizerFast"),zYe=o(" (Reformer model)"),WYe=l(),Bs=a("li"),QJ=a("strong"),QYe=o("rembert"),HYe=o(" \u2014 "),Sk=a("a"),UYe=o("RemBertTokenizer"),JYe=o(" or "),Pk=a("a"),YYe=o("RemBertTokenizerFast"),KYe=o(" (RemBERT model)"),ZYe=l(),xs=a("li"),HJ=a("strong"),eKe=o("retribert"),oKe=o(" \u2014 "),$k=a("a"),rKe=o("RetriBertTokenizer"),tKe=o(" or "),Ik=a("a"),aKe=o("RetriBertTokenizerFast"),nKe=o(" (RetriBERT model)"),sKe=l(),ks=a("li"),UJ=a("strong"),lKe=o("roberta"),iKe=o(" \u2014 "),Nk=a("a"),dKe=o("RobertaTokenizer"),cKe=o(" or "),jk=a("a"),fKe=o("RobertaTokenizerFast"),mKe=o(" (RoBERTa model)"),gKe=l(),Rs=a("li"),JJ=a("strong"),hKe=o("roformer"),pKe=o(" \u2014 "),Dk=a("a"),_Ke=o("RoFormerTokenizer"),uKe=o(" or "),qk=a("a"),bKe=o("RoFormerTokenizerFast"),vKe=o(" (RoFormer model)"),TKe=l(),oh=a("li"),YJ=a("strong"),FKe=o("speech_to_text"),CKe=o(" \u2014 "),Gk=a("a"),MKe=o("Speech2TextTokenizer"),EKe=o(" (Speech2Text model)"),yKe=l(),rh=a("li"),KJ=a("strong"),wKe=o("speech_to_text_2"),AKe=o(" \u2014 "),Ok=a("a"),LKe=o("Speech2Text2Tokenizer"),BKe=o(" (Speech2Text2 model)"),xKe=l(),Ss=a("li"),ZJ=a("strong"),kKe=o("splinter"),RKe=o(" \u2014 "),Xk=a("a"),SKe=o("SplinterTokenizer"),PKe=o(" or "),Vk=a("a"),$Ke=o("SplinterTokenizerFast"),IKe=o(" (Splinter model)"),NKe=l(),Ps=a("li"),eY=a("strong"),jKe=o("squeezebert"),DKe=o(" \u2014 "),zk=a("a"),qKe=o("SqueezeBertTokenizer"),GKe=o(" or "),Wk=a("a"),OKe=o("SqueezeBertTokenizerFast"),XKe=o(" (SqueezeBERT model)"),VKe=l(),$s=a("li"),oY=a("strong"),zKe=o("t5"),WKe=o(" \u2014 "),Qk=a("a"),QKe=o("T5Tokenizer"),HKe=o(" or "),Hk=a("a"),UKe=o("T5TokenizerFast"),JKe=o(" (T5 model)"),YKe=l(),th=a("li"),rY=a("strong"),KKe=o("tapas"),ZKe=o(" \u2014 "),Uk=a("a"),eZe=o("TapasTokenizer"),oZe=o(" (TAPAS model)"),rZe=l(),ah=a("li"),tY=a("strong"),tZe=o("transfo-xl"),aZe=o(" \u2014 "),Jk=a("a"),nZe=o("TransfoXLTokenizer"),sZe=o(" (Transformer-XL model)"),lZe=l(),nh=a("li"),aY=a("strong"),iZe=o("wav2vec2"),dZe=o(" \u2014 "),Yk=a("a"),cZe=o("Wav2Vec2CTCTokenizer"),fZe=o(" (Wav2Vec2 model)"),mZe=l(),sh=a("li"),nY=a("strong"),gZe=o("wav2vec2_phoneme"),hZe=o(" \u2014 "),Kk=a("a"),pZe=o("Wav2Vec2PhonemeCTCTokenizer"),_Ze=o(" (Wav2Vec2Phoneme model)"),uZe=l(),Is=a("li"),sY=a("strong"),bZe=o("xglm"),vZe=o(" \u2014 "),Zk=a("a"),TZe=o("XGLMTokenizer"),FZe=o(" or "),eR=a("a"),CZe=o("XGLMTokenizerFast"),MZe=o(" (XGLM model)"),EZe=l(),lh=a("li"),lY=a("strong"),yZe=o("xlm"),wZe=o(" \u2014 "),oR=a("a"),AZe=o("XLMTokenizer"),LZe=o(" (XLM model)"),BZe=l(),ih=a("li"),iY=a("strong"),xZe=o("xlm-prophetnet"),kZe=o(" \u2014 "),rR=a("a"),RZe=o("XLMProphetNetTokenizer"),SZe=o(" (XLMProphetNet model)"),PZe=l(),Ns=a("li"),dY=a("strong"),$Ze=o("xlm-roberta"),IZe=o(" \u2014 "),tR=a("a"),NZe=o("XLMRobertaTokenizer"),jZe=o(" or "),aR=a("a"),DZe=o("XLMRobertaTokenizerFast"),qZe=o(" (XLM-RoBERTa model)"),GZe=l(),js=a("li"),cY=a("strong"),OZe=o("xlnet"),XZe=o(" \u2014 "),nR=a("a"),VZe=o("XLNetTokenizer"),zZe=o(" or "),sR=a("a"),WZe=o("XLNetTokenizerFast"),QZe=o(" (XLNet model)"),HZe=l(),fY=a("p"),UZe=o("Examples:"),JZe=l(),f(FE.$$.fragment),YZe=l(),dh=a("div"),f(CE.$$.fragment),KZe=l(),mY=a("p"),ZZe=o("Register a new tokenizer in this mapping."),oke=l(),Hi=a("h2"),ch=a("a"),gY=a("span"),f(ME.$$.fragment),eeo=l(),hY=a("span"),oeo=o("AutoFeatureExtractor"),rke=l(),Ho=a("div"),f(EE.$$.fragment),reo=l(),yE=a("p"),teo=o(`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lR=a("a"),aeo=o("AutoFeatureExtractor.from_pretrained()"),neo=o(" class method."),seo=l(),wE=a("p"),leo=o("This class cannot be instantiated directly using "),pY=a("code"),ieo=o("__init__()"),deo=o(" (throws an error)."),ceo=l(),Ie=a("div"),f(AE.$$.fragment),feo=l(),_Y=a("p"),meo=o("Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),geo=l(),Xa=a("p"),heo=o("The feature extractor class to instantiate is selected based on the "),uY=a("code"),peo=o("model_type"),_eo=o(` property of the config object
(either passed as an argument or loaded from `),bY=a("code"),ueo=o("pretrained_model_name_or_path"),beo=o(` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),vY=a("code"),veo=o("pretrained_model_name_or_path"),Teo=o(":"),Feo=l(),re=a("ul"),fh=a("li"),TY=a("strong"),Ceo=o("beit"),Meo=o(" \u2014 "),iR=a("a"),Eeo=o("BeitFeatureExtractor"),yeo=o(" (BEiT model)"),weo=l(),mh=a("li"),FY=a("strong"),Aeo=o("clip"),Leo=o(" \u2014 "),dR=a("a"),Beo=o("CLIPFeatureExtractor"),xeo=o(" (CLIP model)"),keo=l(),gh=a("li"),CY=a("strong"),Reo=o("convnext"),Seo=o(" \u2014 "),cR=a("a"),Peo=o("ConvNextFeatureExtractor"),$eo=o(" (ConvNext model)"),Ieo=l(),hh=a("li"),MY=a("strong"),Neo=o("deit"),jeo=o(" \u2014 "),fR=a("a"),Deo=o("DeiTFeatureExtractor"),qeo=o(" (DeiT model)"),Geo=l(),ph=a("li"),EY=a("strong"),Oeo=o("detr"),Xeo=o(" \u2014 "),mR=a("a"),Veo=o("DetrFeatureExtractor"),zeo=o(" (DETR model)"),Weo=l(),_h=a("li"),yY=a("strong"),Qeo=o("hubert"),Heo=o(" \u2014 "),gR=a("a"),Ueo=o("Wav2Vec2FeatureExtractor"),Jeo=o(" (Hubert model)"),Yeo=l(),uh=a("li"),wY=a("strong"),Keo=o("layoutlmv2"),Zeo=o(" \u2014 "),hR=a("a"),eoo=o("LayoutLMv2FeatureExtractor"),ooo=o(" (LayoutLMv2 model)"),roo=l(),bh=a("li"),AY=a("strong"),too=o("maskformer"),aoo=o(" \u2014 "),pR=a("a"),noo=o("MaskFormerFeatureExtractor"),soo=o(" (MaskFormer model)"),loo=l(),vh=a("li"),LY=a("strong"),ioo=o("perceiver"),doo=o(" \u2014 "),_R=a("a"),coo=o("PerceiverFeatureExtractor"),foo=o(" (Perceiver model)"),moo=l(),Th=a("li"),BY=a("strong"),goo=o("poolformer"),hoo=o(" \u2014 "),uR=a("a"),poo=o("PoolFormerFeatureExtractor"),_oo=o(" (PoolFormer model)"),uoo=l(),Fh=a("li"),xY=a("strong"),boo=o("resnet"),voo=o(" \u2014 "),bR=a("a"),Too=o("ConvNextFeatureExtractor"),Foo=o(" (ResNet model)"),Coo=l(),Ch=a("li"),kY=a("strong"),Moo=o("segformer"),Eoo=o(" \u2014 "),vR=a("a"),yoo=o("SegformerFeatureExtractor"),woo=o(" (SegFormer model)"),Aoo=l(),Mh=a("li"),RY=a("strong"),Loo=o("speech_to_text"),Boo=o(" \u2014 "),TR=a("a"),xoo=o("Speech2TextFeatureExtractor"),koo=o(" (Speech2Text model)"),Roo=l(),Eh=a("li"),SY=a("strong"),Soo=o("swin"),Poo=o(" \u2014 "),FR=a("a"),$oo=o("ViTFeatureExtractor"),Ioo=o(" (Swin model)"),Noo=l(),yh=a("li"),PY=a("strong"),joo=o("van"),Doo=o(" \u2014 "),CR=a("a"),qoo=o("ConvNextFeatureExtractor"),Goo=o(" (VAN model)"),Ooo=l(),wh=a("li"),$Y=a("strong"),Xoo=o("vit"),Voo=o(" \u2014 "),MR=a("a"),zoo=o("ViTFeatureExtractor"),Woo=o(" (ViT model)"),Qoo=l(),Ah=a("li"),IY=a("strong"),Hoo=o("vit_mae"),Uoo=o(" \u2014 "),ER=a("a"),Joo=o("ViTFeatureExtractor"),Yoo=o(" (ViTMAE model)"),Koo=l(),Lh=a("li"),NY=a("strong"),Zoo=o("wav2vec2"),ero=o(" \u2014 "),yR=a("a"),oro=o("Wav2Vec2FeatureExtractor"),rro=o(" (Wav2Vec2 model)"),tro=l(),f(Bh.$$.fragment),aro=l(),jY=a("p"),nro=o("Examples:"),sro=l(),f(LE.$$.fragment),lro=l(),xh=a("div"),f(BE.$$.fragment),iro=l(),DY=a("p"),dro=o("Register a new feature extractor for this class."),tke=l(),Ui=a("h2"),kh=a("a"),qY=a("span"),f(xE.$$.fragment),cro=l(),GY=a("span"),fro=o("AutoProcessor"),ake=l(),Uo=a("div"),f(kE.$$.fragment),mro=l(),RE=a("p"),gro=o(`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wR=a("a"),hro=o("AutoProcessor.from_pretrained()"),pro=o(" class method."),_ro=l(),SE=a("p"),uro=o("This class cannot be instantiated directly using "),OY=a("code"),bro=o("__init__()"),vro=o(" (throws an error)."),Tro=l(),Ne=a("div"),f(PE.$$.fragment),Fro=l(),XY=a("p"),Cro=o("Instantiate one of the processor classes of the library from a pretrained model vocabulary."),Mro=l(),Ji=a("p"),Ero=o("The processor class to instantiate is selected based on the "),VY=a("code"),yro=o("model_type"),wro=o(` property of the config object (either
passed as an argument or loaded from `),zY=a("code"),Aro=o("pretrained_model_name_or_path"),Lro=o(" if possible):"),Bro=l(),xe=a("ul"),Rh=a("li"),WY=a("strong"),xro=o("clip"),kro=o(" \u2014 "),AR=a("a"),Rro=o("CLIPProcessor"),Sro=o(" (CLIP model)"),Pro=l(),Sh=a("li"),QY=a("strong"),$ro=o("layoutlmv2"),Iro=o(" \u2014 "),LR=a("a"),Nro=o("LayoutLMv2Processor"),jro=o(" (LayoutLMv2 model)"),Dro=l(),Ph=a("li"),HY=a("strong"),qro=o("layoutxlm"),Gro=o(" \u2014 "),BR=a("a"),Oro=o("LayoutXLMProcessor"),Xro=o(" (LayoutXLM model)"),Vro=l(),$h=a("li"),UY=a("strong"),zro=o("speech_to_text"),Wro=o(" \u2014 "),xR=a("a"),Qro=o("Speech2TextProcessor"),Hro=o(" (Speech2Text model)"),Uro=l(),Ih=a("li"),JY=a("strong"),Jro=o("speech_to_text_2"),Yro=o(" \u2014 "),kR=a("a"),Kro=o("Speech2Text2Processor"),Zro=o(" (Speech2Text2 model)"),eto=l(),Nh=a("li"),YY=a("strong"),oto=o("trocr"),rto=o(" \u2014 "),RR=a("a"),tto=o("TrOCRProcessor"),ato=o(" (TrOCR model)"),nto=l(),jh=a("li"),KY=a("strong"),sto=o("vision-text-dual-encoder"),lto=o(" \u2014 "),SR=a("a"),ito=o("VisionTextDualEncoderProcessor"),dto=o(" (VisionTextDualEncoder model)"),cto=l(),Dh=a("li"),ZY=a("strong"),fto=o("wav2vec2"),mto=o(" \u2014 "),PR=a("a"),gto=o("Wav2Vec2Processor"),hto=o(" (Wav2Vec2 model)"),pto=l(),f(qh.$$.fragment),_to=l(),eK=a("p"),uto=o("Examples:"),bto=l(),f($E.$$.fragment),vto=l(),Gh=a("div"),f(IE.$$.fragment),Tto=l(),oK=a("p"),Fto=o("Register a new processor for this class."),nke=l(),Yi=a("h2"),Oh=a("a"),rK=a("span"),f(NE.$$.fragment),Cto=l(),tK=a("span"),Mto=o("AutoModel"),ske=l(),Jo=a("div"),f(jE.$$.fragment),Eto=l(),Ki=a("p"),yto=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aK=a("code"),wto=o("from_pretrained()"),Ato=o("class method or the "),nK=a("code"),Lto=o("from_config()"),Bto=o(`class
method.`),xto=l(),DE=a("p"),kto=o("This class cannot be instantiated directly using "),sK=a("code"),Rto=o("__init__()"),Sto=o(" (throws an error)."),Pto=l(),Vr=a("div"),f(qE.$$.fragment),$to=l(),lK=a("p"),Ito=o("Instantiates one of the base model classes of the library from a configuration."),Nto=l(),Zi=a("p"),jto=o(`Note:
Loading a model from its configuration file does `),iK=a("strong"),Dto=o("not"),qto=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=a("code"),Gto=o("from_pretrained()"),Oto=o("to load the model weights."),Xto=l(),cK=a("p"),Vto=o("Examples:"),zto=l(),f(GE.$$.fragment),Wto=l(),je=a("div"),f(OE.$$.fragment),Qto=l(),fK=a("p"),Hto=o("Instantiate one of the base model classes of the library from a pretrained model."),Uto=l(),Va=a("p"),Jto=o("The model class to instantiate is selected based on the "),mK=a("code"),Yto=o("model_type"),Kto=o(` property of the config object (either
passed as an argument or loaded from `),gK=a("code"),Zto=o("pretrained_model_name_or_path"),eao=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hK=a("code"),oao=o("pretrained_model_name_or_path"),rao=o(":"),tao=l(),F=a("ul"),Xh=a("li"),pK=a("strong"),aao=o("albert"),nao=o(" \u2014 "),$R=a("a"),sao=o("AlbertModel"),lao=o(" (ALBERT model)"),iao=l(),Vh=a("li"),_K=a("strong"),dao=o("bart"),cao=o(" \u2014 "),IR=a("a"),fao=o("BartModel"),mao=o(" (BART model)"),gao=l(),zh=a("li"),uK=a("strong"),hao=o("beit"),pao=o(" \u2014 "),NR=a("a"),_ao=o("BeitModel"),uao=o(" (BEiT model)"),bao=l(),Wh=a("li"),bK=a("strong"),vao=o("bert"),Tao=o(" \u2014 "),jR=a("a"),Fao=o("BertModel"),Cao=o(" (BERT model)"),Mao=l(),Qh=a("li"),vK=a("strong"),Eao=o("bert-generation"),yao=o(" \u2014 "),DR=a("a"),wao=o("BertGenerationEncoder"),Aao=o(" (Bert Generation model)"),Lao=l(),Hh=a("li"),TK=a("strong"),Bao=o("big_bird"),xao=o(" \u2014 "),qR=a("a"),kao=o("BigBirdModel"),Rao=o(" (BigBird model)"),Sao=l(),Uh=a("li"),FK=a("strong"),Pao=o("bigbird_pegasus"),$ao=o(" \u2014 "),GR=a("a"),Iao=o("BigBirdPegasusModel"),Nao=o(" (BigBirdPegasus model)"),jao=l(),Jh=a("li"),CK=a("strong"),Dao=o("blenderbot"),qao=o(" \u2014 "),OR=a("a"),Gao=o("BlenderbotModel"),Oao=o(" (Blenderbot model)"),Xao=l(),Yh=a("li"),MK=a("strong"),Vao=o("blenderbot-small"),zao=o(" \u2014 "),XR=a("a"),Wao=o("BlenderbotSmallModel"),Qao=o(" (BlenderbotSmall model)"),Hao=l(),Kh=a("li"),EK=a("strong"),Uao=o("camembert"),Jao=o(" \u2014 "),VR=a("a"),Yao=o("CamembertModel"),Kao=o(" (CamemBERT model)"),Zao=l(),Zh=a("li"),yK=a("strong"),eno=o("canine"),ono=o(" \u2014 "),zR=a("a"),rno=o("CanineModel"),tno=o(" (Canine model)"),ano=l(),ep=a("li"),wK=a("strong"),nno=o("clip"),sno=o(" \u2014 "),WR=a("a"),lno=o("CLIPModel"),ino=o(" (CLIP model)"),dno=l(),op=a("li"),AK=a("strong"),cno=o("convbert"),fno=o(" \u2014 "),QR=a("a"),mno=o("ConvBertModel"),gno=o(" (ConvBERT model)"),hno=l(),rp=a("li"),LK=a("strong"),pno=o("convnext"),_no=o(" \u2014 "),HR=a("a"),uno=o("ConvNextModel"),bno=o(" (ConvNext model)"),vno=l(),tp=a("li"),BK=a("strong"),Tno=o("ctrl"),Fno=o(" \u2014 "),UR=a("a"),Cno=o("CTRLModel"),Mno=o(" (CTRL model)"),Eno=l(),ap=a("li"),xK=a("strong"),yno=o("data2vec-audio"),wno=o(" \u2014 "),JR=a("a"),Ano=o("Data2VecAudioModel"),Lno=o(" (Data2VecAudio model)"),Bno=l(),np=a("li"),kK=a("strong"),xno=o("data2vec-text"),kno=o(" \u2014 "),YR=a("a"),Rno=o("Data2VecTextModel"),Sno=o(" (Data2VecText model)"),Pno=l(),sp=a("li"),RK=a("strong"),$no=o("deberta"),Ino=o(" \u2014 "),KR=a("a"),Nno=o("DebertaModel"),jno=o(" (DeBERTa model)"),Dno=l(),lp=a("li"),SK=a("strong"),qno=o("deberta-v2"),Gno=o(" \u2014 "),ZR=a("a"),Ono=o("DebertaV2Model"),Xno=o(" (DeBERTa-v2 model)"),Vno=l(),ip=a("li"),PK=a("strong"),zno=o("deit"),Wno=o(" \u2014 "),eS=a("a"),Qno=o("DeiTModel"),Hno=o(" (DeiT model)"),Uno=l(),dp=a("li"),$K=a("strong"),Jno=o("detr"),Yno=o(" \u2014 "),oS=a("a"),Kno=o("DetrModel"),Zno=o(" (DETR model)"),eso=l(),cp=a("li"),IK=a("strong"),oso=o("distilbert"),rso=o(" \u2014 "),rS=a("a"),tso=o("DistilBertModel"),aso=o(" (DistilBERT model)"),nso=l(),fp=a("li"),NK=a("strong"),sso=o("dpr"),lso=o(" \u2014 "),tS=a("a"),iso=o("DPRQuestionEncoder"),dso=o(" (DPR model)"),cso=l(),mp=a("li"),jK=a("strong"),fso=o("electra"),mso=o(" \u2014 "),aS=a("a"),gso=o("ElectraModel"),hso=o(" (ELECTRA model)"),pso=l(),gp=a("li"),DK=a("strong"),_so=o("flaubert"),uso=o(" \u2014 "),nS=a("a"),bso=o("FlaubertModel"),vso=o(" (FlauBERT model)"),Tso=l(),hp=a("li"),qK=a("strong"),Fso=o("fnet"),Cso=o(" \u2014 "),sS=a("a"),Mso=o("FNetModel"),Eso=o(" (FNet model)"),yso=l(),pp=a("li"),GK=a("strong"),wso=o("fsmt"),Aso=o(" \u2014 "),lS=a("a"),Lso=o("FSMTModel"),Bso=o(" (FairSeq Machine-Translation model)"),xso=l(),Ds=a("li"),OK=a("strong"),kso=o("funnel"),Rso=o(" \u2014 "),iS=a("a"),Sso=o("FunnelModel"),Pso=o(" or "),dS=a("a"),$so=o("FunnelBaseModel"),Iso=o(" (Funnel Transformer model)"),Nso=l(),_p=a("li"),XK=a("strong"),jso=o("glpn"),Dso=o(" \u2014 "),cS=a("a"),qso=o("GLPNModel"),Gso=o(" (GLPN model)"),Oso=l(),up=a("li"),VK=a("strong"),Xso=o("gpt2"),Vso=o(" \u2014 "),fS=a("a"),zso=o("GPT2Model"),Wso=o(" (OpenAI GPT-2 model)"),Qso=l(),bp=a("li"),zK=a("strong"),Hso=o("gpt_neo"),Uso=o(" \u2014 "),mS=a("a"),Jso=o("GPTNeoModel"),Yso=o(" (GPT Neo model)"),Kso=l(),vp=a("li"),WK=a("strong"),Zso=o("gptj"),elo=o(" \u2014 "),gS=a("a"),olo=o("GPTJModel"),rlo=o(" (GPT-J model)"),tlo=l(),Tp=a("li"),QK=a("strong"),alo=o("hubert"),nlo=o(" \u2014 "),hS=a("a"),slo=o("HubertModel"),llo=o(" (Hubert model)"),ilo=l(),Fp=a("li"),HK=a("strong"),dlo=o("ibert"),clo=o(" \u2014 "),pS=a("a"),flo=o("IBertModel"),mlo=o(" (I-BERT model)"),glo=l(),Cp=a("li"),UK=a("strong"),hlo=o("imagegpt"),plo=o(" \u2014 "),_S=a("a"),_lo=o("ImageGPTModel"),ulo=o(" (ImageGPT model)"),blo=l(),Mp=a("li"),JK=a("strong"),vlo=o("layoutlm"),Tlo=o(" \u2014 "),uS=a("a"),Flo=o("LayoutLMModel"),Clo=o(" (LayoutLM model)"),Mlo=l(),Ep=a("li"),YK=a("strong"),Elo=o("layoutlmv2"),ylo=o(" \u2014 "),bS=a("a"),wlo=o("LayoutLMv2Model"),Alo=o(" (LayoutLMv2 model)"),Llo=l(),yp=a("li"),KK=a("strong"),Blo=o("led"),xlo=o(" \u2014 "),vS=a("a"),klo=o("LEDModel"),Rlo=o(" (LED model)"),Slo=l(),wp=a("li"),ZK=a("strong"),Plo=o("longformer"),$lo=o(" \u2014 "),TS=a("a"),Ilo=o("LongformerModel"),Nlo=o(" (Longformer model)"),jlo=l(),Ap=a("li"),eZ=a("strong"),Dlo=o("luke"),qlo=o(" \u2014 "),FS=a("a"),Glo=o("LukeModel"),Olo=o(" (LUKE model)"),Xlo=l(),Lp=a("li"),oZ=a("strong"),Vlo=o("lxmert"),zlo=o(" \u2014 "),CS=a("a"),Wlo=o("LxmertModel"),Qlo=o(" (LXMERT model)"),Hlo=l(),Bp=a("li"),rZ=a("strong"),Ulo=o("m2m_100"),Jlo=o(" \u2014 "),MS=a("a"),Ylo=o("M2M100Model"),Klo=o(" (M2M100 model)"),Zlo=l(),xp=a("li"),tZ=a("strong"),eio=o("marian"),oio=o(" \u2014 "),ES=a("a"),rio=o("MarianModel"),tio=o(" (Marian model)"),aio=l(),kp=a("li"),aZ=a("strong"),nio=o("maskformer"),sio=o(" \u2014 "),yS=a("a"),lio=o("MaskFormerModel"),iio=o(" (MaskFormer model)"),dio=l(),Rp=a("li"),nZ=a("strong"),cio=o("mbart"),fio=o(" \u2014 "),wS=a("a"),mio=o("MBartModel"),gio=o(" (mBART model)"),hio=l(),Sp=a("li"),sZ=a("strong"),pio=o("megatron-bert"),_io=o(" \u2014 "),AS=a("a"),uio=o("MegatronBertModel"),bio=o(" (MegatronBert model)"),vio=l(),Pp=a("li"),lZ=a("strong"),Tio=o("mobilebert"),Fio=o(" \u2014 "),LS=a("a"),Cio=o("MobileBertModel"),Mio=o(" (MobileBERT model)"),Eio=l(),$p=a("li"),iZ=a("strong"),yio=o("mpnet"),wio=o(" \u2014 "),BS=a("a"),Aio=o("MPNetModel"),Lio=o(" (MPNet model)"),Bio=l(),Ip=a("li"),dZ=a("strong"),xio=o("mt5"),kio=o(" \u2014 "),xS=a("a"),Rio=o("MT5Model"),Sio=o(" (mT5 model)"),Pio=l(),Np=a("li"),cZ=a("strong"),$io=o("nystromformer"),Iio=o(" \u2014 "),kS=a("a"),Nio=o("NystromformerModel"),jio=o(" (Nystromformer model)"),Dio=l(),jp=a("li"),fZ=a("strong"),qio=o("openai-gpt"),Gio=o(" \u2014 "),RS=a("a"),Oio=o("OpenAIGPTModel"),Xio=o(" (OpenAI GPT model)"),Vio=l(),Dp=a("li"),mZ=a("strong"),zio=o("pegasus"),Wio=o(" \u2014 "),SS=a("a"),Qio=o("PegasusModel"),Hio=o(" (Pegasus model)"),Uio=l(),qp=a("li"),gZ=a("strong"),Jio=o("perceiver"),Yio=o(" \u2014 "),PS=a("a"),Kio=o("PerceiverModel"),Zio=o(" (Perceiver model)"),edo=l(),Gp=a("li"),hZ=a("strong"),odo=o("plbart"),rdo=o(" \u2014 "),$S=a("a"),tdo=o("PLBartModel"),ado=o(" (PLBart model)"),ndo=l(),Op=a("li"),pZ=a("strong"),sdo=o("poolformer"),ldo=o(" \u2014 "),IS=a("a"),ido=o("PoolFormerModel"),ddo=o(" (PoolFormer model)"),cdo=l(),Xp=a("li"),_Z=a("strong"),fdo=o("prophetnet"),mdo=o(" \u2014 "),NS=a("a"),gdo=o("ProphetNetModel"),hdo=o(" (ProphetNet model)"),pdo=l(),Vp=a("li"),uZ=a("strong"),_do=o("qdqbert"),udo=o(" \u2014 "),jS=a("a"),bdo=o("QDQBertModel"),vdo=o(" (QDQBert model)"),Tdo=l(),zp=a("li"),bZ=a("strong"),Fdo=o("reformer"),Cdo=o(" \u2014 "),DS=a("a"),Mdo=o("ReformerModel"),Edo=o(" (Reformer model)"),ydo=l(),Wp=a("li"),vZ=a("strong"),wdo=o("rembert"),Ado=o(" \u2014 "),qS=a("a"),Ldo=o("RemBertModel"),Bdo=o(" (RemBERT model)"),xdo=l(),Qp=a("li"),TZ=a("strong"),kdo=o("resnet"),Rdo=o(" \u2014 "),GS=a("a"),Sdo=o("ResNetModel"),Pdo=o(" (ResNet model)"),$do=l(),Hp=a("li"),FZ=a("strong"),Ido=o("retribert"),Ndo=o(" \u2014 "),OS=a("a"),jdo=o("RetriBertModel"),Ddo=o(" (RetriBERT model)"),qdo=l(),Up=a("li"),CZ=a("strong"),Gdo=o("roberta"),Odo=o(" \u2014 "),XS=a("a"),Xdo=o("RobertaModel"),Vdo=o(" (RoBERTa model)"),zdo=l(),Jp=a("li"),MZ=a("strong"),Wdo=o("roformer"),Qdo=o(" \u2014 "),VS=a("a"),Hdo=o("RoFormerModel"),Udo=o(" (RoFormer model)"),Jdo=l(),Yp=a("li"),EZ=a("strong"),Ydo=o("segformer"),Kdo=o(" \u2014 "),zS=a("a"),Zdo=o("SegformerModel"),eco=o(" (SegFormer model)"),oco=l(),Kp=a("li"),yZ=a("strong"),rco=o("sew"),tco=o(" \u2014 "),WS=a("a"),aco=o("SEWModel"),nco=o(" (SEW model)"),sco=l(),Zp=a("li"),wZ=a("strong"),lco=o("sew-d"),ico=o(" \u2014 "),QS=a("a"),dco=o("SEWDModel"),cco=o(" (SEW-D model)"),fco=l(),e_=a("li"),AZ=a("strong"),mco=o("speech_to_text"),gco=o(" \u2014 "),HS=a("a"),hco=o("Speech2TextModel"),pco=o(" (Speech2Text model)"),_co=l(),o_=a("li"),LZ=a("strong"),uco=o("splinter"),bco=o(" \u2014 "),US=a("a"),vco=o("SplinterModel"),Tco=o(" (Splinter model)"),Fco=l(),r_=a("li"),BZ=a("strong"),Cco=o("squeezebert"),Mco=o(" \u2014 "),JS=a("a"),Eco=o("SqueezeBertModel"),yco=o(" (SqueezeBERT model)"),wco=l(),t_=a("li"),xZ=a("strong"),Aco=o("swin"),Lco=o(" \u2014 "),YS=a("a"),Bco=o("SwinModel"),xco=o(" (Swin model)"),kco=l(),a_=a("li"),kZ=a("strong"),Rco=o("t5"),Sco=o(" \u2014 "),KS=a("a"),Pco=o("T5Model"),$co=o(" (T5 model)"),Ico=l(),n_=a("li"),RZ=a("strong"),Nco=o("tapas"),jco=o(" \u2014 "),ZS=a("a"),Dco=o("TapasModel"),qco=o(" (TAPAS model)"),Gco=l(),s_=a("li"),SZ=a("strong"),Oco=o("transfo-xl"),Xco=o(" \u2014 "),eP=a("a"),Vco=o("TransfoXLModel"),zco=o(" (Transformer-XL model)"),Wco=l(),l_=a("li"),PZ=a("strong"),Qco=o("unispeech"),Hco=o(" \u2014 "),oP=a("a"),Uco=o("UniSpeechModel"),Jco=o(" (UniSpeech model)"),Yco=l(),i_=a("li"),$Z=a("strong"),Kco=o("unispeech-sat"),Zco=o(" \u2014 "),rP=a("a"),efo=o("UniSpeechSatModel"),ofo=o(" (UniSpeechSat model)"),rfo=l(),d_=a("li"),IZ=a("strong"),tfo=o("van"),afo=o(" \u2014 "),tP=a("a"),nfo=o("VanModel"),sfo=o(" (VAN model)"),lfo=l(),c_=a("li"),NZ=a("strong"),ifo=o("vilt"),dfo=o(" \u2014 "),aP=a("a"),cfo=o("ViltModel"),ffo=o(" (ViLT model)"),mfo=l(),f_=a("li"),jZ=a("strong"),gfo=o("vision-text-dual-encoder"),hfo=o(" \u2014 "),nP=a("a"),pfo=o("VisionTextDualEncoderModel"),_fo=o(" (VisionTextDualEncoder model)"),ufo=l(),m_=a("li"),DZ=a("strong"),bfo=o("visual_bert"),vfo=o(" \u2014 "),sP=a("a"),Tfo=o("VisualBertModel"),Ffo=o(" (VisualBert model)"),Cfo=l(),g_=a("li"),qZ=a("strong"),Mfo=o("vit"),Efo=o(" \u2014 "),lP=a("a"),yfo=o("ViTModel"),wfo=o(" (ViT model)"),Afo=l(),h_=a("li"),GZ=a("strong"),Lfo=o("vit_mae"),Bfo=o(" \u2014 "),iP=a("a"),xfo=o("ViTMAEModel"),kfo=o(" (ViTMAE model)"),Rfo=l(),p_=a("li"),OZ=a("strong"),Sfo=o("wav2vec2"),Pfo=o(" \u2014 "),dP=a("a"),$fo=o("Wav2Vec2Model"),Ifo=o(" (Wav2Vec2 model)"),Nfo=l(),__=a("li"),XZ=a("strong"),jfo=o("wavlm"),Dfo=o(" \u2014 "),cP=a("a"),qfo=o("WavLMModel"),Gfo=o(" (WavLM model)"),Ofo=l(),u_=a("li"),VZ=a("strong"),Xfo=o("xglm"),Vfo=o(" \u2014 "),fP=a("a"),zfo=o("XGLMModel"),Wfo=o(" (XGLM model)"),Qfo=l(),b_=a("li"),zZ=a("strong"),Hfo=o("xlm"),Ufo=o(" \u2014 "),mP=a("a"),Jfo=o("XLMModel"),Yfo=o(" (XLM model)"),Kfo=l(),v_=a("li"),WZ=a("strong"),Zfo=o("xlm-prophetnet"),emo=o(" \u2014 "),gP=a("a"),omo=o("XLMProphetNetModel"),rmo=o(" (XLMProphetNet model)"),tmo=l(),T_=a("li"),QZ=a("strong"),amo=o("xlm-roberta"),nmo=o(" \u2014 "),hP=a("a"),smo=o("XLMRobertaModel"),lmo=o(" (XLM-RoBERTa model)"),imo=l(),F_=a("li"),HZ=a("strong"),dmo=o("xlm-roberta-xl"),cmo=o(" \u2014 "),pP=a("a"),fmo=o("XLMRobertaXLModel"),mmo=o(" (XLM-RoBERTa-XL model)"),gmo=l(),C_=a("li"),UZ=a("strong"),hmo=o("xlnet"),pmo=o(" \u2014 "),_P=a("a"),_mo=o("XLNetModel"),umo=o(" (XLNet model)"),bmo=l(),M_=a("li"),JZ=a("strong"),vmo=o("yoso"),Tmo=o(" \u2014 "),uP=a("a"),Fmo=o("YosoModel"),Cmo=o(" (YOSO model)"),Mmo=l(),E_=a("p"),Emo=o("The model is set in evaluation mode by default using "),YZ=a("code"),ymo=o("model.eval()"),wmo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KZ=a("code"),Amo=o("model.train()"),Lmo=l(),ZZ=a("p"),Bmo=o("Examples:"),xmo=l(),f(XE.$$.fragment),lke=l(),ed=a("h2"),y_=a("a"),eee=a("span"),f(VE.$$.fragment),kmo=l(),oee=a("span"),Rmo=o("AutoModelForPreTraining"),ike=l(),Yo=a("div"),f(zE.$$.fragment),Smo=l(),od=a("p"),Pmo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ree=a("code"),$mo=o("from_pretrained()"),Imo=o("class method or the "),tee=a("code"),Nmo=o("from_config()"),jmo=o(`class
method.`),Dmo=l(),WE=a("p"),qmo=o("This class cannot be instantiated directly using "),aee=a("code"),Gmo=o("__init__()"),Omo=o(" (throws an error)."),Xmo=l(),zr=a("div"),f(QE.$$.fragment),Vmo=l(),nee=a("p"),zmo=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Wmo=l(),rd=a("p"),Qmo=o(`Note:
Loading a model from its configuration file does `),see=a("strong"),Hmo=o("not"),Umo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=a("code"),Jmo=o("from_pretrained()"),Ymo=o("to load the model weights."),Kmo=l(),iee=a("p"),Zmo=o("Examples:"),ego=l(),f(HE.$$.fragment),ogo=l(),De=a("div"),f(UE.$$.fragment),rgo=l(),dee=a("p"),tgo=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),ago=l(),za=a("p"),ngo=o("The model class to instantiate is selected based on the "),cee=a("code"),sgo=o("model_type"),lgo=o(` property of the config object (either
passed as an argument or loaded from `),fee=a("code"),igo=o("pretrained_model_name_or_path"),dgo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mee=a("code"),cgo=o("pretrained_model_name_or_path"),fgo=o(":"),mgo=l(),k=a("ul"),w_=a("li"),gee=a("strong"),ggo=o("albert"),hgo=o(" \u2014 "),bP=a("a"),pgo=o("AlbertForPreTraining"),_go=o(" (ALBERT model)"),ugo=l(),A_=a("li"),hee=a("strong"),bgo=o("bart"),vgo=o(" \u2014 "),vP=a("a"),Tgo=o("BartForConditionalGeneration"),Fgo=o(" (BART model)"),Cgo=l(),L_=a("li"),pee=a("strong"),Mgo=o("bert"),Ego=o(" \u2014 "),TP=a("a"),ygo=o("BertForPreTraining"),wgo=o(" (BERT model)"),Ago=l(),B_=a("li"),_ee=a("strong"),Lgo=o("big_bird"),Bgo=o(" \u2014 "),FP=a("a"),xgo=o("BigBirdForPreTraining"),kgo=o(" (BigBird model)"),Rgo=l(),x_=a("li"),uee=a("strong"),Sgo=o("camembert"),Pgo=o(" \u2014 "),CP=a("a"),$go=o("CamembertForMaskedLM"),Igo=o(" (CamemBERT model)"),Ngo=l(),k_=a("li"),bee=a("strong"),jgo=o("ctrl"),Dgo=o(" \u2014 "),MP=a("a"),qgo=o("CTRLLMHeadModel"),Ggo=o(" (CTRL model)"),Ogo=l(),R_=a("li"),vee=a("strong"),Xgo=o("data2vec-text"),Vgo=o(" \u2014 "),EP=a("a"),zgo=o("Data2VecTextForMaskedLM"),Wgo=o(" (Data2VecText model)"),Qgo=l(),S_=a("li"),Tee=a("strong"),Hgo=o("deberta"),Ugo=o(" \u2014 "),yP=a("a"),Jgo=o("DebertaForMaskedLM"),Ygo=o(" (DeBERTa model)"),Kgo=l(),P_=a("li"),Fee=a("strong"),Zgo=o("deberta-v2"),eho=o(" \u2014 "),wP=a("a"),oho=o("DebertaV2ForMaskedLM"),rho=o(" (DeBERTa-v2 model)"),tho=l(),$_=a("li"),Cee=a("strong"),aho=o("distilbert"),nho=o(" \u2014 "),AP=a("a"),sho=o("DistilBertForMaskedLM"),lho=o(" (DistilBERT model)"),iho=l(),I_=a("li"),Mee=a("strong"),dho=o("electra"),cho=o(" \u2014 "),LP=a("a"),fho=o("ElectraForPreTraining"),mho=o(" (ELECTRA model)"),gho=l(),N_=a("li"),Eee=a("strong"),hho=o("flaubert"),pho=o(" \u2014 "),BP=a("a"),_ho=o("FlaubertWithLMHeadModel"),uho=o(" (FlauBERT model)"),bho=l(),j_=a("li"),yee=a("strong"),vho=o("fnet"),Tho=o(" \u2014 "),xP=a("a"),Fho=o("FNetForPreTraining"),Cho=o(" (FNet model)"),Mho=l(),D_=a("li"),wee=a("strong"),Eho=o("fsmt"),yho=o(" \u2014 "),kP=a("a"),who=o("FSMTForConditionalGeneration"),Aho=o(" (FairSeq Machine-Translation model)"),Lho=l(),q_=a("li"),Aee=a("strong"),Bho=o("funnel"),xho=o(" \u2014 "),RP=a("a"),kho=o("FunnelForPreTraining"),Rho=o(" (Funnel Transformer model)"),Sho=l(),G_=a("li"),Lee=a("strong"),Pho=o("gpt2"),$ho=o(" \u2014 "),SP=a("a"),Iho=o("GPT2LMHeadModel"),Nho=o(" (OpenAI GPT-2 model)"),jho=l(),O_=a("li"),Bee=a("strong"),Dho=o("ibert"),qho=o(" \u2014 "),PP=a("a"),Gho=o("IBertForMaskedLM"),Oho=o(" (I-BERT model)"),Xho=l(),X_=a("li"),xee=a("strong"),Vho=o("layoutlm"),zho=o(" \u2014 "),$P=a("a"),Who=o("LayoutLMForMaskedLM"),Qho=o(" (LayoutLM model)"),Hho=l(),V_=a("li"),kee=a("strong"),Uho=o("longformer"),Jho=o(" \u2014 "),IP=a("a"),Yho=o("LongformerForMaskedLM"),Kho=o(" (Longformer model)"),Zho=l(),z_=a("li"),Ree=a("strong"),epo=o("lxmert"),opo=o(" \u2014 "),NP=a("a"),rpo=o("LxmertForPreTraining"),tpo=o(" (LXMERT model)"),apo=l(),W_=a("li"),See=a("strong"),npo=o("megatron-bert"),spo=o(" \u2014 "),jP=a("a"),lpo=o("MegatronBertForPreTraining"),ipo=o(" (MegatronBert model)"),dpo=l(),Q_=a("li"),Pee=a("strong"),cpo=o("mobilebert"),fpo=o(" \u2014 "),DP=a("a"),mpo=o("MobileBertForPreTraining"),gpo=o(" (MobileBERT model)"),hpo=l(),H_=a("li"),$ee=a("strong"),ppo=o("mpnet"),_po=o(" \u2014 "),qP=a("a"),upo=o("MPNetForMaskedLM"),bpo=o(" (MPNet model)"),vpo=l(),U_=a("li"),Iee=a("strong"),Tpo=o("openai-gpt"),Fpo=o(" \u2014 "),GP=a("a"),Cpo=o("OpenAIGPTLMHeadModel"),Mpo=o(" (OpenAI GPT model)"),Epo=l(),J_=a("li"),Nee=a("strong"),ypo=o("retribert"),wpo=o(" \u2014 "),OP=a("a"),Apo=o("RetriBertModel"),Lpo=o(" (RetriBERT model)"),Bpo=l(),Y_=a("li"),jee=a("strong"),xpo=o("roberta"),kpo=o(" \u2014 "),XP=a("a"),Rpo=o("RobertaForMaskedLM"),Spo=o(" (RoBERTa model)"),Ppo=l(),K_=a("li"),Dee=a("strong"),$po=o("squeezebert"),Ipo=o(" \u2014 "),VP=a("a"),Npo=o("SqueezeBertForMaskedLM"),jpo=o(" (SqueezeBERT model)"),Dpo=l(),Z_=a("li"),qee=a("strong"),qpo=o("t5"),Gpo=o(" \u2014 "),zP=a("a"),Opo=o("T5ForConditionalGeneration"),Xpo=o(" (T5 model)"),Vpo=l(),eu=a("li"),Gee=a("strong"),zpo=o("tapas"),Wpo=o(" \u2014 "),WP=a("a"),Qpo=o("TapasForMaskedLM"),Hpo=o(" (TAPAS model)"),Upo=l(),ou=a("li"),Oee=a("strong"),Jpo=o("transfo-xl"),Ypo=o(" \u2014 "),QP=a("a"),Kpo=o("TransfoXLLMHeadModel"),Zpo=o(" (Transformer-XL model)"),e_o=l(),ru=a("li"),Xee=a("strong"),o_o=o("unispeech"),r_o=o(" \u2014 "),HP=a("a"),t_o=o("UniSpeechForPreTraining"),a_o=o(" (UniSpeech model)"),n_o=l(),tu=a("li"),Vee=a("strong"),s_o=o("unispeech-sat"),l_o=o(" \u2014 "),UP=a("a"),i_o=o("UniSpeechSatForPreTraining"),d_o=o(" (UniSpeechSat model)"),c_o=l(),au=a("li"),zee=a("strong"),f_o=o("visual_bert"),m_o=o(" \u2014 "),JP=a("a"),g_o=o("VisualBertForPreTraining"),h_o=o(" (VisualBert model)"),p_o=l(),nu=a("li"),Wee=a("strong"),__o=o("vit_mae"),u_o=o(" \u2014 "),YP=a("a"),b_o=o("ViTMAEForPreTraining"),v_o=o(" (ViTMAE model)"),T_o=l(),su=a("li"),Qee=a("strong"),F_o=o("wav2vec2"),C_o=o(" \u2014 "),KP=a("a"),M_o=o("Wav2Vec2ForPreTraining"),E_o=o(" (Wav2Vec2 model)"),y_o=l(),lu=a("li"),Hee=a("strong"),w_o=o("xlm"),A_o=o(" \u2014 "),ZP=a("a"),L_o=o("XLMWithLMHeadModel"),B_o=o(" (XLM model)"),x_o=l(),iu=a("li"),Uee=a("strong"),k_o=o("xlm-roberta"),R_o=o(" \u2014 "),e$=a("a"),S_o=o("XLMRobertaForMaskedLM"),P_o=o(" (XLM-RoBERTa model)"),$_o=l(),du=a("li"),Jee=a("strong"),I_o=o("xlm-roberta-xl"),N_o=o(" \u2014 "),o$=a("a"),j_o=o("XLMRobertaXLForMaskedLM"),D_o=o(" (XLM-RoBERTa-XL model)"),q_o=l(),cu=a("li"),Yee=a("strong"),G_o=o("xlnet"),O_o=o(" \u2014 "),r$=a("a"),X_o=o("XLNetLMHeadModel"),V_o=o(" (XLNet model)"),z_o=l(),fu=a("p"),W_o=o("The model is set in evaluation mode by default using "),Kee=a("code"),Q_o=o("model.eval()"),H_o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zee=a("code"),U_o=o("model.train()"),J_o=l(),eoe=a("p"),Y_o=o("Examples:"),K_o=l(),f(JE.$$.fragment),dke=l(),td=a("h2"),mu=a("a"),ooe=a("span"),f(YE.$$.fragment),Z_o=l(),roe=a("span"),euo=o("AutoModelForCausalLM"),cke=l(),Ko=a("div"),f(KE.$$.fragment),ouo=l(),ad=a("p"),ruo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),toe=a("code"),tuo=o("from_pretrained()"),auo=o("class method or the "),aoe=a("code"),nuo=o("from_config()"),suo=o(`class
method.`),luo=l(),ZE=a("p"),iuo=o("This class cannot be instantiated directly using "),noe=a("code"),duo=o("__init__()"),cuo=o(" (throws an error)."),fuo=l(),Wr=a("div"),f(ey.$$.fragment),muo=l(),soe=a("p"),guo=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),huo=l(),nd=a("p"),puo=o(`Note:
Loading a model from its configuration file does `),loe=a("strong"),_uo=o("not"),uuo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=a("code"),buo=o("from_pretrained()"),vuo=o("to load the model weights."),Tuo=l(),doe=a("p"),Fuo=o("Examples:"),Cuo=l(),f(oy.$$.fragment),Muo=l(),qe=a("div"),f(ry.$$.fragment),Euo=l(),coe=a("p"),yuo=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),wuo=l(),Wa=a("p"),Auo=o("The model class to instantiate is selected based on the "),foe=a("code"),Luo=o("model_type"),Buo=o(` property of the config object (either
passed as an argument or loaded from `),moe=a("code"),xuo=o("pretrained_model_name_or_path"),kuo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),goe=a("code"),Ruo=o("pretrained_model_name_or_path"),Suo=o(":"),Puo=l(),$=a("ul"),gu=a("li"),hoe=a("strong"),$uo=o("bart"),Iuo=o(" \u2014 "),t$=a("a"),Nuo=o("BartForCausalLM"),juo=o(" (BART model)"),Duo=l(),hu=a("li"),poe=a("strong"),quo=o("bert"),Guo=o(" \u2014 "),a$=a("a"),Ouo=o("BertLMHeadModel"),Xuo=o(" (BERT model)"),Vuo=l(),pu=a("li"),_oe=a("strong"),zuo=o("bert-generation"),Wuo=o(" \u2014 "),n$=a("a"),Quo=o("BertGenerationDecoder"),Huo=o(" (Bert Generation model)"),Uuo=l(),_u=a("li"),uoe=a("strong"),Juo=o("big_bird"),Yuo=o(" \u2014 "),s$=a("a"),Kuo=o("BigBirdForCausalLM"),Zuo=o(" (BigBird model)"),e1o=l(),uu=a("li"),boe=a("strong"),o1o=o("bigbird_pegasus"),r1o=o(" \u2014 "),l$=a("a"),t1o=o("BigBirdPegasusForCausalLM"),a1o=o(" (BigBirdPegasus model)"),n1o=l(),bu=a("li"),voe=a("strong"),s1o=o("blenderbot"),l1o=o(" \u2014 "),i$=a("a"),i1o=o("BlenderbotForCausalLM"),d1o=o(" (Blenderbot model)"),c1o=l(),vu=a("li"),Toe=a("strong"),f1o=o("blenderbot-small"),m1o=o(" \u2014 "),d$=a("a"),g1o=o("BlenderbotSmallForCausalLM"),h1o=o(" (BlenderbotSmall model)"),p1o=l(),Tu=a("li"),Foe=a("strong"),_1o=o("camembert"),u1o=o(" \u2014 "),c$=a("a"),b1o=o("CamembertForCausalLM"),v1o=o(" (CamemBERT model)"),T1o=l(),Fu=a("li"),Coe=a("strong"),F1o=o("ctrl"),C1o=o(" \u2014 "),f$=a("a"),M1o=o("CTRLLMHeadModel"),E1o=o(" (CTRL model)"),y1o=l(),Cu=a("li"),Moe=a("strong"),w1o=o("data2vec-text"),A1o=o(" \u2014 "),m$=a("a"),L1o=o("Data2VecTextForCausalLM"),B1o=o(" (Data2VecText model)"),x1o=l(),Mu=a("li"),Eoe=a("strong"),k1o=o("electra"),R1o=o(" \u2014 "),g$=a("a"),S1o=o("ElectraForCausalLM"),P1o=o(" (ELECTRA model)"),$1o=l(),Eu=a("li"),yoe=a("strong"),I1o=o("gpt2"),N1o=o(" \u2014 "),h$=a("a"),j1o=o("GPT2LMHeadModel"),D1o=o(" (OpenAI GPT-2 model)"),q1o=l(),yu=a("li"),woe=a("strong"),G1o=o("gpt_neo"),O1o=o(" \u2014 "),p$=a("a"),X1o=o("GPTNeoForCausalLM"),V1o=o(" (GPT Neo model)"),z1o=l(),wu=a("li"),Aoe=a("strong"),W1o=o("gptj"),Q1o=o(" \u2014 "),_$=a("a"),H1o=o("GPTJForCausalLM"),U1o=o(" (GPT-J model)"),J1o=l(),Au=a("li"),Loe=a("strong"),Y1o=o("marian"),K1o=o(" \u2014 "),u$=a("a"),Z1o=o("MarianForCausalLM"),e4o=o(" (Marian model)"),o4o=l(),Lu=a("li"),Boe=a("strong"),r4o=o("mbart"),t4o=o(" \u2014 "),b$=a("a"),a4o=o("MBartForCausalLM"),n4o=o(" (mBART model)"),s4o=l(),Bu=a("li"),xoe=a("strong"),l4o=o("megatron-bert"),i4o=o(" \u2014 "),v$=a("a"),d4o=o("MegatronBertForCausalLM"),c4o=o(" (MegatronBert model)"),f4o=l(),xu=a("li"),koe=a("strong"),m4o=o("openai-gpt"),g4o=o(" \u2014 "),T$=a("a"),h4o=o("OpenAIGPTLMHeadModel"),p4o=o(" (OpenAI GPT model)"),_4o=l(),ku=a("li"),Roe=a("strong"),u4o=o("pegasus"),b4o=o(" \u2014 "),F$=a("a"),v4o=o("PegasusForCausalLM"),T4o=o(" (Pegasus model)"),F4o=l(),Ru=a("li"),Soe=a("strong"),C4o=o("plbart"),M4o=o(" \u2014 "),C$=a("a"),E4o=o("PLBartForCausalLM"),y4o=o(" (PLBart model)"),w4o=l(),Su=a("li"),Poe=a("strong"),A4o=o("prophetnet"),L4o=o(" \u2014 "),M$=a("a"),B4o=o("ProphetNetForCausalLM"),x4o=o(" (ProphetNet model)"),k4o=l(),Pu=a("li"),$oe=a("strong"),R4o=o("qdqbert"),S4o=o(" \u2014 "),E$=a("a"),P4o=o("QDQBertLMHeadModel"),$4o=o(" (QDQBert model)"),I4o=l(),$u=a("li"),Ioe=a("strong"),N4o=o("reformer"),j4o=o(" \u2014 "),y$=a("a"),D4o=o("ReformerModelWithLMHead"),q4o=o(" (Reformer model)"),G4o=l(),Iu=a("li"),Noe=a("strong"),O4o=o("rembert"),X4o=o(" \u2014 "),w$=a("a"),V4o=o("RemBertForCausalLM"),z4o=o(" (RemBERT model)"),W4o=l(),Nu=a("li"),joe=a("strong"),Q4o=o("roberta"),H4o=o(" \u2014 "),A$=a("a"),U4o=o("RobertaForCausalLM"),J4o=o(" (RoBERTa model)"),Y4o=l(),ju=a("li"),Doe=a("strong"),K4o=o("roformer"),Z4o=o(" \u2014 "),L$=a("a"),ebo=o("RoFormerForCausalLM"),obo=o(" (RoFormer model)"),rbo=l(),Du=a("li"),qoe=a("strong"),tbo=o("speech_to_text_2"),abo=o(" \u2014 "),B$=a("a"),nbo=o("Speech2Text2ForCausalLM"),sbo=o(" (Speech2Text2 model)"),lbo=l(),qu=a("li"),Goe=a("strong"),ibo=o("transfo-xl"),dbo=o(" \u2014 "),x$=a("a"),cbo=o("TransfoXLLMHeadModel"),fbo=o(" (Transformer-XL model)"),mbo=l(),Gu=a("li"),Ooe=a("strong"),gbo=o("trocr"),hbo=o(" \u2014 "),k$=a("a"),pbo=o("TrOCRForCausalLM"),_bo=o(" (TrOCR model)"),ubo=l(),Ou=a("li"),Xoe=a("strong"),bbo=o("xglm"),vbo=o(" \u2014 "),R$=a("a"),Tbo=o("XGLMForCausalLM"),Fbo=o(" (XGLM model)"),Cbo=l(),Xu=a("li"),Voe=a("strong"),Mbo=o("xlm"),Ebo=o(" \u2014 "),S$=a("a"),ybo=o("XLMWithLMHeadModel"),wbo=o(" (XLM model)"),Abo=l(),Vu=a("li"),zoe=a("strong"),Lbo=o("xlm-prophetnet"),Bbo=o(" \u2014 "),P$=a("a"),xbo=o("XLMProphetNetForCausalLM"),kbo=o(" (XLMProphetNet model)"),Rbo=l(),zu=a("li"),Woe=a("strong"),Sbo=o("xlm-roberta"),Pbo=o(" \u2014 "),$$=a("a"),$bo=o("XLMRobertaForCausalLM"),Ibo=o(" (XLM-RoBERTa model)"),Nbo=l(),Wu=a("li"),Qoe=a("strong"),jbo=o("xlm-roberta-xl"),Dbo=o(" \u2014 "),I$=a("a"),qbo=o("XLMRobertaXLForCausalLM"),Gbo=o(" (XLM-RoBERTa-XL model)"),Obo=l(),Qu=a("li"),Hoe=a("strong"),Xbo=o("xlnet"),Vbo=o(" \u2014 "),N$=a("a"),zbo=o("XLNetLMHeadModel"),Wbo=o(" (XLNet model)"),Qbo=l(),Hu=a("p"),Hbo=o("The model is set in evaluation mode by default using "),Uoe=a("code"),Ubo=o("model.eval()"),Jbo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=a("code"),Ybo=o("model.train()"),Kbo=l(),Yoe=a("p"),Zbo=o("Examples:"),e3o=l(),f(ty.$$.fragment),fke=l(),sd=a("h2"),Uu=a("a"),Koe=a("span"),f(ay.$$.fragment),o3o=l(),Zoe=a("span"),r3o=o("AutoModelForMaskedLM"),mke=l(),Zo=a("div"),f(ny.$$.fragment),t3o=l(),ld=a("p"),a3o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ere=a("code"),n3o=o("from_pretrained()"),s3o=o("class method or the "),ore=a("code"),l3o=o("from_config()"),i3o=o(`class
method.`),d3o=l(),sy=a("p"),c3o=o("This class cannot be instantiated directly using "),rre=a("code"),f3o=o("__init__()"),m3o=o(" (throws an error)."),g3o=l(),Qr=a("div"),f(ly.$$.fragment),h3o=l(),tre=a("p"),p3o=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_3o=l(),id=a("p"),u3o=o(`Note:
Loading a model from its configuration file does `),are=a("strong"),b3o=o("not"),v3o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=a("code"),T3o=o("from_pretrained()"),F3o=o("to load the model weights."),C3o=l(),sre=a("p"),M3o=o("Examples:"),E3o=l(),f(iy.$$.fragment),y3o=l(),Ge=a("div"),f(dy.$$.fragment),w3o=l(),lre=a("p"),A3o=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),L3o=l(),Qa=a("p"),B3o=o("The model class to instantiate is selected based on the "),ire=a("code"),x3o=o("model_type"),k3o=o(` property of the config object (either
passed as an argument or loaded from `),dre=a("code"),R3o=o("pretrained_model_name_or_path"),S3o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=a("code"),P3o=o("pretrained_model_name_or_path"),$3o=o(":"),I3o=l(),I=a("ul"),Ju=a("li"),fre=a("strong"),N3o=o("albert"),j3o=o(" \u2014 "),j$=a("a"),D3o=o("AlbertForMaskedLM"),q3o=o(" (ALBERT model)"),G3o=l(),Yu=a("li"),mre=a("strong"),O3o=o("bart"),X3o=o(" \u2014 "),D$=a("a"),V3o=o("BartForConditionalGeneration"),z3o=o(" (BART model)"),W3o=l(),Ku=a("li"),gre=a("strong"),Q3o=o("bert"),H3o=o(" \u2014 "),q$=a("a"),U3o=o("BertForMaskedLM"),J3o=o(" (BERT model)"),Y3o=l(),Zu=a("li"),hre=a("strong"),K3o=o("big_bird"),Z3o=o(" \u2014 "),G$=a("a"),e5o=o("BigBirdForMaskedLM"),o5o=o(" (BigBird model)"),r5o=l(),e1=a("li"),pre=a("strong"),t5o=o("camembert"),a5o=o(" \u2014 "),O$=a("a"),n5o=o("CamembertForMaskedLM"),s5o=o(" (CamemBERT model)"),l5o=l(),o1=a("li"),_re=a("strong"),i5o=o("convbert"),d5o=o(" \u2014 "),X$=a("a"),c5o=o("ConvBertForMaskedLM"),f5o=o(" (ConvBERT model)"),m5o=l(),r1=a("li"),ure=a("strong"),g5o=o("data2vec-text"),h5o=o(" \u2014 "),V$=a("a"),p5o=o("Data2VecTextForMaskedLM"),_5o=o(" (Data2VecText model)"),u5o=l(),t1=a("li"),bre=a("strong"),b5o=o("deberta"),v5o=o(" \u2014 "),z$=a("a"),T5o=o("DebertaForMaskedLM"),F5o=o(" (DeBERTa model)"),C5o=l(),a1=a("li"),vre=a("strong"),M5o=o("deberta-v2"),E5o=o(" \u2014 "),W$=a("a"),y5o=o("DebertaV2ForMaskedLM"),w5o=o(" (DeBERTa-v2 model)"),A5o=l(),n1=a("li"),Tre=a("strong"),L5o=o("distilbert"),B5o=o(" \u2014 "),Q$=a("a"),x5o=o("DistilBertForMaskedLM"),k5o=o(" (DistilBERT model)"),R5o=l(),s1=a("li"),Fre=a("strong"),S5o=o("electra"),P5o=o(" \u2014 "),H$=a("a"),$5o=o("ElectraForMaskedLM"),I5o=o(" (ELECTRA model)"),N5o=l(),l1=a("li"),Cre=a("strong"),j5o=o("flaubert"),D5o=o(" \u2014 "),U$=a("a"),q5o=o("FlaubertWithLMHeadModel"),G5o=o(" (FlauBERT model)"),O5o=l(),i1=a("li"),Mre=a("strong"),X5o=o("fnet"),V5o=o(" \u2014 "),J$=a("a"),z5o=o("FNetForMaskedLM"),W5o=o(" (FNet model)"),Q5o=l(),d1=a("li"),Ere=a("strong"),H5o=o("funnel"),U5o=o(" \u2014 "),Y$=a("a"),J5o=o("FunnelForMaskedLM"),Y5o=o(" (Funnel Transformer model)"),K5o=l(),c1=a("li"),yre=a("strong"),Z5o=o("ibert"),e2o=o(" \u2014 "),K$=a("a"),o2o=o("IBertForMaskedLM"),r2o=o(" (I-BERT model)"),t2o=l(),f1=a("li"),wre=a("strong"),a2o=o("layoutlm"),n2o=o(" \u2014 "),Z$=a("a"),s2o=o("LayoutLMForMaskedLM"),l2o=o(" (LayoutLM model)"),i2o=l(),m1=a("li"),Are=a("strong"),d2o=o("longformer"),c2o=o(" \u2014 "),eI=a("a"),f2o=o("LongformerForMaskedLM"),m2o=o(" (Longformer model)"),g2o=l(),g1=a("li"),Lre=a("strong"),h2o=o("mbart"),p2o=o(" \u2014 "),oI=a("a"),_2o=o("MBartForConditionalGeneration"),u2o=o(" (mBART model)"),b2o=l(),h1=a("li"),Bre=a("strong"),v2o=o("megatron-bert"),T2o=o(" \u2014 "),rI=a("a"),F2o=o("MegatronBertForMaskedLM"),C2o=o(" (MegatronBert model)"),M2o=l(),p1=a("li"),xre=a("strong"),E2o=o("mobilebert"),y2o=o(" \u2014 "),tI=a("a"),w2o=o("MobileBertForMaskedLM"),A2o=o(" (MobileBERT model)"),L2o=l(),_1=a("li"),kre=a("strong"),B2o=o("mpnet"),x2o=o(" \u2014 "),aI=a("a"),k2o=o("MPNetForMaskedLM"),R2o=o(" (MPNet model)"),S2o=l(),u1=a("li"),Rre=a("strong"),P2o=o("nystromformer"),$2o=o(" \u2014 "),nI=a("a"),I2o=o("NystromformerForMaskedLM"),N2o=o(" (Nystromformer model)"),j2o=l(),b1=a("li"),Sre=a("strong"),D2o=o("perceiver"),q2o=o(" \u2014 "),sI=a("a"),G2o=o("PerceiverForMaskedLM"),O2o=o(" (Perceiver model)"),X2o=l(),v1=a("li"),Pre=a("strong"),V2o=o("qdqbert"),z2o=o(" \u2014 "),lI=a("a"),W2o=o("QDQBertForMaskedLM"),Q2o=o(" (QDQBert model)"),H2o=l(),T1=a("li"),$re=a("strong"),U2o=o("reformer"),J2o=o(" \u2014 "),iI=a("a"),Y2o=o("ReformerForMaskedLM"),K2o=o(" (Reformer model)"),Z2o=l(),F1=a("li"),Ire=a("strong"),evo=o("rembert"),ovo=o(" \u2014 "),dI=a("a"),rvo=o("RemBertForMaskedLM"),tvo=o(" (RemBERT model)"),avo=l(),C1=a("li"),Nre=a("strong"),nvo=o("roberta"),svo=o(" \u2014 "),cI=a("a"),lvo=o("RobertaForMaskedLM"),ivo=o(" (RoBERTa model)"),dvo=l(),M1=a("li"),jre=a("strong"),cvo=o("roformer"),fvo=o(" \u2014 "),fI=a("a"),mvo=o("RoFormerForMaskedLM"),gvo=o(" (RoFormer model)"),hvo=l(),E1=a("li"),Dre=a("strong"),pvo=o("squeezebert"),_vo=o(" \u2014 "),mI=a("a"),uvo=o("SqueezeBertForMaskedLM"),bvo=o(" (SqueezeBERT model)"),vvo=l(),y1=a("li"),qre=a("strong"),Tvo=o("tapas"),Fvo=o(" \u2014 "),gI=a("a"),Cvo=o("TapasForMaskedLM"),Mvo=o(" (TAPAS model)"),Evo=l(),w1=a("li"),Gre=a("strong"),yvo=o("wav2vec2"),wvo=o(" \u2014 "),Ore=a("code"),Avo=o("Wav2Vec2ForMaskedLM"),Lvo=o("(Wav2Vec2 model)"),Bvo=l(),A1=a("li"),Xre=a("strong"),xvo=o("xlm"),kvo=o(" \u2014 "),hI=a("a"),Rvo=o("XLMWithLMHeadModel"),Svo=o(" (XLM model)"),Pvo=l(),L1=a("li"),Vre=a("strong"),$vo=o("xlm-roberta"),Ivo=o(" \u2014 "),pI=a("a"),Nvo=o("XLMRobertaForMaskedLM"),jvo=o(" (XLM-RoBERTa model)"),Dvo=l(),B1=a("li"),zre=a("strong"),qvo=o("xlm-roberta-xl"),Gvo=o(" \u2014 "),_I=a("a"),Ovo=o("XLMRobertaXLForMaskedLM"),Xvo=o(" (XLM-RoBERTa-XL model)"),Vvo=l(),x1=a("li"),Wre=a("strong"),zvo=o("yoso"),Wvo=o(" \u2014 "),uI=a("a"),Qvo=o("YosoForMaskedLM"),Hvo=o(" (YOSO model)"),Uvo=l(),k1=a("p"),Jvo=o("The model is set in evaluation mode by default using "),Qre=a("code"),Yvo=o("model.eval()"),Kvo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hre=a("code"),Zvo=o("model.train()"),e6o=l(),Ure=a("p"),o6o=o("Examples:"),r6o=l(),f(cy.$$.fragment),gke=l(),dd=a("h2"),R1=a("a"),Jre=a("span"),f(fy.$$.fragment),t6o=l(),Yre=a("span"),a6o=o("AutoModelForSeq2SeqLM"),hke=l(),er=a("div"),f(my.$$.fragment),n6o=l(),cd=a("p"),s6o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kre=a("code"),l6o=o("from_pretrained()"),i6o=o("class method or the "),Zre=a("code"),d6o=o("from_config()"),c6o=o(`class
method.`),f6o=l(),gy=a("p"),m6o=o("This class cannot be instantiated directly using "),ete=a("code"),g6o=o("__init__()"),h6o=o(" (throws an error)."),p6o=l(),Hr=a("div"),f(hy.$$.fragment),_6o=l(),ote=a("p"),u6o=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),b6o=l(),fd=a("p"),v6o=o(`Note:
Loading a model from its configuration file does `),rte=a("strong"),T6o=o("not"),F6o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=a("code"),C6o=o("from_pretrained()"),M6o=o("to load the model weights."),E6o=l(),ate=a("p"),y6o=o("Examples:"),w6o=l(),f(py.$$.fragment),A6o=l(),Oe=a("div"),f(_y.$$.fragment),L6o=l(),nte=a("p"),B6o=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),x6o=l(),Ha=a("p"),k6o=o("The model class to instantiate is selected based on the "),ste=a("code"),R6o=o("model_type"),S6o=o(` property of the config object (either
passed as an argument or loaded from `),lte=a("code"),P6o=o("pretrained_model_name_or_path"),$6o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=a("code"),I6o=o("pretrained_model_name_or_path"),N6o=o(":"),j6o=l(),se=a("ul"),S1=a("li"),dte=a("strong"),D6o=o("bart"),q6o=o(" \u2014 "),bI=a("a"),G6o=o("BartForConditionalGeneration"),O6o=o(" (BART model)"),X6o=l(),P1=a("li"),cte=a("strong"),V6o=o("bigbird_pegasus"),z6o=o(" \u2014 "),vI=a("a"),W6o=o("BigBirdPegasusForConditionalGeneration"),Q6o=o(" (BigBirdPegasus model)"),H6o=l(),$1=a("li"),fte=a("strong"),U6o=o("blenderbot"),J6o=o(" \u2014 "),TI=a("a"),Y6o=o("BlenderbotForConditionalGeneration"),K6o=o(" (Blenderbot model)"),Z6o=l(),I1=a("li"),mte=a("strong"),eTo=o("blenderbot-small"),oTo=o(" \u2014 "),FI=a("a"),rTo=o("BlenderbotSmallForConditionalGeneration"),tTo=o(" (BlenderbotSmall model)"),aTo=l(),N1=a("li"),gte=a("strong"),nTo=o("encoder-decoder"),sTo=o(" \u2014 "),CI=a("a"),lTo=o("EncoderDecoderModel"),iTo=o(" (Encoder decoder model)"),dTo=l(),j1=a("li"),hte=a("strong"),cTo=o("fsmt"),fTo=o(" \u2014 "),MI=a("a"),mTo=o("FSMTForConditionalGeneration"),gTo=o(" (FairSeq Machine-Translation model)"),hTo=l(),D1=a("li"),pte=a("strong"),pTo=o("led"),_To=o(" \u2014 "),EI=a("a"),uTo=o("LEDForConditionalGeneration"),bTo=o(" (LED model)"),vTo=l(),q1=a("li"),_te=a("strong"),TTo=o("m2m_100"),FTo=o(" \u2014 "),yI=a("a"),CTo=o("M2M100ForConditionalGeneration"),MTo=o(" (M2M100 model)"),ETo=l(),G1=a("li"),ute=a("strong"),yTo=o("marian"),wTo=o(" \u2014 "),wI=a("a"),ATo=o("MarianMTModel"),LTo=o(" (Marian model)"),BTo=l(),O1=a("li"),bte=a("strong"),xTo=o("mbart"),kTo=o(" \u2014 "),AI=a("a"),RTo=o("MBartForConditionalGeneration"),STo=o(" (mBART model)"),PTo=l(),X1=a("li"),vte=a("strong"),$To=o("mt5"),ITo=o(" \u2014 "),LI=a("a"),NTo=o("MT5ForConditionalGeneration"),jTo=o(" (mT5 model)"),DTo=l(),V1=a("li"),Tte=a("strong"),qTo=o("pegasus"),GTo=o(" \u2014 "),BI=a("a"),OTo=o("PegasusForConditionalGeneration"),XTo=o(" (Pegasus model)"),VTo=l(),z1=a("li"),Fte=a("strong"),zTo=o("plbart"),WTo=o(" \u2014 "),xI=a("a"),QTo=o("PLBartForConditionalGeneration"),HTo=o(" (PLBart model)"),UTo=l(),W1=a("li"),Cte=a("strong"),JTo=o("prophetnet"),YTo=o(" \u2014 "),kI=a("a"),KTo=o("ProphetNetForConditionalGeneration"),ZTo=o(" (ProphetNet model)"),eFo=l(),Q1=a("li"),Mte=a("strong"),oFo=o("t5"),rFo=o(" \u2014 "),RI=a("a"),tFo=o("T5ForConditionalGeneration"),aFo=o(" (T5 model)"),nFo=l(),H1=a("li"),Ete=a("strong"),sFo=o("xlm-prophetnet"),lFo=o(" \u2014 "),SI=a("a"),iFo=o("XLMProphetNetForConditionalGeneration"),dFo=o(" (XLMProphetNet model)"),cFo=l(),U1=a("p"),fFo=o("The model is set in evaluation mode by default using "),yte=a("code"),mFo=o("model.eval()"),gFo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wte=a("code"),hFo=o("model.train()"),pFo=l(),Ate=a("p"),_Fo=o("Examples:"),uFo=l(),f(uy.$$.fragment),pke=l(),md=a("h2"),J1=a("a"),Lte=a("span"),f(by.$$.fragment),bFo=l(),Bte=a("span"),vFo=o("AutoModelForSequenceClassification"),_ke=l(),or=a("div"),f(vy.$$.fragment),TFo=l(),gd=a("p"),FFo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xte=a("code"),CFo=o("from_pretrained()"),MFo=o("class method or the "),kte=a("code"),EFo=o("from_config()"),yFo=o(`class
method.`),wFo=l(),Ty=a("p"),AFo=o("This class cannot be instantiated directly using "),Rte=a("code"),LFo=o("__init__()"),BFo=o(" (throws an error)."),xFo=l(),Ur=a("div"),f(Fy.$$.fragment),kFo=l(),Ste=a("p"),RFo=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),SFo=l(),hd=a("p"),PFo=o(`Note:
Loading a model from its configuration file does `),Pte=a("strong"),$Fo=o("not"),IFo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=a("code"),NFo=o("from_pretrained()"),jFo=o("to load the model weights."),DFo=l(),Ite=a("p"),qFo=o("Examples:"),GFo=l(),f(Cy.$$.fragment),OFo=l(),Xe=a("div"),f(My.$$.fragment),XFo=l(),Nte=a("p"),VFo=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zFo=l(),Ua=a("p"),WFo=o("The model class to instantiate is selected based on the "),jte=a("code"),QFo=o("model_type"),HFo=o(` property of the config object (either
passed as an argument or loaded from `),Dte=a("code"),UFo=o("pretrained_model_name_or_path"),JFo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qte=a("code"),YFo=o("pretrained_model_name_or_path"),KFo=o(":"),ZFo=l(),A=a("ul"),Y1=a("li"),Gte=a("strong"),eCo=o("albert"),oCo=o(" \u2014 "),PI=a("a"),rCo=o("AlbertForSequenceClassification"),tCo=o(" (ALBERT model)"),aCo=l(),K1=a("li"),Ote=a("strong"),nCo=o("bart"),sCo=o(" \u2014 "),$I=a("a"),lCo=o("BartForSequenceClassification"),iCo=o(" (BART model)"),dCo=l(),Z1=a("li"),Xte=a("strong"),cCo=o("bert"),fCo=o(" \u2014 "),II=a("a"),mCo=o("BertForSequenceClassification"),gCo=o(" (BERT model)"),hCo=l(),e4=a("li"),Vte=a("strong"),pCo=o("big_bird"),_Co=o(" \u2014 "),NI=a("a"),uCo=o("BigBirdForSequenceClassification"),bCo=o(" (BigBird model)"),vCo=l(),o4=a("li"),zte=a("strong"),TCo=o("bigbird_pegasus"),FCo=o(" \u2014 "),jI=a("a"),CCo=o("BigBirdPegasusForSequenceClassification"),MCo=o(" (BigBirdPegasus model)"),ECo=l(),r4=a("li"),Wte=a("strong"),yCo=o("camembert"),wCo=o(" \u2014 "),DI=a("a"),ACo=o("CamembertForSequenceClassification"),LCo=o(" (CamemBERT model)"),BCo=l(),t4=a("li"),Qte=a("strong"),xCo=o("canine"),kCo=o(" \u2014 "),qI=a("a"),RCo=o("CanineForSequenceClassification"),SCo=o(" (Canine model)"),PCo=l(),a4=a("li"),Hte=a("strong"),$Co=o("convbert"),ICo=o(" \u2014 "),GI=a("a"),NCo=o("ConvBertForSequenceClassification"),jCo=o(" (ConvBERT model)"),DCo=l(),n4=a("li"),Ute=a("strong"),qCo=o("ctrl"),GCo=o(" \u2014 "),OI=a("a"),OCo=o("CTRLForSequenceClassification"),XCo=o(" (CTRL model)"),VCo=l(),s4=a("li"),Jte=a("strong"),zCo=o("data2vec-text"),WCo=o(" \u2014 "),XI=a("a"),QCo=o("Data2VecTextForSequenceClassification"),HCo=o(" (Data2VecText model)"),UCo=l(),l4=a("li"),Yte=a("strong"),JCo=o("deberta"),YCo=o(" \u2014 "),VI=a("a"),KCo=o("DebertaForSequenceClassification"),ZCo=o(" (DeBERTa model)"),eMo=l(),i4=a("li"),Kte=a("strong"),oMo=o("deberta-v2"),rMo=o(" \u2014 "),zI=a("a"),tMo=o("DebertaV2ForSequenceClassification"),aMo=o(" (DeBERTa-v2 model)"),nMo=l(),d4=a("li"),Zte=a("strong"),sMo=o("distilbert"),lMo=o(" \u2014 "),WI=a("a"),iMo=o("DistilBertForSequenceClassification"),dMo=o(" (DistilBERT model)"),cMo=l(),c4=a("li"),eae=a("strong"),fMo=o("electra"),mMo=o(" \u2014 "),QI=a("a"),gMo=o("ElectraForSequenceClassification"),hMo=o(" (ELECTRA model)"),pMo=l(),f4=a("li"),oae=a("strong"),_Mo=o("flaubert"),uMo=o(" \u2014 "),HI=a("a"),bMo=o("FlaubertForSequenceClassification"),vMo=o(" (FlauBERT model)"),TMo=l(),m4=a("li"),rae=a("strong"),FMo=o("fnet"),CMo=o(" \u2014 "),UI=a("a"),MMo=o("FNetForSequenceClassification"),EMo=o(" (FNet model)"),yMo=l(),g4=a("li"),tae=a("strong"),wMo=o("funnel"),AMo=o(" \u2014 "),JI=a("a"),LMo=o("FunnelForSequenceClassification"),BMo=o(" (Funnel Transformer model)"),xMo=l(),h4=a("li"),aae=a("strong"),kMo=o("gpt2"),RMo=o(" \u2014 "),YI=a("a"),SMo=o("GPT2ForSequenceClassification"),PMo=o(" (OpenAI GPT-2 model)"),$Mo=l(),p4=a("li"),nae=a("strong"),IMo=o("gpt_neo"),NMo=o(" \u2014 "),KI=a("a"),jMo=o("GPTNeoForSequenceClassification"),DMo=o(" (GPT Neo model)"),qMo=l(),_4=a("li"),sae=a("strong"),GMo=o("gptj"),OMo=o(" \u2014 "),ZI=a("a"),XMo=o("GPTJForSequenceClassification"),VMo=o(" (GPT-J model)"),zMo=l(),u4=a("li"),lae=a("strong"),WMo=o("ibert"),QMo=o(" \u2014 "),eN=a("a"),HMo=o("IBertForSequenceClassification"),UMo=o(" (I-BERT model)"),JMo=l(),b4=a("li"),iae=a("strong"),YMo=o("layoutlm"),KMo=o(" \u2014 "),oN=a("a"),ZMo=o("LayoutLMForSequenceClassification"),eEo=o(" (LayoutLM model)"),oEo=l(),v4=a("li"),dae=a("strong"),rEo=o("layoutlmv2"),tEo=o(" \u2014 "),rN=a("a"),aEo=o("LayoutLMv2ForSequenceClassification"),nEo=o(" (LayoutLMv2 model)"),sEo=l(),T4=a("li"),cae=a("strong"),lEo=o("led"),iEo=o(" \u2014 "),tN=a("a"),dEo=o("LEDForSequenceClassification"),cEo=o(" (LED model)"),fEo=l(),F4=a("li"),fae=a("strong"),mEo=o("longformer"),gEo=o(" \u2014 "),aN=a("a"),hEo=o("LongformerForSequenceClassification"),pEo=o(" (Longformer model)"),_Eo=l(),C4=a("li"),mae=a("strong"),uEo=o("mbart"),bEo=o(" \u2014 "),nN=a("a"),vEo=o("MBartForSequenceClassification"),TEo=o(" (mBART model)"),FEo=l(),M4=a("li"),gae=a("strong"),CEo=o("megatron-bert"),MEo=o(" \u2014 "),sN=a("a"),EEo=o("MegatronBertForSequenceClassification"),yEo=o(" (MegatronBert model)"),wEo=l(),E4=a("li"),hae=a("strong"),AEo=o("mobilebert"),LEo=o(" \u2014 "),lN=a("a"),BEo=o("MobileBertForSequenceClassification"),xEo=o(" (MobileBERT model)"),kEo=l(),y4=a("li"),pae=a("strong"),REo=o("mpnet"),SEo=o(" \u2014 "),iN=a("a"),PEo=o("MPNetForSequenceClassification"),$Eo=o(" (MPNet model)"),IEo=l(),w4=a("li"),_ae=a("strong"),NEo=o("nystromformer"),jEo=o(" \u2014 "),dN=a("a"),DEo=o("NystromformerForSequenceClassification"),qEo=o(" (Nystromformer model)"),GEo=l(),A4=a("li"),uae=a("strong"),OEo=o("openai-gpt"),XEo=o(" \u2014 "),cN=a("a"),VEo=o("OpenAIGPTForSequenceClassification"),zEo=o(" (OpenAI GPT model)"),WEo=l(),L4=a("li"),bae=a("strong"),QEo=o("perceiver"),HEo=o(" \u2014 "),fN=a("a"),UEo=o("PerceiverForSequenceClassification"),JEo=o(" (Perceiver model)"),YEo=l(),B4=a("li"),vae=a("strong"),KEo=o("plbart"),ZEo=o(" \u2014 "),mN=a("a"),eyo=o("PLBartForSequenceClassification"),oyo=o(" (PLBart model)"),ryo=l(),x4=a("li"),Tae=a("strong"),tyo=o("qdqbert"),ayo=o(" \u2014 "),gN=a("a"),nyo=o("QDQBertForSequenceClassification"),syo=o(" (QDQBert model)"),lyo=l(),k4=a("li"),Fae=a("strong"),iyo=o("reformer"),dyo=o(" \u2014 "),hN=a("a"),cyo=o("ReformerForSequenceClassification"),fyo=o(" (Reformer model)"),myo=l(),R4=a("li"),Cae=a("strong"),gyo=o("rembert"),hyo=o(" \u2014 "),pN=a("a"),pyo=o("RemBertForSequenceClassification"),_yo=o(" (RemBERT model)"),uyo=l(),S4=a("li"),Mae=a("strong"),byo=o("roberta"),vyo=o(" \u2014 "),_N=a("a"),Tyo=o("RobertaForSequenceClassification"),Fyo=o(" (RoBERTa model)"),Cyo=l(),P4=a("li"),Eae=a("strong"),Myo=o("roformer"),Eyo=o(" \u2014 "),uN=a("a"),yyo=o("RoFormerForSequenceClassification"),wyo=o(" (RoFormer model)"),Ayo=l(),$4=a("li"),yae=a("strong"),Lyo=o("squeezebert"),Byo=o(" \u2014 "),bN=a("a"),xyo=o("SqueezeBertForSequenceClassification"),kyo=o(" (SqueezeBERT model)"),Ryo=l(),I4=a("li"),wae=a("strong"),Syo=o("tapas"),Pyo=o(" \u2014 "),vN=a("a"),$yo=o("TapasForSequenceClassification"),Iyo=o(" (TAPAS model)"),Nyo=l(),N4=a("li"),Aae=a("strong"),jyo=o("transfo-xl"),Dyo=o(" \u2014 "),TN=a("a"),qyo=o("TransfoXLForSequenceClassification"),Gyo=o(" (Transformer-XL model)"),Oyo=l(),j4=a("li"),Lae=a("strong"),Xyo=o("xlm"),Vyo=o(" \u2014 "),FN=a("a"),zyo=o("XLMForSequenceClassification"),Wyo=o(" (XLM model)"),Qyo=l(),D4=a("li"),Bae=a("strong"),Hyo=o("xlm-roberta"),Uyo=o(" \u2014 "),CN=a("a"),Jyo=o("XLMRobertaForSequenceClassification"),Yyo=o(" (XLM-RoBERTa model)"),Kyo=l(),q4=a("li"),xae=a("strong"),Zyo=o("xlm-roberta-xl"),ewo=o(" \u2014 "),MN=a("a"),owo=o("XLMRobertaXLForSequenceClassification"),rwo=o(" (XLM-RoBERTa-XL model)"),two=l(),G4=a("li"),kae=a("strong"),awo=o("xlnet"),nwo=o(" \u2014 "),EN=a("a"),swo=o("XLNetForSequenceClassification"),lwo=o(" (XLNet model)"),iwo=l(),O4=a("li"),Rae=a("strong"),dwo=o("yoso"),cwo=o(" \u2014 "),yN=a("a"),fwo=o("YosoForSequenceClassification"),mwo=o(" (YOSO model)"),gwo=l(),X4=a("p"),hwo=o("The model is set in evaluation mode by default using "),Sae=a("code"),pwo=o("model.eval()"),_wo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pae=a("code"),uwo=o("model.train()"),bwo=l(),$ae=a("p"),vwo=o("Examples:"),Two=l(),f(Ey.$$.fragment),uke=l(),pd=a("h2"),V4=a("a"),Iae=a("span"),f(yy.$$.fragment),Fwo=l(),Nae=a("span"),Cwo=o("AutoModelForMultipleChoice"),bke=l(),rr=a("div"),f(wy.$$.fragment),Mwo=l(),_d=a("p"),Ewo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jae=a("code"),ywo=o("from_pretrained()"),wwo=o("class method or the "),Dae=a("code"),Awo=o("from_config()"),Lwo=o(`class
method.`),Bwo=l(),Ay=a("p"),xwo=o("This class cannot be instantiated directly using "),qae=a("code"),kwo=o("__init__()"),Rwo=o(" (throws an error)."),Swo=l(),Jr=a("div"),f(Ly.$$.fragment),Pwo=l(),Gae=a("p"),$wo=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Iwo=l(),ud=a("p"),Nwo=o(`Note:
Loading a model from its configuration file does `),Oae=a("strong"),jwo=o("not"),Dwo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=a("code"),qwo=o("from_pretrained()"),Gwo=o("to load the model weights."),Owo=l(),Vae=a("p"),Xwo=o("Examples:"),Vwo=l(),f(By.$$.fragment),zwo=l(),Ve=a("div"),f(xy.$$.fragment),Wwo=l(),zae=a("p"),Qwo=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Hwo=l(),Ja=a("p"),Uwo=o("The model class to instantiate is selected based on the "),Wae=a("code"),Jwo=o("model_type"),Ywo=o(` property of the config object (either
passed as an argument or loaded from `),Qae=a("code"),Kwo=o("pretrained_model_name_or_path"),Zwo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hae=a("code"),eAo=o("pretrained_model_name_or_path"),oAo=o(":"),rAo=l(),G=a("ul"),z4=a("li"),Uae=a("strong"),tAo=o("albert"),aAo=o(" \u2014 "),wN=a("a"),nAo=o("AlbertForMultipleChoice"),sAo=o(" (ALBERT model)"),lAo=l(),W4=a("li"),Jae=a("strong"),iAo=o("bert"),dAo=o(" \u2014 "),AN=a("a"),cAo=o("BertForMultipleChoice"),fAo=o(" (BERT model)"),mAo=l(),Q4=a("li"),Yae=a("strong"),gAo=o("big_bird"),hAo=o(" \u2014 "),LN=a("a"),pAo=o("BigBirdForMultipleChoice"),_Ao=o(" (BigBird model)"),uAo=l(),H4=a("li"),Kae=a("strong"),bAo=o("camembert"),vAo=o(" \u2014 "),BN=a("a"),TAo=o("CamembertForMultipleChoice"),FAo=o(" (CamemBERT model)"),CAo=l(),U4=a("li"),Zae=a("strong"),MAo=o("canine"),EAo=o(" \u2014 "),xN=a("a"),yAo=o("CanineForMultipleChoice"),wAo=o(" (Canine model)"),AAo=l(),J4=a("li"),ene=a("strong"),LAo=o("convbert"),BAo=o(" \u2014 "),kN=a("a"),xAo=o("ConvBertForMultipleChoice"),kAo=o(" (ConvBERT model)"),RAo=l(),Y4=a("li"),one=a("strong"),SAo=o("data2vec-text"),PAo=o(" \u2014 "),RN=a("a"),$Ao=o("Data2VecTextForMultipleChoice"),IAo=o(" (Data2VecText model)"),NAo=l(),K4=a("li"),rne=a("strong"),jAo=o("distilbert"),DAo=o(" \u2014 "),SN=a("a"),qAo=o("DistilBertForMultipleChoice"),GAo=o(" (DistilBERT model)"),OAo=l(),Z4=a("li"),tne=a("strong"),XAo=o("electra"),VAo=o(" \u2014 "),PN=a("a"),zAo=o("ElectraForMultipleChoice"),WAo=o(" (ELECTRA model)"),QAo=l(),eb=a("li"),ane=a("strong"),HAo=o("flaubert"),UAo=o(" \u2014 "),$N=a("a"),JAo=o("FlaubertForMultipleChoice"),YAo=o(" (FlauBERT model)"),KAo=l(),ob=a("li"),nne=a("strong"),ZAo=o("fnet"),e0o=o(" \u2014 "),IN=a("a"),o0o=o("FNetForMultipleChoice"),r0o=o(" (FNet model)"),t0o=l(),rb=a("li"),sne=a("strong"),a0o=o("funnel"),n0o=o(" \u2014 "),NN=a("a"),s0o=o("FunnelForMultipleChoice"),l0o=o(" (Funnel Transformer model)"),i0o=l(),tb=a("li"),lne=a("strong"),d0o=o("ibert"),c0o=o(" \u2014 "),jN=a("a"),f0o=o("IBertForMultipleChoice"),m0o=o(" (I-BERT model)"),g0o=l(),ab=a("li"),ine=a("strong"),h0o=o("longformer"),p0o=o(" \u2014 "),DN=a("a"),_0o=o("LongformerForMultipleChoice"),u0o=o(" (Longformer model)"),b0o=l(),nb=a("li"),dne=a("strong"),v0o=o("megatron-bert"),T0o=o(" \u2014 "),qN=a("a"),F0o=o("MegatronBertForMultipleChoice"),C0o=o(" (MegatronBert model)"),M0o=l(),sb=a("li"),cne=a("strong"),E0o=o("mobilebert"),y0o=o(" \u2014 "),GN=a("a"),w0o=o("MobileBertForMultipleChoice"),A0o=o(" (MobileBERT model)"),L0o=l(),lb=a("li"),fne=a("strong"),B0o=o("mpnet"),x0o=o(" \u2014 "),ON=a("a"),k0o=o("MPNetForMultipleChoice"),R0o=o(" (MPNet model)"),S0o=l(),ib=a("li"),mne=a("strong"),P0o=o("nystromformer"),$0o=o(" \u2014 "),XN=a("a"),I0o=o("NystromformerForMultipleChoice"),N0o=o(" (Nystromformer model)"),j0o=l(),db=a("li"),gne=a("strong"),D0o=o("qdqbert"),q0o=o(" \u2014 "),VN=a("a"),G0o=o("QDQBertForMultipleChoice"),O0o=o(" (QDQBert model)"),X0o=l(),cb=a("li"),hne=a("strong"),V0o=o("rembert"),z0o=o(" \u2014 "),zN=a("a"),W0o=o("RemBertForMultipleChoice"),Q0o=o(" (RemBERT model)"),H0o=l(),fb=a("li"),pne=a("strong"),U0o=o("roberta"),J0o=o(" \u2014 "),WN=a("a"),Y0o=o("RobertaForMultipleChoice"),K0o=o(" (RoBERTa model)"),Z0o=l(),mb=a("li"),_ne=a("strong"),eLo=o("roformer"),oLo=o(" \u2014 "),QN=a("a"),rLo=o("RoFormerForMultipleChoice"),tLo=o(" (RoFormer model)"),aLo=l(),gb=a("li"),une=a("strong"),nLo=o("squeezebert"),sLo=o(" \u2014 "),HN=a("a"),lLo=o("SqueezeBertForMultipleChoice"),iLo=o(" (SqueezeBERT model)"),dLo=l(),hb=a("li"),bne=a("strong"),cLo=o("xlm"),fLo=o(" \u2014 "),UN=a("a"),mLo=o("XLMForMultipleChoice"),gLo=o(" (XLM model)"),hLo=l(),pb=a("li"),vne=a("strong"),pLo=o("xlm-roberta"),_Lo=o(" \u2014 "),JN=a("a"),uLo=o("XLMRobertaForMultipleChoice"),bLo=o(" (XLM-RoBERTa model)"),vLo=l(),_b=a("li"),Tne=a("strong"),TLo=o("xlm-roberta-xl"),FLo=o(" \u2014 "),YN=a("a"),CLo=o("XLMRobertaXLForMultipleChoice"),MLo=o(" (XLM-RoBERTa-XL model)"),ELo=l(),ub=a("li"),Fne=a("strong"),yLo=o("xlnet"),wLo=o(" \u2014 "),KN=a("a"),ALo=o("XLNetForMultipleChoice"),LLo=o(" (XLNet model)"),BLo=l(),bb=a("li"),Cne=a("strong"),xLo=o("yoso"),kLo=o(" \u2014 "),ZN=a("a"),RLo=o("YosoForMultipleChoice"),SLo=o(" (YOSO model)"),PLo=l(),vb=a("p"),$Lo=o("The model is set in evaluation mode by default using "),Mne=a("code"),ILo=o("model.eval()"),NLo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=a("code"),jLo=o("model.train()"),DLo=l(),yne=a("p"),qLo=o("Examples:"),GLo=l(),f(ky.$$.fragment),vke=l(),bd=a("h2"),Tb=a("a"),wne=a("span"),f(Ry.$$.fragment),OLo=l(),Ane=a("span"),XLo=o("AutoModelForNextSentencePrediction"),Tke=l(),tr=a("div"),f(Sy.$$.fragment),VLo=l(),vd=a("p"),zLo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Lne=a("code"),WLo=o("from_pretrained()"),QLo=o("class method or the "),Bne=a("code"),HLo=o("from_config()"),ULo=o(`class
method.`),JLo=l(),Py=a("p"),YLo=o("This class cannot be instantiated directly using "),xne=a("code"),KLo=o("__init__()"),ZLo=o(" (throws an error)."),e7o=l(),Yr=a("div"),f($y.$$.fragment),o7o=l(),kne=a("p"),r7o=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),t7o=l(),Td=a("p"),a7o=o(`Note:
Loading a model from its configuration file does `),Rne=a("strong"),n7o=o("not"),s7o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=a("code"),l7o=o("from_pretrained()"),i7o=o("to load the model weights."),d7o=l(),Pne=a("p"),c7o=o("Examples:"),f7o=l(),f(Iy.$$.fragment),m7o=l(),ze=a("div"),f(Ny.$$.fragment),g7o=l(),$ne=a("p"),h7o=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),p7o=l(),Ya=a("p"),_7o=o("The model class to instantiate is selected based on the "),Ine=a("code"),u7o=o("model_type"),b7o=o(` property of the config object (either
passed as an argument or loaded from `),Nne=a("code"),v7o=o("pretrained_model_name_or_path"),T7o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=a("code"),F7o=o("pretrained_model_name_or_path"),C7o=o(":"),M7o=l(),da=a("ul"),Fb=a("li"),Dne=a("strong"),E7o=o("bert"),y7o=o(" \u2014 "),ej=a("a"),w7o=o("BertForNextSentencePrediction"),A7o=o(" (BERT model)"),L7o=l(),Cb=a("li"),qne=a("strong"),B7o=o("fnet"),x7o=o(" \u2014 "),oj=a("a"),k7o=o("FNetForNextSentencePrediction"),R7o=o(" (FNet model)"),S7o=l(),Mb=a("li"),Gne=a("strong"),P7o=o("megatron-bert"),$7o=o(" \u2014 "),rj=a("a"),I7o=o("MegatronBertForNextSentencePrediction"),N7o=o(" (MegatronBert model)"),j7o=l(),Eb=a("li"),One=a("strong"),D7o=o("mobilebert"),q7o=o(" \u2014 "),tj=a("a"),G7o=o("MobileBertForNextSentencePrediction"),O7o=o(" (MobileBERT model)"),X7o=l(),yb=a("li"),Xne=a("strong"),V7o=o("qdqbert"),z7o=o(" \u2014 "),aj=a("a"),W7o=o("QDQBertForNextSentencePrediction"),Q7o=o(" (QDQBert model)"),H7o=l(),wb=a("p"),U7o=o("The model is set in evaluation mode by default using "),Vne=a("code"),J7o=o("model.eval()"),Y7o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=a("code"),K7o=o("model.train()"),Z7o=l(),Wne=a("p"),e8o=o("Examples:"),o8o=l(),f(jy.$$.fragment),Fke=l(),Fd=a("h2"),Ab=a("a"),Qne=a("span"),f(Dy.$$.fragment),r8o=l(),Hne=a("span"),t8o=o("AutoModelForTokenClassification"),Cke=l(),ar=a("div"),f(qy.$$.fragment),a8o=l(),Cd=a("p"),n8o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Une=a("code"),s8o=o("from_pretrained()"),l8o=o("class method or the "),Jne=a("code"),i8o=o("from_config()"),d8o=o(`class
method.`),c8o=l(),Gy=a("p"),f8o=o("This class cannot be instantiated directly using "),Yne=a("code"),m8o=o("__init__()"),g8o=o(" (throws an error)."),h8o=l(),Kr=a("div"),f(Oy.$$.fragment),p8o=l(),Kne=a("p"),_8o=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),u8o=l(),Md=a("p"),b8o=o(`Note:
Loading a model from its configuration file does `),Zne=a("strong"),v8o=o("not"),T8o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ese=a("code"),F8o=o("from_pretrained()"),C8o=o("to load the model weights."),M8o=l(),ose=a("p"),E8o=o("Examples:"),y8o=l(),f(Xy.$$.fragment),w8o=l(),We=a("div"),f(Vy.$$.fragment),A8o=l(),rse=a("p"),L8o=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),B8o=l(),Ka=a("p"),x8o=o("The model class to instantiate is selected based on the "),tse=a("code"),k8o=o("model_type"),R8o=o(` property of the config object (either
passed as an argument or loaded from `),ase=a("code"),S8o=o("pretrained_model_name_or_path"),P8o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=a("code"),$8o=o("pretrained_model_name_or_path"),I8o=o(":"),N8o=l(),D=a("ul"),Lb=a("li"),sse=a("strong"),j8o=o("albert"),D8o=o(" \u2014 "),nj=a("a"),q8o=o("AlbertForTokenClassification"),G8o=o(" (ALBERT model)"),O8o=l(),Bb=a("li"),lse=a("strong"),X8o=o("bert"),V8o=o(" \u2014 "),sj=a("a"),z8o=o("BertForTokenClassification"),W8o=o(" (BERT model)"),Q8o=l(),xb=a("li"),ise=a("strong"),H8o=o("big_bird"),U8o=o(" \u2014 "),lj=a("a"),J8o=o("BigBirdForTokenClassification"),Y8o=o(" (BigBird model)"),K8o=l(),kb=a("li"),dse=a("strong"),Z8o=o("camembert"),e9o=o(" \u2014 "),ij=a("a"),o9o=o("CamembertForTokenClassification"),r9o=o(" (CamemBERT model)"),t9o=l(),Rb=a("li"),cse=a("strong"),a9o=o("canine"),n9o=o(" \u2014 "),dj=a("a"),s9o=o("CanineForTokenClassification"),l9o=o(" (Canine model)"),i9o=l(),Sb=a("li"),fse=a("strong"),d9o=o("convbert"),c9o=o(" \u2014 "),cj=a("a"),f9o=o("ConvBertForTokenClassification"),m9o=o(" (ConvBERT model)"),g9o=l(),Pb=a("li"),mse=a("strong"),h9o=o("data2vec-text"),p9o=o(" \u2014 "),fj=a("a"),_9o=o("Data2VecTextForTokenClassification"),u9o=o(" (Data2VecText model)"),b9o=l(),$b=a("li"),gse=a("strong"),v9o=o("deberta"),T9o=o(" \u2014 "),mj=a("a"),F9o=o("DebertaForTokenClassification"),C9o=o(" (DeBERTa model)"),M9o=l(),Ib=a("li"),hse=a("strong"),E9o=o("deberta-v2"),y9o=o(" \u2014 "),gj=a("a"),w9o=o("DebertaV2ForTokenClassification"),A9o=o(" (DeBERTa-v2 model)"),L9o=l(),Nb=a("li"),pse=a("strong"),B9o=o("distilbert"),x9o=o(" \u2014 "),hj=a("a"),k9o=o("DistilBertForTokenClassification"),R9o=o(" (DistilBERT model)"),S9o=l(),jb=a("li"),_se=a("strong"),P9o=o("electra"),$9o=o(" \u2014 "),pj=a("a"),I9o=o("ElectraForTokenClassification"),N9o=o(" (ELECTRA model)"),j9o=l(),Db=a("li"),use=a("strong"),D9o=o("flaubert"),q9o=o(" \u2014 "),_j=a("a"),G9o=o("FlaubertForTokenClassification"),O9o=o(" (FlauBERT model)"),X9o=l(),qb=a("li"),bse=a("strong"),V9o=o("fnet"),z9o=o(" \u2014 "),uj=a("a"),W9o=o("FNetForTokenClassification"),Q9o=o(" (FNet model)"),H9o=l(),Gb=a("li"),vse=a("strong"),U9o=o("funnel"),J9o=o(" \u2014 "),bj=a("a"),Y9o=o("FunnelForTokenClassification"),K9o=o(" (Funnel Transformer model)"),Z9o=l(),Ob=a("li"),Tse=a("strong"),eBo=o("gpt2"),oBo=o(" \u2014 "),vj=a("a"),rBo=o("GPT2ForTokenClassification"),tBo=o(" (OpenAI GPT-2 model)"),aBo=l(),Xb=a("li"),Fse=a("strong"),nBo=o("ibert"),sBo=o(" \u2014 "),Tj=a("a"),lBo=o("IBertForTokenClassification"),iBo=o(" (I-BERT model)"),dBo=l(),Vb=a("li"),Cse=a("strong"),cBo=o("layoutlm"),fBo=o(" \u2014 "),Fj=a("a"),mBo=o("LayoutLMForTokenClassification"),gBo=o(" (LayoutLM model)"),hBo=l(),zb=a("li"),Mse=a("strong"),pBo=o("layoutlmv2"),_Bo=o(" \u2014 "),Cj=a("a"),uBo=o("LayoutLMv2ForTokenClassification"),bBo=o(" (LayoutLMv2 model)"),vBo=l(),Wb=a("li"),Ese=a("strong"),TBo=o("longformer"),FBo=o(" \u2014 "),Mj=a("a"),CBo=o("LongformerForTokenClassification"),MBo=o(" (Longformer model)"),EBo=l(),Qb=a("li"),yse=a("strong"),yBo=o("megatron-bert"),wBo=o(" \u2014 "),Ej=a("a"),ABo=o("MegatronBertForTokenClassification"),LBo=o(" (MegatronBert model)"),BBo=l(),Hb=a("li"),wse=a("strong"),xBo=o("mobilebert"),kBo=o(" \u2014 "),yj=a("a"),RBo=o("MobileBertForTokenClassification"),SBo=o(" (MobileBERT model)"),PBo=l(),Ub=a("li"),Ase=a("strong"),$Bo=o("mpnet"),IBo=o(" \u2014 "),wj=a("a"),NBo=o("MPNetForTokenClassification"),jBo=o(" (MPNet model)"),DBo=l(),Jb=a("li"),Lse=a("strong"),qBo=o("nystromformer"),GBo=o(" \u2014 "),Aj=a("a"),OBo=o("NystromformerForTokenClassification"),XBo=o(" (Nystromformer model)"),VBo=l(),Yb=a("li"),Bse=a("strong"),zBo=o("qdqbert"),WBo=o(" \u2014 "),Lj=a("a"),QBo=o("QDQBertForTokenClassification"),HBo=o(" (QDQBert model)"),UBo=l(),Kb=a("li"),xse=a("strong"),JBo=o("rembert"),YBo=o(" \u2014 "),Bj=a("a"),KBo=o("RemBertForTokenClassification"),ZBo=o(" (RemBERT model)"),exo=l(),Zb=a("li"),kse=a("strong"),oxo=o("roberta"),rxo=o(" \u2014 "),xj=a("a"),txo=o("RobertaForTokenClassification"),axo=o(" (RoBERTa model)"),nxo=l(),e3=a("li"),Rse=a("strong"),sxo=o("roformer"),lxo=o(" \u2014 "),kj=a("a"),ixo=o("RoFormerForTokenClassification"),dxo=o(" (RoFormer model)"),cxo=l(),o3=a("li"),Sse=a("strong"),fxo=o("squeezebert"),mxo=o(" \u2014 "),Rj=a("a"),gxo=o("SqueezeBertForTokenClassification"),hxo=o(" (SqueezeBERT model)"),pxo=l(),r3=a("li"),Pse=a("strong"),_xo=o("xlm"),uxo=o(" \u2014 "),Sj=a("a"),bxo=o("XLMForTokenClassification"),vxo=o(" (XLM model)"),Txo=l(),t3=a("li"),$se=a("strong"),Fxo=o("xlm-roberta"),Cxo=o(" \u2014 "),Pj=a("a"),Mxo=o("XLMRobertaForTokenClassification"),Exo=o(" (XLM-RoBERTa model)"),yxo=l(),a3=a("li"),Ise=a("strong"),wxo=o("xlm-roberta-xl"),Axo=o(" \u2014 "),$j=a("a"),Lxo=o("XLMRobertaXLForTokenClassification"),Bxo=o(" (XLM-RoBERTa-XL model)"),xxo=l(),n3=a("li"),Nse=a("strong"),kxo=o("xlnet"),Rxo=o(" \u2014 "),Ij=a("a"),Sxo=o("XLNetForTokenClassification"),Pxo=o(" (XLNet model)"),$xo=l(),s3=a("li"),jse=a("strong"),Ixo=o("yoso"),Nxo=o(" \u2014 "),Nj=a("a"),jxo=o("YosoForTokenClassification"),Dxo=o(" (YOSO model)"),qxo=l(),l3=a("p"),Gxo=o("The model is set in evaluation mode by default using "),Dse=a("code"),Oxo=o("model.eval()"),Xxo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=a("code"),Vxo=o("model.train()"),zxo=l(),Gse=a("p"),Wxo=o("Examples:"),Qxo=l(),f(zy.$$.fragment),Mke=l(),Ed=a("h2"),i3=a("a"),Ose=a("span"),f(Wy.$$.fragment),Hxo=l(),Xse=a("span"),Uxo=o("AutoModelForQuestionAnswering"),Eke=l(),nr=a("div"),f(Qy.$$.fragment),Jxo=l(),yd=a("p"),Yxo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vse=a("code"),Kxo=o("from_pretrained()"),Zxo=o("class method or the "),zse=a("code"),eko=o("from_config()"),oko=o(`class
method.`),rko=l(),Hy=a("p"),tko=o("This class cannot be instantiated directly using "),Wse=a("code"),ako=o("__init__()"),nko=o(" (throws an error)."),sko=l(),Zr=a("div"),f(Uy.$$.fragment),lko=l(),Qse=a("p"),iko=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),dko=l(),wd=a("p"),cko=o(`Note:
Loading a model from its configuration file does `),Hse=a("strong"),fko=o("not"),mko=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=a("code"),gko=o("from_pretrained()"),hko=o("to load the model weights."),pko=l(),Jse=a("p"),_ko=o("Examples:"),uko=l(),f(Jy.$$.fragment),bko=l(),Qe=a("div"),f(Yy.$$.fragment),vko=l(),Yse=a("p"),Tko=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),Fko=l(),Za=a("p"),Cko=o("The model class to instantiate is selected based on the "),Kse=a("code"),Mko=o("model_type"),Eko=o(` property of the config object (either
passed as an argument or loaded from `),Zse=a("code"),yko=o("pretrained_model_name_or_path"),wko=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=a("code"),Ako=o("pretrained_model_name_or_path"),Lko=o(":"),Bko=l(),R=a("ul"),d3=a("li"),ole=a("strong"),xko=o("albert"),kko=o(" \u2014 "),jj=a("a"),Rko=o("AlbertForQuestionAnswering"),Sko=o(" (ALBERT model)"),Pko=l(),c3=a("li"),rle=a("strong"),$ko=o("bart"),Iko=o(" \u2014 "),Dj=a("a"),Nko=o("BartForQuestionAnswering"),jko=o(" (BART model)"),Dko=l(),f3=a("li"),tle=a("strong"),qko=o("bert"),Gko=o(" \u2014 "),qj=a("a"),Oko=o("BertForQuestionAnswering"),Xko=o(" (BERT model)"),Vko=l(),m3=a("li"),ale=a("strong"),zko=o("big_bird"),Wko=o(" \u2014 "),Gj=a("a"),Qko=o("BigBirdForQuestionAnswering"),Hko=o(" (BigBird model)"),Uko=l(),g3=a("li"),nle=a("strong"),Jko=o("bigbird_pegasus"),Yko=o(" \u2014 "),Oj=a("a"),Kko=o("BigBirdPegasusForQuestionAnswering"),Zko=o(" (BigBirdPegasus model)"),eRo=l(),h3=a("li"),sle=a("strong"),oRo=o("camembert"),rRo=o(" \u2014 "),Xj=a("a"),tRo=o("CamembertForQuestionAnswering"),aRo=o(" (CamemBERT model)"),nRo=l(),p3=a("li"),lle=a("strong"),sRo=o("canine"),lRo=o(" \u2014 "),Vj=a("a"),iRo=o("CanineForQuestionAnswering"),dRo=o(" (Canine model)"),cRo=l(),_3=a("li"),ile=a("strong"),fRo=o("convbert"),mRo=o(" \u2014 "),zj=a("a"),gRo=o("ConvBertForQuestionAnswering"),hRo=o(" (ConvBERT model)"),pRo=l(),u3=a("li"),dle=a("strong"),_Ro=o("data2vec-text"),uRo=o(" \u2014 "),Wj=a("a"),bRo=o("Data2VecTextForQuestionAnswering"),vRo=o(" (Data2VecText model)"),TRo=l(),b3=a("li"),cle=a("strong"),FRo=o("deberta"),CRo=o(" \u2014 "),Qj=a("a"),MRo=o("DebertaForQuestionAnswering"),ERo=o(" (DeBERTa model)"),yRo=l(),v3=a("li"),fle=a("strong"),wRo=o("deberta-v2"),ARo=o(" \u2014 "),Hj=a("a"),LRo=o("DebertaV2ForQuestionAnswering"),BRo=o(" (DeBERTa-v2 model)"),xRo=l(),T3=a("li"),mle=a("strong"),kRo=o("distilbert"),RRo=o(" \u2014 "),Uj=a("a"),SRo=o("DistilBertForQuestionAnswering"),PRo=o(" (DistilBERT model)"),$Ro=l(),F3=a("li"),gle=a("strong"),IRo=o("electra"),NRo=o(" \u2014 "),Jj=a("a"),jRo=o("ElectraForQuestionAnswering"),DRo=o(" (ELECTRA model)"),qRo=l(),C3=a("li"),hle=a("strong"),GRo=o("flaubert"),ORo=o(" \u2014 "),Yj=a("a"),XRo=o("FlaubertForQuestionAnsweringSimple"),VRo=o(" (FlauBERT model)"),zRo=l(),M3=a("li"),ple=a("strong"),WRo=o("fnet"),QRo=o(" \u2014 "),Kj=a("a"),HRo=o("FNetForQuestionAnswering"),URo=o(" (FNet model)"),JRo=l(),E3=a("li"),_le=a("strong"),YRo=o("funnel"),KRo=o(" \u2014 "),Zj=a("a"),ZRo=o("FunnelForQuestionAnswering"),eSo=o(" (Funnel Transformer model)"),oSo=l(),y3=a("li"),ule=a("strong"),rSo=o("gptj"),tSo=o(" \u2014 "),eD=a("a"),aSo=o("GPTJForQuestionAnswering"),nSo=o(" (GPT-J model)"),sSo=l(),w3=a("li"),ble=a("strong"),lSo=o("ibert"),iSo=o(" \u2014 "),oD=a("a"),dSo=o("IBertForQuestionAnswering"),cSo=o(" (I-BERT model)"),fSo=l(),A3=a("li"),vle=a("strong"),mSo=o("layoutlmv2"),gSo=o(" \u2014 "),rD=a("a"),hSo=o("LayoutLMv2ForQuestionAnswering"),pSo=o(" (LayoutLMv2 model)"),_So=l(),L3=a("li"),Tle=a("strong"),uSo=o("led"),bSo=o(" \u2014 "),tD=a("a"),vSo=o("LEDForQuestionAnswering"),TSo=o(" (LED model)"),FSo=l(),B3=a("li"),Fle=a("strong"),CSo=o("longformer"),MSo=o(" \u2014 "),aD=a("a"),ESo=o("LongformerForQuestionAnswering"),ySo=o(" (Longformer model)"),wSo=l(),x3=a("li"),Cle=a("strong"),ASo=o("lxmert"),LSo=o(" \u2014 "),nD=a("a"),BSo=o("LxmertForQuestionAnswering"),xSo=o(" (LXMERT model)"),kSo=l(),k3=a("li"),Mle=a("strong"),RSo=o("mbart"),SSo=o(" \u2014 "),sD=a("a"),PSo=o("MBartForQuestionAnswering"),$So=o(" (mBART model)"),ISo=l(),R3=a("li"),Ele=a("strong"),NSo=o("megatron-bert"),jSo=o(" \u2014 "),lD=a("a"),DSo=o("MegatronBertForQuestionAnswering"),qSo=o(" (MegatronBert model)"),GSo=l(),S3=a("li"),yle=a("strong"),OSo=o("mobilebert"),XSo=o(" \u2014 "),iD=a("a"),VSo=o("MobileBertForQuestionAnswering"),zSo=o(" (MobileBERT model)"),WSo=l(),P3=a("li"),wle=a("strong"),QSo=o("mpnet"),HSo=o(" \u2014 "),dD=a("a"),USo=o("MPNetForQuestionAnswering"),JSo=o(" (MPNet model)"),YSo=l(),$3=a("li"),Ale=a("strong"),KSo=o("nystromformer"),ZSo=o(" \u2014 "),cD=a("a"),ePo=o("NystromformerForQuestionAnswering"),oPo=o(" (Nystromformer model)"),rPo=l(),I3=a("li"),Lle=a("strong"),tPo=o("qdqbert"),aPo=o(" \u2014 "),fD=a("a"),nPo=o("QDQBertForQuestionAnswering"),sPo=o(" (QDQBert model)"),lPo=l(),N3=a("li"),Ble=a("strong"),iPo=o("reformer"),dPo=o(" \u2014 "),mD=a("a"),cPo=o("ReformerForQuestionAnswering"),fPo=o(" (Reformer model)"),mPo=l(),j3=a("li"),xle=a("strong"),gPo=o("rembert"),hPo=o(" \u2014 "),gD=a("a"),pPo=o("RemBertForQuestionAnswering"),_Po=o(" (RemBERT model)"),uPo=l(),D3=a("li"),kle=a("strong"),bPo=o("roberta"),vPo=o(" \u2014 "),hD=a("a"),TPo=o("RobertaForQuestionAnswering"),FPo=o(" (RoBERTa model)"),CPo=l(),q3=a("li"),Rle=a("strong"),MPo=o("roformer"),EPo=o(" \u2014 "),pD=a("a"),yPo=o("RoFormerForQuestionAnswering"),wPo=o(" (RoFormer model)"),APo=l(),G3=a("li"),Sle=a("strong"),LPo=o("splinter"),BPo=o(" \u2014 "),_D=a("a"),xPo=o("SplinterForQuestionAnswering"),kPo=o(" (Splinter model)"),RPo=l(),O3=a("li"),Ple=a("strong"),SPo=o("squeezebert"),PPo=o(" \u2014 "),uD=a("a"),$Po=o("SqueezeBertForQuestionAnswering"),IPo=o(" (SqueezeBERT model)"),NPo=l(),X3=a("li"),$le=a("strong"),jPo=o("xlm"),DPo=o(" \u2014 "),bD=a("a"),qPo=o("XLMForQuestionAnsweringSimple"),GPo=o(" (XLM model)"),OPo=l(),V3=a("li"),Ile=a("strong"),XPo=o("xlm-roberta"),VPo=o(" \u2014 "),vD=a("a"),zPo=o("XLMRobertaForQuestionAnswering"),WPo=o(" (XLM-RoBERTa model)"),QPo=l(),z3=a("li"),Nle=a("strong"),HPo=o("xlm-roberta-xl"),UPo=o(" \u2014 "),TD=a("a"),JPo=o("XLMRobertaXLForQuestionAnswering"),YPo=o(" (XLM-RoBERTa-XL model)"),KPo=l(),W3=a("li"),jle=a("strong"),ZPo=o("xlnet"),e$o=o(" \u2014 "),FD=a("a"),o$o=o("XLNetForQuestionAnsweringSimple"),r$o=o(" (XLNet model)"),t$o=l(),Q3=a("li"),Dle=a("strong"),a$o=o("yoso"),n$o=o(" \u2014 "),CD=a("a"),s$o=o("YosoForQuestionAnswering"),l$o=o(" (YOSO model)"),i$o=l(),H3=a("p"),d$o=o("The model is set in evaluation mode by default using "),qle=a("code"),c$o=o("model.eval()"),f$o=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=a("code"),m$o=o("model.train()"),g$o=l(),Ole=a("p"),h$o=o("Examples:"),p$o=l(),f(Ky.$$.fragment),yke=l(),Ad=a("h2"),U3=a("a"),Xle=a("span"),f(Zy.$$.fragment),_$o=l(),Vle=a("span"),u$o=o("AutoModelForTableQuestionAnswering"),wke=l(),sr=a("div"),f(ew.$$.fragment),b$o=l(),Ld=a("p"),v$o=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zle=a("code"),T$o=o("from_pretrained()"),F$o=o("class method or the "),Wle=a("code"),C$o=o("from_config()"),M$o=o(`class
method.`),E$o=l(),ow=a("p"),y$o=o("This class cannot be instantiated directly using "),Qle=a("code"),w$o=o("__init__()"),A$o=o(" (throws an error)."),L$o=l(),et=a("div"),f(rw.$$.fragment),B$o=l(),Hle=a("p"),x$o=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),k$o=l(),Bd=a("p"),R$o=o(`Note:
Loading a model from its configuration file does `),Ule=a("strong"),S$o=o("not"),P$o=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Jle=a("code"),$$o=o("from_pretrained()"),I$o=o("to load the model weights."),N$o=l(),Yle=a("p"),j$o=o("Examples:"),D$o=l(),f(tw.$$.fragment),q$o=l(),He=a("div"),f(aw.$$.fragment),G$o=l(),Kle=a("p"),O$o=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),X$o=l(),en=a("p"),V$o=o("The model class to instantiate is selected based on the "),Zle=a("code"),z$o=o("model_type"),W$o=o(` property of the config object (either
passed as an argument or loaded from `),eie=a("code"),Q$o=o("pretrained_model_name_or_path"),H$o=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oie=a("code"),U$o=o("pretrained_model_name_or_path"),J$o=o(":"),Y$o=l(),rie=a("ul"),J3=a("li"),tie=a("strong"),K$o=o("tapas"),Z$o=o(" \u2014 "),MD=a("a"),eIo=o("TapasForQuestionAnswering"),oIo=o(" (TAPAS model)"),rIo=l(),Y3=a("p"),tIo=o("The model is set in evaluation mode by default using "),aie=a("code"),aIo=o("model.eval()"),nIo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=a("code"),sIo=o("model.train()"),lIo=l(),sie=a("p"),iIo=o("Examples:"),dIo=l(),f(nw.$$.fragment),Ake=l(),xd=a("h2"),K3=a("a"),lie=a("span"),f(sw.$$.fragment),cIo=l(),iie=a("span"),fIo=o("AutoModelForImageClassification"),Lke=l(),lr=a("div"),f(lw.$$.fragment),mIo=l(),kd=a("p"),gIo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),die=a("code"),hIo=o("from_pretrained()"),pIo=o("class method or the "),cie=a("code"),_Io=o("from_config()"),uIo=o(`class
method.`),bIo=l(),iw=a("p"),vIo=o("This class cannot be instantiated directly using "),fie=a("code"),TIo=o("__init__()"),FIo=o(" (throws an error)."),CIo=l(),ot=a("div"),f(dw.$$.fragment),MIo=l(),mie=a("p"),EIo=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),yIo=l(),Rd=a("p"),wIo=o(`Note:
Loading a model from its configuration file does `),gie=a("strong"),AIo=o("not"),LIo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),hie=a("code"),BIo=o("from_pretrained()"),xIo=o("to load the model weights."),kIo=l(),pie=a("p"),RIo=o("Examples:"),SIo=l(),f(cw.$$.fragment),PIo=l(),Ue=a("div"),f(fw.$$.fragment),$Io=l(),_ie=a("p"),IIo=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),NIo=l(),on=a("p"),jIo=o("The model class to instantiate is selected based on the "),uie=a("code"),DIo=o("model_type"),qIo=o(` property of the config object (either
passed as an argument or loaded from `),bie=a("code"),GIo=o("pretrained_model_name_or_path"),OIo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=a("code"),XIo=o("pretrained_model_name_or_path"),VIo=o(":"),zIo=l(),me=a("ul"),Z3=a("li"),Tie=a("strong"),WIo=o("beit"),QIo=o(" \u2014 "),ED=a("a"),HIo=o("BeitForImageClassification"),UIo=o(" (BEiT model)"),JIo=l(),e5=a("li"),Fie=a("strong"),YIo=o("convnext"),KIo=o(" \u2014 "),yD=a("a"),ZIo=o("ConvNextForImageClassification"),eNo=o(" (ConvNext model)"),oNo=l(),qs=a("li"),Cie=a("strong"),rNo=o("deit"),tNo=o(" \u2014 "),wD=a("a"),aNo=o("DeiTForImageClassification"),nNo=o(" or "),AD=a("a"),sNo=o("DeiTForImageClassificationWithTeacher"),lNo=o(" (DeiT model)"),iNo=l(),o5=a("li"),Mie=a("strong"),dNo=o("imagegpt"),cNo=o(" \u2014 "),LD=a("a"),fNo=o("ImageGPTForImageClassification"),mNo=o(" (ImageGPT model)"),gNo=l(),ma=a("li"),Eie=a("strong"),hNo=o("perceiver"),pNo=o(" \u2014 "),BD=a("a"),_No=o("PerceiverForImageClassificationLearned"),uNo=o(" or "),xD=a("a"),bNo=o("PerceiverForImageClassificationFourier"),vNo=o(" or "),kD=a("a"),TNo=o("PerceiverForImageClassificationConvProcessing"),FNo=o(" (Perceiver model)"),CNo=l(),r5=a("li"),yie=a("strong"),MNo=o("poolformer"),ENo=o(" \u2014 "),RD=a("a"),yNo=o("PoolFormerForImageClassification"),wNo=o(" (PoolFormer model)"),ANo=l(),t5=a("li"),wie=a("strong"),LNo=o("resnet"),BNo=o(" \u2014 "),SD=a("a"),xNo=o("ResNetForImageClassification"),kNo=o(" (ResNet model)"),RNo=l(),a5=a("li"),Aie=a("strong"),SNo=o("segformer"),PNo=o(" \u2014 "),PD=a("a"),$No=o("SegformerForImageClassification"),INo=o(" (SegFormer model)"),NNo=l(),n5=a("li"),Lie=a("strong"),jNo=o("swin"),DNo=o(" \u2014 "),$D=a("a"),qNo=o("SwinForImageClassification"),GNo=o(" (Swin model)"),ONo=l(),s5=a("li"),Bie=a("strong"),XNo=o("van"),VNo=o(" \u2014 "),ID=a("a"),zNo=o("VanForImageClassification"),WNo=o(" (VAN model)"),QNo=l(),l5=a("li"),xie=a("strong"),HNo=o("vit"),UNo=o(" \u2014 "),ND=a("a"),JNo=o("ViTForImageClassification"),YNo=o(" (ViT model)"),KNo=l(),i5=a("p"),ZNo=o("The model is set in evaluation mode by default using "),kie=a("code"),ejo=o("model.eval()"),ojo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=a("code"),rjo=o("model.train()"),tjo=l(),Sie=a("p"),ajo=o("Examples:"),njo=l(),f(mw.$$.fragment),Bke=l(),Sd=a("h2"),d5=a("a"),Pie=a("span"),f(gw.$$.fragment),sjo=l(),$ie=a("span"),ljo=o("AutoModelForVision2Seq"),xke=l(),ir=a("div"),f(hw.$$.fragment),ijo=l(),Pd=a("p"),djo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Iie=a("code"),cjo=o("from_pretrained()"),fjo=o("class method or the "),Nie=a("code"),mjo=o("from_config()"),gjo=o(`class
method.`),hjo=l(),pw=a("p"),pjo=o("This class cannot be instantiated directly using "),jie=a("code"),_jo=o("__init__()"),ujo=o(" (throws an error)."),bjo=l(),rt=a("div"),f(_w.$$.fragment),vjo=l(),Die=a("p"),Tjo=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),Fjo=l(),$d=a("p"),Cjo=o(`Note:
Loading a model from its configuration file does `),qie=a("strong"),Mjo=o("not"),Ejo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Gie=a("code"),yjo=o("from_pretrained()"),wjo=o("to load the model weights."),Ajo=l(),Oie=a("p"),Ljo=o("Examples:"),Bjo=l(),f(uw.$$.fragment),xjo=l(),Je=a("div"),f(bw.$$.fragment),kjo=l(),Xie=a("p"),Rjo=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Sjo=l(),rn=a("p"),Pjo=o("The model class to instantiate is selected based on the "),Vie=a("code"),$jo=o("model_type"),Ijo=o(` property of the config object (either
passed as an argument or loaded from `),zie=a("code"),Njo=o("pretrained_model_name_or_path"),jjo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=a("code"),Djo=o("pretrained_model_name_or_path"),qjo=o(":"),Gjo=l(),Qie=a("ul"),c5=a("li"),Hie=a("strong"),Ojo=o("vision-encoder-decoder"),Xjo=o(" \u2014 "),jD=a("a"),Vjo=o("VisionEncoderDecoderModel"),zjo=o(" (Vision Encoder decoder model)"),Wjo=l(),f5=a("p"),Qjo=o("The model is set in evaluation mode by default using "),Uie=a("code"),Hjo=o("model.eval()"),Ujo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=a("code"),Jjo=o("model.train()"),Yjo=l(),Yie=a("p"),Kjo=o("Examples:"),Zjo=l(),f(vw.$$.fragment),kke=l(),Id=a("h2"),m5=a("a"),Kie=a("span"),f(Tw.$$.fragment),eDo=l(),Zie=a("span"),oDo=o("AutoModelForAudioClassification"),Rke=l(),dr=a("div"),f(Fw.$$.fragment),rDo=l(),Nd=a("p"),tDo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ede=a("code"),aDo=o("from_pretrained()"),nDo=o("class method or the "),ode=a("code"),sDo=o("from_config()"),lDo=o(`class
method.`),iDo=l(),Cw=a("p"),dDo=o("This class cannot be instantiated directly using "),rde=a("code"),cDo=o("__init__()"),fDo=o(" (throws an error)."),mDo=l(),tt=a("div"),f(Mw.$$.fragment),gDo=l(),tde=a("p"),hDo=o("Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),pDo=l(),jd=a("p"),_Do=o(`Note:
Loading a model from its configuration file does `),ade=a("strong"),uDo=o("not"),bDo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=a("code"),vDo=o("from_pretrained()"),TDo=o("to load the model weights."),FDo=l(),sde=a("p"),CDo=o("Examples:"),MDo=l(),f(Ew.$$.fragment),EDo=l(),Ye=a("div"),f(yw.$$.fragment),yDo=l(),lde=a("p"),wDo=o("Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),ADo=l(),tn=a("p"),LDo=o("The model class to instantiate is selected based on the "),ide=a("code"),BDo=o("model_type"),xDo=o(` property of the config object (either
passed as an argument or loaded from `),dde=a("code"),kDo=o("pretrained_model_name_or_path"),RDo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=a("code"),SDo=o("pretrained_model_name_or_path"),PDo=o(":"),$Do=l(),ke=a("ul"),g5=a("li"),fde=a("strong"),IDo=o("data2vec-audio"),NDo=o(" \u2014 "),DD=a("a"),jDo=o("Data2VecAudioForSequenceClassification"),DDo=o(" (Data2VecAudio model)"),qDo=l(),h5=a("li"),mde=a("strong"),GDo=o("hubert"),ODo=o(" \u2014 "),qD=a("a"),XDo=o("HubertForSequenceClassification"),VDo=o(" (Hubert model)"),zDo=l(),p5=a("li"),gde=a("strong"),WDo=o("sew"),QDo=o(" \u2014 "),GD=a("a"),HDo=o("SEWForSequenceClassification"),UDo=o(" (SEW model)"),JDo=l(),_5=a("li"),hde=a("strong"),YDo=o("sew-d"),KDo=o(" \u2014 "),OD=a("a"),ZDo=o("SEWDForSequenceClassification"),eqo=o(" (SEW-D model)"),oqo=l(),u5=a("li"),pde=a("strong"),rqo=o("unispeech"),tqo=o(" \u2014 "),XD=a("a"),aqo=o("UniSpeechForSequenceClassification"),nqo=o(" (UniSpeech model)"),sqo=l(),b5=a("li"),_de=a("strong"),lqo=o("unispeech-sat"),iqo=o(" \u2014 "),VD=a("a"),dqo=o("UniSpeechSatForSequenceClassification"),cqo=o(" (UniSpeechSat model)"),fqo=l(),v5=a("li"),ude=a("strong"),mqo=o("wav2vec2"),gqo=o(" \u2014 "),zD=a("a"),hqo=o("Wav2Vec2ForSequenceClassification"),pqo=o(" (Wav2Vec2 model)"),_qo=l(),T5=a("li"),bde=a("strong"),uqo=o("wavlm"),bqo=o(" \u2014 "),WD=a("a"),vqo=o("WavLMForSequenceClassification"),Tqo=o(" (WavLM model)"),Fqo=l(),F5=a("p"),Cqo=o("The model is set in evaluation mode by default using "),vde=a("code"),Mqo=o("model.eval()"),Eqo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=a("code"),yqo=o("model.train()"),wqo=l(),Fde=a("p"),Aqo=o("Examples:"),Lqo=l(),f(ww.$$.fragment),Ske=l(),Dd=a("h2"),C5=a("a"),Cde=a("span"),f(Aw.$$.fragment),Bqo=l(),Mde=a("span"),xqo=o("AutoModelForAudioFrameClassification"),Pke=l(),cr=a("div"),f(Lw.$$.fragment),kqo=l(),qd=a("p"),Rqo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ede=a("code"),Sqo=o("from_pretrained()"),Pqo=o("class method or the "),yde=a("code"),$qo=o("from_config()"),Iqo=o(`class
method.`),Nqo=l(),Bw=a("p"),jqo=o("This class cannot be instantiated directly using "),wde=a("code"),Dqo=o("__init__()"),qqo=o(" (throws an error)."),Gqo=l(),at=a("div"),f(xw.$$.fragment),Oqo=l(),Ade=a("p"),Xqo=o("Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),Vqo=l(),Gd=a("p"),zqo=o(`Note:
Loading a model from its configuration file does `),Lde=a("strong"),Wqo=o("not"),Qqo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Bde=a("code"),Hqo=o("from_pretrained()"),Uqo=o("to load the model weights."),Jqo=l(),xde=a("p"),Yqo=o("Examples:"),Kqo=l(),f(kw.$$.fragment),Zqo=l(),Ke=a("div"),f(Rw.$$.fragment),eGo=l(),kde=a("p"),oGo=o("Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),rGo=l(),an=a("p"),tGo=o("The model class to instantiate is selected based on the "),Rde=a("code"),aGo=o("model_type"),nGo=o(` property of the config object (either
passed as an argument or loaded from `),Sde=a("code"),sGo=o("pretrained_model_name_or_path"),lGo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=a("code"),iGo=o("pretrained_model_name_or_path"),dGo=o(":"),cGo=l(),nn=a("ul"),M5=a("li"),$de=a("strong"),fGo=o("data2vec-audio"),mGo=o(" \u2014 "),QD=a("a"),gGo=o("Data2VecAudioForAudioFrameClassification"),hGo=o(" (Data2VecAudio model)"),pGo=l(),E5=a("li"),Ide=a("strong"),_Go=o("unispeech-sat"),uGo=o(" \u2014 "),HD=a("a"),bGo=o("UniSpeechSatForAudioFrameClassification"),vGo=o(" (UniSpeechSat model)"),TGo=l(),y5=a("li"),Nde=a("strong"),FGo=o("wav2vec2"),CGo=o(" \u2014 "),UD=a("a"),MGo=o("Wav2Vec2ForAudioFrameClassification"),EGo=o(" (Wav2Vec2 model)"),yGo=l(),w5=a("li"),jde=a("strong"),wGo=o("wavlm"),AGo=o(" \u2014 "),JD=a("a"),LGo=o("WavLMForAudioFrameClassification"),BGo=o(" (WavLM model)"),xGo=l(),A5=a("p"),kGo=o("The model is set in evaluation mode by default using "),Dde=a("code"),RGo=o("model.eval()"),SGo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=a("code"),PGo=o("model.train()"),$Go=l(),Gde=a("p"),IGo=o("Examples:"),NGo=l(),f(Sw.$$.fragment),$ke=l(),Od=a("h2"),L5=a("a"),Ode=a("span"),f(Pw.$$.fragment),jGo=l(),Xde=a("span"),DGo=o("AutoModelForCTC"),Ike=l(),fr=a("div"),f($w.$$.fragment),qGo=l(),Xd=a("p"),GGo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Vde=a("code"),OGo=o("from_pretrained()"),XGo=o("class method or the "),zde=a("code"),VGo=o("from_config()"),zGo=o(`class
method.`),WGo=l(),Iw=a("p"),QGo=o("This class cannot be instantiated directly using "),Wde=a("code"),HGo=o("__init__()"),UGo=o(" (throws an error)."),JGo=l(),nt=a("div"),f(Nw.$$.fragment),YGo=l(),Qde=a("p"),KGo=o("Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),ZGo=l(),Vd=a("p"),eOo=o(`Note:
Loading a model from its configuration file does `),Hde=a("strong"),oOo=o("not"),rOo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ude=a("code"),tOo=o("from_pretrained()"),aOo=o("to load the model weights."),nOo=l(),Jde=a("p"),sOo=o("Examples:"),lOo=l(),f(jw.$$.fragment),iOo=l(),Ze=a("div"),f(Dw.$$.fragment),dOo=l(),Yde=a("p"),cOo=o("Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),fOo=l(),sn=a("p"),mOo=o("The model class to instantiate is selected based on the "),Kde=a("code"),gOo=o("model_type"),hOo=o(` property of the config object (either
passed as an argument or loaded from `),Zde=a("code"),pOo=o("pretrained_model_name_or_path"),_Oo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=a("code"),uOo=o("pretrained_model_name_or_path"),bOo=o(":"),vOo=l(),Re=a("ul"),B5=a("li"),oce=a("strong"),TOo=o("data2vec-audio"),FOo=o(" \u2014 "),YD=a("a"),COo=o("Data2VecAudioForCTC"),MOo=o(" (Data2VecAudio model)"),EOo=l(),x5=a("li"),rce=a("strong"),yOo=o("hubert"),wOo=o(" \u2014 "),KD=a("a"),AOo=o("HubertForCTC"),LOo=o(" (Hubert model)"),BOo=l(),k5=a("li"),tce=a("strong"),xOo=o("sew"),kOo=o(" \u2014 "),ZD=a("a"),ROo=o("SEWForCTC"),SOo=o(" (SEW model)"),POo=l(),R5=a("li"),ace=a("strong"),$Oo=o("sew-d"),IOo=o(" \u2014 "),eq=a("a"),NOo=o("SEWDForCTC"),jOo=o(" (SEW-D model)"),DOo=l(),S5=a("li"),nce=a("strong"),qOo=o("unispeech"),GOo=o(" \u2014 "),oq=a("a"),OOo=o("UniSpeechForCTC"),XOo=o(" (UniSpeech model)"),VOo=l(),P5=a("li"),sce=a("strong"),zOo=o("unispeech-sat"),WOo=o(" \u2014 "),rq=a("a"),QOo=o("UniSpeechSatForCTC"),HOo=o(" (UniSpeechSat model)"),UOo=l(),$5=a("li"),lce=a("strong"),JOo=o("wav2vec2"),YOo=o(" \u2014 "),tq=a("a"),KOo=o("Wav2Vec2ForCTC"),ZOo=o(" (Wav2Vec2 model)"),eXo=l(),I5=a("li"),ice=a("strong"),oXo=o("wavlm"),rXo=o(" \u2014 "),aq=a("a"),tXo=o("WavLMForCTC"),aXo=o(" (WavLM model)"),nXo=l(),N5=a("p"),sXo=o("The model is set in evaluation mode by default using "),dce=a("code"),lXo=o("model.eval()"),iXo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=a("code"),dXo=o("model.train()"),cXo=l(),fce=a("p"),fXo=o("Examples:"),mXo=l(),f(qw.$$.fragment),Nke=l(),zd=a("h2"),j5=a("a"),mce=a("span"),f(Gw.$$.fragment),gXo=l(),gce=a("span"),hXo=o("AutoModelForSpeechSeq2Seq"),jke=l(),mr=a("div"),f(Ow.$$.fragment),pXo=l(),Wd=a("p"),_Xo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hce=a("code"),uXo=o("from_pretrained()"),bXo=o("class method or the "),pce=a("code"),vXo=o("from_config()"),TXo=o(`class
method.`),FXo=l(),Xw=a("p"),CXo=o("This class cannot be instantiated directly using "),_ce=a("code"),MXo=o("__init__()"),EXo=o(" (throws an error)."),yXo=l(),st=a("div"),f(Vw.$$.fragment),wXo=l(),uce=a("p"),AXo=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),LXo=l(),Qd=a("p"),BXo=o(`Note:
Loading a model from its configuration file does `),bce=a("strong"),xXo=o("not"),kXo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=a("code"),RXo=o("from_pretrained()"),SXo=o("to load the model weights."),PXo=l(),Tce=a("p"),$Xo=o("Examples:"),IXo=l(),f(zw.$$.fragment),NXo=l(),eo=a("div"),f(Ww.$$.fragment),jXo=l(),Fce=a("p"),DXo=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),qXo=l(),ln=a("p"),GXo=o("The model class to instantiate is selected based on the "),Cce=a("code"),OXo=o("model_type"),XXo=o(` property of the config object (either
passed as an argument or loaded from `),Mce=a("code"),VXo=o("pretrained_model_name_or_path"),zXo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=a("code"),WXo=o("pretrained_model_name_or_path"),QXo=o(":"),HXo=l(),Qw=a("ul"),D5=a("li"),yce=a("strong"),UXo=o("speech-encoder-decoder"),JXo=o(" \u2014 "),nq=a("a"),YXo=o("SpeechEncoderDecoderModel"),KXo=o(" (Speech Encoder decoder model)"),ZXo=l(),q5=a("li"),wce=a("strong"),eVo=o("speech_to_text"),oVo=o(" \u2014 "),sq=a("a"),rVo=o("Speech2TextForConditionalGeneration"),tVo=o(" (Speech2Text model)"),aVo=l(),G5=a("p"),nVo=o("The model is set in evaluation mode by default using "),Ace=a("code"),sVo=o("model.eval()"),lVo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=a("code"),iVo=o("model.train()"),dVo=l(),Bce=a("p"),cVo=o("Examples:"),fVo=l(),f(Hw.$$.fragment),Dke=l(),Hd=a("h2"),O5=a("a"),xce=a("span"),f(Uw.$$.fragment),mVo=l(),kce=a("span"),gVo=o("AutoModelForAudioXVector"),qke=l(),gr=a("div"),f(Jw.$$.fragment),hVo=l(),Ud=a("p"),pVo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Rce=a("code"),_Vo=o("from_pretrained()"),uVo=o("class method or the "),Sce=a("code"),bVo=o("from_config()"),vVo=o(`class
method.`),TVo=l(),Yw=a("p"),FVo=o("This class cannot be instantiated directly using "),Pce=a("code"),CVo=o("__init__()"),MVo=o(" (throws an error)."),EVo=l(),lt=a("div"),f(Kw.$$.fragment),yVo=l(),$ce=a("p"),wVo=o("Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),AVo=l(),Jd=a("p"),LVo=o(`Note:
Loading a model from its configuration file does `),Ice=a("strong"),BVo=o("not"),xVo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=a("code"),kVo=o("from_pretrained()"),RVo=o("to load the model weights."),SVo=l(),jce=a("p"),PVo=o("Examples:"),$Vo=l(),f(Zw.$$.fragment),IVo=l(),oo=a("div"),f(eA.$$.fragment),NVo=l(),Dce=a("p"),jVo=o("Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),DVo=l(),dn=a("p"),qVo=o("The model class to instantiate is selected based on the "),qce=a("code"),GVo=o("model_type"),OVo=o(` property of the config object (either
passed as an argument or loaded from `),Gce=a("code"),XVo=o("pretrained_model_name_or_path"),VVo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=a("code"),zVo=o("pretrained_model_name_or_path"),WVo=o(":"),QVo=l(),cn=a("ul"),X5=a("li"),Xce=a("strong"),HVo=o("data2vec-audio"),UVo=o(" \u2014 "),lq=a("a"),JVo=o("Data2VecAudioForXVector"),YVo=o(" (Data2VecAudio model)"),KVo=l(),V5=a("li"),Vce=a("strong"),ZVo=o("unispeech-sat"),ezo=o(" \u2014 "),iq=a("a"),ozo=o("UniSpeechSatForXVector"),rzo=o(" (UniSpeechSat model)"),tzo=l(),z5=a("li"),zce=a("strong"),azo=o("wav2vec2"),nzo=o(" \u2014 "),dq=a("a"),szo=o("Wav2Vec2ForXVector"),lzo=o(" (Wav2Vec2 model)"),izo=l(),W5=a("li"),Wce=a("strong"),dzo=o("wavlm"),czo=o(" \u2014 "),cq=a("a"),fzo=o("WavLMForXVector"),mzo=o(" (WavLM model)"),gzo=l(),Q5=a("p"),hzo=o("The model is set in evaluation mode by default using "),Qce=a("code"),pzo=o("model.eval()"),_zo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=a("code"),uzo=o("model.train()"),bzo=l(),Uce=a("p"),vzo=o("Examples:"),Tzo=l(),f(oA.$$.fragment),Gke=l(),Yd=a("h2"),H5=a("a"),Jce=a("span"),f(rA.$$.fragment),Fzo=l(),Yce=a("span"),Czo=o("AutoModelForMaskedImageModeling"),Oke=l(),hr=a("div"),f(tA.$$.fragment),Mzo=l(),Kd=a("p"),Ezo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Kce=a("code"),yzo=o("from_pretrained()"),wzo=o("class method or the "),Zce=a("code"),Azo=o("from_config()"),Lzo=o(`class
method.`),Bzo=l(),aA=a("p"),xzo=o("This class cannot be instantiated directly using "),efe=a("code"),kzo=o("__init__()"),Rzo=o(" (throws an error)."),Szo=l(),it=a("div"),f(nA.$$.fragment),Pzo=l(),ofe=a("p"),$zo=o("Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),Izo=l(),Zd=a("p"),Nzo=o(`Note:
Loading a model from its configuration file does `),rfe=a("strong"),jzo=o("not"),Dzo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),tfe=a("code"),qzo=o("from_pretrained()"),Gzo=o("to load the model weights."),Ozo=l(),afe=a("p"),Xzo=o("Examples:"),Vzo=l(),f(sA.$$.fragment),zzo=l(),ro=a("div"),f(lA.$$.fragment),Wzo=l(),nfe=a("p"),Qzo=o("Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),Hzo=l(),fn=a("p"),Uzo=o("The model class to instantiate is selected based on the "),sfe=a("code"),Jzo=o("model_type"),Yzo=o(` property of the config object (either
passed as an argument or loaded from `),lfe=a("code"),Kzo=o("pretrained_model_name_or_path"),Zzo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ife=a("code"),eWo=o("pretrained_model_name_or_path"),oWo=o(":"),rWo=l(),ec=a("ul"),U5=a("li"),dfe=a("strong"),tWo=o("deit"),aWo=o(" \u2014 "),fq=a("a"),nWo=o("DeiTForMaskedImageModeling"),sWo=o(" (DeiT model)"),lWo=l(),J5=a("li"),cfe=a("strong"),iWo=o("swin"),dWo=o(" \u2014 "),mq=a("a"),cWo=o("SwinForMaskedImageModeling"),fWo=o(" (Swin model)"),mWo=l(),Y5=a("li"),ffe=a("strong"),gWo=o("vit"),hWo=o(" \u2014 "),gq=a("a"),pWo=o("ViTForMaskedImageModeling"),_Wo=o(" (ViT model)"),uWo=l(),K5=a("p"),bWo=o("The model is set in evaluation mode by default using "),mfe=a("code"),vWo=o("model.eval()"),TWo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=a("code"),FWo=o("model.train()"),CWo=l(),hfe=a("p"),MWo=o("Examples:"),EWo=l(),f(iA.$$.fragment),Xke=l(),oc=a("h2"),Z5=a("a"),pfe=a("span"),f(dA.$$.fragment),yWo=l(),_fe=a("span"),wWo=o("AutoModelForObjectDetection"),Vke=l(),pr=a("div"),f(cA.$$.fragment),AWo=l(),rc=a("p"),LWo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ufe=a("code"),BWo=o("from_pretrained()"),xWo=o("class method or the "),bfe=a("code"),kWo=o("from_config()"),RWo=o(`class
method.`),SWo=l(),fA=a("p"),PWo=o("This class cannot be instantiated directly using "),vfe=a("code"),$Wo=o("__init__()"),IWo=o(" (throws an error)."),NWo=l(),dt=a("div"),f(mA.$$.fragment),jWo=l(),Tfe=a("p"),DWo=o("Instantiates one of the model classes of the library (with a object detection head) from a configuration."),qWo=l(),tc=a("p"),GWo=o(`Note:
Loading a model from its configuration file does `),Ffe=a("strong"),OWo=o("not"),XWo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=a("code"),VWo=o("from_pretrained()"),zWo=o("to load the model weights."),WWo=l(),Mfe=a("p"),QWo=o("Examples:"),HWo=l(),f(gA.$$.fragment),UWo=l(),to=a("div"),f(hA.$$.fragment),JWo=l(),Efe=a("p"),YWo=o("Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),KWo=l(),mn=a("p"),ZWo=o("The model class to instantiate is selected based on the "),yfe=a("code"),eQo=o("model_type"),oQo=o(` property of the config object (either
passed as an argument or loaded from `),wfe=a("code"),rQo=o("pretrained_model_name_or_path"),tQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=a("code"),aQo=o("pretrained_model_name_or_path"),nQo=o(":"),sQo=l(),Lfe=a("ul"),e2=a("li"),Bfe=a("strong"),lQo=o("detr"),iQo=o(" \u2014 "),hq=a("a"),dQo=o("DetrForObjectDetection"),cQo=o(" (DETR model)"),fQo=l(),o2=a("p"),mQo=o("The model is set in evaluation mode by default using "),xfe=a("code"),gQo=o("model.eval()"),hQo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=a("code"),pQo=o("model.train()"),_Qo=l(),Rfe=a("p"),uQo=o("Examples:"),bQo=l(),f(pA.$$.fragment),zke=l(),ac=a("h2"),r2=a("a"),Sfe=a("span"),f(_A.$$.fragment),vQo=l(),Pfe=a("span"),TQo=o("AutoModelForImageSegmentation"),Wke=l(),_r=a("div"),f(uA.$$.fragment),FQo=l(),nc=a("p"),CQo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),$fe=a("code"),MQo=o("from_pretrained()"),EQo=o("class method or the "),Ife=a("code"),yQo=o("from_config()"),wQo=o(`class
method.`),AQo=l(),bA=a("p"),LQo=o("This class cannot be instantiated directly using "),Nfe=a("code"),BQo=o("__init__()"),xQo=o(" (throws an error)."),kQo=l(),ct=a("div"),f(vA.$$.fragment),RQo=l(),jfe=a("p"),SQo=o("Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),PQo=l(),sc=a("p"),$Qo=o(`Note:
Loading a model from its configuration file does `),Dfe=a("strong"),IQo=o("not"),NQo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=a("code"),jQo=o("from_pretrained()"),DQo=o("to load the model weights."),qQo=l(),Gfe=a("p"),GQo=o("Examples:"),OQo=l(),f(TA.$$.fragment),XQo=l(),ao=a("div"),f(FA.$$.fragment),VQo=l(),Ofe=a("p"),zQo=o("Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),WQo=l(),gn=a("p"),QQo=o("The model class to instantiate is selected based on the "),Xfe=a("code"),HQo=o("model_type"),UQo=o(` property of the config object (either
passed as an argument or loaded from `),Vfe=a("code"),JQo=o("pretrained_model_name_or_path"),YQo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=a("code"),KQo=o("pretrained_model_name_or_path"),ZQo=o(":"),eHo=l(),Wfe=a("ul"),t2=a("li"),Qfe=a("strong"),oHo=o("detr"),rHo=o(" \u2014 "),pq=a("a"),tHo=o("DetrForSegmentation"),aHo=o(" (DETR model)"),nHo=l(),a2=a("p"),sHo=o("The model is set in evaluation mode by default using "),Hfe=a("code"),lHo=o("model.eval()"),iHo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=a("code"),dHo=o("model.train()"),cHo=l(),Jfe=a("p"),fHo=o("Examples:"),mHo=l(),f(CA.$$.fragment),Qke=l(),lc=a("h2"),n2=a("a"),Yfe=a("span"),f(MA.$$.fragment),gHo=l(),Kfe=a("span"),hHo=o("AutoModelForSemanticSegmentation"),Hke=l(),ur=a("div"),f(EA.$$.fragment),pHo=l(),ic=a("p"),_Ho=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Zfe=a("code"),uHo=o("from_pretrained()"),bHo=o("class method or the "),eme=a("code"),vHo=o("from_config()"),THo=o(`class
method.`),FHo=l(),yA=a("p"),CHo=o("This class cannot be instantiated directly using "),ome=a("code"),MHo=o("__init__()"),EHo=o(" (throws an error)."),yHo=l(),ft=a("div"),f(wA.$$.fragment),wHo=l(),rme=a("p"),AHo=o("Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),LHo=l(),dc=a("p"),BHo=o(`Note:
Loading a model from its configuration file does `),tme=a("strong"),xHo=o("not"),kHo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=a("code"),RHo=o("from_pretrained()"),SHo=o("to load the model weights."),PHo=l(),nme=a("p"),$Ho=o("Examples:"),IHo=l(),f(AA.$$.fragment),NHo=l(),no=a("div"),f(LA.$$.fragment),jHo=l(),sme=a("p"),DHo=o("Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),qHo=l(),hn=a("p"),GHo=o("The model class to instantiate is selected based on the "),lme=a("code"),OHo=o("model_type"),XHo=o(` property of the config object (either
passed as an argument or loaded from `),ime=a("code"),VHo=o("pretrained_model_name_or_path"),zHo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=a("code"),WHo=o("pretrained_model_name_or_path"),QHo=o(":"),HHo=l(),BA=a("ul"),s2=a("li"),cme=a("strong"),UHo=o("beit"),JHo=o(" \u2014 "),_q=a("a"),YHo=o("BeitForSemanticSegmentation"),KHo=o(" (BEiT model)"),ZHo=l(),l2=a("li"),fme=a("strong"),eUo=o("segformer"),oUo=o(" \u2014 "),uq=a("a"),rUo=o("SegformerForSemanticSegmentation"),tUo=o(" (SegFormer model)"),aUo=l(),i2=a("p"),nUo=o("The model is set in evaluation mode by default using "),mme=a("code"),sUo=o("model.eval()"),lUo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=a("code"),iUo=o("model.train()"),dUo=l(),hme=a("p"),cUo=o("Examples:"),fUo=l(),f(xA.$$.fragment),Uke=l(),cc=a("h2"),d2=a("a"),pme=a("span"),f(kA.$$.fragment),mUo=l(),_me=a("span"),gUo=o("AutoModelForInstanceSegmentation"),Jke=l(),br=a("div"),f(RA.$$.fragment),hUo=l(),fc=a("p"),pUo=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ume=a("code"),_Uo=o("from_pretrained()"),uUo=o("class method or the "),bme=a("code"),bUo=o("from_config()"),vUo=o(`class
method.`),TUo=l(),SA=a("p"),FUo=o("This class cannot be instantiated directly using "),vme=a("code"),CUo=o("__init__()"),MUo=o(" (throws an error)."),EUo=l(),mt=a("div"),f(PA.$$.fragment),yUo=l(),Tme=a("p"),wUo=o("Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),AUo=l(),mc=a("p"),LUo=o(`Note:
Loading a model from its configuration file does `),Fme=a("strong"),BUo=o("not"),xUo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=a("code"),kUo=o("from_pretrained()"),RUo=o("to load the model weights."),SUo=l(),Mme=a("p"),PUo=o("Examples:"),$Uo=l(),f($A.$$.fragment),IUo=l(),so=a("div"),f(IA.$$.fragment),NUo=l(),Eme=a("p"),jUo=o("Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),DUo=l(),pn=a("p"),qUo=o("The model class to instantiate is selected based on the "),yme=a("code"),GUo=o("model_type"),OUo=o(` property of the config object (either
passed as an argument or loaded from `),wme=a("code"),XUo=o("pretrained_model_name_or_path"),VUo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=a("code"),zUo=o("pretrained_model_name_or_path"),WUo=o(":"),QUo=l(),Lme=a("ul"),c2=a("li"),Bme=a("strong"),HUo=o("maskformer"),UUo=o(" \u2014 "),bq=a("a"),JUo=o("MaskFormerForInstanceSegmentation"),YUo=o(" (MaskFormer model)"),KUo=l(),f2=a("p"),ZUo=o("The model is set in evaluation mode by default using "),xme=a("code"),eJo=o("model.eval()"),oJo=o(` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=a("code"),rJo=o("model.train()"),tJo=l(),Rme=a("p"),aJo=o("Examples:"),nJo=l(),f(NA.$$.fragment),Yke=l(),gc=a("h2"),m2=a("a"),Sme=a("span"),f(jA.$$.fragment),sJo=l(),Pme=a("span"),lJo=o("TFAutoModel"),Kke=l(),vr=a("div"),f(DA.$$.fragment),iJo=l(),hc=a("p"),dJo=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$me=a("code"),cJo=o("from_pretrained()"),fJo=o("class method or the "),Ime=a("code"),mJo=o("from_config()"),gJo=o(`class
method.`),hJo=l(),qA=a("p"),pJo=o("This class cannot be instantiated directly using "),Nme=a("code"),_Jo=o("__init__()"),uJo=o(" (throws an error)."),bJo=l(),gt=a("div"),f(GA.$$.fragment),vJo=l(),jme=a("p"),TJo=o("Instantiates one of the base model classes of the library from a configuration."),FJo=l(),pc=a("p"),CJo=o(`Note:
Loading a model from its configuration file does `),Dme=a("strong"),MJo=o("not"),EJo=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=a("code"),yJo=o("from_pretrained()"),wJo=o("to load the model weights."),AJo=l(),Gme=a("p"),LJo=o("Examples:"),BJo=l(),f(OA.$$.fragment),xJo=l(),ho=a("div"),f(XA.$$.fragment),kJo=l(),Ome=a("p"),RJo=o("Instantiate one of the base model classes of the library from a pretrained model."),SJo=l(),_n=a("p"),PJo=o("The model class to instantiate is selected based on the "),Xme=a("code"),$Jo=o("model_type"),IJo=o(` property of the config object (either
passed as an argument or loaded from `),Vme=a("code"),NJo=o("pretrained_model_name_or_path"),jJo=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=a("code"),DJo=o("pretrained_model_name_or_path"),qJo=o(":"),GJo=l(),B=a("ul"),g2=a("li"),Wme=a("strong"),OJo=o("albert"),XJo=o(" \u2014 "),vq=a("a"),VJo=o("TFAlbertModel"),zJo=o(" (ALBERT model)"),WJo=l(),h2=a("li"),Qme=a("strong"),QJo=o("bart"),HJo=o(" \u2014 "),Tq=a("a"),UJo=o("TFBartModel"),JJo=o(" (BART model)"),YJo=l(),p2=a("li"),Hme=a("strong"),KJo=o("bert"),ZJo=o(" \u2014 "),Fq=a("a"),eYo=o("TFBertModel"),oYo=o(" (BERT model)"),rYo=l(),_2=a("li"),Ume=a("strong"),tYo=o("blenderbot"),aYo=o(" \u2014 "),Cq=a("a"),nYo=o("TFBlenderbotModel"),sYo=o(" (Blenderbot model)"),lYo=l(),u2=a("li"),Jme=a("strong"),iYo=o("blenderbot-small"),dYo=o(" \u2014 "),Mq=a("a"),cYo=o("TFBlenderbotSmallModel"),fYo=o(" (BlenderbotSmall model)"),mYo=l(),b2=a("li"),Yme=a("strong"),gYo=o("camembert"),hYo=o(" \u2014 "),Eq=a("a"),pYo=o("TFCamembertModel"),_Yo=o(" (CamemBERT model)"),uYo=l(),v2=a("li"),Kme=a("strong"),bYo=o("clip"),vYo=o(" \u2014 "),yq=a("a"),TYo=o("TFCLIPModel"),FYo=o(" (CLIP model)"),CYo=l(),T2=a("li"),Zme=a("strong"),MYo=o("convbert"),EYo=o(" \u2014 "),wq=a("a"),yYo=o("TFConvBertModel"),wYo=o(" (ConvBERT model)"),AYo=l(),F2=a("li"),ege=a("strong"),LYo=o("convnext"),BYo=o(" \u2014 "),Aq=a("a"),xYo=o("TFConvNextModel"),kYo=o(" (ConvNext model)"),RYo=l(),C2=a("li"),oge=a("strong"),SYo=o("ctrl"),PYo=o(" \u2014 "),Lq=a("a"),$Yo=o("TFCTRLModel"),IYo=o(" (CTRL model)"),NYo=l(),M2=a("li"),rge=a("strong"),jYo=o("deberta"),DYo=o(" \u2014 "),Bq=a("a"),qYo=o("TFDebertaModel"),GYo=o(" (DeBERTa model)"),OYo=l(),E2=a("li"),tge=a("strong"),XYo=o("deberta-v2"),VYo=o(" \u2014 "),xq=a("a"),zYo=o("TFDebertaV2Model"),WYo=o(" (DeBERTa-v2 model)"),QYo=l(),y2=a("li"),age=a("strong"),HYo=o("distilbert"),UYo=o(" \u2014 "),kq=a("a"),JYo=o("TFDistilBertModel"),YYo=o(" (DistilBERT model)"),KYo=l(),w2=a("li"),nge=a("strong"),ZYo=o("dpr"),eKo=o(" \u2014 "),Rq=a("a"),oKo=o("TFDPRQuestionEncoder"),rKo=o(" (DPR model)"),tKo=l(),A2=a("li"),sge=a("strong"),aKo=o("electra"),nKo=o(" \u2014 "),Sq=a("a"),sKo=o("TFElectraModel"),lKo=o(" (ELECTRA model)"),iKo=l(),L2=a("li"),lge=a("strong"),dKo=o("flaubert"),cKo=o(" \u2014 "),Pq=a("a"),fKo=o("TFFlaubertModel"),mKo=o(" (FlauBERT model)"),gKo=l(),Gs=a("li"),ige=a("strong"),hKo=o("funnel"),pKo=o(" \u2014 "),$q=a("a"),_Ko=o("TFFunnelModel"),uKo=o(" or "),Iq=a("a"),bKo=o("TFFunnelBaseModel"),vKo=o(" (Funnel Transformer model)"),TKo=l(),B2=a("li"),dge=a("strong"),FKo=o("gpt2"),CKo=o(" \u2014 "),Nq=a("a"),MKo=o("TFGPT2Model"),EKo=o(" (OpenAI GPT-2 model)"),yKo=l(),x2=a("li"),cge=a("strong"),wKo=o("hubert"),AKo=o(" \u2014 "),jq=a("a"),LKo=o("TFHubertModel"),BKo=o(" (Hubert model)"),xKo=l(),k2=a("li"),fge=a("strong"),kKo=o("layoutlm"),RKo=o(" \u2014 "),Dq=a("a"),SKo=o("TFLayoutLMModel"),PKo=o(" (LayoutLM model)"),$Ko=l(),R2=a("li"),mge=a("strong"),IKo=o("led"),NKo=o(" \u2014 "),qq=a("a"),jKo=o("TFLEDModel"),DKo=o(" (LED model)"),qKo=l(),S2=a("li"),gge=a("strong"),GKo=o("longformer"),OKo=o(" \u2014 "),Gq=a("a"),XKo=o("TFLongformerModel"),VKo=o(" (Longformer model)"),zKo=l(),P2=a("li"),hge=a("strong"),WKo=o("lxmert"),QKo=o(" \u2014 "),Oq=a("a"),HKo=o("TFLxmertModel"),UKo=o(" (LXMERT model)"),JKo=l(),$2=a("li"),pge=a("strong"),YKo=o("marian"),KKo=o(" \u2014 "),Xq=a("a"),ZKo=o("TFMarianModel"),eZo=o(" (Marian model)"),oZo=l(),I2=a("li"),_ge=a("strong"),rZo=o("mbart"),tZo=o(" \u2014 "),Vq=a("a"),aZo=o("TFMBartModel"),nZo=o(" (mBART model)"),sZo=l(),N2=a("li"),uge=a("strong"),lZo=o("mobilebert"),iZo=o(" \u2014 "),zq=a("a"),dZo=o("TFMobileBertModel"),cZo=o(" (MobileBERT model)"),fZo=l(),j2=a("li"),bge=a("strong"),mZo=o("mpnet"),gZo=o(" \u2014 "),Wq=a("a"),hZo=o("TFMPNetModel"),pZo=o(" (MPNet model)"),_Zo=l(),D2=a("li"),vge=a("strong"),uZo=o("mt5"),bZo=o(" \u2014 "),Qq=a("a"),vZo=o("TFMT5Model"),TZo=o(" (mT5 model)"),FZo=l(),q2=a("li"),Tge=a("strong"),CZo=o("openai-gpt"),MZo=o(" \u2014 "),Hq=a("a"),EZo=o("TFOpenAIGPTModel"),yZo=o(" (OpenAI GPT model)"),wZo=l(),G2=a("li"),Fge=a("strong"),AZo=o("pegasus"),LZo=o(" \u2014 "),Uq=a("a"),BZo=o("TFPegasusModel"),xZo=o(" (Pegasus model)"),kZo=l(),O2=a("li"),Cge=a("strong"),RZo=o("rembert"),SZo=o(" \u2014 "),Jq=a("a"),PZo=o("TFRemBertModel"),$Zo=o(" (RemBERT model)"),IZo=l(),X2=a("li"),Mge=a("strong"),NZo=o("roberta"),jZo=o(" \u2014 "),Yq=a("a"),DZo=o("TFRobertaModel"),qZo=o(" (RoBERTa model)"),GZo=l(),V2=a("li"),Ege=a("strong"),OZo=o("roformer"),XZo=o(" \u2014 "),Kq=a("a"),VZo=o("TFRoFormerModel"),zZo=o(" (RoFormer model)"),WZo=l(),z2=a("li"),yge=a("strong"),QZo=o("speech_to_text"),HZo=o(" \u2014 "),Zq=a("a"),UZo=o("TFSpeech2TextModel"),JZo=o(" (Speech2Text model)"),YZo=l(),W2=a("li"),wge=a("strong"),KZo=o("t5"),ZZo=o(" \u2014 "),eG=a("a"),eer=o("TFT5Model"),oer=o(" (T5 model)"),rer=l(),Q2=a("li"),Age=a("strong"),ter=o("tapas"),aer=o(" \u2014 "),oG=a("a"),ner=o("TFTapasModel"),ser=o(" (TAPAS model)"),ler=l(),H2=a("li"),Lge=a("strong"),ier=o("transfo-xl"),der=o(" \u2014 "),rG=a("a"),cer=o("TFTransfoXLModel"),fer=o(" (Transformer-XL model)"),mer=l(),U2=a("li"),Bge=a("strong"),ger=o("vit"),her=o(" \u2014 "),tG=a("a"),per=o("TFViTModel"),_er=o(" (ViT model)"),uer=l(),J2=a("li"),xge=a("strong"),ber=o("wav2vec2"),ver=o(" \u2014 "),aG=a("a"),Ter=o("TFWav2Vec2Model"),Fer=o(" (Wav2Vec2 model)"),Cer=l(),Y2=a("li"),kge=a("strong"),Mer=o("xlm"),Eer=o(" \u2014 "),nG=a("a"),yer=o("TFXLMModel"),wer=o(" (XLM model)"),Aer=l(),K2=a("li"),Rge=a("strong"),Ler=o("xlm-roberta"),Ber=o(" \u2014 "),sG=a("a"),xer=o("TFXLMRobertaModel"),ker=o(" (XLM-RoBERTa model)"),Rer=l(),Z2=a("li"),Sge=a("strong"),Ser=o("xlnet"),Per=o(" \u2014 "),lG=a("a"),$er=o("TFXLNetModel"),Ier=o(" (XLNet model)"),Ner=l(),Pge=a("p"),jer=o("Examples:"),Der=l(),f(VA.$$.fragment),Zke=l(),_c=a("h2"),ev=a("a"),$ge=a("span"),f(zA.$$.fragment),qer=l(),Ige=a("span"),Ger=o("TFAutoModelForPreTraining"),eRe=l(),Tr=a("div"),f(WA.$$.fragment),Oer=l(),uc=a("p"),Xer=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nge=a("code"),Ver=o("from_pretrained()"),zer=o("class method or the "),jge=a("code"),Wer=o("from_config()"),Qer=o(`class
method.`),Her=l(),QA=a("p"),Uer=o("This class cannot be instantiated directly using "),Dge=a("code"),Jer=o("__init__()"),Yer=o(" (throws an error)."),Ker=l(),ht=a("div"),f(HA.$$.fragment),Zer=l(),qge=a("p"),eor=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),oor=l(),bc=a("p"),ror=o(`Note:
Loading a model from its configuration file does `),Gge=a("strong"),tor=o("not"),aor=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Oge=a("code"),nor=o("from_pretrained()"),sor=o("to load the model weights."),lor=l(),Xge=a("p"),ior=o("Examples:"),dor=l(),f(UA.$$.fragment),cor=l(),po=a("div"),f(JA.$$.fragment),mor=l(),Vge=a("p"),gor=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),hor=l(),un=a("p"),por=o("The model class to instantiate is selected based on the "),zge=a("code"),_or=o("model_type"),uor=o(` property of the config object (either
passed as an argument or loaded from `),Wge=a("code"),bor=o("pretrained_model_name_or_path"),vor=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=a("code"),Tor=o("pretrained_model_name_or_path"),For=o(":"),Cor=l(),H=a("ul"),ov=a("li"),Hge=a("strong"),Mor=o("albert"),Eor=o(" \u2014 "),iG=a("a"),yor=o("TFAlbertForPreTraining"),wor=o(" (ALBERT model)"),Aor=l(),rv=a("li"),Uge=a("strong"),Lor=o("bart"),Bor=o(" \u2014 "),dG=a("a"),xor=o("TFBartForConditionalGeneration"),kor=o(" (BART model)"),Ror=l(),tv=a("li"),Jge=a("strong"),Sor=o("bert"),Por=o(" \u2014 "),cG=a("a"),$or=o("TFBertForPreTraining"),Ior=o(" (BERT model)"),Nor=l(),av=a("li"),Yge=a("strong"),jor=o("camembert"),Dor=o(" \u2014 "),fG=a("a"),qor=o("TFCamembertForMaskedLM"),Gor=o(" (CamemBERT model)"),Oor=l(),nv=a("li"),Kge=a("strong"),Xor=o("ctrl"),Vor=o(" \u2014 "),mG=a("a"),zor=o("TFCTRLLMHeadModel"),Wor=o(" (CTRL model)"),Qor=l(),sv=a("li"),Zge=a("strong"),Hor=o("distilbert"),Uor=o(" \u2014 "),gG=a("a"),Jor=o("TFDistilBertForMaskedLM"),Yor=o(" (DistilBERT model)"),Kor=l(),lv=a("li"),ehe=a("strong"),Zor=o("electra"),err=o(" \u2014 "),hG=a("a"),orr=o("TFElectraForPreTraining"),rrr=o(" (ELECTRA model)"),trr=l(),iv=a("li"),ohe=a("strong"),arr=o("flaubert"),nrr=o(" \u2014 "),pG=a("a"),srr=o("TFFlaubertWithLMHeadModel"),lrr=o(" (FlauBERT model)"),irr=l(),dv=a("li"),rhe=a("strong"),drr=o("funnel"),crr=o(" \u2014 "),_G=a("a"),frr=o("TFFunnelForPreTraining"),mrr=o(" (Funnel Transformer model)"),grr=l(),cv=a("li"),the=a("strong"),hrr=o("gpt2"),prr=o(" \u2014 "),uG=a("a"),_rr=o("TFGPT2LMHeadModel"),urr=o(" (OpenAI GPT-2 model)"),brr=l(),fv=a("li"),ahe=a("strong"),vrr=o("layoutlm"),Trr=o(" \u2014 "),bG=a("a"),Frr=o("TFLayoutLMForMaskedLM"),Crr=o(" (LayoutLM model)"),Mrr=l(),mv=a("li"),nhe=a("strong"),Err=o("lxmert"),yrr=o(" \u2014 "),vG=a("a"),wrr=o("TFLxmertForPreTraining"),Arr=o(" (LXMERT model)"),Lrr=l(),gv=a("li"),she=a("strong"),Brr=o("mobilebert"),xrr=o(" \u2014 "),TG=a("a"),krr=o("TFMobileBertForPreTraining"),Rrr=o(" (MobileBERT model)"),Srr=l(),hv=a("li"),lhe=a("strong"),Prr=o("mpnet"),$rr=o(" \u2014 "),FG=a("a"),Irr=o("TFMPNetForMaskedLM"),Nrr=o(" (MPNet model)"),jrr=l(),pv=a("li"),ihe=a("strong"),Drr=o("openai-gpt"),qrr=o(" \u2014 "),CG=a("a"),Grr=o("TFOpenAIGPTLMHeadModel"),Orr=o(" (OpenAI GPT model)"),Xrr=l(),_v=a("li"),dhe=a("strong"),Vrr=o("roberta"),zrr=o(" \u2014 "),MG=a("a"),Wrr=o("TFRobertaForMaskedLM"),Qrr=o(" (RoBERTa model)"),Hrr=l(),uv=a("li"),che=a("strong"),Urr=o("t5"),Jrr=o(" \u2014 "),EG=a("a"),Yrr=o("TFT5ForConditionalGeneration"),Krr=o(" (T5 model)"),Zrr=l(),bv=a("li"),fhe=a("strong"),etr=o("tapas"),otr=o(" \u2014 "),yG=a("a"),rtr=o("TFTapasForMaskedLM"),ttr=o(" (TAPAS model)"),atr=l(),vv=a("li"),mhe=a("strong"),ntr=o("transfo-xl"),str=o(" \u2014 "),wG=a("a"),ltr=o("TFTransfoXLLMHeadModel"),itr=o(" (Transformer-XL model)"),dtr=l(),Tv=a("li"),ghe=a("strong"),ctr=o("xlm"),ftr=o(" \u2014 "),AG=a("a"),mtr=o("TFXLMWithLMHeadModel"),gtr=o(" (XLM model)"),htr=l(),Fv=a("li"),hhe=a("strong"),ptr=o("xlm-roberta"),_tr=o(" \u2014 "),LG=a("a"),utr=o("TFXLMRobertaForMaskedLM"),btr=o(" (XLM-RoBERTa model)"),vtr=l(),Cv=a("li"),phe=a("strong"),Ttr=o("xlnet"),Ftr=o(" \u2014 "),BG=a("a"),Ctr=o("TFXLNetLMHeadModel"),Mtr=o(" (XLNet model)"),Etr=l(),_he=a("p"),ytr=o("Examples:"),wtr=l(),f(YA.$$.fragment),oRe=l(),vc=a("h2"),Mv=a("a"),uhe=a("span"),f(KA.$$.fragment),Atr=l(),bhe=a("span"),Ltr=o("TFAutoModelForCausalLM"),rRe=l(),Fr=a("div"),f(ZA.$$.fragment),Btr=l(),Tc=a("p"),xtr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vhe=a("code"),ktr=o("from_pretrained()"),Rtr=o("class method or the "),The=a("code"),Str=o("from_config()"),Ptr=o(`class
method.`),$tr=l(),e0=a("p"),Itr=o("This class cannot be instantiated directly using "),Fhe=a("code"),Ntr=o("__init__()"),jtr=o(" (throws an error)."),Dtr=l(),pt=a("div"),f(o0.$$.fragment),qtr=l(),Che=a("p"),Gtr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Otr=l(),Fc=a("p"),Xtr=o(`Note:
Loading a model from its configuration file does `),Mhe=a("strong"),Vtr=o("not"),ztr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=a("code"),Wtr=o("from_pretrained()"),Qtr=o("to load the model weights."),Htr=l(),yhe=a("p"),Utr=o("Examples:"),Jtr=l(),f(r0.$$.fragment),Ytr=l(),_o=a("div"),f(t0.$$.fragment),Ktr=l(),whe=a("p"),Ztr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),ear=l(),bn=a("p"),oar=o("The model class to instantiate is selected based on the "),Ahe=a("code"),rar=o("model_type"),tar=o(` property of the config object (either
passed as an argument or loaded from `),Lhe=a("code"),aar=o("pretrained_model_name_or_path"),nar=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=a("code"),sar=o("pretrained_model_name_or_path"),lar=o(":"),iar=l(),ge=a("ul"),Ev=a("li"),xhe=a("strong"),dar=o("bert"),car=o(" \u2014 "),xG=a("a"),far=o("TFBertLMHeadModel"),mar=o(" (BERT model)"),gar=l(),yv=a("li"),khe=a("strong"),har=o("camembert"),par=o(" \u2014 "),kG=a("a"),_ar=o("TFCamembertForCausalLM"),uar=o(" (CamemBERT model)"),bar=l(),wv=a("li"),Rhe=a("strong"),Tar=o("ctrl"),Far=o(" \u2014 "),RG=a("a"),Car=o("TFCTRLLMHeadModel"),Mar=o(" (CTRL model)"),Ear=l(),Av=a("li"),She=a("strong"),yar=o("gpt2"),war=o(" \u2014 "),SG=a("a"),Aar=o("TFGPT2LMHeadModel"),Lar=o(" (OpenAI GPT-2 model)"),Bar=l(),Lv=a("li"),Phe=a("strong"),xar=o("openai-gpt"),kar=o(" \u2014 "),PG=a("a"),Rar=o("TFOpenAIGPTLMHeadModel"),Sar=o(" (OpenAI GPT model)"),Par=l(),Bv=a("li"),$he=a("strong"),$ar=o("rembert"),Iar=o(" \u2014 "),$G=a("a"),Nar=o("TFRemBertForCausalLM"),jar=o(" (RemBERT model)"),Dar=l(),xv=a("li"),Ihe=a("strong"),qar=o("roberta"),Gar=o(" \u2014 "),IG=a("a"),Oar=o("TFRobertaForCausalLM"),Xar=o(" (RoBERTa model)"),Var=l(),kv=a("li"),Nhe=a("strong"),zar=o("roformer"),War=o(" \u2014 "),NG=a("a"),Qar=o("TFRoFormerForCausalLM"),Har=o(" (RoFormer model)"),Uar=l(),Rv=a("li"),jhe=a("strong"),Jar=o("transfo-xl"),Yar=o(" \u2014 "),jG=a("a"),Kar=o("TFTransfoXLLMHeadModel"),Zar=o(" (Transformer-XL model)"),enr=l(),Sv=a("li"),Dhe=a("strong"),onr=o("xlm"),rnr=o(" \u2014 "),DG=a("a"),tnr=o("TFXLMWithLMHeadModel"),anr=o(" (XLM model)"),nnr=l(),Pv=a("li"),qhe=a("strong"),snr=o("xlnet"),lnr=o(" \u2014 "),qG=a("a"),inr=o("TFXLNetLMHeadModel"),dnr=o(" (XLNet model)"),cnr=l(),Ghe=a("p"),fnr=o("Examples:"),mnr=l(),f(a0.$$.fragment),tRe=l(),Cc=a("h2"),$v=a("a"),Ohe=a("span"),f(n0.$$.fragment),gnr=l(),Xhe=a("span"),hnr=o("TFAutoModelForImageClassification"),aRe=l(),Cr=a("div"),f(s0.$$.fragment),pnr=l(),Mc=a("p"),_nr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vhe=a("code"),unr=o("from_pretrained()"),bnr=o("class method or the "),zhe=a("code"),vnr=o("from_config()"),Tnr=o(`class
method.`),Fnr=l(),l0=a("p"),Cnr=o("This class cannot be instantiated directly using "),Whe=a("code"),Mnr=o("__init__()"),Enr=o(" (throws an error)."),ynr=l(),_t=a("div"),f(i0.$$.fragment),wnr=l(),Qhe=a("p"),Anr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),Lnr=l(),Ec=a("p"),Bnr=o(`Note:
Loading a model from its configuration file does `),Hhe=a("strong"),xnr=o("not"),knr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Uhe=a("code"),Rnr=o("from_pretrained()"),Snr=o("to load the model weights."),Pnr=l(),Jhe=a("p"),$nr=o("Examples:"),Inr=l(),f(d0.$$.fragment),Nnr=l(),uo=a("div"),f(c0.$$.fragment),jnr=l(),Yhe=a("p"),Dnr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),qnr=l(),vn=a("p"),Gnr=o("The model class to instantiate is selected based on the "),Khe=a("code"),Onr=o("model_type"),Xnr=o(` property of the config object (either
passed as an argument or loaded from `),Zhe=a("code"),Vnr=o("pretrained_model_name_or_path"),znr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=a("code"),Wnr=o("pretrained_model_name_or_path"),Qnr=o(":"),Hnr=l(),f0=a("ul"),Iv=a("li"),ope=a("strong"),Unr=o("convnext"),Jnr=o(" \u2014 "),GG=a("a"),Ynr=o("TFConvNextForImageClassification"),Knr=o(" (ConvNext model)"),Znr=l(),Nv=a("li"),rpe=a("strong"),esr=o("vit"),osr=o(" \u2014 "),OG=a("a"),rsr=o("TFViTForImageClassification"),tsr=o(" (ViT model)"),asr=l(),tpe=a("p"),nsr=o("Examples:"),ssr=l(),f(m0.$$.fragment),nRe=l(),yc=a("h2"),jv=a("a"),ape=a("span"),f(g0.$$.fragment),lsr=l(),npe=a("span"),isr=o("TFAutoModelForMaskedLM"),sRe=l(),Mr=a("div"),f(h0.$$.fragment),dsr=l(),wc=a("p"),csr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),spe=a("code"),fsr=o("from_pretrained()"),msr=o("class method or the "),lpe=a("code"),gsr=o("from_config()"),hsr=o(`class
method.`),psr=l(),p0=a("p"),_sr=o("This class cannot be instantiated directly using "),ipe=a("code"),usr=o("__init__()"),bsr=o(" (throws an error)."),vsr=l(),ut=a("div"),f(_0.$$.fragment),Tsr=l(),dpe=a("p"),Fsr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Csr=l(),Ac=a("p"),Msr=o(`Note:
Loading a model from its configuration file does `),cpe=a("strong"),Esr=o("not"),ysr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),fpe=a("code"),wsr=o("from_pretrained()"),Asr=o("to load the model weights."),Lsr=l(),mpe=a("p"),Bsr=o("Examples:"),xsr=l(),f(u0.$$.fragment),ksr=l(),bo=a("div"),f(b0.$$.fragment),Rsr=l(),gpe=a("p"),Ssr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Psr=l(),Tn=a("p"),$sr=o("The model class to instantiate is selected based on the "),hpe=a("code"),Isr=o("model_type"),Nsr=o(` property of the config object (either
passed as an argument or loaded from `),ppe=a("code"),jsr=o("pretrained_model_name_or_path"),Dsr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=a("code"),qsr=o("pretrained_model_name_or_path"),Gsr=o(":"),Osr=l(),Y=a("ul"),Dv=a("li"),upe=a("strong"),Xsr=o("albert"),Vsr=o(" \u2014 "),XG=a("a"),zsr=o("TFAlbertForMaskedLM"),Wsr=o(" (ALBERT model)"),Qsr=l(),qv=a("li"),bpe=a("strong"),Hsr=o("bert"),Usr=o(" \u2014 "),VG=a("a"),Jsr=o("TFBertForMaskedLM"),Ysr=o(" (BERT model)"),Ksr=l(),Gv=a("li"),vpe=a("strong"),Zsr=o("camembert"),elr=o(" \u2014 "),zG=a("a"),olr=o("TFCamembertForMaskedLM"),rlr=o(" (CamemBERT model)"),tlr=l(),Ov=a("li"),Tpe=a("strong"),alr=o("convbert"),nlr=o(" \u2014 "),WG=a("a"),slr=o("TFConvBertForMaskedLM"),llr=o(" (ConvBERT model)"),ilr=l(),Xv=a("li"),Fpe=a("strong"),dlr=o("deberta"),clr=o(" \u2014 "),QG=a("a"),flr=o("TFDebertaForMaskedLM"),mlr=o(" (DeBERTa model)"),glr=l(),Vv=a("li"),Cpe=a("strong"),hlr=o("deberta-v2"),plr=o(" \u2014 "),HG=a("a"),_lr=o("TFDebertaV2ForMaskedLM"),ulr=o(" (DeBERTa-v2 model)"),blr=l(),zv=a("li"),Mpe=a("strong"),vlr=o("distilbert"),Tlr=o(" \u2014 "),UG=a("a"),Flr=o("TFDistilBertForMaskedLM"),Clr=o(" (DistilBERT model)"),Mlr=l(),Wv=a("li"),Epe=a("strong"),Elr=o("electra"),ylr=o(" \u2014 "),JG=a("a"),wlr=o("TFElectraForMaskedLM"),Alr=o(" (ELECTRA model)"),Llr=l(),Qv=a("li"),ype=a("strong"),Blr=o("flaubert"),xlr=o(" \u2014 "),YG=a("a"),klr=o("TFFlaubertWithLMHeadModel"),Rlr=o(" (FlauBERT model)"),Slr=l(),Hv=a("li"),wpe=a("strong"),Plr=o("funnel"),$lr=o(" \u2014 "),KG=a("a"),Ilr=o("TFFunnelForMaskedLM"),Nlr=o(" (Funnel Transformer model)"),jlr=l(),Uv=a("li"),Ape=a("strong"),Dlr=o("layoutlm"),qlr=o(" \u2014 "),ZG=a("a"),Glr=o("TFLayoutLMForMaskedLM"),Olr=o(" (LayoutLM model)"),Xlr=l(),Jv=a("li"),Lpe=a("strong"),Vlr=o("longformer"),zlr=o(" \u2014 "),eO=a("a"),Wlr=o("TFLongformerForMaskedLM"),Qlr=o(" (Longformer model)"),Hlr=l(),Yv=a("li"),Bpe=a("strong"),Ulr=o("mobilebert"),Jlr=o(" \u2014 "),oO=a("a"),Ylr=o("TFMobileBertForMaskedLM"),Klr=o(" (MobileBERT model)"),Zlr=l(),Kv=a("li"),xpe=a("strong"),eir=o("mpnet"),oir=o(" \u2014 "),rO=a("a"),rir=o("TFMPNetForMaskedLM"),tir=o(" (MPNet model)"),air=l(),Zv=a("li"),kpe=a("strong"),nir=o("rembert"),sir=o(" \u2014 "),tO=a("a"),lir=o("TFRemBertForMaskedLM"),iir=o(" (RemBERT model)"),dir=l(),e6=a("li"),Rpe=a("strong"),cir=o("roberta"),fir=o(" \u2014 "),aO=a("a"),mir=o("TFRobertaForMaskedLM"),gir=o(" (RoBERTa model)"),hir=l(),o6=a("li"),Spe=a("strong"),pir=o("roformer"),_ir=o(" \u2014 "),nO=a("a"),uir=o("TFRoFormerForMaskedLM"),bir=o(" (RoFormer model)"),vir=l(),r6=a("li"),Ppe=a("strong"),Tir=o("tapas"),Fir=o(" \u2014 "),sO=a("a"),Cir=o("TFTapasForMaskedLM"),Mir=o(" (TAPAS model)"),Eir=l(),t6=a("li"),$pe=a("strong"),yir=o("xlm"),wir=o(" \u2014 "),lO=a("a"),Air=o("TFXLMWithLMHeadModel"),Lir=o(" (XLM model)"),Bir=l(),a6=a("li"),Ipe=a("strong"),xir=o("xlm-roberta"),kir=o(" \u2014 "),iO=a("a"),Rir=o("TFXLMRobertaForMaskedLM"),Sir=o(" (XLM-RoBERTa model)"),Pir=l(),Npe=a("p"),$ir=o("Examples:"),Iir=l(),f(v0.$$.fragment),lRe=l(),Lc=a("h2"),n6=a("a"),jpe=a("span"),f(T0.$$.fragment),Nir=l(),Dpe=a("span"),jir=o("TFAutoModelForSeq2SeqLM"),iRe=l(),Er=a("div"),f(F0.$$.fragment),Dir=l(),Bc=a("p"),qir=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qpe=a("code"),Gir=o("from_pretrained()"),Oir=o("class method or the "),Gpe=a("code"),Xir=o("from_config()"),Vir=o(`class
method.`),zir=l(),C0=a("p"),Wir=o("This class cannot be instantiated directly using "),Ope=a("code"),Qir=o("__init__()"),Hir=o(" (throws an error)."),Uir=l(),bt=a("div"),f(M0.$$.fragment),Jir=l(),Xpe=a("p"),Yir=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Kir=l(),xc=a("p"),Zir=o(`Note:
Loading a model from its configuration file does `),Vpe=a("strong"),edr=o("not"),odr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),zpe=a("code"),rdr=o("from_pretrained()"),tdr=o("to load the model weights."),adr=l(),Wpe=a("p"),ndr=o("Examples:"),sdr=l(),f(E0.$$.fragment),ldr=l(),vo=a("div"),f(y0.$$.fragment),idr=l(),Qpe=a("p"),ddr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),cdr=l(),Fn=a("p"),fdr=o("The model class to instantiate is selected based on the "),Hpe=a("code"),mdr=o("model_type"),gdr=o(` property of the config object (either
passed as an argument or loaded from `),Upe=a("code"),hdr=o("pretrained_model_name_or_path"),pdr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=a("code"),_dr=o("pretrained_model_name_or_path"),udr=o(":"),bdr=l(),ue=a("ul"),s6=a("li"),Ype=a("strong"),vdr=o("bart"),Tdr=o(" \u2014 "),dO=a("a"),Fdr=o("TFBartForConditionalGeneration"),Cdr=o(" (BART model)"),Mdr=l(),l6=a("li"),Kpe=a("strong"),Edr=o("blenderbot"),ydr=o(" \u2014 "),cO=a("a"),wdr=o("TFBlenderbotForConditionalGeneration"),Adr=o(" (Blenderbot model)"),Ldr=l(),i6=a("li"),Zpe=a("strong"),Bdr=o("blenderbot-small"),xdr=o(" \u2014 "),fO=a("a"),kdr=o("TFBlenderbotSmallForConditionalGeneration"),Rdr=o(" (BlenderbotSmall model)"),Sdr=l(),d6=a("li"),e_e=a("strong"),Pdr=o("encoder-decoder"),$dr=o(" \u2014 "),mO=a("a"),Idr=o("TFEncoderDecoderModel"),Ndr=o(" (Encoder decoder model)"),jdr=l(),c6=a("li"),o_e=a("strong"),Ddr=o("led"),qdr=o(" \u2014 "),gO=a("a"),Gdr=o("TFLEDForConditionalGeneration"),Odr=o(" (LED model)"),Xdr=l(),f6=a("li"),r_e=a("strong"),Vdr=o("marian"),zdr=o(" \u2014 "),hO=a("a"),Wdr=o("TFMarianMTModel"),Qdr=o(" (Marian model)"),Hdr=l(),m6=a("li"),t_e=a("strong"),Udr=o("mbart"),Jdr=o(" \u2014 "),pO=a("a"),Ydr=o("TFMBartForConditionalGeneration"),Kdr=o(" (mBART model)"),Zdr=l(),g6=a("li"),a_e=a("strong"),ecr=o("mt5"),ocr=o(" \u2014 "),_O=a("a"),rcr=o("TFMT5ForConditionalGeneration"),tcr=o(" (mT5 model)"),acr=l(),h6=a("li"),n_e=a("strong"),ncr=o("pegasus"),scr=o(" \u2014 "),uO=a("a"),lcr=o("TFPegasusForConditionalGeneration"),icr=o(" (Pegasus model)"),dcr=l(),p6=a("li"),s_e=a("strong"),ccr=o("t5"),fcr=o(" \u2014 "),bO=a("a"),mcr=o("TFT5ForConditionalGeneration"),gcr=o(" (T5 model)"),hcr=l(),l_e=a("p"),pcr=o("Examples:"),_cr=l(),f(w0.$$.fragment),dRe=l(),kc=a("h2"),_6=a("a"),i_e=a("span"),f(A0.$$.fragment),ucr=l(),d_e=a("span"),bcr=o("TFAutoModelForSequenceClassification"),cRe=l(),yr=a("div"),f(L0.$$.fragment),vcr=l(),Rc=a("p"),Tcr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),c_e=a("code"),Fcr=o("from_pretrained()"),Ccr=o("class method or the "),f_e=a("code"),Mcr=o("from_config()"),Ecr=o(`class
method.`),ycr=l(),B0=a("p"),wcr=o("This class cannot be instantiated directly using "),m_e=a("code"),Acr=o("__init__()"),Lcr=o(" (throws an error)."),Bcr=l(),vt=a("div"),f(x0.$$.fragment),xcr=l(),g_e=a("p"),kcr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),Rcr=l(),Sc=a("p"),Scr=o(`Note:
Loading a model from its configuration file does `),h_e=a("strong"),Pcr=o("not"),$cr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),p_e=a("code"),Icr=o("from_pretrained()"),Ncr=o("to load the model weights."),jcr=l(),__e=a("p"),Dcr=o("Examples:"),qcr=l(),f(k0.$$.fragment),Gcr=l(),To=a("div"),f(R0.$$.fragment),Ocr=l(),u_e=a("p"),Xcr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Vcr=l(),Cn=a("p"),zcr=o("The model class to instantiate is selected based on the "),b_e=a("code"),Wcr=o("model_type"),Qcr=o(` property of the config object (either
passed as an argument or loaded from `),v_e=a("code"),Hcr=o("pretrained_model_name_or_path"),Ucr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=a("code"),Jcr=o("pretrained_model_name_or_path"),Ycr=o(":"),Kcr=l(),V=a("ul"),u6=a("li"),F_e=a("strong"),Zcr=o("albert"),efr=o(" \u2014 "),vO=a("a"),ofr=o("TFAlbertForSequenceClassification"),rfr=o(" (ALBERT model)"),tfr=l(),b6=a("li"),C_e=a("strong"),afr=o("bert"),nfr=o(" \u2014 "),TO=a("a"),sfr=o("TFBertForSequenceClassification"),lfr=o(" (BERT model)"),ifr=l(),v6=a("li"),M_e=a("strong"),dfr=o("camembert"),cfr=o(" \u2014 "),FO=a("a"),ffr=o("TFCamembertForSequenceClassification"),mfr=o(" (CamemBERT model)"),gfr=l(),T6=a("li"),E_e=a("strong"),hfr=o("convbert"),pfr=o(" \u2014 "),CO=a("a"),_fr=o("TFConvBertForSequenceClassification"),ufr=o(" (ConvBERT model)"),bfr=l(),F6=a("li"),y_e=a("strong"),vfr=o("ctrl"),Tfr=o(" \u2014 "),MO=a("a"),Ffr=o("TFCTRLForSequenceClassification"),Cfr=o(" (CTRL model)"),Mfr=l(),C6=a("li"),w_e=a("strong"),Efr=o("deberta"),yfr=o(" \u2014 "),EO=a("a"),wfr=o("TFDebertaForSequenceClassification"),Afr=o(" (DeBERTa model)"),Lfr=l(),M6=a("li"),A_e=a("strong"),Bfr=o("deberta-v2"),xfr=o(" \u2014 "),yO=a("a"),kfr=o("TFDebertaV2ForSequenceClassification"),Rfr=o(" (DeBERTa-v2 model)"),Sfr=l(),E6=a("li"),L_e=a("strong"),Pfr=o("distilbert"),$fr=o(" \u2014 "),wO=a("a"),Ifr=o("TFDistilBertForSequenceClassification"),Nfr=o(" (DistilBERT model)"),jfr=l(),y6=a("li"),B_e=a("strong"),Dfr=o("electra"),qfr=o(" \u2014 "),AO=a("a"),Gfr=o("TFElectraForSequenceClassification"),Ofr=o(" (ELECTRA model)"),Xfr=l(),w6=a("li"),x_e=a("strong"),Vfr=o("flaubert"),zfr=o(" \u2014 "),LO=a("a"),Wfr=o("TFFlaubertForSequenceClassification"),Qfr=o(" (FlauBERT model)"),Hfr=l(),A6=a("li"),k_e=a("strong"),Ufr=o("funnel"),Jfr=o(" \u2014 "),BO=a("a"),Yfr=o("TFFunnelForSequenceClassification"),Kfr=o(" (Funnel Transformer model)"),Zfr=l(),L6=a("li"),R_e=a("strong"),emr=o("gpt2"),omr=o(" \u2014 "),xO=a("a"),rmr=o("TFGPT2ForSequenceClassification"),tmr=o(" (OpenAI GPT-2 model)"),amr=l(),B6=a("li"),S_e=a("strong"),nmr=o("layoutlm"),smr=o(" \u2014 "),kO=a("a"),lmr=o("TFLayoutLMForSequenceClassification"),imr=o(" (LayoutLM model)"),dmr=l(),x6=a("li"),P_e=a("strong"),cmr=o("longformer"),fmr=o(" \u2014 "),RO=a("a"),mmr=o("TFLongformerForSequenceClassification"),gmr=o(" (Longformer model)"),hmr=l(),k6=a("li"),$_e=a("strong"),pmr=o("mobilebert"),_mr=o(" \u2014 "),SO=a("a"),umr=o("TFMobileBertForSequenceClassification"),bmr=o(" (MobileBERT model)"),vmr=l(),R6=a("li"),I_e=a("strong"),Tmr=o("mpnet"),Fmr=o(" \u2014 "),PO=a("a"),Cmr=o("TFMPNetForSequenceClassification"),Mmr=o(" (MPNet model)"),Emr=l(),S6=a("li"),N_e=a("strong"),ymr=o("openai-gpt"),wmr=o(" \u2014 "),$O=a("a"),Amr=o("TFOpenAIGPTForSequenceClassification"),Lmr=o(" (OpenAI GPT model)"),Bmr=l(),P6=a("li"),j_e=a("strong"),xmr=o("rembert"),kmr=o(" \u2014 "),IO=a("a"),Rmr=o("TFRemBertForSequenceClassification"),Smr=o(" (RemBERT model)"),Pmr=l(),$6=a("li"),D_e=a("strong"),$mr=o("roberta"),Imr=o(" \u2014 "),NO=a("a"),Nmr=o("TFRobertaForSequenceClassification"),jmr=o(" (RoBERTa model)"),Dmr=l(),I6=a("li"),q_e=a("strong"),qmr=o("roformer"),Gmr=o(" \u2014 "),jO=a("a"),Omr=o("TFRoFormerForSequenceClassification"),Xmr=o(" (RoFormer model)"),Vmr=l(),N6=a("li"),G_e=a("strong"),zmr=o("tapas"),Wmr=o(" \u2014 "),DO=a("a"),Qmr=o("TFTapasForSequenceClassification"),Hmr=o(" (TAPAS model)"),Umr=l(),j6=a("li"),O_e=a("strong"),Jmr=o("transfo-xl"),Ymr=o(" \u2014 "),qO=a("a"),Kmr=o("TFTransfoXLForSequenceClassification"),Zmr=o(" (Transformer-XL model)"),egr=l(),D6=a("li"),X_e=a("strong"),ogr=o("xlm"),rgr=o(" \u2014 "),GO=a("a"),tgr=o("TFXLMForSequenceClassification"),agr=o(" (XLM model)"),ngr=l(),q6=a("li"),V_e=a("strong"),sgr=o("xlm-roberta"),lgr=o(" \u2014 "),OO=a("a"),igr=o("TFXLMRobertaForSequenceClassification"),dgr=o(" (XLM-RoBERTa model)"),cgr=l(),G6=a("li"),z_e=a("strong"),fgr=o("xlnet"),mgr=o(" \u2014 "),XO=a("a"),ggr=o("TFXLNetForSequenceClassification"),hgr=o(" (XLNet model)"),pgr=l(),W_e=a("p"),_gr=o("Examples:"),ugr=l(),f(S0.$$.fragment),fRe=l(),Pc=a("h2"),O6=a("a"),Q_e=a("span"),f(P0.$$.fragment),bgr=l(),H_e=a("span"),vgr=o("TFAutoModelForMultipleChoice"),mRe=l(),wr=a("div"),f($0.$$.fragment),Tgr=l(),$c=a("p"),Fgr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),U_e=a("code"),Cgr=o("from_pretrained()"),Mgr=o("class method or the "),J_e=a("code"),Egr=o("from_config()"),ygr=o(`class
method.`),wgr=l(),I0=a("p"),Agr=o("This class cannot be instantiated directly using "),Y_e=a("code"),Lgr=o("__init__()"),Bgr=o(" (throws an error)."),xgr=l(),Tt=a("div"),f(N0.$$.fragment),kgr=l(),K_e=a("p"),Rgr=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Sgr=l(),Ic=a("p"),Pgr=o(`Note:
Loading a model from its configuration file does `),Z_e=a("strong"),$gr=o("not"),Igr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),eue=a("code"),Ngr=o("from_pretrained()"),jgr=o("to load the model weights."),Dgr=l(),oue=a("p"),qgr=o("Examples:"),Ggr=l(),f(j0.$$.fragment),Ogr=l(),Fo=a("div"),f(D0.$$.fragment),Xgr=l(),rue=a("p"),Vgr=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),zgr=l(),Mn=a("p"),Wgr=o("The model class to instantiate is selected based on the "),tue=a("code"),Qgr=o("model_type"),Hgr=o(` property of the config object (either
passed as an argument or loaded from `),aue=a("code"),Ugr=o("pretrained_model_name_or_path"),Jgr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=a("code"),Ygr=o("pretrained_model_name_or_path"),Kgr=o(":"),Zgr=l(),ae=a("ul"),X6=a("li"),sue=a("strong"),ehr=o("albert"),ohr=o(" \u2014 "),VO=a("a"),rhr=o("TFAlbertForMultipleChoice"),thr=o(" (ALBERT model)"),ahr=l(),V6=a("li"),lue=a("strong"),nhr=o("bert"),shr=o(" \u2014 "),zO=a("a"),lhr=o("TFBertForMultipleChoice"),ihr=o(" (BERT model)"),dhr=l(),z6=a("li"),iue=a("strong"),chr=o("camembert"),fhr=o(" \u2014 "),WO=a("a"),mhr=o("TFCamembertForMultipleChoice"),ghr=o(" (CamemBERT model)"),hhr=l(),W6=a("li"),due=a("strong"),phr=o("convbert"),_hr=o(" \u2014 "),QO=a("a"),uhr=o("TFConvBertForMultipleChoice"),bhr=o(" (ConvBERT model)"),vhr=l(),Q6=a("li"),cue=a("strong"),Thr=o("distilbert"),Fhr=o(" \u2014 "),HO=a("a"),Chr=o("TFDistilBertForMultipleChoice"),Mhr=o(" (DistilBERT model)"),Ehr=l(),H6=a("li"),fue=a("strong"),yhr=o("electra"),whr=o(" \u2014 "),UO=a("a"),Ahr=o("TFElectraForMultipleChoice"),Lhr=o(" (ELECTRA model)"),Bhr=l(),U6=a("li"),mue=a("strong"),xhr=o("flaubert"),khr=o(" \u2014 "),JO=a("a"),Rhr=o("TFFlaubertForMultipleChoice"),Shr=o(" (FlauBERT model)"),Phr=l(),J6=a("li"),gue=a("strong"),$hr=o("funnel"),Ihr=o(" \u2014 "),YO=a("a"),Nhr=o("TFFunnelForMultipleChoice"),jhr=o(" (Funnel Transformer model)"),Dhr=l(),Y6=a("li"),hue=a("strong"),qhr=o("longformer"),Ghr=o(" \u2014 "),KO=a("a"),Ohr=o("TFLongformerForMultipleChoice"),Xhr=o(" (Longformer model)"),Vhr=l(),K6=a("li"),pue=a("strong"),zhr=o("mobilebert"),Whr=o(" \u2014 "),ZO=a("a"),Qhr=o("TFMobileBertForMultipleChoice"),Hhr=o(" (MobileBERT model)"),Uhr=l(),Z6=a("li"),_ue=a("strong"),Jhr=o("mpnet"),Yhr=o(" \u2014 "),eX=a("a"),Khr=o("TFMPNetForMultipleChoice"),Zhr=o(" (MPNet model)"),epr=l(),eT=a("li"),uue=a("strong"),opr=o("rembert"),rpr=o(" \u2014 "),oX=a("a"),tpr=o("TFRemBertForMultipleChoice"),apr=o(" (RemBERT model)"),npr=l(),oT=a("li"),bue=a("strong"),spr=o("roberta"),lpr=o(" \u2014 "),rX=a("a"),ipr=o("TFRobertaForMultipleChoice"),dpr=o(" (RoBERTa model)"),cpr=l(),rT=a("li"),vue=a("strong"),fpr=o("roformer"),mpr=o(" \u2014 "),tX=a("a"),gpr=o("TFRoFormerForMultipleChoice"),hpr=o(" (RoFormer model)"),ppr=l(),tT=a("li"),Tue=a("strong"),_pr=o("xlm"),upr=o(" \u2014 "),aX=a("a"),bpr=o("TFXLMForMultipleChoice"),vpr=o(" (XLM model)"),Tpr=l(),aT=a("li"),Fue=a("strong"),Fpr=o("xlm-roberta"),Cpr=o(" \u2014 "),nX=a("a"),Mpr=o("TFXLMRobertaForMultipleChoice"),Epr=o(" (XLM-RoBERTa model)"),ypr=l(),nT=a("li"),Cue=a("strong"),wpr=o("xlnet"),Apr=o(" \u2014 "),sX=a("a"),Lpr=o("TFXLNetForMultipleChoice"),Bpr=o(" (XLNet model)"),xpr=l(),Mue=a("p"),kpr=o("Examples:"),Rpr=l(),f(q0.$$.fragment),gRe=l(),Nc=a("h2"),sT=a("a"),Eue=a("span"),f(G0.$$.fragment),Spr=l(),yue=a("span"),Ppr=o("TFAutoModelForTableQuestionAnswering"),hRe=l(),Ar=a("div"),f(O0.$$.fragment),$pr=l(),jc=a("p"),Ipr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wue=a("code"),Npr=o("from_pretrained()"),jpr=o("class method or the "),Aue=a("code"),Dpr=o("from_config()"),qpr=o(`class
method.`),Gpr=l(),X0=a("p"),Opr=o("This class cannot be instantiated directly using "),Lue=a("code"),Xpr=o("__init__()"),Vpr=o(" (throws an error)."),zpr=l(),Ft=a("div"),f(V0.$$.fragment),Wpr=l(),Bue=a("p"),Qpr=o("Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Hpr=l(),Dc=a("p"),Upr=o(`Note:
Loading a model from its configuration file does `),xue=a("strong"),Jpr=o("not"),Ypr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),kue=a("code"),Kpr=o("from_pretrained()"),Zpr=o("to load the model weights."),e_r=l(),Rue=a("p"),o_r=o("Examples:"),r_r=l(),f(z0.$$.fragment),t_r=l(),Co=a("div"),f(W0.$$.fragment),a_r=l(),Sue=a("p"),n_r=o("Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),s_r=l(),En=a("p"),l_r=o("The model class to instantiate is selected based on the "),Pue=a("code"),i_r=o("model_type"),d_r=o(` property of the config object (either
passed as an argument or loaded from `),$ue=a("code"),c_r=o("pretrained_model_name_or_path"),f_r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=a("code"),m_r=o("pretrained_model_name_or_path"),g_r=o(":"),h_r=l(),Nue=a("ul"),lT=a("li"),jue=a("strong"),p_r=o("tapas"),__r=o(" \u2014 "),lX=a("a"),u_r=o("TFTapasForQuestionAnswering"),b_r=o(" (TAPAS model)"),v_r=l(),Due=a("p"),T_r=o("Examples:"),F_r=l(),f(Q0.$$.fragment),pRe=l(),qc=a("h2"),iT=a("a"),que=a("span"),f(H0.$$.fragment),C_r=l(),Gue=a("span"),M_r=o("TFAutoModelForTokenClassification"),_Re=l(),Lr=a("div"),f(U0.$$.fragment),E_r=l(),Gc=a("p"),y_r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Oue=a("code"),w_r=o("from_pretrained()"),A_r=o("class method or the "),Xue=a("code"),L_r=o("from_config()"),B_r=o(`class
method.`),x_r=l(),J0=a("p"),k_r=o("This class cannot be instantiated directly using "),Vue=a("code"),R_r=o("__init__()"),S_r=o(" (throws an error)."),P_r=l(),Ct=a("div"),f(Y0.$$.fragment),$_r=l(),zue=a("p"),I_r=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),N_r=l(),Oc=a("p"),j_r=o(`Note:
Loading a model from its configuration file does `),Wue=a("strong"),D_r=o("not"),q_r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Que=a("code"),G_r=o("from_pretrained()"),O_r=o("to load the model weights."),X_r=l(),Hue=a("p"),V_r=o("Examples:"),z_r=l(),f(K0.$$.fragment),W_r=l(),Mo=a("div"),f(Z0.$$.fragment),Q_r=l(),Uue=a("p"),H_r=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),U_r=l(),yn=a("p"),J_r=o("The model class to instantiate is selected based on the "),Jue=a("code"),Y_r=o("model_type"),K_r=o(` property of the config object (either
passed as an argument or loaded from `),Yue=a("code"),Z_r=o("pretrained_model_name_or_path"),eur=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=a("code"),our=o("pretrained_model_name_or_path"),rur=o(":"),tur=l(),K=a("ul"),dT=a("li"),Zue=a("strong"),aur=o("albert"),nur=o(" \u2014 "),iX=a("a"),sur=o("TFAlbertForTokenClassification"),lur=o(" (ALBERT model)"),iur=l(),cT=a("li"),e1e=a("strong"),dur=o("bert"),cur=o(" \u2014 "),dX=a("a"),fur=o("TFBertForTokenClassification"),mur=o(" (BERT model)"),gur=l(),fT=a("li"),o1e=a("strong"),hur=o("camembert"),pur=o(" \u2014 "),cX=a("a"),_ur=o("TFCamembertForTokenClassification"),uur=o(" (CamemBERT model)"),bur=l(),mT=a("li"),r1e=a("strong"),vur=o("convbert"),Tur=o(" \u2014 "),fX=a("a"),Fur=o("TFConvBertForTokenClassification"),Cur=o(" (ConvBERT model)"),Mur=l(),gT=a("li"),t1e=a("strong"),Eur=o("deberta"),yur=o(" \u2014 "),mX=a("a"),wur=o("TFDebertaForTokenClassification"),Aur=o(" (DeBERTa model)"),Lur=l(),hT=a("li"),a1e=a("strong"),Bur=o("deberta-v2"),xur=o(" \u2014 "),gX=a("a"),kur=o("TFDebertaV2ForTokenClassification"),Rur=o(" (DeBERTa-v2 model)"),Sur=l(),pT=a("li"),n1e=a("strong"),Pur=o("distilbert"),$ur=o(" \u2014 "),hX=a("a"),Iur=o("TFDistilBertForTokenClassification"),Nur=o(" (DistilBERT model)"),jur=l(),_T=a("li"),s1e=a("strong"),Dur=o("electra"),qur=o(" \u2014 "),pX=a("a"),Gur=o("TFElectraForTokenClassification"),Our=o(" (ELECTRA model)"),Xur=l(),uT=a("li"),l1e=a("strong"),Vur=o("flaubert"),zur=o(" \u2014 "),_X=a("a"),Wur=o("TFFlaubertForTokenClassification"),Qur=o(" (FlauBERT model)"),Hur=l(),bT=a("li"),i1e=a("strong"),Uur=o("funnel"),Jur=o(" \u2014 "),uX=a("a"),Yur=o("TFFunnelForTokenClassification"),Kur=o(" (Funnel Transformer model)"),Zur=l(),vT=a("li"),d1e=a("strong"),e1r=o("layoutlm"),o1r=o(" \u2014 "),bX=a("a"),r1r=o("TFLayoutLMForTokenClassification"),t1r=o(" (LayoutLM model)"),a1r=l(),TT=a("li"),c1e=a("strong"),n1r=o("longformer"),s1r=o(" \u2014 "),vX=a("a"),l1r=o("TFLongformerForTokenClassification"),i1r=o(" (Longformer model)"),d1r=l(),FT=a("li"),f1e=a("strong"),c1r=o("mobilebert"),f1r=o(" \u2014 "),TX=a("a"),m1r=o("TFMobileBertForTokenClassification"),g1r=o(" (MobileBERT model)"),h1r=l(),CT=a("li"),m1e=a("strong"),p1r=o("mpnet"),_1r=o(" \u2014 "),FX=a("a"),u1r=o("TFMPNetForTokenClassification"),b1r=o(" (MPNet model)"),v1r=l(),MT=a("li"),g1e=a("strong"),T1r=o("rembert"),F1r=o(" \u2014 "),CX=a("a"),C1r=o("TFRemBertForTokenClassification"),M1r=o(" (RemBERT model)"),E1r=l(),ET=a("li"),h1e=a("strong"),y1r=o("roberta"),w1r=o(" \u2014 "),MX=a("a"),A1r=o("TFRobertaForTokenClassification"),L1r=o(" (RoBERTa model)"),B1r=l(),yT=a("li"),p1e=a("strong"),x1r=o("roformer"),k1r=o(" \u2014 "),EX=a("a"),R1r=o("TFRoFormerForTokenClassification"),S1r=o(" (RoFormer model)"),P1r=l(),wT=a("li"),_1e=a("strong"),$1r=o("xlm"),I1r=o(" \u2014 "),yX=a("a"),N1r=o("TFXLMForTokenClassification"),j1r=o(" (XLM model)"),D1r=l(),AT=a("li"),u1e=a("strong"),q1r=o("xlm-roberta"),G1r=o(" \u2014 "),wX=a("a"),O1r=o("TFXLMRobertaForTokenClassification"),X1r=o(" (XLM-RoBERTa model)"),V1r=l(),LT=a("li"),b1e=a("strong"),z1r=o("xlnet"),W1r=o(" \u2014 "),AX=a("a"),Q1r=o("TFXLNetForTokenClassification"),H1r=o(" (XLNet model)"),U1r=l(),v1e=a("p"),J1r=o("Examples:"),Y1r=l(),f(eL.$$.fragment),uRe=l(),Xc=a("h2"),BT=a("a"),T1e=a("span"),f(oL.$$.fragment),K1r=l(),F1e=a("span"),Z1r=o("TFAutoModelForQuestionAnswering"),bRe=l(),Br=a("div"),f(rL.$$.fragment),e4r=l(),Vc=a("p"),o4r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),C1e=a("code"),r4r=o("from_pretrained()"),t4r=o("class method or the "),M1e=a("code"),a4r=o("from_config()"),n4r=o(`class
method.`),s4r=l(),tL=a("p"),l4r=o("This class cannot be instantiated directly using "),E1e=a("code"),i4r=o("__init__()"),d4r=o(" (throws an error)."),c4r=l(),Mt=a("div"),f(aL.$$.fragment),f4r=l(),y1e=a("p"),m4r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),g4r=l(),zc=a("p"),h4r=o(`Note:
Loading a model from its configuration file does `),w1e=a("strong"),p4r=o("not"),_4r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),A1e=a("code"),u4r=o("from_pretrained()"),b4r=o("to load the model weights."),v4r=l(),L1e=a("p"),T4r=o("Examples:"),F4r=l(),f(nL.$$.fragment),C4r=l(),Eo=a("div"),f(sL.$$.fragment),M4r=l(),B1e=a("p"),E4r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),y4r=l(),wn=a("p"),w4r=o("The model class to instantiate is selected based on the "),x1e=a("code"),A4r=o("model_type"),L4r=o(` property of the config object (either
passed as an argument or loaded from `),k1e=a("code"),B4r=o("pretrained_model_name_or_path"),x4r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=a("code"),k4r=o("pretrained_model_name_or_path"),R4r=o(":"),S4r=l(),Z=a("ul"),xT=a("li"),S1e=a("strong"),P4r=o("albert"),$4r=o(" \u2014 "),LX=a("a"),I4r=o("TFAlbertForQuestionAnswering"),N4r=o(" (ALBERT model)"),j4r=l(),kT=a("li"),P1e=a("strong"),D4r=o("bert"),q4r=o(" \u2014 "),BX=a("a"),G4r=o("TFBertForQuestionAnswering"),O4r=o(" (BERT model)"),X4r=l(),RT=a("li"),$1e=a("strong"),V4r=o("camembert"),z4r=o(" \u2014 "),xX=a("a"),W4r=o("TFCamembertForQuestionAnswering"),Q4r=o(" (CamemBERT model)"),H4r=l(),ST=a("li"),I1e=a("strong"),U4r=o("convbert"),J4r=o(" \u2014 "),kX=a("a"),Y4r=o("TFConvBertForQuestionAnswering"),K4r=o(" (ConvBERT model)"),Z4r=l(),PT=a("li"),N1e=a("strong"),ebr=o("deberta"),obr=o(" \u2014 "),RX=a("a"),rbr=o("TFDebertaForQuestionAnswering"),tbr=o(" (DeBERTa model)"),abr=l(),$T=a("li"),j1e=a("strong"),nbr=o("deberta-v2"),sbr=o(" \u2014 "),SX=a("a"),lbr=o("TFDebertaV2ForQuestionAnswering"),ibr=o(" (DeBERTa-v2 model)"),dbr=l(),IT=a("li"),D1e=a("strong"),cbr=o("distilbert"),fbr=o(" \u2014 "),PX=a("a"),mbr=o("TFDistilBertForQuestionAnswering"),gbr=o(" (DistilBERT model)"),hbr=l(),NT=a("li"),q1e=a("strong"),pbr=o("electra"),_br=o(" \u2014 "),$X=a("a"),ubr=o("TFElectraForQuestionAnswering"),bbr=o(" (ELECTRA model)"),vbr=l(),jT=a("li"),G1e=a("strong"),Tbr=o("flaubert"),Fbr=o(" \u2014 "),IX=a("a"),Cbr=o("TFFlaubertForQuestionAnsweringSimple"),Mbr=o(" (FlauBERT model)"),Ebr=l(),DT=a("li"),O1e=a("strong"),ybr=o("funnel"),wbr=o(" \u2014 "),NX=a("a"),Abr=o("TFFunnelForQuestionAnswering"),Lbr=o(" (Funnel Transformer model)"),Bbr=l(),qT=a("li"),X1e=a("strong"),xbr=o("longformer"),kbr=o(" \u2014 "),jX=a("a"),Rbr=o("TFLongformerForQuestionAnswering"),Sbr=o(" (Longformer model)"),Pbr=l(),GT=a("li"),V1e=a("strong"),$br=o("mobilebert"),Ibr=o(" \u2014 "),DX=a("a"),Nbr=o("TFMobileBertForQuestionAnswering"),jbr=o(" (MobileBERT model)"),Dbr=l(),OT=a("li"),z1e=a("strong"),qbr=o("mpnet"),Gbr=o(" \u2014 "),qX=a("a"),Obr=o("TFMPNetForQuestionAnswering"),Xbr=o(" (MPNet model)"),Vbr=l(),XT=a("li"),W1e=a("strong"),zbr=o("rembert"),Wbr=o(" \u2014 "),GX=a("a"),Qbr=o("TFRemBertForQuestionAnswering"),Hbr=o(" (RemBERT model)"),Ubr=l(),VT=a("li"),Q1e=a("strong"),Jbr=o("roberta"),Ybr=o(" \u2014 "),OX=a("a"),Kbr=o("TFRobertaForQuestionAnswering"),Zbr=o(" (RoBERTa model)"),e3r=l(),zT=a("li"),H1e=a("strong"),o3r=o("roformer"),r3r=o(" \u2014 "),XX=a("a"),t3r=o("TFRoFormerForQuestionAnswering"),a3r=o(" (RoFormer model)"),n3r=l(),WT=a("li"),U1e=a("strong"),s3r=o("xlm"),l3r=o(" \u2014 "),VX=a("a"),i3r=o("TFXLMForQuestionAnsweringSimple"),d3r=o(" (XLM model)"),c3r=l(),QT=a("li"),J1e=a("strong"),f3r=o("xlm-roberta"),m3r=o(" \u2014 "),zX=a("a"),g3r=o("TFXLMRobertaForQuestionAnswering"),h3r=o(" (XLM-RoBERTa model)"),p3r=l(),HT=a("li"),Y1e=a("strong"),_3r=o("xlnet"),u3r=o(" \u2014 "),WX=a("a"),b3r=o("TFXLNetForQuestionAnsweringSimple"),v3r=o(" (XLNet model)"),T3r=l(),K1e=a("p"),F3r=o("Examples:"),C3r=l(),f(lL.$$.fragment),vRe=l(),Wc=a("h2"),UT=a("a"),Z1e=a("span"),f(iL.$$.fragment),M3r=l(),e4e=a("span"),E3r=o("TFAutoModelForVision2Seq"),TRe=l(),xr=a("div"),f(dL.$$.fragment),y3r=l(),Qc=a("p"),w3r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),o4e=a("code"),A3r=o("from_pretrained()"),L3r=o("class method or the "),r4e=a("code"),B3r=o("from_config()"),x3r=o(`class
method.`),k3r=l(),cL=a("p"),R3r=o("This class cannot be instantiated directly using "),t4e=a("code"),S3r=o("__init__()"),P3r=o(" (throws an error)."),$3r=l(),Et=a("div"),f(fL.$$.fragment),I3r=l(),a4e=a("p"),N3r=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),j3r=l(),Hc=a("p"),D3r=o(`Note:
Loading a model from its configuration file does `),n4e=a("strong"),q3r=o("not"),G3r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),s4e=a("code"),O3r=o("from_pretrained()"),X3r=o("to load the model weights."),V3r=l(),l4e=a("p"),z3r=o("Examples:"),W3r=l(),f(mL.$$.fragment),Q3r=l(),yo=a("div"),f(gL.$$.fragment),H3r=l(),i4e=a("p"),U3r=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),J3r=l(),An=a("p"),Y3r=o("The model class to instantiate is selected based on the "),d4e=a("code"),K3r=o("model_type"),Z3r=o(` property of the config object (either
passed as an argument or loaded from `),c4e=a("code"),e5r=o("pretrained_model_name_or_path"),o5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=a("code"),r5r=o("pretrained_model_name_or_path"),t5r=o(":"),a5r=l(),m4e=a("ul"),JT=a("li"),g4e=a("strong"),n5r=o("vision-encoder-decoder"),s5r=o(" \u2014 "),QX=a("a"),l5r=o("TFVisionEncoderDecoderModel"),i5r=o(" (Vision Encoder decoder model)"),d5r=l(),h4e=a("p"),c5r=o("Examples:"),f5r=l(),f(hL.$$.fragment),FRe=l(),Uc=a("h2"),YT=a("a"),p4e=a("span"),f(pL.$$.fragment),m5r=l(),_4e=a("span"),g5r=o("TFAutoModelForSpeechSeq2Seq"),CRe=l(),kr=a("div"),f(_L.$$.fragment),h5r=l(),Jc=a("p"),p5r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),u4e=a("code"),_5r=o("from_pretrained()"),u5r=o("class method or the "),b4e=a("code"),b5r=o("from_config()"),v5r=o(`class
method.`),T5r=l(),uL=a("p"),F5r=o("This class cannot be instantiated directly using "),v4e=a("code"),C5r=o("__init__()"),M5r=o(" (throws an error)."),E5r=l(),yt=a("div"),f(bL.$$.fragment),y5r=l(),T4e=a("p"),w5r=o("Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),A5r=l(),Yc=a("p"),L5r=o(`Note:
Loading a model from its configuration file does `),F4e=a("strong"),B5r=o("not"),x5r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),C4e=a("code"),k5r=o("from_pretrained()"),R5r=o("to load the model weights."),S5r=l(),M4e=a("p"),P5r=o("Examples:"),$5r=l(),f(vL.$$.fragment),I5r=l(),wo=a("div"),f(TL.$$.fragment),N5r=l(),E4e=a("p"),j5r=o("Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),D5r=l(),Ln=a("p"),q5r=o("The model class to instantiate is selected based on the "),y4e=a("code"),G5r=o("model_type"),O5r=o(` property of the config object (either
passed as an argument or loaded from `),w4e=a("code"),X5r=o("pretrained_model_name_or_path"),V5r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=a("code"),z5r=o("pretrained_model_name_or_path"),W5r=o(":"),Q5r=l(),L4e=a("ul"),KT=a("li"),B4e=a("strong"),H5r=o("speech_to_text"),U5r=o(" \u2014 "),HX=a("a"),J5r=o("TFSpeech2TextForConditionalGeneration"),Y5r=o(" (Speech2Text model)"),K5r=l(),x4e=a("p"),Z5r=o("Examples:"),e2r=l(),f(FL.$$.fragment),MRe=l(),Kc=a("h2"),ZT=a("a"),k4e=a("span"),f(CL.$$.fragment),o2r=l(),R4e=a("span"),r2r=o("FlaxAutoModel"),ERe=l(),Rr=a("div"),f(ML.$$.fragment),t2r=l(),Zc=a("p"),a2r=o(`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),S4e=a("code"),n2r=o("from_pretrained()"),s2r=o("class method or the "),P4e=a("code"),l2r=o("from_config()"),i2r=o(`class
method.`),d2r=l(),EL=a("p"),c2r=o("This class cannot be instantiated directly using "),$4e=a("code"),f2r=o("__init__()"),m2r=o(" (throws an error)."),g2r=l(),wt=a("div"),f(yL.$$.fragment),h2r=l(),I4e=a("p"),p2r=o("Instantiates one of the base model classes of the library from a configuration."),_2r=l(),ef=a("p"),u2r=o(`Note:
Loading a model from its configuration file does `),N4e=a("strong"),b2r=o("not"),v2r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),j4e=a("code"),T2r=o("from_pretrained()"),F2r=o("to load the model weights."),C2r=l(),D4e=a("p"),M2r=o("Examples:"),E2r=l(),f(wL.$$.fragment),y2r=l(),Ao=a("div"),f(AL.$$.fragment),w2r=l(),q4e=a("p"),A2r=o("Instantiate one of the base model classes of the library from a pretrained model."),L2r=l(),Bn=a("p"),B2r=o("The model class to instantiate is selected based on the "),G4e=a("code"),x2r=o("model_type"),k2r=o(` property of the config object (either
passed as an argument or loaded from `),O4e=a("code"),R2r=o("pretrained_model_name_or_path"),S2r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=a("code"),P2r=o("pretrained_model_name_or_path"),$2r=o(":"),I2r=l(),z=a("ul"),eF=a("li"),V4e=a("strong"),N2r=o("albert"),j2r=o(" \u2014 "),UX=a("a"),D2r=o("FlaxAlbertModel"),q2r=o(" (ALBERT model)"),G2r=l(),oF=a("li"),z4e=a("strong"),O2r=o("bart"),X2r=o(" \u2014 "),JX=a("a"),V2r=o("FlaxBartModel"),z2r=o(" (BART model)"),W2r=l(),rF=a("li"),W4e=a("strong"),Q2r=o("beit"),H2r=o(" \u2014 "),YX=a("a"),U2r=o("FlaxBeitModel"),J2r=o(" (BEiT model)"),Y2r=l(),tF=a("li"),Q4e=a("strong"),K2r=o("bert"),Z2r=o(" \u2014 "),KX=a("a"),evr=o("FlaxBertModel"),ovr=o(" (BERT model)"),rvr=l(),aF=a("li"),H4e=a("strong"),tvr=o("big_bird"),avr=o(" \u2014 "),ZX=a("a"),nvr=o("FlaxBigBirdModel"),svr=o(" (BigBird model)"),lvr=l(),nF=a("li"),U4e=a("strong"),ivr=o("blenderbot"),dvr=o(" \u2014 "),eV=a("a"),cvr=o("FlaxBlenderbotModel"),fvr=o(" (Blenderbot model)"),mvr=l(),sF=a("li"),J4e=a("strong"),gvr=o("blenderbot-small"),hvr=o(" \u2014 "),oV=a("a"),pvr=o("FlaxBlenderbotSmallModel"),_vr=o(" (BlenderbotSmall model)"),uvr=l(),lF=a("li"),Y4e=a("strong"),bvr=o("clip"),vvr=o(" \u2014 "),rV=a("a"),Tvr=o("FlaxCLIPModel"),Fvr=o(" (CLIP model)"),Cvr=l(),iF=a("li"),K4e=a("strong"),Mvr=o("distilbert"),Evr=o(" \u2014 "),tV=a("a"),yvr=o("FlaxDistilBertModel"),wvr=o(" (DistilBERT model)"),Avr=l(),dF=a("li"),Z4e=a("strong"),Lvr=o("electra"),Bvr=o(" \u2014 "),aV=a("a"),xvr=o("FlaxElectraModel"),kvr=o(" (ELECTRA model)"),Rvr=l(),cF=a("li"),ebe=a("strong"),Svr=o("gpt2"),Pvr=o(" \u2014 "),nV=a("a"),$vr=o("FlaxGPT2Model"),Ivr=o(" (OpenAI GPT-2 model)"),Nvr=l(),fF=a("li"),obe=a("strong"),jvr=o("gpt_neo"),Dvr=o(" \u2014 "),sV=a("a"),qvr=o("FlaxGPTNeoModel"),Gvr=o(" (GPT Neo model)"),Ovr=l(),mF=a("li"),rbe=a("strong"),Xvr=o("gptj"),Vvr=o(" \u2014 "),lV=a("a"),zvr=o("FlaxGPTJModel"),Wvr=o(" (GPT-J model)"),Qvr=l(),gF=a("li"),tbe=a("strong"),Hvr=o("marian"),Uvr=o(" \u2014 "),iV=a("a"),Jvr=o("FlaxMarianModel"),Yvr=o(" (Marian model)"),Kvr=l(),hF=a("li"),abe=a("strong"),Zvr=o("mbart"),e6r=o(" \u2014 "),dV=a("a"),o6r=o("FlaxMBartModel"),r6r=o(" (mBART model)"),t6r=l(),pF=a("li"),nbe=a("strong"),a6r=o("mt5"),n6r=o(" \u2014 "),cV=a("a"),s6r=o("FlaxMT5Model"),l6r=o(" (mT5 model)"),i6r=l(),_F=a("li"),sbe=a("strong"),d6r=o("pegasus"),c6r=o(" \u2014 "),fV=a("a"),f6r=o("FlaxPegasusModel"),m6r=o(" (Pegasus model)"),g6r=l(),uF=a("li"),lbe=a("strong"),h6r=o("roberta"),p6r=o(" \u2014 "),mV=a("a"),_6r=o("FlaxRobertaModel"),u6r=o(" (RoBERTa model)"),b6r=l(),bF=a("li"),ibe=a("strong"),v6r=o("roformer"),T6r=o(" \u2014 "),gV=a("a"),F6r=o("FlaxRoFormerModel"),C6r=o(" (RoFormer model)"),M6r=l(),vF=a("li"),dbe=a("strong"),E6r=o("t5"),y6r=o(" \u2014 "),hV=a("a"),w6r=o("FlaxT5Model"),A6r=o(" (T5 model)"),L6r=l(),TF=a("li"),cbe=a("strong"),B6r=o("vision-text-dual-encoder"),x6r=o(" \u2014 "),pV=a("a"),k6r=o("FlaxVisionTextDualEncoderModel"),R6r=o(" (VisionTextDualEncoder model)"),S6r=l(),FF=a("li"),fbe=a("strong"),P6r=o("vit"),$6r=o(" \u2014 "),_V=a("a"),I6r=o("FlaxViTModel"),N6r=o(" (ViT model)"),j6r=l(),CF=a("li"),mbe=a("strong"),D6r=o("wav2vec2"),q6r=o(" \u2014 "),uV=a("a"),G6r=o("FlaxWav2Vec2Model"),O6r=o(" (Wav2Vec2 model)"),X6r=l(),MF=a("li"),gbe=a("strong"),V6r=o("xglm"),z6r=o(" \u2014 "),bV=a("a"),W6r=o("FlaxXGLMModel"),Q6r=o(" (XGLM model)"),H6r=l(),EF=a("li"),hbe=a("strong"),U6r=o("xlm-roberta"),J6r=o(" \u2014 "),vV=a("a"),Y6r=o("FlaxXLMRobertaModel"),K6r=o(" (XLM-RoBERTa model)"),Z6r=l(),pbe=a("p"),eTr=o("Examples:"),oTr=l(),f(LL.$$.fragment),yRe=l(),of=a("h2"),yF=a("a"),_be=a("span"),f(BL.$$.fragment),rTr=l(),ube=a("span"),tTr=o("FlaxAutoModelForCausalLM"),wRe=l(),Sr=a("div"),f(xL.$$.fragment),aTr=l(),rf=a("p"),nTr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bbe=a("code"),sTr=o("from_pretrained()"),lTr=o("class method or the "),vbe=a("code"),iTr=o("from_config()"),dTr=o(`class
method.`),cTr=l(),kL=a("p"),fTr=o("This class cannot be instantiated directly using "),Tbe=a("code"),mTr=o("__init__()"),gTr=o(" (throws an error)."),hTr=l(),At=a("div"),f(RL.$$.fragment),pTr=l(),Fbe=a("p"),_Tr=o("Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),uTr=l(),tf=a("p"),bTr=o(`Note:
Loading a model from its configuration file does `),Cbe=a("strong"),vTr=o("not"),TTr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mbe=a("code"),FTr=o("from_pretrained()"),CTr=o("to load the model weights."),MTr=l(),Ebe=a("p"),ETr=o("Examples:"),yTr=l(),f(SL.$$.fragment),wTr=l(),Lo=a("div"),f(PL.$$.fragment),ATr=l(),ybe=a("p"),LTr=o("Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),BTr=l(),xn=a("p"),xTr=o("The model class to instantiate is selected based on the "),wbe=a("code"),kTr=o("model_type"),RTr=o(` property of the config object (either
passed as an argument or loaded from `),Abe=a("code"),STr=o("pretrained_model_name_or_path"),PTr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=a("code"),$Tr=o("pretrained_model_name_or_path"),ITr=o(":"),NTr=l(),ca=a("ul"),wF=a("li"),Bbe=a("strong"),jTr=o("bart"),DTr=o(" \u2014 "),TV=a("a"),qTr=o("FlaxBartForCausalLM"),GTr=o(" (BART model)"),OTr=l(),AF=a("li"),xbe=a("strong"),XTr=o("gpt2"),VTr=o(" \u2014 "),FV=a("a"),zTr=o("FlaxGPT2LMHeadModel"),WTr=o(" (OpenAI GPT-2 model)"),QTr=l(),LF=a("li"),kbe=a("strong"),HTr=o("gpt_neo"),UTr=o(" \u2014 "),CV=a("a"),JTr=o("FlaxGPTNeoForCausalLM"),YTr=o(" (GPT Neo model)"),KTr=l(),BF=a("li"),Rbe=a("strong"),ZTr=o("gptj"),eFr=o(" \u2014 "),MV=a("a"),oFr=o("FlaxGPTJForCausalLM"),rFr=o(" (GPT-J model)"),tFr=l(),xF=a("li"),Sbe=a("strong"),aFr=o("xglm"),nFr=o(" \u2014 "),EV=a("a"),sFr=o("FlaxXGLMForCausalLM"),lFr=o(" (XGLM model)"),iFr=l(),Pbe=a("p"),dFr=o("Examples:"),cFr=l(),f($L.$$.fragment),ARe=l(),af=a("h2"),kF=a("a"),$be=a("span"),f(IL.$$.fragment),fFr=l(),Ibe=a("span"),mFr=o("FlaxAutoModelForPreTraining"),LRe=l(),Pr=a("div"),f(NL.$$.fragment),gFr=l(),nf=a("p"),hFr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nbe=a("code"),pFr=o("from_pretrained()"),_Fr=o("class method or the "),jbe=a("code"),uFr=o("from_config()"),bFr=o(`class
method.`),vFr=l(),jL=a("p"),TFr=o("This class cannot be instantiated directly using "),Dbe=a("code"),FFr=o("__init__()"),CFr=o(" (throws an error)."),MFr=l(),Lt=a("div"),f(DL.$$.fragment),EFr=l(),qbe=a("p"),yFr=o("Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),wFr=l(),sf=a("p"),AFr=o(`Note:
Loading a model from its configuration file does `),Gbe=a("strong"),LFr=o("not"),BFr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Obe=a("code"),xFr=o("from_pretrained()"),kFr=o("to load the model weights."),RFr=l(),Xbe=a("p"),SFr=o("Examples:"),PFr=l(),f(qL.$$.fragment),$Fr=l(),Bo=a("div"),f(GL.$$.fragment),IFr=l(),Vbe=a("p"),NFr=o("Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),jFr=l(),kn=a("p"),DFr=o("The model class to instantiate is selected based on the "),zbe=a("code"),qFr=o("model_type"),GFr=o(` property of the config object (either
passed as an argument or loaded from `),Wbe=a("code"),OFr=o("pretrained_model_name_or_path"),XFr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=a("code"),VFr=o("pretrained_model_name_or_path"),zFr=o(":"),WFr=l(),ce=a("ul"),RF=a("li"),Hbe=a("strong"),QFr=o("albert"),HFr=o(" \u2014 "),yV=a("a"),UFr=o("FlaxAlbertForPreTraining"),JFr=o(" (ALBERT model)"),YFr=l(),SF=a("li"),Ube=a("strong"),KFr=o("bart"),ZFr=o(" \u2014 "),wV=a("a"),eCr=o("FlaxBartForConditionalGeneration"),oCr=o(" (BART model)"),rCr=l(),PF=a("li"),Jbe=a("strong"),tCr=o("bert"),aCr=o(" \u2014 "),AV=a("a"),nCr=o("FlaxBertForPreTraining"),sCr=o(" (BERT model)"),lCr=l(),$F=a("li"),Ybe=a("strong"),iCr=o("big_bird"),dCr=o(" \u2014 "),LV=a("a"),cCr=o("FlaxBigBirdForPreTraining"),fCr=o(" (BigBird model)"),mCr=l(),IF=a("li"),Kbe=a("strong"),gCr=o("electra"),hCr=o(" \u2014 "),BV=a("a"),pCr=o("FlaxElectraForPreTraining"),_Cr=o(" (ELECTRA model)"),uCr=l(),NF=a("li"),Zbe=a("strong"),bCr=o("mbart"),vCr=o(" \u2014 "),xV=a("a"),TCr=o("FlaxMBartForConditionalGeneration"),FCr=o(" (mBART model)"),CCr=l(),jF=a("li"),e3e=a("strong"),MCr=o("mt5"),ECr=o(" \u2014 "),kV=a("a"),yCr=o("FlaxMT5ForConditionalGeneration"),wCr=o(" (mT5 model)"),ACr=l(),DF=a("li"),o3e=a("strong"),LCr=o("roberta"),BCr=o(" \u2014 "),RV=a("a"),xCr=o("FlaxRobertaForMaskedLM"),kCr=o(" (RoBERTa model)"),RCr=l(),qF=a("li"),r3e=a("strong"),SCr=o("roformer"),PCr=o(" \u2014 "),SV=a("a"),$Cr=o("FlaxRoFormerForMaskedLM"),ICr=o(" (RoFormer model)"),NCr=l(),GF=a("li"),t3e=a("strong"),jCr=o("t5"),DCr=o(" \u2014 "),PV=a("a"),qCr=o("FlaxT5ForConditionalGeneration"),GCr=o(" (T5 model)"),OCr=l(),OF=a("li"),a3e=a("strong"),XCr=o("wav2vec2"),VCr=o(" \u2014 "),$V=a("a"),zCr=o("FlaxWav2Vec2ForPreTraining"),WCr=o(" (Wav2Vec2 model)"),QCr=l(),XF=a("li"),n3e=a("strong"),HCr=o("xlm-roberta"),UCr=o(" \u2014 "),IV=a("a"),JCr=o("FlaxXLMRobertaForMaskedLM"),YCr=o(" (XLM-RoBERTa model)"),KCr=l(),s3e=a("p"),ZCr=o("Examples:"),eMr=l(),f(OL.$$.fragment),BRe=l(),lf=a("h2"),VF=a("a"),l3e=a("span"),f(XL.$$.fragment),oMr=l(),i3e=a("span"),rMr=o("FlaxAutoModelForMaskedLM"),xRe=l(),$r=a("div"),f(VL.$$.fragment),tMr=l(),df=a("p"),aMr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),d3e=a("code"),nMr=o("from_pretrained()"),sMr=o("class method or the "),c3e=a("code"),lMr=o("from_config()"),iMr=o(`class
method.`),dMr=l(),zL=a("p"),cMr=o("This class cannot be instantiated directly using "),f3e=a("code"),fMr=o("__init__()"),mMr=o(" (throws an error)."),gMr=l(),Bt=a("div"),f(WL.$$.fragment),hMr=l(),m3e=a("p"),pMr=o("Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),_Mr=l(),cf=a("p"),uMr=o(`Note:
Loading a model from its configuration file does `),g3e=a("strong"),bMr=o("not"),vMr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),h3e=a("code"),TMr=o("from_pretrained()"),FMr=o("to load the model weights."),CMr=l(),p3e=a("p"),MMr=o("Examples:"),EMr=l(),f(QL.$$.fragment),yMr=l(),xo=a("div"),f(HL.$$.fragment),wMr=l(),_3e=a("p"),AMr=o("Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),LMr=l(),Rn=a("p"),BMr=o("The model class to instantiate is selected based on the "),u3e=a("code"),xMr=o("model_type"),kMr=o(` property of the config object (either
passed as an argument or loaded from `),b3e=a("code"),RMr=o("pretrained_model_name_or_path"),SMr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=a("code"),PMr=o("pretrained_model_name_or_path"),$Mr=o(":"),IMr=l(),be=a("ul"),zF=a("li"),T3e=a("strong"),NMr=o("albert"),jMr=o(" \u2014 "),NV=a("a"),DMr=o("FlaxAlbertForMaskedLM"),qMr=o(" (ALBERT model)"),GMr=l(),WF=a("li"),F3e=a("strong"),OMr=o("bart"),XMr=o(" \u2014 "),jV=a("a"),VMr=o("FlaxBartForConditionalGeneration"),zMr=o(" (BART model)"),WMr=l(),QF=a("li"),C3e=a("strong"),QMr=o("bert"),HMr=o(" \u2014 "),DV=a("a"),UMr=o("FlaxBertForMaskedLM"),JMr=o(" (BERT model)"),YMr=l(),HF=a("li"),M3e=a("strong"),KMr=o("big_bird"),ZMr=o(" \u2014 "),qV=a("a"),eEr=o("FlaxBigBirdForMaskedLM"),oEr=o(" (BigBird model)"),rEr=l(),UF=a("li"),E3e=a("strong"),tEr=o("distilbert"),aEr=o(" \u2014 "),GV=a("a"),nEr=o("FlaxDistilBertForMaskedLM"),sEr=o(" (DistilBERT model)"),lEr=l(),JF=a("li"),y3e=a("strong"),iEr=o("electra"),dEr=o(" \u2014 "),OV=a("a"),cEr=o("FlaxElectraForMaskedLM"),fEr=o(" (ELECTRA model)"),mEr=l(),YF=a("li"),w3e=a("strong"),gEr=o("mbart"),hEr=o(" \u2014 "),XV=a("a"),pEr=o("FlaxMBartForConditionalGeneration"),_Er=o(" (mBART model)"),uEr=l(),KF=a("li"),A3e=a("strong"),bEr=o("roberta"),vEr=o(" \u2014 "),VV=a("a"),TEr=o("FlaxRobertaForMaskedLM"),FEr=o(" (RoBERTa model)"),CEr=l(),ZF=a("li"),L3e=a("strong"),MEr=o("roformer"),EEr=o(" \u2014 "),zV=a("a"),yEr=o("FlaxRoFormerForMaskedLM"),wEr=o(" (RoFormer model)"),AEr=l(),eC=a("li"),B3e=a("strong"),LEr=o("xlm-roberta"),BEr=o(" \u2014 "),WV=a("a"),xEr=o("FlaxXLMRobertaForMaskedLM"),kEr=o(" (XLM-RoBERTa model)"),REr=l(),x3e=a("p"),SEr=o("Examples:"),PEr=l(),f(UL.$$.fragment),kRe=l(),ff=a("h2"),oC=a("a"),k3e=a("span"),f(JL.$$.fragment),$Er=l(),R3e=a("span"),IEr=o("FlaxAutoModelForSeq2SeqLM"),RRe=l(),Ir=a("div"),f(YL.$$.fragment),NEr=l(),mf=a("p"),jEr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),S3e=a("code"),DEr=o("from_pretrained()"),qEr=o("class method or the "),P3e=a("code"),GEr=o("from_config()"),OEr=o(`class
method.`),XEr=l(),KL=a("p"),VEr=o("This class cannot be instantiated directly using "),$3e=a("code"),zEr=o("__init__()"),WEr=o(" (throws an error)."),QEr=l(),xt=a("div"),f(ZL.$$.fragment),HEr=l(),I3e=a("p"),UEr=o("Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),JEr=l(),gf=a("p"),YEr=o(`Note:
Loading a model from its configuration file does `),N3e=a("strong"),KEr=o("not"),ZEr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),j3e=a("code"),eyr=o("from_pretrained()"),oyr=o("to load the model weights."),ryr=l(),D3e=a("p"),tyr=o("Examples:"),ayr=l(),f(e7.$$.fragment),nyr=l(),ko=a("div"),f(o7.$$.fragment),syr=l(),q3e=a("p"),lyr=o("Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),iyr=l(),Sn=a("p"),dyr=o("The model class to instantiate is selected based on the "),G3e=a("code"),cyr=o("model_type"),fyr=o(` property of the config object (either
passed as an argument or loaded from `),O3e=a("code"),myr=o("pretrained_model_name_or_path"),gyr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=a("code"),hyr=o("pretrained_model_name_or_path"),pyr=o(":"),_yr=l(),Ee=a("ul"),rC=a("li"),V3e=a("strong"),uyr=o("bart"),byr=o(" \u2014 "),QV=a("a"),vyr=o("FlaxBartForConditionalGeneration"),Tyr=o(" (BART model)"),Fyr=l(),tC=a("li"),z3e=a("strong"),Cyr=o("blenderbot"),Myr=o(" \u2014 "),HV=a("a"),Eyr=o("FlaxBlenderbotForConditionalGeneration"),yyr=o(" (Blenderbot model)"),wyr=l(),aC=a("li"),W3e=a("strong"),Ayr=o("blenderbot-small"),Lyr=o(" \u2014 "),UV=a("a"),Byr=o("FlaxBlenderbotSmallForConditionalGeneration"),xyr=o(" (BlenderbotSmall model)"),kyr=l(),nC=a("li"),Q3e=a("strong"),Ryr=o("encoder-decoder"),Syr=o(" \u2014 "),JV=a("a"),Pyr=o("FlaxEncoderDecoderModel"),$yr=o(" (Encoder decoder model)"),Iyr=l(),sC=a("li"),H3e=a("strong"),Nyr=o("marian"),jyr=o(" \u2014 "),YV=a("a"),Dyr=o("FlaxMarianMTModel"),qyr=o(" (Marian model)"),Gyr=l(),lC=a("li"),U3e=a("strong"),Oyr=o("mbart"),Xyr=o(" \u2014 "),KV=a("a"),Vyr=o("FlaxMBartForConditionalGeneration"),zyr=o(" (mBART model)"),Wyr=l(),iC=a("li"),J3e=a("strong"),Qyr=o("mt5"),Hyr=o(" \u2014 "),ZV=a("a"),Uyr=o("FlaxMT5ForConditionalGeneration"),Jyr=o(" (mT5 model)"),Yyr=l(),dC=a("li"),Y3e=a("strong"),Kyr=o("pegasus"),Zyr=o(" \u2014 "),ez=a("a"),ewr=o("FlaxPegasusForConditionalGeneration"),owr=o(" (Pegasus model)"),rwr=l(),cC=a("li"),K3e=a("strong"),twr=o("t5"),awr=o(" \u2014 "),oz=a("a"),nwr=o("FlaxT5ForConditionalGeneration"),swr=o(" (T5 model)"),lwr=l(),Z3e=a("p"),iwr=o("Examples:"),dwr=l(),f(r7.$$.fragment),SRe=l(),hf=a("h2"),fC=a("a"),e5e=a("span"),f(t7.$$.fragment),cwr=l(),o5e=a("span"),fwr=o("FlaxAutoModelForSequenceClassification"),PRe=l(),Nr=a("div"),f(a7.$$.fragment),mwr=l(),pf=a("p"),gwr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),r5e=a("code"),hwr=o("from_pretrained()"),pwr=o("class method or the "),t5e=a("code"),_wr=o("from_config()"),uwr=o(`class
method.`),bwr=l(),n7=a("p"),vwr=o("This class cannot be instantiated directly using "),a5e=a("code"),Twr=o("__init__()"),Fwr=o(" (throws an error)."),Cwr=l(),kt=a("div"),f(s7.$$.fragment),Mwr=l(),n5e=a("p"),Ewr=o("Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),ywr=l(),_f=a("p"),wwr=o(`Note:
Loading a model from its configuration file does `),s5e=a("strong"),Awr=o("not"),Lwr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),l5e=a("code"),Bwr=o("from_pretrained()"),xwr=o("to load the model weights."),kwr=l(),i5e=a("p"),Rwr=o("Examples:"),Swr=l(),f(l7.$$.fragment),Pwr=l(),Ro=a("div"),f(i7.$$.fragment),$wr=l(),d5e=a("p"),Iwr=o("Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),Nwr=l(),Pn=a("p"),jwr=o("The model class to instantiate is selected based on the "),c5e=a("code"),Dwr=o("model_type"),qwr=o(` property of the config object (either
passed as an argument or loaded from `),f5e=a("code"),Gwr=o("pretrained_model_name_or_path"),Owr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=a("code"),Xwr=o("pretrained_model_name_or_path"),Vwr=o(":"),zwr=l(),ve=a("ul"),mC=a("li"),g5e=a("strong"),Wwr=o("albert"),Qwr=o(" \u2014 "),rz=a("a"),Hwr=o("FlaxAlbertForSequenceClassification"),Uwr=o(" (ALBERT model)"),Jwr=l(),gC=a("li"),h5e=a("strong"),Ywr=o("bart"),Kwr=o(" \u2014 "),tz=a("a"),Zwr=o("FlaxBartForSequenceClassification"),eAr=o(" (BART model)"),oAr=l(),hC=a("li"),p5e=a("strong"),rAr=o("bert"),tAr=o(" \u2014 "),az=a("a"),aAr=o("FlaxBertForSequenceClassification"),nAr=o(" (BERT model)"),sAr=l(),pC=a("li"),_5e=a("strong"),lAr=o("big_bird"),iAr=o(" \u2014 "),nz=a("a"),dAr=o("FlaxBigBirdForSequenceClassification"),cAr=o(" (BigBird model)"),fAr=l(),_C=a("li"),u5e=a("strong"),mAr=o("distilbert"),gAr=o(" \u2014 "),sz=a("a"),hAr=o("FlaxDistilBertForSequenceClassification"),pAr=o(" (DistilBERT model)"),_Ar=l(),uC=a("li"),b5e=a("strong"),uAr=o("electra"),bAr=o(" \u2014 "),lz=a("a"),vAr=o("FlaxElectraForSequenceClassification"),TAr=o(" (ELECTRA model)"),FAr=l(),bC=a("li"),v5e=a("strong"),CAr=o("mbart"),MAr=o(" \u2014 "),iz=a("a"),EAr=o("FlaxMBartForSequenceClassification"),yAr=o(" (mBART model)"),wAr=l(),vC=a("li"),T5e=a("strong"),AAr=o("roberta"),LAr=o(" \u2014 "),dz=a("a"),BAr=o("FlaxRobertaForSequenceClassification"),xAr=o(" (RoBERTa model)"),kAr=l(),TC=a("li"),F5e=a("strong"),RAr=o("roformer"),SAr=o(" \u2014 "),cz=a("a"),PAr=o("FlaxRoFormerForSequenceClassification"),$Ar=o(" (RoFormer model)"),IAr=l(),FC=a("li"),C5e=a("strong"),NAr=o("xlm-roberta"),jAr=o(" \u2014 "),fz=a("a"),DAr=o("FlaxXLMRobertaForSequenceClassification"),qAr=o(" (XLM-RoBERTa model)"),GAr=l(),M5e=a("p"),OAr=o("Examples:"),XAr=l(),f(d7.$$.fragment),$Re=l(),uf=a("h2"),CC=a("a"),E5e=a("span"),f(c7.$$.fragment),VAr=l(),y5e=a("span"),zAr=o("FlaxAutoModelForQuestionAnswering"),IRe=l(),jr=a("div"),f(f7.$$.fragment),WAr=l(),bf=a("p"),QAr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),w5e=a("code"),HAr=o("from_pretrained()"),UAr=o("class method or the "),A5e=a("code"),JAr=o("from_config()"),YAr=o(`class
method.`),KAr=l(),m7=a("p"),ZAr=o("This class cannot be instantiated directly using "),L5e=a("code"),e0r=o("__init__()"),o0r=o(" (throws an error)."),r0r=l(),Rt=a("div"),f(g7.$$.fragment),t0r=l(),B5e=a("p"),a0r=o("Instantiates one of the model classes of the library (with a question answering head) from a configuration."),n0r=l(),vf=a("p"),s0r=o(`Note:
Loading a model from its configuration file does `),x5e=a("strong"),l0r=o("not"),i0r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),k5e=a("code"),d0r=o("from_pretrained()"),c0r=o("to load the model weights."),f0r=l(),R5e=a("p"),m0r=o("Examples:"),g0r=l(),f(h7.$$.fragment),h0r=l(),So=a("div"),f(p7.$$.fragment),p0r=l(),S5e=a("p"),_0r=o("Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),u0r=l(),$n=a("p"),b0r=o("The model class to instantiate is selected based on the "),P5e=a("code"),v0r=o("model_type"),T0r=o(` property of the config object (either
passed as an argument or loaded from `),$5e=a("code"),F0r=o("pretrained_model_name_or_path"),C0r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=a("code"),M0r=o("pretrained_model_name_or_path"),E0r=o(":"),y0r=l(),Te=a("ul"),MC=a("li"),N5e=a("strong"),w0r=o("albert"),A0r=o(" \u2014 "),mz=a("a"),L0r=o("FlaxAlbertForQuestionAnswering"),B0r=o(" (ALBERT model)"),x0r=l(),EC=a("li"),j5e=a("strong"),k0r=o("bart"),R0r=o(" \u2014 "),gz=a("a"),S0r=o("FlaxBartForQuestionAnswering"),P0r=o(" (BART model)"),$0r=l(),yC=a("li"),D5e=a("strong"),I0r=o("bert"),N0r=o(" \u2014 "),hz=a("a"),j0r=o("FlaxBertForQuestionAnswering"),D0r=o(" (BERT model)"),q0r=l(),wC=a("li"),q5e=a("strong"),G0r=o("big_bird"),O0r=o(" \u2014 "),pz=a("a"),X0r=o("FlaxBigBirdForQuestionAnswering"),V0r=o(" (BigBird model)"),z0r=l(),AC=a("li"),G5e=a("strong"),W0r=o("distilbert"),Q0r=o(" \u2014 "),_z=a("a"),H0r=o("FlaxDistilBertForQuestionAnswering"),U0r=o(" (DistilBERT model)"),J0r=l(),LC=a("li"),O5e=a("strong"),Y0r=o("electra"),K0r=o(" \u2014 "),uz=a("a"),Z0r=o("FlaxElectraForQuestionAnswering"),eLr=o(" (ELECTRA model)"),oLr=l(),BC=a("li"),X5e=a("strong"),rLr=o("mbart"),tLr=o(" \u2014 "),bz=a("a"),aLr=o("FlaxMBartForQuestionAnswering"),nLr=o(" (mBART model)"),sLr=l(),xC=a("li"),V5e=a("strong"),lLr=o("roberta"),iLr=o(" \u2014 "),vz=a("a"),dLr=o("FlaxRobertaForQuestionAnswering"),cLr=o(" (RoBERTa model)"),fLr=l(),kC=a("li"),z5e=a("strong"),mLr=o("roformer"),gLr=o(" \u2014 "),Tz=a("a"),hLr=o("FlaxRoFormerForQuestionAnswering"),pLr=o(" (RoFormer model)"),_Lr=l(),RC=a("li"),W5e=a("strong"),uLr=o("xlm-roberta"),bLr=o(" \u2014 "),Fz=a("a"),vLr=o("FlaxXLMRobertaForQuestionAnswering"),TLr=o(" (XLM-RoBERTa model)"),FLr=l(),Q5e=a("p"),CLr=o("Examples:"),MLr=l(),f(_7.$$.fragment),NRe=l(),Tf=a("h2"),SC=a("a"),H5e=a("span"),f(u7.$$.fragment),ELr=l(),U5e=a("span"),yLr=o("FlaxAutoModelForTokenClassification"),jRe=l(),Dr=a("div"),f(b7.$$.fragment),wLr=l(),Ff=a("p"),ALr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),J5e=a("code"),LLr=o("from_pretrained()"),BLr=o("class method or the "),Y5e=a("code"),xLr=o("from_config()"),kLr=o(`class
method.`),RLr=l(),v7=a("p"),SLr=o("This class cannot be instantiated directly using "),K5e=a("code"),PLr=o("__init__()"),$Lr=o(" (throws an error)."),ILr=l(),St=a("div"),f(T7.$$.fragment),NLr=l(),Z5e=a("p"),jLr=o("Instantiates one of the model classes of the library (with a token classification head) from a configuration."),DLr=l(),Cf=a("p"),qLr=o(`Note:
Loading a model from its configuration file does `),e2e=a("strong"),GLr=o("not"),OLr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),o2e=a("code"),XLr=o("from_pretrained()"),VLr=o("to load the model weights."),zLr=l(),r2e=a("p"),WLr=o("Examples:"),QLr=l(),f(F7.$$.fragment),HLr=l(),Po=a("div"),f(C7.$$.fragment),ULr=l(),t2e=a("p"),JLr=o("Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),YLr=l(),In=a("p"),KLr=o("The model class to instantiate is selected based on the "),a2e=a("code"),ZLr=o("model_type"),e7r=o(` property of the config object (either
passed as an argument or loaded from `),n2e=a("code"),o7r=o("pretrained_model_name_or_path"),r7r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=a("code"),t7r=o("pretrained_model_name_or_path"),a7r=o(":"),n7r=l(),Se=a("ul"),PC=a("li"),l2e=a("strong"),s7r=o("albert"),l7r=o(" \u2014 "),Cz=a("a"),i7r=o("FlaxAlbertForTokenClassification"),d7r=o(" (ALBERT model)"),c7r=l(),$C=a("li"),i2e=a("strong"),f7r=o("bert"),m7r=o(" \u2014 "),Mz=a("a"),g7r=o("FlaxBertForTokenClassification"),h7r=o(" (BERT model)"),p7r=l(),IC=a("li"),d2e=a("strong"),_7r=o("big_bird"),u7r=o(" \u2014 "),Ez=a("a"),b7r=o("FlaxBigBirdForTokenClassification"),v7r=o(" (BigBird model)"),T7r=l(),NC=a("li"),c2e=a("strong"),F7r=o("distilbert"),C7r=o(" \u2014 "),yz=a("a"),M7r=o("FlaxDistilBertForTokenClassification"),E7r=o(" (DistilBERT model)"),y7r=l(),jC=a("li"),f2e=a("strong"),w7r=o("electra"),A7r=o(" \u2014 "),wz=a("a"),L7r=o("FlaxElectraForTokenClassification"),B7r=o(" (ELECTRA model)"),x7r=l(),DC=a("li"),m2e=a("strong"),k7r=o("roberta"),R7r=o(" \u2014 "),Az=a("a"),S7r=o("FlaxRobertaForTokenClassification"),P7r=o(" (RoBERTa model)"),$7r=l(),qC=a("li"),g2e=a("strong"),I7r=o("roformer"),N7r=o(" \u2014 "),Lz=a("a"),j7r=o("FlaxRoFormerForTokenClassification"),D7r=o(" (RoFormer model)"),q7r=l(),GC=a("li"),h2e=a("strong"),G7r=o("xlm-roberta"),O7r=o(" \u2014 "),Bz=a("a"),X7r=o("FlaxXLMRobertaForTokenClassification"),V7r=o(" (XLM-RoBERTa model)"),z7r=l(),p2e=a("p"),W7r=o("Examples:"),Q7r=l(),f(M7.$$.fragment),DRe=l(),Mf=a("h2"),OC=a("a"),_2e=a("span"),f(E7.$$.fragment),H7r=l(),u2e=a("span"),U7r=o("FlaxAutoModelForMultipleChoice"),qRe=l(),qr=a("div"),f(y7.$$.fragment),J7r=l(),Ef=a("p"),Y7r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),b2e=a("code"),K7r=o("from_pretrained()"),Z7r=o("class method or the "),v2e=a("code"),e8r=o("from_config()"),o8r=o(`class
method.`),r8r=l(),w7=a("p"),t8r=o("This class cannot be instantiated directly using "),T2e=a("code"),a8r=o("__init__()"),n8r=o(" (throws an error)."),s8r=l(),Pt=a("div"),f(A7.$$.fragment),l8r=l(),F2e=a("p"),i8r=o("Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),d8r=l(),yf=a("p"),c8r=o(`Note:
Loading a model from its configuration file does `),C2e=a("strong"),f8r=o("not"),m8r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),M2e=a("code"),g8r=o("from_pretrained()"),h8r=o("to load the model weights."),p8r=l(),E2e=a("p"),_8r=o("Examples:"),u8r=l(),f(L7.$$.fragment),b8r=l(),$o=a("div"),f(B7.$$.fragment),v8r=l(),y2e=a("p"),T8r=o("Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),F8r=l(),Nn=a("p"),C8r=o("The model class to instantiate is selected based on the "),w2e=a("code"),M8r=o("model_type"),E8r=o(` property of the config object (either
passed as an argument or loaded from `),A2e=a("code"),y8r=o("pretrained_model_name_or_path"),w8r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=a("code"),A8r=o("pretrained_model_name_or_path"),L8r=o(":"),B8r=l(),Pe=a("ul"),XC=a("li"),B2e=a("strong"),x8r=o("albert"),k8r=o(" \u2014 "),xz=a("a"),R8r=o("FlaxAlbertForMultipleChoice"),S8r=o(" (ALBERT model)"),P8r=l(),VC=a("li"),x2e=a("strong"),$8r=o("bert"),I8r=o(" \u2014 "),kz=a("a"),N8r=o("FlaxBertForMultipleChoice"),j8r=o(" (BERT model)"),D8r=l(),zC=a("li"),k2e=a("strong"),q8r=o("big_bird"),G8r=o(" \u2014 "),Rz=a("a"),O8r=o("FlaxBigBirdForMultipleChoice"),X8r=o(" (BigBird model)"),V8r=l(),WC=a("li"),R2e=a("strong"),z8r=o("distilbert"),W8r=o(" \u2014 "),Sz=a("a"),Q8r=o("FlaxDistilBertForMultipleChoice"),H8r=o(" (DistilBERT model)"),U8r=l(),QC=a("li"),S2e=a("strong"),J8r=o("electra"),Y8r=o(" \u2014 "),Pz=a("a"),K8r=o("FlaxElectraForMultipleChoice"),Z8r=o(" (ELECTRA model)"),e9r=l(),HC=a("li"),P2e=a("strong"),o9r=o("roberta"),r9r=o(" \u2014 "),$z=a("a"),t9r=o("FlaxRobertaForMultipleChoice"),a9r=o(" (RoBERTa model)"),n9r=l(),UC=a("li"),$2e=a("strong"),s9r=o("roformer"),l9r=o(" \u2014 "),Iz=a("a"),i9r=o("FlaxRoFormerForMultipleChoice"),d9r=o(" (RoFormer model)"),c9r=l(),JC=a("li"),I2e=a("strong"),f9r=o("xlm-roberta"),m9r=o(" \u2014 "),Nz=a("a"),g9r=o("FlaxXLMRobertaForMultipleChoice"),h9r=o(" (XLM-RoBERTa model)"),p9r=l(),N2e=a("p"),_9r=o("Examples:"),u9r=l(),f(x7.$$.fragment),GRe=l(),wf=a("h2"),YC=a("a"),j2e=a("span"),f(k7.$$.fragment),b9r=l(),D2e=a("span"),v9r=o("FlaxAutoModelForNextSentencePrediction"),ORe=l(),Gr=a("div"),f(R7.$$.fragment),T9r=l(),Af=a("p"),F9r=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),q2e=a("code"),C9r=o("from_pretrained()"),M9r=o("class method or the "),G2e=a("code"),E9r=o("from_config()"),y9r=o(`class
method.`),w9r=l(),S7=a("p"),A9r=o("This class cannot be instantiated directly using "),O2e=a("code"),L9r=o("__init__()"),B9r=o(" (throws an error)."),x9r=l(),$t=a("div"),f(P7.$$.fragment),k9r=l(),X2e=a("p"),R9r=o("Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),S9r=l(),Lf=a("p"),P9r=o(`Note:
Loading a model from its configuration file does `),V2e=a("strong"),$9r=o("not"),I9r=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),z2e=a("code"),N9r=o("from_pretrained()"),j9r=o("to load the model weights."),D9r=l(),W2e=a("p"),q9r=o("Examples:"),G9r=l(),f($7.$$.fragment),O9r=l(),Io=a("div"),f(I7.$$.fragment),X9r=l(),Q2e=a("p"),V9r=o("Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),z9r=l(),jn=a("p"),W9r=o("The model class to instantiate is selected based on the "),H2e=a("code"),Q9r=o("model_type"),H9r=o(` property of the config object (either
passed as an argument or loaded from `),U2e=a("code"),U9r=o("pretrained_model_name_or_path"),J9r=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=a("code"),Y9r=o("pretrained_model_name_or_path"),K9r=o(":"),Z9r=l(),Y2e=a("ul"),KC=a("li"),K2e=a("strong"),eBr=o("bert"),oBr=o(" \u2014 "),jz=a("a"),rBr=o("FlaxBertForNextSentencePrediction"),tBr=o(" (BERT model)"),aBr=l(),Z2e=a("p"),nBr=o("Examples:"),sBr=l(),f(N7.$$.fragment),XRe=l(),Bf=a("h2"),ZC=a("a"),eve=a("span"),f(j7.$$.fragment),lBr=l(),ove=a("span"),iBr=o("FlaxAutoModelForImageClassification"),VRe=l(),Or=a("div"),f(D7.$$.fragment),dBr=l(),xf=a("p"),cBr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rve=a("code"),fBr=o("from_pretrained()"),mBr=o("class method or the "),tve=a("code"),gBr=o("from_config()"),hBr=o(`class
method.`),pBr=l(),q7=a("p"),_Br=o("This class cannot be instantiated directly using "),ave=a("code"),uBr=o("__init__()"),bBr=o(" (throws an error)."),vBr=l(),It=a("div"),f(G7.$$.fragment),TBr=l(),nve=a("p"),FBr=o("Instantiates one of the model classes of the library (with a image classification head) from a configuration."),CBr=l(),kf=a("p"),MBr=o(`Note:
Loading a model from its configuration file does `),sve=a("strong"),EBr=o("not"),yBr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),lve=a("code"),wBr=o("from_pretrained()"),ABr=o("to load the model weights."),LBr=l(),ive=a("p"),BBr=o("Examples:"),xBr=l(),f(O7.$$.fragment),kBr=l(),No=a("div"),f(X7.$$.fragment),RBr=l(),dve=a("p"),SBr=o("Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),PBr=l(),Dn=a("p"),$Br=o("The model class to instantiate is selected based on the "),cve=a("code"),IBr=o("model_type"),NBr=o(` property of the config object (either
passed as an argument or loaded from `),fve=a("code"),jBr=o("pretrained_model_name_or_path"),DBr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=a("code"),qBr=o("pretrained_model_name_or_path"),GBr=o(":"),OBr=l(),V7=a("ul"),eM=a("li"),gve=a("strong"),XBr=o("beit"),VBr=o(" \u2014 "),Dz=a("a"),zBr=o("FlaxBeitForImageClassification"),WBr=o(" (BEiT model)"),QBr=l(),oM=a("li"),hve=a("strong"),HBr=o("vit"),UBr=o(" \u2014 "),qz=a("a"),JBr=o("FlaxViTForImageClassification"),YBr=o(" (ViT model)"),KBr=l(),pve=a("p"),ZBr=o("Examples:"),exr=l(),f(z7.$$.fragment),zRe=l(),Rf=a("h2"),rM=a("a"),_ve=a("span"),f(W7.$$.fragment),oxr=l(),uve=a("span"),rxr=o("FlaxAutoModelForVision2Seq"),WRe=l(),Xr=a("div"),f(Q7.$$.fragment),txr=l(),Sf=a("p"),axr=o(`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bve=a("code"),nxr=o("from_pretrained()"),sxr=o("class method or the "),vve=a("code"),lxr=o("from_config()"),ixr=o(`class
method.`),dxr=l(),H7=a("p"),cxr=o("This class cannot be instantiated directly using "),Tve=a("code"),fxr=o("__init__()"),mxr=o(" (throws an error)."),gxr=l(),Nt=a("div"),f(U7.$$.fragment),hxr=l(),Fve=a("p"),pxr=o("Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),_xr=l(),Pf=a("p"),uxr=o(`Note:
Loading a model from its configuration file does `),Cve=a("strong"),bxr=o("not"),vxr=o(` load the model weights. It only affects the
model\u2019s configuration. Use `),Mve=a("code"),Txr=o("from_pretrained()"),Fxr=o("to load the model weights."),Cxr=l(),Eve=a("p"),Mxr=o("Examples:"),Exr=l(),f(J7.$$.fragment),yxr=l(),jo=a("div"),f(Y7.$$.fragment),wxr=l(),yve=a("p"),Axr=o("Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),Lxr=l(),qn=a("p"),Bxr=o("The model class to instantiate is selected based on the "),wve=a("code"),xxr=o("model_type"),kxr=o(` property of the config object (either
passed as an argument or loaded from `),Ave=a("code"),Rxr=o("pretrained_model_name_or_path"),Sxr=o(` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=a("code"),Pxr=o("pretrained_model_name_or_path"),$xr=o(":"),Ixr=l(),Bve=a("ul"),tM=a("li"),xve=a("strong"),Nxr=o("vision-encoder-decoder"),jxr=o(" \u2014 "),Gz=a("a"),Dxr=o("FlaxVisionEncoderDecoderModel"),qxr=o(" (Vision Encoder decoder model)"),Gxr=l(),kve=a("p"),Oxr=o("Examples:"),Xxr=l(),f(K7.$$.fragment),this.h()},l(c){const u=qTt('[data-svelte="svelte-1phssyn"]',document.head);J=n(u,"META",{name:!0,content:!0}),u.forEach(t),$e=i(c),de=n(c,"H1",{class:!0});var Z7=s(de);pe=n(Z7,"A",{id:!0,class:!0,href:!0});var Rve=s(pe);io=n(Rve,"SPAN",{});var Sve=s(io);m(fe.$$.fragment,Sve),Sve.forEach(t),Rve.forEach(t),Me=i(Z7),Vo=n(Z7,"SPAN",{});var zxr=s(Vo);Ni=r(zxr,"Auto Classes"),zxr.forEach(t),Z7.forEach(t),If=i(c),fa=n(c,"P",{});var HRe=s(fa);ji=r(HRe,`In many cases, the architecture you want to use can be guessed from the name or the path of the pretrained model you
are supplying to the `),Di=n(HRe,"CODE",{});var Wxr=s(Di);tE=r(Wxr,"from_pretrained()"),Wxr.forEach(t),Nf=r(HRe,` method. AutoClasses are here to do this job for you so that you
automatically retrieve the relevant model given the name/path to the pretrained weights/config/vocabulary.`),HRe.forEach(t),Be=i(c),co=n(c,"P",{});var aM=s(co);qi=r(aM,"Instantiating one of "),Gn=n(aM,"A",{href:!0});var Qxr=s(Gn);aE=r(Qxr,"AutoConfig"),Qxr.forEach(t),On=r(aM,", "),Xn=n(aM,"A",{href:!0});var Hxr=s(Xn);nE=r(Hxr,"AutoModel"),Hxr.forEach(t),Gi=r(aM,`, and
`),Vn=n(aM,"A",{href:!0});var Uxr=s(Vn);sE=r(Uxr,"AutoTokenizer"),Uxr.forEach(t),Oi=r(aM," will directly create a class of the relevant architecture. For instance"),aM.forEach(t),jf=i(c),m(qa.$$.fragment,c),fo=i(c),_e=n(c,"P",{});var URe=s(_e);J8=r(URe,"will create a model that is an instance of "),Xi=n(URe,"A",{href:!0});var Jxr=s(Xi);Y8=r(Jxr,"BertModel"),Jxr.forEach(t),K8=r(URe,"."),URe.forEach(t),zo=i(c),Ga=n(c,"P",{});var JRe=s(Ga);Z8=r(JRe,"There is one class of "),Df=n(JRe,"CODE",{});var Yxr=s(Df);e9=r(Yxr,"AutoModel"),Yxr.forEach(t),s$e=r(JRe," for each task, and for each backend (PyTorch, TensorFlow, or Flax)."),JRe.forEach(t),Wxe=i(c),Vi=n(c,"H2",{class:!0});var YRe=s(Vi);qf=n(YRe,"A",{id:!0,class:!0,href:!0});var Kxr=s(qf);PQ=n(Kxr,"SPAN",{});var Zxr=s(PQ);m(lE.$$.fragment,Zxr),Zxr.forEach(t),Kxr.forEach(t),l$e=i(YRe),$Q=n(YRe,"SPAN",{});var ekr=s($Q);i$e=r(ekr,"Extending the Auto Classes"),ekr.forEach(t),YRe.forEach(t),Qxe=i(c),zn=n(c,"P",{});var Oz=s(zn);d$e=r(Oz,`Each of the auto classes has a method to be extended with your custom classes. For instance, if you have defined a
custom class of model `),IQ=n(Oz,"CODE",{});var okr=s(IQ);c$e=r(okr,"NewModel"),okr.forEach(t),f$e=r(Oz,", make sure you have a "),NQ=n(Oz,"CODE",{});var rkr=s(NQ);m$e=r(rkr,"NewModelConfig"),rkr.forEach(t),g$e=r(Oz,` then you can add those to the auto
classes like this:`),Oz.forEach(t),Hxe=i(c),m(iE.$$.fragment,c),Uxe=i(c),o9=n(c,"P",{});var tkr=s(o9);h$e=r(tkr,"You will then be able to use the auto classes like you would usually do!"),tkr.forEach(t),Jxe=i(c),m(Gf.$$.fragment,c),Yxe=i(c),zi=n(c,"H2",{class:!0});var KRe=s(zi);Of=n(KRe,"A",{id:!0,class:!0,href:!0});var akr=s(Of);jQ=n(akr,"SPAN",{});var nkr=s(jQ);m(dE.$$.fragment,nkr),nkr.forEach(t),akr.forEach(t),p$e=i(KRe),DQ=n(KRe,"SPAN",{});var skr=s(DQ);_$e=r(skr,"AutoConfig"),skr.forEach(t),KRe.forEach(t),Kxe=i(c),Wo=n(c,"DIV",{class:!0});var Os=s(Wo);m(cE.$$.fragment,Os),u$e=i(Os),fE=n(Os,"P",{});var ZRe=s(fE);b$e=r(ZRe,`This is a generic configuration class that will be instantiated as one of the configuration classes of the library
when created with the `),r9=n(ZRe,"A",{href:!0});var lkr=s(r9);v$e=r(lkr,"from_pretrained()"),lkr.forEach(t),T$e=r(ZRe," class method."),ZRe.forEach(t),F$e=i(Os),mE=n(Os,"P",{});var eSe=s(mE);C$e=r(eSe,"This class cannot be instantiated directly using "),qQ=n(eSe,"CODE",{});var ikr=s(qQ);M$e=r(ikr,"__init__()"),ikr.forEach(t),E$e=r(eSe," (throws an error)."),eSe.forEach(t),y$e=i(Os),mo=n(Os,"DIV",{class:!0});var ga=s(mo);m(gE.$$.fragment,ga),w$e=i(ga),GQ=n(ga,"P",{});var dkr=s(GQ);A$e=r(dkr,"Instantiate one of the configuration classes of the library from a pretrained model configuration."),dkr.forEach(t),L$e=i(ga),Wi=n(ga,"P",{});var Xz=s(Wi);B$e=r(Xz,"The configuration class to instantiate is selected based on the "),OQ=n(Xz,"CODE",{});var ckr=s(OQ);x$e=r(ckr,"model_type"),ckr.forEach(t),k$e=r(Xz,` property of the config object that
is loaded, or when it\u2019s missing, by falling back to using pattern matching on `),XQ=n(Xz,"CODE",{});var fkr=s(XQ);R$e=r(fkr,"pretrained_model_name_or_path"),fkr.forEach(t),S$e=r(Xz,":"),Xz.forEach(t),P$e=i(ga),v=n(ga,"UL",{});var T=s(v);Xf=n(T,"LI",{});var Pve=s(Xf);VQ=n(Pve,"STRONG",{});var mkr=s(VQ);$$e=r(mkr,"albert"),mkr.forEach(t),I$e=r(Pve," \u2014 "),t9=n(Pve,"A",{href:!0});var gkr=s(t9);N$e=r(gkr,"AlbertConfig"),gkr.forEach(t),j$e=r(Pve," (ALBERT model)"),Pve.forEach(t),D$e=i(T),Vf=n(T,"LI",{});var $ve=s(Vf);zQ=n($ve,"STRONG",{});var hkr=s(zQ);q$e=r(hkr,"bart"),hkr.forEach(t),G$e=r($ve," \u2014 "),a9=n($ve,"A",{href:!0});var pkr=s(a9);O$e=r(pkr,"BartConfig"),pkr.forEach(t),X$e=r($ve," (BART model)"),$ve.forEach(t),V$e=i(T),zf=n(T,"LI",{});var Ive=s(zf);WQ=n(Ive,"STRONG",{});var _kr=s(WQ);z$e=r(_kr,"beit"),_kr.forEach(t),W$e=r(Ive," \u2014 "),n9=n(Ive,"A",{href:!0});var ukr=s(n9);Q$e=r(ukr,"BeitConfig"),ukr.forEach(t),H$e=r(Ive," (BEiT model)"),Ive.forEach(t),U$e=i(T),Wf=n(T,"LI",{});var Nve=s(Wf);QQ=n(Nve,"STRONG",{});var bkr=s(QQ);J$e=r(bkr,"bert"),bkr.forEach(t),Y$e=r(Nve," \u2014 "),s9=n(Nve,"A",{href:!0});var vkr=s(s9);K$e=r(vkr,"BertConfig"),vkr.forEach(t),Z$e=r(Nve," (BERT model)"),Nve.forEach(t),eIe=i(T),Qf=n(T,"LI",{});var jve=s(Qf);HQ=n(jve,"STRONG",{});var Tkr=s(HQ);oIe=r(Tkr,"bert-generation"),Tkr.forEach(t),rIe=r(jve," \u2014 "),l9=n(jve,"A",{href:!0});var Fkr=s(l9);tIe=r(Fkr,"BertGenerationConfig"),Fkr.forEach(t),aIe=r(jve," (Bert Generation model)"),jve.forEach(t),nIe=i(T),Hf=n(T,"LI",{});var Dve=s(Hf);UQ=n(Dve,"STRONG",{});var Ckr=s(UQ);sIe=r(Ckr,"big_bird"),Ckr.forEach(t),lIe=r(Dve," \u2014 "),i9=n(Dve,"A",{href:!0});var Mkr=s(i9);iIe=r(Mkr,"BigBirdConfig"),Mkr.forEach(t),dIe=r(Dve," (BigBird model)"),Dve.forEach(t),cIe=i(T),Uf=n(T,"LI",{});var qve=s(Uf);JQ=n(qve,"STRONG",{});var Ekr=s(JQ);fIe=r(Ekr,"bigbird_pegasus"),Ekr.forEach(t),mIe=r(qve," \u2014 "),d9=n(qve,"A",{href:!0});var ykr=s(d9);gIe=r(ykr,"BigBirdPegasusConfig"),ykr.forEach(t),hIe=r(qve," (BigBirdPegasus model)"),qve.forEach(t),pIe=i(T),Jf=n(T,"LI",{});var Gve=s(Jf);YQ=n(Gve,"STRONG",{});var wkr=s(YQ);_Ie=r(wkr,"blenderbot"),wkr.forEach(t),uIe=r(Gve," \u2014 "),c9=n(Gve,"A",{href:!0});var Akr=s(c9);bIe=r(Akr,"BlenderbotConfig"),Akr.forEach(t),vIe=r(Gve," (Blenderbot model)"),Gve.forEach(t),TIe=i(T),Yf=n(T,"LI",{});var Ove=s(Yf);KQ=n(Ove,"STRONG",{});var Lkr=s(KQ);FIe=r(Lkr,"blenderbot-small"),Lkr.forEach(t),CIe=r(Ove," \u2014 "),f9=n(Ove,"A",{href:!0});var Bkr=s(f9);MIe=r(Bkr,"BlenderbotSmallConfig"),Bkr.forEach(t),EIe=r(Ove," (BlenderbotSmall model)"),Ove.forEach(t),yIe=i(T),Kf=n(T,"LI",{});var Xve=s(Kf);ZQ=n(Xve,"STRONG",{});var xkr=s(ZQ);wIe=r(xkr,"camembert"),xkr.forEach(t),AIe=r(Xve," \u2014 "),m9=n(Xve,"A",{href:!0});var kkr=s(m9);LIe=r(kkr,"CamembertConfig"),kkr.forEach(t),BIe=r(Xve," (CamemBERT model)"),Xve.forEach(t),xIe=i(T),Zf=n(T,"LI",{});var Vve=s(Zf);eH=n(Vve,"STRONG",{});var Rkr=s(eH);kIe=r(Rkr,"canine"),Rkr.forEach(t),RIe=r(Vve," \u2014 "),g9=n(Vve,"A",{href:!0});var Skr=s(g9);SIe=r(Skr,"CanineConfig"),Skr.forEach(t),PIe=r(Vve," (Canine model)"),Vve.forEach(t),$Ie=i(T),em=n(T,"LI",{});var zve=s(em);oH=n(zve,"STRONG",{});var Pkr=s(oH);IIe=r(Pkr,"clip"),Pkr.forEach(t),NIe=r(zve," \u2014 "),h9=n(zve,"A",{href:!0});var $kr=s(h9);jIe=r($kr,"CLIPConfig"),$kr.forEach(t),DIe=r(zve," (CLIP model)"),zve.forEach(t),qIe=i(T),om=n(T,"LI",{});var Wve=s(om);rH=n(Wve,"STRONG",{});var Ikr=s(rH);GIe=r(Ikr,"convbert"),Ikr.forEach(t),OIe=r(Wve," \u2014 "),p9=n(Wve,"A",{href:!0});var Nkr=s(p9);XIe=r(Nkr,"ConvBertConfig"),Nkr.forEach(t),VIe=r(Wve," (ConvBERT model)"),Wve.forEach(t),zIe=i(T),rm=n(T,"LI",{});var Qve=s(rm);tH=n(Qve,"STRONG",{});var jkr=s(tH);WIe=r(jkr,"convnext"),jkr.forEach(t),QIe=r(Qve," \u2014 "),_9=n(Qve,"A",{href:!0});var Dkr=s(_9);HIe=r(Dkr,"ConvNextConfig"),Dkr.forEach(t),UIe=r(Qve," (ConvNext model)"),Qve.forEach(t),JIe=i(T),tm=n(T,"LI",{});var Hve=s(tm);aH=n(Hve,"STRONG",{});var qkr=s(aH);YIe=r(qkr,"ctrl"),qkr.forEach(t),KIe=r(Hve," \u2014 "),u9=n(Hve,"A",{href:!0});var Gkr=s(u9);ZIe=r(Gkr,"CTRLConfig"),Gkr.forEach(t),eNe=r(Hve," (CTRL model)"),Hve.forEach(t),oNe=i(T),am=n(T,"LI",{});var Uve=s(am);nH=n(Uve,"STRONG",{});var Okr=s(nH);rNe=r(Okr,"data2vec-audio"),Okr.forEach(t),tNe=r(Uve," \u2014 "),b9=n(Uve,"A",{href:!0});var Xkr=s(b9);aNe=r(Xkr,"Data2VecAudioConfig"),Xkr.forEach(t),nNe=r(Uve," (Data2VecAudio model)"),Uve.forEach(t),sNe=i(T),nm=n(T,"LI",{});var Jve=s(nm);sH=n(Jve,"STRONG",{});var Vkr=s(sH);lNe=r(Vkr,"data2vec-text"),Vkr.forEach(t),iNe=r(Jve," \u2014 "),v9=n(Jve,"A",{href:!0});var zkr=s(v9);dNe=r(zkr,"Data2VecTextConfig"),zkr.forEach(t),cNe=r(Jve," (Data2VecText model)"),Jve.forEach(t),fNe=i(T),sm=n(T,"LI",{});var Yve=s(sm);lH=n(Yve,"STRONG",{});var Wkr=s(lH);mNe=r(Wkr,"deberta"),Wkr.forEach(t),gNe=r(Yve," \u2014 "),T9=n(Yve,"A",{href:!0});var Qkr=s(T9);hNe=r(Qkr,"DebertaConfig"),Qkr.forEach(t),pNe=r(Yve," (DeBERTa model)"),Yve.forEach(t),_Ne=i(T),lm=n(T,"LI",{});var Kve=s(lm);iH=n(Kve,"STRONG",{});var Hkr=s(iH);uNe=r(Hkr,"deberta-v2"),Hkr.forEach(t),bNe=r(Kve," \u2014 "),F9=n(Kve,"A",{href:!0});var Ukr=s(F9);vNe=r(Ukr,"DebertaV2Config"),Ukr.forEach(t),TNe=r(Kve," (DeBERTa-v2 model)"),Kve.forEach(t),FNe=i(T),im=n(T,"LI",{});var Zve=s(im);dH=n(Zve,"STRONG",{});var Jkr=s(dH);CNe=r(Jkr,"deit"),Jkr.forEach(t),MNe=r(Zve," \u2014 "),C9=n(Zve,"A",{href:!0});var Ykr=s(C9);ENe=r(Ykr,"DeiTConfig"),Ykr.forEach(t),yNe=r(Zve," (DeiT model)"),Zve.forEach(t),wNe=i(T),dm=n(T,"LI",{});var e6e=s(dm);cH=n(e6e,"STRONG",{});var Kkr=s(cH);ANe=r(Kkr,"detr"),Kkr.forEach(t),LNe=r(e6e," \u2014 "),M9=n(e6e,"A",{href:!0});var Zkr=s(M9);BNe=r(Zkr,"DetrConfig"),Zkr.forEach(t),xNe=r(e6e," (DETR model)"),e6e.forEach(t),kNe=i(T),cm=n(T,"LI",{});var o6e=s(cm);fH=n(o6e,"STRONG",{});var eRr=s(fH);RNe=r(eRr,"distilbert"),eRr.forEach(t),SNe=r(o6e," \u2014 "),E9=n(o6e,"A",{href:!0});var oRr=s(E9);PNe=r(oRr,"DistilBertConfig"),oRr.forEach(t),$Ne=r(o6e," (DistilBERT model)"),o6e.forEach(t),INe=i(T),fm=n(T,"LI",{});var r6e=s(fm);mH=n(r6e,"STRONG",{});var rRr=s(mH);NNe=r(rRr,"dpr"),rRr.forEach(t),jNe=r(r6e," \u2014 "),y9=n(r6e,"A",{href:!0});var tRr=s(y9);DNe=r(tRr,"DPRConfig"),tRr.forEach(t),qNe=r(r6e," (DPR model)"),r6e.forEach(t),GNe=i(T),mm=n(T,"LI",{});var t6e=s(mm);gH=n(t6e,"STRONG",{});var aRr=s(gH);ONe=r(aRr,"electra"),aRr.forEach(t),XNe=r(t6e," \u2014 "),w9=n(t6e,"A",{href:!0});var nRr=s(w9);VNe=r(nRr,"ElectraConfig"),nRr.forEach(t),zNe=r(t6e," (ELECTRA model)"),t6e.forEach(t),WNe=i(T),gm=n(T,"LI",{});var a6e=s(gm);hH=n(a6e,"STRONG",{});var sRr=s(hH);QNe=r(sRr,"encoder-decoder"),sRr.forEach(t),HNe=r(a6e," \u2014 "),A9=n(a6e,"A",{href:!0});var lRr=s(A9);UNe=r(lRr,"EncoderDecoderConfig"),lRr.forEach(t),JNe=r(a6e," (Encoder decoder model)"),a6e.forEach(t),YNe=i(T),hm=n(T,"LI",{});var n6e=s(hm);pH=n(n6e,"STRONG",{});var iRr=s(pH);KNe=r(iRr,"flaubert"),iRr.forEach(t),ZNe=r(n6e," \u2014 "),L9=n(n6e,"A",{href:!0});var dRr=s(L9);eje=r(dRr,"FlaubertConfig"),dRr.forEach(t),oje=r(n6e," (FlauBERT model)"),n6e.forEach(t),rje=i(T),pm=n(T,"LI",{});var s6e=s(pm);_H=n(s6e,"STRONG",{});var cRr=s(_H);tje=r(cRr,"fnet"),cRr.forEach(t),aje=r(s6e," \u2014 "),B9=n(s6e,"A",{href:!0});var fRr=s(B9);nje=r(fRr,"FNetConfig"),fRr.forEach(t),sje=r(s6e," (FNet model)"),s6e.forEach(t),lje=i(T),_m=n(T,"LI",{});var l6e=s(_m);uH=n(l6e,"STRONG",{});var mRr=s(uH);ije=r(mRr,"fsmt"),mRr.forEach(t),dje=r(l6e," \u2014 "),x9=n(l6e,"A",{href:!0});var gRr=s(x9);cje=r(gRr,"FSMTConfig"),gRr.forEach(t),fje=r(l6e," (FairSeq Machine-Translation model)"),l6e.forEach(t),mje=i(T),um=n(T,"LI",{});var i6e=s(um);bH=n(i6e,"STRONG",{});var hRr=s(bH);gje=r(hRr,"funnel"),hRr.forEach(t),hje=r(i6e," \u2014 "),k9=n(i6e,"A",{href:!0});var pRr=s(k9);pje=r(pRr,"FunnelConfig"),pRr.forEach(t),_je=r(i6e," (Funnel Transformer model)"),i6e.forEach(t),uje=i(T),bm=n(T,"LI",{});var d6e=s(bm);vH=n(d6e,"STRONG",{});var _Rr=s(vH);bje=r(_Rr,"glpn"),_Rr.forEach(t),vje=r(d6e," \u2014 "),R9=n(d6e,"A",{href:!0});var uRr=s(R9);Tje=r(uRr,"GLPNConfig"),uRr.forEach(t),Fje=r(d6e," (GLPN model)"),d6e.forEach(t),Cje=i(T),vm=n(T,"LI",{});var c6e=s(vm);TH=n(c6e,"STRONG",{});var bRr=s(TH);Mje=r(bRr,"gpt2"),bRr.forEach(t),Eje=r(c6e," \u2014 "),S9=n(c6e,"A",{href:!0});var vRr=s(S9);yje=r(vRr,"GPT2Config"),vRr.forEach(t),wje=r(c6e," (OpenAI GPT-2 model)"),c6e.forEach(t),Aje=i(T),Tm=n(T,"LI",{});var f6e=s(Tm);FH=n(f6e,"STRONG",{});var TRr=s(FH);Lje=r(TRr,"gpt_neo"),TRr.forEach(t),Bje=r(f6e," \u2014 "),P9=n(f6e,"A",{href:!0});var FRr=s(P9);xje=r(FRr,"GPTNeoConfig"),FRr.forEach(t),kje=r(f6e," (GPT Neo model)"),f6e.forEach(t),Rje=i(T),Fm=n(T,"LI",{});var m6e=s(Fm);CH=n(m6e,"STRONG",{});var CRr=s(CH);Sje=r(CRr,"gptj"),CRr.forEach(t),Pje=r(m6e," \u2014 "),$9=n(m6e,"A",{href:!0});var MRr=s($9);$je=r(MRr,"GPTJConfig"),MRr.forEach(t),Ije=r(m6e," (GPT-J model)"),m6e.forEach(t),Nje=i(T),Cm=n(T,"LI",{});var g6e=s(Cm);MH=n(g6e,"STRONG",{});var ERr=s(MH);jje=r(ERr,"hubert"),ERr.forEach(t),Dje=r(g6e," \u2014 "),I9=n(g6e,"A",{href:!0});var yRr=s(I9);qje=r(yRr,"HubertConfig"),yRr.forEach(t),Gje=r(g6e," (Hubert model)"),g6e.forEach(t),Oje=i(T),Mm=n(T,"LI",{});var h6e=s(Mm);EH=n(h6e,"STRONG",{});var wRr=s(EH);Xje=r(wRr,"ibert"),wRr.forEach(t),Vje=r(h6e," \u2014 "),N9=n(h6e,"A",{href:!0});var ARr=s(N9);zje=r(ARr,"IBertConfig"),ARr.forEach(t),Wje=r(h6e," (I-BERT model)"),h6e.forEach(t),Qje=i(T),Em=n(T,"LI",{});var p6e=s(Em);yH=n(p6e,"STRONG",{});var LRr=s(yH);Hje=r(LRr,"imagegpt"),LRr.forEach(t),Uje=r(p6e," \u2014 "),j9=n(p6e,"A",{href:!0});var BRr=s(j9);Jje=r(BRr,"ImageGPTConfig"),BRr.forEach(t),Yje=r(p6e," (ImageGPT model)"),p6e.forEach(t),Kje=i(T),ym=n(T,"LI",{});var _6e=s(ym);wH=n(_6e,"STRONG",{});var xRr=s(wH);Zje=r(xRr,"layoutlm"),xRr.forEach(t),eDe=r(_6e," \u2014 "),D9=n(_6e,"A",{href:!0});var kRr=s(D9);oDe=r(kRr,"LayoutLMConfig"),kRr.forEach(t),rDe=r(_6e," (LayoutLM model)"),_6e.forEach(t),tDe=i(T),wm=n(T,"LI",{});var u6e=s(wm);AH=n(u6e,"STRONG",{});var RRr=s(AH);aDe=r(RRr,"layoutlmv2"),RRr.forEach(t),nDe=r(u6e," \u2014 "),q9=n(u6e,"A",{href:!0});var SRr=s(q9);sDe=r(SRr,"LayoutLMv2Config"),SRr.forEach(t),lDe=r(u6e," (LayoutLMv2 model)"),u6e.forEach(t),iDe=i(T),Am=n(T,"LI",{});var b6e=s(Am);LH=n(b6e,"STRONG",{});var PRr=s(LH);dDe=r(PRr,"led"),PRr.forEach(t),cDe=r(b6e," \u2014 "),G9=n(b6e,"A",{href:!0});var $Rr=s(G9);fDe=r($Rr,"LEDConfig"),$Rr.forEach(t),mDe=r(b6e," (LED model)"),b6e.forEach(t),gDe=i(T),Lm=n(T,"LI",{});var v6e=s(Lm);BH=n(v6e,"STRONG",{});var IRr=s(BH);hDe=r(IRr,"longformer"),IRr.forEach(t),pDe=r(v6e," \u2014 "),O9=n(v6e,"A",{href:!0});var NRr=s(O9);_De=r(NRr,"LongformerConfig"),NRr.forEach(t),uDe=r(v6e," (Longformer model)"),v6e.forEach(t),bDe=i(T),Bm=n(T,"LI",{});var T6e=s(Bm);xH=n(T6e,"STRONG",{});var jRr=s(xH);vDe=r(jRr,"luke"),jRr.forEach(t),TDe=r(T6e," \u2014 "),X9=n(T6e,"A",{href:!0});var DRr=s(X9);FDe=r(DRr,"LukeConfig"),DRr.forEach(t),CDe=r(T6e," (LUKE model)"),T6e.forEach(t),MDe=i(T),xm=n(T,"LI",{});var F6e=s(xm);kH=n(F6e,"STRONG",{});var qRr=s(kH);EDe=r(qRr,"lxmert"),qRr.forEach(t),yDe=r(F6e," \u2014 "),V9=n(F6e,"A",{href:!0});var GRr=s(V9);wDe=r(GRr,"LxmertConfig"),GRr.forEach(t),ADe=r(F6e," (LXMERT model)"),F6e.forEach(t),LDe=i(T),km=n(T,"LI",{});var C6e=s(km);RH=n(C6e,"STRONG",{});var ORr=s(RH);BDe=r(ORr,"m2m_100"),ORr.forEach(t),xDe=r(C6e," \u2014 "),z9=n(C6e,"A",{href:!0});var XRr=s(z9);kDe=r(XRr,"M2M100Config"),XRr.forEach(t),RDe=r(C6e," (M2M100 model)"),C6e.forEach(t),SDe=i(T),Rm=n(T,"LI",{});var M6e=s(Rm);SH=n(M6e,"STRONG",{});var VRr=s(SH);PDe=r(VRr,"marian"),VRr.forEach(t),$De=r(M6e," \u2014 "),W9=n(M6e,"A",{href:!0});var zRr=s(W9);IDe=r(zRr,"MarianConfig"),zRr.forEach(t),NDe=r(M6e," (Marian model)"),M6e.forEach(t),jDe=i(T),Sm=n(T,"LI",{});var E6e=s(Sm);PH=n(E6e,"STRONG",{});var WRr=s(PH);DDe=r(WRr,"maskformer"),WRr.forEach(t),qDe=r(E6e," \u2014 "),Q9=n(E6e,"A",{href:!0});var QRr=s(Q9);GDe=r(QRr,"MaskFormerConfig"),QRr.forEach(t),ODe=r(E6e," (MaskFormer model)"),E6e.forEach(t),XDe=i(T),Pm=n(T,"LI",{});var y6e=s(Pm);$H=n(y6e,"STRONG",{});var HRr=s($H);VDe=r(HRr,"mbart"),HRr.forEach(t),zDe=r(y6e," \u2014 "),H9=n(y6e,"A",{href:!0});var URr=s(H9);WDe=r(URr,"MBartConfig"),URr.forEach(t),QDe=r(y6e," (mBART model)"),y6e.forEach(t),HDe=i(T),$m=n(T,"LI",{});var w6e=s($m);IH=n(w6e,"STRONG",{});var JRr=s(IH);UDe=r(JRr,"megatron-bert"),JRr.forEach(t),JDe=r(w6e," \u2014 "),U9=n(w6e,"A",{href:!0});var YRr=s(U9);YDe=r(YRr,"MegatronBertConfig"),YRr.forEach(t),KDe=r(w6e," (MegatronBert model)"),w6e.forEach(t),ZDe=i(T),Im=n(T,"LI",{});var A6e=s(Im);NH=n(A6e,"STRONG",{});var KRr=s(NH);eqe=r(KRr,"mobilebert"),KRr.forEach(t),oqe=r(A6e," \u2014 "),J9=n(A6e,"A",{href:!0});var ZRr=s(J9);rqe=r(ZRr,"MobileBertConfig"),ZRr.forEach(t),tqe=r(A6e," (MobileBERT model)"),A6e.forEach(t),aqe=i(T),Nm=n(T,"LI",{});var L6e=s(Nm);jH=n(L6e,"STRONG",{});var eSr=s(jH);nqe=r(eSr,"mpnet"),eSr.forEach(t),sqe=r(L6e," \u2014 "),Y9=n(L6e,"A",{href:!0});var oSr=s(Y9);lqe=r(oSr,"MPNetConfig"),oSr.forEach(t),iqe=r(L6e," (MPNet model)"),L6e.forEach(t),dqe=i(T),jm=n(T,"LI",{});var B6e=s(jm);DH=n(B6e,"STRONG",{});var rSr=s(DH);cqe=r(rSr,"mt5"),rSr.forEach(t),fqe=r(B6e," \u2014 "),K9=n(B6e,"A",{href:!0});var tSr=s(K9);mqe=r(tSr,"MT5Config"),tSr.forEach(t),gqe=r(B6e," (mT5 model)"),B6e.forEach(t),hqe=i(T),Dm=n(T,"LI",{});var x6e=s(Dm);qH=n(x6e,"STRONG",{});var aSr=s(qH);pqe=r(aSr,"nystromformer"),aSr.forEach(t),_qe=r(x6e," \u2014 "),Z9=n(x6e,"A",{href:!0});var nSr=s(Z9);uqe=r(nSr,"NystromformerConfig"),nSr.forEach(t),bqe=r(x6e," (Nystromformer model)"),x6e.forEach(t),vqe=i(T),qm=n(T,"LI",{});var k6e=s(qm);GH=n(k6e,"STRONG",{});var sSr=s(GH);Tqe=r(sSr,"openai-gpt"),sSr.forEach(t),Fqe=r(k6e," \u2014 "),eB=n(k6e,"A",{href:!0});var lSr=s(eB);Cqe=r(lSr,"OpenAIGPTConfig"),lSr.forEach(t),Mqe=r(k6e," (OpenAI GPT model)"),k6e.forEach(t),Eqe=i(T),Gm=n(T,"LI",{});var R6e=s(Gm);OH=n(R6e,"STRONG",{});var iSr=s(OH);yqe=r(iSr,"pegasus"),iSr.forEach(t),wqe=r(R6e," \u2014 "),oB=n(R6e,"A",{href:!0});var dSr=s(oB);Aqe=r(dSr,"PegasusConfig"),dSr.forEach(t),Lqe=r(R6e," (Pegasus model)"),R6e.forEach(t),Bqe=i(T),Om=n(T,"LI",{});var S6e=s(Om);XH=n(S6e,"STRONG",{});var cSr=s(XH);xqe=r(cSr,"perceiver"),cSr.forEach(t),kqe=r(S6e," \u2014 "),rB=n(S6e,"A",{href:!0});var fSr=s(rB);Rqe=r(fSr,"PerceiverConfig"),fSr.forEach(t),Sqe=r(S6e," (Perceiver model)"),S6e.forEach(t),Pqe=i(T),Xm=n(T,"LI",{});var P6e=s(Xm);VH=n(P6e,"STRONG",{});var mSr=s(VH);$qe=r(mSr,"plbart"),mSr.forEach(t),Iqe=r(P6e," \u2014 "),tB=n(P6e,"A",{href:!0});var gSr=s(tB);Nqe=r(gSr,"PLBartConfig"),gSr.forEach(t),jqe=r(P6e," (PLBart model)"),P6e.forEach(t),Dqe=i(T),Vm=n(T,"LI",{});var $6e=s(Vm);zH=n($6e,"STRONG",{});var hSr=s(zH);qqe=r(hSr,"poolformer"),hSr.forEach(t),Gqe=r($6e," \u2014 "),aB=n($6e,"A",{href:!0});var pSr=s(aB);Oqe=r(pSr,"PoolFormerConfig"),pSr.forEach(t),Xqe=r($6e," (PoolFormer model)"),$6e.forEach(t),Vqe=i(T),zm=n(T,"LI",{});var I6e=s(zm);WH=n(I6e,"STRONG",{});var _Sr=s(WH);zqe=r(_Sr,"prophetnet"),_Sr.forEach(t),Wqe=r(I6e," \u2014 "),nB=n(I6e,"A",{href:!0});var uSr=s(nB);Qqe=r(uSr,"ProphetNetConfig"),uSr.forEach(t),Hqe=r(I6e," (ProphetNet model)"),I6e.forEach(t),Uqe=i(T),Wm=n(T,"LI",{});var N6e=s(Wm);QH=n(N6e,"STRONG",{});var bSr=s(QH);Jqe=r(bSr,"qdqbert"),bSr.forEach(t),Yqe=r(N6e," \u2014 "),sB=n(N6e,"A",{href:!0});var vSr=s(sB);Kqe=r(vSr,"QDQBertConfig"),vSr.forEach(t),Zqe=r(N6e," (QDQBert model)"),N6e.forEach(t),eGe=i(T),Qm=n(T,"LI",{});var j6e=s(Qm);HH=n(j6e,"STRONG",{});var TSr=s(HH);oGe=r(TSr,"rag"),TSr.forEach(t),rGe=r(j6e," \u2014 "),lB=n(j6e,"A",{href:!0});var FSr=s(lB);tGe=r(FSr,"RagConfig"),FSr.forEach(t),aGe=r(j6e," (RAG model)"),j6e.forEach(t),nGe=i(T),Hm=n(T,"LI",{});var D6e=s(Hm);UH=n(D6e,"STRONG",{});var CSr=s(UH);sGe=r(CSr,"realm"),CSr.forEach(t),lGe=r(D6e," \u2014 "),iB=n(D6e,"A",{href:!0});var MSr=s(iB);iGe=r(MSr,"RealmConfig"),MSr.forEach(t),dGe=r(D6e," (Realm model)"),D6e.forEach(t),cGe=i(T),Um=n(T,"LI",{});var q6e=s(Um);JH=n(q6e,"STRONG",{});var ESr=s(JH);fGe=r(ESr,"reformer"),ESr.forEach(t),mGe=r(q6e," \u2014 "),dB=n(q6e,"A",{href:!0});var ySr=s(dB);gGe=r(ySr,"ReformerConfig"),ySr.forEach(t),hGe=r(q6e," (Reformer model)"),q6e.forEach(t),pGe=i(T),Jm=n(T,"LI",{});var G6e=s(Jm);YH=n(G6e,"STRONG",{});var wSr=s(YH);_Ge=r(wSr,"rembert"),wSr.forEach(t),uGe=r(G6e," \u2014 "),cB=n(G6e,"A",{href:!0});var ASr=s(cB);bGe=r(ASr,"RemBertConfig"),ASr.forEach(t),vGe=r(G6e," (RemBERT model)"),G6e.forEach(t),TGe=i(T),Ym=n(T,"LI",{});var O6e=s(Ym);KH=n(O6e,"STRONG",{});var LSr=s(KH);FGe=r(LSr,"resnet"),LSr.forEach(t),CGe=r(O6e," \u2014 "),fB=n(O6e,"A",{href:!0});var BSr=s(fB);MGe=r(BSr,"ResNetConfig"),BSr.forEach(t),EGe=r(O6e," (ResNet model)"),O6e.forEach(t),yGe=i(T),Km=n(T,"LI",{});var X6e=s(Km);ZH=n(X6e,"STRONG",{});var xSr=s(ZH);wGe=r(xSr,"retribert"),xSr.forEach(t),AGe=r(X6e," \u2014 "),mB=n(X6e,"A",{href:!0});var kSr=s(mB);LGe=r(kSr,"RetriBertConfig"),kSr.forEach(t),BGe=r(X6e," (RetriBERT model)"),X6e.forEach(t),xGe=i(T),Zm=n(T,"LI",{});var V6e=s(Zm);eU=n(V6e,"STRONG",{});var RSr=s(eU);kGe=r(RSr,"roberta"),RSr.forEach(t),RGe=r(V6e," \u2014 "),gB=n(V6e,"A",{href:!0});var SSr=s(gB);SGe=r(SSr,"RobertaConfig"),SSr.forEach(t),PGe=r(V6e," (RoBERTa model)"),V6e.forEach(t),$Ge=i(T),eg=n(T,"LI",{});var z6e=s(eg);oU=n(z6e,"STRONG",{});var PSr=s(oU);IGe=r(PSr,"roformer"),PSr.forEach(t),NGe=r(z6e," \u2014 "),hB=n(z6e,"A",{href:!0});var $Sr=s(hB);jGe=r($Sr,"RoFormerConfig"),$Sr.forEach(t),DGe=r(z6e," (RoFormer model)"),z6e.forEach(t),qGe=i(T),og=n(T,"LI",{});var W6e=s(og);rU=n(W6e,"STRONG",{});var ISr=s(rU);GGe=r(ISr,"segformer"),ISr.forEach(t),OGe=r(W6e," \u2014 "),pB=n(W6e,"A",{href:!0});var NSr=s(pB);XGe=r(NSr,"SegformerConfig"),NSr.forEach(t),VGe=r(W6e," (SegFormer model)"),W6e.forEach(t),zGe=i(T),rg=n(T,"LI",{});var Q6e=s(rg);tU=n(Q6e,"STRONG",{});var jSr=s(tU);WGe=r(jSr,"sew"),jSr.forEach(t),QGe=r(Q6e," \u2014 "),_B=n(Q6e,"A",{href:!0});var DSr=s(_B);HGe=r(DSr,"SEWConfig"),DSr.forEach(t),UGe=r(Q6e," (SEW model)"),Q6e.forEach(t),JGe=i(T),tg=n(T,"LI",{});var H6e=s(tg);aU=n(H6e,"STRONG",{});var qSr=s(aU);YGe=r(qSr,"sew-d"),qSr.forEach(t),KGe=r(H6e," \u2014 "),uB=n(H6e,"A",{href:!0});var GSr=s(uB);ZGe=r(GSr,"SEWDConfig"),GSr.forEach(t),eOe=r(H6e," (SEW-D model)"),H6e.forEach(t),oOe=i(T),ag=n(T,"LI",{});var U6e=s(ag);nU=n(U6e,"STRONG",{});var OSr=s(nU);rOe=r(OSr,"speech-encoder-decoder"),OSr.forEach(t),tOe=r(U6e," \u2014 "),bB=n(U6e,"A",{href:!0});var XSr=s(bB);aOe=r(XSr,"SpeechEncoderDecoderConfig"),XSr.forEach(t),nOe=r(U6e," (Speech Encoder decoder model)"),U6e.forEach(t),sOe=i(T),ng=n(T,"LI",{});var J6e=s(ng);sU=n(J6e,"STRONG",{});var VSr=s(sU);lOe=r(VSr,"speech_to_text"),VSr.forEach(t),iOe=r(J6e," \u2014 "),vB=n(J6e,"A",{href:!0});var zSr=s(vB);dOe=r(zSr,"Speech2TextConfig"),zSr.forEach(t),cOe=r(J6e," (Speech2Text model)"),J6e.forEach(t),fOe=i(T),sg=n(T,"LI",{});var Y6e=s(sg);lU=n(Y6e,"STRONG",{});var WSr=s(lU);mOe=r(WSr,"speech_to_text_2"),WSr.forEach(t),gOe=r(Y6e," \u2014 "),TB=n(Y6e,"A",{href:!0});var QSr=s(TB);hOe=r(QSr,"Speech2Text2Config"),QSr.forEach(t),pOe=r(Y6e," (Speech2Text2 model)"),Y6e.forEach(t),_Oe=i(T),lg=n(T,"LI",{});var K6e=s(lg);iU=n(K6e,"STRONG",{});var HSr=s(iU);uOe=r(HSr,"splinter"),HSr.forEach(t),bOe=r(K6e," \u2014 "),FB=n(K6e,"A",{href:!0});var USr=s(FB);vOe=r(USr,"SplinterConfig"),USr.forEach(t),TOe=r(K6e," (Splinter model)"),K6e.forEach(t),FOe=i(T),ig=n(T,"LI",{});var Z6e=s(ig);dU=n(Z6e,"STRONG",{});var JSr=s(dU);COe=r(JSr,"squeezebert"),JSr.forEach(t),MOe=r(Z6e," \u2014 "),CB=n(Z6e,"A",{href:!0});var YSr=s(CB);EOe=r(YSr,"SqueezeBertConfig"),YSr.forEach(t),yOe=r(Z6e," (SqueezeBERT model)"),Z6e.forEach(t),wOe=i(T),dg=n(T,"LI",{});var eTe=s(dg);cU=n(eTe,"STRONG",{});var KSr=s(cU);AOe=r(KSr,"swin"),KSr.forEach(t),LOe=r(eTe," \u2014 "),MB=n(eTe,"A",{href:!0});var ZSr=s(MB);BOe=r(ZSr,"SwinConfig"),ZSr.forEach(t),xOe=r(eTe," (Swin model)"),eTe.forEach(t),kOe=i(T),cg=n(T,"LI",{});var oTe=s(cg);fU=n(oTe,"STRONG",{});var ePr=s(fU);ROe=r(ePr,"t5"),ePr.forEach(t),SOe=r(oTe," \u2014 "),EB=n(oTe,"A",{href:!0});var oPr=s(EB);POe=r(oPr,"T5Config"),oPr.forEach(t),$Oe=r(oTe," (T5 model)"),oTe.forEach(t),IOe=i(T),fg=n(T,"LI",{});var rTe=s(fg);mU=n(rTe,"STRONG",{});var rPr=s(mU);NOe=r(rPr,"tapas"),rPr.forEach(t),jOe=r(rTe," \u2014 "),yB=n(rTe,"A",{href:!0});var tPr=s(yB);DOe=r(tPr,"TapasConfig"),tPr.forEach(t),qOe=r(rTe," (TAPAS model)"),rTe.forEach(t),GOe=i(T),mg=n(T,"LI",{});var tTe=s(mg);gU=n(tTe,"STRONG",{});var aPr=s(gU);OOe=r(aPr,"transfo-xl"),aPr.forEach(t),XOe=r(tTe," \u2014 "),wB=n(tTe,"A",{href:!0});var nPr=s(wB);VOe=r(nPr,"TransfoXLConfig"),nPr.forEach(t),zOe=r(tTe," (Transformer-XL model)"),tTe.forEach(t),WOe=i(T),gg=n(T,"LI",{});var aTe=s(gg);hU=n(aTe,"STRONG",{});var sPr=s(hU);QOe=r(sPr,"trocr"),sPr.forEach(t),HOe=r(aTe," \u2014 "),AB=n(aTe,"A",{href:!0});var lPr=s(AB);UOe=r(lPr,"TrOCRConfig"),lPr.forEach(t),JOe=r(aTe," (TrOCR model)"),aTe.forEach(t),YOe=i(T),hg=n(T,"LI",{});var nTe=s(hg);pU=n(nTe,"STRONG",{});var iPr=s(pU);KOe=r(iPr,"unispeech"),iPr.forEach(t),ZOe=r(nTe," \u2014 "),LB=n(nTe,"A",{href:!0});var dPr=s(LB);eXe=r(dPr,"UniSpeechConfig"),dPr.forEach(t),oXe=r(nTe," (UniSpeech model)"),nTe.forEach(t),rXe=i(T),pg=n(T,"LI",{});var sTe=s(pg);_U=n(sTe,"STRONG",{});var cPr=s(_U);tXe=r(cPr,"unispeech-sat"),cPr.forEach(t),aXe=r(sTe," \u2014 "),BB=n(sTe,"A",{href:!0});var fPr=s(BB);nXe=r(fPr,"UniSpeechSatConfig"),fPr.forEach(t),sXe=r(sTe," (UniSpeechSat model)"),sTe.forEach(t),lXe=i(T),_g=n(T,"LI",{});var lTe=s(_g);uU=n(lTe,"STRONG",{});var mPr=s(uU);iXe=r(mPr,"van"),mPr.forEach(t),dXe=r(lTe," \u2014 "),xB=n(lTe,"A",{href:!0});var gPr=s(xB);cXe=r(gPr,"VanConfig"),gPr.forEach(t),fXe=r(lTe," (VAN model)"),lTe.forEach(t),mXe=i(T),ug=n(T,"LI",{});var iTe=s(ug);bU=n(iTe,"STRONG",{});var hPr=s(bU);gXe=r(hPr,"vilt"),hPr.forEach(t),hXe=r(iTe," \u2014 "),kB=n(iTe,"A",{href:!0});var pPr=s(kB);pXe=r(pPr,"ViltConfig"),pPr.forEach(t),_Xe=r(iTe," (ViLT model)"),iTe.forEach(t),uXe=i(T),bg=n(T,"LI",{});var dTe=s(bg);vU=n(dTe,"STRONG",{});var _Pr=s(vU);bXe=r(_Pr,"vision-encoder-decoder"),_Pr.forEach(t),vXe=r(dTe," \u2014 "),RB=n(dTe,"A",{href:!0});var uPr=s(RB);TXe=r(uPr,"VisionEncoderDecoderConfig"),uPr.forEach(t),FXe=r(dTe," (Vision Encoder decoder model)"),dTe.forEach(t),CXe=i(T),vg=n(T,"LI",{});var cTe=s(vg);TU=n(cTe,"STRONG",{});var bPr=s(TU);MXe=r(bPr,"vision-text-dual-encoder"),bPr.forEach(t),EXe=r(cTe," \u2014 "),SB=n(cTe,"A",{href:!0});var vPr=s(SB);yXe=r(vPr,"VisionTextDualEncoderConfig"),vPr.forEach(t),wXe=r(cTe," (VisionTextDualEncoder model)"),cTe.forEach(t),AXe=i(T),Tg=n(T,"LI",{});var fTe=s(Tg);FU=n(fTe,"STRONG",{});var TPr=s(FU);LXe=r(TPr,"visual_bert"),TPr.forEach(t),BXe=r(fTe," \u2014 "),PB=n(fTe,"A",{href:!0});var FPr=s(PB);xXe=r(FPr,"VisualBertConfig"),FPr.forEach(t),kXe=r(fTe," (VisualBert model)"),fTe.forEach(t),RXe=i(T),Fg=n(T,"LI",{});var mTe=s(Fg);CU=n(mTe,"STRONG",{});var CPr=s(CU);SXe=r(CPr,"vit"),CPr.forEach(t),PXe=r(mTe," \u2014 "),$B=n(mTe,"A",{href:!0});var MPr=s($B);$Xe=r(MPr,"ViTConfig"),MPr.forEach(t),IXe=r(mTe," (ViT model)"),mTe.forEach(t),NXe=i(T),Cg=n(T,"LI",{});var gTe=s(Cg);MU=n(gTe,"STRONG",{});var EPr=s(MU);jXe=r(EPr,"vit_mae"),EPr.forEach(t),DXe=r(gTe," \u2014 "),IB=n(gTe,"A",{href:!0});var yPr=s(IB);qXe=r(yPr,"ViTMAEConfig"),yPr.forEach(t),GXe=r(gTe," (ViTMAE model)"),gTe.forEach(t),OXe=i(T),Mg=n(T,"LI",{});var hTe=s(Mg);EU=n(hTe,"STRONG",{});var wPr=s(EU);XXe=r(wPr,"wav2vec2"),wPr.forEach(t),VXe=r(hTe," \u2014 "),NB=n(hTe,"A",{href:!0});var APr=s(NB);zXe=r(APr,"Wav2Vec2Config"),APr.forEach(t),WXe=r(hTe," (Wav2Vec2 model)"),hTe.forEach(t),QXe=i(T),Eg=n(T,"LI",{});var pTe=s(Eg);yU=n(pTe,"STRONG",{});var LPr=s(yU);HXe=r(LPr,"wavlm"),LPr.forEach(t),UXe=r(pTe," \u2014 "),jB=n(pTe,"A",{href:!0});var BPr=s(jB);JXe=r(BPr,"WavLMConfig"),BPr.forEach(t),YXe=r(pTe," (WavLM model)"),pTe.forEach(t),KXe=i(T),yg=n(T,"LI",{});var _Te=s(yg);wU=n(_Te,"STRONG",{});var xPr=s(wU);ZXe=r(xPr,"xglm"),xPr.forEach(t),eVe=r(_Te," \u2014 "),DB=n(_Te,"A",{href:!0});var kPr=s(DB);oVe=r(kPr,"XGLMConfig"),kPr.forEach(t),rVe=r(_Te," (XGLM model)"),_Te.forEach(t),tVe=i(T),wg=n(T,"LI",{});var uTe=s(wg);AU=n(uTe,"STRONG",{});var RPr=s(AU);aVe=r(RPr,"xlm"),RPr.forEach(t),nVe=r(uTe," \u2014 "),qB=n(uTe,"A",{href:!0});var SPr=s(qB);sVe=r(SPr,"XLMConfig"),SPr.forEach(t),lVe=r(uTe," (XLM model)"),uTe.forEach(t),iVe=i(T),Ag=n(T,"LI",{});var bTe=s(Ag);LU=n(bTe,"STRONG",{});var PPr=s(LU);dVe=r(PPr,"xlm-prophetnet"),PPr.forEach(t),cVe=r(bTe," \u2014 "),GB=n(bTe,"A",{href:!0});var $Pr=s(GB);fVe=r($Pr,"XLMProphetNetConfig"),$Pr.forEach(t),mVe=r(bTe," (XLMProphetNet model)"),bTe.forEach(t),gVe=i(T),Lg=n(T,"LI",{});var vTe=s(Lg);BU=n(vTe,"STRONG",{});var IPr=s(BU);hVe=r(IPr,"xlm-roberta"),IPr.forEach(t),pVe=r(vTe," \u2014 "),OB=n(vTe,"A",{href:!0});var NPr=s(OB);_Ve=r(NPr,"XLMRobertaConfig"),NPr.forEach(t),uVe=r(vTe," (XLM-RoBERTa model)"),vTe.forEach(t),bVe=i(T),Bg=n(T,"LI",{});var TTe=s(Bg);xU=n(TTe,"STRONG",{});var jPr=s(xU);vVe=r(jPr,"xlm-roberta-xl"),jPr.forEach(t),TVe=r(TTe," \u2014 "),XB=n(TTe,"A",{href:!0});var DPr=s(XB);FVe=r(DPr,"XLMRobertaXLConfig"),DPr.forEach(t),CVe=r(TTe," (XLM-RoBERTa-XL model)"),TTe.forEach(t),MVe=i(T),xg=n(T,"LI",{});var FTe=s(xg);kU=n(FTe,"STRONG",{});var qPr=s(kU);EVe=r(qPr,"xlnet"),qPr.forEach(t),yVe=r(FTe," \u2014 "),VB=n(FTe,"A",{href:!0});var GPr=s(VB);wVe=r(GPr,"XLNetConfig"),GPr.forEach(t),AVe=r(FTe," (XLNet model)"),FTe.forEach(t),LVe=i(T),kg=n(T,"LI",{});var CTe=s(kg);RU=n(CTe,"STRONG",{});var OPr=s(RU);BVe=r(OPr,"yoso"),OPr.forEach(t),xVe=r(CTe," \u2014 "),zB=n(CTe,"A",{href:!0});var XPr=s(zB);kVe=r(XPr,"YosoConfig"),XPr.forEach(t),RVe=r(CTe," (YOSO model)"),CTe.forEach(t),T.forEach(t),SVe=i(ga),SU=n(ga,"P",{});var VPr=s(SU);PVe=r(VPr,"Examples:"),VPr.forEach(t),$Ve=i(ga),m(hE.$$.fragment,ga),ga.forEach(t),IVe=i(Os),Rg=n(Os,"DIV",{class:!0});var oSe=s(Rg);m(pE.$$.fragment,oSe),NVe=i(oSe),PU=n(oSe,"P",{});var zPr=s(PU);jVe=r(zPr,"Register a new configuration for this class."),zPr.forEach(t),oSe.forEach(t),Os.forEach(t),Zxe=i(c),Qi=n(c,"H2",{class:!0});var rSe=s(Qi);Sg=n(rSe,"A",{id:!0,class:!0,href:!0});var WPr=s(Sg);$U=n(WPr,"SPAN",{});var QPr=s($U);m(_E.$$.fragment,QPr),QPr.forEach(t),WPr.forEach(t),DVe=i(rSe),IU=n(rSe,"SPAN",{});var HPr=s(IU);qVe=r(HPr,"AutoTokenizer"),HPr.forEach(t),rSe.forEach(t),eke=i(c),Qo=n(c,"DIV",{class:!0});var Xs=s(Qo);m(uE.$$.fragment,Xs),GVe=i(Xs),bE=n(Xs,"P",{});var tSe=s(bE);OVe=r(tSe,`This is a generic tokenizer class that will be instantiated as one of the tokenizer classes of the library when
created with the `),WB=n(tSe,"A",{href:!0});var UPr=s(WB);XVe=r(UPr,"AutoTokenizer.from_pretrained()"),UPr.forEach(t),VVe=r(tSe," class method."),tSe.forEach(t),zVe=i(Xs),vE=n(Xs,"P",{});var aSe=s(vE);WVe=r(aSe,"This class cannot be instantiated directly using "),NU=n(aSe,"CODE",{});var JPr=s(NU);QVe=r(JPr,"__init__()"),JPr.forEach(t),HVe=r(aSe," (throws an error)."),aSe.forEach(t),UVe=i(Xs),go=n(Xs,"DIV",{class:!0});var ha=s(go);m(TE.$$.fragment,ha),JVe=i(ha),jU=n(ha,"P",{});var YPr=s(jU);YVe=r(YPr,"Instantiate one of the tokenizer classes of the library from a pretrained model vocabulary."),YPr.forEach(t),KVe=i(ha),Oa=n(ha,"P",{});var nM=s(Oa);ZVe=r(nM,"The tokenizer class to instantiate is selected based on the "),DU=n(nM,"CODE",{});var KPr=s(DU);eze=r(KPr,"model_type"),KPr.forEach(t),oze=r(nM,` property of the config object (either
passed as an argument or loaded from `),qU=n(nM,"CODE",{});var ZPr=s(qU);rze=r(ZPr,"pretrained_model_name_or_path"),ZPr.forEach(t),tze=r(nM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),GU=n(nM,"CODE",{});var e$r=s(GU);aze=r(e$r,"pretrained_model_name_or_path"),e$r.forEach(t),nze=r(nM,":"),nM.forEach(t),sze=i(ha),E=n(ha,"UL",{});var y=s(E);Wn=n(y,"LI",{});var e8=s(Wn);OU=n(e8,"STRONG",{});var o$r=s(OU);lze=r(o$r,"albert"),o$r.forEach(t),ize=r(e8," \u2014 "),QB=n(e8,"A",{href:!0});var r$r=s(QB);dze=r(r$r,"AlbertTokenizer"),r$r.forEach(t),cze=r(e8," or "),HB=n(e8,"A",{href:!0});var t$r=s(HB);fze=r(t$r,"AlbertTokenizerFast"),t$r.forEach(t),mze=r(e8," (ALBERT model)"),e8.forEach(t),gze=i(y),Qn=n(y,"LI",{});var o8=s(Qn);XU=n(o8,"STRONG",{});var a$r=s(XU);hze=r(a$r,"bart"),a$r.forEach(t),pze=r(o8," \u2014 "),UB=n(o8,"A",{href:!0});var n$r=s(UB);_ze=r(n$r,"BartTokenizer"),n$r.forEach(t),uze=r(o8," or "),JB=n(o8,"A",{href:!0});var s$r=s(JB);bze=r(s$r,"BartTokenizerFast"),s$r.forEach(t),vze=r(o8," (BART model)"),o8.forEach(t),Tze=i(y),Hn=n(y,"LI",{});var r8=s(Hn);VU=n(r8,"STRONG",{});var l$r=s(VU);Fze=r(l$r,"barthez"),l$r.forEach(t),Cze=r(r8," \u2014 "),YB=n(r8,"A",{href:!0});var i$r=s(YB);Mze=r(i$r,"BarthezTokenizer"),i$r.forEach(t),Eze=r(r8," or "),KB=n(r8,"A",{href:!0});var d$r=s(KB);yze=r(d$r,"BarthezTokenizerFast"),d$r.forEach(t),wze=r(r8," (BARThez model)"),r8.forEach(t),Aze=i(y),Pg=n(y,"LI",{});var MTe=s(Pg);zU=n(MTe,"STRONG",{});var c$r=s(zU);Lze=r(c$r,"bartpho"),c$r.forEach(t),Bze=r(MTe," \u2014 "),ZB=n(MTe,"A",{href:!0});var f$r=s(ZB);xze=r(f$r,"BartphoTokenizer"),f$r.forEach(t),kze=r(MTe," (BARTpho model)"),MTe.forEach(t),Rze=i(y),Un=n(y,"LI",{});var t8=s(Un);WU=n(t8,"STRONG",{});var m$r=s(WU);Sze=r(m$r,"bert"),m$r.forEach(t),Pze=r(t8," \u2014 "),ex=n(t8,"A",{href:!0});var g$r=s(ex);$ze=r(g$r,"BertTokenizer"),g$r.forEach(t),Ize=r(t8," or "),ox=n(t8,"A",{href:!0});var h$r=s(ox);Nze=r(h$r,"BertTokenizerFast"),h$r.forEach(t),jze=r(t8," (BERT model)"),t8.forEach(t),Dze=i(y),$g=n(y,"LI",{});var ETe=s($g);QU=n(ETe,"STRONG",{});var p$r=s(QU);qze=r(p$r,"bert-generation"),p$r.forEach(t),Gze=r(ETe," \u2014 "),rx=n(ETe,"A",{href:!0});var _$r=s(rx);Oze=r(_$r,"BertGenerationTokenizer"),_$r.forEach(t),Xze=r(ETe," (Bert Generation model)"),ETe.forEach(t),Vze=i(y),Ig=n(y,"LI",{});var yTe=s(Ig);HU=n(yTe,"STRONG",{});var u$r=s(HU);zze=r(u$r,"bert-japanese"),u$r.forEach(t),Wze=r(yTe," \u2014 "),tx=n(yTe,"A",{href:!0});var b$r=s(tx);Qze=r(b$r,"BertJapaneseTokenizer"),b$r.forEach(t),Hze=r(yTe," (BertJapanese model)"),yTe.forEach(t),Uze=i(y),Ng=n(y,"LI",{});var wTe=s(Ng);UU=n(wTe,"STRONG",{});var v$r=s(UU);Jze=r(v$r,"bertweet"),v$r.forEach(t),Yze=r(wTe," \u2014 "),ax=n(wTe,"A",{href:!0});var T$r=s(ax);Kze=r(T$r,"BertweetTokenizer"),T$r.forEach(t),Zze=r(wTe," (Bertweet model)"),wTe.forEach(t),eWe=i(y),Jn=n(y,"LI",{});var a8=s(Jn);JU=n(a8,"STRONG",{});var F$r=s(JU);oWe=r(F$r,"big_bird"),F$r.forEach(t),rWe=r(a8," \u2014 "),nx=n(a8,"A",{href:!0});var C$r=s(nx);tWe=r(C$r,"BigBirdTokenizer"),C$r.forEach(t),aWe=r(a8," or "),sx=n(a8,"A",{href:!0});var M$r=s(sx);nWe=r(M$r,"BigBirdTokenizerFast"),M$r.forEach(t),sWe=r(a8," (BigBird model)"),a8.forEach(t),lWe=i(y),Yn=n(y,"LI",{});var n8=s(Yn);YU=n(n8,"STRONG",{});var E$r=s(YU);iWe=r(E$r,"bigbird_pegasus"),E$r.forEach(t),dWe=r(n8," \u2014 "),lx=n(n8,"A",{href:!0});var y$r=s(lx);cWe=r(y$r,"PegasusTokenizer"),y$r.forEach(t),fWe=r(n8," or "),ix=n(n8,"A",{href:!0});var w$r=s(ix);mWe=r(w$r,"PegasusTokenizerFast"),w$r.forEach(t),gWe=r(n8," (BigBirdPegasus model)"),n8.forEach(t),hWe=i(y),Kn=n(y,"LI",{});var s8=s(Kn);KU=n(s8,"STRONG",{});var A$r=s(KU);pWe=r(A$r,"blenderbot"),A$r.forEach(t),_We=r(s8," \u2014 "),dx=n(s8,"A",{href:!0});var L$r=s(dx);uWe=r(L$r,"BlenderbotTokenizer"),L$r.forEach(t),bWe=r(s8," or "),cx=n(s8,"A",{href:!0});var B$r=s(cx);vWe=r(B$r,"BlenderbotTokenizerFast"),B$r.forEach(t),TWe=r(s8," (Blenderbot model)"),s8.forEach(t),FWe=i(y),jg=n(y,"LI",{});var ATe=s(jg);ZU=n(ATe,"STRONG",{});var x$r=s(ZU);CWe=r(x$r,"blenderbot-small"),x$r.forEach(t),MWe=r(ATe," \u2014 "),fx=n(ATe,"A",{href:!0});var k$r=s(fx);EWe=r(k$r,"BlenderbotSmallTokenizer"),k$r.forEach(t),yWe=r(ATe," (BlenderbotSmall model)"),ATe.forEach(t),wWe=i(y),Dg=n(y,"LI",{});var LTe=s(Dg);eJ=n(LTe,"STRONG",{});var R$r=s(eJ);AWe=r(R$r,"byt5"),R$r.forEach(t),LWe=r(LTe," \u2014 "),mx=n(LTe,"A",{href:!0});var S$r=s(mx);BWe=r(S$r,"ByT5Tokenizer"),S$r.forEach(t),xWe=r(LTe," (ByT5 model)"),LTe.forEach(t),kWe=i(y),Zn=n(y,"LI",{});var l8=s(Zn);oJ=n(l8,"STRONG",{});var P$r=s(oJ);RWe=r(P$r,"camembert"),P$r.forEach(t),SWe=r(l8," \u2014 "),gx=n(l8,"A",{href:!0});var $$r=s(gx);PWe=r($$r,"CamembertTokenizer"),$$r.forEach(t),$We=r(l8," or "),hx=n(l8,"A",{href:!0});var I$r=s(hx);IWe=r(I$r,"CamembertTokenizerFast"),I$r.forEach(t),NWe=r(l8," (CamemBERT model)"),l8.forEach(t),jWe=i(y),qg=n(y,"LI",{});var BTe=s(qg);rJ=n(BTe,"STRONG",{});var N$r=s(rJ);DWe=r(N$r,"canine"),N$r.forEach(t),qWe=r(BTe," \u2014 "),px=n(BTe,"A",{href:!0});var j$r=s(px);GWe=r(j$r,"CanineTokenizer"),j$r.forEach(t),OWe=r(BTe," (Canine model)"),BTe.forEach(t),XWe=i(y),es=n(y,"LI",{});var i8=s(es);tJ=n(i8,"STRONG",{});var D$r=s(tJ);VWe=r(D$r,"clip"),D$r.forEach(t),zWe=r(i8," \u2014 "),_x=n(i8,"A",{href:!0});var q$r=s(_x);WWe=r(q$r,"CLIPTokenizer"),q$r.forEach(t),QWe=r(i8," or "),ux=n(i8,"A",{href:!0});var G$r=s(ux);HWe=r(G$r,"CLIPTokenizerFast"),G$r.forEach(t),UWe=r(i8," (CLIP model)"),i8.forEach(t),JWe=i(y),os=n(y,"LI",{});var d8=s(os);aJ=n(d8,"STRONG",{});var O$r=s(aJ);YWe=r(O$r,"convbert"),O$r.forEach(t),KWe=r(d8," \u2014 "),bx=n(d8,"A",{href:!0});var X$r=s(bx);ZWe=r(X$r,"ConvBertTokenizer"),X$r.forEach(t),eQe=r(d8," or "),vx=n(d8,"A",{href:!0});var V$r=s(vx);oQe=r(V$r,"ConvBertTokenizerFast"),V$r.forEach(t),rQe=r(d8," (ConvBERT model)"),d8.forEach(t),tQe=i(y),rs=n(y,"LI",{});var c8=s(rs);nJ=n(c8,"STRONG",{});var z$r=s(nJ);aQe=r(z$r,"cpm"),z$r.forEach(t),nQe=r(c8," \u2014 "),Tx=n(c8,"A",{href:!0});var W$r=s(Tx);sQe=r(W$r,"CpmTokenizer"),W$r.forEach(t),lQe=r(c8," or "),sJ=n(c8,"CODE",{});var Q$r=s(sJ);iQe=r(Q$r,"CpmTokenizerFast"),Q$r.forEach(t),dQe=r(c8," (CPM model)"),c8.forEach(t),cQe=i(y),Gg=n(y,"LI",{});var xTe=s(Gg);lJ=n(xTe,"STRONG",{});var H$r=s(lJ);fQe=r(H$r,"ctrl"),H$r.forEach(t),mQe=r(xTe," \u2014 "),Fx=n(xTe,"A",{href:!0});var U$r=s(Fx);gQe=r(U$r,"CTRLTokenizer"),U$r.forEach(t),hQe=r(xTe," (CTRL model)"),xTe.forEach(t),pQe=i(y),ts=n(y,"LI",{});var f8=s(ts);iJ=n(f8,"STRONG",{});var J$r=s(iJ);_Qe=r(J$r,"deberta"),J$r.forEach(t),uQe=r(f8," \u2014 "),Cx=n(f8,"A",{href:!0});var Y$r=s(Cx);bQe=r(Y$r,"DebertaTokenizer"),Y$r.forEach(t),vQe=r(f8," or "),Mx=n(f8,"A",{href:!0});var K$r=s(Mx);TQe=r(K$r,"DebertaTokenizerFast"),K$r.forEach(t),FQe=r(f8," (DeBERTa model)"),f8.forEach(t),CQe=i(y),Og=n(y,"LI",{});var kTe=s(Og);dJ=n(kTe,"STRONG",{});var Z$r=s(dJ);MQe=r(Z$r,"deberta-v2"),Z$r.forEach(t),EQe=r(kTe," \u2014 "),Ex=n(kTe,"A",{href:!0});var eIr=s(Ex);yQe=r(eIr,"DebertaV2Tokenizer"),eIr.forEach(t),wQe=r(kTe," (DeBERTa-v2 model)"),kTe.forEach(t),AQe=i(y),as=n(y,"LI",{});var m8=s(as);cJ=n(m8,"STRONG",{});var oIr=s(cJ);LQe=r(oIr,"distilbert"),oIr.forEach(t),BQe=r(m8," \u2014 "),yx=n(m8,"A",{href:!0});var rIr=s(yx);xQe=r(rIr,"DistilBertTokenizer"),rIr.forEach(t),kQe=r(m8," or "),wx=n(m8,"A",{href:!0});var tIr=s(wx);RQe=r(tIr,"DistilBertTokenizerFast"),tIr.forEach(t),SQe=r(m8," (DistilBERT model)"),m8.forEach(t),PQe=i(y),ns=n(y,"LI",{});var g8=s(ns);fJ=n(g8,"STRONG",{});var aIr=s(fJ);$Qe=r(aIr,"dpr"),aIr.forEach(t),IQe=r(g8," \u2014 "),Ax=n(g8,"A",{href:!0});var nIr=s(Ax);NQe=r(nIr,"DPRQuestionEncoderTokenizer"),nIr.forEach(t),jQe=r(g8," or "),Lx=n(g8,"A",{href:!0});var sIr=s(Lx);DQe=r(sIr,"DPRQuestionEncoderTokenizerFast"),sIr.forEach(t),qQe=r(g8," (DPR model)"),g8.forEach(t),GQe=i(y),ss=n(y,"LI",{});var h8=s(ss);mJ=n(h8,"STRONG",{});var lIr=s(mJ);OQe=r(lIr,"electra"),lIr.forEach(t),XQe=r(h8," \u2014 "),Bx=n(h8,"A",{href:!0});var iIr=s(Bx);VQe=r(iIr,"ElectraTokenizer"),iIr.forEach(t),zQe=r(h8," or "),xx=n(h8,"A",{href:!0});var dIr=s(xx);WQe=r(dIr,"ElectraTokenizerFast"),dIr.forEach(t),QQe=r(h8," (ELECTRA model)"),h8.forEach(t),HQe=i(y),Xg=n(y,"LI",{});var RTe=s(Xg);gJ=n(RTe,"STRONG",{});var cIr=s(gJ);UQe=r(cIr,"flaubert"),cIr.forEach(t),JQe=r(RTe," \u2014 "),kx=n(RTe,"A",{href:!0});var fIr=s(kx);YQe=r(fIr,"FlaubertTokenizer"),fIr.forEach(t),KQe=r(RTe," (FlauBERT model)"),RTe.forEach(t),ZQe=i(y),ls=n(y,"LI",{});var p8=s(ls);hJ=n(p8,"STRONG",{});var mIr=s(hJ);eHe=r(mIr,"fnet"),mIr.forEach(t),oHe=r(p8," \u2014 "),Rx=n(p8,"A",{href:!0});var gIr=s(Rx);rHe=r(gIr,"FNetTokenizer"),gIr.forEach(t),tHe=r(p8," or "),Sx=n(p8,"A",{href:!0});var hIr=s(Sx);aHe=r(hIr,"FNetTokenizerFast"),hIr.forEach(t),nHe=r(p8," (FNet model)"),p8.forEach(t),sHe=i(y),Vg=n(y,"LI",{});var STe=s(Vg);pJ=n(STe,"STRONG",{});var pIr=s(pJ);lHe=r(pIr,"fsmt"),pIr.forEach(t),iHe=r(STe," \u2014 "),Px=n(STe,"A",{href:!0});var _Ir=s(Px);dHe=r(_Ir,"FSMTTokenizer"),_Ir.forEach(t),cHe=r(STe," (FairSeq Machine-Translation model)"),STe.forEach(t),fHe=i(y),is=n(y,"LI",{});var _8=s(is);_J=n(_8,"STRONG",{});var uIr=s(_J);mHe=r(uIr,"funnel"),uIr.forEach(t),gHe=r(_8," \u2014 "),$x=n(_8,"A",{href:!0});var bIr=s($x);hHe=r(bIr,"FunnelTokenizer"),bIr.forEach(t),pHe=r(_8," or "),Ix=n(_8,"A",{href:!0});var vIr=s(Ix);_He=r(vIr,"FunnelTokenizerFast"),vIr.forEach(t),uHe=r(_8," (Funnel Transformer model)"),_8.forEach(t),bHe=i(y),ds=n(y,"LI",{});var u8=s(ds);uJ=n(u8,"STRONG",{});var TIr=s(uJ);vHe=r(TIr,"gpt2"),TIr.forEach(t),THe=r(u8," \u2014 "),Nx=n(u8,"A",{href:!0});var FIr=s(Nx);FHe=r(FIr,"GPT2Tokenizer"),FIr.forEach(t),CHe=r(u8," or "),jx=n(u8,"A",{href:!0});var CIr=s(jx);MHe=r(CIr,"GPT2TokenizerFast"),CIr.forEach(t),EHe=r(u8," (OpenAI GPT-2 model)"),u8.forEach(t),yHe=i(y),cs=n(y,"LI",{});var b8=s(cs);bJ=n(b8,"STRONG",{});var MIr=s(bJ);wHe=r(MIr,"gpt_neo"),MIr.forEach(t),AHe=r(b8," \u2014 "),Dx=n(b8,"A",{href:!0});var EIr=s(Dx);LHe=r(EIr,"GPT2Tokenizer"),EIr.forEach(t),BHe=r(b8," or "),qx=n(b8,"A",{href:!0});var yIr=s(qx);xHe=r(yIr,"GPT2TokenizerFast"),yIr.forEach(t),kHe=r(b8," (GPT Neo model)"),b8.forEach(t),RHe=i(y),fs=n(y,"LI",{});var v8=s(fs);vJ=n(v8,"STRONG",{});var wIr=s(vJ);SHe=r(wIr,"herbert"),wIr.forEach(t),PHe=r(v8," \u2014 "),Gx=n(v8,"A",{href:!0});var AIr=s(Gx);$He=r(AIr,"HerbertTokenizer"),AIr.forEach(t),IHe=r(v8," or "),Ox=n(v8,"A",{href:!0});var LIr=s(Ox);NHe=r(LIr,"HerbertTokenizerFast"),LIr.forEach(t),jHe=r(v8," (HerBERT model)"),v8.forEach(t),DHe=i(y),zg=n(y,"LI",{});var PTe=s(zg);TJ=n(PTe,"STRONG",{});var BIr=s(TJ);qHe=r(BIr,"hubert"),BIr.forEach(t),GHe=r(PTe," \u2014 "),Xx=n(PTe,"A",{href:!0});var xIr=s(Xx);OHe=r(xIr,"Wav2Vec2CTCTokenizer"),xIr.forEach(t),XHe=r(PTe," (Hubert model)"),PTe.forEach(t),VHe=i(y),ms=n(y,"LI",{});var T8=s(ms);FJ=n(T8,"STRONG",{});var kIr=s(FJ);zHe=r(kIr,"ibert"),kIr.forEach(t),WHe=r(T8," \u2014 "),Vx=n(T8,"A",{href:!0});var RIr=s(Vx);QHe=r(RIr,"RobertaTokenizer"),RIr.forEach(t),HHe=r(T8," or "),zx=n(T8,"A",{href:!0});var SIr=s(zx);UHe=r(SIr,"RobertaTokenizerFast"),SIr.forEach(t),JHe=r(T8," (I-BERT model)"),T8.forEach(t),YHe=i(y),gs=n(y,"LI",{});var F8=s(gs);CJ=n(F8,"STRONG",{});var PIr=s(CJ);KHe=r(PIr,"layoutlm"),PIr.forEach(t),ZHe=r(F8," \u2014 "),Wx=n(F8,"A",{href:!0});var $Ir=s(Wx);eUe=r($Ir,"LayoutLMTokenizer"),$Ir.forEach(t),oUe=r(F8," or "),Qx=n(F8,"A",{href:!0});var IIr=s(Qx);rUe=r(IIr,"LayoutLMTokenizerFast"),IIr.forEach(t),tUe=r(F8," (LayoutLM model)"),F8.forEach(t),aUe=i(y),hs=n(y,"LI",{});var C8=s(hs);MJ=n(C8,"STRONG",{});var NIr=s(MJ);nUe=r(NIr,"layoutlmv2"),NIr.forEach(t),sUe=r(C8," \u2014 "),Hx=n(C8,"A",{href:!0});var jIr=s(Hx);lUe=r(jIr,"LayoutLMv2Tokenizer"),jIr.forEach(t),iUe=r(C8," or "),Ux=n(C8,"A",{href:!0});var DIr=s(Ux);dUe=r(DIr,"LayoutLMv2TokenizerFast"),DIr.forEach(t),cUe=r(C8," (LayoutLMv2 model)"),C8.forEach(t),fUe=i(y),ps=n(y,"LI",{});var M8=s(ps);EJ=n(M8,"STRONG",{});var qIr=s(EJ);mUe=r(qIr,"layoutxlm"),qIr.forEach(t),gUe=r(M8," \u2014 "),Jx=n(M8,"A",{href:!0});var GIr=s(Jx);hUe=r(GIr,"LayoutXLMTokenizer"),GIr.forEach(t),pUe=r(M8," or "),Yx=n(M8,"A",{href:!0});var OIr=s(Yx);_Ue=r(OIr,"LayoutXLMTokenizerFast"),OIr.forEach(t),uUe=r(M8," (LayoutXLM model)"),M8.forEach(t),bUe=i(y),_s=n(y,"LI",{});var E8=s(_s);yJ=n(E8,"STRONG",{});var XIr=s(yJ);vUe=r(XIr,"led"),XIr.forEach(t),TUe=r(E8," \u2014 "),Kx=n(E8,"A",{href:!0});var VIr=s(Kx);FUe=r(VIr,"LEDTokenizer"),VIr.forEach(t),CUe=r(E8," or "),Zx=n(E8,"A",{href:!0});var zIr=s(Zx);MUe=r(zIr,"LEDTokenizerFast"),zIr.forEach(t),EUe=r(E8," (LED model)"),E8.forEach(t),yUe=i(y),us=n(y,"LI",{});var y8=s(us);wJ=n(y8,"STRONG",{});var WIr=s(wJ);wUe=r(WIr,"longformer"),WIr.forEach(t),AUe=r(y8," \u2014 "),ek=n(y8,"A",{href:!0});var QIr=s(ek);LUe=r(QIr,"LongformerTokenizer"),QIr.forEach(t),BUe=r(y8," or "),ok=n(y8,"A",{href:!0});var HIr=s(ok);xUe=r(HIr,"LongformerTokenizerFast"),HIr.forEach(t),kUe=r(y8," (Longformer model)"),y8.forEach(t),RUe=i(y),Wg=n(y,"LI",{});var $Te=s(Wg);AJ=n($Te,"STRONG",{});var UIr=s(AJ);SUe=r(UIr,"luke"),UIr.forEach(t),PUe=r($Te," \u2014 "),rk=n($Te,"A",{href:!0});var JIr=s(rk);$Ue=r(JIr,"LukeTokenizer"),JIr.forEach(t),IUe=r($Te," (LUKE model)"),$Te.forEach(t),NUe=i(y),bs=n(y,"LI",{});var w8=s(bs);LJ=n(w8,"STRONG",{});var YIr=s(LJ);jUe=r(YIr,"lxmert"),YIr.forEach(t),DUe=r(w8," \u2014 "),tk=n(w8,"A",{href:!0});var KIr=s(tk);qUe=r(KIr,"LxmertTokenizer"),KIr.forEach(t),GUe=r(w8," or "),ak=n(w8,"A",{href:!0});var ZIr=s(ak);OUe=r(ZIr,"LxmertTokenizerFast"),ZIr.forEach(t),XUe=r(w8," (LXMERT model)"),w8.forEach(t),VUe=i(y),Qg=n(y,"LI",{});var ITe=s(Qg);BJ=n(ITe,"STRONG",{});var eNr=s(BJ);zUe=r(eNr,"m2m_100"),eNr.forEach(t),WUe=r(ITe," \u2014 "),nk=n(ITe,"A",{href:!0});var oNr=s(nk);QUe=r(oNr,"M2M100Tokenizer"),oNr.forEach(t),HUe=r(ITe," (M2M100 model)"),ITe.forEach(t),UUe=i(y),Hg=n(y,"LI",{});var NTe=s(Hg);xJ=n(NTe,"STRONG",{});var rNr=s(xJ);JUe=r(rNr,"marian"),rNr.forEach(t),YUe=r(NTe," \u2014 "),sk=n(NTe,"A",{href:!0});var tNr=s(sk);KUe=r(tNr,"MarianTokenizer"),tNr.forEach(t),ZUe=r(NTe," (Marian model)"),NTe.forEach(t),eJe=i(y),vs=n(y,"LI",{});var A8=s(vs);kJ=n(A8,"STRONG",{});var aNr=s(kJ);oJe=r(aNr,"mbart"),aNr.forEach(t),rJe=r(A8," \u2014 "),lk=n(A8,"A",{href:!0});var nNr=s(lk);tJe=r(nNr,"MBartTokenizer"),nNr.forEach(t),aJe=r(A8," or "),ik=n(A8,"A",{href:!0});var sNr=s(ik);nJe=r(sNr,"MBartTokenizerFast"),sNr.forEach(t),sJe=r(A8," (mBART model)"),A8.forEach(t),lJe=i(y),Ts=n(y,"LI",{});var L8=s(Ts);RJ=n(L8,"STRONG",{});var lNr=s(RJ);iJe=r(lNr,"mbart50"),lNr.forEach(t),dJe=r(L8," \u2014 "),dk=n(L8,"A",{href:!0});var iNr=s(dk);cJe=r(iNr,"MBart50Tokenizer"),iNr.forEach(t),fJe=r(L8," or "),ck=n(L8,"A",{href:!0});var dNr=s(ck);mJe=r(dNr,"MBart50TokenizerFast"),dNr.forEach(t),gJe=r(L8," (mBART-50 model)"),L8.forEach(t),hJe=i(y),Ug=n(y,"LI",{});var jTe=s(Ug);SJ=n(jTe,"STRONG",{});var cNr=s(SJ);pJe=r(cNr,"mluke"),cNr.forEach(t),_Je=r(jTe," \u2014 "),fk=n(jTe,"A",{href:!0});var fNr=s(fk);uJe=r(fNr,"MLukeTokenizer"),fNr.forEach(t),bJe=r(jTe," (mLUKE model)"),jTe.forEach(t),vJe=i(y),Fs=n(y,"LI",{});var B8=s(Fs);PJ=n(B8,"STRONG",{});var mNr=s(PJ);TJe=r(mNr,"mobilebert"),mNr.forEach(t),FJe=r(B8," \u2014 "),mk=n(B8,"A",{href:!0});var gNr=s(mk);CJe=r(gNr,"MobileBertTokenizer"),gNr.forEach(t),MJe=r(B8," or "),gk=n(B8,"A",{href:!0});var hNr=s(gk);EJe=r(hNr,"MobileBertTokenizerFast"),hNr.forEach(t),yJe=r(B8," (MobileBERT model)"),B8.forEach(t),wJe=i(y),Cs=n(y,"LI",{});var x8=s(Cs);$J=n(x8,"STRONG",{});var pNr=s($J);AJe=r(pNr,"mpnet"),pNr.forEach(t),LJe=r(x8," \u2014 "),hk=n(x8,"A",{href:!0});var _Nr=s(hk);BJe=r(_Nr,"MPNetTokenizer"),_Nr.forEach(t),xJe=r(x8," or "),pk=n(x8,"A",{href:!0});var uNr=s(pk);kJe=r(uNr,"MPNetTokenizerFast"),uNr.forEach(t),RJe=r(x8," (MPNet model)"),x8.forEach(t),SJe=i(y),Ms=n(y,"LI",{});var k8=s(Ms);IJ=n(k8,"STRONG",{});var bNr=s(IJ);PJe=r(bNr,"mt5"),bNr.forEach(t),$Je=r(k8," \u2014 "),_k=n(k8,"A",{href:!0});var vNr=s(_k);IJe=r(vNr,"MT5Tokenizer"),vNr.forEach(t),NJe=r(k8," or "),uk=n(k8,"A",{href:!0});var TNr=s(uk);jJe=r(TNr,"MT5TokenizerFast"),TNr.forEach(t),DJe=r(k8," (mT5 model)"),k8.forEach(t),qJe=i(y),Es=n(y,"LI",{});var R8=s(Es);NJ=n(R8,"STRONG",{});var FNr=s(NJ);GJe=r(FNr,"openai-gpt"),FNr.forEach(t),OJe=r(R8," \u2014 "),bk=n(R8,"A",{href:!0});var CNr=s(bk);XJe=r(CNr,"OpenAIGPTTokenizer"),CNr.forEach(t),VJe=r(R8," or "),vk=n(R8,"A",{href:!0});var MNr=s(vk);zJe=r(MNr,"OpenAIGPTTokenizerFast"),MNr.forEach(t),WJe=r(R8," (OpenAI GPT model)"),R8.forEach(t),QJe=i(y),ys=n(y,"LI",{});var S8=s(ys);jJ=n(S8,"STRONG",{});var ENr=s(jJ);HJe=r(ENr,"pegasus"),ENr.forEach(t),UJe=r(S8," \u2014 "),Tk=n(S8,"A",{href:!0});var yNr=s(Tk);JJe=r(yNr,"PegasusTokenizer"),yNr.forEach(t),YJe=r(S8," or "),Fk=n(S8,"A",{href:!0});var wNr=s(Fk);KJe=r(wNr,"PegasusTokenizerFast"),wNr.forEach(t),ZJe=r(S8," (Pegasus model)"),S8.forEach(t),eYe=i(y),Jg=n(y,"LI",{});var DTe=s(Jg);DJ=n(DTe,"STRONG",{});var ANr=s(DJ);oYe=r(ANr,"perceiver"),ANr.forEach(t),rYe=r(DTe," \u2014 "),Ck=n(DTe,"A",{href:!0});var LNr=s(Ck);tYe=r(LNr,"PerceiverTokenizer"),LNr.forEach(t),aYe=r(DTe," (Perceiver model)"),DTe.forEach(t),nYe=i(y),Yg=n(y,"LI",{});var qTe=s(Yg);qJ=n(qTe,"STRONG",{});var BNr=s(qJ);sYe=r(BNr,"phobert"),BNr.forEach(t),lYe=r(qTe," \u2014 "),Mk=n(qTe,"A",{href:!0});var xNr=s(Mk);iYe=r(xNr,"PhobertTokenizer"),xNr.forEach(t),dYe=r(qTe," (PhoBERT model)"),qTe.forEach(t),cYe=i(y),Kg=n(y,"LI",{});var GTe=s(Kg);GJ=n(GTe,"STRONG",{});var kNr=s(GJ);fYe=r(kNr,"plbart"),kNr.forEach(t),mYe=r(GTe," \u2014 "),Ek=n(GTe,"A",{href:!0});var RNr=s(Ek);gYe=r(RNr,"PLBartTokenizer"),RNr.forEach(t),hYe=r(GTe," (PLBart model)"),GTe.forEach(t),pYe=i(y),Zg=n(y,"LI",{});var OTe=s(Zg);OJ=n(OTe,"STRONG",{});var SNr=s(OJ);_Ye=r(SNr,"prophetnet"),SNr.forEach(t),uYe=r(OTe," \u2014 "),yk=n(OTe,"A",{href:!0});var PNr=s(yk);bYe=r(PNr,"ProphetNetTokenizer"),PNr.forEach(t),vYe=r(OTe," (ProphetNet model)"),OTe.forEach(t),TYe=i(y),ws=n(y,"LI",{});var P8=s(ws);XJ=n(P8,"STRONG",{});var $Nr=s(XJ);FYe=r($Nr,"qdqbert"),$Nr.forEach(t),CYe=r(P8," \u2014 "),wk=n(P8,"A",{href:!0});var INr=s(wk);MYe=r(INr,"BertTokenizer"),INr.forEach(t),EYe=r(P8," or "),Ak=n(P8,"A",{href:!0});var NNr=s(Ak);yYe=r(NNr,"BertTokenizerFast"),NNr.forEach(t),wYe=r(P8," (QDQBert model)"),P8.forEach(t),AYe=i(y),eh=n(y,"LI",{});var XTe=s(eh);VJ=n(XTe,"STRONG",{});var jNr=s(VJ);LYe=r(jNr,"rag"),jNr.forEach(t),BYe=r(XTe," \u2014 "),Lk=n(XTe,"A",{href:!0});var DNr=s(Lk);xYe=r(DNr,"RagTokenizer"),DNr.forEach(t),kYe=r(XTe," (RAG model)"),XTe.forEach(t),RYe=i(y),As=n(y,"LI",{});var $8=s(As);zJ=n($8,"STRONG",{});var qNr=s(zJ);SYe=r(qNr,"realm"),qNr.forEach(t),PYe=r($8," \u2014 "),Bk=n($8,"A",{href:!0});var GNr=s(Bk);$Ye=r(GNr,"RealmTokenizer"),GNr.forEach(t),IYe=r($8," or "),xk=n($8,"A",{href:!0});var ONr=s(xk);NYe=r(ONr,"RealmTokenizerFast"),ONr.forEach(t),jYe=r($8," (Realm model)"),$8.forEach(t),DYe=i(y),Ls=n(y,"LI",{});var I8=s(Ls);WJ=n(I8,"STRONG",{});var XNr=s(WJ);qYe=r(XNr,"reformer"),XNr.forEach(t),GYe=r(I8," \u2014 "),kk=n(I8,"A",{href:!0});var VNr=s(kk);OYe=r(VNr,"ReformerTokenizer"),VNr.forEach(t),XYe=r(I8," or "),Rk=n(I8,"A",{href:!0});var zNr=s(Rk);VYe=r(zNr,"ReformerTokenizerFast"),zNr.forEach(t),zYe=r(I8," (Reformer model)"),I8.forEach(t),WYe=i(y),Bs=n(y,"LI",{});var N8=s(Bs);QJ=n(N8,"STRONG",{});var WNr=s(QJ);QYe=r(WNr,"rembert"),WNr.forEach(t),HYe=r(N8," \u2014 "),Sk=n(N8,"A",{href:!0});var QNr=s(Sk);UYe=r(QNr,"RemBertTokenizer"),QNr.forEach(t),JYe=r(N8," or "),Pk=n(N8,"A",{href:!0});var HNr=s(Pk);YYe=r(HNr,"RemBertTokenizerFast"),HNr.forEach(t),KYe=r(N8," (RemBERT model)"),N8.forEach(t),ZYe=i(y),xs=n(y,"LI",{});var j8=s(xs);HJ=n(j8,"STRONG",{});var UNr=s(HJ);eKe=r(UNr,"retribert"),UNr.forEach(t),oKe=r(j8," \u2014 "),$k=n(j8,"A",{href:!0});var JNr=s($k);rKe=r(JNr,"RetriBertTokenizer"),JNr.forEach(t),tKe=r(j8," or "),Ik=n(j8,"A",{href:!0});var YNr=s(Ik);aKe=r(YNr,"RetriBertTokenizerFast"),YNr.forEach(t),nKe=r(j8," (RetriBERT model)"),j8.forEach(t),sKe=i(y),ks=n(y,"LI",{});var D8=s(ks);UJ=n(D8,"STRONG",{});var KNr=s(UJ);lKe=r(KNr,"roberta"),KNr.forEach(t),iKe=r(D8," \u2014 "),Nk=n(D8,"A",{href:!0});var ZNr=s(Nk);dKe=r(ZNr,"RobertaTokenizer"),ZNr.forEach(t),cKe=r(D8," or "),jk=n(D8,"A",{href:!0});var ejr=s(jk);fKe=r(ejr,"RobertaTokenizerFast"),ejr.forEach(t),mKe=r(D8," (RoBERTa model)"),D8.forEach(t),gKe=i(y),Rs=n(y,"LI",{});var q8=s(Rs);JJ=n(q8,"STRONG",{});var ojr=s(JJ);hKe=r(ojr,"roformer"),ojr.forEach(t),pKe=r(q8," \u2014 "),Dk=n(q8,"A",{href:!0});var rjr=s(Dk);_Ke=r(rjr,"RoFormerTokenizer"),rjr.forEach(t),uKe=r(q8," or "),qk=n(q8,"A",{href:!0});var tjr=s(qk);bKe=r(tjr,"RoFormerTokenizerFast"),tjr.forEach(t),vKe=r(q8," (RoFormer model)"),q8.forEach(t),TKe=i(y),oh=n(y,"LI",{});var VTe=s(oh);YJ=n(VTe,"STRONG",{});var ajr=s(YJ);FKe=r(ajr,"speech_to_text"),ajr.forEach(t),CKe=r(VTe," \u2014 "),Gk=n(VTe,"A",{href:!0});var njr=s(Gk);MKe=r(njr,"Speech2TextTokenizer"),njr.forEach(t),EKe=r(VTe," (Speech2Text model)"),VTe.forEach(t),yKe=i(y),rh=n(y,"LI",{});var zTe=s(rh);KJ=n(zTe,"STRONG",{});var sjr=s(KJ);wKe=r(sjr,"speech_to_text_2"),sjr.forEach(t),AKe=r(zTe," \u2014 "),Ok=n(zTe,"A",{href:!0});var ljr=s(Ok);LKe=r(ljr,"Speech2Text2Tokenizer"),ljr.forEach(t),BKe=r(zTe," (Speech2Text2 model)"),zTe.forEach(t),xKe=i(y),Ss=n(y,"LI",{});var G8=s(Ss);ZJ=n(G8,"STRONG",{});var ijr=s(ZJ);kKe=r(ijr,"splinter"),ijr.forEach(t),RKe=r(G8," \u2014 "),Xk=n(G8,"A",{href:!0});var djr=s(Xk);SKe=r(djr,"SplinterTokenizer"),djr.forEach(t),PKe=r(G8," or "),Vk=n(G8,"A",{href:!0});var cjr=s(Vk);$Ke=r(cjr,"SplinterTokenizerFast"),cjr.forEach(t),IKe=r(G8," (Splinter model)"),G8.forEach(t),NKe=i(y),Ps=n(y,"LI",{});var O8=s(Ps);eY=n(O8,"STRONG",{});var fjr=s(eY);jKe=r(fjr,"squeezebert"),fjr.forEach(t),DKe=r(O8," \u2014 "),zk=n(O8,"A",{href:!0});var mjr=s(zk);qKe=r(mjr,"SqueezeBertTokenizer"),mjr.forEach(t),GKe=r(O8," or "),Wk=n(O8,"A",{href:!0});var gjr=s(Wk);OKe=r(gjr,"SqueezeBertTokenizerFast"),gjr.forEach(t),XKe=r(O8," (SqueezeBERT model)"),O8.forEach(t),VKe=i(y),$s=n(y,"LI",{});var X8=s($s);oY=n(X8,"STRONG",{});var hjr=s(oY);zKe=r(hjr,"t5"),hjr.forEach(t),WKe=r(X8," \u2014 "),Qk=n(X8,"A",{href:!0});var pjr=s(Qk);QKe=r(pjr,"T5Tokenizer"),pjr.forEach(t),HKe=r(X8," or "),Hk=n(X8,"A",{href:!0});var _jr=s(Hk);UKe=r(_jr,"T5TokenizerFast"),_jr.forEach(t),JKe=r(X8," (T5 model)"),X8.forEach(t),YKe=i(y),th=n(y,"LI",{});var WTe=s(th);rY=n(WTe,"STRONG",{});var ujr=s(rY);KKe=r(ujr,"tapas"),ujr.forEach(t),ZKe=r(WTe," \u2014 "),Uk=n(WTe,"A",{href:!0});var bjr=s(Uk);eZe=r(bjr,"TapasTokenizer"),bjr.forEach(t),oZe=r(WTe," (TAPAS model)"),WTe.forEach(t),rZe=i(y),ah=n(y,"LI",{});var QTe=s(ah);tY=n(QTe,"STRONG",{});var vjr=s(tY);tZe=r(vjr,"transfo-xl"),vjr.forEach(t),aZe=r(QTe," \u2014 "),Jk=n(QTe,"A",{href:!0});var Tjr=s(Jk);nZe=r(Tjr,"TransfoXLTokenizer"),Tjr.forEach(t),sZe=r(QTe," (Transformer-XL model)"),QTe.forEach(t),lZe=i(y),nh=n(y,"LI",{});var HTe=s(nh);aY=n(HTe,"STRONG",{});var Fjr=s(aY);iZe=r(Fjr,"wav2vec2"),Fjr.forEach(t),dZe=r(HTe," \u2014 "),Yk=n(HTe,"A",{href:!0});var Cjr=s(Yk);cZe=r(Cjr,"Wav2Vec2CTCTokenizer"),Cjr.forEach(t),fZe=r(HTe," (Wav2Vec2 model)"),HTe.forEach(t),mZe=i(y),sh=n(y,"LI",{});var UTe=s(sh);nY=n(UTe,"STRONG",{});var Mjr=s(nY);gZe=r(Mjr,"wav2vec2_phoneme"),Mjr.forEach(t),hZe=r(UTe," \u2014 "),Kk=n(UTe,"A",{href:!0});var Ejr=s(Kk);pZe=r(Ejr,"Wav2Vec2PhonemeCTCTokenizer"),Ejr.forEach(t),_Ze=r(UTe," (Wav2Vec2Phoneme model)"),UTe.forEach(t),uZe=i(y),Is=n(y,"LI",{});var V8=s(Is);sY=n(V8,"STRONG",{});var yjr=s(sY);bZe=r(yjr,"xglm"),yjr.forEach(t),vZe=r(V8," \u2014 "),Zk=n(V8,"A",{href:!0});var wjr=s(Zk);TZe=r(wjr,"XGLMTokenizer"),wjr.forEach(t),FZe=r(V8," or "),eR=n(V8,"A",{href:!0});var Ajr=s(eR);CZe=r(Ajr,"XGLMTokenizerFast"),Ajr.forEach(t),MZe=r(V8," (XGLM model)"),V8.forEach(t),EZe=i(y),lh=n(y,"LI",{});var JTe=s(lh);lY=n(JTe,"STRONG",{});var Ljr=s(lY);yZe=r(Ljr,"xlm"),Ljr.forEach(t),wZe=r(JTe," \u2014 "),oR=n(JTe,"A",{href:!0});var Bjr=s(oR);AZe=r(Bjr,"XLMTokenizer"),Bjr.forEach(t),LZe=r(JTe," (XLM model)"),JTe.forEach(t),BZe=i(y),ih=n(y,"LI",{});var YTe=s(ih);iY=n(YTe,"STRONG",{});var xjr=s(iY);xZe=r(xjr,"xlm-prophetnet"),xjr.forEach(t),kZe=r(YTe," \u2014 "),rR=n(YTe,"A",{href:!0});var kjr=s(rR);RZe=r(kjr,"XLMProphetNetTokenizer"),kjr.forEach(t),SZe=r(YTe," (XLMProphetNet model)"),YTe.forEach(t),PZe=i(y),Ns=n(y,"LI",{});var z8=s(Ns);dY=n(z8,"STRONG",{});var Rjr=s(dY);$Ze=r(Rjr,"xlm-roberta"),Rjr.forEach(t),IZe=r(z8," \u2014 "),tR=n(z8,"A",{href:!0});var Sjr=s(tR);NZe=r(Sjr,"XLMRobertaTokenizer"),Sjr.forEach(t),jZe=r(z8," or "),aR=n(z8,"A",{href:!0});var Pjr=s(aR);DZe=r(Pjr,"XLMRobertaTokenizerFast"),Pjr.forEach(t),qZe=r(z8," (XLM-RoBERTa model)"),z8.forEach(t),GZe=i(y),js=n(y,"LI",{});var W8=s(js);cY=n(W8,"STRONG",{});var $jr=s(cY);OZe=r($jr,"xlnet"),$jr.forEach(t),XZe=r(W8," \u2014 "),nR=n(W8,"A",{href:!0});var Ijr=s(nR);VZe=r(Ijr,"XLNetTokenizer"),Ijr.forEach(t),zZe=r(W8," or "),sR=n(W8,"A",{href:!0});var Njr=s(sR);WZe=r(Njr,"XLNetTokenizerFast"),Njr.forEach(t),QZe=r(W8," (XLNet model)"),W8.forEach(t),y.forEach(t),HZe=i(ha),fY=n(ha,"P",{});var jjr=s(fY);UZe=r(jjr,"Examples:"),jjr.forEach(t),JZe=i(ha),m(FE.$$.fragment,ha),ha.forEach(t),YZe=i(Xs),dh=n(Xs,"DIV",{class:!0});var nSe=s(dh);m(CE.$$.fragment,nSe),KZe=i(nSe),mY=n(nSe,"P",{});var Djr=s(mY);ZZe=r(Djr,"Register a new tokenizer in this mapping."),Djr.forEach(t),nSe.forEach(t),Xs.forEach(t),oke=i(c),Hi=n(c,"H2",{class:!0});var sSe=s(Hi);ch=n(sSe,"A",{id:!0,class:!0,href:!0});var qjr=s(ch);gY=n(qjr,"SPAN",{});var Gjr=s(gY);m(ME.$$.fragment,Gjr),Gjr.forEach(t),qjr.forEach(t),eeo=i(sSe),hY=n(sSe,"SPAN",{});var Ojr=s(hY);oeo=r(Ojr,"AutoFeatureExtractor"),Ojr.forEach(t),sSe.forEach(t),rke=i(c),Ho=n(c,"DIV",{class:!0});var Vs=s(Ho);m(EE.$$.fragment,Vs),reo=i(Vs),yE=n(Vs,"P",{});var lSe=s(yE);teo=r(lSe,`This is a generic feature extractor class that will be instantiated as one of the feature extractor classes of the
library when created with the `),lR=n(lSe,"A",{href:!0});var Xjr=s(lR);aeo=r(Xjr,"AutoFeatureExtractor.from_pretrained()"),Xjr.forEach(t),neo=r(lSe," class method."),lSe.forEach(t),seo=i(Vs),wE=n(Vs,"P",{});var iSe=s(wE);leo=r(iSe,"This class cannot be instantiated directly using "),pY=n(iSe,"CODE",{});var Vjr=s(pY);ieo=r(Vjr,"__init__()"),Vjr.forEach(t),deo=r(iSe," (throws an error)."),iSe.forEach(t),ceo=i(Vs),Ie=n(Vs,"DIV",{class:!0});var jt=s(Ie);m(AE.$$.fragment,jt),feo=i(jt),_Y=n(jt,"P",{});var zjr=s(_Y);meo=r(zjr,"Instantiate one of the feature extractor classes of the library from a pretrained model vocabulary."),zjr.forEach(t),geo=i(jt),Xa=n(jt,"P",{});var sM=s(Xa);heo=r(sM,"The feature extractor class to instantiate is selected based on the "),uY=n(sM,"CODE",{});var Wjr=s(uY);peo=r(Wjr,"model_type"),Wjr.forEach(t),_eo=r(sM,` property of the config object
(either passed as an argument or loaded from `),bY=n(sM,"CODE",{});var Qjr=s(bY);ueo=r(Qjr,"pretrained_model_name_or_path"),Qjr.forEach(t),beo=r(sM,` if possible), or when it\u2019s
missing, by falling back to using pattern matching on `),vY=n(sM,"CODE",{});var Hjr=s(vY);veo=r(Hjr,"pretrained_model_name_or_path"),Hjr.forEach(t),Teo=r(sM,":"),sM.forEach(t),Feo=i(jt),re=n(jt,"UL",{});var ne=s(re);fh=n(ne,"LI",{});var KTe=s(fh);TY=n(KTe,"STRONG",{});var Ujr=s(TY);Ceo=r(Ujr,"beit"),Ujr.forEach(t),Meo=r(KTe," \u2014 "),iR=n(KTe,"A",{href:!0});var Jjr=s(iR);Eeo=r(Jjr,"BeitFeatureExtractor"),Jjr.forEach(t),yeo=r(KTe," (BEiT model)"),KTe.forEach(t),weo=i(ne),mh=n(ne,"LI",{});var ZTe=s(mh);FY=n(ZTe,"STRONG",{});var Yjr=s(FY);Aeo=r(Yjr,"clip"),Yjr.forEach(t),Leo=r(ZTe," \u2014 "),dR=n(ZTe,"A",{href:!0});var Kjr=s(dR);Beo=r(Kjr,"CLIPFeatureExtractor"),Kjr.forEach(t),xeo=r(ZTe," (CLIP model)"),ZTe.forEach(t),keo=i(ne),gh=n(ne,"LI",{});var eFe=s(gh);CY=n(eFe,"STRONG",{});var Zjr=s(CY);Reo=r(Zjr,"convnext"),Zjr.forEach(t),Seo=r(eFe," \u2014 "),cR=n(eFe,"A",{href:!0});var eDr=s(cR);Peo=r(eDr,"ConvNextFeatureExtractor"),eDr.forEach(t),$eo=r(eFe," (ConvNext model)"),eFe.forEach(t),Ieo=i(ne),hh=n(ne,"LI",{});var oFe=s(hh);MY=n(oFe,"STRONG",{});var oDr=s(MY);Neo=r(oDr,"deit"),oDr.forEach(t),jeo=r(oFe," \u2014 "),fR=n(oFe,"A",{href:!0});var rDr=s(fR);Deo=r(rDr,"DeiTFeatureExtractor"),rDr.forEach(t),qeo=r(oFe," (DeiT model)"),oFe.forEach(t),Geo=i(ne),ph=n(ne,"LI",{});var rFe=s(ph);EY=n(rFe,"STRONG",{});var tDr=s(EY);Oeo=r(tDr,"detr"),tDr.forEach(t),Xeo=r(rFe," \u2014 "),mR=n(rFe,"A",{href:!0});var aDr=s(mR);Veo=r(aDr,"DetrFeatureExtractor"),aDr.forEach(t),zeo=r(rFe," (DETR model)"),rFe.forEach(t),Weo=i(ne),_h=n(ne,"LI",{});var tFe=s(_h);yY=n(tFe,"STRONG",{});var nDr=s(yY);Qeo=r(nDr,"hubert"),nDr.forEach(t),Heo=r(tFe," \u2014 "),gR=n(tFe,"A",{href:!0});var sDr=s(gR);Ueo=r(sDr,"Wav2Vec2FeatureExtractor"),sDr.forEach(t),Jeo=r(tFe," (Hubert model)"),tFe.forEach(t),Yeo=i(ne),uh=n(ne,"LI",{});var aFe=s(uh);wY=n(aFe,"STRONG",{});var lDr=s(wY);Keo=r(lDr,"layoutlmv2"),lDr.forEach(t),Zeo=r(aFe," \u2014 "),hR=n(aFe,"A",{href:!0});var iDr=s(hR);eoo=r(iDr,"LayoutLMv2FeatureExtractor"),iDr.forEach(t),ooo=r(aFe," (LayoutLMv2 model)"),aFe.forEach(t),roo=i(ne),bh=n(ne,"LI",{});var nFe=s(bh);AY=n(nFe,"STRONG",{});var dDr=s(AY);too=r(dDr,"maskformer"),dDr.forEach(t),aoo=r(nFe," \u2014 "),pR=n(nFe,"A",{href:!0});var cDr=s(pR);noo=r(cDr,"MaskFormerFeatureExtractor"),cDr.forEach(t),soo=r(nFe," (MaskFormer model)"),nFe.forEach(t),loo=i(ne),vh=n(ne,"LI",{});var sFe=s(vh);LY=n(sFe,"STRONG",{});var fDr=s(LY);ioo=r(fDr,"perceiver"),fDr.forEach(t),doo=r(sFe," \u2014 "),_R=n(sFe,"A",{href:!0});var mDr=s(_R);coo=r(mDr,"PerceiverFeatureExtractor"),mDr.forEach(t),foo=r(sFe," (Perceiver model)"),sFe.forEach(t),moo=i(ne),Th=n(ne,"LI",{});var lFe=s(Th);BY=n(lFe,"STRONG",{});var gDr=s(BY);goo=r(gDr,"poolformer"),gDr.forEach(t),hoo=r(lFe," \u2014 "),uR=n(lFe,"A",{href:!0});var hDr=s(uR);poo=r(hDr,"PoolFormerFeatureExtractor"),hDr.forEach(t),_oo=r(lFe," (PoolFormer model)"),lFe.forEach(t),uoo=i(ne),Fh=n(ne,"LI",{});var iFe=s(Fh);xY=n(iFe,"STRONG",{});var pDr=s(xY);boo=r(pDr,"resnet"),pDr.forEach(t),voo=r(iFe," \u2014 "),bR=n(iFe,"A",{href:!0});var _Dr=s(bR);Too=r(_Dr,"ConvNextFeatureExtractor"),_Dr.forEach(t),Foo=r(iFe," (ResNet model)"),iFe.forEach(t),Coo=i(ne),Ch=n(ne,"LI",{});var dFe=s(Ch);kY=n(dFe,"STRONG",{});var uDr=s(kY);Moo=r(uDr,"segformer"),uDr.forEach(t),Eoo=r(dFe," \u2014 "),vR=n(dFe,"A",{href:!0});var bDr=s(vR);yoo=r(bDr,"SegformerFeatureExtractor"),bDr.forEach(t),woo=r(dFe," (SegFormer model)"),dFe.forEach(t),Aoo=i(ne),Mh=n(ne,"LI",{});var cFe=s(Mh);RY=n(cFe,"STRONG",{});var vDr=s(RY);Loo=r(vDr,"speech_to_text"),vDr.forEach(t),Boo=r(cFe," \u2014 "),TR=n(cFe,"A",{href:!0});var TDr=s(TR);xoo=r(TDr,"Speech2TextFeatureExtractor"),TDr.forEach(t),koo=r(cFe," (Speech2Text model)"),cFe.forEach(t),Roo=i(ne),Eh=n(ne,"LI",{});var fFe=s(Eh);SY=n(fFe,"STRONG",{});var FDr=s(SY);Soo=r(FDr,"swin"),FDr.forEach(t),Poo=r(fFe," \u2014 "),FR=n(fFe,"A",{href:!0});var CDr=s(FR);$oo=r(CDr,"ViTFeatureExtractor"),CDr.forEach(t),Ioo=r(fFe," (Swin model)"),fFe.forEach(t),Noo=i(ne),yh=n(ne,"LI",{});var mFe=s(yh);PY=n(mFe,"STRONG",{});var MDr=s(PY);joo=r(MDr,"van"),MDr.forEach(t),Doo=r(mFe," \u2014 "),CR=n(mFe,"A",{href:!0});var EDr=s(CR);qoo=r(EDr,"ConvNextFeatureExtractor"),EDr.forEach(t),Goo=r(mFe," (VAN model)"),mFe.forEach(t),Ooo=i(ne),wh=n(ne,"LI",{});var gFe=s(wh);$Y=n(gFe,"STRONG",{});var yDr=s($Y);Xoo=r(yDr,"vit"),yDr.forEach(t),Voo=r(gFe," \u2014 "),MR=n(gFe,"A",{href:!0});var wDr=s(MR);zoo=r(wDr,"ViTFeatureExtractor"),wDr.forEach(t),Woo=r(gFe," (ViT model)"),gFe.forEach(t),Qoo=i(ne),Ah=n(ne,"LI",{});var hFe=s(Ah);IY=n(hFe,"STRONG",{});var ADr=s(IY);Hoo=r(ADr,"vit_mae"),ADr.forEach(t),Uoo=r(hFe," \u2014 "),ER=n(hFe,"A",{href:!0});var LDr=s(ER);Joo=r(LDr,"ViTFeatureExtractor"),LDr.forEach(t),Yoo=r(hFe," (ViTMAE model)"),hFe.forEach(t),Koo=i(ne),Lh=n(ne,"LI",{});var pFe=s(Lh);NY=n(pFe,"STRONG",{});var BDr=s(NY);Zoo=r(BDr,"wav2vec2"),BDr.forEach(t),ero=r(pFe," \u2014 "),yR=n(pFe,"A",{href:!0});var xDr=s(yR);oro=r(xDr,"Wav2Vec2FeatureExtractor"),xDr.forEach(t),rro=r(pFe," (Wav2Vec2 model)"),pFe.forEach(t),ne.forEach(t),tro=i(jt),m(Bh.$$.fragment,jt),aro=i(jt),jY=n(jt,"P",{});var kDr=s(jY);nro=r(kDr,"Examples:"),kDr.forEach(t),sro=i(jt),m(LE.$$.fragment,jt),jt.forEach(t),lro=i(Vs),xh=n(Vs,"DIV",{class:!0});var dSe=s(xh);m(BE.$$.fragment,dSe),iro=i(dSe),DY=n(dSe,"P",{});var RDr=s(DY);dro=r(RDr,"Register a new feature extractor for this class."),RDr.forEach(t),dSe.forEach(t),Vs.forEach(t),tke=i(c),Ui=n(c,"H2",{class:!0});var cSe=s(Ui);kh=n(cSe,"A",{id:!0,class:!0,href:!0});var SDr=s(kh);qY=n(SDr,"SPAN",{});var PDr=s(qY);m(xE.$$.fragment,PDr),PDr.forEach(t),SDr.forEach(t),cro=i(cSe),GY=n(cSe,"SPAN",{});var $Dr=s(GY);fro=r($Dr,"AutoProcessor"),$Dr.forEach(t),cSe.forEach(t),ake=i(c),Uo=n(c,"DIV",{class:!0});var zs=s(Uo);m(kE.$$.fragment,zs),mro=i(zs),RE=n(zs,"P",{});var fSe=s(RE);gro=r(fSe,`This is a generic processor class that will be instantiated as one of the processor classes of the library when
created with the `),wR=n(fSe,"A",{href:!0});var IDr=s(wR);hro=r(IDr,"AutoProcessor.from_pretrained()"),IDr.forEach(t),pro=r(fSe," class method."),fSe.forEach(t),_ro=i(zs),SE=n(zs,"P",{});var mSe=s(SE);uro=r(mSe,"This class cannot be instantiated directly using "),OY=n(mSe,"CODE",{});var NDr=s(OY);bro=r(NDr,"__init__()"),NDr.forEach(t),vro=r(mSe," (throws an error)."),mSe.forEach(t),Tro=i(zs),Ne=n(zs,"DIV",{class:!0});var Dt=s(Ne);m(PE.$$.fragment,Dt),Fro=i(Dt),XY=n(Dt,"P",{});var jDr=s(XY);Cro=r(jDr,"Instantiate one of the processor classes of the library from a pretrained model vocabulary."),jDr.forEach(t),Mro=i(Dt),Ji=n(Dt,"P",{});var Vz=s(Ji);Ero=r(Vz,"The processor class to instantiate is selected based on the "),VY=n(Vz,"CODE",{});var DDr=s(VY);yro=r(DDr,"model_type"),DDr.forEach(t),wro=r(Vz,` property of the config object (either
passed as an argument or loaded from `),zY=n(Vz,"CODE",{});var qDr=s(zY);Aro=r(qDr,"pretrained_model_name_or_path"),qDr.forEach(t),Lro=r(Vz," if possible):"),Vz.forEach(t),Bro=i(Dt),xe=n(Dt,"UL",{});var Do=s(xe);Rh=n(Do,"LI",{});var _Fe=s(Rh);WY=n(_Fe,"STRONG",{});var GDr=s(WY);xro=r(GDr,"clip"),GDr.forEach(t),kro=r(_Fe," \u2014 "),AR=n(_Fe,"A",{href:!0});var ODr=s(AR);Rro=r(ODr,"CLIPProcessor"),ODr.forEach(t),Sro=r(_Fe," (CLIP model)"),_Fe.forEach(t),Pro=i(Do),Sh=n(Do,"LI",{});var uFe=s(Sh);QY=n(uFe,"STRONG",{});var XDr=s(QY);$ro=r(XDr,"layoutlmv2"),XDr.forEach(t),Iro=r(uFe," \u2014 "),LR=n(uFe,"A",{href:!0});var VDr=s(LR);Nro=r(VDr,"LayoutLMv2Processor"),VDr.forEach(t),jro=r(uFe," (LayoutLMv2 model)"),uFe.forEach(t),Dro=i(Do),Ph=n(Do,"LI",{});var bFe=s(Ph);HY=n(bFe,"STRONG",{});var zDr=s(HY);qro=r(zDr,"layoutxlm"),zDr.forEach(t),Gro=r(bFe," \u2014 "),BR=n(bFe,"A",{href:!0});var WDr=s(BR);Oro=r(WDr,"LayoutXLMProcessor"),WDr.forEach(t),Xro=r(bFe," (LayoutXLM model)"),bFe.forEach(t),Vro=i(Do),$h=n(Do,"LI",{});var vFe=s($h);UY=n(vFe,"STRONG",{});var QDr=s(UY);zro=r(QDr,"speech_to_text"),QDr.forEach(t),Wro=r(vFe," \u2014 "),xR=n(vFe,"A",{href:!0});var HDr=s(xR);Qro=r(HDr,"Speech2TextProcessor"),HDr.forEach(t),Hro=r(vFe," (Speech2Text model)"),vFe.forEach(t),Uro=i(Do),Ih=n(Do,"LI",{});var TFe=s(Ih);JY=n(TFe,"STRONG",{});var UDr=s(JY);Jro=r(UDr,"speech_to_text_2"),UDr.forEach(t),Yro=r(TFe," \u2014 "),kR=n(TFe,"A",{href:!0});var JDr=s(kR);Kro=r(JDr,"Speech2Text2Processor"),JDr.forEach(t),Zro=r(TFe," (Speech2Text2 model)"),TFe.forEach(t),eto=i(Do),Nh=n(Do,"LI",{});var FFe=s(Nh);YY=n(FFe,"STRONG",{});var YDr=s(YY);oto=r(YDr,"trocr"),YDr.forEach(t),rto=r(FFe," \u2014 "),RR=n(FFe,"A",{href:!0});var KDr=s(RR);tto=r(KDr,"TrOCRProcessor"),KDr.forEach(t),ato=r(FFe," (TrOCR model)"),FFe.forEach(t),nto=i(Do),jh=n(Do,"LI",{});var CFe=s(jh);KY=n(CFe,"STRONG",{});var ZDr=s(KY);sto=r(ZDr,"vision-text-dual-encoder"),ZDr.forEach(t),lto=r(CFe," \u2014 "),SR=n(CFe,"A",{href:!0});var eqr=s(SR);ito=r(eqr,"VisionTextDualEncoderProcessor"),eqr.forEach(t),dto=r(CFe," (VisionTextDualEncoder model)"),CFe.forEach(t),cto=i(Do),Dh=n(Do,"LI",{});var MFe=s(Dh);ZY=n(MFe,"STRONG",{});var oqr=s(ZY);fto=r(oqr,"wav2vec2"),oqr.forEach(t),mto=r(MFe," \u2014 "),PR=n(MFe,"A",{href:!0});var rqr=s(PR);gto=r(rqr,"Wav2Vec2Processor"),rqr.forEach(t),hto=r(MFe," (Wav2Vec2 model)"),MFe.forEach(t),Do.forEach(t),pto=i(Dt),m(qh.$$.fragment,Dt),_to=i(Dt),eK=n(Dt,"P",{});var tqr=s(eK);uto=r(tqr,"Examples:"),tqr.forEach(t),bto=i(Dt),m($E.$$.fragment,Dt),Dt.forEach(t),vto=i(zs),Gh=n(zs,"DIV",{class:!0});var gSe=s(Gh);m(IE.$$.fragment,gSe),Tto=i(gSe),oK=n(gSe,"P",{});var aqr=s(oK);Fto=r(aqr,"Register a new processor for this class."),aqr.forEach(t),gSe.forEach(t),zs.forEach(t),nke=i(c),Yi=n(c,"H2",{class:!0});var hSe=s(Yi);Oh=n(hSe,"A",{id:!0,class:!0,href:!0});var nqr=s(Oh);rK=n(nqr,"SPAN",{});var sqr=s(rK);m(NE.$$.fragment,sqr),sqr.forEach(t),nqr.forEach(t),Cto=i(hSe),tK=n(hSe,"SPAN",{});var lqr=s(tK);Mto=r(lqr,"AutoModel"),lqr.forEach(t),hSe.forEach(t),ske=i(c),Jo=n(c,"DIV",{class:!0});var Ws=s(Jo);m(jE.$$.fragment,Ws),Eto=i(Ws),Ki=n(Ws,"P",{});var zz=s(Ki);yto=r(zz,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),aK=n(zz,"CODE",{});var iqr=s(aK);wto=r(iqr,"from_pretrained()"),iqr.forEach(t),Ato=r(zz,"class method or the "),nK=n(zz,"CODE",{});var dqr=s(nK);Lto=r(dqr,"from_config()"),dqr.forEach(t),Bto=r(zz,`class
method.`),zz.forEach(t),xto=i(Ws),DE=n(Ws,"P",{});var pSe=s(DE);kto=r(pSe,"This class cannot be instantiated directly using "),sK=n(pSe,"CODE",{});var cqr=s(sK);Rto=r(cqr,"__init__()"),cqr.forEach(t),Sto=r(pSe," (throws an error)."),pSe.forEach(t),Pto=i(Ws),Vr=n(Ws,"DIV",{class:!0});var Qs=s(Vr);m(qE.$$.fragment,Qs),$to=i(Qs),lK=n(Qs,"P",{});var fqr=s(lK);Ito=r(fqr,"Instantiates one of the base model classes of the library from a configuration."),fqr.forEach(t),Nto=i(Qs),Zi=n(Qs,"P",{});var Wz=s(Zi);jto=r(Wz,`Note:
Loading a model from its configuration file does `),iK=n(Wz,"STRONG",{});var mqr=s(iK);Dto=r(mqr,"not"),mqr.forEach(t),qto=r(Wz,` load the model weights. It only affects the
model\u2019s configuration. Use `),dK=n(Wz,"CODE",{});var gqr=s(dK);Gto=r(gqr,"from_pretrained()"),gqr.forEach(t),Oto=r(Wz,"to load the model weights."),Wz.forEach(t),Xto=i(Qs),cK=n(Qs,"P",{});var hqr=s(cK);Vto=r(hqr,"Examples:"),hqr.forEach(t),zto=i(Qs),m(GE.$$.fragment,Qs),Qs.forEach(t),Wto=i(Ws),je=n(Ws,"DIV",{class:!0});var qt=s(je);m(OE.$$.fragment,qt),Qto=i(qt),fK=n(qt,"P",{});var pqr=s(fK);Hto=r(pqr,"Instantiate one of the base model classes of the library from a pretrained model."),pqr.forEach(t),Uto=i(qt),Va=n(qt,"P",{});var lM=s(Va);Jto=r(lM,"The model class to instantiate is selected based on the "),mK=n(lM,"CODE",{});var _qr=s(mK);Yto=r(_qr,"model_type"),_qr.forEach(t),Kto=r(lM,` property of the config object (either
passed as an argument or loaded from `),gK=n(lM,"CODE",{});var uqr=s(gK);Zto=r(uqr,"pretrained_model_name_or_path"),uqr.forEach(t),eao=r(lM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),hK=n(lM,"CODE",{});var bqr=s(hK);oao=r(bqr,"pretrained_model_name_or_path"),bqr.forEach(t),rao=r(lM,":"),lM.forEach(t),tao=i(qt),F=n(qt,"UL",{});var C=s(F);Xh=n(C,"LI",{});var EFe=s(Xh);pK=n(EFe,"STRONG",{});var vqr=s(pK);aao=r(vqr,"albert"),vqr.forEach(t),nao=r(EFe," \u2014 "),$R=n(EFe,"A",{href:!0});var Tqr=s($R);sao=r(Tqr,"AlbertModel"),Tqr.forEach(t),lao=r(EFe," (ALBERT model)"),EFe.forEach(t),iao=i(C),Vh=n(C,"LI",{});var yFe=s(Vh);_K=n(yFe,"STRONG",{});var Fqr=s(_K);dao=r(Fqr,"bart"),Fqr.forEach(t),cao=r(yFe," \u2014 "),IR=n(yFe,"A",{href:!0});var Cqr=s(IR);fao=r(Cqr,"BartModel"),Cqr.forEach(t),mao=r(yFe," (BART model)"),yFe.forEach(t),gao=i(C),zh=n(C,"LI",{});var wFe=s(zh);uK=n(wFe,"STRONG",{});var Mqr=s(uK);hao=r(Mqr,"beit"),Mqr.forEach(t),pao=r(wFe," \u2014 "),NR=n(wFe,"A",{href:!0});var Eqr=s(NR);_ao=r(Eqr,"BeitModel"),Eqr.forEach(t),uao=r(wFe," (BEiT model)"),wFe.forEach(t),bao=i(C),Wh=n(C,"LI",{});var AFe=s(Wh);bK=n(AFe,"STRONG",{});var yqr=s(bK);vao=r(yqr,"bert"),yqr.forEach(t),Tao=r(AFe," \u2014 "),jR=n(AFe,"A",{href:!0});var wqr=s(jR);Fao=r(wqr,"BertModel"),wqr.forEach(t),Cao=r(AFe," (BERT model)"),AFe.forEach(t),Mao=i(C),Qh=n(C,"LI",{});var LFe=s(Qh);vK=n(LFe,"STRONG",{});var Aqr=s(vK);Eao=r(Aqr,"bert-generation"),Aqr.forEach(t),yao=r(LFe," \u2014 "),DR=n(LFe,"A",{href:!0});var Lqr=s(DR);wao=r(Lqr,"BertGenerationEncoder"),Lqr.forEach(t),Aao=r(LFe," (Bert Generation model)"),LFe.forEach(t),Lao=i(C),Hh=n(C,"LI",{});var BFe=s(Hh);TK=n(BFe,"STRONG",{});var Bqr=s(TK);Bao=r(Bqr,"big_bird"),Bqr.forEach(t),xao=r(BFe," \u2014 "),qR=n(BFe,"A",{href:!0});var xqr=s(qR);kao=r(xqr,"BigBirdModel"),xqr.forEach(t),Rao=r(BFe," (BigBird model)"),BFe.forEach(t),Sao=i(C),Uh=n(C,"LI",{});var xFe=s(Uh);FK=n(xFe,"STRONG",{});var kqr=s(FK);Pao=r(kqr,"bigbird_pegasus"),kqr.forEach(t),$ao=r(xFe," \u2014 "),GR=n(xFe,"A",{href:!0});var Rqr=s(GR);Iao=r(Rqr,"BigBirdPegasusModel"),Rqr.forEach(t),Nao=r(xFe," (BigBirdPegasus model)"),xFe.forEach(t),jao=i(C),Jh=n(C,"LI",{});var kFe=s(Jh);CK=n(kFe,"STRONG",{});var Sqr=s(CK);Dao=r(Sqr,"blenderbot"),Sqr.forEach(t),qao=r(kFe," \u2014 "),OR=n(kFe,"A",{href:!0});var Pqr=s(OR);Gao=r(Pqr,"BlenderbotModel"),Pqr.forEach(t),Oao=r(kFe," (Blenderbot model)"),kFe.forEach(t),Xao=i(C),Yh=n(C,"LI",{});var RFe=s(Yh);MK=n(RFe,"STRONG",{});var $qr=s(MK);Vao=r($qr,"blenderbot-small"),$qr.forEach(t),zao=r(RFe," \u2014 "),XR=n(RFe,"A",{href:!0});var Iqr=s(XR);Wao=r(Iqr,"BlenderbotSmallModel"),Iqr.forEach(t),Qao=r(RFe," (BlenderbotSmall model)"),RFe.forEach(t),Hao=i(C),Kh=n(C,"LI",{});var SFe=s(Kh);EK=n(SFe,"STRONG",{});var Nqr=s(EK);Uao=r(Nqr,"camembert"),Nqr.forEach(t),Jao=r(SFe," \u2014 "),VR=n(SFe,"A",{href:!0});var jqr=s(VR);Yao=r(jqr,"CamembertModel"),jqr.forEach(t),Kao=r(SFe," (CamemBERT model)"),SFe.forEach(t),Zao=i(C),Zh=n(C,"LI",{});var PFe=s(Zh);yK=n(PFe,"STRONG",{});var Dqr=s(yK);eno=r(Dqr,"canine"),Dqr.forEach(t),ono=r(PFe," \u2014 "),zR=n(PFe,"A",{href:!0});var qqr=s(zR);rno=r(qqr,"CanineModel"),qqr.forEach(t),tno=r(PFe," (Canine model)"),PFe.forEach(t),ano=i(C),ep=n(C,"LI",{});var $Fe=s(ep);wK=n($Fe,"STRONG",{});var Gqr=s(wK);nno=r(Gqr,"clip"),Gqr.forEach(t),sno=r($Fe," \u2014 "),WR=n($Fe,"A",{href:!0});var Oqr=s(WR);lno=r(Oqr,"CLIPModel"),Oqr.forEach(t),ino=r($Fe," (CLIP model)"),$Fe.forEach(t),dno=i(C),op=n(C,"LI",{});var IFe=s(op);AK=n(IFe,"STRONG",{});var Xqr=s(AK);cno=r(Xqr,"convbert"),Xqr.forEach(t),fno=r(IFe," \u2014 "),QR=n(IFe,"A",{href:!0});var Vqr=s(QR);mno=r(Vqr,"ConvBertModel"),Vqr.forEach(t),gno=r(IFe," (ConvBERT model)"),IFe.forEach(t),hno=i(C),rp=n(C,"LI",{});var NFe=s(rp);LK=n(NFe,"STRONG",{});var zqr=s(LK);pno=r(zqr,"convnext"),zqr.forEach(t),_no=r(NFe," \u2014 "),HR=n(NFe,"A",{href:!0});var Wqr=s(HR);uno=r(Wqr,"ConvNextModel"),Wqr.forEach(t),bno=r(NFe," (ConvNext model)"),NFe.forEach(t),vno=i(C),tp=n(C,"LI",{});var jFe=s(tp);BK=n(jFe,"STRONG",{});var Qqr=s(BK);Tno=r(Qqr,"ctrl"),Qqr.forEach(t),Fno=r(jFe," \u2014 "),UR=n(jFe,"A",{href:!0});var Hqr=s(UR);Cno=r(Hqr,"CTRLModel"),Hqr.forEach(t),Mno=r(jFe," (CTRL model)"),jFe.forEach(t),Eno=i(C),ap=n(C,"LI",{});var DFe=s(ap);xK=n(DFe,"STRONG",{});var Uqr=s(xK);yno=r(Uqr,"data2vec-audio"),Uqr.forEach(t),wno=r(DFe," \u2014 "),JR=n(DFe,"A",{href:!0});var Jqr=s(JR);Ano=r(Jqr,"Data2VecAudioModel"),Jqr.forEach(t),Lno=r(DFe," (Data2VecAudio model)"),DFe.forEach(t),Bno=i(C),np=n(C,"LI",{});var qFe=s(np);kK=n(qFe,"STRONG",{});var Yqr=s(kK);xno=r(Yqr,"data2vec-text"),Yqr.forEach(t),kno=r(qFe," \u2014 "),YR=n(qFe,"A",{href:!0});var Kqr=s(YR);Rno=r(Kqr,"Data2VecTextModel"),Kqr.forEach(t),Sno=r(qFe," (Data2VecText model)"),qFe.forEach(t),Pno=i(C),sp=n(C,"LI",{});var GFe=s(sp);RK=n(GFe,"STRONG",{});var Zqr=s(RK);$no=r(Zqr,"deberta"),Zqr.forEach(t),Ino=r(GFe," \u2014 "),KR=n(GFe,"A",{href:!0});var eGr=s(KR);Nno=r(eGr,"DebertaModel"),eGr.forEach(t),jno=r(GFe," (DeBERTa model)"),GFe.forEach(t),Dno=i(C),lp=n(C,"LI",{});var OFe=s(lp);SK=n(OFe,"STRONG",{});var oGr=s(SK);qno=r(oGr,"deberta-v2"),oGr.forEach(t),Gno=r(OFe," \u2014 "),ZR=n(OFe,"A",{href:!0});var rGr=s(ZR);Ono=r(rGr,"DebertaV2Model"),rGr.forEach(t),Xno=r(OFe," (DeBERTa-v2 model)"),OFe.forEach(t),Vno=i(C),ip=n(C,"LI",{});var XFe=s(ip);PK=n(XFe,"STRONG",{});var tGr=s(PK);zno=r(tGr,"deit"),tGr.forEach(t),Wno=r(XFe," \u2014 "),eS=n(XFe,"A",{href:!0});var aGr=s(eS);Qno=r(aGr,"DeiTModel"),aGr.forEach(t),Hno=r(XFe," (DeiT model)"),XFe.forEach(t),Uno=i(C),dp=n(C,"LI",{});var VFe=s(dp);$K=n(VFe,"STRONG",{});var nGr=s($K);Jno=r(nGr,"detr"),nGr.forEach(t),Yno=r(VFe," \u2014 "),oS=n(VFe,"A",{href:!0});var sGr=s(oS);Kno=r(sGr,"DetrModel"),sGr.forEach(t),Zno=r(VFe," (DETR model)"),VFe.forEach(t),eso=i(C),cp=n(C,"LI",{});var zFe=s(cp);IK=n(zFe,"STRONG",{});var lGr=s(IK);oso=r(lGr,"distilbert"),lGr.forEach(t),rso=r(zFe," \u2014 "),rS=n(zFe,"A",{href:!0});var iGr=s(rS);tso=r(iGr,"DistilBertModel"),iGr.forEach(t),aso=r(zFe," (DistilBERT model)"),zFe.forEach(t),nso=i(C),fp=n(C,"LI",{});var WFe=s(fp);NK=n(WFe,"STRONG",{});var dGr=s(NK);sso=r(dGr,"dpr"),dGr.forEach(t),lso=r(WFe," \u2014 "),tS=n(WFe,"A",{href:!0});var cGr=s(tS);iso=r(cGr,"DPRQuestionEncoder"),cGr.forEach(t),dso=r(WFe," (DPR model)"),WFe.forEach(t),cso=i(C),mp=n(C,"LI",{});var QFe=s(mp);jK=n(QFe,"STRONG",{});var fGr=s(jK);fso=r(fGr,"electra"),fGr.forEach(t),mso=r(QFe," \u2014 "),aS=n(QFe,"A",{href:!0});var mGr=s(aS);gso=r(mGr,"ElectraModel"),mGr.forEach(t),hso=r(QFe," (ELECTRA model)"),QFe.forEach(t),pso=i(C),gp=n(C,"LI",{});var HFe=s(gp);DK=n(HFe,"STRONG",{});var gGr=s(DK);_so=r(gGr,"flaubert"),gGr.forEach(t),uso=r(HFe," \u2014 "),nS=n(HFe,"A",{href:!0});var hGr=s(nS);bso=r(hGr,"FlaubertModel"),hGr.forEach(t),vso=r(HFe," (FlauBERT model)"),HFe.forEach(t),Tso=i(C),hp=n(C,"LI",{});var UFe=s(hp);qK=n(UFe,"STRONG",{});var pGr=s(qK);Fso=r(pGr,"fnet"),pGr.forEach(t),Cso=r(UFe," \u2014 "),sS=n(UFe,"A",{href:!0});var _Gr=s(sS);Mso=r(_Gr,"FNetModel"),_Gr.forEach(t),Eso=r(UFe," (FNet model)"),UFe.forEach(t),yso=i(C),pp=n(C,"LI",{});var JFe=s(pp);GK=n(JFe,"STRONG",{});var uGr=s(GK);wso=r(uGr,"fsmt"),uGr.forEach(t),Aso=r(JFe," \u2014 "),lS=n(JFe,"A",{href:!0});var bGr=s(lS);Lso=r(bGr,"FSMTModel"),bGr.forEach(t),Bso=r(JFe," (FairSeq Machine-Translation model)"),JFe.forEach(t),xso=i(C),Ds=n(C,"LI",{});var Q8=s(Ds);OK=n(Q8,"STRONG",{});var vGr=s(OK);kso=r(vGr,"funnel"),vGr.forEach(t),Rso=r(Q8," \u2014 "),iS=n(Q8,"A",{href:!0});var TGr=s(iS);Sso=r(TGr,"FunnelModel"),TGr.forEach(t),Pso=r(Q8," or "),dS=n(Q8,"A",{href:!0});var FGr=s(dS);$so=r(FGr,"FunnelBaseModel"),FGr.forEach(t),Iso=r(Q8," (Funnel Transformer model)"),Q8.forEach(t),Nso=i(C),_p=n(C,"LI",{});var YFe=s(_p);XK=n(YFe,"STRONG",{});var CGr=s(XK);jso=r(CGr,"glpn"),CGr.forEach(t),Dso=r(YFe," \u2014 "),cS=n(YFe,"A",{href:!0});var MGr=s(cS);qso=r(MGr,"GLPNModel"),MGr.forEach(t),Gso=r(YFe," (GLPN model)"),YFe.forEach(t),Oso=i(C),up=n(C,"LI",{});var KFe=s(up);VK=n(KFe,"STRONG",{});var EGr=s(VK);Xso=r(EGr,"gpt2"),EGr.forEach(t),Vso=r(KFe," \u2014 "),fS=n(KFe,"A",{href:!0});var yGr=s(fS);zso=r(yGr,"GPT2Model"),yGr.forEach(t),Wso=r(KFe," (OpenAI GPT-2 model)"),KFe.forEach(t),Qso=i(C),bp=n(C,"LI",{});var ZFe=s(bp);zK=n(ZFe,"STRONG",{});var wGr=s(zK);Hso=r(wGr,"gpt_neo"),wGr.forEach(t),Uso=r(ZFe," \u2014 "),mS=n(ZFe,"A",{href:!0});var AGr=s(mS);Jso=r(AGr,"GPTNeoModel"),AGr.forEach(t),Yso=r(ZFe," (GPT Neo model)"),ZFe.forEach(t),Kso=i(C),vp=n(C,"LI",{});var eCe=s(vp);WK=n(eCe,"STRONG",{});var LGr=s(WK);Zso=r(LGr,"gptj"),LGr.forEach(t),elo=r(eCe," \u2014 "),gS=n(eCe,"A",{href:!0});var BGr=s(gS);olo=r(BGr,"GPTJModel"),BGr.forEach(t),rlo=r(eCe," (GPT-J model)"),eCe.forEach(t),tlo=i(C),Tp=n(C,"LI",{});var oCe=s(Tp);QK=n(oCe,"STRONG",{});var xGr=s(QK);alo=r(xGr,"hubert"),xGr.forEach(t),nlo=r(oCe," \u2014 "),hS=n(oCe,"A",{href:!0});var kGr=s(hS);slo=r(kGr,"HubertModel"),kGr.forEach(t),llo=r(oCe," (Hubert model)"),oCe.forEach(t),ilo=i(C),Fp=n(C,"LI",{});var rCe=s(Fp);HK=n(rCe,"STRONG",{});var RGr=s(HK);dlo=r(RGr,"ibert"),RGr.forEach(t),clo=r(rCe," \u2014 "),pS=n(rCe,"A",{href:!0});var SGr=s(pS);flo=r(SGr,"IBertModel"),SGr.forEach(t),mlo=r(rCe," (I-BERT model)"),rCe.forEach(t),glo=i(C),Cp=n(C,"LI",{});var tCe=s(Cp);UK=n(tCe,"STRONG",{});var PGr=s(UK);hlo=r(PGr,"imagegpt"),PGr.forEach(t),plo=r(tCe," \u2014 "),_S=n(tCe,"A",{href:!0});var $Gr=s(_S);_lo=r($Gr,"ImageGPTModel"),$Gr.forEach(t),ulo=r(tCe," (ImageGPT model)"),tCe.forEach(t),blo=i(C),Mp=n(C,"LI",{});var aCe=s(Mp);JK=n(aCe,"STRONG",{});var IGr=s(JK);vlo=r(IGr,"layoutlm"),IGr.forEach(t),Tlo=r(aCe," \u2014 "),uS=n(aCe,"A",{href:!0});var NGr=s(uS);Flo=r(NGr,"LayoutLMModel"),NGr.forEach(t),Clo=r(aCe," (LayoutLM model)"),aCe.forEach(t),Mlo=i(C),Ep=n(C,"LI",{});var nCe=s(Ep);YK=n(nCe,"STRONG",{});var jGr=s(YK);Elo=r(jGr,"layoutlmv2"),jGr.forEach(t),ylo=r(nCe," \u2014 "),bS=n(nCe,"A",{href:!0});var DGr=s(bS);wlo=r(DGr,"LayoutLMv2Model"),DGr.forEach(t),Alo=r(nCe," (LayoutLMv2 model)"),nCe.forEach(t),Llo=i(C),yp=n(C,"LI",{});var sCe=s(yp);KK=n(sCe,"STRONG",{});var qGr=s(KK);Blo=r(qGr,"led"),qGr.forEach(t),xlo=r(sCe," \u2014 "),vS=n(sCe,"A",{href:!0});var GGr=s(vS);klo=r(GGr,"LEDModel"),GGr.forEach(t),Rlo=r(sCe," (LED model)"),sCe.forEach(t),Slo=i(C),wp=n(C,"LI",{});var lCe=s(wp);ZK=n(lCe,"STRONG",{});var OGr=s(ZK);Plo=r(OGr,"longformer"),OGr.forEach(t),$lo=r(lCe," \u2014 "),TS=n(lCe,"A",{href:!0});var XGr=s(TS);Ilo=r(XGr,"LongformerModel"),XGr.forEach(t),Nlo=r(lCe," (Longformer model)"),lCe.forEach(t),jlo=i(C),Ap=n(C,"LI",{});var iCe=s(Ap);eZ=n(iCe,"STRONG",{});var VGr=s(eZ);Dlo=r(VGr,"luke"),VGr.forEach(t),qlo=r(iCe," \u2014 "),FS=n(iCe,"A",{href:!0});var zGr=s(FS);Glo=r(zGr,"LukeModel"),zGr.forEach(t),Olo=r(iCe," (LUKE model)"),iCe.forEach(t),Xlo=i(C),Lp=n(C,"LI",{});var dCe=s(Lp);oZ=n(dCe,"STRONG",{});var WGr=s(oZ);Vlo=r(WGr,"lxmert"),WGr.forEach(t),zlo=r(dCe," \u2014 "),CS=n(dCe,"A",{href:!0});var QGr=s(CS);Wlo=r(QGr,"LxmertModel"),QGr.forEach(t),Qlo=r(dCe," (LXMERT model)"),dCe.forEach(t),Hlo=i(C),Bp=n(C,"LI",{});var cCe=s(Bp);rZ=n(cCe,"STRONG",{});var HGr=s(rZ);Ulo=r(HGr,"m2m_100"),HGr.forEach(t),Jlo=r(cCe," \u2014 "),MS=n(cCe,"A",{href:!0});var UGr=s(MS);Ylo=r(UGr,"M2M100Model"),UGr.forEach(t),Klo=r(cCe," (M2M100 model)"),cCe.forEach(t),Zlo=i(C),xp=n(C,"LI",{});var fCe=s(xp);tZ=n(fCe,"STRONG",{});var JGr=s(tZ);eio=r(JGr,"marian"),JGr.forEach(t),oio=r(fCe," \u2014 "),ES=n(fCe,"A",{href:!0});var YGr=s(ES);rio=r(YGr,"MarianModel"),YGr.forEach(t),tio=r(fCe," (Marian model)"),fCe.forEach(t),aio=i(C),kp=n(C,"LI",{});var mCe=s(kp);aZ=n(mCe,"STRONG",{});var KGr=s(aZ);nio=r(KGr,"maskformer"),KGr.forEach(t),sio=r(mCe," \u2014 "),yS=n(mCe,"A",{href:!0});var ZGr=s(yS);lio=r(ZGr,"MaskFormerModel"),ZGr.forEach(t),iio=r(mCe," (MaskFormer model)"),mCe.forEach(t),dio=i(C),Rp=n(C,"LI",{});var gCe=s(Rp);nZ=n(gCe,"STRONG",{});var eOr=s(nZ);cio=r(eOr,"mbart"),eOr.forEach(t),fio=r(gCe," \u2014 "),wS=n(gCe,"A",{href:!0});var oOr=s(wS);mio=r(oOr,"MBartModel"),oOr.forEach(t),gio=r(gCe," (mBART model)"),gCe.forEach(t),hio=i(C),Sp=n(C,"LI",{});var hCe=s(Sp);sZ=n(hCe,"STRONG",{});var rOr=s(sZ);pio=r(rOr,"megatron-bert"),rOr.forEach(t),_io=r(hCe," \u2014 "),AS=n(hCe,"A",{href:!0});var tOr=s(AS);uio=r(tOr,"MegatronBertModel"),tOr.forEach(t),bio=r(hCe," (MegatronBert model)"),hCe.forEach(t),vio=i(C),Pp=n(C,"LI",{});var pCe=s(Pp);lZ=n(pCe,"STRONG",{});var aOr=s(lZ);Tio=r(aOr,"mobilebert"),aOr.forEach(t),Fio=r(pCe," \u2014 "),LS=n(pCe,"A",{href:!0});var nOr=s(LS);Cio=r(nOr,"MobileBertModel"),nOr.forEach(t),Mio=r(pCe," (MobileBERT model)"),pCe.forEach(t),Eio=i(C),$p=n(C,"LI",{});var _Ce=s($p);iZ=n(_Ce,"STRONG",{});var sOr=s(iZ);yio=r(sOr,"mpnet"),sOr.forEach(t),wio=r(_Ce," \u2014 "),BS=n(_Ce,"A",{href:!0});var lOr=s(BS);Aio=r(lOr,"MPNetModel"),lOr.forEach(t),Lio=r(_Ce," (MPNet model)"),_Ce.forEach(t),Bio=i(C),Ip=n(C,"LI",{});var uCe=s(Ip);dZ=n(uCe,"STRONG",{});var iOr=s(dZ);xio=r(iOr,"mt5"),iOr.forEach(t),kio=r(uCe," \u2014 "),xS=n(uCe,"A",{href:!0});var dOr=s(xS);Rio=r(dOr,"MT5Model"),dOr.forEach(t),Sio=r(uCe," (mT5 model)"),uCe.forEach(t),Pio=i(C),Np=n(C,"LI",{});var bCe=s(Np);cZ=n(bCe,"STRONG",{});var cOr=s(cZ);$io=r(cOr,"nystromformer"),cOr.forEach(t),Iio=r(bCe," \u2014 "),kS=n(bCe,"A",{href:!0});var fOr=s(kS);Nio=r(fOr,"NystromformerModel"),fOr.forEach(t),jio=r(bCe," (Nystromformer model)"),bCe.forEach(t),Dio=i(C),jp=n(C,"LI",{});var vCe=s(jp);fZ=n(vCe,"STRONG",{});var mOr=s(fZ);qio=r(mOr,"openai-gpt"),mOr.forEach(t),Gio=r(vCe," \u2014 "),RS=n(vCe,"A",{href:!0});var gOr=s(RS);Oio=r(gOr,"OpenAIGPTModel"),gOr.forEach(t),Xio=r(vCe," (OpenAI GPT model)"),vCe.forEach(t),Vio=i(C),Dp=n(C,"LI",{});var TCe=s(Dp);mZ=n(TCe,"STRONG",{});var hOr=s(mZ);zio=r(hOr,"pegasus"),hOr.forEach(t),Wio=r(TCe," \u2014 "),SS=n(TCe,"A",{href:!0});var pOr=s(SS);Qio=r(pOr,"PegasusModel"),pOr.forEach(t),Hio=r(TCe," (Pegasus model)"),TCe.forEach(t),Uio=i(C),qp=n(C,"LI",{});var FCe=s(qp);gZ=n(FCe,"STRONG",{});var _Or=s(gZ);Jio=r(_Or,"perceiver"),_Or.forEach(t),Yio=r(FCe," \u2014 "),PS=n(FCe,"A",{href:!0});var uOr=s(PS);Kio=r(uOr,"PerceiverModel"),uOr.forEach(t),Zio=r(FCe," (Perceiver model)"),FCe.forEach(t),edo=i(C),Gp=n(C,"LI",{});var CCe=s(Gp);hZ=n(CCe,"STRONG",{});var bOr=s(hZ);odo=r(bOr,"plbart"),bOr.forEach(t),rdo=r(CCe," \u2014 "),$S=n(CCe,"A",{href:!0});var vOr=s($S);tdo=r(vOr,"PLBartModel"),vOr.forEach(t),ado=r(CCe," (PLBart model)"),CCe.forEach(t),ndo=i(C),Op=n(C,"LI",{});var MCe=s(Op);pZ=n(MCe,"STRONG",{});var TOr=s(pZ);sdo=r(TOr,"poolformer"),TOr.forEach(t),ldo=r(MCe," \u2014 "),IS=n(MCe,"A",{href:!0});var FOr=s(IS);ido=r(FOr,"PoolFormerModel"),FOr.forEach(t),ddo=r(MCe," (PoolFormer model)"),MCe.forEach(t),cdo=i(C),Xp=n(C,"LI",{});var ECe=s(Xp);_Z=n(ECe,"STRONG",{});var COr=s(_Z);fdo=r(COr,"prophetnet"),COr.forEach(t),mdo=r(ECe," \u2014 "),NS=n(ECe,"A",{href:!0});var MOr=s(NS);gdo=r(MOr,"ProphetNetModel"),MOr.forEach(t),hdo=r(ECe," (ProphetNet model)"),ECe.forEach(t),pdo=i(C),Vp=n(C,"LI",{});var yCe=s(Vp);uZ=n(yCe,"STRONG",{});var EOr=s(uZ);_do=r(EOr,"qdqbert"),EOr.forEach(t),udo=r(yCe," \u2014 "),jS=n(yCe,"A",{href:!0});var yOr=s(jS);bdo=r(yOr,"QDQBertModel"),yOr.forEach(t),vdo=r(yCe," (QDQBert model)"),yCe.forEach(t),Tdo=i(C),zp=n(C,"LI",{});var wCe=s(zp);bZ=n(wCe,"STRONG",{});var wOr=s(bZ);Fdo=r(wOr,"reformer"),wOr.forEach(t),Cdo=r(wCe," \u2014 "),DS=n(wCe,"A",{href:!0});var AOr=s(DS);Mdo=r(AOr,"ReformerModel"),AOr.forEach(t),Edo=r(wCe," (Reformer model)"),wCe.forEach(t),ydo=i(C),Wp=n(C,"LI",{});var ACe=s(Wp);vZ=n(ACe,"STRONG",{});var LOr=s(vZ);wdo=r(LOr,"rembert"),LOr.forEach(t),Ado=r(ACe," \u2014 "),qS=n(ACe,"A",{href:!0});var BOr=s(qS);Ldo=r(BOr,"RemBertModel"),BOr.forEach(t),Bdo=r(ACe," (RemBERT model)"),ACe.forEach(t),xdo=i(C),Qp=n(C,"LI",{});var LCe=s(Qp);TZ=n(LCe,"STRONG",{});var xOr=s(TZ);kdo=r(xOr,"resnet"),xOr.forEach(t),Rdo=r(LCe," \u2014 "),GS=n(LCe,"A",{href:!0});var kOr=s(GS);Sdo=r(kOr,"ResNetModel"),kOr.forEach(t),Pdo=r(LCe," (ResNet model)"),LCe.forEach(t),$do=i(C),Hp=n(C,"LI",{});var BCe=s(Hp);FZ=n(BCe,"STRONG",{});var ROr=s(FZ);Ido=r(ROr,"retribert"),ROr.forEach(t),Ndo=r(BCe," \u2014 "),OS=n(BCe,"A",{href:!0});var SOr=s(OS);jdo=r(SOr,"RetriBertModel"),SOr.forEach(t),Ddo=r(BCe," (RetriBERT model)"),BCe.forEach(t),qdo=i(C),Up=n(C,"LI",{});var xCe=s(Up);CZ=n(xCe,"STRONG",{});var POr=s(CZ);Gdo=r(POr,"roberta"),POr.forEach(t),Odo=r(xCe," \u2014 "),XS=n(xCe,"A",{href:!0});var $Or=s(XS);Xdo=r($Or,"RobertaModel"),$Or.forEach(t),Vdo=r(xCe," (RoBERTa model)"),xCe.forEach(t),zdo=i(C),Jp=n(C,"LI",{});var kCe=s(Jp);MZ=n(kCe,"STRONG",{});var IOr=s(MZ);Wdo=r(IOr,"roformer"),IOr.forEach(t),Qdo=r(kCe," \u2014 "),VS=n(kCe,"A",{href:!0});var NOr=s(VS);Hdo=r(NOr,"RoFormerModel"),NOr.forEach(t),Udo=r(kCe," (RoFormer model)"),kCe.forEach(t),Jdo=i(C),Yp=n(C,"LI",{});var RCe=s(Yp);EZ=n(RCe,"STRONG",{});var jOr=s(EZ);Ydo=r(jOr,"segformer"),jOr.forEach(t),Kdo=r(RCe," \u2014 "),zS=n(RCe,"A",{href:!0});var DOr=s(zS);Zdo=r(DOr,"SegformerModel"),DOr.forEach(t),eco=r(RCe," (SegFormer model)"),RCe.forEach(t),oco=i(C),Kp=n(C,"LI",{});var SCe=s(Kp);yZ=n(SCe,"STRONG",{});var qOr=s(yZ);rco=r(qOr,"sew"),qOr.forEach(t),tco=r(SCe," \u2014 "),WS=n(SCe,"A",{href:!0});var GOr=s(WS);aco=r(GOr,"SEWModel"),GOr.forEach(t),nco=r(SCe," (SEW model)"),SCe.forEach(t),sco=i(C),Zp=n(C,"LI",{});var PCe=s(Zp);wZ=n(PCe,"STRONG",{});var OOr=s(wZ);lco=r(OOr,"sew-d"),OOr.forEach(t),ico=r(PCe," \u2014 "),QS=n(PCe,"A",{href:!0});var XOr=s(QS);dco=r(XOr,"SEWDModel"),XOr.forEach(t),cco=r(PCe," (SEW-D model)"),PCe.forEach(t),fco=i(C),e_=n(C,"LI",{});var $Ce=s(e_);AZ=n($Ce,"STRONG",{});var VOr=s(AZ);mco=r(VOr,"speech_to_text"),VOr.forEach(t),gco=r($Ce," \u2014 "),HS=n($Ce,"A",{href:!0});var zOr=s(HS);hco=r(zOr,"Speech2TextModel"),zOr.forEach(t),pco=r($Ce," (Speech2Text model)"),$Ce.forEach(t),_co=i(C),o_=n(C,"LI",{});var ICe=s(o_);LZ=n(ICe,"STRONG",{});var WOr=s(LZ);uco=r(WOr,"splinter"),WOr.forEach(t),bco=r(ICe," \u2014 "),US=n(ICe,"A",{href:!0});var QOr=s(US);vco=r(QOr,"SplinterModel"),QOr.forEach(t),Tco=r(ICe," (Splinter model)"),ICe.forEach(t),Fco=i(C),r_=n(C,"LI",{});var NCe=s(r_);BZ=n(NCe,"STRONG",{});var HOr=s(BZ);Cco=r(HOr,"squeezebert"),HOr.forEach(t),Mco=r(NCe," \u2014 "),JS=n(NCe,"A",{href:!0});var UOr=s(JS);Eco=r(UOr,"SqueezeBertModel"),UOr.forEach(t),yco=r(NCe," (SqueezeBERT model)"),NCe.forEach(t),wco=i(C),t_=n(C,"LI",{});var jCe=s(t_);xZ=n(jCe,"STRONG",{});var JOr=s(xZ);Aco=r(JOr,"swin"),JOr.forEach(t),Lco=r(jCe," \u2014 "),YS=n(jCe,"A",{href:!0});var YOr=s(YS);Bco=r(YOr,"SwinModel"),YOr.forEach(t),xco=r(jCe," (Swin model)"),jCe.forEach(t),kco=i(C),a_=n(C,"LI",{});var DCe=s(a_);kZ=n(DCe,"STRONG",{});var KOr=s(kZ);Rco=r(KOr,"t5"),KOr.forEach(t),Sco=r(DCe," \u2014 "),KS=n(DCe,"A",{href:!0});var ZOr=s(KS);Pco=r(ZOr,"T5Model"),ZOr.forEach(t),$co=r(DCe," (T5 model)"),DCe.forEach(t),Ico=i(C),n_=n(C,"LI",{});var qCe=s(n_);RZ=n(qCe,"STRONG",{});var eXr=s(RZ);Nco=r(eXr,"tapas"),eXr.forEach(t),jco=r(qCe," \u2014 "),ZS=n(qCe,"A",{href:!0});var oXr=s(ZS);Dco=r(oXr,"TapasModel"),oXr.forEach(t),qco=r(qCe," (TAPAS model)"),qCe.forEach(t),Gco=i(C),s_=n(C,"LI",{});var GCe=s(s_);SZ=n(GCe,"STRONG",{});var rXr=s(SZ);Oco=r(rXr,"transfo-xl"),rXr.forEach(t),Xco=r(GCe," \u2014 "),eP=n(GCe,"A",{href:!0});var tXr=s(eP);Vco=r(tXr,"TransfoXLModel"),tXr.forEach(t),zco=r(GCe," (Transformer-XL model)"),GCe.forEach(t),Wco=i(C),l_=n(C,"LI",{});var OCe=s(l_);PZ=n(OCe,"STRONG",{});var aXr=s(PZ);Qco=r(aXr,"unispeech"),aXr.forEach(t),Hco=r(OCe," \u2014 "),oP=n(OCe,"A",{href:!0});var nXr=s(oP);Uco=r(nXr,"UniSpeechModel"),nXr.forEach(t),Jco=r(OCe," (UniSpeech model)"),OCe.forEach(t),Yco=i(C),i_=n(C,"LI",{});var XCe=s(i_);$Z=n(XCe,"STRONG",{});var sXr=s($Z);Kco=r(sXr,"unispeech-sat"),sXr.forEach(t),Zco=r(XCe," \u2014 "),rP=n(XCe,"A",{href:!0});var lXr=s(rP);efo=r(lXr,"UniSpeechSatModel"),lXr.forEach(t),ofo=r(XCe," (UniSpeechSat model)"),XCe.forEach(t),rfo=i(C),d_=n(C,"LI",{});var VCe=s(d_);IZ=n(VCe,"STRONG",{});var iXr=s(IZ);tfo=r(iXr,"van"),iXr.forEach(t),afo=r(VCe," \u2014 "),tP=n(VCe,"A",{href:!0});var dXr=s(tP);nfo=r(dXr,"VanModel"),dXr.forEach(t),sfo=r(VCe," (VAN model)"),VCe.forEach(t),lfo=i(C),c_=n(C,"LI",{});var zCe=s(c_);NZ=n(zCe,"STRONG",{});var cXr=s(NZ);ifo=r(cXr,"vilt"),cXr.forEach(t),dfo=r(zCe," \u2014 "),aP=n(zCe,"A",{href:!0});var fXr=s(aP);cfo=r(fXr,"ViltModel"),fXr.forEach(t),ffo=r(zCe," (ViLT model)"),zCe.forEach(t),mfo=i(C),f_=n(C,"LI",{});var WCe=s(f_);jZ=n(WCe,"STRONG",{});var mXr=s(jZ);gfo=r(mXr,"vision-text-dual-encoder"),mXr.forEach(t),hfo=r(WCe," \u2014 "),nP=n(WCe,"A",{href:!0});var gXr=s(nP);pfo=r(gXr,"VisionTextDualEncoderModel"),gXr.forEach(t),_fo=r(WCe," (VisionTextDualEncoder model)"),WCe.forEach(t),ufo=i(C),m_=n(C,"LI",{});var QCe=s(m_);DZ=n(QCe,"STRONG",{});var hXr=s(DZ);bfo=r(hXr,"visual_bert"),hXr.forEach(t),vfo=r(QCe," \u2014 "),sP=n(QCe,"A",{href:!0});var pXr=s(sP);Tfo=r(pXr,"VisualBertModel"),pXr.forEach(t),Ffo=r(QCe," (VisualBert model)"),QCe.forEach(t),Cfo=i(C),g_=n(C,"LI",{});var HCe=s(g_);qZ=n(HCe,"STRONG",{});var _Xr=s(qZ);Mfo=r(_Xr,"vit"),_Xr.forEach(t),Efo=r(HCe," \u2014 "),lP=n(HCe,"A",{href:!0});var uXr=s(lP);yfo=r(uXr,"ViTModel"),uXr.forEach(t),wfo=r(HCe," (ViT model)"),HCe.forEach(t),Afo=i(C),h_=n(C,"LI",{});var UCe=s(h_);GZ=n(UCe,"STRONG",{});var bXr=s(GZ);Lfo=r(bXr,"vit_mae"),bXr.forEach(t),Bfo=r(UCe," \u2014 "),iP=n(UCe,"A",{href:!0});var vXr=s(iP);xfo=r(vXr,"ViTMAEModel"),vXr.forEach(t),kfo=r(UCe," (ViTMAE model)"),UCe.forEach(t),Rfo=i(C),p_=n(C,"LI",{});var JCe=s(p_);OZ=n(JCe,"STRONG",{});var TXr=s(OZ);Sfo=r(TXr,"wav2vec2"),TXr.forEach(t),Pfo=r(JCe," \u2014 "),dP=n(JCe,"A",{href:!0});var FXr=s(dP);$fo=r(FXr,"Wav2Vec2Model"),FXr.forEach(t),Ifo=r(JCe," (Wav2Vec2 model)"),JCe.forEach(t),Nfo=i(C),__=n(C,"LI",{});var YCe=s(__);XZ=n(YCe,"STRONG",{});var CXr=s(XZ);jfo=r(CXr,"wavlm"),CXr.forEach(t),Dfo=r(YCe," \u2014 "),cP=n(YCe,"A",{href:!0});var MXr=s(cP);qfo=r(MXr,"WavLMModel"),MXr.forEach(t),Gfo=r(YCe," (WavLM model)"),YCe.forEach(t),Ofo=i(C),u_=n(C,"LI",{});var KCe=s(u_);VZ=n(KCe,"STRONG",{});var EXr=s(VZ);Xfo=r(EXr,"xglm"),EXr.forEach(t),Vfo=r(KCe," \u2014 "),fP=n(KCe,"A",{href:!0});var yXr=s(fP);zfo=r(yXr,"XGLMModel"),yXr.forEach(t),Wfo=r(KCe," (XGLM model)"),KCe.forEach(t),Qfo=i(C),b_=n(C,"LI",{});var ZCe=s(b_);zZ=n(ZCe,"STRONG",{});var wXr=s(zZ);Hfo=r(wXr,"xlm"),wXr.forEach(t),Ufo=r(ZCe," \u2014 "),mP=n(ZCe,"A",{href:!0});var AXr=s(mP);Jfo=r(AXr,"XLMModel"),AXr.forEach(t),Yfo=r(ZCe," (XLM model)"),ZCe.forEach(t),Kfo=i(C),v_=n(C,"LI",{});var eMe=s(v_);WZ=n(eMe,"STRONG",{});var LXr=s(WZ);Zfo=r(LXr,"xlm-prophetnet"),LXr.forEach(t),emo=r(eMe," \u2014 "),gP=n(eMe,"A",{href:!0});var BXr=s(gP);omo=r(BXr,"XLMProphetNetModel"),BXr.forEach(t),rmo=r(eMe," (XLMProphetNet model)"),eMe.forEach(t),tmo=i(C),T_=n(C,"LI",{});var oMe=s(T_);QZ=n(oMe,"STRONG",{});var xXr=s(QZ);amo=r(xXr,"xlm-roberta"),xXr.forEach(t),nmo=r(oMe," \u2014 "),hP=n(oMe,"A",{href:!0});var kXr=s(hP);smo=r(kXr,"XLMRobertaModel"),kXr.forEach(t),lmo=r(oMe," (XLM-RoBERTa model)"),oMe.forEach(t),imo=i(C),F_=n(C,"LI",{});var rMe=s(F_);HZ=n(rMe,"STRONG",{});var RXr=s(HZ);dmo=r(RXr,"xlm-roberta-xl"),RXr.forEach(t),cmo=r(rMe," \u2014 "),pP=n(rMe,"A",{href:!0});var SXr=s(pP);fmo=r(SXr,"XLMRobertaXLModel"),SXr.forEach(t),mmo=r(rMe," (XLM-RoBERTa-XL model)"),rMe.forEach(t),gmo=i(C),C_=n(C,"LI",{});var tMe=s(C_);UZ=n(tMe,"STRONG",{});var PXr=s(UZ);hmo=r(PXr,"xlnet"),PXr.forEach(t),pmo=r(tMe," \u2014 "),_P=n(tMe,"A",{href:!0});var $Xr=s(_P);_mo=r($Xr,"XLNetModel"),$Xr.forEach(t),umo=r(tMe," (XLNet model)"),tMe.forEach(t),bmo=i(C),M_=n(C,"LI",{});var aMe=s(M_);JZ=n(aMe,"STRONG",{});var IXr=s(JZ);vmo=r(IXr,"yoso"),IXr.forEach(t),Tmo=r(aMe," \u2014 "),uP=n(aMe,"A",{href:!0});var NXr=s(uP);Fmo=r(NXr,"YosoModel"),NXr.forEach(t),Cmo=r(aMe," (YOSO model)"),aMe.forEach(t),C.forEach(t),Mmo=i(qt),E_=n(qt,"P",{});var nMe=s(E_);Emo=r(nMe,"The model is set in evaluation mode by default using "),YZ=n(nMe,"CODE",{});var jXr=s(YZ);ymo=r(jXr,"model.eval()"),jXr.forEach(t),wmo=r(nMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),KZ=n(nMe,"CODE",{});var DXr=s(KZ);Amo=r(DXr,"model.train()"),DXr.forEach(t),nMe.forEach(t),Lmo=i(qt),ZZ=n(qt,"P",{});var qXr=s(ZZ);Bmo=r(qXr,"Examples:"),qXr.forEach(t),xmo=i(qt),m(XE.$$.fragment,qt),qt.forEach(t),Ws.forEach(t),lke=i(c),ed=n(c,"H2",{class:!0});var _Se=s(ed);y_=n(_Se,"A",{id:!0,class:!0,href:!0});var GXr=s(y_);eee=n(GXr,"SPAN",{});var OXr=s(eee);m(VE.$$.fragment,OXr),OXr.forEach(t),GXr.forEach(t),kmo=i(_Se),oee=n(_Se,"SPAN",{});var XXr=s(oee);Rmo=r(XXr,"AutoModelForPreTraining"),XXr.forEach(t),_Se.forEach(t),ike=i(c),Yo=n(c,"DIV",{class:!0});var Hs=s(Yo);m(zE.$$.fragment,Hs),Smo=i(Hs),od=n(Hs,"P",{});var Qz=s(od);Pmo=r(Qz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),ree=n(Qz,"CODE",{});var VXr=s(ree);$mo=r(VXr,"from_pretrained()"),VXr.forEach(t),Imo=r(Qz,"class method or the "),tee=n(Qz,"CODE",{});var zXr=s(tee);Nmo=r(zXr,"from_config()"),zXr.forEach(t),jmo=r(Qz,`class
method.`),Qz.forEach(t),Dmo=i(Hs),WE=n(Hs,"P",{});var uSe=s(WE);qmo=r(uSe,"This class cannot be instantiated directly using "),aee=n(uSe,"CODE",{});var WXr=s(aee);Gmo=r(WXr,"__init__()"),WXr.forEach(t),Omo=r(uSe," (throws an error)."),uSe.forEach(t),Xmo=i(Hs),zr=n(Hs,"DIV",{class:!0});var Us=s(zr);m(QE.$$.fragment,Us),Vmo=i(Us),nee=n(Us,"P",{});var QXr=s(nee);zmo=r(QXr,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),QXr.forEach(t),Wmo=i(Us),rd=n(Us,"P",{});var Hz=s(rd);Qmo=r(Hz,`Note:
Loading a model from its configuration file does `),see=n(Hz,"STRONG",{});var HXr=s(see);Hmo=r(HXr,"not"),HXr.forEach(t),Umo=r(Hz,` load the model weights. It only affects the
model\u2019s configuration. Use `),lee=n(Hz,"CODE",{});var UXr=s(lee);Jmo=r(UXr,"from_pretrained()"),UXr.forEach(t),Ymo=r(Hz,"to load the model weights."),Hz.forEach(t),Kmo=i(Us),iee=n(Us,"P",{});var JXr=s(iee);Zmo=r(JXr,"Examples:"),JXr.forEach(t),ego=i(Us),m(HE.$$.fragment,Us),Us.forEach(t),ogo=i(Hs),De=n(Hs,"DIV",{class:!0});var Gt=s(De);m(UE.$$.fragment,Gt),rgo=i(Gt),dee=n(Gt,"P",{});var YXr=s(dee);tgo=r(YXr,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),YXr.forEach(t),ago=i(Gt),za=n(Gt,"P",{});var iM=s(za);ngo=r(iM,"The model class to instantiate is selected based on the "),cee=n(iM,"CODE",{});var KXr=s(cee);sgo=r(KXr,"model_type"),KXr.forEach(t),lgo=r(iM,` property of the config object (either
passed as an argument or loaded from `),fee=n(iM,"CODE",{});var ZXr=s(fee);igo=r(ZXr,"pretrained_model_name_or_path"),ZXr.forEach(t),dgo=r(iM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mee=n(iM,"CODE",{});var eVr=s(mee);cgo=r(eVr,"pretrained_model_name_or_path"),eVr.forEach(t),fgo=r(iM,":"),iM.forEach(t),mgo=i(Gt),k=n(Gt,"UL",{});var S=s(k);w_=n(S,"LI",{});var sMe=s(w_);gee=n(sMe,"STRONG",{});var oVr=s(gee);ggo=r(oVr,"albert"),oVr.forEach(t),hgo=r(sMe," \u2014 "),bP=n(sMe,"A",{href:!0});var rVr=s(bP);pgo=r(rVr,"AlbertForPreTraining"),rVr.forEach(t),_go=r(sMe," (ALBERT model)"),sMe.forEach(t),ugo=i(S),A_=n(S,"LI",{});var lMe=s(A_);hee=n(lMe,"STRONG",{});var tVr=s(hee);bgo=r(tVr,"bart"),tVr.forEach(t),vgo=r(lMe," \u2014 "),vP=n(lMe,"A",{href:!0});var aVr=s(vP);Tgo=r(aVr,"BartForConditionalGeneration"),aVr.forEach(t),Fgo=r(lMe," (BART model)"),lMe.forEach(t),Cgo=i(S),L_=n(S,"LI",{});var iMe=s(L_);pee=n(iMe,"STRONG",{});var nVr=s(pee);Mgo=r(nVr,"bert"),nVr.forEach(t),Ego=r(iMe," \u2014 "),TP=n(iMe,"A",{href:!0});var sVr=s(TP);ygo=r(sVr,"BertForPreTraining"),sVr.forEach(t),wgo=r(iMe," (BERT model)"),iMe.forEach(t),Ago=i(S),B_=n(S,"LI",{});var dMe=s(B_);_ee=n(dMe,"STRONG",{});var lVr=s(_ee);Lgo=r(lVr,"big_bird"),lVr.forEach(t),Bgo=r(dMe," \u2014 "),FP=n(dMe,"A",{href:!0});var iVr=s(FP);xgo=r(iVr,"BigBirdForPreTraining"),iVr.forEach(t),kgo=r(dMe," (BigBird model)"),dMe.forEach(t),Rgo=i(S),x_=n(S,"LI",{});var cMe=s(x_);uee=n(cMe,"STRONG",{});var dVr=s(uee);Sgo=r(dVr,"camembert"),dVr.forEach(t),Pgo=r(cMe," \u2014 "),CP=n(cMe,"A",{href:!0});var cVr=s(CP);$go=r(cVr,"CamembertForMaskedLM"),cVr.forEach(t),Igo=r(cMe," (CamemBERT model)"),cMe.forEach(t),Ngo=i(S),k_=n(S,"LI",{});var fMe=s(k_);bee=n(fMe,"STRONG",{});var fVr=s(bee);jgo=r(fVr,"ctrl"),fVr.forEach(t),Dgo=r(fMe," \u2014 "),MP=n(fMe,"A",{href:!0});var mVr=s(MP);qgo=r(mVr,"CTRLLMHeadModel"),mVr.forEach(t),Ggo=r(fMe," (CTRL model)"),fMe.forEach(t),Ogo=i(S),R_=n(S,"LI",{});var mMe=s(R_);vee=n(mMe,"STRONG",{});var gVr=s(vee);Xgo=r(gVr,"data2vec-text"),gVr.forEach(t),Vgo=r(mMe," \u2014 "),EP=n(mMe,"A",{href:!0});var hVr=s(EP);zgo=r(hVr,"Data2VecTextForMaskedLM"),hVr.forEach(t),Wgo=r(mMe," (Data2VecText model)"),mMe.forEach(t),Qgo=i(S),S_=n(S,"LI",{});var gMe=s(S_);Tee=n(gMe,"STRONG",{});var pVr=s(Tee);Hgo=r(pVr,"deberta"),pVr.forEach(t),Ugo=r(gMe," \u2014 "),yP=n(gMe,"A",{href:!0});var _Vr=s(yP);Jgo=r(_Vr,"DebertaForMaskedLM"),_Vr.forEach(t),Ygo=r(gMe," (DeBERTa model)"),gMe.forEach(t),Kgo=i(S),P_=n(S,"LI",{});var hMe=s(P_);Fee=n(hMe,"STRONG",{});var uVr=s(Fee);Zgo=r(uVr,"deberta-v2"),uVr.forEach(t),eho=r(hMe," \u2014 "),wP=n(hMe,"A",{href:!0});var bVr=s(wP);oho=r(bVr,"DebertaV2ForMaskedLM"),bVr.forEach(t),rho=r(hMe," (DeBERTa-v2 model)"),hMe.forEach(t),tho=i(S),$_=n(S,"LI",{});var pMe=s($_);Cee=n(pMe,"STRONG",{});var vVr=s(Cee);aho=r(vVr,"distilbert"),vVr.forEach(t),nho=r(pMe," \u2014 "),AP=n(pMe,"A",{href:!0});var TVr=s(AP);sho=r(TVr,"DistilBertForMaskedLM"),TVr.forEach(t),lho=r(pMe," (DistilBERT model)"),pMe.forEach(t),iho=i(S),I_=n(S,"LI",{});var _Me=s(I_);Mee=n(_Me,"STRONG",{});var FVr=s(Mee);dho=r(FVr,"electra"),FVr.forEach(t),cho=r(_Me," \u2014 "),LP=n(_Me,"A",{href:!0});var CVr=s(LP);fho=r(CVr,"ElectraForPreTraining"),CVr.forEach(t),mho=r(_Me," (ELECTRA model)"),_Me.forEach(t),gho=i(S),N_=n(S,"LI",{});var uMe=s(N_);Eee=n(uMe,"STRONG",{});var MVr=s(Eee);hho=r(MVr,"flaubert"),MVr.forEach(t),pho=r(uMe," \u2014 "),BP=n(uMe,"A",{href:!0});var EVr=s(BP);_ho=r(EVr,"FlaubertWithLMHeadModel"),EVr.forEach(t),uho=r(uMe," (FlauBERT model)"),uMe.forEach(t),bho=i(S),j_=n(S,"LI",{});var bMe=s(j_);yee=n(bMe,"STRONG",{});var yVr=s(yee);vho=r(yVr,"fnet"),yVr.forEach(t),Tho=r(bMe," \u2014 "),xP=n(bMe,"A",{href:!0});var wVr=s(xP);Fho=r(wVr,"FNetForPreTraining"),wVr.forEach(t),Cho=r(bMe," (FNet model)"),bMe.forEach(t),Mho=i(S),D_=n(S,"LI",{});var vMe=s(D_);wee=n(vMe,"STRONG",{});var AVr=s(wee);Eho=r(AVr,"fsmt"),AVr.forEach(t),yho=r(vMe," \u2014 "),kP=n(vMe,"A",{href:!0});var LVr=s(kP);who=r(LVr,"FSMTForConditionalGeneration"),LVr.forEach(t),Aho=r(vMe," (FairSeq Machine-Translation model)"),vMe.forEach(t),Lho=i(S),q_=n(S,"LI",{});var TMe=s(q_);Aee=n(TMe,"STRONG",{});var BVr=s(Aee);Bho=r(BVr,"funnel"),BVr.forEach(t),xho=r(TMe," \u2014 "),RP=n(TMe,"A",{href:!0});var xVr=s(RP);kho=r(xVr,"FunnelForPreTraining"),xVr.forEach(t),Rho=r(TMe," (Funnel Transformer model)"),TMe.forEach(t),Sho=i(S),G_=n(S,"LI",{});var FMe=s(G_);Lee=n(FMe,"STRONG",{});var kVr=s(Lee);Pho=r(kVr,"gpt2"),kVr.forEach(t),$ho=r(FMe," \u2014 "),SP=n(FMe,"A",{href:!0});var RVr=s(SP);Iho=r(RVr,"GPT2LMHeadModel"),RVr.forEach(t),Nho=r(FMe," (OpenAI GPT-2 model)"),FMe.forEach(t),jho=i(S),O_=n(S,"LI",{});var CMe=s(O_);Bee=n(CMe,"STRONG",{});var SVr=s(Bee);Dho=r(SVr,"ibert"),SVr.forEach(t),qho=r(CMe," \u2014 "),PP=n(CMe,"A",{href:!0});var PVr=s(PP);Gho=r(PVr,"IBertForMaskedLM"),PVr.forEach(t),Oho=r(CMe," (I-BERT model)"),CMe.forEach(t),Xho=i(S),X_=n(S,"LI",{});var MMe=s(X_);xee=n(MMe,"STRONG",{});var $Vr=s(xee);Vho=r($Vr,"layoutlm"),$Vr.forEach(t),zho=r(MMe," \u2014 "),$P=n(MMe,"A",{href:!0});var IVr=s($P);Who=r(IVr,"LayoutLMForMaskedLM"),IVr.forEach(t),Qho=r(MMe," (LayoutLM model)"),MMe.forEach(t),Hho=i(S),V_=n(S,"LI",{});var EMe=s(V_);kee=n(EMe,"STRONG",{});var NVr=s(kee);Uho=r(NVr,"longformer"),NVr.forEach(t),Jho=r(EMe," \u2014 "),IP=n(EMe,"A",{href:!0});var jVr=s(IP);Yho=r(jVr,"LongformerForMaskedLM"),jVr.forEach(t),Kho=r(EMe," (Longformer model)"),EMe.forEach(t),Zho=i(S),z_=n(S,"LI",{});var yMe=s(z_);Ree=n(yMe,"STRONG",{});var DVr=s(Ree);epo=r(DVr,"lxmert"),DVr.forEach(t),opo=r(yMe," \u2014 "),NP=n(yMe,"A",{href:!0});var qVr=s(NP);rpo=r(qVr,"LxmertForPreTraining"),qVr.forEach(t),tpo=r(yMe," (LXMERT model)"),yMe.forEach(t),apo=i(S),W_=n(S,"LI",{});var wMe=s(W_);See=n(wMe,"STRONG",{});var GVr=s(See);npo=r(GVr,"megatron-bert"),GVr.forEach(t),spo=r(wMe," \u2014 "),jP=n(wMe,"A",{href:!0});var OVr=s(jP);lpo=r(OVr,"MegatronBertForPreTraining"),OVr.forEach(t),ipo=r(wMe," (MegatronBert model)"),wMe.forEach(t),dpo=i(S),Q_=n(S,"LI",{});var AMe=s(Q_);Pee=n(AMe,"STRONG",{});var XVr=s(Pee);cpo=r(XVr,"mobilebert"),XVr.forEach(t),fpo=r(AMe," \u2014 "),DP=n(AMe,"A",{href:!0});var VVr=s(DP);mpo=r(VVr,"MobileBertForPreTraining"),VVr.forEach(t),gpo=r(AMe," (MobileBERT model)"),AMe.forEach(t),hpo=i(S),H_=n(S,"LI",{});var LMe=s(H_);$ee=n(LMe,"STRONG",{});var zVr=s($ee);ppo=r(zVr,"mpnet"),zVr.forEach(t),_po=r(LMe," \u2014 "),qP=n(LMe,"A",{href:!0});var WVr=s(qP);upo=r(WVr,"MPNetForMaskedLM"),WVr.forEach(t),bpo=r(LMe," (MPNet model)"),LMe.forEach(t),vpo=i(S),U_=n(S,"LI",{});var BMe=s(U_);Iee=n(BMe,"STRONG",{});var QVr=s(Iee);Tpo=r(QVr,"openai-gpt"),QVr.forEach(t),Fpo=r(BMe," \u2014 "),GP=n(BMe,"A",{href:!0});var HVr=s(GP);Cpo=r(HVr,"OpenAIGPTLMHeadModel"),HVr.forEach(t),Mpo=r(BMe," (OpenAI GPT model)"),BMe.forEach(t),Epo=i(S),J_=n(S,"LI",{});var xMe=s(J_);Nee=n(xMe,"STRONG",{});var UVr=s(Nee);ypo=r(UVr,"retribert"),UVr.forEach(t),wpo=r(xMe," \u2014 "),OP=n(xMe,"A",{href:!0});var JVr=s(OP);Apo=r(JVr,"RetriBertModel"),JVr.forEach(t),Lpo=r(xMe," (RetriBERT model)"),xMe.forEach(t),Bpo=i(S),Y_=n(S,"LI",{});var kMe=s(Y_);jee=n(kMe,"STRONG",{});var YVr=s(jee);xpo=r(YVr,"roberta"),YVr.forEach(t),kpo=r(kMe," \u2014 "),XP=n(kMe,"A",{href:!0});var KVr=s(XP);Rpo=r(KVr,"RobertaForMaskedLM"),KVr.forEach(t),Spo=r(kMe," (RoBERTa model)"),kMe.forEach(t),Ppo=i(S),K_=n(S,"LI",{});var RMe=s(K_);Dee=n(RMe,"STRONG",{});var ZVr=s(Dee);$po=r(ZVr,"squeezebert"),ZVr.forEach(t),Ipo=r(RMe," \u2014 "),VP=n(RMe,"A",{href:!0});var ezr=s(VP);Npo=r(ezr,"SqueezeBertForMaskedLM"),ezr.forEach(t),jpo=r(RMe," (SqueezeBERT model)"),RMe.forEach(t),Dpo=i(S),Z_=n(S,"LI",{});var SMe=s(Z_);qee=n(SMe,"STRONG",{});var ozr=s(qee);qpo=r(ozr,"t5"),ozr.forEach(t),Gpo=r(SMe," \u2014 "),zP=n(SMe,"A",{href:!0});var rzr=s(zP);Opo=r(rzr,"T5ForConditionalGeneration"),rzr.forEach(t),Xpo=r(SMe," (T5 model)"),SMe.forEach(t),Vpo=i(S),eu=n(S,"LI",{});var PMe=s(eu);Gee=n(PMe,"STRONG",{});var tzr=s(Gee);zpo=r(tzr,"tapas"),tzr.forEach(t),Wpo=r(PMe," \u2014 "),WP=n(PMe,"A",{href:!0});var azr=s(WP);Qpo=r(azr,"TapasForMaskedLM"),azr.forEach(t),Hpo=r(PMe," (TAPAS model)"),PMe.forEach(t),Upo=i(S),ou=n(S,"LI",{});var $Me=s(ou);Oee=n($Me,"STRONG",{});var nzr=s(Oee);Jpo=r(nzr,"transfo-xl"),nzr.forEach(t),Ypo=r($Me," \u2014 "),QP=n($Me,"A",{href:!0});var szr=s(QP);Kpo=r(szr,"TransfoXLLMHeadModel"),szr.forEach(t),Zpo=r($Me," (Transformer-XL model)"),$Me.forEach(t),e_o=i(S),ru=n(S,"LI",{});var IMe=s(ru);Xee=n(IMe,"STRONG",{});var lzr=s(Xee);o_o=r(lzr,"unispeech"),lzr.forEach(t),r_o=r(IMe," \u2014 "),HP=n(IMe,"A",{href:!0});var izr=s(HP);t_o=r(izr,"UniSpeechForPreTraining"),izr.forEach(t),a_o=r(IMe," (UniSpeech model)"),IMe.forEach(t),n_o=i(S),tu=n(S,"LI",{});var NMe=s(tu);Vee=n(NMe,"STRONG",{});var dzr=s(Vee);s_o=r(dzr,"unispeech-sat"),dzr.forEach(t),l_o=r(NMe," \u2014 "),UP=n(NMe,"A",{href:!0});var czr=s(UP);i_o=r(czr,"UniSpeechSatForPreTraining"),czr.forEach(t),d_o=r(NMe," (UniSpeechSat model)"),NMe.forEach(t),c_o=i(S),au=n(S,"LI",{});var jMe=s(au);zee=n(jMe,"STRONG",{});var fzr=s(zee);f_o=r(fzr,"visual_bert"),fzr.forEach(t),m_o=r(jMe," \u2014 "),JP=n(jMe,"A",{href:!0});var mzr=s(JP);g_o=r(mzr,"VisualBertForPreTraining"),mzr.forEach(t),h_o=r(jMe," (VisualBert model)"),jMe.forEach(t),p_o=i(S),nu=n(S,"LI",{});var DMe=s(nu);Wee=n(DMe,"STRONG",{});var gzr=s(Wee);__o=r(gzr,"vit_mae"),gzr.forEach(t),u_o=r(DMe," \u2014 "),YP=n(DMe,"A",{href:!0});var hzr=s(YP);b_o=r(hzr,"ViTMAEForPreTraining"),hzr.forEach(t),v_o=r(DMe," (ViTMAE model)"),DMe.forEach(t),T_o=i(S),su=n(S,"LI",{});var qMe=s(su);Qee=n(qMe,"STRONG",{});var pzr=s(Qee);F_o=r(pzr,"wav2vec2"),pzr.forEach(t),C_o=r(qMe," \u2014 "),KP=n(qMe,"A",{href:!0});var _zr=s(KP);M_o=r(_zr,"Wav2Vec2ForPreTraining"),_zr.forEach(t),E_o=r(qMe," (Wav2Vec2 model)"),qMe.forEach(t),y_o=i(S),lu=n(S,"LI",{});var GMe=s(lu);Hee=n(GMe,"STRONG",{});var uzr=s(Hee);w_o=r(uzr,"xlm"),uzr.forEach(t),A_o=r(GMe," \u2014 "),ZP=n(GMe,"A",{href:!0});var bzr=s(ZP);L_o=r(bzr,"XLMWithLMHeadModel"),bzr.forEach(t),B_o=r(GMe," (XLM model)"),GMe.forEach(t),x_o=i(S),iu=n(S,"LI",{});var OMe=s(iu);Uee=n(OMe,"STRONG",{});var vzr=s(Uee);k_o=r(vzr,"xlm-roberta"),vzr.forEach(t),R_o=r(OMe," \u2014 "),e$=n(OMe,"A",{href:!0});var Tzr=s(e$);S_o=r(Tzr,"XLMRobertaForMaskedLM"),Tzr.forEach(t),P_o=r(OMe," (XLM-RoBERTa model)"),OMe.forEach(t),$_o=i(S),du=n(S,"LI",{});var XMe=s(du);Jee=n(XMe,"STRONG",{});var Fzr=s(Jee);I_o=r(Fzr,"xlm-roberta-xl"),Fzr.forEach(t),N_o=r(XMe," \u2014 "),o$=n(XMe,"A",{href:!0});var Czr=s(o$);j_o=r(Czr,"XLMRobertaXLForMaskedLM"),Czr.forEach(t),D_o=r(XMe," (XLM-RoBERTa-XL model)"),XMe.forEach(t),q_o=i(S),cu=n(S,"LI",{});var VMe=s(cu);Yee=n(VMe,"STRONG",{});var Mzr=s(Yee);G_o=r(Mzr,"xlnet"),Mzr.forEach(t),O_o=r(VMe," \u2014 "),r$=n(VMe,"A",{href:!0});var Ezr=s(r$);X_o=r(Ezr,"XLNetLMHeadModel"),Ezr.forEach(t),V_o=r(VMe," (XLNet model)"),VMe.forEach(t),S.forEach(t),z_o=i(Gt),fu=n(Gt,"P",{});var zMe=s(fu);W_o=r(zMe,"The model is set in evaluation mode by default using "),Kee=n(zMe,"CODE",{});var yzr=s(Kee);Q_o=r(yzr,"model.eval()"),yzr.forEach(t),H_o=r(zMe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Zee=n(zMe,"CODE",{});var wzr=s(Zee);U_o=r(wzr,"model.train()"),wzr.forEach(t),zMe.forEach(t),J_o=i(Gt),eoe=n(Gt,"P",{});var Azr=s(eoe);Y_o=r(Azr,"Examples:"),Azr.forEach(t),K_o=i(Gt),m(JE.$$.fragment,Gt),Gt.forEach(t),Hs.forEach(t),dke=i(c),td=n(c,"H2",{class:!0});var bSe=s(td);mu=n(bSe,"A",{id:!0,class:!0,href:!0});var Lzr=s(mu);ooe=n(Lzr,"SPAN",{});var Bzr=s(ooe);m(YE.$$.fragment,Bzr),Bzr.forEach(t),Lzr.forEach(t),Z_o=i(bSe),roe=n(bSe,"SPAN",{});var xzr=s(roe);euo=r(xzr,"AutoModelForCausalLM"),xzr.forEach(t),bSe.forEach(t),cke=i(c),Ko=n(c,"DIV",{class:!0});var Js=s(Ko);m(KE.$$.fragment,Js),ouo=i(Js),ad=n(Js,"P",{});var Uz=s(ad);ruo=r(Uz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),toe=n(Uz,"CODE",{});var kzr=s(toe);tuo=r(kzr,"from_pretrained()"),kzr.forEach(t),auo=r(Uz,"class method or the "),aoe=n(Uz,"CODE",{});var Rzr=s(aoe);nuo=r(Rzr,"from_config()"),Rzr.forEach(t),suo=r(Uz,`class
method.`),Uz.forEach(t),luo=i(Js),ZE=n(Js,"P",{});var vSe=s(ZE);iuo=r(vSe,"This class cannot be instantiated directly using "),noe=n(vSe,"CODE",{});var Szr=s(noe);duo=r(Szr,"__init__()"),Szr.forEach(t),cuo=r(vSe," (throws an error)."),vSe.forEach(t),fuo=i(Js),Wr=n(Js,"DIV",{class:!0});var Ys=s(Wr);m(ey.$$.fragment,Ys),muo=i(Ys),soe=n(Ys,"P",{});var Pzr=s(soe);guo=r(Pzr,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Pzr.forEach(t),huo=i(Ys),nd=n(Ys,"P",{});var Jz=s(nd);puo=r(Jz,`Note:
Loading a model from its configuration file does `),loe=n(Jz,"STRONG",{});var $zr=s(loe);_uo=r($zr,"not"),$zr.forEach(t),uuo=r(Jz,` load the model weights. It only affects the
model\u2019s configuration. Use `),ioe=n(Jz,"CODE",{});var Izr=s(ioe);buo=r(Izr,"from_pretrained()"),Izr.forEach(t),vuo=r(Jz,"to load the model weights."),Jz.forEach(t),Tuo=i(Ys),doe=n(Ys,"P",{});var Nzr=s(doe);Fuo=r(Nzr,"Examples:"),Nzr.forEach(t),Cuo=i(Ys),m(oy.$$.fragment,Ys),Ys.forEach(t),Muo=i(Js),qe=n(Js,"DIV",{class:!0});var Ot=s(qe);m(ry.$$.fragment,Ot),Euo=i(Ot),coe=n(Ot,"P",{});var jzr=s(coe);yuo=r(jzr,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),jzr.forEach(t),wuo=i(Ot),Wa=n(Ot,"P",{});var dM=s(Wa);Auo=r(dM,"The model class to instantiate is selected based on the "),foe=n(dM,"CODE",{});var Dzr=s(foe);Luo=r(Dzr,"model_type"),Dzr.forEach(t),Buo=r(dM,` property of the config object (either
passed as an argument or loaded from `),moe=n(dM,"CODE",{});var qzr=s(moe);xuo=r(qzr,"pretrained_model_name_or_path"),qzr.forEach(t),kuo=r(dM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),goe=n(dM,"CODE",{});var Gzr=s(goe);Ruo=r(Gzr,"pretrained_model_name_or_path"),Gzr.forEach(t),Suo=r(dM,":"),dM.forEach(t),Puo=i(Ot),$=n(Ot,"UL",{});var N=s($);gu=n(N,"LI",{});var WMe=s(gu);hoe=n(WMe,"STRONG",{});var Ozr=s(hoe);$uo=r(Ozr,"bart"),Ozr.forEach(t),Iuo=r(WMe," \u2014 "),t$=n(WMe,"A",{href:!0});var Xzr=s(t$);Nuo=r(Xzr,"BartForCausalLM"),Xzr.forEach(t),juo=r(WMe," (BART model)"),WMe.forEach(t),Duo=i(N),hu=n(N,"LI",{});var QMe=s(hu);poe=n(QMe,"STRONG",{});var Vzr=s(poe);quo=r(Vzr,"bert"),Vzr.forEach(t),Guo=r(QMe," \u2014 "),a$=n(QMe,"A",{href:!0});var zzr=s(a$);Ouo=r(zzr,"BertLMHeadModel"),zzr.forEach(t),Xuo=r(QMe," (BERT model)"),QMe.forEach(t),Vuo=i(N),pu=n(N,"LI",{});var HMe=s(pu);_oe=n(HMe,"STRONG",{});var Wzr=s(_oe);zuo=r(Wzr,"bert-generation"),Wzr.forEach(t),Wuo=r(HMe," \u2014 "),n$=n(HMe,"A",{href:!0});var Qzr=s(n$);Quo=r(Qzr,"BertGenerationDecoder"),Qzr.forEach(t),Huo=r(HMe," (Bert Generation model)"),HMe.forEach(t),Uuo=i(N),_u=n(N,"LI",{});var UMe=s(_u);uoe=n(UMe,"STRONG",{});var Hzr=s(uoe);Juo=r(Hzr,"big_bird"),Hzr.forEach(t),Yuo=r(UMe," \u2014 "),s$=n(UMe,"A",{href:!0});var Uzr=s(s$);Kuo=r(Uzr,"BigBirdForCausalLM"),Uzr.forEach(t),Zuo=r(UMe," (BigBird model)"),UMe.forEach(t),e1o=i(N),uu=n(N,"LI",{});var JMe=s(uu);boe=n(JMe,"STRONG",{});var Jzr=s(boe);o1o=r(Jzr,"bigbird_pegasus"),Jzr.forEach(t),r1o=r(JMe," \u2014 "),l$=n(JMe,"A",{href:!0});var Yzr=s(l$);t1o=r(Yzr,"BigBirdPegasusForCausalLM"),Yzr.forEach(t),a1o=r(JMe," (BigBirdPegasus model)"),JMe.forEach(t),n1o=i(N),bu=n(N,"LI",{});var YMe=s(bu);voe=n(YMe,"STRONG",{});var Kzr=s(voe);s1o=r(Kzr,"blenderbot"),Kzr.forEach(t),l1o=r(YMe," \u2014 "),i$=n(YMe,"A",{href:!0});var Zzr=s(i$);i1o=r(Zzr,"BlenderbotForCausalLM"),Zzr.forEach(t),d1o=r(YMe," (Blenderbot model)"),YMe.forEach(t),c1o=i(N),vu=n(N,"LI",{});var KMe=s(vu);Toe=n(KMe,"STRONG",{});var eWr=s(Toe);f1o=r(eWr,"blenderbot-small"),eWr.forEach(t),m1o=r(KMe," \u2014 "),d$=n(KMe,"A",{href:!0});var oWr=s(d$);g1o=r(oWr,"BlenderbotSmallForCausalLM"),oWr.forEach(t),h1o=r(KMe," (BlenderbotSmall model)"),KMe.forEach(t),p1o=i(N),Tu=n(N,"LI",{});var ZMe=s(Tu);Foe=n(ZMe,"STRONG",{});var rWr=s(Foe);_1o=r(rWr,"camembert"),rWr.forEach(t),u1o=r(ZMe," \u2014 "),c$=n(ZMe,"A",{href:!0});var tWr=s(c$);b1o=r(tWr,"CamembertForCausalLM"),tWr.forEach(t),v1o=r(ZMe," (CamemBERT model)"),ZMe.forEach(t),T1o=i(N),Fu=n(N,"LI",{});var eEe=s(Fu);Coe=n(eEe,"STRONG",{});var aWr=s(Coe);F1o=r(aWr,"ctrl"),aWr.forEach(t),C1o=r(eEe," \u2014 "),f$=n(eEe,"A",{href:!0});var nWr=s(f$);M1o=r(nWr,"CTRLLMHeadModel"),nWr.forEach(t),E1o=r(eEe," (CTRL model)"),eEe.forEach(t),y1o=i(N),Cu=n(N,"LI",{});var oEe=s(Cu);Moe=n(oEe,"STRONG",{});var sWr=s(Moe);w1o=r(sWr,"data2vec-text"),sWr.forEach(t),A1o=r(oEe," \u2014 "),m$=n(oEe,"A",{href:!0});var lWr=s(m$);L1o=r(lWr,"Data2VecTextForCausalLM"),lWr.forEach(t),B1o=r(oEe," (Data2VecText model)"),oEe.forEach(t),x1o=i(N),Mu=n(N,"LI",{});var rEe=s(Mu);Eoe=n(rEe,"STRONG",{});var iWr=s(Eoe);k1o=r(iWr,"electra"),iWr.forEach(t),R1o=r(rEe," \u2014 "),g$=n(rEe,"A",{href:!0});var dWr=s(g$);S1o=r(dWr,"ElectraForCausalLM"),dWr.forEach(t),P1o=r(rEe," (ELECTRA model)"),rEe.forEach(t),$1o=i(N),Eu=n(N,"LI",{});var tEe=s(Eu);yoe=n(tEe,"STRONG",{});var cWr=s(yoe);I1o=r(cWr,"gpt2"),cWr.forEach(t),N1o=r(tEe," \u2014 "),h$=n(tEe,"A",{href:!0});var fWr=s(h$);j1o=r(fWr,"GPT2LMHeadModel"),fWr.forEach(t),D1o=r(tEe," (OpenAI GPT-2 model)"),tEe.forEach(t),q1o=i(N),yu=n(N,"LI",{});var aEe=s(yu);woe=n(aEe,"STRONG",{});var mWr=s(woe);G1o=r(mWr,"gpt_neo"),mWr.forEach(t),O1o=r(aEe," \u2014 "),p$=n(aEe,"A",{href:!0});var gWr=s(p$);X1o=r(gWr,"GPTNeoForCausalLM"),gWr.forEach(t),V1o=r(aEe," (GPT Neo model)"),aEe.forEach(t),z1o=i(N),wu=n(N,"LI",{});var nEe=s(wu);Aoe=n(nEe,"STRONG",{});var hWr=s(Aoe);W1o=r(hWr,"gptj"),hWr.forEach(t),Q1o=r(nEe," \u2014 "),_$=n(nEe,"A",{href:!0});var pWr=s(_$);H1o=r(pWr,"GPTJForCausalLM"),pWr.forEach(t),U1o=r(nEe," (GPT-J model)"),nEe.forEach(t),J1o=i(N),Au=n(N,"LI",{});var sEe=s(Au);Loe=n(sEe,"STRONG",{});var _Wr=s(Loe);Y1o=r(_Wr,"marian"),_Wr.forEach(t),K1o=r(sEe," \u2014 "),u$=n(sEe,"A",{href:!0});var uWr=s(u$);Z1o=r(uWr,"MarianForCausalLM"),uWr.forEach(t),e4o=r(sEe," (Marian model)"),sEe.forEach(t),o4o=i(N),Lu=n(N,"LI",{});var lEe=s(Lu);Boe=n(lEe,"STRONG",{});var bWr=s(Boe);r4o=r(bWr,"mbart"),bWr.forEach(t),t4o=r(lEe," \u2014 "),b$=n(lEe,"A",{href:!0});var vWr=s(b$);a4o=r(vWr,"MBartForCausalLM"),vWr.forEach(t),n4o=r(lEe," (mBART model)"),lEe.forEach(t),s4o=i(N),Bu=n(N,"LI",{});var iEe=s(Bu);xoe=n(iEe,"STRONG",{});var TWr=s(xoe);l4o=r(TWr,"megatron-bert"),TWr.forEach(t),i4o=r(iEe," \u2014 "),v$=n(iEe,"A",{href:!0});var FWr=s(v$);d4o=r(FWr,"MegatronBertForCausalLM"),FWr.forEach(t),c4o=r(iEe," (MegatronBert model)"),iEe.forEach(t),f4o=i(N),xu=n(N,"LI",{});var dEe=s(xu);koe=n(dEe,"STRONG",{});var CWr=s(koe);m4o=r(CWr,"openai-gpt"),CWr.forEach(t),g4o=r(dEe," \u2014 "),T$=n(dEe,"A",{href:!0});var MWr=s(T$);h4o=r(MWr,"OpenAIGPTLMHeadModel"),MWr.forEach(t),p4o=r(dEe," (OpenAI GPT model)"),dEe.forEach(t),_4o=i(N),ku=n(N,"LI",{});var cEe=s(ku);Roe=n(cEe,"STRONG",{});var EWr=s(Roe);u4o=r(EWr,"pegasus"),EWr.forEach(t),b4o=r(cEe," \u2014 "),F$=n(cEe,"A",{href:!0});var yWr=s(F$);v4o=r(yWr,"PegasusForCausalLM"),yWr.forEach(t),T4o=r(cEe," (Pegasus model)"),cEe.forEach(t),F4o=i(N),Ru=n(N,"LI",{});var fEe=s(Ru);Soe=n(fEe,"STRONG",{});var wWr=s(Soe);C4o=r(wWr,"plbart"),wWr.forEach(t),M4o=r(fEe," \u2014 "),C$=n(fEe,"A",{href:!0});var AWr=s(C$);E4o=r(AWr,"PLBartForCausalLM"),AWr.forEach(t),y4o=r(fEe," (PLBart model)"),fEe.forEach(t),w4o=i(N),Su=n(N,"LI",{});var mEe=s(Su);Poe=n(mEe,"STRONG",{});var LWr=s(Poe);A4o=r(LWr,"prophetnet"),LWr.forEach(t),L4o=r(mEe," \u2014 "),M$=n(mEe,"A",{href:!0});var BWr=s(M$);B4o=r(BWr,"ProphetNetForCausalLM"),BWr.forEach(t),x4o=r(mEe," (ProphetNet model)"),mEe.forEach(t),k4o=i(N),Pu=n(N,"LI",{});var gEe=s(Pu);$oe=n(gEe,"STRONG",{});var xWr=s($oe);R4o=r(xWr,"qdqbert"),xWr.forEach(t),S4o=r(gEe," \u2014 "),E$=n(gEe,"A",{href:!0});var kWr=s(E$);P4o=r(kWr,"QDQBertLMHeadModel"),kWr.forEach(t),$4o=r(gEe," (QDQBert model)"),gEe.forEach(t),I4o=i(N),$u=n(N,"LI",{});var hEe=s($u);Ioe=n(hEe,"STRONG",{});var RWr=s(Ioe);N4o=r(RWr,"reformer"),RWr.forEach(t),j4o=r(hEe," \u2014 "),y$=n(hEe,"A",{href:!0});var SWr=s(y$);D4o=r(SWr,"ReformerModelWithLMHead"),SWr.forEach(t),q4o=r(hEe," (Reformer model)"),hEe.forEach(t),G4o=i(N),Iu=n(N,"LI",{});var pEe=s(Iu);Noe=n(pEe,"STRONG",{});var PWr=s(Noe);O4o=r(PWr,"rembert"),PWr.forEach(t),X4o=r(pEe," \u2014 "),w$=n(pEe,"A",{href:!0});var $Wr=s(w$);V4o=r($Wr,"RemBertForCausalLM"),$Wr.forEach(t),z4o=r(pEe," (RemBERT model)"),pEe.forEach(t),W4o=i(N),Nu=n(N,"LI",{});var _Ee=s(Nu);joe=n(_Ee,"STRONG",{});var IWr=s(joe);Q4o=r(IWr,"roberta"),IWr.forEach(t),H4o=r(_Ee," \u2014 "),A$=n(_Ee,"A",{href:!0});var NWr=s(A$);U4o=r(NWr,"RobertaForCausalLM"),NWr.forEach(t),J4o=r(_Ee," (RoBERTa model)"),_Ee.forEach(t),Y4o=i(N),ju=n(N,"LI",{});var uEe=s(ju);Doe=n(uEe,"STRONG",{});var jWr=s(Doe);K4o=r(jWr,"roformer"),jWr.forEach(t),Z4o=r(uEe," \u2014 "),L$=n(uEe,"A",{href:!0});var DWr=s(L$);ebo=r(DWr,"RoFormerForCausalLM"),DWr.forEach(t),obo=r(uEe," (RoFormer model)"),uEe.forEach(t),rbo=i(N),Du=n(N,"LI",{});var bEe=s(Du);qoe=n(bEe,"STRONG",{});var qWr=s(qoe);tbo=r(qWr,"speech_to_text_2"),qWr.forEach(t),abo=r(bEe," \u2014 "),B$=n(bEe,"A",{href:!0});var GWr=s(B$);nbo=r(GWr,"Speech2Text2ForCausalLM"),GWr.forEach(t),sbo=r(bEe," (Speech2Text2 model)"),bEe.forEach(t),lbo=i(N),qu=n(N,"LI",{});var vEe=s(qu);Goe=n(vEe,"STRONG",{});var OWr=s(Goe);ibo=r(OWr,"transfo-xl"),OWr.forEach(t),dbo=r(vEe," \u2014 "),x$=n(vEe,"A",{href:!0});var XWr=s(x$);cbo=r(XWr,"TransfoXLLMHeadModel"),XWr.forEach(t),fbo=r(vEe," (Transformer-XL model)"),vEe.forEach(t),mbo=i(N),Gu=n(N,"LI",{});var TEe=s(Gu);Ooe=n(TEe,"STRONG",{});var VWr=s(Ooe);gbo=r(VWr,"trocr"),VWr.forEach(t),hbo=r(TEe," \u2014 "),k$=n(TEe,"A",{href:!0});var zWr=s(k$);pbo=r(zWr,"TrOCRForCausalLM"),zWr.forEach(t),_bo=r(TEe," (TrOCR model)"),TEe.forEach(t),ubo=i(N),Ou=n(N,"LI",{});var FEe=s(Ou);Xoe=n(FEe,"STRONG",{});var WWr=s(Xoe);bbo=r(WWr,"xglm"),WWr.forEach(t),vbo=r(FEe," \u2014 "),R$=n(FEe,"A",{href:!0});var QWr=s(R$);Tbo=r(QWr,"XGLMForCausalLM"),QWr.forEach(t),Fbo=r(FEe," (XGLM model)"),FEe.forEach(t),Cbo=i(N),Xu=n(N,"LI",{});var CEe=s(Xu);Voe=n(CEe,"STRONG",{});var HWr=s(Voe);Mbo=r(HWr,"xlm"),HWr.forEach(t),Ebo=r(CEe," \u2014 "),S$=n(CEe,"A",{href:!0});var UWr=s(S$);ybo=r(UWr,"XLMWithLMHeadModel"),UWr.forEach(t),wbo=r(CEe," (XLM model)"),CEe.forEach(t),Abo=i(N),Vu=n(N,"LI",{});var MEe=s(Vu);zoe=n(MEe,"STRONG",{});var JWr=s(zoe);Lbo=r(JWr,"xlm-prophetnet"),JWr.forEach(t),Bbo=r(MEe," \u2014 "),P$=n(MEe,"A",{href:!0});var YWr=s(P$);xbo=r(YWr,"XLMProphetNetForCausalLM"),YWr.forEach(t),kbo=r(MEe," (XLMProphetNet model)"),MEe.forEach(t),Rbo=i(N),zu=n(N,"LI",{});var EEe=s(zu);Woe=n(EEe,"STRONG",{});var KWr=s(Woe);Sbo=r(KWr,"xlm-roberta"),KWr.forEach(t),Pbo=r(EEe," \u2014 "),$$=n(EEe,"A",{href:!0});var ZWr=s($$);$bo=r(ZWr,"XLMRobertaForCausalLM"),ZWr.forEach(t),Ibo=r(EEe," (XLM-RoBERTa model)"),EEe.forEach(t),Nbo=i(N),Wu=n(N,"LI",{});var yEe=s(Wu);Qoe=n(yEe,"STRONG",{});var eQr=s(Qoe);jbo=r(eQr,"xlm-roberta-xl"),eQr.forEach(t),Dbo=r(yEe," \u2014 "),I$=n(yEe,"A",{href:!0});var oQr=s(I$);qbo=r(oQr,"XLMRobertaXLForCausalLM"),oQr.forEach(t),Gbo=r(yEe," (XLM-RoBERTa-XL model)"),yEe.forEach(t),Obo=i(N),Qu=n(N,"LI",{});var wEe=s(Qu);Hoe=n(wEe,"STRONG",{});var rQr=s(Hoe);Xbo=r(rQr,"xlnet"),rQr.forEach(t),Vbo=r(wEe," \u2014 "),N$=n(wEe,"A",{href:!0});var tQr=s(N$);zbo=r(tQr,"XLNetLMHeadModel"),tQr.forEach(t),Wbo=r(wEe," (XLNet model)"),wEe.forEach(t),N.forEach(t),Qbo=i(Ot),Hu=n(Ot,"P",{});var AEe=s(Hu);Hbo=r(AEe,"The model is set in evaluation mode by default using "),Uoe=n(AEe,"CODE",{});var aQr=s(Uoe);Ubo=r(aQr,"model.eval()"),aQr.forEach(t),Jbo=r(AEe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Joe=n(AEe,"CODE",{});var nQr=s(Joe);Ybo=r(nQr,"model.train()"),nQr.forEach(t),AEe.forEach(t),Kbo=i(Ot),Yoe=n(Ot,"P",{});var sQr=s(Yoe);Zbo=r(sQr,"Examples:"),sQr.forEach(t),e3o=i(Ot),m(ty.$$.fragment,Ot),Ot.forEach(t),Js.forEach(t),fke=i(c),sd=n(c,"H2",{class:!0});var TSe=s(sd);Uu=n(TSe,"A",{id:!0,class:!0,href:!0});var lQr=s(Uu);Koe=n(lQr,"SPAN",{});var iQr=s(Koe);m(ay.$$.fragment,iQr),iQr.forEach(t),lQr.forEach(t),o3o=i(TSe),Zoe=n(TSe,"SPAN",{});var dQr=s(Zoe);r3o=r(dQr,"AutoModelForMaskedLM"),dQr.forEach(t),TSe.forEach(t),mke=i(c),Zo=n(c,"DIV",{class:!0});var Ks=s(Zo);m(ny.$$.fragment,Ks),t3o=i(Ks),ld=n(Ks,"P",{});var Yz=s(ld);a3o=r(Yz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),ere=n(Yz,"CODE",{});var cQr=s(ere);n3o=r(cQr,"from_pretrained()"),cQr.forEach(t),s3o=r(Yz,"class method or the "),ore=n(Yz,"CODE",{});var fQr=s(ore);l3o=r(fQr,"from_config()"),fQr.forEach(t),i3o=r(Yz,`class
method.`),Yz.forEach(t),d3o=i(Ks),sy=n(Ks,"P",{});var FSe=s(sy);c3o=r(FSe,"This class cannot be instantiated directly using "),rre=n(FSe,"CODE",{});var mQr=s(rre);f3o=r(mQr,"__init__()"),mQr.forEach(t),m3o=r(FSe," (throws an error)."),FSe.forEach(t),g3o=i(Ks),Qr=n(Ks,"DIV",{class:!0});var Zs=s(Qr);m(ly.$$.fragment,Zs),h3o=i(Zs),tre=n(Zs,"P",{});var gQr=s(tre);p3o=r(gQr,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),gQr.forEach(t),_3o=i(Zs),id=n(Zs,"P",{});var Kz=s(id);u3o=r(Kz,`Note:
Loading a model from its configuration file does `),are=n(Kz,"STRONG",{});var hQr=s(are);b3o=r(hQr,"not"),hQr.forEach(t),v3o=r(Kz,` load the model weights. It only affects the
model\u2019s configuration. Use `),nre=n(Kz,"CODE",{});var pQr=s(nre);T3o=r(pQr,"from_pretrained()"),pQr.forEach(t),F3o=r(Kz,"to load the model weights."),Kz.forEach(t),C3o=i(Zs),sre=n(Zs,"P",{});var _Qr=s(sre);M3o=r(_Qr,"Examples:"),_Qr.forEach(t),E3o=i(Zs),m(iy.$$.fragment,Zs),Zs.forEach(t),y3o=i(Ks),Ge=n(Ks,"DIV",{class:!0});var Xt=s(Ge);m(dy.$$.fragment,Xt),w3o=i(Xt),lre=n(Xt,"P",{});var uQr=s(lre);A3o=r(uQr,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),uQr.forEach(t),L3o=i(Xt),Qa=n(Xt,"P",{});var cM=s(Qa);B3o=r(cM,"The model class to instantiate is selected based on the "),ire=n(cM,"CODE",{});var bQr=s(ire);x3o=r(bQr,"model_type"),bQr.forEach(t),k3o=r(cM,` property of the config object (either
passed as an argument or loaded from `),dre=n(cM,"CODE",{});var vQr=s(dre);R3o=r(vQr,"pretrained_model_name_or_path"),vQr.forEach(t),S3o=r(cM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cre=n(cM,"CODE",{});var TQr=s(cre);P3o=r(TQr,"pretrained_model_name_or_path"),TQr.forEach(t),$3o=r(cM,":"),cM.forEach(t),I3o=i(Xt),I=n(Xt,"UL",{});var j=s(I);Ju=n(j,"LI",{});var LEe=s(Ju);fre=n(LEe,"STRONG",{});var FQr=s(fre);N3o=r(FQr,"albert"),FQr.forEach(t),j3o=r(LEe," \u2014 "),j$=n(LEe,"A",{href:!0});var CQr=s(j$);D3o=r(CQr,"AlbertForMaskedLM"),CQr.forEach(t),q3o=r(LEe," (ALBERT model)"),LEe.forEach(t),G3o=i(j),Yu=n(j,"LI",{});var BEe=s(Yu);mre=n(BEe,"STRONG",{});var MQr=s(mre);O3o=r(MQr,"bart"),MQr.forEach(t),X3o=r(BEe," \u2014 "),D$=n(BEe,"A",{href:!0});var EQr=s(D$);V3o=r(EQr,"BartForConditionalGeneration"),EQr.forEach(t),z3o=r(BEe," (BART model)"),BEe.forEach(t),W3o=i(j),Ku=n(j,"LI",{});var xEe=s(Ku);gre=n(xEe,"STRONG",{});var yQr=s(gre);Q3o=r(yQr,"bert"),yQr.forEach(t),H3o=r(xEe," \u2014 "),q$=n(xEe,"A",{href:!0});var wQr=s(q$);U3o=r(wQr,"BertForMaskedLM"),wQr.forEach(t),J3o=r(xEe," (BERT model)"),xEe.forEach(t),Y3o=i(j),Zu=n(j,"LI",{});var kEe=s(Zu);hre=n(kEe,"STRONG",{});var AQr=s(hre);K3o=r(AQr,"big_bird"),AQr.forEach(t),Z3o=r(kEe," \u2014 "),G$=n(kEe,"A",{href:!0});var LQr=s(G$);e5o=r(LQr,"BigBirdForMaskedLM"),LQr.forEach(t),o5o=r(kEe," (BigBird model)"),kEe.forEach(t),r5o=i(j),e1=n(j,"LI",{});var REe=s(e1);pre=n(REe,"STRONG",{});var BQr=s(pre);t5o=r(BQr,"camembert"),BQr.forEach(t),a5o=r(REe," \u2014 "),O$=n(REe,"A",{href:!0});var xQr=s(O$);n5o=r(xQr,"CamembertForMaskedLM"),xQr.forEach(t),s5o=r(REe," (CamemBERT model)"),REe.forEach(t),l5o=i(j),o1=n(j,"LI",{});var SEe=s(o1);_re=n(SEe,"STRONG",{});var kQr=s(_re);i5o=r(kQr,"convbert"),kQr.forEach(t),d5o=r(SEe," \u2014 "),X$=n(SEe,"A",{href:!0});var RQr=s(X$);c5o=r(RQr,"ConvBertForMaskedLM"),RQr.forEach(t),f5o=r(SEe," (ConvBERT model)"),SEe.forEach(t),m5o=i(j),r1=n(j,"LI",{});var PEe=s(r1);ure=n(PEe,"STRONG",{});var SQr=s(ure);g5o=r(SQr,"data2vec-text"),SQr.forEach(t),h5o=r(PEe," \u2014 "),V$=n(PEe,"A",{href:!0});var PQr=s(V$);p5o=r(PQr,"Data2VecTextForMaskedLM"),PQr.forEach(t),_5o=r(PEe," (Data2VecText model)"),PEe.forEach(t),u5o=i(j),t1=n(j,"LI",{});var $Ee=s(t1);bre=n($Ee,"STRONG",{});var $Qr=s(bre);b5o=r($Qr,"deberta"),$Qr.forEach(t),v5o=r($Ee," \u2014 "),z$=n($Ee,"A",{href:!0});var IQr=s(z$);T5o=r(IQr,"DebertaForMaskedLM"),IQr.forEach(t),F5o=r($Ee," (DeBERTa model)"),$Ee.forEach(t),C5o=i(j),a1=n(j,"LI",{});var IEe=s(a1);vre=n(IEe,"STRONG",{});var NQr=s(vre);M5o=r(NQr,"deberta-v2"),NQr.forEach(t),E5o=r(IEe," \u2014 "),W$=n(IEe,"A",{href:!0});var jQr=s(W$);y5o=r(jQr,"DebertaV2ForMaskedLM"),jQr.forEach(t),w5o=r(IEe," (DeBERTa-v2 model)"),IEe.forEach(t),A5o=i(j),n1=n(j,"LI",{});var NEe=s(n1);Tre=n(NEe,"STRONG",{});var DQr=s(Tre);L5o=r(DQr,"distilbert"),DQr.forEach(t),B5o=r(NEe," \u2014 "),Q$=n(NEe,"A",{href:!0});var qQr=s(Q$);x5o=r(qQr,"DistilBertForMaskedLM"),qQr.forEach(t),k5o=r(NEe," (DistilBERT model)"),NEe.forEach(t),R5o=i(j),s1=n(j,"LI",{});var jEe=s(s1);Fre=n(jEe,"STRONG",{});var GQr=s(Fre);S5o=r(GQr,"electra"),GQr.forEach(t),P5o=r(jEe," \u2014 "),H$=n(jEe,"A",{href:!0});var OQr=s(H$);$5o=r(OQr,"ElectraForMaskedLM"),OQr.forEach(t),I5o=r(jEe," (ELECTRA model)"),jEe.forEach(t),N5o=i(j),l1=n(j,"LI",{});var DEe=s(l1);Cre=n(DEe,"STRONG",{});var XQr=s(Cre);j5o=r(XQr,"flaubert"),XQr.forEach(t),D5o=r(DEe," \u2014 "),U$=n(DEe,"A",{href:!0});var VQr=s(U$);q5o=r(VQr,"FlaubertWithLMHeadModel"),VQr.forEach(t),G5o=r(DEe," (FlauBERT model)"),DEe.forEach(t),O5o=i(j),i1=n(j,"LI",{});var qEe=s(i1);Mre=n(qEe,"STRONG",{});var zQr=s(Mre);X5o=r(zQr,"fnet"),zQr.forEach(t),V5o=r(qEe," \u2014 "),J$=n(qEe,"A",{href:!0});var WQr=s(J$);z5o=r(WQr,"FNetForMaskedLM"),WQr.forEach(t),W5o=r(qEe," (FNet model)"),qEe.forEach(t),Q5o=i(j),d1=n(j,"LI",{});var GEe=s(d1);Ere=n(GEe,"STRONG",{});var QQr=s(Ere);H5o=r(QQr,"funnel"),QQr.forEach(t),U5o=r(GEe," \u2014 "),Y$=n(GEe,"A",{href:!0});var HQr=s(Y$);J5o=r(HQr,"FunnelForMaskedLM"),HQr.forEach(t),Y5o=r(GEe," (Funnel Transformer model)"),GEe.forEach(t),K5o=i(j),c1=n(j,"LI",{});var OEe=s(c1);yre=n(OEe,"STRONG",{});var UQr=s(yre);Z5o=r(UQr,"ibert"),UQr.forEach(t),e2o=r(OEe," \u2014 "),K$=n(OEe,"A",{href:!0});var JQr=s(K$);o2o=r(JQr,"IBertForMaskedLM"),JQr.forEach(t),r2o=r(OEe," (I-BERT model)"),OEe.forEach(t),t2o=i(j),f1=n(j,"LI",{});var XEe=s(f1);wre=n(XEe,"STRONG",{});var YQr=s(wre);a2o=r(YQr,"layoutlm"),YQr.forEach(t),n2o=r(XEe," \u2014 "),Z$=n(XEe,"A",{href:!0});var KQr=s(Z$);s2o=r(KQr,"LayoutLMForMaskedLM"),KQr.forEach(t),l2o=r(XEe," (LayoutLM model)"),XEe.forEach(t),i2o=i(j),m1=n(j,"LI",{});var VEe=s(m1);Are=n(VEe,"STRONG",{});var ZQr=s(Are);d2o=r(ZQr,"longformer"),ZQr.forEach(t),c2o=r(VEe," \u2014 "),eI=n(VEe,"A",{href:!0});var eHr=s(eI);f2o=r(eHr,"LongformerForMaskedLM"),eHr.forEach(t),m2o=r(VEe," (Longformer model)"),VEe.forEach(t),g2o=i(j),g1=n(j,"LI",{});var zEe=s(g1);Lre=n(zEe,"STRONG",{});var oHr=s(Lre);h2o=r(oHr,"mbart"),oHr.forEach(t),p2o=r(zEe," \u2014 "),oI=n(zEe,"A",{href:!0});var rHr=s(oI);_2o=r(rHr,"MBartForConditionalGeneration"),rHr.forEach(t),u2o=r(zEe," (mBART model)"),zEe.forEach(t),b2o=i(j),h1=n(j,"LI",{});var WEe=s(h1);Bre=n(WEe,"STRONG",{});var tHr=s(Bre);v2o=r(tHr,"megatron-bert"),tHr.forEach(t),T2o=r(WEe," \u2014 "),rI=n(WEe,"A",{href:!0});var aHr=s(rI);F2o=r(aHr,"MegatronBertForMaskedLM"),aHr.forEach(t),C2o=r(WEe," (MegatronBert model)"),WEe.forEach(t),M2o=i(j),p1=n(j,"LI",{});var QEe=s(p1);xre=n(QEe,"STRONG",{});var nHr=s(xre);E2o=r(nHr,"mobilebert"),nHr.forEach(t),y2o=r(QEe," \u2014 "),tI=n(QEe,"A",{href:!0});var sHr=s(tI);w2o=r(sHr,"MobileBertForMaskedLM"),sHr.forEach(t),A2o=r(QEe," (MobileBERT model)"),QEe.forEach(t),L2o=i(j),_1=n(j,"LI",{});var HEe=s(_1);kre=n(HEe,"STRONG",{});var lHr=s(kre);B2o=r(lHr,"mpnet"),lHr.forEach(t),x2o=r(HEe," \u2014 "),aI=n(HEe,"A",{href:!0});var iHr=s(aI);k2o=r(iHr,"MPNetForMaskedLM"),iHr.forEach(t),R2o=r(HEe," (MPNet model)"),HEe.forEach(t),S2o=i(j),u1=n(j,"LI",{});var UEe=s(u1);Rre=n(UEe,"STRONG",{});var dHr=s(Rre);P2o=r(dHr,"nystromformer"),dHr.forEach(t),$2o=r(UEe," \u2014 "),nI=n(UEe,"A",{href:!0});var cHr=s(nI);I2o=r(cHr,"NystromformerForMaskedLM"),cHr.forEach(t),N2o=r(UEe," (Nystromformer model)"),UEe.forEach(t),j2o=i(j),b1=n(j,"LI",{});var JEe=s(b1);Sre=n(JEe,"STRONG",{});var fHr=s(Sre);D2o=r(fHr,"perceiver"),fHr.forEach(t),q2o=r(JEe," \u2014 "),sI=n(JEe,"A",{href:!0});var mHr=s(sI);G2o=r(mHr,"PerceiverForMaskedLM"),mHr.forEach(t),O2o=r(JEe," (Perceiver model)"),JEe.forEach(t),X2o=i(j),v1=n(j,"LI",{});var YEe=s(v1);Pre=n(YEe,"STRONG",{});var gHr=s(Pre);V2o=r(gHr,"qdqbert"),gHr.forEach(t),z2o=r(YEe," \u2014 "),lI=n(YEe,"A",{href:!0});var hHr=s(lI);W2o=r(hHr,"QDQBertForMaskedLM"),hHr.forEach(t),Q2o=r(YEe," (QDQBert model)"),YEe.forEach(t),H2o=i(j),T1=n(j,"LI",{});var KEe=s(T1);$re=n(KEe,"STRONG",{});var pHr=s($re);U2o=r(pHr,"reformer"),pHr.forEach(t),J2o=r(KEe," \u2014 "),iI=n(KEe,"A",{href:!0});var _Hr=s(iI);Y2o=r(_Hr,"ReformerForMaskedLM"),_Hr.forEach(t),K2o=r(KEe," (Reformer model)"),KEe.forEach(t),Z2o=i(j),F1=n(j,"LI",{});var ZEe=s(F1);Ire=n(ZEe,"STRONG",{});var uHr=s(Ire);evo=r(uHr,"rembert"),uHr.forEach(t),ovo=r(ZEe," \u2014 "),dI=n(ZEe,"A",{href:!0});var bHr=s(dI);rvo=r(bHr,"RemBertForMaskedLM"),bHr.forEach(t),tvo=r(ZEe," (RemBERT model)"),ZEe.forEach(t),avo=i(j),C1=n(j,"LI",{});var eye=s(C1);Nre=n(eye,"STRONG",{});var vHr=s(Nre);nvo=r(vHr,"roberta"),vHr.forEach(t),svo=r(eye," \u2014 "),cI=n(eye,"A",{href:!0});var THr=s(cI);lvo=r(THr,"RobertaForMaskedLM"),THr.forEach(t),ivo=r(eye," (RoBERTa model)"),eye.forEach(t),dvo=i(j),M1=n(j,"LI",{});var oye=s(M1);jre=n(oye,"STRONG",{});var FHr=s(jre);cvo=r(FHr,"roformer"),FHr.forEach(t),fvo=r(oye," \u2014 "),fI=n(oye,"A",{href:!0});var CHr=s(fI);mvo=r(CHr,"RoFormerForMaskedLM"),CHr.forEach(t),gvo=r(oye," (RoFormer model)"),oye.forEach(t),hvo=i(j),E1=n(j,"LI",{});var rye=s(E1);Dre=n(rye,"STRONG",{});var MHr=s(Dre);pvo=r(MHr,"squeezebert"),MHr.forEach(t),_vo=r(rye," \u2014 "),mI=n(rye,"A",{href:!0});var EHr=s(mI);uvo=r(EHr,"SqueezeBertForMaskedLM"),EHr.forEach(t),bvo=r(rye," (SqueezeBERT model)"),rye.forEach(t),vvo=i(j),y1=n(j,"LI",{});var tye=s(y1);qre=n(tye,"STRONG",{});var yHr=s(qre);Tvo=r(yHr,"tapas"),yHr.forEach(t),Fvo=r(tye," \u2014 "),gI=n(tye,"A",{href:!0});var wHr=s(gI);Cvo=r(wHr,"TapasForMaskedLM"),wHr.forEach(t),Mvo=r(tye," (TAPAS model)"),tye.forEach(t),Evo=i(j),w1=n(j,"LI",{});var aye=s(w1);Gre=n(aye,"STRONG",{});var AHr=s(Gre);yvo=r(AHr,"wav2vec2"),AHr.forEach(t),wvo=r(aye," \u2014 "),Ore=n(aye,"CODE",{});var LHr=s(Ore);Avo=r(LHr,"Wav2Vec2ForMaskedLM"),LHr.forEach(t),Lvo=r(aye,"(Wav2Vec2 model)"),aye.forEach(t),Bvo=i(j),A1=n(j,"LI",{});var nye=s(A1);Xre=n(nye,"STRONG",{});var BHr=s(Xre);xvo=r(BHr,"xlm"),BHr.forEach(t),kvo=r(nye," \u2014 "),hI=n(nye,"A",{href:!0});var xHr=s(hI);Rvo=r(xHr,"XLMWithLMHeadModel"),xHr.forEach(t),Svo=r(nye," (XLM model)"),nye.forEach(t),Pvo=i(j),L1=n(j,"LI",{});var sye=s(L1);Vre=n(sye,"STRONG",{});var kHr=s(Vre);$vo=r(kHr,"xlm-roberta"),kHr.forEach(t),Ivo=r(sye," \u2014 "),pI=n(sye,"A",{href:!0});var RHr=s(pI);Nvo=r(RHr,"XLMRobertaForMaskedLM"),RHr.forEach(t),jvo=r(sye," (XLM-RoBERTa model)"),sye.forEach(t),Dvo=i(j),B1=n(j,"LI",{});var lye=s(B1);zre=n(lye,"STRONG",{});var SHr=s(zre);qvo=r(SHr,"xlm-roberta-xl"),SHr.forEach(t),Gvo=r(lye," \u2014 "),_I=n(lye,"A",{href:!0});var PHr=s(_I);Ovo=r(PHr,"XLMRobertaXLForMaskedLM"),PHr.forEach(t),Xvo=r(lye," (XLM-RoBERTa-XL model)"),lye.forEach(t),Vvo=i(j),x1=n(j,"LI",{});var iye=s(x1);Wre=n(iye,"STRONG",{});var $Hr=s(Wre);zvo=r($Hr,"yoso"),$Hr.forEach(t),Wvo=r(iye," \u2014 "),uI=n(iye,"A",{href:!0});var IHr=s(uI);Qvo=r(IHr,"YosoForMaskedLM"),IHr.forEach(t),Hvo=r(iye," (YOSO model)"),iye.forEach(t),j.forEach(t),Uvo=i(Xt),k1=n(Xt,"P",{});var dye=s(k1);Jvo=r(dye,"The model is set in evaluation mode by default using "),Qre=n(dye,"CODE",{});var NHr=s(Qre);Yvo=r(NHr,"model.eval()"),NHr.forEach(t),Kvo=r(dye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hre=n(dye,"CODE",{});var jHr=s(Hre);Zvo=r(jHr,"model.train()"),jHr.forEach(t),dye.forEach(t),e6o=i(Xt),Ure=n(Xt,"P",{});var DHr=s(Ure);o6o=r(DHr,"Examples:"),DHr.forEach(t),r6o=i(Xt),m(cy.$$.fragment,Xt),Xt.forEach(t),Ks.forEach(t),gke=i(c),dd=n(c,"H2",{class:!0});var CSe=s(dd);R1=n(CSe,"A",{id:!0,class:!0,href:!0});var qHr=s(R1);Jre=n(qHr,"SPAN",{});var GHr=s(Jre);m(fy.$$.fragment,GHr),GHr.forEach(t),qHr.forEach(t),t6o=i(CSe),Yre=n(CSe,"SPAN",{});var OHr=s(Yre);a6o=r(OHr,"AutoModelForSeq2SeqLM"),OHr.forEach(t),CSe.forEach(t),hke=i(c),er=n(c,"DIV",{class:!0});var el=s(er);m(my.$$.fragment,el),n6o=i(el),cd=n(el,"P",{});var Zz=s(cd);s6o=r(Zz,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),Kre=n(Zz,"CODE",{});var XHr=s(Kre);l6o=r(XHr,"from_pretrained()"),XHr.forEach(t),i6o=r(Zz,"class method or the "),Zre=n(Zz,"CODE",{});var VHr=s(Zre);d6o=r(VHr,"from_config()"),VHr.forEach(t),c6o=r(Zz,`class
method.`),Zz.forEach(t),f6o=i(el),gy=n(el,"P",{});var MSe=s(gy);m6o=r(MSe,"This class cannot be instantiated directly using "),ete=n(MSe,"CODE",{});var zHr=s(ete);g6o=r(zHr,"__init__()"),zHr.forEach(t),h6o=r(MSe," (throws an error)."),MSe.forEach(t),p6o=i(el),Hr=n(el,"DIV",{class:!0});var ol=s(Hr);m(hy.$$.fragment,ol),_6o=i(ol),ote=n(ol,"P",{});var WHr=s(ote);u6o=r(WHr,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),WHr.forEach(t),b6o=i(ol),fd=n(ol,"P",{});var eW=s(fd);v6o=r(eW,`Note:
Loading a model from its configuration file does `),rte=n(eW,"STRONG",{});var QHr=s(rte);T6o=r(QHr,"not"),QHr.forEach(t),F6o=r(eW,` load the model weights. It only affects the
model\u2019s configuration. Use `),tte=n(eW,"CODE",{});var HHr=s(tte);C6o=r(HHr,"from_pretrained()"),HHr.forEach(t),M6o=r(eW,"to load the model weights."),eW.forEach(t),E6o=i(ol),ate=n(ol,"P",{});var UHr=s(ate);y6o=r(UHr,"Examples:"),UHr.forEach(t),w6o=i(ol),m(py.$$.fragment,ol),ol.forEach(t),A6o=i(el),Oe=n(el,"DIV",{class:!0});var Vt=s(Oe);m(_y.$$.fragment,Vt),L6o=i(Vt),nte=n(Vt,"P",{});var JHr=s(nte);B6o=r(JHr,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),JHr.forEach(t),x6o=i(Vt),Ha=n(Vt,"P",{});var fM=s(Ha);k6o=r(fM,"The model class to instantiate is selected based on the "),ste=n(fM,"CODE",{});var YHr=s(ste);R6o=r(YHr,"model_type"),YHr.forEach(t),S6o=r(fM,` property of the config object (either
passed as an argument or loaded from `),lte=n(fM,"CODE",{});var KHr=s(lte);P6o=r(KHr,"pretrained_model_name_or_path"),KHr.forEach(t),$6o=r(fM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ite=n(fM,"CODE",{});var ZHr=s(ite);I6o=r(ZHr,"pretrained_model_name_or_path"),ZHr.forEach(t),N6o=r(fM,":"),fM.forEach(t),j6o=i(Vt),se=n(Vt,"UL",{});var ie=s(se);S1=n(ie,"LI",{});var cye=s(S1);dte=n(cye,"STRONG",{});var eUr=s(dte);D6o=r(eUr,"bart"),eUr.forEach(t),q6o=r(cye," \u2014 "),bI=n(cye,"A",{href:!0});var oUr=s(bI);G6o=r(oUr,"BartForConditionalGeneration"),oUr.forEach(t),O6o=r(cye," (BART model)"),cye.forEach(t),X6o=i(ie),P1=n(ie,"LI",{});var fye=s(P1);cte=n(fye,"STRONG",{});var rUr=s(cte);V6o=r(rUr,"bigbird_pegasus"),rUr.forEach(t),z6o=r(fye," \u2014 "),vI=n(fye,"A",{href:!0});var tUr=s(vI);W6o=r(tUr,"BigBirdPegasusForConditionalGeneration"),tUr.forEach(t),Q6o=r(fye," (BigBirdPegasus model)"),fye.forEach(t),H6o=i(ie),$1=n(ie,"LI",{});var mye=s($1);fte=n(mye,"STRONG",{});var aUr=s(fte);U6o=r(aUr,"blenderbot"),aUr.forEach(t),J6o=r(mye," \u2014 "),TI=n(mye,"A",{href:!0});var nUr=s(TI);Y6o=r(nUr,"BlenderbotForConditionalGeneration"),nUr.forEach(t),K6o=r(mye," (Blenderbot model)"),mye.forEach(t),Z6o=i(ie),I1=n(ie,"LI",{});var gye=s(I1);mte=n(gye,"STRONG",{});var sUr=s(mte);eTo=r(sUr,"blenderbot-small"),sUr.forEach(t),oTo=r(gye," \u2014 "),FI=n(gye,"A",{href:!0});var lUr=s(FI);rTo=r(lUr,"BlenderbotSmallForConditionalGeneration"),lUr.forEach(t),tTo=r(gye," (BlenderbotSmall model)"),gye.forEach(t),aTo=i(ie),N1=n(ie,"LI",{});var hye=s(N1);gte=n(hye,"STRONG",{});var iUr=s(gte);nTo=r(iUr,"encoder-decoder"),iUr.forEach(t),sTo=r(hye," \u2014 "),CI=n(hye,"A",{href:!0});var dUr=s(CI);lTo=r(dUr,"EncoderDecoderModel"),dUr.forEach(t),iTo=r(hye," (Encoder decoder model)"),hye.forEach(t),dTo=i(ie),j1=n(ie,"LI",{});var pye=s(j1);hte=n(pye,"STRONG",{});var cUr=s(hte);cTo=r(cUr,"fsmt"),cUr.forEach(t),fTo=r(pye," \u2014 "),MI=n(pye,"A",{href:!0});var fUr=s(MI);mTo=r(fUr,"FSMTForConditionalGeneration"),fUr.forEach(t),gTo=r(pye," (FairSeq Machine-Translation model)"),pye.forEach(t),hTo=i(ie),D1=n(ie,"LI",{});var _ye=s(D1);pte=n(_ye,"STRONG",{});var mUr=s(pte);pTo=r(mUr,"led"),mUr.forEach(t),_To=r(_ye," \u2014 "),EI=n(_ye,"A",{href:!0});var gUr=s(EI);uTo=r(gUr,"LEDForConditionalGeneration"),gUr.forEach(t),bTo=r(_ye," (LED model)"),_ye.forEach(t),vTo=i(ie),q1=n(ie,"LI",{});var uye=s(q1);_te=n(uye,"STRONG",{});var hUr=s(_te);TTo=r(hUr,"m2m_100"),hUr.forEach(t),FTo=r(uye," \u2014 "),yI=n(uye,"A",{href:!0});var pUr=s(yI);CTo=r(pUr,"M2M100ForConditionalGeneration"),pUr.forEach(t),MTo=r(uye," (M2M100 model)"),uye.forEach(t),ETo=i(ie),G1=n(ie,"LI",{});var bye=s(G1);ute=n(bye,"STRONG",{});var _Ur=s(ute);yTo=r(_Ur,"marian"),_Ur.forEach(t),wTo=r(bye," \u2014 "),wI=n(bye,"A",{href:!0});var uUr=s(wI);ATo=r(uUr,"MarianMTModel"),uUr.forEach(t),LTo=r(bye," (Marian model)"),bye.forEach(t),BTo=i(ie),O1=n(ie,"LI",{});var vye=s(O1);bte=n(vye,"STRONG",{});var bUr=s(bte);xTo=r(bUr,"mbart"),bUr.forEach(t),kTo=r(vye," \u2014 "),AI=n(vye,"A",{href:!0});var vUr=s(AI);RTo=r(vUr,"MBartForConditionalGeneration"),vUr.forEach(t),STo=r(vye," (mBART model)"),vye.forEach(t),PTo=i(ie),X1=n(ie,"LI",{});var Tye=s(X1);vte=n(Tye,"STRONG",{});var TUr=s(vte);$To=r(TUr,"mt5"),TUr.forEach(t),ITo=r(Tye," \u2014 "),LI=n(Tye,"A",{href:!0});var FUr=s(LI);NTo=r(FUr,"MT5ForConditionalGeneration"),FUr.forEach(t),jTo=r(Tye," (mT5 model)"),Tye.forEach(t),DTo=i(ie),V1=n(ie,"LI",{});var Fye=s(V1);Tte=n(Fye,"STRONG",{});var CUr=s(Tte);qTo=r(CUr,"pegasus"),CUr.forEach(t),GTo=r(Fye," \u2014 "),BI=n(Fye,"A",{href:!0});var MUr=s(BI);OTo=r(MUr,"PegasusForConditionalGeneration"),MUr.forEach(t),XTo=r(Fye," (Pegasus model)"),Fye.forEach(t),VTo=i(ie),z1=n(ie,"LI",{});var Cye=s(z1);Fte=n(Cye,"STRONG",{});var EUr=s(Fte);zTo=r(EUr,"plbart"),EUr.forEach(t),WTo=r(Cye," \u2014 "),xI=n(Cye,"A",{href:!0});var yUr=s(xI);QTo=r(yUr,"PLBartForConditionalGeneration"),yUr.forEach(t),HTo=r(Cye," (PLBart model)"),Cye.forEach(t),UTo=i(ie),W1=n(ie,"LI",{});var Mye=s(W1);Cte=n(Mye,"STRONG",{});var wUr=s(Cte);JTo=r(wUr,"prophetnet"),wUr.forEach(t),YTo=r(Mye," \u2014 "),kI=n(Mye,"A",{href:!0});var AUr=s(kI);KTo=r(AUr,"ProphetNetForConditionalGeneration"),AUr.forEach(t),ZTo=r(Mye," (ProphetNet model)"),Mye.forEach(t),eFo=i(ie),Q1=n(ie,"LI",{});var Eye=s(Q1);Mte=n(Eye,"STRONG",{});var LUr=s(Mte);oFo=r(LUr,"t5"),LUr.forEach(t),rFo=r(Eye," \u2014 "),RI=n(Eye,"A",{href:!0});var BUr=s(RI);tFo=r(BUr,"T5ForConditionalGeneration"),BUr.forEach(t),aFo=r(Eye," (T5 model)"),Eye.forEach(t),nFo=i(ie),H1=n(ie,"LI",{});var yye=s(H1);Ete=n(yye,"STRONG",{});var xUr=s(Ete);sFo=r(xUr,"xlm-prophetnet"),xUr.forEach(t),lFo=r(yye," \u2014 "),SI=n(yye,"A",{href:!0});var kUr=s(SI);iFo=r(kUr,"XLMProphetNetForConditionalGeneration"),kUr.forEach(t),dFo=r(yye," (XLMProphetNet model)"),yye.forEach(t),ie.forEach(t),cFo=i(Vt),U1=n(Vt,"P",{});var wye=s(U1);fFo=r(wye,"The model is set in evaluation mode by default using "),yte=n(wye,"CODE",{});var RUr=s(yte);mFo=r(RUr,"model.eval()"),RUr.forEach(t),gFo=r(wye,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),wte=n(wye,"CODE",{});var SUr=s(wte);hFo=r(SUr,"model.train()"),SUr.forEach(t),wye.forEach(t),pFo=i(Vt),Ate=n(Vt,"P",{});var PUr=s(Ate);_Fo=r(PUr,"Examples:"),PUr.forEach(t),uFo=i(Vt),m(uy.$$.fragment,Vt),Vt.forEach(t),el.forEach(t),pke=i(c),md=n(c,"H2",{class:!0});var ESe=s(md);J1=n(ESe,"A",{id:!0,class:!0,href:!0});var $Ur=s(J1);Lte=n($Ur,"SPAN",{});var IUr=s(Lte);m(by.$$.fragment,IUr),IUr.forEach(t),$Ur.forEach(t),bFo=i(ESe),Bte=n(ESe,"SPAN",{});var NUr=s(Bte);vFo=r(NUr,"AutoModelForSequenceClassification"),NUr.forEach(t),ESe.forEach(t),_ke=i(c),or=n(c,"DIV",{class:!0});var rl=s(or);m(vy.$$.fragment,rl),TFo=i(rl),gd=n(rl,"P",{});var oW=s(gd);FFo=r(oW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),xte=n(oW,"CODE",{});var jUr=s(xte);CFo=r(jUr,"from_pretrained()"),jUr.forEach(t),MFo=r(oW,"class method or the "),kte=n(oW,"CODE",{});var DUr=s(kte);EFo=r(DUr,"from_config()"),DUr.forEach(t),yFo=r(oW,`class
method.`),oW.forEach(t),wFo=i(rl),Ty=n(rl,"P",{});var ySe=s(Ty);AFo=r(ySe,"This class cannot be instantiated directly using "),Rte=n(ySe,"CODE",{});var qUr=s(Rte);LFo=r(qUr,"__init__()"),qUr.forEach(t),BFo=r(ySe," (throws an error)."),ySe.forEach(t),xFo=i(rl),Ur=n(rl,"DIV",{class:!0});var tl=s(Ur);m(Fy.$$.fragment,tl),kFo=i(tl),Ste=n(tl,"P",{});var GUr=s(Ste);RFo=r(GUr,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),GUr.forEach(t),SFo=i(tl),hd=n(tl,"P",{});var rW=s(hd);PFo=r(rW,`Note:
Loading a model from its configuration file does `),Pte=n(rW,"STRONG",{});var OUr=s(Pte);$Fo=r(OUr,"not"),OUr.forEach(t),IFo=r(rW,` load the model weights. It only affects the
model\u2019s configuration. Use `),$te=n(rW,"CODE",{});var XUr=s($te);NFo=r(XUr,"from_pretrained()"),XUr.forEach(t),jFo=r(rW,"to load the model weights."),rW.forEach(t),DFo=i(tl),Ite=n(tl,"P",{});var VUr=s(Ite);qFo=r(VUr,"Examples:"),VUr.forEach(t),GFo=i(tl),m(Cy.$$.fragment,tl),tl.forEach(t),OFo=i(rl),Xe=n(rl,"DIV",{class:!0});var zt=s(Xe);m(My.$$.fragment,zt),XFo=i(zt),Nte=n(zt,"P",{});var zUr=s(Nte);VFo=r(zUr,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),zUr.forEach(t),zFo=i(zt),Ua=n(zt,"P",{});var mM=s(Ua);WFo=r(mM,"The model class to instantiate is selected based on the "),jte=n(mM,"CODE",{});var WUr=s(jte);QFo=r(WUr,"model_type"),WUr.forEach(t),HFo=r(mM,` property of the config object (either
passed as an argument or loaded from `),Dte=n(mM,"CODE",{});var QUr=s(Dte);UFo=r(QUr,"pretrained_model_name_or_path"),QUr.forEach(t),JFo=r(mM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),qte=n(mM,"CODE",{});var HUr=s(qte);YFo=r(HUr,"pretrained_model_name_or_path"),HUr.forEach(t),KFo=r(mM,":"),mM.forEach(t),ZFo=i(zt),A=n(zt,"UL",{});var L=s(A);Y1=n(L,"LI",{});var Aye=s(Y1);Gte=n(Aye,"STRONG",{});var UUr=s(Gte);eCo=r(UUr,"albert"),UUr.forEach(t),oCo=r(Aye," \u2014 "),PI=n(Aye,"A",{href:!0});var JUr=s(PI);rCo=r(JUr,"AlbertForSequenceClassification"),JUr.forEach(t),tCo=r(Aye," (ALBERT model)"),Aye.forEach(t),aCo=i(L),K1=n(L,"LI",{});var Lye=s(K1);Ote=n(Lye,"STRONG",{});var YUr=s(Ote);nCo=r(YUr,"bart"),YUr.forEach(t),sCo=r(Lye," \u2014 "),$I=n(Lye,"A",{href:!0});var KUr=s($I);lCo=r(KUr,"BartForSequenceClassification"),KUr.forEach(t),iCo=r(Lye," (BART model)"),Lye.forEach(t),dCo=i(L),Z1=n(L,"LI",{});var Bye=s(Z1);Xte=n(Bye,"STRONG",{});var ZUr=s(Xte);cCo=r(ZUr,"bert"),ZUr.forEach(t),fCo=r(Bye," \u2014 "),II=n(Bye,"A",{href:!0});var eJr=s(II);mCo=r(eJr,"BertForSequenceClassification"),eJr.forEach(t),gCo=r(Bye," (BERT model)"),Bye.forEach(t),hCo=i(L),e4=n(L,"LI",{});var xye=s(e4);Vte=n(xye,"STRONG",{});var oJr=s(Vte);pCo=r(oJr,"big_bird"),oJr.forEach(t),_Co=r(xye," \u2014 "),NI=n(xye,"A",{href:!0});var rJr=s(NI);uCo=r(rJr,"BigBirdForSequenceClassification"),rJr.forEach(t),bCo=r(xye," (BigBird model)"),xye.forEach(t),vCo=i(L),o4=n(L,"LI",{});var kye=s(o4);zte=n(kye,"STRONG",{});var tJr=s(zte);TCo=r(tJr,"bigbird_pegasus"),tJr.forEach(t),FCo=r(kye," \u2014 "),jI=n(kye,"A",{href:!0});var aJr=s(jI);CCo=r(aJr,"BigBirdPegasusForSequenceClassification"),aJr.forEach(t),MCo=r(kye," (BigBirdPegasus model)"),kye.forEach(t),ECo=i(L),r4=n(L,"LI",{});var Rye=s(r4);Wte=n(Rye,"STRONG",{});var nJr=s(Wte);yCo=r(nJr,"camembert"),nJr.forEach(t),wCo=r(Rye," \u2014 "),DI=n(Rye,"A",{href:!0});var sJr=s(DI);ACo=r(sJr,"CamembertForSequenceClassification"),sJr.forEach(t),LCo=r(Rye," (CamemBERT model)"),Rye.forEach(t),BCo=i(L),t4=n(L,"LI",{});var Sye=s(t4);Qte=n(Sye,"STRONG",{});var lJr=s(Qte);xCo=r(lJr,"canine"),lJr.forEach(t),kCo=r(Sye," \u2014 "),qI=n(Sye,"A",{href:!0});var iJr=s(qI);RCo=r(iJr,"CanineForSequenceClassification"),iJr.forEach(t),SCo=r(Sye," (Canine model)"),Sye.forEach(t),PCo=i(L),a4=n(L,"LI",{});var Pye=s(a4);Hte=n(Pye,"STRONG",{});var dJr=s(Hte);$Co=r(dJr,"convbert"),dJr.forEach(t),ICo=r(Pye," \u2014 "),GI=n(Pye,"A",{href:!0});var cJr=s(GI);NCo=r(cJr,"ConvBertForSequenceClassification"),cJr.forEach(t),jCo=r(Pye," (ConvBERT model)"),Pye.forEach(t),DCo=i(L),n4=n(L,"LI",{});var $ye=s(n4);Ute=n($ye,"STRONG",{});var fJr=s(Ute);qCo=r(fJr,"ctrl"),fJr.forEach(t),GCo=r($ye," \u2014 "),OI=n($ye,"A",{href:!0});var mJr=s(OI);OCo=r(mJr,"CTRLForSequenceClassification"),mJr.forEach(t),XCo=r($ye," (CTRL model)"),$ye.forEach(t),VCo=i(L),s4=n(L,"LI",{});var Iye=s(s4);Jte=n(Iye,"STRONG",{});var gJr=s(Jte);zCo=r(gJr,"data2vec-text"),gJr.forEach(t),WCo=r(Iye," \u2014 "),XI=n(Iye,"A",{href:!0});var hJr=s(XI);QCo=r(hJr,"Data2VecTextForSequenceClassification"),hJr.forEach(t),HCo=r(Iye," (Data2VecText model)"),Iye.forEach(t),UCo=i(L),l4=n(L,"LI",{});var Nye=s(l4);Yte=n(Nye,"STRONG",{});var pJr=s(Yte);JCo=r(pJr,"deberta"),pJr.forEach(t),YCo=r(Nye," \u2014 "),VI=n(Nye,"A",{href:!0});var _Jr=s(VI);KCo=r(_Jr,"DebertaForSequenceClassification"),_Jr.forEach(t),ZCo=r(Nye," (DeBERTa model)"),Nye.forEach(t),eMo=i(L),i4=n(L,"LI",{});var jye=s(i4);Kte=n(jye,"STRONG",{});var uJr=s(Kte);oMo=r(uJr,"deberta-v2"),uJr.forEach(t),rMo=r(jye," \u2014 "),zI=n(jye,"A",{href:!0});var bJr=s(zI);tMo=r(bJr,"DebertaV2ForSequenceClassification"),bJr.forEach(t),aMo=r(jye," (DeBERTa-v2 model)"),jye.forEach(t),nMo=i(L),d4=n(L,"LI",{});var Dye=s(d4);Zte=n(Dye,"STRONG",{});var vJr=s(Zte);sMo=r(vJr,"distilbert"),vJr.forEach(t),lMo=r(Dye," \u2014 "),WI=n(Dye,"A",{href:!0});var TJr=s(WI);iMo=r(TJr,"DistilBertForSequenceClassification"),TJr.forEach(t),dMo=r(Dye," (DistilBERT model)"),Dye.forEach(t),cMo=i(L),c4=n(L,"LI",{});var qye=s(c4);eae=n(qye,"STRONG",{});var FJr=s(eae);fMo=r(FJr,"electra"),FJr.forEach(t),mMo=r(qye," \u2014 "),QI=n(qye,"A",{href:!0});var CJr=s(QI);gMo=r(CJr,"ElectraForSequenceClassification"),CJr.forEach(t),hMo=r(qye," (ELECTRA model)"),qye.forEach(t),pMo=i(L),f4=n(L,"LI",{});var Gye=s(f4);oae=n(Gye,"STRONG",{});var MJr=s(oae);_Mo=r(MJr,"flaubert"),MJr.forEach(t),uMo=r(Gye," \u2014 "),HI=n(Gye,"A",{href:!0});var EJr=s(HI);bMo=r(EJr,"FlaubertForSequenceClassification"),EJr.forEach(t),vMo=r(Gye," (FlauBERT model)"),Gye.forEach(t),TMo=i(L),m4=n(L,"LI",{});var Oye=s(m4);rae=n(Oye,"STRONG",{});var yJr=s(rae);FMo=r(yJr,"fnet"),yJr.forEach(t),CMo=r(Oye," \u2014 "),UI=n(Oye,"A",{href:!0});var wJr=s(UI);MMo=r(wJr,"FNetForSequenceClassification"),wJr.forEach(t),EMo=r(Oye," (FNet model)"),Oye.forEach(t),yMo=i(L),g4=n(L,"LI",{});var Xye=s(g4);tae=n(Xye,"STRONG",{});var AJr=s(tae);wMo=r(AJr,"funnel"),AJr.forEach(t),AMo=r(Xye," \u2014 "),JI=n(Xye,"A",{href:!0});var LJr=s(JI);LMo=r(LJr,"FunnelForSequenceClassification"),LJr.forEach(t),BMo=r(Xye," (Funnel Transformer model)"),Xye.forEach(t),xMo=i(L),h4=n(L,"LI",{});var Vye=s(h4);aae=n(Vye,"STRONG",{});var BJr=s(aae);kMo=r(BJr,"gpt2"),BJr.forEach(t),RMo=r(Vye," \u2014 "),YI=n(Vye,"A",{href:!0});var xJr=s(YI);SMo=r(xJr,"GPT2ForSequenceClassification"),xJr.forEach(t),PMo=r(Vye," (OpenAI GPT-2 model)"),Vye.forEach(t),$Mo=i(L),p4=n(L,"LI",{});var zye=s(p4);nae=n(zye,"STRONG",{});var kJr=s(nae);IMo=r(kJr,"gpt_neo"),kJr.forEach(t),NMo=r(zye," \u2014 "),KI=n(zye,"A",{href:!0});var RJr=s(KI);jMo=r(RJr,"GPTNeoForSequenceClassification"),RJr.forEach(t),DMo=r(zye," (GPT Neo model)"),zye.forEach(t),qMo=i(L),_4=n(L,"LI",{});var Wye=s(_4);sae=n(Wye,"STRONG",{});var SJr=s(sae);GMo=r(SJr,"gptj"),SJr.forEach(t),OMo=r(Wye," \u2014 "),ZI=n(Wye,"A",{href:!0});var PJr=s(ZI);XMo=r(PJr,"GPTJForSequenceClassification"),PJr.forEach(t),VMo=r(Wye," (GPT-J model)"),Wye.forEach(t),zMo=i(L),u4=n(L,"LI",{});var Qye=s(u4);lae=n(Qye,"STRONG",{});var $Jr=s(lae);WMo=r($Jr,"ibert"),$Jr.forEach(t),QMo=r(Qye," \u2014 "),eN=n(Qye,"A",{href:!0});var IJr=s(eN);HMo=r(IJr,"IBertForSequenceClassification"),IJr.forEach(t),UMo=r(Qye," (I-BERT model)"),Qye.forEach(t),JMo=i(L),b4=n(L,"LI",{});var Hye=s(b4);iae=n(Hye,"STRONG",{});var NJr=s(iae);YMo=r(NJr,"layoutlm"),NJr.forEach(t),KMo=r(Hye," \u2014 "),oN=n(Hye,"A",{href:!0});var jJr=s(oN);ZMo=r(jJr,"LayoutLMForSequenceClassification"),jJr.forEach(t),eEo=r(Hye," (LayoutLM model)"),Hye.forEach(t),oEo=i(L),v4=n(L,"LI",{});var Uye=s(v4);dae=n(Uye,"STRONG",{});var DJr=s(dae);rEo=r(DJr,"layoutlmv2"),DJr.forEach(t),tEo=r(Uye," \u2014 "),rN=n(Uye,"A",{href:!0});var qJr=s(rN);aEo=r(qJr,"LayoutLMv2ForSequenceClassification"),qJr.forEach(t),nEo=r(Uye," (LayoutLMv2 model)"),Uye.forEach(t),sEo=i(L),T4=n(L,"LI",{});var Jye=s(T4);cae=n(Jye,"STRONG",{});var GJr=s(cae);lEo=r(GJr,"led"),GJr.forEach(t),iEo=r(Jye," \u2014 "),tN=n(Jye,"A",{href:!0});var OJr=s(tN);dEo=r(OJr,"LEDForSequenceClassification"),OJr.forEach(t),cEo=r(Jye," (LED model)"),Jye.forEach(t),fEo=i(L),F4=n(L,"LI",{});var Yye=s(F4);fae=n(Yye,"STRONG",{});var XJr=s(fae);mEo=r(XJr,"longformer"),XJr.forEach(t),gEo=r(Yye," \u2014 "),aN=n(Yye,"A",{href:!0});var VJr=s(aN);hEo=r(VJr,"LongformerForSequenceClassification"),VJr.forEach(t),pEo=r(Yye," (Longformer model)"),Yye.forEach(t),_Eo=i(L),C4=n(L,"LI",{});var Kye=s(C4);mae=n(Kye,"STRONG",{});var zJr=s(mae);uEo=r(zJr,"mbart"),zJr.forEach(t),bEo=r(Kye," \u2014 "),nN=n(Kye,"A",{href:!0});var WJr=s(nN);vEo=r(WJr,"MBartForSequenceClassification"),WJr.forEach(t),TEo=r(Kye," (mBART model)"),Kye.forEach(t),FEo=i(L),M4=n(L,"LI",{});var Zye=s(M4);gae=n(Zye,"STRONG",{});var QJr=s(gae);CEo=r(QJr,"megatron-bert"),QJr.forEach(t),MEo=r(Zye," \u2014 "),sN=n(Zye,"A",{href:!0});var HJr=s(sN);EEo=r(HJr,"MegatronBertForSequenceClassification"),HJr.forEach(t),yEo=r(Zye," (MegatronBert model)"),Zye.forEach(t),wEo=i(L),E4=n(L,"LI",{});var ewe=s(E4);hae=n(ewe,"STRONG",{});var UJr=s(hae);AEo=r(UJr,"mobilebert"),UJr.forEach(t),LEo=r(ewe," \u2014 "),lN=n(ewe,"A",{href:!0});var JJr=s(lN);BEo=r(JJr,"MobileBertForSequenceClassification"),JJr.forEach(t),xEo=r(ewe," (MobileBERT model)"),ewe.forEach(t),kEo=i(L),y4=n(L,"LI",{});var owe=s(y4);pae=n(owe,"STRONG",{});var YJr=s(pae);REo=r(YJr,"mpnet"),YJr.forEach(t),SEo=r(owe," \u2014 "),iN=n(owe,"A",{href:!0});var KJr=s(iN);PEo=r(KJr,"MPNetForSequenceClassification"),KJr.forEach(t),$Eo=r(owe," (MPNet model)"),owe.forEach(t),IEo=i(L),w4=n(L,"LI",{});var rwe=s(w4);_ae=n(rwe,"STRONG",{});var ZJr=s(_ae);NEo=r(ZJr,"nystromformer"),ZJr.forEach(t),jEo=r(rwe," \u2014 "),dN=n(rwe,"A",{href:!0});var eYr=s(dN);DEo=r(eYr,"NystromformerForSequenceClassification"),eYr.forEach(t),qEo=r(rwe," (Nystromformer model)"),rwe.forEach(t),GEo=i(L),A4=n(L,"LI",{});var twe=s(A4);uae=n(twe,"STRONG",{});var oYr=s(uae);OEo=r(oYr,"openai-gpt"),oYr.forEach(t),XEo=r(twe," \u2014 "),cN=n(twe,"A",{href:!0});var rYr=s(cN);VEo=r(rYr,"OpenAIGPTForSequenceClassification"),rYr.forEach(t),zEo=r(twe," (OpenAI GPT model)"),twe.forEach(t),WEo=i(L),L4=n(L,"LI",{});var awe=s(L4);bae=n(awe,"STRONG",{});var tYr=s(bae);QEo=r(tYr,"perceiver"),tYr.forEach(t),HEo=r(awe," \u2014 "),fN=n(awe,"A",{href:!0});var aYr=s(fN);UEo=r(aYr,"PerceiverForSequenceClassification"),aYr.forEach(t),JEo=r(awe," (Perceiver model)"),awe.forEach(t),YEo=i(L),B4=n(L,"LI",{});var nwe=s(B4);vae=n(nwe,"STRONG",{});var nYr=s(vae);KEo=r(nYr,"plbart"),nYr.forEach(t),ZEo=r(nwe," \u2014 "),mN=n(nwe,"A",{href:!0});var sYr=s(mN);eyo=r(sYr,"PLBartForSequenceClassification"),sYr.forEach(t),oyo=r(nwe," (PLBart model)"),nwe.forEach(t),ryo=i(L),x4=n(L,"LI",{});var swe=s(x4);Tae=n(swe,"STRONG",{});var lYr=s(Tae);tyo=r(lYr,"qdqbert"),lYr.forEach(t),ayo=r(swe," \u2014 "),gN=n(swe,"A",{href:!0});var iYr=s(gN);nyo=r(iYr,"QDQBertForSequenceClassification"),iYr.forEach(t),syo=r(swe," (QDQBert model)"),swe.forEach(t),lyo=i(L),k4=n(L,"LI",{});var lwe=s(k4);Fae=n(lwe,"STRONG",{});var dYr=s(Fae);iyo=r(dYr,"reformer"),dYr.forEach(t),dyo=r(lwe," \u2014 "),hN=n(lwe,"A",{href:!0});var cYr=s(hN);cyo=r(cYr,"ReformerForSequenceClassification"),cYr.forEach(t),fyo=r(lwe," (Reformer model)"),lwe.forEach(t),myo=i(L),R4=n(L,"LI",{});var iwe=s(R4);Cae=n(iwe,"STRONG",{});var fYr=s(Cae);gyo=r(fYr,"rembert"),fYr.forEach(t),hyo=r(iwe," \u2014 "),pN=n(iwe,"A",{href:!0});var mYr=s(pN);pyo=r(mYr,"RemBertForSequenceClassification"),mYr.forEach(t),_yo=r(iwe," (RemBERT model)"),iwe.forEach(t),uyo=i(L),S4=n(L,"LI",{});var dwe=s(S4);Mae=n(dwe,"STRONG",{});var gYr=s(Mae);byo=r(gYr,"roberta"),gYr.forEach(t),vyo=r(dwe," \u2014 "),_N=n(dwe,"A",{href:!0});var hYr=s(_N);Tyo=r(hYr,"RobertaForSequenceClassification"),hYr.forEach(t),Fyo=r(dwe," (RoBERTa model)"),dwe.forEach(t),Cyo=i(L),P4=n(L,"LI",{});var cwe=s(P4);Eae=n(cwe,"STRONG",{});var pYr=s(Eae);Myo=r(pYr,"roformer"),pYr.forEach(t),Eyo=r(cwe," \u2014 "),uN=n(cwe,"A",{href:!0});var _Yr=s(uN);yyo=r(_Yr,"RoFormerForSequenceClassification"),_Yr.forEach(t),wyo=r(cwe," (RoFormer model)"),cwe.forEach(t),Ayo=i(L),$4=n(L,"LI",{});var fwe=s($4);yae=n(fwe,"STRONG",{});var uYr=s(yae);Lyo=r(uYr,"squeezebert"),uYr.forEach(t),Byo=r(fwe," \u2014 "),bN=n(fwe,"A",{href:!0});var bYr=s(bN);xyo=r(bYr,"SqueezeBertForSequenceClassification"),bYr.forEach(t),kyo=r(fwe," (SqueezeBERT model)"),fwe.forEach(t),Ryo=i(L),I4=n(L,"LI",{});var mwe=s(I4);wae=n(mwe,"STRONG",{});var vYr=s(wae);Syo=r(vYr,"tapas"),vYr.forEach(t),Pyo=r(mwe," \u2014 "),vN=n(mwe,"A",{href:!0});var TYr=s(vN);$yo=r(TYr,"TapasForSequenceClassification"),TYr.forEach(t),Iyo=r(mwe," (TAPAS model)"),mwe.forEach(t),Nyo=i(L),N4=n(L,"LI",{});var gwe=s(N4);Aae=n(gwe,"STRONG",{});var FYr=s(Aae);jyo=r(FYr,"transfo-xl"),FYr.forEach(t),Dyo=r(gwe," \u2014 "),TN=n(gwe,"A",{href:!0});var CYr=s(TN);qyo=r(CYr,"TransfoXLForSequenceClassification"),CYr.forEach(t),Gyo=r(gwe," (Transformer-XL model)"),gwe.forEach(t),Oyo=i(L),j4=n(L,"LI",{});var hwe=s(j4);Lae=n(hwe,"STRONG",{});var MYr=s(Lae);Xyo=r(MYr,"xlm"),MYr.forEach(t),Vyo=r(hwe," \u2014 "),FN=n(hwe,"A",{href:!0});var EYr=s(FN);zyo=r(EYr,"XLMForSequenceClassification"),EYr.forEach(t),Wyo=r(hwe," (XLM model)"),hwe.forEach(t),Qyo=i(L),D4=n(L,"LI",{});var pwe=s(D4);Bae=n(pwe,"STRONG",{});var yYr=s(Bae);Hyo=r(yYr,"xlm-roberta"),yYr.forEach(t),Uyo=r(pwe," \u2014 "),CN=n(pwe,"A",{href:!0});var wYr=s(CN);Jyo=r(wYr,"XLMRobertaForSequenceClassification"),wYr.forEach(t),Yyo=r(pwe," (XLM-RoBERTa model)"),pwe.forEach(t),Kyo=i(L),q4=n(L,"LI",{});var _we=s(q4);xae=n(_we,"STRONG",{});var AYr=s(xae);Zyo=r(AYr,"xlm-roberta-xl"),AYr.forEach(t),ewo=r(_we," \u2014 "),MN=n(_we,"A",{href:!0});var LYr=s(MN);owo=r(LYr,"XLMRobertaXLForSequenceClassification"),LYr.forEach(t),rwo=r(_we," (XLM-RoBERTa-XL model)"),_we.forEach(t),two=i(L),G4=n(L,"LI",{});var uwe=s(G4);kae=n(uwe,"STRONG",{});var BYr=s(kae);awo=r(BYr,"xlnet"),BYr.forEach(t),nwo=r(uwe," \u2014 "),EN=n(uwe,"A",{href:!0});var xYr=s(EN);swo=r(xYr,"XLNetForSequenceClassification"),xYr.forEach(t),lwo=r(uwe," (XLNet model)"),uwe.forEach(t),iwo=i(L),O4=n(L,"LI",{});var bwe=s(O4);Rae=n(bwe,"STRONG",{});var kYr=s(Rae);dwo=r(kYr,"yoso"),kYr.forEach(t),cwo=r(bwe," \u2014 "),yN=n(bwe,"A",{href:!0});var RYr=s(yN);fwo=r(RYr,"YosoForSequenceClassification"),RYr.forEach(t),mwo=r(bwe," (YOSO model)"),bwe.forEach(t),L.forEach(t),gwo=i(zt),X4=n(zt,"P",{});var vwe=s(X4);hwo=r(vwe,"The model is set in evaluation mode by default using "),Sae=n(vwe,"CODE",{});var SYr=s(Sae);pwo=r(SYr,"model.eval()"),SYr.forEach(t),_wo=r(vwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Pae=n(vwe,"CODE",{});var PYr=s(Pae);uwo=r(PYr,"model.train()"),PYr.forEach(t),vwe.forEach(t),bwo=i(zt),$ae=n(zt,"P",{});var $Yr=s($ae);vwo=r($Yr,"Examples:"),$Yr.forEach(t),Two=i(zt),m(Ey.$$.fragment,zt),zt.forEach(t),rl.forEach(t),uke=i(c),pd=n(c,"H2",{class:!0});var wSe=s(pd);V4=n(wSe,"A",{id:!0,class:!0,href:!0});var IYr=s(V4);Iae=n(IYr,"SPAN",{});var NYr=s(Iae);m(yy.$$.fragment,NYr),NYr.forEach(t),IYr.forEach(t),Fwo=i(wSe),Nae=n(wSe,"SPAN",{});var jYr=s(Nae);Cwo=r(jYr,"AutoModelForMultipleChoice"),jYr.forEach(t),wSe.forEach(t),bke=i(c),rr=n(c,"DIV",{class:!0});var al=s(rr);m(wy.$$.fragment,al),Mwo=i(al),_d=n(al,"P",{});var tW=s(_d);Ewo=r(tW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),jae=n(tW,"CODE",{});var DYr=s(jae);ywo=r(DYr,"from_pretrained()"),DYr.forEach(t),wwo=r(tW,"class method or the "),Dae=n(tW,"CODE",{});var qYr=s(Dae);Awo=r(qYr,"from_config()"),qYr.forEach(t),Lwo=r(tW,`class
method.`),tW.forEach(t),Bwo=i(al),Ay=n(al,"P",{});var ASe=s(Ay);xwo=r(ASe,"This class cannot be instantiated directly using "),qae=n(ASe,"CODE",{});var GYr=s(qae);kwo=r(GYr,"__init__()"),GYr.forEach(t),Rwo=r(ASe," (throws an error)."),ASe.forEach(t),Swo=i(al),Jr=n(al,"DIV",{class:!0});var nl=s(Jr);m(Ly.$$.fragment,nl),Pwo=i(nl),Gae=n(nl,"P",{});var OYr=s(Gae);$wo=r(OYr,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),OYr.forEach(t),Iwo=i(nl),ud=n(nl,"P",{});var aW=s(ud);Nwo=r(aW,`Note:
Loading a model from its configuration file does `),Oae=n(aW,"STRONG",{});var XYr=s(Oae);jwo=r(XYr,"not"),XYr.forEach(t),Dwo=r(aW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Xae=n(aW,"CODE",{});var VYr=s(Xae);qwo=r(VYr,"from_pretrained()"),VYr.forEach(t),Gwo=r(aW,"to load the model weights."),aW.forEach(t),Owo=i(nl),Vae=n(nl,"P",{});var zYr=s(Vae);Xwo=r(zYr,"Examples:"),zYr.forEach(t),Vwo=i(nl),m(By.$$.fragment,nl),nl.forEach(t),zwo=i(al),Ve=n(al,"DIV",{class:!0});var Wt=s(Ve);m(xy.$$.fragment,Wt),Wwo=i(Wt),zae=n(Wt,"P",{});var WYr=s(zae);Qwo=r(WYr,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),WYr.forEach(t),Hwo=i(Wt),Ja=n(Wt,"P",{});var gM=s(Ja);Uwo=r(gM,"The model class to instantiate is selected based on the "),Wae=n(gM,"CODE",{});var QYr=s(Wae);Jwo=r(QYr,"model_type"),QYr.forEach(t),Ywo=r(gM,` property of the config object (either
passed as an argument or loaded from `),Qae=n(gM,"CODE",{});var HYr=s(Qae);Kwo=r(HYr,"pretrained_model_name_or_path"),HYr.forEach(t),Zwo=r(gM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Hae=n(gM,"CODE",{});var UYr=s(Hae);eAo=r(UYr,"pretrained_model_name_or_path"),UYr.forEach(t),oAo=r(gM,":"),gM.forEach(t),rAo=i(Wt),G=n(Wt,"UL",{});var O=s(G);z4=n(O,"LI",{});var Twe=s(z4);Uae=n(Twe,"STRONG",{});var JYr=s(Uae);tAo=r(JYr,"albert"),JYr.forEach(t),aAo=r(Twe," \u2014 "),wN=n(Twe,"A",{href:!0});var YYr=s(wN);nAo=r(YYr,"AlbertForMultipleChoice"),YYr.forEach(t),sAo=r(Twe," (ALBERT model)"),Twe.forEach(t),lAo=i(O),W4=n(O,"LI",{});var Fwe=s(W4);Jae=n(Fwe,"STRONG",{});var KYr=s(Jae);iAo=r(KYr,"bert"),KYr.forEach(t),dAo=r(Fwe," \u2014 "),AN=n(Fwe,"A",{href:!0});var ZYr=s(AN);cAo=r(ZYr,"BertForMultipleChoice"),ZYr.forEach(t),fAo=r(Fwe," (BERT model)"),Fwe.forEach(t),mAo=i(O),Q4=n(O,"LI",{});var Cwe=s(Q4);Yae=n(Cwe,"STRONG",{});var eKr=s(Yae);gAo=r(eKr,"big_bird"),eKr.forEach(t),hAo=r(Cwe," \u2014 "),LN=n(Cwe,"A",{href:!0});var oKr=s(LN);pAo=r(oKr,"BigBirdForMultipleChoice"),oKr.forEach(t),_Ao=r(Cwe," (BigBird model)"),Cwe.forEach(t),uAo=i(O),H4=n(O,"LI",{});var Mwe=s(H4);Kae=n(Mwe,"STRONG",{});var rKr=s(Kae);bAo=r(rKr,"camembert"),rKr.forEach(t),vAo=r(Mwe," \u2014 "),BN=n(Mwe,"A",{href:!0});var tKr=s(BN);TAo=r(tKr,"CamembertForMultipleChoice"),tKr.forEach(t),FAo=r(Mwe," (CamemBERT model)"),Mwe.forEach(t),CAo=i(O),U4=n(O,"LI",{});var Ewe=s(U4);Zae=n(Ewe,"STRONG",{});var aKr=s(Zae);MAo=r(aKr,"canine"),aKr.forEach(t),EAo=r(Ewe," \u2014 "),xN=n(Ewe,"A",{href:!0});var nKr=s(xN);yAo=r(nKr,"CanineForMultipleChoice"),nKr.forEach(t),wAo=r(Ewe," (Canine model)"),Ewe.forEach(t),AAo=i(O),J4=n(O,"LI",{});var ywe=s(J4);ene=n(ywe,"STRONG",{});var sKr=s(ene);LAo=r(sKr,"convbert"),sKr.forEach(t),BAo=r(ywe," \u2014 "),kN=n(ywe,"A",{href:!0});var lKr=s(kN);xAo=r(lKr,"ConvBertForMultipleChoice"),lKr.forEach(t),kAo=r(ywe," (ConvBERT model)"),ywe.forEach(t),RAo=i(O),Y4=n(O,"LI",{});var wwe=s(Y4);one=n(wwe,"STRONG",{});var iKr=s(one);SAo=r(iKr,"data2vec-text"),iKr.forEach(t),PAo=r(wwe," \u2014 "),RN=n(wwe,"A",{href:!0});var dKr=s(RN);$Ao=r(dKr,"Data2VecTextForMultipleChoice"),dKr.forEach(t),IAo=r(wwe," (Data2VecText model)"),wwe.forEach(t),NAo=i(O),K4=n(O,"LI",{});var Awe=s(K4);rne=n(Awe,"STRONG",{});var cKr=s(rne);jAo=r(cKr,"distilbert"),cKr.forEach(t),DAo=r(Awe," \u2014 "),SN=n(Awe,"A",{href:!0});var fKr=s(SN);qAo=r(fKr,"DistilBertForMultipleChoice"),fKr.forEach(t),GAo=r(Awe," (DistilBERT model)"),Awe.forEach(t),OAo=i(O),Z4=n(O,"LI",{});var Lwe=s(Z4);tne=n(Lwe,"STRONG",{});var mKr=s(tne);XAo=r(mKr,"electra"),mKr.forEach(t),VAo=r(Lwe," \u2014 "),PN=n(Lwe,"A",{href:!0});var gKr=s(PN);zAo=r(gKr,"ElectraForMultipleChoice"),gKr.forEach(t),WAo=r(Lwe," (ELECTRA model)"),Lwe.forEach(t),QAo=i(O),eb=n(O,"LI",{});var Bwe=s(eb);ane=n(Bwe,"STRONG",{});var hKr=s(ane);HAo=r(hKr,"flaubert"),hKr.forEach(t),UAo=r(Bwe," \u2014 "),$N=n(Bwe,"A",{href:!0});var pKr=s($N);JAo=r(pKr,"FlaubertForMultipleChoice"),pKr.forEach(t),YAo=r(Bwe," (FlauBERT model)"),Bwe.forEach(t),KAo=i(O),ob=n(O,"LI",{});var xwe=s(ob);nne=n(xwe,"STRONG",{});var _Kr=s(nne);ZAo=r(_Kr,"fnet"),_Kr.forEach(t),e0o=r(xwe," \u2014 "),IN=n(xwe,"A",{href:!0});var uKr=s(IN);o0o=r(uKr,"FNetForMultipleChoice"),uKr.forEach(t),r0o=r(xwe," (FNet model)"),xwe.forEach(t),t0o=i(O),rb=n(O,"LI",{});var kwe=s(rb);sne=n(kwe,"STRONG",{});var bKr=s(sne);a0o=r(bKr,"funnel"),bKr.forEach(t),n0o=r(kwe," \u2014 "),NN=n(kwe,"A",{href:!0});var vKr=s(NN);s0o=r(vKr,"FunnelForMultipleChoice"),vKr.forEach(t),l0o=r(kwe," (Funnel Transformer model)"),kwe.forEach(t),i0o=i(O),tb=n(O,"LI",{});var Rwe=s(tb);lne=n(Rwe,"STRONG",{});var TKr=s(lne);d0o=r(TKr,"ibert"),TKr.forEach(t),c0o=r(Rwe," \u2014 "),jN=n(Rwe,"A",{href:!0});var FKr=s(jN);f0o=r(FKr,"IBertForMultipleChoice"),FKr.forEach(t),m0o=r(Rwe," (I-BERT model)"),Rwe.forEach(t),g0o=i(O),ab=n(O,"LI",{});var Swe=s(ab);ine=n(Swe,"STRONG",{});var CKr=s(ine);h0o=r(CKr,"longformer"),CKr.forEach(t),p0o=r(Swe," \u2014 "),DN=n(Swe,"A",{href:!0});var MKr=s(DN);_0o=r(MKr,"LongformerForMultipleChoice"),MKr.forEach(t),u0o=r(Swe," (Longformer model)"),Swe.forEach(t),b0o=i(O),nb=n(O,"LI",{});var Pwe=s(nb);dne=n(Pwe,"STRONG",{});var EKr=s(dne);v0o=r(EKr,"megatron-bert"),EKr.forEach(t),T0o=r(Pwe," \u2014 "),qN=n(Pwe,"A",{href:!0});var yKr=s(qN);F0o=r(yKr,"MegatronBertForMultipleChoice"),yKr.forEach(t),C0o=r(Pwe," (MegatronBert model)"),Pwe.forEach(t),M0o=i(O),sb=n(O,"LI",{});var $we=s(sb);cne=n($we,"STRONG",{});var wKr=s(cne);E0o=r(wKr,"mobilebert"),wKr.forEach(t),y0o=r($we," \u2014 "),GN=n($we,"A",{href:!0});var AKr=s(GN);w0o=r(AKr,"MobileBertForMultipleChoice"),AKr.forEach(t),A0o=r($we," (MobileBERT model)"),$we.forEach(t),L0o=i(O),lb=n(O,"LI",{});var Iwe=s(lb);fne=n(Iwe,"STRONG",{});var LKr=s(fne);B0o=r(LKr,"mpnet"),LKr.forEach(t),x0o=r(Iwe," \u2014 "),ON=n(Iwe,"A",{href:!0});var BKr=s(ON);k0o=r(BKr,"MPNetForMultipleChoice"),BKr.forEach(t),R0o=r(Iwe," (MPNet model)"),Iwe.forEach(t),S0o=i(O),ib=n(O,"LI",{});var Nwe=s(ib);mne=n(Nwe,"STRONG",{});var xKr=s(mne);P0o=r(xKr,"nystromformer"),xKr.forEach(t),$0o=r(Nwe," \u2014 "),XN=n(Nwe,"A",{href:!0});var kKr=s(XN);I0o=r(kKr,"NystromformerForMultipleChoice"),kKr.forEach(t),N0o=r(Nwe," (Nystromformer model)"),Nwe.forEach(t),j0o=i(O),db=n(O,"LI",{});var jwe=s(db);gne=n(jwe,"STRONG",{});var RKr=s(gne);D0o=r(RKr,"qdqbert"),RKr.forEach(t),q0o=r(jwe," \u2014 "),VN=n(jwe,"A",{href:!0});var SKr=s(VN);G0o=r(SKr,"QDQBertForMultipleChoice"),SKr.forEach(t),O0o=r(jwe," (QDQBert model)"),jwe.forEach(t),X0o=i(O),cb=n(O,"LI",{});var Dwe=s(cb);hne=n(Dwe,"STRONG",{});var PKr=s(hne);V0o=r(PKr,"rembert"),PKr.forEach(t),z0o=r(Dwe," \u2014 "),zN=n(Dwe,"A",{href:!0});var $Kr=s(zN);W0o=r($Kr,"RemBertForMultipleChoice"),$Kr.forEach(t),Q0o=r(Dwe," (RemBERT model)"),Dwe.forEach(t),H0o=i(O),fb=n(O,"LI",{});var qwe=s(fb);pne=n(qwe,"STRONG",{});var IKr=s(pne);U0o=r(IKr,"roberta"),IKr.forEach(t),J0o=r(qwe," \u2014 "),WN=n(qwe,"A",{href:!0});var NKr=s(WN);Y0o=r(NKr,"RobertaForMultipleChoice"),NKr.forEach(t),K0o=r(qwe," (RoBERTa model)"),qwe.forEach(t),Z0o=i(O),mb=n(O,"LI",{});var Gwe=s(mb);_ne=n(Gwe,"STRONG",{});var jKr=s(_ne);eLo=r(jKr,"roformer"),jKr.forEach(t),oLo=r(Gwe," \u2014 "),QN=n(Gwe,"A",{href:!0});var DKr=s(QN);rLo=r(DKr,"RoFormerForMultipleChoice"),DKr.forEach(t),tLo=r(Gwe," (RoFormer model)"),Gwe.forEach(t),aLo=i(O),gb=n(O,"LI",{});var Owe=s(gb);une=n(Owe,"STRONG",{});var qKr=s(une);nLo=r(qKr,"squeezebert"),qKr.forEach(t),sLo=r(Owe," \u2014 "),HN=n(Owe,"A",{href:!0});var GKr=s(HN);lLo=r(GKr,"SqueezeBertForMultipleChoice"),GKr.forEach(t),iLo=r(Owe," (SqueezeBERT model)"),Owe.forEach(t),dLo=i(O),hb=n(O,"LI",{});var Xwe=s(hb);bne=n(Xwe,"STRONG",{});var OKr=s(bne);cLo=r(OKr,"xlm"),OKr.forEach(t),fLo=r(Xwe," \u2014 "),UN=n(Xwe,"A",{href:!0});var XKr=s(UN);mLo=r(XKr,"XLMForMultipleChoice"),XKr.forEach(t),gLo=r(Xwe," (XLM model)"),Xwe.forEach(t),hLo=i(O),pb=n(O,"LI",{});var Vwe=s(pb);vne=n(Vwe,"STRONG",{});var VKr=s(vne);pLo=r(VKr,"xlm-roberta"),VKr.forEach(t),_Lo=r(Vwe," \u2014 "),JN=n(Vwe,"A",{href:!0});var zKr=s(JN);uLo=r(zKr,"XLMRobertaForMultipleChoice"),zKr.forEach(t),bLo=r(Vwe," (XLM-RoBERTa model)"),Vwe.forEach(t),vLo=i(O),_b=n(O,"LI",{});var zwe=s(_b);Tne=n(zwe,"STRONG",{});var WKr=s(Tne);TLo=r(WKr,"xlm-roberta-xl"),WKr.forEach(t),FLo=r(zwe," \u2014 "),YN=n(zwe,"A",{href:!0});var QKr=s(YN);CLo=r(QKr,"XLMRobertaXLForMultipleChoice"),QKr.forEach(t),MLo=r(zwe," (XLM-RoBERTa-XL model)"),zwe.forEach(t),ELo=i(O),ub=n(O,"LI",{});var Wwe=s(ub);Fne=n(Wwe,"STRONG",{});var HKr=s(Fne);yLo=r(HKr,"xlnet"),HKr.forEach(t),wLo=r(Wwe," \u2014 "),KN=n(Wwe,"A",{href:!0});var UKr=s(KN);ALo=r(UKr,"XLNetForMultipleChoice"),UKr.forEach(t),LLo=r(Wwe," (XLNet model)"),Wwe.forEach(t),BLo=i(O),bb=n(O,"LI",{});var Qwe=s(bb);Cne=n(Qwe,"STRONG",{});var JKr=s(Cne);xLo=r(JKr,"yoso"),JKr.forEach(t),kLo=r(Qwe," \u2014 "),ZN=n(Qwe,"A",{href:!0});var YKr=s(ZN);RLo=r(YKr,"YosoForMultipleChoice"),YKr.forEach(t),SLo=r(Qwe," (YOSO model)"),Qwe.forEach(t),O.forEach(t),PLo=i(Wt),vb=n(Wt,"P",{});var Hwe=s(vb);$Lo=r(Hwe,"The model is set in evaluation mode by default using "),Mne=n(Hwe,"CODE",{});var KKr=s(Mne);ILo=r(KKr,"model.eval()"),KKr.forEach(t),NLo=r(Hwe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ene=n(Hwe,"CODE",{});var ZKr=s(Ene);jLo=r(ZKr,"model.train()"),ZKr.forEach(t),Hwe.forEach(t),DLo=i(Wt),yne=n(Wt,"P",{});var eZr=s(yne);qLo=r(eZr,"Examples:"),eZr.forEach(t),GLo=i(Wt),m(ky.$$.fragment,Wt),Wt.forEach(t),al.forEach(t),vke=i(c),bd=n(c,"H2",{class:!0});var LSe=s(bd);Tb=n(LSe,"A",{id:!0,class:!0,href:!0});var oZr=s(Tb);wne=n(oZr,"SPAN",{});var rZr=s(wne);m(Ry.$$.fragment,rZr),rZr.forEach(t),oZr.forEach(t),OLo=i(LSe),Ane=n(LSe,"SPAN",{});var tZr=s(Ane);XLo=r(tZr,"AutoModelForNextSentencePrediction"),tZr.forEach(t),LSe.forEach(t),Tke=i(c),tr=n(c,"DIV",{class:!0});var sl=s(tr);m(Sy.$$.fragment,sl),VLo=i(sl),vd=n(sl,"P",{});var nW=s(vd);zLo=r(nW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),Lne=n(nW,"CODE",{});var aZr=s(Lne);WLo=r(aZr,"from_pretrained()"),aZr.forEach(t),QLo=r(nW,"class method or the "),Bne=n(nW,"CODE",{});var nZr=s(Bne);HLo=r(nZr,"from_config()"),nZr.forEach(t),ULo=r(nW,`class
method.`),nW.forEach(t),JLo=i(sl),Py=n(sl,"P",{});var BSe=s(Py);YLo=r(BSe,"This class cannot be instantiated directly using "),xne=n(BSe,"CODE",{});var sZr=s(xne);KLo=r(sZr,"__init__()"),sZr.forEach(t),ZLo=r(BSe," (throws an error)."),BSe.forEach(t),e7o=i(sl),Yr=n(sl,"DIV",{class:!0});var ll=s(Yr);m($y.$$.fragment,ll),o7o=i(ll),kne=n(ll,"P",{});var lZr=s(kne);r7o=r(lZr,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),lZr.forEach(t),t7o=i(ll),Td=n(ll,"P",{});var sW=s(Td);a7o=r(sW,`Note:
Loading a model from its configuration file does `),Rne=n(sW,"STRONG",{});var iZr=s(Rne);n7o=r(iZr,"not"),iZr.forEach(t),s7o=r(sW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Sne=n(sW,"CODE",{});var dZr=s(Sne);l7o=r(dZr,"from_pretrained()"),dZr.forEach(t),i7o=r(sW,"to load the model weights."),sW.forEach(t),d7o=i(ll),Pne=n(ll,"P",{});var cZr=s(Pne);c7o=r(cZr,"Examples:"),cZr.forEach(t),f7o=i(ll),m(Iy.$$.fragment,ll),ll.forEach(t),m7o=i(sl),ze=n(sl,"DIV",{class:!0});var Qt=s(ze);m(Ny.$$.fragment,Qt),g7o=i(Qt),$ne=n(Qt,"P",{});var fZr=s($ne);h7o=r(fZr,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),fZr.forEach(t),p7o=i(Qt),Ya=n(Qt,"P",{});var hM=s(Ya);_7o=r(hM,"The model class to instantiate is selected based on the "),Ine=n(hM,"CODE",{});var mZr=s(Ine);u7o=r(mZr,"model_type"),mZr.forEach(t),b7o=r(hM,` property of the config object (either
passed as an argument or loaded from `),Nne=n(hM,"CODE",{});var gZr=s(Nne);v7o=r(gZr,"pretrained_model_name_or_path"),gZr.forEach(t),T7o=r(hM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),jne=n(hM,"CODE",{});var hZr=s(jne);F7o=r(hZr,"pretrained_model_name_or_path"),hZr.forEach(t),C7o=r(hM,":"),hM.forEach(t),M7o=i(Qt),da=n(Qt,"UL",{});var il=s(da);Fb=n(il,"LI",{});var Uwe=s(Fb);Dne=n(Uwe,"STRONG",{});var pZr=s(Dne);E7o=r(pZr,"bert"),pZr.forEach(t),y7o=r(Uwe," \u2014 "),ej=n(Uwe,"A",{href:!0});var _Zr=s(ej);w7o=r(_Zr,"BertForNextSentencePrediction"),_Zr.forEach(t),A7o=r(Uwe," (BERT model)"),Uwe.forEach(t),L7o=i(il),Cb=n(il,"LI",{});var Jwe=s(Cb);qne=n(Jwe,"STRONG",{});var uZr=s(qne);B7o=r(uZr,"fnet"),uZr.forEach(t),x7o=r(Jwe," \u2014 "),oj=n(Jwe,"A",{href:!0});var bZr=s(oj);k7o=r(bZr,"FNetForNextSentencePrediction"),bZr.forEach(t),R7o=r(Jwe," (FNet model)"),Jwe.forEach(t),S7o=i(il),Mb=n(il,"LI",{});var Ywe=s(Mb);Gne=n(Ywe,"STRONG",{});var vZr=s(Gne);P7o=r(vZr,"megatron-bert"),vZr.forEach(t),$7o=r(Ywe," \u2014 "),rj=n(Ywe,"A",{href:!0});var TZr=s(rj);I7o=r(TZr,"MegatronBertForNextSentencePrediction"),TZr.forEach(t),N7o=r(Ywe," (MegatronBert model)"),Ywe.forEach(t),j7o=i(il),Eb=n(il,"LI",{});var Kwe=s(Eb);One=n(Kwe,"STRONG",{});var FZr=s(One);D7o=r(FZr,"mobilebert"),FZr.forEach(t),q7o=r(Kwe," \u2014 "),tj=n(Kwe,"A",{href:!0});var CZr=s(tj);G7o=r(CZr,"MobileBertForNextSentencePrediction"),CZr.forEach(t),O7o=r(Kwe," (MobileBERT model)"),Kwe.forEach(t),X7o=i(il),yb=n(il,"LI",{});var Zwe=s(yb);Xne=n(Zwe,"STRONG",{});var MZr=s(Xne);V7o=r(MZr,"qdqbert"),MZr.forEach(t),z7o=r(Zwe," \u2014 "),aj=n(Zwe,"A",{href:!0});var EZr=s(aj);W7o=r(EZr,"QDQBertForNextSentencePrediction"),EZr.forEach(t),Q7o=r(Zwe," (QDQBert model)"),Zwe.forEach(t),il.forEach(t),H7o=i(Qt),wb=n(Qt,"P",{});var eAe=s(wb);U7o=r(eAe,"The model is set in evaluation mode by default using "),Vne=n(eAe,"CODE",{});var yZr=s(Vne);J7o=r(yZr,"model.eval()"),yZr.forEach(t),Y7o=r(eAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),zne=n(eAe,"CODE",{});var wZr=s(zne);K7o=r(wZr,"model.train()"),wZr.forEach(t),eAe.forEach(t),Z7o=i(Qt),Wne=n(Qt,"P",{});var AZr=s(Wne);e8o=r(AZr,"Examples:"),AZr.forEach(t),o8o=i(Qt),m(jy.$$.fragment,Qt),Qt.forEach(t),sl.forEach(t),Fke=i(c),Fd=n(c,"H2",{class:!0});var xSe=s(Fd);Ab=n(xSe,"A",{id:!0,class:!0,href:!0});var LZr=s(Ab);Qne=n(LZr,"SPAN",{});var BZr=s(Qne);m(Dy.$$.fragment,BZr),BZr.forEach(t),LZr.forEach(t),r8o=i(xSe),Hne=n(xSe,"SPAN",{});var xZr=s(Hne);t8o=r(xZr,"AutoModelForTokenClassification"),xZr.forEach(t),xSe.forEach(t),Cke=i(c),ar=n(c,"DIV",{class:!0});var dl=s(ar);m(qy.$$.fragment,dl),a8o=i(dl),Cd=n(dl,"P",{});var lW=s(Cd);n8o=r(lW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Une=n(lW,"CODE",{});var kZr=s(Une);s8o=r(kZr,"from_pretrained()"),kZr.forEach(t),l8o=r(lW,"class method or the "),Jne=n(lW,"CODE",{});var RZr=s(Jne);i8o=r(RZr,"from_config()"),RZr.forEach(t),d8o=r(lW,`class
method.`),lW.forEach(t),c8o=i(dl),Gy=n(dl,"P",{});var kSe=s(Gy);f8o=r(kSe,"This class cannot be instantiated directly using "),Yne=n(kSe,"CODE",{});var SZr=s(Yne);m8o=r(SZr,"__init__()"),SZr.forEach(t),g8o=r(kSe," (throws an error)."),kSe.forEach(t),h8o=i(dl),Kr=n(dl,"DIV",{class:!0});var cl=s(Kr);m(Oy.$$.fragment,cl),p8o=i(cl),Kne=n(cl,"P",{});var PZr=s(Kne);_8o=r(PZr,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),PZr.forEach(t),u8o=i(cl),Md=n(cl,"P",{});var iW=s(Md);b8o=r(iW,`Note:
Loading a model from its configuration file does `),Zne=n(iW,"STRONG",{});var $Zr=s(Zne);v8o=r($Zr,"not"),$Zr.forEach(t),T8o=r(iW,` load the model weights. It only affects the
model\u2019s configuration. Use `),ese=n(iW,"CODE",{});var IZr=s(ese);F8o=r(IZr,"from_pretrained()"),IZr.forEach(t),C8o=r(iW,"to load the model weights."),iW.forEach(t),M8o=i(cl),ose=n(cl,"P",{});var NZr=s(ose);E8o=r(NZr,"Examples:"),NZr.forEach(t),y8o=i(cl),m(Xy.$$.fragment,cl),cl.forEach(t),w8o=i(dl),We=n(dl,"DIV",{class:!0});var Ht=s(We);m(Vy.$$.fragment,Ht),A8o=i(Ht),rse=n(Ht,"P",{});var jZr=s(rse);L8o=r(jZr,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jZr.forEach(t),B8o=i(Ht),Ka=n(Ht,"P",{});var pM=s(Ka);x8o=r(pM,"The model class to instantiate is selected based on the "),tse=n(pM,"CODE",{});var DZr=s(tse);k8o=r(DZr,"model_type"),DZr.forEach(t),R8o=r(pM,` property of the config object (either
passed as an argument or loaded from `),ase=n(pM,"CODE",{});var qZr=s(ase);S8o=r(qZr,"pretrained_model_name_or_path"),qZr.forEach(t),P8o=r(pM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nse=n(pM,"CODE",{});var GZr=s(nse);$8o=r(GZr,"pretrained_model_name_or_path"),GZr.forEach(t),I8o=r(pM,":"),pM.forEach(t),N8o=i(Ht),D=n(Ht,"UL",{});var q=s(D);Lb=n(q,"LI",{});var oAe=s(Lb);sse=n(oAe,"STRONG",{});var OZr=s(sse);j8o=r(OZr,"albert"),OZr.forEach(t),D8o=r(oAe," \u2014 "),nj=n(oAe,"A",{href:!0});var XZr=s(nj);q8o=r(XZr,"AlbertForTokenClassification"),XZr.forEach(t),G8o=r(oAe," (ALBERT model)"),oAe.forEach(t),O8o=i(q),Bb=n(q,"LI",{});var rAe=s(Bb);lse=n(rAe,"STRONG",{});var VZr=s(lse);X8o=r(VZr,"bert"),VZr.forEach(t),V8o=r(rAe," \u2014 "),sj=n(rAe,"A",{href:!0});var zZr=s(sj);z8o=r(zZr,"BertForTokenClassification"),zZr.forEach(t),W8o=r(rAe," (BERT model)"),rAe.forEach(t),Q8o=i(q),xb=n(q,"LI",{});var tAe=s(xb);ise=n(tAe,"STRONG",{});var WZr=s(ise);H8o=r(WZr,"big_bird"),WZr.forEach(t),U8o=r(tAe," \u2014 "),lj=n(tAe,"A",{href:!0});var QZr=s(lj);J8o=r(QZr,"BigBirdForTokenClassification"),QZr.forEach(t),Y8o=r(tAe," (BigBird model)"),tAe.forEach(t),K8o=i(q),kb=n(q,"LI",{});var aAe=s(kb);dse=n(aAe,"STRONG",{});var HZr=s(dse);Z8o=r(HZr,"camembert"),HZr.forEach(t),e9o=r(aAe," \u2014 "),ij=n(aAe,"A",{href:!0});var UZr=s(ij);o9o=r(UZr,"CamembertForTokenClassification"),UZr.forEach(t),r9o=r(aAe," (CamemBERT model)"),aAe.forEach(t),t9o=i(q),Rb=n(q,"LI",{});var nAe=s(Rb);cse=n(nAe,"STRONG",{});var JZr=s(cse);a9o=r(JZr,"canine"),JZr.forEach(t),n9o=r(nAe," \u2014 "),dj=n(nAe,"A",{href:!0});var YZr=s(dj);s9o=r(YZr,"CanineForTokenClassification"),YZr.forEach(t),l9o=r(nAe," (Canine model)"),nAe.forEach(t),i9o=i(q),Sb=n(q,"LI",{});var sAe=s(Sb);fse=n(sAe,"STRONG",{});var KZr=s(fse);d9o=r(KZr,"convbert"),KZr.forEach(t),c9o=r(sAe," \u2014 "),cj=n(sAe,"A",{href:!0});var ZZr=s(cj);f9o=r(ZZr,"ConvBertForTokenClassification"),ZZr.forEach(t),m9o=r(sAe," (ConvBERT model)"),sAe.forEach(t),g9o=i(q),Pb=n(q,"LI",{});var lAe=s(Pb);mse=n(lAe,"STRONG",{});var eet=s(mse);h9o=r(eet,"data2vec-text"),eet.forEach(t),p9o=r(lAe," \u2014 "),fj=n(lAe,"A",{href:!0});var oet=s(fj);_9o=r(oet,"Data2VecTextForTokenClassification"),oet.forEach(t),u9o=r(lAe," (Data2VecText model)"),lAe.forEach(t),b9o=i(q),$b=n(q,"LI",{});var iAe=s($b);gse=n(iAe,"STRONG",{});var ret=s(gse);v9o=r(ret,"deberta"),ret.forEach(t),T9o=r(iAe," \u2014 "),mj=n(iAe,"A",{href:!0});var tet=s(mj);F9o=r(tet,"DebertaForTokenClassification"),tet.forEach(t),C9o=r(iAe," (DeBERTa model)"),iAe.forEach(t),M9o=i(q),Ib=n(q,"LI",{});var dAe=s(Ib);hse=n(dAe,"STRONG",{});var aet=s(hse);E9o=r(aet,"deberta-v2"),aet.forEach(t),y9o=r(dAe," \u2014 "),gj=n(dAe,"A",{href:!0});var net=s(gj);w9o=r(net,"DebertaV2ForTokenClassification"),net.forEach(t),A9o=r(dAe," (DeBERTa-v2 model)"),dAe.forEach(t),L9o=i(q),Nb=n(q,"LI",{});var cAe=s(Nb);pse=n(cAe,"STRONG",{});var set=s(pse);B9o=r(set,"distilbert"),set.forEach(t),x9o=r(cAe," \u2014 "),hj=n(cAe,"A",{href:!0});var iet=s(hj);k9o=r(iet,"DistilBertForTokenClassification"),iet.forEach(t),R9o=r(cAe," (DistilBERT model)"),cAe.forEach(t),S9o=i(q),jb=n(q,"LI",{});var fAe=s(jb);_se=n(fAe,"STRONG",{});var det=s(_se);P9o=r(det,"electra"),det.forEach(t),$9o=r(fAe," \u2014 "),pj=n(fAe,"A",{href:!0});var cet=s(pj);I9o=r(cet,"ElectraForTokenClassification"),cet.forEach(t),N9o=r(fAe," (ELECTRA model)"),fAe.forEach(t),j9o=i(q),Db=n(q,"LI",{});var mAe=s(Db);use=n(mAe,"STRONG",{});var fet=s(use);D9o=r(fet,"flaubert"),fet.forEach(t),q9o=r(mAe," \u2014 "),_j=n(mAe,"A",{href:!0});var met=s(_j);G9o=r(met,"FlaubertForTokenClassification"),met.forEach(t),O9o=r(mAe," (FlauBERT model)"),mAe.forEach(t),X9o=i(q),qb=n(q,"LI",{});var gAe=s(qb);bse=n(gAe,"STRONG",{});var get=s(bse);V9o=r(get,"fnet"),get.forEach(t),z9o=r(gAe," \u2014 "),uj=n(gAe,"A",{href:!0});var het=s(uj);W9o=r(het,"FNetForTokenClassification"),het.forEach(t),Q9o=r(gAe," (FNet model)"),gAe.forEach(t),H9o=i(q),Gb=n(q,"LI",{});var hAe=s(Gb);vse=n(hAe,"STRONG",{});var pet=s(vse);U9o=r(pet,"funnel"),pet.forEach(t),J9o=r(hAe," \u2014 "),bj=n(hAe,"A",{href:!0});var _et=s(bj);Y9o=r(_et,"FunnelForTokenClassification"),_et.forEach(t),K9o=r(hAe," (Funnel Transformer model)"),hAe.forEach(t),Z9o=i(q),Ob=n(q,"LI",{});var pAe=s(Ob);Tse=n(pAe,"STRONG",{});var uet=s(Tse);eBo=r(uet,"gpt2"),uet.forEach(t),oBo=r(pAe," \u2014 "),vj=n(pAe,"A",{href:!0});var bet=s(vj);rBo=r(bet,"GPT2ForTokenClassification"),bet.forEach(t),tBo=r(pAe," (OpenAI GPT-2 model)"),pAe.forEach(t),aBo=i(q),Xb=n(q,"LI",{});var _Ae=s(Xb);Fse=n(_Ae,"STRONG",{});var vet=s(Fse);nBo=r(vet,"ibert"),vet.forEach(t),sBo=r(_Ae," \u2014 "),Tj=n(_Ae,"A",{href:!0});var Tet=s(Tj);lBo=r(Tet,"IBertForTokenClassification"),Tet.forEach(t),iBo=r(_Ae," (I-BERT model)"),_Ae.forEach(t),dBo=i(q),Vb=n(q,"LI",{});var uAe=s(Vb);Cse=n(uAe,"STRONG",{});var Fet=s(Cse);cBo=r(Fet,"layoutlm"),Fet.forEach(t),fBo=r(uAe," \u2014 "),Fj=n(uAe,"A",{href:!0});var Cet=s(Fj);mBo=r(Cet,"LayoutLMForTokenClassification"),Cet.forEach(t),gBo=r(uAe," (LayoutLM model)"),uAe.forEach(t),hBo=i(q),zb=n(q,"LI",{});var bAe=s(zb);Mse=n(bAe,"STRONG",{});var Met=s(Mse);pBo=r(Met,"layoutlmv2"),Met.forEach(t),_Bo=r(bAe," \u2014 "),Cj=n(bAe,"A",{href:!0});var Eet=s(Cj);uBo=r(Eet,"LayoutLMv2ForTokenClassification"),Eet.forEach(t),bBo=r(bAe," (LayoutLMv2 model)"),bAe.forEach(t),vBo=i(q),Wb=n(q,"LI",{});var vAe=s(Wb);Ese=n(vAe,"STRONG",{});var yet=s(Ese);TBo=r(yet,"longformer"),yet.forEach(t),FBo=r(vAe," \u2014 "),Mj=n(vAe,"A",{href:!0});var wet=s(Mj);CBo=r(wet,"LongformerForTokenClassification"),wet.forEach(t),MBo=r(vAe," (Longformer model)"),vAe.forEach(t),EBo=i(q),Qb=n(q,"LI",{});var TAe=s(Qb);yse=n(TAe,"STRONG",{});var Aet=s(yse);yBo=r(Aet,"megatron-bert"),Aet.forEach(t),wBo=r(TAe," \u2014 "),Ej=n(TAe,"A",{href:!0});var Let=s(Ej);ABo=r(Let,"MegatronBertForTokenClassification"),Let.forEach(t),LBo=r(TAe," (MegatronBert model)"),TAe.forEach(t),BBo=i(q),Hb=n(q,"LI",{});var FAe=s(Hb);wse=n(FAe,"STRONG",{});var Bet=s(wse);xBo=r(Bet,"mobilebert"),Bet.forEach(t),kBo=r(FAe," \u2014 "),yj=n(FAe,"A",{href:!0});var xet=s(yj);RBo=r(xet,"MobileBertForTokenClassification"),xet.forEach(t),SBo=r(FAe," (MobileBERT model)"),FAe.forEach(t),PBo=i(q),Ub=n(q,"LI",{});var CAe=s(Ub);Ase=n(CAe,"STRONG",{});var ket=s(Ase);$Bo=r(ket,"mpnet"),ket.forEach(t),IBo=r(CAe," \u2014 "),wj=n(CAe,"A",{href:!0});var Ret=s(wj);NBo=r(Ret,"MPNetForTokenClassification"),Ret.forEach(t),jBo=r(CAe," (MPNet model)"),CAe.forEach(t),DBo=i(q),Jb=n(q,"LI",{});var MAe=s(Jb);Lse=n(MAe,"STRONG",{});var Set=s(Lse);qBo=r(Set,"nystromformer"),Set.forEach(t),GBo=r(MAe," \u2014 "),Aj=n(MAe,"A",{href:!0});var Pet=s(Aj);OBo=r(Pet,"NystromformerForTokenClassification"),Pet.forEach(t),XBo=r(MAe," (Nystromformer model)"),MAe.forEach(t),VBo=i(q),Yb=n(q,"LI",{});var EAe=s(Yb);Bse=n(EAe,"STRONG",{});var $et=s(Bse);zBo=r($et,"qdqbert"),$et.forEach(t),WBo=r(EAe," \u2014 "),Lj=n(EAe,"A",{href:!0});var Iet=s(Lj);QBo=r(Iet,"QDQBertForTokenClassification"),Iet.forEach(t),HBo=r(EAe," (QDQBert model)"),EAe.forEach(t),UBo=i(q),Kb=n(q,"LI",{});var yAe=s(Kb);xse=n(yAe,"STRONG",{});var Net=s(xse);JBo=r(Net,"rembert"),Net.forEach(t),YBo=r(yAe," \u2014 "),Bj=n(yAe,"A",{href:!0});var jet=s(Bj);KBo=r(jet,"RemBertForTokenClassification"),jet.forEach(t),ZBo=r(yAe," (RemBERT model)"),yAe.forEach(t),exo=i(q),Zb=n(q,"LI",{});var wAe=s(Zb);kse=n(wAe,"STRONG",{});var Det=s(kse);oxo=r(Det,"roberta"),Det.forEach(t),rxo=r(wAe," \u2014 "),xj=n(wAe,"A",{href:!0});var qet=s(xj);txo=r(qet,"RobertaForTokenClassification"),qet.forEach(t),axo=r(wAe," (RoBERTa model)"),wAe.forEach(t),nxo=i(q),e3=n(q,"LI",{});var AAe=s(e3);Rse=n(AAe,"STRONG",{});var Get=s(Rse);sxo=r(Get,"roformer"),Get.forEach(t),lxo=r(AAe," \u2014 "),kj=n(AAe,"A",{href:!0});var Oet=s(kj);ixo=r(Oet,"RoFormerForTokenClassification"),Oet.forEach(t),dxo=r(AAe," (RoFormer model)"),AAe.forEach(t),cxo=i(q),o3=n(q,"LI",{});var LAe=s(o3);Sse=n(LAe,"STRONG",{});var Xet=s(Sse);fxo=r(Xet,"squeezebert"),Xet.forEach(t),mxo=r(LAe," \u2014 "),Rj=n(LAe,"A",{href:!0});var Vet=s(Rj);gxo=r(Vet,"SqueezeBertForTokenClassification"),Vet.forEach(t),hxo=r(LAe," (SqueezeBERT model)"),LAe.forEach(t),pxo=i(q),r3=n(q,"LI",{});var BAe=s(r3);Pse=n(BAe,"STRONG",{});var zet=s(Pse);_xo=r(zet,"xlm"),zet.forEach(t),uxo=r(BAe," \u2014 "),Sj=n(BAe,"A",{href:!0});var Wet=s(Sj);bxo=r(Wet,"XLMForTokenClassification"),Wet.forEach(t),vxo=r(BAe," (XLM model)"),BAe.forEach(t),Txo=i(q),t3=n(q,"LI",{});var xAe=s(t3);$se=n(xAe,"STRONG",{});var Qet=s($se);Fxo=r(Qet,"xlm-roberta"),Qet.forEach(t),Cxo=r(xAe," \u2014 "),Pj=n(xAe,"A",{href:!0});var Het=s(Pj);Mxo=r(Het,"XLMRobertaForTokenClassification"),Het.forEach(t),Exo=r(xAe," (XLM-RoBERTa model)"),xAe.forEach(t),yxo=i(q),a3=n(q,"LI",{});var kAe=s(a3);Ise=n(kAe,"STRONG",{});var Uet=s(Ise);wxo=r(Uet,"xlm-roberta-xl"),Uet.forEach(t),Axo=r(kAe," \u2014 "),$j=n(kAe,"A",{href:!0});var Jet=s($j);Lxo=r(Jet,"XLMRobertaXLForTokenClassification"),Jet.forEach(t),Bxo=r(kAe," (XLM-RoBERTa-XL model)"),kAe.forEach(t),xxo=i(q),n3=n(q,"LI",{});var RAe=s(n3);Nse=n(RAe,"STRONG",{});var Yet=s(Nse);kxo=r(Yet,"xlnet"),Yet.forEach(t),Rxo=r(RAe," \u2014 "),Ij=n(RAe,"A",{href:!0});var Ket=s(Ij);Sxo=r(Ket,"XLNetForTokenClassification"),Ket.forEach(t),Pxo=r(RAe," (XLNet model)"),RAe.forEach(t),$xo=i(q),s3=n(q,"LI",{});var SAe=s(s3);jse=n(SAe,"STRONG",{});var Zet=s(jse);Ixo=r(Zet,"yoso"),Zet.forEach(t),Nxo=r(SAe," \u2014 "),Nj=n(SAe,"A",{href:!0});var eot=s(Nj);jxo=r(eot,"YosoForTokenClassification"),eot.forEach(t),Dxo=r(SAe," (YOSO model)"),SAe.forEach(t),q.forEach(t),qxo=i(Ht),l3=n(Ht,"P",{});var PAe=s(l3);Gxo=r(PAe,"The model is set in evaluation mode by default using "),Dse=n(PAe,"CODE",{});var oot=s(Dse);Oxo=r(oot,"model.eval()"),oot.forEach(t),Xxo=r(PAe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qse=n(PAe,"CODE",{});var rot=s(qse);Vxo=r(rot,"model.train()"),rot.forEach(t),PAe.forEach(t),zxo=i(Ht),Gse=n(Ht,"P",{});var tot=s(Gse);Wxo=r(tot,"Examples:"),tot.forEach(t),Qxo=i(Ht),m(zy.$$.fragment,Ht),Ht.forEach(t),dl.forEach(t),Mke=i(c),Ed=n(c,"H2",{class:!0});var RSe=s(Ed);i3=n(RSe,"A",{id:!0,class:!0,href:!0});var aot=s(i3);Ose=n(aot,"SPAN",{});var not=s(Ose);m(Wy.$$.fragment,not),not.forEach(t),aot.forEach(t),Hxo=i(RSe),Xse=n(RSe,"SPAN",{});var sot=s(Xse);Uxo=r(sot,"AutoModelForQuestionAnswering"),sot.forEach(t),RSe.forEach(t),Eke=i(c),nr=n(c,"DIV",{class:!0});var fl=s(nr);m(Qy.$$.fragment,fl),Jxo=i(fl),yd=n(fl,"P",{});var dW=s(yd);Yxo=r(dW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),Vse=n(dW,"CODE",{});var lot=s(Vse);Kxo=r(lot,"from_pretrained()"),lot.forEach(t),Zxo=r(dW,"class method or the "),zse=n(dW,"CODE",{});var iot=s(zse);eko=r(iot,"from_config()"),iot.forEach(t),oko=r(dW,`class
method.`),dW.forEach(t),rko=i(fl),Hy=n(fl,"P",{});var SSe=s(Hy);tko=r(SSe,"This class cannot be instantiated directly using "),Wse=n(SSe,"CODE",{});var dot=s(Wse);ako=r(dot,"__init__()"),dot.forEach(t),nko=r(SSe," (throws an error)."),SSe.forEach(t),sko=i(fl),Zr=n(fl,"DIV",{class:!0});var ml=s(Zr);m(Uy.$$.fragment,ml),lko=i(ml),Qse=n(ml,"P",{});var cot=s(Qse);iko=r(cot,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),cot.forEach(t),dko=i(ml),wd=n(ml,"P",{});var cW=s(wd);cko=r(cW,`Note:
Loading a model from its configuration file does `),Hse=n(cW,"STRONG",{});var fot=s(Hse);fko=r(fot,"not"),fot.forEach(t),mko=r(cW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Use=n(cW,"CODE",{});var mot=s(Use);gko=r(mot,"from_pretrained()"),mot.forEach(t),hko=r(cW,"to load the model weights."),cW.forEach(t),pko=i(ml),Jse=n(ml,"P",{});var got=s(Jse);_ko=r(got,"Examples:"),got.forEach(t),uko=i(ml),m(Jy.$$.fragment,ml),ml.forEach(t),bko=i(fl),Qe=n(fl,"DIV",{class:!0});var Ut=s(Qe);m(Yy.$$.fragment,Ut),vko=i(Ut),Yse=n(Ut,"P",{});var hot=s(Yse);Tko=r(hot,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),hot.forEach(t),Fko=i(Ut),Za=n(Ut,"P",{});var _M=s(Za);Cko=r(_M,"The model class to instantiate is selected based on the "),Kse=n(_M,"CODE",{});var pot=s(Kse);Mko=r(pot,"model_type"),pot.forEach(t),Eko=r(_M,` property of the config object (either
passed as an argument or loaded from `),Zse=n(_M,"CODE",{});var _ot=s(Zse);yko=r(_ot,"pretrained_model_name_or_path"),_ot.forEach(t),wko=r(_M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ele=n(_M,"CODE",{});var uot=s(ele);Ako=r(uot,"pretrained_model_name_or_path"),uot.forEach(t),Lko=r(_M,":"),_M.forEach(t),Bko=i(Ut),R=n(Ut,"UL",{});var P=s(R);d3=n(P,"LI",{});var $Ae=s(d3);ole=n($Ae,"STRONG",{});var bot=s(ole);xko=r(bot,"albert"),bot.forEach(t),kko=r($Ae," \u2014 "),jj=n($Ae,"A",{href:!0});var vot=s(jj);Rko=r(vot,"AlbertForQuestionAnswering"),vot.forEach(t),Sko=r($Ae," (ALBERT model)"),$Ae.forEach(t),Pko=i(P),c3=n(P,"LI",{});var IAe=s(c3);rle=n(IAe,"STRONG",{});var Tot=s(rle);$ko=r(Tot,"bart"),Tot.forEach(t),Iko=r(IAe," \u2014 "),Dj=n(IAe,"A",{href:!0});var Fot=s(Dj);Nko=r(Fot,"BartForQuestionAnswering"),Fot.forEach(t),jko=r(IAe," (BART model)"),IAe.forEach(t),Dko=i(P),f3=n(P,"LI",{});var NAe=s(f3);tle=n(NAe,"STRONG",{});var Cot=s(tle);qko=r(Cot,"bert"),Cot.forEach(t),Gko=r(NAe," \u2014 "),qj=n(NAe,"A",{href:!0});var Mot=s(qj);Oko=r(Mot,"BertForQuestionAnswering"),Mot.forEach(t),Xko=r(NAe," (BERT model)"),NAe.forEach(t),Vko=i(P),m3=n(P,"LI",{});var jAe=s(m3);ale=n(jAe,"STRONG",{});var Eot=s(ale);zko=r(Eot,"big_bird"),Eot.forEach(t),Wko=r(jAe," \u2014 "),Gj=n(jAe,"A",{href:!0});var yot=s(Gj);Qko=r(yot,"BigBirdForQuestionAnswering"),yot.forEach(t),Hko=r(jAe," (BigBird model)"),jAe.forEach(t),Uko=i(P),g3=n(P,"LI",{});var DAe=s(g3);nle=n(DAe,"STRONG",{});var wot=s(nle);Jko=r(wot,"bigbird_pegasus"),wot.forEach(t),Yko=r(DAe," \u2014 "),Oj=n(DAe,"A",{href:!0});var Aot=s(Oj);Kko=r(Aot,"BigBirdPegasusForQuestionAnswering"),Aot.forEach(t),Zko=r(DAe," (BigBirdPegasus model)"),DAe.forEach(t),eRo=i(P),h3=n(P,"LI",{});var qAe=s(h3);sle=n(qAe,"STRONG",{});var Lot=s(sle);oRo=r(Lot,"camembert"),Lot.forEach(t),rRo=r(qAe," \u2014 "),Xj=n(qAe,"A",{href:!0});var Bot=s(Xj);tRo=r(Bot,"CamembertForQuestionAnswering"),Bot.forEach(t),aRo=r(qAe," (CamemBERT model)"),qAe.forEach(t),nRo=i(P),p3=n(P,"LI",{});var GAe=s(p3);lle=n(GAe,"STRONG",{});var xot=s(lle);sRo=r(xot,"canine"),xot.forEach(t),lRo=r(GAe," \u2014 "),Vj=n(GAe,"A",{href:!0});var kot=s(Vj);iRo=r(kot,"CanineForQuestionAnswering"),kot.forEach(t),dRo=r(GAe," (Canine model)"),GAe.forEach(t),cRo=i(P),_3=n(P,"LI",{});var OAe=s(_3);ile=n(OAe,"STRONG",{});var Rot=s(ile);fRo=r(Rot,"convbert"),Rot.forEach(t),mRo=r(OAe," \u2014 "),zj=n(OAe,"A",{href:!0});var Sot=s(zj);gRo=r(Sot,"ConvBertForQuestionAnswering"),Sot.forEach(t),hRo=r(OAe," (ConvBERT model)"),OAe.forEach(t),pRo=i(P),u3=n(P,"LI",{});var XAe=s(u3);dle=n(XAe,"STRONG",{});var Pot=s(dle);_Ro=r(Pot,"data2vec-text"),Pot.forEach(t),uRo=r(XAe," \u2014 "),Wj=n(XAe,"A",{href:!0});var $ot=s(Wj);bRo=r($ot,"Data2VecTextForQuestionAnswering"),$ot.forEach(t),vRo=r(XAe," (Data2VecText model)"),XAe.forEach(t),TRo=i(P),b3=n(P,"LI",{});var VAe=s(b3);cle=n(VAe,"STRONG",{});var Iot=s(cle);FRo=r(Iot,"deberta"),Iot.forEach(t),CRo=r(VAe," \u2014 "),Qj=n(VAe,"A",{href:!0});var Not=s(Qj);MRo=r(Not,"DebertaForQuestionAnswering"),Not.forEach(t),ERo=r(VAe," (DeBERTa model)"),VAe.forEach(t),yRo=i(P),v3=n(P,"LI",{});var zAe=s(v3);fle=n(zAe,"STRONG",{});var jot=s(fle);wRo=r(jot,"deberta-v2"),jot.forEach(t),ARo=r(zAe," \u2014 "),Hj=n(zAe,"A",{href:!0});var Dot=s(Hj);LRo=r(Dot,"DebertaV2ForQuestionAnswering"),Dot.forEach(t),BRo=r(zAe," (DeBERTa-v2 model)"),zAe.forEach(t),xRo=i(P),T3=n(P,"LI",{});var WAe=s(T3);mle=n(WAe,"STRONG",{});var qot=s(mle);kRo=r(qot,"distilbert"),qot.forEach(t),RRo=r(WAe," \u2014 "),Uj=n(WAe,"A",{href:!0});var Got=s(Uj);SRo=r(Got,"DistilBertForQuestionAnswering"),Got.forEach(t),PRo=r(WAe," (DistilBERT model)"),WAe.forEach(t),$Ro=i(P),F3=n(P,"LI",{});var QAe=s(F3);gle=n(QAe,"STRONG",{});var Oot=s(gle);IRo=r(Oot,"electra"),Oot.forEach(t),NRo=r(QAe," \u2014 "),Jj=n(QAe,"A",{href:!0});var Xot=s(Jj);jRo=r(Xot,"ElectraForQuestionAnswering"),Xot.forEach(t),DRo=r(QAe," (ELECTRA model)"),QAe.forEach(t),qRo=i(P),C3=n(P,"LI",{});var HAe=s(C3);hle=n(HAe,"STRONG",{});var Vot=s(hle);GRo=r(Vot,"flaubert"),Vot.forEach(t),ORo=r(HAe," \u2014 "),Yj=n(HAe,"A",{href:!0});var zot=s(Yj);XRo=r(zot,"FlaubertForQuestionAnsweringSimple"),zot.forEach(t),VRo=r(HAe," (FlauBERT model)"),HAe.forEach(t),zRo=i(P),M3=n(P,"LI",{});var UAe=s(M3);ple=n(UAe,"STRONG",{});var Wot=s(ple);WRo=r(Wot,"fnet"),Wot.forEach(t),QRo=r(UAe," \u2014 "),Kj=n(UAe,"A",{href:!0});var Qot=s(Kj);HRo=r(Qot,"FNetForQuestionAnswering"),Qot.forEach(t),URo=r(UAe," (FNet model)"),UAe.forEach(t),JRo=i(P),E3=n(P,"LI",{});var JAe=s(E3);_le=n(JAe,"STRONG",{});var Hot=s(_le);YRo=r(Hot,"funnel"),Hot.forEach(t),KRo=r(JAe," \u2014 "),Zj=n(JAe,"A",{href:!0});var Uot=s(Zj);ZRo=r(Uot,"FunnelForQuestionAnswering"),Uot.forEach(t),eSo=r(JAe," (Funnel Transformer model)"),JAe.forEach(t),oSo=i(P),y3=n(P,"LI",{});var YAe=s(y3);ule=n(YAe,"STRONG",{});var Jot=s(ule);rSo=r(Jot,"gptj"),Jot.forEach(t),tSo=r(YAe," \u2014 "),eD=n(YAe,"A",{href:!0});var Yot=s(eD);aSo=r(Yot,"GPTJForQuestionAnswering"),Yot.forEach(t),nSo=r(YAe," (GPT-J model)"),YAe.forEach(t),sSo=i(P),w3=n(P,"LI",{});var KAe=s(w3);ble=n(KAe,"STRONG",{});var Kot=s(ble);lSo=r(Kot,"ibert"),Kot.forEach(t),iSo=r(KAe," \u2014 "),oD=n(KAe,"A",{href:!0});var Zot=s(oD);dSo=r(Zot,"IBertForQuestionAnswering"),Zot.forEach(t),cSo=r(KAe," (I-BERT model)"),KAe.forEach(t),fSo=i(P),A3=n(P,"LI",{});var ZAe=s(A3);vle=n(ZAe,"STRONG",{});var ert=s(vle);mSo=r(ert,"layoutlmv2"),ert.forEach(t),gSo=r(ZAe," \u2014 "),rD=n(ZAe,"A",{href:!0});var ort=s(rD);hSo=r(ort,"LayoutLMv2ForQuestionAnswering"),ort.forEach(t),pSo=r(ZAe," (LayoutLMv2 model)"),ZAe.forEach(t),_So=i(P),L3=n(P,"LI",{});var e0e=s(L3);Tle=n(e0e,"STRONG",{});var rrt=s(Tle);uSo=r(rrt,"led"),rrt.forEach(t),bSo=r(e0e," \u2014 "),tD=n(e0e,"A",{href:!0});var trt=s(tD);vSo=r(trt,"LEDForQuestionAnswering"),trt.forEach(t),TSo=r(e0e," (LED model)"),e0e.forEach(t),FSo=i(P),B3=n(P,"LI",{});var o0e=s(B3);Fle=n(o0e,"STRONG",{});var art=s(Fle);CSo=r(art,"longformer"),art.forEach(t),MSo=r(o0e," \u2014 "),aD=n(o0e,"A",{href:!0});var nrt=s(aD);ESo=r(nrt,"LongformerForQuestionAnswering"),nrt.forEach(t),ySo=r(o0e," (Longformer model)"),o0e.forEach(t),wSo=i(P),x3=n(P,"LI",{});var r0e=s(x3);Cle=n(r0e,"STRONG",{});var srt=s(Cle);ASo=r(srt,"lxmert"),srt.forEach(t),LSo=r(r0e," \u2014 "),nD=n(r0e,"A",{href:!0});var lrt=s(nD);BSo=r(lrt,"LxmertForQuestionAnswering"),lrt.forEach(t),xSo=r(r0e," (LXMERT model)"),r0e.forEach(t),kSo=i(P),k3=n(P,"LI",{});var t0e=s(k3);Mle=n(t0e,"STRONG",{});var irt=s(Mle);RSo=r(irt,"mbart"),irt.forEach(t),SSo=r(t0e," \u2014 "),sD=n(t0e,"A",{href:!0});var drt=s(sD);PSo=r(drt,"MBartForQuestionAnswering"),drt.forEach(t),$So=r(t0e," (mBART model)"),t0e.forEach(t),ISo=i(P),R3=n(P,"LI",{});var a0e=s(R3);Ele=n(a0e,"STRONG",{});var crt=s(Ele);NSo=r(crt,"megatron-bert"),crt.forEach(t),jSo=r(a0e," \u2014 "),lD=n(a0e,"A",{href:!0});var frt=s(lD);DSo=r(frt,"MegatronBertForQuestionAnswering"),frt.forEach(t),qSo=r(a0e," (MegatronBert model)"),a0e.forEach(t),GSo=i(P),S3=n(P,"LI",{});var n0e=s(S3);yle=n(n0e,"STRONG",{});var mrt=s(yle);OSo=r(mrt,"mobilebert"),mrt.forEach(t),XSo=r(n0e," \u2014 "),iD=n(n0e,"A",{href:!0});var grt=s(iD);VSo=r(grt,"MobileBertForQuestionAnswering"),grt.forEach(t),zSo=r(n0e," (MobileBERT model)"),n0e.forEach(t),WSo=i(P),P3=n(P,"LI",{});var s0e=s(P3);wle=n(s0e,"STRONG",{});var hrt=s(wle);QSo=r(hrt,"mpnet"),hrt.forEach(t),HSo=r(s0e," \u2014 "),dD=n(s0e,"A",{href:!0});var prt=s(dD);USo=r(prt,"MPNetForQuestionAnswering"),prt.forEach(t),JSo=r(s0e," (MPNet model)"),s0e.forEach(t),YSo=i(P),$3=n(P,"LI",{});var l0e=s($3);Ale=n(l0e,"STRONG",{});var _rt=s(Ale);KSo=r(_rt,"nystromformer"),_rt.forEach(t),ZSo=r(l0e," \u2014 "),cD=n(l0e,"A",{href:!0});var urt=s(cD);ePo=r(urt,"NystromformerForQuestionAnswering"),urt.forEach(t),oPo=r(l0e," (Nystromformer model)"),l0e.forEach(t),rPo=i(P),I3=n(P,"LI",{});var i0e=s(I3);Lle=n(i0e,"STRONG",{});var brt=s(Lle);tPo=r(brt,"qdqbert"),brt.forEach(t),aPo=r(i0e," \u2014 "),fD=n(i0e,"A",{href:!0});var vrt=s(fD);nPo=r(vrt,"QDQBertForQuestionAnswering"),vrt.forEach(t),sPo=r(i0e," (QDQBert model)"),i0e.forEach(t),lPo=i(P),N3=n(P,"LI",{});var d0e=s(N3);Ble=n(d0e,"STRONG",{});var Trt=s(Ble);iPo=r(Trt,"reformer"),Trt.forEach(t),dPo=r(d0e," \u2014 "),mD=n(d0e,"A",{href:!0});var Frt=s(mD);cPo=r(Frt,"ReformerForQuestionAnswering"),Frt.forEach(t),fPo=r(d0e," (Reformer model)"),d0e.forEach(t),mPo=i(P),j3=n(P,"LI",{});var c0e=s(j3);xle=n(c0e,"STRONG",{});var Crt=s(xle);gPo=r(Crt,"rembert"),Crt.forEach(t),hPo=r(c0e," \u2014 "),gD=n(c0e,"A",{href:!0});var Mrt=s(gD);pPo=r(Mrt,"RemBertForQuestionAnswering"),Mrt.forEach(t),_Po=r(c0e," (RemBERT model)"),c0e.forEach(t),uPo=i(P),D3=n(P,"LI",{});var f0e=s(D3);kle=n(f0e,"STRONG",{});var Ert=s(kle);bPo=r(Ert,"roberta"),Ert.forEach(t),vPo=r(f0e," \u2014 "),hD=n(f0e,"A",{href:!0});var yrt=s(hD);TPo=r(yrt,"RobertaForQuestionAnswering"),yrt.forEach(t),FPo=r(f0e," (RoBERTa model)"),f0e.forEach(t),CPo=i(P),q3=n(P,"LI",{});var m0e=s(q3);Rle=n(m0e,"STRONG",{});var wrt=s(Rle);MPo=r(wrt,"roformer"),wrt.forEach(t),EPo=r(m0e," \u2014 "),pD=n(m0e,"A",{href:!0});var Art=s(pD);yPo=r(Art,"RoFormerForQuestionAnswering"),Art.forEach(t),wPo=r(m0e," (RoFormer model)"),m0e.forEach(t),APo=i(P),G3=n(P,"LI",{});var g0e=s(G3);Sle=n(g0e,"STRONG",{});var Lrt=s(Sle);LPo=r(Lrt,"splinter"),Lrt.forEach(t),BPo=r(g0e," \u2014 "),_D=n(g0e,"A",{href:!0});var Brt=s(_D);xPo=r(Brt,"SplinterForQuestionAnswering"),Brt.forEach(t),kPo=r(g0e," (Splinter model)"),g0e.forEach(t),RPo=i(P),O3=n(P,"LI",{});var h0e=s(O3);Ple=n(h0e,"STRONG",{});var xrt=s(Ple);SPo=r(xrt,"squeezebert"),xrt.forEach(t),PPo=r(h0e," \u2014 "),uD=n(h0e,"A",{href:!0});var krt=s(uD);$Po=r(krt,"SqueezeBertForQuestionAnswering"),krt.forEach(t),IPo=r(h0e," (SqueezeBERT model)"),h0e.forEach(t),NPo=i(P),X3=n(P,"LI",{});var p0e=s(X3);$le=n(p0e,"STRONG",{});var Rrt=s($le);jPo=r(Rrt,"xlm"),Rrt.forEach(t),DPo=r(p0e," \u2014 "),bD=n(p0e,"A",{href:!0});var Srt=s(bD);qPo=r(Srt,"XLMForQuestionAnsweringSimple"),Srt.forEach(t),GPo=r(p0e," (XLM model)"),p0e.forEach(t),OPo=i(P),V3=n(P,"LI",{});var _0e=s(V3);Ile=n(_0e,"STRONG",{});var Prt=s(Ile);XPo=r(Prt,"xlm-roberta"),Prt.forEach(t),VPo=r(_0e," \u2014 "),vD=n(_0e,"A",{href:!0});var $rt=s(vD);zPo=r($rt,"XLMRobertaForQuestionAnswering"),$rt.forEach(t),WPo=r(_0e," (XLM-RoBERTa model)"),_0e.forEach(t),QPo=i(P),z3=n(P,"LI",{});var u0e=s(z3);Nle=n(u0e,"STRONG",{});var Irt=s(Nle);HPo=r(Irt,"xlm-roberta-xl"),Irt.forEach(t),UPo=r(u0e," \u2014 "),TD=n(u0e,"A",{href:!0});var Nrt=s(TD);JPo=r(Nrt,"XLMRobertaXLForQuestionAnswering"),Nrt.forEach(t),YPo=r(u0e," (XLM-RoBERTa-XL model)"),u0e.forEach(t),KPo=i(P),W3=n(P,"LI",{});var b0e=s(W3);jle=n(b0e,"STRONG",{});var jrt=s(jle);ZPo=r(jrt,"xlnet"),jrt.forEach(t),e$o=r(b0e," \u2014 "),FD=n(b0e,"A",{href:!0});var Drt=s(FD);o$o=r(Drt,"XLNetForQuestionAnsweringSimple"),Drt.forEach(t),r$o=r(b0e," (XLNet model)"),b0e.forEach(t),t$o=i(P),Q3=n(P,"LI",{});var v0e=s(Q3);Dle=n(v0e,"STRONG",{});var qrt=s(Dle);a$o=r(qrt,"yoso"),qrt.forEach(t),n$o=r(v0e," \u2014 "),CD=n(v0e,"A",{href:!0});var Grt=s(CD);s$o=r(Grt,"YosoForQuestionAnswering"),Grt.forEach(t),l$o=r(v0e," (YOSO model)"),v0e.forEach(t),P.forEach(t),i$o=i(Ut),H3=n(Ut,"P",{});var T0e=s(H3);d$o=r(T0e,"The model is set in evaluation mode by default using "),qle=n(T0e,"CODE",{});var Ort=s(qle);c$o=r(Ort,"model.eval()"),Ort.forEach(t),f$o=r(T0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Gle=n(T0e,"CODE",{});var Xrt=s(Gle);m$o=r(Xrt,"model.train()"),Xrt.forEach(t),T0e.forEach(t),g$o=i(Ut),Ole=n(Ut,"P",{});var Vrt=s(Ole);h$o=r(Vrt,"Examples:"),Vrt.forEach(t),p$o=i(Ut),m(Ky.$$.fragment,Ut),Ut.forEach(t),fl.forEach(t),yke=i(c),Ad=n(c,"H2",{class:!0});var PSe=s(Ad);U3=n(PSe,"A",{id:!0,class:!0,href:!0});var zrt=s(U3);Xle=n(zrt,"SPAN",{});var Wrt=s(Xle);m(Zy.$$.fragment,Wrt),Wrt.forEach(t),zrt.forEach(t),_$o=i(PSe),Vle=n(PSe,"SPAN",{});var Qrt=s(Vle);u$o=r(Qrt,"AutoModelForTableQuestionAnswering"),Qrt.forEach(t),PSe.forEach(t),wke=i(c),sr=n(c,"DIV",{class:!0});var gl=s(sr);m(ew.$$.fragment,gl),b$o=i(gl),Ld=n(gl,"P",{});var fW=s(Ld);v$o=r(fW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),zle=n(fW,"CODE",{});var Hrt=s(zle);T$o=r(Hrt,"from_pretrained()"),Hrt.forEach(t),F$o=r(fW,"class method or the "),Wle=n(fW,"CODE",{});var Urt=s(Wle);C$o=r(Urt,"from_config()"),Urt.forEach(t),M$o=r(fW,`class
method.`),fW.forEach(t),E$o=i(gl),ow=n(gl,"P",{});var $Se=s(ow);y$o=r($Se,"This class cannot be instantiated directly using "),Qle=n($Se,"CODE",{});var Jrt=s(Qle);w$o=r(Jrt,"__init__()"),Jrt.forEach(t),A$o=r($Se," (throws an error)."),$Se.forEach(t),L$o=i(gl),et=n(gl,"DIV",{class:!0});var hl=s(et);m(rw.$$.fragment,hl),B$o=i(hl),Hle=n(hl,"P",{});var Yrt=s(Hle);x$o=r(Yrt,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),Yrt.forEach(t),k$o=i(hl),Bd=n(hl,"P",{});var mW=s(Bd);R$o=r(mW,`Note:
Loading a model from its configuration file does `),Ule=n(mW,"STRONG",{});var Krt=s(Ule);S$o=r(Krt,"not"),Krt.forEach(t),P$o=r(mW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Jle=n(mW,"CODE",{});var Zrt=s(Jle);$$o=r(Zrt,"from_pretrained()"),Zrt.forEach(t),I$o=r(mW,"to load the model weights."),mW.forEach(t),N$o=i(hl),Yle=n(hl,"P",{});var ett=s(Yle);j$o=r(ett,"Examples:"),ett.forEach(t),D$o=i(hl),m(tw.$$.fragment,hl),hl.forEach(t),q$o=i(gl),He=n(gl,"DIV",{class:!0});var Jt=s(He);m(aw.$$.fragment,Jt),G$o=i(Jt),Kle=n(Jt,"P",{});var ott=s(Kle);O$o=r(ott,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),ott.forEach(t),X$o=i(Jt),en=n(Jt,"P",{});var uM=s(en);V$o=r(uM,"The model class to instantiate is selected based on the "),Zle=n(uM,"CODE",{});var rtt=s(Zle);z$o=r(rtt,"model_type"),rtt.forEach(t),W$o=r(uM,` property of the config object (either
passed as an argument or loaded from `),eie=n(uM,"CODE",{});var ttt=s(eie);Q$o=r(ttt,"pretrained_model_name_or_path"),ttt.forEach(t),H$o=r(uM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),oie=n(uM,"CODE",{});var att=s(oie);U$o=r(att,"pretrained_model_name_or_path"),att.forEach(t),J$o=r(uM,":"),uM.forEach(t),Y$o=i(Jt),rie=n(Jt,"UL",{});var ntt=s(rie);J3=n(ntt,"LI",{});var F0e=s(J3);tie=n(F0e,"STRONG",{});var stt=s(tie);K$o=r(stt,"tapas"),stt.forEach(t),Z$o=r(F0e," \u2014 "),MD=n(F0e,"A",{href:!0});var ltt=s(MD);eIo=r(ltt,"TapasForQuestionAnswering"),ltt.forEach(t),oIo=r(F0e," (TAPAS model)"),F0e.forEach(t),ntt.forEach(t),rIo=i(Jt),Y3=n(Jt,"P",{});var C0e=s(Y3);tIo=r(C0e,"The model is set in evaluation mode by default using "),aie=n(C0e,"CODE",{});var itt=s(aie);aIo=r(itt,"model.eval()"),itt.forEach(t),nIo=r(C0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),nie=n(C0e,"CODE",{});var dtt=s(nie);sIo=r(dtt,"model.train()"),dtt.forEach(t),C0e.forEach(t),lIo=i(Jt),sie=n(Jt,"P",{});var ctt=s(sie);iIo=r(ctt,"Examples:"),ctt.forEach(t),dIo=i(Jt),m(nw.$$.fragment,Jt),Jt.forEach(t),gl.forEach(t),Ake=i(c),xd=n(c,"H2",{class:!0});var ISe=s(xd);K3=n(ISe,"A",{id:!0,class:!0,href:!0});var ftt=s(K3);lie=n(ftt,"SPAN",{});var mtt=s(lie);m(sw.$$.fragment,mtt),mtt.forEach(t),ftt.forEach(t),cIo=i(ISe),iie=n(ISe,"SPAN",{});var gtt=s(iie);fIo=r(gtt,"AutoModelForImageClassification"),gtt.forEach(t),ISe.forEach(t),Lke=i(c),lr=n(c,"DIV",{class:!0});var pl=s(lr);m(lw.$$.fragment,pl),mIo=i(pl),kd=n(pl,"P",{});var gW=s(kd);gIo=r(gW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),die=n(gW,"CODE",{});var htt=s(die);hIo=r(htt,"from_pretrained()"),htt.forEach(t),pIo=r(gW,"class method or the "),cie=n(gW,"CODE",{});var ptt=s(cie);_Io=r(ptt,"from_config()"),ptt.forEach(t),uIo=r(gW,`class
method.`),gW.forEach(t),bIo=i(pl),iw=n(pl,"P",{});var NSe=s(iw);vIo=r(NSe,"This class cannot be instantiated directly using "),fie=n(NSe,"CODE",{});var _tt=s(fie);TIo=r(_tt,"__init__()"),_tt.forEach(t),FIo=r(NSe," (throws an error)."),NSe.forEach(t),CIo=i(pl),ot=n(pl,"DIV",{class:!0});var _l=s(ot);m(dw.$$.fragment,_l),MIo=i(_l),mie=n(_l,"P",{});var utt=s(mie);EIo=r(utt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),utt.forEach(t),yIo=i(_l),Rd=n(_l,"P",{});var hW=s(Rd);wIo=r(hW,`Note:
Loading a model from its configuration file does `),gie=n(hW,"STRONG",{});var btt=s(gie);AIo=r(btt,"not"),btt.forEach(t),LIo=r(hW,` load the model weights. It only affects the
model\u2019s configuration. Use `),hie=n(hW,"CODE",{});var vtt=s(hie);BIo=r(vtt,"from_pretrained()"),vtt.forEach(t),xIo=r(hW,"to load the model weights."),hW.forEach(t),kIo=i(_l),pie=n(_l,"P",{});var Ttt=s(pie);RIo=r(Ttt,"Examples:"),Ttt.forEach(t),SIo=i(_l),m(cw.$$.fragment,_l),_l.forEach(t),PIo=i(pl),Ue=n(pl,"DIV",{class:!0});var Yt=s(Ue);m(fw.$$.fragment,Yt),$Io=i(Yt),_ie=n(Yt,"P",{});var Ftt=s(_ie);IIo=r(Ftt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Ftt.forEach(t),NIo=i(Yt),on=n(Yt,"P",{});var bM=s(on);jIo=r(bM,"The model class to instantiate is selected based on the "),uie=n(bM,"CODE",{});var Ctt=s(uie);DIo=r(Ctt,"model_type"),Ctt.forEach(t),qIo=r(bM,` property of the config object (either
passed as an argument or loaded from `),bie=n(bM,"CODE",{});var Mtt=s(bie);GIo=r(Mtt,"pretrained_model_name_or_path"),Mtt.forEach(t),OIo=r(bM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),vie=n(bM,"CODE",{});var Ett=s(vie);XIo=r(Ett,"pretrained_model_name_or_path"),Ett.forEach(t),VIo=r(bM,":"),bM.forEach(t),zIo=i(Yt),me=n(Yt,"UL",{});var Fe=s(me);Z3=n(Fe,"LI",{});var M0e=s(Z3);Tie=n(M0e,"STRONG",{});var ytt=s(Tie);WIo=r(ytt,"beit"),ytt.forEach(t),QIo=r(M0e," \u2014 "),ED=n(M0e,"A",{href:!0});var wtt=s(ED);HIo=r(wtt,"BeitForImageClassification"),wtt.forEach(t),UIo=r(M0e," (BEiT model)"),M0e.forEach(t),JIo=i(Fe),e5=n(Fe,"LI",{});var E0e=s(e5);Fie=n(E0e,"STRONG",{});var Att=s(Fie);YIo=r(Att,"convnext"),Att.forEach(t),KIo=r(E0e," \u2014 "),yD=n(E0e,"A",{href:!0});var Ltt=s(yD);ZIo=r(Ltt,"ConvNextForImageClassification"),Ltt.forEach(t),eNo=r(E0e," (ConvNext model)"),E0e.forEach(t),oNo=i(Fe),qs=n(Fe,"LI",{});var H8=s(qs);Cie=n(H8,"STRONG",{});var Btt=s(Cie);rNo=r(Btt,"deit"),Btt.forEach(t),tNo=r(H8," \u2014 "),wD=n(H8,"A",{href:!0});var xtt=s(wD);aNo=r(xtt,"DeiTForImageClassification"),xtt.forEach(t),nNo=r(H8," or "),AD=n(H8,"A",{href:!0});var ktt=s(AD);sNo=r(ktt,"DeiTForImageClassificationWithTeacher"),ktt.forEach(t),lNo=r(H8," (DeiT model)"),H8.forEach(t),iNo=i(Fe),o5=n(Fe,"LI",{});var y0e=s(o5);Mie=n(y0e,"STRONG",{});var Rtt=s(Mie);dNo=r(Rtt,"imagegpt"),Rtt.forEach(t),cNo=r(y0e," \u2014 "),LD=n(y0e,"A",{href:!0});var Stt=s(LD);fNo=r(Stt,"ImageGPTForImageClassification"),Stt.forEach(t),mNo=r(y0e," (ImageGPT model)"),y0e.forEach(t),gNo=i(Fe),ma=n(Fe,"LI",{});var $f=s(ma);Eie=n($f,"STRONG",{});var Ptt=s(Eie);hNo=r(Ptt,"perceiver"),Ptt.forEach(t),pNo=r($f," \u2014 "),BD=n($f,"A",{href:!0});var $tt=s(BD);_No=r($tt,"PerceiverForImageClassificationLearned"),$tt.forEach(t),uNo=r($f," or "),xD=n($f,"A",{href:!0});var Itt=s(xD);bNo=r(Itt,"PerceiverForImageClassificationFourier"),Itt.forEach(t),vNo=r($f," or "),kD=n($f,"A",{href:!0});var Ntt=s(kD);TNo=r(Ntt,"PerceiverForImageClassificationConvProcessing"),Ntt.forEach(t),FNo=r($f," (Perceiver model)"),$f.forEach(t),CNo=i(Fe),r5=n(Fe,"LI",{});var w0e=s(r5);yie=n(w0e,"STRONG",{});var jtt=s(yie);MNo=r(jtt,"poolformer"),jtt.forEach(t),ENo=r(w0e," \u2014 "),RD=n(w0e,"A",{href:!0});var Dtt=s(RD);yNo=r(Dtt,"PoolFormerForImageClassification"),Dtt.forEach(t),wNo=r(w0e," (PoolFormer model)"),w0e.forEach(t),ANo=i(Fe),t5=n(Fe,"LI",{});var A0e=s(t5);wie=n(A0e,"STRONG",{});var qtt=s(wie);LNo=r(qtt,"resnet"),qtt.forEach(t),BNo=r(A0e," \u2014 "),SD=n(A0e,"A",{href:!0});var Gtt=s(SD);xNo=r(Gtt,"ResNetForImageClassification"),Gtt.forEach(t),kNo=r(A0e," (ResNet model)"),A0e.forEach(t),RNo=i(Fe),a5=n(Fe,"LI",{});var L0e=s(a5);Aie=n(L0e,"STRONG",{});var Ott=s(Aie);SNo=r(Ott,"segformer"),Ott.forEach(t),PNo=r(L0e," \u2014 "),PD=n(L0e,"A",{href:!0});var Xtt=s(PD);$No=r(Xtt,"SegformerForImageClassification"),Xtt.forEach(t),INo=r(L0e," (SegFormer model)"),L0e.forEach(t),NNo=i(Fe),n5=n(Fe,"LI",{});var B0e=s(n5);Lie=n(B0e,"STRONG",{});var Vtt=s(Lie);jNo=r(Vtt,"swin"),Vtt.forEach(t),DNo=r(B0e," \u2014 "),$D=n(B0e,"A",{href:!0});var ztt=s($D);qNo=r(ztt,"SwinForImageClassification"),ztt.forEach(t),GNo=r(B0e," (Swin model)"),B0e.forEach(t),ONo=i(Fe),s5=n(Fe,"LI",{});var x0e=s(s5);Bie=n(x0e,"STRONG",{});var Wtt=s(Bie);XNo=r(Wtt,"van"),Wtt.forEach(t),VNo=r(x0e," \u2014 "),ID=n(x0e,"A",{href:!0});var Qtt=s(ID);zNo=r(Qtt,"VanForImageClassification"),Qtt.forEach(t),WNo=r(x0e," (VAN model)"),x0e.forEach(t),QNo=i(Fe),l5=n(Fe,"LI",{});var k0e=s(l5);xie=n(k0e,"STRONG",{});var Htt=s(xie);HNo=r(Htt,"vit"),Htt.forEach(t),UNo=r(k0e," \u2014 "),ND=n(k0e,"A",{href:!0});var Utt=s(ND);JNo=r(Utt,"ViTForImageClassification"),Utt.forEach(t),YNo=r(k0e," (ViT model)"),k0e.forEach(t),Fe.forEach(t),KNo=i(Yt),i5=n(Yt,"P",{});var R0e=s(i5);ZNo=r(R0e,"The model is set in evaluation mode by default using "),kie=n(R0e,"CODE",{});var Jtt=s(kie);ejo=r(Jtt,"model.eval()"),Jtt.forEach(t),ojo=r(R0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Rie=n(R0e,"CODE",{});var Ytt=s(Rie);rjo=r(Ytt,"model.train()"),Ytt.forEach(t),R0e.forEach(t),tjo=i(Yt),Sie=n(Yt,"P",{});var Ktt=s(Sie);ajo=r(Ktt,"Examples:"),Ktt.forEach(t),njo=i(Yt),m(mw.$$.fragment,Yt),Yt.forEach(t),pl.forEach(t),Bke=i(c),Sd=n(c,"H2",{class:!0});var jSe=s(Sd);d5=n(jSe,"A",{id:!0,class:!0,href:!0});var Ztt=s(d5);Pie=n(Ztt,"SPAN",{});var eat=s(Pie);m(gw.$$.fragment,eat),eat.forEach(t),Ztt.forEach(t),sjo=i(jSe),$ie=n(jSe,"SPAN",{});var oat=s($ie);ljo=r(oat,"AutoModelForVision2Seq"),oat.forEach(t),jSe.forEach(t),xke=i(c),ir=n(c,"DIV",{class:!0});var ul=s(ir);m(hw.$$.fragment,ul),ijo=i(ul),Pd=n(ul,"P",{});var pW=s(Pd);djo=r(pW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),Iie=n(pW,"CODE",{});var rat=s(Iie);cjo=r(rat,"from_pretrained()"),rat.forEach(t),fjo=r(pW,"class method or the "),Nie=n(pW,"CODE",{});var tat=s(Nie);mjo=r(tat,"from_config()"),tat.forEach(t),gjo=r(pW,`class
method.`),pW.forEach(t),hjo=i(ul),pw=n(ul,"P",{});var DSe=s(pw);pjo=r(DSe,"This class cannot be instantiated directly using "),jie=n(DSe,"CODE",{});var aat=s(jie);_jo=r(aat,"__init__()"),aat.forEach(t),ujo=r(DSe," (throws an error)."),DSe.forEach(t),bjo=i(ul),rt=n(ul,"DIV",{class:!0});var bl=s(rt);m(_w.$$.fragment,bl),vjo=i(bl),Die=n(bl,"P",{});var nat=s(Die);Tjo=r(nat,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),nat.forEach(t),Fjo=i(bl),$d=n(bl,"P",{});var _W=s($d);Cjo=r(_W,`Note:
Loading a model from its configuration file does `),qie=n(_W,"STRONG",{});var sat=s(qie);Mjo=r(sat,"not"),sat.forEach(t),Ejo=r(_W,` load the model weights. It only affects the
model\u2019s configuration. Use `),Gie=n(_W,"CODE",{});var lat=s(Gie);yjo=r(lat,"from_pretrained()"),lat.forEach(t),wjo=r(_W,"to load the model weights."),_W.forEach(t),Ajo=i(bl),Oie=n(bl,"P",{});var iat=s(Oie);Ljo=r(iat,"Examples:"),iat.forEach(t),Bjo=i(bl),m(uw.$$.fragment,bl),bl.forEach(t),xjo=i(ul),Je=n(ul,"DIV",{class:!0});var Kt=s(Je);m(bw.$$.fragment,Kt),kjo=i(Kt),Xie=n(Kt,"P",{});var dat=s(Xie);Rjo=r(dat,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),dat.forEach(t),Sjo=i(Kt),rn=n(Kt,"P",{});var vM=s(rn);Pjo=r(vM,"The model class to instantiate is selected based on the "),Vie=n(vM,"CODE",{});var cat=s(Vie);$jo=r(cat,"model_type"),cat.forEach(t),Ijo=r(vM,` property of the config object (either
passed as an argument or loaded from `),zie=n(vM,"CODE",{});var fat=s(zie);Njo=r(fat,"pretrained_model_name_or_path"),fat.forEach(t),jjo=r(vM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Wie=n(vM,"CODE",{});var mat=s(Wie);Djo=r(mat,"pretrained_model_name_or_path"),mat.forEach(t),qjo=r(vM,":"),vM.forEach(t),Gjo=i(Kt),Qie=n(Kt,"UL",{});var gat=s(Qie);c5=n(gat,"LI",{});var S0e=s(c5);Hie=n(S0e,"STRONG",{});var hat=s(Hie);Ojo=r(hat,"vision-encoder-decoder"),hat.forEach(t),Xjo=r(S0e," \u2014 "),jD=n(S0e,"A",{href:!0});var pat=s(jD);Vjo=r(pat,"VisionEncoderDecoderModel"),pat.forEach(t),zjo=r(S0e," (Vision Encoder decoder model)"),S0e.forEach(t),gat.forEach(t),Wjo=i(Kt),f5=n(Kt,"P",{});var P0e=s(f5);Qjo=r(P0e,"The model is set in evaluation mode by default using "),Uie=n(P0e,"CODE",{});var _at=s(Uie);Hjo=r(_at,"model.eval()"),_at.forEach(t),Ujo=r(P0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Jie=n(P0e,"CODE",{});var uat=s(Jie);Jjo=r(uat,"model.train()"),uat.forEach(t),P0e.forEach(t),Yjo=i(Kt),Yie=n(Kt,"P",{});var bat=s(Yie);Kjo=r(bat,"Examples:"),bat.forEach(t),Zjo=i(Kt),m(vw.$$.fragment,Kt),Kt.forEach(t),ul.forEach(t),kke=i(c),Id=n(c,"H2",{class:!0});var qSe=s(Id);m5=n(qSe,"A",{id:!0,class:!0,href:!0});var vat=s(m5);Kie=n(vat,"SPAN",{});var Tat=s(Kie);m(Tw.$$.fragment,Tat),Tat.forEach(t),vat.forEach(t),eDo=i(qSe),Zie=n(qSe,"SPAN",{});var Fat=s(Zie);oDo=r(Fat,"AutoModelForAudioClassification"),Fat.forEach(t),qSe.forEach(t),Rke=i(c),dr=n(c,"DIV",{class:!0});var vl=s(dr);m(Fw.$$.fragment,vl),rDo=i(vl),Nd=n(vl,"P",{});var uW=s(Nd);tDo=r(uW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio classification head) when created
with the `),ede=n(uW,"CODE",{});var Cat=s(ede);aDo=r(Cat,"from_pretrained()"),Cat.forEach(t),nDo=r(uW,"class method or the "),ode=n(uW,"CODE",{});var Mat=s(ode);sDo=r(Mat,"from_config()"),Mat.forEach(t),lDo=r(uW,`class
method.`),uW.forEach(t),iDo=i(vl),Cw=n(vl,"P",{});var GSe=s(Cw);dDo=r(GSe,"This class cannot be instantiated directly using "),rde=n(GSe,"CODE",{});var Eat=s(rde);cDo=r(Eat,"__init__()"),Eat.forEach(t),fDo=r(GSe," (throws an error)."),GSe.forEach(t),mDo=i(vl),tt=n(vl,"DIV",{class:!0});var Tl=s(tt);m(Mw.$$.fragment,Tl),gDo=i(Tl),tde=n(Tl,"P",{});var yat=s(tde);hDo=r(yat,"Instantiates one of the model classes of the library (with a audio classification head) from a configuration."),yat.forEach(t),pDo=i(Tl),jd=n(Tl,"P",{});var bW=s(jd);_Do=r(bW,`Note:
Loading a model from its configuration file does `),ade=n(bW,"STRONG",{});var wat=s(ade);uDo=r(wat,"not"),wat.forEach(t),bDo=r(bW,` load the model weights. It only affects the
model\u2019s configuration. Use `),nde=n(bW,"CODE",{});var Aat=s(nde);vDo=r(Aat,"from_pretrained()"),Aat.forEach(t),TDo=r(bW,"to load the model weights."),bW.forEach(t),FDo=i(Tl),sde=n(Tl,"P",{});var Lat=s(sde);CDo=r(Lat,"Examples:"),Lat.forEach(t),MDo=i(Tl),m(Ew.$$.fragment,Tl),Tl.forEach(t),EDo=i(vl),Ye=n(vl,"DIV",{class:!0});var Zt=s(Ye);m(yw.$$.fragment,Zt),yDo=i(Zt),lde=n(Zt,"P",{});var Bat=s(lde);wDo=r(Bat,"Instantiate one of the model classes of the library (with a audio classification head) from a pretrained model."),Bat.forEach(t),ADo=i(Zt),tn=n(Zt,"P",{});var TM=s(tn);LDo=r(TM,"The model class to instantiate is selected based on the "),ide=n(TM,"CODE",{});var xat=s(ide);BDo=r(xat,"model_type"),xat.forEach(t),xDo=r(TM,` property of the config object (either
passed as an argument or loaded from `),dde=n(TM,"CODE",{});var kat=s(dde);kDo=r(kat,"pretrained_model_name_or_path"),kat.forEach(t),RDo=r(TM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),cde=n(TM,"CODE",{});var Rat=s(cde);SDo=r(Rat,"pretrained_model_name_or_path"),Rat.forEach(t),PDo=r(TM,":"),TM.forEach(t),$Do=i(Zt),ke=n(Zt,"UL",{});var qo=s(ke);g5=n(qo,"LI",{});var $0e=s(g5);fde=n($0e,"STRONG",{});var Sat=s(fde);IDo=r(Sat,"data2vec-audio"),Sat.forEach(t),NDo=r($0e," \u2014 "),DD=n($0e,"A",{href:!0});var Pat=s(DD);jDo=r(Pat,"Data2VecAudioForSequenceClassification"),Pat.forEach(t),DDo=r($0e," (Data2VecAudio model)"),$0e.forEach(t),qDo=i(qo),h5=n(qo,"LI",{});var I0e=s(h5);mde=n(I0e,"STRONG",{});var $at=s(mde);GDo=r($at,"hubert"),$at.forEach(t),ODo=r(I0e," \u2014 "),qD=n(I0e,"A",{href:!0});var Iat=s(qD);XDo=r(Iat,"HubertForSequenceClassification"),Iat.forEach(t),VDo=r(I0e," (Hubert model)"),I0e.forEach(t),zDo=i(qo),p5=n(qo,"LI",{});var N0e=s(p5);gde=n(N0e,"STRONG",{});var Nat=s(gde);WDo=r(Nat,"sew"),Nat.forEach(t),QDo=r(N0e," \u2014 "),GD=n(N0e,"A",{href:!0});var jat=s(GD);HDo=r(jat,"SEWForSequenceClassification"),jat.forEach(t),UDo=r(N0e," (SEW model)"),N0e.forEach(t),JDo=i(qo),_5=n(qo,"LI",{});var j0e=s(_5);hde=n(j0e,"STRONG",{});var Dat=s(hde);YDo=r(Dat,"sew-d"),Dat.forEach(t),KDo=r(j0e," \u2014 "),OD=n(j0e,"A",{href:!0});var qat=s(OD);ZDo=r(qat,"SEWDForSequenceClassification"),qat.forEach(t),eqo=r(j0e," (SEW-D model)"),j0e.forEach(t),oqo=i(qo),u5=n(qo,"LI",{});var D0e=s(u5);pde=n(D0e,"STRONG",{});var Gat=s(pde);rqo=r(Gat,"unispeech"),Gat.forEach(t),tqo=r(D0e," \u2014 "),XD=n(D0e,"A",{href:!0});var Oat=s(XD);aqo=r(Oat,"UniSpeechForSequenceClassification"),Oat.forEach(t),nqo=r(D0e," (UniSpeech model)"),D0e.forEach(t),sqo=i(qo),b5=n(qo,"LI",{});var q0e=s(b5);_de=n(q0e,"STRONG",{});var Xat=s(_de);lqo=r(Xat,"unispeech-sat"),Xat.forEach(t),iqo=r(q0e," \u2014 "),VD=n(q0e,"A",{href:!0});var Vat=s(VD);dqo=r(Vat,"UniSpeechSatForSequenceClassification"),Vat.forEach(t),cqo=r(q0e," (UniSpeechSat model)"),q0e.forEach(t),fqo=i(qo),v5=n(qo,"LI",{});var G0e=s(v5);ude=n(G0e,"STRONG",{});var zat=s(ude);mqo=r(zat,"wav2vec2"),zat.forEach(t),gqo=r(G0e," \u2014 "),zD=n(G0e,"A",{href:!0});var Wat=s(zD);hqo=r(Wat,"Wav2Vec2ForSequenceClassification"),Wat.forEach(t),pqo=r(G0e," (Wav2Vec2 model)"),G0e.forEach(t),_qo=i(qo),T5=n(qo,"LI",{});var O0e=s(T5);bde=n(O0e,"STRONG",{});var Qat=s(bde);uqo=r(Qat,"wavlm"),Qat.forEach(t),bqo=r(O0e," \u2014 "),WD=n(O0e,"A",{href:!0});var Hat=s(WD);vqo=r(Hat,"WavLMForSequenceClassification"),Hat.forEach(t),Tqo=r(O0e," (WavLM model)"),O0e.forEach(t),qo.forEach(t),Fqo=i(Zt),F5=n(Zt,"P",{});var X0e=s(F5);Cqo=r(X0e,"The model is set in evaluation mode by default using "),vde=n(X0e,"CODE",{});var Uat=s(vde);Mqo=r(Uat,"model.eval()"),Uat.forEach(t),Eqo=r(X0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Tde=n(X0e,"CODE",{});var Jat=s(Tde);yqo=r(Jat,"model.train()"),Jat.forEach(t),X0e.forEach(t),wqo=i(Zt),Fde=n(Zt,"P",{});var Yat=s(Fde);Aqo=r(Yat,"Examples:"),Yat.forEach(t),Lqo=i(Zt),m(ww.$$.fragment,Zt),Zt.forEach(t),vl.forEach(t),Ske=i(c),Dd=n(c,"H2",{class:!0});var OSe=s(Dd);C5=n(OSe,"A",{id:!0,class:!0,href:!0});var Kat=s(C5);Cde=n(Kat,"SPAN",{});var Zat=s(Cde);m(Aw.$$.fragment,Zat),Zat.forEach(t),Kat.forEach(t),Bqo=i(OSe),Mde=n(OSe,"SPAN",{});var ent=s(Mde);xqo=r(ent,"AutoModelForAudioFrameClassification"),ent.forEach(t),OSe.forEach(t),Pke=i(c),cr=n(c,"DIV",{class:!0});var Fl=s(cr);m(Lw.$$.fragment,Fl),kqo=i(Fl),qd=n(Fl,"P",{});var vW=s(qd);Rqo=r(vW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio frame (token) classification head) when created
with the `),Ede=n(vW,"CODE",{});var ont=s(Ede);Sqo=r(ont,"from_pretrained()"),ont.forEach(t),Pqo=r(vW,"class method or the "),yde=n(vW,"CODE",{});var rnt=s(yde);$qo=r(rnt,"from_config()"),rnt.forEach(t),Iqo=r(vW,`class
method.`),vW.forEach(t),Nqo=i(Fl),Bw=n(Fl,"P",{});var XSe=s(Bw);jqo=r(XSe,"This class cannot be instantiated directly using "),wde=n(XSe,"CODE",{});var tnt=s(wde);Dqo=r(tnt,"__init__()"),tnt.forEach(t),qqo=r(XSe," (throws an error)."),XSe.forEach(t),Gqo=i(Fl),at=n(Fl,"DIV",{class:!0});var Cl=s(at);m(xw.$$.fragment,Cl),Oqo=i(Cl),Ade=n(Cl,"P",{});var ant=s(Ade);Xqo=r(ant,"Instantiates one of the model classes of the library (with a audio frame (token) classification head) from a configuration."),ant.forEach(t),Vqo=i(Cl),Gd=n(Cl,"P",{});var TW=s(Gd);zqo=r(TW,`Note:
Loading a model from its configuration file does `),Lde=n(TW,"STRONG",{});var nnt=s(Lde);Wqo=r(nnt,"not"),nnt.forEach(t),Qqo=r(TW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Bde=n(TW,"CODE",{});var snt=s(Bde);Hqo=r(snt,"from_pretrained()"),snt.forEach(t),Uqo=r(TW,"to load the model weights."),TW.forEach(t),Jqo=i(Cl),xde=n(Cl,"P",{});var lnt=s(xde);Yqo=r(lnt,"Examples:"),lnt.forEach(t),Kqo=i(Cl),m(kw.$$.fragment,Cl),Cl.forEach(t),Zqo=i(Fl),Ke=n(Fl,"DIV",{class:!0});var ea=s(Ke);m(Rw.$$.fragment,ea),eGo=i(ea),kde=n(ea,"P",{});var int=s(kde);oGo=r(int,"Instantiate one of the model classes of the library (with a audio frame (token) classification head) from a pretrained model."),int.forEach(t),rGo=i(ea),an=n(ea,"P",{});var FM=s(an);tGo=r(FM,"The model class to instantiate is selected based on the "),Rde=n(FM,"CODE",{});var dnt=s(Rde);aGo=r(dnt,"model_type"),dnt.forEach(t),nGo=r(FM,` property of the config object (either
passed as an argument or loaded from `),Sde=n(FM,"CODE",{});var cnt=s(Sde);sGo=r(cnt,"pretrained_model_name_or_path"),cnt.forEach(t),lGo=r(FM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Pde=n(FM,"CODE",{});var fnt=s(Pde);iGo=r(fnt,"pretrained_model_name_or_path"),fnt.forEach(t),dGo=r(FM,":"),FM.forEach(t),cGo=i(ea),nn=n(ea,"UL",{});var CM=s(nn);M5=n(CM,"LI",{});var V0e=s(M5);$de=n(V0e,"STRONG",{});var mnt=s($de);fGo=r(mnt,"data2vec-audio"),mnt.forEach(t),mGo=r(V0e," \u2014 "),QD=n(V0e,"A",{href:!0});var gnt=s(QD);gGo=r(gnt,"Data2VecAudioForAudioFrameClassification"),gnt.forEach(t),hGo=r(V0e," (Data2VecAudio model)"),V0e.forEach(t),pGo=i(CM),E5=n(CM,"LI",{});var z0e=s(E5);Ide=n(z0e,"STRONG",{});var hnt=s(Ide);_Go=r(hnt,"unispeech-sat"),hnt.forEach(t),uGo=r(z0e," \u2014 "),HD=n(z0e,"A",{href:!0});var pnt=s(HD);bGo=r(pnt,"UniSpeechSatForAudioFrameClassification"),pnt.forEach(t),vGo=r(z0e," (UniSpeechSat model)"),z0e.forEach(t),TGo=i(CM),y5=n(CM,"LI",{});var W0e=s(y5);Nde=n(W0e,"STRONG",{});var _nt=s(Nde);FGo=r(_nt,"wav2vec2"),_nt.forEach(t),CGo=r(W0e," \u2014 "),UD=n(W0e,"A",{href:!0});var unt=s(UD);MGo=r(unt,"Wav2Vec2ForAudioFrameClassification"),unt.forEach(t),EGo=r(W0e," (Wav2Vec2 model)"),W0e.forEach(t),yGo=i(CM),w5=n(CM,"LI",{});var Q0e=s(w5);jde=n(Q0e,"STRONG",{});var bnt=s(jde);wGo=r(bnt,"wavlm"),bnt.forEach(t),AGo=r(Q0e," \u2014 "),JD=n(Q0e,"A",{href:!0});var vnt=s(JD);LGo=r(vnt,"WavLMForAudioFrameClassification"),vnt.forEach(t),BGo=r(Q0e," (WavLM model)"),Q0e.forEach(t),CM.forEach(t),xGo=i(ea),A5=n(ea,"P",{});var H0e=s(A5);kGo=r(H0e,"The model is set in evaluation mode by default using "),Dde=n(H0e,"CODE",{});var Tnt=s(Dde);RGo=r(Tnt,"model.eval()"),Tnt.forEach(t),SGo=r(H0e,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),qde=n(H0e,"CODE",{});var Fnt=s(qde);PGo=r(Fnt,"model.train()"),Fnt.forEach(t),H0e.forEach(t),$Go=i(ea),Gde=n(ea,"P",{});var Cnt=s(Gde);IGo=r(Cnt,"Examples:"),Cnt.forEach(t),NGo=i(ea),m(Sw.$$.fragment,ea),ea.forEach(t),Fl.forEach(t),$ke=i(c),Od=n(c,"H2",{class:!0});var VSe=s(Od);L5=n(VSe,"A",{id:!0,class:!0,href:!0});var Mnt=s(L5);Ode=n(Mnt,"SPAN",{});var Ent=s(Ode);m(Pw.$$.fragment,Ent),Ent.forEach(t),Mnt.forEach(t),jGo=i(VSe),Xde=n(VSe,"SPAN",{});var ynt=s(Xde);DGo=r(ynt,"AutoModelForCTC"),ynt.forEach(t),VSe.forEach(t),Ike=i(c),fr=n(c,"DIV",{class:!0});var Ml=s(fr);m($w.$$.fragment,Ml),qGo=i(Ml),Xd=n(Ml,"P",{});var FW=s(Xd);GGo=r(FW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a connectionist temporal classification head) when created
with the `),Vde=n(FW,"CODE",{});var wnt=s(Vde);OGo=r(wnt,"from_pretrained()"),wnt.forEach(t),XGo=r(FW,"class method or the "),zde=n(FW,"CODE",{});var Ant=s(zde);VGo=r(Ant,"from_config()"),Ant.forEach(t),zGo=r(FW,`class
method.`),FW.forEach(t),WGo=i(Ml),Iw=n(Ml,"P",{});var zSe=s(Iw);QGo=r(zSe,"This class cannot be instantiated directly using "),Wde=n(zSe,"CODE",{});var Lnt=s(Wde);HGo=r(Lnt,"__init__()"),Lnt.forEach(t),UGo=r(zSe," (throws an error)."),zSe.forEach(t),JGo=i(Ml),nt=n(Ml,"DIV",{class:!0});var El=s(nt);m(Nw.$$.fragment,El),YGo=i(El),Qde=n(El,"P",{});var Bnt=s(Qde);KGo=r(Bnt,"Instantiates one of the model classes of the library (with a connectionist temporal classification head) from a configuration."),Bnt.forEach(t),ZGo=i(El),Vd=n(El,"P",{});var CW=s(Vd);eOo=r(CW,`Note:
Loading a model from its configuration file does `),Hde=n(CW,"STRONG",{});var xnt=s(Hde);oOo=r(xnt,"not"),xnt.forEach(t),rOo=r(CW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ude=n(CW,"CODE",{});var knt=s(Ude);tOo=r(knt,"from_pretrained()"),knt.forEach(t),aOo=r(CW,"to load the model weights."),CW.forEach(t),nOo=i(El),Jde=n(El,"P",{});var Rnt=s(Jde);sOo=r(Rnt,"Examples:"),Rnt.forEach(t),lOo=i(El),m(jw.$$.fragment,El),El.forEach(t),iOo=i(Ml),Ze=n(Ml,"DIV",{class:!0});var oa=s(Ze);m(Dw.$$.fragment,oa),dOo=i(oa),Yde=n(oa,"P",{});var Snt=s(Yde);cOo=r(Snt,"Instantiate one of the model classes of the library (with a connectionist temporal classification head) from a pretrained model."),Snt.forEach(t),fOo=i(oa),sn=n(oa,"P",{});var MM=s(sn);mOo=r(MM,"The model class to instantiate is selected based on the "),Kde=n(MM,"CODE",{});var Pnt=s(Kde);gOo=r(Pnt,"model_type"),Pnt.forEach(t),hOo=r(MM,` property of the config object (either
passed as an argument or loaded from `),Zde=n(MM,"CODE",{});var $nt=s(Zde);pOo=r($nt,"pretrained_model_name_or_path"),$nt.forEach(t),_Oo=r(MM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ece=n(MM,"CODE",{});var Int=s(ece);uOo=r(Int,"pretrained_model_name_or_path"),Int.forEach(t),bOo=r(MM,":"),MM.forEach(t),vOo=i(oa),Re=n(oa,"UL",{});var Go=s(Re);B5=n(Go,"LI",{});var U0e=s(B5);oce=n(U0e,"STRONG",{});var Nnt=s(oce);TOo=r(Nnt,"data2vec-audio"),Nnt.forEach(t),FOo=r(U0e," \u2014 "),YD=n(U0e,"A",{href:!0});var jnt=s(YD);COo=r(jnt,"Data2VecAudioForCTC"),jnt.forEach(t),MOo=r(U0e," (Data2VecAudio model)"),U0e.forEach(t),EOo=i(Go),x5=n(Go,"LI",{});var J0e=s(x5);rce=n(J0e,"STRONG",{});var Dnt=s(rce);yOo=r(Dnt,"hubert"),Dnt.forEach(t),wOo=r(J0e," \u2014 "),KD=n(J0e,"A",{href:!0});var qnt=s(KD);AOo=r(qnt,"HubertForCTC"),qnt.forEach(t),LOo=r(J0e," (Hubert model)"),J0e.forEach(t),BOo=i(Go),k5=n(Go,"LI",{});var Y0e=s(k5);tce=n(Y0e,"STRONG",{});var Gnt=s(tce);xOo=r(Gnt,"sew"),Gnt.forEach(t),kOo=r(Y0e," \u2014 "),ZD=n(Y0e,"A",{href:!0});var Ont=s(ZD);ROo=r(Ont,"SEWForCTC"),Ont.forEach(t),SOo=r(Y0e," (SEW model)"),Y0e.forEach(t),POo=i(Go),R5=n(Go,"LI",{});var K0e=s(R5);ace=n(K0e,"STRONG",{});var Xnt=s(ace);$Oo=r(Xnt,"sew-d"),Xnt.forEach(t),IOo=r(K0e," \u2014 "),eq=n(K0e,"A",{href:!0});var Vnt=s(eq);NOo=r(Vnt,"SEWDForCTC"),Vnt.forEach(t),jOo=r(K0e," (SEW-D model)"),K0e.forEach(t),DOo=i(Go),S5=n(Go,"LI",{});var Z0e=s(S5);nce=n(Z0e,"STRONG",{});var znt=s(nce);qOo=r(znt,"unispeech"),znt.forEach(t),GOo=r(Z0e," \u2014 "),oq=n(Z0e,"A",{href:!0});var Wnt=s(oq);OOo=r(Wnt,"UniSpeechForCTC"),Wnt.forEach(t),XOo=r(Z0e," (UniSpeech model)"),Z0e.forEach(t),VOo=i(Go),P5=n(Go,"LI",{});var eLe=s(P5);sce=n(eLe,"STRONG",{});var Qnt=s(sce);zOo=r(Qnt,"unispeech-sat"),Qnt.forEach(t),WOo=r(eLe," \u2014 "),rq=n(eLe,"A",{href:!0});var Hnt=s(rq);QOo=r(Hnt,"UniSpeechSatForCTC"),Hnt.forEach(t),HOo=r(eLe," (UniSpeechSat model)"),eLe.forEach(t),UOo=i(Go),$5=n(Go,"LI",{});var oLe=s($5);lce=n(oLe,"STRONG",{});var Unt=s(lce);JOo=r(Unt,"wav2vec2"),Unt.forEach(t),YOo=r(oLe," \u2014 "),tq=n(oLe,"A",{href:!0});var Jnt=s(tq);KOo=r(Jnt,"Wav2Vec2ForCTC"),Jnt.forEach(t),ZOo=r(oLe," (Wav2Vec2 model)"),oLe.forEach(t),eXo=i(Go),I5=n(Go,"LI",{});var rLe=s(I5);ice=n(rLe,"STRONG",{});var Ynt=s(ice);oXo=r(Ynt,"wavlm"),Ynt.forEach(t),rXo=r(rLe," \u2014 "),aq=n(rLe,"A",{href:!0});var Knt=s(aq);tXo=r(Knt,"WavLMForCTC"),Knt.forEach(t),aXo=r(rLe," (WavLM model)"),rLe.forEach(t),Go.forEach(t),nXo=i(oa),N5=n(oa,"P",{});var tLe=s(N5);sXo=r(tLe,"The model is set in evaluation mode by default using "),dce=n(tLe,"CODE",{});var Znt=s(dce);lXo=r(Znt,"model.eval()"),Znt.forEach(t),iXo=r(tLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),cce=n(tLe,"CODE",{});var est=s(cce);dXo=r(est,"model.train()"),est.forEach(t),tLe.forEach(t),cXo=i(oa),fce=n(oa,"P",{});var ost=s(fce);fXo=r(ost,"Examples:"),ost.forEach(t),mXo=i(oa),m(qw.$$.fragment,oa),oa.forEach(t),Ml.forEach(t),Nke=i(c),zd=n(c,"H2",{class:!0});var WSe=s(zd);j5=n(WSe,"A",{id:!0,class:!0,href:!0});var rst=s(j5);mce=n(rst,"SPAN",{});var tst=s(mce);m(Gw.$$.fragment,tst),tst.forEach(t),rst.forEach(t),gXo=i(WSe),gce=n(WSe,"SPAN",{});var ast=s(gce);hXo=r(ast,"AutoModelForSpeechSeq2Seq"),ast.forEach(t),WSe.forEach(t),jke=i(c),mr=n(c,"DIV",{class:!0});var yl=s(mr);m(Ow.$$.fragment,yl),pXo=i(yl),Wd=n(yl,"P",{});var MW=s(Wd);_Xo=r(MW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),hce=n(MW,"CODE",{});var nst=s(hce);uXo=r(nst,"from_pretrained()"),nst.forEach(t),bXo=r(MW,"class method or the "),pce=n(MW,"CODE",{});var sst=s(pce);vXo=r(sst,"from_config()"),sst.forEach(t),TXo=r(MW,`class
method.`),MW.forEach(t),FXo=i(yl),Xw=n(yl,"P",{});var QSe=s(Xw);CXo=r(QSe,"This class cannot be instantiated directly using "),_ce=n(QSe,"CODE",{});var lst=s(_ce);MXo=r(lst,"__init__()"),lst.forEach(t),EXo=r(QSe," (throws an error)."),QSe.forEach(t),yXo=i(yl),st=n(yl,"DIV",{class:!0});var wl=s(st);m(Vw.$$.fragment,wl),wXo=i(wl),uce=n(wl,"P",{});var ist=s(uce);AXo=r(ist,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),ist.forEach(t),LXo=i(wl),Qd=n(wl,"P",{});var EW=s(Qd);BXo=r(EW,`Note:
Loading a model from its configuration file does `),bce=n(EW,"STRONG",{});var dst=s(bce);xXo=r(dst,"not"),dst.forEach(t),kXo=r(EW,` load the model weights. It only affects the
model\u2019s configuration. Use `),vce=n(EW,"CODE",{});var cst=s(vce);RXo=r(cst,"from_pretrained()"),cst.forEach(t),SXo=r(EW,"to load the model weights."),EW.forEach(t),PXo=i(wl),Tce=n(wl,"P",{});var fst=s(Tce);$Xo=r(fst,"Examples:"),fst.forEach(t),IXo=i(wl),m(zw.$$.fragment,wl),wl.forEach(t),NXo=i(yl),eo=n(yl,"DIV",{class:!0});var ra=s(eo);m(Ww.$$.fragment,ra),jXo=i(ra),Fce=n(ra,"P",{});var mst=s(Fce);DXo=r(mst,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),mst.forEach(t),qXo=i(ra),ln=n(ra,"P",{});var EM=s(ln);GXo=r(EM,"The model class to instantiate is selected based on the "),Cce=n(EM,"CODE",{});var gst=s(Cce);OXo=r(gst,"model_type"),gst.forEach(t),XXo=r(EM,` property of the config object (either
passed as an argument or loaded from `),Mce=n(EM,"CODE",{});var hst=s(Mce);VXo=r(hst,"pretrained_model_name_or_path"),hst.forEach(t),zXo=r(EM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ece=n(EM,"CODE",{});var pst=s(Ece);WXo=r(pst,"pretrained_model_name_or_path"),pst.forEach(t),QXo=r(EM,":"),EM.forEach(t),HXo=i(ra),Qw=n(ra,"UL",{});var HSe=s(Qw);D5=n(HSe,"LI",{});var aLe=s(D5);yce=n(aLe,"STRONG",{});var _st=s(yce);UXo=r(_st,"speech-encoder-decoder"),_st.forEach(t),JXo=r(aLe," \u2014 "),nq=n(aLe,"A",{href:!0});var ust=s(nq);YXo=r(ust,"SpeechEncoderDecoderModel"),ust.forEach(t),KXo=r(aLe," (Speech Encoder decoder model)"),aLe.forEach(t),ZXo=i(HSe),q5=n(HSe,"LI",{});var nLe=s(q5);wce=n(nLe,"STRONG",{});var bst=s(wce);eVo=r(bst,"speech_to_text"),bst.forEach(t),oVo=r(nLe," \u2014 "),sq=n(nLe,"A",{href:!0});var vst=s(sq);rVo=r(vst,"Speech2TextForConditionalGeneration"),vst.forEach(t),tVo=r(nLe," (Speech2Text model)"),nLe.forEach(t),HSe.forEach(t),aVo=i(ra),G5=n(ra,"P",{});var sLe=s(G5);nVo=r(sLe,"The model is set in evaluation mode by default using "),Ace=n(sLe,"CODE",{});var Tst=s(Ace);sVo=r(Tst,"model.eval()"),Tst.forEach(t),lVo=r(sLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Lce=n(sLe,"CODE",{});var Fst=s(Lce);iVo=r(Fst,"model.train()"),Fst.forEach(t),sLe.forEach(t),dVo=i(ra),Bce=n(ra,"P",{});var Cst=s(Bce);cVo=r(Cst,"Examples:"),Cst.forEach(t),fVo=i(ra),m(Hw.$$.fragment,ra),ra.forEach(t),yl.forEach(t),Dke=i(c),Hd=n(c,"H2",{class:!0});var USe=s(Hd);O5=n(USe,"A",{id:!0,class:!0,href:!0});var Mst=s(O5);xce=n(Mst,"SPAN",{});var Est=s(xce);m(Uw.$$.fragment,Est),Est.forEach(t),Mst.forEach(t),mVo=i(USe),kce=n(USe,"SPAN",{});var yst=s(kce);gVo=r(yst,"AutoModelForAudioXVector"),yst.forEach(t),USe.forEach(t),qke=i(c),gr=n(c,"DIV",{class:!0});var Al=s(gr);m(Jw.$$.fragment,Al),hVo=i(Al),Ud=n(Al,"P",{});var yW=s(Ud);pVo=r(yW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a audio retrieval via x-vector head) when created
with the `),Rce=n(yW,"CODE",{});var wst=s(Rce);_Vo=r(wst,"from_pretrained()"),wst.forEach(t),uVo=r(yW,"class method or the "),Sce=n(yW,"CODE",{});var Ast=s(Sce);bVo=r(Ast,"from_config()"),Ast.forEach(t),vVo=r(yW,`class
method.`),yW.forEach(t),TVo=i(Al),Yw=n(Al,"P",{});var JSe=s(Yw);FVo=r(JSe,"This class cannot be instantiated directly using "),Pce=n(JSe,"CODE",{});var Lst=s(Pce);CVo=r(Lst,"__init__()"),Lst.forEach(t),MVo=r(JSe," (throws an error)."),JSe.forEach(t),EVo=i(Al),lt=n(Al,"DIV",{class:!0});var Ll=s(lt);m(Kw.$$.fragment,Ll),yVo=i(Ll),$ce=n(Ll,"P",{});var Bst=s($ce);wVo=r(Bst,"Instantiates one of the model classes of the library (with a audio retrieval via x-vector head) from a configuration."),Bst.forEach(t),AVo=i(Ll),Jd=n(Ll,"P",{});var wW=s(Jd);LVo=r(wW,`Note:
Loading a model from its configuration file does `),Ice=n(wW,"STRONG",{});var xst=s(Ice);BVo=r(xst,"not"),xst.forEach(t),xVo=r(wW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Nce=n(wW,"CODE",{});var kst=s(Nce);kVo=r(kst,"from_pretrained()"),kst.forEach(t),RVo=r(wW,"to load the model weights."),wW.forEach(t),SVo=i(Ll),jce=n(Ll,"P",{});var Rst=s(jce);PVo=r(Rst,"Examples:"),Rst.forEach(t),$Vo=i(Ll),m(Zw.$$.fragment,Ll),Ll.forEach(t),IVo=i(Al),oo=n(Al,"DIV",{class:!0});var ta=s(oo);m(eA.$$.fragment,ta),NVo=i(ta),Dce=n(ta,"P",{});var Sst=s(Dce);jVo=r(Sst,"Instantiate one of the model classes of the library (with a audio retrieval via x-vector head) from a pretrained model."),Sst.forEach(t),DVo=i(ta),dn=n(ta,"P",{});var yM=s(dn);qVo=r(yM,"The model class to instantiate is selected based on the "),qce=n(yM,"CODE",{});var Pst=s(qce);GVo=r(Pst,"model_type"),Pst.forEach(t),OVo=r(yM,` property of the config object (either
passed as an argument or loaded from `),Gce=n(yM,"CODE",{});var $st=s(Gce);XVo=r($st,"pretrained_model_name_or_path"),$st.forEach(t),VVo=r(yM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Oce=n(yM,"CODE",{});var Ist=s(Oce);zVo=r(Ist,"pretrained_model_name_or_path"),Ist.forEach(t),WVo=r(yM,":"),yM.forEach(t),QVo=i(ta),cn=n(ta,"UL",{});var wM=s(cn);X5=n(wM,"LI",{});var lLe=s(X5);Xce=n(lLe,"STRONG",{});var Nst=s(Xce);HVo=r(Nst,"data2vec-audio"),Nst.forEach(t),UVo=r(lLe," \u2014 "),lq=n(lLe,"A",{href:!0});var jst=s(lq);JVo=r(jst,"Data2VecAudioForXVector"),jst.forEach(t),YVo=r(lLe," (Data2VecAudio model)"),lLe.forEach(t),KVo=i(wM),V5=n(wM,"LI",{});var iLe=s(V5);Vce=n(iLe,"STRONG",{});var Dst=s(Vce);ZVo=r(Dst,"unispeech-sat"),Dst.forEach(t),ezo=r(iLe," \u2014 "),iq=n(iLe,"A",{href:!0});var qst=s(iq);ozo=r(qst,"UniSpeechSatForXVector"),qst.forEach(t),rzo=r(iLe," (UniSpeechSat model)"),iLe.forEach(t),tzo=i(wM),z5=n(wM,"LI",{});var dLe=s(z5);zce=n(dLe,"STRONG",{});var Gst=s(zce);azo=r(Gst,"wav2vec2"),Gst.forEach(t),nzo=r(dLe," \u2014 "),dq=n(dLe,"A",{href:!0});var Ost=s(dq);szo=r(Ost,"Wav2Vec2ForXVector"),Ost.forEach(t),lzo=r(dLe," (Wav2Vec2 model)"),dLe.forEach(t),izo=i(wM),W5=n(wM,"LI",{});var cLe=s(W5);Wce=n(cLe,"STRONG",{});var Xst=s(Wce);dzo=r(Xst,"wavlm"),Xst.forEach(t),czo=r(cLe," \u2014 "),cq=n(cLe,"A",{href:!0});var Vst=s(cq);fzo=r(Vst,"WavLMForXVector"),Vst.forEach(t),mzo=r(cLe," (WavLM model)"),cLe.forEach(t),wM.forEach(t),gzo=i(ta),Q5=n(ta,"P",{});var fLe=s(Q5);hzo=r(fLe,"The model is set in evaluation mode by default using "),Qce=n(fLe,"CODE",{});var zst=s(Qce);pzo=r(zst,"model.eval()"),zst.forEach(t),_zo=r(fLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Hce=n(fLe,"CODE",{});var Wst=s(Hce);uzo=r(Wst,"model.train()"),Wst.forEach(t),fLe.forEach(t),bzo=i(ta),Uce=n(ta,"P",{});var Qst=s(Uce);vzo=r(Qst,"Examples:"),Qst.forEach(t),Tzo=i(ta),m(oA.$$.fragment,ta),ta.forEach(t),Al.forEach(t),Gke=i(c),Yd=n(c,"H2",{class:!0});var YSe=s(Yd);H5=n(YSe,"A",{id:!0,class:!0,href:!0});var Hst=s(H5);Jce=n(Hst,"SPAN",{});var Ust=s(Jce);m(rA.$$.fragment,Ust),Ust.forEach(t),Hst.forEach(t),Fzo=i(YSe),Yce=n(YSe,"SPAN",{});var Jst=s(Yce);Czo=r(Jst,"AutoModelForMaskedImageModeling"),Jst.forEach(t),YSe.forEach(t),Oke=i(c),hr=n(c,"DIV",{class:!0});var Bl=s(hr);m(tA.$$.fragment,Bl),Mzo=i(Bl),Kd=n(Bl,"P",{});var AW=s(Kd);Ezo=r(AW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked image modeling head) when created
with the `),Kce=n(AW,"CODE",{});var Yst=s(Kce);yzo=r(Yst,"from_pretrained()"),Yst.forEach(t),wzo=r(AW,"class method or the "),Zce=n(AW,"CODE",{});var Kst=s(Zce);Azo=r(Kst,"from_config()"),Kst.forEach(t),Lzo=r(AW,`class
method.`),AW.forEach(t),Bzo=i(Bl),aA=n(Bl,"P",{});var KSe=s(aA);xzo=r(KSe,"This class cannot be instantiated directly using "),efe=n(KSe,"CODE",{});var Zst=s(efe);kzo=r(Zst,"__init__()"),Zst.forEach(t),Rzo=r(KSe," (throws an error)."),KSe.forEach(t),Szo=i(Bl),it=n(Bl,"DIV",{class:!0});var xl=s(it);m(nA.$$.fragment,xl),Pzo=i(xl),ofe=n(xl,"P",{});var elt=s(ofe);$zo=r(elt,"Instantiates one of the model classes of the library (with a masked image modeling head) from a configuration."),elt.forEach(t),Izo=i(xl),Zd=n(xl,"P",{});var LW=s(Zd);Nzo=r(LW,`Note:
Loading a model from its configuration file does `),rfe=n(LW,"STRONG",{});var olt=s(rfe);jzo=r(olt,"not"),olt.forEach(t),Dzo=r(LW,` load the model weights. It only affects the
model\u2019s configuration. Use `),tfe=n(LW,"CODE",{});var rlt=s(tfe);qzo=r(rlt,"from_pretrained()"),rlt.forEach(t),Gzo=r(LW,"to load the model weights."),LW.forEach(t),Ozo=i(xl),afe=n(xl,"P",{});var tlt=s(afe);Xzo=r(tlt,"Examples:"),tlt.forEach(t),Vzo=i(xl),m(sA.$$.fragment,xl),xl.forEach(t),zzo=i(Bl),ro=n(Bl,"DIV",{class:!0});var aa=s(ro);m(lA.$$.fragment,aa),Wzo=i(aa),nfe=n(aa,"P",{});var alt=s(nfe);Qzo=r(alt,"Instantiate one of the model classes of the library (with a masked image modeling head) from a pretrained model."),alt.forEach(t),Hzo=i(aa),fn=n(aa,"P",{});var AM=s(fn);Uzo=r(AM,"The model class to instantiate is selected based on the "),sfe=n(AM,"CODE",{});var nlt=s(sfe);Jzo=r(nlt,"model_type"),nlt.forEach(t),Yzo=r(AM,` property of the config object (either
passed as an argument or loaded from `),lfe=n(AM,"CODE",{});var slt=s(lfe);Kzo=r(slt,"pretrained_model_name_or_path"),slt.forEach(t),Zzo=r(AM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),ife=n(AM,"CODE",{});var llt=s(ife);eWo=r(llt,"pretrained_model_name_or_path"),llt.forEach(t),oWo=r(AM,":"),AM.forEach(t),rWo=i(aa),ec=n(aa,"UL",{});var BW=s(ec);U5=n(BW,"LI",{});var mLe=s(U5);dfe=n(mLe,"STRONG",{});var ilt=s(dfe);tWo=r(ilt,"deit"),ilt.forEach(t),aWo=r(mLe," \u2014 "),fq=n(mLe,"A",{href:!0});var dlt=s(fq);nWo=r(dlt,"DeiTForMaskedImageModeling"),dlt.forEach(t),sWo=r(mLe," (DeiT model)"),mLe.forEach(t),lWo=i(BW),J5=n(BW,"LI",{});var gLe=s(J5);cfe=n(gLe,"STRONG",{});var clt=s(cfe);iWo=r(clt,"swin"),clt.forEach(t),dWo=r(gLe," \u2014 "),mq=n(gLe,"A",{href:!0});var flt=s(mq);cWo=r(flt,"SwinForMaskedImageModeling"),flt.forEach(t),fWo=r(gLe," (Swin model)"),gLe.forEach(t),mWo=i(BW),Y5=n(BW,"LI",{});var hLe=s(Y5);ffe=n(hLe,"STRONG",{});var mlt=s(ffe);gWo=r(mlt,"vit"),mlt.forEach(t),hWo=r(hLe," \u2014 "),gq=n(hLe,"A",{href:!0});var glt=s(gq);pWo=r(glt,"ViTForMaskedImageModeling"),glt.forEach(t),_Wo=r(hLe," (ViT model)"),hLe.forEach(t),BW.forEach(t),uWo=i(aa),K5=n(aa,"P",{});var pLe=s(K5);bWo=r(pLe,"The model is set in evaluation mode by default using "),mfe=n(pLe,"CODE",{});var hlt=s(mfe);vWo=r(hlt,"model.eval()"),hlt.forEach(t),TWo=r(pLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gfe=n(pLe,"CODE",{});var plt=s(gfe);FWo=r(plt,"model.train()"),plt.forEach(t),pLe.forEach(t),CWo=i(aa),hfe=n(aa,"P",{});var _lt=s(hfe);MWo=r(_lt,"Examples:"),_lt.forEach(t),EWo=i(aa),m(iA.$$.fragment,aa),aa.forEach(t),Bl.forEach(t),Xke=i(c),oc=n(c,"H2",{class:!0});var ZSe=s(oc);Z5=n(ZSe,"A",{id:!0,class:!0,href:!0});var ult=s(Z5);pfe=n(ult,"SPAN",{});var blt=s(pfe);m(dA.$$.fragment,blt),blt.forEach(t),ult.forEach(t),yWo=i(ZSe),_fe=n(ZSe,"SPAN",{});var vlt=s(_fe);wWo=r(vlt,"AutoModelForObjectDetection"),vlt.forEach(t),ZSe.forEach(t),Vke=i(c),pr=n(c,"DIV",{class:!0});var kl=s(pr);m(cA.$$.fragment,kl),AWo=i(kl),rc=n(kl,"P",{});var xW=s(rc);LWo=r(xW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a object detection head) when created
with the `),ufe=n(xW,"CODE",{});var Tlt=s(ufe);BWo=r(Tlt,"from_pretrained()"),Tlt.forEach(t),xWo=r(xW,"class method or the "),bfe=n(xW,"CODE",{});var Flt=s(bfe);kWo=r(Flt,"from_config()"),Flt.forEach(t),RWo=r(xW,`class
method.`),xW.forEach(t),SWo=i(kl),fA=n(kl,"P",{});var ePe=s(fA);PWo=r(ePe,"This class cannot be instantiated directly using "),vfe=n(ePe,"CODE",{});var Clt=s(vfe);$Wo=r(Clt,"__init__()"),Clt.forEach(t),IWo=r(ePe," (throws an error)."),ePe.forEach(t),NWo=i(kl),dt=n(kl,"DIV",{class:!0});var Rl=s(dt);m(mA.$$.fragment,Rl),jWo=i(Rl),Tfe=n(Rl,"P",{});var Mlt=s(Tfe);DWo=r(Mlt,"Instantiates one of the model classes of the library (with a object detection head) from a configuration."),Mlt.forEach(t),qWo=i(Rl),tc=n(Rl,"P",{});var kW=s(tc);GWo=r(kW,`Note:
Loading a model from its configuration file does `),Ffe=n(kW,"STRONG",{});var Elt=s(Ffe);OWo=r(Elt,"not"),Elt.forEach(t),XWo=r(kW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cfe=n(kW,"CODE",{});var ylt=s(Cfe);VWo=r(ylt,"from_pretrained()"),ylt.forEach(t),zWo=r(kW,"to load the model weights."),kW.forEach(t),WWo=i(Rl),Mfe=n(Rl,"P",{});var wlt=s(Mfe);QWo=r(wlt,"Examples:"),wlt.forEach(t),HWo=i(Rl),m(gA.$$.fragment,Rl),Rl.forEach(t),UWo=i(kl),to=n(kl,"DIV",{class:!0});var na=s(to);m(hA.$$.fragment,na),JWo=i(na),Efe=n(na,"P",{});var Alt=s(Efe);YWo=r(Alt,"Instantiate one of the model classes of the library (with a object detection head) from a pretrained model."),Alt.forEach(t),KWo=i(na),mn=n(na,"P",{});var LM=s(mn);ZWo=r(LM,"The model class to instantiate is selected based on the "),yfe=n(LM,"CODE",{});var Llt=s(yfe);eQo=r(Llt,"model_type"),Llt.forEach(t),oQo=r(LM,` property of the config object (either
passed as an argument or loaded from `),wfe=n(LM,"CODE",{});var Blt=s(wfe);rQo=r(Blt,"pretrained_model_name_or_path"),Blt.forEach(t),tQo=r(LM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Afe=n(LM,"CODE",{});var xlt=s(Afe);aQo=r(xlt,"pretrained_model_name_or_path"),xlt.forEach(t),nQo=r(LM,":"),LM.forEach(t),sQo=i(na),Lfe=n(na,"UL",{});var klt=s(Lfe);e2=n(klt,"LI",{});var _Le=s(e2);Bfe=n(_Le,"STRONG",{});var Rlt=s(Bfe);lQo=r(Rlt,"detr"),Rlt.forEach(t),iQo=r(_Le," \u2014 "),hq=n(_Le,"A",{href:!0});var Slt=s(hq);dQo=r(Slt,"DetrForObjectDetection"),Slt.forEach(t),cQo=r(_Le," (DETR model)"),_Le.forEach(t),klt.forEach(t),fQo=i(na),o2=n(na,"P",{});var uLe=s(o2);mQo=r(uLe,"The model is set in evaluation mode by default using "),xfe=n(uLe,"CODE",{});var Plt=s(xfe);gQo=r(Plt,"model.eval()"),Plt.forEach(t),hQo=r(uLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kfe=n(uLe,"CODE",{});var $lt=s(kfe);pQo=r($lt,"model.train()"),$lt.forEach(t),uLe.forEach(t),_Qo=i(na),Rfe=n(na,"P",{});var Ilt=s(Rfe);uQo=r(Ilt,"Examples:"),Ilt.forEach(t),bQo=i(na),m(pA.$$.fragment,na),na.forEach(t),kl.forEach(t),zke=i(c),ac=n(c,"H2",{class:!0});var oPe=s(ac);r2=n(oPe,"A",{id:!0,class:!0,href:!0});var Nlt=s(r2);Sfe=n(Nlt,"SPAN",{});var jlt=s(Sfe);m(_A.$$.fragment,jlt),jlt.forEach(t),Nlt.forEach(t),vQo=i(oPe),Pfe=n(oPe,"SPAN",{});var Dlt=s(Pfe);TQo=r(Dlt,"AutoModelForImageSegmentation"),Dlt.forEach(t),oPe.forEach(t),Wke=i(c),_r=n(c,"DIV",{class:!0});var Sl=s(_r);m(uA.$$.fragment,Sl),FQo=i(Sl),nc=n(Sl,"P",{});var RW=s(nc);CQo=r(RW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image segmentation head) when created
with the `),$fe=n(RW,"CODE",{});var qlt=s($fe);MQo=r(qlt,"from_pretrained()"),qlt.forEach(t),EQo=r(RW,"class method or the "),Ife=n(RW,"CODE",{});var Glt=s(Ife);yQo=r(Glt,"from_config()"),Glt.forEach(t),wQo=r(RW,`class
method.`),RW.forEach(t),AQo=i(Sl),bA=n(Sl,"P",{});var rPe=s(bA);LQo=r(rPe,"This class cannot be instantiated directly using "),Nfe=n(rPe,"CODE",{});var Olt=s(Nfe);BQo=r(Olt,"__init__()"),Olt.forEach(t),xQo=r(rPe," (throws an error)."),rPe.forEach(t),kQo=i(Sl),ct=n(Sl,"DIV",{class:!0});var Pl=s(ct);m(vA.$$.fragment,Pl),RQo=i(Pl),jfe=n(Pl,"P",{});var Xlt=s(jfe);SQo=r(Xlt,"Instantiates one of the model classes of the library (with a image segmentation head) from a configuration."),Xlt.forEach(t),PQo=i(Pl),sc=n(Pl,"P",{});var SW=s(sc);$Qo=r(SW,`Note:
Loading a model from its configuration file does `),Dfe=n(SW,"STRONG",{});var Vlt=s(Dfe);IQo=r(Vlt,"not"),Vlt.forEach(t),NQo=r(SW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qfe=n(SW,"CODE",{});var zlt=s(qfe);jQo=r(zlt,"from_pretrained()"),zlt.forEach(t),DQo=r(SW,"to load the model weights."),SW.forEach(t),qQo=i(Pl),Gfe=n(Pl,"P",{});var Wlt=s(Gfe);GQo=r(Wlt,"Examples:"),Wlt.forEach(t),OQo=i(Pl),m(TA.$$.fragment,Pl),Pl.forEach(t),XQo=i(Sl),ao=n(Sl,"DIV",{class:!0});var sa=s(ao);m(FA.$$.fragment,sa),VQo=i(sa),Ofe=n(sa,"P",{});var Qlt=s(Ofe);zQo=r(Qlt,"Instantiate one of the model classes of the library (with a image segmentation head) from a pretrained model."),Qlt.forEach(t),WQo=i(sa),gn=n(sa,"P",{});var BM=s(gn);QQo=r(BM,"The model class to instantiate is selected based on the "),Xfe=n(BM,"CODE",{});var Hlt=s(Xfe);HQo=r(Hlt,"model_type"),Hlt.forEach(t),UQo=r(BM,` property of the config object (either
passed as an argument or loaded from `),Vfe=n(BM,"CODE",{});var Ult=s(Vfe);JQo=r(Ult,"pretrained_model_name_or_path"),Ult.forEach(t),YQo=r(BM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zfe=n(BM,"CODE",{});var Jlt=s(zfe);KQo=r(Jlt,"pretrained_model_name_or_path"),Jlt.forEach(t),ZQo=r(BM,":"),BM.forEach(t),eHo=i(sa),Wfe=n(sa,"UL",{});var Ylt=s(Wfe);t2=n(Ylt,"LI",{});var bLe=s(t2);Qfe=n(bLe,"STRONG",{});var Klt=s(Qfe);oHo=r(Klt,"detr"),Klt.forEach(t),rHo=r(bLe," \u2014 "),pq=n(bLe,"A",{href:!0});var Zlt=s(pq);tHo=r(Zlt,"DetrForSegmentation"),Zlt.forEach(t),aHo=r(bLe," (DETR model)"),bLe.forEach(t),Ylt.forEach(t),nHo=i(sa),a2=n(sa,"P",{});var vLe=s(a2);sHo=r(vLe,"The model is set in evaluation mode by default using "),Hfe=n(vLe,"CODE",{});var eit=s(Hfe);lHo=r(eit,"model.eval()"),eit.forEach(t),iHo=r(vLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),Ufe=n(vLe,"CODE",{});var oit=s(Ufe);dHo=r(oit,"model.train()"),oit.forEach(t),vLe.forEach(t),cHo=i(sa),Jfe=n(sa,"P",{});var rit=s(Jfe);fHo=r(rit,"Examples:"),rit.forEach(t),mHo=i(sa),m(CA.$$.fragment,sa),sa.forEach(t),Sl.forEach(t),Qke=i(c),lc=n(c,"H2",{class:!0});var tPe=s(lc);n2=n(tPe,"A",{id:!0,class:!0,href:!0});var tit=s(n2);Yfe=n(tit,"SPAN",{});var ait=s(Yfe);m(MA.$$.fragment,ait),ait.forEach(t),tit.forEach(t),gHo=i(tPe),Kfe=n(tPe,"SPAN",{});var nit=s(Kfe);hHo=r(nit,"AutoModelForSemanticSegmentation"),nit.forEach(t),tPe.forEach(t),Hke=i(c),ur=n(c,"DIV",{class:!0});var $l=s(ur);m(EA.$$.fragment,$l),pHo=i($l),ic=n($l,"P",{});var PW=s(ic);_Ho=r(PW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a semantic segmentation head) when created
with the `),Zfe=n(PW,"CODE",{});var sit=s(Zfe);uHo=r(sit,"from_pretrained()"),sit.forEach(t),bHo=r(PW,"class method or the "),eme=n(PW,"CODE",{});var lit=s(eme);vHo=r(lit,"from_config()"),lit.forEach(t),THo=r(PW,`class
method.`),PW.forEach(t),FHo=i($l),yA=n($l,"P",{});var aPe=s(yA);CHo=r(aPe,"This class cannot be instantiated directly using "),ome=n(aPe,"CODE",{});var iit=s(ome);MHo=r(iit,"__init__()"),iit.forEach(t),EHo=r(aPe," (throws an error)."),aPe.forEach(t),yHo=i($l),ft=n($l,"DIV",{class:!0});var Il=s(ft);m(wA.$$.fragment,Il),wHo=i(Il),rme=n(Il,"P",{});var dit=s(rme);AHo=r(dit,"Instantiates one of the model classes of the library (with a semantic segmentation head) from a configuration."),dit.forEach(t),LHo=i(Il),dc=n(Il,"P",{});var $W=s(dc);BHo=r($W,`Note:
Loading a model from its configuration file does `),tme=n($W,"STRONG",{});var cit=s(tme);xHo=r(cit,"not"),cit.forEach(t),kHo=r($W,` load the model weights. It only affects the
model\u2019s configuration. Use `),ame=n($W,"CODE",{});var fit=s(ame);RHo=r(fit,"from_pretrained()"),fit.forEach(t),SHo=r($W,"to load the model weights."),$W.forEach(t),PHo=i(Il),nme=n(Il,"P",{});var mit=s(nme);$Ho=r(mit,"Examples:"),mit.forEach(t),IHo=i(Il),m(AA.$$.fragment,Il),Il.forEach(t),NHo=i($l),no=n($l,"DIV",{class:!0});var la=s(no);m(LA.$$.fragment,la),jHo=i(la),sme=n(la,"P",{});var git=s(sme);DHo=r(git,"Instantiate one of the model classes of the library (with a semantic segmentation head) from a pretrained model."),git.forEach(t),qHo=i(la),hn=n(la,"P",{});var xM=s(hn);GHo=r(xM,"The model class to instantiate is selected based on the "),lme=n(xM,"CODE",{});var hit=s(lme);OHo=r(hit,"model_type"),hit.forEach(t),XHo=r(xM,` property of the config object (either
passed as an argument or loaded from `),ime=n(xM,"CODE",{});var pit=s(ime);VHo=r(pit,"pretrained_model_name_or_path"),pit.forEach(t),zHo=r(xM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),dme=n(xM,"CODE",{});var _it=s(dme);WHo=r(_it,"pretrained_model_name_or_path"),_it.forEach(t),QHo=r(xM,":"),xM.forEach(t),HHo=i(la),BA=n(la,"UL",{});var nPe=s(BA);s2=n(nPe,"LI",{});var TLe=s(s2);cme=n(TLe,"STRONG",{});var uit=s(cme);UHo=r(uit,"beit"),uit.forEach(t),JHo=r(TLe," \u2014 "),_q=n(TLe,"A",{href:!0});var bit=s(_q);YHo=r(bit,"BeitForSemanticSegmentation"),bit.forEach(t),KHo=r(TLe," (BEiT model)"),TLe.forEach(t),ZHo=i(nPe),l2=n(nPe,"LI",{});var FLe=s(l2);fme=n(FLe,"STRONG",{});var vit=s(fme);eUo=r(vit,"segformer"),vit.forEach(t),oUo=r(FLe," \u2014 "),uq=n(FLe,"A",{href:!0});var Tit=s(uq);rUo=r(Tit,"SegformerForSemanticSegmentation"),Tit.forEach(t),tUo=r(FLe," (SegFormer model)"),FLe.forEach(t),nPe.forEach(t),aUo=i(la),i2=n(la,"P",{});var CLe=s(i2);nUo=r(CLe,"The model is set in evaluation mode by default using "),mme=n(CLe,"CODE",{});var Fit=s(mme);sUo=r(Fit,"model.eval()"),Fit.forEach(t),lUo=r(CLe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),gme=n(CLe,"CODE",{});var Cit=s(gme);iUo=r(Cit,"model.train()"),Cit.forEach(t),CLe.forEach(t),dUo=i(la),hme=n(la,"P",{});var Mit=s(hme);cUo=r(Mit,"Examples:"),Mit.forEach(t),fUo=i(la),m(xA.$$.fragment,la),la.forEach(t),$l.forEach(t),Uke=i(c),cc=n(c,"H2",{class:!0});var sPe=s(cc);d2=n(sPe,"A",{id:!0,class:!0,href:!0});var Eit=s(d2);pme=n(Eit,"SPAN",{});var yit=s(pme);m(kA.$$.fragment,yit),yit.forEach(t),Eit.forEach(t),mUo=i(sPe),_me=n(sPe,"SPAN",{});var wit=s(_me);gUo=r(wit,"AutoModelForInstanceSegmentation"),wit.forEach(t),sPe.forEach(t),Jke=i(c),br=n(c,"DIV",{class:!0});var Nl=s(br);m(RA.$$.fragment,Nl),hUo=i(Nl),fc=n(Nl,"P",{});var IW=s(fc);pUo=r(IW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a instance segmentation head) when created
with the `),ume=n(IW,"CODE",{});var Ait=s(ume);_Uo=r(Ait,"from_pretrained()"),Ait.forEach(t),uUo=r(IW,"class method or the "),bme=n(IW,"CODE",{});var Lit=s(bme);bUo=r(Lit,"from_config()"),Lit.forEach(t),vUo=r(IW,`class
method.`),IW.forEach(t),TUo=i(Nl),SA=n(Nl,"P",{});var lPe=s(SA);FUo=r(lPe,"This class cannot be instantiated directly using "),vme=n(lPe,"CODE",{});var Bit=s(vme);CUo=r(Bit,"__init__()"),Bit.forEach(t),MUo=r(lPe," (throws an error)."),lPe.forEach(t),EUo=i(Nl),mt=n(Nl,"DIV",{class:!0});var jl=s(mt);m(PA.$$.fragment,jl),yUo=i(jl),Tme=n(jl,"P",{});var xit=s(Tme);wUo=r(xit,"Instantiates one of the model classes of the library (with a instance segmentation head) from a configuration."),xit.forEach(t),AUo=i(jl),mc=n(jl,"P",{});var NW=s(mc);LUo=r(NW,`Note:
Loading a model from its configuration file does `),Fme=n(NW,"STRONG",{});var kit=s(Fme);BUo=r(kit,"not"),kit.forEach(t),xUo=r(NW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Cme=n(NW,"CODE",{});var Rit=s(Cme);kUo=r(Rit,"from_pretrained()"),Rit.forEach(t),RUo=r(NW,"to load the model weights."),NW.forEach(t),SUo=i(jl),Mme=n(jl,"P",{});var Sit=s(Mme);PUo=r(Sit,"Examples:"),Sit.forEach(t),$Uo=i(jl),m($A.$$.fragment,jl),jl.forEach(t),IUo=i(Nl),so=n(Nl,"DIV",{class:!0});var ia=s(so);m(IA.$$.fragment,ia),NUo=i(ia),Eme=n(ia,"P",{});var Pit=s(Eme);jUo=r(Pit,"Instantiate one of the model classes of the library (with a instance segmentation head) from a pretrained model."),Pit.forEach(t),DUo=i(ia),pn=n(ia,"P",{});var kM=s(pn);qUo=r(kM,"The model class to instantiate is selected based on the "),yme=n(kM,"CODE",{});var $it=s(yme);GUo=r($it,"model_type"),$it.forEach(t),OUo=r(kM,` property of the config object (either
passed as an argument or loaded from `),wme=n(kM,"CODE",{});var Iit=s(wme);XUo=r(Iit,"pretrained_model_name_or_path"),Iit.forEach(t),VUo=r(kM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Ame=n(kM,"CODE",{});var Nit=s(Ame);zUo=r(Nit,"pretrained_model_name_or_path"),Nit.forEach(t),WUo=r(kM,":"),kM.forEach(t),QUo=i(ia),Lme=n(ia,"UL",{});var jit=s(Lme);c2=n(jit,"LI",{});var MLe=s(c2);Bme=n(MLe,"STRONG",{});var Dit=s(Bme);HUo=r(Dit,"maskformer"),Dit.forEach(t),UUo=r(MLe," \u2014 "),bq=n(MLe,"A",{href:!0});var qit=s(bq);JUo=r(qit,"MaskFormerForInstanceSegmentation"),qit.forEach(t),YUo=r(MLe," (MaskFormer model)"),MLe.forEach(t),jit.forEach(t),KUo=i(ia),f2=n(ia,"P",{});var ELe=s(f2);ZUo=r(ELe,"The model is set in evaluation mode by default using "),xme=n(ELe,"CODE",{});var Git=s(xme);eJo=r(Git,"model.eval()"),Git.forEach(t),oJo=r(ELe,` (so for instance, dropout modules are
deactivated). To train the model, you should first set it back in training mode with `),kme=n(ELe,"CODE",{});var Oit=s(kme);rJo=r(Oit,"model.train()"),Oit.forEach(t),ELe.forEach(t),tJo=i(ia),Rme=n(ia,"P",{});var Xit=s(Rme);aJo=r(Xit,"Examples:"),Xit.forEach(t),nJo=i(ia),m(NA.$$.fragment,ia),ia.forEach(t),Nl.forEach(t),Yke=i(c),gc=n(c,"H2",{class:!0});var iPe=s(gc);m2=n(iPe,"A",{id:!0,class:!0,href:!0});var Vit=s(m2);Sme=n(Vit,"SPAN",{});var zit=s(Sme);m(jA.$$.fragment,zit),zit.forEach(t),Vit.forEach(t),sJo=i(iPe),Pme=n(iPe,"SPAN",{});var Wit=s(Pme);lJo=r(Wit,"TFAutoModel"),Wit.forEach(t),iPe.forEach(t),Kke=i(c),vr=n(c,"DIV",{class:!0});var Dl=s(vr);m(DA.$$.fragment,Dl),iJo=i(Dl),hc=n(Dl,"P",{});var jW=s(hc);dJo=r(jW,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),$me=n(jW,"CODE",{});var Qit=s($me);cJo=r(Qit,"from_pretrained()"),Qit.forEach(t),fJo=r(jW,"class method or the "),Ime=n(jW,"CODE",{});var Hit=s(Ime);mJo=r(Hit,"from_config()"),Hit.forEach(t),gJo=r(jW,`class
method.`),jW.forEach(t),hJo=i(Dl),qA=n(Dl,"P",{});var dPe=s(qA);pJo=r(dPe,"This class cannot be instantiated directly using "),Nme=n(dPe,"CODE",{});var Uit=s(Nme);_Jo=r(Uit,"__init__()"),Uit.forEach(t),uJo=r(dPe," (throws an error)."),dPe.forEach(t),bJo=i(Dl),gt=n(Dl,"DIV",{class:!0});var ql=s(gt);m(GA.$$.fragment,ql),vJo=i(ql),jme=n(ql,"P",{});var Jit=s(jme);TJo=r(Jit,"Instantiates one of the base model classes of the library from a configuration."),Jit.forEach(t),FJo=i(ql),pc=n(ql,"P",{});var DW=s(pc);CJo=r(DW,`Note:
Loading a model from its configuration file does `),Dme=n(DW,"STRONG",{});var Yit=s(Dme);MJo=r(Yit,"not"),Yit.forEach(t),EJo=r(DW,` load the model weights. It only affects the
model\u2019s configuration. Use `),qme=n(DW,"CODE",{});var Kit=s(qme);yJo=r(Kit,"from_pretrained()"),Kit.forEach(t),wJo=r(DW,"to load the model weights."),DW.forEach(t),AJo=i(ql),Gme=n(ql,"P",{});var Zit=s(Gme);LJo=r(Zit,"Examples:"),Zit.forEach(t),BJo=i(ql),m(OA.$$.fragment,ql),ql.forEach(t),xJo=i(Dl),ho=n(Dl,"DIV",{class:!0});var pa=s(ho);m(XA.$$.fragment,pa),kJo=i(pa),Ome=n(pa,"P",{});var edt=s(Ome);RJo=r(edt,"Instantiate one of the base model classes of the library from a pretrained model."),edt.forEach(t),SJo=i(pa),_n=n(pa,"P",{});var RM=s(_n);PJo=r(RM,"The model class to instantiate is selected based on the "),Xme=n(RM,"CODE",{});var odt=s(Xme);$Jo=r(odt,"model_type"),odt.forEach(t),IJo=r(RM,` property of the config object (either
passed as an argument or loaded from `),Vme=n(RM,"CODE",{});var rdt=s(Vme);NJo=r(rdt,"pretrained_model_name_or_path"),rdt.forEach(t),jJo=r(RM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),zme=n(RM,"CODE",{});var tdt=s(zme);DJo=r(tdt,"pretrained_model_name_or_path"),tdt.forEach(t),qJo=r(RM,":"),RM.forEach(t),GJo=i(pa),B=n(pa,"UL",{});var x=s(B);g2=n(x,"LI",{});var yLe=s(g2);Wme=n(yLe,"STRONG",{});var adt=s(Wme);OJo=r(adt,"albert"),adt.forEach(t),XJo=r(yLe," \u2014 "),vq=n(yLe,"A",{href:!0});var ndt=s(vq);VJo=r(ndt,"TFAlbertModel"),ndt.forEach(t),zJo=r(yLe," (ALBERT model)"),yLe.forEach(t),WJo=i(x),h2=n(x,"LI",{});var wLe=s(h2);Qme=n(wLe,"STRONG",{});var sdt=s(Qme);QJo=r(sdt,"bart"),sdt.forEach(t),HJo=r(wLe," \u2014 "),Tq=n(wLe,"A",{href:!0});var ldt=s(Tq);UJo=r(ldt,"TFBartModel"),ldt.forEach(t),JJo=r(wLe," (BART model)"),wLe.forEach(t),YJo=i(x),p2=n(x,"LI",{});var ALe=s(p2);Hme=n(ALe,"STRONG",{});var idt=s(Hme);KJo=r(idt,"bert"),idt.forEach(t),ZJo=r(ALe," \u2014 "),Fq=n(ALe,"A",{href:!0});var ddt=s(Fq);eYo=r(ddt,"TFBertModel"),ddt.forEach(t),oYo=r(ALe," (BERT model)"),ALe.forEach(t),rYo=i(x),_2=n(x,"LI",{});var LLe=s(_2);Ume=n(LLe,"STRONG",{});var cdt=s(Ume);tYo=r(cdt,"blenderbot"),cdt.forEach(t),aYo=r(LLe," \u2014 "),Cq=n(LLe,"A",{href:!0});var fdt=s(Cq);nYo=r(fdt,"TFBlenderbotModel"),fdt.forEach(t),sYo=r(LLe," (Blenderbot model)"),LLe.forEach(t),lYo=i(x),u2=n(x,"LI",{});var BLe=s(u2);Jme=n(BLe,"STRONG",{});var mdt=s(Jme);iYo=r(mdt,"blenderbot-small"),mdt.forEach(t),dYo=r(BLe," \u2014 "),Mq=n(BLe,"A",{href:!0});var gdt=s(Mq);cYo=r(gdt,"TFBlenderbotSmallModel"),gdt.forEach(t),fYo=r(BLe," (BlenderbotSmall model)"),BLe.forEach(t),mYo=i(x),b2=n(x,"LI",{});var xLe=s(b2);Yme=n(xLe,"STRONG",{});var hdt=s(Yme);gYo=r(hdt,"camembert"),hdt.forEach(t),hYo=r(xLe," \u2014 "),Eq=n(xLe,"A",{href:!0});var pdt=s(Eq);pYo=r(pdt,"TFCamembertModel"),pdt.forEach(t),_Yo=r(xLe," (CamemBERT model)"),xLe.forEach(t),uYo=i(x),v2=n(x,"LI",{});var kLe=s(v2);Kme=n(kLe,"STRONG",{});var _dt=s(Kme);bYo=r(_dt,"clip"),_dt.forEach(t),vYo=r(kLe," \u2014 "),yq=n(kLe,"A",{href:!0});var udt=s(yq);TYo=r(udt,"TFCLIPModel"),udt.forEach(t),FYo=r(kLe," (CLIP model)"),kLe.forEach(t),CYo=i(x),T2=n(x,"LI",{});var RLe=s(T2);Zme=n(RLe,"STRONG",{});var bdt=s(Zme);MYo=r(bdt,"convbert"),bdt.forEach(t),EYo=r(RLe," \u2014 "),wq=n(RLe,"A",{href:!0});var vdt=s(wq);yYo=r(vdt,"TFConvBertModel"),vdt.forEach(t),wYo=r(RLe," (ConvBERT model)"),RLe.forEach(t),AYo=i(x),F2=n(x,"LI",{});var SLe=s(F2);ege=n(SLe,"STRONG",{});var Tdt=s(ege);LYo=r(Tdt,"convnext"),Tdt.forEach(t),BYo=r(SLe," \u2014 "),Aq=n(SLe,"A",{href:!0});var Fdt=s(Aq);xYo=r(Fdt,"TFConvNextModel"),Fdt.forEach(t),kYo=r(SLe," (ConvNext model)"),SLe.forEach(t),RYo=i(x),C2=n(x,"LI",{});var PLe=s(C2);oge=n(PLe,"STRONG",{});var Cdt=s(oge);SYo=r(Cdt,"ctrl"),Cdt.forEach(t),PYo=r(PLe," \u2014 "),Lq=n(PLe,"A",{href:!0});var Mdt=s(Lq);$Yo=r(Mdt,"TFCTRLModel"),Mdt.forEach(t),IYo=r(PLe," (CTRL model)"),PLe.forEach(t),NYo=i(x),M2=n(x,"LI",{});var $Le=s(M2);rge=n($Le,"STRONG",{});var Edt=s(rge);jYo=r(Edt,"deberta"),Edt.forEach(t),DYo=r($Le," \u2014 "),Bq=n($Le,"A",{href:!0});var ydt=s(Bq);qYo=r(ydt,"TFDebertaModel"),ydt.forEach(t),GYo=r($Le," (DeBERTa model)"),$Le.forEach(t),OYo=i(x),E2=n(x,"LI",{});var ILe=s(E2);tge=n(ILe,"STRONG",{});var wdt=s(tge);XYo=r(wdt,"deberta-v2"),wdt.forEach(t),VYo=r(ILe," \u2014 "),xq=n(ILe,"A",{href:!0});var Adt=s(xq);zYo=r(Adt,"TFDebertaV2Model"),Adt.forEach(t),WYo=r(ILe," (DeBERTa-v2 model)"),ILe.forEach(t),QYo=i(x),y2=n(x,"LI",{});var NLe=s(y2);age=n(NLe,"STRONG",{});var Ldt=s(age);HYo=r(Ldt,"distilbert"),Ldt.forEach(t),UYo=r(NLe," \u2014 "),kq=n(NLe,"A",{href:!0});var Bdt=s(kq);JYo=r(Bdt,"TFDistilBertModel"),Bdt.forEach(t),YYo=r(NLe," (DistilBERT model)"),NLe.forEach(t),KYo=i(x),w2=n(x,"LI",{});var jLe=s(w2);nge=n(jLe,"STRONG",{});var xdt=s(nge);ZYo=r(xdt,"dpr"),xdt.forEach(t),eKo=r(jLe," \u2014 "),Rq=n(jLe,"A",{href:!0});var kdt=s(Rq);oKo=r(kdt,"TFDPRQuestionEncoder"),kdt.forEach(t),rKo=r(jLe," (DPR model)"),jLe.forEach(t),tKo=i(x),A2=n(x,"LI",{});var DLe=s(A2);sge=n(DLe,"STRONG",{});var Rdt=s(sge);aKo=r(Rdt,"electra"),Rdt.forEach(t),nKo=r(DLe," \u2014 "),Sq=n(DLe,"A",{href:!0});var Sdt=s(Sq);sKo=r(Sdt,"TFElectraModel"),Sdt.forEach(t),lKo=r(DLe," (ELECTRA model)"),DLe.forEach(t),iKo=i(x),L2=n(x,"LI",{});var qLe=s(L2);lge=n(qLe,"STRONG",{});var Pdt=s(lge);dKo=r(Pdt,"flaubert"),Pdt.forEach(t),cKo=r(qLe," \u2014 "),Pq=n(qLe,"A",{href:!0});var $dt=s(Pq);fKo=r($dt,"TFFlaubertModel"),$dt.forEach(t),mKo=r(qLe," (FlauBERT model)"),qLe.forEach(t),gKo=i(x),Gs=n(x,"LI",{});var U8=s(Gs);ige=n(U8,"STRONG",{});var Idt=s(ige);hKo=r(Idt,"funnel"),Idt.forEach(t),pKo=r(U8," \u2014 "),$q=n(U8,"A",{href:!0});var Ndt=s($q);_Ko=r(Ndt,"TFFunnelModel"),Ndt.forEach(t),uKo=r(U8," or "),Iq=n(U8,"A",{href:!0});var jdt=s(Iq);bKo=r(jdt,"TFFunnelBaseModel"),jdt.forEach(t),vKo=r(U8," (Funnel Transformer model)"),U8.forEach(t),TKo=i(x),B2=n(x,"LI",{});var GLe=s(B2);dge=n(GLe,"STRONG",{});var Ddt=s(dge);FKo=r(Ddt,"gpt2"),Ddt.forEach(t),CKo=r(GLe," \u2014 "),Nq=n(GLe,"A",{href:!0});var qdt=s(Nq);MKo=r(qdt,"TFGPT2Model"),qdt.forEach(t),EKo=r(GLe," (OpenAI GPT-2 model)"),GLe.forEach(t),yKo=i(x),x2=n(x,"LI",{});var OLe=s(x2);cge=n(OLe,"STRONG",{});var Gdt=s(cge);wKo=r(Gdt,"hubert"),Gdt.forEach(t),AKo=r(OLe," \u2014 "),jq=n(OLe,"A",{href:!0});var Odt=s(jq);LKo=r(Odt,"TFHubertModel"),Odt.forEach(t),BKo=r(OLe," (Hubert model)"),OLe.forEach(t),xKo=i(x),k2=n(x,"LI",{});var XLe=s(k2);fge=n(XLe,"STRONG",{});var Xdt=s(fge);kKo=r(Xdt,"layoutlm"),Xdt.forEach(t),RKo=r(XLe," \u2014 "),Dq=n(XLe,"A",{href:!0});var Vdt=s(Dq);SKo=r(Vdt,"TFLayoutLMModel"),Vdt.forEach(t),PKo=r(XLe," (LayoutLM model)"),XLe.forEach(t),$Ko=i(x),R2=n(x,"LI",{});var VLe=s(R2);mge=n(VLe,"STRONG",{});var zdt=s(mge);IKo=r(zdt,"led"),zdt.forEach(t),NKo=r(VLe," \u2014 "),qq=n(VLe,"A",{href:!0});var Wdt=s(qq);jKo=r(Wdt,"TFLEDModel"),Wdt.forEach(t),DKo=r(VLe," (LED model)"),VLe.forEach(t),qKo=i(x),S2=n(x,"LI",{});var zLe=s(S2);gge=n(zLe,"STRONG",{});var Qdt=s(gge);GKo=r(Qdt,"longformer"),Qdt.forEach(t),OKo=r(zLe," \u2014 "),Gq=n(zLe,"A",{href:!0});var Hdt=s(Gq);XKo=r(Hdt,"TFLongformerModel"),Hdt.forEach(t),VKo=r(zLe," (Longformer model)"),zLe.forEach(t),zKo=i(x),P2=n(x,"LI",{});var WLe=s(P2);hge=n(WLe,"STRONG",{});var Udt=s(hge);WKo=r(Udt,"lxmert"),Udt.forEach(t),QKo=r(WLe," \u2014 "),Oq=n(WLe,"A",{href:!0});var Jdt=s(Oq);HKo=r(Jdt,"TFLxmertModel"),Jdt.forEach(t),UKo=r(WLe," (LXMERT model)"),WLe.forEach(t),JKo=i(x),$2=n(x,"LI",{});var QLe=s($2);pge=n(QLe,"STRONG",{});var Ydt=s(pge);YKo=r(Ydt,"marian"),Ydt.forEach(t),KKo=r(QLe," \u2014 "),Xq=n(QLe,"A",{href:!0});var Kdt=s(Xq);ZKo=r(Kdt,"TFMarianModel"),Kdt.forEach(t),eZo=r(QLe," (Marian model)"),QLe.forEach(t),oZo=i(x),I2=n(x,"LI",{});var HLe=s(I2);_ge=n(HLe,"STRONG",{});var Zdt=s(_ge);rZo=r(Zdt,"mbart"),Zdt.forEach(t),tZo=r(HLe," \u2014 "),Vq=n(HLe,"A",{href:!0});var ect=s(Vq);aZo=r(ect,"TFMBartModel"),ect.forEach(t),nZo=r(HLe," (mBART model)"),HLe.forEach(t),sZo=i(x),N2=n(x,"LI",{});var ULe=s(N2);uge=n(ULe,"STRONG",{});var oct=s(uge);lZo=r(oct,"mobilebert"),oct.forEach(t),iZo=r(ULe," \u2014 "),zq=n(ULe,"A",{href:!0});var rct=s(zq);dZo=r(rct,"TFMobileBertModel"),rct.forEach(t),cZo=r(ULe," (MobileBERT model)"),ULe.forEach(t),fZo=i(x),j2=n(x,"LI",{});var JLe=s(j2);bge=n(JLe,"STRONG",{});var tct=s(bge);mZo=r(tct,"mpnet"),tct.forEach(t),gZo=r(JLe," \u2014 "),Wq=n(JLe,"A",{href:!0});var act=s(Wq);hZo=r(act,"TFMPNetModel"),act.forEach(t),pZo=r(JLe," (MPNet model)"),JLe.forEach(t),_Zo=i(x),D2=n(x,"LI",{});var YLe=s(D2);vge=n(YLe,"STRONG",{});var nct=s(vge);uZo=r(nct,"mt5"),nct.forEach(t),bZo=r(YLe," \u2014 "),Qq=n(YLe,"A",{href:!0});var sct=s(Qq);vZo=r(sct,"TFMT5Model"),sct.forEach(t),TZo=r(YLe," (mT5 model)"),YLe.forEach(t),FZo=i(x),q2=n(x,"LI",{});var KLe=s(q2);Tge=n(KLe,"STRONG",{});var lct=s(Tge);CZo=r(lct,"openai-gpt"),lct.forEach(t),MZo=r(KLe," \u2014 "),Hq=n(KLe,"A",{href:!0});var ict=s(Hq);EZo=r(ict,"TFOpenAIGPTModel"),ict.forEach(t),yZo=r(KLe," (OpenAI GPT model)"),KLe.forEach(t),wZo=i(x),G2=n(x,"LI",{});var ZLe=s(G2);Fge=n(ZLe,"STRONG",{});var dct=s(Fge);AZo=r(dct,"pegasus"),dct.forEach(t),LZo=r(ZLe," \u2014 "),Uq=n(ZLe,"A",{href:!0});var cct=s(Uq);BZo=r(cct,"TFPegasusModel"),cct.forEach(t),xZo=r(ZLe," (Pegasus model)"),ZLe.forEach(t),kZo=i(x),O2=n(x,"LI",{});var e7e=s(O2);Cge=n(e7e,"STRONG",{});var fct=s(Cge);RZo=r(fct,"rembert"),fct.forEach(t),SZo=r(e7e," \u2014 "),Jq=n(e7e,"A",{href:!0});var mct=s(Jq);PZo=r(mct,"TFRemBertModel"),mct.forEach(t),$Zo=r(e7e," (RemBERT model)"),e7e.forEach(t),IZo=i(x),X2=n(x,"LI",{});var o7e=s(X2);Mge=n(o7e,"STRONG",{});var gct=s(Mge);NZo=r(gct,"roberta"),gct.forEach(t),jZo=r(o7e," \u2014 "),Yq=n(o7e,"A",{href:!0});var hct=s(Yq);DZo=r(hct,"TFRobertaModel"),hct.forEach(t),qZo=r(o7e," (RoBERTa model)"),o7e.forEach(t),GZo=i(x),V2=n(x,"LI",{});var r7e=s(V2);Ege=n(r7e,"STRONG",{});var pct=s(Ege);OZo=r(pct,"roformer"),pct.forEach(t),XZo=r(r7e," \u2014 "),Kq=n(r7e,"A",{href:!0});var _ct=s(Kq);VZo=r(_ct,"TFRoFormerModel"),_ct.forEach(t),zZo=r(r7e," (RoFormer model)"),r7e.forEach(t),WZo=i(x),z2=n(x,"LI",{});var t7e=s(z2);yge=n(t7e,"STRONG",{});var uct=s(yge);QZo=r(uct,"speech_to_text"),uct.forEach(t),HZo=r(t7e," \u2014 "),Zq=n(t7e,"A",{href:!0});var bct=s(Zq);UZo=r(bct,"TFSpeech2TextModel"),bct.forEach(t),JZo=r(t7e," (Speech2Text model)"),t7e.forEach(t),YZo=i(x),W2=n(x,"LI",{});var a7e=s(W2);wge=n(a7e,"STRONG",{});var vct=s(wge);KZo=r(vct,"t5"),vct.forEach(t),ZZo=r(a7e," \u2014 "),eG=n(a7e,"A",{href:!0});var Tct=s(eG);eer=r(Tct,"TFT5Model"),Tct.forEach(t),oer=r(a7e," (T5 model)"),a7e.forEach(t),rer=i(x),Q2=n(x,"LI",{});var n7e=s(Q2);Age=n(n7e,"STRONG",{});var Fct=s(Age);ter=r(Fct,"tapas"),Fct.forEach(t),aer=r(n7e," \u2014 "),oG=n(n7e,"A",{href:!0});var Cct=s(oG);ner=r(Cct,"TFTapasModel"),Cct.forEach(t),ser=r(n7e," (TAPAS model)"),n7e.forEach(t),ler=i(x),H2=n(x,"LI",{});var s7e=s(H2);Lge=n(s7e,"STRONG",{});var Mct=s(Lge);ier=r(Mct,"transfo-xl"),Mct.forEach(t),der=r(s7e," \u2014 "),rG=n(s7e,"A",{href:!0});var Ect=s(rG);cer=r(Ect,"TFTransfoXLModel"),Ect.forEach(t),fer=r(s7e," (Transformer-XL model)"),s7e.forEach(t),mer=i(x),U2=n(x,"LI",{});var l7e=s(U2);Bge=n(l7e,"STRONG",{});var yct=s(Bge);ger=r(yct,"vit"),yct.forEach(t),her=r(l7e," \u2014 "),tG=n(l7e,"A",{href:!0});var wct=s(tG);per=r(wct,"TFViTModel"),wct.forEach(t),_er=r(l7e," (ViT model)"),l7e.forEach(t),uer=i(x),J2=n(x,"LI",{});var i7e=s(J2);xge=n(i7e,"STRONG",{});var Act=s(xge);ber=r(Act,"wav2vec2"),Act.forEach(t),ver=r(i7e," \u2014 "),aG=n(i7e,"A",{href:!0});var Lct=s(aG);Ter=r(Lct,"TFWav2Vec2Model"),Lct.forEach(t),Fer=r(i7e," (Wav2Vec2 model)"),i7e.forEach(t),Cer=i(x),Y2=n(x,"LI",{});var d7e=s(Y2);kge=n(d7e,"STRONG",{});var Bct=s(kge);Mer=r(Bct,"xlm"),Bct.forEach(t),Eer=r(d7e," \u2014 "),nG=n(d7e,"A",{href:!0});var xct=s(nG);yer=r(xct,"TFXLMModel"),xct.forEach(t),wer=r(d7e," (XLM model)"),d7e.forEach(t),Aer=i(x),K2=n(x,"LI",{});var c7e=s(K2);Rge=n(c7e,"STRONG",{});var kct=s(Rge);Ler=r(kct,"xlm-roberta"),kct.forEach(t),Ber=r(c7e," \u2014 "),sG=n(c7e,"A",{href:!0});var Rct=s(sG);xer=r(Rct,"TFXLMRobertaModel"),Rct.forEach(t),ker=r(c7e," (XLM-RoBERTa model)"),c7e.forEach(t),Rer=i(x),Z2=n(x,"LI",{});var f7e=s(Z2);Sge=n(f7e,"STRONG",{});var Sct=s(Sge);Ser=r(Sct,"xlnet"),Sct.forEach(t),Per=r(f7e," \u2014 "),lG=n(f7e,"A",{href:!0});var Pct=s(lG);$er=r(Pct,"TFXLNetModel"),Pct.forEach(t),Ier=r(f7e," (XLNet model)"),f7e.forEach(t),x.forEach(t),Ner=i(pa),Pge=n(pa,"P",{});var $ct=s(Pge);jer=r($ct,"Examples:"),$ct.forEach(t),Der=i(pa),m(VA.$$.fragment,pa),pa.forEach(t),Dl.forEach(t),Zke=i(c),_c=n(c,"H2",{class:!0});var cPe=s(_c);ev=n(cPe,"A",{id:!0,class:!0,href:!0});var Ict=s(ev);$ge=n(Ict,"SPAN",{});var Nct=s($ge);m(zA.$$.fragment,Nct),Nct.forEach(t),Ict.forEach(t),qer=i(cPe),Ige=n(cPe,"SPAN",{});var jct=s(Ige);Ger=r(jct,"TFAutoModelForPreTraining"),jct.forEach(t),cPe.forEach(t),eRe=i(c),Tr=n(c,"DIV",{class:!0});var Gl=s(Tr);m(WA.$$.fragment,Gl),Oer=i(Gl),uc=n(Gl,"P",{});var qW=s(uc);Xer=r(qW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nge=n(qW,"CODE",{});var Dct=s(Nge);Ver=r(Dct,"from_pretrained()"),Dct.forEach(t),zer=r(qW,"class method or the "),jge=n(qW,"CODE",{});var qct=s(jge);Wer=r(qct,"from_config()"),qct.forEach(t),Qer=r(qW,`class
method.`),qW.forEach(t),Her=i(Gl),QA=n(Gl,"P",{});var fPe=s(QA);Uer=r(fPe,"This class cannot be instantiated directly using "),Dge=n(fPe,"CODE",{});var Gct=s(Dge);Jer=r(Gct,"__init__()"),Gct.forEach(t),Yer=r(fPe," (throws an error)."),fPe.forEach(t),Ker=i(Gl),ht=n(Gl,"DIV",{class:!0});var Ol=s(ht);m(HA.$$.fragment,Ol),Zer=i(Ol),qge=n(Ol,"P",{});var Oct=s(qge);eor=r(Oct,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),Oct.forEach(t),oor=i(Ol),bc=n(Ol,"P",{});var GW=s(bc);ror=r(GW,`Note:
Loading a model from its configuration file does `),Gge=n(GW,"STRONG",{});var Xct=s(Gge);tor=r(Xct,"not"),Xct.forEach(t),aor=r(GW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Oge=n(GW,"CODE",{});var Vct=s(Oge);nor=r(Vct,"from_pretrained()"),Vct.forEach(t),sor=r(GW,"to load the model weights."),GW.forEach(t),lor=i(Ol),Xge=n(Ol,"P",{});var zct=s(Xge);ior=r(zct,"Examples:"),zct.forEach(t),dor=i(Ol),m(UA.$$.fragment,Ol),Ol.forEach(t),cor=i(Gl),po=n(Gl,"DIV",{class:!0});var _a=s(po);m(JA.$$.fragment,_a),mor=i(_a),Vge=n(_a,"P",{});var Wct=s(Vge);gor=r(Wct,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),Wct.forEach(t),hor=i(_a),un=n(_a,"P",{});var SM=s(un);por=r(SM,"The model class to instantiate is selected based on the "),zge=n(SM,"CODE",{});var Qct=s(zge);_or=r(Qct,"model_type"),Qct.forEach(t),uor=r(SM,` property of the config object (either
passed as an argument or loaded from `),Wge=n(SM,"CODE",{});var Hct=s(Wge);bor=r(Hct,"pretrained_model_name_or_path"),Hct.forEach(t),vor=r(SM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qge=n(SM,"CODE",{});var Uct=s(Qge);Tor=r(Uct,"pretrained_model_name_or_path"),Uct.forEach(t),For=r(SM,":"),SM.forEach(t),Cor=i(_a),H=n(_a,"UL",{});var U=s(H);ov=n(U,"LI",{});var m7e=s(ov);Hge=n(m7e,"STRONG",{});var Jct=s(Hge);Mor=r(Jct,"albert"),Jct.forEach(t),Eor=r(m7e," \u2014 "),iG=n(m7e,"A",{href:!0});var Yct=s(iG);yor=r(Yct,"TFAlbertForPreTraining"),Yct.forEach(t),wor=r(m7e," (ALBERT model)"),m7e.forEach(t),Aor=i(U),rv=n(U,"LI",{});var g7e=s(rv);Uge=n(g7e,"STRONG",{});var Kct=s(Uge);Lor=r(Kct,"bart"),Kct.forEach(t),Bor=r(g7e," \u2014 "),dG=n(g7e,"A",{href:!0});var Zct=s(dG);xor=r(Zct,"TFBartForConditionalGeneration"),Zct.forEach(t),kor=r(g7e," (BART model)"),g7e.forEach(t),Ror=i(U),tv=n(U,"LI",{});var h7e=s(tv);Jge=n(h7e,"STRONG",{});var eft=s(Jge);Sor=r(eft,"bert"),eft.forEach(t),Por=r(h7e," \u2014 "),cG=n(h7e,"A",{href:!0});var oft=s(cG);$or=r(oft,"TFBertForPreTraining"),oft.forEach(t),Ior=r(h7e," (BERT model)"),h7e.forEach(t),Nor=i(U),av=n(U,"LI",{});var p7e=s(av);Yge=n(p7e,"STRONG",{});var rft=s(Yge);jor=r(rft,"camembert"),rft.forEach(t),Dor=r(p7e," \u2014 "),fG=n(p7e,"A",{href:!0});var tft=s(fG);qor=r(tft,"TFCamembertForMaskedLM"),tft.forEach(t),Gor=r(p7e," (CamemBERT model)"),p7e.forEach(t),Oor=i(U),nv=n(U,"LI",{});var _7e=s(nv);Kge=n(_7e,"STRONG",{});var aft=s(Kge);Xor=r(aft,"ctrl"),aft.forEach(t),Vor=r(_7e," \u2014 "),mG=n(_7e,"A",{href:!0});var nft=s(mG);zor=r(nft,"TFCTRLLMHeadModel"),nft.forEach(t),Wor=r(_7e," (CTRL model)"),_7e.forEach(t),Qor=i(U),sv=n(U,"LI",{});var u7e=s(sv);Zge=n(u7e,"STRONG",{});var sft=s(Zge);Hor=r(sft,"distilbert"),sft.forEach(t),Uor=r(u7e," \u2014 "),gG=n(u7e,"A",{href:!0});var lft=s(gG);Jor=r(lft,"TFDistilBertForMaskedLM"),lft.forEach(t),Yor=r(u7e," (DistilBERT model)"),u7e.forEach(t),Kor=i(U),lv=n(U,"LI",{});var b7e=s(lv);ehe=n(b7e,"STRONG",{});var ift=s(ehe);Zor=r(ift,"electra"),ift.forEach(t),err=r(b7e," \u2014 "),hG=n(b7e,"A",{href:!0});var dft=s(hG);orr=r(dft,"TFElectraForPreTraining"),dft.forEach(t),rrr=r(b7e," (ELECTRA model)"),b7e.forEach(t),trr=i(U),iv=n(U,"LI",{});var v7e=s(iv);ohe=n(v7e,"STRONG",{});var cft=s(ohe);arr=r(cft,"flaubert"),cft.forEach(t),nrr=r(v7e," \u2014 "),pG=n(v7e,"A",{href:!0});var fft=s(pG);srr=r(fft,"TFFlaubertWithLMHeadModel"),fft.forEach(t),lrr=r(v7e," (FlauBERT model)"),v7e.forEach(t),irr=i(U),dv=n(U,"LI",{});var T7e=s(dv);rhe=n(T7e,"STRONG",{});var mft=s(rhe);drr=r(mft,"funnel"),mft.forEach(t),crr=r(T7e," \u2014 "),_G=n(T7e,"A",{href:!0});var gft=s(_G);frr=r(gft,"TFFunnelForPreTraining"),gft.forEach(t),mrr=r(T7e," (Funnel Transformer model)"),T7e.forEach(t),grr=i(U),cv=n(U,"LI",{});var F7e=s(cv);the=n(F7e,"STRONG",{});var hft=s(the);hrr=r(hft,"gpt2"),hft.forEach(t),prr=r(F7e," \u2014 "),uG=n(F7e,"A",{href:!0});var pft=s(uG);_rr=r(pft,"TFGPT2LMHeadModel"),pft.forEach(t),urr=r(F7e," (OpenAI GPT-2 model)"),F7e.forEach(t),brr=i(U),fv=n(U,"LI",{});var C7e=s(fv);ahe=n(C7e,"STRONG",{});var _ft=s(ahe);vrr=r(_ft,"layoutlm"),_ft.forEach(t),Trr=r(C7e," \u2014 "),bG=n(C7e,"A",{href:!0});var uft=s(bG);Frr=r(uft,"TFLayoutLMForMaskedLM"),uft.forEach(t),Crr=r(C7e," (LayoutLM model)"),C7e.forEach(t),Mrr=i(U),mv=n(U,"LI",{});var M7e=s(mv);nhe=n(M7e,"STRONG",{});var bft=s(nhe);Err=r(bft,"lxmert"),bft.forEach(t),yrr=r(M7e," \u2014 "),vG=n(M7e,"A",{href:!0});var vft=s(vG);wrr=r(vft,"TFLxmertForPreTraining"),vft.forEach(t),Arr=r(M7e," (LXMERT model)"),M7e.forEach(t),Lrr=i(U),gv=n(U,"LI",{});var E7e=s(gv);she=n(E7e,"STRONG",{});var Tft=s(she);Brr=r(Tft,"mobilebert"),Tft.forEach(t),xrr=r(E7e," \u2014 "),TG=n(E7e,"A",{href:!0});var Fft=s(TG);krr=r(Fft,"TFMobileBertForPreTraining"),Fft.forEach(t),Rrr=r(E7e," (MobileBERT model)"),E7e.forEach(t),Srr=i(U),hv=n(U,"LI",{});var y7e=s(hv);lhe=n(y7e,"STRONG",{});var Cft=s(lhe);Prr=r(Cft,"mpnet"),Cft.forEach(t),$rr=r(y7e," \u2014 "),FG=n(y7e,"A",{href:!0});var Mft=s(FG);Irr=r(Mft,"TFMPNetForMaskedLM"),Mft.forEach(t),Nrr=r(y7e," (MPNet model)"),y7e.forEach(t),jrr=i(U),pv=n(U,"LI",{});var w7e=s(pv);ihe=n(w7e,"STRONG",{});var Eft=s(ihe);Drr=r(Eft,"openai-gpt"),Eft.forEach(t),qrr=r(w7e," \u2014 "),CG=n(w7e,"A",{href:!0});var yft=s(CG);Grr=r(yft,"TFOpenAIGPTLMHeadModel"),yft.forEach(t),Orr=r(w7e," (OpenAI GPT model)"),w7e.forEach(t),Xrr=i(U),_v=n(U,"LI",{});var A7e=s(_v);dhe=n(A7e,"STRONG",{});var wft=s(dhe);Vrr=r(wft,"roberta"),wft.forEach(t),zrr=r(A7e," \u2014 "),MG=n(A7e,"A",{href:!0});var Aft=s(MG);Wrr=r(Aft,"TFRobertaForMaskedLM"),Aft.forEach(t),Qrr=r(A7e," (RoBERTa model)"),A7e.forEach(t),Hrr=i(U),uv=n(U,"LI",{});var L7e=s(uv);che=n(L7e,"STRONG",{});var Lft=s(che);Urr=r(Lft,"t5"),Lft.forEach(t),Jrr=r(L7e," \u2014 "),EG=n(L7e,"A",{href:!0});var Bft=s(EG);Yrr=r(Bft,"TFT5ForConditionalGeneration"),Bft.forEach(t),Krr=r(L7e," (T5 model)"),L7e.forEach(t),Zrr=i(U),bv=n(U,"LI",{});var B7e=s(bv);fhe=n(B7e,"STRONG",{});var xft=s(fhe);etr=r(xft,"tapas"),xft.forEach(t),otr=r(B7e," \u2014 "),yG=n(B7e,"A",{href:!0});var kft=s(yG);rtr=r(kft,"TFTapasForMaskedLM"),kft.forEach(t),ttr=r(B7e," (TAPAS model)"),B7e.forEach(t),atr=i(U),vv=n(U,"LI",{});var x7e=s(vv);mhe=n(x7e,"STRONG",{});var Rft=s(mhe);ntr=r(Rft,"transfo-xl"),Rft.forEach(t),str=r(x7e," \u2014 "),wG=n(x7e,"A",{href:!0});var Sft=s(wG);ltr=r(Sft,"TFTransfoXLLMHeadModel"),Sft.forEach(t),itr=r(x7e," (Transformer-XL model)"),x7e.forEach(t),dtr=i(U),Tv=n(U,"LI",{});var k7e=s(Tv);ghe=n(k7e,"STRONG",{});var Pft=s(ghe);ctr=r(Pft,"xlm"),Pft.forEach(t),ftr=r(k7e," \u2014 "),AG=n(k7e,"A",{href:!0});var $ft=s(AG);mtr=r($ft,"TFXLMWithLMHeadModel"),$ft.forEach(t),gtr=r(k7e," (XLM model)"),k7e.forEach(t),htr=i(U),Fv=n(U,"LI",{});var R7e=s(Fv);hhe=n(R7e,"STRONG",{});var Ift=s(hhe);ptr=r(Ift,"xlm-roberta"),Ift.forEach(t),_tr=r(R7e," \u2014 "),LG=n(R7e,"A",{href:!0});var Nft=s(LG);utr=r(Nft,"TFXLMRobertaForMaskedLM"),Nft.forEach(t),btr=r(R7e," (XLM-RoBERTa model)"),R7e.forEach(t),vtr=i(U),Cv=n(U,"LI",{});var S7e=s(Cv);phe=n(S7e,"STRONG",{});var jft=s(phe);Ttr=r(jft,"xlnet"),jft.forEach(t),Ftr=r(S7e," \u2014 "),BG=n(S7e,"A",{href:!0});var Dft=s(BG);Ctr=r(Dft,"TFXLNetLMHeadModel"),Dft.forEach(t),Mtr=r(S7e," (XLNet model)"),S7e.forEach(t),U.forEach(t),Etr=i(_a),_he=n(_a,"P",{});var qft=s(_he);ytr=r(qft,"Examples:"),qft.forEach(t),wtr=i(_a),m(YA.$$.fragment,_a),_a.forEach(t),Gl.forEach(t),oRe=i(c),vc=n(c,"H2",{class:!0});var mPe=s(vc);Mv=n(mPe,"A",{id:!0,class:!0,href:!0});var Gft=s(Mv);uhe=n(Gft,"SPAN",{});var Oft=s(uhe);m(KA.$$.fragment,Oft),Oft.forEach(t),Gft.forEach(t),Atr=i(mPe),bhe=n(mPe,"SPAN",{});var Xft=s(bhe);Ltr=r(Xft,"TFAutoModelForCausalLM"),Xft.forEach(t),mPe.forEach(t),rRe=i(c),Fr=n(c,"DIV",{class:!0});var Xl=s(Fr);m(ZA.$$.fragment,Xl),Btr=i(Xl),Tc=n(Xl,"P",{});var OW=s(Tc);xtr=r(OW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),vhe=n(OW,"CODE",{});var Vft=s(vhe);ktr=r(Vft,"from_pretrained()"),Vft.forEach(t),Rtr=r(OW,"class method or the "),The=n(OW,"CODE",{});var zft=s(The);Str=r(zft,"from_config()"),zft.forEach(t),Ptr=r(OW,`class
method.`),OW.forEach(t),$tr=i(Xl),e0=n(Xl,"P",{});var gPe=s(e0);Itr=r(gPe,"This class cannot be instantiated directly using "),Fhe=n(gPe,"CODE",{});var Wft=s(Fhe);Ntr=r(Wft,"__init__()"),Wft.forEach(t),jtr=r(gPe," (throws an error)."),gPe.forEach(t),Dtr=i(Xl),pt=n(Xl,"DIV",{class:!0});var Vl=s(pt);m(o0.$$.fragment,Vl),qtr=i(Vl),Che=n(Vl,"P",{});var Qft=s(Che);Gtr=r(Qft,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Qft.forEach(t),Otr=i(Vl),Fc=n(Vl,"P",{});var XW=s(Fc);Xtr=r(XW,`Note:
Loading a model from its configuration file does `),Mhe=n(XW,"STRONG",{});var Hft=s(Mhe);Vtr=r(Hft,"not"),Hft.forEach(t),ztr=r(XW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Ehe=n(XW,"CODE",{});var Uft=s(Ehe);Wtr=r(Uft,"from_pretrained()"),Uft.forEach(t),Qtr=r(XW,"to load the model weights."),XW.forEach(t),Htr=i(Vl),yhe=n(Vl,"P",{});var Jft=s(yhe);Utr=r(Jft,"Examples:"),Jft.forEach(t),Jtr=i(Vl),m(r0.$$.fragment,Vl),Vl.forEach(t),Ytr=i(Xl),_o=n(Xl,"DIV",{class:!0});var ua=s(_o);m(t0.$$.fragment,ua),Ktr=i(ua),whe=n(ua,"P",{});var Yft=s(whe);Ztr=r(Yft,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Yft.forEach(t),ear=i(ua),bn=n(ua,"P",{});var PM=s(bn);oar=r(PM,"The model class to instantiate is selected based on the "),Ahe=n(PM,"CODE",{});var Kft=s(Ahe);rar=r(Kft,"model_type"),Kft.forEach(t),tar=r(PM,` property of the config object (either
passed as an argument or loaded from `),Lhe=n(PM,"CODE",{});var Zft=s(Lhe);aar=r(Zft,"pretrained_model_name_or_path"),Zft.forEach(t),nar=r(PM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Bhe=n(PM,"CODE",{});var emt=s(Bhe);sar=r(emt,"pretrained_model_name_or_path"),emt.forEach(t),lar=r(PM,":"),PM.forEach(t),iar=i(ua),ge=n(ua,"UL",{});var Ce=s(ge);Ev=n(Ce,"LI",{});var P7e=s(Ev);xhe=n(P7e,"STRONG",{});var omt=s(xhe);dar=r(omt,"bert"),omt.forEach(t),car=r(P7e," \u2014 "),xG=n(P7e,"A",{href:!0});var rmt=s(xG);far=r(rmt,"TFBertLMHeadModel"),rmt.forEach(t),mar=r(P7e," (BERT model)"),P7e.forEach(t),gar=i(Ce),yv=n(Ce,"LI",{});var $7e=s(yv);khe=n($7e,"STRONG",{});var tmt=s(khe);har=r(tmt,"camembert"),tmt.forEach(t),par=r($7e," \u2014 "),kG=n($7e,"A",{href:!0});var amt=s(kG);_ar=r(amt,"TFCamembertForCausalLM"),amt.forEach(t),uar=r($7e," (CamemBERT model)"),$7e.forEach(t),bar=i(Ce),wv=n(Ce,"LI",{});var I7e=s(wv);Rhe=n(I7e,"STRONG",{});var nmt=s(Rhe);Tar=r(nmt,"ctrl"),nmt.forEach(t),Far=r(I7e," \u2014 "),RG=n(I7e,"A",{href:!0});var smt=s(RG);Car=r(smt,"TFCTRLLMHeadModel"),smt.forEach(t),Mar=r(I7e," (CTRL model)"),I7e.forEach(t),Ear=i(Ce),Av=n(Ce,"LI",{});var N7e=s(Av);She=n(N7e,"STRONG",{});var lmt=s(She);yar=r(lmt,"gpt2"),lmt.forEach(t),war=r(N7e," \u2014 "),SG=n(N7e,"A",{href:!0});var imt=s(SG);Aar=r(imt,"TFGPT2LMHeadModel"),imt.forEach(t),Lar=r(N7e," (OpenAI GPT-2 model)"),N7e.forEach(t),Bar=i(Ce),Lv=n(Ce,"LI",{});var j7e=s(Lv);Phe=n(j7e,"STRONG",{});var dmt=s(Phe);xar=r(dmt,"openai-gpt"),dmt.forEach(t),kar=r(j7e," \u2014 "),PG=n(j7e,"A",{href:!0});var cmt=s(PG);Rar=r(cmt,"TFOpenAIGPTLMHeadModel"),cmt.forEach(t),Sar=r(j7e," (OpenAI GPT model)"),j7e.forEach(t),Par=i(Ce),Bv=n(Ce,"LI",{});var D7e=s(Bv);$he=n(D7e,"STRONG",{});var fmt=s($he);$ar=r(fmt,"rembert"),fmt.forEach(t),Iar=r(D7e," \u2014 "),$G=n(D7e,"A",{href:!0});var mmt=s($G);Nar=r(mmt,"TFRemBertForCausalLM"),mmt.forEach(t),jar=r(D7e," (RemBERT model)"),D7e.forEach(t),Dar=i(Ce),xv=n(Ce,"LI",{});var q7e=s(xv);Ihe=n(q7e,"STRONG",{});var gmt=s(Ihe);qar=r(gmt,"roberta"),gmt.forEach(t),Gar=r(q7e," \u2014 "),IG=n(q7e,"A",{href:!0});var hmt=s(IG);Oar=r(hmt,"TFRobertaForCausalLM"),hmt.forEach(t),Xar=r(q7e," (RoBERTa model)"),q7e.forEach(t),Var=i(Ce),kv=n(Ce,"LI",{});var G7e=s(kv);Nhe=n(G7e,"STRONG",{});var pmt=s(Nhe);zar=r(pmt,"roformer"),pmt.forEach(t),War=r(G7e," \u2014 "),NG=n(G7e,"A",{href:!0});var _mt=s(NG);Qar=r(_mt,"TFRoFormerForCausalLM"),_mt.forEach(t),Har=r(G7e," (RoFormer model)"),G7e.forEach(t),Uar=i(Ce),Rv=n(Ce,"LI",{});var O7e=s(Rv);jhe=n(O7e,"STRONG",{});var umt=s(jhe);Jar=r(umt,"transfo-xl"),umt.forEach(t),Yar=r(O7e," \u2014 "),jG=n(O7e,"A",{href:!0});var bmt=s(jG);Kar=r(bmt,"TFTransfoXLLMHeadModel"),bmt.forEach(t),Zar=r(O7e," (Transformer-XL model)"),O7e.forEach(t),enr=i(Ce),Sv=n(Ce,"LI",{});var X7e=s(Sv);Dhe=n(X7e,"STRONG",{});var vmt=s(Dhe);onr=r(vmt,"xlm"),vmt.forEach(t),rnr=r(X7e," \u2014 "),DG=n(X7e,"A",{href:!0});var Tmt=s(DG);tnr=r(Tmt,"TFXLMWithLMHeadModel"),Tmt.forEach(t),anr=r(X7e," (XLM model)"),X7e.forEach(t),nnr=i(Ce),Pv=n(Ce,"LI",{});var V7e=s(Pv);qhe=n(V7e,"STRONG",{});var Fmt=s(qhe);snr=r(Fmt,"xlnet"),Fmt.forEach(t),lnr=r(V7e," \u2014 "),qG=n(V7e,"A",{href:!0});var Cmt=s(qG);inr=r(Cmt,"TFXLNetLMHeadModel"),Cmt.forEach(t),dnr=r(V7e," (XLNet model)"),V7e.forEach(t),Ce.forEach(t),cnr=i(ua),Ghe=n(ua,"P",{});var Mmt=s(Ghe);fnr=r(Mmt,"Examples:"),Mmt.forEach(t),mnr=i(ua),m(a0.$$.fragment,ua),ua.forEach(t),Xl.forEach(t),tRe=i(c),Cc=n(c,"H2",{class:!0});var hPe=s(Cc);$v=n(hPe,"A",{id:!0,class:!0,href:!0});var Emt=s($v);Ohe=n(Emt,"SPAN",{});var ymt=s(Ohe);m(n0.$$.fragment,ymt),ymt.forEach(t),Emt.forEach(t),gnr=i(hPe),Xhe=n(hPe,"SPAN",{});var wmt=s(Xhe);hnr=r(wmt,"TFAutoModelForImageClassification"),wmt.forEach(t),hPe.forEach(t),aRe=i(c),Cr=n(c,"DIV",{class:!0});var zl=s(Cr);m(s0.$$.fragment,zl),pnr=i(zl),Mc=n(zl,"P",{});var VW=s(Mc);_nr=r(VW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),Vhe=n(VW,"CODE",{});var Amt=s(Vhe);unr=r(Amt,"from_pretrained()"),Amt.forEach(t),bnr=r(VW,"class method or the "),zhe=n(VW,"CODE",{});var Lmt=s(zhe);vnr=r(Lmt,"from_config()"),Lmt.forEach(t),Tnr=r(VW,`class
method.`),VW.forEach(t),Fnr=i(zl),l0=n(zl,"P",{});var pPe=s(l0);Cnr=r(pPe,"This class cannot be instantiated directly using "),Whe=n(pPe,"CODE",{});var Bmt=s(Whe);Mnr=r(Bmt,"__init__()"),Bmt.forEach(t),Enr=r(pPe," (throws an error)."),pPe.forEach(t),ynr=i(zl),_t=n(zl,"DIV",{class:!0});var Wl=s(_t);m(i0.$$.fragment,Wl),wnr=i(Wl),Qhe=n(Wl,"P",{});var xmt=s(Qhe);Anr=r(xmt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),xmt.forEach(t),Lnr=i(Wl),Ec=n(Wl,"P",{});var zW=s(Ec);Bnr=r(zW,`Note:
Loading a model from its configuration file does `),Hhe=n(zW,"STRONG",{});var kmt=s(Hhe);xnr=r(kmt,"not"),kmt.forEach(t),knr=r(zW,` load the model weights. It only affects the
model\u2019s configuration. Use `),Uhe=n(zW,"CODE",{});var Rmt=s(Uhe);Rnr=r(Rmt,"from_pretrained()"),Rmt.forEach(t),Snr=r(zW,"to load the model weights."),zW.forEach(t),Pnr=i(Wl),Jhe=n(Wl,"P",{});var Smt=s(Jhe);$nr=r(Smt,"Examples:"),Smt.forEach(t),Inr=i(Wl),m(d0.$$.fragment,Wl),Wl.forEach(t),Nnr=i(zl),uo=n(zl,"DIV",{class:!0});var ba=s(uo);m(c0.$$.fragment,ba),jnr=i(ba),Yhe=n(ba,"P",{});var Pmt=s(Yhe);Dnr=r(Pmt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),Pmt.forEach(t),qnr=i(ba),vn=n(ba,"P",{});var $M=s(vn);Gnr=r($M,"The model class to instantiate is selected based on the "),Khe=n($M,"CODE",{});var $mt=s(Khe);Onr=r($mt,"model_type"),$mt.forEach(t),Xnr=r($M,` property of the config object (either
passed as an argument or loaded from `),Zhe=n($M,"CODE",{});var Imt=s(Zhe);Vnr=r(Imt,"pretrained_model_name_or_path"),Imt.forEach(t),znr=r($M,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),epe=n($M,"CODE",{});var Nmt=s(epe);Wnr=r(Nmt,"pretrained_model_name_or_path"),Nmt.forEach(t),Qnr=r($M,":"),$M.forEach(t),Hnr=i(ba),f0=n(ba,"UL",{});var _Pe=s(f0);Iv=n(_Pe,"LI",{});var z7e=s(Iv);ope=n(z7e,"STRONG",{});var jmt=s(ope);Unr=r(jmt,"convnext"),jmt.forEach(t),Jnr=r(z7e," \u2014 "),GG=n(z7e,"A",{href:!0});var Dmt=s(GG);Ynr=r(Dmt,"TFConvNextForImageClassification"),Dmt.forEach(t),Knr=r(z7e," (ConvNext model)"),z7e.forEach(t),Znr=i(_Pe),Nv=n(_Pe,"LI",{});var W7e=s(Nv);rpe=n(W7e,"STRONG",{});var qmt=s(rpe);esr=r(qmt,"vit"),qmt.forEach(t),osr=r(W7e," \u2014 "),OG=n(W7e,"A",{href:!0});var Gmt=s(OG);rsr=r(Gmt,"TFViTForImageClassification"),Gmt.forEach(t),tsr=r(W7e," (ViT model)"),W7e.forEach(t),_Pe.forEach(t),asr=i(ba),tpe=n(ba,"P",{});var Omt=s(tpe);nsr=r(Omt,"Examples:"),Omt.forEach(t),ssr=i(ba),m(m0.$$.fragment,ba),ba.forEach(t),zl.forEach(t),nRe=i(c),yc=n(c,"H2",{class:!0});var uPe=s(yc);jv=n(uPe,"A",{id:!0,class:!0,href:!0});var Xmt=s(jv);ape=n(Xmt,"SPAN",{});var Vmt=s(ape);m(g0.$$.fragment,Vmt),Vmt.forEach(t),Xmt.forEach(t),lsr=i(uPe),npe=n(uPe,"SPAN",{});var zmt=s(npe);isr=r(zmt,"TFAutoModelForMaskedLM"),zmt.forEach(t),uPe.forEach(t),sRe=i(c),Mr=n(c,"DIV",{class:!0});var Ql=s(Mr);m(h0.$$.fragment,Ql),dsr=i(Ql),wc=n(Ql,"P",{});var WW=s(wc);csr=r(WW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),spe=n(WW,"CODE",{});var Wmt=s(spe);fsr=r(Wmt,"from_pretrained()"),Wmt.forEach(t),msr=r(WW,"class method or the "),lpe=n(WW,"CODE",{});var Qmt=s(lpe);gsr=r(Qmt,"from_config()"),Qmt.forEach(t),hsr=r(WW,`class
method.`),WW.forEach(t),psr=i(Ql),p0=n(Ql,"P",{});var bPe=s(p0);_sr=r(bPe,"This class cannot be instantiated directly using "),ipe=n(bPe,"CODE",{});var Hmt=s(ipe);usr=r(Hmt,"__init__()"),Hmt.forEach(t),bsr=r(bPe," (throws an error)."),bPe.forEach(t),vsr=i(Ql),ut=n(Ql,"DIV",{class:!0});var Hl=s(ut);m(_0.$$.fragment,Hl),Tsr=i(Hl),dpe=n(Hl,"P",{});var Umt=s(dpe);Fsr=r(Umt,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),Umt.forEach(t),Csr=i(Hl),Ac=n(Hl,"P",{});var QW=s(Ac);Msr=r(QW,`Note:
Loading a model from its configuration file does `),cpe=n(QW,"STRONG",{});var Jmt=s(cpe);Esr=r(Jmt,"not"),Jmt.forEach(t),ysr=r(QW,` load the model weights. It only affects the
model\u2019s configuration. Use `),fpe=n(QW,"CODE",{});var Ymt=s(fpe);wsr=r(Ymt,"from_pretrained()"),Ymt.forEach(t),Asr=r(QW,"to load the model weights."),QW.forEach(t),Lsr=i(Hl),mpe=n(Hl,"P",{});var Kmt=s(mpe);Bsr=r(Kmt,"Examples:"),Kmt.forEach(t),xsr=i(Hl),m(u0.$$.fragment,Hl),Hl.forEach(t),ksr=i(Ql),bo=n(Ql,"DIV",{class:!0});var va=s(bo);m(b0.$$.fragment,va),Rsr=i(va),gpe=n(va,"P",{});var Zmt=s(gpe);Ssr=r(Zmt,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),Zmt.forEach(t),Psr=i(va),Tn=n(va,"P",{});var IM=s(Tn);$sr=r(IM,"The model class to instantiate is selected based on the "),hpe=n(IM,"CODE",{});var egt=s(hpe);Isr=r(egt,"model_type"),egt.forEach(t),Nsr=r(IM,` property of the config object (either
passed as an argument or loaded from `),ppe=n(IM,"CODE",{});var ogt=s(ppe);jsr=r(ogt,"pretrained_model_name_or_path"),ogt.forEach(t),Dsr=r(IM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),_pe=n(IM,"CODE",{});var rgt=s(_pe);qsr=r(rgt,"pretrained_model_name_or_path"),rgt.forEach(t),Gsr=r(IM,":"),IM.forEach(t),Osr=i(va),Y=n(va,"UL",{});var ee=s(Y);Dv=n(ee,"LI",{});var Q7e=s(Dv);upe=n(Q7e,"STRONG",{});var tgt=s(upe);Xsr=r(tgt,"albert"),tgt.forEach(t),Vsr=r(Q7e," \u2014 "),XG=n(Q7e,"A",{href:!0});var agt=s(XG);zsr=r(agt,"TFAlbertForMaskedLM"),agt.forEach(t),Wsr=r(Q7e," (ALBERT model)"),Q7e.forEach(t),Qsr=i(ee),qv=n(ee,"LI",{});var H7e=s(qv);bpe=n(H7e,"STRONG",{});var ngt=s(bpe);Hsr=r(ngt,"bert"),ngt.forEach(t),Usr=r(H7e," \u2014 "),VG=n(H7e,"A",{href:!0});var sgt=s(VG);Jsr=r(sgt,"TFBertForMaskedLM"),sgt.forEach(t),Ysr=r(H7e," (BERT model)"),H7e.forEach(t),Ksr=i(ee),Gv=n(ee,"LI",{});var U7e=s(Gv);vpe=n(U7e,"STRONG",{});var lgt=s(vpe);Zsr=r(lgt,"camembert"),lgt.forEach(t),elr=r(U7e," \u2014 "),zG=n(U7e,"A",{href:!0});var igt=s(zG);olr=r(igt,"TFCamembertForMaskedLM"),igt.forEach(t),rlr=r(U7e," (CamemBERT model)"),U7e.forEach(t),tlr=i(ee),Ov=n(ee,"LI",{});var J7e=s(Ov);Tpe=n(J7e,"STRONG",{});var dgt=s(Tpe);alr=r(dgt,"convbert"),dgt.forEach(t),nlr=r(J7e," \u2014 "),WG=n(J7e,"A",{href:!0});var cgt=s(WG);slr=r(cgt,"TFConvBertForMaskedLM"),cgt.forEach(t),llr=r(J7e," (ConvBERT model)"),J7e.forEach(t),ilr=i(ee),Xv=n(ee,"LI",{});var Y7e=s(Xv);Fpe=n(Y7e,"STRONG",{});var fgt=s(Fpe);dlr=r(fgt,"deberta"),fgt.forEach(t),clr=r(Y7e," \u2014 "),QG=n(Y7e,"A",{href:!0});var mgt=s(QG);flr=r(mgt,"TFDebertaForMaskedLM"),mgt.forEach(t),mlr=r(Y7e," (DeBERTa model)"),Y7e.forEach(t),glr=i(ee),Vv=n(ee,"LI",{});var K7e=s(Vv);Cpe=n(K7e,"STRONG",{});var ggt=s(Cpe);hlr=r(ggt,"deberta-v2"),ggt.forEach(t),plr=r(K7e," \u2014 "),HG=n(K7e,"A",{href:!0});var hgt=s(HG);_lr=r(hgt,"TFDebertaV2ForMaskedLM"),hgt.forEach(t),ulr=r(K7e," (DeBERTa-v2 model)"),K7e.forEach(t),blr=i(ee),zv=n(ee,"LI",{});var Z7e=s(zv);Mpe=n(Z7e,"STRONG",{});var pgt=s(Mpe);vlr=r(pgt,"distilbert"),pgt.forEach(t),Tlr=r(Z7e," \u2014 "),UG=n(Z7e,"A",{href:!0});var _gt=s(UG);Flr=r(_gt,"TFDistilBertForMaskedLM"),_gt.forEach(t),Clr=r(Z7e," (DistilBERT model)"),Z7e.forEach(t),Mlr=i(ee),Wv=n(ee,"LI",{});var e8e=s(Wv);Epe=n(e8e,"STRONG",{});var ugt=s(Epe);Elr=r(ugt,"electra"),ugt.forEach(t),ylr=r(e8e," \u2014 "),JG=n(e8e,"A",{href:!0});var bgt=s(JG);wlr=r(bgt,"TFElectraForMaskedLM"),bgt.forEach(t),Alr=r(e8e," (ELECTRA model)"),e8e.forEach(t),Llr=i(ee),Qv=n(ee,"LI",{});var o8e=s(Qv);ype=n(o8e,"STRONG",{});var vgt=s(ype);Blr=r(vgt,"flaubert"),vgt.forEach(t),xlr=r(o8e," \u2014 "),YG=n(o8e,"A",{href:!0});var Tgt=s(YG);klr=r(Tgt,"TFFlaubertWithLMHeadModel"),Tgt.forEach(t),Rlr=r(o8e," (FlauBERT model)"),o8e.forEach(t),Slr=i(ee),Hv=n(ee,"LI",{});var r8e=s(Hv);wpe=n(r8e,"STRONG",{});var Fgt=s(wpe);Plr=r(Fgt,"funnel"),Fgt.forEach(t),$lr=r(r8e," \u2014 "),KG=n(r8e,"A",{href:!0});var Cgt=s(KG);Ilr=r(Cgt,"TFFunnelForMaskedLM"),Cgt.forEach(t),Nlr=r(r8e," (Funnel Transformer model)"),r8e.forEach(t),jlr=i(ee),Uv=n(ee,"LI",{});var t8e=s(Uv);Ape=n(t8e,"STRONG",{});var Mgt=s(Ape);Dlr=r(Mgt,"layoutlm"),Mgt.forEach(t),qlr=r(t8e," \u2014 "),ZG=n(t8e,"A",{href:!0});var Egt=s(ZG);Glr=r(Egt,"TFLayoutLMForMaskedLM"),Egt.forEach(t),Olr=r(t8e," (LayoutLM model)"),t8e.forEach(t),Xlr=i(ee),Jv=n(ee,"LI",{});var a8e=s(Jv);Lpe=n(a8e,"STRONG",{});var ygt=s(Lpe);Vlr=r(ygt,"longformer"),ygt.forEach(t),zlr=r(a8e," \u2014 "),eO=n(a8e,"A",{href:!0});var wgt=s(eO);Wlr=r(wgt,"TFLongformerForMaskedLM"),wgt.forEach(t),Qlr=r(a8e," (Longformer model)"),a8e.forEach(t),Hlr=i(ee),Yv=n(ee,"LI",{});var n8e=s(Yv);Bpe=n(n8e,"STRONG",{});var Agt=s(Bpe);Ulr=r(Agt,"mobilebert"),Agt.forEach(t),Jlr=r(n8e," \u2014 "),oO=n(n8e,"A",{href:!0});var Lgt=s(oO);Ylr=r(Lgt,"TFMobileBertForMaskedLM"),Lgt.forEach(t),Klr=r(n8e," (MobileBERT model)"),n8e.forEach(t),Zlr=i(ee),Kv=n(ee,"LI",{});var s8e=s(Kv);xpe=n(s8e,"STRONG",{});var Bgt=s(xpe);eir=r(Bgt,"mpnet"),Bgt.forEach(t),oir=r(s8e," \u2014 "),rO=n(s8e,"A",{href:!0});var xgt=s(rO);rir=r(xgt,"TFMPNetForMaskedLM"),xgt.forEach(t),tir=r(s8e," (MPNet model)"),s8e.forEach(t),air=i(ee),Zv=n(ee,"LI",{});var l8e=s(Zv);kpe=n(l8e,"STRONG",{});var kgt=s(kpe);nir=r(kgt,"rembert"),kgt.forEach(t),sir=r(l8e," \u2014 "),tO=n(l8e,"A",{href:!0});var Rgt=s(tO);lir=r(Rgt,"TFRemBertForMaskedLM"),Rgt.forEach(t),iir=r(l8e," (RemBERT model)"),l8e.forEach(t),dir=i(ee),e6=n(ee,"LI",{});var i8e=s(e6);Rpe=n(i8e,"STRONG",{});var Sgt=s(Rpe);cir=r(Sgt,"roberta"),Sgt.forEach(t),fir=r(i8e," \u2014 "),aO=n(i8e,"A",{href:!0});var Pgt=s(aO);mir=r(Pgt,"TFRobertaForMaskedLM"),Pgt.forEach(t),gir=r(i8e," (RoBERTa model)"),i8e.forEach(t),hir=i(ee),o6=n(ee,"LI",{});var d8e=s(o6);Spe=n(d8e,"STRONG",{});var $gt=s(Spe);pir=r($gt,"roformer"),$gt.forEach(t),_ir=r(d8e," \u2014 "),nO=n(d8e,"A",{href:!0});var Igt=s(nO);uir=r(Igt,"TFRoFormerForMaskedLM"),Igt.forEach(t),bir=r(d8e," (RoFormer model)"),d8e.forEach(t),vir=i(ee),r6=n(ee,"LI",{});var c8e=s(r6);Ppe=n(c8e,"STRONG",{});var Ngt=s(Ppe);Tir=r(Ngt,"tapas"),Ngt.forEach(t),Fir=r(c8e," \u2014 "),sO=n(c8e,"A",{href:!0});var jgt=s(sO);Cir=r(jgt,"TFTapasForMaskedLM"),jgt.forEach(t),Mir=r(c8e," (TAPAS model)"),c8e.forEach(t),Eir=i(ee),t6=n(ee,"LI",{});var f8e=s(t6);$pe=n(f8e,"STRONG",{});var Dgt=s($pe);yir=r(Dgt,"xlm"),Dgt.forEach(t),wir=r(f8e," \u2014 "),lO=n(f8e,"A",{href:!0});var qgt=s(lO);Air=r(qgt,"TFXLMWithLMHeadModel"),qgt.forEach(t),Lir=r(f8e," (XLM model)"),f8e.forEach(t),Bir=i(ee),a6=n(ee,"LI",{});var m8e=s(a6);Ipe=n(m8e,"STRONG",{});var Ggt=s(Ipe);xir=r(Ggt,"xlm-roberta"),Ggt.forEach(t),kir=r(m8e," \u2014 "),iO=n(m8e,"A",{href:!0});var Ogt=s(iO);Rir=r(Ogt,"TFXLMRobertaForMaskedLM"),Ogt.forEach(t),Sir=r(m8e," (XLM-RoBERTa model)"),m8e.forEach(t),ee.forEach(t),Pir=i(va),Npe=n(va,"P",{});var Xgt=s(Npe);$ir=r(Xgt,"Examples:"),Xgt.forEach(t),Iir=i(va),m(v0.$$.fragment,va),va.forEach(t),Ql.forEach(t),lRe=i(c),Lc=n(c,"H2",{class:!0});var vPe=s(Lc);n6=n(vPe,"A",{id:!0,class:!0,href:!0});var Vgt=s(n6);jpe=n(Vgt,"SPAN",{});var zgt=s(jpe);m(T0.$$.fragment,zgt),zgt.forEach(t),Vgt.forEach(t),Nir=i(vPe),Dpe=n(vPe,"SPAN",{});var Wgt=s(Dpe);jir=r(Wgt,"TFAutoModelForSeq2SeqLM"),Wgt.forEach(t),vPe.forEach(t),iRe=i(c),Er=n(c,"DIV",{class:!0});var Ul=s(Er);m(F0.$$.fragment,Ul),Dir=i(Ul),Bc=n(Ul,"P",{});var HW=s(Bc);qir=r(HW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),qpe=n(HW,"CODE",{});var Qgt=s(qpe);Gir=r(Qgt,"from_pretrained()"),Qgt.forEach(t),Oir=r(HW,"class method or the "),Gpe=n(HW,"CODE",{});var Hgt=s(Gpe);Xir=r(Hgt,"from_config()"),Hgt.forEach(t),Vir=r(HW,`class
method.`),HW.forEach(t),zir=i(Ul),C0=n(Ul,"P",{});var TPe=s(C0);Wir=r(TPe,"This class cannot be instantiated directly using "),Ope=n(TPe,"CODE",{});var Ugt=s(Ope);Qir=r(Ugt,"__init__()"),Ugt.forEach(t),Hir=r(TPe," (throws an error)."),TPe.forEach(t),Uir=i(Ul),bt=n(Ul,"DIV",{class:!0});var Jl=s(bt);m(M0.$$.fragment,Jl),Jir=i(Jl),Xpe=n(Jl,"P",{});var Jgt=s(Xpe);Yir=r(Jgt,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),Jgt.forEach(t),Kir=i(Jl),xc=n(Jl,"P",{});var UW=s(xc);Zir=r(UW,`Note:
Loading a model from its configuration file does `),Vpe=n(UW,"STRONG",{});var Ygt=s(Vpe);edr=r(Ygt,"not"),Ygt.forEach(t),odr=r(UW,` load the model weights. It only affects the
model\u2019s configuration. Use `),zpe=n(UW,"CODE",{});var Kgt=s(zpe);rdr=r(Kgt,"from_pretrained()"),Kgt.forEach(t),tdr=r(UW,"to load the model weights."),UW.forEach(t),adr=i(Jl),Wpe=n(Jl,"P",{});var Zgt=s(Wpe);ndr=r(Zgt,"Examples:"),Zgt.forEach(t),sdr=i(Jl),m(E0.$$.fragment,Jl),Jl.forEach(t),ldr=i(Ul),vo=n(Ul,"DIV",{class:!0});var Ta=s(vo);m(y0.$$.fragment,Ta),idr=i(Ta),Qpe=n(Ta,"P",{});var eht=s(Qpe);ddr=r(eht,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),eht.forEach(t),cdr=i(Ta),Fn=n(Ta,"P",{});var NM=s(Fn);fdr=r(NM,"The model class to instantiate is selected based on the "),Hpe=n(NM,"CODE",{});var oht=s(Hpe);mdr=r(oht,"model_type"),oht.forEach(t),gdr=r(NM,` property of the config object (either
passed as an argument or loaded from `),Upe=n(NM,"CODE",{});var rht=s(Upe);hdr=r(rht,"pretrained_model_name_or_path"),rht.forEach(t),pdr=r(NM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Jpe=n(NM,"CODE",{});var tht=s(Jpe);_dr=r(tht,"pretrained_model_name_or_path"),tht.forEach(t),udr=r(NM,":"),NM.forEach(t),bdr=i(Ta),ue=n(Ta,"UL",{});var ye=s(ue);s6=n(ye,"LI",{});var g8e=s(s6);Ype=n(g8e,"STRONG",{});var aht=s(Ype);vdr=r(aht,"bart"),aht.forEach(t),Tdr=r(g8e," \u2014 "),dO=n(g8e,"A",{href:!0});var nht=s(dO);Fdr=r(nht,"TFBartForConditionalGeneration"),nht.forEach(t),Cdr=r(g8e," (BART model)"),g8e.forEach(t),Mdr=i(ye),l6=n(ye,"LI",{});var h8e=s(l6);Kpe=n(h8e,"STRONG",{});var sht=s(Kpe);Edr=r(sht,"blenderbot"),sht.forEach(t),ydr=r(h8e," \u2014 "),cO=n(h8e,"A",{href:!0});var lht=s(cO);wdr=r(lht,"TFBlenderbotForConditionalGeneration"),lht.forEach(t),Adr=r(h8e," (Blenderbot model)"),h8e.forEach(t),Ldr=i(ye),i6=n(ye,"LI",{});var p8e=s(i6);Zpe=n(p8e,"STRONG",{});var iht=s(Zpe);Bdr=r(iht,"blenderbot-small"),iht.forEach(t),xdr=r(p8e," \u2014 "),fO=n(p8e,"A",{href:!0});var dht=s(fO);kdr=r(dht,"TFBlenderbotSmallForConditionalGeneration"),dht.forEach(t),Rdr=r(p8e," (BlenderbotSmall model)"),p8e.forEach(t),Sdr=i(ye),d6=n(ye,"LI",{});var _8e=s(d6);e_e=n(_8e,"STRONG",{});var cht=s(e_e);Pdr=r(cht,"encoder-decoder"),cht.forEach(t),$dr=r(_8e," \u2014 "),mO=n(_8e,"A",{href:!0});var fht=s(mO);Idr=r(fht,"TFEncoderDecoderModel"),fht.forEach(t),Ndr=r(_8e," (Encoder decoder model)"),_8e.forEach(t),jdr=i(ye),c6=n(ye,"LI",{});var u8e=s(c6);o_e=n(u8e,"STRONG",{});var mht=s(o_e);Ddr=r(mht,"led"),mht.forEach(t),qdr=r(u8e," \u2014 "),gO=n(u8e,"A",{href:!0});var ght=s(gO);Gdr=r(ght,"TFLEDForConditionalGeneration"),ght.forEach(t),Odr=r(u8e," (LED model)"),u8e.forEach(t),Xdr=i(ye),f6=n(ye,"LI",{});var b8e=s(f6);r_e=n(b8e,"STRONG",{});var hht=s(r_e);Vdr=r(hht,"marian"),hht.forEach(t),zdr=r(b8e," \u2014 "),hO=n(b8e,"A",{href:!0});var pht=s(hO);Wdr=r(pht,"TFMarianMTModel"),pht.forEach(t),Qdr=r(b8e," (Marian model)"),b8e.forEach(t),Hdr=i(ye),m6=n(ye,"LI",{});var v8e=s(m6);t_e=n(v8e,"STRONG",{});var _ht=s(t_e);Udr=r(_ht,"mbart"),_ht.forEach(t),Jdr=r(v8e," \u2014 "),pO=n(v8e,"A",{href:!0});var uht=s(pO);Ydr=r(uht,"TFMBartForConditionalGeneration"),uht.forEach(t),Kdr=r(v8e," (mBART model)"),v8e.forEach(t),Zdr=i(ye),g6=n(ye,"LI",{});var T8e=s(g6);a_e=n(T8e,"STRONG",{});var bht=s(a_e);ecr=r(bht,"mt5"),bht.forEach(t),ocr=r(T8e," \u2014 "),_O=n(T8e,"A",{href:!0});var vht=s(_O);rcr=r(vht,"TFMT5ForConditionalGeneration"),vht.forEach(t),tcr=r(T8e," (mT5 model)"),T8e.forEach(t),acr=i(ye),h6=n(ye,"LI",{});var F8e=s(h6);n_e=n(F8e,"STRONG",{});var Tht=s(n_e);ncr=r(Tht,"pegasus"),Tht.forEach(t),scr=r(F8e," \u2014 "),uO=n(F8e,"A",{href:!0});var Fht=s(uO);lcr=r(Fht,"TFPegasusForConditionalGeneration"),Fht.forEach(t),icr=r(F8e," (Pegasus model)"),F8e.forEach(t),dcr=i(ye),p6=n(ye,"LI",{});var C8e=s(p6);s_e=n(C8e,"STRONG",{});var Cht=s(s_e);ccr=r(Cht,"t5"),Cht.forEach(t),fcr=r(C8e," \u2014 "),bO=n(C8e,"A",{href:!0});var Mht=s(bO);mcr=r(Mht,"TFT5ForConditionalGeneration"),Mht.forEach(t),gcr=r(C8e," (T5 model)"),C8e.forEach(t),ye.forEach(t),hcr=i(Ta),l_e=n(Ta,"P",{});var Eht=s(l_e);pcr=r(Eht,"Examples:"),Eht.forEach(t),_cr=i(Ta),m(w0.$$.fragment,Ta),Ta.forEach(t),Ul.forEach(t),dRe=i(c),kc=n(c,"H2",{class:!0});var FPe=s(kc);_6=n(FPe,"A",{id:!0,class:!0,href:!0});var yht=s(_6);i_e=n(yht,"SPAN",{});var wht=s(i_e);m(A0.$$.fragment,wht),wht.forEach(t),yht.forEach(t),ucr=i(FPe),d_e=n(FPe,"SPAN",{});var Aht=s(d_e);bcr=r(Aht,"TFAutoModelForSequenceClassification"),Aht.forEach(t),FPe.forEach(t),cRe=i(c),yr=n(c,"DIV",{class:!0});var Yl=s(yr);m(L0.$$.fragment,Yl),vcr=i(Yl),Rc=n(Yl,"P",{});var JW=s(Rc);Tcr=r(JW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),c_e=n(JW,"CODE",{});var Lht=s(c_e);Fcr=r(Lht,"from_pretrained()"),Lht.forEach(t),Ccr=r(JW,"class method or the "),f_e=n(JW,"CODE",{});var Bht=s(f_e);Mcr=r(Bht,"from_config()"),Bht.forEach(t),Ecr=r(JW,`class
method.`),JW.forEach(t),ycr=i(Yl),B0=n(Yl,"P",{});var CPe=s(B0);wcr=r(CPe,"This class cannot be instantiated directly using "),m_e=n(CPe,"CODE",{});var xht=s(m_e);Acr=r(xht,"__init__()"),xht.forEach(t),Lcr=r(CPe," (throws an error)."),CPe.forEach(t),Bcr=i(Yl),vt=n(Yl,"DIV",{class:!0});var Kl=s(vt);m(x0.$$.fragment,Kl),xcr=i(Kl),g_e=n(Kl,"P",{});var kht=s(g_e);kcr=r(kht,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),kht.forEach(t),Rcr=i(Kl),Sc=n(Kl,"P",{});var YW=s(Sc);Scr=r(YW,`Note:
Loading a model from its configuration file does `),h_e=n(YW,"STRONG",{});var Rht=s(h_e);Pcr=r(Rht,"not"),Rht.forEach(t),$cr=r(YW,` load the model weights. It only affects the
model\u2019s configuration. Use `),p_e=n(YW,"CODE",{});var Sht=s(p_e);Icr=r(Sht,"from_pretrained()"),Sht.forEach(t),Ncr=r(YW,"to load the model weights."),YW.forEach(t),jcr=i(Kl),__e=n(Kl,"P",{});var Pht=s(__e);Dcr=r(Pht,"Examples:"),Pht.forEach(t),qcr=i(Kl),m(k0.$$.fragment,Kl),Kl.forEach(t),Gcr=i(Yl),To=n(Yl,"DIV",{class:!0});var Fa=s(To);m(R0.$$.fragment,Fa),Ocr=i(Fa),u_e=n(Fa,"P",{});var $ht=s(u_e);Xcr=r($ht,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),$ht.forEach(t),Vcr=i(Fa),Cn=n(Fa,"P",{});var jM=s(Cn);zcr=r(jM,"The model class to instantiate is selected based on the "),b_e=n(jM,"CODE",{});var Iht=s(b_e);Wcr=r(Iht,"model_type"),Iht.forEach(t),Qcr=r(jM,` property of the config object (either
passed as an argument or loaded from `),v_e=n(jM,"CODE",{});var Nht=s(v_e);Hcr=r(Nht,"pretrained_model_name_or_path"),Nht.forEach(t),Ucr=r(jM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),T_e=n(jM,"CODE",{});var jht=s(T_e);Jcr=r(jht,"pretrained_model_name_or_path"),jht.forEach(t),Ycr=r(jM,":"),jM.forEach(t),Kcr=i(Fa),V=n(Fa,"UL",{});var W=s(V);u6=n(W,"LI",{});var M8e=s(u6);F_e=n(M8e,"STRONG",{});var Dht=s(F_e);Zcr=r(Dht,"albert"),Dht.forEach(t),efr=r(M8e," \u2014 "),vO=n(M8e,"A",{href:!0});var qht=s(vO);ofr=r(qht,"TFAlbertForSequenceClassification"),qht.forEach(t),rfr=r(M8e," (ALBERT model)"),M8e.forEach(t),tfr=i(W),b6=n(W,"LI",{});var E8e=s(b6);C_e=n(E8e,"STRONG",{});var Ght=s(C_e);afr=r(Ght,"bert"),Ght.forEach(t),nfr=r(E8e," \u2014 "),TO=n(E8e,"A",{href:!0});var Oht=s(TO);sfr=r(Oht,"TFBertForSequenceClassification"),Oht.forEach(t),lfr=r(E8e," (BERT model)"),E8e.forEach(t),ifr=i(W),v6=n(W,"LI",{});var y8e=s(v6);M_e=n(y8e,"STRONG",{});var Xht=s(M_e);dfr=r(Xht,"camembert"),Xht.forEach(t),cfr=r(y8e," \u2014 "),FO=n(y8e,"A",{href:!0});var Vht=s(FO);ffr=r(Vht,"TFCamembertForSequenceClassification"),Vht.forEach(t),mfr=r(y8e," (CamemBERT model)"),y8e.forEach(t),gfr=i(W),T6=n(W,"LI",{});var w8e=s(T6);E_e=n(w8e,"STRONG",{});var zht=s(E_e);hfr=r(zht,"convbert"),zht.forEach(t),pfr=r(w8e," \u2014 "),CO=n(w8e,"A",{href:!0});var Wht=s(CO);_fr=r(Wht,"TFConvBertForSequenceClassification"),Wht.forEach(t),ufr=r(w8e," (ConvBERT model)"),w8e.forEach(t),bfr=i(W),F6=n(W,"LI",{});var A8e=s(F6);y_e=n(A8e,"STRONG",{});var Qht=s(y_e);vfr=r(Qht,"ctrl"),Qht.forEach(t),Tfr=r(A8e," \u2014 "),MO=n(A8e,"A",{href:!0});var Hht=s(MO);Ffr=r(Hht,"TFCTRLForSequenceClassification"),Hht.forEach(t),Cfr=r(A8e," (CTRL model)"),A8e.forEach(t),Mfr=i(W),C6=n(W,"LI",{});var L8e=s(C6);w_e=n(L8e,"STRONG",{});var Uht=s(w_e);Efr=r(Uht,"deberta"),Uht.forEach(t),yfr=r(L8e," \u2014 "),EO=n(L8e,"A",{href:!0});var Jht=s(EO);wfr=r(Jht,"TFDebertaForSequenceClassification"),Jht.forEach(t),Afr=r(L8e," (DeBERTa model)"),L8e.forEach(t),Lfr=i(W),M6=n(W,"LI",{});var B8e=s(M6);A_e=n(B8e,"STRONG",{});var Yht=s(A_e);Bfr=r(Yht,"deberta-v2"),Yht.forEach(t),xfr=r(B8e," \u2014 "),yO=n(B8e,"A",{href:!0});var Kht=s(yO);kfr=r(Kht,"TFDebertaV2ForSequenceClassification"),Kht.forEach(t),Rfr=r(B8e," (DeBERTa-v2 model)"),B8e.forEach(t),Sfr=i(W),E6=n(W,"LI",{});var x8e=s(E6);L_e=n(x8e,"STRONG",{});var Zht=s(L_e);Pfr=r(Zht,"distilbert"),Zht.forEach(t),$fr=r(x8e," \u2014 "),wO=n(x8e,"A",{href:!0});var ept=s(wO);Ifr=r(ept,"TFDistilBertForSequenceClassification"),ept.forEach(t),Nfr=r(x8e," (DistilBERT model)"),x8e.forEach(t),jfr=i(W),y6=n(W,"LI",{});var k8e=s(y6);B_e=n(k8e,"STRONG",{});var opt=s(B_e);Dfr=r(opt,"electra"),opt.forEach(t),qfr=r(k8e," \u2014 "),AO=n(k8e,"A",{href:!0});var rpt=s(AO);Gfr=r(rpt,"TFElectraForSequenceClassification"),rpt.forEach(t),Ofr=r(k8e," (ELECTRA model)"),k8e.forEach(t),Xfr=i(W),w6=n(W,"LI",{});var R8e=s(w6);x_e=n(R8e,"STRONG",{});var tpt=s(x_e);Vfr=r(tpt,"flaubert"),tpt.forEach(t),zfr=r(R8e," \u2014 "),LO=n(R8e,"A",{href:!0});var apt=s(LO);Wfr=r(apt,"TFFlaubertForSequenceClassification"),apt.forEach(t),Qfr=r(R8e," (FlauBERT model)"),R8e.forEach(t),Hfr=i(W),A6=n(W,"LI",{});var S8e=s(A6);k_e=n(S8e,"STRONG",{});var npt=s(k_e);Ufr=r(npt,"funnel"),npt.forEach(t),Jfr=r(S8e," \u2014 "),BO=n(S8e,"A",{href:!0});var spt=s(BO);Yfr=r(spt,"TFFunnelForSequenceClassification"),spt.forEach(t),Kfr=r(S8e," (Funnel Transformer model)"),S8e.forEach(t),Zfr=i(W),L6=n(W,"LI",{});var P8e=s(L6);R_e=n(P8e,"STRONG",{});var lpt=s(R_e);emr=r(lpt,"gpt2"),lpt.forEach(t),omr=r(P8e," \u2014 "),xO=n(P8e,"A",{href:!0});var ipt=s(xO);rmr=r(ipt,"TFGPT2ForSequenceClassification"),ipt.forEach(t),tmr=r(P8e," (OpenAI GPT-2 model)"),P8e.forEach(t),amr=i(W),B6=n(W,"LI",{});var $8e=s(B6);S_e=n($8e,"STRONG",{});var dpt=s(S_e);nmr=r(dpt,"layoutlm"),dpt.forEach(t),smr=r($8e," \u2014 "),kO=n($8e,"A",{href:!0});var cpt=s(kO);lmr=r(cpt,"TFLayoutLMForSequenceClassification"),cpt.forEach(t),imr=r($8e," (LayoutLM model)"),$8e.forEach(t),dmr=i(W),x6=n(W,"LI",{});var I8e=s(x6);P_e=n(I8e,"STRONG",{});var fpt=s(P_e);cmr=r(fpt,"longformer"),fpt.forEach(t),fmr=r(I8e," \u2014 "),RO=n(I8e,"A",{href:!0});var mpt=s(RO);mmr=r(mpt,"TFLongformerForSequenceClassification"),mpt.forEach(t),gmr=r(I8e," (Longformer model)"),I8e.forEach(t),hmr=i(W),k6=n(W,"LI",{});var N8e=s(k6);$_e=n(N8e,"STRONG",{});var gpt=s($_e);pmr=r(gpt,"mobilebert"),gpt.forEach(t),_mr=r(N8e," \u2014 "),SO=n(N8e,"A",{href:!0});var hpt=s(SO);umr=r(hpt,"TFMobileBertForSequenceClassification"),hpt.forEach(t),bmr=r(N8e," (MobileBERT model)"),N8e.forEach(t),vmr=i(W),R6=n(W,"LI",{});var j8e=s(R6);I_e=n(j8e,"STRONG",{});var ppt=s(I_e);Tmr=r(ppt,"mpnet"),ppt.forEach(t),Fmr=r(j8e," \u2014 "),PO=n(j8e,"A",{href:!0});var _pt=s(PO);Cmr=r(_pt,"TFMPNetForSequenceClassification"),_pt.forEach(t),Mmr=r(j8e," (MPNet model)"),j8e.forEach(t),Emr=i(W),S6=n(W,"LI",{});var D8e=s(S6);N_e=n(D8e,"STRONG",{});var upt=s(N_e);ymr=r(upt,"openai-gpt"),upt.forEach(t),wmr=r(D8e," \u2014 "),$O=n(D8e,"A",{href:!0});var bpt=s($O);Amr=r(bpt,"TFOpenAIGPTForSequenceClassification"),bpt.forEach(t),Lmr=r(D8e," (OpenAI GPT model)"),D8e.forEach(t),Bmr=i(W),P6=n(W,"LI",{});var q8e=s(P6);j_e=n(q8e,"STRONG",{});var vpt=s(j_e);xmr=r(vpt,"rembert"),vpt.forEach(t),kmr=r(q8e," \u2014 "),IO=n(q8e,"A",{href:!0});var Tpt=s(IO);Rmr=r(Tpt,"TFRemBertForSequenceClassification"),Tpt.forEach(t),Smr=r(q8e," (RemBERT model)"),q8e.forEach(t),Pmr=i(W),$6=n(W,"LI",{});var G8e=s($6);D_e=n(G8e,"STRONG",{});var Fpt=s(D_e);$mr=r(Fpt,"roberta"),Fpt.forEach(t),Imr=r(G8e," \u2014 "),NO=n(G8e,"A",{href:!0});var Cpt=s(NO);Nmr=r(Cpt,"TFRobertaForSequenceClassification"),Cpt.forEach(t),jmr=r(G8e," (RoBERTa model)"),G8e.forEach(t),Dmr=i(W),I6=n(W,"LI",{});var O8e=s(I6);q_e=n(O8e,"STRONG",{});var Mpt=s(q_e);qmr=r(Mpt,"roformer"),Mpt.forEach(t),Gmr=r(O8e," \u2014 "),jO=n(O8e,"A",{href:!0});var Ept=s(jO);Omr=r(Ept,"TFRoFormerForSequenceClassification"),Ept.forEach(t),Xmr=r(O8e," (RoFormer model)"),O8e.forEach(t),Vmr=i(W),N6=n(W,"LI",{});var X8e=s(N6);G_e=n(X8e,"STRONG",{});var ypt=s(G_e);zmr=r(ypt,"tapas"),ypt.forEach(t),Wmr=r(X8e," \u2014 "),DO=n(X8e,"A",{href:!0});var wpt=s(DO);Qmr=r(wpt,"TFTapasForSequenceClassification"),wpt.forEach(t),Hmr=r(X8e," (TAPAS model)"),X8e.forEach(t),Umr=i(W),j6=n(W,"LI",{});var V8e=s(j6);O_e=n(V8e,"STRONG",{});var Apt=s(O_e);Jmr=r(Apt,"transfo-xl"),Apt.forEach(t),Ymr=r(V8e," \u2014 "),qO=n(V8e,"A",{href:!0});var Lpt=s(qO);Kmr=r(Lpt,"TFTransfoXLForSequenceClassification"),Lpt.forEach(t),Zmr=r(V8e," (Transformer-XL model)"),V8e.forEach(t),egr=i(W),D6=n(W,"LI",{});var z8e=s(D6);X_e=n(z8e,"STRONG",{});var Bpt=s(X_e);ogr=r(Bpt,"xlm"),Bpt.forEach(t),rgr=r(z8e," \u2014 "),GO=n(z8e,"A",{href:!0});var xpt=s(GO);tgr=r(xpt,"TFXLMForSequenceClassification"),xpt.forEach(t),agr=r(z8e," (XLM model)"),z8e.forEach(t),ngr=i(W),q6=n(W,"LI",{});var W8e=s(q6);V_e=n(W8e,"STRONG",{});var kpt=s(V_e);sgr=r(kpt,"xlm-roberta"),kpt.forEach(t),lgr=r(W8e," \u2014 "),OO=n(W8e,"A",{href:!0});var Rpt=s(OO);igr=r(Rpt,"TFXLMRobertaForSequenceClassification"),Rpt.forEach(t),dgr=r(W8e," (XLM-RoBERTa model)"),W8e.forEach(t),cgr=i(W),G6=n(W,"LI",{});var Q8e=s(G6);z_e=n(Q8e,"STRONG",{});var Spt=s(z_e);fgr=r(Spt,"xlnet"),Spt.forEach(t),mgr=r(Q8e," \u2014 "),XO=n(Q8e,"A",{href:!0});var Ppt=s(XO);ggr=r(Ppt,"TFXLNetForSequenceClassification"),Ppt.forEach(t),hgr=r(Q8e," (XLNet model)"),Q8e.forEach(t),W.forEach(t),pgr=i(Fa),W_e=n(Fa,"P",{});var $pt=s(W_e);_gr=r($pt,"Examples:"),$pt.forEach(t),ugr=i(Fa),m(S0.$$.fragment,Fa),Fa.forEach(t),Yl.forEach(t),fRe=i(c),Pc=n(c,"H2",{class:!0});var MPe=s(Pc);O6=n(MPe,"A",{id:!0,class:!0,href:!0});var Ipt=s(O6);Q_e=n(Ipt,"SPAN",{});var Npt=s(Q_e);m(P0.$$.fragment,Npt),Npt.forEach(t),Ipt.forEach(t),bgr=i(MPe),H_e=n(MPe,"SPAN",{});var jpt=s(H_e);vgr=r(jpt,"TFAutoModelForMultipleChoice"),jpt.forEach(t),MPe.forEach(t),mRe=i(c),wr=n(c,"DIV",{class:!0});var Zl=s(wr);m($0.$$.fragment,Zl),Tgr=i(Zl),$c=n(Zl,"P",{});var KW=s($c);Fgr=r(KW,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),U_e=n(KW,"CODE",{});var Dpt=s(U_e);Cgr=r(Dpt,"from_pretrained()"),Dpt.forEach(t),Mgr=r(KW,"class method or the "),J_e=n(KW,"CODE",{});var qpt=s(J_e);Egr=r(qpt,"from_config()"),qpt.forEach(t),ygr=r(KW,`class
method.`),KW.forEach(t),wgr=i(Zl),I0=n(Zl,"P",{});var EPe=s(I0);Agr=r(EPe,"This class cannot be instantiated directly using "),Y_e=n(EPe,"CODE",{});var Gpt=s(Y_e);Lgr=r(Gpt,"__init__()"),Gpt.forEach(t),Bgr=r(EPe," (throws an error)."),EPe.forEach(t),xgr=i(Zl),Tt=n(Zl,"DIV",{class:!0});var ei=s(Tt);m(N0.$$.fragment,ei),kgr=i(ei),K_e=n(ei,"P",{});var Opt=s(K_e);Rgr=r(Opt,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),Opt.forEach(t),Sgr=i(ei),Ic=n(ei,"P",{});var ZW=s(Ic);Pgr=r(ZW,`Note:
Loading a model from its configuration file does `),Z_e=n(ZW,"STRONG",{});var Xpt=s(Z_e);$gr=r(Xpt,"not"),Xpt.forEach(t),Igr=r(ZW,` load the model weights. It only affects the
model\u2019s configuration. Use `),eue=n(ZW,"CODE",{});var Vpt=s(eue);Ngr=r(Vpt,"from_pretrained()"),Vpt.forEach(t),jgr=r(ZW,"to load the model weights."),ZW.forEach(t),Dgr=i(ei),oue=n(ei,"P",{});var zpt=s(oue);qgr=r(zpt,"Examples:"),zpt.forEach(t),Ggr=i(ei),m(j0.$$.fragment,ei),ei.forEach(t),Ogr=i(Zl),Fo=n(Zl,"DIV",{class:!0});var Ca=s(Fo);m(D0.$$.fragment,Ca),Xgr=i(Ca),rue=n(Ca,"P",{});var Wpt=s(rue);Vgr=r(Wpt,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),Wpt.forEach(t),zgr=i(Ca),Mn=n(Ca,"P",{});var DM=s(Mn);Wgr=r(DM,"The model class to instantiate is selected based on the "),tue=n(DM,"CODE",{});var Qpt=s(tue);Qgr=r(Qpt,"model_type"),Qpt.forEach(t),Hgr=r(DM,` property of the config object (either
passed as an argument or loaded from `),aue=n(DM,"CODE",{});var Hpt=s(aue);Ugr=r(Hpt,"pretrained_model_name_or_path"),Hpt.forEach(t),Jgr=r(DM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),nue=n(DM,"CODE",{});var Upt=s(nue);Ygr=r(Upt,"pretrained_model_name_or_path"),Upt.forEach(t),Kgr=r(DM,":"),DM.forEach(t),Zgr=i(Ca),ae=n(Ca,"UL",{});var le=s(ae);X6=n(le,"LI",{});var H8e=s(X6);sue=n(H8e,"STRONG",{});var Jpt=s(sue);ehr=r(Jpt,"albert"),Jpt.forEach(t),ohr=r(H8e," \u2014 "),VO=n(H8e,"A",{href:!0});var Ypt=s(VO);rhr=r(Ypt,"TFAlbertForMultipleChoice"),Ypt.forEach(t),thr=r(H8e," (ALBERT model)"),H8e.forEach(t),ahr=i(le),V6=n(le,"LI",{});var U8e=s(V6);lue=n(U8e,"STRONG",{});var Kpt=s(lue);nhr=r(Kpt,"bert"),Kpt.forEach(t),shr=r(U8e," \u2014 "),zO=n(U8e,"A",{href:!0});var Zpt=s(zO);lhr=r(Zpt,"TFBertForMultipleChoice"),Zpt.forEach(t),ihr=r(U8e," (BERT model)"),U8e.forEach(t),dhr=i(le),z6=n(le,"LI",{});var J8e=s(z6);iue=n(J8e,"STRONG",{});var e_t=s(iue);chr=r(e_t,"camembert"),e_t.forEach(t),fhr=r(J8e," \u2014 "),WO=n(J8e,"A",{href:!0});var o_t=s(WO);mhr=r(o_t,"TFCamembertForMultipleChoice"),o_t.forEach(t),ghr=r(J8e," (CamemBERT model)"),J8e.forEach(t),hhr=i(le),W6=n(le,"LI",{});var Y8e=s(W6);due=n(Y8e,"STRONG",{});var r_t=s(due);phr=r(r_t,"convbert"),r_t.forEach(t),_hr=r(Y8e," \u2014 "),QO=n(Y8e,"A",{href:!0});var t_t=s(QO);uhr=r(t_t,"TFConvBertForMultipleChoice"),t_t.forEach(t),bhr=r(Y8e," (ConvBERT model)"),Y8e.forEach(t),vhr=i(le),Q6=n(le,"LI",{});var K8e=s(Q6);cue=n(K8e,"STRONG",{});var a_t=s(cue);Thr=r(a_t,"distilbert"),a_t.forEach(t),Fhr=r(K8e," \u2014 "),HO=n(K8e,"A",{href:!0});var n_t=s(HO);Chr=r(n_t,"TFDistilBertForMultipleChoice"),n_t.forEach(t),Mhr=r(K8e," (DistilBERT model)"),K8e.forEach(t),Ehr=i(le),H6=n(le,"LI",{});var Z8e=s(H6);fue=n(Z8e,"STRONG",{});var s_t=s(fue);yhr=r(s_t,"electra"),s_t.forEach(t),whr=r(Z8e," \u2014 "),UO=n(Z8e,"A",{href:!0});var l_t=s(UO);Ahr=r(l_t,"TFElectraForMultipleChoice"),l_t.forEach(t),Lhr=r(Z8e," (ELECTRA model)"),Z8e.forEach(t),Bhr=i(le),U6=n(le,"LI",{});var e9e=s(U6);mue=n(e9e,"STRONG",{});var i_t=s(mue);xhr=r(i_t,"flaubert"),i_t.forEach(t),khr=r(e9e," \u2014 "),JO=n(e9e,"A",{href:!0});var d_t=s(JO);Rhr=r(d_t,"TFFlaubertForMultipleChoice"),d_t.forEach(t),Shr=r(e9e," (FlauBERT model)"),e9e.forEach(t),Phr=i(le),J6=n(le,"LI",{});var o9e=s(J6);gue=n(o9e,"STRONG",{});var c_t=s(gue);$hr=r(c_t,"funnel"),c_t.forEach(t),Ihr=r(o9e," \u2014 "),YO=n(o9e,"A",{href:!0});var f_t=s(YO);Nhr=r(f_t,"TFFunnelForMultipleChoice"),f_t.forEach(t),jhr=r(o9e," (Funnel Transformer model)"),o9e.forEach(t),Dhr=i(le),Y6=n(le,"LI",{});var r9e=s(Y6);hue=n(r9e,"STRONG",{});var m_t=s(hue);qhr=r(m_t,"longformer"),m_t.forEach(t),Ghr=r(r9e," \u2014 "),KO=n(r9e,"A",{href:!0});var g_t=s(KO);Ohr=r(g_t,"TFLongformerForMultipleChoice"),g_t.forEach(t),Xhr=r(r9e," (Longformer model)"),r9e.forEach(t),Vhr=i(le),K6=n(le,"LI",{});var t9e=s(K6);pue=n(t9e,"STRONG",{});var h_t=s(pue);zhr=r(h_t,"mobilebert"),h_t.forEach(t),Whr=r(t9e," \u2014 "),ZO=n(t9e,"A",{href:!0});var p_t=s(ZO);Qhr=r(p_t,"TFMobileBertForMultipleChoice"),p_t.forEach(t),Hhr=r(t9e," (MobileBERT model)"),t9e.forEach(t),Uhr=i(le),Z6=n(le,"LI",{});var a9e=s(Z6);_ue=n(a9e,"STRONG",{});var __t=s(_ue);Jhr=r(__t,"mpnet"),__t.forEach(t),Yhr=r(a9e," \u2014 "),eX=n(a9e,"A",{href:!0});var u_t=s(eX);Khr=r(u_t,"TFMPNetForMultipleChoice"),u_t.forEach(t),Zhr=r(a9e," (MPNet model)"),a9e.forEach(t),epr=i(le),eT=n(le,"LI",{});var n9e=s(eT);uue=n(n9e,"STRONG",{});var b_t=s(uue);opr=r(b_t,"rembert"),b_t.forEach(t),rpr=r(n9e," \u2014 "),oX=n(n9e,"A",{href:!0});var v_t=s(oX);tpr=r(v_t,"TFRemBertForMultipleChoice"),v_t.forEach(t),apr=r(n9e," (RemBERT model)"),n9e.forEach(t),npr=i(le),oT=n(le,"LI",{});var s9e=s(oT);bue=n(s9e,"STRONG",{});var T_t=s(bue);spr=r(T_t,"roberta"),T_t.forEach(t),lpr=r(s9e," \u2014 "),rX=n(s9e,"A",{href:!0});var F_t=s(rX);ipr=r(F_t,"TFRobertaForMultipleChoice"),F_t.forEach(t),dpr=r(s9e," (RoBERTa model)"),s9e.forEach(t),cpr=i(le),rT=n(le,"LI",{});var l9e=s(rT);vue=n(l9e,"STRONG",{});var C_t=s(vue);fpr=r(C_t,"roformer"),C_t.forEach(t),mpr=r(l9e," \u2014 "),tX=n(l9e,"A",{href:!0});var M_t=s(tX);gpr=r(M_t,"TFRoFormerForMultipleChoice"),M_t.forEach(t),hpr=r(l9e," (RoFormer model)"),l9e.forEach(t),ppr=i(le),tT=n(le,"LI",{});var i9e=s(tT);Tue=n(i9e,"STRONG",{});var E_t=s(Tue);_pr=r(E_t,"xlm"),E_t.forEach(t),upr=r(i9e," \u2014 "),aX=n(i9e,"A",{href:!0});var y_t=s(aX);bpr=r(y_t,"TFXLMForMultipleChoice"),y_t.forEach(t),vpr=r(i9e," (XLM model)"),i9e.forEach(t),Tpr=i(le),aT=n(le,"LI",{});var d9e=s(aT);Fue=n(d9e,"STRONG",{});var w_t=s(Fue);Fpr=r(w_t,"xlm-roberta"),w_t.forEach(t),Cpr=r(d9e," \u2014 "),nX=n(d9e,"A",{href:!0});var A_t=s(nX);Mpr=r(A_t,"TFXLMRobertaForMultipleChoice"),A_t.forEach(t),Epr=r(d9e," (XLM-RoBERTa model)"),d9e.forEach(t),ypr=i(le),nT=n(le,"LI",{});var c9e=s(nT);Cue=n(c9e,"STRONG",{});var L_t=s(Cue);wpr=r(L_t,"xlnet"),L_t.forEach(t),Apr=r(c9e," \u2014 "),sX=n(c9e,"A",{href:!0});var B_t=s(sX);Lpr=r(B_t,"TFXLNetForMultipleChoice"),B_t.forEach(t),Bpr=r(c9e," (XLNet model)"),c9e.forEach(t),le.forEach(t),xpr=i(Ca),Mue=n(Ca,"P",{});var x_t=s(Mue);kpr=r(x_t,"Examples:"),x_t.forEach(t),Rpr=i(Ca),m(q0.$$.fragment,Ca),Ca.forEach(t),Zl.forEach(t),gRe=i(c),Nc=n(c,"H2",{class:!0});var yPe=s(Nc);sT=n(yPe,"A",{id:!0,class:!0,href:!0});var k_t=s(sT);Eue=n(k_t,"SPAN",{});var R_t=s(Eue);m(G0.$$.fragment,R_t),R_t.forEach(t),k_t.forEach(t),Spr=i(yPe),yue=n(yPe,"SPAN",{});var S_t=s(yue);Ppr=r(S_t,"TFAutoModelForTableQuestionAnswering"),S_t.forEach(t),yPe.forEach(t),hRe=i(c),Ar=n(c,"DIV",{class:!0});var oi=s(Ar);m(O0.$$.fragment,oi),$pr=i(oi),jc=n(oi,"P",{});var eQ=s(jc);Ipr=r(eQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a table question answering head) when created
with the `),wue=n(eQ,"CODE",{});var P_t=s(wue);Npr=r(P_t,"from_pretrained()"),P_t.forEach(t),jpr=r(eQ,"class method or the "),Aue=n(eQ,"CODE",{});var $_t=s(Aue);Dpr=r($_t,"from_config()"),$_t.forEach(t),qpr=r(eQ,`class
method.`),eQ.forEach(t),Gpr=i(oi),X0=n(oi,"P",{});var wPe=s(X0);Opr=r(wPe,"This class cannot be instantiated directly using "),Lue=n(wPe,"CODE",{});var I_t=s(Lue);Xpr=r(I_t,"__init__()"),I_t.forEach(t),Vpr=r(wPe," (throws an error)."),wPe.forEach(t),zpr=i(oi),Ft=n(oi,"DIV",{class:!0});var ri=s(Ft);m(V0.$$.fragment,ri),Wpr=i(ri),Bue=n(ri,"P",{});var N_t=s(Bue);Qpr=r(N_t,"Instantiates one of the model classes of the library (with a table question answering head) from a configuration."),N_t.forEach(t),Hpr=i(ri),Dc=n(ri,"P",{});var oQ=s(Dc);Upr=r(oQ,`Note:
Loading a model from its configuration file does `),xue=n(oQ,"STRONG",{});var j_t=s(xue);Jpr=r(j_t,"not"),j_t.forEach(t),Ypr=r(oQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),kue=n(oQ,"CODE",{});var D_t=s(kue);Kpr=r(D_t,"from_pretrained()"),D_t.forEach(t),Zpr=r(oQ,"to load the model weights."),oQ.forEach(t),e_r=i(ri),Rue=n(ri,"P",{});var q_t=s(Rue);o_r=r(q_t,"Examples:"),q_t.forEach(t),r_r=i(ri),m(z0.$$.fragment,ri),ri.forEach(t),t_r=i(oi),Co=n(oi,"DIV",{class:!0});var Ma=s(Co);m(W0.$$.fragment,Ma),a_r=i(Ma),Sue=n(Ma,"P",{});var G_t=s(Sue);n_r=r(G_t,"Instantiate one of the model classes of the library (with a table question answering head) from a pretrained model."),G_t.forEach(t),s_r=i(Ma),En=n(Ma,"P",{});var qM=s(En);l_r=r(qM,"The model class to instantiate is selected based on the "),Pue=n(qM,"CODE",{});var O_t=s(Pue);i_r=r(O_t,"model_type"),O_t.forEach(t),d_r=r(qM,` property of the config object (either
passed as an argument or loaded from `),$ue=n(qM,"CODE",{});var X_t=s($ue);c_r=r(X_t,"pretrained_model_name_or_path"),X_t.forEach(t),f_r=r(qM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Iue=n(qM,"CODE",{});var V_t=s(Iue);m_r=r(V_t,"pretrained_model_name_or_path"),V_t.forEach(t),g_r=r(qM,":"),qM.forEach(t),h_r=i(Ma),Nue=n(Ma,"UL",{});var z_t=s(Nue);lT=n(z_t,"LI",{});var f9e=s(lT);jue=n(f9e,"STRONG",{});var W_t=s(jue);p_r=r(W_t,"tapas"),W_t.forEach(t),__r=r(f9e," \u2014 "),lX=n(f9e,"A",{href:!0});var Q_t=s(lX);u_r=r(Q_t,"TFTapasForQuestionAnswering"),Q_t.forEach(t),b_r=r(f9e," (TAPAS model)"),f9e.forEach(t),z_t.forEach(t),v_r=i(Ma),Due=n(Ma,"P",{});var H_t=s(Due);T_r=r(H_t,"Examples:"),H_t.forEach(t),F_r=i(Ma),m(Q0.$$.fragment,Ma),Ma.forEach(t),oi.forEach(t),pRe=i(c),qc=n(c,"H2",{class:!0});var APe=s(qc);iT=n(APe,"A",{id:!0,class:!0,href:!0});var U_t=s(iT);que=n(U_t,"SPAN",{});var J_t=s(que);m(H0.$$.fragment,J_t),J_t.forEach(t),U_t.forEach(t),C_r=i(APe),Gue=n(APe,"SPAN",{});var Y_t=s(Gue);M_r=r(Y_t,"TFAutoModelForTokenClassification"),Y_t.forEach(t),APe.forEach(t),_Re=i(c),Lr=n(c,"DIV",{class:!0});var ti=s(Lr);m(U0.$$.fragment,ti),E_r=i(ti),Gc=n(ti,"P",{});var rQ=s(Gc);y_r=r(rQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),Oue=n(rQ,"CODE",{});var K_t=s(Oue);w_r=r(K_t,"from_pretrained()"),K_t.forEach(t),A_r=r(rQ,"class method or the "),Xue=n(rQ,"CODE",{});var Z_t=s(Xue);L_r=r(Z_t,"from_config()"),Z_t.forEach(t),B_r=r(rQ,`class
method.`),rQ.forEach(t),x_r=i(ti),J0=n(ti,"P",{});var LPe=s(J0);k_r=r(LPe,"This class cannot be instantiated directly using "),Vue=n(LPe,"CODE",{});var eut=s(Vue);R_r=r(eut,"__init__()"),eut.forEach(t),S_r=r(LPe," (throws an error)."),LPe.forEach(t),P_r=i(ti),Ct=n(ti,"DIV",{class:!0});var ai=s(Ct);m(Y0.$$.fragment,ai),$_r=i(ai),zue=n(ai,"P",{});var out=s(zue);I_r=r(out,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),out.forEach(t),N_r=i(ai),Oc=n(ai,"P",{});var tQ=s(Oc);j_r=r(tQ,`Note:
Loading a model from its configuration file does `),Wue=n(tQ,"STRONG",{});var rut=s(Wue);D_r=r(rut,"not"),rut.forEach(t),q_r=r(tQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Que=n(tQ,"CODE",{});var tut=s(Que);G_r=r(tut,"from_pretrained()"),tut.forEach(t),O_r=r(tQ,"to load the model weights."),tQ.forEach(t),X_r=i(ai),Hue=n(ai,"P",{});var aut=s(Hue);V_r=r(aut,"Examples:"),aut.forEach(t),z_r=i(ai),m(K0.$$.fragment,ai),ai.forEach(t),W_r=i(ti),Mo=n(ti,"DIV",{class:!0});var Ea=s(Mo);m(Z0.$$.fragment,Ea),Q_r=i(Ea),Uue=n(Ea,"P",{});var nut=s(Uue);H_r=r(nut,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),nut.forEach(t),U_r=i(Ea),yn=n(Ea,"P",{});var GM=s(yn);J_r=r(GM,"The model class to instantiate is selected based on the "),Jue=n(GM,"CODE",{});var sut=s(Jue);Y_r=r(sut,"model_type"),sut.forEach(t),K_r=r(GM,` property of the config object (either
passed as an argument or loaded from `),Yue=n(GM,"CODE",{});var lut=s(Yue);Z_r=r(lut,"pretrained_model_name_or_path"),lut.forEach(t),eur=r(GM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Kue=n(GM,"CODE",{});var iut=s(Kue);our=r(iut,"pretrained_model_name_or_path"),iut.forEach(t),rur=r(GM,":"),GM.forEach(t),tur=i(Ea),K=n(Ea,"UL",{});var oe=s(K);dT=n(oe,"LI",{});var m9e=s(dT);Zue=n(m9e,"STRONG",{});var dut=s(Zue);aur=r(dut,"albert"),dut.forEach(t),nur=r(m9e," \u2014 "),iX=n(m9e,"A",{href:!0});var cut=s(iX);sur=r(cut,"TFAlbertForTokenClassification"),cut.forEach(t),lur=r(m9e," (ALBERT model)"),m9e.forEach(t),iur=i(oe),cT=n(oe,"LI",{});var g9e=s(cT);e1e=n(g9e,"STRONG",{});var fut=s(e1e);dur=r(fut,"bert"),fut.forEach(t),cur=r(g9e," \u2014 "),dX=n(g9e,"A",{href:!0});var mut=s(dX);fur=r(mut,"TFBertForTokenClassification"),mut.forEach(t),mur=r(g9e," (BERT model)"),g9e.forEach(t),gur=i(oe),fT=n(oe,"LI",{});var h9e=s(fT);o1e=n(h9e,"STRONG",{});var gut=s(o1e);hur=r(gut,"camembert"),gut.forEach(t),pur=r(h9e," \u2014 "),cX=n(h9e,"A",{href:!0});var hut=s(cX);_ur=r(hut,"TFCamembertForTokenClassification"),hut.forEach(t),uur=r(h9e," (CamemBERT model)"),h9e.forEach(t),bur=i(oe),mT=n(oe,"LI",{});var p9e=s(mT);r1e=n(p9e,"STRONG",{});var put=s(r1e);vur=r(put,"convbert"),put.forEach(t),Tur=r(p9e," \u2014 "),fX=n(p9e,"A",{href:!0});var _ut=s(fX);Fur=r(_ut,"TFConvBertForTokenClassification"),_ut.forEach(t),Cur=r(p9e," (ConvBERT model)"),p9e.forEach(t),Mur=i(oe),gT=n(oe,"LI",{});var _9e=s(gT);t1e=n(_9e,"STRONG",{});var uut=s(t1e);Eur=r(uut,"deberta"),uut.forEach(t),yur=r(_9e," \u2014 "),mX=n(_9e,"A",{href:!0});var but=s(mX);wur=r(but,"TFDebertaForTokenClassification"),but.forEach(t),Aur=r(_9e," (DeBERTa model)"),_9e.forEach(t),Lur=i(oe),hT=n(oe,"LI",{});var u9e=s(hT);a1e=n(u9e,"STRONG",{});var vut=s(a1e);Bur=r(vut,"deberta-v2"),vut.forEach(t),xur=r(u9e," \u2014 "),gX=n(u9e,"A",{href:!0});var Tut=s(gX);kur=r(Tut,"TFDebertaV2ForTokenClassification"),Tut.forEach(t),Rur=r(u9e," (DeBERTa-v2 model)"),u9e.forEach(t),Sur=i(oe),pT=n(oe,"LI",{});var b9e=s(pT);n1e=n(b9e,"STRONG",{});var Fut=s(n1e);Pur=r(Fut,"distilbert"),Fut.forEach(t),$ur=r(b9e," \u2014 "),hX=n(b9e,"A",{href:!0});var Cut=s(hX);Iur=r(Cut,"TFDistilBertForTokenClassification"),Cut.forEach(t),Nur=r(b9e," (DistilBERT model)"),b9e.forEach(t),jur=i(oe),_T=n(oe,"LI",{});var v9e=s(_T);s1e=n(v9e,"STRONG",{});var Mut=s(s1e);Dur=r(Mut,"electra"),Mut.forEach(t),qur=r(v9e," \u2014 "),pX=n(v9e,"A",{href:!0});var Eut=s(pX);Gur=r(Eut,"TFElectraForTokenClassification"),Eut.forEach(t),Our=r(v9e," (ELECTRA model)"),v9e.forEach(t),Xur=i(oe),uT=n(oe,"LI",{});var T9e=s(uT);l1e=n(T9e,"STRONG",{});var yut=s(l1e);Vur=r(yut,"flaubert"),yut.forEach(t),zur=r(T9e," \u2014 "),_X=n(T9e,"A",{href:!0});var wut=s(_X);Wur=r(wut,"TFFlaubertForTokenClassification"),wut.forEach(t),Qur=r(T9e," (FlauBERT model)"),T9e.forEach(t),Hur=i(oe),bT=n(oe,"LI",{});var F9e=s(bT);i1e=n(F9e,"STRONG",{});var Aut=s(i1e);Uur=r(Aut,"funnel"),Aut.forEach(t),Jur=r(F9e," \u2014 "),uX=n(F9e,"A",{href:!0});var Lut=s(uX);Yur=r(Lut,"TFFunnelForTokenClassification"),Lut.forEach(t),Kur=r(F9e," (Funnel Transformer model)"),F9e.forEach(t),Zur=i(oe),vT=n(oe,"LI",{});var C9e=s(vT);d1e=n(C9e,"STRONG",{});var But=s(d1e);e1r=r(But,"layoutlm"),But.forEach(t),o1r=r(C9e," \u2014 "),bX=n(C9e,"A",{href:!0});var xut=s(bX);r1r=r(xut,"TFLayoutLMForTokenClassification"),xut.forEach(t),t1r=r(C9e," (LayoutLM model)"),C9e.forEach(t),a1r=i(oe),TT=n(oe,"LI",{});var M9e=s(TT);c1e=n(M9e,"STRONG",{});var kut=s(c1e);n1r=r(kut,"longformer"),kut.forEach(t),s1r=r(M9e," \u2014 "),vX=n(M9e,"A",{href:!0});var Rut=s(vX);l1r=r(Rut,"TFLongformerForTokenClassification"),Rut.forEach(t),i1r=r(M9e," (Longformer model)"),M9e.forEach(t),d1r=i(oe),FT=n(oe,"LI",{});var E9e=s(FT);f1e=n(E9e,"STRONG",{});var Sut=s(f1e);c1r=r(Sut,"mobilebert"),Sut.forEach(t),f1r=r(E9e," \u2014 "),TX=n(E9e,"A",{href:!0});var Put=s(TX);m1r=r(Put,"TFMobileBertForTokenClassification"),Put.forEach(t),g1r=r(E9e," (MobileBERT model)"),E9e.forEach(t),h1r=i(oe),CT=n(oe,"LI",{});var y9e=s(CT);m1e=n(y9e,"STRONG",{});var $ut=s(m1e);p1r=r($ut,"mpnet"),$ut.forEach(t),_1r=r(y9e," \u2014 "),FX=n(y9e,"A",{href:!0});var Iut=s(FX);u1r=r(Iut,"TFMPNetForTokenClassification"),Iut.forEach(t),b1r=r(y9e," (MPNet model)"),y9e.forEach(t),v1r=i(oe),MT=n(oe,"LI",{});var w9e=s(MT);g1e=n(w9e,"STRONG",{});var Nut=s(g1e);T1r=r(Nut,"rembert"),Nut.forEach(t),F1r=r(w9e," \u2014 "),CX=n(w9e,"A",{href:!0});var jut=s(CX);C1r=r(jut,"TFRemBertForTokenClassification"),jut.forEach(t),M1r=r(w9e," (RemBERT model)"),w9e.forEach(t),E1r=i(oe),ET=n(oe,"LI",{});var A9e=s(ET);h1e=n(A9e,"STRONG",{});var Dut=s(h1e);y1r=r(Dut,"roberta"),Dut.forEach(t),w1r=r(A9e," \u2014 "),MX=n(A9e,"A",{href:!0});var qut=s(MX);A1r=r(qut,"TFRobertaForTokenClassification"),qut.forEach(t),L1r=r(A9e," (RoBERTa model)"),A9e.forEach(t),B1r=i(oe),yT=n(oe,"LI",{});var L9e=s(yT);p1e=n(L9e,"STRONG",{});var Gut=s(p1e);x1r=r(Gut,"roformer"),Gut.forEach(t),k1r=r(L9e," \u2014 "),EX=n(L9e,"A",{href:!0});var Out=s(EX);R1r=r(Out,"TFRoFormerForTokenClassification"),Out.forEach(t),S1r=r(L9e," (RoFormer model)"),L9e.forEach(t),P1r=i(oe),wT=n(oe,"LI",{});var B9e=s(wT);_1e=n(B9e,"STRONG",{});var Xut=s(_1e);$1r=r(Xut,"xlm"),Xut.forEach(t),I1r=r(B9e," \u2014 "),yX=n(B9e,"A",{href:!0});var Vut=s(yX);N1r=r(Vut,"TFXLMForTokenClassification"),Vut.forEach(t),j1r=r(B9e," (XLM model)"),B9e.forEach(t),D1r=i(oe),AT=n(oe,"LI",{});var x9e=s(AT);u1e=n(x9e,"STRONG",{});var zut=s(u1e);q1r=r(zut,"xlm-roberta"),zut.forEach(t),G1r=r(x9e," \u2014 "),wX=n(x9e,"A",{href:!0});var Wut=s(wX);O1r=r(Wut,"TFXLMRobertaForTokenClassification"),Wut.forEach(t),X1r=r(x9e," (XLM-RoBERTa model)"),x9e.forEach(t),V1r=i(oe),LT=n(oe,"LI",{});var k9e=s(LT);b1e=n(k9e,"STRONG",{});var Qut=s(b1e);z1r=r(Qut,"xlnet"),Qut.forEach(t),W1r=r(k9e," \u2014 "),AX=n(k9e,"A",{href:!0});var Hut=s(AX);Q1r=r(Hut,"TFXLNetForTokenClassification"),Hut.forEach(t),H1r=r(k9e," (XLNet model)"),k9e.forEach(t),oe.forEach(t),U1r=i(Ea),v1e=n(Ea,"P",{});var Uut=s(v1e);J1r=r(Uut,"Examples:"),Uut.forEach(t),Y1r=i(Ea),m(eL.$$.fragment,Ea),Ea.forEach(t),ti.forEach(t),uRe=i(c),Xc=n(c,"H2",{class:!0});var BPe=s(Xc);BT=n(BPe,"A",{id:!0,class:!0,href:!0});var Jut=s(BT);T1e=n(Jut,"SPAN",{});var Yut=s(T1e);m(oL.$$.fragment,Yut),Yut.forEach(t),Jut.forEach(t),K1r=i(BPe),F1e=n(BPe,"SPAN",{});var Kut=s(F1e);Z1r=r(Kut,"TFAutoModelForQuestionAnswering"),Kut.forEach(t),BPe.forEach(t),bRe=i(c),Br=n(c,"DIV",{class:!0});var ni=s(Br);m(rL.$$.fragment,ni),e4r=i(ni),Vc=n(ni,"P",{});var aQ=s(Vc);o4r=r(aQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),C1e=n(aQ,"CODE",{});var Zut=s(C1e);r4r=r(Zut,"from_pretrained()"),Zut.forEach(t),t4r=r(aQ,"class method or the "),M1e=n(aQ,"CODE",{});var e1t=s(M1e);a4r=r(e1t,"from_config()"),e1t.forEach(t),n4r=r(aQ,`class
method.`),aQ.forEach(t),s4r=i(ni),tL=n(ni,"P",{});var xPe=s(tL);l4r=r(xPe,"This class cannot be instantiated directly using "),E1e=n(xPe,"CODE",{});var o1t=s(E1e);i4r=r(o1t,"__init__()"),o1t.forEach(t),d4r=r(xPe," (throws an error)."),xPe.forEach(t),c4r=i(ni),Mt=n(ni,"DIV",{class:!0});var si=s(Mt);m(aL.$$.fragment,si),f4r=i(si),y1e=n(si,"P",{});var r1t=s(y1e);m4r=r(r1t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),r1t.forEach(t),g4r=i(si),zc=n(si,"P",{});var nQ=s(zc);h4r=r(nQ,`Note:
Loading a model from its configuration file does `),w1e=n(nQ,"STRONG",{});var t1t=s(w1e);p4r=r(t1t,"not"),t1t.forEach(t),_4r=r(nQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),A1e=n(nQ,"CODE",{});var a1t=s(A1e);u4r=r(a1t,"from_pretrained()"),a1t.forEach(t),b4r=r(nQ,"to load the model weights."),nQ.forEach(t),v4r=i(si),L1e=n(si,"P",{});var n1t=s(L1e);T4r=r(n1t,"Examples:"),n1t.forEach(t),F4r=i(si),m(nL.$$.fragment,si),si.forEach(t),C4r=i(ni),Eo=n(ni,"DIV",{class:!0});var ya=s(Eo);m(sL.$$.fragment,ya),M4r=i(ya),B1e=n(ya,"P",{});var s1t=s(B1e);E4r=r(s1t,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),s1t.forEach(t),y4r=i(ya),wn=n(ya,"P",{});var OM=s(wn);w4r=r(OM,"The model class to instantiate is selected based on the "),x1e=n(OM,"CODE",{});var l1t=s(x1e);A4r=r(l1t,"model_type"),l1t.forEach(t),L4r=r(OM,` property of the config object (either
passed as an argument or loaded from `),k1e=n(OM,"CODE",{});var i1t=s(k1e);B4r=r(i1t,"pretrained_model_name_or_path"),i1t.forEach(t),x4r=r(OM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),R1e=n(OM,"CODE",{});var d1t=s(R1e);k4r=r(d1t,"pretrained_model_name_or_path"),d1t.forEach(t),R4r=r(OM,":"),OM.forEach(t),S4r=i(ya),Z=n(ya,"UL",{});var te=s(Z);xT=n(te,"LI",{});var R9e=s(xT);S1e=n(R9e,"STRONG",{});var c1t=s(S1e);P4r=r(c1t,"albert"),c1t.forEach(t),$4r=r(R9e," \u2014 "),LX=n(R9e,"A",{href:!0});var f1t=s(LX);I4r=r(f1t,"TFAlbertForQuestionAnswering"),f1t.forEach(t),N4r=r(R9e," (ALBERT model)"),R9e.forEach(t),j4r=i(te),kT=n(te,"LI",{});var S9e=s(kT);P1e=n(S9e,"STRONG",{});var m1t=s(P1e);D4r=r(m1t,"bert"),m1t.forEach(t),q4r=r(S9e," \u2014 "),BX=n(S9e,"A",{href:!0});var g1t=s(BX);G4r=r(g1t,"TFBertForQuestionAnswering"),g1t.forEach(t),O4r=r(S9e," (BERT model)"),S9e.forEach(t),X4r=i(te),RT=n(te,"LI",{});var P9e=s(RT);$1e=n(P9e,"STRONG",{});var h1t=s($1e);V4r=r(h1t,"camembert"),h1t.forEach(t),z4r=r(P9e," \u2014 "),xX=n(P9e,"A",{href:!0});var p1t=s(xX);W4r=r(p1t,"TFCamembertForQuestionAnswering"),p1t.forEach(t),Q4r=r(P9e," (CamemBERT model)"),P9e.forEach(t),H4r=i(te),ST=n(te,"LI",{});var $9e=s(ST);I1e=n($9e,"STRONG",{});var _1t=s(I1e);U4r=r(_1t,"convbert"),_1t.forEach(t),J4r=r($9e," \u2014 "),kX=n($9e,"A",{href:!0});var u1t=s(kX);Y4r=r(u1t,"TFConvBertForQuestionAnswering"),u1t.forEach(t),K4r=r($9e," (ConvBERT model)"),$9e.forEach(t),Z4r=i(te),PT=n(te,"LI",{});var I9e=s(PT);N1e=n(I9e,"STRONG",{});var b1t=s(N1e);ebr=r(b1t,"deberta"),b1t.forEach(t),obr=r(I9e," \u2014 "),RX=n(I9e,"A",{href:!0});var v1t=s(RX);rbr=r(v1t,"TFDebertaForQuestionAnswering"),v1t.forEach(t),tbr=r(I9e," (DeBERTa model)"),I9e.forEach(t),abr=i(te),$T=n(te,"LI",{});var N9e=s($T);j1e=n(N9e,"STRONG",{});var T1t=s(j1e);nbr=r(T1t,"deberta-v2"),T1t.forEach(t),sbr=r(N9e," \u2014 "),SX=n(N9e,"A",{href:!0});var F1t=s(SX);lbr=r(F1t,"TFDebertaV2ForQuestionAnswering"),F1t.forEach(t),ibr=r(N9e," (DeBERTa-v2 model)"),N9e.forEach(t),dbr=i(te),IT=n(te,"LI",{});var j9e=s(IT);D1e=n(j9e,"STRONG",{});var C1t=s(D1e);cbr=r(C1t,"distilbert"),C1t.forEach(t),fbr=r(j9e," \u2014 "),PX=n(j9e,"A",{href:!0});var M1t=s(PX);mbr=r(M1t,"TFDistilBertForQuestionAnswering"),M1t.forEach(t),gbr=r(j9e," (DistilBERT model)"),j9e.forEach(t),hbr=i(te),NT=n(te,"LI",{});var D9e=s(NT);q1e=n(D9e,"STRONG",{});var E1t=s(q1e);pbr=r(E1t,"electra"),E1t.forEach(t),_br=r(D9e," \u2014 "),$X=n(D9e,"A",{href:!0});var y1t=s($X);ubr=r(y1t,"TFElectraForQuestionAnswering"),y1t.forEach(t),bbr=r(D9e," (ELECTRA model)"),D9e.forEach(t),vbr=i(te),jT=n(te,"LI",{});var q9e=s(jT);G1e=n(q9e,"STRONG",{});var w1t=s(G1e);Tbr=r(w1t,"flaubert"),w1t.forEach(t),Fbr=r(q9e," \u2014 "),IX=n(q9e,"A",{href:!0});var A1t=s(IX);Cbr=r(A1t,"TFFlaubertForQuestionAnsweringSimple"),A1t.forEach(t),Mbr=r(q9e," (FlauBERT model)"),q9e.forEach(t),Ebr=i(te),DT=n(te,"LI",{});var G9e=s(DT);O1e=n(G9e,"STRONG",{});var L1t=s(O1e);ybr=r(L1t,"funnel"),L1t.forEach(t),wbr=r(G9e," \u2014 "),NX=n(G9e,"A",{href:!0});var B1t=s(NX);Abr=r(B1t,"TFFunnelForQuestionAnswering"),B1t.forEach(t),Lbr=r(G9e," (Funnel Transformer model)"),G9e.forEach(t),Bbr=i(te),qT=n(te,"LI",{});var O9e=s(qT);X1e=n(O9e,"STRONG",{});var x1t=s(X1e);xbr=r(x1t,"longformer"),x1t.forEach(t),kbr=r(O9e," \u2014 "),jX=n(O9e,"A",{href:!0});var k1t=s(jX);Rbr=r(k1t,"TFLongformerForQuestionAnswering"),k1t.forEach(t),Sbr=r(O9e," (Longformer model)"),O9e.forEach(t),Pbr=i(te),GT=n(te,"LI",{});var X9e=s(GT);V1e=n(X9e,"STRONG",{});var R1t=s(V1e);$br=r(R1t,"mobilebert"),R1t.forEach(t),Ibr=r(X9e," \u2014 "),DX=n(X9e,"A",{href:!0});var S1t=s(DX);Nbr=r(S1t,"TFMobileBertForQuestionAnswering"),S1t.forEach(t),jbr=r(X9e," (MobileBERT model)"),X9e.forEach(t),Dbr=i(te),OT=n(te,"LI",{});var V9e=s(OT);z1e=n(V9e,"STRONG",{});var P1t=s(z1e);qbr=r(P1t,"mpnet"),P1t.forEach(t),Gbr=r(V9e," \u2014 "),qX=n(V9e,"A",{href:!0});var $1t=s(qX);Obr=r($1t,"TFMPNetForQuestionAnswering"),$1t.forEach(t),Xbr=r(V9e," (MPNet model)"),V9e.forEach(t),Vbr=i(te),XT=n(te,"LI",{});var z9e=s(XT);W1e=n(z9e,"STRONG",{});var I1t=s(W1e);zbr=r(I1t,"rembert"),I1t.forEach(t),Wbr=r(z9e," \u2014 "),GX=n(z9e,"A",{href:!0});var N1t=s(GX);Qbr=r(N1t,"TFRemBertForQuestionAnswering"),N1t.forEach(t),Hbr=r(z9e," (RemBERT model)"),z9e.forEach(t),Ubr=i(te),VT=n(te,"LI",{});var W9e=s(VT);Q1e=n(W9e,"STRONG",{});var j1t=s(Q1e);Jbr=r(j1t,"roberta"),j1t.forEach(t),Ybr=r(W9e," \u2014 "),OX=n(W9e,"A",{href:!0});var D1t=s(OX);Kbr=r(D1t,"TFRobertaForQuestionAnswering"),D1t.forEach(t),Zbr=r(W9e," (RoBERTa model)"),W9e.forEach(t),e3r=i(te),zT=n(te,"LI",{});var Q9e=s(zT);H1e=n(Q9e,"STRONG",{});var q1t=s(H1e);o3r=r(q1t,"roformer"),q1t.forEach(t),r3r=r(Q9e," \u2014 "),XX=n(Q9e,"A",{href:!0});var G1t=s(XX);t3r=r(G1t,"TFRoFormerForQuestionAnswering"),G1t.forEach(t),a3r=r(Q9e," (RoFormer model)"),Q9e.forEach(t),n3r=i(te),WT=n(te,"LI",{});var H9e=s(WT);U1e=n(H9e,"STRONG",{});var O1t=s(U1e);s3r=r(O1t,"xlm"),O1t.forEach(t),l3r=r(H9e," \u2014 "),VX=n(H9e,"A",{href:!0});var X1t=s(VX);i3r=r(X1t,"TFXLMForQuestionAnsweringSimple"),X1t.forEach(t),d3r=r(H9e," (XLM model)"),H9e.forEach(t),c3r=i(te),QT=n(te,"LI",{});var U9e=s(QT);J1e=n(U9e,"STRONG",{});var V1t=s(J1e);f3r=r(V1t,"xlm-roberta"),V1t.forEach(t),m3r=r(U9e," \u2014 "),zX=n(U9e,"A",{href:!0});var z1t=s(zX);g3r=r(z1t,"TFXLMRobertaForQuestionAnswering"),z1t.forEach(t),h3r=r(U9e," (XLM-RoBERTa model)"),U9e.forEach(t),p3r=i(te),HT=n(te,"LI",{});var J9e=s(HT);Y1e=n(J9e,"STRONG",{});var W1t=s(Y1e);_3r=r(W1t,"xlnet"),W1t.forEach(t),u3r=r(J9e," \u2014 "),WX=n(J9e,"A",{href:!0});var Q1t=s(WX);b3r=r(Q1t,"TFXLNetForQuestionAnsweringSimple"),Q1t.forEach(t),v3r=r(J9e," (XLNet model)"),J9e.forEach(t),te.forEach(t),T3r=i(ya),K1e=n(ya,"P",{});var H1t=s(K1e);F3r=r(H1t,"Examples:"),H1t.forEach(t),C3r=i(ya),m(lL.$$.fragment,ya),ya.forEach(t),ni.forEach(t),vRe=i(c),Wc=n(c,"H2",{class:!0});var kPe=s(Wc);UT=n(kPe,"A",{id:!0,class:!0,href:!0});var U1t=s(UT);Z1e=n(U1t,"SPAN",{});var J1t=s(Z1e);m(iL.$$.fragment,J1t),J1t.forEach(t),U1t.forEach(t),M3r=i(kPe),e4e=n(kPe,"SPAN",{});var Y1t=s(e4e);E3r=r(Y1t,"TFAutoModelForVision2Seq"),Y1t.forEach(t),kPe.forEach(t),TRe=i(c),xr=n(c,"DIV",{class:!0});var li=s(xr);m(dL.$$.fragment,li),y3r=i(li),Qc=n(li,"P",{});var sQ=s(Qc);w3r=r(sQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),o4e=n(sQ,"CODE",{});var K1t=s(o4e);A3r=r(K1t,"from_pretrained()"),K1t.forEach(t),L3r=r(sQ,"class method or the "),r4e=n(sQ,"CODE",{});var Z1t=s(r4e);B3r=r(Z1t,"from_config()"),Z1t.forEach(t),x3r=r(sQ,`class
method.`),sQ.forEach(t),k3r=i(li),cL=n(li,"P",{});var RPe=s(cL);R3r=r(RPe,"This class cannot be instantiated directly using "),t4e=n(RPe,"CODE",{});var e4t=s(t4e);S3r=r(e4t,"__init__()"),e4t.forEach(t),P3r=r(RPe," (throws an error)."),RPe.forEach(t),$3r=i(li),Et=n(li,"DIV",{class:!0});var ii=s(Et);m(fL.$$.fragment,ii),I3r=i(ii),a4e=n(ii,"P",{});var o4t=s(a4e);N3r=r(o4t,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),o4t.forEach(t),j3r=i(ii),Hc=n(ii,"P",{});var lQ=s(Hc);D3r=r(lQ,`Note:
Loading a model from its configuration file does `),n4e=n(lQ,"STRONG",{});var r4t=s(n4e);q3r=r(r4t,"not"),r4t.forEach(t),G3r=r(lQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),s4e=n(lQ,"CODE",{});var t4t=s(s4e);O3r=r(t4t,"from_pretrained()"),t4t.forEach(t),X3r=r(lQ,"to load the model weights."),lQ.forEach(t),V3r=i(ii),l4e=n(ii,"P",{});var a4t=s(l4e);z3r=r(a4t,"Examples:"),a4t.forEach(t),W3r=i(ii),m(mL.$$.fragment,ii),ii.forEach(t),Q3r=i(li),yo=n(li,"DIV",{class:!0});var wa=s(yo);m(gL.$$.fragment,wa),H3r=i(wa),i4e=n(wa,"P",{});var n4t=s(i4e);U3r=r(n4t,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),n4t.forEach(t),J3r=i(wa),An=n(wa,"P",{});var XM=s(An);Y3r=r(XM,"The model class to instantiate is selected based on the "),d4e=n(XM,"CODE",{});var s4t=s(d4e);K3r=r(s4t,"model_type"),s4t.forEach(t),Z3r=r(XM,` property of the config object (either
passed as an argument or loaded from `),c4e=n(XM,"CODE",{});var l4t=s(c4e);e5r=r(l4t,"pretrained_model_name_or_path"),l4t.forEach(t),o5r=r(XM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),f4e=n(XM,"CODE",{});var i4t=s(f4e);r5r=r(i4t,"pretrained_model_name_or_path"),i4t.forEach(t),t5r=r(XM,":"),XM.forEach(t),a5r=i(wa),m4e=n(wa,"UL",{});var d4t=s(m4e);JT=n(d4t,"LI",{});var Y9e=s(JT);g4e=n(Y9e,"STRONG",{});var c4t=s(g4e);n5r=r(c4t,"vision-encoder-decoder"),c4t.forEach(t),s5r=r(Y9e," \u2014 "),QX=n(Y9e,"A",{href:!0});var f4t=s(QX);l5r=r(f4t,"TFVisionEncoderDecoderModel"),f4t.forEach(t),i5r=r(Y9e," (Vision Encoder decoder model)"),Y9e.forEach(t),d4t.forEach(t),d5r=i(wa),h4e=n(wa,"P",{});var m4t=s(h4e);c5r=r(m4t,"Examples:"),m4t.forEach(t),f5r=i(wa),m(hL.$$.fragment,wa),wa.forEach(t),li.forEach(t),FRe=i(c),Uc=n(c,"H2",{class:!0});var SPe=s(Uc);YT=n(SPe,"A",{id:!0,class:!0,href:!0});var g4t=s(YT);p4e=n(g4t,"SPAN",{});var h4t=s(p4e);m(pL.$$.fragment,h4t),h4t.forEach(t),g4t.forEach(t),m5r=i(SPe),_4e=n(SPe,"SPAN",{});var p4t=s(_4e);g5r=r(p4t,"TFAutoModelForSpeechSeq2Seq"),p4t.forEach(t),SPe.forEach(t),CRe=i(c),kr=n(c,"DIV",{class:!0});var di=s(kr);m(_L.$$.fragment,di),h5r=i(di),Jc=n(di,"P",{});var iQ=s(Jc);p5r=r(iQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) when created
with the `),u4e=n(iQ,"CODE",{});var _4t=s(u4e);_5r=r(_4t,"from_pretrained()"),_4t.forEach(t),u5r=r(iQ,"class method or the "),b4e=n(iQ,"CODE",{});var u4t=s(b4e);b5r=r(u4t,"from_config()"),u4t.forEach(t),v5r=r(iQ,`class
method.`),iQ.forEach(t),T5r=i(di),uL=n(di,"P",{});var PPe=s(uL);F5r=r(PPe,"This class cannot be instantiated directly using "),v4e=n(PPe,"CODE",{});var b4t=s(v4e);C5r=r(b4t,"__init__()"),b4t.forEach(t),M5r=r(PPe," (throws an error)."),PPe.forEach(t),E5r=i(di),yt=n(di,"DIV",{class:!0});var ci=s(yt);m(bL.$$.fragment,ci),y5r=i(ci),T4e=n(ci,"P",{});var v4t=s(T4e);w5r=r(v4t,"Instantiates one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a configuration."),v4t.forEach(t),A5r=i(ci),Yc=n(ci,"P",{});var dQ=s(Yc);L5r=r(dQ,`Note:
Loading a model from its configuration file does `),F4e=n(dQ,"STRONG",{});var T4t=s(F4e);B5r=r(T4t,"not"),T4t.forEach(t),x5r=r(dQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),C4e=n(dQ,"CODE",{});var F4t=s(C4e);k5r=r(F4t,"from_pretrained()"),F4t.forEach(t),R5r=r(dQ,"to load the model weights."),dQ.forEach(t),S5r=i(ci),M4e=n(ci,"P",{});var C4t=s(M4e);P5r=r(C4t,"Examples:"),C4t.forEach(t),$5r=i(ci),m(vL.$$.fragment,ci),ci.forEach(t),I5r=i(di),wo=n(di,"DIV",{class:!0});var Aa=s(wo);m(TL.$$.fragment,Aa),N5r=i(Aa),E4e=n(Aa,"P",{});var M4t=s(E4e);j5r=r(M4t,"Instantiate one of the model classes of the library (with a sequence-to-sequence speech-to-text modeling head) from a pretrained model."),M4t.forEach(t),D5r=i(Aa),Ln=n(Aa,"P",{});var VM=s(Ln);q5r=r(VM,"The model class to instantiate is selected based on the "),y4e=n(VM,"CODE",{});var E4t=s(y4e);G5r=r(E4t,"model_type"),E4t.forEach(t),O5r=r(VM,` property of the config object (either
passed as an argument or loaded from `),w4e=n(VM,"CODE",{});var y4t=s(w4e);X5r=r(y4t,"pretrained_model_name_or_path"),y4t.forEach(t),V5r=r(VM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),A4e=n(VM,"CODE",{});var w4t=s(A4e);z5r=r(w4t,"pretrained_model_name_or_path"),w4t.forEach(t),W5r=r(VM,":"),VM.forEach(t),Q5r=i(Aa),L4e=n(Aa,"UL",{});var A4t=s(L4e);KT=n(A4t,"LI",{});var K9e=s(KT);B4e=n(K9e,"STRONG",{});var L4t=s(B4e);H5r=r(L4t,"speech_to_text"),L4t.forEach(t),U5r=r(K9e," \u2014 "),HX=n(K9e,"A",{href:!0});var B4t=s(HX);J5r=r(B4t,"TFSpeech2TextForConditionalGeneration"),B4t.forEach(t),Y5r=r(K9e," (Speech2Text model)"),K9e.forEach(t),A4t.forEach(t),K5r=i(Aa),x4e=n(Aa,"P",{});var x4t=s(x4e);Z5r=r(x4t,"Examples:"),x4t.forEach(t),e2r=i(Aa),m(FL.$$.fragment,Aa),Aa.forEach(t),di.forEach(t),MRe=i(c),Kc=n(c,"H2",{class:!0});var $Pe=s(Kc);ZT=n($Pe,"A",{id:!0,class:!0,href:!0});var k4t=s(ZT);k4e=n(k4t,"SPAN",{});var R4t=s(k4e);m(CL.$$.fragment,R4t),R4t.forEach(t),k4t.forEach(t),o2r=i($Pe),R4e=n($Pe,"SPAN",{});var S4t=s(R4e);r2r=r(S4t,"FlaxAutoModel"),S4t.forEach(t),$Pe.forEach(t),ERe=i(c),Rr=n(c,"DIV",{class:!0});var fi=s(Rr);m(ML.$$.fragment,fi),t2r=i(fi),Zc=n(fi,"P",{});var cQ=s(Zc);a2r=r(cQ,`This is a generic model class that will be instantiated as one of the base model classes of the library when created
with the `),S4e=n(cQ,"CODE",{});var P4t=s(S4e);n2r=r(P4t,"from_pretrained()"),P4t.forEach(t),s2r=r(cQ,"class method or the "),P4e=n(cQ,"CODE",{});var $4t=s(P4e);l2r=r($4t,"from_config()"),$4t.forEach(t),i2r=r(cQ,`class
method.`),cQ.forEach(t),d2r=i(fi),EL=n(fi,"P",{});var IPe=s(EL);c2r=r(IPe,"This class cannot be instantiated directly using "),$4e=n(IPe,"CODE",{});var I4t=s($4e);f2r=r(I4t,"__init__()"),I4t.forEach(t),m2r=r(IPe," (throws an error)."),IPe.forEach(t),g2r=i(fi),wt=n(fi,"DIV",{class:!0});var mi=s(wt);m(yL.$$.fragment,mi),h2r=i(mi),I4e=n(mi,"P",{});var N4t=s(I4e);p2r=r(N4t,"Instantiates one of the base model classes of the library from a configuration."),N4t.forEach(t),_2r=i(mi),ef=n(mi,"P",{});var fQ=s(ef);u2r=r(fQ,`Note:
Loading a model from its configuration file does `),N4e=n(fQ,"STRONG",{});var j4t=s(N4e);b2r=r(j4t,"not"),j4t.forEach(t),v2r=r(fQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),j4e=n(fQ,"CODE",{});var D4t=s(j4e);T2r=r(D4t,"from_pretrained()"),D4t.forEach(t),F2r=r(fQ,"to load the model weights."),fQ.forEach(t),C2r=i(mi),D4e=n(mi,"P",{});var q4t=s(D4e);M2r=r(q4t,"Examples:"),q4t.forEach(t),E2r=i(mi),m(wL.$$.fragment,mi),mi.forEach(t),y2r=i(fi),Ao=n(fi,"DIV",{class:!0});var La=s(Ao);m(AL.$$.fragment,La),w2r=i(La),q4e=n(La,"P",{});var G4t=s(q4e);A2r=r(G4t,"Instantiate one of the base model classes of the library from a pretrained model."),G4t.forEach(t),L2r=i(La),Bn=n(La,"P",{});var zM=s(Bn);B2r=r(zM,"The model class to instantiate is selected based on the "),G4e=n(zM,"CODE",{});var O4t=s(G4e);x2r=r(O4t,"model_type"),O4t.forEach(t),k2r=r(zM,` property of the config object (either
passed as an argument or loaded from `),O4e=n(zM,"CODE",{});var X4t=s(O4e);R2r=r(X4t,"pretrained_model_name_or_path"),X4t.forEach(t),S2r=r(zM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X4e=n(zM,"CODE",{});var V4t=s(X4e);P2r=r(V4t,"pretrained_model_name_or_path"),V4t.forEach(t),$2r=r(zM,":"),zM.forEach(t),I2r=i(La),z=n(La,"UL",{});var Q=s(z);eF=n(Q,"LI",{});var Z9e=s(eF);V4e=n(Z9e,"STRONG",{});var z4t=s(V4e);N2r=r(z4t,"albert"),z4t.forEach(t),j2r=r(Z9e," \u2014 "),UX=n(Z9e,"A",{href:!0});var W4t=s(UX);D2r=r(W4t,"FlaxAlbertModel"),W4t.forEach(t),q2r=r(Z9e," (ALBERT model)"),Z9e.forEach(t),G2r=i(Q),oF=n(Q,"LI",{});var eBe=s(oF);z4e=n(eBe,"STRONG",{});var Q4t=s(z4e);O2r=r(Q4t,"bart"),Q4t.forEach(t),X2r=r(eBe," \u2014 "),JX=n(eBe,"A",{href:!0});var H4t=s(JX);V2r=r(H4t,"FlaxBartModel"),H4t.forEach(t),z2r=r(eBe," (BART model)"),eBe.forEach(t),W2r=i(Q),rF=n(Q,"LI",{});var oBe=s(rF);W4e=n(oBe,"STRONG",{});var U4t=s(W4e);Q2r=r(U4t,"beit"),U4t.forEach(t),H2r=r(oBe," \u2014 "),YX=n(oBe,"A",{href:!0});var J4t=s(YX);U2r=r(J4t,"FlaxBeitModel"),J4t.forEach(t),J2r=r(oBe," (BEiT model)"),oBe.forEach(t),Y2r=i(Q),tF=n(Q,"LI",{});var rBe=s(tF);Q4e=n(rBe,"STRONG",{});var Y4t=s(Q4e);K2r=r(Y4t,"bert"),Y4t.forEach(t),Z2r=r(rBe," \u2014 "),KX=n(rBe,"A",{href:!0});var K4t=s(KX);evr=r(K4t,"FlaxBertModel"),K4t.forEach(t),ovr=r(rBe," (BERT model)"),rBe.forEach(t),rvr=i(Q),aF=n(Q,"LI",{});var tBe=s(aF);H4e=n(tBe,"STRONG",{});var Z4t=s(H4e);tvr=r(Z4t,"big_bird"),Z4t.forEach(t),avr=r(tBe," \u2014 "),ZX=n(tBe,"A",{href:!0});var ebt=s(ZX);nvr=r(ebt,"FlaxBigBirdModel"),ebt.forEach(t),svr=r(tBe," (BigBird model)"),tBe.forEach(t),lvr=i(Q),nF=n(Q,"LI",{});var aBe=s(nF);U4e=n(aBe,"STRONG",{});var obt=s(U4e);ivr=r(obt,"blenderbot"),obt.forEach(t),dvr=r(aBe," \u2014 "),eV=n(aBe,"A",{href:!0});var rbt=s(eV);cvr=r(rbt,"FlaxBlenderbotModel"),rbt.forEach(t),fvr=r(aBe," (Blenderbot model)"),aBe.forEach(t),mvr=i(Q),sF=n(Q,"LI",{});var nBe=s(sF);J4e=n(nBe,"STRONG",{});var tbt=s(J4e);gvr=r(tbt,"blenderbot-small"),tbt.forEach(t),hvr=r(nBe," \u2014 "),oV=n(nBe,"A",{href:!0});var abt=s(oV);pvr=r(abt,"FlaxBlenderbotSmallModel"),abt.forEach(t),_vr=r(nBe," (BlenderbotSmall model)"),nBe.forEach(t),uvr=i(Q),lF=n(Q,"LI",{});var sBe=s(lF);Y4e=n(sBe,"STRONG",{});var nbt=s(Y4e);bvr=r(nbt,"clip"),nbt.forEach(t),vvr=r(sBe," \u2014 "),rV=n(sBe,"A",{href:!0});var sbt=s(rV);Tvr=r(sbt,"FlaxCLIPModel"),sbt.forEach(t),Fvr=r(sBe," (CLIP model)"),sBe.forEach(t),Cvr=i(Q),iF=n(Q,"LI",{});var lBe=s(iF);K4e=n(lBe,"STRONG",{});var lbt=s(K4e);Mvr=r(lbt,"distilbert"),lbt.forEach(t),Evr=r(lBe," \u2014 "),tV=n(lBe,"A",{href:!0});var ibt=s(tV);yvr=r(ibt,"FlaxDistilBertModel"),ibt.forEach(t),wvr=r(lBe," (DistilBERT model)"),lBe.forEach(t),Avr=i(Q),dF=n(Q,"LI",{});var iBe=s(dF);Z4e=n(iBe,"STRONG",{});var dbt=s(Z4e);Lvr=r(dbt,"electra"),dbt.forEach(t),Bvr=r(iBe," \u2014 "),aV=n(iBe,"A",{href:!0});var cbt=s(aV);xvr=r(cbt,"FlaxElectraModel"),cbt.forEach(t),kvr=r(iBe," (ELECTRA model)"),iBe.forEach(t),Rvr=i(Q),cF=n(Q,"LI",{});var dBe=s(cF);ebe=n(dBe,"STRONG",{});var fbt=s(ebe);Svr=r(fbt,"gpt2"),fbt.forEach(t),Pvr=r(dBe," \u2014 "),nV=n(dBe,"A",{href:!0});var mbt=s(nV);$vr=r(mbt,"FlaxGPT2Model"),mbt.forEach(t),Ivr=r(dBe," (OpenAI GPT-2 model)"),dBe.forEach(t),Nvr=i(Q),fF=n(Q,"LI",{});var cBe=s(fF);obe=n(cBe,"STRONG",{});var gbt=s(obe);jvr=r(gbt,"gpt_neo"),gbt.forEach(t),Dvr=r(cBe," \u2014 "),sV=n(cBe,"A",{href:!0});var hbt=s(sV);qvr=r(hbt,"FlaxGPTNeoModel"),hbt.forEach(t),Gvr=r(cBe," (GPT Neo model)"),cBe.forEach(t),Ovr=i(Q),mF=n(Q,"LI",{});var fBe=s(mF);rbe=n(fBe,"STRONG",{});var pbt=s(rbe);Xvr=r(pbt,"gptj"),pbt.forEach(t),Vvr=r(fBe," \u2014 "),lV=n(fBe,"A",{href:!0});var _bt=s(lV);zvr=r(_bt,"FlaxGPTJModel"),_bt.forEach(t),Wvr=r(fBe," (GPT-J model)"),fBe.forEach(t),Qvr=i(Q),gF=n(Q,"LI",{});var mBe=s(gF);tbe=n(mBe,"STRONG",{});var ubt=s(tbe);Hvr=r(ubt,"marian"),ubt.forEach(t),Uvr=r(mBe," \u2014 "),iV=n(mBe,"A",{href:!0});var bbt=s(iV);Jvr=r(bbt,"FlaxMarianModel"),bbt.forEach(t),Yvr=r(mBe," (Marian model)"),mBe.forEach(t),Kvr=i(Q),hF=n(Q,"LI",{});var gBe=s(hF);abe=n(gBe,"STRONG",{});var vbt=s(abe);Zvr=r(vbt,"mbart"),vbt.forEach(t),e6r=r(gBe," \u2014 "),dV=n(gBe,"A",{href:!0});var Tbt=s(dV);o6r=r(Tbt,"FlaxMBartModel"),Tbt.forEach(t),r6r=r(gBe," (mBART model)"),gBe.forEach(t),t6r=i(Q),pF=n(Q,"LI",{});var hBe=s(pF);nbe=n(hBe,"STRONG",{});var Fbt=s(nbe);a6r=r(Fbt,"mt5"),Fbt.forEach(t),n6r=r(hBe," \u2014 "),cV=n(hBe,"A",{href:!0});var Cbt=s(cV);s6r=r(Cbt,"FlaxMT5Model"),Cbt.forEach(t),l6r=r(hBe," (mT5 model)"),hBe.forEach(t),i6r=i(Q),_F=n(Q,"LI",{});var pBe=s(_F);sbe=n(pBe,"STRONG",{});var Mbt=s(sbe);d6r=r(Mbt,"pegasus"),Mbt.forEach(t),c6r=r(pBe," \u2014 "),fV=n(pBe,"A",{href:!0});var Ebt=s(fV);f6r=r(Ebt,"FlaxPegasusModel"),Ebt.forEach(t),m6r=r(pBe," (Pegasus model)"),pBe.forEach(t),g6r=i(Q),uF=n(Q,"LI",{});var _Be=s(uF);lbe=n(_Be,"STRONG",{});var ybt=s(lbe);h6r=r(ybt,"roberta"),ybt.forEach(t),p6r=r(_Be," \u2014 "),mV=n(_Be,"A",{href:!0});var wbt=s(mV);_6r=r(wbt,"FlaxRobertaModel"),wbt.forEach(t),u6r=r(_Be," (RoBERTa model)"),_Be.forEach(t),b6r=i(Q),bF=n(Q,"LI",{});var uBe=s(bF);ibe=n(uBe,"STRONG",{});var Abt=s(ibe);v6r=r(Abt,"roformer"),Abt.forEach(t),T6r=r(uBe," \u2014 "),gV=n(uBe,"A",{href:!0});var Lbt=s(gV);F6r=r(Lbt,"FlaxRoFormerModel"),Lbt.forEach(t),C6r=r(uBe," (RoFormer model)"),uBe.forEach(t),M6r=i(Q),vF=n(Q,"LI",{});var bBe=s(vF);dbe=n(bBe,"STRONG",{});var Bbt=s(dbe);E6r=r(Bbt,"t5"),Bbt.forEach(t),y6r=r(bBe," \u2014 "),hV=n(bBe,"A",{href:!0});var xbt=s(hV);w6r=r(xbt,"FlaxT5Model"),xbt.forEach(t),A6r=r(bBe," (T5 model)"),bBe.forEach(t),L6r=i(Q),TF=n(Q,"LI",{});var vBe=s(TF);cbe=n(vBe,"STRONG",{});var kbt=s(cbe);B6r=r(kbt,"vision-text-dual-encoder"),kbt.forEach(t),x6r=r(vBe," \u2014 "),pV=n(vBe,"A",{href:!0});var Rbt=s(pV);k6r=r(Rbt,"FlaxVisionTextDualEncoderModel"),Rbt.forEach(t),R6r=r(vBe," (VisionTextDualEncoder model)"),vBe.forEach(t),S6r=i(Q),FF=n(Q,"LI",{});var TBe=s(FF);fbe=n(TBe,"STRONG",{});var Sbt=s(fbe);P6r=r(Sbt,"vit"),Sbt.forEach(t),$6r=r(TBe," \u2014 "),_V=n(TBe,"A",{href:!0});var Pbt=s(_V);I6r=r(Pbt,"FlaxViTModel"),Pbt.forEach(t),N6r=r(TBe," (ViT model)"),TBe.forEach(t),j6r=i(Q),CF=n(Q,"LI",{});var FBe=s(CF);mbe=n(FBe,"STRONG",{});var $bt=s(mbe);D6r=r($bt,"wav2vec2"),$bt.forEach(t),q6r=r(FBe," \u2014 "),uV=n(FBe,"A",{href:!0});var Ibt=s(uV);G6r=r(Ibt,"FlaxWav2Vec2Model"),Ibt.forEach(t),O6r=r(FBe," (Wav2Vec2 model)"),FBe.forEach(t),X6r=i(Q),MF=n(Q,"LI",{});var CBe=s(MF);gbe=n(CBe,"STRONG",{});var Nbt=s(gbe);V6r=r(Nbt,"xglm"),Nbt.forEach(t),z6r=r(CBe," \u2014 "),bV=n(CBe,"A",{href:!0});var jbt=s(bV);W6r=r(jbt,"FlaxXGLMModel"),jbt.forEach(t),Q6r=r(CBe," (XGLM model)"),CBe.forEach(t),H6r=i(Q),EF=n(Q,"LI",{});var MBe=s(EF);hbe=n(MBe,"STRONG",{});var Dbt=s(hbe);U6r=r(Dbt,"xlm-roberta"),Dbt.forEach(t),J6r=r(MBe," \u2014 "),vV=n(MBe,"A",{href:!0});var qbt=s(vV);Y6r=r(qbt,"FlaxXLMRobertaModel"),qbt.forEach(t),K6r=r(MBe," (XLM-RoBERTa model)"),MBe.forEach(t),Q.forEach(t),Z6r=i(La),pbe=n(La,"P",{});var Gbt=s(pbe);eTr=r(Gbt,"Examples:"),Gbt.forEach(t),oTr=i(La),m(LL.$$.fragment,La),La.forEach(t),fi.forEach(t),yRe=i(c),of=n(c,"H2",{class:!0});var NPe=s(of);yF=n(NPe,"A",{id:!0,class:!0,href:!0});var Obt=s(yF);_be=n(Obt,"SPAN",{});var Xbt=s(_be);m(BL.$$.fragment,Xbt),Xbt.forEach(t),Obt.forEach(t),rTr=i(NPe),ube=n(NPe,"SPAN",{});var Vbt=s(ube);tTr=r(Vbt,"FlaxAutoModelForCausalLM"),Vbt.forEach(t),NPe.forEach(t),wRe=i(c),Sr=n(c,"DIV",{class:!0});var gi=s(Sr);m(xL.$$.fragment,gi),aTr=i(gi),rf=n(gi,"P",{});var mQ=s(rf);nTr=r(mQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a causal language modeling head) when created
with the `),bbe=n(mQ,"CODE",{});var zbt=s(bbe);sTr=r(zbt,"from_pretrained()"),zbt.forEach(t),lTr=r(mQ,"class method or the "),vbe=n(mQ,"CODE",{});var Wbt=s(vbe);iTr=r(Wbt,"from_config()"),Wbt.forEach(t),dTr=r(mQ,`class
method.`),mQ.forEach(t),cTr=i(gi),kL=n(gi,"P",{});var jPe=s(kL);fTr=r(jPe,"This class cannot be instantiated directly using "),Tbe=n(jPe,"CODE",{});var Qbt=s(Tbe);mTr=r(Qbt,"__init__()"),Qbt.forEach(t),gTr=r(jPe," (throws an error)."),jPe.forEach(t),hTr=i(gi),At=n(gi,"DIV",{class:!0});var hi=s(At);m(RL.$$.fragment,hi),pTr=i(hi),Fbe=n(hi,"P",{});var Hbt=s(Fbe);_Tr=r(Hbt,"Instantiates one of the model classes of the library (with a causal language modeling head) from a configuration."),Hbt.forEach(t),uTr=i(hi),tf=n(hi,"P",{});var gQ=s(tf);bTr=r(gQ,`Note:
Loading a model from its configuration file does `),Cbe=n(gQ,"STRONG",{});var Ubt=s(Cbe);vTr=r(Ubt,"not"),Ubt.forEach(t),TTr=r(gQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mbe=n(gQ,"CODE",{});var Jbt=s(Mbe);FTr=r(Jbt,"from_pretrained()"),Jbt.forEach(t),CTr=r(gQ,"to load the model weights."),gQ.forEach(t),MTr=i(hi),Ebe=n(hi,"P",{});var Ybt=s(Ebe);ETr=r(Ybt,"Examples:"),Ybt.forEach(t),yTr=i(hi),m(SL.$$.fragment,hi),hi.forEach(t),wTr=i(gi),Lo=n(gi,"DIV",{class:!0});var Ba=s(Lo);m(PL.$$.fragment,Ba),ATr=i(Ba),ybe=n(Ba,"P",{});var Kbt=s(ybe);LTr=r(Kbt,"Instantiate one of the model classes of the library (with a causal language modeling head) from a pretrained model."),Kbt.forEach(t),BTr=i(Ba),xn=n(Ba,"P",{});var WM=s(xn);xTr=r(WM,"The model class to instantiate is selected based on the "),wbe=n(WM,"CODE",{});var Zbt=s(wbe);kTr=r(Zbt,"model_type"),Zbt.forEach(t),RTr=r(WM,` property of the config object (either
passed as an argument or loaded from `),Abe=n(WM,"CODE",{});var e3t=s(Abe);STr=r(e3t,"pretrained_model_name_or_path"),e3t.forEach(t),PTr=r(WM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lbe=n(WM,"CODE",{});var o3t=s(Lbe);$Tr=r(o3t,"pretrained_model_name_or_path"),o3t.forEach(t),ITr=r(WM,":"),WM.forEach(t),NTr=i(Ba),ca=n(Ba,"UL",{});var pi=s(ca);wF=n(pi,"LI",{});var EBe=s(wF);Bbe=n(EBe,"STRONG",{});var r3t=s(Bbe);jTr=r(r3t,"bart"),r3t.forEach(t),DTr=r(EBe," \u2014 "),TV=n(EBe,"A",{href:!0});var t3t=s(TV);qTr=r(t3t,"FlaxBartForCausalLM"),t3t.forEach(t),GTr=r(EBe," (BART model)"),EBe.forEach(t),OTr=i(pi),AF=n(pi,"LI",{});var yBe=s(AF);xbe=n(yBe,"STRONG",{});var a3t=s(xbe);XTr=r(a3t,"gpt2"),a3t.forEach(t),VTr=r(yBe," \u2014 "),FV=n(yBe,"A",{href:!0});var n3t=s(FV);zTr=r(n3t,"FlaxGPT2LMHeadModel"),n3t.forEach(t),WTr=r(yBe," (OpenAI GPT-2 model)"),yBe.forEach(t),QTr=i(pi),LF=n(pi,"LI",{});var wBe=s(LF);kbe=n(wBe,"STRONG",{});var s3t=s(kbe);HTr=r(s3t,"gpt_neo"),s3t.forEach(t),UTr=r(wBe," \u2014 "),CV=n(wBe,"A",{href:!0});var l3t=s(CV);JTr=r(l3t,"FlaxGPTNeoForCausalLM"),l3t.forEach(t),YTr=r(wBe," (GPT Neo model)"),wBe.forEach(t),KTr=i(pi),BF=n(pi,"LI",{});var ABe=s(BF);Rbe=n(ABe,"STRONG",{});var i3t=s(Rbe);ZTr=r(i3t,"gptj"),i3t.forEach(t),eFr=r(ABe," \u2014 "),MV=n(ABe,"A",{href:!0});var d3t=s(MV);oFr=r(d3t,"FlaxGPTJForCausalLM"),d3t.forEach(t),rFr=r(ABe," (GPT-J model)"),ABe.forEach(t),tFr=i(pi),xF=n(pi,"LI",{});var LBe=s(xF);Sbe=n(LBe,"STRONG",{});var c3t=s(Sbe);aFr=r(c3t,"xglm"),c3t.forEach(t),nFr=r(LBe," \u2014 "),EV=n(LBe,"A",{href:!0});var f3t=s(EV);sFr=r(f3t,"FlaxXGLMForCausalLM"),f3t.forEach(t),lFr=r(LBe," (XGLM model)"),LBe.forEach(t),pi.forEach(t),iFr=i(Ba),Pbe=n(Ba,"P",{});var m3t=s(Pbe);dFr=r(m3t,"Examples:"),m3t.forEach(t),cFr=i(Ba),m($L.$$.fragment,Ba),Ba.forEach(t),gi.forEach(t),ARe=i(c),af=n(c,"H2",{class:!0});var DPe=s(af);kF=n(DPe,"A",{id:!0,class:!0,href:!0});var g3t=s(kF);$be=n(g3t,"SPAN",{});var h3t=s($be);m(IL.$$.fragment,h3t),h3t.forEach(t),g3t.forEach(t),fFr=i(DPe),Ibe=n(DPe,"SPAN",{});var p3t=s(Ibe);mFr=r(p3t,"FlaxAutoModelForPreTraining"),p3t.forEach(t),DPe.forEach(t),LRe=i(c),Pr=n(c,"DIV",{class:!0});var _i=s(Pr);m(NL.$$.fragment,_i),gFr=i(_i),nf=n(_i,"P",{});var hQ=s(nf);hFr=r(hQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a pretraining head) when created
with the `),Nbe=n(hQ,"CODE",{});var _3t=s(Nbe);pFr=r(_3t,"from_pretrained()"),_3t.forEach(t),_Fr=r(hQ,"class method or the "),jbe=n(hQ,"CODE",{});var u3t=s(jbe);uFr=r(u3t,"from_config()"),u3t.forEach(t),bFr=r(hQ,`class
method.`),hQ.forEach(t),vFr=i(_i),jL=n(_i,"P",{});var qPe=s(jL);TFr=r(qPe,"This class cannot be instantiated directly using "),Dbe=n(qPe,"CODE",{});var b3t=s(Dbe);FFr=r(b3t,"__init__()"),b3t.forEach(t),CFr=r(qPe," (throws an error)."),qPe.forEach(t),MFr=i(_i),Lt=n(_i,"DIV",{class:!0});var ui=s(Lt);m(DL.$$.fragment,ui),EFr=i(ui),qbe=n(ui,"P",{});var v3t=s(qbe);yFr=r(v3t,"Instantiates one of the model classes of the library (with a pretraining head) from a configuration."),v3t.forEach(t),wFr=i(ui),sf=n(ui,"P",{});var pQ=s(sf);AFr=r(pQ,`Note:
Loading a model from its configuration file does `),Gbe=n(pQ,"STRONG",{});var T3t=s(Gbe);LFr=r(T3t,"not"),T3t.forEach(t),BFr=r(pQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Obe=n(pQ,"CODE",{});var F3t=s(Obe);xFr=r(F3t,"from_pretrained()"),F3t.forEach(t),kFr=r(pQ,"to load the model weights."),pQ.forEach(t),RFr=i(ui),Xbe=n(ui,"P",{});var C3t=s(Xbe);SFr=r(C3t,"Examples:"),C3t.forEach(t),PFr=i(ui),m(qL.$$.fragment,ui),ui.forEach(t),$Fr=i(_i),Bo=n(_i,"DIV",{class:!0});var xa=s(Bo);m(GL.$$.fragment,xa),IFr=i(xa),Vbe=n(xa,"P",{});var M3t=s(Vbe);NFr=r(M3t,"Instantiate one of the model classes of the library (with a pretraining head) from a pretrained model."),M3t.forEach(t),jFr=i(xa),kn=n(xa,"P",{});var QM=s(kn);DFr=r(QM,"The model class to instantiate is selected based on the "),zbe=n(QM,"CODE",{});var E3t=s(zbe);qFr=r(E3t,"model_type"),E3t.forEach(t),GFr=r(QM,` property of the config object (either
passed as an argument or loaded from `),Wbe=n(QM,"CODE",{});var y3t=s(Wbe);OFr=r(y3t,"pretrained_model_name_or_path"),y3t.forEach(t),XFr=r(QM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Qbe=n(QM,"CODE",{});var w3t=s(Qbe);VFr=r(w3t,"pretrained_model_name_or_path"),w3t.forEach(t),zFr=r(QM,":"),QM.forEach(t),WFr=i(xa),ce=n(xa,"UL",{});var he=s(ce);RF=n(he,"LI",{});var BBe=s(RF);Hbe=n(BBe,"STRONG",{});var A3t=s(Hbe);QFr=r(A3t,"albert"),A3t.forEach(t),HFr=r(BBe," \u2014 "),yV=n(BBe,"A",{href:!0});var L3t=s(yV);UFr=r(L3t,"FlaxAlbertForPreTraining"),L3t.forEach(t),JFr=r(BBe," (ALBERT model)"),BBe.forEach(t),YFr=i(he),SF=n(he,"LI",{});var xBe=s(SF);Ube=n(xBe,"STRONG",{});var B3t=s(Ube);KFr=r(B3t,"bart"),B3t.forEach(t),ZFr=r(xBe," \u2014 "),wV=n(xBe,"A",{href:!0});var x3t=s(wV);eCr=r(x3t,"FlaxBartForConditionalGeneration"),x3t.forEach(t),oCr=r(xBe," (BART model)"),xBe.forEach(t),rCr=i(he),PF=n(he,"LI",{});var kBe=s(PF);Jbe=n(kBe,"STRONG",{});var k3t=s(Jbe);tCr=r(k3t,"bert"),k3t.forEach(t),aCr=r(kBe," \u2014 "),AV=n(kBe,"A",{href:!0});var R3t=s(AV);nCr=r(R3t,"FlaxBertForPreTraining"),R3t.forEach(t),sCr=r(kBe," (BERT model)"),kBe.forEach(t),lCr=i(he),$F=n(he,"LI",{});var RBe=s($F);Ybe=n(RBe,"STRONG",{});var S3t=s(Ybe);iCr=r(S3t,"big_bird"),S3t.forEach(t),dCr=r(RBe," \u2014 "),LV=n(RBe,"A",{href:!0});var P3t=s(LV);cCr=r(P3t,"FlaxBigBirdForPreTraining"),P3t.forEach(t),fCr=r(RBe," (BigBird model)"),RBe.forEach(t),mCr=i(he),IF=n(he,"LI",{});var SBe=s(IF);Kbe=n(SBe,"STRONG",{});var $3t=s(Kbe);gCr=r($3t,"electra"),$3t.forEach(t),hCr=r(SBe," \u2014 "),BV=n(SBe,"A",{href:!0});var I3t=s(BV);pCr=r(I3t,"FlaxElectraForPreTraining"),I3t.forEach(t),_Cr=r(SBe," (ELECTRA model)"),SBe.forEach(t),uCr=i(he),NF=n(he,"LI",{});var PBe=s(NF);Zbe=n(PBe,"STRONG",{});var N3t=s(Zbe);bCr=r(N3t,"mbart"),N3t.forEach(t),vCr=r(PBe," \u2014 "),xV=n(PBe,"A",{href:!0});var j3t=s(xV);TCr=r(j3t,"FlaxMBartForConditionalGeneration"),j3t.forEach(t),FCr=r(PBe," (mBART model)"),PBe.forEach(t),CCr=i(he),jF=n(he,"LI",{});var $Be=s(jF);e3e=n($Be,"STRONG",{});var D3t=s(e3e);MCr=r(D3t,"mt5"),D3t.forEach(t),ECr=r($Be," \u2014 "),kV=n($Be,"A",{href:!0});var q3t=s(kV);yCr=r(q3t,"FlaxMT5ForConditionalGeneration"),q3t.forEach(t),wCr=r($Be," (mT5 model)"),$Be.forEach(t),ACr=i(he),DF=n(he,"LI",{});var IBe=s(DF);o3e=n(IBe,"STRONG",{});var G3t=s(o3e);LCr=r(G3t,"roberta"),G3t.forEach(t),BCr=r(IBe," \u2014 "),RV=n(IBe,"A",{href:!0});var O3t=s(RV);xCr=r(O3t,"FlaxRobertaForMaskedLM"),O3t.forEach(t),kCr=r(IBe," (RoBERTa model)"),IBe.forEach(t),RCr=i(he),qF=n(he,"LI",{});var NBe=s(qF);r3e=n(NBe,"STRONG",{});var X3t=s(r3e);SCr=r(X3t,"roformer"),X3t.forEach(t),PCr=r(NBe," \u2014 "),SV=n(NBe,"A",{href:!0});var V3t=s(SV);$Cr=r(V3t,"FlaxRoFormerForMaskedLM"),V3t.forEach(t),ICr=r(NBe," (RoFormer model)"),NBe.forEach(t),NCr=i(he),GF=n(he,"LI",{});var jBe=s(GF);t3e=n(jBe,"STRONG",{});var z3t=s(t3e);jCr=r(z3t,"t5"),z3t.forEach(t),DCr=r(jBe," \u2014 "),PV=n(jBe,"A",{href:!0});var W3t=s(PV);qCr=r(W3t,"FlaxT5ForConditionalGeneration"),W3t.forEach(t),GCr=r(jBe," (T5 model)"),jBe.forEach(t),OCr=i(he),OF=n(he,"LI",{});var DBe=s(OF);a3e=n(DBe,"STRONG",{});var Q3t=s(a3e);XCr=r(Q3t,"wav2vec2"),Q3t.forEach(t),VCr=r(DBe," \u2014 "),$V=n(DBe,"A",{href:!0});var H3t=s($V);zCr=r(H3t,"FlaxWav2Vec2ForPreTraining"),H3t.forEach(t),WCr=r(DBe," (Wav2Vec2 model)"),DBe.forEach(t),QCr=i(he),XF=n(he,"LI",{});var qBe=s(XF);n3e=n(qBe,"STRONG",{});var U3t=s(n3e);HCr=r(U3t,"xlm-roberta"),U3t.forEach(t),UCr=r(qBe," \u2014 "),IV=n(qBe,"A",{href:!0});var J3t=s(IV);JCr=r(J3t,"FlaxXLMRobertaForMaskedLM"),J3t.forEach(t),YCr=r(qBe," (XLM-RoBERTa model)"),qBe.forEach(t),he.forEach(t),KCr=i(xa),s3e=n(xa,"P",{});var Y3t=s(s3e);ZCr=r(Y3t,"Examples:"),Y3t.forEach(t),eMr=i(xa),m(OL.$$.fragment,xa),xa.forEach(t),_i.forEach(t),BRe=i(c),lf=n(c,"H2",{class:!0});var GPe=s(lf);VF=n(GPe,"A",{id:!0,class:!0,href:!0});var K3t=s(VF);l3e=n(K3t,"SPAN",{});var Z3t=s(l3e);m(XL.$$.fragment,Z3t),Z3t.forEach(t),K3t.forEach(t),oMr=i(GPe),i3e=n(GPe,"SPAN",{});var e5t=s(i3e);rMr=r(e5t,"FlaxAutoModelForMaskedLM"),e5t.forEach(t),GPe.forEach(t),xRe=i(c),$r=n(c,"DIV",{class:!0});var bi=s($r);m(VL.$$.fragment,bi),tMr=i(bi),df=n(bi,"P",{});var _Q=s(df);aMr=r(_Q,`This is a generic model class that will be instantiated as one of the model classes of the library (with a masked language modeling head) when created
with the `),d3e=n(_Q,"CODE",{});var o5t=s(d3e);nMr=r(o5t,"from_pretrained()"),o5t.forEach(t),sMr=r(_Q,"class method or the "),c3e=n(_Q,"CODE",{});var r5t=s(c3e);lMr=r(r5t,"from_config()"),r5t.forEach(t),iMr=r(_Q,`class
method.`),_Q.forEach(t),dMr=i(bi),zL=n(bi,"P",{});var OPe=s(zL);cMr=r(OPe,"This class cannot be instantiated directly using "),f3e=n(OPe,"CODE",{});var t5t=s(f3e);fMr=r(t5t,"__init__()"),t5t.forEach(t),mMr=r(OPe," (throws an error)."),OPe.forEach(t),gMr=i(bi),Bt=n(bi,"DIV",{class:!0});var vi=s(Bt);m(WL.$$.fragment,vi),hMr=i(vi),m3e=n(vi,"P",{});var a5t=s(m3e);pMr=r(a5t,"Instantiates one of the model classes of the library (with a masked language modeling head) from a configuration."),a5t.forEach(t),_Mr=i(vi),cf=n(vi,"P",{});var uQ=s(cf);uMr=r(uQ,`Note:
Loading a model from its configuration file does `),g3e=n(uQ,"STRONG",{});var n5t=s(g3e);bMr=r(n5t,"not"),n5t.forEach(t),vMr=r(uQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),h3e=n(uQ,"CODE",{});var s5t=s(h3e);TMr=r(s5t,"from_pretrained()"),s5t.forEach(t),FMr=r(uQ,"to load the model weights."),uQ.forEach(t),CMr=i(vi),p3e=n(vi,"P",{});var l5t=s(p3e);MMr=r(l5t,"Examples:"),l5t.forEach(t),EMr=i(vi),m(QL.$$.fragment,vi),vi.forEach(t),yMr=i(bi),xo=n(bi,"DIV",{class:!0});var ka=s(xo);m(HL.$$.fragment,ka),wMr=i(ka),_3e=n(ka,"P",{});var i5t=s(_3e);AMr=r(i5t,"Instantiate one of the model classes of the library (with a masked language modeling head) from a pretrained model."),i5t.forEach(t),LMr=i(ka),Rn=n(ka,"P",{});var HM=s(Rn);BMr=r(HM,"The model class to instantiate is selected based on the "),u3e=n(HM,"CODE",{});var d5t=s(u3e);xMr=r(d5t,"model_type"),d5t.forEach(t),kMr=r(HM,` property of the config object (either
passed as an argument or loaded from `),b3e=n(HM,"CODE",{});var c5t=s(b3e);RMr=r(c5t,"pretrained_model_name_or_path"),c5t.forEach(t),SMr=r(HM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),v3e=n(HM,"CODE",{});var f5t=s(v3e);PMr=r(f5t,"pretrained_model_name_or_path"),f5t.forEach(t),$Mr=r(HM,":"),HM.forEach(t),IMr=i(ka),be=n(ka,"UL",{});var we=s(be);zF=n(we,"LI",{});var GBe=s(zF);T3e=n(GBe,"STRONG",{});var m5t=s(T3e);NMr=r(m5t,"albert"),m5t.forEach(t),jMr=r(GBe," \u2014 "),NV=n(GBe,"A",{href:!0});var g5t=s(NV);DMr=r(g5t,"FlaxAlbertForMaskedLM"),g5t.forEach(t),qMr=r(GBe," (ALBERT model)"),GBe.forEach(t),GMr=i(we),WF=n(we,"LI",{});var OBe=s(WF);F3e=n(OBe,"STRONG",{});var h5t=s(F3e);OMr=r(h5t,"bart"),h5t.forEach(t),XMr=r(OBe," \u2014 "),jV=n(OBe,"A",{href:!0});var p5t=s(jV);VMr=r(p5t,"FlaxBartForConditionalGeneration"),p5t.forEach(t),zMr=r(OBe," (BART model)"),OBe.forEach(t),WMr=i(we),QF=n(we,"LI",{});var XBe=s(QF);C3e=n(XBe,"STRONG",{});var _5t=s(C3e);QMr=r(_5t,"bert"),_5t.forEach(t),HMr=r(XBe," \u2014 "),DV=n(XBe,"A",{href:!0});var u5t=s(DV);UMr=r(u5t,"FlaxBertForMaskedLM"),u5t.forEach(t),JMr=r(XBe," (BERT model)"),XBe.forEach(t),YMr=i(we),HF=n(we,"LI",{});var VBe=s(HF);M3e=n(VBe,"STRONG",{});var b5t=s(M3e);KMr=r(b5t,"big_bird"),b5t.forEach(t),ZMr=r(VBe," \u2014 "),qV=n(VBe,"A",{href:!0});var v5t=s(qV);eEr=r(v5t,"FlaxBigBirdForMaskedLM"),v5t.forEach(t),oEr=r(VBe," (BigBird model)"),VBe.forEach(t),rEr=i(we),UF=n(we,"LI",{});var zBe=s(UF);E3e=n(zBe,"STRONG",{});var T5t=s(E3e);tEr=r(T5t,"distilbert"),T5t.forEach(t),aEr=r(zBe," \u2014 "),GV=n(zBe,"A",{href:!0});var F5t=s(GV);nEr=r(F5t,"FlaxDistilBertForMaskedLM"),F5t.forEach(t),sEr=r(zBe," (DistilBERT model)"),zBe.forEach(t),lEr=i(we),JF=n(we,"LI",{});var WBe=s(JF);y3e=n(WBe,"STRONG",{});var C5t=s(y3e);iEr=r(C5t,"electra"),C5t.forEach(t),dEr=r(WBe," \u2014 "),OV=n(WBe,"A",{href:!0});var M5t=s(OV);cEr=r(M5t,"FlaxElectraForMaskedLM"),M5t.forEach(t),fEr=r(WBe," (ELECTRA model)"),WBe.forEach(t),mEr=i(we),YF=n(we,"LI",{});var QBe=s(YF);w3e=n(QBe,"STRONG",{});var E5t=s(w3e);gEr=r(E5t,"mbart"),E5t.forEach(t),hEr=r(QBe," \u2014 "),XV=n(QBe,"A",{href:!0});var y5t=s(XV);pEr=r(y5t,"FlaxMBartForConditionalGeneration"),y5t.forEach(t),_Er=r(QBe," (mBART model)"),QBe.forEach(t),uEr=i(we),KF=n(we,"LI",{});var HBe=s(KF);A3e=n(HBe,"STRONG",{});var w5t=s(A3e);bEr=r(w5t,"roberta"),w5t.forEach(t),vEr=r(HBe," \u2014 "),VV=n(HBe,"A",{href:!0});var A5t=s(VV);TEr=r(A5t,"FlaxRobertaForMaskedLM"),A5t.forEach(t),FEr=r(HBe," (RoBERTa model)"),HBe.forEach(t),CEr=i(we),ZF=n(we,"LI",{});var UBe=s(ZF);L3e=n(UBe,"STRONG",{});var L5t=s(L3e);MEr=r(L5t,"roformer"),L5t.forEach(t),EEr=r(UBe," \u2014 "),zV=n(UBe,"A",{href:!0});var B5t=s(zV);yEr=r(B5t,"FlaxRoFormerForMaskedLM"),B5t.forEach(t),wEr=r(UBe," (RoFormer model)"),UBe.forEach(t),AEr=i(we),eC=n(we,"LI",{});var JBe=s(eC);B3e=n(JBe,"STRONG",{});var x5t=s(B3e);LEr=r(x5t,"xlm-roberta"),x5t.forEach(t),BEr=r(JBe," \u2014 "),WV=n(JBe,"A",{href:!0});var k5t=s(WV);xEr=r(k5t,"FlaxXLMRobertaForMaskedLM"),k5t.forEach(t),kEr=r(JBe," (XLM-RoBERTa model)"),JBe.forEach(t),we.forEach(t),REr=i(ka),x3e=n(ka,"P",{});var R5t=s(x3e);SEr=r(R5t,"Examples:"),R5t.forEach(t),PEr=i(ka),m(UL.$$.fragment,ka),ka.forEach(t),bi.forEach(t),kRe=i(c),ff=n(c,"H2",{class:!0});var XPe=s(ff);oC=n(XPe,"A",{id:!0,class:!0,href:!0});var S5t=s(oC);k3e=n(S5t,"SPAN",{});var P5t=s(k3e);m(JL.$$.fragment,P5t),P5t.forEach(t),S5t.forEach(t),$Er=i(XPe),R3e=n(XPe,"SPAN",{});var $5t=s(R3e);IEr=r($5t,"FlaxAutoModelForSeq2SeqLM"),$5t.forEach(t),XPe.forEach(t),RRe=i(c),Ir=n(c,"DIV",{class:!0});var Ti=s(Ir);m(YL.$$.fragment,Ti),NEr=i(Ti),mf=n(Ti,"P",{});var bQ=s(mf);jEr=r(bQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence-to-sequence language modeling head) when created
with the `),S3e=n(bQ,"CODE",{});var I5t=s(S3e);DEr=r(I5t,"from_pretrained()"),I5t.forEach(t),qEr=r(bQ,"class method or the "),P3e=n(bQ,"CODE",{});var N5t=s(P3e);GEr=r(N5t,"from_config()"),N5t.forEach(t),OEr=r(bQ,`class
method.`),bQ.forEach(t),XEr=i(Ti),KL=n(Ti,"P",{});var VPe=s(KL);VEr=r(VPe,"This class cannot be instantiated directly using "),$3e=n(VPe,"CODE",{});var j5t=s($3e);zEr=r(j5t,"__init__()"),j5t.forEach(t),WEr=r(VPe," (throws an error)."),VPe.forEach(t),QEr=i(Ti),xt=n(Ti,"DIV",{class:!0});var Fi=s(xt);m(ZL.$$.fragment,Fi),HEr=i(Fi),I3e=n(Fi,"P",{});var D5t=s(I3e);UEr=r(D5t,"Instantiates one of the model classes of the library (with a sequence-to-sequence language modeling head) from a configuration."),D5t.forEach(t),JEr=i(Fi),gf=n(Fi,"P",{});var vQ=s(gf);YEr=r(vQ,`Note:
Loading a model from its configuration file does `),N3e=n(vQ,"STRONG",{});var q5t=s(N3e);KEr=r(q5t,"not"),q5t.forEach(t),ZEr=r(vQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),j3e=n(vQ,"CODE",{});var G5t=s(j3e);eyr=r(G5t,"from_pretrained()"),G5t.forEach(t),oyr=r(vQ,"to load the model weights."),vQ.forEach(t),ryr=i(Fi),D3e=n(Fi,"P",{});var O5t=s(D3e);tyr=r(O5t,"Examples:"),O5t.forEach(t),ayr=i(Fi),m(e7.$$.fragment,Fi),Fi.forEach(t),nyr=i(Ti),ko=n(Ti,"DIV",{class:!0});var Ra=s(ko);m(o7.$$.fragment,Ra),syr=i(Ra),q3e=n(Ra,"P",{});var X5t=s(q3e);lyr=r(X5t,"Instantiate one of the model classes of the library (with a sequence-to-sequence language modeling head) from a pretrained model."),X5t.forEach(t),iyr=i(Ra),Sn=n(Ra,"P",{});var UM=s(Sn);dyr=r(UM,"The model class to instantiate is selected based on the "),G3e=n(UM,"CODE",{});var V5t=s(G3e);cyr=r(V5t,"model_type"),V5t.forEach(t),fyr=r(UM,` property of the config object (either
passed as an argument or loaded from `),O3e=n(UM,"CODE",{});var z5t=s(O3e);myr=r(z5t,"pretrained_model_name_or_path"),z5t.forEach(t),gyr=r(UM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),X3e=n(UM,"CODE",{});var W5t=s(X3e);hyr=r(W5t,"pretrained_model_name_or_path"),W5t.forEach(t),pyr=r(UM,":"),UM.forEach(t),_yr=i(Ra),Ee=n(Ra,"UL",{});var lo=s(Ee);rC=n(lo,"LI",{});var YBe=s(rC);V3e=n(YBe,"STRONG",{});var Q5t=s(V3e);uyr=r(Q5t,"bart"),Q5t.forEach(t),byr=r(YBe," \u2014 "),QV=n(YBe,"A",{href:!0});var H5t=s(QV);vyr=r(H5t,"FlaxBartForConditionalGeneration"),H5t.forEach(t),Tyr=r(YBe," (BART model)"),YBe.forEach(t),Fyr=i(lo),tC=n(lo,"LI",{});var KBe=s(tC);z3e=n(KBe,"STRONG",{});var U5t=s(z3e);Cyr=r(U5t,"blenderbot"),U5t.forEach(t),Myr=r(KBe," \u2014 "),HV=n(KBe,"A",{href:!0});var J5t=s(HV);Eyr=r(J5t,"FlaxBlenderbotForConditionalGeneration"),J5t.forEach(t),yyr=r(KBe," (Blenderbot model)"),KBe.forEach(t),wyr=i(lo),aC=n(lo,"LI",{});var ZBe=s(aC);W3e=n(ZBe,"STRONG",{});var Y5t=s(W3e);Ayr=r(Y5t,"blenderbot-small"),Y5t.forEach(t),Lyr=r(ZBe," \u2014 "),UV=n(ZBe,"A",{href:!0});var K5t=s(UV);Byr=r(K5t,"FlaxBlenderbotSmallForConditionalGeneration"),K5t.forEach(t),xyr=r(ZBe," (BlenderbotSmall model)"),ZBe.forEach(t),kyr=i(lo),nC=n(lo,"LI",{});var exe=s(nC);Q3e=n(exe,"STRONG",{});var Z5t=s(Q3e);Ryr=r(Z5t,"encoder-decoder"),Z5t.forEach(t),Syr=r(exe," \u2014 "),JV=n(exe,"A",{href:!0});var e2t=s(JV);Pyr=r(e2t,"FlaxEncoderDecoderModel"),e2t.forEach(t),$yr=r(exe," (Encoder decoder model)"),exe.forEach(t),Iyr=i(lo),sC=n(lo,"LI",{});var oxe=s(sC);H3e=n(oxe,"STRONG",{});var o2t=s(H3e);Nyr=r(o2t,"marian"),o2t.forEach(t),jyr=r(oxe," \u2014 "),YV=n(oxe,"A",{href:!0});var r2t=s(YV);Dyr=r(r2t,"FlaxMarianMTModel"),r2t.forEach(t),qyr=r(oxe," (Marian model)"),oxe.forEach(t),Gyr=i(lo),lC=n(lo,"LI",{});var rxe=s(lC);U3e=n(rxe,"STRONG",{});var t2t=s(U3e);Oyr=r(t2t,"mbart"),t2t.forEach(t),Xyr=r(rxe," \u2014 "),KV=n(rxe,"A",{href:!0});var a2t=s(KV);Vyr=r(a2t,"FlaxMBartForConditionalGeneration"),a2t.forEach(t),zyr=r(rxe," (mBART model)"),rxe.forEach(t),Wyr=i(lo),iC=n(lo,"LI",{});var txe=s(iC);J3e=n(txe,"STRONG",{});var n2t=s(J3e);Qyr=r(n2t,"mt5"),n2t.forEach(t),Hyr=r(txe," \u2014 "),ZV=n(txe,"A",{href:!0});var s2t=s(ZV);Uyr=r(s2t,"FlaxMT5ForConditionalGeneration"),s2t.forEach(t),Jyr=r(txe," (mT5 model)"),txe.forEach(t),Yyr=i(lo),dC=n(lo,"LI",{});var axe=s(dC);Y3e=n(axe,"STRONG",{});var l2t=s(Y3e);Kyr=r(l2t,"pegasus"),l2t.forEach(t),Zyr=r(axe," \u2014 "),ez=n(axe,"A",{href:!0});var i2t=s(ez);ewr=r(i2t,"FlaxPegasusForConditionalGeneration"),i2t.forEach(t),owr=r(axe," (Pegasus model)"),axe.forEach(t),rwr=i(lo),cC=n(lo,"LI",{});var nxe=s(cC);K3e=n(nxe,"STRONG",{});var d2t=s(K3e);twr=r(d2t,"t5"),d2t.forEach(t),awr=r(nxe," \u2014 "),oz=n(nxe,"A",{href:!0});var c2t=s(oz);nwr=r(c2t,"FlaxT5ForConditionalGeneration"),c2t.forEach(t),swr=r(nxe," (T5 model)"),nxe.forEach(t),lo.forEach(t),lwr=i(Ra),Z3e=n(Ra,"P",{});var f2t=s(Z3e);iwr=r(f2t,"Examples:"),f2t.forEach(t),dwr=i(Ra),m(r7.$$.fragment,Ra),Ra.forEach(t),Ti.forEach(t),SRe=i(c),hf=n(c,"H2",{class:!0});var zPe=s(hf);fC=n(zPe,"A",{id:!0,class:!0,href:!0});var m2t=s(fC);e5e=n(m2t,"SPAN",{});var g2t=s(e5e);m(t7.$$.fragment,g2t),g2t.forEach(t),m2t.forEach(t),cwr=i(zPe),o5e=n(zPe,"SPAN",{});var h2t=s(o5e);fwr=r(h2t,"FlaxAutoModelForSequenceClassification"),h2t.forEach(t),zPe.forEach(t),PRe=i(c),Nr=n(c,"DIV",{class:!0});var Ci=s(Nr);m(a7.$$.fragment,Ci),mwr=i(Ci),pf=n(Ci,"P",{});var TQ=s(pf);gwr=r(TQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a sequence classification head) when created
with the `),r5e=n(TQ,"CODE",{});var p2t=s(r5e);hwr=r(p2t,"from_pretrained()"),p2t.forEach(t),pwr=r(TQ,"class method or the "),t5e=n(TQ,"CODE",{});var _2t=s(t5e);_wr=r(_2t,"from_config()"),_2t.forEach(t),uwr=r(TQ,`class
method.`),TQ.forEach(t),bwr=i(Ci),n7=n(Ci,"P",{});var WPe=s(n7);vwr=r(WPe,"This class cannot be instantiated directly using "),a5e=n(WPe,"CODE",{});var u2t=s(a5e);Twr=r(u2t,"__init__()"),u2t.forEach(t),Fwr=r(WPe," (throws an error)."),WPe.forEach(t),Cwr=i(Ci),kt=n(Ci,"DIV",{class:!0});var Mi=s(kt);m(s7.$$.fragment,Mi),Mwr=i(Mi),n5e=n(Mi,"P",{});var b2t=s(n5e);Ewr=r(b2t,"Instantiates one of the model classes of the library (with a sequence classification head) from a configuration."),b2t.forEach(t),ywr=i(Mi),_f=n(Mi,"P",{});var FQ=s(_f);wwr=r(FQ,`Note:
Loading a model from its configuration file does `),s5e=n(FQ,"STRONG",{});var v2t=s(s5e);Awr=r(v2t,"not"),v2t.forEach(t),Lwr=r(FQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),l5e=n(FQ,"CODE",{});var T2t=s(l5e);Bwr=r(T2t,"from_pretrained()"),T2t.forEach(t),xwr=r(FQ,"to load the model weights."),FQ.forEach(t),kwr=i(Mi),i5e=n(Mi,"P",{});var F2t=s(i5e);Rwr=r(F2t,"Examples:"),F2t.forEach(t),Swr=i(Mi),m(l7.$$.fragment,Mi),Mi.forEach(t),Pwr=i(Ci),Ro=n(Ci,"DIV",{class:!0});var Sa=s(Ro);m(i7.$$.fragment,Sa),$wr=i(Sa),d5e=n(Sa,"P",{});var C2t=s(d5e);Iwr=r(C2t,"Instantiate one of the model classes of the library (with a sequence classification head) from a pretrained model."),C2t.forEach(t),Nwr=i(Sa),Pn=n(Sa,"P",{});var JM=s(Pn);jwr=r(JM,"The model class to instantiate is selected based on the "),c5e=n(JM,"CODE",{});var M2t=s(c5e);Dwr=r(M2t,"model_type"),M2t.forEach(t),qwr=r(JM,` property of the config object (either
passed as an argument or loaded from `),f5e=n(JM,"CODE",{});var E2t=s(f5e);Gwr=r(E2t,"pretrained_model_name_or_path"),E2t.forEach(t),Owr=r(JM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),m5e=n(JM,"CODE",{});var y2t=s(m5e);Xwr=r(y2t,"pretrained_model_name_or_path"),y2t.forEach(t),Vwr=r(JM,":"),JM.forEach(t),zwr=i(Sa),ve=n(Sa,"UL",{});var Ae=s(ve);mC=n(Ae,"LI",{});var sxe=s(mC);g5e=n(sxe,"STRONG",{});var w2t=s(g5e);Wwr=r(w2t,"albert"),w2t.forEach(t),Qwr=r(sxe," \u2014 "),rz=n(sxe,"A",{href:!0});var A2t=s(rz);Hwr=r(A2t,"FlaxAlbertForSequenceClassification"),A2t.forEach(t),Uwr=r(sxe," (ALBERT model)"),sxe.forEach(t),Jwr=i(Ae),gC=n(Ae,"LI",{});var lxe=s(gC);h5e=n(lxe,"STRONG",{});var L2t=s(h5e);Ywr=r(L2t,"bart"),L2t.forEach(t),Kwr=r(lxe," \u2014 "),tz=n(lxe,"A",{href:!0});var B2t=s(tz);Zwr=r(B2t,"FlaxBartForSequenceClassification"),B2t.forEach(t),eAr=r(lxe," (BART model)"),lxe.forEach(t),oAr=i(Ae),hC=n(Ae,"LI",{});var ixe=s(hC);p5e=n(ixe,"STRONG",{});var x2t=s(p5e);rAr=r(x2t,"bert"),x2t.forEach(t),tAr=r(ixe," \u2014 "),az=n(ixe,"A",{href:!0});var k2t=s(az);aAr=r(k2t,"FlaxBertForSequenceClassification"),k2t.forEach(t),nAr=r(ixe," (BERT model)"),ixe.forEach(t),sAr=i(Ae),pC=n(Ae,"LI",{});var dxe=s(pC);_5e=n(dxe,"STRONG",{});var R2t=s(_5e);lAr=r(R2t,"big_bird"),R2t.forEach(t),iAr=r(dxe," \u2014 "),nz=n(dxe,"A",{href:!0});var S2t=s(nz);dAr=r(S2t,"FlaxBigBirdForSequenceClassification"),S2t.forEach(t),cAr=r(dxe," (BigBird model)"),dxe.forEach(t),fAr=i(Ae),_C=n(Ae,"LI",{});var cxe=s(_C);u5e=n(cxe,"STRONG",{});var P2t=s(u5e);mAr=r(P2t,"distilbert"),P2t.forEach(t),gAr=r(cxe," \u2014 "),sz=n(cxe,"A",{href:!0});var $2t=s(sz);hAr=r($2t,"FlaxDistilBertForSequenceClassification"),$2t.forEach(t),pAr=r(cxe," (DistilBERT model)"),cxe.forEach(t),_Ar=i(Ae),uC=n(Ae,"LI",{});var fxe=s(uC);b5e=n(fxe,"STRONG",{});var I2t=s(b5e);uAr=r(I2t,"electra"),I2t.forEach(t),bAr=r(fxe," \u2014 "),lz=n(fxe,"A",{href:!0});var N2t=s(lz);vAr=r(N2t,"FlaxElectraForSequenceClassification"),N2t.forEach(t),TAr=r(fxe," (ELECTRA model)"),fxe.forEach(t),FAr=i(Ae),bC=n(Ae,"LI",{});var mxe=s(bC);v5e=n(mxe,"STRONG",{});var j2t=s(v5e);CAr=r(j2t,"mbart"),j2t.forEach(t),MAr=r(mxe," \u2014 "),iz=n(mxe,"A",{href:!0});var D2t=s(iz);EAr=r(D2t,"FlaxMBartForSequenceClassification"),D2t.forEach(t),yAr=r(mxe," (mBART model)"),mxe.forEach(t),wAr=i(Ae),vC=n(Ae,"LI",{});var gxe=s(vC);T5e=n(gxe,"STRONG",{});var q2t=s(T5e);AAr=r(q2t,"roberta"),q2t.forEach(t),LAr=r(gxe," \u2014 "),dz=n(gxe,"A",{href:!0});var G2t=s(dz);BAr=r(G2t,"FlaxRobertaForSequenceClassification"),G2t.forEach(t),xAr=r(gxe," (RoBERTa model)"),gxe.forEach(t),kAr=i(Ae),TC=n(Ae,"LI",{});var hxe=s(TC);F5e=n(hxe,"STRONG",{});var O2t=s(F5e);RAr=r(O2t,"roformer"),O2t.forEach(t),SAr=r(hxe," \u2014 "),cz=n(hxe,"A",{href:!0});var X2t=s(cz);PAr=r(X2t,"FlaxRoFormerForSequenceClassification"),X2t.forEach(t),$Ar=r(hxe," (RoFormer model)"),hxe.forEach(t),IAr=i(Ae),FC=n(Ae,"LI",{});var pxe=s(FC);C5e=n(pxe,"STRONG",{});var V2t=s(C5e);NAr=r(V2t,"xlm-roberta"),V2t.forEach(t),jAr=r(pxe," \u2014 "),fz=n(pxe,"A",{href:!0});var z2t=s(fz);DAr=r(z2t,"FlaxXLMRobertaForSequenceClassification"),z2t.forEach(t),qAr=r(pxe," (XLM-RoBERTa model)"),pxe.forEach(t),Ae.forEach(t),GAr=i(Sa),M5e=n(Sa,"P",{});var W2t=s(M5e);OAr=r(W2t,"Examples:"),W2t.forEach(t),XAr=i(Sa),m(d7.$$.fragment,Sa),Sa.forEach(t),Ci.forEach(t),$Re=i(c),uf=n(c,"H2",{class:!0});var QPe=s(uf);CC=n(QPe,"A",{id:!0,class:!0,href:!0});var Q2t=s(CC);E5e=n(Q2t,"SPAN",{});var H2t=s(E5e);m(c7.$$.fragment,H2t),H2t.forEach(t),Q2t.forEach(t),VAr=i(QPe),y5e=n(QPe,"SPAN",{});var U2t=s(y5e);zAr=r(U2t,"FlaxAutoModelForQuestionAnswering"),U2t.forEach(t),QPe.forEach(t),IRe=i(c),jr=n(c,"DIV",{class:!0});var Ei=s(jr);m(f7.$$.fragment,Ei),WAr=i(Ei),bf=n(Ei,"P",{});var CQ=s(bf);QAr=r(CQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a question answering head) when created
with the `),w5e=n(CQ,"CODE",{});var J2t=s(w5e);HAr=r(J2t,"from_pretrained()"),J2t.forEach(t),UAr=r(CQ,"class method or the "),A5e=n(CQ,"CODE",{});var Y2t=s(A5e);JAr=r(Y2t,"from_config()"),Y2t.forEach(t),YAr=r(CQ,`class
method.`),CQ.forEach(t),KAr=i(Ei),m7=n(Ei,"P",{});var HPe=s(m7);ZAr=r(HPe,"This class cannot be instantiated directly using "),L5e=n(HPe,"CODE",{});var K2t=s(L5e);e0r=r(K2t,"__init__()"),K2t.forEach(t),o0r=r(HPe," (throws an error)."),HPe.forEach(t),r0r=i(Ei),Rt=n(Ei,"DIV",{class:!0});var yi=s(Rt);m(g7.$$.fragment,yi),t0r=i(yi),B5e=n(yi,"P",{});var Z2t=s(B5e);a0r=r(Z2t,"Instantiates one of the model classes of the library (with a question answering head) from a configuration."),Z2t.forEach(t),n0r=i(yi),vf=n(yi,"P",{});var MQ=s(vf);s0r=r(MQ,`Note:
Loading a model from its configuration file does `),x5e=n(MQ,"STRONG",{});var evt=s(x5e);l0r=r(evt,"not"),evt.forEach(t),i0r=r(MQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),k5e=n(MQ,"CODE",{});var ovt=s(k5e);d0r=r(ovt,"from_pretrained()"),ovt.forEach(t),c0r=r(MQ,"to load the model weights."),MQ.forEach(t),f0r=i(yi),R5e=n(yi,"P",{});var rvt=s(R5e);m0r=r(rvt,"Examples:"),rvt.forEach(t),g0r=i(yi),m(h7.$$.fragment,yi),yi.forEach(t),h0r=i(Ei),So=n(Ei,"DIV",{class:!0});var Pa=s(So);m(p7.$$.fragment,Pa),p0r=i(Pa),S5e=n(Pa,"P",{});var tvt=s(S5e);_0r=r(tvt,"Instantiate one of the model classes of the library (with a question answering head) from a pretrained model."),tvt.forEach(t),u0r=i(Pa),$n=n(Pa,"P",{});var YM=s($n);b0r=r(YM,"The model class to instantiate is selected based on the "),P5e=n(YM,"CODE",{});var avt=s(P5e);v0r=r(avt,"model_type"),avt.forEach(t),T0r=r(YM,` property of the config object (either
passed as an argument or loaded from `),$5e=n(YM,"CODE",{});var nvt=s($5e);F0r=r(nvt,"pretrained_model_name_or_path"),nvt.forEach(t),C0r=r(YM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),I5e=n(YM,"CODE",{});var svt=s(I5e);M0r=r(svt,"pretrained_model_name_or_path"),svt.forEach(t),E0r=r(YM,":"),YM.forEach(t),y0r=i(Pa),Te=n(Pa,"UL",{});var Le=s(Te);MC=n(Le,"LI",{});var _xe=s(MC);N5e=n(_xe,"STRONG",{});var lvt=s(N5e);w0r=r(lvt,"albert"),lvt.forEach(t),A0r=r(_xe," \u2014 "),mz=n(_xe,"A",{href:!0});var ivt=s(mz);L0r=r(ivt,"FlaxAlbertForQuestionAnswering"),ivt.forEach(t),B0r=r(_xe," (ALBERT model)"),_xe.forEach(t),x0r=i(Le),EC=n(Le,"LI",{});var uxe=s(EC);j5e=n(uxe,"STRONG",{});var dvt=s(j5e);k0r=r(dvt,"bart"),dvt.forEach(t),R0r=r(uxe," \u2014 "),gz=n(uxe,"A",{href:!0});var cvt=s(gz);S0r=r(cvt,"FlaxBartForQuestionAnswering"),cvt.forEach(t),P0r=r(uxe," (BART model)"),uxe.forEach(t),$0r=i(Le),yC=n(Le,"LI",{});var bxe=s(yC);D5e=n(bxe,"STRONG",{});var fvt=s(D5e);I0r=r(fvt,"bert"),fvt.forEach(t),N0r=r(bxe," \u2014 "),hz=n(bxe,"A",{href:!0});var mvt=s(hz);j0r=r(mvt,"FlaxBertForQuestionAnswering"),mvt.forEach(t),D0r=r(bxe," (BERT model)"),bxe.forEach(t),q0r=i(Le),wC=n(Le,"LI",{});var vxe=s(wC);q5e=n(vxe,"STRONG",{});var gvt=s(q5e);G0r=r(gvt,"big_bird"),gvt.forEach(t),O0r=r(vxe," \u2014 "),pz=n(vxe,"A",{href:!0});var hvt=s(pz);X0r=r(hvt,"FlaxBigBirdForQuestionAnswering"),hvt.forEach(t),V0r=r(vxe," (BigBird model)"),vxe.forEach(t),z0r=i(Le),AC=n(Le,"LI",{});var Txe=s(AC);G5e=n(Txe,"STRONG",{});var pvt=s(G5e);W0r=r(pvt,"distilbert"),pvt.forEach(t),Q0r=r(Txe," \u2014 "),_z=n(Txe,"A",{href:!0});var _vt=s(_z);H0r=r(_vt,"FlaxDistilBertForQuestionAnswering"),_vt.forEach(t),U0r=r(Txe," (DistilBERT model)"),Txe.forEach(t),J0r=i(Le),LC=n(Le,"LI",{});var Fxe=s(LC);O5e=n(Fxe,"STRONG",{});var uvt=s(O5e);Y0r=r(uvt,"electra"),uvt.forEach(t),K0r=r(Fxe," \u2014 "),uz=n(Fxe,"A",{href:!0});var bvt=s(uz);Z0r=r(bvt,"FlaxElectraForQuestionAnswering"),bvt.forEach(t),eLr=r(Fxe," (ELECTRA model)"),Fxe.forEach(t),oLr=i(Le),BC=n(Le,"LI",{});var Cxe=s(BC);X5e=n(Cxe,"STRONG",{});var vvt=s(X5e);rLr=r(vvt,"mbart"),vvt.forEach(t),tLr=r(Cxe," \u2014 "),bz=n(Cxe,"A",{href:!0});var Tvt=s(bz);aLr=r(Tvt,"FlaxMBartForQuestionAnswering"),Tvt.forEach(t),nLr=r(Cxe," (mBART model)"),Cxe.forEach(t),sLr=i(Le),xC=n(Le,"LI",{});var Mxe=s(xC);V5e=n(Mxe,"STRONG",{});var Fvt=s(V5e);lLr=r(Fvt,"roberta"),Fvt.forEach(t),iLr=r(Mxe," \u2014 "),vz=n(Mxe,"A",{href:!0});var Cvt=s(vz);dLr=r(Cvt,"FlaxRobertaForQuestionAnswering"),Cvt.forEach(t),cLr=r(Mxe," (RoBERTa model)"),Mxe.forEach(t),fLr=i(Le),kC=n(Le,"LI",{});var Exe=s(kC);z5e=n(Exe,"STRONG",{});var Mvt=s(z5e);mLr=r(Mvt,"roformer"),Mvt.forEach(t),gLr=r(Exe," \u2014 "),Tz=n(Exe,"A",{href:!0});var Evt=s(Tz);hLr=r(Evt,"FlaxRoFormerForQuestionAnswering"),Evt.forEach(t),pLr=r(Exe," (RoFormer model)"),Exe.forEach(t),_Lr=i(Le),RC=n(Le,"LI",{});var yxe=s(RC);W5e=n(yxe,"STRONG",{});var yvt=s(W5e);uLr=r(yvt,"xlm-roberta"),yvt.forEach(t),bLr=r(yxe," \u2014 "),Fz=n(yxe,"A",{href:!0});var wvt=s(Fz);vLr=r(wvt,"FlaxXLMRobertaForQuestionAnswering"),wvt.forEach(t),TLr=r(yxe," (XLM-RoBERTa model)"),yxe.forEach(t),Le.forEach(t),FLr=i(Pa),Q5e=n(Pa,"P",{});var Avt=s(Q5e);CLr=r(Avt,"Examples:"),Avt.forEach(t),MLr=i(Pa),m(_7.$$.fragment,Pa),Pa.forEach(t),Ei.forEach(t),NRe=i(c),Tf=n(c,"H2",{class:!0});var UPe=s(Tf);SC=n(UPe,"A",{id:!0,class:!0,href:!0});var Lvt=s(SC);H5e=n(Lvt,"SPAN",{});var Bvt=s(H5e);m(u7.$$.fragment,Bvt),Bvt.forEach(t),Lvt.forEach(t),ELr=i(UPe),U5e=n(UPe,"SPAN",{});var xvt=s(U5e);yLr=r(xvt,"FlaxAutoModelForTokenClassification"),xvt.forEach(t),UPe.forEach(t),jRe=i(c),Dr=n(c,"DIV",{class:!0});var wi=s(Dr);m(b7.$$.fragment,wi),wLr=i(wi),Ff=n(wi,"P",{});var EQ=s(Ff);ALr=r(EQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a token classification head) when created
with the `),J5e=n(EQ,"CODE",{});var kvt=s(J5e);LLr=r(kvt,"from_pretrained()"),kvt.forEach(t),BLr=r(EQ,"class method or the "),Y5e=n(EQ,"CODE",{});var Rvt=s(Y5e);xLr=r(Rvt,"from_config()"),Rvt.forEach(t),kLr=r(EQ,`class
method.`),EQ.forEach(t),RLr=i(wi),v7=n(wi,"P",{});var JPe=s(v7);SLr=r(JPe,"This class cannot be instantiated directly using "),K5e=n(JPe,"CODE",{});var Svt=s(K5e);PLr=r(Svt,"__init__()"),Svt.forEach(t),$Lr=r(JPe," (throws an error)."),JPe.forEach(t),ILr=i(wi),St=n(wi,"DIV",{class:!0});var Ai=s(St);m(T7.$$.fragment,Ai),NLr=i(Ai),Z5e=n(Ai,"P",{});var Pvt=s(Z5e);jLr=r(Pvt,"Instantiates one of the model classes of the library (with a token classification head) from a configuration."),Pvt.forEach(t),DLr=i(Ai),Cf=n(Ai,"P",{});var yQ=s(Cf);qLr=r(yQ,`Note:
Loading a model from its configuration file does `),e2e=n(yQ,"STRONG",{});var $vt=s(e2e);GLr=r($vt,"not"),$vt.forEach(t),OLr=r(yQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),o2e=n(yQ,"CODE",{});var Ivt=s(o2e);XLr=r(Ivt,"from_pretrained()"),Ivt.forEach(t),VLr=r(yQ,"to load the model weights."),yQ.forEach(t),zLr=i(Ai),r2e=n(Ai,"P",{});var Nvt=s(r2e);WLr=r(Nvt,"Examples:"),Nvt.forEach(t),QLr=i(Ai),m(F7.$$.fragment,Ai),Ai.forEach(t),HLr=i(wi),Po=n(wi,"DIV",{class:!0});var $a=s(Po);m(C7.$$.fragment,$a),ULr=i($a),t2e=n($a,"P",{});var jvt=s(t2e);JLr=r(jvt,"Instantiate one of the model classes of the library (with a token classification head) from a pretrained model."),jvt.forEach(t),YLr=i($a),In=n($a,"P",{});var KM=s(In);KLr=r(KM,"The model class to instantiate is selected based on the "),a2e=n(KM,"CODE",{});var Dvt=s(a2e);ZLr=r(Dvt,"model_type"),Dvt.forEach(t),e7r=r(KM,` property of the config object (either
passed as an argument or loaded from `),n2e=n(KM,"CODE",{});var qvt=s(n2e);o7r=r(qvt,"pretrained_model_name_or_path"),qvt.forEach(t),r7r=r(KM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),s2e=n(KM,"CODE",{});var Gvt=s(s2e);t7r=r(Gvt,"pretrained_model_name_or_path"),Gvt.forEach(t),a7r=r(KM,":"),KM.forEach(t),n7r=i($a),Se=n($a,"UL",{});var Oo=s(Se);PC=n(Oo,"LI",{});var wxe=s(PC);l2e=n(wxe,"STRONG",{});var Ovt=s(l2e);s7r=r(Ovt,"albert"),Ovt.forEach(t),l7r=r(wxe," \u2014 "),Cz=n(wxe,"A",{href:!0});var Xvt=s(Cz);i7r=r(Xvt,"FlaxAlbertForTokenClassification"),Xvt.forEach(t),d7r=r(wxe," (ALBERT model)"),wxe.forEach(t),c7r=i(Oo),$C=n(Oo,"LI",{});var Axe=s($C);i2e=n(Axe,"STRONG",{});var Vvt=s(i2e);f7r=r(Vvt,"bert"),Vvt.forEach(t),m7r=r(Axe," \u2014 "),Mz=n(Axe,"A",{href:!0});var zvt=s(Mz);g7r=r(zvt,"FlaxBertForTokenClassification"),zvt.forEach(t),h7r=r(Axe," (BERT model)"),Axe.forEach(t),p7r=i(Oo),IC=n(Oo,"LI",{});var Lxe=s(IC);d2e=n(Lxe,"STRONG",{});var Wvt=s(d2e);_7r=r(Wvt,"big_bird"),Wvt.forEach(t),u7r=r(Lxe," \u2014 "),Ez=n(Lxe,"A",{href:!0});var Qvt=s(Ez);b7r=r(Qvt,"FlaxBigBirdForTokenClassification"),Qvt.forEach(t),v7r=r(Lxe," (BigBird model)"),Lxe.forEach(t),T7r=i(Oo),NC=n(Oo,"LI",{});var Bxe=s(NC);c2e=n(Bxe,"STRONG",{});var Hvt=s(c2e);F7r=r(Hvt,"distilbert"),Hvt.forEach(t),C7r=r(Bxe," \u2014 "),yz=n(Bxe,"A",{href:!0});var Uvt=s(yz);M7r=r(Uvt,"FlaxDistilBertForTokenClassification"),Uvt.forEach(t),E7r=r(Bxe," (DistilBERT model)"),Bxe.forEach(t),y7r=i(Oo),jC=n(Oo,"LI",{});var xxe=s(jC);f2e=n(xxe,"STRONG",{});var Jvt=s(f2e);w7r=r(Jvt,"electra"),Jvt.forEach(t),A7r=r(xxe," \u2014 "),wz=n(xxe,"A",{href:!0});var Yvt=s(wz);L7r=r(Yvt,"FlaxElectraForTokenClassification"),Yvt.forEach(t),B7r=r(xxe," (ELECTRA model)"),xxe.forEach(t),x7r=i(Oo),DC=n(Oo,"LI",{});var kxe=s(DC);m2e=n(kxe,"STRONG",{});var Kvt=s(m2e);k7r=r(Kvt,"roberta"),Kvt.forEach(t),R7r=r(kxe," \u2014 "),Az=n(kxe,"A",{href:!0});var Zvt=s(Az);S7r=r(Zvt,"FlaxRobertaForTokenClassification"),Zvt.forEach(t),P7r=r(kxe," (RoBERTa model)"),kxe.forEach(t),$7r=i(Oo),qC=n(Oo,"LI",{});var Rxe=s(qC);g2e=n(Rxe,"STRONG",{});var e6t=s(g2e);I7r=r(e6t,"roformer"),e6t.forEach(t),N7r=r(Rxe," \u2014 "),Lz=n(Rxe,"A",{href:!0});var o6t=s(Lz);j7r=r(o6t,"FlaxRoFormerForTokenClassification"),o6t.forEach(t),D7r=r(Rxe," (RoFormer model)"),Rxe.forEach(t),q7r=i(Oo),GC=n(Oo,"LI",{});var Sxe=s(GC);h2e=n(Sxe,"STRONG",{});var r6t=s(h2e);G7r=r(r6t,"xlm-roberta"),r6t.forEach(t),O7r=r(Sxe," \u2014 "),Bz=n(Sxe,"A",{href:!0});var t6t=s(Bz);X7r=r(t6t,"FlaxXLMRobertaForTokenClassification"),t6t.forEach(t),V7r=r(Sxe," (XLM-RoBERTa model)"),Sxe.forEach(t),Oo.forEach(t),z7r=i($a),p2e=n($a,"P",{});var a6t=s(p2e);W7r=r(a6t,"Examples:"),a6t.forEach(t),Q7r=i($a),m(M7.$$.fragment,$a),$a.forEach(t),wi.forEach(t),DRe=i(c),Mf=n(c,"H2",{class:!0});var YPe=s(Mf);OC=n(YPe,"A",{id:!0,class:!0,href:!0});var n6t=s(OC);_2e=n(n6t,"SPAN",{});var s6t=s(_2e);m(E7.$$.fragment,s6t),s6t.forEach(t),n6t.forEach(t),H7r=i(YPe),u2e=n(YPe,"SPAN",{});var l6t=s(u2e);U7r=r(l6t,"FlaxAutoModelForMultipleChoice"),l6t.forEach(t),YPe.forEach(t),qRe=i(c),qr=n(c,"DIV",{class:!0});var Li=s(qr);m(y7.$$.fragment,Li),J7r=i(Li),Ef=n(Li,"P",{});var wQ=s(Ef);Y7r=r(wQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a multiple choice head) when created
with the `),b2e=n(wQ,"CODE",{});var i6t=s(b2e);K7r=r(i6t,"from_pretrained()"),i6t.forEach(t),Z7r=r(wQ,"class method or the "),v2e=n(wQ,"CODE",{});var d6t=s(v2e);e8r=r(d6t,"from_config()"),d6t.forEach(t),o8r=r(wQ,`class
method.`),wQ.forEach(t),r8r=i(Li),w7=n(Li,"P",{});var KPe=s(w7);t8r=r(KPe,"This class cannot be instantiated directly using "),T2e=n(KPe,"CODE",{});var c6t=s(T2e);a8r=r(c6t,"__init__()"),c6t.forEach(t),n8r=r(KPe," (throws an error)."),KPe.forEach(t),s8r=i(Li),Pt=n(Li,"DIV",{class:!0});var Bi=s(Pt);m(A7.$$.fragment,Bi),l8r=i(Bi),F2e=n(Bi,"P",{});var f6t=s(F2e);i8r=r(f6t,"Instantiates one of the model classes of the library (with a multiple choice head) from a configuration."),f6t.forEach(t),d8r=i(Bi),yf=n(Bi,"P",{});var AQ=s(yf);c8r=r(AQ,`Note:
Loading a model from its configuration file does `),C2e=n(AQ,"STRONG",{});var m6t=s(C2e);f8r=r(m6t,"not"),m6t.forEach(t),m8r=r(AQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),M2e=n(AQ,"CODE",{});var g6t=s(M2e);g8r=r(g6t,"from_pretrained()"),g6t.forEach(t),h8r=r(AQ,"to load the model weights."),AQ.forEach(t),p8r=i(Bi),E2e=n(Bi,"P",{});var h6t=s(E2e);_8r=r(h6t,"Examples:"),h6t.forEach(t),u8r=i(Bi),m(L7.$$.fragment,Bi),Bi.forEach(t),b8r=i(Li),$o=n(Li,"DIV",{class:!0});var Ia=s($o);m(B7.$$.fragment,Ia),v8r=i(Ia),y2e=n(Ia,"P",{});var p6t=s(y2e);T8r=r(p6t,"Instantiate one of the model classes of the library (with a multiple choice head) from a pretrained model."),p6t.forEach(t),F8r=i(Ia),Nn=n(Ia,"P",{});var ZM=s(Nn);C8r=r(ZM,"The model class to instantiate is selected based on the "),w2e=n(ZM,"CODE",{});var _6t=s(w2e);M8r=r(_6t,"model_type"),_6t.forEach(t),E8r=r(ZM,` property of the config object (either
passed as an argument or loaded from `),A2e=n(ZM,"CODE",{});var u6t=s(A2e);y8r=r(u6t,"pretrained_model_name_or_path"),u6t.forEach(t),w8r=r(ZM,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),L2e=n(ZM,"CODE",{});var b6t=s(L2e);A8r=r(b6t,"pretrained_model_name_or_path"),b6t.forEach(t),L8r=r(ZM,":"),ZM.forEach(t),B8r=i(Ia),Pe=n(Ia,"UL",{});var Xo=s(Pe);XC=n(Xo,"LI",{});var Pxe=s(XC);B2e=n(Pxe,"STRONG",{});var v6t=s(B2e);x8r=r(v6t,"albert"),v6t.forEach(t),k8r=r(Pxe," \u2014 "),xz=n(Pxe,"A",{href:!0});var T6t=s(xz);R8r=r(T6t,"FlaxAlbertForMultipleChoice"),T6t.forEach(t),S8r=r(Pxe," (ALBERT model)"),Pxe.forEach(t),P8r=i(Xo),VC=n(Xo,"LI",{});var $xe=s(VC);x2e=n($xe,"STRONG",{});var F6t=s(x2e);$8r=r(F6t,"bert"),F6t.forEach(t),I8r=r($xe," \u2014 "),kz=n($xe,"A",{href:!0});var C6t=s(kz);N8r=r(C6t,"FlaxBertForMultipleChoice"),C6t.forEach(t),j8r=r($xe," (BERT model)"),$xe.forEach(t),D8r=i(Xo),zC=n(Xo,"LI",{});var Ixe=s(zC);k2e=n(Ixe,"STRONG",{});var M6t=s(k2e);q8r=r(M6t,"big_bird"),M6t.forEach(t),G8r=r(Ixe," \u2014 "),Rz=n(Ixe,"A",{href:!0});var E6t=s(Rz);O8r=r(E6t,"FlaxBigBirdForMultipleChoice"),E6t.forEach(t),X8r=r(Ixe," (BigBird model)"),Ixe.forEach(t),V8r=i(Xo),WC=n(Xo,"LI",{});var Nxe=s(WC);R2e=n(Nxe,"STRONG",{});var y6t=s(R2e);z8r=r(y6t,"distilbert"),y6t.forEach(t),W8r=r(Nxe," \u2014 "),Sz=n(Nxe,"A",{href:!0});var w6t=s(Sz);Q8r=r(w6t,"FlaxDistilBertForMultipleChoice"),w6t.forEach(t),H8r=r(Nxe," (DistilBERT model)"),Nxe.forEach(t),U8r=i(Xo),QC=n(Xo,"LI",{});var jxe=s(QC);S2e=n(jxe,"STRONG",{});var A6t=s(S2e);J8r=r(A6t,"electra"),A6t.forEach(t),Y8r=r(jxe," \u2014 "),Pz=n(jxe,"A",{href:!0});var L6t=s(Pz);K8r=r(L6t,"FlaxElectraForMultipleChoice"),L6t.forEach(t),Z8r=r(jxe," (ELECTRA model)"),jxe.forEach(t),e9r=i(Xo),HC=n(Xo,"LI",{});var Dxe=s(HC);P2e=n(Dxe,"STRONG",{});var B6t=s(P2e);o9r=r(B6t,"roberta"),B6t.forEach(t),r9r=r(Dxe," \u2014 "),$z=n(Dxe,"A",{href:!0});var x6t=s($z);t9r=r(x6t,"FlaxRobertaForMultipleChoice"),x6t.forEach(t),a9r=r(Dxe," (RoBERTa model)"),Dxe.forEach(t),n9r=i(Xo),UC=n(Xo,"LI",{});var qxe=s(UC);$2e=n(qxe,"STRONG",{});var k6t=s($2e);s9r=r(k6t,"roformer"),k6t.forEach(t),l9r=r(qxe," \u2014 "),Iz=n(qxe,"A",{href:!0});var R6t=s(Iz);i9r=r(R6t,"FlaxRoFormerForMultipleChoice"),R6t.forEach(t),d9r=r(qxe," (RoFormer model)"),qxe.forEach(t),c9r=i(Xo),JC=n(Xo,"LI",{});var Gxe=s(JC);I2e=n(Gxe,"STRONG",{});var S6t=s(I2e);f9r=r(S6t,"xlm-roberta"),S6t.forEach(t),m9r=r(Gxe," \u2014 "),Nz=n(Gxe,"A",{href:!0});var P6t=s(Nz);g9r=r(P6t,"FlaxXLMRobertaForMultipleChoice"),P6t.forEach(t),h9r=r(Gxe," (XLM-RoBERTa model)"),Gxe.forEach(t),Xo.forEach(t),p9r=i(Ia),N2e=n(Ia,"P",{});var $6t=s(N2e);_9r=r($6t,"Examples:"),$6t.forEach(t),u9r=i(Ia),m(x7.$$.fragment,Ia),Ia.forEach(t),Li.forEach(t),GRe=i(c),wf=n(c,"H2",{class:!0});var ZPe=s(wf);YC=n(ZPe,"A",{id:!0,class:!0,href:!0});var I6t=s(YC);j2e=n(I6t,"SPAN",{});var N6t=s(j2e);m(k7.$$.fragment,N6t),N6t.forEach(t),I6t.forEach(t),b9r=i(ZPe),D2e=n(ZPe,"SPAN",{});var j6t=s(D2e);v9r=r(j6t,"FlaxAutoModelForNextSentencePrediction"),j6t.forEach(t),ZPe.forEach(t),ORe=i(c),Gr=n(c,"DIV",{class:!0});var xi=s(Gr);m(R7.$$.fragment,xi),T9r=i(xi),Af=n(xi,"P",{});var LQ=s(Af);F9r=r(LQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a next sentence prediction head) when created
with the `),q2e=n(LQ,"CODE",{});var D6t=s(q2e);C9r=r(D6t,"from_pretrained()"),D6t.forEach(t),M9r=r(LQ,"class method or the "),G2e=n(LQ,"CODE",{});var q6t=s(G2e);E9r=r(q6t,"from_config()"),q6t.forEach(t),y9r=r(LQ,`class
method.`),LQ.forEach(t),w9r=i(xi),S7=n(xi,"P",{});var e$e=s(S7);A9r=r(e$e,"This class cannot be instantiated directly using "),O2e=n(e$e,"CODE",{});var G6t=s(O2e);L9r=r(G6t,"__init__()"),G6t.forEach(t),B9r=r(e$e," (throws an error)."),e$e.forEach(t),x9r=i(xi),$t=n(xi,"DIV",{class:!0});var ki=s($t);m(P7.$$.fragment,ki),k9r=i(ki),X2e=n(ki,"P",{});var O6t=s(X2e);R9r=r(O6t,"Instantiates one of the model classes of the library (with a next sentence prediction head) from a configuration."),O6t.forEach(t),S9r=i(ki),Lf=n(ki,"P",{});var BQ=s(Lf);P9r=r(BQ,`Note:
Loading a model from its configuration file does `),V2e=n(BQ,"STRONG",{});var X6t=s(V2e);$9r=r(X6t,"not"),X6t.forEach(t),I9r=r(BQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),z2e=n(BQ,"CODE",{});var V6t=s(z2e);N9r=r(V6t,"from_pretrained()"),V6t.forEach(t),j9r=r(BQ,"to load the model weights."),BQ.forEach(t),D9r=i(ki),W2e=n(ki,"P",{});var z6t=s(W2e);q9r=r(z6t,"Examples:"),z6t.forEach(t),G9r=i(ki),m($7.$$.fragment,ki),ki.forEach(t),O9r=i(xi),Io=n(xi,"DIV",{class:!0});var Na=s(Io);m(I7.$$.fragment,Na),X9r=i(Na),Q2e=n(Na,"P",{});var W6t=s(Q2e);V9r=r(W6t,"Instantiate one of the model classes of the library (with a next sentence prediction head) from a pretrained model."),W6t.forEach(t),z9r=i(Na),jn=n(Na,"P",{});var eE=s(jn);W9r=r(eE,"The model class to instantiate is selected based on the "),H2e=n(eE,"CODE",{});var Q6t=s(H2e);Q9r=r(Q6t,"model_type"),Q6t.forEach(t),H9r=r(eE,` property of the config object (either
passed as an argument or loaded from `),U2e=n(eE,"CODE",{});var H6t=s(U2e);U9r=r(H6t,"pretrained_model_name_or_path"),H6t.forEach(t),J9r=r(eE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),J2e=n(eE,"CODE",{});var U6t=s(J2e);Y9r=r(U6t,"pretrained_model_name_or_path"),U6t.forEach(t),K9r=r(eE,":"),eE.forEach(t),Z9r=i(Na),Y2e=n(Na,"UL",{});var J6t=s(Y2e);KC=n(J6t,"LI",{});var Oxe=s(KC);K2e=n(Oxe,"STRONG",{});var Y6t=s(K2e);eBr=r(Y6t,"bert"),Y6t.forEach(t),oBr=r(Oxe," \u2014 "),jz=n(Oxe,"A",{href:!0});var K6t=s(jz);rBr=r(K6t,"FlaxBertForNextSentencePrediction"),K6t.forEach(t),tBr=r(Oxe," (BERT model)"),Oxe.forEach(t),J6t.forEach(t),aBr=i(Na),Z2e=n(Na,"P",{});var Z6t=s(Z2e);nBr=r(Z6t,"Examples:"),Z6t.forEach(t),sBr=i(Na),m(N7.$$.fragment,Na),Na.forEach(t),xi.forEach(t),XRe=i(c),Bf=n(c,"H2",{class:!0});var o$e=s(Bf);ZC=n(o$e,"A",{id:!0,class:!0,href:!0});var eTt=s(ZC);eve=n(eTt,"SPAN",{});var oTt=s(eve);m(j7.$$.fragment,oTt),oTt.forEach(t),eTt.forEach(t),lBr=i(o$e),ove=n(o$e,"SPAN",{});var rTt=s(ove);iBr=r(rTt,"FlaxAutoModelForImageClassification"),rTt.forEach(t),o$e.forEach(t),VRe=i(c),Or=n(c,"DIV",{class:!0});var Ri=s(Or);m(D7.$$.fragment,Ri),dBr=i(Ri),xf=n(Ri,"P",{});var xQ=s(xf);cBr=r(xQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a image classification head) when created
with the `),rve=n(xQ,"CODE",{});var tTt=s(rve);fBr=r(tTt,"from_pretrained()"),tTt.forEach(t),mBr=r(xQ,"class method or the "),tve=n(xQ,"CODE",{});var aTt=s(tve);gBr=r(aTt,"from_config()"),aTt.forEach(t),hBr=r(xQ,`class
method.`),xQ.forEach(t),pBr=i(Ri),q7=n(Ri,"P",{});var r$e=s(q7);_Br=r(r$e,"This class cannot be instantiated directly using "),ave=n(r$e,"CODE",{});var nTt=s(ave);uBr=r(nTt,"__init__()"),nTt.forEach(t),bBr=r(r$e," (throws an error)."),r$e.forEach(t),vBr=i(Ri),It=n(Ri,"DIV",{class:!0});var Si=s(It);m(G7.$$.fragment,Si),TBr=i(Si),nve=n(Si,"P",{});var sTt=s(nve);FBr=r(sTt,"Instantiates one of the model classes of the library (with a image classification head) from a configuration."),sTt.forEach(t),CBr=i(Si),kf=n(Si,"P",{});var kQ=s(kf);MBr=r(kQ,`Note:
Loading a model from its configuration file does `),sve=n(kQ,"STRONG",{});var lTt=s(sve);EBr=r(lTt,"not"),lTt.forEach(t),yBr=r(kQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),lve=n(kQ,"CODE",{});var iTt=s(lve);wBr=r(iTt,"from_pretrained()"),iTt.forEach(t),ABr=r(kQ,"to load the model weights."),kQ.forEach(t),LBr=i(Si),ive=n(Si,"P",{});var dTt=s(ive);BBr=r(dTt,"Examples:"),dTt.forEach(t),xBr=i(Si),m(O7.$$.fragment,Si),Si.forEach(t),kBr=i(Ri),No=n(Ri,"DIV",{class:!0});var ja=s(No);m(X7.$$.fragment,ja),RBr=i(ja),dve=n(ja,"P",{});var cTt=s(dve);SBr=r(cTt,"Instantiate one of the model classes of the library (with a image classification head) from a pretrained model."),cTt.forEach(t),PBr=i(ja),Dn=n(ja,"P",{});var oE=s(Dn);$Br=r(oE,"The model class to instantiate is selected based on the "),cve=n(oE,"CODE",{});var fTt=s(cve);IBr=r(fTt,"model_type"),fTt.forEach(t),NBr=r(oE,` property of the config object (either
passed as an argument or loaded from `),fve=n(oE,"CODE",{});var mTt=s(fve);jBr=r(mTt,"pretrained_model_name_or_path"),mTt.forEach(t),DBr=r(oE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),mve=n(oE,"CODE",{});var gTt=s(mve);qBr=r(gTt,"pretrained_model_name_or_path"),gTt.forEach(t),GBr=r(oE,":"),oE.forEach(t),OBr=i(ja),V7=n(ja,"UL",{});var t$e=s(V7);eM=n(t$e,"LI",{});var Xxe=s(eM);gve=n(Xxe,"STRONG",{});var hTt=s(gve);XBr=r(hTt,"beit"),hTt.forEach(t),VBr=r(Xxe," \u2014 "),Dz=n(Xxe,"A",{href:!0});var pTt=s(Dz);zBr=r(pTt,"FlaxBeitForImageClassification"),pTt.forEach(t),WBr=r(Xxe," (BEiT model)"),Xxe.forEach(t),QBr=i(t$e),oM=n(t$e,"LI",{});var Vxe=s(oM);hve=n(Vxe,"STRONG",{});var _Tt=s(hve);HBr=r(_Tt,"vit"),_Tt.forEach(t),UBr=r(Vxe," \u2014 "),qz=n(Vxe,"A",{href:!0});var uTt=s(qz);JBr=r(uTt,"FlaxViTForImageClassification"),uTt.forEach(t),YBr=r(Vxe," (ViT model)"),Vxe.forEach(t),t$e.forEach(t),KBr=i(ja),pve=n(ja,"P",{});var bTt=s(pve);ZBr=r(bTt,"Examples:"),bTt.forEach(t),exr=i(ja),m(z7.$$.fragment,ja),ja.forEach(t),Ri.forEach(t),zRe=i(c),Rf=n(c,"H2",{class:!0});var a$e=s(Rf);rM=n(a$e,"A",{id:!0,class:!0,href:!0});var vTt=s(rM);_ve=n(vTt,"SPAN",{});var TTt=s(_ve);m(W7.$$.fragment,TTt),TTt.forEach(t),vTt.forEach(t),oxr=i(a$e),uve=n(a$e,"SPAN",{});var FTt=s(uve);rxr=r(FTt,"FlaxAutoModelForVision2Seq"),FTt.forEach(t),a$e.forEach(t),WRe=i(c),Xr=n(c,"DIV",{class:!0});var Pi=s(Xr);m(Q7.$$.fragment,Pi),txr=i(Pi),Sf=n(Pi,"P",{});var RQ=s(Sf);axr=r(RQ,`This is a generic model class that will be instantiated as one of the model classes of the library (with a vision-to-text modeling head) when created
with the `),bve=n(RQ,"CODE",{});var CTt=s(bve);nxr=r(CTt,"from_pretrained()"),CTt.forEach(t),sxr=r(RQ,"class method or the "),vve=n(RQ,"CODE",{});var MTt=s(vve);lxr=r(MTt,"from_config()"),MTt.forEach(t),ixr=r(RQ,`class
method.`),RQ.forEach(t),dxr=i(Pi),H7=n(Pi,"P",{});var n$e=s(H7);cxr=r(n$e,"This class cannot be instantiated directly using "),Tve=n(n$e,"CODE",{});var ETt=s(Tve);fxr=r(ETt,"__init__()"),ETt.forEach(t),mxr=r(n$e," (throws an error)."),n$e.forEach(t),gxr=i(Pi),Nt=n(Pi,"DIV",{class:!0});var $i=s(Nt);m(U7.$$.fragment,$i),hxr=i($i),Fve=n($i,"P",{});var yTt=s(Fve);pxr=r(yTt,"Instantiates one of the model classes of the library (with a vision-to-text modeling head) from a configuration."),yTt.forEach(t),_xr=i($i),Pf=n($i,"P",{});var SQ=s(Pf);uxr=r(SQ,`Note:
Loading a model from its configuration file does `),Cve=n(SQ,"STRONG",{});var wTt=s(Cve);bxr=r(wTt,"not"),wTt.forEach(t),vxr=r(SQ,` load the model weights. It only affects the
model\u2019s configuration. Use `),Mve=n(SQ,"CODE",{});var ATt=s(Mve);Txr=r(ATt,"from_pretrained()"),ATt.forEach(t),Fxr=r(SQ,"to load the model weights."),SQ.forEach(t),Cxr=i($i),Eve=n($i,"P",{});var LTt=s(Eve);Mxr=r(LTt,"Examples:"),LTt.forEach(t),Exr=i($i),m(J7.$$.fragment,$i),$i.forEach(t),yxr=i(Pi),jo=n(Pi,"DIV",{class:!0});var Da=s(jo);m(Y7.$$.fragment,Da),wxr=i(Da),yve=n(Da,"P",{});var BTt=s(yve);Axr=r(BTt,"Instantiate one of the model classes of the library (with a vision-to-text modeling head) from a pretrained model."),BTt.forEach(t),Lxr=i(Da),qn=n(Da,"P",{});var rE=s(qn);Bxr=r(rE,"The model class to instantiate is selected based on the "),wve=n(rE,"CODE",{});var xTt=s(wve);xxr=r(xTt,"model_type"),xTt.forEach(t),kxr=r(rE,` property of the config object (either
passed as an argument or loaded from `),Ave=n(rE,"CODE",{});var kTt=s(Ave);Rxr=r(kTt,"pretrained_model_name_or_path"),kTt.forEach(t),Sxr=r(rE,` if possible), or when it\u2019s missing, by
falling back to using pattern matching on `),Lve=n(rE,"CODE",{});var RTt=s(Lve);Pxr=r(RTt,"pretrained_model_name_or_path"),RTt.forEach(t),$xr=r(rE,":"),rE.forEach(t),Ixr=i(Da),Bve=n(Da,"UL",{});var STt=s(Bve);tM=n(STt,"LI",{});var zxe=s(tM);xve=n(zxe,"STRONG",{});var PTt=s(xve);Nxr=r(PTt,"vision-encoder-decoder"),PTt.forEach(t),jxr=r(zxe," \u2014 "),Gz=n(zxe,"A",{href:!0});var $Tt=s(Gz);Dxr=r($Tt,"FlaxVisionEncoderDecoderModel"),$Tt.forEach(t),qxr=r(zxe," (Vision Encoder decoder model)"),zxe.forEach(t),STt.forEach(t),Gxr=i(Da),kve=n(Da,"P",{});var ITt=s(kve);Oxr=r(ITt,"Examples:"),ITt.forEach(t),Xxr=i(Da),m(K7.$$.fragment,Da),Da.forEach(t),Pi.forEach(t),this.h()},h(){d(J,"name","hf:doc:metadata"),d(J,"content",JSON.stringify(zTt)),d(pe,"id","auto-classes"),d(pe,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(pe,"href","#auto-classes"),d(de,"class","relative group"),d(Gn,"href","/docs/transformers/pr_16345/en/model_doc/auto#transformers.AutoConfig"),d(Xn,"href","/docs/transformers/pr_16345/en/model_doc/auto#transformers.AutoModel"),d(Vn,"href","/docs/transformers/pr_16345/en/model_doc/auto#transformers.AutoTokenizer"),d(Xi,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertModel"),d(qf,"id","extending-the-auto-classes"),d(qf,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qf,"href","#extending-the-auto-classes"),d(Vi,"class","relative group"),d(Of,"id","transformers.AutoConfig"),d(Of,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Of,"href","#transformers.AutoConfig"),d(zi,"class","relative group"),d(r9,"href","/docs/transformers/pr_16345/en/model_doc/auto#transformers.AutoConfig.from_pretrained"),d(t9,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertConfig"),d(a9,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartConfig"),d(n9,"href","/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitConfig"),d(s9,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertConfig"),d(l9,"href","/docs/transformers/pr_16345/en/model_doc/bert-generation#transformers.BertGenerationConfig"),d(i9,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdConfig"),d(d9,"href","/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusConfig"),d(c9,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotConfig"),d(f9,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallConfig"),d(m9,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertConfig"),d(g9,"href","/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineConfig"),d(h9,"href","/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPConfig"),d(p9,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertConfig"),d(_9,"href","/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextConfig"),d(u9,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLConfig"),d(b9,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioConfig"),d(v9,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextConfig"),d(T9,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaConfig"),d(F9,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Config"),d(C9,"href","/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTConfig"),d(M9,"href","/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrConfig"),d(E9,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertConfig"),d(y9,"href","/docs/transformers/pr_16345/en/model_doc/dpr#transformers.DPRConfig"),d(w9,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraConfig"),d(A9,"href","/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.EncoderDecoderConfig"),d(L9,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertConfig"),d(B9,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetConfig"),d(x9,"href","/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTConfig"),d(k9,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelConfig"),d(R9,"href","/docs/transformers/pr_16345/en/model_doc/glpn#transformers.GLPNConfig"),d(S9,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Config"),d(P9,"href","/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoConfig"),d($9,"href","/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJConfig"),d(I9,"href","/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertConfig"),d(N9,"href","/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertConfig"),d(j9,"href","/docs/transformers/pr_16345/en/model_doc/imagegpt#transformers.ImageGPTConfig"),d(D9,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMConfig"),d(q9,"href","/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2Config"),d(G9,"href","/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDConfig"),d(O9,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerConfig"),d(X9,"href","/docs/transformers/pr_16345/en/model_doc/luke#transformers.LukeConfig"),d(V9,"href","/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertConfig"),d(z9,"href","/docs/transformers/pr_16345/en/model_doc/m2m_100#transformers.M2M100Config"),d(W9,"href","/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianConfig"),d(Q9,"href","/docs/transformers/pr_16345/en/model_doc/maskformer#transformers.MaskFormerConfig"),d(H9,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartConfig"),d(U9,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertConfig"),d(J9,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertConfig"),d(Y9,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetConfig"),d(K9,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Config"),d(Z9,"href","/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerConfig"),d(eB,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTConfig"),d(oB,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusConfig"),d(rB,"href","/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverConfig"),d(tB,"href","/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartConfig"),d(aB,"href","/docs/transformers/pr_16345/en/model_doc/poolformer#transformers.PoolFormerConfig"),d(nB,"href","/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetConfig"),d(sB,"href","/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertConfig"),d(lB,"href","/docs/transformers/pr_16345/en/model_doc/rag#transformers.RagConfig"),d(iB,"href","/docs/transformers/pr_16345/en/model_doc/realm#transformers.RealmConfig"),d(dB,"href","/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerConfig"),d(cB,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertConfig"),d(fB,"href","/docs/transformers/pr_16345/en/model_doc/resnet#transformers.ResNetConfig"),d(mB,"href","/docs/transformers/pr_16345/en/model_doc/retribert#transformers.RetriBertConfig"),d(gB,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaConfig"),d(hB,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerConfig"),d(pB,"href","/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerConfig"),d(_B,"href","/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWConfig"),d(uB,"href","/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDConfig"),d(bB,"href","/docs/transformers/pr_16345/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderConfig"),d(vB,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextConfig"),d(TB,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text_2#transformers.Speech2Text2Config"),d(FB,"href","/docs/transformers/pr_16345/en/model_doc/splinter#transformers.SplinterConfig"),d(CB,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertConfig"),d(MB,"href","/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinConfig"),d(EB,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Config"),d(yB,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasConfig"),d(wB,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLConfig"),d(AB,"href","/docs/transformers/pr_16345/en/model_doc/trocr#transformers.TrOCRConfig"),d(LB,"href","/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechConfig"),d(BB,"href","/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatConfig"),d(xB,"href","/docs/transformers/pr_16345/en/model_doc/van#transformers.VanConfig"),d(kB,"href","/docs/transformers/pr_16345/en/model_doc/vilt#transformers.ViltConfig"),d(RB,"href","/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderConfig"),d(SB,"href","/docs/transformers/pr_16345/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderConfig"),d(PB,"href","/docs/transformers/pr_16345/en/model_doc/visual_bert#transformers.VisualBertConfig"),d($B,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTConfig"),d(IB,"href","/docs/transformers/pr_16345/en/model_doc/vit_mae#transformers.ViTMAEConfig"),d(NB,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Config"),d(jB,"href","/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMConfig"),d(DB,"href","/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMConfig"),d(qB,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMConfig"),d(GB,"href","/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetConfig"),d(OB,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaConfig"),d(XB,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLConfig"),d(VB,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetConfig"),d(zB,"href","/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoConfig"),d(mo,"class","docstring"),d(Rg,"class","docstring"),d(Wo,"class","docstring"),d(Sg,"id","transformers.AutoTokenizer"),d(Sg,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Sg,"href","#transformers.AutoTokenizer"),d(Qi,"class","relative group"),d(WB,"href","/docs/transformers/pr_16345/en/model_doc/auto#transformers.AutoTokenizer.from_pretrained"),d(QB,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertTokenizer"),d(HB,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertTokenizerFast"),d(UB,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartTokenizer"),d(JB,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartTokenizerFast"),d(YB,"href","/docs/transformers/pr_16345/en/model_doc/barthez#transformers.BarthezTokenizer"),d(KB,"href","/docs/transformers/pr_16345/en/model_doc/barthez#transformers.BarthezTokenizerFast"),d(ZB,"href","/docs/transformers/pr_16345/en/model_doc/bartpho#transformers.BartphoTokenizer"),d(ex,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertTokenizer"),d(ox,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertTokenizerFast"),d(rx,"href","/docs/transformers/pr_16345/en/model_doc/bert-generation#transformers.BertGenerationTokenizer"),d(tx,"href","/docs/transformers/pr_16345/en/model_doc/bert-japanese#transformers.BertJapaneseTokenizer"),d(ax,"href","/docs/transformers/pr_16345/en/model_doc/bertweet#transformers.BertweetTokenizer"),d(nx,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdTokenizer"),d(sx,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdTokenizerFast"),d(lx,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(ix,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(dx,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotTokenizer"),d(cx,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotTokenizerFast"),d(fx,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallTokenizer"),d(mx,"href","/docs/transformers/pr_16345/en/model_doc/byt5#transformers.ByT5Tokenizer"),d(gx,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertTokenizer"),d(hx,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertTokenizerFast"),d(px,"href","/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineTokenizer"),d(_x,"href","/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPTokenizer"),d(ux,"href","/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPTokenizerFast"),d(bx,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertTokenizer"),d(vx,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertTokenizerFast"),d(Tx,"href","/docs/transformers/pr_16345/en/model_doc/cpm#transformers.CpmTokenizer"),d(Fx,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLTokenizer"),d(Cx,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaTokenizer"),d(Mx,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaTokenizerFast"),d(Ex,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Tokenizer"),d(yx,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertTokenizer"),d(wx,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertTokenizerFast"),d(Ax,"href","/docs/transformers/pr_16345/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizer"),d(Lx,"href","/docs/transformers/pr_16345/en/model_doc/dpr#transformers.DPRQuestionEncoderTokenizerFast"),d(Bx,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraTokenizer"),d(xx,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraTokenizerFast"),d(kx,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertTokenizer"),d(Rx,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetTokenizer"),d(Sx,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetTokenizerFast"),d(Px,"href","/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTTokenizer"),d($x,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelTokenizer"),d(Ix,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelTokenizerFast"),d(Nx,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(jx,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Dx,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Tokenizer"),d(qx,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2TokenizerFast"),d(Gx,"href","/docs/transformers/pr_16345/en/model_doc/herbert#transformers.HerbertTokenizer"),d(Ox,"href","/docs/transformers/pr_16345/en/model_doc/herbert#transformers.HerbertTokenizerFast"),d(Xx,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Vx,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaTokenizer"),d(zx,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Wx,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMTokenizer"),d(Qx,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMTokenizerFast"),d(Hx,"href","/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2Tokenizer"),d(Ux,"href","/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2TokenizerFast"),d(Jx,"href","/docs/transformers/pr_16345/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizer"),d(Yx,"href","/docs/transformers/pr_16345/en/model_doc/layoutxlm#transformers.LayoutXLMTokenizerFast"),d(Kx,"href","/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDTokenizer"),d(Zx,"href","/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDTokenizerFast"),d(ek,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerTokenizer"),d(ok,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerTokenizerFast"),d(rk,"href","/docs/transformers/pr_16345/en/model_doc/luke#transformers.LukeTokenizer"),d(tk,"href","/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertTokenizer"),d(ak,"href","/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertTokenizerFast"),d(nk,"href","/docs/transformers/pr_16345/en/model_doc/m2m_100#transformers.M2M100Tokenizer"),d(sk,"href","/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianTokenizer"),d(lk,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartTokenizer"),d(ik,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartTokenizerFast"),d(dk,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBart50Tokenizer"),d(ck,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBart50TokenizerFast"),d(fk,"href","/docs/transformers/pr_16345/en/model_doc/mluke#transformers.MLukeTokenizer"),d(mk,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertTokenizer"),d(gk,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertTokenizerFast"),d(hk,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetTokenizer"),d(pk,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetTokenizerFast"),d(_k,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.T5Tokenizer"),d(uk,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.T5TokenizerFast"),d(bk,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizer"),d(vk,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTTokenizerFast"),d(Tk,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusTokenizer"),d(Fk,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusTokenizerFast"),d(Ck,"href","/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverTokenizer"),d(Mk,"href","/docs/transformers/pr_16345/en/model_doc/phobert#transformers.PhobertTokenizer"),d(Ek,"href","/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartTokenizer"),d(yk,"href","/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetTokenizer"),d(wk,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertTokenizer"),d(Ak,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertTokenizerFast"),d(Lk,"href","/docs/transformers/pr_16345/en/model_doc/rag#transformers.RagTokenizer"),d(Bk,"href","/docs/transformers/pr_16345/en/model_doc/realm#transformers.RealmTokenizer"),d(xk,"href","/docs/transformers/pr_16345/en/model_doc/realm#transformers.RealmTokenizerFast"),d(kk,"href","/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerTokenizer"),d(Rk,"href","/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerTokenizerFast"),d(Sk,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertTokenizer"),d(Pk,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertTokenizerFast"),d($k,"href","/docs/transformers/pr_16345/en/model_doc/retribert#transformers.RetriBertTokenizer"),d(Ik,"href","/docs/transformers/pr_16345/en/model_doc/retribert#transformers.RetriBertTokenizerFast"),d(Nk,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaTokenizer"),d(jk,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaTokenizerFast"),d(Dk,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerTokenizer"),d(qk,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerTokenizerFast"),d(Gk,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextTokenizer"),d(Ok,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text_2#transformers.Speech2Text2Tokenizer"),d(Xk,"href","/docs/transformers/pr_16345/en/model_doc/splinter#transformers.SplinterTokenizer"),d(Vk,"href","/docs/transformers/pr_16345/en/model_doc/splinter#transformers.SplinterTokenizerFast"),d(zk,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertTokenizer"),d(Wk,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertTokenizerFast"),d(Qk,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.T5Tokenizer"),d(Hk,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.T5TokenizerFast"),d(Uk,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasTokenizer"),d(Jk,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLTokenizer"),d(Yk,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2CTCTokenizer"),d(Kk,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2_phoneme#transformers.Wav2Vec2PhonemeCTCTokenizer"),d(Zk,"href","/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMTokenizer"),d(eR,"href","/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMTokenizerFast"),d(oR,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMTokenizer"),d(rR,"href","/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetTokenizer"),d(tR,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizer"),d(aR,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaTokenizerFast"),d(nR,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetTokenizer"),d(sR,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetTokenizerFast"),d(go,"class","docstring"),d(dh,"class","docstring"),d(Qo,"class","docstring"),d(ch,"id","transformers.AutoFeatureExtractor"),d(ch,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ch,"href","#transformers.AutoFeatureExtractor"),d(Hi,"class","relative group"),d(lR,"href","/docs/transformers/pr_16345/en/model_doc/auto#transformers.AutoFeatureExtractor.from_pretrained"),d(iR,"href","/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitFeatureExtractor"),d(dR,"href","/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPFeatureExtractor"),d(cR,"href","/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(fR,"href","/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTFeatureExtractor"),d(mR,"href","/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrFeatureExtractor"),d(gR,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(hR,"href","/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2FeatureExtractor"),d(pR,"href","/docs/transformers/pr_16345/en/model_doc/maskformer#transformers.MaskFormerFeatureExtractor"),d(_R,"href","/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverFeatureExtractor"),d(uR,"href","/docs/transformers/pr_16345/en/model_doc/poolformer#transformers.PoolFormerFeatureExtractor"),d(bR,"href","/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(vR,"href","/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerFeatureExtractor"),d(TR,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextFeatureExtractor"),d(FR,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(CR,"href","/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextFeatureExtractor"),d(MR,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(ER,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTFeatureExtractor"),d(yR,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2FeatureExtractor"),d(Ie,"class","docstring"),d(xh,"class","docstring"),d(Ho,"class","docstring"),d(kh,"id","transformers.AutoProcessor"),d(kh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kh,"href","#transformers.AutoProcessor"),d(Ui,"class","relative group"),d(wR,"href","/docs/transformers/pr_16345/en/model_doc/auto#transformers.AutoProcessor.from_pretrained"),d(AR,"href","/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPProcessor"),d(LR,"href","/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2Processor"),d(BR,"href","/docs/transformers/pr_16345/en/model_doc/layoutxlm#transformers.LayoutXLMProcessor"),d(xR,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextProcessor"),d(kR,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text_2#transformers.Speech2Text2Processor"),d(RR,"href","/docs/transformers/pr_16345/en/model_doc/trocr#transformers.TrOCRProcessor"),d(SR,"href","/docs/transformers/pr_16345/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderProcessor"),d(PR,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Processor"),d(Ne,"class","docstring"),d(Gh,"class","docstring"),d(Uo,"class","docstring"),d(Oh,"id","transformers.AutoModel"),d(Oh,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Oh,"href","#transformers.AutoModel"),d(Yi,"class","relative group"),d(Vr,"class","docstring"),d($R,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertModel"),d(IR,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartModel"),d(NR,"href","/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitModel"),d(jR,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertModel"),d(DR,"href","/docs/transformers/pr_16345/en/model_doc/bert-generation#transformers.BertGenerationEncoder"),d(qR,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdModel"),d(GR,"href","/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusModel"),d(OR,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotModel"),d(XR,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallModel"),d(VR,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertModel"),d(zR,"href","/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineModel"),d(WR,"href","/docs/transformers/pr_16345/en/model_doc/clip#transformers.CLIPModel"),d(QR,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertModel"),d(HR,"href","/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextModel"),d(UR,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLModel"),d(JR,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioModel"),d(YR,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextModel"),d(KR,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaModel"),d(ZR,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2Model"),d(eS,"href","/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTModel"),d(oS,"href","/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrModel"),d(rS,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertModel"),d(tS,"href","/docs/transformers/pr_16345/en/model_doc/dpr#transformers.DPRQuestionEncoder"),d(aS,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraModel"),d(nS,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertModel"),d(sS,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetModel"),d(lS,"href","/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTModel"),d(iS,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelModel"),d(dS,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelBaseModel"),d(cS,"href","/docs/transformers/pr_16345/en/model_doc/glpn#transformers.GLPNModel"),d(fS,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2Model"),d(mS,"href","/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoModel"),d(gS,"href","/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJModel"),d(hS,"href","/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertModel"),d(pS,"href","/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertModel"),d(_S,"href","/docs/transformers/pr_16345/en/model_doc/imagegpt#transformers.ImageGPTModel"),d(uS,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMModel"),d(bS,"href","/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2Model"),d(vS,"href","/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDModel"),d(TS,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerModel"),d(FS,"href","/docs/transformers/pr_16345/en/model_doc/luke#transformers.LukeModel"),d(CS,"href","/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertModel"),d(MS,"href","/docs/transformers/pr_16345/en/model_doc/m2m_100#transformers.M2M100Model"),d(ES,"href","/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianModel"),d(yS,"href","/docs/transformers/pr_16345/en/model_doc/maskformer#transformers.MaskFormerModel"),d(wS,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartModel"),d(AS,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertModel"),d(LS,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertModel"),d(BS,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetModel"),d(xS,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5Model"),d(kS,"href","/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerModel"),d(RS,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTModel"),d(SS,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusModel"),d(PS,"href","/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverModel"),d($S,"href","/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartModel"),d(IS,"href","/docs/transformers/pr_16345/en/model_doc/poolformer#transformers.PoolFormerModel"),d(NS,"href","/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetModel"),d(jS,"href","/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertModel"),d(DS,"href","/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerModel"),d(qS,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertModel"),d(GS,"href","/docs/transformers/pr_16345/en/model_doc/resnet#transformers.ResNetModel"),d(OS,"href","/docs/transformers/pr_16345/en/model_doc/retribert#transformers.RetriBertModel"),d(XS,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaModel"),d(VS,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerModel"),d(zS,"href","/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerModel"),d(WS,"href","/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWModel"),d(QS,"href","/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDModel"),d(HS,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextModel"),d(US,"href","/docs/transformers/pr_16345/en/model_doc/splinter#transformers.SplinterModel"),d(JS,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertModel"),d(YS,"href","/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinModel"),d(KS,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5Model"),d(ZS,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasModel"),d(eP,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLModel"),d(oP,"href","/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechModel"),d(rP,"href","/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatModel"),d(tP,"href","/docs/transformers/pr_16345/en/model_doc/van#transformers.VanModel"),d(aP,"href","/docs/transformers/pr_16345/en/model_doc/vilt#transformers.ViltModel"),d(nP,"href","/docs/transformers/pr_16345/en/model_doc/vision-text-dual-encoder#transformers.VisionTextDualEncoderModel"),d(sP,"href","/docs/transformers/pr_16345/en/model_doc/visual_bert#transformers.VisualBertModel"),d(lP,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTModel"),d(iP,"href","/docs/transformers/pr_16345/en/model_doc/vit_mae#transformers.ViTMAEModel"),d(dP,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2Model"),d(cP,"href","/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMModel"),d(fP,"href","/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMModel"),d(mP,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMModel"),d(gP,"href","/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetModel"),d(hP,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaModel"),d(pP,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLModel"),d(_P,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetModel"),d(uP,"href","/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoModel"),d(je,"class","docstring"),d(Jo,"class","docstring"),d(y_,"id","transformers.AutoModelForPreTraining"),d(y_,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(y_,"href","#transformers.AutoModelForPreTraining"),d(ed,"class","relative group"),d(zr,"class","docstring"),d(bP,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForPreTraining"),d(vP,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(TP,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForPreTraining"),d(FP,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForPreTraining"),d(CP,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(MP,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(EP,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(yP,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(wP,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(AP,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(LP,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForPreTraining"),d(BP,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(xP,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForPreTraining"),d(kP,"href","/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(RP,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForPreTraining"),d(SP,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(PP,"href","/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForMaskedLM"),d($P,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(IP,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(NP,"href","/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertForPreTraining"),d(jP,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForPreTraining"),d(DP,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForPreTraining"),d(qP,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(GP,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(OP,"href","/docs/transformers/pr_16345/en/model_doc/retribert#transformers.RetriBertModel"),d(XP,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(VP,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(zP,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(WP,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(QP,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(HP,"href","/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechForPreTraining"),d(UP,"href","/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForPreTraining"),d(JP,"href","/docs/transformers/pr_16345/en/model_doc/visual_bert#transformers.VisualBertForPreTraining"),d(YP,"href","/docs/transformers/pr_16345/en/model_doc/vit_mae#transformers.ViTMAEForPreTraining"),d(KP,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForPreTraining"),d(ZP,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(e$,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(o$,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(r$,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(De,"class","docstring"),d(Yo,"class","docstring"),d(mu,"id","transformers.AutoModelForCausalLM"),d(mu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mu,"href","#transformers.AutoModelForCausalLM"),d(td,"class","relative group"),d(Wr,"class","docstring"),d(t$,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForCausalLM"),d(a$,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertLMHeadModel"),d(n$,"href","/docs/transformers/pr_16345/en/model_doc/bert-generation#transformers.BertGenerationDecoder"),d(s$,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForCausalLM"),d(l$,"href","/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForCausalLM"),d(i$,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotForCausalLM"),d(d$,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForCausalLM"),d(c$,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForCausalLM"),d(f$,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLLMHeadModel"),d(m$,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForCausalLM"),d(g$,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForCausalLM"),d(h$,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2LMHeadModel"),d(p$,"href","/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoForCausalLM"),d(_$,"href","/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJForCausalLM"),d(u$,"href","/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianForCausalLM"),d(b$,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForCausalLM"),d(v$,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForCausalLM"),d(T$,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTLMHeadModel"),d(F$,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusForCausalLM"),d(C$,"href","/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartForCausalLM"),d(M$,"href","/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetForCausalLM"),d(E$,"href","/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertLMHeadModel"),d(y$,"href","/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerModelWithLMHead"),d(w$,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForCausalLM"),d(A$,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForCausalLM"),d(L$,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForCausalLM"),d(B$,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text_2#transformers.Speech2Text2ForCausalLM"),d(x$,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLLMHeadModel"),d(k$,"href","/docs/transformers/pr_16345/en/model_doc/trocr#transformers.TrOCRForCausalLM"),d(R$,"href","/docs/transformers/pr_16345/en/model_doc/xglm#transformers.XGLMForCausalLM"),d(S$,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(P$,"href","/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForCausalLM"),d($$,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForCausalLM"),d(I$,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForCausalLM"),d(N$,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetLMHeadModel"),d(qe,"class","docstring"),d(Ko,"class","docstring"),d(Uu,"id","transformers.AutoModelForMaskedLM"),d(Uu,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Uu,"href","#transformers.AutoModelForMaskedLM"),d(sd,"class","relative group"),d(Qr,"class","docstring"),d(j$,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForMaskedLM"),d(D$,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(q$,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForMaskedLM"),d(G$,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForMaskedLM"),d(O$,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForMaskedLM"),d(X$,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForMaskedLM"),d(V$,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForMaskedLM"),d(z$,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForMaskedLM"),d(W$,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForMaskedLM"),d(Q$,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForMaskedLM"),d(H$,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForMaskedLM"),d(U$,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertWithLMHeadModel"),d(J$,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForMaskedLM"),d(Y$,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForMaskedLM"),d(K$,"href","/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForMaskedLM"),d(Z$,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMForMaskedLM"),d(eI,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForMaskedLM"),d(oI,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(rI,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForMaskedLM"),d(tI,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForMaskedLM"),d(aI,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForMaskedLM"),d(nI,"href","/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForMaskedLM"),d(sI,"href","/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForMaskedLM"),d(lI,"href","/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForMaskedLM"),d(iI,"href","/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerForMaskedLM"),d(dI,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForMaskedLM"),d(cI,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForMaskedLM"),d(fI,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForMaskedLM"),d(mI,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForMaskedLM"),d(gI,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasForMaskedLM"),d(hI,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMWithLMHeadModel"),d(pI,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForMaskedLM"),d(_I,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMaskedLM"),d(uI,"href","/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForMaskedLM"),d(Ge,"class","docstring"),d(Zo,"class","docstring"),d(R1,"id","transformers.AutoModelForSeq2SeqLM"),d(R1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(R1,"href","#transformers.AutoModelForSeq2SeqLM"),d(dd,"class","relative group"),d(Hr,"class","docstring"),d(bI,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForConditionalGeneration"),d(vI,"href","/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForConditionalGeneration"),d(TI,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.BlenderbotForConditionalGeneration"),d(FI,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.BlenderbotSmallForConditionalGeneration"),d(CI,"href","/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.EncoderDecoderModel"),d(MI,"href","/docs/transformers/pr_16345/en/model_doc/fsmt#transformers.FSMTForConditionalGeneration"),d(EI,"href","/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDForConditionalGeneration"),d(yI,"href","/docs/transformers/pr_16345/en/model_doc/m2m_100#transformers.M2M100ForConditionalGeneration"),d(wI,"href","/docs/transformers/pr_16345/en/model_doc/marian#transformers.MarianMTModel"),d(AI,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForConditionalGeneration"),d(LI,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.MT5ForConditionalGeneration"),d(BI,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.PegasusForConditionalGeneration"),d(xI,"href","/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartForConditionalGeneration"),d(kI,"href","/docs/transformers/pr_16345/en/model_doc/prophetnet#transformers.ProphetNetForConditionalGeneration"),d(RI,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.T5ForConditionalGeneration"),d(SI,"href","/docs/transformers/pr_16345/en/model_doc/xlm-prophetnet#transformers.XLMProphetNetForConditionalGeneration"),d(Oe,"class","docstring"),d(er,"class","docstring"),d(J1,"id","transformers.AutoModelForSequenceClassification"),d(J1,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(J1,"href","#transformers.AutoModelForSequenceClassification"),d(md,"class","relative group"),d(Ur,"class","docstring"),d(PI,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForSequenceClassification"),d($I,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForSequenceClassification"),d(II,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForSequenceClassification"),d(NI,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForSequenceClassification"),d(jI,"href","/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForSequenceClassification"),d(DI,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForSequenceClassification"),d(qI,"href","/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineForSequenceClassification"),d(GI,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForSequenceClassification"),d(OI,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.CTRLForSequenceClassification"),d(XI,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForSequenceClassification"),d(VI,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForSequenceClassification"),d(zI,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForSequenceClassification"),d(WI,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForSequenceClassification"),d(QI,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForSequenceClassification"),d(HI,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertForSequenceClassification"),d(UI,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForSequenceClassification"),d(JI,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForSequenceClassification"),d(YI,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2ForSequenceClassification"),d(KI,"href","/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.GPTNeoForSequenceClassification"),d(ZI,"href","/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJForSequenceClassification"),d(eN,"href","/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForSequenceClassification"),d(oN,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMForSequenceClassification"),d(rN,"href","/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForSequenceClassification"),d(tN,"href","/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDForSequenceClassification"),d(aN,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForSequenceClassification"),d(nN,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForSequenceClassification"),d(sN,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForSequenceClassification"),d(lN,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForSequenceClassification"),d(iN,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForSequenceClassification"),d(dN,"href","/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForSequenceClassification"),d(cN,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.OpenAIGPTForSequenceClassification"),d(fN,"href","/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForSequenceClassification"),d(mN,"href","/docs/transformers/pr_16345/en/model_doc/plbart#transformers.PLBartForSequenceClassification"),d(gN,"href","/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForSequenceClassification"),d(hN,"href","/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerForSequenceClassification"),d(pN,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForSequenceClassification"),d(_N,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForSequenceClassification"),d(uN,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForSequenceClassification"),d(bN,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForSequenceClassification"),d(vN,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasForSequenceClassification"),d(TN,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TransfoXLForSequenceClassification"),d(FN,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMForSequenceClassification"),d(CN,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForSequenceClassification"),d(MN,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForSequenceClassification"),d(EN,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetForSequenceClassification"),d(yN,"href","/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForSequenceClassification"),d(Xe,"class","docstring"),d(or,"class","docstring"),d(V4,"id","transformers.AutoModelForMultipleChoice"),d(V4,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(V4,"href","#transformers.AutoModelForMultipleChoice"),d(pd,"class","relative group"),d(Jr,"class","docstring"),d(wN,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForMultipleChoice"),d(AN,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForMultipleChoice"),d(LN,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForMultipleChoice"),d(BN,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForMultipleChoice"),d(xN,"href","/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineForMultipleChoice"),d(kN,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForMultipleChoice"),d(RN,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForMultipleChoice"),d(SN,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForMultipleChoice"),d(PN,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForMultipleChoice"),d($N,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertForMultipleChoice"),d(IN,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForMultipleChoice"),d(NN,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForMultipleChoice"),d(jN,"href","/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForMultipleChoice"),d(DN,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForMultipleChoice"),d(qN,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForMultipleChoice"),d(GN,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForMultipleChoice"),d(ON,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForMultipleChoice"),d(XN,"href","/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForMultipleChoice"),d(VN,"href","/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForMultipleChoice"),d(zN,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForMultipleChoice"),d(WN,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForMultipleChoice"),d(QN,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForMultipleChoice"),d(HN,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForMultipleChoice"),d(UN,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMForMultipleChoice"),d(JN,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForMultipleChoice"),d(YN,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForMultipleChoice"),d(KN,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetForMultipleChoice"),d(ZN,"href","/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForMultipleChoice"),d(Ve,"class","docstring"),d(rr,"class","docstring"),d(Tb,"id","transformers.AutoModelForNextSentencePrediction"),d(Tb,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tb,"href","#transformers.AutoModelForNextSentencePrediction"),d(bd,"class","relative group"),d(Yr,"class","docstring"),d(ej,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForNextSentencePrediction"),d(oj,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForNextSentencePrediction"),d(rj,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForNextSentencePrediction"),d(tj,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForNextSentencePrediction"),d(aj,"href","/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForNextSentencePrediction"),d(ze,"class","docstring"),d(tr,"class","docstring"),d(Ab,"id","transformers.AutoModelForTokenClassification"),d(Ab,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ab,"href","#transformers.AutoModelForTokenClassification"),d(Fd,"class","relative group"),d(Kr,"class","docstring"),d(nj,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForTokenClassification"),d(sj,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForTokenClassification"),d(lj,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForTokenClassification"),d(ij,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForTokenClassification"),d(dj,"href","/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineForTokenClassification"),d(cj,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForTokenClassification"),d(fj,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForTokenClassification"),d(mj,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForTokenClassification"),d(gj,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForTokenClassification"),d(hj,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForTokenClassification"),d(pj,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForTokenClassification"),d(_j,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertForTokenClassification"),d(uj,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForTokenClassification"),d(bj,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForTokenClassification"),d(vj,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.GPT2ForTokenClassification"),d(Tj,"href","/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForTokenClassification"),d(Fj,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.LayoutLMForTokenClassification"),d(Cj,"href","/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForTokenClassification"),d(Mj,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForTokenClassification"),d(Ej,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForTokenClassification"),d(yj,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForTokenClassification"),d(wj,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForTokenClassification"),d(Aj,"href","/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForTokenClassification"),d(Lj,"href","/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForTokenClassification"),d(Bj,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForTokenClassification"),d(xj,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForTokenClassification"),d(kj,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForTokenClassification"),d(Rj,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForTokenClassification"),d(Sj,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMForTokenClassification"),d(Pj,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForTokenClassification"),d($j,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForTokenClassification"),d(Ij,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetForTokenClassification"),d(Nj,"href","/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForTokenClassification"),d(We,"class","docstring"),d(ar,"class","docstring"),d(i3,"id","transformers.AutoModelForQuestionAnswering"),d(i3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(i3,"href","#transformers.AutoModelForQuestionAnswering"),d(Ed,"class","relative group"),d(Zr,"class","docstring"),d(jj,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.AlbertForQuestionAnswering"),d(Dj,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.BartForQuestionAnswering"),d(qj,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.BertForQuestionAnswering"),d(Gj,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.BigBirdForQuestionAnswering"),d(Oj,"href","/docs/transformers/pr_16345/en/model_doc/bigbird_pegasus#transformers.BigBirdPegasusForQuestionAnswering"),d(Xj,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.CamembertForQuestionAnswering"),d(Vj,"href","/docs/transformers/pr_16345/en/model_doc/canine#transformers.CanineForQuestionAnswering"),d(zj,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.ConvBertForQuestionAnswering"),d(Wj,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecTextForQuestionAnswering"),d(Qj,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.DebertaForQuestionAnswering"),d(Hj,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.DebertaV2ForQuestionAnswering"),d(Uj,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.DistilBertForQuestionAnswering"),d(Jj,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.ElectraForQuestionAnswering"),d(Yj,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.FlaubertForQuestionAnsweringSimple"),d(Kj,"href","/docs/transformers/pr_16345/en/model_doc/fnet#transformers.FNetForQuestionAnswering"),d(Zj,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.FunnelForQuestionAnswering"),d(eD,"href","/docs/transformers/pr_16345/en/model_doc/gptj#transformers.GPTJForQuestionAnswering"),d(oD,"href","/docs/transformers/pr_16345/en/model_doc/ibert#transformers.IBertForQuestionAnswering"),d(rD,"href","/docs/transformers/pr_16345/en/model_doc/layoutlmv2#transformers.LayoutLMv2ForQuestionAnswering"),d(tD,"href","/docs/transformers/pr_16345/en/model_doc/led#transformers.LEDForQuestionAnswering"),d(aD,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.LongformerForQuestionAnswering"),d(nD,"href","/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.LxmertForQuestionAnswering"),d(sD,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.MBartForQuestionAnswering"),d(lD,"href","/docs/transformers/pr_16345/en/model_doc/megatron-bert#transformers.MegatronBertForQuestionAnswering"),d(iD,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.MobileBertForQuestionAnswering"),d(dD,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.MPNetForQuestionAnswering"),d(cD,"href","/docs/transformers/pr_16345/en/model_doc/nystromformer#transformers.NystromformerForQuestionAnswering"),d(fD,"href","/docs/transformers/pr_16345/en/model_doc/qdqbert#transformers.QDQBertForQuestionAnswering"),d(mD,"href","/docs/transformers/pr_16345/en/model_doc/reformer#transformers.ReformerForQuestionAnswering"),d(gD,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.RemBertForQuestionAnswering"),d(hD,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.RobertaForQuestionAnswering"),d(pD,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.RoFormerForQuestionAnswering"),d(_D,"href","/docs/transformers/pr_16345/en/model_doc/splinter#transformers.SplinterForQuestionAnswering"),d(uD,"href","/docs/transformers/pr_16345/en/model_doc/squeezebert#transformers.SqueezeBertForQuestionAnswering"),d(bD,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.XLMForQuestionAnsweringSimple"),d(vD,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.XLMRobertaForQuestionAnswering"),d(TD,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta-xl#transformers.XLMRobertaXLForQuestionAnswering"),d(FD,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.XLNetForQuestionAnsweringSimple"),d(CD,"href","/docs/transformers/pr_16345/en/model_doc/yoso#transformers.YosoForQuestionAnswering"),d(Qe,"class","docstring"),d(nr,"class","docstring"),d(U3,"id","transformers.AutoModelForTableQuestionAnswering"),d(U3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(U3,"href","#transformers.AutoModelForTableQuestionAnswering"),d(Ad,"class","relative group"),d(et,"class","docstring"),d(MD,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TapasForQuestionAnswering"),d(He,"class","docstring"),d(sr,"class","docstring"),d(K3,"id","transformers.AutoModelForImageClassification"),d(K3,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(K3,"href","#transformers.AutoModelForImageClassification"),d(xd,"class","relative group"),d(ot,"class","docstring"),d(ED,"href","/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitForImageClassification"),d(yD,"href","/docs/transformers/pr_16345/en/model_doc/convnext#transformers.ConvNextForImageClassification"),d(wD,"href","/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTForImageClassification"),d(AD,"href","/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTForImageClassificationWithTeacher"),d(LD,"href","/docs/transformers/pr_16345/en/model_doc/imagegpt#transformers.ImageGPTForImageClassification"),d(BD,"href","/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForImageClassificationLearned"),d(xD,"href","/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForImageClassificationFourier"),d(kD,"href","/docs/transformers/pr_16345/en/model_doc/perceiver#transformers.PerceiverForImageClassificationConvProcessing"),d(RD,"href","/docs/transformers/pr_16345/en/model_doc/poolformer#transformers.PoolFormerForImageClassification"),d(SD,"href","/docs/transformers/pr_16345/en/model_doc/resnet#transformers.ResNetForImageClassification"),d(PD,"href","/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerForImageClassification"),d($D,"href","/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinForImageClassification"),d(ID,"href","/docs/transformers/pr_16345/en/model_doc/van#transformers.VanForImageClassification"),d(ND,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTForImageClassification"),d(Ue,"class","docstring"),d(lr,"class","docstring"),d(d5,"id","transformers.AutoModelForVision2Seq"),d(d5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d5,"href","#transformers.AutoModelForVision2Seq"),d(Sd,"class","relative group"),d(rt,"class","docstring"),d(jD,"href","/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.VisionEncoderDecoderModel"),d(Je,"class","docstring"),d(ir,"class","docstring"),d(m5,"id","transformers.AutoModelForAudioClassification"),d(m5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m5,"href","#transformers.AutoModelForAudioClassification"),d(Id,"class","relative group"),d(tt,"class","docstring"),d(DD,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioForSequenceClassification"),d(qD,"href","/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertForSequenceClassification"),d(GD,"href","/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWForSequenceClassification"),d(OD,"href","/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDForSequenceClassification"),d(XD,"href","/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechForSequenceClassification"),d(VD,"href","/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForSequenceClassification"),d(zD,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForSequenceClassification"),d(WD,"href","/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMForSequenceClassification"),d(Ye,"class","docstring"),d(dr,"class","docstring"),d(C5,"id","transformers.AutoModelForAudioFrameClassification"),d(C5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(C5,"href","#transformers.AutoModelForAudioFrameClassification"),d(Dd,"class","relative group"),d(at,"class","docstring"),d(QD,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioForAudioFrameClassification"),d(HD,"href","/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForAudioFrameClassification"),d(UD,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForAudioFrameClassification"),d(JD,"href","/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMForAudioFrameClassification"),d(Ke,"class","docstring"),d(cr,"class","docstring"),d(L5,"id","transformers.AutoModelForCTC"),d(L5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(L5,"href","#transformers.AutoModelForCTC"),d(Od,"class","relative group"),d(nt,"class","docstring"),d(YD,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioForCTC"),d(KD,"href","/docs/transformers/pr_16345/en/model_doc/hubert#transformers.HubertForCTC"),d(ZD,"href","/docs/transformers/pr_16345/en/model_doc/sew#transformers.SEWForCTC"),d(eq,"href","/docs/transformers/pr_16345/en/model_doc/sew-d#transformers.SEWDForCTC"),d(oq,"href","/docs/transformers/pr_16345/en/model_doc/unispeech#transformers.UniSpeechForCTC"),d(rq,"href","/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForCTC"),d(tq,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForCTC"),d(aq,"href","/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMForCTC"),d(Ze,"class","docstring"),d(fr,"class","docstring"),d(j5,"id","transformers.AutoModelForSpeechSeq2Seq"),d(j5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(j5,"href","#transformers.AutoModelForSpeechSeq2Seq"),d(zd,"class","relative group"),d(st,"class","docstring"),d(nq,"href","/docs/transformers/pr_16345/en/model_doc/speech-encoder-decoder#transformers.SpeechEncoderDecoderModel"),d(sq,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.Speech2TextForConditionalGeneration"),d(eo,"class","docstring"),d(mr,"class","docstring"),d(O5,"id","transformers.AutoModelForAudioXVector"),d(O5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O5,"href","#transformers.AutoModelForAudioXVector"),d(Hd,"class","relative group"),d(lt,"class","docstring"),d(lq,"href","/docs/transformers/pr_16345/en/model_doc/data2vec#transformers.Data2VecAudioForXVector"),d(iq,"href","/docs/transformers/pr_16345/en/model_doc/unispeech-sat#transformers.UniSpeechSatForXVector"),d(dq,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.Wav2Vec2ForXVector"),d(cq,"href","/docs/transformers/pr_16345/en/model_doc/wavlm#transformers.WavLMForXVector"),d(oo,"class","docstring"),d(gr,"class","docstring"),d(H5,"id","transformers.AutoModelForMaskedImageModeling"),d(H5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(H5,"href","#transformers.AutoModelForMaskedImageModeling"),d(Yd,"class","relative group"),d(it,"class","docstring"),d(fq,"href","/docs/transformers/pr_16345/en/model_doc/deit#transformers.DeiTForMaskedImageModeling"),d(mq,"href","/docs/transformers/pr_16345/en/model_doc/swin#transformers.SwinForMaskedImageModeling"),d(gq,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.ViTForMaskedImageModeling"),d(ro,"class","docstring"),d(hr,"class","docstring"),d(Z5,"id","transformers.AutoModelForObjectDetection"),d(Z5,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Z5,"href","#transformers.AutoModelForObjectDetection"),d(oc,"class","relative group"),d(dt,"class","docstring"),d(hq,"href","/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrForObjectDetection"),d(to,"class","docstring"),d(pr,"class","docstring"),d(r2,"id","transformers.AutoModelForImageSegmentation"),d(r2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(r2,"href","#transformers.AutoModelForImageSegmentation"),d(ac,"class","relative group"),d(ct,"class","docstring"),d(pq,"href","/docs/transformers/pr_16345/en/model_doc/detr#transformers.DetrForSegmentation"),d(ao,"class","docstring"),d(_r,"class","docstring"),d(n2,"id","transformers.AutoModelForSemanticSegmentation"),d(n2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n2,"href","#transformers.AutoModelForSemanticSegmentation"),d(lc,"class","relative group"),d(ft,"class","docstring"),d(_q,"href","/docs/transformers/pr_16345/en/model_doc/beit#transformers.BeitForSemanticSegmentation"),d(uq,"href","/docs/transformers/pr_16345/en/model_doc/segformer#transformers.SegformerForSemanticSegmentation"),d(no,"class","docstring"),d(ur,"class","docstring"),d(d2,"id","transformers.AutoModelForInstanceSegmentation"),d(d2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(d2,"href","#transformers.AutoModelForInstanceSegmentation"),d(cc,"class","relative group"),d(mt,"class","docstring"),d(bq,"href","/docs/transformers/pr_16345/en/model_doc/maskformer#transformers.MaskFormerForInstanceSegmentation"),d(so,"class","docstring"),d(br,"class","docstring"),d(m2,"id","transformers.TFAutoModel"),d(m2,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(m2,"href","#transformers.TFAutoModel"),d(gc,"class","relative group"),d(gt,"class","docstring"),d(vq,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertModel"),d(Tq,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.TFBartModel"),d(Fq,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertModel"),d(Cq,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.TFBlenderbotModel"),d(Mq,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallModel"),d(Eq,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertModel"),d(yq,"href","/docs/transformers/pr_16345/en/model_doc/clip#transformers.TFCLIPModel"),d(wq,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertModel"),d(Aq,"href","/docs/transformers/pr_16345/en/model_doc/convnext#transformers.TFConvNextModel"),d(Lq,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.TFCTRLModel"),d(Bq,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaModel"),d(xq,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2Model"),d(kq,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertModel"),d(Rq,"href","/docs/transformers/pr_16345/en/model_doc/dpr#transformers.TFDPRQuestionEncoder"),d(Sq,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraModel"),d(Pq,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertModel"),d($q,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelModel"),d(Iq,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelBaseModel"),d(Nq,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.TFGPT2Model"),d(jq,"href","/docs/transformers/pr_16345/en/model_doc/hubert#transformers.TFHubertModel"),d(Dq,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMModel"),d(qq,"href","/docs/transformers/pr_16345/en/model_doc/led#transformers.TFLEDModel"),d(Gq,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerModel"),d(Oq,"href","/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.TFLxmertModel"),d(Xq,"href","/docs/transformers/pr_16345/en/model_doc/marian#transformers.TFMarianModel"),d(Vq,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.TFMBartModel"),d(zq,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertModel"),d(Wq,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetModel"),d(Qq,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.TFMT5Model"),d(Hq,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.TFOpenAIGPTModel"),d(Uq,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.TFPegasusModel"),d(Jq,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertModel"),d(Yq,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaModel"),d(Kq,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerModel"),d(Zq,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.TFSpeech2TextModel"),d(eG,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.TFT5Model"),d(oG,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasModel"),d(rG,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TFTransfoXLModel"),d(tG,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.TFViTModel"),d(aG,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.TFWav2Vec2Model"),d(nG,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMModel"),d(sG,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaModel"),d(lG,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetModel"),d(ho,"class","docstring"),d(vr,"class","docstring"),d(ev,"id","transformers.TFAutoModelForPreTraining"),d(ev,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ev,"href","#transformers.TFAutoModelForPreTraining"),d(_c,"class","relative group"),d(ht,"class","docstring"),d(iG,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForPreTraining"),d(dG,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(cG,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForPreTraining"),d(fG,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(mG,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(gG,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(hG,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForPreTraining"),d(pG,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(_G,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForPreTraining"),d(uG,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(bG,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(vG,"href","/docs/transformers/pr_16345/en/model_doc/lxmert#transformers.TFLxmertForPreTraining"),d(TG,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForPreTraining"),d(FG,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(CG,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d(MG,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(EG,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(yG,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(wG,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(AG,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(LG,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(BG,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(po,"class","docstring"),d(Tr,"class","docstring"),d(Mv,"id","transformers.TFAutoModelForCausalLM"),d(Mv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Mv,"href","#transformers.TFAutoModelForCausalLM"),d(vc,"class","relative group"),d(pt,"class","docstring"),d(xG,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertLMHeadModel"),d(kG,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForCausalLM"),d(RG,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.TFCTRLLMHeadModel"),d(SG,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.TFGPT2LMHeadModel"),d(PG,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.TFOpenAIGPTLMHeadModel"),d($G,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForCausalLM"),d(IG,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForCausalLM"),d(NG,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForCausalLM"),d(jG,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TFTransfoXLLMHeadModel"),d(DG,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(qG,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetLMHeadModel"),d(_o,"class","docstring"),d(Fr,"class","docstring"),d($v,"id","transformers.TFAutoModelForImageClassification"),d($v,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($v,"href","#transformers.TFAutoModelForImageClassification"),d(Cc,"class","relative group"),d(_t,"class","docstring"),d(GG,"href","/docs/transformers/pr_16345/en/model_doc/convnext#transformers.TFConvNextForImageClassification"),d(OG,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.TFViTForImageClassification"),d(uo,"class","docstring"),d(Cr,"class","docstring"),d(jv,"id","transformers.TFAutoModelForMaskedLM"),d(jv,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(jv,"href","#transformers.TFAutoModelForMaskedLM"),d(yc,"class","relative group"),d(ut,"class","docstring"),d(XG,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForMaskedLM"),d(VG,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForMaskedLM"),d(zG,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForMaskedLM"),d(WG,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForMaskedLM"),d(QG,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaForMaskedLM"),d(HG,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2ForMaskedLM"),d(UG,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForMaskedLM"),d(JG,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForMaskedLM"),d(YG,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertWithLMHeadModel"),d(KG,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForMaskedLM"),d(ZG,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMForMaskedLM"),d(eO,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForMaskedLM"),d(oO,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForMaskedLM"),d(rO,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForMaskedLM"),d(tO,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForMaskedLM"),d(aO,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForMaskedLM"),d(nO,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForMaskedLM"),d(sO,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasForMaskedLM"),d(lO,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMWithLMHeadModel"),d(iO,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMaskedLM"),d(bo,"class","docstring"),d(Mr,"class","docstring"),d(n6,"id","transformers.TFAutoModelForSeq2SeqLM"),d(n6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(n6,"href","#transformers.TFAutoModelForSeq2SeqLM"),d(Lc,"class","relative group"),d(bt,"class","docstring"),d(dO,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.TFBartForConditionalGeneration"),d(cO,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.TFBlenderbotForConditionalGeneration"),d(fO,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.TFBlenderbotSmallForConditionalGeneration"),d(mO,"href","/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.TFEncoderDecoderModel"),d(gO,"href","/docs/transformers/pr_16345/en/model_doc/led#transformers.TFLEDForConditionalGeneration"),d(hO,"href","/docs/transformers/pr_16345/en/model_doc/marian#transformers.TFMarianMTModel"),d(pO,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.TFMBartForConditionalGeneration"),d(_O,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.TFMT5ForConditionalGeneration"),d(uO,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.TFPegasusForConditionalGeneration"),d(bO,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.TFT5ForConditionalGeneration"),d(vo,"class","docstring"),d(Er,"class","docstring"),d(_6,"id","transformers.TFAutoModelForSequenceClassification"),d(_6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_6,"href","#transformers.TFAutoModelForSequenceClassification"),d(kc,"class","relative group"),d(vt,"class","docstring"),d(vO,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForSequenceClassification"),d(TO,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForSequenceClassification"),d(FO,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForSequenceClassification"),d(CO,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForSequenceClassification"),d(MO,"href","/docs/transformers/pr_16345/en/model_doc/ctrl#transformers.TFCTRLForSequenceClassification"),d(EO,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaForSequenceClassification"),d(yO,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2ForSequenceClassification"),d(wO,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForSequenceClassification"),d(AO,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForSequenceClassification"),d(LO,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertForSequenceClassification"),d(BO,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForSequenceClassification"),d(xO,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.TFGPT2ForSequenceClassification"),d(kO,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMForSequenceClassification"),d(RO,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForSequenceClassification"),d(SO,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForSequenceClassification"),d(PO,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForSequenceClassification"),d($O,"href","/docs/transformers/pr_16345/en/model_doc/openai-gpt#transformers.TFOpenAIGPTForSequenceClassification"),d(IO,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForSequenceClassification"),d(NO,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForSequenceClassification"),d(jO,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForSequenceClassification"),d(DO,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasForSequenceClassification"),d(qO,"href","/docs/transformers/pr_16345/en/model_doc/transfo-xl#transformers.TFTransfoXLForSequenceClassification"),d(GO,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMForSequenceClassification"),d(OO,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForSequenceClassification"),d(XO,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetForSequenceClassification"),d(To,"class","docstring"),d(yr,"class","docstring"),d(O6,"id","transformers.TFAutoModelForMultipleChoice"),d(O6,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(O6,"href","#transformers.TFAutoModelForMultipleChoice"),d(Pc,"class","relative group"),d(Tt,"class","docstring"),d(VO,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForMultipleChoice"),d(zO,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForMultipleChoice"),d(WO,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForMultipleChoice"),d(QO,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForMultipleChoice"),d(HO,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForMultipleChoice"),d(UO,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForMultipleChoice"),d(JO,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertForMultipleChoice"),d(YO,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForMultipleChoice"),d(KO,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForMultipleChoice"),d(ZO,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForMultipleChoice"),d(eX,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForMultipleChoice"),d(oX,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForMultipleChoice"),d(rX,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForMultipleChoice"),d(tX,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForMultipleChoice"),d(aX,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMForMultipleChoice"),d(nX,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForMultipleChoice"),d(sX,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetForMultipleChoice"),d(Fo,"class","docstring"),d(wr,"class","docstring"),d(sT,"id","transformers.TFAutoModelForTableQuestionAnswering"),d(sT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(sT,"href","#transformers.TFAutoModelForTableQuestionAnswering"),d(Nc,"class","relative group"),d(Ft,"class","docstring"),d(lX,"href","/docs/transformers/pr_16345/en/model_doc/tapas#transformers.TFTapasForQuestionAnswering"),d(Co,"class","docstring"),d(Ar,"class","docstring"),d(iT,"id","transformers.TFAutoModelForTokenClassification"),d(iT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(iT,"href","#transformers.TFAutoModelForTokenClassification"),d(qc,"class","relative group"),d(Ct,"class","docstring"),d(iX,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForTokenClassification"),d(dX,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForTokenClassification"),d(cX,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForTokenClassification"),d(fX,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForTokenClassification"),d(mX,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaForTokenClassification"),d(gX,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2ForTokenClassification"),d(hX,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForTokenClassification"),d(pX,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForTokenClassification"),d(_X,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertForTokenClassification"),d(uX,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForTokenClassification"),d(bX,"href","/docs/transformers/pr_16345/en/model_doc/layoutlm#transformers.TFLayoutLMForTokenClassification"),d(vX,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForTokenClassification"),d(TX,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForTokenClassification"),d(FX,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForTokenClassification"),d(CX,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForTokenClassification"),d(MX,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForTokenClassification"),d(EX,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForTokenClassification"),d(yX,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMForTokenClassification"),d(wX,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForTokenClassification"),d(AX,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetForTokenClassification"),d(Mo,"class","docstring"),d(Lr,"class","docstring"),d(BT,"id","transformers.TFAutoModelForQuestionAnswering"),d(BT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(BT,"href","#transformers.TFAutoModelForQuestionAnswering"),d(Xc,"class","relative group"),d(Mt,"class","docstring"),d(LX,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.TFAlbertForQuestionAnswering"),d(BX,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.TFBertForQuestionAnswering"),d(xX,"href","/docs/transformers/pr_16345/en/model_doc/camembert#transformers.TFCamembertForQuestionAnswering"),d(kX,"href","/docs/transformers/pr_16345/en/model_doc/convbert#transformers.TFConvBertForQuestionAnswering"),d(RX,"href","/docs/transformers/pr_16345/en/model_doc/deberta#transformers.TFDebertaForQuestionAnswering"),d(SX,"href","/docs/transformers/pr_16345/en/model_doc/deberta-v2#transformers.TFDebertaV2ForQuestionAnswering"),d(PX,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.TFDistilBertForQuestionAnswering"),d($X,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.TFElectraForQuestionAnswering"),d(IX,"href","/docs/transformers/pr_16345/en/model_doc/flaubert#transformers.TFFlaubertForQuestionAnsweringSimple"),d(NX,"href","/docs/transformers/pr_16345/en/model_doc/funnel#transformers.TFFunnelForQuestionAnswering"),d(jX,"href","/docs/transformers/pr_16345/en/model_doc/longformer#transformers.TFLongformerForQuestionAnswering"),d(DX,"href","/docs/transformers/pr_16345/en/model_doc/mobilebert#transformers.TFMobileBertForQuestionAnswering"),d(qX,"href","/docs/transformers/pr_16345/en/model_doc/mpnet#transformers.TFMPNetForQuestionAnswering"),d(GX,"href","/docs/transformers/pr_16345/en/model_doc/rembert#transformers.TFRemBertForQuestionAnswering"),d(OX,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.TFRobertaForQuestionAnswering"),d(XX,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.TFRoFormerForQuestionAnswering"),d(VX,"href","/docs/transformers/pr_16345/en/model_doc/xlm#transformers.TFXLMForQuestionAnsweringSimple"),d(zX,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.TFXLMRobertaForQuestionAnswering"),d(WX,"href","/docs/transformers/pr_16345/en/model_doc/xlnet#transformers.TFXLNetForQuestionAnsweringSimple"),d(Eo,"class","docstring"),d(Br,"class","docstring"),d(UT,"id","transformers.TFAutoModelForVision2Seq"),d(UT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(UT,"href","#transformers.TFAutoModelForVision2Seq"),d(Wc,"class","relative group"),d(Et,"class","docstring"),d(QX,"href","/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.TFVisionEncoderDecoderModel"),d(yo,"class","docstring"),d(xr,"class","docstring"),d(YT,"id","transformers.TFAutoModelForSpeechSeq2Seq"),d(YT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YT,"href","#transformers.TFAutoModelForSpeechSeq2Seq"),d(Uc,"class","relative group"),d(yt,"class","docstring"),d(HX,"href","/docs/transformers/pr_16345/en/model_doc/speech_to_text#transformers.TFSpeech2TextForConditionalGeneration"),d(wo,"class","docstring"),d(kr,"class","docstring"),d(ZT,"id","transformers.FlaxAutoModel"),d(ZT,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZT,"href","#transformers.FlaxAutoModel"),d(Kc,"class","relative group"),d(wt,"class","docstring"),d(UX,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertModel"),d(JX,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartModel"),d(YX,"href","/docs/transformers/pr_16345/en/model_doc/beit#transformers.FlaxBeitModel"),d(KX,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertModel"),d(ZX,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdModel"),d(eV,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.FlaxBlenderbotModel"),d(oV,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallModel"),d(rV,"href","/docs/transformers/pr_16345/en/model_doc/clip#transformers.FlaxCLIPModel"),d(tV,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertModel"),d(aV,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraModel"),d(nV,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.FlaxGPT2Model"),d(sV,"href","/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.FlaxGPTNeoModel"),d(lV,"href","/docs/transformers/pr_16345/en/model_doc/gptj#transformers.FlaxGPTJModel"),d(iV,"href","/docs/transformers/pr_16345/en/model_doc/marian#transformers.FlaxMarianModel"),d(dV,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartModel"),d(cV,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.FlaxMT5Model"),d(fV,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.FlaxPegasusModel"),d(mV,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaModel"),d(gV,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerModel"),d(hV,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.FlaxT5Model"),d(pV,"href","/docs/transformers/pr_16345/en/model_doc/vision-text-dual-encoder#transformers.FlaxVisionTextDualEncoderModel"),d(_V,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.FlaxViTModel"),d(uV,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2Model"),d(bV,"href","/docs/transformers/pr_16345/en/model_doc/xglm#transformers.FlaxXGLMModel"),d(vV,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaModel"),d(Ao,"class","docstring"),d(Rr,"class","docstring"),d(yF,"id","transformers.FlaxAutoModelForCausalLM"),d(yF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(yF,"href","#transformers.FlaxAutoModelForCausalLM"),d(of,"class","relative group"),d(At,"class","docstring"),d(TV,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForCausalLM"),d(FV,"href","/docs/transformers/pr_16345/en/model_doc/gpt2#transformers.FlaxGPT2LMHeadModel"),d(CV,"href","/docs/transformers/pr_16345/en/model_doc/gpt_neo#transformers.FlaxGPTNeoForCausalLM"),d(MV,"href","/docs/transformers/pr_16345/en/model_doc/gptj#transformers.FlaxGPTJForCausalLM"),d(EV,"href","/docs/transformers/pr_16345/en/model_doc/xglm#transformers.FlaxXGLMForCausalLM"),d(Lo,"class","docstring"),d(Sr,"class","docstring"),d(kF,"id","transformers.FlaxAutoModelForPreTraining"),d(kF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(kF,"href","#transformers.FlaxAutoModelForPreTraining"),d(af,"class","relative group"),d(Lt,"class","docstring"),d(yV,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForPreTraining"),d(wV,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(AV,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForPreTraining"),d(LV,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForPreTraining"),d(BV,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForPreTraining"),d(xV,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(kV,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(RV,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(SV,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(PV,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d($V,"href","/docs/transformers/pr_16345/en/model_doc/wav2vec2#transformers.FlaxWav2Vec2ForPreTraining"),d(IV,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(Bo,"class","docstring"),d(Pr,"class","docstring"),d(VF,"id","transformers.FlaxAutoModelForMaskedLM"),d(VF,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(VF,"href","#transformers.FlaxAutoModelForMaskedLM"),d(lf,"class","relative group"),d(Bt,"class","docstring"),d(NV,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForMaskedLM"),d(jV,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(DV,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForMaskedLM"),d(qV,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForMaskedLM"),d(GV,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForMaskedLM"),d(OV,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForMaskedLM"),d(XV,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(VV,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForMaskedLM"),d(zV,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForMaskedLM"),d(WV,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMaskedLM"),d(xo,"class","docstring"),d($r,"class","docstring"),d(oC,"id","transformers.FlaxAutoModelForSeq2SeqLM"),d(oC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(oC,"href","#transformers.FlaxAutoModelForSeq2SeqLM"),d(ff,"class","relative group"),d(xt,"class","docstring"),d(QV,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForConditionalGeneration"),d(HV,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot#transformers.FlaxBlenderbotForConditionalGeneration"),d(UV,"href","/docs/transformers/pr_16345/en/model_doc/blenderbot-small#transformers.FlaxBlenderbotSmallForConditionalGeneration"),d(JV,"href","/docs/transformers/pr_16345/en/model_doc/encoder-decoder#transformers.FlaxEncoderDecoderModel"),d(YV,"href","/docs/transformers/pr_16345/en/model_doc/marian#transformers.FlaxMarianMTModel"),d(KV,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForConditionalGeneration"),d(ZV,"href","/docs/transformers/pr_16345/en/model_doc/mt5#transformers.FlaxMT5ForConditionalGeneration"),d(ez,"href","/docs/transformers/pr_16345/en/model_doc/pegasus#transformers.FlaxPegasusForConditionalGeneration"),d(oz,"href","/docs/transformers/pr_16345/en/model_doc/t5#transformers.FlaxT5ForConditionalGeneration"),d(ko,"class","docstring"),d(Ir,"class","docstring"),d(fC,"id","transformers.FlaxAutoModelForSequenceClassification"),d(fC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(fC,"href","#transformers.FlaxAutoModelForSequenceClassification"),d(hf,"class","relative group"),d(kt,"class","docstring"),d(rz,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForSequenceClassification"),d(tz,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForSequenceClassification"),d(az,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForSequenceClassification"),d(nz,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForSequenceClassification"),d(sz,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForSequenceClassification"),d(lz,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForSequenceClassification"),d(iz,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForSequenceClassification"),d(dz,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForSequenceClassification"),d(cz,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForSequenceClassification"),d(fz,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForSequenceClassification"),d(Ro,"class","docstring"),d(Nr,"class","docstring"),d(CC,"id","transformers.FlaxAutoModelForQuestionAnswering"),d(CC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(CC,"href","#transformers.FlaxAutoModelForQuestionAnswering"),d(uf,"class","relative group"),d(Rt,"class","docstring"),d(mz,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForQuestionAnswering"),d(gz,"href","/docs/transformers/pr_16345/en/model_doc/bart#transformers.FlaxBartForQuestionAnswering"),d(hz,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForQuestionAnswering"),d(pz,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForQuestionAnswering"),d(_z,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForQuestionAnswering"),d(uz,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForQuestionAnswering"),d(bz,"href","/docs/transformers/pr_16345/en/model_doc/mbart#transformers.FlaxMBartForQuestionAnswering"),d(vz,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForQuestionAnswering"),d(Tz,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForQuestionAnswering"),d(Fz,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForQuestionAnswering"),d(So,"class","docstring"),d(jr,"class","docstring"),d(SC,"id","transformers.FlaxAutoModelForTokenClassification"),d(SC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(SC,"href","#transformers.FlaxAutoModelForTokenClassification"),d(Tf,"class","relative group"),d(St,"class","docstring"),d(Cz,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForTokenClassification"),d(Mz,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForTokenClassification"),d(Ez,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForTokenClassification"),d(yz,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForTokenClassification"),d(wz,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForTokenClassification"),d(Az,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForTokenClassification"),d(Lz,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForTokenClassification"),d(Bz,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForTokenClassification"),d(Po,"class","docstring"),d(Dr,"class","docstring"),d(OC,"id","transformers.FlaxAutoModelForMultipleChoice"),d(OC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(OC,"href","#transformers.FlaxAutoModelForMultipleChoice"),d(Mf,"class","relative group"),d(Pt,"class","docstring"),d(xz,"href","/docs/transformers/pr_16345/en/model_doc/albert#transformers.FlaxAlbertForMultipleChoice"),d(kz,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForMultipleChoice"),d(Rz,"href","/docs/transformers/pr_16345/en/model_doc/big_bird#transformers.FlaxBigBirdForMultipleChoice"),d(Sz,"href","/docs/transformers/pr_16345/en/model_doc/distilbert#transformers.FlaxDistilBertForMultipleChoice"),d(Pz,"href","/docs/transformers/pr_16345/en/model_doc/electra#transformers.FlaxElectraForMultipleChoice"),d($z,"href","/docs/transformers/pr_16345/en/model_doc/roberta#transformers.FlaxRobertaForMultipleChoice"),d(Iz,"href","/docs/transformers/pr_16345/en/model_doc/roformer#transformers.FlaxRoFormerForMultipleChoice"),d(Nz,"href","/docs/transformers/pr_16345/en/model_doc/xlm-roberta#transformers.FlaxXLMRobertaForMultipleChoice"),d($o,"class","docstring"),d(qr,"class","docstring"),d(YC,"id","transformers.FlaxAutoModelForNextSentencePrediction"),d(YC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(YC,"href","#transformers.FlaxAutoModelForNextSentencePrediction"),d(wf,"class","relative group"),d($t,"class","docstring"),d(jz,"href","/docs/transformers/pr_16345/en/model_doc/bert#transformers.FlaxBertForNextSentencePrediction"),d(Io,"class","docstring"),d(Gr,"class","docstring"),d(ZC,"id","transformers.FlaxAutoModelForImageClassification"),d(ZC,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ZC,"href","#transformers.FlaxAutoModelForImageClassification"),d(Bf,"class","relative group"),d(It,"class","docstring"),d(Dz,"href","/docs/transformers/pr_16345/en/model_doc/beit#transformers.FlaxBeitForImageClassification"),d(qz,"href","/docs/transformers/pr_16345/en/model_doc/vit#transformers.FlaxViTForImageClassification"),d(No,"class","docstring"),d(Or,"class","docstring"),d(rM,"id","transformers.FlaxAutoModelForVision2Seq"),d(rM,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(rM,"href","#transformers.FlaxAutoModelForVision2Seq"),d(Rf,"class","relative group"),d(Nt,"class","docstring"),d(Gz,"href","/docs/transformers/pr_16345/en/model_doc/vision-encoder-decoder#transformers.FlaxVisionEncoderDecoderModel"),d(jo,"class","docstring"),d(Xr,"class","docstring")},m(c,u){e(document.head,J),b(c,$e,u),b(c,de,u),e(de,pe),e(pe,io),g(fe,io,null),e(de,Me),e(de,Vo),e(Vo,Ni),b(c,If,u),b(c,fa,u),e(fa,ji),e(fa,Di),e(Di,tE),e(fa,Nf),b(c,Be,u),b(c,co,u),e(co,qi),e(co,Gn),e(Gn,aE),e(co,On),e(co,Xn),e(Xn,nE),e(co,Gi),e(co,Vn),e(Vn,sE),e(co,Oi),b(c,jf,u),g(qa,c,u),b(c,fo,u),b(c,_e,u),e(_e,J8),e(_e,Xi),e(Xi,Y8),e(_e,K8),b(c,zo,u),b(c,Ga,u),e(Ga,Z8),e(Ga,Df),e(Df,e9),e(Ga,s$e),b(c,Wxe,u),b(c,Vi,u),e(Vi,qf),e(qf,PQ),g(lE,PQ,null),e(Vi,l$e),e(Vi,$Q),e($Q,i$e),b(c,Qxe,u),b(c,zn,u),e(zn,d$e),e(zn,IQ),e(IQ,c$e),e(zn,f$e),e(zn,NQ),e(NQ,m$e),e(zn,g$e),b(c,Hxe,u),g(iE,c,u),b(c,Uxe,u),b(c,o9,u),e(o9,h$e),b(c,Jxe,u),g(Gf,c,u),b(c,Yxe,u),b(c,zi,u),e(zi,Of),e(Of,jQ),g(dE,jQ,null),e(zi,p$e),e(zi,DQ),e(DQ,_$e),b(c,Kxe,u),b(c,Wo,u),g(cE,Wo,null),e(Wo,u$e),e(Wo,fE),e(fE,b$e),e(fE,r9),e(r9,v$e),e(fE,T$e),e(Wo,F$e),e(Wo,mE),e(mE,C$e),e(mE,qQ),e(qQ,M$e),e(mE,E$e),e(Wo,y$e),e(Wo,mo),g(gE,mo,null),e(mo,w$e),e(mo,GQ),e(GQ,A$e),e(mo,L$e),e(mo,Wi),e(Wi,B$e),e(Wi,OQ),e(OQ,x$e),e(Wi,k$e),e(Wi,XQ),e(XQ,R$e),e(Wi,S$e),e(mo,P$e),e(mo,v),e(v,Xf),e(Xf,VQ),e(VQ,$$e),e(Xf,I$e),e(Xf,t9),e(t9,N$e),e(Xf,j$e),e(v,D$e),e(v,Vf),e(Vf,zQ),e(zQ,q$e),e(Vf,G$e),e(Vf,a9),e(a9,O$e),e(Vf,X$e),e(v,V$e),e(v,zf),e(zf,WQ),e(WQ,z$e),e(zf,W$e),e(zf,n9),e(n9,Q$e),e(zf,H$e),e(v,U$e),e(v,Wf),e(Wf,QQ),e(QQ,J$e),e(Wf,Y$e),e(Wf,s9),e(s9,K$e),e(Wf,Z$e),e(v,eIe),e(v,Qf),e(Qf,HQ),e(HQ,oIe),e(Qf,rIe),e(Qf,l9),e(l9,tIe),e(Qf,aIe),e(v,nIe),e(v,Hf),e(Hf,UQ),e(UQ,sIe),e(Hf,lIe),e(Hf,i9),e(i9,iIe),e(Hf,dIe),e(v,cIe),e(v,Uf),e(Uf,JQ),e(JQ,fIe),e(Uf,mIe),e(Uf,d9),e(d9,gIe),e(Uf,hIe),e(v,pIe),e(v,Jf),e(Jf,YQ),e(YQ,_Ie),e(Jf,uIe),e(Jf,c9),e(c9,bIe),e(Jf,vIe),e(v,TIe),e(v,Yf),e(Yf,KQ),e(KQ,FIe),e(Yf,CIe),e(Yf,f9),e(f9,MIe),e(Yf,EIe),e(v,yIe),e(v,Kf),e(Kf,ZQ),e(ZQ,wIe),e(Kf,AIe),e(Kf,m9),e(m9,LIe),e(Kf,BIe),e(v,xIe),e(v,Zf),e(Zf,eH),e(eH,kIe),e(Zf,RIe),e(Zf,g9),e(g9,SIe),e(Zf,PIe),e(v,$Ie),e(v,em),e(em,oH),e(oH,IIe),e(em,NIe),e(em,h9),e(h9,jIe),e(em,DIe),e(v,qIe),e(v,om),e(om,rH),e(rH,GIe),e(om,OIe),e(om,p9),e(p9,XIe),e(om,VIe),e(v,zIe),e(v,rm),e(rm,tH),e(tH,WIe),e(rm,QIe),e(rm,_9),e(_9,HIe),e(rm,UIe),e(v,JIe),e(v,tm),e(tm,aH),e(aH,YIe),e(tm,KIe),e(tm,u9),e(u9,ZIe),e(tm,eNe),e(v,oNe),e(v,am),e(am,nH),e(nH,rNe),e(am,tNe),e(am,b9),e(b9,aNe),e(am,nNe),e(v,sNe),e(v,nm),e(nm,sH),e(sH,lNe),e(nm,iNe),e(nm,v9),e(v9,dNe),e(nm,cNe),e(v,fNe),e(v,sm),e(sm,lH),e(lH,mNe),e(sm,gNe),e(sm,T9),e(T9,hNe),e(sm,pNe),e(v,_Ne),e(v,lm),e(lm,iH),e(iH,uNe),e(lm,bNe),e(lm,F9),e(F9,vNe),e(lm,TNe),e(v,FNe),e(v,im),e(im,dH),e(dH,CNe),e(im,MNe),e(im,C9),e(C9,ENe),e(im,yNe),e(v,wNe),e(v,dm),e(dm,cH),e(cH,ANe),e(dm,LNe),e(dm,M9),e(M9,BNe),e(dm,xNe),e(v,kNe),e(v,cm),e(cm,fH),e(fH,RNe),e(cm,SNe),e(cm,E9),e(E9,PNe),e(cm,$Ne),e(v,INe),e(v,fm),e(fm,mH),e(mH,NNe),e(fm,jNe),e(fm,y9),e(y9,DNe),e(fm,qNe),e(v,GNe),e(v,mm),e(mm,gH),e(gH,ONe),e(mm,XNe),e(mm,w9),e(w9,VNe),e(mm,zNe),e(v,WNe),e(v,gm),e(gm,hH),e(hH,QNe),e(gm,HNe),e(gm,A9),e(A9,UNe),e(gm,JNe),e(v,YNe),e(v,hm),e(hm,pH),e(pH,KNe),e(hm,ZNe),e(hm,L9),e(L9,eje),e(hm,oje),e(v,rje),e(v,pm),e(pm,_H),e(_H,tje),e(pm,aje),e(pm,B9),e(B9,nje),e(pm,sje),e(v,lje),e(v,_m),e(_m,uH),e(uH,ije),e(_m,dje),e(_m,x9),e(x9,cje),e(_m,fje),e(v,mje),e(v,um),e(um,bH),e(bH,gje),e(um,hje),e(um,k9),e(k9,pje),e(um,_je),e(v,uje),e(v,bm),e(bm,vH),e(vH,bje),e(bm,vje),e(bm,R9),e(R9,Tje),e(bm,Fje),e(v,Cje),e(v,vm),e(vm,TH),e(TH,Mje),e(vm,Eje),e(vm,S9),e(S9,yje),e(vm,wje),e(v,Aje),e(v,Tm),e(Tm,FH),e(FH,Lje),e(Tm,Bje),e(Tm,P9),e(P9,xje),e(Tm,kje),e(v,Rje),e(v,Fm),e(Fm,CH),e(CH,Sje),e(Fm,Pje),e(Fm,$9),e($9,$je),e(Fm,Ije),e(v,Nje),e(v,Cm),e(Cm,MH),e(MH,jje),e(Cm,Dje),e(Cm,I9),e(I9,qje),e(Cm,Gje),e(v,Oje),e(v,Mm),e(Mm,EH),e(EH,Xje),e(Mm,Vje),e(Mm,N9),e(N9,zje),e(Mm,Wje),e(v,Qje),e(v,Em),e(Em,yH),e(yH,Hje),e(Em,Uje),e(Em,j9),e(j9,Jje),e(Em,Yje),e(v,Kje),e(v,ym),e(ym,wH),e(wH,Zje),e(ym,eDe),e(ym,D9),e(D9,oDe),e(ym,rDe),e(v,tDe),e(v,wm),e(wm,AH),e(AH,aDe),e(wm,nDe),e(wm,q9),e(q9,sDe),e(wm,lDe),e(v,iDe),e(v,Am),e(Am,LH),e(LH,dDe),e(Am,cDe),e(Am,G9),e(G9,fDe),e(Am,mDe),e(v,gDe),e(v,Lm),e(Lm,BH),e(BH,hDe),e(Lm,pDe),e(Lm,O9),e(O9,_De),e(Lm,uDe),e(v,bDe),e(v,Bm),e(Bm,xH),e(xH,vDe),e(Bm,TDe),e(Bm,X9),e(X9,FDe),e(Bm,CDe),e(v,MDe),e(v,xm),e(xm,kH),e(kH,EDe),e(xm,yDe),e(xm,V9),e(V9,wDe),e(xm,ADe),e(v,LDe),e(v,km),e(km,RH),e(RH,BDe),e(km,xDe),e(km,z9),e(z9,kDe),e(km,RDe),e(v,SDe),e(v,Rm),e(Rm,SH),e(SH,PDe),e(Rm,$De),e(Rm,W9),e(W9,IDe),e(Rm,NDe),e(v,jDe),e(v,Sm),e(Sm,PH),e(PH,DDe),e(Sm,qDe),e(Sm,Q9),e(Q9,GDe),e(Sm,ODe),e(v,XDe),e(v,Pm),e(Pm,$H),e($H,VDe),e(Pm,zDe),e(Pm,H9),e(H9,WDe),e(Pm,QDe),e(v,HDe),e(v,$m),e($m,IH),e(IH,UDe),e($m,JDe),e($m,U9),e(U9,YDe),e($m,KDe),e(v,ZDe),e(v,Im),e(Im,NH),e(NH,eqe),e(Im,oqe),e(Im,J9),e(J9,rqe),e(Im,tqe),e(v,aqe),e(v,Nm),e(Nm,jH),e(jH,nqe),e(Nm,sqe),e(Nm,Y9),e(Y9,lqe),e(Nm,iqe),e(v,dqe),e(v,jm),e(jm,DH),e(DH,cqe),e(jm,fqe),e(jm,K9),e(K9,mqe),e(jm,gqe),e(v,hqe),e(v,Dm),e(Dm,qH),e(qH,pqe),e(Dm,_qe),e(Dm,Z9),e(Z9,uqe),e(Dm,bqe),e(v,vqe),e(v,qm),e(qm,GH),e(GH,Tqe),e(qm,Fqe),e(qm,eB),e(eB,Cqe),e(qm,Mqe),e(v,Eqe),e(v,Gm),e(Gm,OH),e(OH,yqe),e(Gm,wqe),e(Gm,oB),e(oB,Aqe),e(Gm,Lqe),e(v,Bqe),e(v,Om),e(Om,XH),e(XH,xqe),e(Om,kqe),e(Om,rB),e(rB,Rqe),e(Om,Sqe),e(v,Pqe),e(v,Xm),e(Xm,VH),e(VH,$qe),e(Xm,Iqe),e(Xm,tB),e(tB,Nqe),e(Xm,jqe),e(v,Dqe),e(v,Vm),e(Vm,zH),e(zH,qqe),e(Vm,Gqe),e(Vm,aB),e(aB,Oqe),e(Vm,Xqe),e(v,Vqe),e(v,zm),e(zm,WH),e(WH,zqe),e(zm,Wqe),e(zm,nB),e(nB,Qqe),e(zm,Hqe),e(v,Uqe),e(v,Wm),e(Wm,QH),e(QH,Jqe),e(Wm,Yqe),e(Wm,sB),e(sB,Kqe),e(Wm,Zqe),e(v,eGe),e(v,Qm),e(Qm,HH),e(HH,oGe),e(Qm,rGe),e(Qm,lB),e(lB,tGe),e(Qm,aGe),e(v,nGe),e(v,Hm),e(Hm,UH),e(UH,sGe),e(Hm,lGe),e(Hm,iB),e(iB,iGe),e(Hm,dGe),e(v,cGe),e(v,Um),e(Um,JH),e(JH,fGe),e(Um,mGe),e(Um,dB),e(dB,gGe),e(Um,hGe),e(v,pGe),e(v,Jm),e(Jm,YH),e(YH,_Ge),e(Jm,uGe),e(Jm,cB),e(cB,bGe),e(Jm,vGe),e(v,TGe),e(v,Ym),e(Ym,KH),e(KH,FGe),e(Ym,CGe),e(Ym,fB),e(fB,MGe),e(Ym,EGe),e(v,yGe),e(v,Km),e(Km,ZH),e(ZH,wGe),e(Km,AGe),e(Km,mB),e(mB,LGe),e(Km,BGe),e(v,xGe),e(v,Zm),e(Zm,eU),e(eU,kGe),e(Zm,RGe),e(Zm,gB),e(gB,SGe),e(Zm,PGe),e(v,$Ge),e(v,eg),e(eg,oU),e(oU,IGe),e(eg,NGe),e(eg,hB),e(hB,jGe),e(eg,DGe),e(v,qGe),e(v,og),e(og,rU),e(rU,GGe),e(og,OGe),e(og,pB),e(pB,XGe),e(og,VGe),e(v,zGe),e(v,rg),e(rg,tU),e(tU,WGe),e(rg,QGe),e(rg,_B),e(_B,HGe),e(rg,UGe),e(v,JGe),e(v,tg),e(tg,aU),e(aU,YGe),e(tg,KGe),e(tg,uB),e(uB,ZGe),e(tg,eOe),e(v,oOe),e(v,ag),e(ag,nU),e(nU,rOe),e(ag,tOe),e(ag,bB),e(bB,aOe),e(ag,nOe),e(v,sOe),e(v,ng),e(ng,sU),e(sU,lOe),e(ng,iOe),e(ng,vB),e(vB,dOe),e(ng,cOe),e(v,fOe),e(v,sg),e(sg,lU),e(lU,mOe),e(sg,gOe),e(sg,TB),e(TB,hOe),e(sg,pOe),e(v,_Oe),e(v,lg),e(lg,iU),e(iU,uOe),e(lg,bOe),e(lg,FB),e(FB,vOe),e(lg,TOe),e(v,FOe),e(v,ig),e(ig,dU),e(dU,COe),e(ig,MOe),e(ig,CB),e(CB,EOe),e(ig,yOe),e(v,wOe),e(v,dg),e(dg,cU),e(cU,AOe),e(dg,LOe),e(dg,MB),e(MB,BOe),e(dg,xOe),e(v,kOe),e(v,cg),e(cg,fU),e(fU,ROe),e(cg,SOe),e(cg,EB),e(EB,POe),e(cg,$Oe),e(v,IOe),e(v,fg),e(fg,mU),e(mU,NOe),e(fg,jOe),e(fg,yB),e(yB,DOe),e(fg,qOe),e(v,GOe),e(v,mg),e(mg,gU),e(gU,OOe),e(mg,XOe),e(mg,wB),e(wB,VOe),e(mg,zOe),e(v,WOe),e(v,gg),e(gg,hU),e(hU,QOe),e(gg,HOe),e(gg,AB),e(AB,UOe),e(gg,JOe),e(v,YOe),e(v,hg),e(hg,pU),e(pU,KOe),e(hg,ZOe),e(hg,LB),e(LB,eXe),e(hg,oXe),e(v,rXe),e(v,pg),e(pg,_U),e(_U,tXe),e(pg,aXe),e(pg,BB),e(BB,nXe),e(pg,sXe),e(v,lXe),e(v,_g),e(_g,uU),e(uU,iXe),e(_g,dXe),e(_g,xB),e(xB,cXe),e(_g,fXe),e(v,mXe),e(v,ug),e(ug,bU),e(bU,gXe),e(ug,hXe),e(ug,kB),e(kB,pXe),e(ug,_Xe),e(v,uXe),e(v,bg),e(bg,vU),e(vU,bXe),e(bg,vXe),e(bg,RB),e(RB,TXe),e(bg,FXe),e(v,CXe),e(v,vg),e(vg,TU),e(TU,MXe),e(vg,EXe),e(vg,SB),e(SB,yXe),e(vg,wXe),e(v,AXe),e(v,Tg),e(Tg,FU),e(FU,LXe),e(Tg,BXe),e(Tg,PB),e(PB,xXe),e(Tg,kXe),e(v,RXe),e(v,Fg),e(Fg,CU),e(CU,SXe),e(Fg,PXe),e(Fg,$B),e($B,$Xe),e(Fg,IXe),e(v,NXe),e(v,Cg),e(Cg,MU),e(MU,jXe),e(Cg,DXe),e(Cg,IB),e(IB,qXe),e(Cg,GXe),e(v,OXe),e(v,Mg),e(Mg,EU),e(EU,XXe),e(Mg,VXe),e(Mg,NB),e(NB,zXe),e(Mg,WXe),e(v,QXe),e(v,Eg),e(Eg,yU),e(yU,HXe),e(Eg,UXe),e(Eg,jB),e(jB,JXe),e(Eg,YXe),e(v,KXe),e(v,yg),e(yg,wU),e(wU,ZXe),e(yg,eVe),e(yg,DB),e(DB,oVe),e(yg,rVe),e(v,tVe),e(v,wg),e(wg,AU),e(AU,aVe),e(wg,nVe),e(wg,qB),e(qB,sVe),e(wg,lVe),e(v,iVe),e(v,Ag),e(Ag,LU),e(LU,dVe),e(Ag,cVe),e(Ag,GB),e(GB,fVe),e(Ag,mVe),e(v,gVe),e(v,Lg),e(Lg,BU),e(BU,hVe),e(Lg,pVe),e(Lg,OB),e(OB,_Ve),e(Lg,uVe),e(v,bVe),e(v,Bg),e(Bg,xU),e(xU,vVe),e(Bg,TVe),e(Bg,XB),e(XB,FVe),e(Bg,CVe),e(v,MVe),e(v,xg),e(xg,kU),e(kU,EVe),e(xg,yVe),e(xg,VB),e(VB,wVe),e(xg,AVe),e(v,LVe),e(v,kg),e(kg,RU),e(RU,BVe),e(kg,xVe),e(kg,zB),e(zB,kVe),e(kg,RVe),e(mo,SVe),e(mo,SU),e(SU,PVe),e(mo,$Ve),g(hE,mo,null),e(Wo,IVe),e(Wo,Rg),g(pE,Rg,null),e(Rg,NVe),e(Rg,PU),e(PU,jVe),b(c,Zxe,u),b(c,Qi,u),e(Qi,Sg),e(Sg,$U),g(_E,$U,null),e(Qi,DVe),e(Qi,IU),e(IU,qVe),b(c,eke,u),b(c,Qo,u),g(uE,Qo,null),e(Qo,GVe),e(Qo,bE),e(bE,OVe),e(bE,WB),e(WB,XVe),e(bE,VVe),e(Qo,zVe),e(Qo,vE),e(vE,WVe),e(vE,NU),e(NU,QVe),e(vE,HVe),e(Qo,UVe),e(Qo,go),g(TE,go,null),e(go,JVe),e(go,jU),e(jU,YVe),e(go,KVe),e(go,Oa),e(Oa,ZVe),e(Oa,DU),e(DU,eze),e(Oa,oze),e(Oa,qU),e(qU,rze),e(Oa,tze),e(Oa,GU),e(GU,aze),e(Oa,nze),e(go,sze),e(go,E),e(E,Wn),e(Wn,OU),e(OU,lze),e(Wn,ize),e(Wn,QB),e(QB,dze),e(Wn,cze),e(Wn,HB),e(HB,fze),e(Wn,mze),e(E,gze),e(E,Qn),e(Qn,XU),e(XU,hze),e(Qn,pze),e(Qn,UB),e(UB,_ze),e(Qn,uze),e(Qn,JB),e(JB,bze),e(Qn,vze),e(E,Tze),e(E,Hn),e(Hn,VU),e(VU,Fze),e(Hn,Cze),e(Hn,YB),e(YB,Mze),e(Hn,Eze),e(Hn,KB),e(KB,yze),e(Hn,wze),e(E,Aze),e(E,Pg),e(Pg,zU),e(zU,Lze),e(Pg,Bze),e(Pg,ZB),e(ZB,xze),e(Pg,kze),e(E,Rze),e(E,Un),e(Un,WU),e(WU,Sze),e(Un,Pze),e(Un,ex),e(ex,$ze),e(Un,Ize),e(Un,ox),e(ox,Nze),e(Un,jze),e(E,Dze),e(E,$g),e($g,QU),e(QU,qze),e($g,Gze),e($g,rx),e(rx,Oze),e($g,Xze),e(E,Vze),e(E,Ig),e(Ig,HU),e(HU,zze),e(Ig,Wze),e(Ig,tx),e(tx,Qze),e(Ig,Hze),e(E,Uze),e(E,Ng),e(Ng,UU),e(UU,Jze),e(Ng,Yze),e(Ng,ax),e(ax,Kze),e(Ng,Zze),e(E,eWe),e(E,Jn),e(Jn,JU),e(JU,oWe),e(Jn,rWe),e(Jn,nx),e(nx,tWe),e(Jn,aWe),e(Jn,sx),e(sx,nWe),e(Jn,sWe),e(E,lWe),e(E,Yn),e(Yn,YU),e(YU,iWe),e(Yn,dWe),e(Yn,lx),e(lx,cWe),e(Yn,fWe),e(Yn,ix),e(ix,mWe),e(Yn,gWe),e(E,hWe),e(E,Kn),e(Kn,KU),e(KU,pWe),e(Kn,_We),e(Kn,dx),e(dx,uWe),e(Kn,bWe),e(Kn,cx),e(cx,vWe),e(Kn,TWe),e(E,FWe),e(E,jg),e(jg,ZU),e(ZU,CWe),e(jg,MWe),e(jg,fx),e(fx,EWe),e(jg,yWe),e(E,wWe),e(E,Dg),e(Dg,eJ),e(eJ,AWe),e(Dg,LWe),e(Dg,mx),e(mx,BWe),e(Dg,xWe),e(E,kWe),e(E,Zn),e(Zn,oJ),e(oJ,RWe),e(Zn,SWe),e(Zn,gx),e(gx,PWe),e(Zn,$We),e(Zn,hx),e(hx,IWe),e(Zn,NWe),e(E,jWe),e(E,qg),e(qg,rJ),e(rJ,DWe),e(qg,qWe),e(qg,px),e(px,GWe),e(qg,OWe),e(E,XWe),e(E,es),e(es,tJ),e(tJ,VWe),e(es,zWe),e(es,_x),e(_x,WWe),e(es,QWe),e(es,ux),e(ux,HWe),e(es,UWe),e(E,JWe),e(E,os),e(os,aJ),e(aJ,YWe),e(os,KWe),e(os,bx),e(bx,ZWe),e(os,eQe),e(os,vx),e(vx,oQe),e(os,rQe),e(E,tQe),e(E,rs),e(rs,nJ),e(nJ,aQe),e(rs,nQe),e(rs,Tx),e(Tx,sQe),e(rs,lQe),e(rs,sJ),e(sJ,iQe),e(rs,dQe),e(E,cQe),e(E,Gg),e(Gg,lJ),e(lJ,fQe),e(Gg,mQe),e(Gg,Fx),e(Fx,gQe),e(Gg,hQe),e(E,pQe),e(E,ts),e(ts,iJ),e(iJ,_Qe),e(ts,uQe),e(ts,Cx),e(Cx,bQe),e(ts,vQe),e(ts,Mx),e(Mx,TQe),e(ts,FQe),e(E,CQe),e(E,Og),e(Og,dJ),e(dJ,MQe),e(Og,EQe),e(Og,Ex),e(Ex,yQe),e(Og,wQe),e(E,AQe),e(E,as),e(as,cJ),e(cJ,LQe),e(as,BQe),e(as,yx),e(yx,xQe),e(as,kQe),e(as,wx),e(wx,RQe),e(as,SQe),e(E,PQe),e(E,ns),e(ns,fJ),e(fJ,$Qe),e(ns,IQe),e(ns,Ax),e(Ax,NQe),e(ns,jQe),e(ns,Lx),e(Lx,DQe),e(ns,qQe),e(E,GQe),e(E,ss),e(ss,mJ),e(mJ,OQe),e(ss,XQe),e(ss,Bx),e(Bx,VQe),e(ss,zQe),e(ss,xx),e(xx,WQe),e(ss,QQe),e(E,HQe),e(E,Xg),e(Xg,gJ),e(gJ,UQe),e(Xg,JQe),e(Xg,kx),e(kx,YQe),e(Xg,KQe),e(E,ZQe),e(E,ls),e(ls,hJ),e(hJ,eHe),e(ls,oHe),e(ls,Rx),e(Rx,rHe),e(ls,tHe),e(ls,Sx),e(Sx,aHe),e(ls,nHe),e(E,sHe),e(E,Vg),e(Vg,pJ),e(pJ,lHe),e(Vg,iHe),e(Vg,Px),e(Px,dHe),e(Vg,cHe),e(E,fHe),e(E,is),e(is,_J),e(_J,mHe),e(is,gHe),e(is,$x),e($x,hHe),e(is,pHe),e(is,Ix),e(Ix,_He),e(is,uHe),e(E,bHe),e(E,ds),e(ds,uJ),e(uJ,vHe),e(ds,THe),e(ds,Nx),e(Nx,FHe),e(ds,CHe),e(ds,jx),e(jx,MHe),e(ds,EHe),e(E,yHe),e(E,cs),e(cs,bJ),e(bJ,wHe),e(cs,AHe),e(cs,Dx),e(Dx,LHe),e(cs,BHe),e(cs,qx),e(qx,xHe),e(cs,kHe),e(E,RHe),e(E,fs),e(fs,vJ),e(vJ,SHe),e(fs,PHe),e(fs,Gx),e(Gx,$He),e(fs,IHe),e(fs,Ox),e(Ox,NHe),e(fs,jHe),e(E,DHe),e(E,zg),e(zg,TJ),e(TJ,qHe),e(zg,GHe),e(zg,Xx),e(Xx,OHe),e(zg,XHe),e(E,VHe),e(E,ms),e(ms,FJ),e(FJ,zHe),e(ms,WHe),e(ms,Vx),e(Vx,QHe),e(ms,HHe),e(ms,zx),e(zx,UHe),e(ms,JHe),e(E,YHe),e(E,gs),e(gs,CJ),e(CJ,KHe),e(gs,ZHe),e(gs,Wx),e(Wx,eUe),e(gs,oUe),e(gs,Qx),e(Qx,rUe),e(gs,tUe),e(E,aUe),e(E,hs),e(hs,MJ),e(MJ,nUe),e(hs,sUe),e(hs,Hx),e(Hx,lUe),e(hs,iUe),e(hs,Ux),e(Ux,dUe),e(hs,cUe),e(E,fUe),e(E,ps),e(ps,EJ),e(EJ,mUe),e(ps,gUe),e(ps,Jx),e(Jx,hUe),e(ps,pUe),e(ps,Yx),e(Yx,_Ue),e(ps,uUe),e(E,bUe),e(E,_s),e(_s,yJ),e(yJ,vUe),e(_s,TUe),e(_s,Kx),e(Kx,FUe),e(_s,CUe),e(_s,Zx),e(Zx,MUe),e(_s,EUe),e(E,yUe),e(E,us),e(us,wJ),e(wJ,wUe),e(us,AUe),e(us,ek),e(ek,LUe),e(us,BUe),e(us,ok),e(ok,xUe),e(us,kUe),e(E,RUe),e(E,Wg),e(Wg,AJ),e(AJ,SUe),e(Wg,PUe),e(Wg,rk),e(rk,$Ue),e(Wg,IUe),e(E,NUe),e(E,bs),e(bs,LJ),e(LJ,jUe),e(bs,DUe),e(bs,tk),e(tk,qUe),e(bs,GUe),e(bs,ak),e(ak,OUe),e(bs,XUe),e(E,VUe),e(E,Qg),e(Qg,BJ),e(BJ,zUe),e(Qg,WUe),e(Qg,nk),e(nk,QUe),e(Qg,HUe),e(E,UUe),e(E,Hg),e(Hg,xJ),e(xJ,JUe),e(Hg,YUe),e(Hg,sk),e(sk,KUe),e(Hg,ZUe),e(E,eJe),e(E,vs),e(vs,kJ),e(kJ,oJe),e(vs,rJe),e(vs,lk),e(lk,tJe),e(vs,aJe),e(vs,ik),e(ik,nJe),e(vs,sJe),e(E,lJe),e(E,Ts),e(Ts,RJ),e(RJ,iJe),e(Ts,dJe),e(Ts,dk),e(dk,cJe),e(Ts,fJe),e(Ts,ck),e(ck,mJe),e(Ts,gJe),e(E,hJe),e(E,Ug),e(Ug,SJ),e(SJ,pJe),e(Ug,_Je),e(Ug,fk),e(fk,uJe),e(Ug,bJe),e(E,vJe),e(E,Fs),e(Fs,PJ),e(PJ,TJe),e(Fs,FJe),e(Fs,mk),e(mk,CJe),e(Fs,MJe),e(Fs,gk),e(gk,EJe),e(Fs,yJe),e(E,wJe),e(E,Cs),e(Cs,$J),e($J,AJe),e(Cs,LJe),e(Cs,hk),e(hk,BJe),e(Cs,xJe),e(Cs,pk),e(pk,kJe),e(Cs,RJe),e(E,SJe),e(E,Ms),e(Ms,IJ),e(IJ,PJe),e(Ms,$Je),e(Ms,_k),e(_k,IJe),e(Ms,NJe),e(Ms,uk),e(uk,jJe),e(Ms,DJe),e(E,qJe),e(E,Es),e(Es,NJ),e(NJ,GJe),e(Es,OJe),e(Es,bk),e(bk,XJe),e(Es,VJe),e(Es,vk),e(vk,zJe),e(Es,WJe),e(E,QJe),e(E,ys),e(ys,jJ),e(jJ,HJe),e(ys,UJe),e(ys,Tk),e(Tk,JJe),e(ys,YJe),e(ys,Fk),e(Fk,KJe),e(ys,ZJe),e(E,eYe),e(E,Jg),e(Jg,DJ),e(DJ,oYe),e(Jg,rYe),e(Jg,Ck),e(Ck,tYe),e(Jg,aYe),e(E,nYe),e(E,Yg),e(Yg,qJ),e(qJ,sYe),e(Yg,lYe),e(Yg,Mk),e(Mk,iYe),e(Yg,dYe),e(E,cYe),e(E,Kg),e(Kg,GJ),e(GJ,fYe),e(Kg,mYe),e(Kg,Ek),e(Ek,gYe),e(Kg,hYe),e(E,pYe),e(E,Zg),e(Zg,OJ),e(OJ,_Ye),e(Zg,uYe),e(Zg,yk),e(yk,bYe),e(Zg,vYe),e(E,TYe),e(E,ws),e(ws,XJ),e(XJ,FYe),e(ws,CYe),e(ws,wk),e(wk,MYe),e(ws,EYe),e(ws,Ak),e(Ak,yYe),e(ws,wYe),e(E,AYe),e(E,eh),e(eh,VJ),e(VJ,LYe),e(eh,BYe),e(eh,Lk),e(Lk,xYe),e(eh,kYe),e(E,RYe),e(E,As),e(As,zJ),e(zJ,SYe),e(As,PYe),e(As,Bk),e(Bk,$Ye),e(As,IYe),e(As,xk),e(xk,NYe),e(As,jYe),e(E,DYe),e(E,Ls),e(Ls,WJ),e(WJ,qYe),e(Ls,GYe),e(Ls,kk),e(kk,OYe),e(Ls,XYe),e(Ls,Rk),e(Rk,VYe),e(Ls,zYe),e(E,WYe),e(E,Bs),e(Bs,QJ),e(QJ,QYe),e(Bs,HYe),e(Bs,Sk),e(Sk,UYe),e(Bs,JYe),e(Bs,Pk),e(Pk,YYe),e(Bs,KYe),e(E,ZYe),e(E,xs),e(xs,HJ),e(HJ,eKe),e(xs,oKe),e(xs,$k),e($k,rKe),e(xs,tKe),e(xs,Ik),e(Ik,aKe),e(xs,nKe),e(E,sKe),e(E,ks),e(ks,UJ),e(UJ,lKe),e(ks,iKe),e(ks,Nk),e(Nk,dKe),e(ks,cKe),e(ks,jk),e(jk,fKe),e(ks,mKe),e(E,gKe),e(E,Rs),e(Rs,JJ),e(JJ,hKe),e(Rs,pKe),e(Rs,Dk),e(Dk,_Ke),e(Rs,uKe),e(Rs,qk),e(qk,bKe),e(Rs,vKe),e(E,TKe),e(E,oh),e(oh,YJ),e(YJ,FKe),e(oh,CKe),e(oh,Gk),e(Gk,MKe),e(oh,EKe),e(E,yKe),e(E,rh),e(rh,KJ),e(KJ,wKe),e(rh,AKe),e(rh,Ok),e(Ok,LKe),e(rh,BKe),e(E,xKe),e(E,Ss),e(Ss,ZJ),e(ZJ,kKe),e(Ss,RKe),e(Ss,Xk),e(Xk,SKe),e(Ss,PKe),e(Ss,Vk),e(Vk,$Ke),e(Ss,IKe),e(E,NKe),e(E,Ps),e(Ps,eY),e(eY,jKe),e(Ps,DKe),e(Ps,zk),e(zk,qKe),e(Ps,GKe),e(Ps,Wk),e(Wk,OKe),e(Ps,XKe),e(E,VKe),e(E,$s),e($s,oY),e(oY,zKe),e($s,WKe),e($s,Qk),e(Qk,QKe),e($s,HKe),e($s,Hk),e(Hk,UKe),e($s,JKe),e(E,YKe),e(E,th),e(th,rY),e(rY,KKe),e(th,ZKe),e(th,Uk),e(Uk,eZe),e(th,oZe),e(E,rZe),e(E,ah),e(ah,tY),e(tY,tZe),e(ah,aZe),e(ah,Jk),e(Jk,nZe),e(ah,sZe),e(E,lZe),e(E,nh),e(nh,aY),e(aY,iZe),e(nh,dZe),e(nh,Yk),e(Yk,cZe),e(nh,fZe),e(E,mZe),e(E,sh),e(sh,nY),e(nY,gZe),e(sh,hZe),e(sh,Kk),e(Kk,pZe),e(sh,_Ze),e(E,uZe),e(E,Is),e(Is,sY),e(sY,bZe),e(Is,vZe),e(Is,Zk),e(Zk,TZe),e(Is,FZe),e(Is,eR),e(eR,CZe),e(Is,MZe),e(E,EZe),e(E,lh),e(lh,lY),e(lY,yZe),e(lh,wZe),e(lh,oR),e(oR,AZe),e(lh,LZe),e(E,BZe),e(E,ih),e(ih,iY),e(iY,xZe),e(ih,kZe),e(ih,rR),e(rR,RZe),e(ih,SZe),e(E,PZe),e(E,Ns),e(Ns,dY),e(dY,$Ze),e(Ns,IZe),e(Ns,tR),e(tR,NZe),e(Ns,jZe),e(Ns,aR),e(aR,DZe),e(Ns,qZe),e(E,GZe),e(E,js),e(js,cY),e(cY,OZe),e(js,XZe),e(js,nR),e(nR,VZe),e(js,zZe),e(js,sR),e(sR,WZe),e(js,QZe),e(go,HZe),e(go,fY),e(fY,UZe),e(go,JZe),g(FE,go,null),e(Qo,YZe),e(Qo,dh),g(CE,dh,null),e(dh,KZe),e(dh,mY),e(mY,ZZe),b(c,oke,u),b(c,Hi,u),e(Hi,ch),e(ch,gY),g(ME,gY,null),e(Hi,eeo),e(Hi,hY),e(hY,oeo),b(c,rke,u),b(c,Ho,u),g(EE,Ho,null),e(Ho,reo),e(Ho,yE),e(yE,teo),e(yE,lR),e(lR,aeo),e(yE,neo),e(Ho,seo),e(Ho,wE),e(wE,leo),e(wE,pY),e(pY,ieo),e(wE,deo),e(Ho,ceo),e(Ho,Ie),g(AE,Ie,null),e(Ie,feo),e(Ie,_Y),e(_Y,meo),e(Ie,geo),e(Ie,Xa),e(Xa,heo),e(Xa,uY),e(uY,peo),e(Xa,_eo),e(Xa,bY),e(bY,ueo),e(Xa,beo),e(Xa,vY),e(vY,veo),e(Xa,Teo),e(Ie,Feo),e(Ie,re),e(re,fh),e(fh,TY),e(TY,Ceo),e(fh,Meo),e(fh,iR),e(iR,Eeo),e(fh,yeo),e(re,weo),e(re,mh),e(mh,FY),e(FY,Aeo),e(mh,Leo),e(mh,dR),e(dR,Beo),e(mh,xeo),e(re,keo),e(re,gh),e(gh,CY),e(CY,Reo),e(gh,Seo),e(gh,cR),e(cR,Peo),e(gh,$eo),e(re,Ieo),e(re,hh),e(hh,MY),e(MY,Neo),e(hh,jeo),e(hh,fR),e(fR,Deo),e(hh,qeo),e(re,Geo),e(re,ph),e(ph,EY),e(EY,Oeo),e(ph,Xeo),e(ph,mR),e(mR,Veo),e(ph,zeo),e(re,Weo),e(re,_h),e(_h,yY),e(yY,Qeo),e(_h,Heo),e(_h,gR),e(gR,Ueo),e(_h,Jeo),e(re,Yeo),e(re,uh),e(uh,wY),e(wY,Keo),e(uh,Zeo),e(uh,hR),e(hR,eoo),e(uh,ooo),e(re,roo),e(re,bh),e(bh,AY),e(AY,too),e(bh,aoo),e(bh,pR),e(pR,noo),e(bh,soo),e(re,loo),e(re,vh),e(vh,LY),e(LY,ioo),e(vh,doo),e(vh,_R),e(_R,coo),e(vh,foo),e(re,moo),e(re,Th),e(Th,BY),e(BY,goo),e(Th,hoo),e(Th,uR),e(uR,poo),e(Th,_oo),e(re,uoo),e(re,Fh),e(Fh,xY),e(xY,boo),e(Fh,voo),e(Fh,bR),e(bR,Too),e(Fh,Foo),e(re,Coo),e(re,Ch),e(Ch,kY),e(kY,Moo),e(Ch,Eoo),e(Ch,vR),e(vR,yoo),e(Ch,woo),e(re,Aoo),e(re,Mh),e(Mh,RY),e(RY,Loo),e(Mh,Boo),e(Mh,TR),e(TR,xoo),e(Mh,koo),e(re,Roo),e(re,Eh),e(Eh,SY),e(SY,Soo),e(Eh,Poo),e(Eh,FR),e(FR,$oo),e(Eh,Ioo),e(re,Noo),e(re,yh),e(yh,PY),e(PY,joo),e(yh,Doo),e(yh,CR),e(CR,qoo),e(yh,Goo),e(re,Ooo),e(re,wh),e(wh,$Y),e($Y,Xoo),e(wh,Voo),e(wh,MR),e(MR,zoo),e(wh,Woo),e(re,Qoo),e(re,Ah),e(Ah,IY),e(IY,Hoo),e(Ah,Uoo),e(Ah,ER),e(ER,Joo),e(Ah,Yoo),e(re,Koo),e(re,Lh),e(Lh,NY),e(NY,Zoo),e(Lh,ero),e(Lh,yR),e(yR,oro),e(Lh,rro),e(Ie,tro),g(Bh,Ie,null),e(Ie,aro),e(Ie,jY),e(jY,nro),e(Ie,sro),g(LE,Ie,null),e(Ho,lro),e(Ho,xh),g(BE,xh,null),e(xh,iro),e(xh,DY),e(DY,dro),b(c,tke,u),b(c,Ui,u),e(Ui,kh),e(kh,qY),g(xE,qY,null),e(Ui,cro),e(Ui,GY),e(GY,fro),b(c,ake,u),b(c,Uo,u),g(kE,Uo,null),e(Uo,mro),e(Uo,RE),e(RE,gro),e(RE,wR),e(wR,hro),e(RE,pro),e(Uo,_ro),e(Uo,SE),e(SE,uro),e(SE,OY),e(OY,bro),e(SE,vro),e(Uo,Tro),e(Uo,Ne),g(PE,Ne,null),e(Ne,Fro),e(Ne,XY),e(XY,Cro),e(Ne,Mro),e(Ne,Ji),e(Ji,Ero),e(Ji,VY),e(VY,yro),e(Ji,wro),e(Ji,zY),e(zY,Aro),e(Ji,Lro),e(Ne,Bro),e(Ne,xe),e(xe,Rh),e(Rh,WY),e(WY,xro),e(Rh,kro),e(Rh,AR),e(AR,Rro),e(Rh,Sro),e(xe,Pro),e(xe,Sh),e(Sh,QY),e(QY,$ro),e(Sh,Iro),e(Sh,LR),e(LR,Nro),e(Sh,jro),e(xe,Dro),e(xe,Ph),e(Ph,HY),e(HY,qro),e(Ph,Gro),e(Ph,BR),e(BR,Oro),e(Ph,Xro),e(xe,Vro),e(xe,$h),e($h,UY),e(UY,zro),e($h,Wro),e($h,xR),e(xR,Qro),e($h,Hro),e(xe,Uro),e(xe,Ih),e(Ih,JY),e(JY,Jro),e(Ih,Yro),e(Ih,kR),e(kR,Kro),e(Ih,Zro),e(xe,eto),e(xe,Nh),e(Nh,YY),e(YY,oto),e(Nh,rto),e(Nh,RR),e(RR,tto),e(Nh,ato),e(xe,nto),e(xe,jh),e(jh,KY),e(KY,sto),e(jh,lto),e(jh,SR),e(SR,ito),e(jh,dto),e(xe,cto),e(xe,Dh),e(Dh,ZY),e(ZY,fto),e(Dh,mto),e(Dh,PR),e(PR,gto),e(Dh,hto),e(Ne,pto),g(qh,Ne,null),e(Ne,_to),e(Ne,eK),e(eK,uto),e(Ne,bto),g($E,Ne,null),e(Uo,vto),e(Uo,Gh),g(IE,Gh,null),e(Gh,Tto),e(Gh,oK),e(oK,Fto),b(c,nke,u),b(c,Yi,u),e(Yi,Oh),e(Oh,rK),g(NE,rK,null),e(Yi,Cto),e(Yi,tK),e(tK,Mto),b(c,ske,u),b(c,Jo,u),g(jE,Jo,null),e(Jo,Eto),e(Jo,Ki),e(Ki,yto),e(Ki,aK),e(aK,wto),e(Ki,Ato),e(Ki,nK),e(nK,Lto),e(Ki,Bto),e(Jo,xto),e(Jo,DE),e(DE,kto),e(DE,sK),e(sK,Rto),e(DE,Sto),e(Jo,Pto),e(Jo,Vr),g(qE,Vr,null),e(Vr,$to),e(Vr,lK),e(lK,Ito),e(Vr,Nto),e(Vr,Zi),e(Zi,jto),e(Zi,iK),e(iK,Dto),e(Zi,qto),e(Zi,dK),e(dK,Gto),e(Zi,Oto),e(Vr,Xto),e(Vr,cK),e(cK,Vto),e(Vr,zto),g(GE,Vr,null),e(Jo,Wto),e(Jo,je),g(OE,je,null),e(je,Qto),e(je,fK),e(fK,Hto),e(je,Uto),e(je,Va),e(Va,Jto),e(Va,mK),e(mK,Yto),e(Va,Kto),e(Va,gK),e(gK,Zto),e(Va,eao),e(Va,hK),e(hK,oao),e(Va,rao),e(je,tao),e(je,F),e(F,Xh),e(Xh,pK),e(pK,aao),e(Xh,nao),e(Xh,$R),e($R,sao),e(Xh,lao),e(F,iao),e(F,Vh),e(Vh,_K),e(_K,dao),e(Vh,cao),e(Vh,IR),e(IR,fao),e(Vh,mao),e(F,gao),e(F,zh),e(zh,uK),e(uK,hao),e(zh,pao),e(zh,NR),e(NR,_ao),e(zh,uao),e(F,bao),e(F,Wh),e(Wh,bK),e(bK,vao),e(Wh,Tao),e(Wh,jR),e(jR,Fao),e(Wh,Cao),e(F,Mao),e(F,Qh),e(Qh,vK),e(vK,Eao),e(Qh,yao),e(Qh,DR),e(DR,wao),e(Qh,Aao),e(F,Lao),e(F,Hh),e(Hh,TK),e(TK,Bao),e(Hh,xao),e(Hh,qR),e(qR,kao),e(Hh,Rao),e(F,Sao),e(F,Uh),e(Uh,FK),e(FK,Pao),e(Uh,$ao),e(Uh,GR),e(GR,Iao),e(Uh,Nao),e(F,jao),e(F,Jh),e(Jh,CK),e(CK,Dao),e(Jh,qao),e(Jh,OR),e(OR,Gao),e(Jh,Oao),e(F,Xao),e(F,Yh),e(Yh,MK),e(MK,Vao),e(Yh,zao),e(Yh,XR),e(XR,Wao),e(Yh,Qao),e(F,Hao),e(F,Kh),e(Kh,EK),e(EK,Uao),e(Kh,Jao),e(Kh,VR),e(VR,Yao),e(Kh,Kao),e(F,Zao),e(F,Zh),e(Zh,yK),e(yK,eno),e(Zh,ono),e(Zh,zR),e(zR,rno),e(Zh,tno),e(F,ano),e(F,ep),e(ep,wK),e(wK,nno),e(ep,sno),e(ep,WR),e(WR,lno),e(ep,ino),e(F,dno),e(F,op),e(op,AK),e(AK,cno),e(op,fno),e(op,QR),e(QR,mno),e(op,gno),e(F,hno),e(F,rp),e(rp,LK),e(LK,pno),e(rp,_no),e(rp,HR),e(HR,uno),e(rp,bno),e(F,vno),e(F,tp),e(tp,BK),e(BK,Tno),e(tp,Fno),e(tp,UR),e(UR,Cno),e(tp,Mno),e(F,Eno),e(F,ap),e(ap,xK),e(xK,yno),e(ap,wno),e(ap,JR),e(JR,Ano),e(ap,Lno),e(F,Bno),e(F,np),e(np,kK),e(kK,xno),e(np,kno),e(np,YR),e(YR,Rno),e(np,Sno),e(F,Pno),e(F,sp),e(sp,RK),e(RK,$no),e(sp,Ino),e(sp,KR),e(KR,Nno),e(sp,jno),e(F,Dno),e(F,lp),e(lp,SK),e(SK,qno),e(lp,Gno),e(lp,ZR),e(ZR,Ono),e(lp,Xno),e(F,Vno),e(F,ip),e(ip,PK),e(PK,zno),e(ip,Wno),e(ip,eS),e(eS,Qno),e(ip,Hno),e(F,Uno),e(F,dp),e(dp,$K),e($K,Jno),e(dp,Yno),e(dp,oS),e(oS,Kno),e(dp,Zno),e(F,eso),e(F,cp),e(cp,IK),e(IK,oso),e(cp,rso),e(cp,rS),e(rS,tso),e(cp,aso),e(F,nso),e(F,fp),e(fp,NK),e(NK,sso),e(fp,lso),e(fp,tS),e(tS,iso),e(fp,dso),e(F,cso),e(F,mp),e(mp,jK),e(jK,fso),e(mp,mso),e(mp,aS),e(aS,gso),e(mp,hso),e(F,pso),e(F,gp),e(gp,DK),e(DK,_so),e(gp,uso),e(gp,nS),e(nS,bso),e(gp,vso),e(F,Tso),e(F,hp),e(hp,qK),e(qK,Fso),e(hp,Cso),e(hp,sS),e(sS,Mso),e(hp,Eso),e(F,yso),e(F,pp),e(pp,GK),e(GK,wso),e(pp,Aso),e(pp,lS),e(lS,Lso),e(pp,Bso),e(F,xso),e(F,Ds),e(Ds,OK),e(OK,kso),e(Ds,Rso),e(Ds,iS),e(iS,Sso),e(Ds,Pso),e(Ds,dS),e(dS,$so),e(Ds,Iso),e(F,Nso),e(F,_p),e(_p,XK),e(XK,jso),e(_p,Dso),e(_p,cS),e(cS,qso),e(_p,Gso),e(F,Oso),e(F,up),e(up,VK),e(VK,Xso),e(up,Vso),e(up,fS),e(fS,zso),e(up,Wso),e(F,Qso),e(F,bp),e(bp,zK),e(zK,Hso),e(bp,Uso),e(bp,mS),e(mS,Jso),e(bp,Yso),e(F,Kso),e(F,vp),e(vp,WK),e(WK,Zso),e(vp,elo),e(vp,gS),e(gS,olo),e(vp,rlo),e(F,tlo),e(F,Tp),e(Tp,QK),e(QK,alo),e(Tp,nlo),e(Tp,hS),e(hS,slo),e(Tp,llo),e(F,ilo),e(F,Fp),e(Fp,HK),e(HK,dlo),e(Fp,clo),e(Fp,pS),e(pS,flo),e(Fp,mlo),e(F,glo),e(F,Cp),e(Cp,UK),e(UK,hlo),e(Cp,plo),e(Cp,_S),e(_S,_lo),e(Cp,ulo),e(F,blo),e(F,Mp),e(Mp,JK),e(JK,vlo),e(Mp,Tlo),e(Mp,uS),e(uS,Flo),e(Mp,Clo),e(F,Mlo),e(F,Ep),e(Ep,YK),e(YK,Elo),e(Ep,ylo),e(Ep,bS),e(bS,wlo),e(Ep,Alo),e(F,Llo),e(F,yp),e(yp,KK),e(KK,Blo),e(yp,xlo),e(yp,vS),e(vS,klo),e(yp,Rlo),e(F,Slo),e(F,wp),e(wp,ZK),e(ZK,Plo),e(wp,$lo),e(wp,TS),e(TS,Ilo),e(wp,Nlo),e(F,jlo),e(F,Ap),e(Ap,eZ),e(eZ,Dlo),e(Ap,qlo),e(Ap,FS),e(FS,Glo),e(Ap,Olo),e(F,Xlo),e(F,Lp),e(Lp,oZ),e(oZ,Vlo),e(Lp,zlo),e(Lp,CS),e(CS,Wlo),e(Lp,Qlo),e(F,Hlo),e(F,Bp),e(Bp,rZ),e(rZ,Ulo),e(Bp,Jlo),e(Bp,MS),e(MS,Ylo),e(Bp,Klo),e(F,Zlo),e(F,xp),e(xp,tZ),e(tZ,eio),e(xp,oio),e(xp,ES),e(ES,rio),e(xp,tio),e(F,aio),e(F,kp),e(kp,aZ),e(aZ,nio),e(kp,sio),e(kp,yS),e(yS,lio),e(kp,iio),e(F,dio),e(F,Rp),e(Rp,nZ),e(nZ,cio),e(Rp,fio),e(Rp,wS),e(wS,mio),e(Rp,gio),e(F,hio),e(F,Sp),e(Sp,sZ),e(sZ,pio),e(Sp,_io),e(Sp,AS),e(AS,uio),e(Sp,bio),e(F,vio),e(F,Pp),e(Pp,lZ),e(lZ,Tio),e(Pp,Fio),e(Pp,LS),e(LS,Cio),e(Pp,Mio),e(F,Eio),e(F,$p),e($p,iZ),e(iZ,yio),e($p,wio),e($p,BS),e(BS,Aio),e($p,Lio),e(F,Bio),e(F,Ip),e(Ip,dZ),e(dZ,xio),e(Ip,kio),e(Ip,xS),e(xS,Rio),e(Ip,Sio),e(F,Pio),e(F,Np),e(Np,cZ),e(cZ,$io),e(Np,Iio),e(Np,kS),e(kS,Nio),e(Np,jio),e(F,Dio),e(F,jp),e(jp,fZ),e(fZ,qio),e(jp,Gio),e(jp,RS),e(RS,Oio),e(jp,Xio),e(F,Vio),e(F,Dp),e(Dp,mZ),e(mZ,zio),e(Dp,Wio),e(Dp,SS),e(SS,Qio),e(Dp,Hio),e(F,Uio),e(F,qp),e(qp,gZ),e(gZ,Jio),e(qp,Yio),e(qp,PS),e(PS,Kio),e(qp,Zio),e(F,edo),e(F,Gp),e(Gp,hZ),e(hZ,odo),e(Gp,rdo),e(Gp,$S),e($S,tdo),e(Gp,ado),e(F,ndo),e(F,Op),e(Op,pZ),e(pZ,sdo),e(Op,ldo),e(Op,IS),e(IS,ido),e(Op,ddo),e(F,cdo),e(F,Xp),e(Xp,_Z),e(_Z,fdo),e(Xp,mdo),e(Xp,NS),e(NS,gdo),e(Xp,hdo),e(F,pdo),e(F,Vp),e(Vp,uZ),e(uZ,_do),e(Vp,udo),e(Vp,jS),e(jS,bdo),e(Vp,vdo),e(F,Tdo),e(F,zp),e(zp,bZ),e(bZ,Fdo),e(zp,Cdo),e(zp,DS),e(DS,Mdo),e(zp,Edo),e(F,ydo),e(F,Wp),e(Wp,vZ),e(vZ,wdo),e(Wp,Ado),e(Wp,qS),e(qS,Ldo),e(Wp,Bdo),e(F,xdo),e(F,Qp),e(Qp,TZ),e(TZ,kdo),e(Qp,Rdo),e(Qp,GS),e(GS,Sdo),e(Qp,Pdo),e(F,$do),e(F,Hp),e(Hp,FZ),e(FZ,Ido),e(Hp,Ndo),e(Hp,OS),e(OS,jdo),e(Hp,Ddo),e(F,qdo),e(F,Up),e(Up,CZ),e(CZ,Gdo),e(Up,Odo),e(Up,XS),e(XS,Xdo),e(Up,Vdo),e(F,zdo),e(F,Jp),e(Jp,MZ),e(MZ,Wdo),e(Jp,Qdo),e(Jp,VS),e(VS,Hdo),e(Jp,Udo),e(F,Jdo),e(F,Yp),e(Yp,EZ),e(EZ,Ydo),e(Yp,Kdo),e(Yp,zS),e(zS,Zdo),e(Yp,eco),e(F,oco),e(F,Kp),e(Kp,yZ),e(yZ,rco),e(Kp,tco),e(Kp,WS),e(WS,aco),e(Kp,nco),e(F,sco),e(F,Zp),e(Zp,wZ),e(wZ,lco),e(Zp,ico),e(Zp,QS),e(QS,dco),e(Zp,cco),e(F,fco),e(F,e_),e(e_,AZ),e(AZ,mco),e(e_,gco),e(e_,HS),e(HS,hco),e(e_,pco),e(F,_co),e(F,o_),e(o_,LZ),e(LZ,uco),e(o_,bco),e(o_,US),e(US,vco),e(o_,Tco),e(F,Fco),e(F,r_),e(r_,BZ),e(BZ,Cco),e(r_,Mco),e(r_,JS),e(JS,Eco),e(r_,yco),e(F,wco),e(F,t_),e(t_,xZ),e(xZ,Aco),e(t_,Lco),e(t_,YS),e(YS,Bco),e(t_,xco),e(F,kco),e(F,a_),e(a_,kZ),e(kZ,Rco),e(a_,Sco),e(a_,KS),e(KS,Pco),e(a_,$co),e(F,Ico),e(F,n_),e(n_,RZ),e(RZ,Nco),e(n_,jco),e(n_,ZS),e(ZS,Dco),e(n_,qco),e(F,Gco),e(F,s_),e(s_,SZ),e(SZ,Oco),e(s_,Xco),e(s_,eP),e(eP,Vco),e(s_,zco),e(F,Wco),e(F,l_),e(l_,PZ),e(PZ,Qco),e(l_,Hco),e(l_,oP),e(oP,Uco),e(l_,Jco),e(F,Yco),e(F,i_),e(i_,$Z),e($Z,Kco),e(i_,Zco),e(i_,rP),e(rP,efo),e(i_,ofo),e(F,rfo),e(F,d_),e(d_,IZ),e(IZ,tfo),e(d_,afo),e(d_,tP),e(tP,nfo),e(d_,sfo),e(F,lfo),e(F,c_),e(c_,NZ),e(NZ,ifo),e(c_,dfo),e(c_,aP),e(aP,cfo),e(c_,ffo),e(F,mfo),e(F,f_),e(f_,jZ),e(jZ,gfo),e(f_,hfo),e(f_,nP),e(nP,pfo),e(f_,_fo),e(F,ufo),e(F,m_),e(m_,DZ),e(DZ,bfo),e(m_,vfo),e(m_,sP),e(sP,Tfo),e(m_,Ffo),e(F,Cfo),e(F,g_),e(g_,qZ),e(qZ,Mfo),e(g_,Efo),e(g_,lP),e(lP,yfo),e(g_,wfo),e(F,Afo),e(F,h_),e(h_,GZ),e(GZ,Lfo),e(h_,Bfo),e(h_,iP),e(iP,xfo),e(h_,kfo),e(F,Rfo),e(F,p_),e(p_,OZ),e(OZ,Sfo),e(p_,Pfo),e(p_,dP),e(dP,$fo),e(p_,Ifo),e(F,Nfo),e(F,__),e(__,XZ),e(XZ,jfo),e(__,Dfo),e(__,cP),e(cP,qfo),e(__,Gfo),e(F,Ofo),e(F,u_),e(u_,VZ),e(VZ,Xfo),e(u_,Vfo),e(u_,fP),e(fP,zfo),e(u_,Wfo),e(F,Qfo),e(F,b_),e(b_,zZ),e(zZ,Hfo),e(b_,Ufo),e(b_,mP),e(mP,Jfo),e(b_,Yfo),e(F,Kfo),e(F,v_),e(v_,WZ),e(WZ,Zfo),e(v_,emo),e(v_,gP),e(gP,omo),e(v_,rmo),e(F,tmo),e(F,T_),e(T_,QZ),e(QZ,amo),e(T_,nmo),e(T_,hP),e(hP,smo),e(T_,lmo),e(F,imo),e(F,F_),e(F_,HZ),e(HZ,dmo),e(F_,cmo),e(F_,pP),e(pP,fmo),e(F_,mmo),e(F,gmo),e(F,C_),e(C_,UZ),e(UZ,hmo),e(C_,pmo),e(C_,_P),e(_P,_mo),e(C_,umo),e(F,bmo),e(F,M_),e(M_,JZ),e(JZ,vmo),e(M_,Tmo),e(M_,uP),e(uP,Fmo),e(M_,Cmo),e(je,Mmo),e(je,E_),e(E_,Emo),e(E_,YZ),e(YZ,ymo),e(E_,wmo),e(E_,KZ),e(KZ,Amo),e(je,Lmo),e(je,ZZ),e(ZZ,Bmo),e(je,xmo),g(XE,je,null),b(c,lke,u),b(c,ed,u),e(ed,y_),e(y_,eee),g(VE,eee,null),e(ed,kmo),e(ed,oee),e(oee,Rmo),b(c,ike,u),b(c,Yo,u),g(zE,Yo,null),e(Yo,Smo),e(Yo,od),e(od,Pmo),e(od,ree),e(ree,$mo),e(od,Imo),e(od,tee),e(tee,Nmo),e(od,jmo),e(Yo,Dmo),e(Yo,WE),e(WE,qmo),e(WE,aee),e(aee,Gmo),e(WE,Omo),e(Yo,Xmo),e(Yo,zr),g(QE,zr,null),e(zr,Vmo),e(zr,nee),e(nee,zmo),e(zr,Wmo),e(zr,rd),e(rd,Qmo),e(rd,see),e(see,Hmo),e(rd,Umo),e(rd,lee),e(lee,Jmo),e(rd,Ymo),e(zr,Kmo),e(zr,iee),e(iee,Zmo),e(zr,ego),g(HE,zr,null),e(Yo,ogo),e(Yo,De),g(UE,De,null),e(De,rgo),e(De,dee),e(dee,tgo),e(De,ago),e(De,za),e(za,ngo),e(za,cee),e(cee,sgo),e(za,lgo),e(za,fee),e(fee,igo),e(za,dgo),e(za,mee),e(mee,cgo),e(za,fgo),e(De,mgo),e(De,k),e(k,w_),e(w_,gee),e(gee,ggo),e(w_,hgo),e(w_,bP),e(bP,pgo),e(w_,_go),e(k,ugo),e(k,A_),e(A_,hee),e(hee,bgo),e(A_,vgo),e(A_,vP),e(vP,Tgo),e(A_,Fgo),e(k,Cgo),e(k,L_),e(L_,pee),e(pee,Mgo),e(L_,Ego),e(L_,TP),e(TP,ygo),e(L_,wgo),e(k,Ago),e(k,B_),e(B_,_ee),e(_ee,Lgo),e(B_,Bgo),e(B_,FP),e(FP,xgo),e(B_,kgo),e(k,Rgo),e(k,x_),e(x_,uee),e(uee,Sgo),e(x_,Pgo),e(x_,CP),e(CP,$go),e(x_,Igo),e(k,Ngo),e(k,k_),e(k_,bee),e(bee,jgo),e(k_,Dgo),e(k_,MP),e(MP,qgo),e(k_,Ggo),e(k,Ogo),e(k,R_),e(R_,vee),e(vee,Xgo),e(R_,Vgo),e(R_,EP),e(EP,zgo),e(R_,Wgo),e(k,Qgo),e(k,S_),e(S_,Tee),e(Tee,Hgo),e(S_,Ugo),e(S_,yP),e(yP,Jgo),e(S_,Ygo),e(k,Kgo),e(k,P_),e(P_,Fee),e(Fee,Zgo),e(P_,eho),e(P_,wP),e(wP,oho),e(P_,rho),e(k,tho),e(k,$_),e($_,Cee),e(Cee,aho),e($_,nho),e($_,AP),e(AP,sho),e($_,lho),e(k,iho),e(k,I_),e(I_,Mee),e(Mee,dho),e(I_,cho),e(I_,LP),e(LP,fho),e(I_,mho),e(k,gho),e(k,N_),e(N_,Eee),e(Eee,hho),e(N_,pho),e(N_,BP),e(BP,_ho),e(N_,uho),e(k,bho),e(k,j_),e(j_,yee),e(yee,vho),e(j_,Tho),e(j_,xP),e(xP,Fho),e(j_,Cho),e(k,Mho),e(k,D_),e(D_,wee),e(wee,Eho),e(D_,yho),e(D_,kP),e(kP,who),e(D_,Aho),e(k,Lho),e(k,q_),e(q_,Aee),e(Aee,Bho),e(q_,xho),e(q_,RP),e(RP,kho),e(q_,Rho),e(k,Sho),e(k,G_),e(G_,Lee),e(Lee,Pho),e(G_,$ho),e(G_,SP),e(SP,Iho),e(G_,Nho),e(k,jho),e(k,O_),e(O_,Bee),e(Bee,Dho),e(O_,qho),e(O_,PP),e(PP,Gho),e(O_,Oho),e(k,Xho),e(k,X_),e(X_,xee),e(xee,Vho),e(X_,zho),e(X_,$P),e($P,Who),e(X_,Qho),e(k,Hho),e(k,V_),e(V_,kee),e(kee,Uho),e(V_,Jho),e(V_,IP),e(IP,Yho),e(V_,Kho),e(k,Zho),e(k,z_),e(z_,Ree),e(Ree,epo),e(z_,opo),e(z_,NP),e(NP,rpo),e(z_,tpo),e(k,apo),e(k,W_),e(W_,See),e(See,npo),e(W_,spo),e(W_,jP),e(jP,lpo),e(W_,ipo),e(k,dpo),e(k,Q_),e(Q_,Pee),e(Pee,cpo),e(Q_,fpo),e(Q_,DP),e(DP,mpo),e(Q_,gpo),e(k,hpo),e(k,H_),e(H_,$ee),e($ee,ppo),e(H_,_po),e(H_,qP),e(qP,upo),e(H_,bpo),e(k,vpo),e(k,U_),e(U_,Iee),e(Iee,Tpo),e(U_,Fpo),e(U_,GP),e(GP,Cpo),e(U_,Mpo),e(k,Epo),e(k,J_),e(J_,Nee),e(Nee,ypo),e(J_,wpo),e(J_,OP),e(OP,Apo),e(J_,Lpo),e(k,Bpo),e(k,Y_),e(Y_,jee),e(jee,xpo),e(Y_,kpo),e(Y_,XP),e(XP,Rpo),e(Y_,Spo),e(k,Ppo),e(k,K_),e(K_,Dee),e(Dee,$po),e(K_,Ipo),e(K_,VP),e(VP,Npo),e(K_,jpo),e(k,Dpo),e(k,Z_),e(Z_,qee),e(qee,qpo),e(Z_,Gpo),e(Z_,zP),e(zP,Opo),e(Z_,Xpo),e(k,Vpo),e(k,eu),e(eu,Gee),e(Gee,zpo),e(eu,Wpo),e(eu,WP),e(WP,Qpo),e(eu,Hpo),e(k,Upo),e(k,ou),e(ou,Oee),e(Oee,Jpo),e(ou,Ypo),e(ou,QP),e(QP,Kpo),e(ou,Zpo),e(k,e_o),e(k,ru),e(ru,Xee),e(Xee,o_o),e(ru,r_o),e(ru,HP),e(HP,t_o),e(ru,a_o),e(k,n_o),e(k,tu),e(tu,Vee),e(Vee,s_o),e(tu,l_o),e(tu,UP),e(UP,i_o),e(tu,d_o),e(k,c_o),e(k,au),e(au,zee),e(zee,f_o),e(au,m_o),e(au,JP),e(JP,g_o),e(au,h_o),e(k,p_o),e(k,nu),e(nu,Wee),e(Wee,__o),e(nu,u_o),e(nu,YP),e(YP,b_o),e(nu,v_o),e(k,T_o),e(k,su),e(su,Qee),e(Qee,F_o),e(su,C_o),e(su,KP),e(KP,M_o),e(su,E_o),e(k,y_o),e(k,lu),e(lu,Hee),e(Hee,w_o),e(lu,A_o),e(lu,ZP),e(ZP,L_o),e(lu,B_o),e(k,x_o),e(k,iu),e(iu,Uee),e(Uee,k_o),e(iu,R_o),e(iu,e$),e(e$,S_o),e(iu,P_o),e(k,$_o),e(k,du),e(du,Jee),e(Jee,I_o),e(du,N_o),e(du,o$),e(o$,j_o),e(du,D_o),e(k,q_o),e(k,cu),e(cu,Yee),e(Yee,G_o),e(cu,O_o),e(cu,r$),e(r$,X_o),e(cu,V_o),e(De,z_o),e(De,fu),e(fu,W_o),e(fu,Kee),e(Kee,Q_o),e(fu,H_o),e(fu,Zee),e(Zee,U_o),e(De,J_o),e(De,eoe),e(eoe,Y_o),e(De,K_o),g(JE,De,null),b(c,dke,u),b(c,td,u),e(td,mu),e(mu,ooe),g(YE,ooe,null),e(td,Z_o),e(td,roe),e(roe,euo),b(c,cke,u),b(c,Ko,u),g(KE,Ko,null),e(Ko,ouo),e(Ko,ad),e(ad,ruo),e(ad,toe),e(toe,tuo),e(ad,auo),e(ad,aoe),e(aoe,nuo),e(ad,suo),e(Ko,luo),e(Ko,ZE),e(ZE,iuo),e(ZE,noe),e(noe,duo),e(ZE,cuo),e(Ko,fuo),e(Ko,Wr),g(ey,Wr,null),e(Wr,muo),e(Wr,soe),e(soe,guo),e(Wr,huo),e(Wr,nd),e(nd,puo),e(nd,loe),e(loe,_uo),e(nd,uuo),e(nd,ioe),e(ioe,buo),e(nd,vuo),e(Wr,Tuo),e(Wr,doe),e(doe,Fuo),e(Wr,Cuo),g(oy,Wr,null),e(Ko,Muo),e(Ko,qe),g(ry,qe,null),e(qe,Euo),e(qe,coe),e(coe,yuo),e(qe,wuo),e(qe,Wa),e(Wa,Auo),e(Wa,foe),e(foe,Luo),e(Wa,Buo),e(Wa,moe),e(moe,xuo),e(Wa,kuo),e(Wa,goe),e(goe,Ruo),e(Wa,Suo),e(qe,Puo),e(qe,$),e($,gu),e(gu,hoe),e(hoe,$uo),e(gu,Iuo),e(gu,t$),e(t$,Nuo),e(gu,juo),e($,Duo),e($,hu),e(hu,poe),e(poe,quo),e(hu,Guo),e(hu,a$),e(a$,Ouo),e(hu,Xuo),e($,Vuo),e($,pu),e(pu,_oe),e(_oe,zuo),e(pu,Wuo),e(pu,n$),e(n$,Quo),e(pu,Huo),e($,Uuo),e($,_u),e(_u,uoe),e(uoe,Juo),e(_u,Yuo),e(_u,s$),e(s$,Kuo),e(_u,Zuo),e($,e1o),e($,uu),e(uu,boe),e(boe,o1o),e(uu,r1o),e(uu,l$),e(l$,t1o),e(uu,a1o),e($,n1o),e($,bu),e(bu,voe),e(voe,s1o),e(bu,l1o),e(bu,i$),e(i$,i1o),e(bu,d1o),e($,c1o),e($,vu),e(vu,Toe),e(Toe,f1o),e(vu,m1o),e(vu,d$),e(d$,g1o),e(vu,h1o),e($,p1o),e($,Tu),e(Tu,Foe),e(Foe,_1o),e(Tu,u1o),e(Tu,c$),e(c$,b1o),e(Tu,v1o),e($,T1o),e($,Fu),e(Fu,Coe),e(Coe,F1o),e(Fu,C1o),e(Fu,f$),e(f$,M1o),e(Fu,E1o),e($,y1o),e($,Cu),e(Cu,Moe),e(Moe,w1o),e(Cu,A1o),e(Cu,m$),e(m$,L1o),e(Cu,B1o),e($,x1o),e($,Mu),e(Mu,Eoe),e(Eoe,k1o),e(Mu,R1o),e(Mu,g$),e(g$,S1o),e(Mu,P1o),e($,$1o),e($,Eu),e(Eu,yoe),e(yoe,I1o),e(Eu,N1o),e(Eu,h$),e(h$,j1o),e(Eu,D1o),e($,q1o),e($,yu),e(yu,woe),e(woe,G1o),e(yu,O1o),e(yu,p$),e(p$,X1o),e(yu,V1o),e($,z1o),e($,wu),e(wu,Aoe),e(Aoe,W1o),e(wu,Q1o),e(wu,_$),e(_$,H1o),e(wu,U1o),e($,J1o),e($,Au),e(Au,Loe),e(Loe,Y1o),e(Au,K1o),e(Au,u$),e(u$,Z1o),e(Au,e4o),e($,o4o),e($,Lu),e(Lu,Boe),e(Boe,r4o),e(Lu,t4o),e(Lu,b$),e(b$,a4o),e(Lu,n4o),e($,s4o),e($,Bu),e(Bu,xoe),e(xoe,l4o),e(Bu,i4o),e(Bu,v$),e(v$,d4o),e(Bu,c4o),e($,f4o),e($,xu),e(xu,koe),e(koe,m4o),e(xu,g4o),e(xu,T$),e(T$,h4o),e(xu,p4o),e($,_4o),e($,ku),e(ku,Roe),e(Roe,u4o),e(ku,b4o),e(ku,F$),e(F$,v4o),e(ku,T4o),e($,F4o),e($,Ru),e(Ru,Soe),e(Soe,C4o),e(Ru,M4o),e(Ru,C$),e(C$,E4o),e(Ru,y4o),e($,w4o),e($,Su),e(Su,Poe),e(Poe,A4o),e(Su,L4o),e(Su,M$),e(M$,B4o),e(Su,x4o),e($,k4o),e($,Pu),e(Pu,$oe),e($oe,R4o),e(Pu,S4o),e(Pu,E$),e(E$,P4o),e(Pu,$4o),e($,I4o),e($,$u),e($u,Ioe),e(Ioe,N4o),e($u,j4o),e($u,y$),e(y$,D4o),e($u,q4o),e($,G4o),e($,Iu),e(Iu,Noe),e(Noe,O4o),e(Iu,X4o),e(Iu,w$),e(w$,V4o),e(Iu,z4o),e($,W4o),e($,Nu),e(Nu,joe),e(joe,Q4o),e(Nu,H4o),e(Nu,A$),e(A$,U4o),e(Nu,J4o),e($,Y4o),e($,ju),e(ju,Doe),e(Doe,K4o),e(ju,Z4o),e(ju,L$),e(L$,ebo),e(ju,obo),e($,rbo),e($,Du),e(Du,qoe),e(qoe,tbo),e(Du,abo),e(Du,B$),e(B$,nbo),e(Du,sbo),e($,lbo),e($,qu),e(qu,Goe),e(Goe,ibo),e(qu,dbo),e(qu,x$),e(x$,cbo),e(qu,fbo),e($,mbo),e($,Gu),e(Gu,Ooe),e(Ooe,gbo),e(Gu,hbo),e(Gu,k$),e(k$,pbo),e(Gu,_bo),e($,ubo),e($,Ou),e(Ou,Xoe),e(Xoe,bbo),e(Ou,vbo),e(Ou,R$),e(R$,Tbo),e(Ou,Fbo),e($,Cbo),e($,Xu),e(Xu,Voe),e(Voe,Mbo),e(Xu,Ebo),e(Xu,S$),e(S$,ybo),e(Xu,wbo),e($,Abo),e($,Vu),e(Vu,zoe),e(zoe,Lbo),e(Vu,Bbo),e(Vu,P$),e(P$,xbo),e(Vu,kbo),e($,Rbo),e($,zu),e(zu,Woe),e(Woe,Sbo),e(zu,Pbo),e(zu,$$),e($$,$bo),e(zu,Ibo),e($,Nbo),e($,Wu),e(Wu,Qoe),e(Qoe,jbo),e(Wu,Dbo),e(Wu,I$),e(I$,qbo),e(Wu,Gbo),e($,Obo),e($,Qu),e(Qu,Hoe),e(Hoe,Xbo),e(Qu,Vbo),e(Qu,N$),e(N$,zbo),e(Qu,Wbo),e(qe,Qbo),e(qe,Hu),e(Hu,Hbo),e(Hu,Uoe),e(Uoe,Ubo),e(Hu,Jbo),e(Hu,Joe),e(Joe,Ybo),e(qe,Kbo),e(qe,Yoe),e(Yoe,Zbo),e(qe,e3o),g(ty,qe,null),b(c,fke,u),b(c,sd,u),e(sd,Uu),e(Uu,Koe),g(ay,Koe,null),e(sd,o3o),e(sd,Zoe),e(Zoe,r3o),b(c,mke,u),b(c,Zo,u),g(ny,Zo,null),e(Zo,t3o),e(Zo,ld),e(ld,a3o),e(ld,ere),e(ere,n3o),e(ld,s3o),e(ld,ore),e(ore,l3o),e(ld,i3o),e(Zo,d3o),e(Zo,sy),e(sy,c3o),e(sy,rre),e(rre,f3o),e(sy,m3o),e(Zo,g3o),e(Zo,Qr),g(ly,Qr,null),e(Qr,h3o),e(Qr,tre),e(tre,p3o),e(Qr,_3o),e(Qr,id),e(id,u3o),e(id,are),e(are,b3o),e(id,v3o),e(id,nre),e(nre,T3o),e(id,F3o),e(Qr,C3o),e(Qr,sre),e(sre,M3o),e(Qr,E3o),g(iy,Qr,null),e(Zo,y3o),e(Zo,Ge),g(dy,Ge,null),e(Ge,w3o),e(Ge,lre),e(lre,A3o),e(Ge,L3o),e(Ge,Qa),e(Qa,B3o),e(Qa,ire),e(ire,x3o),e(Qa,k3o),e(Qa,dre),e(dre,R3o),e(Qa,S3o),e(Qa,cre),e(cre,P3o),e(Qa,$3o),e(Ge,I3o),e(Ge,I),e(I,Ju),e(Ju,fre),e(fre,N3o),e(Ju,j3o),e(Ju,j$),e(j$,D3o),e(Ju,q3o),e(I,G3o),e(I,Yu),e(Yu,mre),e(mre,O3o),e(Yu,X3o),e(Yu,D$),e(D$,V3o),e(Yu,z3o),e(I,W3o),e(I,Ku),e(Ku,gre),e(gre,Q3o),e(Ku,H3o),e(Ku,q$),e(q$,U3o),e(Ku,J3o),e(I,Y3o),e(I,Zu),e(Zu,hre),e(hre,K3o),e(Zu,Z3o),e(Zu,G$),e(G$,e5o),e(Zu,o5o),e(I,r5o),e(I,e1),e(e1,pre),e(pre,t5o),e(e1,a5o),e(e1,O$),e(O$,n5o),e(e1,s5o),e(I,l5o),e(I,o1),e(o1,_re),e(_re,i5o),e(o1,d5o),e(o1,X$),e(X$,c5o),e(o1,f5o),e(I,m5o),e(I,r1),e(r1,ure),e(ure,g5o),e(r1,h5o),e(r1,V$),e(V$,p5o),e(r1,_5o),e(I,u5o),e(I,t1),e(t1,bre),e(bre,b5o),e(t1,v5o),e(t1,z$),e(z$,T5o),e(t1,F5o),e(I,C5o),e(I,a1),e(a1,vre),e(vre,M5o),e(a1,E5o),e(a1,W$),e(W$,y5o),e(a1,w5o),e(I,A5o),e(I,n1),e(n1,Tre),e(Tre,L5o),e(n1,B5o),e(n1,Q$),e(Q$,x5o),e(n1,k5o),e(I,R5o),e(I,s1),e(s1,Fre),e(Fre,S5o),e(s1,P5o),e(s1,H$),e(H$,$5o),e(s1,I5o),e(I,N5o),e(I,l1),e(l1,Cre),e(Cre,j5o),e(l1,D5o),e(l1,U$),e(U$,q5o),e(l1,G5o),e(I,O5o),e(I,i1),e(i1,Mre),e(Mre,X5o),e(i1,V5o),e(i1,J$),e(J$,z5o),e(i1,W5o),e(I,Q5o),e(I,d1),e(d1,Ere),e(Ere,H5o),e(d1,U5o),e(d1,Y$),e(Y$,J5o),e(d1,Y5o),e(I,K5o),e(I,c1),e(c1,yre),e(yre,Z5o),e(c1,e2o),e(c1,K$),e(K$,o2o),e(c1,r2o),e(I,t2o),e(I,f1),e(f1,wre),e(wre,a2o),e(f1,n2o),e(f1,Z$),e(Z$,s2o),e(f1,l2o),e(I,i2o),e(I,m1),e(m1,Are),e(Are,d2o),e(m1,c2o),e(m1,eI),e(eI,f2o),e(m1,m2o),e(I,g2o),e(I,g1),e(g1,Lre),e(Lre,h2o),e(g1,p2o),e(g1,oI),e(oI,_2o),e(g1,u2o),e(I,b2o),e(I,h1),e(h1,Bre),e(Bre,v2o),e(h1,T2o),e(h1,rI),e(rI,F2o),e(h1,C2o),e(I,M2o),e(I,p1),e(p1,xre),e(xre,E2o),e(p1,y2o),e(p1,tI),e(tI,w2o),e(p1,A2o),e(I,L2o),e(I,_1),e(_1,kre),e(kre,B2o),e(_1,x2o),e(_1,aI),e(aI,k2o),e(_1,R2o),e(I,S2o),e(I,u1),e(u1,Rre),e(Rre,P2o),e(u1,$2o),e(u1,nI),e(nI,I2o),e(u1,N2o),e(I,j2o),e(I,b1),e(b1,Sre),e(Sre,D2o),e(b1,q2o),e(b1,sI),e(sI,G2o),e(b1,O2o),e(I,X2o),e(I,v1),e(v1,Pre),e(Pre,V2o),e(v1,z2o),e(v1,lI),e(lI,W2o),e(v1,Q2o),e(I,H2o),e(I,T1),e(T1,$re),e($re,U2o),e(T1,J2o),e(T1,iI),e(iI,Y2o),e(T1,K2o),e(I,Z2o),e(I,F1),e(F1,Ire),e(Ire,evo),e(F1,ovo),e(F1,dI),e(dI,rvo),e(F1,tvo),e(I,avo),e(I,C1),e(C1,Nre),e(Nre,nvo),e(C1,svo),e(C1,cI),e(cI,lvo),e(C1,ivo),e(I,dvo),e(I,M1),e(M1,jre),e(jre,cvo),e(M1,fvo),e(M1,fI),e(fI,mvo),e(M1,gvo),e(I,hvo),e(I,E1),e(E1,Dre),e(Dre,pvo),e(E1,_vo),e(E1,mI),e(mI,uvo),e(E1,bvo),e(I,vvo),e(I,y1),e(y1,qre),e(qre,Tvo),e(y1,Fvo),e(y1,gI),e(gI,Cvo),e(y1,Mvo),e(I,Evo),e(I,w1),e(w1,Gre),e(Gre,yvo),e(w1,wvo),e(w1,Ore),e(Ore,Avo),e(w1,Lvo),e(I,Bvo),e(I,A1),e(A1,Xre),e(Xre,xvo),e(A1,kvo),e(A1,hI),e(hI,Rvo),e(A1,Svo),e(I,Pvo),e(I,L1),e(L1,Vre),e(Vre,$vo),e(L1,Ivo),e(L1,pI),e(pI,Nvo),e(L1,jvo),e(I,Dvo),e(I,B1),e(B1,zre),e(zre,qvo),e(B1,Gvo),e(B1,_I),e(_I,Ovo),e(B1,Xvo),e(I,Vvo),e(I,x1),e(x1,Wre),e(Wre,zvo),e(x1,Wvo),e(x1,uI),e(uI,Qvo),e(x1,Hvo),e(Ge,Uvo),e(Ge,k1),e(k1,Jvo),e(k1,Qre),e(Qre,Yvo),e(k1,Kvo),e(k1,Hre),e(Hre,Zvo),e(Ge,e6o),e(Ge,Ure),e(Ure,o6o),e(Ge,r6o),g(cy,Ge,null),b(c,gke,u),b(c,dd,u),e(dd,R1),e(R1,Jre),g(fy,Jre,null),e(dd,t6o),e(dd,Yre),e(Yre,a6o),b(c,hke,u),b(c,er,u),g(my,er,null),e(er,n6o),e(er,cd),e(cd,s6o),e(cd,Kre),e(Kre,l6o),e(cd,i6o),e(cd,Zre),e(Zre,d6o),e(cd,c6o),e(er,f6o),e(er,gy),e(gy,m6o),e(gy,ete),e(ete,g6o),e(gy,h6o),e(er,p6o),e(er,Hr),g(hy,Hr,null),e(Hr,_6o),e(Hr,ote),e(ote,u6o),e(Hr,b6o),e(Hr,fd),e(fd,v6o),e(fd,rte),e(rte,T6o),e(fd,F6o),e(fd,tte),e(tte,C6o),e(fd,M6o),e(Hr,E6o),e(Hr,ate),e(ate,y6o),e(Hr,w6o),g(py,Hr,null),e(er,A6o),e(er,Oe),g(_y,Oe,null),e(Oe,L6o),e(Oe,nte),e(nte,B6o),e(Oe,x6o),e(Oe,Ha),e(Ha,k6o),e(Ha,ste),e(ste,R6o),e(Ha,S6o),e(Ha,lte),e(lte,P6o),e(Ha,$6o),e(Ha,ite),e(ite,I6o),e(Ha,N6o),e(Oe,j6o),e(Oe,se),e(se,S1),e(S1,dte),e(dte,D6o),e(S1,q6o),e(S1,bI),e(bI,G6o),e(S1,O6o),e(se,X6o),e(se,P1),e(P1,cte),e(cte,V6o),e(P1,z6o),e(P1,vI),e(vI,W6o),e(P1,Q6o),e(se,H6o),e(se,$1),e($1,fte),e(fte,U6o),e($1,J6o),e($1,TI),e(TI,Y6o),e($1,K6o),e(se,Z6o),e(se,I1),e(I1,mte),e(mte,eTo),e(I1,oTo),e(I1,FI),e(FI,rTo),e(I1,tTo),e(se,aTo),e(se,N1),e(N1,gte),e(gte,nTo),e(N1,sTo),e(N1,CI),e(CI,lTo),e(N1,iTo),e(se,dTo),e(se,j1),e(j1,hte),e(hte,cTo),e(j1,fTo),e(j1,MI),e(MI,mTo),e(j1,gTo),e(se,hTo),e(se,D1),e(D1,pte),e(pte,pTo),e(D1,_To),e(D1,EI),e(EI,uTo),e(D1,bTo),e(se,vTo),e(se,q1),e(q1,_te),e(_te,TTo),e(q1,FTo),e(q1,yI),e(yI,CTo),e(q1,MTo),e(se,ETo),e(se,G1),e(G1,ute),e(ute,yTo),e(G1,wTo),e(G1,wI),e(wI,ATo),e(G1,LTo),e(se,BTo),e(se,O1),e(O1,bte),e(bte,xTo),e(O1,kTo),e(O1,AI),e(AI,RTo),e(O1,STo),e(se,PTo),e(se,X1),e(X1,vte),e(vte,$To),e(X1,ITo),e(X1,LI),e(LI,NTo),e(X1,jTo),e(se,DTo),e(se,V1),e(V1,Tte),e(Tte,qTo),e(V1,GTo),e(V1,BI),e(BI,OTo),e(V1,XTo),e(se,VTo),e(se,z1),e(z1,Fte),e(Fte,zTo),e(z1,WTo),e(z1,xI),e(xI,QTo),e(z1,HTo),e(se,UTo),e(se,W1),e(W1,Cte),e(Cte,JTo),e(W1,YTo),e(W1,kI),e(kI,KTo),e(W1,ZTo),e(se,eFo),e(se,Q1),e(Q1,Mte),e(Mte,oFo),e(Q1,rFo),e(Q1,RI),e(RI,tFo),e(Q1,aFo),e(se,nFo),e(se,H1),e(H1,Ete),e(Ete,sFo),e(H1,lFo),e(H1,SI),e(SI,iFo),e(H1,dFo),e(Oe,cFo),e(Oe,U1),e(U1,fFo),e(U1,yte),e(yte,mFo),e(U1,gFo),e(U1,wte),e(wte,hFo),e(Oe,pFo),e(Oe,Ate),e(Ate,_Fo),e(Oe,uFo),g(uy,Oe,null),b(c,pke,u),b(c,md,u),e(md,J1),e(J1,Lte),g(by,Lte,null),e(md,bFo),e(md,Bte),e(Bte,vFo),b(c,_ke,u),b(c,or,u),g(vy,or,null),e(or,TFo),e(or,gd),e(gd,FFo),e(gd,xte),e(xte,CFo),e(gd,MFo),e(gd,kte),e(kte,EFo),e(gd,yFo),e(or,wFo),e(or,Ty),e(Ty,AFo),e(Ty,Rte),e(Rte,LFo),e(Ty,BFo),e(or,xFo),e(or,Ur),g(Fy,Ur,null),e(Ur,kFo),e(Ur,Ste),e(Ste,RFo),e(Ur,SFo),e(Ur,hd),e(hd,PFo),e(hd,Pte),e(Pte,$Fo),e(hd,IFo),e(hd,$te),e($te,NFo),e(hd,jFo),e(Ur,DFo),e(Ur,Ite),e(Ite,qFo),e(Ur,GFo),g(Cy,Ur,null),e(or,OFo),e(or,Xe),g(My,Xe,null),e(Xe,XFo),e(Xe,Nte),e(Nte,VFo),e(Xe,zFo),e(Xe,Ua),e(Ua,WFo),e(Ua,jte),e(jte,QFo),e(Ua,HFo),e(Ua,Dte),e(Dte,UFo),e(Ua,JFo),e(Ua,qte),e(qte,YFo),e(Ua,KFo),e(Xe,ZFo),e(Xe,A),e(A,Y1),e(Y1,Gte),e(Gte,eCo),e(Y1,oCo),e(Y1,PI),e(PI,rCo),e(Y1,tCo),e(A,aCo),e(A,K1),e(K1,Ote),e(Ote,nCo),e(K1,sCo),e(K1,$I),e($I,lCo),e(K1,iCo),e(A,dCo),e(A,Z1),e(Z1,Xte),e(Xte,cCo),e(Z1,fCo),e(Z1,II),e(II,mCo),e(Z1,gCo),e(A,hCo),e(A,e4),e(e4,Vte),e(Vte,pCo),e(e4,_Co),e(e4,NI),e(NI,uCo),e(e4,bCo),e(A,vCo),e(A,o4),e(o4,zte),e(zte,TCo),e(o4,FCo),e(o4,jI),e(jI,CCo),e(o4,MCo),e(A,ECo),e(A,r4),e(r4,Wte),e(Wte,yCo),e(r4,wCo),e(r4,DI),e(DI,ACo),e(r4,LCo),e(A,BCo),e(A,t4),e(t4,Qte),e(Qte,xCo),e(t4,kCo),e(t4,qI),e(qI,RCo),e(t4,SCo),e(A,PCo),e(A,a4),e(a4,Hte),e(Hte,$Co),e(a4,ICo),e(a4,GI),e(GI,NCo),e(a4,jCo),e(A,DCo),e(A,n4),e(n4,Ute),e(Ute,qCo),e(n4,GCo),e(n4,OI),e(OI,OCo),e(n4,XCo),e(A,VCo),e(A,s4),e(s4,Jte),e(Jte,zCo),e(s4,WCo),e(s4,XI),e(XI,QCo),e(s4,HCo),e(A,UCo),e(A,l4),e(l4,Yte),e(Yte,JCo),e(l4,YCo),e(l4,VI),e(VI,KCo),e(l4,ZCo),e(A,eMo),e(A,i4),e(i4,Kte),e(Kte,oMo),e(i4,rMo),e(i4,zI),e(zI,tMo),e(i4,aMo),e(A,nMo),e(A,d4),e(d4,Zte),e(Zte,sMo),e(d4,lMo),e(d4,WI),e(WI,iMo),e(d4,dMo),e(A,cMo),e(A,c4),e(c4,eae),e(eae,fMo),e(c4,mMo),e(c4,QI),e(QI,gMo),e(c4,hMo),e(A,pMo),e(A,f4),e(f4,oae),e(oae,_Mo),e(f4,uMo),e(f4,HI),e(HI,bMo),e(f4,vMo),e(A,TMo),e(A,m4),e(m4,rae),e(rae,FMo),e(m4,CMo),e(m4,UI),e(UI,MMo),e(m4,EMo),e(A,yMo),e(A,g4),e(g4,tae),e(tae,wMo),e(g4,AMo),e(g4,JI),e(JI,LMo),e(g4,BMo),e(A,xMo),e(A,h4),e(h4,aae),e(aae,kMo),e(h4,RMo),e(h4,YI),e(YI,SMo),e(h4,PMo),e(A,$Mo),e(A,p4),e(p4,nae),e(nae,IMo),e(p4,NMo),e(p4,KI),e(KI,jMo),e(p4,DMo),e(A,qMo),e(A,_4),e(_4,sae),e(sae,GMo),e(_4,OMo),e(_4,ZI),e(ZI,XMo),e(_4,VMo),e(A,zMo),e(A,u4),e(u4,lae),e(lae,WMo),e(u4,QMo),e(u4,eN),e(eN,HMo),e(u4,UMo),e(A,JMo),e(A,b4),e(b4,iae),e(iae,YMo),e(b4,KMo),e(b4,oN),e(oN,ZMo),e(b4,eEo),e(A,oEo),e(A,v4),e(v4,dae),e(dae,rEo),e(v4,tEo),e(v4,rN),e(rN,aEo),e(v4,nEo),e(A,sEo),e(A,T4),e(T4,cae),e(cae,lEo),e(T4,iEo),e(T4,tN),e(tN,dEo),e(T4,cEo),e(A,fEo),e(A,F4),e(F4,fae),e(fae,mEo),e(F4,gEo),e(F4,aN),e(aN,hEo),e(F4,pEo),e(A,_Eo),e(A,C4),e(C4,mae),e(mae,uEo),e(C4,bEo),e(C4,nN),e(nN,vEo),e(C4,TEo),e(A,FEo),e(A,M4),e(M4,gae),e(gae,CEo),e(M4,MEo),e(M4,sN),e(sN,EEo),e(M4,yEo),e(A,wEo),e(A,E4),e(E4,hae),e(hae,AEo),e(E4,LEo),e(E4,lN),e(lN,BEo),e(E4,xEo),e(A,kEo),e(A,y4),e(y4,pae),e(pae,REo),e(y4,SEo),e(y4,iN),e(iN,PEo),e(y4,$Eo),e(A,IEo),e(A,w4),e(w4,_ae),e(_ae,NEo),e(w4,jEo),e(w4,dN),e(dN,DEo),e(w4,qEo),e(A,GEo),e(A,A4),e(A4,uae),e(uae,OEo),e(A4,XEo),e(A4,cN),e(cN,VEo),e(A4,zEo),e(A,WEo),e(A,L4),e(L4,bae),e(bae,QEo),e(L4,HEo),e(L4,fN),e(fN,UEo),e(L4,JEo),e(A,YEo),e(A,B4),e(B4,vae),e(vae,KEo),e(B4,ZEo),e(B4,mN),e(mN,eyo),e(B4,oyo),e(A,ryo),e(A,x4),e(x4,Tae),e(Tae,tyo),e(x4,ayo),e(x4,gN),e(gN,nyo),e(x4,syo),e(A,lyo),e(A,k4),e(k4,Fae),e(Fae,iyo),e(k4,dyo),e(k4,hN),e(hN,cyo),e(k4,fyo),e(A,myo),e(A,R4),e(R4,Cae),e(Cae,gyo),e(R4,hyo),e(R4,pN),e(pN,pyo),e(R4,_yo),e(A,uyo),e(A,S4),e(S4,Mae),e(Mae,byo),e(S4,vyo),e(S4,_N),e(_N,Tyo),e(S4,Fyo),e(A,Cyo),e(A,P4),e(P4,Eae),e(Eae,Myo),e(P4,Eyo),e(P4,uN),e(uN,yyo),e(P4,wyo),e(A,Ayo),e(A,$4),e($4,yae),e(yae,Lyo),e($4,Byo),e($4,bN),e(bN,xyo),e($4,kyo),e(A,Ryo),e(A,I4),e(I4,wae),e(wae,Syo),e(I4,Pyo),e(I4,vN),e(vN,$yo),e(I4,Iyo),e(A,Nyo),e(A,N4),e(N4,Aae),e(Aae,jyo),e(N4,Dyo),e(N4,TN),e(TN,qyo),e(N4,Gyo),e(A,Oyo),e(A,j4),e(j4,Lae),e(Lae,Xyo),e(j4,Vyo),e(j4,FN),e(FN,zyo),e(j4,Wyo),e(A,Qyo),e(A,D4),e(D4,Bae),e(Bae,Hyo),e(D4,Uyo),e(D4,CN),e(CN,Jyo),e(D4,Yyo),e(A,Kyo),e(A,q4),e(q4,xae),e(xae,Zyo),e(q4,ewo),e(q4,MN),e(MN,owo),e(q4,rwo),e(A,two),e(A,G4),e(G4,kae),e(kae,awo),e(G4,nwo),e(G4,EN),e(EN,swo),e(G4,lwo),e(A,iwo),e(A,O4),e(O4,Rae),e(Rae,dwo),e(O4,cwo),e(O4,yN),e(yN,fwo),e(O4,mwo),e(Xe,gwo),e(Xe,X4),e(X4,hwo),e(X4,Sae),e(Sae,pwo),e(X4,_wo),e(X4,Pae),e(Pae,uwo),e(Xe,bwo),e(Xe,$ae),e($ae,vwo),e(Xe,Two),g(Ey,Xe,null),b(c,uke,u),b(c,pd,u),e(pd,V4),e(V4,Iae),g(yy,Iae,null),e(pd,Fwo),e(pd,Nae),e(Nae,Cwo),b(c,bke,u),b(c,rr,u),g(wy,rr,null),e(rr,Mwo),e(rr,_d),e(_d,Ewo),e(_d,jae),e(jae,ywo),e(_d,wwo),e(_d,Dae),e(Dae,Awo),e(_d,Lwo),e(rr,Bwo),e(rr,Ay),e(Ay,xwo),e(Ay,qae),e(qae,kwo),e(Ay,Rwo),e(rr,Swo),e(rr,Jr),g(Ly,Jr,null),e(Jr,Pwo),e(Jr,Gae),e(Gae,$wo),e(Jr,Iwo),e(Jr,ud),e(ud,Nwo),e(ud,Oae),e(Oae,jwo),e(ud,Dwo),e(ud,Xae),e(Xae,qwo),e(ud,Gwo),e(Jr,Owo),e(Jr,Vae),e(Vae,Xwo),e(Jr,Vwo),g(By,Jr,null),e(rr,zwo),e(rr,Ve),g(xy,Ve,null),e(Ve,Wwo),e(Ve,zae),e(zae,Qwo),e(Ve,Hwo),e(Ve,Ja),e(Ja,Uwo),e(Ja,Wae),e(Wae,Jwo),e(Ja,Ywo),e(Ja,Qae),e(Qae,Kwo),e(Ja,Zwo),e(Ja,Hae),e(Hae,eAo),e(Ja,oAo),e(Ve,rAo),e(Ve,G),e(G,z4),e(z4,Uae),e(Uae,tAo),e(z4,aAo),e(z4,wN),e(wN,nAo),e(z4,sAo),e(G,lAo),e(G,W4),e(W4,Jae),e(Jae,iAo),e(W4,dAo),e(W4,AN),e(AN,cAo),e(W4,fAo),e(G,mAo),e(G,Q4),e(Q4,Yae),e(Yae,gAo),e(Q4,hAo),e(Q4,LN),e(LN,pAo),e(Q4,_Ao),e(G,uAo),e(G,H4),e(H4,Kae),e(Kae,bAo),e(H4,vAo),e(H4,BN),e(BN,TAo),e(H4,FAo),e(G,CAo),e(G,U4),e(U4,Zae),e(Zae,MAo),e(U4,EAo),e(U4,xN),e(xN,yAo),e(U4,wAo),e(G,AAo),e(G,J4),e(J4,ene),e(ene,LAo),e(J4,BAo),e(J4,kN),e(kN,xAo),e(J4,kAo),e(G,RAo),e(G,Y4),e(Y4,one),e(one,SAo),e(Y4,PAo),e(Y4,RN),e(RN,$Ao),e(Y4,IAo),e(G,NAo),e(G,K4),e(K4,rne),e(rne,jAo),e(K4,DAo),e(K4,SN),e(SN,qAo),e(K4,GAo),e(G,OAo),e(G,Z4),e(Z4,tne),e(tne,XAo),e(Z4,VAo),e(Z4,PN),e(PN,zAo),e(Z4,WAo),e(G,QAo),e(G,eb),e(eb,ane),e(ane,HAo),e(eb,UAo),e(eb,$N),e($N,JAo),e(eb,YAo),e(G,KAo),e(G,ob),e(ob,nne),e(nne,ZAo),e(ob,e0o),e(ob,IN),e(IN,o0o),e(ob,r0o),e(G,t0o),e(G,rb),e(rb,sne),e(sne,a0o),e(rb,n0o),e(rb,NN),e(NN,s0o),e(rb,l0o),e(G,i0o),e(G,tb),e(tb,lne),e(lne,d0o),e(tb,c0o),e(tb,jN),e(jN,f0o),e(tb,m0o),e(G,g0o),e(G,ab),e(ab,ine),e(ine,h0o),e(ab,p0o),e(ab,DN),e(DN,_0o),e(ab,u0o),e(G,b0o),e(G,nb),e(nb,dne),e(dne,v0o),e(nb,T0o),e(nb,qN),e(qN,F0o),e(nb,C0o),e(G,M0o),e(G,sb),e(sb,cne),e(cne,E0o),e(sb,y0o),e(sb,GN),e(GN,w0o),e(sb,A0o),e(G,L0o),e(G,lb),e(lb,fne),e(fne,B0o),e(lb,x0o),e(lb,ON),e(ON,k0o),e(lb,R0o),e(G,S0o),e(G,ib),e(ib,mne),e(mne,P0o),e(ib,$0o),e(ib,XN),e(XN,I0o),e(ib,N0o),e(G,j0o),e(G,db),e(db,gne),e(gne,D0o),e(db,q0o),e(db,VN),e(VN,G0o),e(db,O0o),e(G,X0o),e(G,cb),e(cb,hne),e(hne,V0o),e(cb,z0o),e(cb,zN),e(zN,W0o),e(cb,Q0o),e(G,H0o),e(G,fb),e(fb,pne),e(pne,U0o),e(fb,J0o),e(fb,WN),e(WN,Y0o),e(fb,K0o),e(G,Z0o),e(G,mb),e(mb,_ne),e(_ne,eLo),e(mb,oLo),e(mb,QN),e(QN,rLo),e(mb,tLo),e(G,aLo),e(G,gb),e(gb,une),e(une,nLo),e(gb,sLo),e(gb,HN),e(HN,lLo),e(gb,iLo),e(G,dLo),e(G,hb),e(hb,bne),e(bne,cLo),e(hb,fLo),e(hb,UN),e(UN,mLo),e(hb,gLo),e(G,hLo),e(G,pb),e(pb,vne),e(vne,pLo),e(pb,_Lo),e(pb,JN),e(JN,uLo),e(pb,bLo),e(G,vLo),e(G,_b),e(_b,Tne),e(Tne,TLo),e(_b,FLo),e(_b,YN),e(YN,CLo),e(_b,MLo),e(G,ELo),e(G,ub),e(ub,Fne),e(Fne,yLo),e(ub,wLo),e(ub,KN),e(KN,ALo),e(ub,LLo),e(G,BLo),e(G,bb),e(bb,Cne),e(Cne,xLo),e(bb,kLo),e(bb,ZN),e(ZN,RLo),e(bb,SLo),e(Ve,PLo),e(Ve,vb),e(vb,$Lo),e(vb,Mne),e(Mne,ILo),e(vb,NLo),e(vb,Ene),e(Ene,jLo),e(Ve,DLo),e(Ve,yne),e(yne,qLo),e(Ve,GLo),g(ky,Ve,null),b(c,vke,u),b(c,bd,u),e(bd,Tb),e(Tb,wne),g(Ry,wne,null),e(bd,OLo),e(bd,Ane),e(Ane,XLo),b(c,Tke,u),b(c,tr,u),g(Sy,tr,null),e(tr,VLo),e(tr,vd),e(vd,zLo),e(vd,Lne),e(Lne,WLo),e(vd,QLo),e(vd,Bne),e(Bne,HLo),e(vd,ULo),e(tr,JLo),e(tr,Py),e(Py,YLo),e(Py,xne),e(xne,KLo),e(Py,ZLo),e(tr,e7o),e(tr,Yr),g($y,Yr,null),e(Yr,o7o),e(Yr,kne),e(kne,r7o),e(Yr,t7o),e(Yr,Td),e(Td,a7o),e(Td,Rne),e(Rne,n7o),e(Td,s7o),e(Td,Sne),e(Sne,l7o),e(Td,i7o),e(Yr,d7o),e(Yr,Pne),e(Pne,c7o),e(Yr,f7o),g(Iy,Yr,null),e(tr,m7o),e(tr,ze),g(Ny,ze,null),e(ze,g7o),e(ze,$ne),e($ne,h7o),e(ze,p7o),e(ze,Ya),e(Ya,_7o),e(Ya,Ine),e(Ine,u7o),e(Ya,b7o),e(Ya,Nne),e(Nne,v7o),e(Ya,T7o),e(Ya,jne),e(jne,F7o),e(Ya,C7o),e(ze,M7o),e(ze,da),e(da,Fb),e(Fb,Dne),e(Dne,E7o),e(Fb,y7o),e(Fb,ej),e(ej,w7o),e(Fb,A7o),e(da,L7o),e(da,Cb),e(Cb,qne),e(qne,B7o),e(Cb,x7o),e(Cb,oj),e(oj,k7o),e(Cb,R7o),e(da,S7o),e(da,Mb),e(Mb,Gne),e(Gne,P7o),e(Mb,$7o),e(Mb,rj),e(rj,I7o),e(Mb,N7o),e(da,j7o),e(da,Eb),e(Eb,One),e(One,D7o),e(Eb,q7o),e(Eb,tj),e(tj,G7o),e(Eb,O7o),e(da,X7o),e(da,yb),e(yb,Xne),e(Xne,V7o),e(yb,z7o),e(yb,aj),e(aj,W7o),e(yb,Q7o),e(ze,H7o),e(ze,wb),e(wb,U7o),e(wb,Vne),e(Vne,J7o),e(wb,Y7o),e(wb,zne),e(zne,K7o),e(ze,Z7o),e(ze,Wne),e(Wne,e8o),e(ze,o8o),g(jy,ze,null),b(c,Fke,u),b(c,Fd,u),e(Fd,Ab),e(Ab,Qne),g(Dy,Qne,null),e(Fd,r8o),e(Fd,Hne),e(Hne,t8o),b(c,Cke,u),b(c,ar,u),g(qy,ar,null),e(ar,a8o),e(ar,Cd),e(Cd,n8o),e(Cd,Une),e(Une,s8o),e(Cd,l8o),e(Cd,Jne),e(Jne,i8o),e(Cd,d8o),e(ar,c8o),e(ar,Gy),e(Gy,f8o),e(Gy,Yne),e(Yne,m8o),e(Gy,g8o),e(ar,h8o),e(ar,Kr),g(Oy,Kr,null),e(Kr,p8o),e(Kr,Kne),e(Kne,_8o),e(Kr,u8o),e(Kr,Md),e(Md,b8o),e(Md,Zne),e(Zne,v8o),e(Md,T8o),e(Md,ese),e(ese,F8o),e(Md,C8o),e(Kr,M8o),e(Kr,ose),e(ose,E8o),e(Kr,y8o),g(Xy,Kr,null),e(ar,w8o),e(ar,We),g(Vy,We,null),e(We,A8o),e(We,rse),e(rse,L8o),e(We,B8o),e(We,Ka),e(Ka,x8o),e(Ka,tse),e(tse,k8o),e(Ka,R8o),e(Ka,ase),e(ase,S8o),e(Ka,P8o),e(Ka,nse),e(nse,$8o),e(Ka,I8o),e(We,N8o),e(We,D),e(D,Lb),e(Lb,sse),e(sse,j8o),e(Lb,D8o),e(Lb,nj),e(nj,q8o),e(Lb,G8o),e(D,O8o),e(D,Bb),e(Bb,lse),e(lse,X8o),e(Bb,V8o),e(Bb,sj),e(sj,z8o),e(Bb,W8o),e(D,Q8o),e(D,xb),e(xb,ise),e(ise,H8o),e(xb,U8o),e(xb,lj),e(lj,J8o),e(xb,Y8o),e(D,K8o),e(D,kb),e(kb,dse),e(dse,Z8o),e(kb,e9o),e(kb,ij),e(ij,o9o),e(kb,r9o),e(D,t9o),e(D,Rb),e(Rb,cse),e(cse,a9o),e(Rb,n9o),e(Rb,dj),e(dj,s9o),e(Rb,l9o),e(D,i9o),e(D,Sb),e(Sb,fse),e(fse,d9o),e(Sb,c9o),e(Sb,cj),e(cj,f9o),e(Sb,m9o),e(D,g9o),e(D,Pb),e(Pb,mse),e(mse,h9o),e(Pb,p9o),e(Pb,fj),e(fj,_9o),e(Pb,u9o),e(D,b9o),e(D,$b),e($b,gse),e(gse,v9o),e($b,T9o),e($b,mj),e(mj,F9o),e($b,C9o),e(D,M9o),e(D,Ib),e(Ib,hse),e(hse,E9o),e(Ib,y9o),e(Ib,gj),e(gj,w9o),e(Ib,A9o),e(D,L9o),e(D,Nb),e(Nb,pse),e(pse,B9o),e(Nb,x9o),e(Nb,hj),e(hj,k9o),e(Nb,R9o),e(D,S9o),e(D,jb),e(jb,_se),e(_se,P9o),e(jb,$9o),e(jb,pj),e(pj,I9o),e(jb,N9o),e(D,j9o),e(D,Db),e(Db,use),e(use,D9o),e(Db,q9o),e(Db,_j),e(_j,G9o),e(Db,O9o),e(D,X9o),e(D,qb),e(qb,bse),e(bse,V9o),e(qb,z9o),e(qb,uj),e(uj,W9o),e(qb,Q9o),e(D,H9o),e(D,Gb),e(Gb,vse),e(vse,U9o),e(Gb,J9o),e(Gb,bj),e(bj,Y9o),e(Gb,K9o),e(D,Z9o),e(D,Ob),e(Ob,Tse),e(Tse,eBo),e(Ob,oBo),e(Ob,vj),e(vj,rBo),e(Ob,tBo),e(D,aBo),e(D,Xb),e(Xb,Fse),e(Fse,nBo),e(Xb,sBo),e(Xb,Tj),e(Tj,lBo),e(Xb,iBo),e(D,dBo),e(D,Vb),e(Vb,Cse),e(Cse,cBo),e(Vb,fBo),e(Vb,Fj),e(Fj,mBo),e(Vb,gBo),e(D,hBo),e(D,zb),e(zb,Mse),e(Mse,pBo),e(zb,_Bo),e(zb,Cj),e(Cj,uBo),e(zb,bBo),e(D,vBo),e(D,Wb),e(Wb,Ese),e(Ese,TBo),e(Wb,FBo),e(Wb,Mj),e(Mj,CBo),e(Wb,MBo),e(D,EBo),e(D,Qb),e(Qb,yse),e(yse,yBo),e(Qb,wBo),e(Qb,Ej),e(Ej,ABo),e(Qb,LBo),e(D,BBo),e(D,Hb),e(Hb,wse),e(wse,xBo),e(Hb,kBo),e(Hb,yj),e(yj,RBo),e(Hb,SBo),e(D,PBo),e(D,Ub),e(Ub,Ase),e(Ase,$Bo),e(Ub,IBo),e(Ub,wj),e(wj,NBo),e(Ub,jBo),e(D,DBo),e(D,Jb),e(Jb,Lse),e(Lse,qBo),e(Jb,GBo),e(Jb,Aj),e(Aj,OBo),e(Jb,XBo),e(D,VBo),e(D,Yb),e(Yb,Bse),e(Bse,zBo),e(Yb,WBo),e(Yb,Lj),e(Lj,QBo),e(Yb,HBo),e(D,UBo),e(D,Kb),e(Kb,xse),e(xse,JBo),e(Kb,YBo),e(Kb,Bj),e(Bj,KBo),e(Kb,ZBo),e(D,exo),e(D,Zb),e(Zb,kse),e(kse,oxo),e(Zb,rxo),e(Zb,xj),e(xj,txo),e(Zb,axo),e(D,nxo),e(D,e3),e(e3,Rse),e(Rse,sxo),e(e3,lxo),e(e3,kj),e(kj,ixo),e(e3,dxo),e(D,cxo),e(D,o3),e(o3,Sse),e(Sse,fxo),e(o3,mxo),e(o3,Rj),e(Rj,gxo),e(o3,hxo),e(D,pxo),e(D,r3),e(r3,Pse),e(Pse,_xo),e(r3,uxo),e(r3,Sj),e(Sj,bxo),e(r3,vxo),e(D,Txo),e(D,t3),e(t3,$se),e($se,Fxo),e(t3,Cxo),e(t3,Pj),e(Pj,Mxo),e(t3,Exo),e(D,yxo),e(D,a3),e(a3,Ise),e(Ise,wxo),e(a3,Axo),e(a3,$j),e($j,Lxo),e(a3,Bxo),e(D,xxo),e(D,n3),e(n3,Nse),e(Nse,kxo),e(n3,Rxo),e(n3,Ij),e(Ij,Sxo),e(n3,Pxo),e(D,$xo),e(D,s3),e(s3,jse),e(jse,Ixo),e(s3,Nxo),e(s3,Nj),e(Nj,jxo),e(s3,Dxo),e(We,qxo),e(We,l3),e(l3,Gxo),e(l3,Dse),e(Dse,Oxo),e(l3,Xxo),e(l3,qse),e(qse,Vxo),e(We,zxo),e(We,Gse),e(Gse,Wxo),e(We,Qxo),g(zy,We,null),b(c,Mke,u),b(c,Ed,u),e(Ed,i3),e(i3,Ose),g(Wy,Ose,null),e(Ed,Hxo),e(Ed,Xse),e(Xse,Uxo),b(c,Eke,u),b(c,nr,u),g(Qy,nr,null),e(nr,Jxo),e(nr,yd),e(yd,Yxo),e(yd,Vse),e(Vse,Kxo),e(yd,Zxo),e(yd,zse),e(zse,eko),e(yd,oko),e(nr,rko),e(nr,Hy),e(Hy,tko),e(Hy,Wse),e(Wse,ako),e(Hy,nko),e(nr,sko),e(nr,Zr),g(Uy,Zr,null),e(Zr,lko),e(Zr,Qse),e(Qse,iko),e(Zr,dko),e(Zr,wd),e(wd,cko),e(wd,Hse),e(Hse,fko),e(wd,mko),e(wd,Use),e(Use,gko),e(wd,hko),e(Zr,pko),e(Zr,Jse),e(Jse,_ko),e(Zr,uko),g(Jy,Zr,null),e(nr,bko),e(nr,Qe),g(Yy,Qe,null),e(Qe,vko),e(Qe,Yse),e(Yse,Tko),e(Qe,Fko),e(Qe,Za),e(Za,Cko),e(Za,Kse),e(Kse,Mko),e(Za,Eko),e(Za,Zse),e(Zse,yko),e(Za,wko),e(Za,ele),e(ele,Ako),e(Za,Lko),e(Qe,Bko),e(Qe,R),e(R,d3),e(d3,ole),e(ole,xko),e(d3,kko),e(d3,jj),e(jj,Rko),e(d3,Sko),e(R,Pko),e(R,c3),e(c3,rle),e(rle,$ko),e(c3,Iko),e(c3,Dj),e(Dj,Nko),e(c3,jko),e(R,Dko),e(R,f3),e(f3,tle),e(tle,qko),e(f3,Gko),e(f3,qj),e(qj,Oko),e(f3,Xko),e(R,Vko),e(R,m3),e(m3,ale),e(ale,zko),e(m3,Wko),e(m3,Gj),e(Gj,Qko),e(m3,Hko),e(R,Uko),e(R,g3),e(g3,nle),e(nle,Jko),e(g3,Yko),e(g3,Oj),e(Oj,Kko),e(g3,Zko),e(R,eRo),e(R,h3),e(h3,sle),e(sle,oRo),e(h3,rRo),e(h3,Xj),e(Xj,tRo),e(h3,aRo),e(R,nRo),e(R,p3),e(p3,lle),e(lle,sRo),e(p3,lRo),e(p3,Vj),e(Vj,iRo),e(p3,dRo),e(R,cRo),e(R,_3),e(_3,ile),e(ile,fRo),e(_3,mRo),e(_3,zj),e(zj,gRo),e(_3,hRo),e(R,pRo),e(R,u3),e(u3,dle),e(dle,_Ro),e(u3,uRo),e(u3,Wj),e(Wj,bRo),e(u3,vRo),e(R,TRo),e(R,b3),e(b3,cle),e(cle,FRo),e(b3,CRo),e(b3,Qj),e(Qj,MRo),e(b3,ERo),e(R,yRo),e(R,v3),e(v3,fle),e(fle,wRo),e(v3,ARo),e(v3,Hj),e(Hj,LRo),e(v3,BRo),e(R,xRo),e(R,T3),e(T3,mle),e(mle,kRo),e(T3,RRo),e(T3,Uj),e(Uj,SRo),e(T3,PRo),e(R,$Ro),e(R,F3),e(F3,gle),e(gle,IRo),e(F3,NRo),e(F3,Jj),e(Jj,jRo),e(F3,DRo),e(R,qRo),e(R,C3),e(C3,hle),e(hle,GRo),e(C3,ORo),e(C3,Yj),e(Yj,XRo),e(C3,VRo),e(R,zRo),e(R,M3),e(M3,ple),e(ple,WRo),e(M3,QRo),e(M3,Kj),e(Kj,HRo),e(M3,URo),e(R,JRo),e(R,E3),e(E3,_le),e(_le,YRo),e(E3,KRo),e(E3,Zj),e(Zj,ZRo),e(E3,eSo),e(R,oSo),e(R,y3),e(y3,ule),e(ule,rSo),e(y3,tSo),e(y3,eD),e(eD,aSo),e(y3,nSo),e(R,sSo),e(R,w3),e(w3,ble),e(ble,lSo),e(w3,iSo),e(w3,oD),e(oD,dSo),e(w3,cSo),e(R,fSo),e(R,A3),e(A3,vle),e(vle,mSo),e(A3,gSo),e(A3,rD),e(rD,hSo),e(A3,pSo),e(R,_So),e(R,L3),e(L3,Tle),e(Tle,uSo),e(L3,bSo),e(L3,tD),e(tD,vSo),e(L3,TSo),e(R,FSo),e(R,B3),e(B3,Fle),e(Fle,CSo),e(B3,MSo),e(B3,aD),e(aD,ESo),e(B3,ySo),e(R,wSo),e(R,x3),e(x3,Cle),e(Cle,ASo),e(x3,LSo),e(x3,nD),e(nD,BSo),e(x3,xSo),e(R,kSo),e(R,k3),e(k3,Mle),e(Mle,RSo),e(k3,SSo),e(k3,sD),e(sD,PSo),e(k3,$So),e(R,ISo),e(R,R3),e(R3,Ele),e(Ele,NSo),e(R3,jSo),e(R3,lD),e(lD,DSo),e(R3,qSo),e(R,GSo),e(R,S3),e(S3,yle),e(yle,OSo),e(S3,XSo),e(S3,iD),e(iD,VSo),e(S3,zSo),e(R,WSo),e(R,P3),e(P3,wle),e(wle,QSo),e(P3,HSo),e(P3,dD),e(dD,USo),e(P3,JSo),e(R,YSo),e(R,$3),e($3,Ale),e(Ale,KSo),e($3,ZSo),e($3,cD),e(cD,ePo),e($3,oPo),e(R,rPo),e(R,I3),e(I3,Lle),e(Lle,tPo),e(I3,aPo),e(I3,fD),e(fD,nPo),e(I3,sPo),e(R,lPo),e(R,N3),e(N3,Ble),e(Ble,iPo),e(N3,dPo),e(N3,mD),e(mD,cPo),e(N3,fPo),e(R,mPo),e(R,j3),e(j3,xle),e(xle,gPo),e(j3,hPo),e(j3,gD),e(gD,pPo),e(j3,_Po),e(R,uPo),e(R,D3),e(D3,kle),e(kle,bPo),e(D3,vPo),e(D3,hD),e(hD,TPo),e(D3,FPo),e(R,CPo),e(R,q3),e(q3,Rle),e(Rle,MPo),e(q3,EPo),e(q3,pD),e(pD,yPo),e(q3,wPo),e(R,APo),e(R,G3),e(G3,Sle),e(Sle,LPo),e(G3,BPo),e(G3,_D),e(_D,xPo),e(G3,kPo),e(R,RPo),e(R,O3),e(O3,Ple),e(Ple,SPo),e(O3,PPo),e(O3,uD),e(uD,$Po),e(O3,IPo),e(R,NPo),e(R,X3),e(X3,$le),e($le,jPo),e(X3,DPo),e(X3,bD),e(bD,qPo),e(X3,GPo),e(R,OPo),e(R,V3),e(V3,Ile),e(Ile,XPo),e(V3,VPo),e(V3,vD),e(vD,zPo),e(V3,WPo),e(R,QPo),e(R,z3),e(z3,Nle),e(Nle,HPo),e(z3,UPo),e(z3,TD),e(TD,JPo),e(z3,YPo),e(R,KPo),e(R,W3),e(W3,jle),e(jle,ZPo),e(W3,e$o),e(W3,FD),e(FD,o$o),e(W3,r$o),e(R,t$o),e(R,Q3),e(Q3,Dle),e(Dle,a$o),e(Q3,n$o),e(Q3,CD),e(CD,s$o),e(Q3,l$o),e(Qe,i$o),e(Qe,H3),e(H3,d$o),e(H3,qle),e(qle,c$o),e(H3,f$o),e(H3,Gle),e(Gle,m$o),e(Qe,g$o),e(Qe,Ole),e(Ole,h$o),e(Qe,p$o),g(Ky,Qe,null),b(c,yke,u),b(c,Ad,u),e(Ad,U3),e(U3,Xle),g(Zy,Xle,null),e(Ad,_$o),e(Ad,Vle),e(Vle,u$o),b(c,wke,u),b(c,sr,u),g(ew,sr,null),e(sr,b$o),e(sr,Ld),e(Ld,v$o),e(Ld,zle),e(zle,T$o),e(Ld,F$o),e(Ld,Wle),e(Wle,C$o),e(Ld,M$o),e(sr,E$o),e(sr,ow),e(ow,y$o),e(ow,Qle),e(Qle,w$o),e(ow,A$o),e(sr,L$o),e(sr,et),g(rw,et,null),e(et,B$o),e(et,Hle),e(Hle,x$o),e(et,k$o),e(et,Bd),e(Bd,R$o),e(Bd,Ule),e(Ule,S$o),e(Bd,P$o),e(Bd,Jle),e(Jle,$$o),e(Bd,I$o),e(et,N$o),e(et,Yle),e(Yle,j$o),e(et,D$o),g(tw,et,null),e(sr,q$o),e(sr,He),g(aw,He,null),e(He,G$o),e(He,Kle),e(Kle,O$o),e(He,X$o),e(He,en),e(en,V$o),e(en,Zle),e(Zle,z$o),e(en,W$o),e(en,eie),e(eie,Q$o),e(en,H$o),e(en,oie),e(oie,U$o),e(en,J$o),e(He,Y$o),e(He,rie),e(rie,J3),e(J3,tie),e(tie,K$o),e(J3,Z$o),e(J3,MD),e(MD,eIo),e(J3,oIo),e(He,rIo),e(He,Y3),e(Y3,tIo),e(Y3,aie),e(aie,aIo),e(Y3,nIo),e(Y3,nie),e(nie,sIo),e(He,lIo),e(He,sie),e(sie,iIo),e(He,dIo),g(nw,He,null),b(c,Ake,u),b(c,xd,u),e(xd,K3),e(K3,lie),g(sw,lie,null),e(xd,cIo),e(xd,iie),e(iie,fIo),b(c,Lke,u),b(c,lr,u),g(lw,lr,null),e(lr,mIo),e(lr,kd),e(kd,gIo),e(kd,die),e(die,hIo),e(kd,pIo),e(kd,cie),e(cie,_Io),e(kd,uIo),e(lr,bIo),e(lr,iw),e(iw,vIo),e(iw,fie),e(fie,TIo),e(iw,FIo),e(lr,CIo),e(lr,ot),g(dw,ot,null),e(ot,MIo),e(ot,mie),e(mie,EIo),e(ot,yIo),e(ot,Rd),e(Rd,wIo),e(Rd,gie),e(gie,AIo),e(Rd,LIo),e(Rd,hie),e(hie,BIo),e(Rd,xIo),e(ot,kIo),e(ot,pie),e(pie,RIo),e(ot,SIo),g(cw,ot,null),e(lr,PIo),e(lr,Ue),g(fw,Ue,null),e(Ue,$Io),e(Ue,_ie),e(_ie,IIo),e(Ue,NIo),e(Ue,on),e(on,jIo),e(on,uie),e(uie,DIo),e(on,qIo),e(on,bie),e(bie,GIo),e(on,OIo),e(on,vie),e(vie,XIo),e(on,VIo),e(Ue,zIo),e(Ue,me),e(me,Z3),e(Z3,Tie),e(Tie,WIo),e(Z3,QIo),e(Z3,ED),e(ED,HIo),e(Z3,UIo),e(me,JIo),e(me,e5),e(e5,Fie),e(Fie,YIo),e(e5,KIo),e(e5,yD),e(yD,ZIo),e(e5,eNo),e(me,oNo),e(me,qs),e(qs,Cie),e(Cie,rNo),e(qs,tNo),e(qs,wD),e(wD,aNo),e(qs,nNo),e(qs,AD),e(AD,sNo),e(qs,lNo),e(me,iNo),e(me,o5),e(o5,Mie),e(Mie,dNo),e(o5,cNo),e(o5,LD),e(LD,fNo),e(o5,mNo),e(me,gNo),e(me,ma),e(ma,Eie),e(Eie,hNo),e(ma,pNo),e(ma,BD),e(BD,_No),e(ma,uNo),e(ma,xD),e(xD,bNo),e(ma,vNo),e(ma,kD),e(kD,TNo),e(ma,FNo),e(me,CNo),e(me,r5),e(r5,yie),e(yie,MNo),e(r5,ENo),e(r5,RD),e(RD,yNo),e(r5,wNo),e(me,ANo),e(me,t5),e(t5,wie),e(wie,LNo),e(t5,BNo),e(t5,SD),e(SD,xNo),e(t5,kNo),e(me,RNo),e(me,a5),e(a5,Aie),e(Aie,SNo),e(a5,PNo),e(a5,PD),e(PD,$No),e(a5,INo),e(me,NNo),e(me,n5),e(n5,Lie),e(Lie,jNo),e(n5,DNo),e(n5,$D),e($D,qNo),e(n5,GNo),e(me,ONo),e(me,s5),e(s5,Bie),e(Bie,XNo),e(s5,VNo),e(s5,ID),e(ID,zNo),e(s5,WNo),e(me,QNo),e(me,l5),e(l5,xie),e(xie,HNo),e(l5,UNo),e(l5,ND),e(ND,JNo),e(l5,YNo),e(Ue,KNo),e(Ue,i5),e(i5,ZNo),e(i5,kie),e(kie,ejo),e(i5,ojo),e(i5,Rie),e(Rie,rjo),e(Ue,tjo),e(Ue,Sie),e(Sie,ajo),e(Ue,njo),g(mw,Ue,null),b(c,Bke,u),b(c,Sd,u),e(Sd,d5),e(d5,Pie),g(gw,Pie,null),e(Sd,sjo),e(Sd,$ie),e($ie,ljo),b(c,xke,u),b(c,ir,u),g(hw,ir,null),e(ir,ijo),e(ir,Pd),e(Pd,djo),e(Pd,Iie),e(Iie,cjo),e(Pd,fjo),e(Pd,Nie),e(Nie,mjo),e(Pd,gjo),e(ir,hjo),e(ir,pw),e(pw,pjo),e(pw,jie),e(jie,_jo),e(pw,ujo),e(ir,bjo),e(ir,rt),g(_w,rt,null),e(rt,vjo),e(rt,Die),e(Die,Tjo),e(rt,Fjo),e(rt,$d),e($d,Cjo),e($d,qie),e(qie,Mjo),e($d,Ejo),e($d,Gie),e(Gie,yjo),e($d,wjo),e(rt,Ajo),e(rt,Oie),e(Oie,Ljo),e(rt,Bjo),g(uw,rt,null),e(ir,xjo),e(ir,Je),g(bw,Je,null),e(Je,kjo),e(Je,Xie),e(Xie,Rjo),e(Je,Sjo),e(Je,rn),e(rn,Pjo),e(rn,Vie),e(Vie,$jo),e(rn,Ijo),e(rn,zie),e(zie,Njo),e(rn,jjo),e(rn,Wie),e(Wie,Djo),e(rn,qjo),e(Je,Gjo),e(Je,Qie),e(Qie,c5),e(c5,Hie),e(Hie,Ojo),e(c5,Xjo),e(c5,jD),e(jD,Vjo),e(c5,zjo),e(Je,Wjo),e(Je,f5),e(f5,Qjo),e(f5,Uie),e(Uie,Hjo),e(f5,Ujo),e(f5,Jie),e(Jie,Jjo),e(Je,Yjo),e(Je,Yie),e(Yie,Kjo),e(Je,Zjo),g(vw,Je,null),b(c,kke,u),b(c,Id,u),e(Id,m5),e(m5,Kie),g(Tw,Kie,null),e(Id,eDo),e(Id,Zie),e(Zie,oDo),b(c,Rke,u),b(c,dr,u),g(Fw,dr,null),e(dr,rDo),e(dr,Nd),e(Nd,tDo),e(Nd,ede),e(ede,aDo),e(Nd,nDo),e(Nd,ode),e(ode,sDo),e(Nd,lDo),e(dr,iDo),e(dr,Cw),e(Cw,dDo),e(Cw,rde),e(rde,cDo),e(Cw,fDo),e(dr,mDo),e(dr,tt),g(Mw,tt,null),e(tt,gDo),e(tt,tde),e(tde,hDo),e(tt,pDo),e(tt,jd),e(jd,_Do),e(jd,ade),e(ade,uDo),e(jd,bDo),e(jd,nde),e(nde,vDo),e(jd,TDo),e(tt,FDo),e(tt,sde),e(sde,CDo),e(tt,MDo),g(Ew,tt,null),e(dr,EDo),e(dr,Ye),g(yw,Ye,null),e(Ye,yDo),e(Ye,lde),e(lde,wDo),e(Ye,ADo),e(Ye,tn),e(tn,LDo),e(tn,ide),e(ide,BDo),e(tn,xDo),e(tn,dde),e(dde,kDo),e(tn,RDo),e(tn,cde),e(cde,SDo),e(tn,PDo),e(Ye,$Do),e(Ye,ke),e(ke,g5),e(g5,fde),e(fde,IDo),e(g5,NDo),e(g5,DD),e(DD,jDo),e(g5,DDo),e(ke,qDo),e(ke,h5),e(h5,mde),e(mde,GDo),e(h5,ODo),e(h5,qD),e(qD,XDo),e(h5,VDo),e(ke,zDo),e(ke,p5),e(p5,gde),e(gde,WDo),e(p5,QDo),e(p5,GD),e(GD,HDo),e(p5,UDo),e(ke,JDo),e(ke,_5),e(_5,hde),e(hde,YDo),e(_5,KDo),e(_5,OD),e(OD,ZDo),e(_5,eqo),e(ke,oqo),e(ke,u5),e(u5,pde),e(pde,rqo),e(u5,tqo),e(u5,XD),e(XD,aqo),e(u5,nqo),e(ke,sqo),e(ke,b5),e(b5,_de),e(_de,lqo),e(b5,iqo),e(b5,VD),e(VD,dqo),e(b5,cqo),e(ke,fqo),e(ke,v5),e(v5,ude),e(ude,mqo),e(v5,gqo),e(v5,zD),e(zD,hqo),e(v5,pqo),e(ke,_qo),e(ke,T5),e(T5,bde),e(bde,uqo),e(T5,bqo),e(T5,WD),e(WD,vqo),e(T5,Tqo),e(Ye,Fqo),e(Ye,F5),e(F5,Cqo),e(F5,vde),e(vde,Mqo),e(F5,Eqo),e(F5,Tde),e(Tde,yqo),e(Ye,wqo),e(Ye,Fde),e(Fde,Aqo),e(Ye,Lqo),g(ww,Ye,null),b(c,Ske,u),b(c,Dd,u),e(Dd,C5),e(C5,Cde),g(Aw,Cde,null),e(Dd,Bqo),e(Dd,Mde),e(Mde,xqo),b(c,Pke,u),b(c,cr,u),g(Lw,cr,null),e(cr,kqo),e(cr,qd),e(qd,Rqo),e(qd,Ede),e(Ede,Sqo),e(qd,Pqo),e(qd,yde),e(yde,$qo),e(qd,Iqo),e(cr,Nqo),e(cr,Bw),e(Bw,jqo),e(Bw,wde),e(wde,Dqo),e(Bw,qqo),e(cr,Gqo),e(cr,at),g(xw,at,null),e(at,Oqo),e(at,Ade),e(Ade,Xqo),e(at,Vqo),e(at,Gd),e(Gd,zqo),e(Gd,Lde),e(Lde,Wqo),e(Gd,Qqo),e(Gd,Bde),e(Bde,Hqo),e(Gd,Uqo),e(at,Jqo),e(at,xde),e(xde,Yqo),e(at,Kqo),g(kw,at,null),e(cr,Zqo),e(cr,Ke),g(Rw,Ke,null),e(Ke,eGo),e(Ke,kde),e(kde,oGo),e(Ke,rGo),e(Ke,an),e(an,tGo),e(an,Rde),e(Rde,aGo),e(an,nGo),e(an,Sde),e(Sde,sGo),e(an,lGo),e(an,Pde),e(Pde,iGo),e(an,dGo),e(Ke,cGo),e(Ke,nn),e(nn,M5),e(M5,$de),e($de,fGo),e(M5,mGo),e(M5,QD),e(QD,gGo),e(M5,hGo),e(nn,pGo),e(nn,E5),e(E5,Ide),e(Ide,_Go),e(E5,uGo),e(E5,HD),e(HD,bGo),e(E5,vGo),e(nn,TGo),e(nn,y5),e(y5,Nde),e(Nde,FGo),e(y5,CGo),e(y5,UD),e(UD,MGo),e(y5,EGo),e(nn,yGo),e(nn,w5),e(w5,jde),e(jde,wGo),e(w5,AGo),e(w5,JD),e(JD,LGo),e(w5,BGo),e(Ke,xGo),e(Ke,A5),e(A5,kGo),e(A5,Dde),e(Dde,RGo),e(A5,SGo),e(A5,qde),e(qde,PGo),e(Ke,$Go),e(Ke,Gde),e(Gde,IGo),e(Ke,NGo),g(Sw,Ke,null),b(c,$ke,u),b(c,Od,u),e(Od,L5),e(L5,Ode),g(Pw,Ode,null),e(Od,jGo),e(Od,Xde),e(Xde,DGo),b(c,Ike,u),b(c,fr,u),g($w,fr,null),e(fr,qGo),e(fr,Xd),e(Xd,GGo),e(Xd,Vde),e(Vde,OGo),e(Xd,XGo),e(Xd,zde),e(zde,VGo),e(Xd,zGo),e(fr,WGo),e(fr,Iw),e(Iw,QGo),e(Iw,Wde),e(Wde,HGo),e(Iw,UGo),e(fr,JGo),e(fr,nt),g(Nw,nt,null),e(nt,YGo),e(nt,Qde),e(Qde,KGo),e(nt,ZGo),e(nt,Vd),e(Vd,eOo),e(Vd,Hde),e(Hde,oOo),e(Vd,rOo),e(Vd,Ude),e(Ude,tOo),e(Vd,aOo),e(nt,nOo),e(nt,Jde),e(Jde,sOo),e(nt,lOo),g(jw,nt,null),e(fr,iOo),e(fr,Ze),g(Dw,Ze,null),e(Ze,dOo),e(Ze,Yde),e(Yde,cOo),e(Ze,fOo),e(Ze,sn),e(sn,mOo),e(sn,Kde),e(Kde,gOo),e(sn,hOo),e(sn,Zde),e(Zde,pOo),e(sn,_Oo),e(sn,ece),e(ece,uOo),e(sn,bOo),e(Ze,vOo),e(Ze,Re),e(Re,B5),e(B5,oce),e(oce,TOo),e(B5,FOo),e(B5,YD),e(YD,COo),e(B5,MOo),e(Re,EOo),e(Re,x5),e(x5,rce),e(rce,yOo),e(x5,wOo),e(x5,KD),e(KD,AOo),e(x5,LOo),e(Re,BOo),e(Re,k5),e(k5,tce),e(tce,xOo),e(k5,kOo),e(k5,ZD),e(ZD,ROo),e(k5,SOo),e(Re,POo),e(Re,R5),e(R5,ace),e(ace,$Oo),e(R5,IOo),e(R5,eq),e(eq,NOo),e(R5,jOo),e(Re,DOo),e(Re,S5),e(S5,nce),e(nce,qOo),e(S5,GOo),e(S5,oq),e(oq,OOo),e(S5,XOo),e(Re,VOo),e(Re,P5),e(P5,sce),e(sce,zOo),e(P5,WOo),e(P5,rq),e(rq,QOo),e(P5,HOo),e(Re,UOo),e(Re,$5),e($5,lce),e(lce,JOo),e($5,YOo),e($5,tq),e(tq,KOo),e($5,ZOo),e(Re,eXo),e(Re,I5),e(I5,ice),e(ice,oXo),e(I5,rXo),e(I5,aq),e(aq,tXo),e(I5,aXo),e(Ze,nXo),e(Ze,N5),e(N5,sXo),e(N5,dce),e(dce,lXo),e(N5,iXo),e(N5,cce),e(cce,dXo),e(Ze,cXo),e(Ze,fce),e(fce,fXo),e(Ze,mXo),g(qw,Ze,null),b(c,Nke,u),b(c,zd,u),e(zd,j5),e(j5,mce),g(Gw,mce,null),e(zd,gXo),e(zd,gce),e(gce,hXo),b(c,jke,u),b(c,mr,u),g(Ow,mr,null),e(mr,pXo),e(mr,Wd),e(Wd,_Xo),e(Wd,hce),e(hce,uXo),e(Wd,bXo),e(Wd,pce),e(pce,vXo),e(Wd,TXo),e(mr,FXo),e(mr,Xw),e(Xw,CXo),e(Xw,_ce),e(_ce,MXo),e(Xw,EXo),e(mr,yXo),e(mr,st),g(Vw,st,null),e(st,wXo),e(st,uce),e(uce,AXo),e(st,LXo),e(st,Qd),e(Qd,BXo),e(Qd,bce),e(bce,xXo),e(Qd,kXo),e(Qd,vce),e(vce,RXo),e(Qd,SXo),e(st,PXo),e(st,Tce),e(Tce,$Xo),e(st,IXo),g(zw,st,null),e(mr,NXo),e(mr,eo),g(Ww,eo,null),e(eo,jXo),e(eo,Fce),e(Fce,DXo),e(eo,qXo),e(eo,ln),e(ln,GXo),e(ln,Cce),e(Cce,OXo),e(ln,XXo),e(ln,Mce),e(Mce,VXo),e(ln,zXo),e(ln,Ece),e(Ece,WXo),e(ln,QXo),e(eo,HXo),e(eo,Qw),e(Qw,D5),e(D5,yce),e(yce,UXo),e(D5,JXo),e(D5,nq),e(nq,YXo),e(D5,KXo),e(Qw,ZXo),e(Qw,q5),e(q5,wce),e(wce,eVo),e(q5,oVo),e(q5,sq),e(sq,rVo),e(q5,tVo),e(eo,aVo),e(eo,G5),e(G5,nVo),e(G5,Ace),e(Ace,sVo),e(G5,lVo),e(G5,Lce),e(Lce,iVo),e(eo,dVo),e(eo,Bce),e(Bce,cVo),e(eo,fVo),g(Hw,eo,null),b(c,Dke,u),b(c,Hd,u),e(Hd,O5),e(O5,xce),g(Uw,xce,null),e(Hd,mVo),e(Hd,kce),e(kce,gVo),b(c,qke,u),b(c,gr,u),g(Jw,gr,null),e(gr,hVo),e(gr,Ud),e(Ud,pVo),e(Ud,Rce),e(Rce,_Vo),e(Ud,uVo),e(Ud,Sce),e(Sce,bVo),e(Ud,vVo),e(gr,TVo),e(gr,Yw),e(Yw,FVo),e(Yw,Pce),e(Pce,CVo),e(Yw,MVo),e(gr,EVo),e(gr,lt),g(Kw,lt,null),e(lt,yVo),e(lt,$ce),e($ce,wVo),e(lt,AVo),e(lt,Jd),e(Jd,LVo),e(Jd,Ice),e(Ice,BVo),e(Jd,xVo),e(Jd,Nce),e(Nce,kVo),e(Jd,RVo),e(lt,SVo),e(lt,jce),e(jce,PVo),e(lt,$Vo),g(Zw,lt,null),e(gr,IVo),e(gr,oo),g(eA,oo,null),e(oo,NVo),e(oo,Dce),e(Dce,jVo),e(oo,DVo),e(oo,dn),e(dn,qVo),e(dn,qce),e(qce,GVo),e(dn,OVo),e(dn,Gce),e(Gce,XVo),e(dn,VVo),e(dn,Oce),e(Oce,zVo),e(dn,WVo),e(oo,QVo),e(oo,cn),e(cn,X5),e(X5,Xce),e(Xce,HVo),e(X5,UVo),e(X5,lq),e(lq,JVo),e(X5,YVo),e(cn,KVo),e(cn,V5),e(V5,Vce),e(Vce,ZVo),e(V5,ezo),e(V5,iq),e(iq,ozo),e(V5,rzo),e(cn,tzo),e(cn,z5),e(z5,zce),e(zce,azo),e(z5,nzo),e(z5,dq),e(dq,szo),e(z5,lzo),e(cn,izo),e(cn,W5),e(W5,Wce),e(Wce,dzo),e(W5,czo),e(W5,cq),e(cq,fzo),e(W5,mzo),e(oo,gzo),e(oo,Q5),e(Q5,hzo),e(Q5,Qce),e(Qce,pzo),e(Q5,_zo),e(Q5,Hce),e(Hce,uzo),e(oo,bzo),e(oo,Uce),e(Uce,vzo),e(oo,Tzo),g(oA,oo,null),b(c,Gke,u),b(c,Yd,u),e(Yd,H5),e(H5,Jce),g(rA,Jce,null),e(Yd,Fzo),e(Yd,Yce),e(Yce,Czo),b(c,Oke,u),b(c,hr,u),g(tA,hr,null),e(hr,Mzo),e(hr,Kd),e(Kd,Ezo),e(Kd,Kce),e(Kce,yzo),e(Kd,wzo),e(Kd,Zce),e(Zce,Azo),e(Kd,Lzo),e(hr,Bzo),e(hr,aA),e(aA,xzo),e(aA,efe),e(efe,kzo),e(aA,Rzo),e(hr,Szo),e(hr,it),g(nA,it,null),e(it,Pzo),e(it,ofe),e(ofe,$zo),e(it,Izo),e(it,Zd),e(Zd,Nzo),e(Zd,rfe),e(rfe,jzo),e(Zd,Dzo),e(Zd,tfe),e(tfe,qzo),e(Zd,Gzo),e(it,Ozo),e(it,afe),e(afe,Xzo),e(it,Vzo),g(sA,it,null),e(hr,zzo),e(hr,ro),g(lA,ro,null),e(ro,Wzo),e(ro,nfe),e(nfe,Qzo),e(ro,Hzo),e(ro,fn),e(fn,Uzo),e(fn,sfe),e(sfe,Jzo),e(fn,Yzo),e(fn,lfe),e(lfe,Kzo),e(fn,Zzo),e(fn,ife),e(ife,eWo),e(fn,oWo),e(ro,rWo),e(ro,ec),e(ec,U5),e(U5,dfe),e(dfe,tWo),e(U5,aWo),e(U5,fq),e(fq,nWo),e(U5,sWo),e(ec,lWo),e(ec,J5),e(J5,cfe),e(cfe,iWo),e(J5,dWo),e(J5,mq),e(mq,cWo),e(J5,fWo),e(ec,mWo),e(ec,Y5),e(Y5,ffe),e(ffe,gWo),e(Y5,hWo),e(Y5,gq),e(gq,pWo),e(Y5,_Wo),e(ro,uWo),e(ro,K5),e(K5,bWo),e(K5,mfe),e(mfe,vWo),e(K5,TWo),e(K5,gfe),e(gfe,FWo),e(ro,CWo),e(ro,hfe),e(hfe,MWo),e(ro,EWo),g(iA,ro,null),b(c,Xke,u),b(c,oc,u),e(oc,Z5),e(Z5,pfe),g(dA,pfe,null),e(oc,yWo),e(oc,_fe),e(_fe,wWo),b(c,Vke,u),b(c,pr,u),g(cA,pr,null),e(pr,AWo),e(pr,rc),e(rc,LWo),e(rc,ufe),e(ufe,BWo),e(rc,xWo),e(rc,bfe),e(bfe,kWo),e(rc,RWo),e(pr,SWo),e(pr,fA),e(fA,PWo),e(fA,vfe),e(vfe,$Wo),e(fA,IWo),e(pr,NWo),e(pr,dt),g(mA,dt,null),e(dt,jWo),e(dt,Tfe),e(Tfe,DWo),e(dt,qWo),e(dt,tc),e(tc,GWo),e(tc,Ffe),e(Ffe,OWo),e(tc,XWo),e(tc,Cfe),e(Cfe,VWo),e(tc,zWo),e(dt,WWo),e(dt,Mfe),e(Mfe,QWo),e(dt,HWo),g(gA,dt,null),e(pr,UWo),e(pr,to),g(hA,to,null),e(to,JWo),e(to,Efe),e(Efe,YWo),e(to,KWo),e(to,mn),e(mn,ZWo),e(mn,yfe),e(yfe,eQo),e(mn,oQo),e(mn,wfe),e(wfe,rQo),e(mn,tQo),e(mn,Afe),e(Afe,aQo),e(mn,nQo),e(to,sQo),e(to,Lfe),e(Lfe,e2),e(e2,Bfe),e(Bfe,lQo),e(e2,iQo),e(e2,hq),e(hq,dQo),e(e2,cQo),e(to,fQo),e(to,o2),e(o2,mQo),e(o2,xfe),e(xfe,gQo),e(o2,hQo),e(o2,kfe),e(kfe,pQo),e(to,_Qo),e(to,Rfe),e(Rfe,uQo),e(to,bQo),g(pA,to,null),b(c,zke,u),b(c,ac,u),e(ac,r2),e(r2,Sfe),g(_A,Sfe,null),e(ac,vQo),e(ac,Pfe),e(Pfe,TQo),b(c,Wke,u),b(c,_r,u),g(uA,_r,null),e(_r,FQo),e(_r,nc),e(nc,CQo),e(nc,$fe),e($fe,MQo),e(nc,EQo),e(nc,Ife),e(Ife,yQo),e(nc,wQo),e(_r,AQo),e(_r,bA),e(bA,LQo),e(bA,Nfe),e(Nfe,BQo),e(bA,xQo),e(_r,kQo),e(_r,ct),g(vA,ct,null),e(ct,RQo),e(ct,jfe),e(jfe,SQo),e(ct,PQo),e(ct,sc),e(sc,$Qo),e(sc,Dfe),e(Dfe,IQo),e(sc,NQo),e(sc,qfe),e(qfe,jQo),e(sc,DQo),e(ct,qQo),e(ct,Gfe),e(Gfe,GQo),e(ct,OQo),g(TA,ct,null),e(_r,XQo),e(_r,ao),g(FA,ao,null),e(ao,VQo),e(ao,Ofe),e(Ofe,zQo),e(ao,WQo),e(ao,gn),e(gn,QQo),e(gn,Xfe),e(Xfe,HQo),e(gn,UQo),e(gn,Vfe),e(Vfe,JQo),e(gn,YQo),e(gn,zfe),e(zfe,KQo),e(gn,ZQo),e(ao,eHo),e(ao,Wfe),e(Wfe,t2),e(t2,Qfe),e(Qfe,oHo),e(t2,rHo),e(t2,pq),e(pq,tHo),e(t2,aHo),e(ao,nHo),e(ao,a2),e(a2,sHo),e(a2,Hfe),e(Hfe,lHo),e(a2,iHo),e(a2,Ufe),e(Ufe,dHo),e(ao,cHo),e(ao,Jfe),e(Jfe,fHo),e(ao,mHo),g(CA,ao,null),b(c,Qke,u),b(c,lc,u),e(lc,n2),e(n2,Yfe),g(MA,Yfe,null),e(lc,gHo),e(lc,Kfe),e(Kfe,hHo),b(c,Hke,u),b(c,ur,u),g(EA,ur,null),e(ur,pHo),e(ur,ic),e(ic,_Ho),e(ic,Zfe),e(Zfe,uHo),e(ic,bHo),e(ic,eme),e(eme,vHo),e(ic,THo),e(ur,FHo),e(ur,yA),e(yA,CHo),e(yA,ome),e(ome,MHo),e(yA,EHo),e(ur,yHo),e(ur,ft),g(wA,ft,null),e(ft,wHo),e(ft,rme),e(rme,AHo),e(ft,LHo),e(ft,dc),e(dc,BHo),e(dc,tme),e(tme,xHo),e(dc,kHo),e(dc,ame),e(ame,RHo),e(dc,SHo),e(ft,PHo),e(ft,nme),e(nme,$Ho),e(ft,IHo),g(AA,ft,null),e(ur,NHo),e(ur,no),g(LA,no,null),e(no,jHo),e(no,sme),e(sme,DHo),e(no,qHo),e(no,hn),e(hn,GHo),e(hn,lme),e(lme,OHo),e(hn,XHo),e(hn,ime),e(ime,VHo),e(hn,zHo),e(hn,dme),e(dme,WHo),e(hn,QHo),e(no,HHo),e(no,BA),e(BA,s2),e(s2,cme),e(cme,UHo),e(s2,JHo),e(s2,_q),e(_q,YHo),e(s2,KHo),e(BA,ZHo),e(BA,l2),e(l2,fme),e(fme,eUo),e(l2,oUo),e(l2,uq),e(uq,rUo),e(l2,tUo),e(no,aUo),e(no,i2),e(i2,nUo),e(i2,mme),e(mme,sUo),e(i2,lUo),e(i2,gme),e(gme,iUo),e(no,dUo),e(no,hme),e(hme,cUo),e(no,fUo),g(xA,no,null),b(c,Uke,u),b(c,cc,u),e(cc,d2),e(d2,pme),g(kA,pme,null),e(cc,mUo),e(cc,_me),e(_me,gUo),b(c,Jke,u),b(c,br,u),g(RA,br,null),e(br,hUo),e(br,fc),e(fc,pUo),e(fc,ume),e(ume,_Uo),e(fc,uUo),e(fc,bme),e(bme,bUo),e(fc,vUo),e(br,TUo),e(br,SA),e(SA,FUo),e(SA,vme),e(vme,CUo),e(SA,MUo),e(br,EUo),e(br,mt),g(PA,mt,null),e(mt,yUo),e(mt,Tme),e(Tme,wUo),e(mt,AUo),e(mt,mc),e(mc,LUo),e(mc,Fme),e(Fme,BUo),e(mc,xUo),e(mc,Cme),e(Cme,kUo),e(mc,RUo),e(mt,SUo),e(mt,Mme),e(Mme,PUo),e(mt,$Uo),g($A,mt,null),e(br,IUo),e(br,so),g(IA,so,null),e(so,NUo),e(so,Eme),e(Eme,jUo),e(so,DUo),e(so,pn),e(pn,qUo),e(pn,yme),e(yme,GUo),e(pn,OUo),e(pn,wme),e(wme,XUo),e(pn,VUo),e(pn,Ame),e(Ame,zUo),e(pn,WUo),e(so,QUo),e(so,Lme),e(Lme,c2),e(c2,Bme),e(Bme,HUo),e(c2,UUo),e(c2,bq),e(bq,JUo),e(c2,YUo),e(so,KUo),e(so,f2),e(f2,ZUo),e(f2,xme),e(xme,eJo),e(f2,oJo),e(f2,kme),e(kme,rJo),e(so,tJo),e(so,Rme),e(Rme,aJo),e(so,nJo),g(NA,so,null),b(c,Yke,u),b(c,gc,u),e(gc,m2),e(m2,Sme),g(jA,Sme,null),e(gc,sJo),e(gc,Pme),e(Pme,lJo),b(c,Kke,u),b(c,vr,u),g(DA,vr,null),e(vr,iJo),e(vr,hc),e(hc,dJo),e(hc,$me),e($me,cJo),e(hc,fJo),e(hc,Ime),e(Ime,mJo),e(hc,gJo),e(vr,hJo),e(vr,qA),e(qA,pJo),e(qA,Nme),e(Nme,_Jo),e(qA,uJo),e(vr,bJo),e(vr,gt),g(GA,gt,null),e(gt,vJo),e(gt,jme),e(jme,TJo),e(gt,FJo),e(gt,pc),e(pc,CJo),e(pc,Dme),e(Dme,MJo),e(pc,EJo),e(pc,qme),e(qme,yJo),e(pc,wJo),e(gt,AJo),e(gt,Gme),e(Gme,LJo),e(gt,BJo),g(OA,gt,null),e(vr,xJo),e(vr,ho),g(XA,ho,null),e(ho,kJo),e(ho,Ome),e(Ome,RJo),e(ho,SJo),e(ho,_n),e(_n,PJo),e(_n,Xme),e(Xme,$Jo),e(_n,IJo),e(_n,Vme),e(Vme,NJo),e(_n,jJo),e(_n,zme),e(zme,DJo),e(_n,qJo),e(ho,GJo),e(ho,B),e(B,g2),e(g2,Wme),e(Wme,OJo),e(g2,XJo),e(g2,vq),e(vq,VJo),e(g2,zJo),e(B,WJo),e(B,h2),e(h2,Qme),e(Qme,QJo),e(h2,HJo),e(h2,Tq),e(Tq,UJo),e(h2,JJo),e(B,YJo),e(B,p2),e(p2,Hme),e(Hme,KJo),e(p2,ZJo),e(p2,Fq),e(Fq,eYo),e(p2,oYo),e(B,rYo),e(B,_2),e(_2,Ume),e(Ume,tYo),e(_2,aYo),e(_2,Cq),e(Cq,nYo),e(_2,sYo),e(B,lYo),e(B,u2),e(u2,Jme),e(Jme,iYo),e(u2,dYo),e(u2,Mq),e(Mq,cYo),e(u2,fYo),e(B,mYo),e(B,b2),e(b2,Yme),e(Yme,gYo),e(b2,hYo),e(b2,Eq),e(Eq,pYo),e(b2,_Yo),e(B,uYo),e(B,v2),e(v2,Kme),e(Kme,bYo),e(v2,vYo),e(v2,yq),e(yq,TYo),e(v2,FYo),e(B,CYo),e(B,T2),e(T2,Zme),e(Zme,MYo),e(T2,EYo),e(T2,wq),e(wq,yYo),e(T2,wYo),e(B,AYo),e(B,F2),e(F2,ege),e(ege,LYo),e(F2,BYo),e(F2,Aq),e(Aq,xYo),e(F2,kYo),e(B,RYo),e(B,C2),e(C2,oge),e(oge,SYo),e(C2,PYo),e(C2,Lq),e(Lq,$Yo),e(C2,IYo),e(B,NYo),e(B,M2),e(M2,rge),e(rge,jYo),e(M2,DYo),e(M2,Bq),e(Bq,qYo),e(M2,GYo),e(B,OYo),e(B,E2),e(E2,tge),e(tge,XYo),e(E2,VYo),e(E2,xq),e(xq,zYo),e(E2,WYo),e(B,QYo),e(B,y2),e(y2,age),e(age,HYo),e(y2,UYo),e(y2,kq),e(kq,JYo),e(y2,YYo),e(B,KYo),e(B,w2),e(w2,nge),e(nge,ZYo),e(w2,eKo),e(w2,Rq),e(Rq,oKo),e(w2,rKo),e(B,tKo),e(B,A2),e(A2,sge),e(sge,aKo),e(A2,nKo),e(A2,Sq),e(Sq,sKo),e(A2,lKo),e(B,iKo),e(B,L2),e(L2,lge),e(lge,dKo),e(L2,cKo),e(L2,Pq),e(Pq,fKo),e(L2,mKo),e(B,gKo),e(B,Gs),e(Gs,ige),e(ige,hKo),e(Gs,pKo),e(Gs,$q),e($q,_Ko),e(Gs,uKo),e(Gs,Iq),e(Iq,bKo),e(Gs,vKo),e(B,TKo),e(B,B2),e(B2,dge),e(dge,FKo),e(B2,CKo),e(B2,Nq),e(Nq,MKo),e(B2,EKo),e(B,yKo),e(B,x2),e(x2,cge),e(cge,wKo),e(x2,AKo),e(x2,jq),e(jq,LKo),e(x2,BKo),e(B,xKo),e(B,k2),e(k2,fge),e(fge,kKo),e(k2,RKo),e(k2,Dq),e(Dq,SKo),e(k2,PKo),e(B,$Ko),e(B,R2),e(R2,mge),e(mge,IKo),e(R2,NKo),e(R2,qq),e(qq,jKo),e(R2,DKo),e(B,qKo),e(B,S2),e(S2,gge),e(gge,GKo),e(S2,OKo),e(S2,Gq),e(Gq,XKo),e(S2,VKo),e(B,zKo),e(B,P2),e(P2,hge),e(hge,WKo),e(P2,QKo),e(P2,Oq),e(Oq,HKo),e(P2,UKo),e(B,JKo),e(B,$2),e($2,pge),e(pge,YKo),e($2,KKo),e($2,Xq),e(Xq,ZKo),e($2,eZo),e(B,oZo),e(B,I2),e(I2,_ge),e(_ge,rZo),e(I2,tZo),e(I2,Vq),e(Vq,aZo),e(I2,nZo),e(B,sZo),e(B,N2),e(N2,uge),e(uge,lZo),e(N2,iZo),e(N2,zq),e(zq,dZo),e(N2,cZo),e(B,fZo),e(B,j2),e(j2,bge),e(bge,mZo),e(j2,gZo),e(j2,Wq),e(Wq,hZo),e(j2,pZo),e(B,_Zo),e(B,D2),e(D2,vge),e(vge,uZo),e(D2,bZo),e(D2,Qq),e(Qq,vZo),e(D2,TZo),e(B,FZo),e(B,q2),e(q2,Tge),e(Tge,CZo),e(q2,MZo),e(q2,Hq),e(Hq,EZo),e(q2,yZo),e(B,wZo),e(B,G2),e(G2,Fge),e(Fge,AZo),e(G2,LZo),e(G2,Uq),e(Uq,BZo),e(G2,xZo),e(B,kZo),e(B,O2),e(O2,Cge),e(Cge,RZo),e(O2,SZo),e(O2,Jq),e(Jq,PZo),e(O2,$Zo),e(B,IZo),e(B,X2),e(X2,Mge),e(Mge,NZo),e(X2,jZo),e(X2,Yq),e(Yq,DZo),e(X2,qZo),e(B,GZo),e(B,V2),e(V2,Ege),e(Ege,OZo),e(V2,XZo),e(V2,Kq),e(Kq,VZo),e(V2,zZo),e(B,WZo),e(B,z2),e(z2,yge),e(yge,QZo),e(z2,HZo),e(z2,Zq),e(Zq,UZo),e(z2,JZo),e(B,YZo),e(B,W2),e(W2,wge),e(wge,KZo),e(W2,ZZo),e(W2,eG),e(eG,eer),e(W2,oer),e(B,rer),e(B,Q2),e(Q2,Age),e(Age,ter),e(Q2,aer),e(Q2,oG),e(oG,ner),e(Q2,ser),e(B,ler),e(B,H2),e(H2,Lge),e(Lge,ier),e(H2,der),e(H2,rG),e(rG,cer),e(H2,fer),e(B,mer),e(B,U2),e(U2,Bge),e(Bge,ger),e(U2,her),e(U2,tG),e(tG,per),e(U2,_er),e(B,uer),e(B,J2),e(J2,xge),e(xge,ber),e(J2,ver),e(J2,aG),e(aG,Ter),e(J2,Fer),e(B,Cer),e(B,Y2),e(Y2,kge),e(kge,Mer),e(Y2,Eer),e(Y2,nG),e(nG,yer),e(Y2,wer),e(B,Aer),e(B,K2),e(K2,Rge),e(Rge,Ler),e(K2,Ber),e(K2,sG),e(sG,xer),e(K2,ker),e(B,Rer),e(B,Z2),e(Z2,Sge),e(Sge,Ser),e(Z2,Per),e(Z2,lG),e(lG,$er),e(Z2,Ier),e(ho,Ner),e(ho,Pge),e(Pge,jer),e(ho,Der),g(VA,ho,null),b(c,Zke,u),b(c,_c,u),e(_c,ev),e(ev,$ge),g(zA,$ge,null),e(_c,qer),e(_c,Ige),e(Ige,Ger),b(c,eRe,u),b(c,Tr,u),g(WA,Tr,null),e(Tr,Oer),e(Tr,uc),e(uc,Xer),e(uc,Nge),e(Nge,Ver),e(uc,zer),e(uc,jge),e(jge,Wer),e(uc,Qer),e(Tr,Her),e(Tr,QA),e(QA,Uer),e(QA,Dge),e(Dge,Jer),e(QA,Yer),e(Tr,Ker),e(Tr,ht),g(HA,ht,null),e(ht,Zer),e(ht,qge),e(qge,eor),e(ht,oor),e(ht,bc),e(bc,ror),e(bc,Gge),e(Gge,tor),e(bc,aor),e(bc,Oge),e(Oge,nor),e(bc,sor),e(ht,lor),e(ht,Xge),e(Xge,ior),e(ht,dor),g(UA,ht,null),e(Tr,cor),e(Tr,po),g(JA,po,null),e(po,mor),e(po,Vge),e(Vge,gor),e(po,hor),e(po,un),e(un,por),e(un,zge),e(zge,_or),e(un,uor),e(un,Wge),e(Wge,bor),e(un,vor),e(un,Qge),e(Qge,Tor),e(un,For),e(po,Cor),e(po,H),e(H,ov),e(ov,Hge),e(Hge,Mor),e(ov,Eor),e(ov,iG),e(iG,yor),e(ov,wor),e(H,Aor),e(H,rv),e(rv,Uge),e(Uge,Lor),e(rv,Bor),e(rv,dG),e(dG,xor),e(rv,kor),e(H,Ror),e(H,tv),e(tv,Jge),e(Jge,Sor),e(tv,Por),e(tv,cG),e(cG,$or),e(tv,Ior),e(H,Nor),e(H,av),e(av,Yge),e(Yge,jor),e(av,Dor),e(av,fG),e(fG,qor),e(av,Gor),e(H,Oor),e(H,nv),e(nv,Kge),e(Kge,Xor),e(nv,Vor),e(nv,mG),e(mG,zor),e(nv,Wor),e(H,Qor),e(H,sv),e(sv,Zge),e(Zge,Hor),e(sv,Uor),e(sv,gG),e(gG,Jor),e(sv,Yor),e(H,Kor),e(H,lv),e(lv,ehe),e(ehe,Zor),e(lv,err),e(lv,hG),e(hG,orr),e(lv,rrr),e(H,trr),e(H,iv),e(iv,ohe),e(ohe,arr),e(iv,nrr),e(iv,pG),e(pG,srr),e(iv,lrr),e(H,irr),e(H,dv),e(dv,rhe),e(rhe,drr),e(dv,crr),e(dv,_G),e(_G,frr),e(dv,mrr),e(H,grr),e(H,cv),e(cv,the),e(the,hrr),e(cv,prr),e(cv,uG),e(uG,_rr),e(cv,urr),e(H,brr),e(H,fv),e(fv,ahe),e(ahe,vrr),e(fv,Trr),e(fv,bG),e(bG,Frr),e(fv,Crr),e(H,Mrr),e(H,mv),e(mv,nhe),e(nhe,Err),e(mv,yrr),e(mv,vG),e(vG,wrr),e(mv,Arr),e(H,Lrr),e(H,gv),e(gv,she),e(she,Brr),e(gv,xrr),e(gv,TG),e(TG,krr),e(gv,Rrr),e(H,Srr),e(H,hv),e(hv,lhe),e(lhe,Prr),e(hv,$rr),e(hv,FG),e(FG,Irr),e(hv,Nrr),e(H,jrr),e(H,pv),e(pv,ihe),e(ihe,Drr),e(pv,qrr),e(pv,CG),e(CG,Grr),e(pv,Orr),e(H,Xrr),e(H,_v),e(_v,dhe),e(dhe,Vrr),e(_v,zrr),e(_v,MG),e(MG,Wrr),e(_v,Qrr),e(H,Hrr),e(H,uv),e(uv,che),e(che,Urr),e(uv,Jrr),e(uv,EG),e(EG,Yrr),e(uv,Krr),e(H,Zrr),e(H,bv),e(bv,fhe),e(fhe,etr),e(bv,otr),e(bv,yG),e(yG,rtr),e(bv,ttr),e(H,atr),e(H,vv),e(vv,mhe),e(mhe,ntr),e(vv,str),e(vv,wG),e(wG,ltr),e(vv,itr),e(H,dtr),e(H,Tv),e(Tv,ghe),e(ghe,ctr),e(Tv,ftr),e(Tv,AG),e(AG,mtr),e(Tv,gtr),e(H,htr),e(H,Fv),e(Fv,hhe),e(hhe,ptr),e(Fv,_tr),e(Fv,LG),e(LG,utr),e(Fv,btr),e(H,vtr),e(H,Cv),e(Cv,phe),e(phe,Ttr),e(Cv,Ftr),e(Cv,BG),e(BG,Ctr),e(Cv,Mtr),e(po,Etr),e(po,_he),e(_he,ytr),e(po,wtr),g(YA,po,null),b(c,oRe,u),b(c,vc,u),e(vc,Mv),e(Mv,uhe),g(KA,uhe,null),e(vc,Atr),e(vc,bhe),e(bhe,Ltr),b(c,rRe,u),b(c,Fr,u),g(ZA,Fr,null),e(Fr,Btr),e(Fr,Tc),e(Tc,xtr),e(Tc,vhe),e(vhe,ktr),e(Tc,Rtr),e(Tc,The),e(The,Str),e(Tc,Ptr),e(Fr,$tr),e(Fr,e0),e(e0,Itr),e(e0,Fhe),e(Fhe,Ntr),e(e0,jtr),e(Fr,Dtr),e(Fr,pt),g(o0,pt,null),e(pt,qtr),e(pt,Che),e(Che,Gtr),e(pt,Otr),e(pt,Fc),e(Fc,Xtr),e(Fc,Mhe),e(Mhe,Vtr),e(Fc,ztr),e(Fc,Ehe),e(Ehe,Wtr),e(Fc,Qtr),e(pt,Htr),e(pt,yhe),e(yhe,Utr),e(pt,Jtr),g(r0,pt,null),e(Fr,Ytr),e(Fr,_o),g(t0,_o,null),e(_o,Ktr),e(_o,whe),e(whe,Ztr),e(_o,ear),e(_o,bn),e(bn,oar),e(bn,Ahe),e(Ahe,rar),e(bn,tar),e(bn,Lhe),e(Lhe,aar),e(bn,nar),e(bn,Bhe),e(Bhe,sar),e(bn,lar),e(_o,iar),e(_o,ge),e(ge,Ev),e(Ev,xhe),e(xhe,dar),e(Ev,car),e(Ev,xG),e(xG,far),e(Ev,mar),e(ge,gar),e(ge,yv),e(yv,khe),e(khe,har),e(yv,par),e(yv,kG),e(kG,_ar),e(yv,uar),e(ge,bar),e(ge,wv),e(wv,Rhe),e(Rhe,Tar),e(wv,Far),e(wv,RG),e(RG,Car),e(wv,Mar),e(ge,Ear),e(ge,Av),e(Av,She),e(She,yar),e(Av,war),e(Av,SG),e(SG,Aar),e(Av,Lar),e(ge,Bar),e(ge,Lv),e(Lv,Phe),e(Phe,xar),e(Lv,kar),e(Lv,PG),e(PG,Rar),e(Lv,Sar),e(ge,Par),e(ge,Bv),e(Bv,$he),e($he,$ar),e(Bv,Iar),e(Bv,$G),e($G,Nar),e(Bv,jar),e(ge,Dar),e(ge,xv),e(xv,Ihe),e(Ihe,qar),e(xv,Gar),e(xv,IG),e(IG,Oar),e(xv,Xar),e(ge,Var),e(ge,kv),e(kv,Nhe),e(Nhe,zar),e(kv,War),e(kv,NG),e(NG,Qar),e(kv,Har),e(ge,Uar),e(ge,Rv),e(Rv,jhe),e(jhe,Jar),e(Rv,Yar),e(Rv,jG),e(jG,Kar),e(Rv,Zar),e(ge,enr),e(ge,Sv),e(Sv,Dhe),e(Dhe,onr),e(Sv,rnr),e(Sv,DG),e(DG,tnr),e(Sv,anr),e(ge,nnr),e(ge,Pv),e(Pv,qhe),e(qhe,snr),e(Pv,lnr),e(Pv,qG),e(qG,inr),e(Pv,dnr),e(_o,cnr),e(_o,Ghe),e(Ghe,fnr),e(_o,mnr),g(a0,_o,null),b(c,tRe,u),b(c,Cc,u),e(Cc,$v),e($v,Ohe),g(n0,Ohe,null),e(Cc,gnr),e(Cc,Xhe),e(Xhe,hnr),b(c,aRe,u),b(c,Cr,u),g(s0,Cr,null),e(Cr,pnr),e(Cr,Mc),e(Mc,_nr),e(Mc,Vhe),e(Vhe,unr),e(Mc,bnr),e(Mc,zhe),e(zhe,vnr),e(Mc,Tnr),e(Cr,Fnr),e(Cr,l0),e(l0,Cnr),e(l0,Whe),e(Whe,Mnr),e(l0,Enr),e(Cr,ynr),e(Cr,_t),g(i0,_t,null),e(_t,wnr),e(_t,Qhe),e(Qhe,Anr),e(_t,Lnr),e(_t,Ec),e(Ec,Bnr),e(Ec,Hhe),e(Hhe,xnr),e(Ec,knr),e(Ec,Uhe),e(Uhe,Rnr),e(Ec,Snr),e(_t,Pnr),e(_t,Jhe),e(Jhe,$nr),e(_t,Inr),g(d0,_t,null),e(Cr,Nnr),e(Cr,uo),g(c0,uo,null),e(uo,jnr),e(uo,Yhe),e(Yhe,Dnr),e(uo,qnr),e(uo,vn),e(vn,Gnr),e(vn,Khe),e(Khe,Onr),e(vn,Xnr),e(vn,Zhe),e(Zhe,Vnr),e(vn,znr),e(vn,epe),e(epe,Wnr),e(vn,Qnr),e(uo,Hnr),e(uo,f0),e(f0,Iv),e(Iv,ope),e(ope,Unr),e(Iv,Jnr),e(Iv,GG),e(GG,Ynr),e(Iv,Knr),e(f0,Znr),e(f0,Nv),e(Nv,rpe),e(rpe,esr),e(Nv,osr),e(Nv,OG),e(OG,rsr),e(Nv,tsr),e(uo,asr),e(uo,tpe),e(tpe,nsr),e(uo,ssr),g(m0,uo,null),b(c,nRe,u),b(c,yc,u),e(yc,jv),e(jv,ape),g(g0,ape,null),e(yc,lsr),e(yc,npe),e(npe,isr),b(c,sRe,u),b(c,Mr,u),g(h0,Mr,null),e(Mr,dsr),e(Mr,wc),e(wc,csr),e(wc,spe),e(spe,fsr),e(wc,msr),e(wc,lpe),e(lpe,gsr),e(wc,hsr),e(Mr,psr),e(Mr,p0),e(p0,_sr),e(p0,ipe),e(ipe,usr),e(p0,bsr),e(Mr,vsr),e(Mr,ut),g(_0,ut,null),e(ut,Tsr),e(ut,dpe),e(dpe,Fsr),e(ut,Csr),e(ut,Ac),e(Ac,Msr),e(Ac,cpe),e(cpe,Esr),e(Ac,ysr),e(Ac,fpe),e(fpe,wsr),e(Ac,Asr),e(ut,Lsr),e(ut,mpe),e(mpe,Bsr),e(ut,xsr),g(u0,ut,null),e(Mr,ksr),e(Mr,bo),g(b0,bo,null),e(bo,Rsr),e(bo,gpe),e(gpe,Ssr),e(bo,Psr),e(bo,Tn),e(Tn,$sr),e(Tn,hpe),e(hpe,Isr),e(Tn,Nsr),e(Tn,ppe),e(ppe,jsr),e(Tn,Dsr),e(Tn,_pe),e(_pe,qsr),e(Tn,Gsr),e(bo,Osr),e(bo,Y),e(Y,Dv),e(Dv,upe),e(upe,Xsr),e(Dv,Vsr),e(Dv,XG),e(XG,zsr),e(Dv,Wsr),e(Y,Qsr),e(Y,qv),e(qv,bpe),e(bpe,Hsr),e(qv,Usr),e(qv,VG),e(VG,Jsr),e(qv,Ysr),e(Y,Ksr),e(Y,Gv),e(Gv,vpe),e(vpe,Zsr),e(Gv,elr),e(Gv,zG),e(zG,olr),e(Gv,rlr),e(Y,tlr),e(Y,Ov),e(Ov,Tpe),e(Tpe,alr),e(Ov,nlr),e(Ov,WG),e(WG,slr),e(Ov,llr),e(Y,ilr),e(Y,Xv),e(Xv,Fpe),e(Fpe,dlr),e(Xv,clr),e(Xv,QG),e(QG,flr),e(Xv,mlr),e(Y,glr),e(Y,Vv),e(Vv,Cpe),e(Cpe,hlr),e(Vv,plr),e(Vv,HG),e(HG,_lr),e(Vv,ulr),e(Y,blr),e(Y,zv),e(zv,Mpe),e(Mpe,vlr),e(zv,Tlr),e(zv,UG),e(UG,Flr),e(zv,Clr),e(Y,Mlr),e(Y,Wv),e(Wv,Epe),e(Epe,Elr),e(Wv,ylr),e(Wv,JG),e(JG,wlr),e(Wv,Alr),e(Y,Llr),e(Y,Qv),e(Qv,ype),e(ype,Blr),e(Qv,xlr),e(Qv,YG),e(YG,klr),e(Qv,Rlr),e(Y,Slr),e(Y,Hv),e(Hv,wpe),e(wpe,Plr),e(Hv,$lr),e(Hv,KG),e(KG,Ilr),e(Hv,Nlr),e(Y,jlr),e(Y,Uv),e(Uv,Ape),e(Ape,Dlr),e(Uv,qlr),e(Uv,ZG),e(ZG,Glr),e(Uv,Olr),e(Y,Xlr),e(Y,Jv),e(Jv,Lpe),e(Lpe,Vlr),e(Jv,zlr),e(Jv,eO),e(eO,Wlr),e(Jv,Qlr),e(Y,Hlr),e(Y,Yv),e(Yv,Bpe),e(Bpe,Ulr),e(Yv,Jlr),e(Yv,oO),e(oO,Ylr),e(Yv,Klr),e(Y,Zlr),e(Y,Kv),e(Kv,xpe),e(xpe,eir),e(Kv,oir),e(Kv,rO),e(rO,rir),e(Kv,tir),e(Y,air),e(Y,Zv),e(Zv,kpe),e(kpe,nir),e(Zv,sir),e(Zv,tO),e(tO,lir),e(Zv,iir),e(Y,dir),e(Y,e6),e(e6,Rpe),e(Rpe,cir),e(e6,fir),e(e6,aO),e(aO,mir),e(e6,gir),e(Y,hir),e(Y,o6),e(o6,Spe),e(Spe,pir),e(o6,_ir),e(o6,nO),e(nO,uir),e(o6,bir),e(Y,vir),e(Y,r6),e(r6,Ppe),e(Ppe,Tir),e(r6,Fir),e(r6,sO),e(sO,Cir),e(r6,Mir),e(Y,Eir),e(Y,t6),e(t6,$pe),e($pe,yir),e(t6,wir),e(t6,lO),e(lO,Air),e(t6,Lir),e(Y,Bir),e(Y,a6),e(a6,Ipe),e(Ipe,xir),e(a6,kir),e(a6,iO),e(iO,Rir),e(a6,Sir),e(bo,Pir),e(bo,Npe),e(Npe,$ir),e(bo,Iir),g(v0,bo,null),b(c,lRe,u),b(c,Lc,u),e(Lc,n6),e(n6,jpe),g(T0,jpe,null),e(Lc,Nir),e(Lc,Dpe),e(Dpe,jir),b(c,iRe,u),b(c,Er,u),g(F0,Er,null),e(Er,Dir),e(Er,Bc),e(Bc,qir),e(Bc,qpe),e(qpe,Gir),e(Bc,Oir),e(Bc,Gpe),e(Gpe,Xir),e(Bc,Vir),e(Er,zir),e(Er,C0),e(C0,Wir),e(C0,Ope),e(Ope,Qir),e(C0,Hir),e(Er,Uir),e(Er,bt),g(M0,bt,null),e(bt,Jir),e(bt,Xpe),e(Xpe,Yir),e(bt,Kir),e(bt,xc),e(xc,Zir),e(xc,Vpe),e(Vpe,edr),e(xc,odr),e(xc,zpe),e(zpe,rdr),e(xc,tdr),e(bt,adr),e(bt,Wpe),e(Wpe,ndr),e(bt,sdr),g(E0,bt,null),e(Er,ldr),e(Er,vo),g(y0,vo,null),e(vo,idr),e(vo,Qpe),e(Qpe,ddr),e(vo,cdr),e(vo,Fn),e(Fn,fdr),e(Fn,Hpe),e(Hpe,mdr),e(Fn,gdr),e(Fn,Upe),e(Upe,hdr),e(Fn,pdr),e(Fn,Jpe),e(Jpe,_dr),e(Fn,udr),e(vo,bdr),e(vo,ue),e(ue,s6),e(s6,Ype),e(Ype,vdr),e(s6,Tdr),e(s6,dO),e(dO,Fdr),e(s6,Cdr),e(ue,Mdr),e(ue,l6),e(l6,Kpe),e(Kpe,Edr),e(l6,ydr),e(l6,cO),e(cO,wdr),e(l6,Adr),e(ue,Ldr),e(ue,i6),e(i6,Zpe),e(Zpe,Bdr),e(i6,xdr),e(i6,fO),e(fO,kdr),e(i6,Rdr),e(ue,Sdr),e(ue,d6),e(d6,e_e),e(e_e,Pdr),e(d6,$dr),e(d6,mO),e(mO,Idr),e(d6,Ndr),e(ue,jdr),e(ue,c6),e(c6,o_e),e(o_e,Ddr),e(c6,qdr),e(c6,gO),e(gO,Gdr),e(c6,Odr),e(ue,Xdr),e(ue,f6),e(f6,r_e),e(r_e,Vdr),e(f6,zdr),e(f6,hO),e(hO,Wdr),e(f6,Qdr),e(ue,Hdr),e(ue,m6),e(m6,t_e),e(t_e,Udr),e(m6,Jdr),e(m6,pO),e(pO,Ydr),e(m6,Kdr),e(ue,Zdr),e(ue,g6),e(g6,a_e),e(a_e,ecr),e(g6,ocr),e(g6,_O),e(_O,rcr),e(g6,tcr),e(ue,acr),e(ue,h6),e(h6,n_e),e(n_e,ncr),e(h6,scr),e(h6,uO),e(uO,lcr),e(h6,icr),e(ue,dcr),e(ue,p6),e(p6,s_e),e(s_e,ccr),e(p6,fcr),e(p6,bO),e(bO,mcr),e(p6,gcr),e(vo,hcr),e(vo,l_e),e(l_e,pcr),e(vo,_cr),g(w0,vo,null),b(c,dRe,u),b(c,kc,u),e(kc,_6),e(_6,i_e),g(A0,i_e,null),e(kc,ucr),e(kc,d_e),e(d_e,bcr),b(c,cRe,u),b(c,yr,u),g(L0,yr,null),e(yr,vcr),e(yr,Rc),e(Rc,Tcr),e(Rc,c_e),e(c_e,Fcr),e(Rc,Ccr),e(Rc,f_e),e(f_e,Mcr),e(Rc,Ecr),e(yr,ycr),e(yr,B0),e(B0,wcr),e(B0,m_e),e(m_e,Acr),e(B0,Lcr),e(yr,Bcr),e(yr,vt),g(x0,vt,null),e(vt,xcr),e(vt,g_e),e(g_e,kcr),e(vt,Rcr),e(vt,Sc),e(Sc,Scr),e(Sc,h_e),e(h_e,Pcr),e(Sc,$cr),e(Sc,p_e),e(p_e,Icr),e(Sc,Ncr),e(vt,jcr),e(vt,__e),e(__e,Dcr),e(vt,qcr),g(k0,vt,null),e(yr,Gcr),e(yr,To),g(R0,To,null),e(To,Ocr),e(To,u_e),e(u_e,Xcr),e(To,Vcr),e(To,Cn),e(Cn,zcr),e(Cn,b_e),e(b_e,Wcr),e(Cn,Qcr),e(Cn,v_e),e(v_e,Hcr),e(Cn,Ucr),e(Cn,T_e),e(T_e,Jcr),e(Cn,Ycr),e(To,Kcr),e(To,V),e(V,u6),e(u6,F_e),e(F_e,Zcr),e(u6,efr),e(u6,vO),e(vO,ofr),e(u6,rfr),e(V,tfr),e(V,b6),e(b6,C_e),e(C_e,afr),e(b6,nfr),e(b6,TO),e(TO,sfr),e(b6,lfr),e(V,ifr),e(V,v6),e(v6,M_e),e(M_e,dfr),e(v6,cfr),e(v6,FO),e(FO,ffr),e(v6,mfr),e(V,gfr),e(V,T6),e(T6,E_e),e(E_e,hfr),e(T6,pfr),e(T6,CO),e(CO,_fr),e(T6,ufr),e(V,bfr),e(V,F6),e(F6,y_e),e(y_e,vfr),e(F6,Tfr),e(F6,MO),e(MO,Ffr),e(F6,Cfr),e(V,Mfr),e(V,C6),e(C6,w_e),e(w_e,Efr),e(C6,yfr),e(C6,EO),e(EO,wfr),e(C6,Afr),e(V,Lfr),e(V,M6),e(M6,A_e),e(A_e,Bfr),e(M6,xfr),e(M6,yO),e(yO,kfr),e(M6,Rfr),e(V,Sfr),e(V,E6),e(E6,L_e),e(L_e,Pfr),e(E6,$fr),e(E6,wO),e(wO,Ifr),e(E6,Nfr),e(V,jfr),e(V,y6),e(y6,B_e),e(B_e,Dfr),e(y6,qfr),e(y6,AO),e(AO,Gfr),e(y6,Ofr),e(V,Xfr),e(V,w6),e(w6,x_e),e(x_e,Vfr),e(w6,zfr),e(w6,LO),e(LO,Wfr),e(w6,Qfr),e(V,Hfr),e(V,A6),e(A6,k_e),e(k_e,Ufr),e(A6,Jfr),e(A6,BO),e(BO,Yfr),e(A6,Kfr),e(V,Zfr),e(V,L6),e(L6,R_e),e(R_e,emr),e(L6,omr),e(L6,xO),e(xO,rmr),e(L6,tmr),e(V,amr),e(V,B6),e(B6,S_e),e(S_e,nmr),e(B6,smr),e(B6,kO),e(kO,lmr),e(B6,imr),e(V,dmr),e(V,x6),e(x6,P_e),e(P_e,cmr),e(x6,fmr),e(x6,RO),e(RO,mmr),e(x6,gmr),e(V,hmr),e(V,k6),e(k6,$_e),e($_e,pmr),e(k6,_mr),e(k6,SO),e(SO,umr),e(k6,bmr),e(V,vmr),e(V,R6),e(R6,I_e),e(I_e,Tmr),e(R6,Fmr),e(R6,PO),e(PO,Cmr),e(R6,Mmr),e(V,Emr),e(V,S6),e(S6,N_e),e(N_e,ymr),e(S6,wmr),e(S6,$O),e($O,Amr),e(S6,Lmr),e(V,Bmr),e(V,P6),e(P6,j_e),e(j_e,xmr),e(P6,kmr),e(P6,IO),e(IO,Rmr),e(P6,Smr),e(V,Pmr),e(V,$6),e($6,D_e),e(D_e,$mr),e($6,Imr),e($6,NO),e(NO,Nmr),e($6,jmr),e(V,Dmr),e(V,I6),e(I6,q_e),e(q_e,qmr),e(I6,Gmr),e(I6,jO),e(jO,Omr),e(I6,Xmr),e(V,Vmr),e(V,N6),e(N6,G_e),e(G_e,zmr),e(N6,Wmr),e(N6,DO),e(DO,Qmr),e(N6,Hmr),e(V,Umr),e(V,j6),e(j6,O_e),e(O_e,Jmr),e(j6,Ymr),e(j6,qO),e(qO,Kmr),e(j6,Zmr),e(V,egr),e(V,D6),e(D6,X_e),e(X_e,ogr),e(D6,rgr),e(D6,GO),e(GO,tgr),e(D6,agr),e(V,ngr),e(V,q6),e(q6,V_e),e(V_e,sgr),e(q6,lgr),e(q6,OO),e(OO,igr),e(q6,dgr),e(V,cgr),e(V,G6),e(G6,z_e),e(z_e,fgr),e(G6,mgr),e(G6,XO),e(XO,ggr),e(G6,hgr),e(To,pgr),e(To,W_e),e(W_e,_gr),e(To,ugr),g(S0,To,null),b(c,fRe,u),b(c,Pc,u),e(Pc,O6),e(O6,Q_e),g(P0,Q_e,null),e(Pc,bgr),e(Pc,H_e),e(H_e,vgr),b(c,mRe,u),b(c,wr,u),g($0,wr,null),e(wr,Tgr),e(wr,$c),e($c,Fgr),e($c,U_e),e(U_e,Cgr),e($c,Mgr),e($c,J_e),e(J_e,Egr),e($c,ygr),e(wr,wgr),e(wr,I0),e(I0,Agr),e(I0,Y_e),e(Y_e,Lgr),e(I0,Bgr),e(wr,xgr),e(wr,Tt),g(N0,Tt,null),e(Tt,kgr),e(Tt,K_e),e(K_e,Rgr),e(Tt,Sgr),e(Tt,Ic),e(Ic,Pgr),e(Ic,Z_e),e(Z_e,$gr),e(Ic,Igr),e(Ic,eue),e(eue,Ngr),e(Ic,jgr),e(Tt,Dgr),e(Tt,oue),e(oue,qgr),e(Tt,Ggr),g(j0,Tt,null),e(wr,Ogr),e(wr,Fo),g(D0,Fo,null),e(Fo,Xgr),e(Fo,rue),e(rue,Vgr),e(Fo,zgr),e(Fo,Mn),e(Mn,Wgr),e(Mn,tue),e(tue,Qgr),e(Mn,Hgr),e(Mn,aue),e(aue,Ugr),e(Mn,Jgr),e(Mn,nue),e(nue,Ygr),e(Mn,Kgr),e(Fo,Zgr),e(Fo,ae),e(ae,X6),e(X6,sue),e(sue,ehr),e(X6,ohr),e(X6,VO),e(VO,rhr),e(X6,thr),e(ae,ahr),e(ae,V6),e(V6,lue),e(lue,nhr),e(V6,shr),e(V6,zO),e(zO,lhr),e(V6,ihr),e(ae,dhr),e(ae,z6),e(z6,iue),e(iue,chr),e(z6,fhr),e(z6,WO),e(WO,mhr),e(z6,ghr),e(ae,hhr),e(ae,W6),e(W6,due),e(due,phr),e(W6,_hr),e(W6,QO),e(QO,uhr),e(W6,bhr),e(ae,vhr),e(ae,Q6),e(Q6,cue),e(cue,Thr),e(Q6,Fhr),e(Q6,HO),e(HO,Chr),e(Q6,Mhr),e(ae,Ehr),e(ae,H6),e(H6,fue),e(fue,yhr),e(H6,whr),e(H6,UO),e(UO,Ahr),e(H6,Lhr),e(ae,Bhr),e(ae,U6),e(U6,mue),e(mue,xhr),e(U6,khr),e(U6,JO),e(JO,Rhr),e(U6,Shr),e(ae,Phr),e(ae,J6),e(J6,gue),e(gue,$hr),e(J6,Ihr),e(J6,YO),e(YO,Nhr),e(J6,jhr),e(ae,Dhr),e(ae,Y6),e(Y6,hue),e(hue,qhr),e(Y6,Ghr),e(Y6,KO),e(KO,Ohr),e(Y6,Xhr),e(ae,Vhr),e(ae,K6),e(K6,pue),e(pue,zhr),e(K6,Whr),e(K6,ZO),e(ZO,Qhr),e(K6,Hhr),e(ae,Uhr),e(ae,Z6),e(Z6,_ue),e(_ue,Jhr),e(Z6,Yhr),e(Z6,eX),e(eX,Khr),e(Z6,Zhr),e(ae,epr),e(ae,eT),e(eT,uue),e(uue,opr),e(eT,rpr),e(eT,oX),e(oX,tpr),e(eT,apr),e(ae,npr),e(ae,oT),e(oT,bue),e(bue,spr),e(oT,lpr),e(oT,rX),e(rX,ipr),e(oT,dpr),e(ae,cpr),e(ae,rT),e(rT,vue),e(vue,fpr),e(rT,mpr),e(rT,tX),e(tX,gpr),e(rT,hpr),e(ae,ppr),e(ae,tT),e(tT,Tue),e(Tue,_pr),e(tT,upr),e(tT,aX),e(aX,bpr),e(tT,vpr),e(ae,Tpr),e(ae,aT),e(aT,Fue),e(Fue,Fpr),e(aT,Cpr),e(aT,nX),e(nX,Mpr),e(aT,Epr),e(ae,ypr),e(ae,nT),e(nT,Cue),e(Cue,wpr),e(nT,Apr),e(nT,sX),e(sX,Lpr),e(nT,Bpr),e(Fo,xpr),e(Fo,Mue),e(Mue,kpr),e(Fo,Rpr),g(q0,Fo,null),b(c,gRe,u),b(c,Nc,u),e(Nc,sT),e(sT,Eue),g(G0,Eue,null),e(Nc,Spr),e(Nc,yue),e(yue,Ppr),b(c,hRe,u),b(c,Ar,u),g(O0,Ar,null),e(Ar,$pr),e(Ar,jc),e(jc,Ipr),e(jc,wue),e(wue,Npr),e(jc,jpr),e(jc,Aue),e(Aue,Dpr),e(jc,qpr),e(Ar,Gpr),e(Ar,X0),e(X0,Opr),e(X0,Lue),e(Lue,Xpr),e(X0,Vpr),e(Ar,zpr),e(Ar,Ft),g(V0,Ft,null),e(Ft,Wpr),e(Ft,Bue),e(Bue,Qpr),e(Ft,Hpr),e(Ft,Dc),e(Dc,Upr),e(Dc,xue),e(xue,Jpr),e(Dc,Ypr),e(Dc,kue),e(kue,Kpr),e(Dc,Zpr),e(Ft,e_r),e(Ft,Rue),e(Rue,o_r),e(Ft,r_r),g(z0,Ft,null),e(Ar,t_r),e(Ar,Co),g(W0,Co,null),e(Co,a_r),e(Co,Sue),e(Sue,n_r),e(Co,s_r),e(Co,En),e(En,l_r),e(En,Pue),e(Pue,i_r),e(En,d_r),e(En,$ue),e($ue,c_r),e(En,f_r),e(En,Iue),e(Iue,m_r),e(En,g_r),e(Co,h_r),e(Co,Nue),e(Nue,lT),e(lT,jue),e(jue,p_r),e(lT,__r),e(lT,lX),e(lX,u_r),e(lT,b_r),e(Co,v_r),e(Co,Due),e(Due,T_r),e(Co,F_r),g(Q0,Co,null),b(c,pRe,u),b(c,qc,u),e(qc,iT),e(iT,que),g(H0,que,null),e(qc,C_r),e(qc,Gue),e(Gue,M_r),b(c,_Re,u),b(c,Lr,u),g(U0,Lr,null),e(Lr,E_r),e(Lr,Gc),e(Gc,y_r),e(Gc,Oue),e(Oue,w_r),e(Gc,A_r),e(Gc,Xue),e(Xue,L_r),e(Gc,B_r),e(Lr,x_r),e(Lr,J0),e(J0,k_r),e(J0,Vue),e(Vue,R_r),e(J0,S_r),e(Lr,P_r),e(Lr,Ct),g(Y0,Ct,null),e(Ct,$_r),e(Ct,zue),e(zue,I_r),e(Ct,N_r),e(Ct,Oc),e(Oc,j_r),e(Oc,Wue),e(Wue,D_r),e(Oc,q_r),e(Oc,Que),e(Que,G_r),e(Oc,O_r),e(Ct,X_r),e(Ct,Hue),e(Hue,V_r),e(Ct,z_r),g(K0,Ct,null),e(Lr,W_r),e(Lr,Mo),g(Z0,Mo,null),e(Mo,Q_r),e(Mo,Uue),e(Uue,H_r),e(Mo,U_r),e(Mo,yn),e(yn,J_r),e(yn,Jue),e(Jue,Y_r),e(yn,K_r),e(yn,Yue),e(Yue,Z_r),e(yn,eur),e(yn,Kue),e(Kue,our),e(yn,rur),e(Mo,tur),e(Mo,K),e(K,dT),e(dT,Zue),e(Zue,aur),e(dT,nur),e(dT,iX),e(iX,sur),e(dT,lur),e(K,iur),e(K,cT),e(cT,e1e),e(e1e,dur),e(cT,cur),e(cT,dX),e(dX,fur),e(cT,mur),e(K,gur),e(K,fT),e(fT,o1e),e(o1e,hur),e(fT,pur),e(fT,cX),e(cX,_ur),e(fT,uur),e(K,bur),e(K,mT),e(mT,r1e),e(r1e,vur),e(mT,Tur),e(mT,fX),e(fX,Fur),e(mT,Cur),e(K,Mur),e(K,gT),e(gT,t1e),e(t1e,Eur),e(gT,yur),e(gT,mX),e(mX,wur),e(gT,Aur),e(K,Lur),e(K,hT),e(hT,a1e),e(a1e,Bur),e(hT,xur),e(hT,gX),e(gX,kur),e(hT,Rur),e(K,Sur),e(K,pT),e(pT,n1e),e(n1e,Pur),e(pT,$ur),e(pT,hX),e(hX,Iur),e(pT,Nur),e(K,jur),e(K,_T),e(_T,s1e),e(s1e,Dur),e(_T,qur),e(_T,pX),e(pX,Gur),e(_T,Our),e(K,Xur),e(K,uT),e(uT,l1e),e(l1e,Vur),e(uT,zur),e(uT,_X),e(_X,Wur),e(uT,Qur),e(K,Hur),e(K,bT),e(bT,i1e),e(i1e,Uur),e(bT,Jur),e(bT,uX),e(uX,Yur),e(bT,Kur),e(K,Zur),e(K,vT),e(vT,d1e),e(d1e,e1r),e(vT,o1r),e(vT,bX),e(bX,r1r),e(vT,t1r),e(K,a1r),e(K,TT),e(TT,c1e),e(c1e,n1r),e(TT,s1r),e(TT,vX),e(vX,l1r),e(TT,i1r),e(K,d1r),e(K,FT),e(FT,f1e),e(f1e,c1r),e(FT,f1r),e(FT,TX),e(TX,m1r),e(FT,g1r),e(K,h1r),e(K,CT),e(CT,m1e),e(m1e,p1r),e(CT,_1r),e(CT,FX),e(FX,u1r),e(CT,b1r),e(K,v1r),e(K,MT),e(MT,g1e),e(g1e,T1r),e(MT,F1r),e(MT,CX),e(CX,C1r),e(MT,M1r),e(K,E1r),e(K,ET),e(ET,h1e),e(h1e,y1r),e(ET,w1r),e(ET,MX),e(MX,A1r),e(ET,L1r),e(K,B1r),e(K,yT),e(yT,p1e),e(p1e,x1r),e(yT,k1r),e(yT,EX),e(EX,R1r),e(yT,S1r),e(K,P1r),e(K,wT),e(wT,_1e),e(_1e,$1r),e(wT,I1r),e(wT,yX),e(yX,N1r),e(wT,j1r),e(K,D1r),e(K,AT),e(AT,u1e),e(u1e,q1r),e(AT,G1r),e(AT,wX),e(wX,O1r),e(AT,X1r),e(K,V1r),e(K,LT),e(LT,b1e),e(b1e,z1r),e(LT,W1r),e(LT,AX),e(AX,Q1r),e(LT,H1r),e(Mo,U1r),e(Mo,v1e),e(v1e,J1r),e(Mo,Y1r),g(eL,Mo,null),b(c,uRe,u),b(c,Xc,u),e(Xc,BT),e(BT,T1e),g(oL,T1e,null),e(Xc,K1r),e(Xc,F1e),e(F1e,Z1r),b(c,bRe,u),b(c,Br,u),g(rL,Br,null),e(Br,e4r),e(Br,Vc),e(Vc,o4r),e(Vc,C1e),e(C1e,r4r),e(Vc,t4r),e(Vc,M1e),e(M1e,a4r),e(Vc,n4r),e(Br,s4r),e(Br,tL),e(tL,l4r),e(tL,E1e),e(E1e,i4r),e(tL,d4r),e(Br,c4r),e(Br,Mt),g(aL,Mt,null),e(Mt,f4r),e(Mt,y1e),e(y1e,m4r),e(Mt,g4r),e(Mt,zc),e(zc,h4r),e(zc,w1e),e(w1e,p4r),e(zc,_4r),e(zc,A1e),e(A1e,u4r),e(zc,b4r),e(Mt,v4r),e(Mt,L1e),e(L1e,T4r),e(Mt,F4r),g(nL,Mt,null),e(Br,C4r),e(Br,Eo),g(sL,Eo,null),e(Eo,M4r),e(Eo,B1e),e(B1e,E4r),e(Eo,y4r),e(Eo,wn),e(wn,w4r),e(wn,x1e),e(x1e,A4r),e(wn,L4r),e(wn,k1e),e(k1e,B4r),e(wn,x4r),e(wn,R1e),e(R1e,k4r),e(wn,R4r),e(Eo,S4r),e(Eo,Z),e(Z,xT),e(xT,S1e),e(S1e,P4r),e(xT,$4r),e(xT,LX),e(LX,I4r),e(xT,N4r),e(Z,j4r),e(Z,kT),e(kT,P1e),e(P1e,D4r),e(kT,q4r),e(kT,BX),e(BX,G4r),e(kT,O4r),e(Z,X4r),e(Z,RT),e(RT,$1e),e($1e,V4r),e(RT,z4r),e(RT,xX),e(xX,W4r),e(RT,Q4r),e(Z,H4r),e(Z,ST),e(ST,I1e),e(I1e,U4r),e(ST,J4r),e(ST,kX),e(kX,Y4r),e(ST,K4r),e(Z,Z4r),e(Z,PT),e(PT,N1e),e(N1e,ebr),e(PT,obr),e(PT,RX),e(RX,rbr),e(PT,tbr),e(Z,abr),e(Z,$T),e($T,j1e),e(j1e,nbr),e($T,sbr),e($T,SX),e(SX,lbr),e($T,ibr),e(Z,dbr),e(Z,IT),e(IT,D1e),e(D1e,cbr),e(IT,fbr),e(IT,PX),e(PX,mbr),e(IT,gbr),e(Z,hbr),e(Z,NT),e(NT,q1e),e(q1e,pbr),e(NT,_br),e(NT,$X),e($X,ubr),e(NT,bbr),e(Z,vbr),e(Z,jT),e(jT,G1e),e(G1e,Tbr),e(jT,Fbr),e(jT,IX),e(IX,Cbr),e(jT,Mbr),e(Z,Ebr),e(Z,DT),e(DT,O1e),e(O1e,ybr),e(DT,wbr),e(DT,NX),e(NX,Abr),e(DT,Lbr),e(Z,Bbr),e(Z,qT),e(qT,X1e),e(X1e,xbr),e(qT,kbr),e(qT,jX),e(jX,Rbr),e(qT,Sbr),e(Z,Pbr),e(Z,GT),e(GT,V1e),e(V1e,$br),e(GT,Ibr),e(GT,DX),e(DX,Nbr),e(GT,jbr),e(Z,Dbr),e(Z,OT),e(OT,z1e),e(z1e,qbr),e(OT,Gbr),e(OT,qX),e(qX,Obr),e(OT,Xbr),e(Z,Vbr),e(Z,XT),e(XT,W1e),e(W1e,zbr),e(XT,Wbr),e(XT,GX),e(GX,Qbr),e(XT,Hbr),e(Z,Ubr),e(Z,VT),e(VT,Q1e),e(Q1e,Jbr),e(VT,Ybr),e(VT,OX),e(OX,Kbr),e(VT,Zbr),e(Z,e3r),e(Z,zT),e(zT,H1e),e(H1e,o3r),e(zT,r3r),e(zT,XX),e(XX,t3r),e(zT,a3r),e(Z,n3r),e(Z,WT),e(WT,U1e),e(U1e,s3r),e(WT,l3r),e(WT,VX),e(VX,i3r),e(WT,d3r),e(Z,c3r),e(Z,QT),e(QT,J1e),e(J1e,f3r),e(QT,m3r),e(QT,zX),e(zX,g3r),e(QT,h3r),e(Z,p3r),e(Z,HT),e(HT,Y1e),e(Y1e,_3r),e(HT,u3r),e(HT,WX),e(WX,b3r),e(HT,v3r),e(Eo,T3r),e(Eo,K1e),e(K1e,F3r),e(Eo,C3r),g(lL,Eo,null),b(c,vRe,u),b(c,Wc,u),e(Wc,UT),e(UT,Z1e),g(iL,Z1e,null),e(Wc,M3r),e(Wc,e4e),e(e4e,E3r),b(c,TRe,u),b(c,xr,u),g(dL,xr,null),e(xr,y3r),e(xr,Qc),e(Qc,w3r),e(Qc,o4e),e(o4e,A3r),e(Qc,L3r),e(Qc,r4e),e(r4e,B3r),e(Qc,x3r),e(xr,k3r),e(xr,cL),e(cL,R3r),e(cL,t4e),e(t4e,S3r),e(cL,P3r),e(xr,$3r),e(xr,Et),g(fL,Et,null),e(Et,I3r),e(Et,a4e),e(a4e,N3r),e(Et,j3r),e(Et,Hc),e(Hc,D3r),e(Hc,n4e),e(n4e,q3r),e(Hc,G3r),e(Hc,s4e),e(s4e,O3r),e(Hc,X3r),e(Et,V3r),e(Et,l4e),e(l4e,z3r),e(Et,W3r),g(mL,Et,null),e(xr,Q3r),e(xr,yo),g(gL,yo,null),e(yo,H3r),e(yo,i4e),e(i4e,U3r),e(yo,J3r),e(yo,An),e(An,Y3r),e(An,d4e),e(d4e,K3r),e(An,Z3r),e(An,c4e),e(c4e,e5r),e(An,o5r),e(An,f4e),e(f4e,r5r),e(An,t5r),e(yo,a5r),e(yo,m4e),e(m4e,JT),e(JT,g4e),e(g4e,n5r),e(JT,s5r),e(JT,QX),e(QX,l5r),e(JT,i5r),e(yo,d5r),e(yo,h4e),e(h4e,c5r),e(yo,f5r),g(hL,yo,null),b(c,FRe,u),b(c,Uc,u),e(Uc,YT),e(YT,p4e),g(pL,p4e,null),e(Uc,m5r),e(Uc,_4e),e(_4e,g5r),b(c,CRe,u),b(c,kr,u),g(_L,kr,null),e(kr,h5r),e(kr,Jc),e(Jc,p5r),e(Jc,u4e),e(u4e,_5r),e(Jc,u5r),e(Jc,b4e),e(b4e,b5r),e(Jc,v5r),e(kr,T5r),e(kr,uL),e(uL,F5r),e(uL,v4e),e(v4e,C5r),e(uL,M5r),e(kr,E5r),e(kr,yt),g(bL,yt,null),e(yt,y5r),e(yt,T4e),e(T4e,w5r),e(yt,A5r),e(yt,Yc),e(Yc,L5r),e(Yc,F4e),e(F4e,B5r),e(Yc,x5r),e(Yc,C4e),e(C4e,k5r),e(Yc,R5r),e(yt,S5r),e(yt,M4e),e(M4e,P5r),e(yt,$5r),g(vL,yt,null),e(kr,I5r),e(kr,wo),g(TL,wo,null),e(wo,N5r),e(wo,E4e),e(E4e,j5r),e(wo,D5r),e(wo,Ln),e(Ln,q5r),e(Ln,y4e),e(y4e,G5r),e(Ln,O5r),e(Ln,w4e),e(w4e,X5r),e(Ln,V5r),e(Ln,A4e),e(A4e,z5r),e(Ln,W5r),e(wo,Q5r),e(wo,L4e),e(L4e,KT),e(KT,B4e),e(B4e,H5r),e(KT,U5r),e(KT,HX),e(HX,J5r),e(KT,Y5r),e(wo,K5r),e(wo,x4e),e(x4e,Z5r),e(wo,e2r),g(FL,wo,null),b(c,MRe,u),b(c,Kc,u),e(Kc,ZT),e(ZT,k4e),g(CL,k4e,null),e(Kc,o2r),e(Kc,R4e),e(R4e,r2r),b(c,ERe,u),b(c,Rr,u),g(ML,Rr,null),e(Rr,t2r),e(Rr,Zc),e(Zc,a2r),e(Zc,S4e),e(S4e,n2r),e(Zc,s2r),e(Zc,P4e),e(P4e,l2r),e(Zc,i2r),e(Rr,d2r),e(Rr,EL),e(EL,c2r),e(EL,$4e),e($4e,f2r),e(EL,m2r),e(Rr,g2r),e(Rr,wt),g(yL,wt,null),e(wt,h2r),e(wt,I4e),e(I4e,p2r),e(wt,_2r),e(wt,ef),e(ef,u2r),e(ef,N4e),e(N4e,b2r),e(ef,v2r),e(ef,j4e),e(j4e,T2r),e(ef,F2r),e(wt,C2r),e(wt,D4e),e(D4e,M2r),e(wt,E2r),g(wL,wt,null),e(Rr,y2r),e(Rr,Ao),g(AL,Ao,null),e(Ao,w2r),e(Ao,q4e),e(q4e,A2r),e(Ao,L2r),e(Ao,Bn),e(Bn,B2r),e(Bn,G4e),e(G4e,x2r),e(Bn,k2r),e(Bn,O4e),e(O4e,R2r),e(Bn,S2r),e(Bn,X4e),e(X4e,P2r),e(Bn,$2r),e(Ao,I2r),e(Ao,z),e(z,eF),e(eF,V4e),e(V4e,N2r),e(eF,j2r),e(eF,UX),e(UX,D2r),e(eF,q2r),e(z,G2r),e(z,oF),e(oF,z4e),e(z4e,O2r),e(oF,X2r),e(oF,JX),e(JX,V2r),e(oF,z2r),e(z,W2r),e(z,rF),e(rF,W4e),e(W4e,Q2r),e(rF,H2r),e(rF,YX),e(YX,U2r),e(rF,J2r),e(z,Y2r),e(z,tF),e(tF,Q4e),e(Q4e,K2r),e(tF,Z2r),e(tF,KX),e(KX,evr),e(tF,ovr),e(z,rvr),e(z,aF),e(aF,H4e),e(H4e,tvr),e(aF,avr),e(aF,ZX),e(ZX,nvr),e(aF,svr),e(z,lvr),e(z,nF),e(nF,U4e),e(U4e,ivr),e(nF,dvr),e(nF,eV),e(eV,cvr),e(nF,fvr),e(z,mvr),e(z,sF),e(sF,J4e),e(J4e,gvr),e(sF,hvr),e(sF,oV),e(oV,pvr),e(sF,_vr),e(z,uvr),e(z,lF),e(lF,Y4e),e(Y4e,bvr),e(lF,vvr),e(lF,rV),e(rV,Tvr),e(lF,Fvr),e(z,Cvr),e(z,iF),e(iF,K4e),e(K4e,Mvr),e(iF,Evr),e(iF,tV),e(tV,yvr),e(iF,wvr),e(z,Avr),e(z,dF),e(dF,Z4e),e(Z4e,Lvr),e(dF,Bvr),e(dF,aV),e(aV,xvr),e(dF,kvr),e(z,Rvr),e(z,cF),e(cF,ebe),e(ebe,Svr),e(cF,Pvr),e(cF,nV),e(nV,$vr),e(cF,Ivr),e(z,Nvr),e(z,fF),e(fF,obe),e(obe,jvr),e(fF,Dvr),e(fF,sV),e(sV,qvr),e(fF,Gvr),e(z,Ovr),e(z,mF),e(mF,rbe),e(rbe,Xvr),e(mF,Vvr),e(mF,lV),e(lV,zvr),e(mF,Wvr),e(z,Qvr),e(z,gF),e(gF,tbe),e(tbe,Hvr),e(gF,Uvr),e(gF,iV),e(iV,Jvr),e(gF,Yvr),e(z,Kvr),e(z,hF),e(hF,abe),e(abe,Zvr),e(hF,e6r),e(hF,dV),e(dV,o6r),e(hF,r6r),e(z,t6r),e(z,pF),e(pF,nbe),e(nbe,a6r),e(pF,n6r),e(pF,cV),e(cV,s6r),e(pF,l6r),e(z,i6r),e(z,_F),e(_F,sbe),e(sbe,d6r),e(_F,c6r),e(_F,fV),e(fV,f6r),e(_F,m6r),e(z,g6r),e(z,uF),e(uF,lbe),e(lbe,h6r),e(uF,p6r),e(uF,mV),e(mV,_6r),e(uF,u6r),e(z,b6r),e(z,bF),e(bF,ibe),e(ibe,v6r),e(bF,T6r),e(bF,gV),e(gV,F6r),e(bF,C6r),e(z,M6r),e(z,vF),e(vF,dbe),e(dbe,E6r),e(vF,y6r),e(vF,hV),e(hV,w6r),e(vF,A6r),e(z,L6r),e(z,TF),e(TF,cbe),e(cbe,B6r),e(TF,x6r),e(TF,pV),e(pV,k6r),e(TF,R6r),e(z,S6r),e(z,FF),e(FF,fbe),e(fbe,P6r),e(FF,$6r),e(FF,_V),e(_V,I6r),e(FF,N6r),e(z,j6r),e(z,CF),e(CF,mbe),e(mbe,D6r),e(CF,q6r),e(CF,uV),e(uV,G6r),e(CF,O6r),e(z,X6r),e(z,MF),e(MF,gbe),e(gbe,V6r),e(MF,z6r),e(MF,bV),e(bV,W6r),e(MF,Q6r),e(z,H6r),e(z,EF),e(EF,hbe),e(hbe,U6r),e(EF,J6r),e(EF,vV),e(vV,Y6r),e(EF,K6r),e(Ao,Z6r),e(Ao,pbe),e(pbe,eTr),e(Ao,oTr),g(LL,Ao,null),b(c,yRe,u),b(c,of,u),e(of,yF),e(yF,_be),g(BL,_be,null),e(of,rTr),e(of,ube),e(ube,tTr),b(c,wRe,u),b(c,Sr,u),g(xL,Sr,null),e(Sr,aTr),e(Sr,rf),e(rf,nTr),e(rf,bbe),e(bbe,sTr),e(rf,lTr),e(rf,vbe),e(vbe,iTr),e(rf,dTr),e(Sr,cTr),e(Sr,kL),e(kL,fTr),e(kL,Tbe),e(Tbe,mTr),e(kL,gTr),e(Sr,hTr),e(Sr,At),g(RL,At,null),e(At,pTr),e(At,Fbe),e(Fbe,_Tr),e(At,uTr),e(At,tf),e(tf,bTr),e(tf,Cbe),e(Cbe,vTr),e(tf,TTr),e(tf,Mbe),e(Mbe,FTr),e(tf,CTr),e(At,MTr),e(At,Ebe),e(Ebe,ETr),e(At,yTr),g(SL,At,null),e(Sr,wTr),e(Sr,Lo),g(PL,Lo,null),e(Lo,ATr),e(Lo,ybe),e(ybe,LTr),e(Lo,BTr),e(Lo,xn),e(xn,xTr),e(xn,wbe),e(wbe,kTr),e(xn,RTr),e(xn,Abe),e(Abe,STr),e(xn,PTr),e(xn,Lbe),e(Lbe,$Tr),e(xn,ITr),e(Lo,NTr),e(Lo,ca),e(ca,wF),e(wF,Bbe),e(Bbe,jTr),e(wF,DTr),e(wF,TV),e(TV,qTr),e(wF,GTr),e(ca,OTr),e(ca,AF),e(AF,xbe),e(xbe,XTr),e(AF,VTr),e(AF,FV),e(FV,zTr),e(AF,WTr),e(ca,QTr),e(ca,LF),e(LF,kbe),e(kbe,HTr),e(LF,UTr),e(LF,CV),e(CV,JTr),e(LF,YTr),e(ca,KTr),e(ca,BF),e(BF,Rbe),e(Rbe,ZTr),e(BF,eFr),e(BF,MV),e(MV,oFr),e(BF,rFr),e(ca,tFr),e(ca,xF),e(xF,Sbe),e(Sbe,aFr),e(xF,nFr),e(xF,EV),e(EV,sFr),e(xF,lFr),e(Lo,iFr),e(Lo,Pbe),e(Pbe,dFr),e(Lo,cFr),g($L,Lo,null),b(c,ARe,u),b(c,af,u),e(af,kF),e(kF,$be),g(IL,$be,null),e(af,fFr),e(af,Ibe),e(Ibe,mFr),b(c,LRe,u),b(c,Pr,u),g(NL,Pr,null),e(Pr,gFr),e(Pr,nf),e(nf,hFr),e(nf,Nbe),e(Nbe,pFr),e(nf,_Fr),e(nf,jbe),e(jbe,uFr),e(nf,bFr),e(Pr,vFr),e(Pr,jL),e(jL,TFr),e(jL,Dbe),e(Dbe,FFr),e(jL,CFr),e(Pr,MFr),e(Pr,Lt),g(DL,Lt,null),e(Lt,EFr),e(Lt,qbe),e(qbe,yFr),e(Lt,wFr),e(Lt,sf),e(sf,AFr),e(sf,Gbe),e(Gbe,LFr),e(sf,BFr),e(sf,Obe),e(Obe,xFr),e(sf,kFr),e(Lt,RFr),e(Lt,Xbe),e(Xbe,SFr),e(Lt,PFr),g(qL,Lt,null),e(Pr,$Fr),e(Pr,Bo),g(GL,Bo,null),e(Bo,IFr),e(Bo,Vbe),e(Vbe,NFr),e(Bo,jFr),e(Bo,kn),e(kn,DFr),e(kn,zbe),e(zbe,qFr),e(kn,GFr),e(kn,Wbe),e(Wbe,OFr),e(kn,XFr),e(kn,Qbe),e(Qbe,VFr),e(kn,zFr),e(Bo,WFr),e(Bo,ce),e(ce,RF),e(RF,Hbe),e(Hbe,QFr),e(RF,HFr),e(RF,yV),e(yV,UFr),e(RF,JFr),e(ce,YFr),e(ce,SF),e(SF,Ube),e(Ube,KFr),e(SF,ZFr),e(SF,wV),e(wV,eCr),e(SF,oCr),e(ce,rCr),e(ce,PF),e(PF,Jbe),e(Jbe,tCr),e(PF,aCr),e(PF,AV),e(AV,nCr),e(PF,sCr),e(ce,lCr),e(ce,$F),e($F,Ybe),e(Ybe,iCr),e($F,dCr),e($F,LV),e(LV,cCr),e($F,fCr),e(ce,mCr),e(ce,IF),e(IF,Kbe),e(Kbe,gCr),e(IF,hCr),e(IF,BV),e(BV,pCr),e(IF,_Cr),e(ce,uCr),e(ce,NF),e(NF,Zbe),e(Zbe,bCr),e(NF,vCr),e(NF,xV),e(xV,TCr),e(NF,FCr),e(ce,CCr),e(ce,jF),e(jF,e3e),e(e3e,MCr),e(jF,ECr),e(jF,kV),e(kV,yCr),e(jF,wCr),e(ce,ACr),e(ce,DF),e(DF,o3e),e(o3e,LCr),e(DF,BCr),e(DF,RV),e(RV,xCr),e(DF,kCr),e(ce,RCr),e(ce,qF),e(qF,r3e),e(r3e,SCr),e(qF,PCr),e(qF,SV),e(SV,$Cr),e(qF,ICr),e(ce,NCr),e(ce,GF),e(GF,t3e),e(t3e,jCr),e(GF,DCr),e(GF,PV),e(PV,qCr),e(GF,GCr),e(ce,OCr),e(ce,OF),e(OF,a3e),e(a3e,XCr),e(OF,VCr),e(OF,$V),e($V,zCr),e(OF,WCr),e(ce,QCr),e(ce,XF),e(XF,n3e),e(n3e,HCr),e(XF,UCr),e(XF,IV),e(IV,JCr),e(XF,YCr),e(Bo,KCr),e(Bo,s3e),e(s3e,ZCr),e(Bo,eMr),g(OL,Bo,null),b(c,BRe,u),b(c,lf,u),e(lf,VF),e(VF,l3e),g(XL,l3e,null),e(lf,oMr),e(lf,i3e),e(i3e,rMr),b(c,xRe,u),b(c,$r,u),g(VL,$r,null),e($r,tMr),e($r,df),e(df,aMr),e(df,d3e),e(d3e,nMr),e(df,sMr),e(df,c3e),e(c3e,lMr),e(df,iMr),e($r,dMr),e($r,zL),e(zL,cMr),e(zL,f3e),e(f3e,fMr),e(zL,mMr),e($r,gMr),e($r,Bt),g(WL,Bt,null),e(Bt,hMr),e(Bt,m3e),e(m3e,pMr),e(Bt,_Mr),e(Bt,cf),e(cf,uMr),e(cf,g3e),e(g3e,bMr),e(cf,vMr),e(cf,h3e),e(h3e,TMr),e(cf,FMr),e(Bt,CMr),e(Bt,p3e),e(p3e,MMr),e(Bt,EMr),g(QL,Bt,null),e($r,yMr),e($r,xo),g(HL,xo,null),e(xo,wMr),e(xo,_3e),e(_3e,AMr),e(xo,LMr),e(xo,Rn),e(Rn,BMr),e(Rn,u3e),e(u3e,xMr),e(Rn,kMr),e(Rn,b3e),e(b3e,RMr),e(Rn,SMr),e(Rn,v3e),e(v3e,PMr),e(Rn,$Mr),e(xo,IMr),e(xo,be),e(be,zF),e(zF,T3e),e(T3e,NMr),e(zF,jMr),e(zF,NV),e(NV,DMr),e(zF,qMr),e(be,GMr),e(be,WF),e(WF,F3e),e(F3e,OMr),e(WF,XMr),e(WF,jV),e(jV,VMr),e(WF,zMr),e(be,WMr),e(be,QF),e(QF,C3e),e(C3e,QMr),e(QF,HMr),e(QF,DV),e(DV,UMr),e(QF,JMr),e(be,YMr),e(be,HF),e(HF,M3e),e(M3e,KMr),e(HF,ZMr),e(HF,qV),e(qV,eEr),e(HF,oEr),e(be,rEr),e(be,UF),e(UF,E3e),e(E3e,tEr),e(UF,aEr),e(UF,GV),e(GV,nEr),e(UF,sEr),e(be,lEr),e(be,JF),e(JF,y3e),e(y3e,iEr),e(JF,dEr),e(JF,OV),e(OV,cEr),e(JF,fEr),e(be,mEr),e(be,YF),e(YF,w3e),e(w3e,gEr),e(YF,hEr),e(YF,XV),e(XV,pEr),e(YF,_Er),e(be,uEr),e(be,KF),e(KF,A3e),e(A3e,bEr),e(KF,vEr),e(KF,VV),e(VV,TEr),e(KF,FEr),e(be,CEr),e(be,ZF),e(ZF,L3e),e(L3e,MEr),e(ZF,EEr),e(ZF,zV),e(zV,yEr),e(ZF,wEr),e(be,AEr),e(be,eC),e(eC,B3e),e(B3e,LEr),e(eC,BEr),e(eC,WV),e(WV,xEr),e(eC,kEr),e(xo,REr),e(xo,x3e),e(x3e,SEr),e(xo,PEr),g(UL,xo,null),b(c,kRe,u),b(c,ff,u),e(ff,oC),e(oC,k3e),g(JL,k3e,null),e(ff,$Er),e(ff,R3e),e(R3e,IEr),b(c,RRe,u),b(c,Ir,u),g(YL,Ir,null),e(Ir,NEr),e(Ir,mf),e(mf,jEr),e(mf,S3e),e(S3e,DEr),e(mf,qEr),e(mf,P3e),e(P3e,GEr),e(mf,OEr),e(Ir,XEr),e(Ir,KL),e(KL,VEr),e(KL,$3e),e($3e,zEr),e(KL,WEr),e(Ir,QEr),e(Ir,xt),g(ZL,xt,null),e(xt,HEr),e(xt,I3e),e(I3e,UEr),e(xt,JEr),e(xt,gf),e(gf,YEr),e(gf,N3e),e(N3e,KEr),e(gf,ZEr),e(gf,j3e),e(j3e,eyr),e(gf,oyr),e(xt,ryr),e(xt,D3e),e(D3e,tyr),e(xt,ayr),g(e7,xt,null),e(Ir,nyr),e(Ir,ko),g(o7,ko,null),e(ko,syr),e(ko,q3e),e(q3e,lyr),e(ko,iyr),e(ko,Sn),e(Sn,dyr),e(Sn,G3e),e(G3e,cyr),e(Sn,fyr),e(Sn,O3e),e(O3e,myr),e(Sn,gyr),e(Sn,X3e),e(X3e,hyr),e(Sn,pyr),e(ko,_yr),e(ko,Ee),e(Ee,rC),e(rC,V3e),e(V3e,uyr),e(rC,byr),e(rC,QV),e(QV,vyr),e(rC,Tyr),e(Ee,Fyr),e(Ee,tC),e(tC,z3e),e(z3e,Cyr),e(tC,Myr),e(tC,HV),e(HV,Eyr),e(tC,yyr),e(Ee,wyr),e(Ee,aC),e(aC,W3e),e(W3e,Ayr),e(aC,Lyr),e(aC,UV),e(UV,Byr),e(aC,xyr),e(Ee,kyr),e(Ee,nC),e(nC,Q3e),e(Q3e,Ryr),e(nC,Syr),e(nC,JV),e(JV,Pyr),e(nC,$yr),e(Ee,Iyr),e(Ee,sC),e(sC,H3e),e(H3e,Nyr),e(sC,jyr),e(sC,YV),e(YV,Dyr),e(sC,qyr),e(Ee,Gyr),e(Ee,lC),e(lC,U3e),e(U3e,Oyr),e(lC,Xyr),e(lC,KV),e(KV,Vyr),e(lC,zyr),e(Ee,Wyr),e(Ee,iC),e(iC,J3e),e(J3e,Qyr),e(iC,Hyr),e(iC,ZV),e(ZV,Uyr),e(iC,Jyr),e(Ee,Yyr),e(Ee,dC),e(dC,Y3e),e(Y3e,Kyr),e(dC,Zyr),e(dC,ez),e(ez,ewr),e(dC,owr),e(Ee,rwr),e(Ee,cC),e(cC,K3e),e(K3e,twr),e(cC,awr),e(cC,oz),e(oz,nwr),e(cC,swr),e(ko,lwr),e(ko,Z3e),e(Z3e,iwr),e(ko,dwr),g(r7,ko,null),b(c,SRe,u),b(c,hf,u),e(hf,fC),e(fC,e5e),g(t7,e5e,null),e(hf,cwr),e(hf,o5e),e(o5e,fwr),b(c,PRe,u),b(c,Nr,u),g(a7,Nr,null),e(Nr,mwr),e(Nr,pf),e(pf,gwr),e(pf,r5e),e(r5e,hwr),e(pf,pwr),e(pf,t5e),e(t5e,_wr),e(pf,uwr),e(Nr,bwr),e(Nr,n7),e(n7,vwr),e(n7,a5e),e(a5e,Twr),e(n7,Fwr),e(Nr,Cwr),e(Nr,kt),g(s7,kt,null),e(kt,Mwr),e(kt,n5e),e(n5e,Ewr),e(kt,ywr),e(kt,_f),e(_f,wwr),e(_f,s5e),e(s5e,Awr),e(_f,Lwr),e(_f,l5e),e(l5e,Bwr),e(_f,xwr),e(kt,kwr),e(kt,i5e),e(i5e,Rwr),e(kt,Swr),g(l7,kt,null),e(Nr,Pwr),e(Nr,Ro),g(i7,Ro,null),e(Ro,$wr),e(Ro,d5e),e(d5e,Iwr),e(Ro,Nwr),e(Ro,Pn),e(Pn,jwr),e(Pn,c5e),e(c5e,Dwr),e(Pn,qwr),e(Pn,f5e),e(f5e,Gwr),e(Pn,Owr),e(Pn,m5e),e(m5e,Xwr),e(Pn,Vwr),e(Ro,zwr),e(Ro,ve),e(ve,mC),e(mC,g5e),e(g5e,Wwr),e(mC,Qwr),e(mC,rz),e(rz,Hwr),e(mC,Uwr),e(ve,Jwr),e(ve,gC),e(gC,h5e),e(h5e,Ywr),e(gC,Kwr),e(gC,tz),e(tz,Zwr),e(gC,eAr),e(ve,oAr),e(ve,hC),e(hC,p5e),e(p5e,rAr),e(hC,tAr),e(hC,az),e(az,aAr),e(hC,nAr),e(ve,sAr),e(ve,pC),e(pC,_5e),e(_5e,lAr),e(pC,iAr),e(pC,nz),e(nz,dAr),e(pC,cAr),e(ve,fAr),e(ve,_C),e(_C,u5e),e(u5e,mAr),e(_C,gAr),e(_C,sz),e(sz,hAr),e(_C,pAr),e(ve,_Ar),e(ve,uC),e(uC,b5e),e(b5e,uAr),e(uC,bAr),e(uC,lz),e(lz,vAr),e(uC,TAr),e(ve,FAr),e(ve,bC),e(bC,v5e),e(v5e,CAr),e(bC,MAr),e(bC,iz),e(iz,EAr),e(bC,yAr),e(ve,wAr),e(ve,vC),e(vC,T5e),e(T5e,AAr),e(vC,LAr),e(vC,dz),e(dz,BAr),e(vC,xAr),e(ve,kAr),e(ve,TC),e(TC,F5e),e(F5e,RAr),e(TC,SAr),e(TC,cz),e(cz,PAr),e(TC,$Ar),e(ve,IAr),e(ve,FC),e(FC,C5e),e(C5e,NAr),e(FC,jAr),e(FC,fz),e(fz,DAr),e(FC,qAr),e(Ro,GAr),e(Ro,M5e),e(M5e,OAr),e(Ro,XAr),g(d7,Ro,null),b(c,$Re,u),b(c,uf,u),e(uf,CC),e(CC,E5e),g(c7,E5e,null),e(uf,VAr),e(uf,y5e),e(y5e,zAr),b(c,IRe,u),b(c,jr,u),g(f7,jr,null),e(jr,WAr),e(jr,bf),e(bf,QAr),e(bf,w5e),e(w5e,HAr),e(bf,UAr),e(bf,A5e),e(A5e,JAr),e(bf,YAr),e(jr,KAr),e(jr,m7),e(m7,ZAr),e(m7,L5e),e(L5e,e0r),e(m7,o0r),e(jr,r0r),e(jr,Rt),g(g7,Rt,null),e(Rt,t0r),e(Rt,B5e),e(B5e,a0r),e(Rt,n0r),e(Rt,vf),e(vf,s0r),e(vf,x5e),e(x5e,l0r),e(vf,i0r),e(vf,k5e),e(k5e,d0r),e(vf,c0r),e(Rt,f0r),e(Rt,R5e),e(R5e,m0r),e(Rt,g0r),g(h7,Rt,null),e(jr,h0r),e(jr,So),g(p7,So,null),e(So,p0r),e(So,S5e),e(S5e,_0r),e(So,u0r),e(So,$n),e($n,b0r),e($n,P5e),e(P5e,v0r),e($n,T0r),e($n,$5e),e($5e,F0r),e($n,C0r),e($n,I5e),e(I5e,M0r),e($n,E0r),e(So,y0r),e(So,Te),e(Te,MC),e(MC,N5e),e(N5e,w0r),e(MC,A0r),e(MC,mz),e(mz,L0r),e(MC,B0r),e(Te,x0r),e(Te,EC),e(EC,j5e),e(j5e,k0r),e(EC,R0r),e(EC,gz),e(gz,S0r),e(EC,P0r),e(Te,$0r),e(Te,yC),e(yC,D5e),e(D5e,I0r),e(yC,N0r),e(yC,hz),e(hz,j0r),e(yC,D0r),e(Te,q0r),e(Te,wC),e(wC,q5e),e(q5e,G0r),e(wC,O0r),e(wC,pz),e(pz,X0r),e(wC,V0r),e(Te,z0r),e(Te,AC),e(AC,G5e),e(G5e,W0r),e(AC,Q0r),e(AC,_z),e(_z,H0r),e(AC,U0r),e(Te,J0r),e(Te,LC),e(LC,O5e),e(O5e,Y0r),e(LC,K0r),e(LC,uz),e(uz,Z0r),e(LC,eLr),e(Te,oLr),e(Te,BC),e(BC,X5e),e(X5e,rLr),e(BC,tLr),e(BC,bz),e(bz,aLr),e(BC,nLr),e(Te,sLr),e(Te,xC),e(xC,V5e),e(V5e,lLr),e(xC,iLr),e(xC,vz),e(vz,dLr),e(xC,cLr),e(Te,fLr),e(Te,kC),e(kC,z5e),e(z5e,mLr),e(kC,gLr),e(kC,Tz),e(Tz,hLr),e(kC,pLr),e(Te,_Lr),e(Te,RC),e(RC,W5e),e(W5e,uLr),e(RC,bLr),e(RC,Fz),e(Fz,vLr),e(RC,TLr),e(So,FLr),e(So,Q5e),e(Q5e,CLr),e(So,MLr),g(_7,So,null),b(c,NRe,u),b(c,Tf,u),e(Tf,SC),e(SC,H5e),g(u7,H5e,null),e(Tf,ELr),e(Tf,U5e),e(U5e,yLr),b(c,jRe,u),b(c,Dr,u),g(b7,Dr,null),e(Dr,wLr),e(Dr,Ff),e(Ff,ALr),e(Ff,J5e),e(J5e,LLr),e(Ff,BLr),e(Ff,Y5e),e(Y5e,xLr),e(Ff,kLr),e(Dr,RLr),e(Dr,v7),e(v7,SLr),e(v7,K5e),e(K5e,PLr),e(v7,$Lr),e(Dr,ILr),e(Dr,St),g(T7,St,null),e(St,NLr),e(St,Z5e),e(Z5e,jLr),e(St,DLr),e(St,Cf),e(Cf,qLr),e(Cf,e2e),e(e2e,GLr),e(Cf,OLr),e(Cf,o2e),e(o2e,XLr),e(Cf,VLr),e(St,zLr),e(St,r2e),e(r2e,WLr),e(St,QLr),g(F7,St,null),e(Dr,HLr),e(Dr,Po),g(C7,Po,null),e(Po,ULr),e(Po,t2e),e(t2e,JLr),e(Po,YLr),e(Po,In),e(In,KLr),e(In,a2e),e(a2e,ZLr),e(In,e7r),e(In,n2e),e(n2e,o7r),e(In,r7r),e(In,s2e),e(s2e,t7r),e(In,a7r),e(Po,n7r),e(Po,Se),e(Se,PC),e(PC,l2e),e(l2e,s7r),e(PC,l7r),e(PC,Cz),e(Cz,i7r),e(PC,d7r),e(Se,c7r),e(Se,$C),e($C,i2e),e(i2e,f7r),e($C,m7r),e($C,Mz),e(Mz,g7r),e($C,h7r),e(Se,p7r),e(Se,IC),e(IC,d2e),e(d2e,_7r),e(IC,u7r),e(IC,Ez),e(Ez,b7r),e(IC,v7r),e(Se,T7r),e(Se,NC),e(NC,c2e),e(c2e,F7r),e(NC,C7r),e(NC,yz),e(yz,M7r),e(NC,E7r),e(Se,y7r),e(Se,jC),e(jC,f2e),e(f2e,w7r),e(jC,A7r),e(jC,wz),e(wz,L7r),e(jC,B7r),e(Se,x7r),e(Se,DC),e(DC,m2e),e(m2e,k7r),e(DC,R7r),e(DC,Az),e(Az,S7r),e(DC,P7r),e(Se,$7r),e(Se,qC),e(qC,g2e),e(g2e,I7r),e(qC,N7r),e(qC,Lz),e(Lz,j7r),e(qC,D7r),e(Se,q7r),e(Se,GC),e(GC,h2e),e(h2e,G7r),e(GC,O7r),e(GC,Bz),e(Bz,X7r),e(GC,V7r),e(Po,z7r),e(Po,p2e),e(p2e,W7r),e(Po,Q7r),g(M7,Po,null),b(c,DRe,u),b(c,Mf,u),e(Mf,OC),e(OC,_2e),g(E7,_2e,null),e(Mf,H7r),e(Mf,u2e),e(u2e,U7r),b(c,qRe,u),b(c,qr,u),g(y7,qr,null),e(qr,J7r),e(qr,Ef),e(Ef,Y7r),e(Ef,b2e),e(b2e,K7r),e(Ef,Z7r),e(Ef,v2e),e(v2e,e8r),e(Ef,o8r),e(qr,r8r),e(qr,w7),e(w7,t8r),e(w7,T2e),e(T2e,a8r),e(w7,n8r),e(qr,s8r),e(qr,Pt),g(A7,Pt,null),e(Pt,l8r),e(Pt,F2e),e(F2e,i8r),e(Pt,d8r),e(Pt,yf),e(yf,c8r),e(yf,C2e),e(C2e,f8r),e(yf,m8r),e(yf,M2e),e(M2e,g8r),e(yf,h8r),e(Pt,p8r),e(Pt,E2e),e(E2e,_8r),e(Pt,u8r),g(L7,Pt,null),e(qr,b8r),e(qr,$o),g(B7,$o,null),e($o,v8r),e($o,y2e),e(y2e,T8r),e($o,F8r),e($o,Nn),e(Nn,C8r),e(Nn,w2e),e(w2e,M8r),e(Nn,E8r),e(Nn,A2e),e(A2e,y8r),e(Nn,w8r),e(Nn,L2e),e(L2e,A8r),e(Nn,L8r),e($o,B8r),e($o,Pe),e(Pe,XC),e(XC,B2e),e(B2e,x8r),e(XC,k8r),e(XC,xz),e(xz,R8r),e(XC,S8r),e(Pe,P8r),e(Pe,VC),e(VC,x2e),e(x2e,$8r),e(VC,I8r),e(VC,kz),e(kz,N8r),e(VC,j8r),e(Pe,D8r),e(Pe,zC),e(zC,k2e),e(k2e,q8r),e(zC,G8r),e(zC,Rz),e(Rz,O8r),e(zC,X8r),e(Pe,V8r),e(Pe,WC),e(WC,R2e),e(R2e,z8r),e(WC,W8r),e(WC,Sz),e(Sz,Q8r),e(WC,H8r),e(Pe,U8r),e(Pe,QC),e(QC,S2e),e(S2e,J8r),e(QC,Y8r),e(QC,Pz),e(Pz,K8r),e(QC,Z8r),e(Pe,e9r),e(Pe,HC),e(HC,P2e),e(P2e,o9r),e(HC,r9r),e(HC,$z),e($z,t9r),e(HC,a9r),e(Pe,n9r),e(Pe,UC),e(UC,$2e),e($2e,s9r),e(UC,l9r),e(UC,Iz),e(Iz,i9r),e(UC,d9r),e(Pe,c9r),e(Pe,JC),e(JC,I2e),e(I2e,f9r),e(JC,m9r),e(JC,Nz),e(Nz,g9r),e(JC,h9r),e($o,p9r),e($o,N2e),e(N2e,_9r),e($o,u9r),g(x7,$o,null),b(c,GRe,u),b(c,wf,u),e(wf,YC),e(YC,j2e),g(k7,j2e,null),e(wf,b9r),e(wf,D2e),e(D2e,v9r),b(c,ORe,u),b(c,Gr,u),g(R7,Gr,null),e(Gr,T9r),e(Gr,Af),e(Af,F9r),e(Af,q2e),e(q2e,C9r),e(Af,M9r),e(Af,G2e),e(G2e,E9r),e(Af,y9r),e(Gr,w9r),e(Gr,S7),e(S7,A9r),e(S7,O2e),e(O2e,L9r),e(S7,B9r),e(Gr,x9r),e(Gr,$t),g(P7,$t,null),e($t,k9r),e($t,X2e),e(X2e,R9r),e($t,S9r),e($t,Lf),e(Lf,P9r),e(Lf,V2e),e(V2e,$9r),e(Lf,I9r),e(Lf,z2e),e(z2e,N9r),e(Lf,j9r),e($t,D9r),e($t,W2e),e(W2e,q9r),e($t,G9r),g($7,$t,null),e(Gr,O9r),e(Gr,Io),g(I7,Io,null),e(Io,X9r),e(Io,Q2e),e(Q2e,V9r),e(Io,z9r),e(Io,jn),e(jn,W9r),e(jn,H2e),e(H2e,Q9r),e(jn,H9r),e(jn,U2e),e(U2e,U9r),e(jn,J9r),e(jn,J2e),e(J2e,Y9r),e(jn,K9r),e(Io,Z9r),e(Io,Y2e),e(Y2e,KC),e(KC,K2e),e(K2e,eBr),e(KC,oBr),e(KC,jz),e(jz,rBr),e(KC,tBr),e(Io,aBr),e(Io,Z2e),e(Z2e,nBr),e(Io,sBr),g(N7,Io,null),b(c,XRe,u),b(c,Bf,u),e(Bf,ZC),e(ZC,eve),g(j7,eve,null),e(Bf,lBr),e(Bf,ove),e(ove,iBr),b(c,VRe,u),b(c,Or,u),g(D7,Or,null),e(Or,dBr),e(Or,xf),e(xf,cBr),e(xf,rve),e(rve,fBr),e(xf,mBr),e(xf,tve),e(tve,gBr),e(xf,hBr),e(Or,pBr),e(Or,q7),e(q7,_Br),e(q7,ave),e(ave,uBr),e(q7,bBr),e(Or,vBr),e(Or,It),g(G7,It,null),e(It,TBr),e(It,nve),e(nve,FBr),e(It,CBr),e(It,kf),e(kf,MBr),e(kf,sve),e(sve,EBr),e(kf,yBr),e(kf,lve),e(lve,wBr),e(kf,ABr),e(It,LBr),e(It,ive),e(ive,BBr),e(It,xBr),g(O7,It,null),e(Or,kBr),e(Or,No),g(X7,No,null),e(No,RBr),e(No,dve),e(dve,SBr),e(No,PBr),e(No,Dn),e(Dn,$Br),e(Dn,cve),e(cve,IBr),e(Dn,NBr),e(Dn,fve),e(fve,jBr),e(Dn,DBr),e(Dn,mve),e(mve,qBr),e(Dn,GBr),e(No,OBr),e(No,V7),e(V7,eM),e(eM,gve),e(gve,XBr),e(eM,VBr),e(eM,Dz),e(Dz,zBr),e(eM,WBr),e(V7,QBr),e(V7,oM),e(oM,hve),e(hve,HBr),e(oM,UBr),e(oM,qz),e(qz,JBr),e(oM,YBr),e(No,KBr),e(No,pve),e(pve,ZBr),e(No,exr),g(z7,No,null),b(c,zRe,u),b(c,Rf,u),e(Rf,rM),e(rM,_ve),g(W7,_ve,null),e(Rf,oxr),e(Rf,uve),e(uve,rxr),b(c,WRe,u),b(c,Xr,u),g(Q7,Xr,null),e(Xr,txr),e(Xr,Sf),e(Sf,axr),e(Sf,bve),e(bve,nxr),e(Sf,sxr),e(Sf,vve),e(vve,lxr),e(Sf,ixr),e(Xr,dxr),e(Xr,H7),e(H7,cxr),e(H7,Tve),e(Tve,fxr),e(H7,mxr),e(Xr,gxr),e(Xr,Nt),g(U7,Nt,null),e(Nt,hxr),e(Nt,Fve),e(Fve,pxr),e(Nt,_xr),e(Nt,Pf),e(Pf,uxr),e(Pf,Cve),e(Cve,bxr),e(Pf,vxr),e(Pf,Mve),e(Mve,Txr),e(Pf,Fxr),e(Nt,Cxr),e(Nt,Eve),e(Eve,Mxr),e(Nt,Exr),g(J7,Nt,null),e(Xr,yxr),e(Xr,jo),g(Y7,jo,null),e(jo,wxr),e(jo,yve),e(yve,Axr),e(jo,Lxr),e(jo,qn),e(qn,Bxr),e(qn,wve),e(wve,xxr),e(qn,kxr),e(qn,Ave),e(Ave,Rxr),e(qn,Sxr),e(qn,Lve),e(Lve,Pxr),e(qn,$xr),e(jo,Ixr),e(jo,Bve),e(Bve,tM),e(tM,xve),e(xve,Nxr),e(tM,jxr),e(tM,Gz),e(Gz,Dxr),e(tM,qxr),e(jo,Gxr),e(jo,kve),e(kve,Oxr),e(jo,Xxr),g(K7,jo,null),QRe=!0},p(c,[u]){const Z7={};u&2&&(Z7.$$scope={dirty:u,ctx:c}),Gf.$set(Z7);const Rve={};u&2&&(Rve.$$scope={dirty:u,ctx:c}),Bh.$set(Rve);const Sve={};u&2&&(Sve.$$scope={dirty:u,ctx:c}),qh.$set(Sve)},i(c){QRe||(h(fe.$$.fragment,c),h(qa.$$.fragment,c),h(lE.$$.fragment,c),h(iE.$$.fragment,c),h(Gf.$$.fragment,c),h(dE.$$.fragment,c),h(cE.$$.fragment,c),h(gE.$$.fragment,c),h(hE.$$.fragment,c),h(pE.$$.fragment,c),h(_E.$$.fragment,c),h(uE.$$.fragment,c),h(TE.$$.fragment,c),h(FE.$$.fragment,c),h(CE.$$.fragment,c),h(ME.$$.fragment,c),h(EE.$$.fragment,c),h(AE.$$.fragment,c),h(Bh.$$.fragment,c),h(LE.$$.fragment,c),h(BE.$$.fragment,c),h(xE.$$.fragment,c),h(kE.$$.fragment,c),h(PE.$$.fragment,c),h(qh.$$.fragment,c),h($E.$$.fragment,c),h(IE.$$.fragment,c),h(NE.$$.fragment,c),h(jE.$$.fragment,c),h(qE.$$.fragment,c),h(GE.$$.fragment,c),h(OE.$$.fragment,c),h(XE.$$.fragment,c),h(VE.$$.fragment,c),h(zE.$$.fragment,c),h(QE.$$.fragment,c),h(HE.$$.fragment,c),h(UE.$$.fragment,c),h(JE.$$.fragment,c),h(YE.$$.fragment,c),h(KE.$$.fragment,c),h(ey.$$.fragment,c),h(oy.$$.fragment,c),h(ry.$$.fragment,c),h(ty.$$.fragment,c),h(ay.$$.fragment,c),h(ny.$$.fragment,c),h(ly.$$.fragment,c),h(iy.$$.fragment,c),h(dy.$$.fragment,c),h(cy.$$.fragment,c),h(fy.$$.fragment,c),h(my.$$.fragment,c),h(hy.$$.fragment,c),h(py.$$.fragment,c),h(_y.$$.fragment,c),h(uy.$$.fragment,c),h(by.$$.fragment,c),h(vy.$$.fragment,c),h(Fy.$$.fragment,c),h(Cy.$$.fragment,c),h(My.$$.fragment,c),h(Ey.$$.fragment,c),h(yy.$$.fragment,c),h(wy.$$.fragment,c),h(Ly.$$.fragment,c),h(By.$$.fragment,c),h(xy.$$.fragment,c),h(ky.$$.fragment,c),h(Ry.$$.fragment,c),h(Sy.$$.fragment,c),h($y.$$.fragment,c),h(Iy.$$.fragment,c),h(Ny.$$.fragment,c),h(jy.$$.fragment,c),h(Dy.$$.fragment,c),h(qy.$$.fragment,c),h(Oy.$$.fragment,c),h(Xy.$$.fragment,c),h(Vy.$$.fragment,c),h(zy.$$.fragment,c),h(Wy.$$.fragment,c),h(Qy.$$.fragment,c),h(Uy.$$.fragment,c),h(Jy.$$.fragment,c),h(Yy.$$.fragment,c),h(Ky.$$.fragment,c),h(Zy.$$.fragment,c),h(ew.$$.fragment,c),h(rw.$$.fragment,c),h(tw.$$.fragment,c),h(aw.$$.fragment,c),h(nw.$$.fragment,c),h(sw.$$.fragment,c),h(lw.$$.fragment,c),h(dw.$$.fragment,c),h(cw.$$.fragment,c),h(fw.$$.fragment,c),h(mw.$$.fragment,c),h(gw.$$.fragment,c),h(hw.$$.fragment,c),h(_w.$$.fragment,c),h(uw.$$.fragment,c),h(bw.$$.fragment,c),h(vw.$$.fragment,c),h(Tw.$$.fragment,c),h(Fw.$$.fragment,c),h(Mw.$$.fragment,c),h(Ew.$$.fragment,c),h(yw.$$.fragment,c),h(ww.$$.fragment,c),h(Aw.$$.fragment,c),h(Lw.$$.fragment,c),h(xw.$$.fragment,c),h(kw.$$.fragment,c),h(Rw.$$.fragment,c),h(Sw.$$.fragment,c),h(Pw.$$.fragment,c),h($w.$$.fragment,c),h(Nw.$$.fragment,c),h(jw.$$.fragment,c),h(Dw.$$.fragment,c),h(qw.$$.fragment,c),h(Gw.$$.fragment,c),h(Ow.$$.fragment,c),h(Vw.$$.fragment,c),h(zw.$$.fragment,c),h(Ww.$$.fragment,c),h(Hw.$$.fragment,c),h(Uw.$$.fragment,c),h(Jw.$$.fragment,c),h(Kw.$$.fragment,c),h(Zw.$$.fragment,c),h(eA.$$.fragment,c),h(oA.$$.fragment,c),h(rA.$$.fragment,c),h(tA.$$.fragment,c),h(nA.$$.fragment,c),h(sA.$$.fragment,c),h(lA.$$.fragment,c),h(iA.$$.fragment,c),h(dA.$$.fragment,c),h(cA.$$.fragment,c),h(mA.$$.fragment,c),h(gA.$$.fragment,c),h(hA.$$.fragment,c),h(pA.$$.fragment,c),h(_A.$$.fragment,c),h(uA.$$.fragment,c),h(vA.$$.fragment,c),h(TA.$$.fragment,c),h(FA.$$.fragment,c),h(CA.$$.fragment,c),h(MA.$$.fragment,c),h(EA.$$.fragment,c),h(wA.$$.fragment,c),h(AA.$$.fragment,c),h(LA.$$.fragment,c),h(xA.$$.fragment,c),h(kA.$$.fragment,c),h(RA.$$.fragment,c),h(PA.$$.fragment,c),h($A.$$.fragment,c),h(IA.$$.fragment,c),h(NA.$$.fragment,c),h(jA.$$.fragment,c),h(DA.$$.fragment,c),h(GA.$$.fragment,c),h(OA.$$.fragment,c),h(XA.$$.fragment,c),h(VA.$$.fragment,c),h(zA.$$.fragment,c),h(WA.$$.fragment,c),h(HA.$$.fragment,c),h(UA.$$.fragment,c),h(JA.$$.fragment,c),h(YA.$$.fragment,c),h(KA.$$.fragment,c),h(ZA.$$.fragment,c),h(o0.$$.fragment,c),h(r0.$$.fragment,c),h(t0.$$.fragment,c),h(a0.$$.fragment,c),h(n0.$$.fragment,c),h(s0.$$.fragment,c),h(i0.$$.fragment,c),h(d0.$$.fragment,c),h(c0.$$.fragment,c),h(m0.$$.fragment,c),h(g0.$$.fragment,c),h(h0.$$.fragment,c),h(_0.$$.fragment,c),h(u0.$$.fragment,c),h(b0.$$.fragment,c),h(v0.$$.fragment,c),h(T0.$$.fragment,c),h(F0.$$.fragment,c),h(M0.$$.fragment,c),h(E0.$$.fragment,c),h(y0.$$.fragment,c),h(w0.$$.fragment,c),h(A0.$$.fragment,c),h(L0.$$.fragment,c),h(x0.$$.fragment,c),h(k0.$$.fragment,c),h(R0.$$.fragment,c),h(S0.$$.fragment,c),h(P0.$$.fragment,c),h($0.$$.fragment,c),h(N0.$$.fragment,c),h(j0.$$.fragment,c),h(D0.$$.fragment,c),h(q0.$$.fragment,c),h(G0.$$.fragment,c),h(O0.$$.fragment,c),h(V0.$$.fragment,c),h(z0.$$.fragment,c),h(W0.$$.fragment,c),h(Q0.$$.fragment,c),h(H0.$$.fragment,c),h(U0.$$.fragment,c),h(Y0.$$.fragment,c),h(K0.$$.fragment,c),h(Z0.$$.fragment,c),h(eL.$$.fragment,c),h(oL.$$.fragment,c),h(rL.$$.fragment,c),h(aL.$$.fragment,c),h(nL.$$.fragment,c),h(sL.$$.fragment,c),h(lL.$$.fragment,c),h(iL.$$.fragment,c),h(dL.$$.fragment,c),h(fL.$$.fragment,c),h(mL.$$.fragment,c),h(gL.$$.fragment,c),h(hL.$$.fragment,c),h(pL.$$.fragment,c),h(_L.$$.fragment,c),h(bL.$$.fragment,c),h(vL.$$.fragment,c),h(TL.$$.fragment,c),h(FL.$$.fragment,c),h(CL.$$.fragment,c),h(ML.$$.fragment,c),h(yL.$$.fragment,c),h(wL.$$.fragment,c),h(AL.$$.fragment,c),h(LL.$$.fragment,c),h(BL.$$.fragment,c),h(xL.$$.fragment,c),h(RL.$$.fragment,c),h(SL.$$.fragment,c),h(PL.$$.fragment,c),h($L.$$.fragment,c),h(IL.$$.fragment,c),h(NL.$$.fragment,c),h(DL.$$.fragment,c),h(qL.$$.fragment,c),h(GL.$$.fragment,c),h(OL.$$.fragment,c),h(XL.$$.fragment,c),h(VL.$$.fragment,c),h(WL.$$.fragment,c),h(QL.$$.fragment,c),h(HL.$$.fragment,c),h(UL.$$.fragment,c),h(JL.$$.fragment,c),h(YL.$$.fragment,c),h(ZL.$$.fragment,c),h(e7.$$.fragment,c),h(o7.$$.fragment,c),h(r7.$$.fragment,c),h(t7.$$.fragment,c),h(a7.$$.fragment,c),h(s7.$$.fragment,c),h(l7.$$.fragment,c),h(i7.$$.fragment,c),h(d7.$$.fragment,c),h(c7.$$.fragment,c),h(f7.$$.fragment,c),h(g7.$$.fragment,c),h(h7.$$.fragment,c),h(p7.$$.fragment,c),h(_7.$$.fragment,c),h(u7.$$.fragment,c),h(b7.$$.fragment,c),h(T7.$$.fragment,c),h(F7.$$.fragment,c),h(C7.$$.fragment,c),h(M7.$$.fragment,c),h(E7.$$.fragment,c),h(y7.$$.fragment,c),h(A7.$$.fragment,c),h(L7.$$.fragment,c),h(B7.$$.fragment,c),h(x7.$$.fragment,c),h(k7.$$.fragment,c),h(R7.$$.fragment,c),h(P7.$$.fragment,c),h($7.$$.fragment,c),h(I7.$$.fragment,c),h(N7.$$.fragment,c),h(j7.$$.fragment,c),h(D7.$$.fragment,c),h(G7.$$.fragment,c),h(O7.$$.fragment,c),h(X7.$$.fragment,c),h(z7.$$.fragment,c),h(W7.$$.fragment,c),h(Q7.$$.fragment,c),h(U7.$$.fragment,c),h(J7.$$.fragment,c),h(Y7.$$.fragment,c),h(K7.$$.fragment,c),QRe=!0)},o(c){p(fe.$$.fragment,c),p(qa.$$.fragment,c),p(lE.$$.fragment,c),p(iE.$$.fragment,c),p(Gf.$$.fragment,c),p(dE.$$.fragment,c),p(cE.$$.fragment,c),p(gE.$$.fragment,c),p(hE.$$.fragment,c),p(pE.$$.fragment,c),p(_E.$$.fragment,c),p(uE.$$.fragment,c),p(TE.$$.fragment,c),p(FE.$$.fragment,c),p(CE.$$.fragment,c),p(ME.$$.fragment,c),p(EE.$$.fragment,c),p(AE.$$.fragment,c),p(Bh.$$.fragment,c),p(LE.$$.fragment,c),p(BE.$$.fragment,c),p(xE.$$.fragment,c),p(kE.$$.fragment,c),p(PE.$$.fragment,c),p(qh.$$.fragment,c),p($E.$$.fragment,c),p(IE.$$.fragment,c),p(NE.$$.fragment,c),p(jE.$$.fragment,c),p(qE.$$.fragment,c),p(GE.$$.fragment,c),p(OE.$$.fragment,c),p(XE.$$.fragment,c),p(VE.$$.fragment,c),p(zE.$$.fragment,c),p(QE.$$.fragment,c),p(HE.$$.fragment,c),p(UE.$$.fragment,c),p(JE.$$.fragment,c),p(YE.$$.fragment,c),p(KE.$$.fragment,c),p(ey.$$.fragment,c),p(oy.$$.fragment,c),p(ry.$$.fragment,c),p(ty.$$.fragment,c),p(ay.$$.fragment,c),p(ny.$$.fragment,c),p(ly.$$.fragment,c),p(iy.$$.fragment,c),p(dy.$$.fragment,c),p(cy.$$.fragment,c),p(fy.$$.fragment,c),p(my.$$.fragment,c),p(hy.$$.fragment,c),p(py.$$.fragment,c),p(_y.$$.fragment,c),p(uy.$$.fragment,c),p(by.$$.fragment,c),p(vy.$$.fragment,c),p(Fy.$$.fragment,c),p(Cy.$$.fragment,c),p(My.$$.fragment,c),p(Ey.$$.fragment,c),p(yy.$$.fragment,c),p(wy.$$.fragment,c),p(Ly.$$.fragment,c),p(By.$$.fragment,c),p(xy.$$.fragment,c),p(ky.$$.fragment,c),p(Ry.$$.fragment,c),p(Sy.$$.fragment,c),p($y.$$.fragment,c),p(Iy.$$.fragment,c),p(Ny.$$.fragment,c),p(jy.$$.fragment,c),p(Dy.$$.fragment,c),p(qy.$$.fragment,c),p(Oy.$$.fragment,c),p(Xy.$$.fragment,c),p(Vy.$$.fragment,c),p(zy.$$.fragment,c),p(Wy.$$.fragment,c),p(Qy.$$.fragment,c),p(Uy.$$.fragment,c),p(Jy.$$.fragment,c),p(Yy.$$.fragment,c),p(Ky.$$.fragment,c),p(Zy.$$.fragment,c),p(ew.$$.fragment,c),p(rw.$$.fragment,c),p(tw.$$.fragment,c),p(aw.$$.fragment,c),p(nw.$$.fragment,c),p(sw.$$.fragment,c),p(lw.$$.fragment,c),p(dw.$$.fragment,c),p(cw.$$.fragment,c),p(fw.$$.fragment,c),p(mw.$$.fragment,c),p(gw.$$.fragment,c),p(hw.$$.fragment,c),p(_w.$$.fragment,c),p(uw.$$.fragment,c),p(bw.$$.fragment,c),p(vw.$$.fragment,c),p(Tw.$$.fragment,c),p(Fw.$$.fragment,c),p(Mw.$$.fragment,c),p(Ew.$$.fragment,c),p(yw.$$.fragment,c),p(ww.$$.fragment,c),p(Aw.$$.fragment,c),p(Lw.$$.fragment,c),p(xw.$$.fragment,c),p(kw.$$.fragment,c),p(Rw.$$.fragment,c),p(Sw.$$.fragment,c),p(Pw.$$.fragment,c),p($w.$$.fragment,c),p(Nw.$$.fragment,c),p(jw.$$.fragment,c),p(Dw.$$.fragment,c),p(qw.$$.fragment,c),p(Gw.$$.fragment,c),p(Ow.$$.fragment,c),p(Vw.$$.fragment,c),p(zw.$$.fragment,c),p(Ww.$$.fragment,c),p(Hw.$$.fragment,c),p(Uw.$$.fragment,c),p(Jw.$$.fragment,c),p(Kw.$$.fragment,c),p(Zw.$$.fragment,c),p(eA.$$.fragment,c),p(oA.$$.fragment,c),p(rA.$$.fragment,c),p(tA.$$.fragment,c),p(nA.$$.fragment,c),p(sA.$$.fragment,c),p(lA.$$.fragment,c),p(iA.$$.fragment,c),p(dA.$$.fragment,c),p(cA.$$.fragment,c),p(mA.$$.fragment,c),p(gA.$$.fragment,c),p(hA.$$.fragment,c),p(pA.$$.fragment,c),p(_A.$$.fragment,c),p(uA.$$.fragment,c),p(vA.$$.fragment,c),p(TA.$$.fragment,c),p(FA.$$.fragment,c),p(CA.$$.fragment,c),p(MA.$$.fragment,c),p(EA.$$.fragment,c),p(wA.$$.fragment,c),p(AA.$$.fragment,c),p(LA.$$.fragment,c),p(xA.$$.fragment,c),p(kA.$$.fragment,c),p(RA.$$.fragment,c),p(PA.$$.fragment,c),p($A.$$.fragment,c),p(IA.$$.fragment,c),p(NA.$$.fragment,c),p(jA.$$.fragment,c),p(DA.$$.fragment,c),p(GA.$$.fragment,c),p(OA.$$.fragment,c),p(XA.$$.fragment,c),p(VA.$$.fragment,c),p(zA.$$.fragment,c),p(WA.$$.fragment,c),p(HA.$$.fragment,c),p(UA.$$.fragment,c),p(JA.$$.fragment,c),p(YA.$$.fragment,c),p(KA.$$.fragment,c),p(ZA.$$.fragment,c),p(o0.$$.fragment,c),p(r0.$$.fragment,c),p(t0.$$.fragment,c),p(a0.$$.fragment,c),p(n0.$$.fragment,c),p(s0.$$.fragment,c),p(i0.$$.fragment,c),p(d0.$$.fragment,c),p(c0.$$.fragment,c),p(m0.$$.fragment,c),p(g0.$$.fragment,c),p(h0.$$.fragment,c),p(_0.$$.fragment,c),p(u0.$$.fragment,c),p(b0.$$.fragment,c),p(v0.$$.fragment,c),p(T0.$$.fragment,c),p(F0.$$.fragment,c),p(M0.$$.fragment,c),p(E0.$$.fragment,c),p(y0.$$.fragment,c),p(w0.$$.fragment,c),p(A0.$$.fragment,c),p(L0.$$.fragment,c),p(x0.$$.fragment,c),p(k0.$$.fragment,c),p(R0.$$.fragment,c),p(S0.$$.fragment,c),p(P0.$$.fragment,c),p($0.$$.fragment,c),p(N0.$$.fragment,c),p(j0.$$.fragment,c),p(D0.$$.fragment,c),p(q0.$$.fragment,c),p(G0.$$.fragment,c),p(O0.$$.fragment,c),p(V0.$$.fragment,c),p(z0.$$.fragment,c),p(W0.$$.fragment,c),p(Q0.$$.fragment,c),p(H0.$$.fragment,c),p(U0.$$.fragment,c),p(Y0.$$.fragment,c),p(K0.$$.fragment,c),p(Z0.$$.fragment,c),p(eL.$$.fragment,c),p(oL.$$.fragment,c),p(rL.$$.fragment,c),p(aL.$$.fragment,c),p(nL.$$.fragment,c),p(sL.$$.fragment,c),p(lL.$$.fragment,c),p(iL.$$.fragment,c),p(dL.$$.fragment,c),p(fL.$$.fragment,c),p(mL.$$.fragment,c),p(gL.$$.fragment,c),p(hL.$$.fragment,c),p(pL.$$.fragment,c),p(_L.$$.fragment,c),p(bL.$$.fragment,c),p(vL.$$.fragment,c),p(TL.$$.fragment,c),p(FL.$$.fragment,c),p(CL.$$.fragment,c),p(ML.$$.fragment,c),p(yL.$$.fragment,c),p(wL.$$.fragment,c),p(AL.$$.fragment,c),p(LL.$$.fragment,c),p(BL.$$.fragment,c),p(xL.$$.fragment,c),p(RL.$$.fragment,c),p(SL.$$.fragment,c),p(PL.$$.fragment,c),p($L.$$.fragment,c),p(IL.$$.fragment,c),p(NL.$$.fragment,c),p(DL.$$.fragment,c),p(qL.$$.fragment,c),p(GL.$$.fragment,c),p(OL.$$.fragment,c),p(XL.$$.fragment,c),p(VL.$$.fragment,c),p(WL.$$.fragment,c),p(QL.$$.fragment,c),p(HL.$$.fragment,c),p(UL.$$.fragment,c),p(JL.$$.fragment,c),p(YL.$$.fragment,c),p(ZL.$$.fragment,c),p(e7.$$.fragment,c),p(o7.$$.fragment,c),p(r7.$$.fragment,c),p(t7.$$.fragment,c),p(a7.$$.fragment,c),p(s7.$$.fragment,c),p(l7.$$.fragment,c),p(i7.$$.fragment,c),p(d7.$$.fragment,c),p(c7.$$.fragment,c),p(f7.$$.fragment,c),p(g7.$$.fragment,c),p(h7.$$.fragment,c),p(p7.$$.fragment,c),p(_7.$$.fragment,c),p(u7.$$.fragment,c),p(b7.$$.fragment,c),p(T7.$$.fragment,c),p(F7.$$.fragment,c),p(C7.$$.fragment,c),p(M7.$$.fragment,c),p(E7.$$.fragment,c),p(y7.$$.fragment,c),p(A7.$$.fragment,c),p(L7.$$.fragment,c),p(B7.$$.fragment,c),p(x7.$$.fragment,c),p(k7.$$.fragment,c),p(R7.$$.fragment,c),p(P7.$$.fragment,c),p($7.$$.fragment,c),p(I7.$$.fragment,c),p(N7.$$.fragment,c),p(j7.$$.fragment,c),p(D7.$$.fragment,c),p(G7.$$.fragment,c),p(O7.$$.fragment,c),p(X7.$$.fragment,c),p(z7.$$.fragment,c),p(W7.$$.fragment,c),p(Q7.$$.fragment,c),p(U7.$$.fragment,c),p(J7.$$.fragment,c),p(Y7.$$.fragment,c),p(K7.$$.fragment,c),QRe=!1},d(c){t(J),c&&t($e),c&&t(de),_(fe),c&&t(If),c&&t(fa),c&&t(Be),c&&t(co),c&&t(jf),_(qa,c),c&&t(fo),c&&t(_e),c&&t(zo),c&&t(Ga),c&&t(Wxe),c&&t(Vi),_(lE),c&&t(Qxe),c&&t(zn),c&&t(Hxe),_(iE,c),c&&t(Uxe),c&&t(o9),c&&t(Jxe),_(Gf,c),c&&t(Yxe),c&&t(zi),_(dE),c&&t(Kxe),c&&t(Wo),_(cE),_(gE),_(hE),_(pE),c&&t(Zxe),c&&t(Qi),_(_E),c&&t(eke),c&&t(Qo),_(uE),_(TE),_(FE),_(CE),c&&t(oke),c&&t(Hi),_(ME),c&&t(rke),c&&t(Ho),_(EE),_(AE),_(Bh),_(LE),_(BE),c&&t(tke),c&&t(Ui),_(xE),c&&t(ake),c&&t(Uo),_(kE),_(PE),_(qh),_($E),_(IE),c&&t(nke),c&&t(Yi),_(NE),c&&t(ske),c&&t(Jo),_(jE),_(qE),_(GE),_(OE),_(XE),c&&t(lke),c&&t(ed),_(VE),c&&t(ike),c&&t(Yo),_(zE),_(QE),_(HE),_(UE),_(JE),c&&t(dke),c&&t(td),_(YE),c&&t(cke),c&&t(Ko),_(KE),_(ey),_(oy),_(ry),_(ty),c&&t(fke),c&&t(sd),_(ay),c&&t(mke),c&&t(Zo),_(ny),_(ly),_(iy),_(dy),_(cy),c&&t(gke),c&&t(dd),_(fy),c&&t(hke),c&&t(er),_(my),_(hy),_(py),_(_y),_(uy),c&&t(pke),c&&t(md),_(by),c&&t(_ke),c&&t(or),_(vy),_(Fy),_(Cy),_(My),_(Ey),c&&t(uke),c&&t(pd),_(yy),c&&t(bke),c&&t(rr),_(wy),_(Ly),_(By),_(xy),_(ky),c&&t(vke),c&&t(bd),_(Ry),c&&t(Tke),c&&t(tr),_(Sy),_($y),_(Iy),_(Ny),_(jy),c&&t(Fke),c&&t(Fd),_(Dy),c&&t(Cke),c&&t(ar),_(qy),_(Oy),_(Xy),_(Vy),_(zy),c&&t(Mke),c&&t(Ed),_(Wy),c&&t(Eke),c&&t(nr),_(Qy),_(Uy),_(Jy),_(Yy),_(Ky),c&&t(yke),c&&t(Ad),_(Zy),c&&t(wke),c&&t(sr),_(ew),_(rw),_(tw),_(aw),_(nw),c&&t(Ake),c&&t(xd),_(sw),c&&t(Lke),c&&t(lr),_(lw),_(dw),_(cw),_(fw),_(mw),c&&t(Bke),c&&t(Sd),_(gw),c&&t(xke),c&&t(ir),_(hw),_(_w),_(uw),_(bw),_(vw),c&&t(kke),c&&t(Id),_(Tw),c&&t(Rke),c&&t(dr),_(Fw),_(Mw),_(Ew),_(yw),_(ww),c&&t(Ske),c&&t(Dd),_(Aw),c&&t(Pke),c&&t(cr),_(Lw),_(xw),_(kw),_(Rw),_(Sw),c&&t($ke),c&&t(Od),_(Pw),c&&t(Ike),c&&t(fr),_($w),_(Nw),_(jw),_(Dw),_(qw),c&&t(Nke),c&&t(zd),_(Gw),c&&t(jke),c&&t(mr),_(Ow),_(Vw),_(zw),_(Ww),_(Hw),c&&t(Dke),c&&t(Hd),_(Uw),c&&t(qke),c&&t(gr),_(Jw),_(Kw),_(Zw),_(eA),_(oA),c&&t(Gke),c&&t(Yd),_(rA),c&&t(Oke),c&&t(hr),_(tA),_(nA),_(sA),_(lA),_(iA),c&&t(Xke),c&&t(oc),_(dA),c&&t(Vke),c&&t(pr),_(cA),_(mA),_(gA),_(hA),_(pA),c&&t(zke),c&&t(ac),_(_A),c&&t(Wke),c&&t(_r),_(uA),_(vA),_(TA),_(FA),_(CA),c&&t(Qke),c&&t(lc),_(MA),c&&t(Hke),c&&t(ur),_(EA),_(wA),_(AA),_(LA),_(xA),c&&t(Uke),c&&t(cc),_(kA),c&&t(Jke),c&&t(br),_(RA),_(PA),_($A),_(IA),_(NA),c&&t(Yke),c&&t(gc),_(jA),c&&t(Kke),c&&t(vr),_(DA),_(GA),_(OA),_(XA),_(VA),c&&t(Zke),c&&t(_c),_(zA),c&&t(eRe),c&&t(Tr),_(WA),_(HA),_(UA),_(JA),_(YA),c&&t(oRe),c&&t(vc),_(KA),c&&t(rRe),c&&t(Fr),_(ZA),_(o0),_(r0),_(t0),_(a0),c&&t(tRe),c&&t(Cc),_(n0),c&&t(aRe),c&&t(Cr),_(s0),_(i0),_(d0),_(c0),_(m0),c&&t(nRe),c&&t(yc),_(g0),c&&t(sRe),c&&t(Mr),_(h0),_(_0),_(u0),_(b0),_(v0),c&&t(lRe),c&&t(Lc),_(T0),c&&t(iRe),c&&t(Er),_(F0),_(M0),_(E0),_(y0),_(w0),c&&t(dRe),c&&t(kc),_(A0),c&&t(cRe),c&&t(yr),_(L0),_(x0),_(k0),_(R0),_(S0),c&&t(fRe),c&&t(Pc),_(P0),c&&t(mRe),c&&t(wr),_($0),_(N0),_(j0),_(D0),_(q0),c&&t(gRe),c&&t(Nc),_(G0),c&&t(hRe),c&&t(Ar),_(O0),_(V0),_(z0),_(W0),_(Q0),c&&t(pRe),c&&t(qc),_(H0),c&&t(_Re),c&&t(Lr),_(U0),_(Y0),_(K0),_(Z0),_(eL),c&&t(uRe),c&&t(Xc),_(oL),c&&t(bRe),c&&t(Br),_(rL),_(aL),_(nL),_(sL),_(lL),c&&t(vRe),c&&t(Wc),_(iL),c&&t(TRe),c&&t(xr),_(dL),_(fL),_(mL),_(gL),_(hL),c&&t(FRe),c&&t(Uc),_(pL),c&&t(CRe),c&&t(kr),_(_L),_(bL),_(vL),_(TL),_(FL),c&&t(MRe),c&&t(Kc),_(CL),c&&t(ERe),c&&t(Rr),_(ML),_(yL),_(wL),_(AL),_(LL),c&&t(yRe),c&&t(of),_(BL),c&&t(wRe),c&&t(Sr),_(xL),_(RL),_(SL),_(PL),_($L),c&&t(ARe),c&&t(af),_(IL),c&&t(LRe),c&&t(Pr),_(NL),_(DL),_(qL),_(GL),_(OL),c&&t(BRe),c&&t(lf),_(XL),c&&t(xRe),c&&t($r),_(VL),_(WL),_(QL),_(HL),_(UL),c&&t(kRe),c&&t(ff),_(JL),c&&t(RRe),c&&t(Ir),_(YL),_(ZL),_(e7),_(o7),_(r7),c&&t(SRe),c&&t(hf),_(t7),c&&t(PRe),c&&t(Nr),_(a7),_(s7),_(l7),_(i7),_(d7),c&&t($Re),c&&t(uf),_(c7),c&&t(IRe),c&&t(jr),_(f7),_(g7),_(h7),_(p7),_(_7),c&&t(NRe),c&&t(Tf),_(u7),c&&t(jRe),c&&t(Dr),_(b7),_(T7),_(F7),_(C7),_(M7),c&&t(DRe),c&&t(Mf),_(E7),c&&t(qRe),c&&t(qr),_(y7),_(A7),_(L7),_(B7),_(x7),c&&t(GRe),c&&t(wf),_(k7),c&&t(ORe),c&&t(Gr),_(R7),_(P7),_($7),_(I7),_(N7),c&&t(XRe),c&&t(Bf),_(j7),c&&t(VRe),c&&t(Or),_(D7),_(G7),_(O7),_(X7),_(z7),c&&t(zRe),c&&t(Rf),_(W7),c&&t(WRe),c&&t(Xr),_(Q7),_(U7),_(J7),_(Y7),_(K7)}}}const zTt={local:"auto-classes",sections:[{local:"extending-the-auto-classes",title:"Extending the Auto Classes"},{local:"transformers.AutoConfig",title:"AutoConfig"},{local:"transformers.AutoTokenizer",title:"AutoTokenizer"},{local:"transformers.AutoFeatureExtractor",title:"AutoFeatureExtractor"},{local:"transformers.AutoProcessor",title:"AutoProcessor"},{local:"transformers.AutoModel",title:"AutoModel"},{local:"transformers.AutoModelForPreTraining",title:"AutoModelForPreTraining"},{local:"transformers.AutoModelForCausalLM",title:"AutoModelForCausalLM"},{local:"transformers.AutoModelForMaskedLM",title:"AutoModelForMaskedLM"},{local:"transformers.AutoModelForSeq2SeqLM",title:"AutoModelForSeq2SeqLM"},{local:"transformers.AutoModelForSequenceClassification",title:"AutoModelForSequenceClassification"},{local:"transformers.AutoModelForMultipleChoice",title:"AutoModelForMultipleChoice"},{local:"transformers.AutoModelForNextSentencePrediction",title:"AutoModelForNextSentencePrediction"},{local:"transformers.AutoModelForTokenClassification",title:"AutoModelForTokenClassification"},{local:"transformers.AutoModelForQuestionAnswering",title:"AutoModelForQuestionAnswering"},{local:"transformers.AutoModelForTableQuestionAnswering",title:"AutoModelForTableQuestionAnswering"},{local:"transformers.AutoModelForImageClassification",title:"AutoModelForImageClassification"},{local:"transformers.AutoModelForVision2Seq",title:"AutoModelForVision2Seq"},{local:"transformers.AutoModelForAudioClassification",title:"AutoModelForAudioClassification"},{local:"transformers.AutoModelForAudioFrameClassification",title:"AutoModelForAudioFrameClassification"},{local:"transformers.AutoModelForCTC",title:"AutoModelForCTC"},{local:"transformers.AutoModelForSpeechSeq2Seq",title:"AutoModelForSpeechSeq2Seq"},{local:"transformers.AutoModelForAudioXVector",title:"AutoModelForAudioXVector"},{local:"transformers.AutoModelForMaskedImageModeling",title:"AutoModelForMaskedImageModeling"},{local:"transformers.AutoModelForObjectDetection",title:"AutoModelForObjectDetection"},{local:"transformers.AutoModelForImageSegmentation",title:"AutoModelForImageSegmentation"},{local:"transformers.AutoModelForSemanticSegmentation",title:"AutoModelForSemanticSegmentation"},{local:"transformers.AutoModelForInstanceSegmentation",title:"AutoModelForInstanceSegmentation"},{local:"transformers.TFAutoModel",title:"TFAutoModel"},{local:"transformers.TFAutoModelForPreTraining",title:"TFAutoModelForPreTraining"},{local:"transformers.TFAutoModelForCausalLM",title:"TFAutoModelForCausalLM"},{local:"transformers.TFAutoModelForImageClassification",title:"TFAutoModelForImageClassification"},{local:"transformers.TFAutoModelForMaskedLM",title:"TFAutoModelForMaskedLM"},{local:"transformers.TFAutoModelForSeq2SeqLM",title:"TFAutoModelForSeq2SeqLM"},{local:"transformers.TFAutoModelForSequenceClassification",title:"TFAutoModelForSequenceClassification"},{local:"transformers.TFAutoModelForMultipleChoice",title:"TFAutoModelForMultipleChoice"},{local:"transformers.TFAutoModelForTableQuestionAnswering",title:"TFAutoModelForTableQuestionAnswering"},{local:"transformers.TFAutoModelForTokenClassification",title:"TFAutoModelForTokenClassification"},{local:"transformers.TFAutoModelForQuestionAnswering",title:"TFAutoModelForQuestionAnswering"},{local:"transformers.TFAutoModelForVision2Seq",title:"TFAutoModelForVision2Seq"},{local:"transformers.TFAutoModelForSpeechSeq2Seq",title:"TFAutoModelForSpeechSeq2Seq"},{local:"transformers.FlaxAutoModel",title:"FlaxAutoModel"},{local:"transformers.FlaxAutoModelForCausalLM",title:"FlaxAutoModelForCausalLM"},{local:"transformers.FlaxAutoModelForPreTraining",title:"FlaxAutoModelForPreTraining"},{local:"transformers.FlaxAutoModelForMaskedLM",title:"FlaxAutoModelForMaskedLM"},{local:"transformers.FlaxAutoModelForSeq2SeqLM",title:"FlaxAutoModelForSeq2SeqLM"},{local:"transformers.FlaxAutoModelForSequenceClassification",title:"FlaxAutoModelForSequenceClassification"},{local:"transformers.FlaxAutoModelForQuestionAnswering",title:"FlaxAutoModelForQuestionAnswering"},{local:"transformers.FlaxAutoModelForTokenClassification",title:"FlaxAutoModelForTokenClassification"},{local:"transformers.FlaxAutoModelForMultipleChoice",title:"FlaxAutoModelForMultipleChoice"},{local:"transformers.FlaxAutoModelForNextSentencePrediction",title:"FlaxAutoModelForNextSentencePrediction"},{local:"transformers.FlaxAutoModelForImageClassification",title:"FlaxAutoModelForImageClassification"},{local:"transformers.FlaxAutoModelForVision2Seq",title:"FlaxAutoModelForVision2Seq"}],title:"Auto Classes"};function WTt(Ii,J,$e){let{fw:de}=J;return Ii.$$set=pe=>{"fw"in pe&&$e(0,de=pe.fw)},[de]}class KTt extends NTt{constructor(J){super();jTt(this,J,WTt,VTt,DTt,{fw:0})}}export{KTt as default,zTt as metadata};
