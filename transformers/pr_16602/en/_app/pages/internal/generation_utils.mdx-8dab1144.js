import{S as L0,i as x0,s as E0,e as o,k as c,w as f,t as a,M as P0,c as n,d as r,m as l,a as s,x as h,h as i,b as d,F as t,g as m,y as g,L as F0,q as u,o as _,B as v,v as D0}from"../../chunks/vendor-6b77c823.js";import{D as b}from"../../chunks/Docstring-abef54e3.js";import{C as m$}from"../../chunks/CodeBlock-3a8b25a8.js";import{I as Se}from"../../chunks/IconCopyLink-7a11ce68.js";function z0(f$){let We,Xl,Ve,mt,Mi,Zt,Tm,Gi,ym,Jl,y,km,qn,wm,Lm,Bn,xm,Em,In,Pm,Fm,An,Dm,zm,Cn,Sm,Om,Nn,qm,Bm,Wn,Im,Am,Ql,Vn,Cm,Zl,Me,ft,ji,er,Nm,Hi,Wm,ed,N,Vm,Mn,Mm,Gm,Gn,jm,Hm,jn,Rm,Km,td,Hn,Um,rd,tr,od,Oe,Ym,Ri,Xm,Jm,Rn,Qm,Zm,nd,W,Kn,Ki,ef,tf,rf,Un,Ui,of,nf,sf,Yn,Yi,af,cf,lf,Xn,Xi,df,pf,sd,k,mf,Ji,ff,hf,Qi,gf,uf,Zi,_f,vf,ec,bf,$f,tc,Tf,yf,rc,kf,wf,ad,F,Lf,oc,xf,Ef,nc,Pf,Ff,sc,Df,zf,ac,Sf,Of,id,D,qf,ic,Bf,If,cc,Af,Cf,lc,Nf,Wf,dc,Vf,Mf,cd,rr,ld,ht,Gf,pc,jf,Hf,dd,z,Rf,mc,Kf,Uf,fc,Yf,Xf,hc,Jf,Qf,gc,Zf,eh,pd,Jn,th,md,Ge,gt,uc,or,rh,_c,oh,fd,je,nr,nh,vc,sh,hd,He,sr,ah,bc,ih,gd,j,ar,ch,$c,lh,dh,ut,ir,ph,Tc,mh,ud,Re,_t,yc,cr,fh,kc,hh,_d,Ke,lr,gh,wc,uh,vd,Ue,dr,_h,Lc,vh,bd,H,pr,bh,xc,$h,Th,vt,mr,yh,Ec,kh,$d,Ye,bt,Pc,fr,wh,Fc,Lh,Td,Xe,hr,xh,Dc,Eh,yd,Je,gr,Ph,zc,Fh,kd,Qe,$t,Sc,ur,Dh,Oc,zh,wd,Ze,_r,Sh,qc,Oh,Ld,et,vr,qh,Bc,Bh,xd,tt,Tt,Ic,br,Ih,Ac,Ah,Ed,yt,Ch,Qn,Nh,Wh,Pd,R,$r,Vh,Cc,Mh,Gh,kt,Tr,jh,Nc,Hh,Fd,K,yr,Rh,w,Kh,Zn,Uh,Yh,es,Xh,Jh,Wc,Qh,Zh,Vc,Mc,eg,tg,ts,rg,og,rs,ng,sg,ag,os,kr,Dd,U,wr,ig,Gc,cg,lg,wt,Lr,dg,jc,pg,zd,Y,xr,mg,ns,ss,fg,hg,gg,as,Er,Sd,X,Pr,ug,is,cs,_g,vg,bg,ls,Fr,Od,J,Dr,$g,ds,ps,Tg,yg,kg,ms,zr,qd,Q,Sr,wg,fs,hs,Lg,xg,Eg,gs,Or,Bd,Z,qr,Pg,us,_s,Fg,Dg,zg,vs,Br,Id,ee,Ir,Sg,Lt,bs,Og,qg,Ar,Bg,Ig,Ag,$s,Cr,Ad,te,Nr,Cg,Ts,ys,Ng,Wg,Vg,ks,Wr,Cd,re,Vr,Mg,xt,ws,Gg,jg,Mr,Hg,Rg,Kg,Ls,Gr,Nd,oe,jr,Ug,qe,xs,Yg,Xg,Es,Jg,Qg,Hr,Zg,eu,tu,Ps,Rr,Wd,ne,Kr,ru,Fs,Ds,ou,nu,su,zs,Ur,Vd,se,Yr,au,Et,Ss,iu,cu,Hc,lu,du,pu,Os,Xr,Md,ae,Jr,mu,V,qs,fu,hu,Rc,gu,uu,Kc,_u,vu,Uc,bu,$u,Tu,Bs,Qr,Gd,ie,Zr,yu,Yc,ku,wu,Pt,eo,Lu,Xc,xu,jd,ce,to,Eu,B,Pu,Is,Fu,Du,Jc,zu,Su,Qc,Zc,Ou,qu,As,Bu,Iu,Au,Cs,ro,Hd,le,oo,Cu,el,Nu,Wu,Ft,no,Vu,tl,Mu,Rd,de,so,Gu,Ns,Ws,ju,Hu,Ru,Vs,ao,Kd,pe,io,Ku,Ms,Gs,Uu,Yu,Xu,js,co,Ud,me,lo,Ju,Hs,Rs,Qu,Zu,e_,Ks,po,Yd,fe,mo,t_,Us,Ys,r_,o_,n_,Xs,fo,Xd,he,ho,s_,Js,Qs,a_,i_,c_,Zs,go,Jd,ge,uo,l_,Dt,ea,d_,p_,_o,m_,f_,h_,ta,vo,Qd,ue,bo,g_,ra,oa,u_,__,v_,na,$o,Zd,_e,To,b_,rl,$_,T_,zt,yo,y_,ol,k_,ep,ve,ko,w_,L,L_,sa,x_,E_,aa,P_,F_,nl,D_,z_,sl,al,S_,O_,ia,q_,B_,ca,I_,A_,C_,la,wo,tp,be,Lo,N_,il,W_,V_,St,xo,M_,cl,G_,rp,$e,Eo,j_,da,pa,H_,R_,K_,ma,Po,op,Te,Fo,U_,fa,ha,Y_,X_,J_,ga,Do,np,ye,zo,Q_,ua,_a,Z_,ev,tv,va,So,sp,ke,Oo,rv,ba,$a,ov,nv,sv,Ta,qo,ap,we,Bo,av,Ot,ya,iv,cv,ll,lv,dv,pv,ka,Io,ip,Le,Ao,mv,wa,La,fv,hv,gv,xa,Co,cp,rt,qt,dl,No,uv,pl,_v,lp,Bt,vv,Ea,bv,$v,dp,xe,Wo,Tv,ml,yv,kv,Pa,Vo,pp,ot,Mo,wv,Fa,Go,mp,Ee,jo,Lv,Ho,xv,fl,Ev,Pv,Fv,Da,Ro,fp,Pe,Ko,Dv,Uo,zv,hl,Sv,Ov,qv,za,Yo,hp,nt,It,gl,Xo,Bv,ul,Iv,gp,At,Av,Sa,Cv,Nv,up,$,Jo,Wv,_l,Vv,Mv,vl,Gv,jv,Qo,Hv,bl,Rv,Kv,Ct,Zo,Uv,$l,Yv,Xv,Nt,en,Jv,Tl,Qv,Zv,Wt,tn,eb,yl,tb,rb,Vt,rn,ob,on,nb,kl,sb,ab,ib,Mt,nn,cb,wl,lb,db,Gt,sn,pb,Ll,mb,fb,Be,an,hb,cn,gb,xl,ub,_b,vb,El,bb,_p,st,ln,$b,Oa,qa,Tb,yb,vp,at,dn,kb,pn,wb,Ba,Lb,xb,bp,I,mn,Eb,Pl,Pb,Fb,E,fn,Db,Fl,zb,Sb,it,Ob,Dl,qb,Bb,zl,Ib,Ab,Cb,Sl,Ol,Nb,Wb,Fe,Vb,ql,Mb,Gb,Bl,jb,Hb,Il,Rb,Kb,Ub,Al,Yb,Xb,jt,hn,Jb,Cl,Qb,$p,ct,Ht,Nl,gn,Zb,Wl,e1,Tp,A,un,t1,lt,r1,Ia,o1,n1,Aa,s1,a1,i1,Ca,_n,c1,Na,vn,yp,x,bn,l1,Wa,Va,d1,p1,m1,$n,f1,Tn,h1,g1,u1,Ma,_1,yn,v1,b1,Ga,kn,$1,ja,wn,kp,C,Ln,T1,Ha,Ra,y1,k1,w1,Ka,xn,L1,Ua,En,wp,dt,Rt,Vl,Pn,x1,Ml,E1,Lp,De,Fn,P1,Gl,F1,D1,Ya,z1,Dn,S1,xp,ze,zn,O1,jl,q1,B1,Xa,I1,Sn,A1,Ep;return Zt=new Se({}),er=new Se({}),tr=new m$({props:{code:`from transformers import GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained("gpt2")
model = GPT2LMHeadModel.from_pretrained("gpt2")

inputs = tokenizer("Hello, my dog is cute and ", return_tensors="pt")
generation_output = model.generate(**inputs, return_dict_in_generate=True, output_scores=True)`,highlighted:`<span class="hljs-keyword">from</span> transformers <span class="hljs-keyword">import</span> GPT2Tokenizer, GPT2LMHeadModel

tokenizer = GPT2Tokenizer.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)
model = GPT2LMHeadModel.from_pretrained(<span class="hljs-string">&quot;gpt2&quot;</span>)

inputs = tokenizer(<span class="hljs-string">&quot;Hello, my dog is cute and &quot;</span>, return_tensors=<span class="hljs-string">&quot;pt&quot;</span>)
generation_output = model.generate(**inputs, return_dict_in_generate=<span class="hljs-literal">True</span>, output_scores=<span class="hljs-literal">True</span>)`}}),rr=new m$({props:{code:"generation_output[:2]",highlighted:'generation_output[:<span class="hljs-number">2</span>]'}}),or=new Se({}),nr=new b({props:{name:"class transformers.generation_utils.GreedySearchDecoderOnlyOutput",anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_utils.py#L61",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.GreedySearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),sr=new b({props:{name:"class transformers.generation_utils.GreedySearchEncoderDecoderOutput",anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_utils.py#L89",parametersDescription:[{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.GreedySearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),ar=new b({props:{name:"class transformers.generation_flax_utils.FlaxGreedySearchOutput",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_utils.py#L44",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),ir=new b({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxGreedySearchOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/flax/struct.py#L120"}}),cr=new Se({}),lr=new b({props:{name:"class transformers.generation_utils.SampleDecoderOnlyOutput",anchor:"transformers.generation_utils.SampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_utils.py#L131",parametersDescription:[{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each
tensor of shape <code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.SampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(num_return_sequences*batch_size, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),dr=new b({props:{name:"class transformers.generation_utils.SampleEncoderDecoderOutput",anchor:"transformers.generation_utils.SampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_utils.py#L160",parametersDescription:[{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Processed prediction scores of the language modeling head (scores for each vocabulary token before SoftMax)
at each generation step. <code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape
<code>(batch_size*num_return_sequences, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.SampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),pr=new b({props:{name:"class transformers.generation_flax_utils.FlaxSampleOutput",anchor:"transformers.generation_flax_utils.FlaxSampleOutput",parameters:[{name:"sequences",val:": ndarray = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_utils.py#L58",parametersDescription:[{anchor:"transformers.generation_flax_utils.FlaxSampleOutput.sequences",description:`<strong>sequences</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, max_length)</code>) &#x2014;
The generated sequences.`,name:"sequences"}]}}),mr=new b({props:{name:"replace",anchor:"transformers.generation_flax_utils.FlaxSampleOutput.replace",parameters:[{name:"**updates",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/flax/struct.py#L120"}}),fr=new Se({}),hr=new b({props:{name:"class transformers.generation_utils.BeamSearchDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_utils.py#L203",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),gr=new b({props:{name:"class transformers.generation_utils.BeamSearchEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_utils.py#L238",parametersDescription:[{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size*num_return_sequences)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.attentions",description:"<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;",name:"attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams*num_return_sequences, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSearchEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams*num_return_sequences, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),ur=new Se({}),_r=new b({props:{name:"class transformers.generation_utils.BeamSampleDecoderOnlyOutput",anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_utils.py#L289",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_return_sequences, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-input_ids.shape[-1],)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape
<code>(batch_size*num_beams*num_return_sequences, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-input_ids.shape[-1],)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.attentions",description:`<strong>attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"attentions"},{anchor:"transformers.generation_utils.BeamSampleDecoderOnlyOutput.hidden_states",description:`<strong>hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"hidden_states"}]}}),vr=new b({props:{name:"class transformers.generation_utils.BeamSampleEncoderDecoderOutput",anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput",parameters:[{name:"sequences",val:": LongTensor = None"},{name:"sequences_scores",val:": typing.Optional[torch.FloatTensor] = None"},{name:"scores",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"beam_indices",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.LongTensor]]] = None"},{name:"encoder_attentions",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"encoder_hidden_states",val:": typing.Optional[typing.Tuple[torch.FloatTensor]] = None"},{name:"decoder_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"cross_attentions",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"},{name:"decoder_hidden_states",val:": typing.Optional[typing.Tuple[typing.Tuple[torch.FloatTensor]]] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_utils.py#L324",parametersDescription:[{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences",description:`<strong>sequences</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size*num_beams, sequence_length)</code>) &#x2014;
The generated sequences. The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter
if all batches finished early due to the <code>eos_token_id</code>.`,name:"sequences"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.sequences_scores",description:`<strong>sequences_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_return_sequence)</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Final beam scores of the generated <code>sequences</code>.`,name:"sequences_scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.scores",description:`<strong>scores</strong> (<code>tuple(torch.FloatTensor)</code> <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam transition scores for each vocabulary token at each generation step. Beam transition scores consisting
of log probabilities of tokens conditioned on log softmax of previously generated tokens in this beam.
<code>(max_length-1,)</code>-shaped tuple of <code>torch.FloatTensor</code> with each tensor of shape <code>(batch_size*num_beams, config.vocab_size)</code>).`,name:"scores"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.beam_indices",description:`<strong>beam_indices</strong> (<code>tuple(tuple(torch.LongTensor))</code>, <em>optional</em>, returned when <code>output_scores=True</code> is passed or when <code>config.output_scores=True</code>) &#x2014;
Beam indices of generated token id at each generation step. <code>(batch_size*num_return_sequences)</code>-shaped
tuple of <code>(max_length-1,)</code>-shaped tuples of scalar <code>torch.LongTensor</code> tensors.`,name:"beam_indices"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_attentions",description:`<strong>encoder_attentions</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for each layer of the decoder) of shape <code>(batch_size, num_heads, sequence_length, sequence_length)</code>.`,name:"encoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.encoder_hidden_states",description:`<strong>encoder_hidden_states</strong> (<code>tuple(torch.FloatTensor)</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple of <code>torch.FloatTensor</code> (one for the output of the embeddings + one for the output of each layer) of
shape <code>(batch_size*num_beams, sequence_length, hidden_size)</code>.`,name:"encoder_hidden_states"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_attentions",description:`<strong>decoder_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, num_heads, generated_length, sequence_length)</code>.`,name:"decoder_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.cross_attentions",description:`<strong>cross_attentions</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_attentions=True</code> is passed or <code>config.output_attentions=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size, num_heads, generated_length, sequence_length)</code>.`,name:"cross_attentions"},{anchor:"transformers.generation_utils.BeamSampleEncoderDecoderOutput.decoder_hidden_states",description:`<strong>decoder_hidden_states</strong> (<code>tuple(tuple(torch.FloatTensor))</code>, <em>optional</em>, returned when <code>output_hidden_states=True</code> is passed or when <code>config.output_hidden_states=True</code>) &#x2014;
Tuple (one element for each generated token) of tuples (one element for each layer of the decoder) of
<code>torch.FloatTensor</code> of shape <code>(batch_size*num_beams, generated_length, hidden_size)</code>.`,name:"decoder_hidden_states"}]}}),br=new Se({}),$r=new b({props:{name:"class transformers.LogitsProcessor",anchor:"transformers.LogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L51"}}),Tr=new b({props:{name:"__call__",anchor:"transformers.LogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L54",parametersDescription:[{anchor:"transformers.LogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),yr=new b({props:{name:"class transformers.LogitsProcessorList",anchor:"transformers.LogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L73"}}),kr=new b({props:{name:"__call__",anchor:"transformers.LogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L80",parametersDescription:[{anchor:"transformers.LogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),wr=new b({props:{name:"class transformers.LogitsWarper",anchor:"transformers.LogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L62"}}),Lr=new b({props:{name:"__call__",anchor:"transformers.LogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L65",parametersDescription:[{anchor:"transformers.LogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.LogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),xr=new b({props:{name:"class transformers.MinLengthLogitsProcessor",anchor:"transformers.MinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L96",parametersDescription:[{anchor:"transformers.MinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.MinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Er=new b({props:{name:"__call__",anchor:"transformers.MinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L117"}}),Pr=new b({props:{name:"class transformers.TemperatureLogitsWarper",anchor:"transformers.TemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L124",parametersDescription:[{anchor:"transformers.TemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),Fr=new b({props:{name:"__call__",anchor:"transformers.TemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L139"}}),Dr=new b({props:{name:"class transformers.RepetitionPenaltyLogitsProcessor",anchor:"transformers.RepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L144",parametersDescription:[{anchor:"transformers.RepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}]}}),zr=new b({props:{name:"__call__",anchor:"transformers.RepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L160"}}),Sr=new b({props:{name:"class transformers.TopPLogitsWarper",anchor:"transformers.TopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L170",parametersDescription:[{anchor:"transformers.TopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Or=new b({props:{name:"__call__",anchor:"transformers.TopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L193"}}),qr=new b({props:{name:"class transformers.TopKLogitsWarper",anchor:"transformers.TopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L212",parametersDescription:[{anchor:"transformers.TopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Br=new b({props:{name:"__call__",anchor:"transformers.TopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L233"}}),Ir=new b({props:{name:"class transformers.NoRepeatNGramLogitsProcessor",anchor:"transformers.NoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L312",parametersDescription:[{anchor:"transformers.NoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}]}}),Cr=new b({props:{name:"__call__",anchor:"transformers.NoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L327"}}),Nr=new b({props:{name:"class transformers.NoBadWordsLogitsProcessor",anchor:"transformers.NoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L379",parametersDescription:[{anchor:"transformers.NoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the token ids of the words
that should not appear in the generated text, use <code>tokenizer(bad_words, add_prefix_space=True, add_special_tokens=False).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.NoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Wr=new b({props:{name:"__call__",anchor:"transformers.NoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L421"}}),Vr=new b({props:{name:"class transformers.PrefixConstrainedLogitsProcessor",anchor:"transformers.PrefixConstrainedLogitsProcessor",parameters:[{name:"prefix_allowed_tokens_fn",val:": typing.Callable[[int, torch.Tensor], typing.List[int]]"},{name:"num_beams",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L507"}}),Gr=new b({props:{name:"__call__",anchor:"transformers.PrefixConstrainedLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L524"}}),jr=new b({props:{name:"class transformers.HammingDiversityLogitsProcessor",anchor:"transformers.HammingDiversityLogitsProcessor",parameters:[{name:"diversity_penalty",val:": float"},{name:"num_beams",val:": int"},{name:"num_beam_groups",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L533",parametersDescription:[{anchor:"transformers.HammingDiversityLogitsProcessor.diversity_penalty",description:`<strong>diversity_penalty</strong> (<code>float</code>) &#x2014;
This value is subtracted from a beam&#x2019;s score if it generates a token same as any beam from other group at a
particular time. Note that <code>diversity_penalty</code> is only effective if <code>group beam search</code> is enabled.`,name:"diversity_penalty"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams used for group beam search. See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more
details.`,name:"num_beams"},{anchor:"transformers.HammingDiversityLogitsProcessor.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),Rr=new b({props:{name:"__call__",anchor:"transformers.HammingDiversityLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"current_tokens",val:": LongTensor"},{name:"beam_group_idx",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L564"}}),Kr=new b({props:{name:"class transformers.ForcedBOSTokenLogitsProcessor",anchor:"transformers.ForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L593",parametersDescription:[{anchor:"transformers.ForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),Ur=new b({props:{name:"__call__",anchor:"transformers.ForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L605"}}),Yr=new b({props:{name:"class transformers.ForcedEOSTokenLogitsProcessor",anchor:"transformers.ForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L614",parametersDescription:[{anchor:"transformers.ForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),Xr=new b({props:{name:"__call__",anchor:"transformers.ForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L629"}}),Jr=new b({props:{name:"class transformers.InfNanRemoveLogitsProcessor",anchor:"transformers.InfNanRemoveLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L638"}}),Qr=new b({props:{name:"__call__",anchor:"transformers.InfNanRemoveLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_logits_process.py#L645"}}),Zr=new b({props:{name:"class transformers.TFLogitsProcessor",anchor:"transformers.TFLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L50"}}),eo=new b({props:{name:"__call__",anchor:"transformers.TFLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L53",parametersDescription:[{anchor:"transformers.TFLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),to=new b({props:{name:"class transformers.TFLogitsProcessorList",anchor:"transformers.TFLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L72"}}),ro=new b({props:{name:"__call__",anchor:"transformers.TFLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L79",parametersDescription:[{anchor:"transformers.TFLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),oo=new b({props:{name:"class transformers.TFLogitsWarper",anchor:"transformers.TFLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L61"}}),no=new b({props:{name:"__call__",anchor:"transformers.TFLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L64",parametersDescription:[{anchor:"transformers.TFLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.TFLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>tf.Tensor</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),so=new b({props:{name:"class transformers.TFTemperatureLogitsWarper",anchor:"transformers.TFTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L95",parametersDescription:[{anchor:"transformers.TFTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),ao=new b({props:{name:"__call__",anchor:"transformers.TFTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L110"}}),io=new b({props:{name:"class transformers.TFTopPLogitsWarper",anchor:"transformers.TFTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L144",parametersDescription:[{anchor:"transformers.TFTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.TFTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),co=new b({props:{name:"__call__",anchor:"transformers.TFTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L166"}}),lo=new b({props:{name:"class transformers.TFTopKLogitsWarper",anchor:"transformers.TFTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L115",parametersDescription:[{anchor:"transformers.TFTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.TFTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.TFTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),po=new b({props:{name:"__call__",anchor:"transformers.TFTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L136"}}),mo=new b({props:{name:"class transformers.TFMinLengthLogitsProcessor",anchor:"transformers.TFMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L198",parametersDescription:[{anchor:"transformers.TFMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.TFMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),fo=new b({props:{name:"__call__",anchor:"transformers.TFMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L219"}}),ho=new b({props:{name:"class transformers.TFNoBadWordsLogitsProcessor",anchor:"transformers.TFNoBadWordsLogitsProcessor",parameters:[{name:"bad_words_ids",val:": typing.List[typing.List[int]]"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L270",parametersDescription:[{anchor:"transformers.TFNoBadWordsLogitsProcessor.bad_words_ids",description:`<strong>bad_words_ids</strong> (<code>List[List[int]]</code>) &#x2014;
List of list of token ids that are not allowed to be generated. In order to get the tokens of the words
that should not appear in the generated text, use <code>tokenizer(bad_word, add_prefix_space=True).input_ids</code>.`,name:"bad_words_ids"},{anchor:"transformers.TFNoBadWordsLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),go=new b({props:{name:"__call__",anchor:"transformers.TFNoBadWordsLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L333"}}),uo=new b({props:{name:"class transformers.TFNoRepeatNGramLogitsProcessor",anchor:"transformers.TFNoRepeatNGramLogitsProcessor",parameters:[{name:"ngram_size",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L353",parametersDescription:[{anchor:"transformers.TFNoRepeatNGramLogitsProcessor.ngram_size",description:`<strong>ngram_size</strong> (<code>int</code>) &#x2014;
All ngrams of size <code>ngram_size</code> can only occur once.`,name:"ngram_size"}]}}),vo=new b({props:{name:"__call__",anchor:"transformers.TFNoRepeatNGramLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L391"}}),bo=new b({props:{name:"class transformers.TFRepetitionPenaltyLogitsProcessor",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor",parameters:[{name:"penalty",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L233",parametersDescription:[{anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.repetition_penalty",description:`<strong>repetition_penalty</strong> (<code>float</code>) &#x2014;
The parameter for repetition penalty. 1.0 means no penalty. See <a href="https://arxiv.org/pdf/1909.05858.pdf" rel="nofollow">this
paper</a> for more details.`,name:"repetition_penalty"}]}}),$o=new b({props:{name:"__call__",anchor:"transformers.TFRepetitionPenaltyLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": Tensor"},{name:"scores",val:": Tensor"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_logits_process.py#L262"}}),To=new b({props:{name:"class transformers.FlaxLogitsProcessor",anchor:"transformers.FlaxLogitsProcessor",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L50"}}),yo=new b({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L53",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessor.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessor.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),ko=new b({props:{name:"class transformers.FlaxLogitsProcessorList",anchor:"transformers.FlaxLogitsProcessorList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L72"}}),wo=new b({props:{name:"__call__",anchor:"transformers.FlaxLogitsProcessorList.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L79",parametersDescription:[{anchor:"transformers.FlaxLogitsProcessorList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsProcessorList.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Lo=new b({props:{name:"class transformers.FlaxLogitsWarper",anchor:"transformers.FlaxLogitsWarper",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L61"}}),xo=new b({props:{name:"__call__",anchor:"transformers.FlaxLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L64",parametersDescription:[{anchor:"transformers.FlaxLogitsWarper.__call__.input_ids",description:`<strong>input_ids</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.FlaxLogitsWarper.__call__.scores",description:`<strong>scores</strong> (<code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be logits for each vocabulary when not using beam
search or log softmax for each vocabulary token when using beam search
kwargs &#x2014;
Additional logits processor specific kwargs.`,name:"scores"}],returnDescription:`
<p>The processed prediction scores.</p>
`,returnType:`
<p><code>jnp.ndarray</code> of shape <code>(batch_size, config.vocab_size)</code></p>
`}}),Eo=new b({props:{name:"class transformers.FlaxTemperatureLogitsWarper",anchor:"transformers.FlaxTemperatureLogitsWarper",parameters:[{name:"temperature",val:": float"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L95",parametersDescription:[{anchor:"transformers.FlaxTemperatureLogitsWarper.temperature",description:`<strong>temperature</strong> (<code>float</code>) &#x2014;
The value used to module the logits distribution.`,name:"temperature"}]}}),Po=new b({props:{name:"__call__",anchor:"transformers.FlaxTemperatureLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L110"}}),Fo=new b({props:{name:"class transformers.FlaxTopPLogitsWarper",anchor:"transformers.FlaxTopPLogitsWarper",parameters:[{name:"top_p",val:": float"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L115",parametersDescription:[{anchor:"transformers.FlaxTopPLogitsWarper.top_p",description:`<strong>top_p</strong> (<code>float</code>) &#x2014;
If set to &lt; 1, only the most probable tokens with probabilities that add up to <code>top_p</code> or higher are kept
for generation.`,name:"top_p"},{anchor:"transformers.FlaxTopPLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopPLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),Do=new b({props:{name:"__call__",anchor:"transformers.FlaxTopPLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L137"}}),zo=new b({props:{name:"class transformers.FlaxTopKLogitsWarper",anchor:"transformers.FlaxTopKLogitsWarper",parameters:[{name:"top_k",val:": int"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L157",parametersDescription:[{anchor:"transformers.FlaxTopKLogitsWarper.top_k",description:`<strong>top_k</strong> (<code>int</code>) &#x2014;
The number of highest probability vocabulary tokens to keep for top-k-filtering.`,name:"top_k"},{anchor:"transformers.FlaxTopKLogitsWarper.filter_value",description:`<strong>filter_value</strong> (<code>float</code>, <em>optional</em>, defaults to <code>-float(&quot;Inf&quot;)</code>) &#x2014;
All filtered values will be set to this float value.`,name:"filter_value"},{anchor:"transformers.FlaxTopKLogitsWarper.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimum number of tokens that cannot be filtered.`,name:"min_tokens_to_keep"}]}}),So=new b({props:{name:"__call__",anchor:"transformers.FlaxTopKLogitsWarper.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L178"}}),Oo=new b({props:{name:"class transformers.FlaxForcedBOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor",parameters:[{name:"bos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L193",parametersDescription:[{anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.bos_token_id",description:`<strong>bos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the first generated token.`,name:"bos_token_id"}]}}),qo=new b({props:{name:"__call__",anchor:"transformers.FlaxForcedBOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L205"}}),Bo=new b({props:{name:"class transformers.FlaxForcedEOSTokenLogitsProcessor",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor",parameters:[{name:"max_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L215",parametersDescription:[{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the token to force as the last generated token when <code>max_length</code> is reached.`,name:"eos_token_id"}]}}),Io=new b({props:{name:"__call__",anchor:"transformers.FlaxForcedEOSTokenLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L230"}}),Ao=new b({props:{name:"class transformers.FlaxMinLengthLogitsProcessor",anchor:"transformers.FlaxMinLengthLogitsProcessor",parameters:[{name:"min_length",val:": int"},{name:"eos_token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L240",parametersDescription:[{anchor:"transformers.FlaxMinLengthLogitsProcessor.min_length",description:`<strong>min_length</strong> (<code>int</code>) &#x2014;
The minimum length below which the score of <code>eos_token_id</code> is set to <code>-float(&quot;Inf&quot;)</code>.`,name:"min_length"},{anchor:"transformers.FlaxMinLengthLogitsProcessor.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}]}}),Co=new b({props:{name:"__call__",anchor:"transformers.FlaxMinLengthLogitsProcessor.__call__",parameters:[{name:"input_ids",val:": ndarray"},{name:"scores",val:": ndarray"},{name:"cur_len",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_flax_logits_process.py#L261"}}),No=new Se({}),Wo=new b({props:{name:"class transformers.StoppingCriteria",anchor:"transformers.StoppingCriteria",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_stopping_criteria.py#L33"}}),Vo=new b({props:{name:"__call__",anchor:"transformers.StoppingCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_stopping_criteria.py#L36",parametersDescription:[{anchor:"transformers.StoppingCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Mo=new b({props:{name:"class transformers.StoppingCriteriaList",anchor:"transformers.StoppingCriteriaList",parameters:[{name:"iterable",val:" = ()"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_stopping_criteria.py#L110"}}),Go=new b({props:{name:"__call__",anchor:"transformers.StoppingCriteriaList.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_stopping_criteria.py#L111",parametersDescription:[{anchor:"transformers.StoppingCriteriaList.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.StoppingCriteriaList.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),jo=new b({props:{name:"class transformers.MaxLengthCriteria",anchor:"transformers.MaxLengthCriteria",parameters:[{name:"max_length",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_stopping_criteria.py#L41",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length that the output sequence can have in number of tokens.`,name:"max_length"}]}}),Ro=new b({props:{name:"__call__",anchor:"transformers.MaxLengthCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_stopping_criteria.py#L54",parametersDescription:[{anchor:"transformers.MaxLengthCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxLengthCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Ko=new b({props:{name:"class transformers.MaxTimeCriteria",anchor:"transformers.MaxTimeCriteria",parameters:[{name:"max_time",val:": float"},{name:"initial_timestamp",val:": typing.Optional[float] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_stopping_criteria.py#L88",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.max_time",description:`<strong>max_time</strong> (<code>float</code>) &#x2014;
The maximum allowed time in seconds for the generation.`,name:"max_time"},{anchor:"transformers.MaxTimeCriteria.initial_time",description:`<strong>initial_time</strong> (<code>float</code>, <em>optional</em>, defaults to <code>time.time()</code>) &#x2014;
The start of the generation allowed time.`,name:"initial_time"}]}}),Yo=new b({props:{name:"__call__",anchor:"transformers.MaxTimeCriteria.__call__",parameters:[{name:"input_ids",val:": LongTensor"},{name:"scores",val:": FloatTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_stopping_criteria.py#L105",parametersDescription:[{anchor:"transformers.MaxTimeCriteria.__call__.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using <a href="/docs/transformers/pr_16602/en/model_doc/bert#transformers.BertTokenizer">BertTokenizer</a>. See <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.MaxTimeCriteria.__call__.scores",description:`<strong>scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, config.vocab_size)</code>) &#x2014;
Prediction scores of a language modeling head. These can be scores for each vocabulary token before SoftMax
or scores for each vocabulary token after SoftMax.
kwargs &#x2014;
Additional stopping criteria specific kwargs.`,name:"scores"}],returnDescription:`
<p><code>bool</code>. <code>False</code> indicates we should continue, <code>True</code> indicates we should stop.</p>
`}}),Xo=new Se({}),Jo=new b({props:{name:"class transformers.Constraint",anchor:"transformers.Constraint",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L5"}}),Qo=new m$({props:{code:`completed = False
while not completed:
    _, completed = constraint.update(constraint.advance())`,highlighted:`completed = <span class="hljs-literal">False</span>
<span class="hljs-keyword">while</span> <span class="hljs-keyword">not</span> completed:
    _, completed = constraint.update(constraint.advance())`}}),Zo=new b({props:{name:"advance",anchor:"transformers.Constraint.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L48",returnDescription:`
<p>Must be a tensor of a list of indexable tokens, not some integer.</p>
`,returnType:`
<p>token_ids(<code>torch.tensor</code>)</p>
`}}),en=new b({props:{name:"copy",anchor:"transformers.Constraint.copy",parameters:[{name:"stateful",val:" = False"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L113",returnDescription:`
<p>The same constraint as the one being called from.</p>
`,returnType:`
<p>constraint(<code>Constraint</code>)</p>
`}}),tn=new b({props:{name:"does_advance",anchor:"transformers.Constraint.does_advance",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L60"}}),rn=new b({props:{name:"remaining",anchor:"transformers.Constraint.remaining",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L104"}}),nn=new b({props:{name:"reset",anchor:"transformers.Constraint.reset",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L94"}}),sn=new b({props:{name:"test",anchor:"transformers.Constraint.test",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L24"}}),an=new b({props:{name:"update",anchor:"transformers.Constraint.update",parameters:[{name:"token_id",val:": int"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L69",returnDescription:`
<p>Whether this constraint has become one step closer to being fulfuilled.
completed(<code>bool</code>):
Whether this constraint has been completely fulfilled by this token being generated.
reset (<code>bool</code>):
Whether this constraint has reset its progress by this token being generated.</p>
`,returnType:`
<p>stepped(<code>bool</code>)</p>
`}}),ln=new b({props:{name:"class transformers.PhrasalConstraint",anchor:"transformers.PhrasalConstraint",parameters:[{name:"token_ids",val:": typing.List[int]"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L129",parametersDescription:[{anchor:"transformers.PhrasalConstraint.token_ids",description:`<strong>token_ids</strong> (<code>List[int]</code>) &#x2014;
The id of the token that must be generated by the output.`,name:"token_ids"}]}}),dn=new b({props:{name:"class transformers.DisjunctiveConstraint",anchor:"transformers.DisjunctiveConstraint",parameters:[{name:"nested_token_ids",val:": typing.List[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L260",parametersDescription:[{anchor:"transformers.DisjunctiveConstraint.nested_token_ids",description:"<strong>nested_token_ids</strong> (<code>List[List[int]]</code>) &#x2014; a list of words, where each word is a list of ids. This constraint",name:"nested_token_ids"},{anchor:"transformers.DisjunctiveConstraint.is",description:"<strong>is</strong> fulfilled by generating just one from the list of words. &#x2014;",name:"is"}]}}),mn=new b({props:{name:"class transformers.ConstraintListState",anchor:"transformers.ConstraintListState",parameters:[{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L349",parametersDescription:[{anchor:"transformers.ConstraintListState.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of <a href="/docs/transformers/pr_16602/en/internal/generation_utils#transformers.Constraint">Constraint</a> objects that must be fulfilled by the beam scorer.`,name:"constraints"}]}}),fn=new b({props:{name:"advance",anchor:"transformers.ConstraintListState.advance",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L381"}}),hn=new b({props:{name:"reset",anchor:"transformers.ConstraintListState.reset",parameters:[{name:"token_ids",val:": typing.Optional[typing.List[int]]"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_constraints.py#L416"}}),gn=new Se({}),un=new b({props:{name:"class transformers.BeamScorer",anchor:"transformers.BeamScorer",parameters:[],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_search.py#L88"}}),_n=new b({props:{name:"process",anchor:"transformers.BeamScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_search.py#L94",parametersDescription:[{anchor:"transformers.BeamScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.BeamScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.BeamScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.BeamScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of all
non-finished beams.</li>
<li><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be added
to the non-finished beam_hypotheses.</li>
<li><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),vn=new b({props:{name:"finalize",anchor:"transformers.BeamScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_search.py#L106",parametersDescription:[{anchor:"transformers.BeamScorer.finalize.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.BeamScorer.finalize.final_beam_scores",description:`<strong>final_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The final scores of all non-finished beams.`,name:"final_beam_scores"},{anchor:"transformers.BeamScorer.finalize.final_beam_tokens",description:`<strong>final_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The last tokens to be added to the non-finished beam_hypotheses.`,name:"final_beam_tokens"},{anchor:"transformers.BeamScorer.finalize.final_beam_indices",description:`<strong>final_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) &#x2014;
The beam indices indicating to which beam the <code>final_beam_tokens</code> shall be added.`,name:"final_beam_indices"},{anchor:"transformers.BeamScorer.finalize.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.BeamScorer.finalize.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>The generated sequences.
The second dimension (sequence_length) is either equal to <code>max_length</code> or shorter if all batches finished early
due to the <code>eos_token_id</code>.</p>
`,returnType:`
<p><code>torch.LongTensor</code> of shape <code>(batch_size * num_return_sequences, sequence_length)</code></p>
`}}),bn=new b({props:{name:"class transformers.BeamSearchScorer",anchor:"transformers.BeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_search.py#L120",parametersDescription:[{anchor:"transformers.BeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.BeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.BeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.BeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.BeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.BeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.BeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.BeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),kn=new b({props:{name:"process",anchor:"transformers.BeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_search.py#L206"}}),wn=new b({props:{name:"finalize",anchor:"transformers.BeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_search.py#L291"}}),Ln=new b({props:{name:"class transformers.ConstrainedBeamSearchScorer",anchor:"transformers.ConstrainedBeamSearchScorer",parameters:[{name:"batch_size",val:": int"},{name:"num_beams",val:": int"},{name:"constraints",val:": typing.List[transformers.generation_beam_constraints.Constraint]"},{name:"device",val:": device"},{name:"length_penalty",val:": typing.Optional[float] = 1.0"},{name:"do_early_stopping",val:": typing.Optional[bool] = False"},{name:"num_beam_hyps_to_keep",val:": typing.Optional[int] = 1"},{name:"num_beam_groups",val:": typing.Optional[int] = 1"},{name:"**kwargs",val:""}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_search.py#L356",parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.batch_size",description:`<strong>batch_size</strong> (<code>int</code>) &#x2014;
Batch Size of <code>input_ids</code> for which standard beam search decoding is run in parallel.`,name:"batch_size"},{anchor:"transformers.ConstrainedBeamSearchScorer.max_length",description:`<strong>max_length</strong> (<code>int</code>) &#x2014;
The maximum length of the sequence to be generated.`,name:"max_length"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beams",description:`<strong>num_beams</strong> (<code>int</code>) &#x2014;
Number of beams for beam search.`,name:"num_beams"},{anchor:"transformers.ConstrainedBeamSearchScorer.constraints",description:`<strong>constraints</strong> (<code>List[Constraint]</code>) &#x2014;
A list of positive constraints represented as <code>Constraint</code> objects that must be fulfilled in the generation
output. For more information, the documentation of <a href="/docs/transformers/pr_16602/en/internal/generation_utils#transformers.Constraint">Constraint</a> should be read.`,name:"constraints"},{anchor:"transformers.ConstrainedBeamSearchScorer.device",description:`<strong>device</strong> (<code>torch.device</code>) &#x2014;
Defines the device type (<em>e.g.</em>, <code>&quot;cpu&quot;</code> or <code>&quot;cuda&quot;</code>) on which this instance of <code>BeamSearchScorer</code> will be
allocated.`,name:"device"},{anchor:"transformers.ConstrainedBeamSearchScorer.length_penalty",description:`<strong>length_penalty</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
Exponential penalty to the length. 1.0 means no penalty. Set to values &lt; 1.0 in order to encourage the
model to generate shorter sequences, to a value &gt; 1.0 in order to encourage the model to produce longer
sequences.`,name:"length_penalty"},{anchor:"transformers.ConstrainedBeamSearchScorer.do_early_stopping",description:`<strong>do_early_stopping</strong> (<code>bool</code>, <em>optional</em>, defaults to <code>False</code>) &#x2014;
Whether to stop the beam search when at least <code>num_beams</code> sentences are finished per batch or not.`,name:"do_early_stopping"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_hyps_to_keep",description:`<strong>num_beam_hyps_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
The number of beam hypotheses that shall be returned upon calling
<code>finalize</code>.`,name:"num_beam_hyps_to_keep"},{anchor:"transformers.ConstrainedBeamSearchScorer.num_beam_groups",description:`<strong>num_beam_groups</strong> (<code>int</code>) &#x2014;
Number of groups to divide <code>num_beams</code> into in order to ensure diversity among different groups of beams.
See <a href="https://arxiv.org/pdf/1610.02424.pdf" rel="nofollow">this paper</a> for more details.`,name:"num_beam_groups"}]}}),xn=new b({props:{name:"process",anchor:"transformers.ConstrainedBeamSearchScorer.process",parameters:[{name:"input_ids",val:": LongTensor"},{name:"next_scores",val:": FloatTensor"},{name:"next_tokens",val:": LongTensor"},{name:"next_indices",val:": LongTensor"},{name:"scores_for_all_vocab",val:": FloatTensor"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_search.py#L450",parametersDescription:[{anchor:"transformers.ConstrainedBeamSearchScorer.process.input_ids",description:`<strong>input_ids</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
Indices of input sequence tokens in the vocabulary.</p>
<p>Indices can be obtained using any class inheriting from <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizer">PreTrainedTokenizer</a>. See
<a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.encode">PreTrainedTokenizer.encode()</a> and <a href="/docs/transformers/pr_16602/en/main_classes/tokenizer#transformers.PreTrainedTokenizerFast.__call__">PreTrainedTokenizer.<strong>call</strong>()</a> for details.</p>
<p><a href="../glossary#input-ids">What are input IDs?</a>`,name:"input_ids"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_scores",description:`<strong>next_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Current scores of the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_scores"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_tokens",description:`<strong>next_tokens</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
<code>input_ids</code> of the tokens corresponding to the top <code>2 * num_beams</code> non-finished beam hypotheses.`,name:"next_tokens"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.next_indices",description:`<strong>next_indices</strong> (<code>torch.LongTensor</code> of shape <code>(batch_size, 2 * num_beams)</code>) &#x2014;
Beam indices indicating to which beam hypothesis the <code>next_tokens</code> correspond.`,name:"next_indices"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.scores_for_all_vocab",description:`<strong>scores_for_all_vocab</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams, sequence_length)</code>) &#x2014;
The scores of all tokens in the vocabulary for each of the beam hypotheses.`,name:"scores_for_all_vocab"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.pad_token_id",description:`<strong>pad_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>padding</em> token.`,name:"pad_token_id"},{anchor:"transformers.ConstrainedBeamSearchScorer.process.eos_token_id",description:`<strong>eos_token_id</strong> (<code>int</code>, <em>optional</em>) &#x2014;
The id of the <em>end-of-sequence</em> token.`,name:"eos_token_id"}],returnDescription:`
<p>A dictionary composed of the fields as defined above:</p>
<ul>
<li>
<p><strong>next_beam_scores</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Updated scores of
all
non-finished beams.</p>
</li>
<li>
<p><strong>next_beam_tokens</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Next tokens to be
added
to the non-finished beam_hypotheses.</p>
</li>
<li>
<p><strong>next_beam_indices</strong> (<code>torch.FloatTensor</code> of shape <code>(batch_size * num_beams)</code>) \u2014 Beam indices
indicating to which beam the next tokens shall be added.</p>
</li>
</ul>
`,returnType:`
<p><code>UserDict</code></p>
`}}),En=new b({props:{name:"finalize",anchor:"transformers.ConstrainedBeamSearchScorer.finalize",parameters:[{name:"input_ids",val:": LongTensor"},{name:"final_beam_scores",val:": FloatTensor"},{name:"final_beam_tokens",val:": LongTensor"},{name:"final_beam_indices",val:": LongTensor"},{name:"max_length",val:": int"},{name:"pad_token_id",val:": typing.Optional[int] = None"},{name:"eos_token_id",val:": typing.Optional[int] = None"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_beam_search.py#L725"}}),Pn=new Se({}),Fn=new b({props:{name:"transformers.top_k_top_p_filtering",anchor:"transformers.top_k_top_p_filtering",parameters:[{name:"logits",val:": FloatTensor"},{name:"top_k",val:": int = 0"},{name:"top_p",val:": float = 1.0"},{name:"filter_value",val:": float = -inf"},{name:"min_tokens_to_keep",val:": int = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_utils.py#L3285",parametersDescription:[{anchor:"transformers.top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),zn=new b({props:{name:"transformers.tf_top_k_top_p_filtering",anchor:"transformers.tf_top_k_top_p_filtering",parameters:[{name:"logits",val:""},{name:"top_k",val:" = 0"},{name:"top_p",val:" = 1.0"},{name:"filter_value",val:" = -inf"},{name:"min_tokens_to_keep",val:" = 1"}],source:"https://github.com/huggingface/transformers/blob/pr_16602/src/transformers/generation_tf_utils.py#L2336",parametersDescription:[{anchor:"transformers.tf_top_k_top_p_filtering.top_k",description:`<strong>top_k</strong> (<code>int</code>, <em>optional</em>, defaults to 0) &#x2014;
If &gt; 0, only keep the top k tokens with highest probability (top-k filtering)`,name:"top_k"},{anchor:"transformers.tf_top_k_top_p_filtering.top_p",description:`<strong>top_p</strong> (<code>float</code>, <em>optional</em>, defaults to 1.0) &#x2014;
If &lt; 1.0, only keep the top tokens with cumulative probability &gt;= top_p (nucleus filtering). Nucleus
filtering is described in Holtzman et al. (<a href="http://arxiv.org/abs/1904.09751" rel="nofollow">http://arxiv.org/abs/1904.09751</a>)`,name:"top_p"},{anchor:"transformers.tf_top_k_top_p_filtering.min_tokens_to_keep",description:`<strong>min_tokens_to_keep</strong> (<code>int</code>, <em>optional</em>, defaults to 1) &#x2014;
Minimumber of tokens we keep per batch example in the output.`,name:"min_tokens_to_keep"}]}}),{c(){We=o("meta"),Xl=c(),Ve=o("h1"),mt=o("a"),Mi=o("span"),f(Zt.$$.fragment),Tm=c(),Gi=o("span"),ym=a("Utilities for Generation"),Jl=c(),y=o("p"),km=a("This page lists all the utility functions used by "),qn=o("a"),wm=a("generate()"),Lm=a(`,
`),Bn=o("a"),xm=a("greedy_search()"),Em=a(`,
`),In=o("a"),Pm=a("sample()"),Fm=a(`,
`),An=o("a"),Dm=a("beam_search()"),zm=a(`,
`),Cn=o("a"),Sm=a("beam_sample()"),Om=a(`,
`),Nn=o("a"),qm=a("group_beam_search()"),Bm=a(`, and
`),Wn=o("a"),Im=a("constrained_beam_search()"),Am=a("."),Ql=c(),Vn=o("p"),Cm=a("Most of those are only useful if you are studying the code of the generate methods in the library."),Zl=c(),Me=o("h2"),ft=o("a"),ji=o("span"),f(er.$$.fragment),Nm=c(),Hi=o("span"),Wm=a("Generate Outputs"),ed=c(),N=o("p"),Vm=a("The output of "),Mn=o("a"),Mm=a("generate()"),Gm=a(` is an instance of a subclass of
`),Gn=o("a"),jm=a("ModelOutput"),Hm=a(`. This output is a data structure containing all the information returned
by `),jn=o("a"),Rm=a("generate()"),Km=a(", but that can also be used as tuple or dictionary."),td=c(),Hn=o("p"),Um=a("Here\u2019s an example:"),rd=c(),f(tr.$$.fragment),od=c(),Oe=o("p"),Ym=a("The "),Ri=o("code"),Xm=a("generation_output"),Jm=a(" object is a "),Rn=o("a"),Qm=a("GreedySearchDecoderOnlyOutput"),Zm=a(`, as we can
see in the documentation of that class below, it means it has the following attributes:`),nd=c(),W=o("ul"),Kn=o("li"),Ki=o("code"),ef=a("sequences"),tf=a(": the generated sequences of tokens"),rf=c(),Un=o("li"),Ui=o("code"),of=a("scores"),nf=a(" (optional): the prediction scores of the language modelling head, for each generation step"),sf=c(),Yn=o("li"),Yi=o("code"),af=a("hidden_states"),cf=a(" (optional): the hidden states of the model, for each generation step"),lf=c(),Xn=o("li"),Xi=o("code"),df=a("attentions"),pf=a(" (optional): the attention weights of the model, for each generation step"),sd=c(),k=o("p"),mf=a("Here we have the "),Ji=o("code"),ff=a("scores"),hf=a(" since we passed along "),Qi=o("code"),gf=a("output_scores=True"),uf=a(", but we don\u2019t have "),Zi=o("code"),_f=a("hidden_states"),vf=a(` and
`),ec=o("code"),bf=a("attentions"),$f=a(" because we didn\u2019t pass "),tc=o("code"),Tf=a("output_hidden_states=True"),yf=a(" or "),rc=o("code"),kf=a("output_attentions=True"),wf=a("."),ad=c(),F=o("p"),Lf=a(`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),oc=o("code"),xf=a("None"),Ef=a(". Here for instance "),nc=o("code"),Pf=a("generation_output.scores"),Ff=a(` are all the generated prediction scores of the
language modeling head, and `),sc=o("code"),Df=a("generation_output.attentions"),zf=a(" is "),ac=o("code"),Sf=a("None"),Of=a("."),id=c(),D=o("p"),qf=a("When using our "),ic=o("code"),Bf=a("generation_output"),If=a(" object as a tuple, it only keeps the attributes that don\u2019t have "),cc=o("code"),Af=a("None"),Cf=a(` values.
Here, for instance, it has two elements, `),lc=o("code"),Nf=a("loss"),Wf=a(" then "),dc=o("code"),Vf=a("logits"),Mf=a(", so"),cd=c(),f(rr.$$.fragment),ld=c(),ht=o("p"),Gf=a("will return the tuple "),pc=o("code"),jf=a("(generation_output.sequences, generation_output.scores)"),Hf=a(" for instance."),dd=c(),z=o("p"),Rf=a("When using our "),mc=o("code"),Kf=a("generation_output"),Uf=a(" object as a dictionary, it only keeps the attributes that don\u2019t have "),fc=o("code"),Yf=a("None"),Xf=a(`
values. Here, for instance, it has two keys that are `),hc=o("code"),Jf=a("sequences"),Qf=a(" and "),gc=o("code"),Zf=a("scores"),eh=a("."),pd=c(),Jn=o("p"),th=a("We document here all output types."),md=c(),Ge=o("h3"),gt=o("a"),uc=o("span"),f(or.$$.fragment),rh=c(),_c=o("span"),oh=a("GreedySearchOutput"),fd=c(),je=o("div"),f(nr.$$.fragment),nh=c(),vc=o("p"),sh=a("Base class for outputs of decoder-only generation models using greedy search."),hd=c(),He=o("div"),f(sr.$$.fragment),ah=c(),bc=o("p"),ih=a(`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),gd=c(),j=o("div"),f(ar.$$.fragment),ch=c(),$c=o("p"),lh=a("Flax Base class for outputs of decoder-only generation models using greedy search."),dh=c(),ut=o("div"),f(ir.$$.fragment),ph=c(),Tc=o("p"),mh=a("\u201CReturns a new object replacing the specified fields with new values."),ud=c(),Re=o("h3"),_t=o("a"),yc=o("span"),f(cr.$$.fragment),fh=c(),kc=o("span"),hh=a("SampleOutput"),_d=c(),Ke=o("div"),f(lr.$$.fragment),gh=c(),wc=o("p"),uh=a("Base class for outputs of decoder-only generation models using sampling."),vd=c(),Ue=o("div"),f(dr.$$.fragment),_h=c(),Lc=o("p"),vh=a(`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),bd=c(),H=o("div"),f(pr.$$.fragment),bh=c(),xc=o("p"),$h=a("Flax Base class for outputs of decoder-only generation models using sampling."),Th=c(),vt=o("div"),f(mr.$$.fragment),yh=c(),Ec=o("p"),kh=a("\u201CReturns a new object replacing the specified fields with new values."),$d=c(),Ye=o("h3"),bt=o("a"),Pc=o("span"),f(fr.$$.fragment),wh=c(),Fc=o("span"),Lh=a("BeamSearchOutput"),Td=c(),Xe=o("div"),f(hr.$$.fragment),xh=c(),Dc=o("p"),Eh=a("Base class for outputs of decoder-only generation models using beam search."),yd=c(),Je=o("div"),f(gr.$$.fragment),Ph=c(),zc=o("p"),Fh=a(`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),kd=c(),Qe=o("h3"),$t=o("a"),Sc=o("span"),f(ur.$$.fragment),Dh=c(),Oc=o("span"),zh=a("BeamSampleOutput"),wd=c(),Ze=o("div"),f(_r.$$.fragment),Sh=c(),qc=o("p"),Oh=a("Base class for outputs of decoder-only generation models using beam sample."),Ld=c(),et=o("div"),f(vr.$$.fragment),qh=c(),Bc=o("p"),Bh=a(`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),xd=c(),tt=o("h2"),Tt=o("a"),Ic=o("span"),f(br.$$.fragment),Ih=c(),Ac=o("span"),Ah=a("LogitsProcessor"),Ed=c(),yt=o("p"),Ch=a("A "),Qn=o("a"),Nh=a("LogitsProcessor"),Wh=a(` can be used to modify the prediction scores of a language model head for
generation.`),Pd=c(),R=o("div"),f($r.$$.fragment),Vh=c(),Cc=o("p"),Mh=a("Abstract base class for all logit processors that can be applied during generation."),Gh=c(),kt=o("div"),f(Tr.$$.fragment),jh=c(),Nc=o("p"),Hh=a("Torch method for processing logits."),Fd=c(),K=o("div"),f(yr.$$.fragment),Rh=c(),w=o("p"),Kh=a("This class can be used to create a list of "),Zn=o("a"),Uh=a("LogitsProcessor"),Yh=a(" or "),es=o("a"),Xh=a("LogitsWarper"),Jh=a(` to subsequently process a
`),Wc=o("code"),Qh=a("scores"),Zh=a(" input tensor. This class inherits from list and adds a specific "),Vc=o("em"),Mc=o("strong"),eg=a("call"),tg=a(` method to apply each
`),ts=o("a"),rg=a("LogitsProcessor"),og=a(" or "),rs=o("a"),ng=a("LogitsWarper"),sg=a(" to the inputs."),ag=c(),os=o("div"),f(kr.$$.fragment),Dd=c(),U=o("div"),f(wr.$$.fragment),ig=c(),Gc=o("p"),cg=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),lg=c(),wt=o("div"),f(Lr.$$.fragment),dg=c(),jc=o("p"),pg=a("Torch method for warping logits."),zd=c(),Y=o("div"),f(xr.$$.fragment),mg=c(),ns=o("p"),ss=o("a"),fg=a("LogitsProcessor"),hg=a(" enforcing a min-length by setting EOS probability to 0."),gg=c(),as=o("div"),f(Er.$$.fragment),Sd=c(),X=o("div"),f(Pr.$$.fragment),ug=c(),is=o("p"),cs=o("a"),_g=a("LogitsWarper"),vg=a(" for temperature (exponential scaling output probability distribution)."),bg=c(),ls=o("div"),f(Fr.$$.fragment),Od=c(),J=o("div"),f(Dr.$$.fragment),$g=c(),ds=o("p"),ps=o("a"),Tg=a("LogitsProcessor"),yg=a(" enforcing an exponential penalty on repeated sequences."),kg=c(),ms=o("div"),f(zr.$$.fragment),qd=c(),Q=o("div"),f(Sr.$$.fragment),wg=c(),fs=o("p"),hs=o("a"),Lg=a("LogitsWarper"),xg=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),Eg=c(),gs=o("div"),f(Or.$$.fragment),Bd=c(),Z=o("div"),f(qr.$$.fragment),Pg=c(),us=o("p"),_s=o("a"),Fg=a("LogitsWarper"),Dg=a(" that performs top-k, i.e. restricting to the k highest probability elements."),zg=c(),vs=o("div"),f(Br.$$.fragment),Id=c(),ee=o("div"),f(Ir.$$.fragment),Sg=c(),Lt=o("p"),bs=o("a"),Og=a("LogitsProcessor"),qg=a(` that enforces no repetition of n-grams. See
`),Ar=o("a"),Bg=a("Fairseq"),Ig=a("."),Ag=c(),$s=o("div"),f(Cr.$$.fragment),Ad=c(),te=o("div"),f(Nr.$$.fragment),Cg=c(),Ts=o("p"),ys=o("a"),Ng=a("LogitsProcessor"),Wg=a(" that enforces that specified sequences will never be sampled."),Vg=c(),ks=o("div"),f(Wr.$$.fragment),Cd=c(),re=o("div"),f(Vr.$$.fragment),Mg=c(),xt=o("p"),ws=o("a"),Gg=a("LogitsProcessor"),jg=a(` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Mr=o("a"),Hg=a("Autoregressive Entity Retrieval"),Rg=a(" for more information."),Kg=c(),Ls=o("div"),f(Gr.$$.fragment),Nd=c(),oe=o("div"),f(jr.$$.fragment),Ug=c(),qe=o("p"),xs=o("a"),Yg=a("LogitsProcessor"),Xg=a(` that enforces diverse beam search. Note that this logits processor is only effective for
`),Es=o("a"),Jg=a("PreTrainedModel.group_beam_search()"),Qg=a(". See "),Hr=o("a"),Zg=a(`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),eu=a(" for more details."),tu=c(),Ps=o("div"),f(Rr.$$.fragment),Wd=c(),ne=o("div"),f(Kr.$$.fragment),ru=c(),Fs=o("p"),Ds=o("a"),ou=a("LogitsProcessor"),nu=a(" that enforces the specified token as the first generated token."),su=c(),zs=o("div"),f(Ur.$$.fragment),Vd=c(),se=o("div"),f(Yr.$$.fragment),au=c(),Et=o("p"),Ss=o("a"),iu=a("LogitsProcessor"),cu=a(" that enforces the specified token as the last generated token when "),Hc=o("code"),lu=a("max_length"),du=a(" is reached."),pu=c(),Os=o("div"),f(Xr.$$.fragment),Md=c(),ae=o("div"),f(Jr.$$.fragment),mu=c(),V=o("p"),qs=o("a"),fu=a("LogitsProcessor"),hu=a(" that removes all "),Rc=o("code"),gu=a("nan"),uu=a(" and "),Kc=o("code"),_u=a("inf"),vu=a(` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Uc=o("code"),bu=a("max_length"),$u=a(` is
reached.`),Tu=c(),Bs=o("div"),f(Qr.$$.fragment),Gd=c(),ie=o("div"),f(Zr.$$.fragment),yu=c(),Yc=o("p"),ku=a("Abstract base class for all logit processors that can be applied during generation."),wu=c(),Pt=o("div"),f(eo.$$.fragment),Lu=c(),Xc=o("p"),xu=a("TF method for processing logits."),jd=c(),ce=o("div"),f(to.$$.fragment),Eu=c(),B=o("p"),Pu=a("This class can be used to create a list of "),Is=o("a"),Fu=a("TFLogitsProcessor"),Du=a(" to subsequently process a "),Jc=o("code"),zu=a("scores"),Su=a(` input tensor.
This class inherits from list and adds a specific `),Qc=o("em"),Zc=o("strong"),Ou=a("call"),qu=a(" method to apply each "),As=o("a"),Bu=a("TFLogitsProcessor"),Iu=a(` to the
inputs.`),Au=c(),Cs=o("div"),f(ro.$$.fragment),Hd=c(),le=o("div"),f(oo.$$.fragment),Cu=c(),el=o("p"),Nu=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),Wu=c(),Ft=o("div"),f(no.$$.fragment),Vu=c(),tl=o("p"),Mu=a("TF method for warping logits."),Rd=c(),de=o("div"),f(so.$$.fragment),Gu=c(),Ns=o("p"),Ws=o("a"),ju=a("TFLogitsWarper"),Hu=a(" for temperature (exponential scaling output probability distribution)."),Ru=c(),Vs=o("div"),f(ao.$$.fragment),Kd=c(),pe=o("div"),f(io.$$.fragment),Ku=c(),Ms=o("p"),Gs=o("a"),Uu=a("TFLogitsWarper"),Yu=a(" that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),Xu=c(),js=o("div"),f(co.$$.fragment),Ud=c(),me=o("div"),f(lo.$$.fragment),Ju=c(),Hs=o("p"),Rs=o("a"),Qu=a("TFLogitsWarper"),Zu=a(" that performs top-k, i.e. restricting to the k highest probability elements."),e_=c(),Ks=o("div"),f(po.$$.fragment),Yd=c(),fe=o("div"),f(mo.$$.fragment),t_=c(),Us=o("p"),Ys=o("a"),r_=a("TFLogitsProcessor"),o_=a(" enforcing a min-length by setting EOS probability to 0."),n_=c(),Xs=o("div"),f(fo.$$.fragment),Xd=c(),he=o("div"),f(ho.$$.fragment),s_=c(),Js=o("p"),Qs=o("a"),a_=a("TFLogitsProcessor"),i_=a(" that enforces that specified sequences will never be sampled."),c_=c(),Zs=o("div"),f(go.$$.fragment),Jd=c(),ge=o("div"),f(uo.$$.fragment),l_=c(),Dt=o("p"),ea=o("a"),d_=a("TFLogitsProcessor"),p_=a(` that enforces no repetition of n-grams. See
`),_o=o("a"),m_=a("Fairseq"),f_=a("."),h_=c(),ta=o("div"),f(vo.$$.fragment),Qd=c(),ue=o("div"),f(bo.$$.fragment),g_=c(),ra=o("p"),oa=o("a"),u_=a("TFLogitsProcessor"),__=a(" enforcing an exponential penalty on repeated sequences."),v_=c(),na=o("div"),f($o.$$.fragment),Zd=c(),_e=o("div"),f(To.$$.fragment),b_=c(),rl=o("p"),$_=a("Abstract base class for all logit processors that can be applied during generation."),T_=c(),zt=o("div"),f(yo.$$.fragment),y_=c(),ol=o("p"),k_=a("Flax method for processing logits."),ep=c(),ve=o("div"),f(ko.$$.fragment),w_=c(),L=o("p"),L_=a("This class can be used to create a list of "),sa=o("a"),x_=a("FlaxLogitsProcessor"),E_=a(" or "),aa=o("a"),P_=a("FlaxLogitsWarper"),F_=a(` to subsequently process
a `),nl=o("code"),D_=a("scores"),z_=a(" input tensor. This class inherits from list and adds a specific "),sl=o("em"),al=o("strong"),S_=a("call"),O_=a(` method to apply each
`),ia=o("a"),q_=a("FlaxLogitsProcessor"),B_=a(" or "),ca=o("a"),I_=a("FlaxLogitsWarper"),A_=a(" to the inputs."),C_=c(),la=o("div"),f(wo.$$.fragment),tp=c(),be=o("div"),f(Lo.$$.fragment),N_=c(),il=o("p"),W_=a("Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),V_=c(),St=o("div"),f(xo.$$.fragment),M_=c(),cl=o("p"),G_=a("Flax method for warping logits."),rp=c(),$e=o("div"),f(Eo.$$.fragment),j_=c(),da=o("p"),pa=o("a"),H_=a("FlaxLogitsWarper"),R_=a(" for temperature (exponential scaling output probability distribution)."),K_=c(),ma=o("div"),f(Po.$$.fragment),op=c(),Te=o("div"),f(Fo.$$.fragment),U_=c(),fa=o("p"),ha=o("a"),Y_=a("FlaxLogitsWarper"),X_=a(" that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),J_=c(),ga=o("div"),f(Do.$$.fragment),np=c(),ye=o("div"),f(zo.$$.fragment),Q_=c(),ua=o("p"),_a=o("a"),Z_=a("FlaxLogitsWarper"),ev=a(" that performs top-k, i.e. restricting to the k highest probability elements."),tv=c(),va=o("div"),f(So.$$.fragment),sp=c(),ke=o("div"),f(Oo.$$.fragment),rv=c(),ba=o("p"),$a=o("a"),ov=a("FlaxLogitsProcessor"),nv=a(" that enforces the specified token as the first generated token."),sv=c(),Ta=o("div"),f(qo.$$.fragment),ap=c(),we=o("div"),f(Bo.$$.fragment),av=c(),Ot=o("p"),ya=o("a"),iv=a("FlaxLogitsProcessor"),cv=a(" that enforces the specified token as the last generated token when "),ll=o("code"),lv=a("max_length"),dv=a(" is reached."),pv=c(),ka=o("div"),f(Io.$$.fragment),ip=c(),Le=o("div"),f(Ao.$$.fragment),mv=c(),wa=o("p"),La=o("a"),fv=a("FlaxLogitsProcessor"),hv=a(" enforcing a min-length by setting EOS probability to 0."),gv=c(),xa=o("div"),f(Co.$$.fragment),cp=c(),rt=o("h2"),qt=o("a"),dl=o("span"),f(No.$$.fragment),uv=c(),pl=o("span"),_v=a("StoppingCriteria"),lp=c(),Bt=o("p"),vv=a("A "),Ea=o("a"),bv=a("StoppingCriteria"),$v=a(" can be used to change when to stop generation (other than EOS token)."),dp=c(),xe=o("div"),f(Wo.$$.fragment),Tv=c(),ml=o("p"),yv=a("Abstract base class for all stopping criteria that can be applied during generation."),kv=c(),Pa=o("div"),f(Vo.$$.fragment),pp=c(),ot=o("div"),f(Mo.$$.fragment),wv=c(),Fa=o("div"),f(Go.$$.fragment),mp=c(),Ee=o("div"),f(jo.$$.fragment),Lv=c(),Ho=o("p"),xv=a("This class can be used to stop generation whenever the full generated number of tokens exceeds "),fl=o("code"),Ev=a("max_length"),Pv=a(`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),Fv=c(),Da=o("div"),f(Ro.$$.fragment),fp=c(),Pe=o("div"),f(Ko.$$.fragment),Dv=c(),Uo=o("p"),zv=a(`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),hl=o("code"),Sv=a("initial_time"),Ov=a("."),qv=c(),za=o("div"),f(Yo.$$.fragment),hp=c(),nt=o("h2"),It=o("a"),gl=o("span"),f(Xo.$$.fragment),Bv=c(),ul=o("span"),Iv=a("Constraints"),gp=c(),At=o("p"),Av=a("A "),Sa=o("a"),Cv=a("Constraint"),Nv=a(" can be used to force the generation to include specific tokens or sequences in the output."),up=c(),$=o("div"),f(Jo.$$.fragment),Wv=c(),_l=o("p"),Vv=a(`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Mv=c(),vl=o("p"),Gv=a("All classes that inherit Constraint must follow the requirement that"),jv=c(),f(Qo.$$.fragment),Hv=c(),bl=o("p"),Rv=a("will always terminate (halt)."),Kv=c(),Ct=o("div"),f(Zo.$$.fragment),Uv=c(),$l=o("p"),Yv=a("When called, returns the token that would take this constraint one step closer to being fulfilled."),Xv=c(),Nt=o("div"),f(en.$$.fragment),Jv=c(),Tl=o("p"),Qv=a("Creates a new instance of this constraint."),Zv=c(),Wt=o("div"),f(tn.$$.fragment),eb=c(),yl=o("p"),tb=a("Reads in a token and returns whether it creates progress."),rb=c(),Vt=o("div"),f(rn.$$.fragment),ob=c(),on=o("p"),nb=a("Returns the number of remaining steps of "),kl=o("code"),sb=a("advance()"),ab=a(" in order to complete this constraint."),ib=c(),Mt=o("div"),f(nn.$$.fragment),cb=c(),wl=o("p"),lb=a(`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),db=c(),Gt=o("div"),f(sn.$$.fragment),pb=c(),Ll=o("p"),mb=a("Tests whether this constraint has been properly defined."),fb=c(),Be=o("div"),f(an.$$.fragment),hb=c(),cn=o("p"),gb=a(`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),xl=o("code"),ub=a("does_advance(self, token_id: int)"),_b=a("."),vb=c(),El=o("p"),bb=a(`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),_p=c(),st=o("div"),f(ln.$$.fragment),$b=c(),Oa=o("p"),qa=o("a"),Tb=a("Constraint"),yb=a(" enforcing that an ordered sequence of tokens is included in the output."),vp=c(),at=o("div"),f(dn.$$.fragment),kb=c(),pn=o("p"),wb=a("A special "),Ba=o("a"),Lb=a("Constraint"),xb=a(" that is fulfilled by fulfilling just one of several constraints."),bp=c(),I=o("div"),f(mn.$$.fragment),Eb=c(),Pl=o("p"),Pb=a("A class for beam scorers to track its progress through a list of constraints."),Fb=c(),E=o("div"),f(fn.$$.fragment),Db=c(),Fl=o("p"),zb=a(`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),Sb=c(),it=o("p"),Ob=a("Given constraints "),Dl=o("code"),qb=a("c_i = {t_ij | j == # of tokens}"),Bb=a(`, If we\u2019re not in the middle of progressing through a
specific constraint `),zl=o("code"),Ib=a("c_i"),Ab=a(", we return:"),Cb=c(),Sl=o("p"),Ol=o("code"),Nb=a("[t_k1 for k in indices of unfulfilled constraints]"),Wb=c(),Fe=o("p"),Vb=a(`If we are in the middle of a constraint, then we return:
`),ql=o("code"),Mb=a("[t_ij]"),Gb=a(", where "),Bl=o("code"),jb=a("i"),Hb=a(" is the index of the inprogress constraint, "),Il=o("code"),Rb=a("j"),Kb=a(" is the next step for the constraint."),Ub=c(),Al=o("p"),Yb=a(`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),Xb=c(),jt=o("div"),f(hn.$$.fragment),Jb=c(),Cl=o("p"),Qb=a("token_ids: the tokens generated thus far to reset the state of the progress through constraints."),$p=c(),ct=o("h2"),Ht=o("a"),Nl=o("span"),f(gn.$$.fragment),Zb=c(),Wl=o("span"),e1=a("BeamSearch"),Tp=c(),A=o("div"),f(un.$$.fragment),t1=c(),lt=o("p"),r1=a("Abstract base class for all beam scorers that are used for "),Ia=o("a"),o1=a("beam_search()"),n1=a(` and
`),Aa=o("a"),s1=a("beam_sample()"),a1=a("."),i1=c(),Ca=o("div"),f(_n.$$.fragment),c1=c(),Na=o("div"),f(vn.$$.fragment),yp=c(),x=o("div"),f(bn.$$.fragment),l1=c(),Wa=o("p"),Va=o("a"),d1=a("BeamScorer"),p1=a(" implementing standard beam search decoding."),m1=c(),$n=o("p"),f1=a("Adapted in part from "),Tn=o("a"),h1=a(`Facebook\u2019s XLM beam search
code`),g1=a("."),u1=c(),Ma=o("p"),_1=a("Reference for the diverse beam search algorithm and implementation "),yn=o("a"),v1=a(`Ashwin Kalyan\u2019s DBS
implementation`),b1=c(),Ga=o("div"),f(kn.$$.fragment),$1=c(),ja=o("div"),f(wn.$$.fragment),kp=c(),C=o("div"),f(Ln.$$.fragment),T1=c(),Ha=o("p"),Ra=o("a"),y1=a("BeamScorer"),k1=a(" implementing constrained beam search decoding."),w1=c(),Ka=o("div"),f(xn.$$.fragment),L1=c(),Ua=o("div"),f(En.$$.fragment),wp=c(),dt=o("h2"),Rt=o("a"),Vl=o("span"),f(Pn.$$.fragment),x1=c(),Ml=o("span"),E1=a("Utilities"),Lp=c(),De=o("div"),f(Fn.$$.fragment),P1=c(),Gl=o("p"),F1=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),D1=c(),Ya=o("p"),z1=a("From: "),Dn=o("a"),S1=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),xp=c(),ze=o("div"),f(zn.$$.fragment),O1=c(),jl=o("p"),q1=a("Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),B1=c(),Xa=o("p"),I1=a("From: "),Sn=o("a"),A1=a("https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),this.h()},l(e){const p=P0('[data-svelte="svelte-1phssyn"]',document.head);We=n(p,"META",{name:!0,content:!0}),p.forEach(r),Xl=l(e),Ve=n(e,"H1",{class:!0});var Pp=s(Ve);mt=n(Pp,"A",{id:!0,class:!0,href:!0});var h$=s(mt);Mi=n(h$,"SPAN",{});var g$=s(Mi);h(Zt.$$.fragment,g$),g$.forEach(r),h$.forEach(r),Tm=l(Pp),Gi=n(Pp,"SPAN",{});var u$=s(Gi);ym=i(u$,"Utilities for Generation"),u$.forEach(r),Pp.forEach(r),Jl=l(e),y=n(e,"P",{});var P=s(y);km=i(P,"This page lists all the utility functions used by "),qn=n(P,"A",{href:!0});var _$=s(qn);wm=i(_$,"generate()"),_$.forEach(r),Lm=i(P,`,
`),Bn=n(P,"A",{href:!0});var v$=s(Bn);xm=i(v$,"greedy_search()"),v$.forEach(r),Em=i(P,`,
`),In=n(P,"A",{href:!0});var b$=s(In);Pm=i(b$,"sample()"),b$.forEach(r),Fm=i(P,`,
`),An=n(P,"A",{href:!0});var $$=s(An);Dm=i($$,"beam_search()"),$$.forEach(r),zm=i(P,`,
`),Cn=n(P,"A",{href:!0});var T$=s(Cn);Sm=i(T$,"beam_sample()"),T$.forEach(r),Om=i(P,`,
`),Nn=n(P,"A",{href:!0});var y$=s(Nn);qm=i(y$,"group_beam_search()"),y$.forEach(r),Bm=i(P,`, and
`),Wn=n(P,"A",{href:!0});var k$=s(Wn);Im=i(k$,"constrained_beam_search()"),k$.forEach(r),Am=i(P,"."),P.forEach(r),Ql=l(e),Vn=n(e,"P",{});var w$=s(Vn);Cm=i(w$,"Most of those are only useful if you are studying the code of the generate methods in the library."),w$.forEach(r),Zl=l(e),Me=n(e,"H2",{class:!0});var Fp=s(Me);ft=n(Fp,"A",{id:!0,class:!0,href:!0});var L$=s(ft);ji=n(L$,"SPAN",{});var x$=s(ji);h(er.$$.fragment,x$),x$.forEach(r),L$.forEach(r),Nm=l(Fp),Hi=n(Fp,"SPAN",{});var E$=s(Hi);Wm=i(E$,"Generate Outputs"),E$.forEach(r),Fp.forEach(r),ed=l(e),N=n(e,"P",{});var Kt=s(N);Vm=i(Kt,"The output of "),Mn=n(Kt,"A",{href:!0});var P$=s(Mn);Mm=i(P$,"generate()"),P$.forEach(r),Gm=i(Kt,` is an instance of a subclass of
`),Gn=n(Kt,"A",{href:!0});var F$=s(Gn);jm=i(F$,"ModelOutput"),F$.forEach(r),Hm=i(Kt,`. This output is a data structure containing all the information returned
by `),jn=n(Kt,"A",{href:!0});var D$=s(jn);Rm=i(D$,"generate()"),D$.forEach(r),Km=i(Kt,", but that can also be used as tuple or dictionary."),Kt.forEach(r),td=l(e),Hn=n(e,"P",{});var z$=s(Hn);Um=i(z$,"Here\u2019s an example:"),z$.forEach(r),rd=l(e),h(tr.$$.fragment,e),od=l(e),Oe=n(e,"P",{});var Ja=s(Oe);Ym=i(Ja,"The "),Ri=n(Ja,"CODE",{});var S$=s(Ri);Xm=i(S$,"generation_output"),S$.forEach(r),Jm=i(Ja," object is a "),Rn=n(Ja,"A",{href:!0});var O$=s(Rn);Qm=i(O$,"GreedySearchDecoderOnlyOutput"),O$.forEach(r),Zm=i(Ja,`, as we can
see in the documentation of that class below, it means it has the following attributes:`),Ja.forEach(r),nd=l(e),W=n(e,"UL",{});var Ut=s(W);Kn=n(Ut,"LI",{});var C1=s(Kn);Ki=n(C1,"CODE",{});var q$=s(Ki);ef=i(q$,"sequences"),q$.forEach(r),tf=i(C1,": the generated sequences of tokens"),C1.forEach(r),rf=l(Ut),Un=n(Ut,"LI",{});var N1=s(Un);Ui=n(N1,"CODE",{});var B$=s(Ui);of=i(B$,"scores"),B$.forEach(r),nf=i(N1," (optional): the prediction scores of the language modelling head, for each generation step"),N1.forEach(r),sf=l(Ut),Yn=n(Ut,"LI",{});var W1=s(Yn);Yi=n(W1,"CODE",{});var I$=s(Yi);af=i(I$,"hidden_states"),I$.forEach(r),cf=i(W1," (optional): the hidden states of the model, for each generation step"),W1.forEach(r),lf=l(Ut),Xn=n(Ut,"LI",{});var V1=s(Xn);Xi=n(V1,"CODE",{});var A$=s(Xi);df=i(A$,"attentions"),A$.forEach(r),pf=i(V1," (optional): the attention weights of the model, for each generation step"),V1.forEach(r),Ut.forEach(r),sd=l(e),k=n(e,"P",{});var S=s(k);mf=i(S,"Here we have the "),Ji=n(S,"CODE",{});var C$=s(Ji);ff=i(C$,"scores"),C$.forEach(r),hf=i(S," since we passed along "),Qi=n(S,"CODE",{});var N$=s(Qi);gf=i(N$,"output_scores=True"),N$.forEach(r),uf=i(S,", but we don\u2019t have "),Zi=n(S,"CODE",{});var W$=s(Zi);_f=i(W$,"hidden_states"),W$.forEach(r),vf=i(S,` and
`),ec=n(S,"CODE",{});var V$=s(ec);bf=i(V$,"attentions"),V$.forEach(r),$f=i(S," because we didn\u2019t pass "),tc=n(S,"CODE",{});var M$=s(tc);Tf=i(M$,"output_hidden_states=True"),M$.forEach(r),yf=i(S," or "),rc=n(S,"CODE",{});var G$=s(rc);kf=i(G$,"output_attentions=True"),G$.forEach(r),wf=i(S,"."),S.forEach(r),ad=l(e),F=n(e,"P",{});var Ie=s(F);Lf=i(Ie,`You can access each attribute as you would usually do, and if that attribute has not been returned by the model, you
will get `),oc=n(Ie,"CODE",{});var j$=s(oc);xf=i(j$,"None"),j$.forEach(r),Ef=i(Ie,". Here for instance "),nc=n(Ie,"CODE",{});var H$=s(nc);Pf=i(H$,"generation_output.scores"),H$.forEach(r),Ff=i(Ie,` are all the generated prediction scores of the
language modeling head, and `),sc=n(Ie,"CODE",{});var R$=s(sc);Df=i(R$,"generation_output.attentions"),R$.forEach(r),zf=i(Ie," is "),ac=n(Ie,"CODE",{});var K$=s(ac);Sf=i(K$,"None"),K$.forEach(r),Of=i(Ie,"."),Ie.forEach(r),id=l(e),D=n(e,"P",{});var Ae=s(D);qf=i(Ae,"When using our "),ic=n(Ae,"CODE",{});var U$=s(ic);Bf=i(U$,"generation_output"),U$.forEach(r),If=i(Ae," object as a tuple, it only keeps the attributes that don\u2019t have "),cc=n(Ae,"CODE",{});var Y$=s(cc);Af=i(Y$,"None"),Y$.forEach(r),Cf=i(Ae,` values.
Here, for instance, it has two elements, `),lc=n(Ae,"CODE",{});var X$=s(lc);Nf=i(X$,"loss"),X$.forEach(r),Wf=i(Ae," then "),dc=n(Ae,"CODE",{});var J$=s(dc);Vf=i(J$,"logits"),J$.forEach(r),Mf=i(Ae,", so"),Ae.forEach(r),cd=l(e),h(rr.$$.fragment,e),ld=l(e),ht=n(e,"P",{});var Dp=s(ht);Gf=i(Dp,"will return the tuple "),pc=n(Dp,"CODE",{});var Q$=s(pc);jf=i(Q$,"(generation_output.sequences, generation_output.scores)"),Q$.forEach(r),Hf=i(Dp," for instance."),Dp.forEach(r),dd=l(e),z=n(e,"P",{});var Ce=s(z);Rf=i(Ce,"When using our "),mc=n(Ce,"CODE",{});var Z$=s(mc);Kf=i(Z$,"generation_output"),Z$.forEach(r),Uf=i(Ce," object as a dictionary, it only keeps the attributes that don\u2019t have "),fc=n(Ce,"CODE",{});var eT=s(fc);Yf=i(eT,"None"),eT.forEach(r),Xf=i(Ce,`
values. Here, for instance, it has two keys that are `),hc=n(Ce,"CODE",{});var tT=s(hc);Jf=i(tT,"sequences"),tT.forEach(r),Qf=i(Ce," and "),gc=n(Ce,"CODE",{});var rT=s(gc);Zf=i(rT,"scores"),rT.forEach(r),eh=i(Ce,"."),Ce.forEach(r),pd=l(e),Jn=n(e,"P",{});var oT=s(Jn);th=i(oT,"We document here all output types."),oT.forEach(r),md=l(e),Ge=n(e,"H3",{class:!0});var zp=s(Ge);gt=n(zp,"A",{id:!0,class:!0,href:!0});var nT=s(gt);uc=n(nT,"SPAN",{});var sT=s(uc);h(or.$$.fragment,sT),sT.forEach(r),nT.forEach(r),rh=l(zp),_c=n(zp,"SPAN",{});var aT=s(_c);oh=i(aT,"GreedySearchOutput"),aT.forEach(r),zp.forEach(r),fd=l(e),je=n(e,"DIV",{class:!0});var Sp=s(je);h(nr.$$.fragment,Sp),nh=l(Sp),vc=n(Sp,"P",{});var iT=s(vc);sh=i(iT,"Base class for outputs of decoder-only generation models using greedy search."),iT.forEach(r),Sp.forEach(r),hd=l(e),He=n(e,"DIV",{class:!0});var Op=s(He);h(sr.$$.fragment,Op),ah=l(Op),bc=n(Op,"P",{});var cT=s(bc);ih=i(cT,`Base class for outputs of encoder-decoder generation models using greedy search. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),cT.forEach(r),Op.forEach(r),gd=l(e),j=n(e,"DIV",{class:!0});var Qa=s(j);h(ar.$$.fragment,Qa),ch=l(Qa),$c=n(Qa,"P",{});var lT=s($c);lh=i(lT,"Flax Base class for outputs of decoder-only generation models using greedy search."),lT.forEach(r),dh=l(Qa),ut=n(Qa,"DIV",{class:!0});var qp=s(ut);h(ir.$$.fragment,qp),ph=l(qp),Tc=n(qp,"P",{});var dT=s(Tc);mh=i(dT,"\u201CReturns a new object replacing the specified fields with new values."),dT.forEach(r),qp.forEach(r),Qa.forEach(r),ud=l(e),Re=n(e,"H3",{class:!0});var Bp=s(Re);_t=n(Bp,"A",{id:!0,class:!0,href:!0});var pT=s(_t);yc=n(pT,"SPAN",{});var mT=s(yc);h(cr.$$.fragment,mT),mT.forEach(r),pT.forEach(r),fh=l(Bp),kc=n(Bp,"SPAN",{});var fT=s(kc);hh=i(fT,"SampleOutput"),fT.forEach(r),Bp.forEach(r),_d=l(e),Ke=n(e,"DIV",{class:!0});var Ip=s(Ke);h(lr.$$.fragment,Ip),gh=l(Ip),wc=n(Ip,"P",{});var hT=s(wc);uh=i(hT,"Base class for outputs of decoder-only generation models using sampling."),hT.forEach(r),Ip.forEach(r),vd=l(e),Ue=n(e,"DIV",{class:!0});var Ap=s(Ue);h(dr.$$.fragment,Ap),_h=l(Ap),Lc=n(Ap,"P",{});var gT=s(Lc);vh=i(gT,`Base class for outputs of encoder-decoder generation models using sampling. Hidden states and attention weights of
the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),gT.forEach(r),Ap.forEach(r),bd=l(e),H=n(e,"DIV",{class:!0});var Za=s(H);h(pr.$$.fragment,Za),bh=l(Za),xc=n(Za,"P",{});var uT=s(xc);$h=i(uT,"Flax Base class for outputs of decoder-only generation models using sampling."),uT.forEach(r),Th=l(Za),vt=n(Za,"DIV",{class:!0});var Cp=s(vt);h(mr.$$.fragment,Cp),yh=l(Cp),Ec=n(Cp,"P",{});var _T=s(Ec);kh=i(_T,"\u201CReturns a new object replacing the specified fields with new values."),_T.forEach(r),Cp.forEach(r),Za.forEach(r),$d=l(e),Ye=n(e,"H3",{class:!0});var Np=s(Ye);bt=n(Np,"A",{id:!0,class:!0,href:!0});var vT=s(bt);Pc=n(vT,"SPAN",{});var bT=s(Pc);h(fr.$$.fragment,bT),bT.forEach(r),vT.forEach(r),wh=l(Np),Fc=n(Np,"SPAN",{});var $T=s(Fc);Lh=i($T,"BeamSearchOutput"),$T.forEach(r),Np.forEach(r),Td=l(e),Xe=n(e,"DIV",{class:!0});var Wp=s(Xe);h(hr.$$.fragment,Wp),xh=l(Wp),Dc=n(Wp,"P",{});var TT=s(Dc);Eh=i(TT,"Base class for outputs of decoder-only generation models using beam search."),TT.forEach(r),Wp.forEach(r),yd=l(e),Je=n(e,"DIV",{class:!0});var Vp=s(Je);h(gr.$$.fragment,Vp),Ph=l(Vp),zc=n(Vp,"P",{});var yT=s(zc);Fh=i(yT,`Base class for outputs of encoder-decoder generation models using beam search. Hidden states and attention weights
of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the encoder_hidden_states
attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),yT.forEach(r),Vp.forEach(r),kd=l(e),Qe=n(e,"H3",{class:!0});var Mp=s(Qe);$t=n(Mp,"A",{id:!0,class:!0,href:!0});var kT=s($t);Sc=n(kT,"SPAN",{});var wT=s(Sc);h(ur.$$.fragment,wT),wT.forEach(r),kT.forEach(r),Dh=l(Mp),Oc=n(Mp,"SPAN",{});var LT=s(Oc);zh=i(LT,"BeamSampleOutput"),LT.forEach(r),Mp.forEach(r),wd=l(e),Ze=n(e,"DIV",{class:!0});var Gp=s(Ze);h(_r.$$.fragment,Gp),Sh=l(Gp),qc=n(Gp,"P",{});var xT=s(qc);Oh=i(xT,"Base class for outputs of decoder-only generation models using beam sample."),xT.forEach(r),Gp.forEach(r),Ld=l(e),et=n(e,"DIV",{class:!0});var jp=s(et);h(vr.$$.fragment,jp),qh=l(jp),Bc=n(jp,"P",{});var ET=s(Bc);Bh=i(ET,`Base class for outputs of encoder-decoder generation models using beam sampling. Hidden states and attention
weights of the decoder (respectively the encoder) can be accessed via the encoder_attentions and the
encoder_hidden_states attributes (respectively the decoder_attentions and the decoder_hidden_states attributes)`),ET.forEach(r),jp.forEach(r),xd=l(e),tt=n(e,"H2",{class:!0});var Hp=s(tt);Tt=n(Hp,"A",{id:!0,class:!0,href:!0});var PT=s(Tt);Ic=n(PT,"SPAN",{});var FT=s(Ic);h(br.$$.fragment,FT),FT.forEach(r),PT.forEach(r),Ih=l(Hp),Ac=n(Hp,"SPAN",{});var DT=s(Ac);Ah=i(DT,"LogitsProcessor"),DT.forEach(r),Hp.forEach(r),Ed=l(e),yt=n(e,"P",{});var Rp=s(yt);Ch=i(Rp,"A "),Qn=n(Rp,"A",{href:!0});var zT=s(Qn);Nh=i(zT,"LogitsProcessor"),zT.forEach(r),Wh=i(Rp,` can be used to modify the prediction scores of a language model head for
generation.`),Rp.forEach(r),Pd=l(e),R=n(e,"DIV",{class:!0});var ei=s(R);h($r.$$.fragment,ei),Vh=l(ei),Cc=n(ei,"P",{});var ST=s(Cc);Mh=i(ST,"Abstract base class for all logit processors that can be applied during generation."),ST.forEach(r),Gh=l(ei),kt=n(ei,"DIV",{class:!0});var Kp=s(kt);h(Tr.$$.fragment,Kp),jh=l(Kp),Nc=n(Kp,"P",{});var OT=s(Nc);Hh=i(OT,"Torch method for processing logits."),OT.forEach(r),Kp.forEach(r),ei.forEach(r),Fd=l(e),K=n(e,"DIV",{class:!0});var ti=s(K);h(yr.$$.fragment,ti),Rh=l(ti),w=n(ti,"P",{});var O=s(w);Kh=i(O,"This class can be used to create a list of "),Zn=n(O,"A",{href:!0});var qT=s(Zn);Uh=i(qT,"LogitsProcessor"),qT.forEach(r),Yh=i(O," or "),es=n(O,"A",{href:!0});var BT=s(es);Xh=i(BT,"LogitsWarper"),BT.forEach(r),Jh=i(O,` to subsequently process a
`),Wc=n(O,"CODE",{});var IT=s(Wc);Qh=i(IT,"scores"),IT.forEach(r),Zh=i(O," input tensor. This class inherits from list and adds a specific "),Vc=n(O,"EM",{});var AT=s(Vc);Mc=n(AT,"STRONG",{});var CT=s(Mc);eg=i(CT,"call"),CT.forEach(r),AT.forEach(r),tg=i(O,` method to apply each
`),ts=n(O,"A",{href:!0});var NT=s(ts);rg=i(NT,"LogitsProcessor"),NT.forEach(r),og=i(O," or "),rs=n(O,"A",{href:!0});var WT=s(rs);ng=i(WT,"LogitsWarper"),WT.forEach(r),sg=i(O," to the inputs."),O.forEach(r),ag=l(ti),os=n(ti,"DIV",{class:!0});var VT=s(os);h(kr.$$.fragment,VT),VT.forEach(r),ti.forEach(r),Dd=l(e),U=n(e,"DIV",{class:!0});var ri=s(U);h(wr.$$.fragment,ri),ig=l(ri),Gc=n(ri,"P",{});var MT=s(Gc);cg=i(MT,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),MT.forEach(r),lg=l(ri),wt=n(ri,"DIV",{class:!0});var Up=s(wt);h(Lr.$$.fragment,Up),dg=l(Up),jc=n(Up,"P",{});var GT=s(jc);pg=i(GT,"Torch method for warping logits."),GT.forEach(r),Up.forEach(r),ri.forEach(r),zd=l(e),Y=n(e,"DIV",{class:!0});var oi=s(Y);h(xr.$$.fragment,oi),mg=l(oi),ns=n(oi,"P",{});var M1=s(ns);ss=n(M1,"A",{href:!0});var jT=s(ss);fg=i(jT,"LogitsProcessor"),jT.forEach(r),hg=i(M1," enforcing a min-length by setting EOS probability to 0."),M1.forEach(r),gg=l(oi),as=n(oi,"DIV",{class:!0});var HT=s(as);h(Er.$$.fragment,HT),HT.forEach(r),oi.forEach(r),Sd=l(e),X=n(e,"DIV",{class:!0});var ni=s(X);h(Pr.$$.fragment,ni),ug=l(ni),is=n(ni,"P",{});var G1=s(is);cs=n(G1,"A",{href:!0});var RT=s(cs);_g=i(RT,"LogitsWarper"),RT.forEach(r),vg=i(G1," for temperature (exponential scaling output probability distribution)."),G1.forEach(r),bg=l(ni),ls=n(ni,"DIV",{class:!0});var KT=s(ls);h(Fr.$$.fragment,KT),KT.forEach(r),ni.forEach(r),Od=l(e),J=n(e,"DIV",{class:!0});var si=s(J);h(Dr.$$.fragment,si),$g=l(si),ds=n(si,"P",{});var j1=s(ds);ps=n(j1,"A",{href:!0});var UT=s(ps);Tg=i(UT,"LogitsProcessor"),UT.forEach(r),yg=i(j1," enforcing an exponential penalty on repeated sequences."),j1.forEach(r),kg=l(si),ms=n(si,"DIV",{class:!0});var YT=s(ms);h(zr.$$.fragment,YT),YT.forEach(r),si.forEach(r),qd=l(e),Q=n(e,"DIV",{class:!0});var ai=s(Q);h(Sr.$$.fragment,ai),wg=l(ai),fs=n(ai,"P",{});var H1=s(fs);hs=n(H1,"A",{href:!0});var XT=s(hs);Lg=i(XT,"LogitsWarper"),XT.forEach(r),xg=i(H1," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),H1.forEach(r),Eg=l(ai),gs=n(ai,"DIV",{class:!0});var JT=s(gs);h(Or.$$.fragment,JT),JT.forEach(r),ai.forEach(r),Bd=l(e),Z=n(e,"DIV",{class:!0});var ii=s(Z);h(qr.$$.fragment,ii),Pg=l(ii),us=n(ii,"P",{});var R1=s(us);_s=n(R1,"A",{href:!0});var QT=s(_s);Fg=i(QT,"LogitsWarper"),QT.forEach(r),Dg=i(R1," that performs top-k, i.e. restricting to the k highest probability elements."),R1.forEach(r),zg=l(ii),vs=n(ii,"DIV",{class:!0});var ZT=s(vs);h(Br.$$.fragment,ZT),ZT.forEach(r),ii.forEach(r),Id=l(e),ee=n(e,"DIV",{class:!0});var ci=s(ee);h(Ir.$$.fragment,ci),Sg=l(ci),Lt=n(ci,"P",{});var Hl=s(Lt);bs=n(Hl,"A",{href:!0});var e2=s(bs);Og=i(e2,"LogitsProcessor"),e2.forEach(r),qg=i(Hl,` that enforces no repetition of n-grams. See
`),Ar=n(Hl,"A",{href:!0,rel:!0});var t2=s(Ar);Bg=i(t2,"Fairseq"),t2.forEach(r),Ig=i(Hl,"."),Hl.forEach(r),Ag=l(ci),$s=n(ci,"DIV",{class:!0});var r2=s($s);h(Cr.$$.fragment,r2),r2.forEach(r),ci.forEach(r),Ad=l(e),te=n(e,"DIV",{class:!0});var li=s(te);h(Nr.$$.fragment,li),Cg=l(li),Ts=n(li,"P",{});var K1=s(Ts);ys=n(K1,"A",{href:!0});var o2=s(ys);Ng=i(o2,"LogitsProcessor"),o2.forEach(r),Wg=i(K1," that enforces that specified sequences will never be sampled."),K1.forEach(r),Vg=l(li),ks=n(li,"DIV",{class:!0});var n2=s(ks);h(Wr.$$.fragment,n2),n2.forEach(r),li.forEach(r),Cd=l(e),re=n(e,"DIV",{class:!0});var di=s(re);h(Vr.$$.fragment,di),Mg=l(di),xt=n(di,"P",{});var Rl=s(xt);ws=n(Rl,"A",{href:!0});var s2=s(ws);Gg=i(s2,"LogitsProcessor"),s2.forEach(r),jg=i(Rl,` that enforces constrained generation and is useful for prefix-conditioned constrained
generation. See `),Mr=n(Rl,"A",{href:!0,rel:!0});var a2=s(Mr);Hg=i(a2,"Autoregressive Entity Retrieval"),a2.forEach(r),Rg=i(Rl," for more information."),Rl.forEach(r),Kg=l(di),Ls=n(di,"DIV",{class:!0});var i2=s(Ls);h(Gr.$$.fragment,i2),i2.forEach(r),di.forEach(r),Nd=l(e),oe=n(e,"DIV",{class:!0});var pi=s(oe);h(jr.$$.fragment,pi),Ug=l(pi),qe=n(pi,"P",{});var On=s(qe);xs=n(On,"A",{href:!0});var c2=s(xs);Yg=i(c2,"LogitsProcessor"),c2.forEach(r),Xg=i(On,` that enforces diverse beam search. Note that this logits processor is only effective for
`),Es=n(On,"A",{href:!0});var l2=s(Es);Jg=i(l2,"PreTrainedModel.group_beam_search()"),l2.forEach(r),Qg=i(On,". See "),Hr=n(On,"A",{href:!0,rel:!0});var d2=s(Hr);Zg=i(d2,`Diverse Beam Search: Decoding Diverse Solutions from Neural Sequence
Models`),d2.forEach(r),eu=i(On," for more details."),On.forEach(r),tu=l(pi),Ps=n(pi,"DIV",{class:!0});var p2=s(Ps);h(Rr.$$.fragment,p2),p2.forEach(r),pi.forEach(r),Wd=l(e),ne=n(e,"DIV",{class:!0});var mi=s(ne);h(Kr.$$.fragment,mi),ru=l(mi),Fs=n(mi,"P",{});var U1=s(Fs);Ds=n(U1,"A",{href:!0});var m2=s(Ds);ou=i(m2,"LogitsProcessor"),m2.forEach(r),nu=i(U1," that enforces the specified token as the first generated token."),U1.forEach(r),su=l(mi),zs=n(mi,"DIV",{class:!0});var f2=s(zs);h(Ur.$$.fragment,f2),f2.forEach(r),mi.forEach(r),Vd=l(e),se=n(e,"DIV",{class:!0});var fi=s(se);h(Yr.$$.fragment,fi),au=l(fi),Et=n(fi,"P",{});var Kl=s(Et);Ss=n(Kl,"A",{href:!0});var h2=s(Ss);iu=i(h2,"LogitsProcessor"),h2.forEach(r),cu=i(Kl," that enforces the specified token as the last generated token when "),Hc=n(Kl,"CODE",{});var g2=s(Hc);lu=i(g2,"max_length"),g2.forEach(r),du=i(Kl," is reached."),Kl.forEach(r),pu=l(fi),Os=n(fi,"DIV",{class:!0});var u2=s(Os);h(Xr.$$.fragment,u2),u2.forEach(r),fi.forEach(r),Md=l(e),ae=n(e,"DIV",{class:!0});var hi=s(ae);h(Jr.$$.fragment,hi),mu=l(hi),V=n(hi,"P",{});var pt=s(V);qs=n(pt,"A",{href:!0});var _2=s(qs);fu=i(_2,"LogitsProcessor"),_2.forEach(r),hu=i(pt," that removes all "),Rc=n(pt,"CODE",{});var v2=s(Rc);gu=i(v2,"nan"),v2.forEach(r),uu=i(pt," and "),Kc=n(pt,"CODE",{});var b2=s(Kc);_u=i(b2,"inf"),b2.forEach(r),vu=i(pt,` values to avoid the generation method to fail. Note that using
the logits processor should only be used if necessary since it can slow down the generation method. `),Uc=n(pt,"CODE",{});var $2=s(Uc);bu=i($2,"max_length"),$2.forEach(r),$u=i(pt,` is
reached.`),pt.forEach(r),Tu=l(hi),Bs=n(hi,"DIV",{class:!0});var T2=s(Bs);h(Qr.$$.fragment,T2),T2.forEach(r),hi.forEach(r),Gd=l(e),ie=n(e,"DIV",{class:!0});var gi=s(ie);h(Zr.$$.fragment,gi),yu=l(gi),Yc=n(gi,"P",{});var y2=s(Yc);ku=i(y2,"Abstract base class for all logit processors that can be applied during generation."),y2.forEach(r),wu=l(gi),Pt=n(gi,"DIV",{class:!0});var Yp=s(Pt);h(eo.$$.fragment,Yp),Lu=l(Yp),Xc=n(Yp,"P",{});var k2=s(Xc);xu=i(k2,"TF method for processing logits."),k2.forEach(r),Yp.forEach(r),gi.forEach(r),jd=l(e),ce=n(e,"DIV",{class:!0});var ui=s(ce);h(to.$$.fragment,ui),Eu=l(ui),B=n(ui,"P",{});var Ne=s(B);Pu=i(Ne,"This class can be used to create a list of "),Is=n(Ne,"A",{href:!0});var w2=s(Is);Fu=i(w2,"TFLogitsProcessor"),w2.forEach(r),Du=i(Ne," to subsequently process a "),Jc=n(Ne,"CODE",{});var L2=s(Jc);zu=i(L2,"scores"),L2.forEach(r),Su=i(Ne,` input tensor.
This class inherits from list and adds a specific `),Qc=n(Ne,"EM",{});var x2=s(Qc);Zc=n(x2,"STRONG",{});var E2=s(Zc);Ou=i(E2,"call"),E2.forEach(r),x2.forEach(r),qu=i(Ne," method to apply each "),As=n(Ne,"A",{href:!0});var P2=s(As);Bu=i(P2,"TFLogitsProcessor"),P2.forEach(r),Iu=i(Ne,` to the
inputs.`),Ne.forEach(r),Au=l(ui),Cs=n(ui,"DIV",{class:!0});var F2=s(Cs);h(ro.$$.fragment,F2),F2.forEach(r),ui.forEach(r),Hd=l(e),le=n(e,"DIV",{class:!0});var _i=s(le);h(oo.$$.fragment,_i),Cu=l(_i),el=n(_i,"P",{});var D2=s(el);Nu=i(D2,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),D2.forEach(r),Wu=l(_i),Ft=n(_i,"DIV",{class:!0});var Xp=s(Ft);h(no.$$.fragment,Xp),Vu=l(Xp),tl=n(Xp,"P",{});var z2=s(tl);Mu=i(z2,"TF method for warping logits."),z2.forEach(r),Xp.forEach(r),_i.forEach(r),Rd=l(e),de=n(e,"DIV",{class:!0});var vi=s(de);h(so.$$.fragment,vi),Gu=l(vi),Ns=n(vi,"P",{});var Y1=s(Ns);Ws=n(Y1,"A",{href:!0});var S2=s(Ws);ju=i(S2,"TFLogitsWarper"),S2.forEach(r),Hu=i(Y1," for temperature (exponential scaling output probability distribution)."),Y1.forEach(r),Ru=l(vi),Vs=n(vi,"DIV",{class:!0});var O2=s(Vs);h(ao.$$.fragment,O2),O2.forEach(r),vi.forEach(r),Kd=l(e),pe=n(e,"DIV",{class:!0});var bi=s(pe);h(io.$$.fragment,bi),Ku=l(bi),Ms=n(bi,"P",{});var X1=s(Ms);Gs=n(X1,"A",{href:!0});var q2=s(Gs);Uu=i(q2,"TFLogitsWarper"),q2.forEach(r),Yu=i(X1," that performs top-p, i.e. restricting to top tokens summing to <= prob_cut_off."),X1.forEach(r),Xu=l(bi),js=n(bi,"DIV",{class:!0});var B2=s(js);h(co.$$.fragment,B2),B2.forEach(r),bi.forEach(r),Ud=l(e),me=n(e,"DIV",{class:!0});var $i=s(me);h(lo.$$.fragment,$i),Ju=l($i),Hs=n($i,"P",{});var J1=s(Hs);Rs=n(J1,"A",{href:!0});var I2=s(Rs);Qu=i(I2,"TFLogitsWarper"),I2.forEach(r),Zu=i(J1," that performs top-k, i.e. restricting to the k highest probability elements."),J1.forEach(r),e_=l($i),Ks=n($i,"DIV",{class:!0});var A2=s(Ks);h(po.$$.fragment,A2),A2.forEach(r),$i.forEach(r),Yd=l(e),fe=n(e,"DIV",{class:!0});var Ti=s(fe);h(mo.$$.fragment,Ti),t_=l(Ti),Us=n(Ti,"P",{});var Q1=s(Us);Ys=n(Q1,"A",{href:!0});var C2=s(Ys);r_=i(C2,"TFLogitsProcessor"),C2.forEach(r),o_=i(Q1," enforcing a min-length by setting EOS probability to 0."),Q1.forEach(r),n_=l(Ti),Xs=n(Ti,"DIV",{class:!0});var N2=s(Xs);h(fo.$$.fragment,N2),N2.forEach(r),Ti.forEach(r),Xd=l(e),he=n(e,"DIV",{class:!0});var yi=s(he);h(ho.$$.fragment,yi),s_=l(yi),Js=n(yi,"P",{});var Z1=s(Js);Qs=n(Z1,"A",{href:!0});var W2=s(Qs);a_=i(W2,"TFLogitsProcessor"),W2.forEach(r),i_=i(Z1," that enforces that specified sequences will never be sampled."),Z1.forEach(r),c_=l(yi),Zs=n(yi,"DIV",{class:!0});var V2=s(Zs);h(go.$$.fragment,V2),V2.forEach(r),yi.forEach(r),Jd=l(e),ge=n(e,"DIV",{class:!0});var ki=s(ge);h(uo.$$.fragment,ki),l_=l(ki),Dt=n(ki,"P",{});var Ul=s(Dt);ea=n(Ul,"A",{href:!0});var M2=s(ea);d_=i(M2,"TFLogitsProcessor"),M2.forEach(r),p_=i(Ul,` that enforces no repetition of n-grams. See
`),_o=n(Ul,"A",{href:!0,rel:!0});var G2=s(_o);m_=i(G2,"Fairseq"),G2.forEach(r),f_=i(Ul,"."),Ul.forEach(r),h_=l(ki),ta=n(ki,"DIV",{class:!0});var j2=s(ta);h(vo.$$.fragment,j2),j2.forEach(r),ki.forEach(r),Qd=l(e),ue=n(e,"DIV",{class:!0});var wi=s(ue);h(bo.$$.fragment,wi),g_=l(wi),ra=n(wi,"P",{});var e$=s(ra);oa=n(e$,"A",{href:!0});var H2=s(oa);u_=i(H2,"TFLogitsProcessor"),H2.forEach(r),__=i(e$," enforcing an exponential penalty on repeated sequences."),e$.forEach(r),v_=l(wi),na=n(wi,"DIV",{class:!0});var R2=s(na);h($o.$$.fragment,R2),R2.forEach(r),wi.forEach(r),Zd=l(e),_e=n(e,"DIV",{class:!0});var Li=s(_e);h(To.$$.fragment,Li),b_=l(Li),rl=n(Li,"P",{});var K2=s(rl);$_=i(K2,"Abstract base class for all logit processors that can be applied during generation."),K2.forEach(r),T_=l(Li),zt=n(Li,"DIV",{class:!0});var Jp=s(zt);h(yo.$$.fragment,Jp),y_=l(Jp),ol=n(Jp,"P",{});var U2=s(ol);k_=i(U2,"Flax method for processing logits."),U2.forEach(r),Jp.forEach(r),Li.forEach(r),ep=l(e),ve=n(e,"DIV",{class:!0});var xi=s(ve);h(ko.$$.fragment,xi),w_=l(xi),L=n(xi,"P",{});var q=s(L);L_=i(q,"This class can be used to create a list of "),sa=n(q,"A",{href:!0});var Y2=s(sa);x_=i(Y2,"FlaxLogitsProcessor"),Y2.forEach(r),E_=i(q," or "),aa=n(q,"A",{href:!0});var X2=s(aa);P_=i(X2,"FlaxLogitsWarper"),X2.forEach(r),F_=i(q,` to subsequently process
a `),nl=n(q,"CODE",{});var J2=s(nl);D_=i(J2,"scores"),J2.forEach(r),z_=i(q," input tensor. This class inherits from list and adds a specific "),sl=n(q,"EM",{});var Q2=s(sl);al=n(Q2,"STRONG",{});var Z2=s(al);S_=i(Z2,"call"),Z2.forEach(r),Q2.forEach(r),O_=i(q,` method to apply each
`),ia=n(q,"A",{href:!0});var ey=s(ia);q_=i(ey,"FlaxLogitsProcessor"),ey.forEach(r),B_=i(q," or "),ca=n(q,"A",{href:!0});var ty=s(ca);I_=i(ty,"FlaxLogitsWarper"),ty.forEach(r),A_=i(q," to the inputs."),q.forEach(r),C_=l(xi),la=n(xi,"DIV",{class:!0});var ry=s(la);h(wo.$$.fragment,ry),ry.forEach(r),xi.forEach(r),tp=l(e),be=n(e,"DIV",{class:!0});var Ei=s(be);h(Lo.$$.fragment,Ei),N_=l(Ei),il=n(Ei,"P",{});var oy=s(il);W_=i(oy,"Abstract base class for all logit warpers that can be applied during generation with multinomial sampling."),oy.forEach(r),V_=l(Ei),St=n(Ei,"DIV",{class:!0});var Qp=s(St);h(xo.$$.fragment,Qp),M_=l(Qp),cl=n(Qp,"P",{});var ny=s(cl);G_=i(ny,"Flax method for warping logits."),ny.forEach(r),Qp.forEach(r),Ei.forEach(r),rp=l(e),$e=n(e,"DIV",{class:!0});var Pi=s($e);h(Eo.$$.fragment,Pi),j_=l(Pi),da=n(Pi,"P",{});var t$=s(da);pa=n(t$,"A",{href:!0});var sy=s(pa);H_=i(sy,"FlaxLogitsWarper"),sy.forEach(r),R_=i(t$," for temperature (exponential scaling output probability distribution)."),t$.forEach(r),K_=l(Pi),ma=n(Pi,"DIV",{class:!0});var ay=s(ma);h(Po.$$.fragment,ay),ay.forEach(r),Pi.forEach(r),op=l(e),Te=n(e,"DIV",{class:!0});var Fi=s(Te);h(Fo.$$.fragment,Fi),U_=l(Fi),fa=n(Fi,"P",{});var r$=s(fa);ha=n(r$,"A",{href:!0});var iy=s(ha);Y_=i(iy,"FlaxLogitsWarper"),iy.forEach(r),X_=i(r$," that performs top-p, i.e. restricting to top tokens summing to prob_cut_off <= prob_cut_off."),r$.forEach(r),J_=l(Fi),ga=n(Fi,"DIV",{class:!0});var cy=s(ga);h(Do.$$.fragment,cy),cy.forEach(r),Fi.forEach(r),np=l(e),ye=n(e,"DIV",{class:!0});var Di=s(ye);h(zo.$$.fragment,Di),Q_=l(Di),ua=n(Di,"P",{});var o$=s(ua);_a=n(o$,"A",{href:!0});var ly=s(_a);Z_=i(ly,"FlaxLogitsWarper"),ly.forEach(r),ev=i(o$," that performs top-k, i.e. restricting to the k highest probability elements."),o$.forEach(r),tv=l(Di),va=n(Di,"DIV",{class:!0});var dy=s(va);h(So.$$.fragment,dy),dy.forEach(r),Di.forEach(r),sp=l(e),ke=n(e,"DIV",{class:!0});var zi=s(ke);h(Oo.$$.fragment,zi),rv=l(zi),ba=n(zi,"P",{});var n$=s(ba);$a=n(n$,"A",{href:!0});var py=s($a);ov=i(py,"FlaxLogitsProcessor"),py.forEach(r),nv=i(n$," that enforces the specified token as the first generated token."),n$.forEach(r),sv=l(zi),Ta=n(zi,"DIV",{class:!0});var my=s(Ta);h(qo.$$.fragment,my),my.forEach(r),zi.forEach(r),ap=l(e),we=n(e,"DIV",{class:!0});var Si=s(we);h(Bo.$$.fragment,Si),av=l(Si),Ot=n(Si,"P",{});var Yl=s(Ot);ya=n(Yl,"A",{href:!0});var fy=s(ya);iv=i(fy,"FlaxLogitsProcessor"),fy.forEach(r),cv=i(Yl," that enforces the specified token as the last generated token when "),ll=n(Yl,"CODE",{});var hy=s(ll);lv=i(hy,"max_length"),hy.forEach(r),dv=i(Yl," is reached."),Yl.forEach(r),pv=l(Si),ka=n(Si,"DIV",{class:!0});var gy=s(ka);h(Io.$$.fragment,gy),gy.forEach(r),Si.forEach(r),ip=l(e),Le=n(e,"DIV",{class:!0});var Oi=s(Le);h(Ao.$$.fragment,Oi),mv=l(Oi),wa=n(Oi,"P",{});var s$=s(wa);La=n(s$,"A",{href:!0});var uy=s(La);fv=i(uy,"FlaxLogitsProcessor"),uy.forEach(r),hv=i(s$," enforcing a min-length by setting EOS probability to 0."),s$.forEach(r),gv=l(Oi),xa=n(Oi,"DIV",{class:!0});var _y=s(xa);h(Co.$$.fragment,_y),_y.forEach(r),Oi.forEach(r),cp=l(e),rt=n(e,"H2",{class:!0});var Zp=s(rt);qt=n(Zp,"A",{id:!0,class:!0,href:!0});var vy=s(qt);dl=n(vy,"SPAN",{});var by=s(dl);h(No.$$.fragment,by),by.forEach(r),vy.forEach(r),uv=l(Zp),pl=n(Zp,"SPAN",{});var $y=s(pl);_v=i($y,"StoppingCriteria"),$y.forEach(r),Zp.forEach(r),lp=l(e),Bt=n(e,"P",{});var em=s(Bt);vv=i(em,"A "),Ea=n(em,"A",{href:!0});var Ty=s(Ea);bv=i(Ty,"StoppingCriteria"),Ty.forEach(r),$v=i(em," can be used to change when to stop generation (other than EOS token)."),em.forEach(r),dp=l(e),xe=n(e,"DIV",{class:!0});var qi=s(xe);h(Wo.$$.fragment,qi),Tv=l(qi),ml=n(qi,"P",{});var yy=s(ml);yv=i(yy,"Abstract base class for all stopping criteria that can be applied during generation."),yy.forEach(r),kv=l(qi),Pa=n(qi,"DIV",{class:!0});var ky=s(Pa);h(Vo.$$.fragment,ky),ky.forEach(r),qi.forEach(r),pp=l(e),ot=n(e,"DIV",{class:!0});var tm=s(ot);h(Mo.$$.fragment,tm),wv=l(tm),Fa=n(tm,"DIV",{class:!0});var wy=s(Fa);h(Go.$$.fragment,wy),wy.forEach(r),tm.forEach(r),mp=l(e),Ee=n(e,"DIV",{class:!0});var Bi=s(Ee);h(jo.$$.fragment,Bi),Lv=l(Bi),Ho=n(Bi,"P",{});var rm=s(Ho);xv=i(rm,"This class can be used to stop generation whenever the full generated number of tokens exceeds "),fl=n(rm,"CODE",{});var Ly=s(fl);Ev=i(Ly,"max_length"),Ly.forEach(r),Pv=i(rm,`. Keep
in mind for decoder-only type of transformers, this will include the initial prompted tokens.`),rm.forEach(r),Fv=l(Bi),Da=n(Bi,"DIV",{class:!0});var xy=s(Da);h(Ro.$$.fragment,xy),xy.forEach(r),Bi.forEach(r),fp=l(e),Pe=n(e,"DIV",{class:!0});var Ii=s(Pe);h(Ko.$$.fragment,Ii),Dv=l(Ii),Uo=n(Ii,"P",{});var om=s(Uo);zv=i(om,`This class can be used to stop generation whenever the full generation exceeds some amount of time. By default, the
time will start being counted when you initialize this function. You can override this by passing an
`),hl=n(om,"CODE",{});var Ey=s(hl);Sv=i(Ey,"initial_time"),Ey.forEach(r),Ov=i(om,"."),om.forEach(r),qv=l(Ii),za=n(Ii,"DIV",{class:!0});var Py=s(za);h(Yo.$$.fragment,Py),Py.forEach(r),Ii.forEach(r),hp=l(e),nt=n(e,"H2",{class:!0});var nm=s(nt);It=n(nm,"A",{id:!0,class:!0,href:!0});var Fy=s(It);gl=n(Fy,"SPAN",{});var Dy=s(gl);h(Xo.$$.fragment,Dy),Dy.forEach(r),Fy.forEach(r),Bv=l(nm),ul=n(nm,"SPAN",{});var zy=s(ul);Iv=i(zy,"Constraints"),zy.forEach(r),nm.forEach(r),gp=l(e),At=n(e,"P",{});var sm=s(At);Av=i(sm,"A "),Sa=n(sm,"A",{href:!0});var Sy=s(Sa);Cv=i(Sy,"Constraint"),Sy.forEach(r),Nv=i(sm," can be used to force the generation to include specific tokens or sequences in the output."),sm.forEach(r),up=l(e),$=n(e,"DIV",{class:!0});var T=s($);h(Jo.$$.fragment,T),Wv=l(T),_l=n(T,"P",{});var Oy=s(_l);Vv=i(Oy,`Abstract base class for all constraints that can be applied during generation.
It must define how the constraint can be satisfied.`),Oy.forEach(r),Mv=l(T),vl=n(T,"P",{});var qy=s(vl);Gv=i(qy,"All classes that inherit Constraint must follow the requirement that"),qy.forEach(r),jv=l(T),h(Qo.$$.fragment,T),Hv=l(T),bl=n(T,"P",{});var By=s(bl);Rv=i(By,"will always terminate (halt)."),By.forEach(r),Kv=l(T),Ct=n(T,"DIV",{class:!0});var am=s(Ct);h(Zo.$$.fragment,am),Uv=l(am),$l=n(am,"P",{});var Iy=s($l);Yv=i(Iy,"When called, returns the token that would take this constraint one step closer to being fulfilled."),Iy.forEach(r),am.forEach(r),Xv=l(T),Nt=n(T,"DIV",{class:!0});var im=s(Nt);h(en.$$.fragment,im),Jv=l(im),Tl=n(im,"P",{});var Ay=s(Tl);Qv=i(Ay,"Creates a new instance of this constraint."),Ay.forEach(r),im.forEach(r),Zv=l(T),Wt=n(T,"DIV",{class:!0});var cm=s(Wt);h(tn.$$.fragment,cm),eb=l(cm),yl=n(cm,"P",{});var Cy=s(yl);tb=i(Cy,"Reads in a token and returns whether it creates progress."),Cy.forEach(r),cm.forEach(r),rb=l(T),Vt=n(T,"DIV",{class:!0});var lm=s(Vt);h(rn.$$.fragment,lm),ob=l(lm),on=n(lm,"P",{});var dm=s(on);nb=i(dm,"Returns the number of remaining steps of "),kl=n(dm,"CODE",{});var Ny=s(kl);sb=i(Ny,"advance()"),Ny.forEach(r),ab=i(dm," in order to complete this constraint."),dm.forEach(r),lm.forEach(r),ib=l(T),Mt=n(T,"DIV",{class:!0});var pm=s(Mt);h(nn.$$.fragment,pm),cb=l(pm),wl=n(pm,"P",{});var Wy=s(wl);lb=i(Wy,`Resets the state of this constraint to its initialization. We would call this in cases where the fulfillment of
a constraint is abrupted by an unwanted token.`),Wy.forEach(r),pm.forEach(r),db=l(T),Gt=n(T,"DIV",{class:!0});var mm=s(Gt);h(sn.$$.fragment,mm),pb=l(mm),Ll=n(mm,"P",{});var Vy=s(Ll);mb=i(Vy,"Tests whether this constraint has been properly defined."),Vy.forEach(r),mm.forEach(r),fb=l(T),Be=n(T,"DIV",{class:!0});var Ai=s(Be);h(an.$$.fragment,Ai),hb=l(Ai),cn=n(Ai,"P",{});var fm=s(cn);gb=i(fm,`Reads in a token and returns booleans that indicate the progress made by it. This function will update the
state of this object unlikes `),xl=n(fm,"CODE",{});var My=s(xl);ub=i(My,"does_advance(self, token_id: int)"),My.forEach(r),_b=i(fm,"."),fm.forEach(r),vb=l(Ai),El=n(Ai,"P",{});var Gy=s(El);bb=i(Gy,`This isn\u2019t to test whether a certain token will advance the progress; it\u2019s to update its state as if it has
been generated. This becomes important if token_id != desired token (refer to else statement in
PhrasalConstraint)`),Gy.forEach(r),Ai.forEach(r),T.forEach(r),_p=l(e),st=n(e,"DIV",{class:!0});var hm=s(st);h(ln.$$.fragment,hm),$b=l(hm),Oa=n(hm,"P",{});var a$=s(Oa);qa=n(a$,"A",{href:!0});var jy=s(qa);Tb=i(jy,"Constraint"),jy.forEach(r),yb=i(a$," enforcing that an ordered sequence of tokens is included in the output."),a$.forEach(r),hm.forEach(r),vp=l(e),at=n(e,"DIV",{class:!0});var gm=s(at);h(dn.$$.fragment,gm),kb=l(gm),pn=n(gm,"P",{});var um=s(pn);wb=i(um,"A special "),Ba=n(um,"A",{href:!0});var Hy=s(Ba);Lb=i(Hy,"Constraint"),Hy.forEach(r),xb=i(um," that is fulfilled by fulfilling just one of several constraints."),um.forEach(r),gm.forEach(r),bp=l(e),I=n(e,"DIV",{class:!0});var Yt=s(I);h(mn.$$.fragment,Yt),Eb=l(Yt),Pl=n(Yt,"P",{});var Ry=s(Pl);Pb=i(Ry,"A class for beam scorers to track its progress through a list of constraints."),Ry.forEach(r),Fb=l(Yt),E=n(Yt,"DIV",{class:!0});var M=s(E);h(fn.$$.fragment,M),Db=l(M),Fl=n(M,"P",{});var Ky=s(Fl);zb=i(Ky,`The list of tokens to generate such that we can make progress.
By \u201Clist\u201D we don\u2019t mean the list of token that will fully fulfill a constraint.`),Ky.forEach(r),Sb=l(M),it=n(M,"P",{});var Ci=s(it);Ob=i(Ci,"Given constraints "),Dl=n(Ci,"CODE",{});var Uy=s(Dl);qb=i(Uy,"c_i = {t_ij | j == # of tokens}"),Uy.forEach(r),Bb=i(Ci,`, If we\u2019re not in the middle of progressing through a
specific constraint `),zl=n(Ci,"CODE",{});var Yy=s(zl);Ib=i(Yy,"c_i"),Yy.forEach(r),Ab=i(Ci,", we return:"),Ci.forEach(r),Cb=l(M),Sl=n(M,"P",{});var Xy=s(Sl);Ol=n(Xy,"CODE",{});var Jy=s(Ol);Nb=i(Jy,"[t_k1 for k in indices of unfulfilled constraints]"),Jy.forEach(r),Xy.forEach(r),Wb=l(M),Fe=n(M,"P",{});var Xt=s(Fe);Vb=i(Xt,`If we are in the middle of a constraint, then we return:
`),ql=n(Xt,"CODE",{});var Qy=s(ql);Mb=i(Qy,"[t_ij]"),Qy.forEach(r),Gb=i(Xt,", where "),Bl=n(Xt,"CODE",{});var Zy=s(Bl);jb=i(Zy,"i"),Zy.forEach(r),Hb=i(Xt," is the index of the inprogress constraint, "),Il=n(Xt,"CODE",{});var e0=s(Il);Rb=i(e0,"j"),e0.forEach(r),Kb=i(Xt," is the next step for the constraint."),Xt.forEach(r),Ub=l(M),Al=n(M,"P",{});var t0=s(Al);Yb=i(t0,`Though we don\u2019t care which constraint is fulfilled first, if we are in the progress of fulfilling a constraint,
that\u2019s the only one we\u2019ll return.`),t0.forEach(r),M.forEach(r),Xb=l(Yt),jt=n(Yt,"DIV",{class:!0});var _m=s(jt);h(hn.$$.fragment,_m),Jb=l(_m),Cl=n(_m,"P",{});var r0=s(Cl);Qb=i(r0,"token_ids: the tokens generated thus far to reset the state of the progress through constraints."),r0.forEach(r),_m.forEach(r),Yt.forEach(r),$p=l(e),ct=n(e,"H2",{class:!0});var vm=s(ct);Ht=n(vm,"A",{id:!0,class:!0,href:!0});var o0=s(Ht);Nl=n(o0,"SPAN",{});var n0=s(Nl);h(gn.$$.fragment,n0),n0.forEach(r),o0.forEach(r),Zb=l(vm),Wl=n(vm,"SPAN",{});var s0=s(Wl);e1=i(s0,"BeamSearch"),s0.forEach(r),vm.forEach(r),Tp=l(e),A=n(e,"DIV",{class:!0});var Jt=s(A);h(un.$$.fragment,Jt),t1=l(Jt),lt=n(Jt,"P",{});var Ni=s(lt);r1=i(Ni,"Abstract base class for all beam scorers that are used for "),Ia=n(Ni,"A",{href:!0});var a0=s(Ia);o1=i(a0,"beam_search()"),a0.forEach(r),n1=i(Ni,` and
`),Aa=n(Ni,"A",{href:!0});var i0=s(Aa);s1=i(i0,"beam_sample()"),i0.forEach(r),a1=i(Ni,"."),Ni.forEach(r),i1=l(Jt),Ca=n(Jt,"DIV",{class:!0});var c0=s(Ca);h(_n.$$.fragment,c0),c0.forEach(r),c1=l(Jt),Na=n(Jt,"DIV",{class:!0});var l0=s(Na);h(vn.$$.fragment,l0),l0.forEach(r),Jt.forEach(r),yp=l(e),x=n(e,"DIV",{class:!0});var G=s(x);h(bn.$$.fragment,G),l1=l(G),Wa=n(G,"P",{});var i$=s(Wa);Va=n(i$,"A",{href:!0});var d0=s(Va);d1=i(d0,"BeamScorer"),d0.forEach(r),p1=i(i$," implementing standard beam search decoding."),i$.forEach(r),m1=l(G),$n=n(G,"P",{});var bm=s($n);f1=i(bm,"Adapted in part from "),Tn=n(bm,"A",{href:!0,rel:!0});var p0=s(Tn);h1=i(p0,`Facebook\u2019s XLM beam search
code`),p0.forEach(r),g1=i(bm,"."),bm.forEach(r),u1=l(G),Ma=n(G,"P",{});var c$=s(Ma);_1=i(c$,"Reference for the diverse beam search algorithm and implementation "),yn=n(c$,"A",{href:!0,rel:!0});var m0=s(yn);v1=i(m0,`Ashwin Kalyan\u2019s DBS
implementation`),m0.forEach(r),c$.forEach(r),b1=l(G),Ga=n(G,"DIV",{class:!0});var f0=s(Ga);h(kn.$$.fragment,f0),f0.forEach(r),$1=l(G),ja=n(G,"DIV",{class:!0});var h0=s(ja);h(wn.$$.fragment,h0),h0.forEach(r),G.forEach(r),kp=l(e),C=n(e,"DIV",{class:!0});var Qt=s(C);h(Ln.$$.fragment,Qt),T1=l(Qt),Ha=n(Qt,"P",{});var l$=s(Ha);Ra=n(l$,"A",{href:!0});var g0=s(Ra);y1=i(g0,"BeamScorer"),g0.forEach(r),k1=i(l$," implementing constrained beam search decoding."),l$.forEach(r),w1=l(Qt),Ka=n(Qt,"DIV",{class:!0});var u0=s(Ka);h(xn.$$.fragment,u0),u0.forEach(r),L1=l(Qt),Ua=n(Qt,"DIV",{class:!0});var _0=s(Ua);h(En.$$.fragment,_0),_0.forEach(r),Qt.forEach(r),wp=l(e),dt=n(e,"H2",{class:!0});var $m=s(dt);Rt=n($m,"A",{id:!0,class:!0,href:!0});var v0=s(Rt);Vl=n(v0,"SPAN",{});var b0=s(Vl);h(Pn.$$.fragment,b0),b0.forEach(r),v0.forEach(r),x1=l($m),Ml=n($m,"SPAN",{});var $0=s(Ml);E1=i($0,"Utilities"),$0.forEach(r),$m.forEach(r),Lp=l(e),De=n(e,"DIV",{class:!0});var Wi=s(De);h(Fn.$$.fragment,Wi),P1=l(Wi),Gl=n(Wi,"P",{});var T0=s(Gl);F1=i(T0,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),T0.forEach(r),D1=l(Wi),Ya=n(Wi,"P",{});var d$=s(Ya);z1=i(d$,"From: "),Dn=n(d$,"A",{href:!0,rel:!0});var y0=s(Dn);S1=i(y0,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),y0.forEach(r),d$.forEach(r),Wi.forEach(r),xp=l(e),ze=n(e,"DIV",{class:!0});var Vi=s(ze);h(zn.$$.fragment,Vi),O1=l(Vi),jl=n(Vi,"P",{});var k0=s(jl);q1=i(k0,"Filter a distribution of logits using top-k and/or nucleus (top-p) filtering"),k0.forEach(r),B1=l(Vi),Xa=n(Vi,"P",{});var p$=s(Xa);I1=i(p$,"From: "),Sn=n(p$,"A",{href:!0,rel:!0});var w0=s(Sn);A1=i(w0,"https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),w0.forEach(r),p$.forEach(r),Vi.forEach(r),this.h()},h(){d(We,"name","hf:doc:metadata"),d(We,"content",JSON.stringify(S0)),d(mt,"id","utilities-for-generation"),d(mt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(mt,"href","#utilities-for-generation"),d(Ve,"class","relative group"),d(qn,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Bn,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.greedy_search"),d(In,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.sample"),d(An,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Cn,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Nn,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Wn,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.constrained_beam_search"),d(ft,"id","generate-outputs"),d(ft,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(ft,"href","#generate-outputs"),d(Me,"class","relative group"),d(Mn,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Gn,"href","/docs/transformers/pr_16602/en/main_classes/output#transformers.utils.ModelOutput"),d(jn,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.generate"),d(Rn,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(gt,"id","transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(gt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(gt,"href","#transformers.generation_utils.GreedySearchDecoderOnlyOutput"),d(Ge,"class","relative group"),d(je,"class","docstring"),d(He,"class","docstring"),d(ut,"class","docstring"),d(j,"class","docstring"),d(_t,"id","transformers.generation_utils.SampleDecoderOnlyOutput"),d(_t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(_t,"href","#transformers.generation_utils.SampleDecoderOnlyOutput"),d(Re,"class","relative group"),d(Ke,"class","docstring"),d(Ue,"class","docstring"),d(vt,"class","docstring"),d(H,"class","docstring"),d(bt,"id","transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(bt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(bt,"href","#transformers.generation_utils.BeamSearchDecoderOnlyOutput"),d(Ye,"class","relative group"),d(Xe,"class","docstring"),d(Je,"class","docstring"),d($t,"id","transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d($t,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d($t,"href","#transformers.generation_utils.BeamSampleDecoderOnlyOutput"),d(Qe,"class","relative group"),d(Ze,"class","docstring"),d(et,"class","docstring"),d(Tt,"id","transformers.LogitsProcessor"),d(Tt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Tt,"href","#transformers.LogitsProcessor"),d(tt,"class","relative group"),d(Qn,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(kt,"class","docstring"),d(R,"class","docstring"),d(Zn,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(es,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsWarper"),d(ts,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(rs,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsWarper"),d(os,"class","docstring"),d(K,"class","docstring"),d(wt,"class","docstring"),d(U,"class","docstring"),d(ss,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(as,"class","docstring"),d(Y,"class","docstring"),d(cs,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsWarper"),d(ls,"class","docstring"),d(X,"class","docstring"),d(ps,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(ms,"class","docstring"),d(J,"class","docstring"),d(hs,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsWarper"),d(gs,"class","docstring"),d(Q,"class","docstring"),d(_s,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsWarper"),d(vs,"class","docstring"),d(Z,"class","docstring"),d(bs,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(Ar,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(Ar,"rel","nofollow"),d($s,"class","docstring"),d(ee,"class","docstring"),d(ys,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(ks,"class","docstring"),d(te,"class","docstring"),d(ws,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(Mr,"href","https://arxiv.org/abs/2010.00904"),d(Mr,"rel","nofollow"),d(Ls,"class","docstring"),d(re,"class","docstring"),d(xs,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(Es,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.group_beam_search"),d(Hr,"href","https://arxiv.org/pdf/1610.02424.pdf"),d(Hr,"rel","nofollow"),d(Ps,"class","docstring"),d(oe,"class","docstring"),d(Ds,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(zs,"class","docstring"),d(ne,"class","docstring"),d(Ss,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(Os,"class","docstring"),d(se,"class","docstring"),d(qs,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.LogitsProcessor"),d(Bs,"class","docstring"),d(ae,"class","docstring"),d(Pt,"class","docstring"),d(ie,"class","docstring"),d(Is,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(As,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Cs,"class","docstring"),d(ce,"class","docstring"),d(Ft,"class","docstring"),d(le,"class","docstring"),d(Ws,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Vs,"class","docstring"),d(de,"class","docstring"),d(Gs,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.TFLogitsWarper"),d(js,"class","docstring"),d(pe,"class","docstring"),d(Rs,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.TFLogitsWarper"),d(Ks,"class","docstring"),d(me,"class","docstring"),d(Ys,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Xs,"class","docstring"),d(fe,"class","docstring"),d(Qs,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(Zs,"class","docstring"),d(he,"class","docstring"),d(ea,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(_o,"href","https://github.com/pytorch/fairseq/blob/a07cb6f40480928c9e0548b737aadd36ee66ac76/fairseq/sequence_generator.py#L345"),d(_o,"rel","nofollow"),d(ta,"class","docstring"),d(ge,"class","docstring"),d(oa,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.TFLogitsProcessor"),d(na,"class","docstring"),d(ue,"class","docstring"),d(zt,"class","docstring"),d(_e,"class","docstring"),d(sa,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(aa,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ia,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ca,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(la,"class","docstring"),d(ve,"class","docstring"),d(St,"class","docstring"),d(be,"class","docstring"),d(pa,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ma,"class","docstring"),d($e,"class","docstring"),d(ha,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(ga,"class","docstring"),d(Te,"class","docstring"),d(_a,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsWarper"),d(va,"class","docstring"),d(ye,"class","docstring"),d($a,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(Ta,"class","docstring"),d(ke,"class","docstring"),d(ya,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(ka,"class","docstring"),d(we,"class","docstring"),d(La,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.FlaxLogitsProcessor"),d(xa,"class","docstring"),d(Le,"class","docstring"),d(qt,"id","transformers.StoppingCriteria"),d(qt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(qt,"href","#transformers.StoppingCriteria"),d(rt,"class","relative group"),d(Ea,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.StoppingCriteria"),d(Pa,"class","docstring"),d(xe,"class","docstring"),d(Fa,"class","docstring"),d(ot,"class","docstring"),d(Da,"class","docstring"),d(Ee,"class","docstring"),d(za,"class","docstring"),d(Pe,"class","docstring"),d(It,"id","transformers.Constraint"),d(It,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(It,"href","#transformers.Constraint"),d(nt,"class","relative group"),d(Sa,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.Constraint"),d(Ct,"class","docstring"),d(Nt,"class","docstring"),d(Wt,"class","docstring"),d(Vt,"class","docstring"),d(Mt,"class","docstring"),d(Gt,"class","docstring"),d(Be,"class","docstring"),d($,"class","docstring"),d(qa,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.Constraint"),d(st,"class","docstring"),d(Ba,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.Constraint"),d(at,"class","docstring"),d(E,"class","docstring"),d(jt,"class","docstring"),d(I,"class","docstring"),d(Ht,"id","transformers.BeamScorer"),d(Ht,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Ht,"href","#transformers.BeamScorer"),d(ct,"class","relative group"),d(Ia,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_search"),d(Aa,"href","/docs/transformers/pr_16602/en/main_classes/text_generation#transformers.generation_utils.GenerationMixin.beam_sample"),d(Ca,"class","docstring"),d(Na,"class","docstring"),d(A,"class","docstring"),d(Va,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.BeamScorer"),d(Tn,"href","https://github.com/facebookresearch/XLM/blob/9e6f6814d17be4fe5b15f2e6c43eb2b2d76daeb4/src/model/transformer.py#L529"),d(Tn,"rel","nofollow"),d(yn,"href","https://github.com/ashwinkalyan/dbs/blob/master/dbs/beam_utils.lua"),d(yn,"rel","nofollow"),d(Ga,"class","docstring"),d(ja,"class","docstring"),d(x,"class","docstring"),d(Ra,"href","/docs/transformers/pr_16602/en/internal/generation_utils#transformers.BeamScorer"),d(Ka,"class","docstring"),d(Ua,"class","docstring"),d(C,"class","docstring"),d(Rt,"id","transformers.top_k_top_p_filtering"),d(Rt,"class","header-link block pr-1.5 text-lg no-hover:hidden with-hover:absolute with-hover:p-1.5 with-hover:opacity-0 with-hover:group-hover:opacity-100 with-hover:right-full"),d(Rt,"href","#transformers.top_k_top_p_filtering"),d(dt,"class","relative group"),d(Dn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Dn,"rel","nofollow"),d(De,"class","docstring"),d(Sn,"href","https://gist.github.com/thomwolf/1a5a29f6962089e871b94cbd09daf317"),d(Sn,"rel","nofollow"),d(ze,"class","docstring")},m(e,p){t(document.head,We),m(e,Xl,p),m(e,Ve,p),t(Ve,mt),t(mt,Mi),g(Zt,Mi,null),t(Ve,Tm),t(Ve,Gi),t(Gi,ym),m(e,Jl,p),m(e,y,p),t(y,km),t(y,qn),t(qn,wm),t(y,Lm),t(y,Bn),t(Bn,xm),t(y,Em),t(y,In),t(In,Pm),t(y,Fm),t(y,An),t(An,Dm),t(y,zm),t(y,Cn),t(Cn,Sm),t(y,Om),t(y,Nn),t(Nn,qm),t(y,Bm),t(y,Wn),t(Wn,Im),t(y,Am),m(e,Ql,p),m(e,Vn,p),t(Vn,Cm),m(e,Zl,p),m(e,Me,p),t(Me,ft),t(ft,ji),g(er,ji,null),t(Me,Nm),t(Me,Hi),t(Hi,Wm),m(e,ed,p),m(e,N,p),t(N,Vm),t(N,Mn),t(Mn,Mm),t(N,Gm),t(N,Gn),t(Gn,jm),t(N,Hm),t(N,jn),t(jn,Rm),t(N,Km),m(e,td,p),m(e,Hn,p),t(Hn,Um),m(e,rd,p),g(tr,e,p),m(e,od,p),m(e,Oe,p),t(Oe,Ym),t(Oe,Ri),t(Ri,Xm),t(Oe,Jm),t(Oe,Rn),t(Rn,Qm),t(Oe,Zm),m(e,nd,p),m(e,W,p),t(W,Kn),t(Kn,Ki),t(Ki,ef),t(Kn,tf),t(W,rf),t(W,Un),t(Un,Ui),t(Ui,of),t(Un,nf),t(W,sf),t(W,Yn),t(Yn,Yi),t(Yi,af),t(Yn,cf),t(W,lf),t(W,Xn),t(Xn,Xi),t(Xi,df),t(Xn,pf),m(e,sd,p),m(e,k,p),t(k,mf),t(k,Ji),t(Ji,ff),t(k,hf),t(k,Qi),t(Qi,gf),t(k,uf),t(k,Zi),t(Zi,_f),t(k,vf),t(k,ec),t(ec,bf),t(k,$f),t(k,tc),t(tc,Tf),t(k,yf),t(k,rc),t(rc,kf),t(k,wf),m(e,ad,p),m(e,F,p),t(F,Lf),t(F,oc),t(oc,xf),t(F,Ef),t(F,nc),t(nc,Pf),t(F,Ff),t(F,sc),t(sc,Df),t(F,zf),t(F,ac),t(ac,Sf),t(F,Of),m(e,id,p),m(e,D,p),t(D,qf),t(D,ic),t(ic,Bf),t(D,If),t(D,cc),t(cc,Af),t(D,Cf),t(D,lc),t(lc,Nf),t(D,Wf),t(D,dc),t(dc,Vf),t(D,Mf),m(e,cd,p),g(rr,e,p),m(e,ld,p),m(e,ht,p),t(ht,Gf),t(ht,pc),t(pc,jf),t(ht,Hf),m(e,dd,p),m(e,z,p),t(z,Rf),t(z,mc),t(mc,Kf),t(z,Uf),t(z,fc),t(fc,Yf),t(z,Xf),t(z,hc),t(hc,Jf),t(z,Qf),t(z,gc),t(gc,Zf),t(z,eh),m(e,pd,p),m(e,Jn,p),t(Jn,th),m(e,md,p),m(e,Ge,p),t(Ge,gt),t(gt,uc),g(or,uc,null),t(Ge,rh),t(Ge,_c),t(_c,oh),m(e,fd,p),m(e,je,p),g(nr,je,null),t(je,nh),t(je,vc),t(vc,sh),m(e,hd,p),m(e,He,p),g(sr,He,null),t(He,ah),t(He,bc),t(bc,ih),m(e,gd,p),m(e,j,p),g(ar,j,null),t(j,ch),t(j,$c),t($c,lh),t(j,dh),t(j,ut),g(ir,ut,null),t(ut,ph),t(ut,Tc),t(Tc,mh),m(e,ud,p),m(e,Re,p),t(Re,_t),t(_t,yc),g(cr,yc,null),t(Re,fh),t(Re,kc),t(kc,hh),m(e,_d,p),m(e,Ke,p),g(lr,Ke,null),t(Ke,gh),t(Ke,wc),t(wc,uh),m(e,vd,p),m(e,Ue,p),g(dr,Ue,null),t(Ue,_h),t(Ue,Lc),t(Lc,vh),m(e,bd,p),m(e,H,p),g(pr,H,null),t(H,bh),t(H,xc),t(xc,$h),t(H,Th),t(H,vt),g(mr,vt,null),t(vt,yh),t(vt,Ec),t(Ec,kh),m(e,$d,p),m(e,Ye,p),t(Ye,bt),t(bt,Pc),g(fr,Pc,null),t(Ye,wh),t(Ye,Fc),t(Fc,Lh),m(e,Td,p),m(e,Xe,p),g(hr,Xe,null),t(Xe,xh),t(Xe,Dc),t(Dc,Eh),m(e,yd,p),m(e,Je,p),g(gr,Je,null),t(Je,Ph),t(Je,zc),t(zc,Fh),m(e,kd,p),m(e,Qe,p),t(Qe,$t),t($t,Sc),g(ur,Sc,null),t(Qe,Dh),t(Qe,Oc),t(Oc,zh),m(e,wd,p),m(e,Ze,p),g(_r,Ze,null),t(Ze,Sh),t(Ze,qc),t(qc,Oh),m(e,Ld,p),m(e,et,p),g(vr,et,null),t(et,qh),t(et,Bc),t(Bc,Bh),m(e,xd,p),m(e,tt,p),t(tt,Tt),t(Tt,Ic),g(br,Ic,null),t(tt,Ih),t(tt,Ac),t(Ac,Ah),m(e,Ed,p),m(e,yt,p),t(yt,Ch),t(yt,Qn),t(Qn,Nh),t(yt,Wh),m(e,Pd,p),m(e,R,p),g($r,R,null),t(R,Vh),t(R,Cc),t(Cc,Mh),t(R,Gh),t(R,kt),g(Tr,kt,null),t(kt,jh),t(kt,Nc),t(Nc,Hh),m(e,Fd,p),m(e,K,p),g(yr,K,null),t(K,Rh),t(K,w),t(w,Kh),t(w,Zn),t(Zn,Uh),t(w,Yh),t(w,es),t(es,Xh),t(w,Jh),t(w,Wc),t(Wc,Qh),t(w,Zh),t(w,Vc),t(Vc,Mc),t(Mc,eg),t(w,tg),t(w,ts),t(ts,rg),t(w,og),t(w,rs),t(rs,ng),t(w,sg),t(K,ag),t(K,os),g(kr,os,null),m(e,Dd,p),m(e,U,p),g(wr,U,null),t(U,ig),t(U,Gc),t(Gc,cg),t(U,lg),t(U,wt),g(Lr,wt,null),t(wt,dg),t(wt,jc),t(jc,pg),m(e,zd,p),m(e,Y,p),g(xr,Y,null),t(Y,mg),t(Y,ns),t(ns,ss),t(ss,fg),t(ns,hg),t(Y,gg),t(Y,as),g(Er,as,null),m(e,Sd,p),m(e,X,p),g(Pr,X,null),t(X,ug),t(X,is),t(is,cs),t(cs,_g),t(is,vg),t(X,bg),t(X,ls),g(Fr,ls,null),m(e,Od,p),m(e,J,p),g(Dr,J,null),t(J,$g),t(J,ds),t(ds,ps),t(ps,Tg),t(ds,yg),t(J,kg),t(J,ms),g(zr,ms,null),m(e,qd,p),m(e,Q,p),g(Sr,Q,null),t(Q,wg),t(Q,fs),t(fs,hs),t(hs,Lg),t(fs,xg),t(Q,Eg),t(Q,gs),g(Or,gs,null),m(e,Bd,p),m(e,Z,p),g(qr,Z,null),t(Z,Pg),t(Z,us),t(us,_s),t(_s,Fg),t(us,Dg),t(Z,zg),t(Z,vs),g(Br,vs,null),m(e,Id,p),m(e,ee,p),g(Ir,ee,null),t(ee,Sg),t(ee,Lt),t(Lt,bs),t(bs,Og),t(Lt,qg),t(Lt,Ar),t(Ar,Bg),t(Lt,Ig),t(ee,Ag),t(ee,$s),g(Cr,$s,null),m(e,Ad,p),m(e,te,p),g(Nr,te,null),t(te,Cg),t(te,Ts),t(Ts,ys),t(ys,Ng),t(Ts,Wg),t(te,Vg),t(te,ks),g(Wr,ks,null),m(e,Cd,p),m(e,re,p),g(Vr,re,null),t(re,Mg),t(re,xt),t(xt,ws),t(ws,Gg),t(xt,jg),t(xt,Mr),t(Mr,Hg),t(xt,Rg),t(re,Kg),t(re,Ls),g(Gr,Ls,null),m(e,Nd,p),m(e,oe,p),g(jr,oe,null),t(oe,Ug),t(oe,qe),t(qe,xs),t(xs,Yg),t(qe,Xg),t(qe,Es),t(Es,Jg),t(qe,Qg),t(qe,Hr),t(Hr,Zg),t(qe,eu),t(oe,tu),t(oe,Ps),g(Rr,Ps,null),m(e,Wd,p),m(e,ne,p),g(Kr,ne,null),t(ne,ru),t(ne,Fs),t(Fs,Ds),t(Ds,ou),t(Fs,nu),t(ne,su),t(ne,zs),g(Ur,zs,null),m(e,Vd,p),m(e,se,p),g(Yr,se,null),t(se,au),t(se,Et),t(Et,Ss),t(Ss,iu),t(Et,cu),t(Et,Hc),t(Hc,lu),t(Et,du),t(se,pu),t(se,Os),g(Xr,Os,null),m(e,Md,p),m(e,ae,p),g(Jr,ae,null),t(ae,mu),t(ae,V),t(V,qs),t(qs,fu),t(V,hu),t(V,Rc),t(Rc,gu),t(V,uu),t(V,Kc),t(Kc,_u),t(V,vu),t(V,Uc),t(Uc,bu),t(V,$u),t(ae,Tu),t(ae,Bs),g(Qr,Bs,null),m(e,Gd,p),m(e,ie,p),g(Zr,ie,null),t(ie,yu),t(ie,Yc),t(Yc,ku),t(ie,wu),t(ie,Pt),g(eo,Pt,null),t(Pt,Lu),t(Pt,Xc),t(Xc,xu),m(e,jd,p),m(e,ce,p),g(to,ce,null),t(ce,Eu),t(ce,B),t(B,Pu),t(B,Is),t(Is,Fu),t(B,Du),t(B,Jc),t(Jc,zu),t(B,Su),t(B,Qc),t(Qc,Zc),t(Zc,Ou),t(B,qu),t(B,As),t(As,Bu),t(B,Iu),t(ce,Au),t(ce,Cs),g(ro,Cs,null),m(e,Hd,p),m(e,le,p),g(oo,le,null),t(le,Cu),t(le,el),t(el,Nu),t(le,Wu),t(le,Ft),g(no,Ft,null),t(Ft,Vu),t(Ft,tl),t(tl,Mu),m(e,Rd,p),m(e,de,p),g(so,de,null),t(de,Gu),t(de,Ns),t(Ns,Ws),t(Ws,ju),t(Ns,Hu),t(de,Ru),t(de,Vs),g(ao,Vs,null),m(e,Kd,p),m(e,pe,p),g(io,pe,null),t(pe,Ku),t(pe,Ms),t(Ms,Gs),t(Gs,Uu),t(Ms,Yu),t(pe,Xu),t(pe,js),g(co,js,null),m(e,Ud,p),m(e,me,p),g(lo,me,null),t(me,Ju),t(me,Hs),t(Hs,Rs),t(Rs,Qu),t(Hs,Zu),t(me,e_),t(me,Ks),g(po,Ks,null),m(e,Yd,p),m(e,fe,p),g(mo,fe,null),t(fe,t_),t(fe,Us),t(Us,Ys),t(Ys,r_),t(Us,o_),t(fe,n_),t(fe,Xs),g(fo,Xs,null),m(e,Xd,p),m(e,he,p),g(ho,he,null),t(he,s_),t(he,Js),t(Js,Qs),t(Qs,a_),t(Js,i_),t(he,c_),t(he,Zs),g(go,Zs,null),m(e,Jd,p),m(e,ge,p),g(uo,ge,null),t(ge,l_),t(ge,Dt),t(Dt,ea),t(ea,d_),t(Dt,p_),t(Dt,_o),t(_o,m_),t(Dt,f_),t(ge,h_),t(ge,ta),g(vo,ta,null),m(e,Qd,p),m(e,ue,p),g(bo,ue,null),t(ue,g_),t(ue,ra),t(ra,oa),t(oa,u_),t(ra,__),t(ue,v_),t(ue,na),g($o,na,null),m(e,Zd,p),m(e,_e,p),g(To,_e,null),t(_e,b_),t(_e,rl),t(rl,$_),t(_e,T_),t(_e,zt),g(yo,zt,null),t(zt,y_),t(zt,ol),t(ol,k_),m(e,ep,p),m(e,ve,p),g(ko,ve,null),t(ve,w_),t(ve,L),t(L,L_),t(L,sa),t(sa,x_),t(L,E_),t(L,aa),t(aa,P_),t(L,F_),t(L,nl),t(nl,D_),t(L,z_),t(L,sl),t(sl,al),t(al,S_),t(L,O_),t(L,ia),t(ia,q_),t(L,B_),t(L,ca),t(ca,I_),t(L,A_),t(ve,C_),t(ve,la),g(wo,la,null),m(e,tp,p),m(e,be,p),g(Lo,be,null),t(be,N_),t(be,il),t(il,W_),t(be,V_),t(be,St),g(xo,St,null),t(St,M_),t(St,cl),t(cl,G_),m(e,rp,p),m(e,$e,p),g(Eo,$e,null),t($e,j_),t($e,da),t(da,pa),t(pa,H_),t(da,R_),t($e,K_),t($e,ma),g(Po,ma,null),m(e,op,p),m(e,Te,p),g(Fo,Te,null),t(Te,U_),t(Te,fa),t(fa,ha),t(ha,Y_),t(fa,X_),t(Te,J_),t(Te,ga),g(Do,ga,null),m(e,np,p),m(e,ye,p),g(zo,ye,null),t(ye,Q_),t(ye,ua),t(ua,_a),t(_a,Z_),t(ua,ev),t(ye,tv),t(ye,va),g(So,va,null),m(e,sp,p),m(e,ke,p),g(Oo,ke,null),t(ke,rv),t(ke,ba),t(ba,$a),t($a,ov),t(ba,nv),t(ke,sv),t(ke,Ta),g(qo,Ta,null),m(e,ap,p),m(e,we,p),g(Bo,we,null),t(we,av),t(we,Ot),t(Ot,ya),t(ya,iv),t(Ot,cv),t(Ot,ll),t(ll,lv),t(Ot,dv),t(we,pv),t(we,ka),g(Io,ka,null),m(e,ip,p),m(e,Le,p),g(Ao,Le,null),t(Le,mv),t(Le,wa),t(wa,La),t(La,fv),t(wa,hv),t(Le,gv),t(Le,xa),g(Co,xa,null),m(e,cp,p),m(e,rt,p),t(rt,qt),t(qt,dl),g(No,dl,null),t(rt,uv),t(rt,pl),t(pl,_v),m(e,lp,p),m(e,Bt,p),t(Bt,vv),t(Bt,Ea),t(Ea,bv),t(Bt,$v),m(e,dp,p),m(e,xe,p),g(Wo,xe,null),t(xe,Tv),t(xe,ml),t(ml,yv),t(xe,kv),t(xe,Pa),g(Vo,Pa,null),m(e,pp,p),m(e,ot,p),g(Mo,ot,null),t(ot,wv),t(ot,Fa),g(Go,Fa,null),m(e,mp,p),m(e,Ee,p),g(jo,Ee,null),t(Ee,Lv),t(Ee,Ho),t(Ho,xv),t(Ho,fl),t(fl,Ev),t(Ho,Pv),t(Ee,Fv),t(Ee,Da),g(Ro,Da,null),m(e,fp,p),m(e,Pe,p),g(Ko,Pe,null),t(Pe,Dv),t(Pe,Uo),t(Uo,zv),t(Uo,hl),t(hl,Sv),t(Uo,Ov),t(Pe,qv),t(Pe,za),g(Yo,za,null),m(e,hp,p),m(e,nt,p),t(nt,It),t(It,gl),g(Xo,gl,null),t(nt,Bv),t(nt,ul),t(ul,Iv),m(e,gp,p),m(e,At,p),t(At,Av),t(At,Sa),t(Sa,Cv),t(At,Nv),m(e,up,p),m(e,$,p),g(Jo,$,null),t($,Wv),t($,_l),t(_l,Vv),t($,Mv),t($,vl),t(vl,Gv),t($,jv),g(Qo,$,null),t($,Hv),t($,bl),t(bl,Rv),t($,Kv),t($,Ct),g(Zo,Ct,null),t(Ct,Uv),t(Ct,$l),t($l,Yv),t($,Xv),t($,Nt),g(en,Nt,null),t(Nt,Jv),t(Nt,Tl),t(Tl,Qv),t($,Zv),t($,Wt),g(tn,Wt,null),t(Wt,eb),t(Wt,yl),t(yl,tb),t($,rb),t($,Vt),g(rn,Vt,null),t(Vt,ob),t(Vt,on),t(on,nb),t(on,kl),t(kl,sb),t(on,ab),t($,ib),t($,Mt),g(nn,Mt,null),t(Mt,cb),t(Mt,wl),t(wl,lb),t($,db),t($,Gt),g(sn,Gt,null),t(Gt,pb),t(Gt,Ll),t(Ll,mb),t($,fb),t($,Be),g(an,Be,null),t(Be,hb),t(Be,cn),t(cn,gb),t(cn,xl),t(xl,ub),t(cn,_b),t(Be,vb),t(Be,El),t(El,bb),m(e,_p,p),m(e,st,p),g(ln,st,null),t(st,$b),t(st,Oa),t(Oa,qa),t(qa,Tb),t(Oa,yb),m(e,vp,p),m(e,at,p),g(dn,at,null),t(at,kb),t(at,pn),t(pn,wb),t(pn,Ba),t(Ba,Lb),t(pn,xb),m(e,bp,p),m(e,I,p),g(mn,I,null),t(I,Eb),t(I,Pl),t(Pl,Pb),t(I,Fb),t(I,E),g(fn,E,null),t(E,Db),t(E,Fl),t(Fl,zb),t(E,Sb),t(E,it),t(it,Ob),t(it,Dl),t(Dl,qb),t(it,Bb),t(it,zl),t(zl,Ib),t(it,Ab),t(E,Cb),t(E,Sl),t(Sl,Ol),t(Ol,Nb),t(E,Wb),t(E,Fe),t(Fe,Vb),t(Fe,ql),t(ql,Mb),t(Fe,Gb),t(Fe,Bl),t(Bl,jb),t(Fe,Hb),t(Fe,Il),t(Il,Rb),t(Fe,Kb),t(E,Ub),t(E,Al),t(Al,Yb),t(I,Xb),t(I,jt),g(hn,jt,null),t(jt,Jb),t(jt,Cl),t(Cl,Qb),m(e,$p,p),m(e,ct,p),t(ct,Ht),t(Ht,Nl),g(gn,Nl,null),t(ct,Zb),t(ct,Wl),t(Wl,e1),m(e,Tp,p),m(e,A,p),g(un,A,null),t(A,t1),t(A,lt),t(lt,r1),t(lt,Ia),t(Ia,o1),t(lt,n1),t(lt,Aa),t(Aa,s1),t(lt,a1),t(A,i1),t(A,Ca),g(_n,Ca,null),t(A,c1),t(A,Na),g(vn,Na,null),m(e,yp,p),m(e,x,p),g(bn,x,null),t(x,l1),t(x,Wa),t(Wa,Va),t(Va,d1),t(Wa,p1),t(x,m1),t(x,$n),t($n,f1),t($n,Tn),t(Tn,h1),t($n,g1),t(x,u1),t(x,Ma),t(Ma,_1),t(Ma,yn),t(yn,v1),t(x,b1),t(x,Ga),g(kn,Ga,null),t(x,$1),t(x,ja),g(wn,ja,null),m(e,kp,p),m(e,C,p),g(Ln,C,null),t(C,T1),t(C,Ha),t(Ha,Ra),t(Ra,y1),t(Ha,k1),t(C,w1),t(C,Ka),g(xn,Ka,null),t(C,L1),t(C,Ua),g(En,Ua,null),m(e,wp,p),m(e,dt,p),t(dt,Rt),t(Rt,Vl),g(Pn,Vl,null),t(dt,x1),t(dt,Ml),t(Ml,E1),m(e,Lp,p),m(e,De,p),g(Fn,De,null),t(De,P1),t(De,Gl),t(Gl,F1),t(De,D1),t(De,Ya),t(Ya,z1),t(Ya,Dn),t(Dn,S1),m(e,xp,p),m(e,ze,p),g(zn,ze,null),t(ze,O1),t(ze,jl),t(jl,q1),t(ze,B1),t(ze,Xa),t(Xa,I1),t(Xa,Sn),t(Sn,A1),Ep=!0},p:F0,i(e){Ep||(u(Zt.$$.fragment,e),u(er.$$.fragment,e),u(tr.$$.fragment,e),u(rr.$$.fragment,e),u(or.$$.fragment,e),u(nr.$$.fragment,e),u(sr.$$.fragment,e),u(ar.$$.fragment,e),u(ir.$$.fragment,e),u(cr.$$.fragment,e),u(lr.$$.fragment,e),u(dr.$$.fragment,e),u(pr.$$.fragment,e),u(mr.$$.fragment,e),u(fr.$$.fragment,e),u(hr.$$.fragment,e),u(gr.$$.fragment,e),u(ur.$$.fragment,e),u(_r.$$.fragment,e),u(vr.$$.fragment,e),u(br.$$.fragment,e),u($r.$$.fragment,e),u(Tr.$$.fragment,e),u(yr.$$.fragment,e),u(kr.$$.fragment,e),u(wr.$$.fragment,e),u(Lr.$$.fragment,e),u(xr.$$.fragment,e),u(Er.$$.fragment,e),u(Pr.$$.fragment,e),u(Fr.$$.fragment,e),u(Dr.$$.fragment,e),u(zr.$$.fragment,e),u(Sr.$$.fragment,e),u(Or.$$.fragment,e),u(qr.$$.fragment,e),u(Br.$$.fragment,e),u(Ir.$$.fragment,e),u(Cr.$$.fragment,e),u(Nr.$$.fragment,e),u(Wr.$$.fragment,e),u(Vr.$$.fragment,e),u(Gr.$$.fragment,e),u(jr.$$.fragment,e),u(Rr.$$.fragment,e),u(Kr.$$.fragment,e),u(Ur.$$.fragment,e),u(Yr.$$.fragment,e),u(Xr.$$.fragment,e),u(Jr.$$.fragment,e),u(Qr.$$.fragment,e),u(Zr.$$.fragment,e),u(eo.$$.fragment,e),u(to.$$.fragment,e),u(ro.$$.fragment,e),u(oo.$$.fragment,e),u(no.$$.fragment,e),u(so.$$.fragment,e),u(ao.$$.fragment,e),u(io.$$.fragment,e),u(co.$$.fragment,e),u(lo.$$.fragment,e),u(po.$$.fragment,e),u(mo.$$.fragment,e),u(fo.$$.fragment,e),u(ho.$$.fragment,e),u(go.$$.fragment,e),u(uo.$$.fragment,e),u(vo.$$.fragment,e),u(bo.$$.fragment,e),u($o.$$.fragment,e),u(To.$$.fragment,e),u(yo.$$.fragment,e),u(ko.$$.fragment,e),u(wo.$$.fragment,e),u(Lo.$$.fragment,e),u(xo.$$.fragment,e),u(Eo.$$.fragment,e),u(Po.$$.fragment,e),u(Fo.$$.fragment,e),u(Do.$$.fragment,e),u(zo.$$.fragment,e),u(So.$$.fragment,e),u(Oo.$$.fragment,e),u(qo.$$.fragment,e),u(Bo.$$.fragment,e),u(Io.$$.fragment,e),u(Ao.$$.fragment,e),u(Co.$$.fragment,e),u(No.$$.fragment,e),u(Wo.$$.fragment,e),u(Vo.$$.fragment,e),u(Mo.$$.fragment,e),u(Go.$$.fragment,e),u(jo.$$.fragment,e),u(Ro.$$.fragment,e),u(Ko.$$.fragment,e),u(Yo.$$.fragment,e),u(Xo.$$.fragment,e),u(Jo.$$.fragment,e),u(Qo.$$.fragment,e),u(Zo.$$.fragment,e),u(en.$$.fragment,e),u(tn.$$.fragment,e),u(rn.$$.fragment,e),u(nn.$$.fragment,e),u(sn.$$.fragment,e),u(an.$$.fragment,e),u(ln.$$.fragment,e),u(dn.$$.fragment,e),u(mn.$$.fragment,e),u(fn.$$.fragment,e),u(hn.$$.fragment,e),u(gn.$$.fragment,e),u(un.$$.fragment,e),u(_n.$$.fragment,e),u(vn.$$.fragment,e),u(bn.$$.fragment,e),u(kn.$$.fragment,e),u(wn.$$.fragment,e),u(Ln.$$.fragment,e),u(xn.$$.fragment,e),u(En.$$.fragment,e),u(Pn.$$.fragment,e),u(Fn.$$.fragment,e),u(zn.$$.fragment,e),Ep=!0)},o(e){_(Zt.$$.fragment,e),_(er.$$.fragment,e),_(tr.$$.fragment,e),_(rr.$$.fragment,e),_(or.$$.fragment,e),_(nr.$$.fragment,e),_(sr.$$.fragment,e),_(ar.$$.fragment,e),_(ir.$$.fragment,e),_(cr.$$.fragment,e),_(lr.$$.fragment,e),_(dr.$$.fragment,e),_(pr.$$.fragment,e),_(mr.$$.fragment,e),_(fr.$$.fragment,e),_(hr.$$.fragment,e),_(gr.$$.fragment,e),_(ur.$$.fragment,e),_(_r.$$.fragment,e),_(vr.$$.fragment,e),_(br.$$.fragment,e),_($r.$$.fragment,e),_(Tr.$$.fragment,e),_(yr.$$.fragment,e),_(kr.$$.fragment,e),_(wr.$$.fragment,e),_(Lr.$$.fragment,e),_(xr.$$.fragment,e),_(Er.$$.fragment,e),_(Pr.$$.fragment,e),_(Fr.$$.fragment,e),_(Dr.$$.fragment,e),_(zr.$$.fragment,e),_(Sr.$$.fragment,e),_(Or.$$.fragment,e),_(qr.$$.fragment,e),_(Br.$$.fragment,e),_(Ir.$$.fragment,e),_(Cr.$$.fragment,e),_(Nr.$$.fragment,e),_(Wr.$$.fragment,e),_(Vr.$$.fragment,e),_(Gr.$$.fragment,e),_(jr.$$.fragment,e),_(Rr.$$.fragment,e),_(Kr.$$.fragment,e),_(Ur.$$.fragment,e),_(Yr.$$.fragment,e),_(Xr.$$.fragment,e),_(Jr.$$.fragment,e),_(Qr.$$.fragment,e),_(Zr.$$.fragment,e),_(eo.$$.fragment,e),_(to.$$.fragment,e),_(ro.$$.fragment,e),_(oo.$$.fragment,e),_(no.$$.fragment,e),_(so.$$.fragment,e),_(ao.$$.fragment,e),_(io.$$.fragment,e),_(co.$$.fragment,e),_(lo.$$.fragment,e),_(po.$$.fragment,e),_(mo.$$.fragment,e),_(fo.$$.fragment,e),_(ho.$$.fragment,e),_(go.$$.fragment,e),_(uo.$$.fragment,e),_(vo.$$.fragment,e),_(bo.$$.fragment,e),_($o.$$.fragment,e),_(To.$$.fragment,e),_(yo.$$.fragment,e),_(ko.$$.fragment,e),_(wo.$$.fragment,e),_(Lo.$$.fragment,e),_(xo.$$.fragment,e),_(Eo.$$.fragment,e),_(Po.$$.fragment,e),_(Fo.$$.fragment,e),_(Do.$$.fragment,e),_(zo.$$.fragment,e),_(So.$$.fragment,e),_(Oo.$$.fragment,e),_(qo.$$.fragment,e),_(Bo.$$.fragment,e),_(Io.$$.fragment,e),_(Ao.$$.fragment,e),_(Co.$$.fragment,e),_(No.$$.fragment,e),_(Wo.$$.fragment,e),_(Vo.$$.fragment,e),_(Mo.$$.fragment,e),_(Go.$$.fragment,e),_(jo.$$.fragment,e),_(Ro.$$.fragment,e),_(Ko.$$.fragment,e),_(Yo.$$.fragment,e),_(Xo.$$.fragment,e),_(Jo.$$.fragment,e),_(Qo.$$.fragment,e),_(Zo.$$.fragment,e),_(en.$$.fragment,e),_(tn.$$.fragment,e),_(rn.$$.fragment,e),_(nn.$$.fragment,e),_(sn.$$.fragment,e),_(an.$$.fragment,e),_(ln.$$.fragment,e),_(dn.$$.fragment,e),_(mn.$$.fragment,e),_(fn.$$.fragment,e),_(hn.$$.fragment,e),_(gn.$$.fragment,e),_(un.$$.fragment,e),_(_n.$$.fragment,e),_(vn.$$.fragment,e),_(bn.$$.fragment,e),_(kn.$$.fragment,e),_(wn.$$.fragment,e),_(Ln.$$.fragment,e),_(xn.$$.fragment,e),_(En.$$.fragment,e),_(Pn.$$.fragment,e),_(Fn.$$.fragment,e),_(zn.$$.fragment,e),Ep=!1},d(e){r(We),e&&r(Xl),e&&r(Ve),v(Zt),e&&r(Jl),e&&r(y),e&&r(Ql),e&&r(Vn),e&&r(Zl),e&&r(Me),v(er),e&&r(ed),e&&r(N),e&&r(td),e&&r(Hn),e&&r(rd),v(tr,e),e&&r(od),e&&r(Oe),e&&r(nd),e&&r(W),e&&r(sd),e&&r(k),e&&r(ad),e&&r(F),e&&r(id),e&&r(D),e&&r(cd),v(rr,e),e&&r(ld),e&&r(ht),e&&r(dd),e&&r(z),e&&r(pd),e&&r(Jn),e&&r(md),e&&r(Ge),v(or),e&&r(fd),e&&r(je),v(nr),e&&r(hd),e&&r(He),v(sr),e&&r(gd),e&&r(j),v(ar),v(ir),e&&r(ud),e&&r(Re),v(cr),e&&r(_d),e&&r(Ke),v(lr),e&&r(vd),e&&r(Ue),v(dr),e&&r(bd),e&&r(H),v(pr),v(mr),e&&r($d),e&&r(Ye),v(fr),e&&r(Td),e&&r(Xe),v(hr),e&&r(yd),e&&r(Je),v(gr),e&&r(kd),e&&r(Qe),v(ur),e&&r(wd),e&&r(Ze),v(_r),e&&r(Ld),e&&r(et),v(vr),e&&r(xd),e&&r(tt),v(br),e&&r(Ed),e&&r(yt),e&&r(Pd),e&&r(R),v($r),v(Tr),e&&r(Fd),e&&r(K),v(yr),v(kr),e&&r(Dd),e&&r(U),v(wr),v(Lr),e&&r(zd),e&&r(Y),v(xr),v(Er),e&&r(Sd),e&&r(X),v(Pr),v(Fr),e&&r(Od),e&&r(J),v(Dr),v(zr),e&&r(qd),e&&r(Q),v(Sr),v(Or),e&&r(Bd),e&&r(Z),v(qr),v(Br),e&&r(Id),e&&r(ee),v(Ir),v(Cr),e&&r(Ad),e&&r(te),v(Nr),v(Wr),e&&r(Cd),e&&r(re),v(Vr),v(Gr),e&&r(Nd),e&&r(oe),v(jr),v(Rr),e&&r(Wd),e&&r(ne),v(Kr),v(Ur),e&&r(Vd),e&&r(se),v(Yr),v(Xr),e&&r(Md),e&&r(ae),v(Jr),v(Qr),e&&r(Gd),e&&r(ie),v(Zr),v(eo),e&&r(jd),e&&r(ce),v(to),v(ro),e&&r(Hd),e&&r(le),v(oo),v(no),e&&r(Rd),e&&r(de),v(so),v(ao),e&&r(Kd),e&&r(pe),v(io),v(co),e&&r(Ud),e&&r(me),v(lo),v(po),e&&r(Yd),e&&r(fe),v(mo),v(fo),e&&r(Xd),e&&r(he),v(ho),v(go),e&&r(Jd),e&&r(ge),v(uo),v(vo),e&&r(Qd),e&&r(ue),v(bo),v($o),e&&r(Zd),e&&r(_e),v(To),v(yo),e&&r(ep),e&&r(ve),v(ko),v(wo),e&&r(tp),e&&r(be),v(Lo),v(xo),e&&r(rp),e&&r($e),v(Eo),v(Po),e&&r(op),e&&r(Te),v(Fo),v(Do),e&&r(np),e&&r(ye),v(zo),v(So),e&&r(sp),e&&r(ke),v(Oo),v(qo),e&&r(ap),e&&r(we),v(Bo),v(Io),e&&r(ip),e&&r(Le),v(Ao),v(Co),e&&r(cp),e&&r(rt),v(No),e&&r(lp),e&&r(Bt),e&&r(dp),e&&r(xe),v(Wo),v(Vo),e&&r(pp),e&&r(ot),v(Mo),v(Go),e&&r(mp),e&&r(Ee),v(jo),v(Ro),e&&r(fp),e&&r(Pe),v(Ko),v(Yo),e&&r(hp),e&&r(nt),v(Xo),e&&r(gp),e&&r(At),e&&r(up),e&&r($),v(Jo),v(Qo),v(Zo),v(en),v(tn),v(rn),v(nn),v(sn),v(an),e&&r(_p),e&&r(st),v(ln),e&&r(vp),e&&r(at),v(dn),e&&r(bp),e&&r(I),v(mn),v(fn),v(hn),e&&r($p),e&&r(ct),v(gn),e&&r(Tp),e&&r(A),v(un),v(_n),v(vn),e&&r(yp),e&&r(x),v(bn),v(kn),v(wn),e&&r(kp),e&&r(C),v(Ln),v(xn),v(En),e&&r(wp),e&&r(dt),v(Pn),e&&r(Lp),e&&r(De),v(Fn),e&&r(xp),e&&r(ze),v(zn)}}}const S0={local:"utilities-for-generation",sections:[{local:"generate-outputs",sections:[{local:"transformers.generation_utils.GreedySearchDecoderOnlyOutput",title:"GreedySearchOutput"},{local:"transformers.generation_utils.SampleDecoderOnlyOutput",title:"SampleOutput"},{local:"transformers.generation_utils.BeamSearchDecoderOnlyOutput",title:"BeamSearchOutput"},{local:"transformers.generation_utils.BeamSampleDecoderOnlyOutput",title:"BeamSampleOutput"}],title:"Generate Outputs"},{local:"transformers.LogitsProcessor",title:"LogitsProcessor"},{local:"transformers.StoppingCriteria",title:"StoppingCriteria"},{local:"transformers.Constraint",title:"Constraints"},{local:"transformers.BeamScorer",title:"BeamSearch"},{local:"transformers.top_k_top_p_filtering",title:"Utilities"}],title:"Utilities for Generation"};function O0(f$){return D0(()=>{new URLSearchParams(window.location.search).get("fw")}),[]}class C0 extends L0{constructor(We){super();x0(this,We,O0,z0,E0,{})}}export{C0 as default,S0 as metadata};
